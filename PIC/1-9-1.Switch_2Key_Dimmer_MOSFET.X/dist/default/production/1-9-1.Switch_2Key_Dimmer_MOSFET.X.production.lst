

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Mar 30 13:51:27 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK5,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	intentry,global,class=CODE,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   172                           	psect	text152,local,class=CODE,merge=1,inline,delta=2
   173                           	psect	text153,local,class=CODE,merge=1,inline,delta=2
   174                           	psect	text154,local,class=CODE,merge=1,inline,delta=2
   175                           	psect	text155,local,class=CODE,merge=1,inline,delta=2
   176                           	dabs	1,0x7E,2
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  008C                     	;# 
   205  008D                     	;# 
   206  008E                     	;# 
   207  0090                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0099                     	;# 
   214  009A                     	;# 
   215  009B                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  0116                     	;# 
   224  0117                     	;# 
   225  011D                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  018E                     	;# 
   229  0191                     	;# 
   230  0191                     	;# 
   231  0192                     	;# 
   232  0193                     	;# 
   233  0193                     	;# 
   234  0194                     	;# 
   235  0195                     	;# 
   236  0196                     	;# 
   237  0197                     	;# 
   238  0199                     	;# 
   239  019A                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019C                     	;# 
   245  019C                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019F                     	;# 
   249  020D                     	;# 
   250  0210                     	;# 
   251  0211                     	;# 
   252  0211                     	;# 
   253  0212                     	;# 
   254  0212                     	;# 
   255  0213                     	;# 
   256  0213                     	;# 
   257  0214                     	;# 
   258  0214                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0215                     	;# 
   262  0216                     	;# 
   263  0216                     	;# 
   264  0217                     	;# 
   265  0217                     	;# 
   266  0291                     	;# 
   267  0291                     	;# 
   268  0292                     	;# 
   269  0293                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  029A                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  008C                     	;# 
   316  008D                     	;# 
   317  008E                     	;# 
   318  0090                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0095                     	;# 
   322  0096                     	;# 
   323  0097                     	;# 
   324  0099                     	;# 
   325  009A                     	;# 
   326  009B                     	;# 
   327  009B                     	;# 
   328  009C                     	;# 
   329  009D                     	;# 
   330  009E                     	;# 
   331  010C                     	;# 
   332  010D                     	;# 
   333  010E                     	;# 
   334  0116                     	;# 
   335  0117                     	;# 
   336  011D                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  018E                     	;# 
   340  0191                     	;# 
   341  0191                     	;# 
   342  0192                     	;# 
   343  0193                     	;# 
   344  0193                     	;# 
   345  0194                     	;# 
   346  0195                     	;# 
   347  0196                     	;# 
   348  0197                     	;# 
   349  0199                     	;# 
   350  019A                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019B                     	;# 
   354  019B                     	;# 
   355  019C                     	;# 
   356  019C                     	;# 
   357  019D                     	;# 
   358  019E                     	;# 
   359  019F                     	;# 
   360  020D                     	;# 
   361  0210                     	;# 
   362  0211                     	;# 
   363  0211                     	;# 
   364  0212                     	;# 
   365  0212                     	;# 
   366  0213                     	;# 
   367  0213                     	;# 
   368  0214                     	;# 
   369  0214                     	;# 
   370  0215                     	;# 
   371  0215                     	;# 
   372  0215                     	;# 
   373  0216                     	;# 
   374  0216                     	;# 
   375  0217                     	;# 
   376  0217                     	;# 
   377  0291                     	;# 
   378  0291                     	;# 
   379  0292                     	;# 
   380  0293                     	;# 
   381  0298                     	;# 
   382  0298                     	;# 
   383  0299                     	;# 
   384  029A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  0FE4                     	;# 
   389  0FE5                     	;# 
   390  0FE6                     	;# 
   391  0FE7                     	;# 
   392  0FE8                     	;# 
   393  0FE9                     	;# 
   394  0FEA                     	;# 
   395  0FEB                     	;# 
   396  0FED                     	;# 
   397  0FEE                     	;# 
   398  0FEF                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  0010                     	;# 
   415  0011                     	;# 
   416  0012                     	;# 
   417  0015                     	;# 
   418  0016                     	;# 
   419  0016                     	;# 
   420  0017                     	;# 
   421  0018                     	;# 
   422  0019                     	;# 
   423  001A                     	;# 
   424  001B                     	;# 
   425  001C                     	;# 
   426  008C                     	;# 
   427  008D                     	;# 
   428  008E                     	;# 
   429  0090                     	;# 
   430  0091                     	;# 
   431  0092                     	;# 
   432  0095                     	;# 
   433  0096                     	;# 
   434  0097                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  0116                     	;# 
   446  0117                     	;# 
   447  011D                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  018E                     	;# 
   451  0191                     	;# 
   452  0191                     	;# 
   453  0192                     	;# 
   454  0193                     	;# 
   455  0193                     	;# 
   456  0194                     	;# 
   457  0195                     	;# 
   458  0196                     	;# 
   459  0197                     	;# 
   460  0199                     	;# 
   461  019A                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019B                     	;# 
   466  019C                     	;# 
   467  019C                     	;# 
   468  019D                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  020D                     	;# 
   472  0210                     	;# 
   473  0211                     	;# 
   474  0211                     	;# 
   475  0212                     	;# 
   476  0212                     	;# 
   477  0213                     	;# 
   478  0213                     	;# 
   479  0214                     	;# 
   480  0214                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0216                     	;# 
   485  0216                     	;# 
   486  0217                     	;# 
   487  0217                     	;# 
   488  0291                     	;# 
   489  0291                     	;# 
   490  0292                     	;# 
   491  0293                     	;# 
   492  0298                     	;# 
   493  0298                     	;# 
   494  0299                     	;# 
   495  029A                     	;# 
   496  0394                     	;# 
   497  0395                     	;# 
   498  0396                     	;# 
   499  0FE4                     	;# 
   500  0FE5                     	;# 
   501  0FE6                     	;# 
   502  0FE7                     	;# 
   503  0FE8                     	;# 
   504  0FE9                     	;# 
   505  0FEA                     	;# 
   506  0FEB                     	;# 
   507  0FED                     	;# 
   508  0FEE                     	;# 
   509  0FEF                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  0010                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0015                     	;# 
   529  0016                     	;# 
   530  0016                     	;# 
   531  0017                     	;# 
   532  0018                     	;# 
   533  0019                     	;# 
   534  001A                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  008C                     	;# 
   538  008D                     	;# 
   539  008E                     	;# 
   540  0090                     	;# 
   541  0091                     	;# 
   542  0092                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  010C                     	;# 
   554  010D                     	;# 
   555  010E                     	;# 
   556  0116                     	;# 
   557  0117                     	;# 
   558  011D                     	;# 
   559  018C                     	;# 
   560  018D                     	;# 
   561  018E                     	;# 
   562  0191                     	;# 
   563  0191                     	;# 
   564  0192                     	;# 
   565  0193                     	;# 
   566  0193                     	;# 
   567  0194                     	;# 
   568  0195                     	;# 
   569  0196                     	;# 
   570  0197                     	;# 
   571  0199                     	;# 
   572  019A                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019B                     	;# 
   576  019B                     	;# 
   577  019C                     	;# 
   578  019C                     	;# 
   579  019D                     	;# 
   580  019E                     	;# 
   581  019F                     	;# 
   582  020D                     	;# 
   583  0210                     	;# 
   584  0211                     	;# 
   585  0211                     	;# 
   586  0212                     	;# 
   587  0212                     	;# 
   588  0213                     	;# 
   589  0213                     	;# 
   590  0214                     	;# 
   591  0214                     	;# 
   592  0215                     	;# 
   593  0215                     	;# 
   594  0215                     	;# 
   595  0216                     	;# 
   596  0216                     	;# 
   597  0217                     	;# 
   598  0217                     	;# 
   599  0291                     	;# 
   600  0291                     	;# 
   601  0292                     	;# 
   602  0293                     	;# 
   603  0298                     	;# 
   604  0298                     	;# 
   605  0299                     	;# 
   606  029A                     	;# 
   607  0394                     	;# 
   608  0395                     	;# 
   609  0396                     	;# 
   610  0FE4                     	;# 
   611  0FE5                     	;# 
   612  0FE6                     	;# 
   613  0FE7                     	;# 
   614  0FE8                     	;# 
   615  0FE9                     	;# 
   616  0FEA                     	;# 
   617  0FEB                     	;# 
   618  0FED                     	;# 
   619  0FEE                     	;# 
   620  0FEF                     	;# 
   621  0000                     	;# 
   622  0001                     	;# 
   623  0002                     	;# 
   624  0003                     	;# 
   625  0004                     	;# 
   626  0005                     	;# 
   627  0006                     	;# 
   628  0007                     	;# 
   629  0008                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  0010                     	;# 
   637  0011                     	;# 
   638  0012                     	;# 
   639  0015                     	;# 
   640  0016                     	;# 
   641  0016                     	;# 
   642  0017                     	;# 
   643  0018                     	;# 
   644  0019                     	;# 
   645  001A                     	;# 
   646  001B                     	;# 
   647  001C                     	;# 
   648  008C                     	;# 
   649  008D                     	;# 
   650  008E                     	;# 
   651  0090                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0095                     	;# 
   655  0096                     	;# 
   656  0097                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  010C                     	;# 
   665  010D                     	;# 
   666  010E                     	;# 
   667  0116                     	;# 
   668  0117                     	;# 
   669  011D                     	;# 
   670  018C                     	;# 
   671  018D                     	;# 
   672  018E                     	;# 
   673  0191                     	;# 
   674  0191                     	;# 
   675  0192                     	;# 
   676  0193                     	;# 
   677  0193                     	;# 
   678  0194                     	;# 
   679  0195                     	;# 
   680  0196                     	;# 
   681  0197                     	;# 
   682  0199                     	;# 
   683  019A                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020D                     	;# 
   694  0210                     	;# 
   695  0211                     	;# 
   696  0211                     	;# 
   697  0212                     	;# 
   698  0212                     	;# 
   699  0213                     	;# 
   700  0213                     	;# 
   701  0214                     	;# 
   702  0214                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0216                     	;# 
   707  0216                     	;# 
   708  0217                     	;# 
   709  0217                     	;# 
   710  0291                     	;# 
   711  0291                     	;# 
   712  0292                     	;# 
   713  0293                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  0394                     	;# 
   719  0395                     	;# 
   720  0396                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0010                     	;# 
   748  0011                     	;# 
   749  0012                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  008C                     	;# 
   760  008D                     	;# 
   761  008E                     	;# 
   762  0090                     	;# 
   763  0091                     	;# 
   764  0092                     	;# 
   765  0095                     	;# 
   766  0096                     	;# 
   767  0097                     	;# 
   768  0099                     	;# 
   769  009A                     	;# 
   770  009B                     	;# 
   771  009B                     	;# 
   772  009C                     	;# 
   773  009D                     	;# 
   774  009E                     	;# 
   775  010C                     	;# 
   776  010D                     	;# 
   777  010E                     	;# 
   778  0116                     	;# 
   779  0117                     	;# 
   780  011D                     	;# 
   781  018C                     	;# 
   782  018D                     	;# 
   783  018E                     	;# 
   784  0191                     	;# 
   785  0191                     	;# 
   786  0192                     	;# 
   787  0193                     	;# 
   788  0193                     	;# 
   789  0194                     	;# 
   790  0195                     	;# 
   791  0196                     	;# 
   792  0197                     	;# 
   793  0199                     	;# 
   794  019A                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019B                     	;# 
   799  019C                     	;# 
   800  019C                     	;# 
   801  019D                     	;# 
   802  019E                     	;# 
   803  019F                     	;# 
   804  020D                     	;# 
   805  0210                     	;# 
   806  0211                     	;# 
   807  0211                     	;# 
   808  0212                     	;# 
   809  0212                     	;# 
   810  0213                     	;# 
   811  0213                     	;# 
   812  0214                     	;# 
   813  0214                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0215                     	;# 
   817  0216                     	;# 
   818  0216                     	;# 
   819  0217                     	;# 
   820  0217                     	;# 
   821  0291                     	;# 
   822  0291                     	;# 
   823  0292                     	;# 
   824  0293                     	;# 
   825  0298                     	;# 
   826  0298                     	;# 
   827  0299                     	;# 
   828  029A                     	;# 
   829  0394                     	;# 
   830  0395                     	;# 
   831  0396                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000D                     	;# 
   857  000E                     	;# 
   858  0010                     	;# 
   859  0011                     	;# 
   860  0012                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  008C                     	;# 
   871  008D                     	;# 
   872  008E                     	;# 
   873  0090                     	;# 
   874  0091                     	;# 
   875  0092                     	;# 
   876  0095                     	;# 
   877  0096                     	;# 
   878  0097                     	;# 
   879  0099                     	;# 
   880  009A                     	;# 
   881  009B                     	;# 
   882  009B                     	;# 
   883  009C                     	;# 
   884  009D                     	;# 
   885  009E                     	;# 
   886  010C                     	;# 
   887  010D                     	;# 
   888  010E                     	;# 
   889  0116                     	;# 
   890  0117                     	;# 
   891  011D                     	;# 
   892  018C                     	;# 
   893  018D                     	;# 
   894  018E                     	;# 
   895  0191                     	;# 
   896  0191                     	;# 
   897  0192                     	;# 
   898  0193                     	;# 
   899  0193                     	;# 
   900  0194                     	;# 
   901  0195                     	;# 
   902  0196                     	;# 
   903  0197                     	;# 
   904  0199                     	;# 
   905  019A                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019B                     	;# 
   909  019B                     	;# 
   910  019C                     	;# 
   911  019C                     	;# 
   912  019D                     	;# 
   913  019E                     	;# 
   914  019F                     	;# 
   915  020D                     	;# 
   916  0210                     	;# 
   917  0211                     	;# 
   918  0211                     	;# 
   919  0212                     	;# 
   920  0212                     	;# 
   921  0213                     	;# 
   922  0213                     	;# 
   923  0214                     	;# 
   924  0214                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0216                     	;# 
   929  0216                     	;# 
   930  0217                     	;# 
   931  0217                     	;# 
   932  0291                     	;# 
   933  0291                     	;# 
   934  0292                     	;# 
   935  0293                     	;# 
   936  0298                     	;# 
   937  0298                     	;# 
   938  0299                     	;# 
   939  029A                     	;# 
   940  0394                     	;# 
   941  0395                     	;# 
   942  0396                     	;# 
   943  0FE4                     	;# 
   944  0FE5                     	;# 
   945  0FE6                     	;# 
   946  0FE7                     	;# 
   947  0FE8                     	;# 
   948  0FE9                     	;# 
   949  0FEA                     	;# 
   950  0FEB                     	;# 
   951  0FED                     	;# 
   952  0FEE                     	;# 
   953  0FEF                     	;# 
   954  0000                     	;# 
   955  0001                     	;# 
   956  0002                     	;# 
   957  0003                     	;# 
   958  0004                     	;# 
   959  0005                     	;# 
   960  0006                     	;# 
   961  0007                     	;# 
   962  0008                     	;# 
   963  0009                     	;# 
   964  000A                     	;# 
   965  000B                     	;# 
   966  000C                     	;# 
   967  000D                     	;# 
   968  000E                     	;# 
   969  0010                     	;# 
   970  0011                     	;# 
   971  0012                     	;# 
   972  0015                     	;# 
   973  0016                     	;# 
   974  0016                     	;# 
   975  0017                     	;# 
   976  0018                     	;# 
   977  0019                     	;# 
   978  001A                     	;# 
   979  001B                     	;# 
   980  001C                     	;# 
   981  008C                     	;# 
   982  008D                     	;# 
   983  008E                     	;# 
   984  0090                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0095                     	;# 
   988  0096                     	;# 
   989  0097                     	;# 
   990  0099                     	;# 
   991  009A                     	;# 
   992  009B                     	;# 
   993  009B                     	;# 
   994  009C                     	;# 
   995  009D                     	;# 
   996  009E                     	;# 
   997  010C                     	;# 
   998  010D                     	;# 
   999  010E                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  011D                     	;# 
  1003  018C                     	;# 
  1004  018D                     	;# 
  1005  018E                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0197                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019B                     	;# 
  1020  019B                     	;# 
  1021  019C                     	;# 
  1022  019C                     	;# 
  1023  019D                     	;# 
  1024  019E                     	;# 
  1025  019F                     	;# 
  1026  020D                     	;# 
  1027  0210                     	;# 
  1028  0211                     	;# 
  1029  0211                     	;# 
  1030  0212                     	;# 
  1031  0212                     	;# 
  1032  0213                     	;# 
  1033  0213                     	;# 
  1034  0214                     	;# 
  1035  0214                     	;# 
  1036  0215                     	;# 
  1037  0215                     	;# 
  1038  0215                     	;# 
  1039  0216                     	;# 
  1040  0216                     	;# 
  1041  0217                     	;# 
  1042  0217                     	;# 
  1043  0291                     	;# 
  1044  0291                     	;# 
  1045  0292                     	;# 
  1046  0293                     	;# 
  1047  0298                     	;# 
  1048  0298                     	;# 
  1049  0299                     	;# 
  1050  029A                     	;# 
  1051  0394                     	;# 
  1052  0395                     	;# 
  1053  0396                     	;# 
  1054  0FE4                     	;# 
  1055  0FE5                     	;# 
  1056  0FE6                     	;# 
  1057  0FE7                     	;# 
  1058  0FE8                     	;# 
  1059  0FE9                     	;# 
  1060  0FEA                     	;# 
  1061  0FEB                     	;# 
  1062  0FED                     	;# 
  1063  0FEE                     	;# 
  1064  0FEF                     	;# 
  1065  0000                     	;# 
  1066  0001                     	;# 
  1067  0002                     	;# 
  1068  0003                     	;# 
  1069  0004                     	;# 
  1070  0005                     	;# 
  1071  0006                     	;# 
  1072  0007                     	;# 
  1073  0008                     	;# 
  1074  0009                     	;# 
  1075  000A                     	;# 
  1076  000B                     	;# 
  1077  000C                     	;# 
  1078  000D                     	;# 
  1079  000E                     	;# 
  1080  0010                     	;# 
  1081  0011                     	;# 
  1082  0012                     	;# 
  1083  0015                     	;# 
  1084  0016                     	;# 
  1085  0016                     	;# 
  1086  0017                     	;# 
  1087  0018                     	;# 
  1088  0019                     	;# 
  1089  001A                     	;# 
  1090  001B                     	;# 
  1091  001C                     	;# 
  1092  008C                     	;# 
  1093  008D                     	;# 
  1094  008E                     	;# 
  1095  0090                     	;# 
  1096  0091                     	;# 
  1097  0092                     	;# 
  1098  0095                     	;# 
  1099  0096                     	;# 
  1100  0097                     	;# 
  1101  0099                     	;# 
  1102  009A                     	;# 
  1103  009B                     	;# 
  1104  009B                     	;# 
  1105  009C                     	;# 
  1106  009D                     	;# 
  1107  009E                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  0116                     	;# 
  1112  0117                     	;# 
  1113  011D                     	;# 
  1114  018C                     	;# 
  1115  018D                     	;# 
  1116  018E                     	;# 
  1117  0191                     	;# 
  1118  0191                     	;# 
  1119  0192                     	;# 
  1120  0193                     	;# 
  1121  0193                     	;# 
  1122  0194                     	;# 
  1123  0195                     	;# 
  1124  0196                     	;# 
  1125  0197                     	;# 
  1126  0199                     	;# 
  1127  019A                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019B                     	;# 
  1132  019C                     	;# 
  1133  019C                     	;# 
  1134  019D                     	;# 
  1135  019E                     	;# 
  1136  019F                     	;# 
  1137  020D                     	;# 
  1138  0210                     	;# 
  1139  0211                     	;# 
  1140  0211                     	;# 
  1141  0212                     	;# 
  1142  0212                     	;# 
  1143  0213                     	;# 
  1144  0213                     	;# 
  1145  0214                     	;# 
  1146  0214                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0215                     	;# 
  1150  0216                     	;# 
  1151  0216                     	;# 
  1152  0217                     	;# 
  1153  0217                     	;# 
  1154  0291                     	;# 
  1155  0291                     	;# 
  1156  0292                     	;# 
  1157  0293                     	;# 
  1158  0298                     	;# 
  1159  0298                     	;# 
  1160  0299                     	;# 
  1161  029A                     	;# 
  1162  0394                     	;# 
  1163  0395                     	;# 
  1164  0396                     	;# 
  1165  0FE4                     	;# 
  1166  0FE5                     	;# 
  1167  0FE6                     	;# 
  1168  0FE7                     	;# 
  1169  0FE8                     	;# 
  1170  0FE9                     	;# 
  1171  0FEA                     	;# 
  1172  0FEB                     	;# 
  1173  0FED                     	;# 
  1174  0FEE                     	;# 
  1175  0FEF                     	;# 
  1176  0000                     	;# 
  1177  0001                     	;# 
  1178  0002                     	;# 
  1179  0003                     	;# 
  1180  0004                     	;# 
  1181  0005                     	;# 
  1182  0006                     	;# 
  1183  0007                     	;# 
  1184  0008                     	;# 
  1185  0009                     	;# 
  1186  000A                     	;# 
  1187  000B                     	;# 
  1188  000C                     	;# 
  1189  000D                     	;# 
  1190  000E                     	;# 
  1191  0010                     	;# 
  1192  0011                     	;# 
  1193  0012                     	;# 
  1194  0015                     	;# 
  1195  0016                     	;# 
  1196  0016                     	;# 
  1197  0017                     	;# 
  1198  0018                     	;# 
  1199  0019                     	;# 
  1200  001A                     	;# 
  1201  001B                     	;# 
  1202  001C                     	;# 
  1203  008C                     	;# 
  1204  008D                     	;# 
  1205  008E                     	;# 
  1206  0090                     	;# 
  1207  0091                     	;# 
  1208  0092                     	;# 
  1209  0095                     	;# 
  1210  0096                     	;# 
  1211  0097                     	;# 
  1212  0099                     	;# 
  1213  009A                     	;# 
  1214  009B                     	;# 
  1215  009B                     	;# 
  1216  009C                     	;# 
  1217  009D                     	;# 
  1218  009E                     	;# 
  1219  010C                     	;# 
  1220  010D                     	;# 
  1221  010E                     	;# 
  1222  0116                     	;# 
  1223  0117                     	;# 
  1224  011D                     	;# 
  1225  018C                     	;# 
  1226  018D                     	;# 
  1227  018E                     	;# 
  1228  0191                     	;# 
  1229  0191                     	;# 
  1230  0192                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0194                     	;# 
  1234  0195                     	;# 
  1235  0196                     	;# 
  1236  0197                     	;# 
  1237  0199                     	;# 
  1238  019A                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  019C                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019F                     	;# 
  1248  020D                     	;# 
  1249  0210                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0213                     	;# 
  1256  0214                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0291                     	;# 
  1266  0291                     	;# 
  1267  0292                     	;# 
  1268  0293                     	;# 
  1269  0298                     	;# 
  1270  0298                     	;# 
  1271  0299                     	;# 
  1272  029A                     	;# 
  1273  0394                     	;# 
  1274  0395                     	;# 
  1275  0396                     	;# 
  1276  0FE4                     	;# 
  1277  0FE5                     	;# 
  1278  0FE6                     	;# 
  1279  0FE7                     	;# 
  1280  0FE8                     	;# 
  1281  0FE9                     	;# 
  1282  0FEA                     	;# 
  1283  0FEB                     	;# 
  1284  0FED                     	;# 
  1285  0FEE                     	;# 
  1286  0FEF                     	;# 
  1287  0000                     	;# 
  1288  0001                     	;# 
  1289  0002                     	;# 
  1290  0003                     	;# 
  1291  0004                     	;# 
  1292  0005                     	;# 
  1293  0006                     	;# 
  1294  0007                     	;# 
  1295  0008                     	;# 
  1296  0009                     	;# 
  1297  000A                     	;# 
  1298  000B                     	;# 
  1299  000C                     	;# 
  1300  000D                     	;# 
  1301  000E                     	;# 
  1302  0010                     	;# 
  1303  0011                     	;# 
  1304  0012                     	;# 
  1305  0015                     	;# 
  1306  0016                     	;# 
  1307  0016                     	;# 
  1308  0017                     	;# 
  1309  0018                     	;# 
  1310  0019                     	;# 
  1311  001A                     	;# 
  1312  001B                     	;# 
  1313  001C                     	;# 
  1314  008C                     	;# 
  1315  008D                     	;# 
  1316  008E                     	;# 
  1317  0090                     	;# 
  1318  0091                     	;# 
  1319  0092                     	;# 
  1320  0095                     	;# 
  1321  0096                     	;# 
  1322  0097                     	;# 
  1323  0099                     	;# 
  1324  009A                     	;# 
  1325  009B                     	;# 
  1326  009B                     	;# 
  1327  009C                     	;# 
  1328  009D                     	;# 
  1329  009E                     	;# 
  1330  010C                     	;# 
  1331  010D                     	;# 
  1332  010E                     	;# 
  1333  0116                     	;# 
  1334  0117                     	;# 
  1335  011D                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  018E                     	;# 
  1339  0191                     	;# 
  1340  0191                     	;# 
  1341  0192                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0197                     	;# 
  1348  0199                     	;# 
  1349  019A                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019B                     	;# 
  1353  019B                     	;# 
  1354  019C                     	;# 
  1355  019C                     	;# 
  1356  019D                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  020D                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0213                     	;# 
  1367  0214                     	;# 
  1368  0214                     	;# 
  1369  0215                     	;# 
  1370  0215                     	;# 
  1371  0215                     	;# 
  1372  0216                     	;# 
  1373  0216                     	;# 
  1374  0217                     	;# 
  1375  0217                     	;# 
  1376  0291                     	;# 
  1377  0291                     	;# 
  1378  0292                     	;# 
  1379  0293                     	;# 
  1380  0298                     	;# 
  1381  0298                     	;# 
  1382  0299                     	;# 
  1383  029A                     	;# 
  1384  0394                     	;# 
  1385  0395                     	;# 
  1386  0396                     	;# 
  1387  0FE4                     	;# 
  1388  0FE5                     	;# 
  1389  0FE6                     	;# 
  1390  0FE7                     	;# 
  1391  0FE8                     	;# 
  1392  0FE9                     	;# 
  1393  0FEA                     	;# 
  1394  0FEB                     	;# 
  1395  0FED                     	;# 
  1396  0FEE                     	;# 
  1397  0FEF                     	;# 
  1398  0000                     	;# 
  1399  0001                     	;# 
  1400  0002                     	;# 
  1401  0003                     	;# 
  1402  0004                     	;# 
  1403  0005                     	;# 
  1404  0006                     	;# 
  1405  0007                     	;# 
  1406  0008                     	;# 
  1407  0009                     	;# 
  1408  000A                     	;# 
  1409  000B                     	;# 
  1410  000C                     	;# 
  1411  000D                     	;# 
  1412  000E                     	;# 
  1413  0010                     	;# 
  1414  0011                     	;# 
  1415  0012                     	;# 
  1416  0015                     	;# 
  1417  0016                     	;# 
  1418  0016                     	;# 
  1419  0017                     	;# 
  1420  0018                     	;# 
  1421  0019                     	;# 
  1422  001A                     	;# 
  1423  001B                     	;# 
  1424  001C                     	;# 
  1425  008C                     	;# 
  1426  008D                     	;# 
  1427  008E                     	;# 
  1428  0090                     	;# 
  1429  0091                     	;# 
  1430  0092                     	;# 
  1431  0095                     	;# 
  1432  0096                     	;# 
  1433  0097                     	;# 
  1434  0099                     	;# 
  1435  009A                     	;# 
  1436  009B                     	;# 
  1437  009B                     	;# 
  1438  009C                     	;# 
  1439  009D                     	;# 
  1440  009E                     	;# 
  1441  010C                     	;# 
  1442  010D                     	;# 
  1443  010E                     	;# 
  1444  0116                     	;# 
  1445  0117                     	;# 
  1446  011D                     	;# 
  1447  018C                     	;# 
  1448  018D                     	;# 
  1449  018E                     	;# 
  1450  0191                     	;# 
  1451  0191                     	;# 
  1452  0192                     	;# 
  1453  0193                     	;# 
  1454  0193                     	;# 
  1455  0194                     	;# 
  1456  0195                     	;# 
  1457  0196                     	;# 
  1458  0197                     	;# 
  1459  0199                     	;# 
  1460  019A                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019B                     	;# 
  1464  019B                     	;# 
  1465  019C                     	;# 
  1466  019C                     	;# 
  1467  019D                     	;# 
  1468  019E                     	;# 
  1469  019F                     	;# 
  1470  020D                     	;# 
  1471  0210                     	;# 
  1472  0211                     	;# 
  1473  0211                     	;# 
  1474  0212                     	;# 
  1475  0212                     	;# 
  1476  0213                     	;# 
  1477  0213                     	;# 
  1478  0214                     	;# 
  1479  0214                     	;# 
  1480  0215                     	;# 
  1481  0215                     	;# 
  1482  0215                     	;# 
  1483  0216                     	;# 
  1484  0216                     	;# 
  1485  0217                     	;# 
  1486  0217                     	;# 
  1487  0291                     	;# 
  1488  0291                     	;# 
  1489  0292                     	;# 
  1490  0293                     	;# 
  1491  0298                     	;# 
  1492  0298                     	;# 
  1493  0299                     	;# 
  1494  029A                     	;# 
  1495  0394                     	;# 
  1496  0395                     	;# 
  1497  0396                     	;# 
  1498  0FE4                     	;# 
  1499  0FE5                     	;# 
  1500  0FE6                     	;# 
  1501  0FE7                     	;# 
  1502  0FE8                     	;# 
  1503  0FE9                     	;# 
  1504  0FEA                     	;# 
  1505  0FEB                     	;# 
  1506  0FED                     	;# 
  1507  0FEE                     	;# 
  1508  0FEF                     	;# 
  1509  0000                     	;# 
  1510  0001                     	;# 
  1511  0002                     	;# 
  1512  0003                     	;# 
  1513  0004                     	;# 
  1514  0005                     	;# 
  1515  0006                     	;# 
  1516  0007                     	;# 
  1517  0008                     	;# 
  1518  0009                     	;# 
  1519  000A                     	;# 
  1520  000B                     	;# 
  1521  000C                     	;# 
  1522  000D                     	;# 
  1523  000E                     	;# 
  1524  0010                     	;# 
  1525  0011                     	;# 
  1526  0012                     	;# 
  1527  0015                     	;# 
  1528  0016                     	;# 
  1529  0016                     	;# 
  1530  0017                     	;# 
  1531  0018                     	;# 
  1532  0019                     	;# 
  1533  001A                     	;# 
  1534  001B                     	;# 
  1535  001C                     	;# 
  1536  008C                     	;# 
  1537  008D                     	;# 
  1538  008E                     	;# 
  1539  0090                     	;# 
  1540  0091                     	;# 
  1541  0092                     	;# 
  1542  0095                     	;# 
  1543  0096                     	;# 
  1544  0097                     	;# 
  1545  0099                     	;# 
  1546  009A                     	;# 
  1547  009B                     	;# 
  1548  009B                     	;# 
  1549  009C                     	;# 
  1550  009D                     	;# 
  1551  009E                     	;# 
  1552  010C                     	;# 
  1553  010D                     	;# 
  1554  010E                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  011D                     	;# 
  1558  018C                     	;# 
  1559  018D                     	;# 
  1560  018E                     	;# 
  1561  0191                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  0193                     	;# 
  1565  0193                     	;# 
  1566  0194                     	;# 
  1567  0195                     	;# 
  1568  0196                     	;# 
  1569  0197                     	;# 
  1570  0199                     	;# 
  1571  019A                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019C                     	;# 
  1577  019C                     	;# 
  1578  019D                     	;# 
  1579  019E                     	;# 
  1580  019F                     	;# 
  1581  020D                     	;# 
  1582  0210                     	;# 
  1583  0211                     	;# 
  1584  0211                     	;# 
  1585  0212                     	;# 
  1586  0212                     	;# 
  1587  0213                     	;# 
  1588  0213                     	;# 
  1589  0214                     	;# 
  1590  0214                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0216                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0217                     	;# 
  1598  0291                     	;# 
  1599  0291                     	;# 
  1600  0292                     	;# 
  1601  0293                     	;# 
  1602  0298                     	;# 
  1603  0298                     	;# 
  1604  0299                     	;# 
  1605  029A                     	;# 
  1606  0394                     	;# 
  1607  0395                     	;# 
  1608  0396                     	;# 
  1609  0FE4                     	;# 
  1610  0FE5                     	;# 
  1611  0FE6                     	;# 
  1612  0FE7                     	;# 
  1613  0FE8                     	;# 
  1614  0FE9                     	;# 
  1615  0FEA                     	;# 
  1616  0FEB                     	;# 
  1617  0FED                     	;# 
  1618  0FEE                     	;# 
  1619  0FEF                     	;# 
  1620  0000                     	;# 
  1621  0001                     	;# 
  1622  0002                     	;# 
  1623  0003                     	;# 
  1624  0004                     	;# 
  1625  0005                     	;# 
  1626  0006                     	;# 
  1627  0007                     	;# 
  1628  0008                     	;# 
  1629  0009                     	;# 
  1630  000A                     	;# 
  1631  000B                     	;# 
  1632  000C                     	;# 
  1633  000D                     	;# 
  1634  000E                     	;# 
  1635  0010                     	;# 
  1636  0011                     	;# 
  1637  0012                     	;# 
  1638  0015                     	;# 
  1639  0016                     	;# 
  1640  0016                     	;# 
  1641  0017                     	;# 
  1642  0018                     	;# 
  1643  0019                     	;# 
  1644  001A                     	;# 
  1645  001B                     	;# 
  1646  001C                     	;# 
  1647  008C                     	;# 
  1648  008D                     	;# 
  1649  008E                     	;# 
  1650  0090                     	;# 
  1651  0091                     	;# 
  1652  0092                     	;# 
  1653  0095                     	;# 
  1654  0096                     	;# 
  1655  0097                     	;# 
  1656  0099                     	;# 
  1657  009A                     	;# 
  1658  009B                     	;# 
  1659  009B                     	;# 
  1660  009C                     	;# 
  1661  009D                     	;# 
  1662  009E                     	;# 
  1663  010C                     	;# 
  1664  010D                     	;# 
  1665  010E                     	;# 
  1666  0116                     	;# 
  1667  0117                     	;# 
  1668  011D                     	;# 
  1669  018C                     	;# 
  1670  018D                     	;# 
  1671  018E                     	;# 
  1672  0191                     	;# 
  1673  0191                     	;# 
  1674  0192                     	;# 
  1675  0193                     	;# 
  1676  0193                     	;# 
  1677  0194                     	;# 
  1678  0195                     	;# 
  1679  0196                     	;# 
  1680  0197                     	;# 
  1681  0199                     	;# 
  1682  019A                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019B                     	;# 
  1686  019B                     	;# 
  1687  019C                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020D                     	;# 
  1693  0210                     	;# 
  1694  0211                     	;# 
  1695  0211                     	;# 
  1696  0212                     	;# 
  1697  0212                     	;# 
  1698  0213                     	;# 
  1699  0213                     	;# 
  1700  0214                     	;# 
  1701  0214                     	;# 
  1702  0215                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0216                     	;# 
  1706  0216                     	;# 
  1707  0217                     	;# 
  1708  0217                     	;# 
  1709  0291                     	;# 
  1710  0291                     	;# 
  1711  0292                     	;# 
  1712  0293                     	;# 
  1713  0298                     	;# 
  1714  0298                     	;# 
  1715  0299                     	;# 
  1716  029A                     	;# 
  1717  0394                     	;# 
  1718  0395                     	;# 
  1719  0396                     	;# 
  1720  0FE4                     	;# 
  1721  0FE5                     	;# 
  1722  0FE6                     	;# 
  1723  0FE7                     	;# 
  1724  0FE8                     	;# 
  1725  0FE9                     	;# 
  1726  0FEA                     	;# 
  1727  0FEB                     	;# 
  1728  0FED                     	;# 
  1729  0FEE                     	;# 
  1730  0FEF                     	;# 
  1731  0000                     	;# 
  1732  0001                     	;# 
  1733  0002                     	;# 
  1734  0003                     	;# 
  1735  0004                     	;# 
  1736  0005                     	;# 
  1737  0006                     	;# 
  1738  0007                     	;# 
  1739  0008                     	;# 
  1740  0009                     	;# 
  1741  000A                     	;# 
  1742  000B                     	;# 
  1743  000C                     	;# 
  1744  000D                     	;# 
  1745  000E                     	;# 
  1746  0010                     	;# 
  1747  0011                     	;# 
  1748  0012                     	;# 
  1749  0015                     	;# 
  1750  0016                     	;# 
  1751  0016                     	;# 
  1752  0017                     	;# 
  1753  0018                     	;# 
  1754  0019                     	;# 
  1755  001A                     	;# 
  1756  001B                     	;# 
  1757  001C                     	;# 
  1758  008C                     	;# 
  1759  008D                     	;# 
  1760  008E                     	;# 
  1761  0090                     	;# 
  1762  0091                     	;# 
  1763  0092                     	;# 
  1764  0095                     	;# 
  1765  0096                     	;# 
  1766  0097                     	;# 
  1767  0099                     	;# 
  1768  009A                     	;# 
  1769  009B                     	;# 
  1770  009B                     	;# 
  1771  009C                     	;# 
  1772  009D                     	;# 
  1773  009E                     	;# 
  1774  010C                     	;# 
  1775  010D                     	;# 
  1776  010E                     	;# 
  1777  0116                     	;# 
  1778  0117                     	;# 
  1779  011D                     	;# 
  1780  018C                     	;# 
  1781  018D                     	;# 
  1782  018E                     	;# 
  1783  0191                     	;# 
  1784  0191                     	;# 
  1785  0192                     	;# 
  1786  0193                     	;# 
  1787  0193                     	;# 
  1788  0194                     	;# 
  1789  0195                     	;# 
  1790  0196                     	;# 
  1791  0197                     	;# 
  1792  0199                     	;# 
  1793  019A                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019B                     	;# 
  1798  019C                     	;# 
  1799  019C                     	;# 
  1800  019D                     	;# 
  1801  019E                     	;# 
  1802  019F                     	;# 
  1803  020D                     	;# 
  1804  0210                     	;# 
  1805  0211                     	;# 
  1806  0211                     	;# 
  1807  0212                     	;# 
  1808  0212                     	;# 
  1809  0213                     	;# 
  1810  0213                     	;# 
  1811  0214                     	;# 
  1812  0214                     	;# 
  1813  0215                     	;# 
  1814  0215                     	;# 
  1815  0215                     	;# 
  1816  0216                     	;# 
  1817  0216                     	;# 
  1818  0217                     	;# 
  1819  0217                     	;# 
  1820  0291                     	;# 
  1821  0291                     	;# 
  1822  0292                     	;# 
  1823  0293                     	;# 
  1824  0298                     	;# 
  1825  0298                     	;# 
  1826  0299                     	;# 
  1827  029A                     	;# 
  1828  0394                     	;# 
  1829  0395                     	;# 
  1830  0396                     	;# 
  1831  0FE4                     	;# 
  1832  0FE5                     	;# 
  1833  0FE6                     	;# 
  1834  0FE7                     	;# 
  1835  0FE8                     	;# 
  1836  0FE9                     	;# 
  1837  0FEA                     	;# 
  1838  0FEB                     	;# 
  1839  0FED                     	;# 
  1840  0FEE                     	;# 
  1841  0FEF                     	;# 
  1842  0000                     	;# 
  1843  0001                     	;# 
  1844  0002                     	;# 
  1845  0003                     	;# 
  1846  0004                     	;# 
  1847  0005                     	;# 
  1848  0006                     	;# 
  1849  0007                     	;# 
  1850  0008                     	;# 
  1851  0009                     	;# 
  1852  000A                     	;# 
  1853  000B                     	;# 
  1854  000C                     	;# 
  1855  000D                     	;# 
  1856  000E                     	;# 
  1857  0010                     	;# 
  1858  0011                     	;# 
  1859  0012                     	;# 
  1860  0015                     	;# 
  1861  0016                     	;# 
  1862  0016                     	;# 
  1863  0017                     	;# 
  1864  0018                     	;# 
  1865  0019                     	;# 
  1866  001A                     	;# 
  1867  001B                     	;# 
  1868  001C                     	;# 
  1869  008C                     	;# 
  1870  008D                     	;# 
  1871  008E                     	;# 
  1872  0090                     	;# 
  1873  0091                     	;# 
  1874  0092                     	;# 
  1875  0095                     	;# 
  1876  0096                     	;# 
  1877  0097                     	;# 
  1878  0099                     	;# 
  1879  009A                     	;# 
  1880  009B                     	;# 
  1881  009B                     	;# 
  1882  009C                     	;# 
  1883  009D                     	;# 
  1884  009E                     	;# 
  1885  010C                     	;# 
  1886  010D                     	;# 
  1887  010E                     	;# 
  1888  0116                     	;# 
  1889  0117                     	;# 
  1890  011D                     	;# 
  1891  018C                     	;# 
  1892  018D                     	;# 
  1893  018E                     	;# 
  1894  0191                     	;# 
  1895  0191                     	;# 
  1896  0192                     	;# 
  1897  0193                     	;# 
  1898  0193                     	;# 
  1899  0194                     	;# 
  1900  0195                     	;# 
  1901  0196                     	;# 
  1902  0197                     	;# 
  1903  0199                     	;# 
  1904  019A                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019B                     	;# 
  1909  019C                     	;# 
  1910  019C                     	;# 
  1911  019D                     	;# 
  1912  019E                     	;# 
  1913  019F                     	;# 
  1914  020D                     	;# 
  1915  0210                     	;# 
  1916  0211                     	;# 
  1917  0211                     	;# 
  1918  0212                     	;# 
  1919  0212                     	;# 
  1920  0213                     	;# 
  1921  0213                     	;# 
  1922  0214                     	;# 
  1923  0214                     	;# 
  1924  0215                     	;# 
  1925  0215                     	;# 
  1926  0215                     	;# 
  1927  0216                     	;# 
  1928  0216                     	;# 
  1929  0217                     	;# 
  1930  0217                     	;# 
  1931  0291                     	;# 
  1932  0291                     	;# 
  1933  0292                     	;# 
  1934  0293                     	;# 
  1935  0298                     	;# 
  1936  0298                     	;# 
  1937  0299                     	;# 
  1938  029A                     	;# 
  1939  0394                     	;# 
  1940  0395                     	;# 
  1941  0396                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000D                     	;# 
  1967  000E                     	;# 
  1968  0010                     	;# 
  1969  0011                     	;# 
  1970  0012                     	;# 
  1971  0015                     	;# 
  1972  0016                     	;# 
  1973  0016                     	;# 
  1974  0017                     	;# 
  1975  0018                     	;# 
  1976  0019                     	;# 
  1977  001A                     	;# 
  1978  001B                     	;# 
  1979  001C                     	;# 
  1980  008C                     	;# 
  1981  008D                     	;# 
  1982  008E                     	;# 
  1983  0090                     	;# 
  1984  0091                     	;# 
  1985  0092                     	;# 
  1986  0095                     	;# 
  1987  0096                     	;# 
  1988  0097                     	;# 
  1989  0099                     	;# 
  1990  009A                     	;# 
  1991  009B                     	;# 
  1992  009B                     	;# 
  1993  009C                     	;# 
  1994  009D                     	;# 
  1995  009E                     	;# 
  1996  010C                     	;# 
  1997  010D                     	;# 
  1998  010E                     	;# 
  1999  0116                     	;# 
  2000  0117                     	;# 
  2001  011D                     	;# 
  2002  018C                     	;# 
  2003  018D                     	;# 
  2004  018E                     	;# 
  2005  0191                     	;# 
  2006  0191                     	;# 
  2007  0192                     	;# 
  2008  0193                     	;# 
  2009  0193                     	;# 
  2010  0194                     	;# 
  2011  0195                     	;# 
  2012  0196                     	;# 
  2013  0197                     	;# 
  2014  0199                     	;# 
  2015  019A                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019B                     	;# 
  2019  019B                     	;# 
  2020  019C                     	;# 
  2021  019C                     	;# 
  2022  019D                     	;# 
  2023  019E                     	;# 
  2024  019F                     	;# 
  2025  020D                     	;# 
  2026  0210                     	;# 
  2027  0211                     	;# 
  2028  0211                     	;# 
  2029  0212                     	;# 
  2030  0212                     	;# 
  2031  0213                     	;# 
  2032  0213                     	;# 
  2033  0214                     	;# 
  2034  0214                     	;# 
  2035  0215                     	;# 
  2036  0215                     	;# 
  2037  0215                     	;# 
  2038  0216                     	;# 
  2039  0216                     	;# 
  2040  0217                     	;# 
  2041  0217                     	;# 
  2042  0291                     	;# 
  2043  0291                     	;# 
  2044  0292                     	;# 
  2045  0293                     	;# 
  2046  0298                     	;# 
  2047  0298                     	;# 
  2048  0299                     	;# 
  2049  029A                     	;# 
  2050  0394                     	;# 
  2051  0395                     	;# 
  2052  0396                     	;# 
  2053  0FE4                     	;# 
  2054  0FE5                     	;# 
  2055  0FE6                     	;# 
  2056  0FE7                     	;# 
  2057  0FE8                     	;# 
  2058  0FE9                     	;# 
  2059  0FEA                     	;# 
  2060  0FEB                     	;# 
  2061  0FED                     	;# 
  2062  0FEE                     	;# 
  2063  0FEF                     	;# 
  2064  0000                     	;# 
  2065  0001                     	;# 
  2066  0002                     	;# 
  2067  0003                     	;# 
  2068  0004                     	;# 
  2069  0005                     	;# 
  2070  0006                     	;# 
  2071  0007                     	;# 
  2072  0008                     	;# 
  2073  0009                     	;# 
  2074  000A                     	;# 
  2075  000B                     	;# 
  2076  000C                     	;# 
  2077  000D                     	;# 
  2078  000E                     	;# 
  2079  0010                     	;# 
  2080  0011                     	;# 
  2081  0012                     	;# 
  2082  0015                     	;# 
  2083  0016                     	;# 
  2084  0016                     	;# 
  2085  0017                     	;# 
  2086  0018                     	;# 
  2087  0019                     	;# 
  2088  001A                     	;# 
  2089  001B                     	;# 
  2090  001C                     	;# 
  2091  008C                     	;# 
  2092  008D                     	;# 
  2093  008E                     	;# 
  2094  0090                     	;# 
  2095  0091                     	;# 
  2096  0092                     	;# 
  2097  0095                     	;# 
  2098  0096                     	;# 
  2099  0097                     	;# 
  2100  0099                     	;# 
  2101  009A                     	;# 
  2102  009B                     	;# 
  2103  009B                     	;# 
  2104  009C                     	;# 
  2105  009D                     	;# 
  2106  009E                     	;# 
  2107  010C                     	;# 
  2108  010D                     	;# 
  2109  010E                     	;# 
  2110  0116                     	;# 
  2111  0117                     	;# 
  2112  011D                     	;# 
  2113  018C                     	;# 
  2114  018D                     	;# 
  2115  018E                     	;# 
  2116  0191                     	;# 
  2117  0191                     	;# 
  2118  0192                     	;# 
  2119  0193                     	;# 
  2120  0193                     	;# 
  2121  0194                     	;# 
  2122  0195                     	;# 
  2123  0196                     	;# 
  2124  0197                     	;# 
  2125  0199                     	;# 
  2126  019A                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019B                     	;# 
  2130  019B                     	;# 
  2131  019C                     	;# 
  2132  019C                     	;# 
  2133  019D                     	;# 
  2134  019E                     	;# 
  2135  019F                     	;# 
  2136  020D                     	;# 
  2137  0210                     	;# 
  2138  0211                     	;# 
  2139  0211                     	;# 
  2140  0212                     	;# 
  2141  0212                     	;# 
  2142  0213                     	;# 
  2143  0213                     	;# 
  2144  0214                     	;# 
  2145  0214                     	;# 
  2146  0215                     	;# 
  2147  0215                     	;# 
  2148  0215                     	;# 
  2149  0216                     	;# 
  2150  0216                     	;# 
  2151  0217                     	;# 
  2152  0217                     	;# 
  2153  0291                     	;# 
  2154  0291                     	;# 
  2155  0292                     	;# 
  2156  0293                     	;# 
  2157  0298                     	;# 
  2158  0298                     	;# 
  2159  0299                     	;# 
  2160  029A                     	;# 
  2161  0394                     	;# 
  2162  0395                     	;# 
  2163  0396                     	;# 
  2164  0FE4                     	;# 
  2165  0FE5                     	;# 
  2166  0FE6                     	;# 
  2167  0FE7                     	;# 
  2168  0FE8                     	;# 
  2169  0FE9                     	;# 
  2170  0FEA                     	;# 
  2171  0FEB                     	;# 
  2172  0FED                     	;# 
  2173  0FEE                     	;# 
  2174  0FEF                     	;# 
  2175                           
  2176                           	psect	idataBANK5
  2177  1C85                     __pidataBANK5:	
  2178                           
  2179                           ;initializer for __product
  2180  1C85  3463               	retlw	99
  2181  1C86  3402               	retlw	2
  2182  1C87  3400               	retlw	0
  2183  1C88  3400               	retlw	0
  2184  1C89  3400               	retlw	0
  2185  1C8A  3400               	retlw	0
  2186  1C8B  3400               	retlw	0
  2187  1C8C  3400               	retlw	0
  2188  1C8D  3400               	retlw	0
  2189  1C8E  3400               	retlw	0
  2190  1C8F  3400               	retlw	0
  2191  1C90  3400               	retlw	0
  2192  1C91  34FF               	retlw	255
  2193  1C92  34FF               	retlw	255
  2194  1C93  34FF               	retlw	255
  2195  1C94  3400               	retlw	0
  2196  1C95  3400               	retlw	0
  2197  1C96  3400               	retlw	0
  2198  1C97  3400               	retlw	0
  2199  1C98  3400               	retlw	0
  2200  1C99  3400               	retlw	0
  2201  1C9A  3400               	retlw	0
  2202  1C9B  3400               	retlw	0
  2203  1C9C  3400               	retlw	0
  2204  1C9D  3400               	retlw	0
  2205  1C9E  3400               	retlw	0
  2206  1C9F  3400               	retlw	0
  2207  1CA0  3400               	retlw	0
  2208  1CA1  3400               	retlw	0
  2209  1CA2  3400               	retlw	0
  2210  1CA3  3400               	retlw	0
  2211  1CA4  3400               	retlw	0
  2212                           
  2213                           	psect	stringtext
  2214  1000                     __pstringtext:	
  2215  1000                     _CC2500_registers_address:	
  2216  1000  3403               	retlw	3
  2217  1001  3416               	retlw	22
  2218  1002  3417               	retlw	23
  2219  1003  341E               	retlw	30
  2220  1004  341F               	retlw	31
  2221  1005  3420               	retlw	32
  2222  1006  342A               	retlw	42
  2223  1007  342B               	retlw	43
  2224  1008  340B               	retlw	11
  2225  1009  340C               	retlw	12
  2226  100A  340D               	retlw	13
  2227  100B  340E               	retlw	14
  2228  100C  340F               	retlw	15
  2229  100D  3410               	retlw	16
  2230  100E  3411               	retlw	17
  2231  100F  3412               	retlw	18
  2232  1010  3413               	retlw	19
  2233  1011  3414               	retlw	20
  2234  1012  340A               	retlw	10
  2235  1013  3415               	retlw	21
  2236  1014  3421               	retlw	33
  2237  1015  3422               	retlw	34
  2238  1016  3418               	retlw	24
  2239  1017  3419               	retlw	25
  2240  1018  341A               	retlw	26
  2241  1019  341B               	retlw	27
  2242  101A  341C               	retlw	28
  2243  101B  341D               	retlw	29
  2244  101C  3423               	retlw	35
  2245  101D  3424               	retlw	36
  2246  101E  3425               	retlw	37
  2247  101F  3426               	retlw	38
  2248  1020  3429               	retlw	41
  2249  1021  342C               	retlw	44
  2250  1022  342D               	retlw	45
  2251  1023  342E               	retlw	46
  2252  1024  3400               	retlw	0
  2253  1025  3401               	retlw	1
  2254  1026  3402               	retlw	2
  2255  1027  3407               	retlw	7
  2256  1028  3408               	retlw	8
  2257  1029  3409               	retlw	9
  2258  102A  3406               	retlw	6
  2259  102B  3404               	retlw	4
  2260  102C  3405               	retlw	5
  2261  102D  3427               	retlw	39
  2262  102E  3428               	retlw	40
  2263  102F                     __end_of_CC2500_registers_address:	
  2264  102F                     _CC2500_rfSettings:	
  2265  102F  3407               	retlw	7
  2266  1030  3407               	retlw	7
  2267  1031  3430               	retlw	48
  2268  1032  3487               	retlw	135
  2269  1033  346B               	retlw	107
  2270  1034  34F8               	retlw	248
  2271  1035  347F               	retlw	127
  2272  1036  343F               	retlw	63
  2273  1037  3409               	retlw	9
  2274  1038  3400               	retlw	0
  2275  1039  345C               	retlw	92
  2276  103A  34A7               	retlw	167
  2277  103B  3462               	retlw	98
  2278  103C  3486               	retlw	134
  2279  103D  3483               	retlw	131
  2280  103E  3403               	retlw	3
  2281  103F  3422               	retlw	34
  2282  1040  34F8               	retlw	248
  2283  1041  3400               	retlw	0
  2284  1042  3444               	retlw	68
  2285  1043  34B6               	retlw	182
  2286  1044  3410               	retlw	16
  2287  1045  3418               	retlw	24
  2288  1046  341D               	retlw	29
  2289  1047  341C               	retlw	28
  2290  1048  34C7               	retlw	199
  2291  1049  3400               	retlw	0
  2292  104A  34B2               	retlw	178
  2293  104B  34EA               	retlw	234
  2294  104C  340A               	retlw	10
  2295  104D  3400               	retlw	0
  2296  104E  3411               	retlw	17
  2297  104F  3459               	retlw	89
  2298  1050  3488               	retlw	136
  2299  1051  3431               	retlw	49
  2300  1052  340B               	retlw	11
  2301  1053  342F               	retlw	47
  2302  1054  342E               	retlw	46
  2303  1055  3406               	retlw	6
  2304  1056  3404               	retlw	4
  2305  1057  3405               	retlw	5
  2306  1058  3400               	retlw	0
  2307  1059  3430               	retlw	48
  2308  105A  34D3               	retlw	211
  2309  105B  3491               	retlw	145
  2310  105C  3441               	retlw	65
  2311  105D  3400               	retlw	0
  2312  105E                     __end_of_CC2500_rfSettings:	
  2313  105E                     _CC2500_patable_vaule:	
  2314  105E  34FE               	retlw	254
  2315  105F  34FE               	retlw	254
  2316  1060  34FE               	retlw	254
  2317  1061  34FE               	retlw	254
  2318  1062  34FE               	retlw	254
  2319  1063  34FE               	retlw	254
  2320  1064  34FE               	retlw	254
  2321  1065  34FE               	retlw	254
  2322  1066                     __end_of_CC2500_patable_vaule:	
  2323                           
  2324                           	psect	nvCOMMON
  2325  007B                     __pnvCOMMON:	
  2326  007B                     _product:	
  2327  007B                     	ds	1
  2328  000C                     _PORTA	set	12
  2329  000D                     _PORTB	set	13
  2330  000E                     _PORTC	set	14
  2331  0018                     _T1CON	set	24
  2332  0017                     _TMR1H	set	23
  2333  0016                     _TMR1L	set	22
  2334  005F                     _GIE	set	95
  2335  005B                     _IOCIE	set	91
  2336  0058                     _IOCIF	set	88
  2337  005E                     _PEIE	set	94
  2338  0060                     _RA0	set	96
  2339  0063                     _RA3	set	99
  2340  0064                     _RA4	set	100
  2341  0066                     _RA6	set	102
  2342  0067                     _RA7	set	103
  2343  0068                     _RB0	set	104
  2344  0069                     _RB1	set	105
  2345  006A                     _RB2	set	106
  2346  006B                     _RB3	set	107
  2347  006C                     _RB4	set	108
  2348  006D                     _RB5	set	109
  2349  0070                     _RC0	set	112
  2350  0071                     _RC1	set	113
  2351  0072                     _RC2	set	114
  2352  0074                     _RC4	set	116
  2353  0075                     _RC5	set	117
  2354  0077                     _RC7	set	119
  2355  0088                     _TMR1IF	set	136
  2356  009D                     _ADCON0	set	157
  2357  009E                     _ADCON1	set	158
  2358  009C                     _ADRESH	set	156
  2359  009B                     _ADRESL	set	155
  2360  0099                     _OSCCON	set	153
  2361  008C                     _TRISA	set	140
  2362  008D                     _TRISB	set	141
  2363  008E                     _TRISC	set	142
  2364  0097                     _WDTCON	set	151
  2365  04E9                     _GO_nDONE	set	1257
  2366  0488                     _TMR1IE	set	1160
  2367  0117                     _FVRCON	set	279
  2368  010C                     _LATA	set	268
  2369  010D                     _LATB	set	269
  2370  010E                     _LATC	set	270
  2371  018C                     _ANSELA	set	396
  2372  018D                     _ANSELB	set	397
  2373  018E                     _ANSELC	set	398
  2374  0192                     _PMADRH	set	402
  2375  0191                     _PMADRL	set	401
  2376  0196                     _PMCON2	set	406
  2377  0194                     _PMDATH	set	404
  2378  0193                     _PMDATL	set	403
  2379  0CAE                     _CFGS	set	3246
  2380  0CAC                     _FREE	set	3244
  2381  0CAD                     _LWLO	set	3245
  2382  0CA8                     _RD	set	3240
  2383  0CA9                     _WR	set	3241
  2384  0CAA                     _WREN	set	3242
  2385  020D                     _WPUB	set	525
  2386  0396                     _IOCBF	set	918
  2387  0395                     _IOCBN	set	917
  2388  0394                     _IOCBP	set	916
  2389  1CB2                     _IOCBF2	set	7346
  2390                           
  2391                           ; #config settings
  2392  0000                     
  2393                           	psect	cinit
  2394  0021                     start_initialization:	
  2395  0021                     __initialization:	
  2396                           
  2397                           ; Clear objects allocated to BITCOMMON
  2398  0021  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2399                           
  2400                           ; Clear objects allocated to BANK0
  2401  0022  01EC               	clrf	__pbssBANK0& (0+127)
  2402  0023  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2403                           
  2404                           ; Clear objects allocated to BANK1
  2405  0024  30A0               	movlw	low __pbssBANK1
  2406  0025  0084               	movwf	4
  2407  0026  3000               	movlw	high __pbssBANK1
  2408  0027  0085               	movwf	5
  2409  0028  3050               	movlw	80
  2410  0029  31A7  27E5  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Clear objects allocated to BANK2
  2413  002C  3020               	movlw	low __pbssBANK2
  2414  002D  0084               	movwf	4
  2415  002E  3001               	movlw	high __pbssBANK2
  2416  002F  0085               	movwf	5
  2417  0030  3050               	movlw	80
  2418  0031  31A7  27E5  3180   	fcall	clear_ram0
  2419                           
  2420                           ; Clear objects allocated to BANK3
  2421  0034  30A0               	movlw	low __pbssBANK3
  2422  0035  0084               	movwf	4
  2423  0036  3001               	movlw	high __pbssBANK3
  2424  0037  0085               	movwf	5
  2425  0038  3050               	movlw	80
  2426  0039  31A7  27E5  3180   	fcall	clear_ram0
  2427                           
  2428                           ; Clear objects allocated to BANK4
  2429  003C  3020               	movlw	low __pbssBANK4
  2430  003D  0084               	movwf	4
  2431  003E  3002               	movlw	high __pbssBANK4
  2432  003F  0085               	movwf	5
  2433  0040  3035               	movlw	53
  2434  0041  31A7  27E5  3180   	fcall	clear_ram0
  2435                           
  2436                           ; Initialize objects allocated to BANK5
  2437  0044  3085               	movlw	low __pidataBANK5
  2438  0045  0084               	movwf	4
  2439  0046  309C               	movlw	(high __pidataBANK5)| (0+128)
  2440  0047  0085               	movwf	5
  2441  0048  30A0               	movlw	low __pdataBANK5
  2442  0049  0086               	movwf	6
  2443  004A  3002               	movlw	high __pdataBANK5
  2444  004B  0087               	movwf	7
  2445  004C  3020               	movlw	32
  2446  004D  31A7  27DF         	fcall	init_ram
  2447  004F                     end_of_initialization:	
  2448                           ;End of C runtime variable initialization code
  2449                           
  2450  004F                     __end_of__initialization:	
  2451  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2452  0050  0020               	movlb	0
  2453  0051  3194  2C92         	ljmp	_main	;jump to C main() function
  2454                           
  2455                           	psect	bitbssCOMMON
  2456  03D0                     __pbitbssCOMMON:	
  2457  03D0                     _Receive_OK:	
  2458  03D0                     	ds	1
  2459  03D1                     _Transceive_OK:	
  2460  03D1                     	ds	1
  2461                           
  2462                           	psect	bssBANK0
  2463  006C                     __pbssBANK0:	
  2464  006C                     _DimmerLights:	
  2465  006C                     	ds	1
  2466  006D                     _Sw:	
  2467  006D                     	ds	1
  2468                           
  2469                           	psect	bssBANK1
  2470  00A0                     __pbssBANK1:	
  2471  00A0                     _DimmerIntr1:	
  2472  00A0                     	ds	16
  2473  00B0                     _DimmerIntr2:	
  2474  00B0                     	ds	16
  2475  00C0                     _RF1:	
  2476  00C0                     	ds	15
  2477  00CF                     _myMain:	
  2478  00CF                     	ds	13
  2479  00DC                     _Buz1:	
  2480  00DC                     	ds	12
  2481  00E8                     _CRC:	
  2482  00E8                     	ds	1
  2483  00E9                     _Cmd:	
  2484  00E9                     	ds	1
  2485  00EA                     _DelayOff:	
  2486  00EA                     	ds	1
  2487  00EB                     _LED:	
  2488  00EB                     	ds	1
  2489  00EC                     _Rx_Length:	
  2490  00EC                     	ds	1
  2491  00ED                     _SPI0Buffer:	
  2492  00ED                     	ds	1
  2493  00EE                     _Tx_Length:	
  2494  00EE                     	ds	1
  2495  00EF                     _s_data:	
  2496  00EF                     	ds	1
  2497                           
  2498                           	psect	bssBANK2
  2499  0120                     __pbssBANK2:	
  2500  0120                     _Dimmer:	
  2501  0120                     	ds	5
  2502  0125                     _Timer1:	
  2503  0125                     	ds	3
  2504  0128                     _RF_Count:	
  2505  0128                     	ds	2
  2506  012A                     _WDT:	
  2507  012A                     	ds	2
  2508  012C                     _DimmerIntr:	
  2509  012C                     	ds	1
  2510  012D                     _Light:	
  2511  012D                     	ds	1
  2512  012E                     _RSSI:	
  2513  012E                     	ds	1
  2514  012F                     _SwDetect:	
  2515  012F                     	ds	1
  2516  0130                     _r_address:	
  2517  0130                     	ds	1
  2518  0131                     _r_data:	
  2519  0131                     	ds	1
  2520  0132                     _Load:	
  2521  0132                     	ds	40
  2522  015A                     _Temp:	
  2523  015A                     	ds	14
  2524  0168                     _VarErrLED:	
  2525  0168                     	ds	4
  2526  016C                     _VarLED1:	
  2527  016C                     	ds	4
  2528                           
  2529                           	psect	bssBANK3
  2530  01A0                     __pbssBANK3:	
  2531  01A0                     _RF_Data:	
  2532  01A0                     	ds	30
  2533  01BE                     _DimmerLights1:	
  2534  01BE                     	ds	9
  2535  01C7                     _DimmerLights2:	
  2536  01C7                     	ds	9
  2537  01D0                     _Sw1:	
  2538  01D0                     	ds	9
  2539  01D9                     _Sw2:	
  2540  01D9                     	ds	9
  2541  01E2                     _DlySw1:	
  2542  01E2                     	ds	5
  2543  01E7                     _DlySw2:	
  2544  01E7                     	ds	5
  2545  01EC                     _VarLED2:	
  2546  01EC                     	ds	4
  2547                           
  2548                           	psect	bssBANK4
  2549  0220                     __pbssBANK4:	
  2550  0220                     _u1:	
  2551  0220                     	ds	16
  2552  0230                     _Memory:	
  2553  0230                     	ds	37
  2554                           
  2555                           	psect	dataBANK5
  2556  02A0                     __pdataBANK5:	
  2557  02A0                     __product:	
  2558  02A0                     	ds	32
  2559                           
  2560                           	psect	clrtext
  2561  27E5                     clear_ram0:	
  2562                           ;	Called with FSR0 containing the base address, and
  2563                           ;	WREG with the size to clear
  2564                           
  2565  27E5  0064               	clrwdt	;clear the watchdog before getting into this loop
  2566  27E6                     clrloop0:	
  2567  27E6  0180               	clrf	0	;clear RAM location pointed to by FSR
  2568  27E7  3101               	addfsr 0,1
  2569  27E8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2570  27E9  2FE6               	goto	clrloop0	;have we reached the end yet?
  2571  27EA  3400               	retlw	0	;all done for this memory range, return
  2572                           
  2573                           	psect	inittext
  2574  27DF                     init_ram:	
  2575  27DF  00FE               	movwf	126
  2576  27E0                     initloop:	
  2577  27E0  0012               	moviw fsr0++
  2578  27E1  001E               	movwi fsr1++
  2579  27E2  0BFE               	decfsz	126,f
  2580  27E3  2FE0               	goto	initloop
  2581  27E4  3400               	retlw	0
  2582                           
  2583                           	psect	cstackBANK4
  2584  0255                     __pcstackBANK4:	
  2585  0255                     ?_main:	
  2586  0255                     main@argc:	
  2587                           ; 2 bytes @ 0x0
  2588                           
  2589                           
  2590                           ; 2 bytes @ 0x0
  2591  0255                     	ds	2
  2592  0257                     main@argv:	
  2593                           
  2594                           ; 2 bytes @ 0x2
  2595  0257                     	ds	2
  2596                           
  2597                           	psect	cstackCOMMON
  2598  0070                     __pcstackCOMMON:	
  2599  0070                     ?_CC2500_WriteCommand:	
  2600  0070                     ?_RF_Timeout_Counter:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_setRF_TimeoutCleared:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_WriteByte:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_ReadStatus:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_ReadByte:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_PowerRST:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_InitSetREG:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_InitPATable:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_ClearTXFIFO:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_ClearRXFIFO:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_FrequencyCabr:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_CC2500_SIDLEMode:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DlyOff_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DlyOff_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_SwOn:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setDimmerLights_SwOff:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setMemory_Modify:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_Initialization:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setDimmerLights_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_DimmerLights_DimmingFunction:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_DimmerLights_TwoPhase_Main:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_DimmerLights_AssignationDimming:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setDimmerLights_Line:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_DimmerIntr_ValueCalculate:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_setDimmerLights_DimmingClose:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_setTxData:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_setRF_TransceiveGO:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setLED_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setLED_Main:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Fosc_Set:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_IO_Set:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_TMR1_Set:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_ADC_Set:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_IOC_Set:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_WDT_Set:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_TMR1_ISR:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_IOC_ISR:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Timeout_Counter:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_set_TimeoutCleared:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_Flash_Memory_Write:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_Flash_Memory_Modify:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_WDT_Clearing:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setLoad_AH_AL_Restore:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_setTemp_Initialization:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_setTemp_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setOverTemp_ADV_Restore:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setRF_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setRF_Main:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_RF_RxDisable:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setData:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_getRxData:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_setLog_Code:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setControl_Lights_Table:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setRFSW_Control:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setRFSW_AdjControl:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setRF_AdjControl:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setSw_Initialization:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setSw_Main:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_myMain_Initialization:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_my_MainTimer:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_Exception_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_Buzzer_Initialization:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_Buzzer_Main:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_CC2500_TxData:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_CC2500_RxData:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_CC2500_PowerOnInitial:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DelayOffPointSelect:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DelayOff_Initialization:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_DelayOff_Main:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_DimmerIntr_Initialization:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_DimmerLights_SelectPointer:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DimmerLights_Initialization:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_setDimmerLights_DimmingOn:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_DimmerLights_Main:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_DimmerLights_TMR_1:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ??_DimmerLights_TMR_1:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_DimmerLights_IOC_1:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ??_DimmerLights_IOC_1:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_DimmerLights_TMR_2:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ??_DimmerLights_TMR_2:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_DimmerLights_IOC_2:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ??_DimmerLights_IOC_2:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_LedPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_LED_Initialization:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_LED_Main:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_Mcu_Initialization:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_ISR:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_Flash_Memory_Initialization:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_Flash_Memory_Main:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_Flash_Memory_Unlock:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_Flash_Memory_Erasing:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_setMemory_LoopSave:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_WDT_Main:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_Load_Initialization:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_getLoad_AD:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_Load_Main:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_Temp_Initialization:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_getTemp_AD:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_Temp_Main:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0070                     ?_RF_Initialization:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0070                     ?_RF_Main:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0070                     ?_setRF_Learn:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0070                     ?_TouchPower:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0070                     ?_SwPointSelect:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0070                     ?_Switch_Initialization:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0070                     ?_Switch_Main:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0070                     ?_getDimmerLights_Status:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0070                     ?_getDimmerLights_ValueToPercent:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getDimmerLights_PercentToValue:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getLoad_OK:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_getMain_All_Error_Status:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_getMain_All_LightsStatus:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_getDimmerLights_Allow_Condition:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_getCmd_Status:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_Flash_Memory_Read:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_getAll_Sw_KeyStatus:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_getMain_Lights_Count:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_getRF_KeyStatus:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_getSw_KeyStatus:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_getDelayOff_GO:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_getDimmerIntr_DimmingValue:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_getDimmerLights_Line:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ?_getDimmer_LoadGO:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ?_getDimmer_Load_Status:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     setDimmerLights_Initialization@lights:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981                           
  2982                           ; 1 bytes @ 0x0
  2983  0070                     	ds	1
  2984  0071                     ??_TMR1_ISR:	
  2985  0071                     ??_IOC_ISR:	
  2986                           ; 0 bytes @ 0x1
  2987                           
  2988  0071                     ??_ISR:	
  2989                           ; 0 bytes @ 0x1
  2990                           
  2991                           
  2992                           ; 0 bytes @ 0x1
  2993  0071                     	ds	1
  2994  0072                     ??_RF_Timeout_Counter:	
  2995  0072                     ??_setRF_TimeoutCleared:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0072                     ??_CC2500_WriteByte:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0072                     ??_CC2500_ReadByte:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0072                     ?_DelayTime_1us:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007  0072                     ??_setMemory_Modify:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010  0072                     ??_setDimmerLights_Initialization:	
  3011                           ; 0 bytes @ 0x2
  3012                           
  3013  0072                     ??_getLoad_OK:	
  3014                           ; 0 bytes @ 0x2
  3015                           
  3016  0072                     ??_getMain_All_Error_Status:	
  3017                           ; 0 bytes @ 0x2
  3018                           
  3019  0072                     ??_getMain_All_LightsStatus:	
  3020                           ; 0 bytes @ 0x2
  3021                           
  3022  0072                     ??_setDimmerLights_Line:	
  3023                           ; 0 bytes @ 0x2
  3024                           
  3025  0072                     ??_getCmd_Status:	
  3026                           ; 0 bytes @ 0x2
  3027                           
  3028  0072                     ?_setCmd_Status:	
  3029                           ; 0 bytes @ 0x2
  3030                           
  3031  0072                     ??_setTxData:	
  3032                           ; 0 bytes @ 0x2
  3033                           
  3034  0072                     ??_setRF_TransceiveGO:	
  3035                           ; 0 bytes @ 0x2
  3036                           
  3037  0072                     ??_Fosc_Set:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0072                     ??_IO_Set:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0072                     ??_TMR1_Set:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0072                     ??_ADC_Set:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0072                     ??_IOC_Set:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0072                     ??_WDT_Set:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0072                     ??_Timeout_Counter:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0072                     ??_set_TimeoutCleared:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0072                     ??_Flash_Memory_Read:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0072                     ?_setMemory_Data:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0072                     ??_Flash_Memory_Write:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0072                     ??_getAll_Sw_KeyStatus:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0072                     ??_WDT_Clearing:	
  3074                           ; 0 bytes @ 0x2
  3075                           
  3076  0072                     ??_setLoad_AH_AL_Restore:	
  3077                           ; 0 bytes @ 0x2
  3078                           
  3079  0072                     ??_getMain_Lights_Count:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0072                     ??_setTemp_Initialization:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0072                     ??_setOverTemp_ADV_Restore:	
  3086                           ; 0 bytes @ 0x2
  3087                           
  3088  0072                     ??_setRF_Initialization:	
  3089                           ; 0 bytes @ 0x2
  3090                           
  3091  0072                     ??_getRF_KeyStatus:	
  3092                           ; 0 bytes @ 0x2
  3093                           
  3094  0072                     ??_RF_RxDisable:	
  3095                           ; 0 bytes @ 0x2
  3096                           
  3097  0072                     ??_setData:	
  3098                           ; 0 bytes @ 0x2
  3099                           
  3100  0072                     ??_getSw_KeyStatus:	
  3101                           ; 0 bytes @ 0x2
  3102                           
  3103  0072                     ??_myMain_Initialization:	
  3104                           ; 0 bytes @ 0x2
  3105                           
  3106  0072                     ??_Buzzer_Initialization:	
  3107                           ; 0 bytes @ 0x2
  3108                           
  3109  0072                     ??_Buzzer_Main:	
  3110                           ; 0 bytes @ 0x2
  3111                           
  3112  0072                     ??_DelayOffPointSelect:	
  3113                           ; 0 bytes @ 0x2
  3114                           
  3115  0072                     ?_setDimmerIntr_ControlStatus:	
  3116                           ; 0 bytes @ 0x2
  3117                           
  3118  0072                     ?_setDimmerIntr_DimmingValue:	
  3119                           ; 0 bytes @ 0x2
  3120                           
  3121  0072                     ??_getDimmerIntr_DimmingValue:	
  3122                           ; 0 bytes @ 0x2
  3123                           
  3124  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3125                           ; 0 bytes @ 0x2
  3126                           
  3127  0072                     ??_getDimmerIntr_Dimming_Sw:	
  3128                           ; 0 bytes @ 0x2
  3129                           
  3130  0072                     ?_setDimmerIntr_Dimming_RF:	
  3131                           ; 0 bytes @ 0x2
  3132                           
  3133  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3134                           ; 0 bytes @ 0x2
  3135                           
  3136  0072                     ??_DimmerLights_SelectPointer:	
  3137                           ; 0 bytes @ 0x2
  3138                           
  3139  0072                     ??_getDimmerLights_Line:	
  3140                           ; 0 bytes @ 0x2
  3141                           
  3142  0072                     ??_getDimmer_LoadGO:	
  3143                           ; 0 bytes @ 0x2
  3144                           
  3145  0072                     ??_getDimmer_Load_Status:	
  3146                           ; 0 bytes @ 0x2
  3147                           
  3148  0072                     ??_LedPointSelect:	
  3149                           ; 0 bytes @ 0x2
  3150                           
  3151  0072                     ??_Flash_Memory_Unlock:	
  3152                           ; 0 bytes @ 0x2
  3153                           
  3154  0072                     ??_Flash_Memory_Erasing:	
  3155                           ; 0 bytes @ 0x2
  3156                           
  3157  0072                     ??_setMemory_LoopSave:	
  3158                           ; 0 bytes @ 0x2
  3159                           
  3160  0072                     ??_WDT_Main:	
  3161                           ; 0 bytes @ 0x2
  3162                           
  3163  0072                     ??_Temp_Initialization:	
  3164                           ; 0 bytes @ 0x2
  3165                           
  3166  0072                     ??_setRF_Learn:	
  3167                           ; 0 bytes @ 0x2
  3168                           
  3169  0072                     ??_TouchPower:	
  3170                           ; 0 bytes @ 0x2
  3171                           
  3172  0072                     ??_SwPointSelect:	
  3173                           ; 0 bytes @ 0x2
  3174                           
  3175  0072                     ?___bmul:	
  3176                           ; 0 bytes @ 0x2
  3177                           
  3178  0072                     ?___lbdiv:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181  0072                     ?_getBuz_GO:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184  0072                     ?_getAD:	
  3185                           ; 2 bytes @ 0x2
  3186                           
  3187  0072                     ?___wmul:	
  3188                           ; 2 bytes @ 0x2
  3189                           
  3190  0072                     ?___awdiv:	
  3191                           ; 2 bytes @ 0x2
  3192                           
  3193  0072                     ?___lwdiv:	
  3194                           ; 2 bytes @ 0x2
  3195                           
  3196  0072                     ?___ftpack:	
  3197                           ; 2 bytes @ 0x2
  3198                           
  3199  0072                     setDimmerIntr_ControlStatus@command:	
  3200                           ; 3 bytes @ 0x2
  3201                           
  3202  0072                     setDimmerIntr_DimmingValue@value:	
  3203                           ; 1 bytes @ 0x2
  3204                           
  3205  0072                     setDimmerIntr_Dimming_Sw@command:	
  3206                           ; 1 bytes @ 0x2
  3207                           
  3208  0072                     getDimmerIntr_Dimming_Sw@status:	
  3209                           ; 1 bytes @ 0x2
  3210                           
  3211  0072                     setDimmerIntr_Dimming_RF@command:	
  3212                           ; 1 bytes @ 0x2
  3213                           
  3214  0072                     setDimmerLights_Line@lights:	
  3215                           ; 1 bytes @ 0x2
  3216                           
  3217  0072                     getDimmer_LoadGO@loadgo:	
  3218                           ; 1 bytes @ 0x2
  3219                           
  3220  0072                     getDimmer_Load_Status@status:	
  3221                           ; 1 bytes @ 0x2
  3222                           
  3223  0072                     getAD@adcon1:	
  3224                           ; 1 bytes @ 0x2
  3225                           
  3226  0072                     setMemory_Data@data:	
  3227                           ; 1 bytes @ 0x2
  3228                           
  3229  0072                     getLoad_OK@ok:	
  3230                           ; 1 bytes @ 0x2
  3231                           
  3232  0072                     getMain_All_LightsStatus@status:	
  3233                           ; 1 bytes @ 0x2
  3234                           
  3235  0072                     setCmd_Status@cmd:	
  3236                           ; 1 bytes @ 0x2
  3237                           
  3238  0072                     getCmd_Status@number:	
  3239                           ; 1 bytes @ 0x2
  3240                           
  3241  0072                     ___bmul@multiplicand:	
  3242                           ; 1 bytes @ 0x2
  3243                           
  3244  0072                     ___lbdiv@divisor:	
  3245                           ; 1 bytes @ 0x2
  3246                           
  3247  0072                     DelayTime_1us@count:	
  3248                           ; 1 bytes @ 0x2
  3249                           
  3250  0072                     ___wmul@multiplier:	
  3251                           ; 2 bytes @ 0x2
  3252                           
  3253  0072                     ___awdiv@divisor:	
  3254                           ; 2 bytes @ 0x2
  3255                           
  3256  0072                     ___lwdiv@divisor:	
  3257                           ; 2 bytes @ 0x2
  3258                           
  3259  0072                     ___ftpack@arg:	
  3260                           ; 2 bytes @ 0x2
  3261                           
  3262                           
  3263                           ; 3 bytes @ 0x2
  3264  0072                     	ds	1
  3265  0073                     ??_getDimmerLights_Allow_Condition:	
  3266  0073                     ??_setCmd_Status:	
  3267                           ; 0 bytes @ 0x3
  3268                           
  3269  0073                     ??_setMemory_Data:	
  3270                           ; 0 bytes @ 0x3
  3271                           
  3272  0073                     ??_setDimmerIntr_ControlStatus:	
  3273                           ; 0 bytes @ 0x3
  3274                           
  3275  0073                     ??_setDimmerIntr_DimmingValue:	
  3276                           ; 0 bytes @ 0x3
  3277                           
  3278  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3279                           ; 0 bytes @ 0x3
  3280                           
  3281  0073                     ??_setDimmerIntr_Dimming_RF:	
  3282                           ; 0 bytes @ 0x3
  3283                           
  3284  0073                     ??_Mcu_Initialization:	
  3285                           ; 0 bytes @ 0x3
  3286                           
  3287  0073                     ??_RF_Initialization:	
  3288                           ; 0 bytes @ 0x3
  3289                           
  3290  0073                     ??___bmul:	
  3291                           ; 0 bytes @ 0x3
  3292                           
  3293  0073                     ??___lbdiv:	
  3294                           ; 0 bytes @ 0x3
  3295                           
  3296  0073                     CC2500_WriteByte@loop_a:	
  3297                           ; 0 bytes @ 0x3
  3298                           
  3299  0073                     CC2500_ReadByte@loop_b:	
  3300                           ; 1 bytes @ 0x3
  3301                           
  3302  0073                     DelayOffPointSelect@sw:	
  3303                           ; 1 bytes @ 0x3
  3304                           
  3305  0073                     getDimmerIntr_DimmingValue@value:	
  3306                           ; 1 bytes @ 0x3
  3307                           
  3308  0073                     getDimmerIntr_Dimming_Sw@lights:	
  3309                           ; 1 bytes @ 0x3
  3310                           
  3311  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2605:	
  3312                           ; 1 bytes @ 0x3
  3313                           
  3314  0073                     DimmerLights_SelectPointer@lights:	
  3315                           ; 1 bytes @ 0x3
  3316                           
  3317  0073                     getDimmerLights_Line@line:	
  3318                           ; 1 bytes @ 0x3
  3319                           
  3320  0073                     LedPointSelect@led:	
  3321                           ; 1 bytes @ 0x3
  3322                           
  3323  0073                     Flash_Memory_Read@i:	
  3324                           ; 1 bytes @ 0x3
  3325                           
  3326  0073                     Flash_Memory_Write@i:	
  3327                           ; 1 bytes @ 0x3
  3328                           
  3329  0073                     setMemory_Modify@command:	
  3330                           ; 1 bytes @ 0x3
  3331                           
  3332  0073                     setMemory_LoopSave@command:	
  3333                           ; 1 bytes @ 0x3
  3334                           
  3335  0073                     setLoad_AH_AL_Restore@i:	
  3336                           ; 1 bytes @ 0x3
  3337                           
  3338  0073                     setRF_Learn@command:	
  3339                           ; 1 bytes @ 0x3
  3340                           
  3341  0073                     getRF_KeyStatus@key:	
  3342                           ; 1 bytes @ 0x3
  3343                           
  3344  0073                     setRF_TransceiveGO@command:	
  3345                           ; 1 bytes @ 0x3
  3346                           
  3347  0073                     SwPointSelect@sw:	
  3348                           ; 1 bytes @ 0x3
  3349                           
  3350  0073                     _getSw_KeyStatus$6939:	
  3351                           ; 1 bytes @ 0x3
  3352                           
  3353  0073                     getAll_Sw_KeyStatus@status:	
  3354                           ; 1 bytes @ 0x3
  3355                           
  3356  0073                     getMain_Lights_Count@status1:	
  3357                           ; 1 bytes @ 0x3
  3358                           
  3359  0073                     getCmd_Status@cmd:	
  3360                           ; 1 bytes @ 0x3
  3361                           
  3362  0073                     setOverTemp_ADV_Restore@i:	
  3363                           ; 1 bytes @ 0x3
  3364                           
  3365  0073                     _getMain_All_Error_Status$7769:	
  3366                           ; 2 bytes @ 0x3
  3367                           
  3368                           
  3369                           ; 2 bytes @ 0x3
  3370  0073                     	ds	1
  3371  0074                     ??_CC2500_WriteCommand:	
  3372  0074                     ??_CC2500_ReadStatus:	
  3373                           ; 0 bytes @ 0x4
  3374                           
  3375  0074                     ??_DelayTime_1us:	
  3376                           ; 0 bytes @ 0x4
  3377                           
  3378  0074                     ?_CC2500_WriteREG:	
  3379                           ; 0 bytes @ 0x4
  3380                           
  3381  0074                     ??_DlyOff_Initialization:	
  3382                           ; 0 bytes @ 0x4
  3383                           
  3384  0074                     ??_getDimmerLights_Status:	
  3385                           ; 0 bytes @ 0x4
  3386                           
  3387  0074                     ??_setDimmerLights_SwOff:	
  3388                           ; 0 bytes @ 0x4
  3389                           
  3390  0074                     ?_setLED:	
  3391                           ; 0 bytes @ 0x4
  3392                           
  3393  0074                     ??_setLED_Main:	
  3394                           ; 0 bytes @ 0x4
  3395                           
  3396  0074                     ??_getBuz_GO:	
  3397                           ; 0 bytes @ 0x4
  3398                           
  3399  0074                     ??_getDelayOff_GO:	
  3400                           ; 0 bytes @ 0x4
  3401                           
  3402  0074                     ??_setDimmerLights_DimmingOn:	
  3403                           ; 0 bytes @ 0x4
  3404                           
  3405  0074                     ?_setDimmerLights_DimmingRun:	
  3406                           ; 0 bytes @ 0x4
  3407                           
  3408  0074                     ??_Load_Initialization:	
  3409                           ; 0 bytes @ 0x4
  3410                           
  3411  0074                     CC2500_WriteREG@value:	
  3412                           ; 0 bytes @ 0x4
  3413                           
  3414  0074                     DlyOff_Initialization@sw:	
  3415                           ; 1 bytes @ 0x4
  3416                           
  3417  0074                     getDelayOff_GO@sw:	
  3418                           ; 1 bytes @ 0x4
  3419                           
  3420  0074                     setDimmerIntr_ControlStatus@lights:	
  3421                           ; 1 bytes @ 0x4
  3422                           
  3423  0074                     setDimmerIntr_DimmingValue@lights:	
  3424                           ; 1 bytes @ 0x4
  3425                           
  3426  0074                     getDimmerIntr_DimmingValue@lights:	
  3427                           ; 1 bytes @ 0x4
  3428                           
  3429  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3430                           ; 1 bytes @ 0x4
  3431                           
  3432  0074                     setDimmerIntr_Dimming_RF@lights:	
  3433                           ; 1 bytes @ 0x4
  3434                           
  3435  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2606:	
  3436                           ; 1 bytes @ 0x4
  3437                           
  3438  0074                     setDimmerLights_SwOff@sw:	
  3439                           ; 1 bytes @ 0x4
  3440                           
  3441  0074                     setDimmerLights_DimmingOn@sw:	
  3442                           ; 1 bytes @ 0x4
  3443                           
  3444  0074                     _getDimmerLights_Allow_Condition$2729:	
  3445                           ; 1 bytes @ 0x4
  3446                           
  3447  0074                     getDimmerLights_Status@lights:	
  3448                           ; 1 bytes @ 0x4
  3449                           
  3450  0074                     setDimmerLights_DimmingRun@command:	
  3451                           ; 1 bytes @ 0x4
  3452                           
  3453  0074                     setLED@command:	
  3454                           ; 1 bytes @ 0x4
  3455                           
  3456  0074                     Flash_Memory_Read@address:	
  3457                           ; 1 bytes @ 0x4
  3458                           
  3459  0074                     setMemory_Data@address:	
  3460                           ; 1 bytes @ 0x4
  3461                           
  3462  0074                     _getRF_KeyStatus$5745:	
  3463                           ; 1 bytes @ 0x4
  3464                           
  3465  0074                     _getSw_KeyStatus$6940:	
  3466                           ; 1 bytes @ 0x4
  3467                           
  3468  0074                     _getAll_Sw_KeyStatus$6943:	
  3469                           ; 1 bytes @ 0x4
  3470                           
  3471  0074                     getMain_Lights_Count@status2:	
  3472                           ; 1 bytes @ 0x4
  3473                           
  3474  0074                     setCmd_Status@number:	
  3475                           ; 1 bytes @ 0x4
  3476                           
  3477  0074                     ___bmul@product:	
  3478                           ; 1 bytes @ 0x4
  3479                           
  3480  0074                     ___lbdiv@dividend:	
  3481                           ; 1 bytes @ 0x4
  3482                           
  3483  0074                     DelayTime_1us@i:	
  3484                           ; 1 bytes @ 0x4
  3485                           
  3486  0074                     ___wmul@multiplicand:	
  3487                           ; 2 bytes @ 0x4
  3488                           
  3489  0074                     ___awdiv@dividend:	
  3490                           ; 2 bytes @ 0x4
  3491                           
  3492  0074                     ___lwdiv@dividend:	
  3493                           ; 2 bytes @ 0x4
  3494                           
  3495                           
  3496                           ; 2 bytes @ 0x4
  3497  0074                     	ds	1
  3498  0075                     ??_CC2500_WriteREG:	
  3499  0075                     ??_setLED:	
  3500                           ; 0 bytes @ 0x5
  3501                           
  3502  0075                     ??_setDimmerLights_DimmingClose:	
  3503                           ; 0 bytes @ 0x5
  3504                           
  3505  0075                     ??_DelayOff_Initialization:	
  3506                           ; 0 bytes @ 0x5
  3507                           
  3508  0075                     ??_setDimmerLights_DimmingRun:	
  3509                           ; 0 bytes @ 0x5
  3510                           
  3511  0075                     ??_getAD:	
  3512                           ; 0 bytes @ 0x5
  3513                           
  3514  0075                     CC2500_WriteCommand@command:	
  3515                           ; 0 bytes @ 0x5
  3516                           
  3517  0075                     CC2500_ReadStatus@status_addr:	
  3518                           ; 1 bytes @ 0x5
  3519                           
  3520  0075                     getDelayOff_GO@go:	
  3521                           ; 1 bytes @ 0x5
  3522                           
  3523  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3524                           ; 1 bytes @ 0x5
  3525                           
  3526  0075                     _getDimmerLights_Allow_Condition$2730:	
  3527                           ; 1 bytes @ 0x5
  3528                           
  3529  0075                     getDimmerLights_Status@status:	
  3530                           ; 1 bytes @ 0x5
  3531                           
  3532  0075                     setLED@led:	
  3533                           ; 1 bytes @ 0x5
  3534                           
  3535  0075                     getAD@adcon0:	
  3536                           ; 1 bytes @ 0x5
  3537                           
  3538  0075                     Flash_Memory_Read@ret:	
  3539                           ; 1 bytes @ 0x5
  3540                           
  3541  0075                     getSw_KeyStatus@status:	
  3542                           ; 1 bytes @ 0x5
  3543                           
  3544  0075                     getMain_Lights_Count@count:	
  3545                           ; 1 bytes @ 0x5
  3546                           
  3547  0075                     ___bmul@multiplier:	
  3548                           ; 1 bytes @ 0x5
  3549                           
  3550  0075                     ___ftpack@exp:	
  3551                           ; 1 bytes @ 0x5
  3552                           
  3553  0075                     ___lbdiv@counter:	
  3554                           ; 1 bytes @ 0x5
  3555                           
  3556  0075                     _getMain_All_Error_Status$7770:	
  3557                           ; 1 bytes @ 0x5
  3558                           
  3559                           
  3560                           ; 2 bytes @ 0x5
  3561  0075                     	ds	1
  3562  0076                     ??_CC2500_ClearTXFIFO:	
  3563  0076                     ??_CC2500_ClearRXFIFO:	
  3564                           ; 0 bytes @ 0x6
  3565                           
  3566  0076                     ??_CC2500_SIDLEMode:	
  3567                           ; 0 bytes @ 0x6
  3568                           
  3569  0076                     ??_setLED_Initialization:	
  3570                           ; 0 bytes @ 0x6
  3571                           
  3572  0076                     ??_Flash_Memory_Modify:	
  3573                           ; 0 bytes @ 0x6
  3574                           
  3575  0076                     ??_setRF_AdjControl:	
  3576                           ; 0 bytes @ 0x6
  3577                           
  3578  0076                     ??_setSw_Initialization:	
  3579                           ; 0 bytes @ 0x6
  3580                           
  3581  0076                     ??_CC2500_TxData:	
  3582                           ; 0 bytes @ 0x6
  3583                           
  3584  0076                     ??_CC2500_RxData:	
  3585                           ; 0 bytes @ 0x6
  3586                           
  3587  0076                     ??_Flash_Memory_Initialization:	
  3588                           ; 0 bytes @ 0x6
  3589                           
  3590  0076                     ??_getLoad_AD:	
  3591                           ; 0 bytes @ 0x6
  3592                           
  3593  0076                     ??_getTemp_AD:	
  3594                           ; 0 bytes @ 0x6
  3595                           
  3596  0076                     ??___wmul:	
  3597                           ; 0 bytes @ 0x6
  3598                           
  3599  0076                     ??___awdiv:	
  3600                           ; 0 bytes @ 0x6
  3601                           
  3602  0076                     ??___lwdiv:	
  3603                           ; 0 bytes @ 0x6
  3604                           
  3605  0076                     CC2500_WriteREG@w_addr:	
  3606                           ; 0 bytes @ 0x6
  3607                           
  3608  0076                     _getDimmerLights_Allow_Condition$2731:	
  3609                           ; 1 bytes @ 0x6
  3610                           
  3611  0076                     setDimmerLights_DimmingRun@lights:	
  3612                           ; 1 bytes @ 0x6
  3613                           
  3614  0076                     setLED_Initialization@led:	
  3615                           ; 1 bytes @ 0x6
  3616                           
  3617  0076                     setLED_Main@led:	
  3618                           ; 1 bytes @ 0x6
  3619                           
  3620  0076                     setSw_Initialization@sw:	
  3621                           ; 1 bytes @ 0x6
  3622                           
  3623  0076                     getSw_KeyStatus@sw:	
  3624                           ; 1 bytes @ 0x6
  3625                           
  3626  0076                     ___ftpack@sign:	
  3627                           ; 1 bytes @ 0x6
  3628                           
  3629  0076                     ___lbdiv@quotient:	
  3630                           ; 1 bytes @ 0x6
  3631                           
  3632  0076                     getBuz_GO@i:	
  3633                           ; 1 bytes @ 0x6
  3634                           
  3635  0076                     DelayTime_1us@j:	
  3636                           ; 2 bytes @ 0x6
  3637                           
  3638  0076                     ___wmul@product:	
  3639                           ; 2 bytes @ 0x6
  3640                           
  3641                           
  3642                           ; 2 bytes @ 0x6
  3643  0076                     	ds	1
  3644  0077                     ??_CC2500_InitSetREG:	
  3645  0077                     ??_CC2500_InitPATable:	
  3646                           ; 0 bytes @ 0x7
  3647                           
  3648  0077                     ??___ftpack:	
  3649                           ; 0 bytes @ 0x7
  3650                           
  3651  0077                     ??_setBuz:	
  3652                           ; 0 bytes @ 0x7
  3653                           
  3654  0077                     ??_LED_Initialization:	
  3655                           ; 0 bytes @ 0x7
  3656                           
  3657  0077                     ??_LED_Main:	
  3658                           ; 0 bytes @ 0x7
  3659                           
  3660  0077                     ??_Switch_Initialization:	
  3661                           ; 0 bytes @ 0x7
  3662                           
  3663  0077                     ?_Division:	
  3664                           ; 0 bytes @ 0x7
  3665                           
  3666  0077                     CC2500_TxData@loop_e:	
  3667                           ; 1 bytes @ 0x7
  3668                           
  3669  0077                     CC2500_RxData@loop_f:	
  3670                           ; 1 bytes @ 0x7
  3671                           
  3672  0077                     getDimmerLights_Allow_Condition@lights:	
  3673                           ; 1 bytes @ 0x7
  3674                           
  3675  0077                     Division@num:	
  3676                           ; 1 bytes @ 0x7
  3677                           
  3678  0077                     Flash_Memory_Initialization@value:	
  3679                           ; 1 bytes @ 0x7
  3680                           
  3681  0077                     Flash_Memory_Modify@i:	
  3682                           ; 1 bytes @ 0x7
  3683                           
  3684  0077                     getTemp_AD@channel:	
  3685                           ; 1 bytes @ 0x7
  3686                           
  3687  0077                     setRF_AdjControl@status:	
  3688                           ; 1 bytes @ 0x7
  3689                           
  3690  0077                     getMain_All_Error_Status@command:	
  3691                           ; 1 bytes @ 0x7
  3692                           
  3693  0077                     ___lwdiv@quotient:	
  3694                           ; 1 bytes @ 0x7
  3695                           
  3696                           
  3697                           ; 2 bytes @ 0x7
  3698  0077                     	ds	1
  3699  0078                     ??_CC2500_PowerRST:	
  3700  0078                     ??_CC2500_FrequencyCabr:	
  3701                           ; 0 bytes @ 0x8
  3702                           
  3703  0078                     ??_Division:	
  3704                           ; 0 bytes @ 0x8
  3705                           
  3706  0078                     ??_Flash_Memory_Main:	
  3707                           ; 0 bytes @ 0x8
  3708                           
  3709  0078                     setBuz@count:	
  3710                           ; 0 bytes @ 0x8
  3711                           
  3712  0078                     CC2500_InitPATable@temp:	
  3713                           ; 1 bytes @ 0x8
  3714                           
  3715  0078                     getDimmerLights_Allow_Condition@allow:	
  3716                           ; 1 bytes @ 0x8
  3717                           
  3718  0078                     setRF_AdjControl@dimmingStatus:	
  3719                           ; 1 bytes @ 0x8
  3720                           
  3721  0078                     getMain_All_Error_Status@status:	
  3722                           ; 1 bytes @ 0x8
  3723                           
  3724  0078                     getTemp_AD@ADRES:	
  3725                           ; 1 bytes @ 0x8
  3726                           
  3727                           
  3728                           ; 2 bytes @ 0x8
  3729  0078                     	ds	1
  3730  0079                     ??_setDimmerLights_SwOn:	
  3731  0079                     ??_my_MainTimer:	
  3732                           ; 0 bytes @ 0x9
  3733                           
  3734  0079                     ??_Exception_Main:	
  3735                           ; 0 bytes @ 0x9
  3736                           
  3737  0079                     CC2500_InitPATable@loop_d:	
  3738                           ; 0 bytes @ 0x9
  3739                           
  3740  0079                     setRF_AdjControl@sw:	
  3741                           ; 1 bytes @ 0x9
  3742                           
  3743  0079                     ___lwdiv@counter:	
  3744                           ; 1 bytes @ 0x9
  3745                           
  3746                           
  3747                           ; 1 bytes @ 0x9
  3748  0079                     	ds	1
  3749  007A                     ??_setDimmerLights_Main:	
  3750  007A                     ??_DimmerLights_TwoPhase_Main:	
  3751                           ; 0 bytes @ 0xA
  3752                           
  3753  007A                     ??_setControl_Lights_Table:	
  3754                           ; 0 bytes @ 0xA
  3755                           
  3756  007A                     ??_CC2500_PowerOnInitial:	
  3757                           ; 0 bytes @ 0xA
  3758                           
  3759  007A                     ??_DelayOff_Main:	
  3760                           ; 0 bytes @ 0xA
  3761                           
  3762  007A                     ??_DimmerLights_Initialization:	
  3763                           ; 0 bytes @ 0xA
  3764                           
  3765  007A                     ??_DimmerLights_Main:	
  3766                           ; 0 bytes @ 0xA
  3767                           
  3768  007A                     ??_Temp_Main:	
  3769                           ; 0 bytes @ 0xA
  3770                           
  3771  007A                     ??_RF_Main:	
  3772                           ; 0 bytes @ 0xA
  3773                           
  3774  007A                     ??_Switch_Main:	
  3775                           ; 0 bytes @ 0xA
  3776                           
  3777  007A                     ??_main:	
  3778                           ; 0 bytes @ 0xA
  3779                           
  3780  007A                     ??___ftneg:	
  3781                           ; 0 bytes @ 0xA
  3782                           
  3783                           
  3784                           	psect	cstackBANK0
  3785  0020                     __pcstackBANK0:	
  3786                           ; 0 bytes @ 0xA
  3787                           
  3788  0020                     ??_Load_Main:	
  3789  0020                     ?___awtoft:	
  3790                           ; 0 bytes @ 0x0
  3791                           
  3792  0020                     CC2500_InitSetREG@temp1:	
  3793                           ; 3 bytes @ 0x0
  3794                           
  3795  0020                     Division@value:	
  3796                           ; 1 bytes @ 0x0
  3797                           
  3798  0020                     Flash_Memory_Main@key_Status:	
  3799                           ; 1 bytes @ 0x0
  3800                           
  3801  0020                     getLoad_AD@channel:	
  3802                           ; 1 bytes @ 0x0
  3803                           
  3804  0020                     ___awdiv@counter:	
  3805                           ; 1 bytes @ 0x0
  3806                           
  3807  0020                     ___awtoft@c:	
  3808                           ; 1 bytes @ 0x0
  3809                           
  3810                           
  3811                           ; 2 bytes @ 0x0
  3812  0020                     	ds	1
  3813  0021                     CC2500_InitSetREG@temp2:	
  3814  0021                     Division@result:	
  3815                           ; 1 bytes @ 0x1
  3816                           
  3817  0021                     _Flash_Memory_Main$3708:	
  3818                           ; 1 bytes @ 0x1
  3819                           
  3820  0021                     getLoad_AD@k:	
  3821                           ; 1 bytes @ 0x1
  3822                           
  3823  0021                     ___awdiv@sign:	
  3824                           ; 1 bytes @ 0x1
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0x1
  3828  0021                     	ds	1
  3829  0022                     ??_DimmerIntr_ValueCalculate:	
  3830  0022                     CC2500_InitSetREG@loop_c:	
  3831                           ; 0 bytes @ 0x2
  3832                           
  3833  0022                     getLoad_AD@j:	
  3834                           ; 1 bytes @ 0x2
  3835                           
  3836  0022                     Load_Main@error:	
  3837                           ; 1 bytes @ 0x2
  3838                           
  3839  0022                     ___awdiv@quotient:	
  3840                           ; 1 bytes @ 0x2
  3841                           
  3842                           
  3843                           ; 2 bytes @ 0x2
  3844  0022                     	ds	1
  3845  0023                     ??___awtoft:	
  3846  0023                     getLoad_AD@ADRES:	
  3847                           ; 0 bytes @ 0x3
  3848                           
  3849  0023                     _Load_Main$4131:	
  3850                           ; 2 bytes @ 0x3
  3851                           
  3852                           
  3853                           ; 2 bytes @ 0x3
  3854  0023                     	ds	1
  3855  0024                     ?_setBuz:	
  3856  0024                     DimmerIntr_ValueCalculate@lights:	
  3857                           ; 0 bytes @ 0x4
  3858                           
  3859  0024                     setBuz@time:	
  3860                           ; 1 bytes @ 0x4
  3861                           
  3862                           
  3863                           ; 2 bytes @ 0x4
  3864  0024                     	ds	1
  3865  0025                     ??_DimmerLights_DimmingFunction:	
  3866  0025                     getLoad_AD@i:	
  3867                           ; 0 bytes @ 0x5
  3868                           
  3869  0025                     Load_Main@ErrorCountValue:	
  3870                           ; 1 bytes @ 0x5
  3871                           
  3872  0025                     ___awtoft@sign:	
  3873                           ; 1 bytes @ 0x5
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x5
  3877  0025                     	ds	1
  3878  0026                     ?___ftdiv:	
  3879  0026                     ?___ftmul:	
  3880                           ; 3 bytes @ 0x6
  3881                           
  3882  0026                     setDimmerLights_SwOn@dimmingStatus:	
  3883                           ; 3 bytes @ 0x6
  3884                           
  3885  0026                     DimmerLights_DimmingFunction@lights:	
  3886                           ; 1 bytes @ 0x6
  3887                           
  3888  0026                     Load_Main@Load_RunStatus:	
  3889                           ; 1 bytes @ 0x6
  3890                           
  3891  0026                     Exception_Main@status:	
  3892                           ; 1 bytes @ 0x6
  3893                           
  3894  0026                     ___ftdiv@f2:	
  3895                           ; 1 bytes @ 0x6
  3896                           
  3897  0026                     ___ftmul@f1:	
  3898                           ; 3 bytes @ 0x6
  3899                           
  3900                           
  3901                           ; 3 bytes @ 0x6
  3902  0026                     	ds	1
  3903  0027                     _setDimmerLights_SwOn$2659:	
  3904  0027                     Load_Main@LightsCount:	
  3905                           ; 1 bytes @ 0x7
  3906                           
  3907  0027                     Exception_Main@count:	
  3908                           ; 1 bytes @ 0x7
  3909                           
  3910                           
  3911                           ; 1 bytes @ 0x7
  3912  0027                     	ds	1
  3913  0028                     _setDimmerLights_SwOn$2668:	
  3914  0028                     Exception_Main@error:	
  3915                           ; 1 bytes @ 0x8
  3916                           
  3917  0028                     Load_Main@i:	
  3918                           ; 1 bytes @ 0x8
  3919                           
  3920                           
  3921                           ; 2 bytes @ 0x8
  3922  0028                     	ds	1
  3923  0029                     setDimmerLights_SwOn@idle:	
  3924  0029                     Exception_Main@i:	
  3925                           ; 1 bytes @ 0x9
  3926                           
  3927  0029                     ___ftdiv@f1:	
  3928                           ; 2 bytes @ 0x9
  3929                           
  3930  0029                     ___ftmul@f2:	
  3931                           ; 3 bytes @ 0x9
  3932                           
  3933                           
  3934                           ; 3 bytes @ 0x9
  3935  0029                     	ds	1
  3936  002A                     setDimmerLights_SwOn@sw:	
  3937                           
  3938                           ; 1 bytes @ 0xA
  3939  002A                     	ds	1
  3940  002B                     ??_setSw_Main:	
  3941  002B                     Exception_Main@i_7782:	
  3942                           ; 0 bytes @ 0xB
  3943                           
  3944                           
  3945                           ; 2 bytes @ 0xB
  3946  002B                     	ds	1
  3947  002C                     ??___ftdiv:	
  3948  002C                     ??___ftmul:	
  3949                           ; 0 bytes @ 0xC
  3950                           
  3951                           
  3952                           ; 0 bytes @ 0xC
  3953  002C                     	ds	1
  3954  002D                     setSw_Main@sw:	
  3955  002D                     Exception_Main@lights:	
  3956                           ; 1 bytes @ 0xD
  3957                           
  3958                           
  3959                           ; 1 bytes @ 0xD
  3960  002D                     	ds	3
  3961  0030                     ___ftdiv@cntr:	
  3962  0030                     ___ftmul@exp:	
  3963                           ; 1 bytes @ 0x10
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x10
  3967  0030                     	ds	1
  3968  0031                     ___ftdiv@f3:	
  3969  0031                     ___ftmul@f3_as_product:	
  3970                           ; 3 bytes @ 0x11
  3971                           
  3972                           
  3973                           ; 3 bytes @ 0x11
  3974  0031                     	ds	3
  3975  0034                     ___ftdiv@exp:	
  3976  0034                     ___ftmul@cntr:	
  3977                           ; 1 bytes @ 0x14
  3978                           
  3979                           
  3980                           ; 1 bytes @ 0x14
  3981  0034                     	ds	1
  3982  0035                     ___ftdiv@sign:	
  3983  0035                     ___ftmul@sign:	
  3984                           ; 1 bytes @ 0x15
  3985                           
  3986                           
  3987                           ; 1 bytes @ 0x15
  3988  0035                     	ds	1
  3989  0036                     ?___ftneg:	
  3990  0036                     ___ftneg@f1:	
  3991                           ; 3 bytes @ 0x16
  3992                           
  3993                           
  3994                           ; 3 bytes @ 0x16
  3995  0036                     	ds	3
  3996  0039                     ?___ftadd:	
  3997  0039                     ___ftadd@f1:	
  3998                           ; 3 bytes @ 0x19
  3999                           
  4000                           
  4001                           ; 3 bytes @ 0x19
  4002  0039                     	ds	3
  4003  003C                     ___ftadd@f2:	
  4004                           
  4005                           ; 3 bytes @ 0x1C
  4006  003C                     	ds	3
  4007  003F                     ??___ftadd:	
  4008                           
  4009                           ; 0 bytes @ 0x1F
  4010  003F                     	ds	4
  4011  0043                     ___ftadd@sign:	
  4012                           
  4013                           ; 1 bytes @ 0x23
  4014  0043                     	ds	1
  4015  0044                     ___ftadd@exp2:	
  4016                           
  4017                           ; 1 bytes @ 0x24
  4018  0044                     	ds	1
  4019  0045                     ___ftadd@exp1:	
  4020                           
  4021                           ; 1 bytes @ 0x25
  4022  0045                     	ds	1
  4023  0046                     ?___fttol:	
  4024  0046                     ___fttol@f1:	
  4025                           ; 4 bytes @ 0x26
  4026                           
  4027                           
  4028                           ; 3 bytes @ 0x26
  4029  0046                     	ds	4
  4030  004A                     ??___fttol:	
  4031                           
  4032                           ; 0 bytes @ 0x2A
  4033  004A                     	ds	4
  4034  004E                     ___fttol@sign1:	
  4035                           
  4036                           ; 1 bytes @ 0x2E
  4037  004E                     	ds	1
  4038  004F                     ___fttol@lval:	
  4039                           
  4040                           ; 4 bytes @ 0x2F
  4041  004F                     	ds	4
  4042  0053                     ___fttol@exp1:	
  4043                           
  4044                           ; 1 bytes @ 0x33
  4045  0053                     	ds	1
  4046  0054                     ??_getDimmerLights_ValueToPercent:	
  4047  0054                     ??_getDimmerLights_PercentToValue:	
  4048                           ; 0 bytes @ 0x34
  4049                           
  4050                           
  4051                           ; 0 bytes @ 0x34
  4052  0054                     	ds	2
  4053  0056                     getDimmerLights_PercentToValue@value:	
  4054  0056                     getDimmerLights_ValueToPercent@value:	
  4055                           ; 1 bytes @ 0x36
  4056                           
  4057                           
  4058                           ; 1 bytes @ 0x36
  4059  0056                     	ds	1
  4060  0057                     getDimmerLights_PercentToValue@i:	
  4061  0057                     getDimmerLights_ValueToPercent@i:	
  4062                           ; 3 bytes @ 0x37
  4063                           
  4064                           
  4065                           ; 3 bytes @ 0x37
  4066  0057                     	ds	3
  4067  005A                     ?_setProductData:	
  4068  005A                     ??_DimmerIntr_Initialization:	
  4069                           ; 0 bytes @ 0x3A
  4070                           
  4071  005A                     ?_setDimmerIntr_MaxmumValue:	
  4072                           ; 0 bytes @ 0x3A
  4073                           
  4074  005A                     setDimmerIntr_MaxmumValue@value:	
  4075                           ; 0 bytes @ 0x3A
  4076                           
  4077  005A                     setProductData@value:	
  4078                           ; 1 bytes @ 0x3A
  4079                           
  4080                           
  4081                           ; 1 bytes @ 0x3A
  4082  005A                     	ds	1
  4083  005B                     ??_setProductData:	
  4084  005B                     ??_setDimmerIntr_MaxmumValue:	
  4085                           ; 0 bytes @ 0x3B
  4086                           
  4087                           
  4088                           ; 0 bytes @ 0x3B
  4089  005B                     	ds	1
  4090  005C                     setDimmerIntr_MaxmumValue@lights:	
  4091  005C                     setProductData@address:	
  4092                           ; 1 bytes @ 0x3C
  4093                           
  4094                           
  4095                           ; 1 bytes @ 0x3C
  4096  005C                     	ds	1
  4097  005D                     ??_DlyOff_Main:	
  4098  005D                     ??_DimmerLights_AssignationDimming:	
  4099                           ; 0 bytes @ 0x3D
  4100                           
  4101  005D                     ?_setRF_DimmerLights:	
  4102                           ; 0 bytes @ 0x3D
  4103                           
  4104  005D                     ??_setTemp_Main:	
  4105                           ; 0 bytes @ 0x3D
  4106                           
  4107  005D                     ??_setLog_Code:	
  4108                           ; 0 bytes @ 0x3D
  4109                           
  4110  005D                     ??_setRFSW_AdjControl:	
  4111                           ; 0 bytes @ 0x3D
  4112                           
  4113  005D                     ?_setDelayOff_GO:	
  4114                           ; 0 bytes @ 0x3D
  4115                           
  4116  005D                     setDelayOff_GO@command:	
  4117                           ; 0 bytes @ 0x3D
  4118                           
  4119  005D                     setRF_DimmerLights@on:	
  4120                           ; 1 bytes @ 0x3D
  4121                           
  4122                           
  4123                           ; 1 bytes @ 0x3D
  4124  005D                     	ds	1
  4125  005E                     ??_setRF_DimmerLights:	
  4126  005E                     setDelayOff_GO@value:	
  4127                           ; 0 bytes @ 0x3E
  4128                           
  4129                           
  4130                           ; 1 bytes @ 0x3E
  4131  005E                     	ds	1
  4132  005F                     ??_setDelayOff_GO:	
  4133  005F                     DlyOff_Main@sw:	
  4134                           ; 0 bytes @ 0x3F
  4135                           
  4136  005F                     DimmerLights_AssignationDimming@status:	
  4137                           ; 1 bytes @ 0x3F
  4138                           
  4139  005F                     setTemp_Main@error:	
  4140                           ; 1 bytes @ 0x3F
  4141                           
  4142  005F                     setRFSW_AdjControl@status:	
  4143                           ; 1 bytes @ 0x3F
  4144                           
  4145                           
  4146                           ; 1 bytes @ 0x3F
  4147  005F                     	ds	1
  4148  0060                     DimmerLights_AssignationDimming@sw:	
  4149  0060                     setTemp_Main@TempGO:	
  4150                           ; 1 bytes @ 0x40
  4151                           
  4152  0060                     setRFSW_AdjControl@sw:	
  4153                           ; 1 bytes @ 0x40
  4154                           
  4155  0060                     setRF_DimmerLights@status:	
  4156                           ; 1 bytes @ 0x40
  4157                           
  4158                           
  4159                           ; 1 bytes @ 0x40
  4160  0060                     	ds	1
  4161  0061                     setDelayOff_GO@i:	
  4162  0061                     DimmerLights_TwoPhase_Main@lights:	
  4163                           ; 1 bytes @ 0x41
  4164                           
  4165  0061                     setRF_DimmerLights@lights:	
  4166                           ; 1 bytes @ 0x41
  4167                           
  4168  0061                     setTemp_Main@SafeValue:	
  4169                           ; 1 bytes @ 0x41
  4170                           
  4171                           
  4172                           ; 2 bytes @ 0x41
  4173  0061                     	ds	1
  4174  0062                     ?_setDimmerLights_Dimming:	
  4175  0062                     setDelayOff_GO@j:	
  4176                           ; 0 bytes @ 0x42
  4177                           
  4178  0062                     setDimmerLights_Dimming@status:	
  4179                           ; 1 bytes @ 0x42
  4180                           
  4181                           
  4182                           ; 1 bytes @ 0x42
  4183  0062                     	ds	1
  4184  0063                     ??_setDimmerLights_Dimming:	
  4185  0063                     setDelayOff_GO@k:	
  4186                           ; 0 bytes @ 0x43
  4187                           
  4188  0063                     setTemp_Main@DangerValue:	
  4189                           ; 1 bytes @ 0x43
  4190                           
  4191                           
  4192                           ; 2 bytes @ 0x43
  4193  0063                     	ds	1
  4194  0064                     setDelayOff_GO@sw:	
  4195  0064                     setDimmerLights_Dimming@value:	
  4196                           ; 1 bytes @ 0x44
  4197                           
  4198                           
  4199                           ; 1 bytes @ 0x44
  4200  0064                     	ds	1
  4201  0065                     ?_setDimmerLights_OnOff:	
  4202  0065                     ??_setRFSW_Control:	
  4203                           ; 0 bytes @ 0x45
  4204                           
  4205  0065                     setDimmerLights_OnOff@command:	
  4206                           ; 0 bytes @ 0x45
  4207                           
  4208  0065                     setDimmerLights_Dimming@lights:	
  4209                           ; 1 bytes @ 0x45
  4210                           
  4211  0065                     setTemp_Main@AD:	
  4212                           ; 1 bytes @ 0x45
  4213                           
  4214                           
  4215                           ; 2 bytes @ 0x45
  4216  0065                     	ds	1
  4217  0066                     ??_setDimmerLights_OnOff:	
  4218  0066                     setRFSW_Control@status:	
  4219                           ; 0 bytes @ 0x46
  4220                           
  4221                           
  4222                           ; 1 bytes @ 0x46
  4223  0066                     	ds	1
  4224  0067                     setRFSW_Control@sw:	
  4225                           
  4226                           ; 1 bytes @ 0x47
  4227  0067                     	ds	1
  4228  0068                     ??_getRxData:	
  4229  0068                     setDimmerLights_OnOff@lights:	
  4230                           ; 0 bytes @ 0x48
  4231                           
  4232                           
  4233                           ; 1 bytes @ 0x48
  4234  0068                     	ds	1
  4235  0069                     setDimmerLights_Main@lights:	
  4236  0069                     getRxData@error:	
  4237                           ; 1 bytes @ 0x49
  4238                           
  4239                           
  4240                           ; 1 bytes @ 0x49
  4241  0069                     	ds	1
  4242  006A                     ??_setRF_Main:	
  4243                           
  4244                           ; 0 bytes @ 0x4A
  4245  006A                     	ds	1
  4246  006B                     setRF_Main@error:	
  4247                           
  4248                           ; 1 bytes @ 0x4B
  4249  006B                     	ds	1
  4250                           
  4251                           	psect	maintext
  4252  1492                     __pmaintext:	
  4253 ;;
  4254 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4255 ;;
  4256 ;; *************** function _main *****************
  4257 ;; Defined at:
  4258 ;;		line 6 in file "../src/main_B1.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;  argc            2    0[BANK4 ] int 
  4261 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  2    0[BANK4 ] int 
  4266 ;; Registers used:
  4267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 17F/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4273 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4277 ;;Total ram usage:        4 bytes
  4278 ;; Hardware stack levels required when called:   11
  4279 ;; This function calls:
  4280 ;;		_Buzzer_Initialization
  4281 ;;		_Buzzer_Main
  4282 ;;		_CC2500_PowerOnInitial
  4283 ;;		_DelayOff_Initialization
  4284 ;;		_DelayOff_Main
  4285 ;;		_DimmerLights_Initialization
  4286 ;;		_DimmerLights_Main
  4287 ;;		_Exception_Main
  4288 ;;		_Flash_Memory_Initialization
  4289 ;;		_Flash_Memory_Main
  4290 ;;		_LED_Initialization
  4291 ;;		_LED_Main
  4292 ;;		_Load_Initialization
  4293 ;;		_Load_Main
  4294 ;;		_Mcu_Initialization
  4295 ;;		_RF_Initialization
  4296 ;;		_RF_Main
  4297 ;;		_Switch_Initialization
  4298 ;;		_Switch_Main
  4299 ;;		_Temp_Initialization
  4300 ;;		_Temp_Main
  4301 ;;		_WDT_Main
  4302 ;;		_getLoad_AD
  4303 ;;		_getTemp_AD
  4304 ;;		_myMain_Initialization
  4305 ;;		_my_MainTimer
  4306 ;; This function is called by:
  4307 ;;		Startup code after reset
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           
  4312                           ;psect for function _main
  4313  1492                     _main:	
  4314                           
  4315                           ;main_B1.c: 7: myMain_Initialization();
  4316                           
  4317                           ;incstack = 0
  4318                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4319  1492  3198  20DE  3194   	fcall	_myMain_Initialization
  4320                           
  4321                           ;main_B1.c: 8: Mcu_Initialization();
  4322  1495  3199  21FC  3194   	fcall	_Mcu_Initialization
  4323                           
  4324                           ;main_B1.c: 9: Flash_Memory_Initialization();
  4325  1498  3186  2601  3194   	fcall	_Flash_Memory_Initialization
  4326                           
  4327                           ;main_B1.c: 10: LED_Initialization();
  4328  149B  3198  20BA  3194   	fcall	_LED_Initialization
  4329                           
  4330                           ;main_B1.c: 11: Buzzer_Initialization();
  4331  149E  31A7  27B2  3194   	fcall	_Buzzer_Initialization
  4332                           
  4333                           ;main_B1.c: 13: ;;
  4334                           ;main_B1.c: 14: Temp_Initialization();
  4335  14A1  31A7  27BE  3194   	fcall	_Temp_Initialization
  4336                           
  4337                           ;main_B1.c: 15: Load_Initialization();
  4338  14A4  31A7  27B5  3194   	fcall	_Load_Initialization
  4339                           
  4340                           ;main_B1.c: 16: ;;
  4341                           ;main_B1.c: 17: DelayOff_Initialization();
  4342  14A7  3198  2018  3194   	fcall	_DelayOff_Initialization
  4343                           
  4344                           ;main_B1.c: 19: DimmerLights_Initialization();
  4345  14AA  3198  205F  3194   	fcall	_DimmerLights_Initialization
  4346                           
  4347                           ;main_B1.c: 20: ;;
  4348                           ;main_B1.c: 21: ;;
  4349                           ;main_B1.c: 22: ;;
  4350                           ;main_B1.c: 23: Switch_Initialization();
  4351  14AD  3198  2030  3194   	fcall	_Switch_Initialization
  4352                           
  4353                           ;main_B1.c: 24: RF_Initialization();
  4354  14B0  31A7  27B8  3194   	fcall	_RF_Initialization
  4355                           
  4356                           ;main_B1.c: 25: CC2500_PowerOnInitial();
  4357  14B3  319A  228B  3194   	fcall	_CC2500_PowerOnInitial
  4358  14B6                     l11341:	
  4359                           ;main_B1.c: 26: ;;
  4360                           ;main_B1.c: 27: ;;
  4361                           ;main_B1.c: 29: while (1) {
  4362                           
  4363                           
  4364                           ;main_B1.c: 31: if (myMain.PowerON == 1) {
  4365  14B6  0021               	movlb	1	; select bank1
  4366  14B7  1C4F               	btfss	_myMain^(0+128),0
  4367  14B8  2CC1               	goto	l11345
  4368                           
  4369                           ;main_B1.c: 37: getLoad_AD(0x05);
  4370  14B9  3005               	movlw	5
  4371  14BA  3189  2168  3194   	fcall	_getLoad_AD
  4372                           
  4373                           ;main_B1.c: 41: getTemp_AD(0x09);
  4374  14BD  3009               	movlw	9
  4375  14BE  3196  266D  3194   	fcall	_getTemp_AD
  4376  14C1                     l11345:	
  4377                           
  4378                           ;main_B1.c: 56: }
  4379                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  4380  14C1  0022               	movlb	2	; select bank2
  4381  14C2  1C25               	btfss	_Timer1^(0+256),0
  4382  14C3  2CB6               	goto	l11341
  4383                           
  4384                           ;main_B1.c: 93: Timer1.Timeout = 0;
  4385  14C4  1025               	bcf	_Timer1^(0+256),0
  4386                           
  4387                           ;main_B1.c: 95: my_MainTimer();
  4388  14C5  3190  20EA  3194   	fcall	_my_MainTimer
  4389                           
  4390                           ;main_B1.c: 96: WDT_Main();
  4391  14C8  3199  2197  3194   	fcall	_WDT_Main
  4392                           
  4393                           ;main_B1.c: 97: ;;
  4394                           ;main_B1.c: 98: ;;
  4395                           ;main_B1.c: 99: if (myMain.PowerON == 1) {
  4396  14CB  0021               	movlb	1	; select bank1
  4397  14CC  1C4F               	btfss	_myMain^(0+128),0
  4398  14CD  2CB6               	goto	l11341
  4399                           
  4400                           ;main_B1.c: 100: Flash_Memory_Main();
  4401  14CE  3191  219C  3194   	fcall	_Flash_Memory_Main
  4402                           
  4403                           ;main_B1.c: 102: LED_Main();
  4404  14D1  3198  20C6  3194   	fcall	_LED_Main
  4405                           
  4406                           ;main_B1.c: 103: Buzzer_Main();
  4407  14D4  3192  22A6  3194   	fcall	_Buzzer_Main
  4408                           
  4409                           ;main_B1.c: 105: ;;
  4410                           ;main_B1.c: 106: Temp_Main();
  4411  14D7  3198  2000  3194   	fcall	_Temp_Main
  4412                           
  4413                           ;main_B1.c: 107: Load_Main();
  4414  14DA  3180  2053  3194   	fcall	_Load_Main
  4415                           
  4416                           ;main_B1.c: 108: ;;
  4417                           ;main_B1.c: 110: ;;
  4418                           ;main_B1.c: 111: DimmerLights_Main();
  4419  14DD  319E  26F9  3194   	fcall	_DimmerLights_Main
  4420                           
  4421                           ;main_B1.c: 112: Switch_Main();
  4422  14E0  3198  208B  3194   	fcall	_Switch_Main
  4423                           
  4424                           ;main_B1.c: 113: ;;
  4425                           ;main_B1.c: 114: ;;
  4426                           ;main_B1.c: 116: RF_Main();
  4427  14E3  31A7  27BB  3194   	fcall	_RF_Main
  4428                           
  4429                           ;main_B1.c: 117: DelayOff_Main();
  4430  14E6  3198  2020  3194   	fcall	_DelayOff_Main
  4431                           
  4432                           ;main_B1.c: 118: ;;
  4433                           ;main_B1.c: 119: ;;
  4434                           ;main_B1.c: 120: Exception_Main();
  4435  14E9  3185  252F  3194   	fcall	_Exception_Main
  4436  14EC  2CB6               	goto	l11341
  4437  14ED                     __end_of_main:	
  4438                           ;main_B1.c: 127: }
  4439                           ;main_B1.c: 128: }
  4440                           ;main_B1.c: 162: }
  4441                           ;main_B1.c: 163: return (0);
  4442                           ;	Return value of _main is never used
  4443                           
  4444                           
  4445                           	psect	text1
  4446  10EA                     __ptext1:	
  4447 ;; *************** function _my_MainTimer *****************
  4448 ;; Defined at:
  4449 ;;		line 184 in file "../src/main_B1.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;		None               void
  4456 ;; Registers used:
  4457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;Total ram usage:        1 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    5
  4470 ;; This function calls:
  4471 ;;		_setBuz
  4472 ;; This function is called by:
  4473 ;;		_main
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           
  4478                           ;psect for function _my_MainTimer
  4479  10EA                     _my_MainTimer:	
  4480                           
  4481                           ;main_B1.c: 186: if (myMain.PowerON == 0) {
  4482                           
  4483                           ;incstack = 0
  4484                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4485  10EA  0021               	movlb	1	; select bank1
  4486  10EB  184F               	btfsc	_myMain^(0+128),0
  4487  10EC  2902               	goto	l11219
  4488                           
  4489                           ;main_B1.c: 187: myMain.PowerCount++;
  4490  10ED  3001               	movlw	1
  4491  10EE  00F9               	movwf	??_my_MainTimer
  4492  10EF  0879               	movf	??_my_MainTimer,w
  4493  10F0  07D0               	addwf	(_myMain^(0+128)+1),f
  4494                           
  4495                           ;main_B1.c: 188: if (myMain.PowerCount == (1500 / 20)) {
  4496  10F1  0850               	movf	(_myMain^(0+128)+1),w
  4497  10F2  3A4B               	xorlw	75
  4498  10F3  1D03               	skipz
  4499  10F4  0008               	return
  4500                           
  4501                           ;main_B1.c: 189: myMain.PowerCount = 0;
  4502  10F5  01D0               	clrf	(_myMain^(0+128)+1)
  4503                           
  4504                           ;main_B1.c: 190: myMain.PowerON = 1;
  4505  10F6  144F               	bsf	_myMain^(0+128),0
  4506                           
  4507                           ;main_B1.c: 195: setBuz(3, 50);
  4508  10F7  3032               	movlw	50
  4509  10F8  0020               	movlb	0	; select bank0
  4510  10F9  00A4               	movwf	setBuz@time
  4511  10FA  3000               	movlw	0
  4512  10FB  00A5               	movwf	setBuz@time+1
  4513  10FC  3003               	movlw	3
  4514  10FD  3192  22EC         	fcall	_setBuz
  4515                           
  4516                           ;main_B1.c: 196: myMain.SelfTest = 1;
  4517  10FF  0021               	movlb	1	; select bank1
  4518  1100  164F               	bsf	_myMain^(0+128),4
  4519                           
  4520                           ;main_B1.c: 205: }
  4521                           ;main_B1.c: 206: } else {
  4522  1101  0008               	return
  4523  1102                     l11219:	
  4524                           
  4525                           ;main_B1.c: 207: myMain.PowerCount++;
  4526  1102  3001               	movlw	1
  4527  1103  00F9               	movwf	??_my_MainTimer
  4528  1104  0879               	movf	??_my_MainTimer,w
  4529  1105  07D0               	addwf	(_myMain^(0+128)+1),f
  4530                           
  4531                           ;main_B1.c: 208: if (myMain.PowerCount == (1000 / 20)) {
  4532  1106  0850               	movf	(_myMain^(0+128)+1),w
  4533  1107  3A32               	xorlw	50
  4534  1108  1903               	btfsc	3,2
  4535                           
  4536                           ;main_B1.c: 209: myMain.PowerCount = 0;
  4537  1109  01D0               	clrf	(_myMain^(0+128)+1)
  4538                           
  4539                           ;main_B1.c: 231: }
  4540                           ;main_B1.c: 233: myMain.Count1++;
  4541  110A  3001               	movlw	1
  4542  110B  07D3               	addwf	(_myMain^(0+128)+4),f
  4543  110C  3000               	movlw	0
  4544  110D  3DD4               	addwfc	((_myMain+1)^(0+128)+4),f
  4545                           
  4546                           ;main_B1.c: 234: if (myMain.Count1 == (1000 / 20)) {
  4547  110E  3004               	movlw	4
  4548  110F  3ECF               	addlw	_myMain& (0+255)
  4549  1110  0086               	movwf	6
  4550  1111  0187               	clrf	7
  4551  1112  3F40               	moviw [0]fsr1
  4552  1113  3A32               	xorlw	50
  4553  1114  1D03               	skipz
  4554  1115  2918               	goto	u12935
  4555  1116  3F41               	moviw [1]fsr1
  4556  1117  3A00               	xorlw	0
  4557  1118                     u12935:	
  4558  1118  1D03               	skipz
  4559  1119  0008               	return
  4560                           
  4561                           ;main_B1.c: 235: myMain.Count1 = 0;
  4562  111A  01D3               	clrf	(_myMain^(0+128)+4)
  4563  111B  01D4               	clrf	((_myMain+1)^(0+128)+4)
  4564                           
  4565                           ;main_B1.c: 247: if (myMain.Flag) {
  4566  111C  1CCF               	btfss	_myMain^(0+128),1
  4567  111D  2920               	goto	l2977
  4568                           
  4569                           ;main_B1.c: 248: myMain.Flag = 0;
  4570  111E  10CF               	bcf	_myMain^(0+128),1
  4571                           
  4572                           ;main_B1.c: 257: } else {
  4573  111F  0008               	return
  4574  1120                     l2977:	
  4575                           
  4576                           ;main_B1.c: 258: myMain.Flag = 1;
  4577  1120  14CF               	bsf	_myMain^(0+128),1
  4578  1121  0008               	return
  4579  1122                     __end_of_my_MainTimer:	
  4580                           
  4581                           	psect	text2
  4582  18DE                     __ptext2:	
  4583 ;; *************** function _myMain_Initialization *****************
  4584 ;; Defined at:
  4585 ;;		line 169 in file "../src/main_B1.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;		None               void
  4592 ;; Registers used:
  4593 ;;		wreg, fsr1l, fsr1h
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;Total ram usage:        1 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    3
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_main
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           
  4614                           ;psect for function _myMain_Initialization
  4615  18DE                     _myMain_Initialization:	
  4616                           
  4617                           ;main_B1.c: 172: product = &_product;
  4618                           
  4619                           ;incstack = 0
  4620                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4621  18DE  30A0               	movlw	__product& (0+255)
  4622  18DF  00F2               	movwf	??_myMain_Initialization
  4623  18E0  0872               	movf	??_myMain_Initialization,w
  4624  18E1  00FB               	movwf	_product
  4625                           
  4626                           ;main_B1.c: 173: product->Data[20] = 210;
  4627  18E2  30D2               	movlw	210
  4628  18E3  00F2               	movwf	??_myMain_Initialization
  4629  18E4  087B               	movf	_product,w
  4630  18E5  3E14               	addlw	20
  4631  18E6  0086               	movwf	6
  4632  18E7  3002               	movlw	2	; select bank4/5
  4633  18E8  0087               	movwf	7
  4634  18E9  0872               	movf	??_myMain_Initialization,w
  4635  18EA  0081               	movwf	1
  4636  18EB  0008               	return
  4637  18EC                     __end_of_myMain_Initialization:	
  4638                           
  4639                           	psect	text3
  4640  166D                     __ptext3:	
  4641 ;; *************** function _getTemp_AD *****************
  4642 ;; Defined at:
  4643 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;  channel         1    wreg     unsigned char 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  channel         1    7[COMMON] unsigned char 
  4648 ;;  ADRES           2    8[COMMON] unsigned int 
  4649 ;; Return value:  Size  Location     Type
  4650 ;;		None               void
  4651 ;; Registers used:
  4652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4653 ;; Tracked objects:
  4654 ;;		On entry : 0/0
  4655 ;;		On exit  : 0/0
  4656 ;;		Unchanged: 0/0
  4657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4659 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4660 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4661 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;Total ram usage:        4 bytes
  4663 ;; Hardware stack levels used:    1
  4664 ;; Hardware stack levels required when called:    5
  4665 ;; This function calls:
  4666 ;;		_getAD
  4667 ;; This function is called by:
  4668 ;;		_main
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function _getTemp_AD
  4674  166D                     _getTemp_AD:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4678                           ;getTemp_AD@channel stored from wreg
  4679  166D  00F7               	movwf	getTemp_AD@channel
  4680                           
  4681                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4682  166E  01F8               	clrf	getTemp_AD@ADRES
  4683  166F  01F9               	clrf	getTemp_AD@ADRES+1
  4684                           
  4685                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4686  1670  0022               	movlb	2	; select bank2
  4687  1671  1D5A               	btfss	_Temp^(0+256),2
  4688  1672  0008               	return
  4689                           
  4690                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4691  1673  30F0               	movlw	240
  4692  1674  00F6               	movwf	??_getTemp_AD
  4693  1675  0876               	movf	??_getTemp_AD,w
  4694  1676  00F2               	movwf	getAD@adcon1
  4695  1677  0877               	movf	getTemp_AD@channel,w
  4696  1678  319B  2387  3196   	fcall	_getAD
  4697  167B  0873               	movf	?_getAD+1,w
  4698  167C  01F9               	clrf	getTemp_AD@ADRES+1
  4699  167D  07F9               	addwf	getTemp_AD@ADRES+1,f
  4700  167E  0872               	movf	?_getAD,w
  4701  167F  01F8               	clrf	getTemp_AD@ADRES
  4702  1680  07F8               	addwf	getTemp_AD@ADRES,f
  4703                           
  4704                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4705  1681  0879               	movf	getTemp_AD@ADRES+1,w
  4706  1682  0478               	iorwf	getTemp_AD@ADRES,w
  4707  1683  1903               	skipnz
  4708  1684  0008               	return
  4709                           
  4710                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4711  1685  0879               	movf	getTemp_AD@ADRES+1,w
  4712  1686  0022               	movlb	2	; select bank2
  4713  1687  025F               	subwf	((_Temp+1)^(0+256)+4),w
  4714  1688  1D03               	skipz
  4715  1689  2E8C               	goto	u10115
  4716  168A  0878               	movf	getTemp_AD@ADRES,w
  4717  168B  025E               	subwf	(_Temp^(0+256)+4),w
  4718  168C                     u10115:	
  4719  168C  1803               	skipnc
  4720  168D  2E95               	goto	l9381
  4721                           
  4722                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4723  168E  0879               	movf	getTemp_AD@ADRES+1,w
  4724  168F  01DF               	clrf	((_Temp+1)^(0+256)+4)
  4725  1690  07DF               	addwf	((_Temp+1)^(0+256)+4),f
  4726  1691  0878               	movf	getTemp_AD@ADRES,w
  4727  1692  01DE               	clrf	(_Temp^(0+256)+4)
  4728  1693  07DE               	addwf	(_Temp^(0+256)+4),f
  4729                           
  4730                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4731  1694  0008               	return
  4732  1695                     l9381:	
  4733  1695  0879               	movf	getTemp_AD@ADRES+1,w
  4734  1696  0261               	subwf	((_Temp+1)^(0+256)+6),w
  4735  1697  1D03               	skipz
  4736  1698  2E9B               	goto	u10125
  4737  1699  0878               	movf	getTemp_AD@ADRES,w
  4738  169A  0260               	subwf	(_Temp^(0+256)+6),w
  4739  169B                     u10125:	
  4740  169B  1803               	skipnc
  4741  169C  2EA4               	goto	l9385
  4742                           
  4743                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4744  169D  0879               	movf	getTemp_AD@ADRES+1,w
  4745  169E  01E1               	clrf	((_Temp+1)^(0+256)+6)
  4746  169F  07E1               	addwf	((_Temp+1)^(0+256)+6),f
  4747  16A0  0878               	movf	getTemp_AD@ADRES,w
  4748  16A1  01E0               	clrf	(_Temp^(0+256)+6)
  4749  16A2  07E0               	addwf	(_Temp^(0+256)+6),f
  4750                           
  4751                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4752  16A3  0008               	return
  4753  16A4                     l9385:	
  4754  16A4  0879               	movf	getTemp_AD@ADRES+1,w
  4755  16A5  0263               	subwf	((_Temp+1)^(0+256)+8),w
  4756  16A6  1D03               	skipz
  4757  16A7  2EAA               	goto	u10135
  4758  16A8  0878               	movf	getTemp_AD@ADRES,w
  4759  16A9  0262               	subwf	(_Temp^(0+256)+8),w
  4760  16AA                     u10135:	
  4761  16AA  1803               	skipnc
  4762  16AB  2EB3               	goto	l9389
  4763                           
  4764                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4765  16AC  0879               	movf	getTemp_AD@ADRES+1,w
  4766  16AD  01E3               	clrf	((_Temp+1)^(0+256)+8)
  4767  16AE  07E3               	addwf	((_Temp+1)^(0+256)+8),f
  4768  16AF  0878               	movf	getTemp_AD@ADRES,w
  4769  16B0  01E2               	clrf	(_Temp^(0+256)+8)
  4770  16B1  07E2               	addwf	(_Temp^(0+256)+8),f
  4771                           
  4772                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4773  16B2  0008               	return
  4774  16B3                     l9389:	
  4775  16B3  0879               	movf	getTemp_AD@ADRES+1,w
  4776  16B4  0265               	subwf	((_Temp+1)^(0+256)+10),w
  4777  16B5  1D03               	skipz
  4778  16B6  2EB9               	goto	u10145
  4779  16B7  0878               	movf	getTemp_AD@ADRES,w
  4780  16B8  0264               	subwf	(_Temp^(0+256)+10),w
  4781  16B9                     u10145:	
  4782  16B9  1803               	skipnc
  4783  16BA  2EC2               	goto	l9393
  4784                           
  4785                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4786  16BB  0879               	movf	getTemp_AD@ADRES+1,w
  4787  16BC  01E5               	clrf	((_Temp+1)^(0+256)+10)
  4788  16BD  07E5               	addwf	((_Temp+1)^(0+256)+10),f
  4789  16BE  0878               	movf	getTemp_AD@ADRES,w
  4790  16BF  01E4               	clrf	(_Temp^(0+256)+10)
  4791  16C0  07E4               	addwf	(_Temp^(0+256)+10),f
  4792                           
  4793                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4794  16C1  0008               	return
  4795  16C2                     l9393:	
  4796  16C2  0879               	movf	getTemp_AD@ADRES+1,w
  4797  16C3  0267               	subwf	((_Temp+1)^(0+256)+12),w
  4798  16C4  1D03               	skipz
  4799  16C5  2EC8               	goto	u10155
  4800  16C6  0878               	movf	getTemp_AD@ADRES,w
  4801  16C7  0266               	subwf	(_Temp^(0+256)+12),w
  4802  16C8                     u10155:	
  4803  16C8  1803               	skipnc
  4804  16C9  0008               	return
  4805                           
  4806                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4807  16CA  0879               	movf	getTemp_AD@ADRES+1,w
  4808  16CB  01E7               	clrf	((_Temp+1)^(0+256)+12)
  4809  16CC  07E7               	addwf	((_Temp+1)^(0+256)+12),f
  4810  16CD  0878               	movf	getTemp_AD@ADRES,w
  4811  16CE  01E6               	clrf	(_Temp^(0+256)+12)
  4812  16CF  07E6               	addwf	(_Temp^(0+256)+12),f
  4813  16D0  0008               	return
  4814  16D1                     __end_of_getTemp_AD:	
  4815                           
  4816                           	psect	text4
  4817  0968                     __ptext4:	
  4818 ;; *************** function _getLoad_AD *****************
  4819 ;; Defined at:
  4820 ;;		line 16 in file "../src/OverLoad_B1.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  channel         1    wreg     unsigned char 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  channel         1    0[BANK0 ] unsigned char 
  4825 ;;  ADRES           2    3[BANK0 ] unsigned int 
  4826 ;;  i               1    5[BANK0 ] unsigned char 
  4827 ;;  j               1    2[BANK0 ] unsigned char 
  4828 ;;  k               1    1[BANK0 ] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;		None               void
  4831 ;; Registers used:
  4832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4839 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4840 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;Total ram usage:        8 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    5
  4845 ;; This function calls:
  4846 ;;		_getAD
  4847 ;; This function is called by:
  4848 ;;		_main
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           
  4853                           ;psect for function _getLoad_AD
  4854  0968                     _getLoad_AD:	
  4855                           
  4856                           ;incstack = 0
  4857                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4858                           ;getLoad_AD@channel stored from wreg
  4859  0968  0020               	movlb	0	; select bank0
  4860  0969  00A0               	movwf	getLoad_AD@channel
  4861                           
  4862                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4863  096A  01A5               	clrf	getLoad_AD@i
  4864  096B  01A2               	clrf	getLoad_AD@j
  4865  096C  01A1               	clrf	getLoad_AD@k
  4866                           
  4867                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4868  096D  01A3               	clrf	getLoad_AD@ADRES
  4869  096E  01A4               	clrf	getLoad_AD@ADRES+1
  4870                           
  4871                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4872  096F  0022               	movlb	2	; select bank2
  4873  0970  1E32               	btfss	_Load^(0+256),4
  4874  0971  0008               	return
  4875                           
  4876                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4877  0972  30F3               	movlw	243
  4878  0973  00F6               	movwf	??_getLoad_AD
  4879  0974  0876               	movf	??_getLoad_AD,w
  4880  0975  00F2               	movwf	getAD@adcon1
  4881  0976  0020               	movlb	0	; select bank0
  4882  0977  0820               	movf	getLoad_AD@channel,w
  4883  0978  319B  2387  3189   	fcall	_getAD
  4884  097B  0873               	movf	?_getAD+1,w
  4885  097C  0020               	movlb	0	; select bank0
  4886  097D  01A4               	clrf	getLoad_AD@ADRES+1
  4887  097E  07A4               	addwf	getLoad_AD@ADRES+1,f
  4888  097F  0872               	movf	?_getAD,w
  4889  0980  01A3               	clrf	getLoad_AD@ADRES
  4890  0981  07A3               	addwf	getLoad_AD@ADRES,f
  4891                           
  4892                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4893  0982  01A5               	clrf	getLoad_AD@i
  4894  0983  3004               	movlw	4
  4895  0984  0225               	subwf	getLoad_AD@i,w
  4896  0985  1803               	btfsc	3,0
  4897  0986  29AE               	goto	l9191
  4898  0987                     l9179:	
  4899                           
  4900                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4901  0987  3525               	lslf	getLoad_AD@i,w
  4902  0988  3E3D               	addlw	(_Load+11)& (0+255)
  4903  0989  0086               	movwf	6
  4904  098A  3001               	movlw	1	; select bank2/3
  4905  098B  0087               	movwf	7
  4906  098C  3F40               	moviw [0]fsr1
  4907  098D  00F6               	movwf	??_getLoad_AD
  4908  098E  3F41               	moviw [1]fsr1
  4909  098F  00F7               	movwf	??_getLoad_AD+1
  4910  0990  0824               	movf	getLoad_AD@ADRES+1,w
  4911  0991  0277               	subwf	??_getLoad_AD+1,w
  4912  0992  1D03               	skipz
  4913  0993  2996               	goto	u9705
  4914  0994  0823               	movf	getLoad_AD@ADRES,w
  4915  0995  0276               	subwf	??_getLoad_AD,w
  4916  0996                     u9705:	
  4917  0996  1803               	skipnc
  4918  0997  29A6               	goto	l9187
  4919  0998  08A2               	movf	getLoad_AD@j,f
  4920  0999  1D03               	skipz
  4921  099A  29A6               	goto	l9187
  4922                           
  4923                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4924  099B  3525               	lslf	getLoad_AD@i,w
  4925  099C  3E3D               	addlw	(_Load+11)& (0+255)
  4926  099D  0086               	movwf	6
  4927  099E  3001               	movlw	1	; select bank2/3
  4928  099F  0087               	movwf	7
  4929  09A0  0823               	movf	getLoad_AD@ADRES,w
  4930  09A1  3FC0               	movwi [0]fsr1
  4931  09A2  0824               	movf	getLoad_AD@ADRES+1,w
  4932  09A3  3FC1               	movwi [1]fsr1
  4933                           
  4934                           ;OverLoad_B1.c: 25: j = 1;
  4935  09A4  01A2               	clrf	getLoad_AD@j
  4936  09A5  0AA2               	incf	getLoad_AD@j,f
  4937  09A6                     l9187:	
  4938  09A6  3001               	movlw	1
  4939  09A7  00F6               	movwf	??_getLoad_AD
  4940  09A8  0876               	movf	??_getLoad_AD,w
  4941  09A9  07A5               	addwf	getLoad_AD@i,f
  4942  09AA  3004               	movlw	4
  4943  09AB  0225               	subwf	getLoad_AD@i,w
  4944  09AC  1C03               	skipc
  4945  09AD  2987               	goto	l9179
  4946  09AE                     l9191:	
  4947                           
  4948                           ;OverLoad_B1.c: 26: }
  4949                           ;OverLoad_B1.c: 27: }
  4950                           ;OverLoad_B1.c: 28: if (j == 0) {
  4951  09AE  08A2               	movf	getLoad_AD@j,f
  4952  09AF  1D03               	skipz
  4953  09B0  0008               	return
  4954                           
  4955                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4956  09B1  01A5               	clrf	getLoad_AD@i
  4957  09B2                     L1:	
  4958  09B2  3004               	movlw	4
  4959  09B3  0225               	subwf	getLoad_AD@i,w
  4960  09B4  1803               	btfsc	3,0
  4961  09B5  0008               	return
  4962                           
  4963                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4964  09B6  3525               	lslf	getLoad_AD@i,w
  4965  09B7  3E47               	addlw	(_Load+21)& (0+255)
  4966  09B8  0086               	movwf	6
  4967  09B9  3001               	movlw	1	; select bank2/3
  4968  09BA  0087               	movwf	7
  4969  09BB  3F40               	moviw [0]fsr1
  4970  09BC  00F6               	movwf	??_getLoad_AD
  4971  09BD  3F41               	moviw [1]fsr1
  4972  09BE  00F7               	movwf	??_getLoad_AD+1
  4973  09BF  0877               	movf	??_getLoad_AD+1,w
  4974  09C0  0224               	subwf	getLoad_AD@ADRES+1,w
  4975  09C1  1D03               	skipz
  4976  09C2  29C5               	goto	u9755
  4977  09C3  0876               	movf	??_getLoad_AD,w
  4978  09C4  0223               	subwf	getLoad_AD@ADRES,w
  4979  09C5                     u9755:	
  4980  09C5  1803               	skipnc
  4981  09C6  29D5               	goto	l9207
  4982  09C7  08A1               	movf	getLoad_AD@k,f
  4983  09C8  1D03               	skipz
  4984  09C9  29D5               	goto	l9207
  4985                           
  4986                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4987  09CA  3525               	lslf	getLoad_AD@i,w
  4988  09CB  3E47               	addlw	(_Load+21)& (0+255)
  4989  09CC  0086               	movwf	6
  4990  09CD  3001               	movlw	1	; select bank2/3
  4991  09CE  0087               	movwf	7
  4992  09CF  0823               	movf	getLoad_AD@ADRES,w
  4993  09D0  3FC0               	movwi [0]fsr1
  4994  09D1  0824               	movf	getLoad_AD@ADRES+1,w
  4995  09D2  3FC1               	movwi [1]fsr1
  4996                           
  4997                           ;OverLoad_B1.c: 32: k = 1;
  4998  09D3  01A1               	clrf	getLoad_AD@k
  4999  09D4  0AA1               	incf	getLoad_AD@k,f
  5000  09D5                     l9207:	
  5001  09D5  3001               	movlw	1
  5002  09D6  00F6               	movwf	??_getLoad_AD
  5003  09D7  0876               	movf	??_getLoad_AD,w
  5004  09D8  07A5               	addwf	getLoad_AD@i,f
  5005  09D9  29B2               	goto	L1
  5006  09DA                     __end_of_getLoad_AD:	
  5007                           
  5008                           	psect	text5
  5009  1B87                     __ptext5:	
  5010 ;; *************** function _getAD *****************
  5011 ;; Defined at:
  5012 ;;		line 463 in file "../src/MCU_B1.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  adcon0          1    wreg     unsigned char 
  5015 ;;  adcon1          1    2[COMMON] unsigned char 
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;  adcon0          1    5[COMMON] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  2    2[COMMON] int 
  5020 ;; Registers used:
  5021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5027 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;Total ram usage:        4 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    4
  5034 ;; This function calls:
  5035 ;;		_Timeout_Counter
  5036 ;;		_set_TimeoutCleared
  5037 ;; This function is called by:
  5038 ;;		_getLoad_AD
  5039 ;;		_getTemp_AD
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           
  5044                           ;psect for function _getAD
  5045  1B87                     _getAD:	
  5046                           
  5047                           ;incstack = 0
  5048                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5049                           ;getAD@adcon0 stored from wreg
  5050  1B87  00F5               	movwf	getAD@adcon0
  5051                           
  5052                           ;MCU_B1.c: 464: ADCON0 = adcon0;
  5053  1B88  0875               	movf	getAD@adcon0,w
  5054  1B89  0021               	movlb	1	; select bank1
  5055  1B8A  009D               	movwf	29	;volatile
  5056                           
  5057                           ;MCU_B1.c: 465: ADCON1 = adcon1;
  5058  1B8B  0872               	movf	getAD@adcon1,w
  5059  1B8C  009E               	movwf	30	;volatile
  5060                           
  5061                           ;MCU_B1.c: 466: GO_nDONE = 1;
  5062  1B8D  149D               	bsf	29,1	;volatile
  5063                           
  5064                           ;MCU_B1.c: 467: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5065  1B8E  2B92               	goto	l8653
  5066  1B8F                     l8651:	
  5067                           
  5068                           ;MCU_B1.c: 468: Timeout_Counter();
  5069  1B8F  319A  22A0  319B   	fcall	_Timeout_Counter
  5070  1B92                     l8653:	
  5071  1B92  0021               	movlb	1	; select bank1
  5072  1B93  1C9D               	btfss	29,1	;volatile
  5073  1B94  2B97               	goto	l8657
  5074  1B95  1D59               	btfss	(_myMain^(0+128)+10),2
  5075  1B96  2B8F               	goto	l8651
  5076  1B97                     l8657:	
  5077                           
  5078                           ;MCU_B1.c: 469: };
  5079                           ;MCU_B1.c: 470: set_TimeoutCleared();
  5080  1B97  31A7  27DA         	fcall	_set_TimeoutCleared
  5081                           
  5082                           ;MCU_B1.c: 471: return ((ADRESH*256)+ADRESL);
  5083  1B99  0021               	movlb	1	; select bank1
  5084  1B9A  081C               	movf	28,w	;volatile
  5085  1B9B  01F3               	clrf	?_getAD+1
  5086  1B9C  07F3               	addwf	?_getAD+1,f
  5087  1B9D  081B               	movf	27,w	;volatile
  5088  1B9E  01F2               	clrf	?_getAD
  5089  1B9F  07F2               	addwf	?_getAD,f
  5090  1BA0  0008               	return
  5091  1BA1                     __end_of_getAD:	
  5092                           
  5093                           	psect	text6
  5094  1997                     __ptext6:	
  5095 ;; *************** function _WDT_Main *****************
  5096 ;; Defined at:
  5097 ;;		line 1121 in file "../src/MCU_B1.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;		None
  5102 ;; Return value:  Size  Location     Type
  5103 ;;		None               void
  5104 ;; Registers used:
  5105 ;;		wreg, status,2, status,0, pclath, cstack
  5106 ;; Tracked objects:
  5107 ;;		On entry : 0/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;Total ram usage:        1 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    4
  5118 ;; This function calls:
  5119 ;;		_WDT_Clearing
  5120 ;; This function is called by:
  5121 ;;		_main
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           
  5126                           ;psect for function _WDT_Main
  5127  1997                     _WDT_Main:	
  5128                           
  5129                           ;MCU_B1.c: 1122: if (WDT.Enable == 1) {
  5130                           
  5131                           ;incstack = 0
  5132                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5133  1997  0022               	movlb	2	; select bank2
  5134  1998  1C2A               	btfss	_WDT^(0+256),0
  5135  1999  0008               	return
  5136                           
  5137                           ;MCU_B1.c: 1123: if (WDT.Timer-- > 0) {
  5138  199A  3001               	movlw	1
  5139  199B  02AB               	subwf	(_WDT^(0+256)+1),f
  5140  199C  082B               	movf	(_WDT^(0+256)+1),w
  5141  199D  3AFF               	xorlw	255
  5142  199E  1903               	skipnz
  5143  199F  0008               	return
  5144                           
  5145                           ;MCU_B1.c: 1124: WDT.Timer = 100;
  5146  19A0  3064               	movlw	100
  5147  19A1  00F2               	movwf	??_WDT_Main
  5148  19A2  0872               	movf	??_WDT_Main,w
  5149  19A3  00AB               	movwf	(_WDT^(0+256)+1)
  5150                           
  5151                           ;MCU_B1.c: 1125: WDT_Clearing();
  5152  19A4  3180  2002         	fcall	_WDT_Clearing
  5153  19A6  0008               	return
  5154  19A7                     __end_of_WDT_Main:	
  5155                           
  5156                           	psect	text7
  5157  0002                     __ptext7:	
  5158 ;; *************** function _WDT_Clearing *****************
  5159 ;; Defined at:
  5160 ;;		line 1131 in file "../src/MCU_B1.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;		None               void
  5167 ;; Registers used:
  5168 ;;		None
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    3
  5181 ;; This function calls:
  5182 ;;		Nothing
  5183 ;; This function is called by:
  5184 ;;		_WDT_Main
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           
  5189                           ;psect for function _WDT_Clearing
  5190  0002                     _WDT_Clearing:	
  5191                           
  5192                           ;incstack = 0
  5193                           ; Regs used in _WDT_Clearing: []
  5194  0002  0064               	clrwdt	;# 
  5195  0003  0008               	return
  5196  0004                     __end_of_WDT_Clearing:	
  5197                           
  5198                           	psect	text8
  5199  1800                     __ptext8:	
  5200 ;; *************** function _Temp_Main *****************
  5201 ;; Defined at:
  5202 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;		None
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;		None
  5207 ;; Return value:  Size  Location     Type
  5208 ;;		None               void
  5209 ;; Registers used:
  5210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;Total ram usage:        0 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    6
  5223 ;; This function calls:
  5224 ;;		_setTemp_Main
  5225 ;; This function is called by:
  5226 ;;		_main
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           
  5231                           ;psect for function _Temp_Main
  5232  1800                     _Temp_Main:	
  5233                           
  5234                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5235                           
  5236                           ;incstack = 0
  5237                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5238  1800  3184  245A         	fcall	_setTemp_Main
  5239  1802  0008               	return
  5240  1803                     __end_of_Temp_Main:	
  5241                           
  5242                           	psect	text9
  5243  045A                     __ptext9:	
  5244 ;; *************** function _setTemp_Main *****************
  5245 ;; Defined at:
  5246 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;  AD              2   69[BANK0 ] int 
  5251 ;;  DangerValue     2   67[BANK0 ] unsigned int 
  5252 ;;  SafeValue       2   65[BANK0 ] unsigned int 
  5253 ;;  TempGO          1   64[BANK0 ] unsigned char 
  5254 ;;  error           1   63[BANK0 ] unsigned char 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;		None               void
  5257 ;; Registers used:
  5258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;Total ram usage:       10 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    5
  5271 ;; This function calls:
  5272 ;;		___lwdiv
  5273 ;;		_getMain_All_Error_Status
  5274 ;;		_getMain_All_LightsStatus
  5275 ;;		_setBuz
  5276 ;;		_setOverTemp_ADV_Restore
  5277 ;;		_setProductData
  5278 ;; This function is called by:
  5279 ;;		_Temp_Main
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _setTemp_Main
  5285  045A                     _setTemp_Main:	
  5286                           
  5287                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5291  045A  3000               	movlw	0
  5292  045B  319E  263C  3184   	fcall	_getMain_All_Error_Status
  5293  045E  0020               	movlb	0	; select bank0
  5294  045F  00DD               	movwf	??_setTemp_Main
  5295  0460  085D               	movf	??_setTemp_Main,w
  5296  0461  00DF               	movwf	setTemp_Main@error
  5297                           
  5298                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5299  0462  01E1               	clrf	setTemp_Main@SafeValue
  5300  0463  01E2               	clrf	setTemp_Main@SafeValue+1
  5301  0464  01E3               	clrf	setTemp_Main@DangerValue
  5302  0465  01E4               	clrf	setTemp_Main@DangerValue+1
  5303                           
  5304                           ;OverTemperature_B1.c: 75: int AD = 0;
  5305  0466  01E5               	clrf	setTemp_Main@AD
  5306  0467  01E6               	clrf	setTemp_Main@AD+1
  5307                           
  5308                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5309  0468  3199  2119  3184   	fcall	_getMain_All_LightsStatus
  5310  046B  0020               	movlb	0	; select bank0
  5311  046C  00DD               	movwf	??_setTemp_Main
  5312  046D  085D               	movf	??_setTemp_Main,w
  5313  046E  00E0               	movwf	setTemp_Main@TempGO
  5314                           
  5315                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5316  046F  0022               	movlb	2	; select bank2
  5317  0470  1C5A               	btfss	_Temp^(0+256),0
  5318  0471  2D29               	goto	l1851
  5319                           
  5320                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5321  0472  195A               	btfsc	_Temp^(0+256),2
  5322  0473  2C91               	goto	l10743
  5323                           
  5324                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5325  0474  0020               	movlb	0	; select bank0
  5326  0475  0860               	movf	setTemp_Main@TempGO,w
  5327  0476  3A01               	xorlw	1
  5328  0477  1D03               	skipz
  5329  0478  2C7C               	goto	l1857
  5330  0479  0022               	movlb	2	; select bank2
  5331  047A  1CDA               	btfss	_Temp^(0+256),1
  5332  047B  2C7F               	goto	l10735
  5333  047C                     l1857:	
  5334  047C  0022               	movlb	2	; select bank2
  5335  047D  1CDA               	btfss	_Temp^(0+256),1
  5336  047E  2C8E               	goto	l10741
  5337  047F                     l10735:	
  5338                           
  5339                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5340  047F  3001               	movlw	1
  5341  0480  07DB               	addwf	(_Temp^(0+256)+1),f
  5342  0481  3000               	movlw	0
  5343  0482  3DDC               	addwfc	((_Temp+1)^(0+256)+1),f
  5344                           
  5345                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5346  0483  3000               	movlw	0
  5347  0484  025C               	subwf	((_Temp+1)^(0+256)+1),w
  5348  0485  30FA               	movlw	250
  5349  0486  1903               	skipnz
  5350  0487  025B               	subwf	(_Temp^(0+256)+1),w
  5351  0488  1C03               	skipc
  5352  0489  0008               	return
  5353                           
  5354                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5355  048A  01DB               	clrf	(_Temp^(0+256)+1)
  5356  048B  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5357                           
  5358                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5359  048C  155A               	bsf	_Temp^(0+256),2
  5360                           
  5361                           ;OverTemperature_B1.c: 92: }
  5362                           ;OverTemperature_B1.c: 93: } else {
  5363  048D  0008               	return
  5364  048E                     l10741:	
  5365                           
  5366                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5367  048E  01DB               	clrf	(_Temp^(0+256)+1)
  5368  048F  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5369                           
  5370                           ;OverTemperature_B1.c: 95: }
  5371                           ;OverTemperature_B1.c: 96: } else {
  5372  0490  0008               	return
  5373  0491                     l10743:	
  5374                           
  5375                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5376  0491  3001               	movlw	1
  5377  0492  07DB               	addwf	(_Temp^(0+256)+1),f
  5378  0493  3000               	movlw	0
  5379  0494  3DDC               	addwfc	((_Temp+1)^(0+256)+1),f
  5380                           
  5381                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5382  0495  3000               	movlw	0
  5383  0496  025C               	subwf	((_Temp+1)^(0+256)+1),w
  5384  0497  3005               	movlw	5
  5385  0498  1903               	skipnz
  5386  0499  025B               	subwf	(_Temp^(0+256)+1),w
  5387  049A  1C03               	skipc
  5388  049B  0008               	return
  5389                           
  5390                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5391  049C  01DB               	clrf	(_Temp^(0+256)+1)
  5392  049D  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5393                           
  5394                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5395  049E  3003               	movlw	3
  5396  049F  00F2               	movwf	___lwdiv@divisor
  5397  04A0  3000               	movlw	0
  5398  04A1  00F3               	movwf	___lwdiv@divisor+1
  5399  04A2  300A               	movlw	10
  5400  04A3  3E5A               	addlw	_Temp& (0+255)
  5401  04A4  0086               	movwf	6
  5402  04A5  3001               	movlw	1	; select bank2/3
  5403  04A6  0087               	movwf	7
  5404  04A7  3008               	movlw	8
  5405  04A8  3E5A               	addlw	_Temp& (0+255)
  5406  04A9  0084               	movwf	4
  5407  04AA  3001               	movlw	1	; select bank2/3
  5408  04AB  0085               	movwf	5
  5409  04AC  3F00               	moviw [0]fsr0
  5410  04AD  0760               	addwf	(_Temp^(0+256)+6),w
  5411  04AE  0020               	movlb	0	; select bank0
  5412  04AF  00DD               	movwf	??_setTemp_Main
  5413  04B0  3F01               	moviw [1]fsr0
  5414  04B1  0022               	movlb	2	; select bank2
  5415  04B2  3D61               	addwfc	((_Temp+1)^(0+256)+6),w
  5416  04B3  0020               	movlb	0	; select bank0
  5417  04B4  00DE               	movwf	??_setTemp_Main+1
  5418  04B5  3F40               	moviw [0]fsr1
  5419  04B6  075D               	addwf	??_setTemp_Main,w
  5420  04B7  00F4               	movwf	___lwdiv@dividend
  5421  04B8  3F41               	moviw [1]fsr1
  5422  04B9  3D5E               	addwfc	??_setTemp_Main+1,w
  5423  04BA  00F5               	movwf	___lwdiv@dividend+1
  5424  04BB  319F  275D  3184   	fcall	___lwdiv
  5425  04BE  0873               	movf	?___lwdiv+1,w
  5426  04BF  0020               	movlb	0	; select bank0
  5427  04C0  01E6               	clrf	setTemp_Main@AD+1
  5428  04C1  07E6               	addwf	setTemp_Main@AD+1,f
  5429  04C2  0872               	movf	?___lwdiv,w
  5430  04C3  01E5               	clrf	setTemp_Main@AD
  5431  04C4  07E5               	addwf	setTemp_Main@AD,f
  5432                           
  5433                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5434  04C5  319B  236D  3184   	fcall	_setOverTemp_ADV_Restore
  5435                           
  5436                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5437  04C8  0020               	movlb	0	; select bank0
  5438  04C9  0866               	movf	setTemp_Main@AD+1,w
  5439  04CA  3A80               	xorlw	128
  5440  04CB  00DD               	movwf	??_setTemp_Main
  5441  04CC  3080               	movlw	128
  5442  04CD  025D               	subwf	??_setTemp_Main,w
  5443  04CE  1D03               	skipz
  5444  04CF  2CD2               	goto	u12095
  5445  04D0  3001               	movlw	1
  5446  04D1  0265               	subwf	setTemp_Main@AD,w
  5447  04D2                     u12095:	
  5448  04D2  1C03               	skipc
  5449  04D3  0008               	return
  5450                           
  5451                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5452  04D4  0022               	movlb	2	; select bank2
  5453  04D5  115A               	bcf	_Temp^(0+256),2
  5454                           
  5455                           ;OverTemperature_B1.c: 123: SafeValue = 420;
  5456  04D6  30A4               	movlw	164
  5457  04D7  0020               	movlb	0	; select bank0
  5458  04D8  00E1               	movwf	setTemp_Main@SafeValue
  5459  04D9  3001               	movlw	1
  5460  04DA  00E2               	movwf	setTemp_Main@SafeValue+1
  5461                           
  5462                           ;OverTemperature_B1.c: 124: DangerValue = 365;
  5463  04DB  306D               	movlw	109
  5464  04DC  00E3               	movwf	setTemp_Main@DangerValue
  5465  04DD  3001               	movlw	1
  5466  04DE  00E4               	movwf	setTemp_Main@DangerValue+1
  5467                           
  5468                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5469  04DF  0022               	movlb	2	; select bank2
  5470  04E0  1CDA               	btfss	_Temp^(0+256),1
  5471  04E1  2D00               	goto	l10773
  5472                           
  5473                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5474  04E2  0020               	movlb	0	; select bank0
  5475  04E3  0862               	movf	setTemp_Main@SafeValue+1,w
  5476  04E4  0266               	subwf	setTemp_Main@AD+1,w
  5477  04E5  1D03               	skipz
  5478  04E6  2CE9               	goto	u12115
  5479  04E7  0861               	movf	setTemp_Main@SafeValue,w
  5480  04E8  0265               	subwf	setTemp_Main@AD,w
  5481  04E9                     u12115:	
  5482  04E9  1C03               	skipc
  5483  04EA  2D15               	goto	l10783
  5484                           
  5485                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5486  04EB  3001               	movlw	1
  5487  04EC  00DD               	movwf	??_setTemp_Main
  5488  04ED  085D               	movf	??_setTemp_Main,w
  5489  04EE  0022               	movlb	2	; select bank2
  5490  04EF  07DD               	addwf	(_Temp^(0+256)+3),f
  5491                           
  5492                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5493  04F0  3003               	movlw	3
  5494  04F1  025D               	subwf	(_Temp^(0+256)+3),w
  5495  04F2  1C03               	skipc
  5496  04F3  2D17               	goto	l10785
  5497                           
  5498                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5499  04F4  01DD               	clrf	(_Temp^(0+256)+3)
  5500                           
  5501                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5502  04F5  10DA               	bcf	_Temp^(0+256),1
  5503                           
  5504                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5505  04F6  3064               	movlw	100
  5506  04F7  0020               	movlb	0	; select bank0
  5507  04F8  00A4               	movwf	setBuz@time
  5508  04F9  3000               	movlw	0
  5509  04FA  00A5               	movwf	setBuz@time+1
  5510  04FB  3002               	movlw	2
  5511  04FC  3192  22EC  3184   	fcall	_setBuz
  5512                           
  5513                           ;OverTemperature_B1.c: 137: }
  5514                           ;OverTemperature_B1.c: 138: } else {
  5515  04FF  2D17               	goto	l10785
  5516  0500                     l10773:	
  5517                           ;OverTemperature_B1.c: 140: }
  5518                           ;OverTemperature_B1.c: 141: } else {
  5519                           
  5520                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5521                           
  5522                           
  5523                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5524  0500  0020               	movlb	0	; select bank0
  5525  0501  0866               	movf	setTemp_Main@AD+1,w
  5526  0502  0264               	subwf	setTemp_Main@DangerValue+1,w
  5527  0503  1D03               	skipz
  5528  0504  2D07               	goto	u12135
  5529  0505  0865               	movf	setTemp_Main@AD,w
  5530  0506  0263               	subwf	setTemp_Main@DangerValue,w
  5531  0507                     u12135:	
  5532  0507  1C03               	skipc
  5533  0508  2D15               	goto	l10783
  5534                           
  5535                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5536  0509  3001               	movlw	1
  5537  050A  00DD               	movwf	??_setTemp_Main
  5538  050B  085D               	movf	??_setTemp_Main,w
  5539  050C  0022               	movlb	2	; select bank2
  5540  050D  07DD               	addwf	(_Temp^(0+256)+3),f
  5541                           
  5542                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5543  050E  3003               	movlw	3
  5544  050F  025D               	subwf	(_Temp^(0+256)+3),w
  5545  0510  1C03               	skipc
  5546  0511  2D17               	goto	l10785
  5547                           
  5548                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5549  0512  01DD               	clrf	(_Temp^(0+256)+3)
  5550                           
  5551                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5552  0513  14DA               	bsf	_Temp^(0+256),1
  5553                           
  5554                           ;OverTemperature_B1.c: 147: }
  5555                           ;OverTemperature_B1.c: 148: } else {
  5556  0514  2D17               	goto	l10785
  5557  0515                     l10783:	
  5558                           
  5559                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5560  0515  0022               	movlb	2	; select bank2
  5561  0516  01DD               	clrf	(_Temp^(0+256)+3)
  5562  0517                     l10785:	
  5563                           
  5564                           ;OverTemperature_B1.c: 150: }
  5565                           ;OverTemperature_B1.c: 151: }
  5566                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5567  0517  0020               	movlb	0	; select bank0
  5568  0518  0866               	movf	setTemp_Main@AD+1,w
  5569  0519  00DD               	movwf	??_setTemp_Main
  5570  051A  085D               	movf	??_setTemp_Main,w
  5571  051B  00DA               	movwf	setProductData@value
  5572  051C  3018               	movlw	24
  5573  051D  3198  20A2  3184   	fcall	_setProductData
  5574                           
  5575                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5576  0520  0020               	movlb	0	; select bank0
  5577  0521  0865               	movf	setTemp_Main@AD,w
  5578  0522  00DD               	movwf	??_setTemp_Main
  5579  0523  085D               	movf	??_setTemp_Main,w
  5580  0524  00DA               	movwf	setProductData@value
  5581  0525  3019               	movlw	25
  5582  0526  3198  20A2         	fcall	_setProductData
  5583                           
  5584                           ;OverTemperature_B1.c: 169: }
  5585                           ;OverTemperature_B1.c: 170: }
  5586                           ;OverTemperature_B1.c: 171: }
  5587                           ;OverTemperature_B1.c: 174: } else {
  5588  0528  0008               	return
  5589  0529                     l1851:	
  5590                           
  5591                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5592  0529  0021               	movlb	1	; select bank1
  5593  052A  1C4F               	btfss	_myMain^(0+128),0
  5594  052B  0008               	return
  5595                           
  5596                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5597  052C  0022               	movlb	2	; select bank2
  5598  052D  145A               	bsf	_Temp^(0+256),0
  5599  052E  0008               	return
  5600  052F                     __end_of_setTemp_Main:	
  5601                           
  5602                           	psect	text10
  5603  1B6D                     __ptext10:	
  5604 ;; *************** function _setOverTemp_ADV_Restore *****************
  5605 ;; Defined at:
  5606 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;		None
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  i               2    3[COMMON] int 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;		None               void
  5613 ;; Registers used:
  5614 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;Total ram usage:        3 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    3
  5627 ;; This function calls:
  5628 ;;		Nothing
  5629 ;; This function is called by:
  5630 ;;		_setTemp_Main
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           
  5635                           ;psect for function _setOverTemp_ADV_Restore
  5636  1B6D                     _setOverTemp_ADV_Restore:	
  5637                           
  5638                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5639                           
  5640                           ;incstack = 0
  5641                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5642  1B6D  01F3               	clrf	setOverTemp_ADV_Restore@i
  5643  1B6E  01F4               	clrf	setOverTemp_ADV_Restore@i+1
  5644  1B6F                     L2:	
  5645  1B6F  0874               	movf	setOverTemp_ADV_Restore@i+1,w
  5646  1B70  3A80               	xorlw	128
  5647  1B71  00F2               	movwf	??_setOverTemp_ADV_Restore
  5648  1B72  3080               	movlw	128
  5649  1B73  0272               	subwf	??_setOverTemp_ADV_Restore,w
  5650  1B74  1D03               	skipz
  5651  1B75  2B78               	goto	u7595
  5652  1B76  3005               	movlw	5
  5653  1B77  0273               	subwf	setOverTemp_ADV_Restore@i,w
  5654  1B78                     u7595:	
  5655  1B78  1803               	btfsc	3,0
  5656  1B79  0008               	return
  5657                           
  5658                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5659  1B7A  3573               	lslf	setOverTemp_ADV_Restore@i,w
  5660  1B7B  3E5E               	addlw	(_Temp+4)& (0+255)
  5661  1B7C  0086               	movwf	6
  5662  1B7D  3001               	movlw	1	; select bank2/3
  5663  1B7E  0087               	movwf	7
  5664  1B7F  3000               	movlw	0
  5665  1B80  3FC0               	movwi [0]fsr1
  5666  1B81  3FC1               	movwi [1]fsr1
  5667  1B82  3001               	movlw	1
  5668  1B83  07F3               	addwf	setOverTemp_ADV_Restore@i,f
  5669  1B84  3000               	movlw	0
  5670  1B85  3DF4               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5671  1B86  2B6F               	goto	L2
  5672  1B87                     __end_of_setOverTemp_ADV_Restore:	
  5673                           
  5674                           	psect	text11
  5675  27BE                     __ptext11:	
  5676 ;; *************** function _Temp_Initialization *****************
  5677 ;; Defined at:
  5678 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;		None               void
  5685 ;; Registers used:
  5686 ;;		status,2, status,0, pclath, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;Total ram usage:        0 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    4
  5699 ;; This function calls:
  5700 ;;		_setTemp_Initialization
  5701 ;; This function is called by:
  5702 ;;		_main
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           
  5707                           ;psect for function _Temp_Initialization
  5708  27BE                     _Temp_Initialization:	
  5709                           
  5710                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5711                           
  5712                           ;incstack = 0
  5713                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5714  27BE  3188  2000         	fcall	_setTemp_Initialization
  5715  27C0  0008               	return
  5716  27C1                     __end_of_Temp_Initialization:	
  5717                           
  5718                           	psect	text12
  5719  0800                     __ptext12:	
  5720 ;; *************** function _setTemp_Initialization *****************
  5721 ;; Defined at:
  5722 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;		None               void
  5729 ;; Registers used:
  5730 ;;		None
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;Total ram usage:        0 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    3
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_Temp_Initialization
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function _setTemp_Initialization
  5752  0800                     _setTemp_Initialization:	
  5753                           
  5754                           ;incstack = 0
  5755                           ; Regs used in _setTemp_Initialization: []
  5756  0800  0008               	return
  5757  0801                     __end_of_setTemp_Initialization:	
  5758                           
  5759                           	psect	text13
  5760  188B                     __ptext13:	
  5761 ;; *************** function _Switch_Main *****************
  5762 ;; Defined at:
  5763 ;;		line 76 in file "../src/Switch_B1.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;		None               void
  5770 ;; Registers used:
  5771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5781 ;;Total ram usage:        0 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    7
  5784 ;; This function calls:
  5785 ;;		_TouchPower
  5786 ;;		_setSw_Main
  5787 ;; This function is called by:
  5788 ;;		_main
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           
  5793                           ;psect for function _Switch_Main
  5794  188B                     _Switch_Main:	
  5795                           
  5796                           ;Switch_B1.c: 79: setSw_Main(1);
  5797                           
  5798                           ;incstack = 0
  5799                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5800  188B  3001               	movlw	1
  5801  188C  3181  21F3  3198   	fcall	_setSw_Main
  5802                           
  5803                           ;Switch_B1.c: 83: setSw_Main(2);
  5804  188F  3002               	movlw	2
  5805  1890  3181  21F3  3198   	fcall	_setSw_Main
  5806                           
  5807                           ;Switch_B1.c: 91: TouchPower();
  5808  1893  319A  22B5         	fcall	_TouchPower
  5809  1895  0008               	return
  5810  1896                     __end_of_Switch_Main:	
  5811                           
  5812                           	psect	text14
  5813  01F3                     __ptext14:	
  5814 ;; *************** function _setSw_Main *****************
  5815 ;; Defined at:
  5816 ;;		line 117 in file "../src/Switch_B1.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  sw              1    wreg     unsigned char 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  sw              1   13[BANK0 ] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;		None               void
  5823 ;; Registers used:
  5824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;Total ram usage:        3 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    6
  5837 ;; This function calls:
  5838 ;;		_SwPointSelect
  5839 ;;		_getMain_All_Error_Status
  5840 ;;		_getSw_KeyStatus
  5841 ;;		_setBuz
  5842 ;;		_setDimmerLights_DimmingOn
  5843 ;;		_setDimmerLights_SwOff
  5844 ;;		_setDimmerLights_SwOn
  5845 ;;		_setRF_Learn
  5846 ;; This function is called by:
  5847 ;;		_Switch_Main
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           
  5852                           ;psect for function _setSw_Main
  5853  01F3                     _setSw_Main:	
  5854                           
  5855                           ;incstack = 0
  5856                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5857                           ;setSw_Main@sw stored from wreg
  5858  01F3  0020               	movlb	0	; select bank0
  5859  01F4  00AD               	movwf	setSw_Main@sw
  5860                           
  5861                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5862  01F5  082D               	movf	setSw_Main@sw,w
  5863  01F6  319A  22CA  3181   	fcall	_SwPointSelect
  5864                           
  5865                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5866  01F9  0020               	movlb	0	; select bank0
  5867  01FA  086D               	movf	_Sw,w
  5868  01FB  0086               	movwf	6
  5869  01FC  3001               	movlw	1	; select bank2/3
  5870  01FD  0087               	movwf	7
  5871  01FE  1C01               	btfss	1,0
  5872  01FF  2B5A               	goto	l2682
  5873                           
  5874                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5875  0200  3000               	movlw	0
  5876  0201  319E  263C  3181   	fcall	_getMain_All_Error_Status
  5877  0204  3800               	iorlw	0
  5878  0205  1D03               	skipz
  5879  0206  2A22               	goto	l10879
  5880                           
  5881                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5882  0207  0020               	movlb	0	; select bank0
  5883  0208  0A6D               	incf	_Sw,w
  5884  0209  0086               	movwf	6
  5885  020A  3001               	movlw	1	; select bank2/3
  5886  020B  0087               	movwf	7
  5887  020C  1081               	bcf	1,1
  5888                           
  5889                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5890  020D  082D               	movf	setSw_Main@sw,w
  5891  020E  319C  2465  3181   	fcall	_getSw_KeyStatus
  5892  0211  3A01               	xorlw	1
  5893  0212  3000               	movlw	0
  5894  0213  1903               	skipnz
  5895  0214  3001               	movlw	1
  5896  0215  0020               	movlb	0	; select bank0
  5897  0216  00AB               	movwf	??_setSw_Main
  5898  0217  086D               	movf	_Sw,w
  5899  0218  0086               	movwf	6
  5900  0219  3001               	movlw	1	; select bank2/3
  5901  021A  0087               	movwf	7
  5902  021B  0DAB               	rlf	??_setSw_Main,f
  5903  021C  0801               	movf	1,w
  5904  021D  062B               	xorwf	??_setSw_Main,w
  5905  021E  39FD               	andlw	-3
  5906  021F  062B               	xorwf	??_setSw_Main,w
  5907  0220  0081               	movwf	1
  5908                           
  5909                           ;Switch_B1.c: 124: } else {
  5910  0221  2A38               	goto	l2684
  5911  0222                     l10879:	
  5912                           
  5913                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5914  0222  0020               	movlb	0	; select bank0
  5915  0223  0A6D               	incf	_Sw,w
  5916  0224  0086               	movwf	6
  5917  0225  3001               	movlw	1	; select bank2/3
  5918  0226  0087               	movwf	7
  5919  0227  1881               	btfsc	1,1
  5920  0228  2A38               	goto	l2684
  5921                           
  5922                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5923  0229  0A6D               	incf	_Sw,w
  5924  022A  0086               	movwf	6
  5925  022B  3001               	movlw	1	; select bank2/3
  5926  022C  0087               	movwf	7
  5927  022D  1481               	bsf	1,1
  5928                           
  5929                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5930  022E  086D               	movf	_Sw,w
  5931  022F  0086               	movwf	6
  5932  0230  3001               	movlw	1	; select bank2/3
  5933  0231  0087               	movwf	7
  5934  0232  1081               	bcf	1,1
  5935                           
  5936                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5937  0233  086D               	movf	_Sw,w
  5938  0234  0086               	movwf	6
  5939  0235  3001               	movlw	1	; select bank2/3
  5940  0236  0087               	movwf	7
  5941  0237  1501               	bsf	1,2
  5942  0238                     l2684:	
  5943                           
  5944                           ;Switch_B1.c: 130: }
  5945                           ;Switch_B1.c: 131: }
  5946                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5947  0238  086D               	movf	_Sw,w
  5948  0239  0086               	movwf	6
  5949  023A  3001               	movlw	1	; select bank2/3
  5950  023B  0087               	movwf	7
  5951  023C  1C81               	btfss	1,1
  5952  023D  2B07               	goto	l10929
  5953                           
  5954                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5955  023E  086D               	movf	_Sw,w
  5956  023F  0086               	movwf	6
  5957  0240  3001               	movlw	1	; select bank2/3
  5958  0241  0087               	movwf	7
  5959  0242  1901               	btfsc	1,2
  5960  0243  2A65               	goto	l10895
  5961                           
  5962                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5963  0244  3001               	movlw	1
  5964  0245  00AB               	movwf	??_setSw_Main
  5965  0246  086D               	movf	_Sw,w
  5966  0247  3E02               	addlw	2
  5967  0248  0086               	movwf	6
  5968  0249  3001               	movlw	1	; select bank2/3
  5969  024A  0087               	movwf	7
  5970  024B  082B               	movf	??_setSw_Main,w
  5971  024C  0781               	addwf	1,f
  5972                           
  5973                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  5974  024D  086D               	movf	_Sw,w
  5975  024E  3E02               	addlw	2
  5976  024F  0086               	movwf	6
  5977  0250  3001               	movlw	1	; select bank2/3
  5978  0251  0087               	movwf	7
  5979  0252  3005               	movlw	5
  5980  0253  0201               	subwf	1,w
  5981  0254  1C03               	skipc
  5982  0255  0008               	return
  5983                           
  5984                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5985  0256  086D               	movf	_Sw,w
  5986  0257  3E02               	addlw	2
  5987  0258  0086               	movwf	6
  5988  0259  3001               	movlw	1	; select bank2/3
  5989  025A  0087               	movwf	7
  5990  025B  0181               	clrf	1
  5991                           
  5992                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5993  025C  086D               	movf	_Sw,w
  5994  025D  0086               	movwf	6
  5995  025E  3001               	movlw	1	; select bank2/3
  5996  025F  0087               	movwf	7
  5997  0260  1501               	bsf	1,2
  5998                           
  5999                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  6000  0261  082D               	movf	setSw_Main@sw,w
  6001  0262  3187  2784         	fcall	_setDimmerLights_SwOn
  6002                           
  6003                           ;Switch_B1.c: 147: }
  6004                           ;Switch_B1.c: 148: } else {
  6005  0264  0008               	return
  6006  0265                     l10895:	
  6007                           
  6008                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6009  0265  0020               	movlb	0	; select bank0
  6010  0266  086D               	movf	_Sw,w
  6011  0267  0086               	movwf	6
  6012  0268  3001               	movlw	1	; select bank2/3
  6013  0269  0087               	movwf	7
  6014  026A  1981               	btfsc	1,3
  6015  026B  2A97               	goto	l10905
  6016                           
  6017                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6018  026C  086D               	movf	_Sw,w
  6019  026D  3E03               	addlw	3
  6020  026E  0086               	movwf	6
  6021  026F  3001               	movlw	1	; select bank2/3
  6022  0270  0087               	movwf	7
  6023  0271  3001               	movlw	1
  6024  0272  0781               	addwf	1,f
  6025  0273  3141               	addfsr 1,1
  6026  0274  1803               	skipnc
  6027  0275  0A81               	incf	1,f
  6028                           
  6029                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6030  0276  086D               	movf	_Sw,w
  6031  0277  3E03               	addlw	3
  6032  0278  0086               	movwf	6
  6033  0279  3001               	movlw	1	; select bank2/3
  6034  027A  0087               	movwf	7
  6035  027B  3F40               	moviw [0]fsr1
  6036  027C  00AB               	movwf	??_setSw_Main
  6037  027D  3F41               	moviw [1]fsr1
  6038  027E  00AC               	movwf	??_setSw_Main+1
  6039  027F  3000               	movlw	0
  6040  0280  022C               	subwf	??_setSw_Main+1,w
  6041  0281  304B               	movlw	75
  6042  0282  1903               	skipnz
  6043  0283  022B               	subwf	??_setSw_Main,w
  6044  0284  1C03               	skipc
  6045  0285  0008               	return
  6046                           
  6047                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6048  0286  086D               	movf	_Sw,w
  6049  0287  3E03               	addlw	3
  6050  0288  0086               	movwf	6
  6051  0289  3001               	movlw	1	; select bank2/3
  6052  028A  0087               	movwf	7
  6053  028B  3000               	movlw	0
  6054  028C  3FC0               	movwi [0]fsr1
  6055  028D  3FC1               	movwi [1]fsr1
  6056                           
  6057                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6058  028E  086D               	movf	_Sw,w
  6059  028F  0086               	movwf	6
  6060  0290  3001               	movlw	1	; select bank2/3
  6061  0291  0087               	movwf	7
  6062  0292  1581               	bsf	1,3
  6063                           
  6064                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6065  0293  082D               	movf	setSw_Main@sw,w
  6066  0294  319D  2599         	fcall	_setDimmerLights_DimmingOn
  6067                           
  6068                           ;Switch_B1.c: 162: }
  6069                           ;Switch_B1.c: 163: } else {
  6070  0296  0008               	return
  6071  0297                     l10905:	
  6072                           
  6073                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6074  0297  0020               	movlb	0	; select bank0
  6075  0298  086D               	movf	_Sw,w
  6076  0299  0086               	movwf	6
  6077  029A  3001               	movlw	1	; select bank2/3
  6078  029B  0087               	movwf	7
  6079  029C  1A01               	btfsc	1,4
  6080  029D  2AD5               	goto	l10919
  6081                           
  6082                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6083  029E  086D               	movf	_Sw,w
  6084  029F  3E05               	addlw	5
  6085  02A0  0086               	movwf	6
  6086  02A1  3001               	movlw	1	; select bank2/3
  6087  02A2  0087               	movwf	7
  6088  02A3  3001               	movlw	1
  6089  02A4  0781               	addwf	1,f
  6090  02A5  3141               	addfsr 1,1
  6091  02A6  1803               	skipnc
  6092  02A7  0A81               	incf	1,f
  6093                           
  6094                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6095  02A8  086D               	movf	_Sw,w
  6096  02A9  3E05               	addlw	5
  6097  02AA  0086               	movwf	6
  6098  02AB  3001               	movlw	1	; select bank2/3
  6099  02AC  0087               	movwf	7
  6100  02AD  3F40               	moviw [0]fsr1
  6101  02AE  00AB               	movwf	??_setSw_Main
  6102  02AF  3F41               	moviw [1]fsr1
  6103  02B0  00AC               	movwf	??_setSw_Main+1
  6104  02B1  3000               	movlw	0
  6105  02B2  022C               	subwf	??_setSw_Main+1,w
  6106  02B3  304B               	movlw	75
  6107  02B4  1903               	skipnz
  6108  02B5  022B               	subwf	??_setSw_Main,w
  6109  02B6  1C03               	skipc
  6110  02B7  0008               	return
  6111                           
  6112                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6113  02B8  086D               	movf	_Sw,w
  6114  02B9  3E05               	addlw	5
  6115  02BA  0086               	movwf	6
  6116  02BB  3001               	movlw	1	; select bank2/3
  6117  02BC  0087               	movwf	7
  6118  02BD  3000               	movlw	0
  6119  02BE  3FC0               	movwi [0]fsr1
  6120  02BF  3FC1               	movwi [1]fsr1
  6121                           
  6122                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6123  02C0  086D               	movf	_Sw,w
  6124  02C1  0086               	movwf	6
  6125  02C2  3001               	movlw	1	; select bank2/3
  6126  02C3  0087               	movwf	7
  6127  02C4  1601               	bsf	1,4
  6128                           
  6129                           ;Switch_B1.c: 172: setRF_Learn(1);
  6130  02C5  3001               	movlw	1
  6131  02C6  3199  21EB  3181   	fcall	_setRF_Learn
  6132                           
  6133                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6134  02C9  0021               	movlb	1	; select bank1
  6135  02CA  1ECF               	btfss	_myMain^(0+128),5
  6136  02CB  0008               	return
  6137                           
  6138                           ;Switch_B1.c: 174: setBuz(2, 100);
  6139  02CC  3064               	movlw	100
  6140  02CD  0020               	movlb	0	; select bank0
  6141  02CE  00A4               	movwf	setBuz@time
  6142  02CF  3000               	movlw	0
  6143  02D0  00A5               	movwf	setBuz@time+1
  6144  02D1  3002               	movlw	2
  6145  02D2  3192  22EC         	fcall	_setBuz
  6146                           
  6147                           ;Switch_B1.c: 175: }
  6148                           ;Switch_B1.c: 179: }
  6149                           ;Switch_B1.c: 180: } else {
  6150  02D4  0008               	return
  6151  02D5                     l10919:	
  6152                           
  6153                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6154  02D5  0020               	movlb	0	; select bank0
  6155  02D6  086D               	movf	_Sw,w
  6156  02D7  0086               	movwf	6
  6157  02D8  3001               	movlw	1	; select bank2/3
  6158  02D9  0087               	movwf	7
  6159  02DA  1A81               	btfsc	1,5
  6160  02DB  0008               	return
  6161                           
  6162                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6163  02DC  086D               	movf	_Sw,w
  6164  02DD  3E07               	addlw	7
  6165  02DE  0086               	movwf	6
  6166  02DF  3001               	movlw	1	; select bank2/3
  6167  02E0  0087               	movwf	7
  6168  02E1  3001               	movlw	1
  6169  02E2  0781               	addwf	1,f
  6170  02E3  3141               	addfsr 1,1
  6171  02E4  1803               	skipnc
  6172  02E5  0A81               	incf	1,f
  6173                           
  6174                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6175  02E6  086D               	movf	_Sw,w
  6176  02E7  3E07               	addlw	7
  6177  02E8  0086               	movwf	6
  6178  02E9  3001               	movlw	1	; select bank2/3
  6179  02EA  0087               	movwf	7
  6180  02EB  3F40               	moviw [0]fsr1
  6181  02EC  00AB               	movwf	??_setSw_Main
  6182  02ED  3F41               	moviw [1]fsr1
  6183  02EE  00AC               	movwf	??_setSw_Main+1
  6184  02EF  3000               	movlw	0
  6185  02F0  022C               	subwf	??_setSw_Main+1,w
  6186  02F1  3096               	movlw	150
  6187  02F2  1903               	skipnz
  6188  02F3  022B               	subwf	??_setSw_Main,w
  6189  02F4  1C03               	skipc
  6190  02F5  0008               	return
  6191                           
  6192                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6193  02F6  086D               	movf	_Sw,w
  6194  02F7  3E07               	addlw	7
  6195  02F8  0086               	movwf	6
  6196  02F9  3001               	movlw	1	; select bank2/3
  6197  02FA  0087               	movwf	7
  6198  02FB  3000               	movlw	0
  6199  02FC  3FC0               	movwi [0]fsr1
  6200  02FD  3FC1               	movwi [1]fsr1
  6201                           
  6202                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6203  02FE  086D               	movf	_Sw,w
  6204  02FF  0086               	movwf	6
  6205  0300  3001               	movlw	1	; select bank2/3
  6206  0301  0087               	movwf	7
  6207  0302  1681               	bsf	1,5
  6208                           
  6209                           ;Switch_B1.c: 188: setRF_Learn(0);
  6210  0303  3000               	movlw	0
  6211  0304  3199  21EB         	fcall	_setRF_Learn
  6212                           
  6213                           ;Switch_B1.c: 191: }
  6214                           ;Switch_B1.c: 192: }
  6215                           ;Switch_B1.c: 193: }
  6216                           ;Switch_B1.c: 195: }
  6217                           ;Switch_B1.c: 196: }
  6218                           ;Switch_B1.c: 197: } else {
  6219  0306  0008               	return
  6220  0307                     l10929:	
  6221                           
  6222                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6223  0307  0020               	movlb	0	; select bank0
  6224  0308  086D               	movf	_Sw,w
  6225  0309  0086               	movwf	6
  6226  030A  3001               	movlw	1	; select bank2/3
  6227  030B  0087               	movwf	7
  6228  030C  1D01               	btfss	1,2
  6229  030D  0008               	return
  6230                           
  6231                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6232  030E  3001               	movlw	1
  6233  030F  00AB               	movwf	??_setSw_Main
  6234  0310  086D               	movf	_Sw,w
  6235  0311  3E02               	addlw	2
  6236  0312  0086               	movwf	6
  6237  0313  3001               	movlw	1	; select bank2/3
  6238  0314  0087               	movwf	7
  6239  0315  082B               	movf	??_setSw_Main,w
  6240  0316  0781               	addwf	1,f
  6241                           
  6242                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  6243  0317  086D               	movf	_Sw,w
  6244  0318  3E02               	addlw	2
  6245  0319  0086               	movwf	6
  6246  031A  3001               	movlw	1	; select bank2/3
  6247  031B  0087               	movwf	7
  6248  031C  3005               	movlw	5
  6249  031D  0201               	subwf	1,w
  6250  031E  1C03               	skipc
  6251  031F  0008               	return
  6252                           
  6253                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6254  0320  086D               	movf	_Sw,w
  6255  0321  3E02               	addlw	2
  6256  0322  0086               	movwf	6
  6257  0323  3001               	movlw	1	; select bank2/3
  6258  0324  0087               	movwf	7
  6259  0325  0181               	clrf	1
  6260                           
  6261                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6262  0326  086D               	movf	_Sw,w
  6263  0327  0086               	movwf	6
  6264  0328  3001               	movlw	1	; select bank2/3
  6265  0329  0087               	movwf	7
  6266  032A  1101               	bcf	1,2
  6267                           
  6268                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6269  032B  086D               	movf	_Sw,w
  6270  032C  3E03               	addlw	3
  6271  032D  0086               	movwf	6
  6272  032E  3001               	movlw	1	; select bank2/3
  6273  032F  0087               	movwf	7
  6274  0330  3000               	movlw	0
  6275  0331  3FC0               	movwi [0]fsr1
  6276  0332  3FC1               	movwi [1]fsr1
  6277                           
  6278                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6279  0333  086D               	movf	_Sw,w
  6280  0334  0086               	movwf	6
  6281  0335  3001               	movlw	1	; select bank2/3
  6282  0336  0087               	movwf	7
  6283  0337  1181               	bcf	1,3
  6284                           
  6285                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6286  0338  086D               	movf	_Sw,w
  6287  0339  0086               	movwf	6
  6288  033A  3001               	movlw	1	; select bank2/3
  6289  033B  0087               	movwf	7
  6290  033C  1201               	bcf	1,4
  6291                           
  6292                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6293  033D  086D               	movf	_Sw,w
  6294  033E  0086               	movwf	6
  6295  033F  3001               	movlw	1	; select bank2/3
  6296  0340  0087               	movwf	7
  6297  0341  1281               	bcf	1,5
  6298                           
  6299                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6300  0342  086D               	movf	_Sw,w
  6301  0343  3E05               	addlw	5
  6302  0344  0086               	movwf	6
  6303  0345  3001               	movlw	1	; select bank2/3
  6304  0346  0087               	movwf	7
  6305  0347  3000               	movlw	0
  6306  0348  3FC0               	movwi [0]fsr1
  6307  0349  3FC1               	movwi [1]fsr1
  6308                           
  6309                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6310  034A  086D               	movf	_Sw,w
  6311  034B  3E07               	addlw	7
  6312  034C  0086               	movwf	6
  6313  034D  3001               	movlw	1	; select bank2/3
  6314  034E  0087               	movwf	7
  6315  034F  3000               	movlw	0
  6316  0350  3FC0               	movwi [0]fsr1
  6317  0351  3FC1               	movwi [1]fsr1
  6318                           
  6319                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6320  0352  082D               	movf	setSw_Main@sw,w
  6321  0353  3191  2122  3181   	fcall	_setDimmerLights_SwOff
  6322                           
  6323                           ;Switch_B1.c: 220: setRF_Learn(0);
  6324  0356  3000               	movlw	0
  6325  0357  3199  21EB         	fcall	_setRF_Learn
  6326                           
  6327                           ;Switch_B1.c: 222: }
  6328                           ;Switch_B1.c: 223: }
  6329                           ;Switch_B1.c: 224: }
  6330                           ;Switch_B1.c: 225: } else {
  6331  0359  0008               	return
  6332  035A                     l2682:	
  6333                           
  6334                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6335  035A  0021               	movlb	1	; select bank1
  6336  035B  1C4F               	btfss	_myMain^(0+128),0
  6337  035C  0008               	return
  6338                           
  6339                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6340  035D  0020               	movlb	0	; select bank0
  6341  035E  086D               	movf	_Sw,w
  6342  035F  0086               	movwf	6
  6343  0360  3001               	movlw	1	; select bank2/3
  6344  0361  0087               	movwf	7
  6345  0362  1401               	bsf	1,0
  6346  0363  0008               	return
  6347  0364                     __end_of_setSw_Main:	
  6348                           
  6349                           	psect	text15
  6350  19EB                     __ptext15:	
  6351 ;; *************** function _setRF_Learn *****************
  6352 ;; Defined at:
  6353 ;;		line 33 in file "../src/RF_Control_B1.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;  command         1    wreg     unsigned char 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  command         1    3[COMMON] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;		None               void
  6360 ;; Registers used:
  6361 ;;		wreg, status,2, status,0
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;Total ram usage:        2 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    3
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_setSw_Main
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           
  6382                           ;psect for function _setRF_Learn
  6383  19EB                     _setRF_Learn:	
  6384                           
  6385                           ;incstack = 0
  6386                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6387                           ;setRF_Learn@command stored from wreg
  6388  19EB  00F3               	movwf	setRF_Learn@command
  6389                           
  6390                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6391  19EC  0873               	movf	setRF_Learn@command,w
  6392  19ED  3A01               	xorlw	1
  6393  19EE  3000               	movlw	0
  6394  19EF  1903               	skipnz
  6395  19F0  3001               	movlw	1
  6396  19F1  00F2               	movwf	??_setRF_Learn
  6397  19F2  0EF2               	swapf	??_setRF_Learn,f
  6398  19F3  0DF2               	rlf	??_setRF_Learn,f
  6399  19F4  0DF2               	rlf	??_setRF_Learn,f
  6400  19F5  0021               	movlb	1	; select bank1
  6401  19F6  0840               	movf	_RF1^(0+128),w
  6402  19F7  0672               	xorwf	??_setRF_Learn,w
  6403  19F8  39BF               	andlw	-65
  6404  19F9  0672               	xorwf	??_setRF_Learn,w
  6405  19FA  00C0               	movwf	_RF1^(0+128)
  6406  19FB  0008               	return
  6407  19FC                     __end_of_setRF_Learn:	
  6408                           
  6409                           	psect	text16
  6410  1D99                     __ptext16:	
  6411 ;; *************** function _setDimmerLights_DimmingOn *****************
  6412 ;; Defined at:
  6413 ;;		line 846 in file "../src/Dimmer_B1.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  sw              1    wreg     unsigned char 
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;  sw              1    4[COMMON] unsigned char 
  6418 ;; Return value:  Size  Location     Type
  6419 ;;		None               void
  6420 ;; Registers used:
  6421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;Total ram usage:        1 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:    4
  6434 ;; This function calls:
  6435 ;;		_DimmerLights_SelectPointer
  6436 ;; This function is called by:
  6437 ;;		_setSw_Main
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           
  6442                           ;psect for function _setDimmerLights_DimmingOn
  6443  1D99                     _setDimmerLights_DimmingOn:	
  6444                           
  6445                           ;incstack = 0
  6446                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6447                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6448  1D99  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6449                           
  6450                           ;Dimmer_B1.c: 852: DimmerLights_SelectPointer(sw);
  6451  1D9A  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6452  1D9B  319A  2237  319D   	fcall	_DimmerLights_SelectPointer
  6453                           
  6454                           ;Dimmer_B1.c: 853: if (DimmerLights->Trigger == 0) {
  6455  1D9E  0020               	movlb	0	; select bank0
  6456  1D9F  086C               	movf	_DimmerLights,w
  6457  1DA0  0086               	movwf	6
  6458  1DA1  3001               	movlw	1	; select bank2/3
  6459  1DA2  0087               	movwf	7
  6460  1DA3  1881               	btfsc	1,1
  6461  1DA4  0008               	return
  6462                           
  6463                           ;Dimmer_B1.c: 854: if (DimmerLights->SwFlag == 1) {
  6464  1DA5  086C               	movf	_DimmerLights,w
  6465  1DA6  0086               	movwf	6
  6466  1DA7  3001               	movlw	1	; select bank2/3
  6467  1DA8  0087               	movwf	7
  6468  1DA9  1C01               	btfss	1,0
  6469  1DAA  0008               	return
  6470                           
  6471                           ;Dimmer_B1.c: 855: DimmerLights->Status = 1;
  6472  1DAB  0A6C               	incf	_DimmerLights,w
  6473  1DAC  0086               	movwf	6
  6474  1DAD  3001               	movlw	1	; select bank2/3
  6475  1DAE  0087               	movwf	7
  6476  1DAF  1401               	bsf	1,0
  6477                           
  6478                           ;Dimmer_B1.c: 857: DimmerLights->DimmingSwFlag = 1;
  6479  1DB0  086C               	movf	_DimmerLights,w
  6480  1DB1  0086               	movwf	6
  6481  1DB2  3001               	movlw	1	; select bank2/3
  6482  1DB3  0087               	movwf	7
  6483  1DB4  1581               	bsf	1,3
  6484                           
  6485                           ;Dimmer_B1.c: 858: DimmerLights->DimmingTrigger = 1;
  6486  1DB5  086C               	movf	_DimmerLights,w
  6487  1DB6  0086               	movwf	6
  6488  1DB7  3001               	movlw	1	; select bank2/3
  6489  1DB8  0087               	movwf	7
  6490  1DB9  1601               	bsf	1,4
  6491                           
  6492                           ;Dimmer_B1.c: 859: DimmerLights->DimmingSwitch = 1;
  6493  1DBA  086C               	movf	_DimmerLights,w
  6494  1DBB  0086               	movwf	6
  6495  1DBC  3001               	movlw	1	; select bank2/3
  6496  1DBD  0087               	movwf	7
  6497  1DBE  1681               	bsf	1,5
  6498  1DBF  0008               	return
  6499  1DC0                     __end_of_setDimmerLights_DimmingOn:	
  6500                           
  6501                           	psect	text17
  6502  1C65                     __ptext17:	
  6503 ;; *************** function _getSw_KeyStatus *****************
  6504 ;; Defined at:
  6505 ;;		line 238 in file "../src/Switch_B1.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  sw              1    wreg     unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  sw              1    6[COMMON] unsigned char 
  6510 ;;  status          1    5[COMMON] unsigned char 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;                  1    wreg      unsigned char 
  6513 ;; Registers used:
  6514 ;;		wreg, status,2
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;Total ram usage:        5 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    3
  6527 ;; This function calls:
  6528 ;;		Nothing
  6529 ;; This function is called by:
  6530 ;;		_setSw_Main
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function _getSw_KeyStatus
  6536  1C65                     _getSw_KeyStatus:	
  6537                           
  6538                           ;incstack = 0
  6539                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6540                           ;getSw_KeyStatus@sw stored from wreg
  6541  1C65  00F6               	movwf	getSw_KeyStatus@sw
  6542                           
  6543                           ;Switch_B1.c: 239: char status = 0;
  6544  1C66  01F5               	clrf	getSw_KeyStatus@status
  6545                           
  6546                           ;Switch_B1.c: 266: if (sw == 1) {
  6547  1C67  0876               	movf	getSw_KeyStatus@sw,w
  6548  1C68  3A01               	xorlw	1
  6549  1C69  1D03               	skipz
  6550  1C6A  2C74               	goto	l8171
  6551                           
  6552                           ;Switch_B1.c: 267: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6553  1C6B  01F3               	clrf	_getSw_KeyStatus$6939
  6554  1C6C  0AF3               	incf	_getSw_KeyStatus$6939,f
  6555  1C6D  0020               	movlb	0	; select bank0
  6556  1C6E  1C0C               	btfss	12,0	;volatile
  6557  1C6F  188D               	btfsc	13,1	;volatile
  6558  1C70  2C72               	goto	l8169
  6559  1C71  01F3               	clrf	_getSw_KeyStatus$6939
  6560  1C72                     l8169:	
  6561  1C72  0873               	movf	_getSw_KeyStatus$6939,w
  6562  1C73  2C80               	goto	L3
  6563  1C74                     l8171:	
  6564                           ;Switch_B1.c: 268: } else if (sw == 2) {
  6565                           
  6566  1C74  0876               	movf	getSw_KeyStatus@sw,w
  6567  1C75  3A02               	xorlw	2
  6568  1C76  1D03               	skipz
  6569  1C77  2C83               	goto	l8181
  6570                           
  6571                           ;Switch_B1.c: 269: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6572  1C78  01F4               	clrf	_getSw_KeyStatus$6940
  6573  1C79  0AF4               	incf	_getSw_KeyStatus$6940,f
  6574  1C7A  0020               	movlb	0	; select bank0
  6575  1C7B  1F0C               	btfss	12,6	;volatile
  6576  1C7C  1A0C               	btfsc	12,4	;volatile
  6577  1C7D  2C7F               	goto	l8179
  6578  1C7E  01F4               	clrf	_getSw_KeyStatus$6940
  6579  1C7F                     l8179:	
  6580  1C7F  0874               	movf	_getSw_KeyStatus$6940,w
  6581  1C80                     L3:	
  6582  1C80  00F2               	movwf	??_getSw_KeyStatus
  6583  1C81  0872               	movf	??_getSw_KeyStatus,w
  6584  1C82  00F5               	movwf	getSw_KeyStatus@status
  6585  1C83                     l8181:	
  6586                           
  6587                           ;Switch_B1.c: 270: }
  6588                           ;Switch_B1.c: 283: return status;
  6589  1C83  0875               	movf	getSw_KeyStatus@status,w
  6590  1C84  0008               	return
  6591  1C85                     __end_of_getSw_KeyStatus:	
  6592                           
  6593                           	psect	text18
  6594  1ACA                     __ptext18:	
  6595 ;; *************** function _SwPointSelect *****************
  6596 ;; Defined at:
  6597 ;;		line 25 in file "../src/Switch_B1.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;  sw              1    wreg     unsigned char 
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;  sw              1    3[COMMON] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;		None               void
  6604 ;; Registers used:
  6605 ;;		wreg
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;Total ram usage:        2 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    3
  6618 ;; This function calls:
  6619 ;;		Nothing
  6620 ;; This function is called by:
  6621 ;;		_setSw_Main
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           
  6626                           ;psect for function _SwPointSelect
  6627  1ACA                     _SwPointSelect:	
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in _SwPointSelect: [wreg]
  6631                           ;SwPointSelect@sw stored from wreg
  6632  1ACA  00F3               	movwf	SwPointSelect@sw
  6633                           
  6634                           ;Switch_B1.c: 28: if (sw == 1) {
  6635  1ACB  0873               	movf	SwPointSelect@sw,w
  6636  1ACC  3A01               	xorlw	1
  6637  1ACD  1D03               	skipz
  6638  1ACE  2AD5               	goto	l8155
  6639                           
  6640                           ;Switch_B1.c: 29: Sw = &Sw1;
  6641  1ACF  30D0               	movlw	_Sw1& (0+255)
  6642  1AD0  00F2               	movwf	??_SwPointSelect
  6643  1AD1  0872               	movf	??_SwPointSelect,w
  6644  1AD2  0020               	movlb	0	; select bank0
  6645  1AD3  00ED               	movwf	_Sw
  6646                           
  6647                           ;Switch_B1.c: 30: }
  6648  1AD4  0008               	return
  6649  1AD5                     l8155:	
  6650                           
  6651                           ;Switch_B1.c: 33: else if (sw == 2) {
  6652  1AD5  0873               	movf	SwPointSelect@sw,w
  6653  1AD6  3A02               	xorlw	2
  6654  1AD7  1D03               	skipz
  6655  1AD8  0008               	return
  6656                           
  6657                           ;Switch_B1.c: 34: Sw = &Sw2;
  6658  1AD9  30D9               	movlw	_Sw2& (0+255)
  6659  1ADA  00F2               	movwf	??_SwPointSelect
  6660  1ADB  0872               	movf	??_SwPointSelect,w
  6661  1ADC  0020               	movlb	0	; select bank0
  6662  1ADD  00ED               	movwf	_Sw
  6663  1ADE  0008               	return
  6664  1ADF                     __end_of_SwPointSelect:	
  6665                           
  6666                           	psect	text19
  6667  1AB5                     __ptext19:	
  6668 ;; *************** function _TouchPower *****************
  6669 ;; Defined at:
  6670 ;;		line 10 in file "../src/Switch_B1.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;		None
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;		None
  6675 ;; Return value:  Size  Location     Type
  6676 ;;		None               void
  6677 ;; Registers used:
  6678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;Total ram usage:        0 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    4
  6691 ;; This function calls:
  6692 ;;		_Timeout_Counter
  6693 ;;		_set_TimeoutCleared
  6694 ;; This function is called by:
  6695 ;;		_Switch_Main
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           
  6700                           ;psect for function _TouchPower
  6701  1AB5                     _TouchPower:	
  6702                           
  6703                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6704                           
  6705                           ;incstack = 0
  6706                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6707  1AB5  0021               	movlb	1	; select bank1
  6708  1AB6  1C4F               	btfss	_myMain^(0+128),0
  6709  1AB7  0008               	return
  6710                           
  6711                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6712  1AB8  0020               	movlb	0	; select bank0
  6713  1AB9  1A8E               	btfsc	14,5	;volatile
  6714  1ABA  0008               	return
  6715  1ABB  2AC1               	goto	l8901
  6716  1ABC                     l2660:	
  6717                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6718                           
  6719                           
  6720                           ;Switch_B1.c: 14: RC5 = 1;
  6721  1ABC  0020               	movlb	0	; select bank0
  6722  1ABD  168E               	bsf	14,5	;volatile
  6723                           
  6724                           ;Switch_B1.c: 15: Timeout_Counter();
  6725  1ABE  319A  22A0  319A   	fcall	_Timeout_Counter
  6726  1AC1                     l8901:	
  6727  1AC1  0020               	movlb	0	; select bank0
  6728  1AC2  1A8E               	btfsc	14,5	;volatile
  6729  1AC3  2AC7               	goto	l8905
  6730  1AC4  0021               	movlb	1	; select bank1
  6731  1AC5  1D59               	btfss	(_myMain^(0+128)+10),2
  6732  1AC6  2ABC               	goto	l2660
  6733  1AC7                     l8905:	
  6734                           
  6735                           ;Switch_B1.c: 16: }
  6736                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6737  1AC7  31A7  27DA         	fcall	_set_TimeoutCleared
  6738  1AC9  0008               	return
  6739  1ACA                     __end_of_TouchPower:	
  6740                           
  6741                           	psect	text20
  6742  27DA                     __ptext20:	
  6743 ;; *************** function _set_TimeoutCleared *****************
  6744 ;; Defined at:
  6745 ;;		line 286 in file "../src/main_B1.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;		None
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;		None               void
  6752 ;; Registers used:
  6753 ;;		status,2
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;Total ram usage:        0 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    3
  6766 ;; This function calls:
  6767 ;;		Nothing
  6768 ;; This function is called by:
  6769 ;;		_getAD
  6770 ;;		_TouchPower
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           
  6775                           ;psect for function _set_TimeoutCleared
  6776  27DA                     _set_TimeoutCleared:	
  6777                           
  6778                           ;main_B1.c: 287: myMain.Timeout = 0;
  6779                           
  6780                           ;incstack = 0
  6781                           ; Regs used in _set_TimeoutCleared: [status,2]
  6782  27DA  0021               	movlb	1	; select bank1
  6783  27DB  1159               	bcf	(_myMain^(0+128)+10),2
  6784                           
  6785                           ;main_B1.c: 288: myMain.Timeout_Counter = 0;
  6786  27DC  01DA               	clrf	(_myMain^(0+128)+11)
  6787  27DD  01DB               	clrf	((_myMain+1)^(0+128)+11)
  6788  27DE  0008               	return
  6789  27DF                     __end_of_set_TimeoutCleared:	
  6790                           
  6791                           	psect	text21
  6792  1AA0                     __ptext21:	
  6793 ;; *************** function _Timeout_Counter *****************
  6794 ;; Defined at:
  6795 ;;		line 277 in file "../src/main_B1.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;		None
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;		None
  6800 ;; Return value:  Size  Location     Type
  6801 ;;		None               void
  6802 ;; Registers used:
  6803 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;Total ram usage:        0 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    3
  6816 ;; This function calls:
  6817 ;;		Nothing
  6818 ;; This function is called by:
  6819 ;;		_getAD
  6820 ;;		_TouchPower
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           
  6825                           ;psect for function _Timeout_Counter
  6826  1AA0                     _Timeout_Counter:	
  6827                           
  6828                           ;main_B1.c: 278: myMain.Timeout_Counter++;
  6829                           
  6830                           ;incstack = 0
  6831                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6832  1AA0  3001               	movlw	1
  6833  1AA1  0021               	movlb	1	; select bank1
  6834  1AA2  07DA               	addwf	(_myMain^(0+128)+11),f
  6835  1AA3  3000               	movlw	0
  6836  1AA4  3DDB               	addwfc	((_myMain+1)^(0+128)+11),f
  6837                           
  6838                           ;main_B1.c: 279: if (myMain.Timeout_Counter == 25000) {
  6839  1AA5  300B               	movlw	11
  6840  1AA6  3ECF               	addlw	_myMain& (0+255)
  6841  1AA7  0086               	movwf	6
  6842  1AA8  0187               	clrf	7
  6843  1AA9  3F40               	moviw [0]fsr1
  6844  1AAA  3AA8               	xorlw	168
  6845  1AAB  1D03               	skipz
  6846  1AAC  2AAF               	goto	u7565
  6847  1AAD  3F41               	moviw [1]fsr1
  6848  1AAE  3A61               	xorlw	97
  6849  1AAF                     u7565:	
  6850  1AAF  1D03               	skipz
  6851  1AB0  0008               	return
  6852                           
  6853                           ;main_B1.c: 280: myMain.Timeout_Counter = 0;
  6854  1AB1  01DA               	clrf	(_myMain^(0+128)+11)
  6855  1AB2  01DB               	clrf	((_myMain+1)^(0+128)+11)
  6856                           
  6857                           ;main_B1.c: 281: myMain.Timeout = 1;
  6858  1AB3  1559               	bsf	(_myMain^(0+128)+10),2
  6859  1AB4  0008               	return
  6860  1AB5                     __end_of_Timeout_Counter:	
  6861                           
  6862                           	psect	text22
  6863  1830                     __ptext22:	
  6864 ;; *************** function _Switch_Initialization *****************
  6865 ;; Defined at:
  6866 ;;		line 46 in file "../src/Switch_B1.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;		None               void
  6873 ;; Registers used:
  6874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    6
  6887 ;; This function calls:
  6888 ;;		_setSw_Initialization
  6889 ;; This function is called by:
  6890 ;;		_main
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           
  6895                           ;psect for function _Switch_Initialization
  6896  1830                     _Switch_Initialization:	
  6897                           
  6898                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6902  1830  3001               	movlw	1
  6903  1831  3198  2011  3198   	fcall	_setSw_Initialization
  6904                           
  6905                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6906  1834  3002               	movlw	2
  6907  1835  3198  2011         	fcall	_setSw_Initialization
  6908  1837  0008               	return
  6909  1838                     __end_of_Switch_Initialization:	
  6910                           
  6911                           	psect	text23
  6912  1811                     __ptext23:	
  6913 ;; *************** function _setSw_Initialization *****************
  6914 ;; Defined at:
  6915 ;;		line 66 in file "../src/Switch_B1.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  sw              1    wreg     unsigned char 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;  sw              1    6[COMMON] unsigned char 
  6920 ;; Return value:  Size  Location     Type
  6921 ;;		None               void
  6922 ;; Registers used:
  6923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;Total ram usage:        1 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    5
  6936 ;; This function calls:
  6937 ;;		_setLED
  6938 ;; This function is called by:
  6939 ;;		_Switch_Initialization
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           
  6944                           ;psect for function _setSw_Initialization
  6945  1811                     _setSw_Initialization:	
  6946                           
  6947                           ;incstack = 0
  6948                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6949                           ;setSw_Initialization@sw stored from wreg
  6950  1811  00F6               	movwf	setSw_Initialization@sw
  6951                           
  6952                           ;Switch_B1.c: 68: setLED(sw, 1);
  6953  1812  01F4               	clrf	setLED@command
  6954  1813  0AF4               	incf	setLED@command,f
  6955  1814  0876               	movf	setSw_Initialization@sw,w
  6956  1815  3194  24ED         	fcall	_setLED
  6957  1817  0008               	return
  6958  1818                     __end_of_setSw_Initialization:	
  6959                           
  6960                           	psect	text24
  6961  27BB                     __ptext24:	
  6962 ;; *************** function _RF_Main *****************
  6963 ;; Defined at:
  6964 ;;		line 26 in file "../src/RF_Control_B1.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;		None               void
  6971 ;; Registers used:
  6972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;Total ram usage:        0 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:   10
  6985 ;; This function calls:
  6986 ;;		_setRF_Main
  6987 ;; This function is called by:
  6988 ;;		_main
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           
  6993                           ;psect for function _RF_Main
  6994  27BB                     _RF_Main:	
  6995                           
  6996                           ;RF_Control_B1.c: 28: setRF_Main();
  6997                           
  6998                           ;incstack = 0
  6999                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7000  27BB  3186  26C5         	fcall	_setRF_Main
  7001  27BD  0008               	return
  7002  27BE                     __end_of_RF_Main:	
  7003                           
  7004                           	psect	text25
  7005  06C5                     __ptext25:	
  7006 ;; *************** function _setRF_Main *****************
  7007 ;; Defined at:
  7008 ;;		line 53 in file "../src/RF_Control_B1.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;		None
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  error           1   75[BANK0 ] unsigned char 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;		None               void
  7015 ;; Registers used:
  7016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;Total ram usage:        2 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    9
  7029 ;; This function calls:
  7030 ;;		_CC2500_PowerOnInitial
  7031 ;;		_CC2500_RxData
  7032 ;;		_CC2500_TxData
  7033 ;;		_CC2500_WriteCommand
  7034 ;;		_RF_RxDisable
  7035 ;;		___lwdiv
  7036 ;;		_getBuz_GO
  7037 ;;		_getRF_KeyStatus
  7038 ;;		_getRxData
  7039 ;;		_setData
  7040 ;; This function is called by:
  7041 ;;		_RF_Main
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           
  7046                           ;psect for function _setRF_Main
  7047  06C5                     _setRF_Main:	
  7048                           
  7049                           ;RF_Control_B1.c: 54: char error = 0;
  7050                           
  7051                           ;incstack = 0
  7052                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7053  06C5  0020               	movlb	0	; select bank0
  7054  06C6  01EB               	clrf	setRF_Main@error
  7055                           
  7056                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7057  06C7  0021               	movlb	1	; select bank1
  7058  06C8  1C40               	btfss	_RF1^(0+128),0
  7059  06C9  2F80               	goto	l2238
  7060                           
  7061                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7062  06CA  3199  2177  3186   	fcall	_getBuz_GO
  7063  06CD  0873               	movf	?_getBuz_GO+1,w
  7064  06CE  0472               	iorwf	?_getBuz_GO,w
  7065  06CF  1D03               	skipz
  7066  06D0  2F65               	goto	l10849
  7067                           
  7068                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7069  06D1  3199  21DA  3186   	fcall	_getRF_KeyStatus
  7070  06D4  3A01               	xorlw	1
  7071  06D5  3000               	movlw	0
  7072  06D6  1903               	skipnz
  7073  06D7  3001               	movlw	1
  7074  06D8  0020               	movlb	0	; select bank0
  7075  06D9  00EA               	movwf	??_setRF_Main
  7076  06DA  0CEA               	rrf	??_setRF_Main,f
  7077  06DB  0CEA               	rrf	??_setRF_Main,f
  7078  06DC  0021               	movlb	1	; select bank1
  7079  06DD  0840               	movf	_RF1^(0+128),w
  7080  06DE  0020               	movlb	0	; select bank0
  7081  06DF  066A               	xorwf	??_setRF_Main,w
  7082  06E0  397F               	andlw	-129
  7083  06E1  066A               	xorwf	??_setRF_Main,w
  7084  06E2  0021               	movlb	1	; select bank1
  7085  06E3  00C0               	movwf	_RF1^(0+128)
  7086                           
  7087                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7088  06E4  1FC0               	btfss	_RF1^(0+128),7
  7089  06E5  2EE8               	goto	l2242
  7090  06E6  1F40               	btfss	_RF1^(0+128),6
  7091  06E7  2F65               	goto	l10849
  7092  06E8                     l2242:	
  7093                           
  7094                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7095  06E8  1D40               	btfss	_RF1^(0+128),2
  7096  06E9  2F2C               	goto	l2243
  7097                           
  7098                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7099  06EA  1B40               	btfsc	_RF1^(0+128),6
  7100  06EB  2F27               	goto	l10821
  7101                           
  7102                           ;RF_Control_B1.c: 68: RF1.Count++;
  7103  06EC  3001               	movlw	1
  7104  06ED  07C3               	addwf	(_RF1^(0+128)+3),f
  7105  06EE  3000               	movlw	0
  7106  06EF  3DC4               	addwfc	((_RF1+1)^(0+128)+3),f
  7107                           
  7108                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7109  06F0  3014               	movlw	20
  7110  06F1  00F2               	movwf	___lwdiv@divisor
  7111  06F2  3000               	movlw	0
  7112  06F3  00F3               	movwf	___lwdiv@divisor+1
  7113  06F4  0849               	movf	((_RF1+1)^(0+128)+8),w
  7114  06F5  01F5               	clrf	___lwdiv@dividend+1
  7115  06F6  07F5               	addwf	___lwdiv@dividend+1,f
  7116  06F7  0848               	movf	(_RF1^(0+128)+8),w
  7117  06F8  01F4               	clrf	___lwdiv@dividend
  7118  06F9  07F4               	addwf	___lwdiv@dividend,f
  7119  06FA  319F  275D  3186   	fcall	___lwdiv
  7120  06FD  0873               	movf	?___lwdiv+1,w
  7121  06FE  0021               	movlb	1	; select bank1
  7122  06FF  0244               	subwf	((_RF1+1)^(0+128)+3),w
  7123  0700  1D03               	skipz
  7124  0701  2F04               	goto	u12225
  7125  0702  0872               	movf	?___lwdiv,w
  7126  0703  0243               	subwf	(_RF1^(0+128)+3),w
  7127  0704                     u12225:	
  7128  0704  1C03               	skipc
  7129  0705  2F65               	goto	l10849
  7130                           
  7131                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7132  0706  3014               	movlw	20
  7133  0707  00F2               	movwf	___lwdiv@divisor
  7134  0708  3000               	movlw	0
  7135  0709  00F3               	movwf	___lwdiv@divisor+1
  7136  070A  0849               	movf	((_RF1+1)^(0+128)+8),w
  7137  070B  01F5               	clrf	___lwdiv@dividend+1
  7138  070C  07F5               	addwf	___lwdiv@dividend+1,f
  7139  070D  0848               	movf	(_RF1^(0+128)+8),w
  7140  070E  01F4               	clrf	___lwdiv@dividend
  7141  070F  07F4               	addwf	___lwdiv@dividend,f
  7142  0710  319F  275D  3186   	fcall	___lwdiv
  7143  0713  0873               	movf	?___lwdiv+1,w
  7144  0714  0021               	movlb	1	; select bank1
  7145  0715  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7146  0716  07C4               	addwf	((_RF1+1)^(0+128)+3),f
  7147  0717  0872               	movf	?___lwdiv,w
  7148  0718  01C3               	clrf	(_RF1^(0+128)+3)
  7149  0719  07C3               	addwf	(_RF1^(0+128)+3),f
  7150                           
  7151                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7152  071A  1140               	bcf	_RF1^(0+128),2
  7153                           
  7154                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7155  071B  01CB               	clrf	(_RF1^(0+128)+11)
  7156  071C  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7157                           
  7158                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7159  071D  3198  2028  3186   	fcall	_RF_RxDisable
  7160                           
  7161                           ;RF_Control_B1.c: 75: setData();
  7162  0720  3192  2262  3186   	fcall	_setData
  7163                           
  7164                           ;RF_Control_B1.c: 76: CC2500_TxData();
  7165  0723  3188  2091  3186   	fcall	_CC2500_TxData
  7166                           
  7167                           ;RF_Control_B1.c: 78: }
  7168                           ;RF_Control_B1.c: 79: } else {
  7169  0726  2F65               	goto	l10849
  7170  0727                     l10821:	
  7171                           
  7172                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  7173  0727  0021               	movlb	1	; select bank1
  7174  0728  01C3               	clrf	(_RF1^(0+128)+3)
  7175  0729  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7176                           
  7177                           ;RF_Control_B1.c: 81: RF1.TransceiveGO = 0;
  7178  072A  1140               	bcf	_RF1^(0+128),2
  7179                           
  7180                           ;RF_Control_B1.c: 82: }
  7181                           ;RF_Control_B1.c: 83: } else {
  7182  072B  2F65               	goto	l10849
  7183  072C                     l2243:	
  7184                           
  7185                           ;RF_Control_B1.c: 84: if (RF1.RxStatus == 1) {
  7186  072C  1DC0               	btfss	_RF1^(0+128),3
  7187  072D  2F3B               	goto	l10835
  7188                           
  7189                           ;RF_Control_B1.c: 86: CC2500_RxData();
  7190  072E  3196  260B  3186   	fcall	_CC2500_RxData
  7191                           
  7192                           ;RF_Control_B1.c: 88: if (RF1.ReceiveGO == 1) {
  7193  0731  0021               	movlb	1	; select bank1
  7194  0732  1CC0               	btfss	_RF1^(0+128),1
  7195  0733  2F65               	goto	l10849
  7196                           
  7197                           ;RF_Control_B1.c: 89: RF1.ReceiveGO = 0;
  7198  0734  10C0               	bcf	_RF1^(0+128),1
  7199                           
  7200                           ;RF_Control_B1.c: 90: RF1.CorrectionCounter = 0;
  7201  0735  01CB               	clrf	(_RF1^(0+128)+11)
  7202  0736  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7203                           
  7204                           ;RF_Control_B1.c: 98: getRxData();
  7205  0737  3195  254C  3186   	fcall	_getRxData
  7206                           
  7207                           ;RF_Control_B1.c: 101: }
  7208                           ;RF_Control_B1.c: 102: } else {
  7209  073A  2F65               	goto	l10849
  7210  073B                     l10835:	
  7211                           
  7212                           ;RF_Control_B1.c: 103: RF1.Count++;
  7213  073B  3001               	movlw	1
  7214  073C  0021               	movlb	1	; select bank1
  7215  073D  07C3               	addwf	(_RF1^(0+128)+3),f
  7216  073E  3000               	movlw	0
  7217  073F  3DC4               	addwfc	((_RF1+1)^(0+128)+3),f
  7218                           
  7219                           ;RF_Control_B1.c: 104: if (RF1.Count >= (RF1.RunTime / 20)) {
  7220  0740  3014               	movlw	20
  7221  0741  00F2               	movwf	___lwdiv@divisor
  7222  0742  3000               	movlw	0
  7223  0743  00F3               	movwf	___lwdiv@divisor+1
  7224  0744  0849               	movf	((_RF1+1)^(0+128)+8),w
  7225  0745  01F5               	clrf	___lwdiv@dividend+1
  7226  0746  07F5               	addwf	___lwdiv@dividend+1,f
  7227  0747  0848               	movf	(_RF1^(0+128)+8),w
  7228  0748  01F4               	clrf	___lwdiv@dividend
  7229  0749  07F4               	addwf	___lwdiv@dividend,f
  7230  074A  319F  275D  3186   	fcall	___lwdiv
  7231  074D  0873               	movf	?___lwdiv+1,w
  7232  074E  0021               	movlb	1	; select bank1
  7233  074F  0244               	subwf	((_RF1+1)^(0+128)+3),w
  7234  0750  1D03               	skipz
  7235  0751  2F54               	goto	u12255
  7236  0752  0872               	movf	?___lwdiv,w
  7237  0753  0243               	subwf	(_RF1^(0+128)+3),w
  7238  0754                     u12255:	
  7239  0754  1C03               	skipc
  7240  0755  2F65               	goto	l10849
  7241                           
  7242                           ;RF_Control_B1.c: 105: RF1.Count = 0;
  7243  0756  01C3               	clrf	(_RF1^(0+128)+3)
  7244  0757  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7245                           
  7246                           ;RF_Control_B1.c: 107: RF1.RxStatus = 1;
  7247  0758  15C0               	bsf	_RF1^(0+128),3
  7248                           
  7249                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x36);
  7250  0759  3036               	movlw	54
  7251  075A  319B  2353  3186   	fcall	_CC2500_WriteCommand
  7252                           
  7253                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x3A);
  7254  075D  303A               	movlw	58
  7255  075E  319B  2353  3186   	fcall	_CC2500_WriteCommand
  7256                           
  7257                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x34);
  7258  0761  3034               	movlw	52
  7259  0762  319B  2353  3186   	fcall	_CC2500_WriteCommand
  7260  0765                     l10849:	
  7261                           
  7262                           ;RF_Control_B1.c: 112: }
  7263                           ;RF_Control_B1.c: 113: }
  7264                           ;RF_Control_B1.c: 114: }
  7265                           ;RF_Control_B1.c: 115: }
  7266                           ;RF_Control_B1.c: 116: }
  7267                           ;RF_Control_B1.c: 118: RF1.CorrectionCounter++;
  7268  0765  3001               	movlw	1
  7269  0766  0021               	movlb	1	; select bank1
  7270  0767  07CB               	addwf	(_RF1^(0+128)+11),f
  7271  0768  3000               	movlw	0
  7272  0769  3DCC               	addwfc	((_RF1+1)^(0+128)+11),f
  7273                           
  7274                           ;RF_Control_B1.c: 119: if (RF1.CorrectionCounter > (60000 / 20)) {
  7275  076A  300B               	movlw	11
  7276  076B  024C               	subwf	((_RF1+1)^(0+128)+11),w
  7277  076C  30B9               	movlw	185
  7278  076D  1903               	skipnz
  7279  076E  024B               	subwf	(_RF1^(0+128)+11),w
  7280  076F  1C03               	skipc
  7281  0770  2F79               	goto	l10861
  7282                           
  7283                           ;RF_Control_B1.c: 120: RF1.CorrectionCounter = 0;
  7284  0771  01CB               	clrf	(_RF1^(0+128)+11)
  7285  0772  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7286                           
  7287                           ;RF_Control_B1.c: 122: RF1.RxStatus = 0;
  7288  0773  11C0               	bcf	_RF1^(0+128),3
  7289                           
  7290                           ;RF_Control_B1.c: 123: RF1.ReceiveGO = 0;
  7291  0774  10C0               	bcf	_RF1^(0+128),1
  7292                           
  7293                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x36);
  7294  0775  3036               	movlw	54
  7295  0776  319B  2353  3186   	fcall	_CC2500_WriteCommand
  7296  0779                     l10861:	
  7297                           
  7298                           ;RF_Control_B1.c: 126: }
  7299                           ;RF_Control_B1.c: 128: if (RF1.Timeout == 1) {
  7300  0779  0021               	movlb	1	; select bank1
  7301  077A  1F41               	btfss	(_RF1^(0+128)+1),6
  7302  077B  0008               	return
  7303                           
  7304                           ;RF_Control_B1.c: 129: RF1.Timeout = 0;
  7305  077C  1341               	bcf	(_RF1^(0+128)+1),6
  7306                           
  7307                           ;RF_Control_B1.c: 130: CC2500_PowerOnInitial();
  7308  077D  319A  228B         	fcall	_CC2500_PowerOnInitial
  7309                           
  7310                           ;RF_Control_B1.c: 131: }
  7311                           ;RF_Control_B1.c: 133: } else {
  7312  077F  0008               	return
  7313  0780                     l2238:	
  7314                           
  7315                           ;RF_Control_B1.c: 134: if (myMain.PowerON == 1) {
  7316  0780  1C4F               	btfss	_myMain^(0+128),0
  7317  0781  0008               	return
  7318                           
  7319                           ;RF_Control_B1.c: 135: RF1.Enable = 1;
  7320  0782  1440               	bsf	_RF1^(0+128),0
  7321  0783  0008               	return
  7322  0784                     __end_of_setRF_Main:	
  7323                           
  7324                           	psect	text26
  7325  1262                     __ptext26:	
  7326 ;; *************** function _setData *****************
  7327 ;; Defined at:
  7328 ;;		line 188 in file "../src/RF_Control_B1.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;		None
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;		None
  7333 ;; Return value:  Size  Location     Type
  7334 ;;		None               void
  7335 ;; Registers used:
  7336 ;;		wreg, fsr1l, fsr1h, status,2
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;Total ram usage:        1 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    3
  7349 ;; This function calls:
  7350 ;;		Nothing
  7351 ;; This function is called by:
  7352 ;;		_setRF_Main
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           
  7357                           ;psect for function _setData
  7358  1262                     _setData:	
  7359                           
  7360                           ;RF_Control_B1.c: 212: RF_Data[0] = 0x63;
  7361                           
  7362                           ;incstack = 0
  7363                           ; Regs used in _setData: [wreg+fsr1l+fsr1h+status,2]
  7364  1262  3063               	movlw	99
  7365  1263  00F2               	movwf	??_setData
  7366  1264  0872               	movf	??_setData,w
  7367  1265  0023               	movlb	3	; select bank3
  7368  1266  00A0               	movwf	_RF_Data^(0+384)
  7369                           
  7370                           ;RF_Control_B1.c: 213: RF_Data[1] = 0x02;
  7371  1267  3002               	movlw	2
  7372  1268  00F2               	movwf	??_setData
  7373  1269  0872               	movf	??_setData,w
  7374  126A  00A1               	movwf	(_RF_Data^(0+384)+1)
  7375                           
  7376                           ;RF_Control_B1.c: 215: RF_Data[2] = 0;
  7377  126B  01A2               	clrf	(_RF_Data^(0+384)+2)
  7378                           
  7379                           ;RF_Control_B1.c: 216: RF_Data[3] = 0;
  7380  126C  01A3               	clrf	(_RF_Data^(0+384)+3)
  7381                           
  7382                           ;RF_Control_B1.c: 217: RF_Data[4] = 0;
  7383  126D  01A4               	clrf	(_RF_Data^(0+384)+4)
  7384                           
  7385                           ;RF_Control_B1.c: 218: RF_Data[5] = 0;
  7386  126E  01A5               	clrf	(_RF_Data^(0+384)+5)
  7387                           
  7388                           ;RF_Control_B1.c: 219: RF_Data[6] = 0;
  7389  126F  01A6               	clrf	(_RF_Data^(0+384)+6)
  7390                           
  7391                           ;RF_Control_B1.c: 220: RF_Data[7] = 0;
  7392  1270  01A7               	clrf	(_RF_Data^(0+384)+7)
  7393                           
  7394                           ;RF_Control_B1.c: 221: RF_Data[8] = 0;
  7395  1271  01A8               	clrf	(_RF_Data^(0+384)+8)
  7396                           
  7397                           ;RF_Control_B1.c: 222: RF_Data[9] = product->Data[9];
  7398  1272  087B               	movf	_product,w
  7399  1273  0086               	movwf	6
  7400  1274  3002               	movlw	2	; select bank4/5
  7401  1275  0087               	movwf	7
  7402  1276  3002               	movlw	2	; select bank4/5
  7403  1277  3F49               	moviw [9]fsr1
  7404  1278  00A9               	movwf	(_RF_Data^(0+384)+9)
  7405                           
  7406                           ;RF_Control_B1.c: 223: RF_Data[10] = 0;
  7407  1279  01AA               	clrf	(_RF_Data^(0+384)+10)
  7408                           
  7409                           ;RF_Control_B1.c: 224: RF_Data[11] = product->Data[11];
  7410  127A  087B               	movf	_product,w
  7411  127B  0086               	movwf	6
  7412  127C  3002               	movlw	2	; select bank4/5
  7413  127D  0087               	movwf	7
  7414  127E  3002               	movlw	2	; select bank4/5
  7415  127F  3F4B               	moviw [11]fsr1
  7416  1280  00AB               	movwf	(_RF_Data^(0+384)+11)
  7417                           
  7418                           ;RF_Control_B1.c: 225: RF_Data[12] = product->Data[12];
  7419  1281  087B               	movf	_product,w
  7420  1282  0086               	movwf	6
  7421  1283  3002               	movlw	2	; select bank4/5
  7422  1284  0087               	movwf	7
  7423  1285  3002               	movlw	2	; select bank4/5
  7424  1286  3F4C               	moviw [12]fsr1
  7425  1287  00AC               	movwf	(_RF_Data^(0+384)+12)
  7426                           
  7427                           ;RF_Control_B1.c: 226: RF_Data[13] = product->Data[13];
  7428  1288  087B               	movf	_product,w
  7429  1289  0086               	movwf	6
  7430  128A  3002               	movlw	2	; select bank4/5
  7431  128B  0087               	movwf	7
  7432  128C  3002               	movlw	2	; select bank4/5
  7433  128D  3F4D               	moviw [13]fsr1
  7434  128E  00AD               	movwf	(_RF_Data^(0+384)+13)
  7435                           
  7436                           ;RF_Control_B1.c: 227: RF_Data[14] = product->Data[14];
  7437  128F  087B               	movf	_product,w
  7438  1290  0086               	movwf	6
  7439  1291  3002               	movlw	2	; select bank4/5
  7440  1292  0087               	movwf	7
  7441  1293  3002               	movlw	2	; select bank4/5
  7442  1294  3F4E               	moviw [14]fsr1
  7443  1295  00AE               	movwf	(_RF_Data^(0+384)+14)
  7444                           
  7445                           ;RF_Control_B1.c: 228: RF_Data[15] = product->Data[15];
  7446  1296  087B               	movf	_product,w
  7447  1297  0086               	movwf	6
  7448  1298  3002               	movlw	2	; select bank4/5
  7449  1299  0087               	movwf	7
  7450  129A  3002               	movlw	2	; select bank4/5
  7451  129B  3F4F               	moviw [15]fsr1
  7452  129C  00AF               	movwf	(_RF_Data^(0+384)+15)
  7453                           
  7454                           ;RF_Control_B1.c: 229: RF_Data[16] = 0;
  7455  129D  01B0               	clrf	(_RF_Data^(0+384)+16)
  7456                           
  7457                           ;RF_Control_B1.c: 230: RF_Data[17] = 0;
  7458  129E  01B1               	clrf	(_RF_Data^(0+384)+17)
  7459                           
  7460                           ;RF_Control_B1.c: 231: RF_Data[18] = 0;
  7461  129F  01B2               	clrf	(_RF_Data^(0+384)+18)
  7462                           
  7463                           ;RF_Control_B1.c: 232: RF_Data[19] = 0;
  7464  12A0  01B3               	clrf	(_RF_Data^(0+384)+19)
  7465                           
  7466                           ;RF_Control_B1.c: 233: RF_Data[20] = 210;
  7467  12A1  30D2               	movlw	210
  7468  12A2  00F2               	movwf	??_setData
  7469  12A3  0872               	movf	??_setData,w
  7470  12A4  00B4               	movwf	(_RF_Data^(0+384)+20)
  7471  12A5  0008               	return
  7472  12A6                     __end_of_setData:	
  7473                           
  7474                           	psect	text27
  7475  154C                     __ptext27:	
  7476 ;; *************** function _getRxData *****************
  7477 ;; Defined at:
  7478 ;;		line 256 in file "../src/RF_Control_B1.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;		None
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;  error           1   73[BANK0 ] unsigned char 
  7483 ;; Return value:  Size  Location     Type
  7484 ;;		None               void
  7485 ;; Registers used:
  7486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7487 ;; Tracked objects:
  7488 ;;		On entry : 0/0
  7489 ;;		On exit  : 0/0
  7490 ;;		Unchanged: 0/0
  7491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;Total ram usage:        2 bytes
  7497 ;; Hardware stack levels used:    1
  7498 ;; Hardware stack levels required when called:    8
  7499 ;; This function calls:
  7500 ;;		_getMain_All_Error_Status
  7501 ;;		_setControl_Lights_Table
  7502 ;;		_setLog_Code
  7503 ;;		_setTxData
  7504 ;; This function is called by:
  7505 ;;		_setRF_Main
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           
  7510                           ;psect for function _getRxData
  7511  154C                     _getRxData:	
  7512                           
  7513                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7514                           
  7515                           ;incstack = 0
  7516                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7517  154C  0023               	movlb	3	; select bank3
  7518  154D  0820               	movf	_RF_Data^(0+384),w
  7519  154E  3AAA               	xorlw	170
  7520  154F  1D03               	skipz
  7521  1550  2D62               	goto	l10447
  7522  1551  0821               	movf	(_RF_Data^(0+384)+1),w
  7523  1552  3A01               	xorlw	1
  7524  1553  1D03               	skipz
  7525  1554  2D62               	goto	l10447
  7526                           
  7527                           ;RF_Control_B1.c: 259: product->Data[2] = 0x55;
  7528  1555  3055               	movlw	85
  7529  1556  0020               	movlb	0	; select bank0
  7530  1557  00E8               	movwf	??_getRxData
  7531  1558  087B               	movf	_product,w
  7532  1559  3E02               	addlw	2
  7533  155A  0086               	movwf	6
  7534  155B  3002               	movlw	2	; select bank4/5
  7535  155C  0087               	movwf	7
  7536  155D  0868               	movf	??_getRxData,w
  7537  155E  0081               	movwf	1
  7538                           
  7539                           ;RF_Control_B1.c: 260: setTxData();
  7540  155F  31A7  27F2         	fcall	_setTxData
  7541                           
  7542                           ;RF_Control_B1.c: 264: } else {
  7543  1561  0008               	return
  7544  1562                     l10447:	
  7545                           
  7546                           ;RF_Control_B1.c: 265: char error = getMain_All_Error_Status(0);
  7547  1562  3000               	movlw	0
  7548  1563  319E  263C  3195   	fcall	_getMain_All_Error_Status
  7549  1566  0020               	movlb	0	; select bank0
  7550  1567  00E8               	movwf	??_getRxData
  7551  1568  0868               	movf	??_getRxData,w
  7552  1569  00E9               	movwf	getRxData@error
  7553                           
  7554                           ;RF_Control_B1.c: 266: if (error == 0) {
  7555  156A  08E9               	movf	getRxData@error,f
  7556  156B  1D03               	skipz
  7557  156C  2DA9               	goto	l2286
  7558                           
  7559                           ;RF_Control_B1.c: 267: if (RF1.Learn == 1) {
  7560  156D  0021               	movlb	1	; select bank1
  7561  156E  1F40               	btfss	_RF1^(0+128),6
  7562  156F  2D7B               	goto	l10459
  7563                           
  7564                           ;RF_Control_B1.c: 269: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7565  1570  0023               	movlb	3	; select bank3
  7566  1571  08A0               	movf	_RF_Data^(0+384),f
  7567  1572  1D03               	skipz
  7568  1573  0008               	return
  7569  1574  0821               	movf	(_RF_Data^(0+384)+1),w
  7570  1575  3A64               	xorlw	100
  7571  1576  1D03               	skipz
  7572  1577  0008               	return
  7573                           
  7574                           ;RF_Control_B1.c: 270: setLog_Code();
  7575  1578  319F  2729         	fcall	_setLog_Code
  7576                           
  7577                           ;RF_Control_B1.c: 271: }
  7578                           ;RF_Control_B1.c: 289: } else {
  7579  157A  0008               	return
  7580  157B                     l10459:	
  7581                           
  7582                           ;RF_Control_B1.c: 290: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7583  157B  0023               	movlb	3	; select bank3
  7584  157C  0834               	movf	(_RF_Data^(0+384)+20),w
  7585  157D  3AD2               	xorlw	210
  7586  157E  1903               	skipnz
  7587  157F  2D84               	goto	l10463
  7588  1580  0834               	movf	(_RF_Data^(0+384)+20),w
  7589  1581  3A0A               	xorlw	10
  7590  1582  1D03               	skipz
  7591  1583  0008               	return
  7592  1584                     l10463:	
  7593                           
  7594                           ;RF_Control_B1.c: 292: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7595  1584  08A0               	movf	_RF_Data^(0+384),f
  7596  1585  1D03               	skipz
  7597  1586  0008               	return
  7598  1587  0821               	movf	(_RF_Data^(0+384)+1),w
  7599  1588  3A02               	xorlw	2
  7600  1589  1D03               	skipz
  7601  158A  0008               	return
  7602                           
  7603                           ;RF_Control_B1.c: 294: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7604  158B  087B               	movf	_product,w
  7605  158C  3E0C               	addlw	12
  7606  158D  0086               	movwf	6
  7607  158E  3002               	movlw	2	; select bank4/5
  7608  158F  0087               	movwf	7
  7609  1590  082C               	movf	(_RF_Data^(0+384)+12),w
  7610  1591  0601               	xorwf	1,w
  7611  1592  1D03               	skipz
  7612  1593  0008               	return
  7613  1594  087B               	movf	_product,w
  7614  1595  3E0D               	addlw	13
  7615  1596  0086               	movwf	6
  7616  1597  3002               	movlw	2	; select bank4/5
  7617  1598  0087               	movwf	7
  7618  1599  082D               	movf	(_RF_Data^(0+384)+13),w
  7619  159A  0601               	xorwf	1,w
  7620  159B  1D03               	skipz
  7621  159C  0008               	return
  7622  159D  087B               	movf	_product,w
  7623  159E  3E0E               	addlw	14
  7624  159F  0086               	movwf	6
  7625  15A0  3002               	movlw	2	; select bank4/5
  7626  15A1  0087               	movwf	7
  7627  15A2  082E               	movf	(_RF_Data^(0+384)+14),w
  7628  15A3  0601               	xorwf	1,w
  7629  15A4  1D03               	skipz
  7630  15A5  0008               	return
  7631                           
  7632                           ;RF_Control_B1.c: 295: setControl_Lights_Table();
  7633  15A6  318B  23F6         	fcall	_setControl_Lights_Table
  7634                           
  7635                           ;RF_Control_B1.c: 296: }
  7636                           ;RF_Control_B1.c: 299: }
  7637                           ;RF_Control_B1.c: 310: }
  7638                           ;RF_Control_B1.c: 311: }
  7639                           ;RF_Control_B1.c: 312: } else {
  7640  15A8  0008               	return
  7641  15A9                     l2286:	
  7642                           
  7643                           ;RF_Control_B1.c: 313: __nop();
  7644  15A9  0000               	nop
  7645  15AA  0008               	return
  7646  15AB                     __end_of_getRxData:	
  7647                           
  7648                           	psect	text28
  7649  1F29                     __ptext28:	
  7650 ;; *************** function _setLog_Code *****************
  7651 ;; Defined at:
  7652 ;;		line 319 in file "../src/RF_Control_B1.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;		None               void
  7659 ;; Registers used:
  7660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7668 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;Total ram usage:        1 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    5
  7673 ;; This function calls:
  7674 ;;		_setBuz
  7675 ;;		_setMemory_LoopSave
  7676 ;;		_setMemory_Modify
  7677 ;;		_setProductData
  7678 ;; This function is called by:
  7679 ;;		_getRxData
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           
  7684                           ;psect for function _setLog_Code
  7685  1F29                     _setLog_Code:	
  7686                           
  7687                           ;RF_Control_B1.c: 320: RF1.Learn = 0;
  7688                           
  7689                           ;incstack = 0
  7690                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7691  1F29  0021               	movlb	1	; select bank1
  7692  1F2A  1340               	bcf	_RF1^(0+128),6
  7693                           
  7694                           ;RF_Control_B1.c: 321: setProductData(12, RF_Data[12]);
  7695  1F2B  0023               	movlb	3	; select bank3
  7696  1F2C  082C               	movf	(_RF_Data^(0+384)+12),w
  7697  1F2D  0020               	movlb	0	; select bank0
  7698  1F2E  00DD               	movwf	??_setLog_Code
  7699  1F2F  085D               	movf	??_setLog_Code,w
  7700  1F30  00DA               	movwf	setProductData@value
  7701  1F31  300C               	movlw	12
  7702  1F32  3198  20A2  319F   	fcall	_setProductData
  7703                           
  7704                           ;RF_Control_B1.c: 322: setProductData(13, RF_Data[13]);
  7705  1F35  0023               	movlb	3	; select bank3
  7706  1F36  082D               	movf	(_RF_Data^(0+384)+13),w
  7707  1F37  0020               	movlb	0	; select bank0
  7708  1F38  00DD               	movwf	??_setLog_Code
  7709  1F39  085D               	movf	??_setLog_Code,w
  7710  1F3A  00DA               	movwf	setProductData@value
  7711  1F3B  300D               	movlw	13
  7712  1F3C  3198  20A2  319F   	fcall	_setProductData
  7713                           
  7714                           ;RF_Control_B1.c: 323: setProductData(14, RF_Data[14]);
  7715  1F3F  0023               	movlb	3	; select bank3
  7716  1F40  082E               	movf	(_RF_Data^(0+384)+14),w
  7717  1F41  0020               	movlb	0	; select bank0
  7718  1F42  00DD               	movwf	??_setLog_Code
  7719  1F43  085D               	movf	??_setLog_Code,w
  7720  1F44  00DA               	movwf	setProductData@value
  7721  1F45  300E               	movlw	14
  7722  1F46  3198  20A2  319F   	fcall	_setProductData
  7723                           
  7724                           ;RF_Control_B1.c: 324: setBuz(1, 100);
  7725  1F49  3064               	movlw	100
  7726  1F4A  0020               	movlb	0	; select bank0
  7727  1F4B  00A4               	movwf	setBuz@time
  7728  1F4C  3000               	movlw	0
  7729  1F4D  00A5               	movwf	setBuz@time+1
  7730  1F4E  3001               	movlw	1
  7731  1F4F  3192  22EC  319F   	fcall	_setBuz
  7732                           
  7733                           ;RF_Control_B1.c: 325: if (myMain.First == 1) {
  7734  1F52  0021               	movlb	1	; select bank1
  7735  1F53  1ECF               	btfss	_myMain^(0+128),5
  7736  1F54  2F59               	goto	l2299
  7737                           
  7738                           ;RF_Control_B1.c: 326: setMemory_LoopSave(1);
  7739  1F55  3001               	movlw	1
  7740  1F56  3199  2187  319F   	fcall	_setMemory_LoopSave
  7741  1F59                     l2299:	
  7742                           
  7743                           ;RF_Control_B1.c: 327: }
  7744                           ;RF_Control_B1.c: 328: setMemory_Modify(1);
  7745  1F59  3001               	movlw	1
  7746  1F5A  3199  2137         	fcall	_setMemory_Modify
  7747  1F5C  0008               	return
  7748  1F5D                     __end_of_setLog_Code:	
  7749                           
  7750                           	psect	text29
  7751  1987                     __ptext29:	
  7752 ;; *************** function _setMemory_LoopSave *****************
  7753 ;; Defined at:
  7754 ;;		line 1094 in file "../src/MCU_B1.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  command         1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  command         1    3[COMMON] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;		None               void
  7761 ;; Registers used:
  7762 ;;		wreg, status,2, status,0
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:        2 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    3
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_setLog_Code
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           
  7783                           ;psect for function _setMemory_LoopSave
  7784  1987                     _setMemory_LoopSave:	
  7785                           
  7786                           ;incstack = 0
  7787                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7788                           ;setMemory_LoopSave@command stored from wreg
  7789  1987  00F3               	movwf	setMemory_LoopSave@command
  7790                           
  7791                           ;MCU_B1.c: 1095: Memory.LoopSave = command == 1 ? 1 : 0;
  7792  1988  0873               	movf	setMemory_LoopSave@command,w
  7793  1989  3A01               	xorlw	1
  7794  198A  3000               	movlw	0
  7795  198B  1903               	skipnz
  7796  198C  3001               	movlw	1
  7797  198D  00F2               	movwf	??_setMemory_LoopSave
  7798  198E  0DF2               	rlf	??_setMemory_LoopSave,f
  7799  198F  0DF2               	rlf	??_setMemory_LoopSave,f
  7800  1990  0024               	movlb	4	; select bank4
  7801  1991  0854               	movf	(_Memory^(0+512)+36),w
  7802  1992  0672               	xorwf	??_setMemory_LoopSave,w
  7803  1993  39FB               	andlw	-5
  7804  1994  0672               	xorwf	??_setMemory_LoopSave,w
  7805  1995  00D4               	movwf	(_Memory^(0+512)+36)
  7806  1996  0008               	return
  7807  1997                     __end_of_setMemory_LoopSave:	
  7808                           
  7809                           	psect	text30
  7810  0BF6                     __ptext30:	
  7811 ;; *************** function _setControl_Lights_Table *****************
  7812 ;; Defined at:
  7813 ;;		line 332 in file "../src/RF_Control_B1.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;		None               void
  7820 ;; Registers used:
  7821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;Total ram usage:        0 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    7
  7834 ;; This function calls:
  7835 ;;		_getDimmerLights_Status
  7836 ;;		_getMain_All_LightsStatus
  7837 ;;		_setCmd_Status
  7838 ;;		_setDimmerLights_SwOff
  7839 ;;		_setDimmerLights_SwOn
  7840 ;;		_setProductData
  7841 ;;		_setRFSW_AdjControl
  7842 ;;		_setRFSW_Control
  7843 ;;		_setRF_AdjControl
  7844 ;;		_setTxData
  7845 ;; This function is called by:
  7846 ;;		_getRxData
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           
  7851                           ;psect for function _setControl_Lights_Table
  7852  0BF6                     _setControl_Lights_Table:	
  7853                           
  7854                           ;RF_Control_B1.c: 334: switch (RF_Data[15]) {
  7855                           
  7856                           ;incstack = 0
  7857                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7858  0BF6  2C75               	goto	l10165
  7859  0BF7                     l10133:	
  7860                           ;RF_Control_B1.c: 336: case 0x00:
  7861                           
  7862                           
  7863                           ;RF_Control_B1.c: 337: if (getMain_All_LightsStatus() == 1) {
  7864  0BF7  3199  2119  318B   	fcall	_getMain_All_LightsStatus
  7865  0BFA  3A01               	xorlw	1
  7866  0BFB  1D03               	skipz
  7867  0BFC  2C21               	goto	l10143
  7868                           
  7869                           ;RF_Control_B1.c: 340: if (getDimmerLights_Status(1) == 1) {
  7870  0BFD  3001               	movlw	1
  7871  0BFE  3198  20EC  318B   	fcall	_getDimmerLights_Status
  7872  0C01  3A01               	xorlw	1
  7873  0C02  1D03               	skipz
  7874  0C03  2C0C               	goto	l2306
  7875                           
  7876                           ;RF_Control_B1.c: 341: setDimmerLights_SwOn(1);
  7877  0C04  3001               	movlw	1
  7878  0C05  3187  2784  318B   	fcall	_setDimmerLights_SwOn
  7879                           
  7880                           ;RF_Control_B1.c: 342: setDimmerLights_SwOff(1);
  7881  0C08  3001               	movlw	1
  7882  0C09  3191  2122  318B   	fcall	_setDimmerLights_SwOff
  7883  0C0C                     l2306:	
  7884                           
  7885                           ;RF_Control_B1.c: 343: }
  7886                           ;RF_Control_B1.c: 346: if (getDimmerLights_Status(2) == 1) {
  7887  0C0C  3002               	movlw	2
  7888  0C0D  3198  20EC  318B   	fcall	_getDimmerLights_Status
  7889  0C10  3A01               	xorlw	1
  7890  0C11  1D03               	skipz
  7891  0C12  2C1B               	goto	l10141
  7892                           
  7893                           ;RF_Control_B1.c: 347: setDimmerLights_SwOn(2);
  7894  0C13  3002               	movlw	2
  7895  0C14  3187  2784  318B   	fcall	_setDimmerLights_SwOn
  7896                           
  7897                           ;RF_Control_B1.c: 348: setDimmerLights_SwOff(2);
  7898  0C17  3002               	movlw	2
  7899  0C18  3191  2122  318B   	fcall	_setDimmerLights_SwOff
  7900  0C1B                     l10141:	
  7901                           
  7902                           ;RF_Control_B1.c: 349: }
  7903                           ;RF_Control_B1.c: 358: setCmd_Status(1, 1);
  7904  0C1B  01F2               	clrf	setCmd_Status@cmd
  7905  0C1C  0AF2               	incf	setCmd_Status@cmd,f
  7906  0C1D  3001               	movlw	1
  7907  0C1E  319A  224C         	fcall	_setCmd_Status
  7908                           
  7909                           ;RF_Control_B1.c: 359: } else {
  7910  0C20  0008               	return
  7911  0C21                     l10143:	
  7912                           
  7913                           ;RF_Control_B1.c: 360: setProductData(9, 0);
  7914  0C21  0020               	movlb	0	; select bank0
  7915  0C22  01DA               	clrf	setProductData@value
  7916  0C23  3009               	movlw	9
  7917  0C24  3198  20A2  318B   	fcall	_setProductData
  7918                           
  7919                           ;RF_Control_B1.c: 361: setProductData(11, 0);
  7920  0C27  0020               	movlb	0	; select bank0
  7921  0C28  01DA               	clrf	setProductData@value
  7922  0C29  300B               	movlw	11
  7923  0C2A  3198  20A2  318B   	fcall	_setProductData
  7924                           
  7925                           ;RF_Control_B1.c: 362: setProductData(15, 0);
  7926  0C2D  0020               	movlb	0	; select bank0
  7927  0C2E  01DA               	clrf	setProductData@value
  7928  0C2F  300F               	movlw	15
  7929  0C30  3198  20A2  318B   	fcall	_setProductData
  7930                           
  7931                           ;RF_Control_B1.c: 363: setProductData(17, 0);
  7932  0C33  0020               	movlb	0	; select bank0
  7933  0C34  01DA               	clrf	setProductData@value
  7934  0C35  3011               	movlw	17
  7935  0C36  3198  20A2  318B   	fcall	_setProductData
  7936                           
  7937                           ;RF_Control_B1.c: 364: setTxData();
  7938  0C39  31A7  27F2         	fcall	_setTxData
  7939                           
  7940                           ;RF_Control_B1.c: 365: }
  7941                           ;RF_Control_B1.c: 366: break;
  7942  0C3B  0008               	return
  7943  0C3C                     l10147:	
  7944                           ;RF_Control_B1.c: 368: case 0x20:
  7945                           
  7946                           
  7947                           ;RF_Control_B1.c: 369: setProductData(9, 0);
  7948  0C3C  0020               	movlb	0	; select bank0
  7949  0C3D  01DA               	clrf	setProductData@value
  7950  0C3E  3009               	movlw	9
  7951  0C3F  3198  20A2  318B   	fcall	_setProductData
  7952                           
  7953                           ;RF_Control_B1.c: 370: setProductData(11, 0);
  7954  0C42  0020               	movlb	0	; select bank0
  7955  0C43  01DA               	clrf	setProductData@value
  7956  0C44  300B               	movlw	11
  7957  0C45  3198  20A2  318B   	fcall	_setProductData
  7958                           
  7959                           ;RF_Control_B1.c: 371: setProductData(15, product->Data[15]);
  7960  0C48  087B               	movf	_product,w
  7961  0C49  0086               	movwf	6
  7962  0C4A  3002               	movlw	2	; select bank4/5
  7963  0C4B  0087               	movwf	7
  7964  0C4C  3002               	movlw	2	; select bank4/5
  7965  0C4D  3F4F               	moviw [15]fsr1
  7966  0C4E  0020               	movlb	0	; select bank0
  7967  0C4F  00DA               	movwf	setProductData@value
  7968  0C50  300F               	movlw	15
  7969  0C51  3198  20A2  318B   	fcall	_setProductData
  7970                           
  7971                           ;RF_Control_B1.c: 372: setProductData(17, 0);
  7972  0C54  0020               	movlb	0	; select bank0
  7973  0C55  01DA               	clrf	setProductData@value
  7974  0C56  3011               	movlw	17
  7975  0C57  3198  20A2  318B   	fcall	_setProductData
  7976                           
  7977                           ;RF_Control_B1.c: 373: setTxData();
  7978  0C5A  31A7  27F2         	fcall	_setTxData
  7979                           
  7980                           ;RF_Control_B1.c: 374: break;
  7981  0C5C  0008               	return
  7982  0C5D                     l10151:	
  7983                           ;RF_Control_B1.c: 377: case 0x01:
  7984                           
  7985                           
  7986                           ;RF_Control_B1.c: 378: setRFSW_Control(1);
  7987  0C5D  3001               	movlw	1
  7988  0C5E  3191  215C         	fcall	_setRFSW_Control
  7989                           
  7990                           ;RF_Control_B1.c: 379: break;
  7991  0C60  0008               	return
  7992  0C61                     l10153:	
  7993                           ;RF_Control_B1.c: 383: case 0x11:
  7994                           
  7995                           
  7996                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7997  0C61  3001               	movlw	1
  7998  0C62  318A  22E3         	fcall	_setRFSW_AdjControl
  7999                           
  8000                           ;RF_Control_B1.c: 385: break;
  8001  0C64  0008               	return
  8002  0C65                     l10155:	
  8003                           ;RF_Control_B1.c: 387: case 0xd1:
  8004                           
  8005                           
  8006                           ;RF_Control_B1.c: 388: setRF_AdjControl(1);
  8007  0C65  3001               	movlw	1
  8008  0C66  319F  2793         	fcall	_setRF_AdjControl
  8009                           
  8010                           ;RF_Control_B1.c: 389: break;
  8011  0C68  0008               	return
  8012  0C69                     l10157:	
  8013                           ;RF_Control_B1.c: 394: case 0x02:
  8014                           
  8015                           
  8016                           ;RF_Control_B1.c: 395: setRFSW_Control(2);
  8017  0C69  3002               	movlw	2
  8018  0C6A  3191  215C         	fcall	_setRFSW_Control
  8019                           
  8020                           ;RF_Control_B1.c: 396: break;
  8021  0C6C  0008               	return
  8022  0C6D                     l10159:	
  8023                           ;RF_Control_B1.c: 399: case 0x21:
  8024                           
  8025                           
  8026                           ;RF_Control_B1.c: 400: setRFSW_AdjControl(2);
  8027  0C6D  3002               	movlw	2
  8028  0C6E  318A  22E3         	fcall	_setRFSW_AdjControl
  8029                           
  8030                           ;RF_Control_B1.c: 401: break;
  8031  0C70  0008               	return
  8032  0C71                     l10161:	
  8033                           ;RF_Control_B1.c: 403: case 0xd2:
  8034                           
  8035                           
  8036                           ;RF_Control_B1.c: 404: setRF_AdjControl(2);
  8037  0C71  3002               	movlw	2
  8038  0C72  319F  2793         	fcall	_setRF_AdjControl
  8039                           
  8040                           ;RF_Control_B1.c: 422: }
  8041                           
  8042                           ;RF_Control_B1.c: 405: break;
  8043  0C74  0008               	return
  8044  0C75                     l10165:	
  8045  0C75  0023               	movlb	3	; select bank3
  8046  0C76  082F               	movf	(_RF_Data^(0+384)+15),w
  8047                           
  8048                           ; Switch size 1, requested type "space"
  8049                           ; Number of cases is 8, Range of values is 0 to 210
  8050                           ; switch strategies available:
  8051                           ; Name         Instructions Cycles
  8052                           ; simple_byte           25    13 (average)
  8053                           ; jumptable            260     6 (fixed)
  8054                           ;	Chosen strategy is simple_byte
  8055  0C77  3A00               	xorlw	0	; case 0
  8056  0C78  1903               	skipnz
  8057  0C79  2BF7               	goto	l10133
  8058  0C7A  3A01               	xorlw	1	; case 1
  8059  0C7B  1903               	skipnz
  8060  0C7C  2C5D               	goto	l10151
  8061  0C7D  3A03               	xorlw	3	; case 2
  8062  0C7E  1903               	skipnz
  8063  0C7F  2C69               	goto	l10157
  8064  0C80  3A13               	xorlw	19	; case 17
  8065  0C81  1903               	skipnz
  8066  0C82  2C61               	goto	l10153
  8067  0C83  3A31               	xorlw	49	; case 32
  8068  0C84  1903               	skipnz
  8069  0C85  2C3C               	goto	l10147
  8070  0C86  3A01               	xorlw	1	; case 33
  8071  0C87  1903               	skipnz
  8072  0C88  2C6D               	goto	l10159
  8073  0C89  3AF0               	xorlw	240	; case 209
  8074  0C8A  1903               	skipnz
  8075  0C8B  2C65               	goto	l10155
  8076  0C8C  3A03               	xorlw	3	; case 210
  8077  0C8D  1903               	skipnz
  8078  0C8E  2C71               	goto	l10161
  8079  0C8F  2C90               	goto	l2317
  8080  0C90                     l2317:	
  8081  0C90  0008               	return
  8082  0C91                     __end_of_setControl_Lights_Table:	
  8083                           
  8084                           	psect	text31
  8085  1F93                     __ptext31:	
  8086 ;; *************** function _setRF_AdjControl *****************
  8087 ;; Defined at:
  8088 ;;		line 501 in file "../src/RF_Control_B1.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  sw              1    wreg     unsigned char 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;  sw              1    9[COMMON] unsigned char 
  8093 ;;  dimmingStatu    1    8[COMMON] unsigned char 
  8094 ;;  status          1    7[COMMON] unsigned char 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;		None               void
  8097 ;; Registers used:
  8098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;Total ram usage:        4 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    5
  8111 ;; This function calls:
  8112 ;;		_DimmerLights_SelectPointer
  8113 ;;		_getDimmerIntr_Dimming_Sw
  8114 ;;		_getDimmerLights_Status
  8115 ;; This function is called by:
  8116 ;;		_setControl_Lights_Table
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _setRF_AdjControl
  8122  1F93                     _setRF_AdjControl:	
  8123                           
  8124                           ;incstack = 0
  8125                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8126                           ;setRF_AdjControl@sw stored from wreg
  8127  1F93  00F9               	movwf	setRF_AdjControl@sw
  8128                           
  8129                           ;RF_Control_B1.c: 502: char status = 0;
  8130  1F94  01F7               	clrf	setRF_AdjControl@status
  8131                           
  8132                           ;RF_Control_B1.c: 504: status = getDimmerLights_Status(sw);
  8133  1F95  0879               	movf	setRF_AdjControl@sw,w
  8134  1F96  3198  20EC  319F   	fcall	_getDimmerLights_Status
  8135  1F99  00F6               	movwf	??_setRF_AdjControl
  8136  1F9A  0876               	movf	??_setRF_AdjControl,w
  8137  1F9B  00F7               	movwf	setRF_AdjControl@status
  8138                           
  8139                           ;RF_Control_B1.c: 505: char dimmingStatus = 0;
  8140  1F9C  01F8               	clrf	setRF_AdjControl@dimmingStatus
  8141                           
  8142                           ;RF_Control_B1.c: 506: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  8143  1F9D  0879               	movf	setRF_AdjControl@sw,w
  8144  1F9E  319A  22DF  319F   	fcall	_getDimmerIntr_Dimming_Sw
  8145  1FA1  00F6               	movwf	??_setRF_AdjControl
  8146  1FA2  0876               	movf	??_setRF_AdjControl,w
  8147  1FA3  00F8               	movwf	setRF_AdjControl@dimmingStatus
  8148                           
  8149                           ;RF_Control_B1.c: 508: if (status == 1) {
  8150  1FA4  0877               	movf	setRF_AdjControl@status,w
  8151  1FA5  3A01               	xorlw	1
  8152  1FA6  1D03               	skipz
  8153  1FA7  0008               	return
  8154                           
  8155                           ;RF_Control_B1.c: 509: if (dimmingStatus == 0) {
  8156  1FA8  08F8               	movf	setRF_AdjControl@dimmingStatus,f
  8157  1FA9  1D03               	skipz
  8158  1FAA  2FBA               	goto	l7375
  8159                           
  8160                           ;RF_Control_B1.c: 510: DimmerLights_SelectPointer(sw);
  8161  1FAB  0879               	movf	setRF_AdjControl@sw,w
  8162  1FAC  319A  2237         	fcall	_DimmerLights_SelectPointer
  8163                           
  8164                           ;RF_Control_B1.c: 511: DimmerLights->DimmingTrigger = 1;
  8165  1FAE  0020               	movlb	0	; select bank0
  8166  1FAF  086C               	movf	_DimmerLights,w
  8167  1FB0  0086               	movwf	6
  8168  1FB1  3001               	movlw	1	; select bank2/3
  8169  1FB2  0087               	movwf	7
  8170  1FB3  1601               	bsf	1,4
  8171                           
  8172                           ;RF_Control_B1.c: 512: DimmerLights->DimmingSwitch = 1;
  8173  1FB4  086C               	movf	_DimmerLights,w
  8174  1FB5  0086               	movwf	6
  8175  1FB6  3001               	movlw	1	; select bank2/3
  8176  1FB7  0087               	movwf	7
  8177  1FB8  1681               	bsf	1,5
  8178                           
  8179                           ;RF_Control_B1.c: 514: } else {
  8180  1FB9  0008               	return
  8181  1FBA                     l7375:	
  8182                           
  8183                           ;RF_Control_B1.c: 515: DimmerLights_SelectPointer(sw);
  8184  1FBA  0879               	movf	setRF_AdjControl@sw,w
  8185  1FBB  319A  2237         	fcall	_DimmerLights_SelectPointer
  8186                           
  8187                           ;RF_Control_B1.c: 516: DimmerLights->DimmingTrigger = 1;
  8188  1FBD  0020               	movlb	0	; select bank0
  8189  1FBE  086C               	movf	_DimmerLights,w
  8190  1FBF  0086               	movwf	6
  8191  1FC0  3001               	movlw	1	; select bank2/3
  8192  1FC1  0087               	movwf	7
  8193  1FC2  1601               	bsf	1,4
  8194                           
  8195                           ;RF_Control_B1.c: 517: DimmerLights->DimmingSwitch = 0;
  8196  1FC3  086C               	movf	_DimmerLights,w
  8197  1FC4  0086               	movwf	6
  8198  1FC5  3001               	movlw	1	; select bank2/3
  8199  1FC6  0087               	movwf	7
  8200  1FC7  1281               	bcf	1,5
  8201  1FC8  0008               	return
  8202  1FC9                     __end_of_setRF_AdjControl:	
  8203                           
  8204                           	psect	text32
  8205  115C                     __ptext32:	
  8206 ;; *************** function _setRFSW_Control *****************
  8207 ;; Defined at:
  8208 ;;		line 430 in file "../src/RF_Control_B1.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  sw              1    wreg     unsigned char 
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;  sw              1   71[BANK0 ] unsigned char 
  8213 ;;  status          1   70[BANK0 ] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;		None               void
  8216 ;; Registers used:
  8217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;Total ram usage:        3 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    6
  8230 ;; This function calls:
  8231 ;;		_getDimmerLights_Status
  8232 ;;		_setBuz
  8233 ;;		_setDelayOff_GO
  8234 ;;		_setDimmerLights_SwOff
  8235 ;;		_setDimmerLights_SwOn
  8236 ;;		_setRF_DimmerLights
  8237 ;;		_setTxData
  8238 ;; This function is called by:
  8239 ;;		_setControl_Lights_Table
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           
  8244                           ;psect for function _setRFSW_Control
  8245  115C                     _setRFSW_Control:	
  8246                           
  8247                           ;incstack = 0
  8248                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8249                           ;setRFSW_Control@sw stored from wreg
  8250  115C  0020               	movlb	0	; select bank0
  8251  115D  00E7               	movwf	setRFSW_Control@sw
  8252                           
  8253                           ;RF_Control_B1.c: 431: char status = 0;
  8254  115E  01E6               	clrf	setRFSW_Control@status
  8255                           
  8256                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  8257  115F  0023               	movlb	3	; select bank3
  8258  1160  0830               	movf	(_RF_Data^(0+384)+16),w
  8259  1161  3A80               	xorlw	128
  8260  1162  1D03               	skipz
  8261  1163  298F               	goto	l9957
  8262                           
  8263                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  8264  1164  0020               	movlb	0	; select bank0
  8265  1165  01DD               	clrf	setDelayOff_GO@command
  8266  1166  0ADD               	incf	setDelayOff_GO@command,f
  8267  1167  0023               	movlb	3	; select bank3
  8268  1168  0831               	movf	(_RF_Data^(0+384)+17),w
  8269  1169  0020               	movlb	0	; select bank0
  8270  116A  00E5               	movwf	??_setRFSW_Control
  8271  116B  0865               	movf	??_setRFSW_Control,w
  8272  116C  00DE               	movwf	setDelayOff_GO@value
  8273  116D  0867               	movf	setRFSW_Control@sw,w
  8274  116E  318B  236A  3191   	fcall	_setDelayOff_GO
  8275                           
  8276                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  8277  1171  0020               	movlb	0	; select bank0
  8278  1172  0867               	movf	setRFSW_Control@sw,w
  8279  1173  3198  20EC  3191   	fcall	_getDimmerLights_Status
  8280  1176  3A01               	xorlw	1
  8281  1177  1D03               	skipz
  8282  1178  298F               	goto	l9957
  8283                           
  8284                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  8285  1179  3064               	movlw	100
  8286  117A  0020               	movlb	0	; select bank0
  8287  117B  00A4               	movwf	setBuz@time
  8288  117C  3000               	movlw	0
  8289  117D  00A5               	movwf	setBuz@time+1
  8290  117E  3001               	movlw	1
  8291  117F  3192  22EC  3191   	fcall	_setBuz
  8292                           
  8293                           ;RF_Control_B1.c: 437: setRF_DimmerLights(sw, 1);
  8294  1182  0020               	movlb	0	; select bank0
  8295  1183  01DD               	clrf	setRF_DimmerLights@on
  8296  1184  0ADD               	incf	setRF_DimmerLights@on,f
  8297  1185  0867               	movf	setRFSW_Control@sw,w
  8298  1186  3188  202B  3191   	fcall	_setRF_DimmerLights
  8299                           
  8300                           ;RF_Control_B1.c: 438: setTxData();
  8301  1189  31A7  27F2  3191   	fcall	_setTxData
  8302                           
  8303                           ;RF_Control_B1.c: 439: status = 1;
  8304  118C  0020               	movlb	0	; select bank0
  8305  118D  01E6               	clrf	setRFSW_Control@status
  8306  118E  0AE6               	incf	setRFSW_Control@status,f
  8307  118F                     l9957:	
  8308                           
  8309                           ;RF_Control_B1.c: 440: }
  8310                           ;RF_Control_B1.c: 441: }
  8311                           ;RF_Control_B1.c: 443: if (status == 0) {
  8312  118F  0020               	movlb	0	; select bank0
  8313  1190  08E6               	movf	setRFSW_Control@status,f
  8314  1191  1D03               	skipz
  8315  1192  0008               	return
  8316                           
  8317                           ;RF_Control_B1.c: 445: setDimmerLights_SwOn(sw);
  8318  1193  0867               	movf	setRFSW_Control@sw,w
  8319  1194  3187  2784  3191   	fcall	_setDimmerLights_SwOn
  8320                           
  8321                           ;RF_Control_B1.c: 446: setDimmerLights_SwOff(sw);
  8322  1197  0020               	movlb	0	; select bank0
  8323  1198  0867               	movf	setRFSW_Control@sw,w
  8324  1199  3191  2122         	fcall	_setDimmerLights_SwOff
  8325  119B  0008               	return
  8326  119C                     __end_of_setRFSW_Control:	
  8327                           
  8328                           	psect	text33
  8329  0AE3                     __ptext33:	
  8330 ;; *************** function _setRFSW_AdjControl *****************
  8331 ;; Defined at:
  8332 ;;		line 453 in file "../src/RF_Control_B1.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  sw              1    wreg     unsigned char 
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  sw              1   64[BANK0 ] unsigned char 
  8337 ;;  status          1   63[BANK0 ] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;		None               void
  8340 ;; Registers used:
  8341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;Total ram usage:        4 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    6
  8354 ;; This function calls:
  8355 ;;		_getDimmerLights_PercentToValue
  8356 ;;		_getDimmerLights_Status
  8357 ;;		_setBuz
  8358 ;;		_setDimmerIntr_Dimming_RF
  8359 ;;		_setDimmerIntr_MaxmumValue
  8360 ;;		_setDimmerLights_DimmingRun
  8361 ;;		_setDimmerLights_SwOff
  8362 ;;		_setDimmerLights_SwOn
  8363 ;;		_setMemory_Modify
  8364 ;;		_setProductData
  8365 ;;		_setTxData
  8366 ;; This function is called by:
  8367 ;;		_setControl_Lights_Table
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           
  8372                           ;psect for function _setRFSW_AdjControl
  8373  0AE3                     _setRFSW_AdjControl:	
  8374                           
  8375                           ;incstack = 0
  8376                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8377                           ;setRFSW_AdjControl@sw stored from wreg
  8378  0AE3  0020               	movlb	0	; select bank0
  8379  0AE4  00E0               	movwf	setRFSW_AdjControl@sw
  8380                           
  8381                           ;RF_Control_B1.c: 454: char status = 0;
  8382  0AE5  01DF               	clrf	setRFSW_AdjControl@status
  8383                           
  8384                           ;RF_Control_B1.c: 456: status = getDimmerLights_Status(sw);
  8385  0AE6  0860               	movf	setRFSW_AdjControl@sw,w
  8386  0AE7  3198  20EC  318A   	fcall	_getDimmerLights_Status
  8387  0AEA  0020               	movlb	0	; select bank0
  8388  0AEB  00DD               	movwf	??_setRFSW_AdjControl
  8389  0AEC  085D               	movf	??_setRFSW_AdjControl,w
  8390  0AED  00DF               	movwf	setRFSW_AdjControl@status
  8391                           
  8392                           ;RF_Control_B1.c: 458: if (RF_Data[9] > 0x64) {
  8393  0AEE  3065               	movlw	101
  8394  0AEF  0023               	movlb	3	; select bank3
  8395  0AF0  0229               	subwf	(_RF_Data^(0+384)+9),w
  8396  0AF1  1C03               	skipc
  8397  0AF2  2AFA               	goto	l9969
  8398                           
  8399                           ;RF_Control_B1.c: 459: RF_Data[9] = 0x64;
  8400  0AF3  3064               	movlw	100
  8401  0AF4  0020               	movlb	0	; select bank0
  8402  0AF5  00DD               	movwf	??_setRFSW_AdjControl
  8403  0AF6  085D               	movf	??_setRFSW_AdjControl,w
  8404  0AF7  0023               	movlb	3	; select bank3
  8405  0AF8  00A9               	movwf	(_RF_Data^(0+384)+9)
  8406                           
  8407                           ;RF_Control_B1.c: 460: } else if (RF_Data[9] < 0x01) {
  8408  0AF9  2AFF               	goto	l9973
  8409  0AFA                     l9969:	
  8410  0AFA  08A9               	movf	(_RF_Data^(0+384)+9),f
  8411  0AFB  1D03               	skipz
  8412  0AFC  2AFF               	goto	l9973
  8413                           
  8414                           ;RF_Control_B1.c: 461: RF_Data[9] = 0x01;
  8415  0AFD  01A9               	clrf	(_RF_Data^(0+384)+9)
  8416  0AFE  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8417  0AFF                     l9973:	
  8418                           
  8419                           ;RF_Control_B1.c: 462: }
  8420                           ;RF_Control_B1.c: 463: setProductData(9, RF_Data[9]);
  8421  0AFF  0829               	movf	(_RF_Data^(0+384)+9),w
  8422  0B00  0020               	movlb	0	; select bank0
  8423  0B01  00DD               	movwf	??_setRFSW_AdjControl
  8424  0B02  085D               	movf	??_setRFSW_AdjControl,w
  8425  0B03  00DA               	movwf	setProductData@value
  8426  0B04  3009               	movlw	9
  8427  0B05  3198  20A2  318A   	fcall	_setProductData
  8428                           
  8429                           ;RF_Control_B1.c: 464: setProductData(11, sw);
  8430  0B08  0020               	movlb	0	; select bank0
  8431  0B09  0860               	movf	setRFSW_AdjControl@sw,w
  8432  0B0A  00DD               	movwf	??_setRFSW_AdjControl
  8433  0B0B  085D               	movf	??_setRFSW_AdjControl,w
  8434  0B0C  00DA               	movwf	setProductData@value
  8435  0B0D  300B               	movlw	11
  8436  0B0E  3198  20A2  318A   	fcall	_setProductData
  8437                           
  8438                           ;RF_Control_B1.c: 465: setProductData(17, product->Data[26 + sw]);
  8439  0B11  0020               	movlb	0	; select bank0
  8440  0B12  0860               	movf	setRFSW_AdjControl@sw,w
  8441  0B13  3E1A               	addlw	26
  8442  0B14  077B               	addwf	_product,w
  8443  0B15  00DD               	movwf	??_setRFSW_AdjControl
  8444  0B16  085D               	movf	??_setRFSW_AdjControl,w
  8445  0B17  0086               	movwf	6
  8446  0B18  3002               	movlw	2	; select bank4/5
  8447  0B19  0087               	movwf	7
  8448  0B1A  0801               	movf	1,w
  8449  0B1B  00DE               	movwf	??_setRFSW_AdjControl+1
  8450  0B1C  085E               	movf	??_setRFSW_AdjControl+1,w
  8451  0B1D  00DA               	movwf	setProductData@value
  8452  0B1E  3011               	movlw	17
  8453  0B1F  3198  20A2  318A   	fcall	_setProductData
  8454                           
  8455                           ;RF_Control_B1.c: 466: setProductData((20 + sw), RF_Data[9]);
  8456  0B22  0023               	movlb	3	; select bank3
  8457  0B23  0829               	movf	(_RF_Data^(0+384)+9),w
  8458  0B24  0020               	movlb	0	; select bank0
  8459  0B25  00DD               	movwf	??_setRFSW_AdjControl
  8460  0B26  085D               	movf	??_setRFSW_AdjControl,w
  8461  0B27  00DA               	movwf	setProductData@value
  8462  0B28  0860               	movf	setRFSW_AdjControl@sw,w
  8463  0B29  3E14               	addlw	20
  8464  0B2A  3198  20A2  318A   	fcall	_setProductData
  8465                           
  8466                           ;RF_Control_B1.c: 474: setMemory_Modify(1);
  8467  0B2D  3001               	movlw	1
  8468  0B2E  3199  2137  318A   	fcall	_setMemory_Modify
  8469                           
  8470                           ;RF_Control_B1.c: 478: if (status == 1) {
  8471  0B31  0020               	movlb	0	; select bank0
  8472  0B32  085F               	movf	setRFSW_AdjControl@status,w
  8473  0B33  3A01               	xorlw	1
  8474  0B34  1D03               	skipz
  8475  0B35  2B56               	goto	l9985
  8476                           
  8477                           ;RF_Control_B1.c: 480: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8478  0B36  0023               	movlb	3	; select bank3
  8479  0B37  0829               	movf	(_RF_Data^(0+384)+9),w
  8480  0B38  3196  26D1  318A   	fcall	_getDimmerLights_PercentToValue
  8481  0B3B  0020               	movlb	0	; select bank0
  8482  0B3C  00DD               	movwf	??_setRFSW_AdjControl
  8483  0B3D  085D               	movf	??_setRFSW_AdjControl,w
  8484  0B3E  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  8485  0B3F  0860               	movf	setRFSW_AdjControl@sw,w
  8486  0B40  319A  22F5  318A   	fcall	_setDimmerIntr_MaxmumValue
  8487                           
  8488                           ;RF_Control_B1.c: 481: setDimmerIntr_Dimming_RF(sw, 1);
  8489  0B43  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  8490  0B44  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  8491  0B45  0020               	movlb	0	; select bank0
  8492  0B46  0860               	movf	setRFSW_AdjControl@sw,w
  8493  0B47  319D  25C0  318A   	fcall	_setDimmerIntr_Dimming_RF
  8494                           
  8495                           ;RF_Control_B1.c: 483: setTxData();
  8496  0B4A  31A7  27F2  318A   	fcall	_setTxData
  8497                           
  8498                           ;RF_Control_B1.c: 485: setBuz(1, 100);
  8499  0B4D  3064               	movlw	100
  8500  0B4E  0020               	movlb	0	; select bank0
  8501  0B4F  00A4               	movwf	setBuz@time
  8502  0B50  3000               	movlw	0
  8503  0B51  00A5               	movwf	setBuz@time+1
  8504  0B52  3001               	movlw	1
  8505  0B53  3192  22EC         	fcall	_setBuz
  8506                           
  8507                           ;RF_Control_B1.c: 486: } else if (status == 0) {
  8508  0B55  0008               	return
  8509  0B56                     l9985:	
  8510  0B56  0020               	movlb	0	; select bank0
  8511  0B57  08DF               	movf	setRFSW_AdjControl@status,f
  8512  0B58  1D03               	skipz
  8513  0B59  0008               	return
  8514                           
  8515                           ;RF_Control_B1.c: 490: setDimmerLights_DimmingRun(sw, 1);
  8516  0B5A  01F4               	clrf	setDimmerLights_DimmingRun@command
  8517  0B5B  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  8518  0B5C  0860               	movf	setRFSW_AdjControl@sw,w
  8519  0B5D  319B  233B  318A   	fcall	_setDimmerLights_DimmingRun
  8520                           
  8521                           ;RF_Control_B1.c: 491: setDimmerLights_SwOn(sw);
  8522  0B60  0020               	movlb	0	; select bank0
  8523  0B61  0860               	movf	setRFSW_AdjControl@sw,w
  8524  0B62  3187  2784  318A   	fcall	_setDimmerLights_SwOn
  8525                           
  8526                           ;RF_Control_B1.c: 492: setDimmerLights_SwOff(sw);
  8527  0B65  0020               	movlb	0	; select bank0
  8528  0B66  0860               	movf	setRFSW_AdjControl@sw,w
  8529  0B67  3191  2122         	fcall	_setDimmerLights_SwOff
  8530  0B69  0008               	return
  8531  0B6A                     __end_of_setRFSW_AdjControl:	
  8532                           
  8533                           	psect	text34
  8534  1B3B                     __ptext34:	
  8535 ;; *************** function _setDimmerLights_DimmingRun *****************
  8536 ;; Defined at:
  8537 ;;		line 1272 in file "../src/Dimmer_B1.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  lights          1    wreg     unsigned char 
  8540 ;;  command         1    4[COMMON] unsigned char 
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  lights          1    6[COMMON] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;		None               void
  8545 ;; Registers used:
  8546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8552 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;Total ram usage:        3 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    4
  8559 ;; This function calls:
  8560 ;;		_DimmerLights_SelectPointer
  8561 ;; This function is called by:
  8562 ;;		_setRFSW_AdjControl
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function _setDimmerLights_DimmingRun
  8568  1B3B                     _setDimmerLights_DimmingRun:	
  8569                           
  8570                           ;incstack = 0
  8571                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8572                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8573  1B3B  00F6               	movwf	setDimmerLights_DimmingRun@lights
  8574                           
  8575                           ;Dimmer_B1.c: 1273: DimmerLights_SelectPointer(lights);
  8576  1B3C  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8577  1B3D  319A  2237         	fcall	_DimmerLights_SelectPointer
  8578                           
  8579                           ;Dimmer_B1.c: 1274: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8580  1B3F  0874               	movf	setDimmerLights_DimmingRun@command,w
  8581  1B40  3A01               	xorlw	1
  8582  1B41  3000               	movlw	0
  8583  1B42  1903               	skipnz
  8584  1B43  3001               	movlw	1
  8585  1B44  00F5               	movwf	??_setDimmerLights_DimmingRun
  8586  1B45  0020               	movlb	0	; select bank0
  8587  1B46  0A6C               	incf	_DimmerLights,w
  8588  1B47  0086               	movwf	6
  8589  1B48  3001               	movlw	1	; select bank2/3
  8590  1B49  0087               	movwf	7
  8591  1B4A  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8592  1B4B  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8593  1B4C  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8594  1B4D  0801               	movf	1,w
  8595  1B4E  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8596  1B4F  39BF               	andlw	-65
  8597  1B50  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8598  1B51  0081               	movwf	1
  8599  1B52  0008               	return
  8600  1B53                     __end_of_setDimmerLights_DimmingRun:	
  8601                           
  8602                           	psect	text35
  8603  19DA                     __ptext35:	
  8604 ;; *************** function _getRF_KeyStatus *****************
  8605 ;; Defined at:
  8606 ;;		line 167 in file "../src/RF_Control_B1.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;  key             1    3[COMMON] unsigned char 
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      unsigned char 
  8613 ;; Registers used:
  8614 ;;		wreg, status,2
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:        3 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    3
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_setRF_Main
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           
  8635                           ;psect for function _getRF_KeyStatus
  8636  19DA                     _getRF_KeyStatus:	
  8637                           
  8638                           ;RF_Control_B1.c: 168: char key = 0;
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8642  19DA  01F3               	clrf	getRF_KeyStatus@key
  8643                           
  8644                           ;RF_Control_B1.c: 177: key = (RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  8645  19DB  01F4               	clrf	_getRF_KeyStatus$5745
  8646  19DC  0AF4               	incf	_getRF_KeyStatus$5745,f
  8647  19DD  0020               	movlb	0	; select bank0
  8648  19DE  1C0C               	btfss	12,0	;volatile
  8649  19DF  188D               	btfsc	13,1	;volatile
  8650  19E0  29E5               	goto	l8067
  8651  19E1  1F0C               	btfss	12,6	;volatile
  8652  19E2  1A0C               	btfsc	12,4	;volatile
  8653  19E3  29E5               	goto	l8067
  8654  19E4  01F4               	clrf	_getRF_KeyStatus$5745
  8655  19E5                     l8067:	
  8656  19E5  0874               	movf	_getRF_KeyStatus$5745,w
  8657  19E6  00F2               	movwf	??_getRF_KeyStatus
  8658  19E7  0872               	movf	??_getRF_KeyStatus,w
  8659  19E8  00F3               	movwf	getRF_KeyStatus@key
  8660                           
  8661                           ;RF_Control_B1.c: 184: return key;
  8662  19E9  0873               	movf	getRF_KeyStatus@key,w
  8663  19EA  0008               	return
  8664  19EB                     __end_of_getRF_KeyStatus:	
  8665                           
  8666                           	psect	text36
  8667  1977                     __ptext36:	
  8668 ;; *************** function _getBuz_GO *****************
  8669 ;; Defined at:
  8670 ;;		line 82 in file "../src/Buzzer_B1.c"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;		None
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  i               2    6[COMMON] int 
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  2    2[COMMON] int 
  8677 ;; Registers used:
  8678 ;;		wreg, status,2, status,0
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;Total ram usage:        6 bytes
  8689 ;; Hardware stack levels used:    1
  8690 ;; Hardware stack levels required when called:    3
  8691 ;; This function calls:
  8692 ;;		Nothing
  8693 ;; This function is called by:
  8694 ;;		_setRF_Main
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           
  8699                           ;psect for function _getBuz_GO
  8700  1977                     _getBuz_GO:	
  8701                           
  8702                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8703                           
  8704                           ;incstack = 0
  8705                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8706  1977  0021               	movlb	1	; select bank1
  8707  1978  0C5C               	rrf	_Buz1^(0+128),w
  8708  1979  3901               	andlw	1
  8709  197A  00F4               	movwf	??_getBuz_GO
  8710  197B  01F5               	clrf	??_getBuz_GO+1
  8711  197C  0874               	movf	??_getBuz_GO,w
  8712  197D  00F6               	movwf	getBuz_GO@i
  8713  197E  0875               	movf	??_getBuz_GO+1,w
  8714  197F  00F7               	movwf	getBuz_GO@i+1
  8715                           
  8716                           ;Buzzer_B1.c: 84: return i;
  8717  1980  0877               	movf	getBuz_GO@i+1,w
  8718  1981  01F3               	clrf	?_getBuz_GO+1
  8719  1982  07F3               	addwf	?_getBuz_GO+1,f
  8720  1983  0876               	movf	getBuz_GO@i,w
  8721  1984  01F2               	clrf	?_getBuz_GO
  8722  1985  07F2               	addwf	?_getBuz_GO,f
  8723  1986  0008               	return
  8724  1987                     __end_of_getBuz_GO:	
  8725                           
  8726                           	psect	text37
  8727  1828                     __ptext37:	
  8728 ;; *************** function _RF_RxDisable *****************
  8729 ;; Defined at:
  8730 ;;		line 155 in file "../src/RF_Control_B1.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;		None
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;		None
  8735 ;; Return value:  Size  Location     Type
  8736 ;;		None               void
  8737 ;; Registers used:
  8738 ;;		None
  8739 ;; Tracked objects:
  8740 ;;		On entry : 0/0
  8741 ;;		On exit  : 0/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;Total ram usage:        0 bytes
  8749 ;; Hardware stack levels used:    1
  8750 ;; Hardware stack levels required when called:    3
  8751 ;; This function calls:
  8752 ;;		Nothing
  8753 ;; This function is called by:
  8754 ;;		_setRF_Main
  8755 ;; This function uses a non-reentrant model
  8756 ;;
  8757                           
  8758                           
  8759                           ;psect for function _RF_RxDisable
  8760  1828                     _RF_RxDisable:	
  8761                           
  8762                           ;RF_Control_B1.c: 156: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8763                           
  8764                           ;incstack = 0
  8765                           ; Regs used in _RF_RxDisable: []
  8766  1828  0021               	movlb	1	; select bank1
  8767  1829  18C0               	btfsc	_RF1^(0+128),1
  8768  182A  282D               	goto	l2268
  8769  182B  1DC0               	btfss	_RF1^(0+128),3
  8770  182C  0008               	return
  8771  182D                     l2268:	
  8772                           
  8773                           ;RF_Control_B1.c: 157: RF1.RxStatus = 0;
  8774  182D  11C0               	bcf	_RF1^(0+128),3
  8775                           
  8776                           ;RF_Control_B1.c: 158: RF1.ReceiveGO = 0;
  8777  182E  10C0               	bcf	_RF1^(0+128),1
  8778  182F  0008               	return
  8779  1830                     __end_of_RF_RxDisable:	
  8780                           
  8781                           	psect	text38
  8782  0891                     __ptext38:	
  8783 ;; *************** function _CC2500_TxData *****************
  8784 ;; Defined at:
  8785 ;;		line 32 in file "../src/CC2500_B1.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;		None
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;  loop_e          1    7[COMMON] unsigned char 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;		None               void
  8792 ;; Registers used:
  8793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;Total ram usage:        2 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    5
  8806 ;; This function calls:
  8807 ;;		_CC2500_WriteByte
  8808 ;;		_CC2500_WriteCommand
  8809 ;;		_RF_Timeout_Counter
  8810 ;;		_setRF_TimeoutCleared
  8811 ;; This function is called by:
  8812 ;;		_setRF_Main
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           
  8817                           ;psect for function _CC2500_TxData
  8818  0891                     _CC2500_TxData:	
  8819                           
  8820                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8821                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8825  0891  3036               	movlw	54
  8826  0892  319B  2353  3188   	fcall	_CC2500_WriteCommand
  8827                           
  8828                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8829  0895  303B               	movlw	59
  8830  0896  319B  2353  3188   	fcall	_CC2500_WriteCommand
  8831                           
  8832                           ;CC2500_B1.c: 38: RC4 = 0;
  8833  0899  0020               	movlb	0	; select bank0
  8834  089A  120E               	bcf	14,4	;volatile
  8835                           
  8836                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8837  089B  307F               	movlw	127
  8838  089C  00F6               	movwf	??_CC2500_TxData
  8839  089D  0876               	movf	??_CC2500_TxData,w
  8840  089E  0021               	movlb	1	; select bank1
  8841  089F  00ED               	movwf	_SPI0Buffer^(0+128)
  8842                           
  8843                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8844  08A0  28A4               	goto	l10175
  8845  08A1                     l10173:	
  8846                           
  8847                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8848  08A1  319A  2276  3188   	fcall	_RF_Timeout_Counter
  8849  08A4                     l10175:	
  8850  08A4  0020               	movlb	0	; select bank0
  8851  08A5  1D0E               	btfss	14,2	;volatile
  8852  08A6  28AA               	goto	l10179
  8853  08A7  0021               	movlb	1	; select bank1
  8854  08A8  1F41               	btfss	(_RF1^(0+128)+1),6
  8855  08A9  28A1               	goto	l10173
  8856  08AA                     l10179:	
  8857                           
  8858                           ;CC2500_B1.c: 42: };
  8859                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8860  08AA  31A7  27C5  3188   	fcall	_setRF_TimeoutCleared
  8861                           
  8862                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8863  08AD  319B  2323  3188   	fcall	_CC2500_WriteByte
  8864                           
  8865                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8866  08B0  0021               	movlb	1	; select bank1
  8867  08B1  086E               	movf	_Tx_Length^(0+128),w
  8868  08B2  00F6               	movwf	??_CC2500_TxData
  8869  08B3  0876               	movf	??_CC2500_TxData,w
  8870  08B4  00ED               	movwf	_SPI0Buffer^(0+128)
  8871                           
  8872                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8873  08B5  319B  2323  3188   	fcall	_CC2500_WriteByte
  8874                           
  8875                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8876  08B8  01F7               	clrf	CC2500_TxData@loop_e
  8877  08B9                     l10193:	
  8878  08B9  0021               	movlb	1	; select bank1
  8879  08BA  086E               	movf	_Tx_Length^(0+128),w
  8880  08BB  0277               	subwf	CC2500_TxData@loop_e,w
  8881  08BC  1803               	btfsc	3,0
  8882  08BD  28D0               	goto	l263
  8883                           
  8884                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8885  08BE  0877               	movf	CC2500_TxData@loop_e,w
  8886  08BF  3EA0               	addlw	_RF_Data& (0+255)
  8887  08C0  0086               	movwf	6
  8888  08C1  3001               	movlw	1	; select bank3/4
  8889  08C2  0087               	movwf	7
  8890  08C3  0801               	movf	1,w
  8891  08C4  00F6               	movwf	??_CC2500_TxData
  8892  08C5  0876               	movf	??_CC2500_TxData,w
  8893  08C6  0021               	movlb	1	; select bank1
  8894  08C7  00ED               	movwf	_SPI0Buffer^(0+128)
  8895                           
  8896                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8897  08C8  319B  2323  3188   	fcall	_CC2500_WriteByte
  8898  08CB  3001               	movlw	1
  8899  08CC  00F6               	movwf	??_CC2500_TxData
  8900  08CD  0876               	movf	??_CC2500_TxData,w
  8901  08CE  07F7               	addwf	CC2500_TxData@loop_e,f
  8902  08CF  28B9               	goto	l10193
  8903  08D0                     l263:	
  8904                           
  8905                           ;CC2500_B1.c: 51: }
  8906                           ;CC2500_B1.c: 52: RC4 = 1;
  8907  08D0  0020               	movlb	0	; select bank0
  8908  08D1  160E               	bsf	14,4	;volatile
  8909                           
  8910                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8911  08D2  3035               	movlw	53
  8912  08D3  319B  2353  3188   	fcall	_CC2500_WriteCommand
  8913                           
  8914                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8915  08D6  28DA               	goto	l10199
  8916  08D7                     l10197:	
  8917                           
  8918                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8919  08D7  319A  2276  3188   	fcall	_RF_Timeout_Counter
  8920  08DA                     l10199:	
  8921  08DA  0020               	movlb	0	; select bank0
  8922  08DB  180D               	btfsc	13,0	;volatile
  8923  08DC  28E0               	goto	l10203
  8924  08DD  0021               	movlb	1	; select bank1
  8925  08DE  1F41               	btfss	(_RF1^(0+128)+1),6
  8926  08DF  28D7               	goto	l10197
  8927  08E0                     l10203:	
  8928                           
  8929                           ;CC2500_B1.c: 56: };
  8930                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8931  08E0  31A7  27C5  3188   	fcall	_setRF_TimeoutCleared
  8932                           
  8933                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8934  08E3  28E7               	goto	l10207
  8935  08E4                     l10205:	
  8936                           
  8937                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8938  08E4  319A  2276  3188   	fcall	_RF_Timeout_Counter
  8939  08E7                     l10207:	
  8940  08E7  0020               	movlb	0	; select bank0
  8941  08E8  1C0D               	btfss	13,0	;volatile
  8942  08E9  28ED               	goto	l10211
  8943  08EA  0021               	movlb	1	; select bank1
  8944  08EB  1F41               	btfss	(_RF1^(0+128)+1),6
  8945  08EC  28E4               	goto	l10205
  8946  08ED                     l10211:	
  8947                           
  8948                           ;CC2500_B1.c: 61: };
  8949                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8950  08ED  31A7  27C5  3188   	fcall	_setRF_TimeoutCleared
  8951                           
  8952                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8953  08F0  3036               	movlw	54
  8954  08F1  319B  2353  3188   	fcall	_CC2500_WriteCommand
  8955                           
  8956                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8957  08F4  303B               	movlw	59
  8958  08F5  319B  2353         	fcall	_CC2500_WriteCommand
  8959                           
  8960                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8961  08F7  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8962  08F8  0008               	return
  8963  08F9                     __end_of_CC2500_TxData:	
  8964                           
  8965                           	psect	text39
  8966  160B                     __ptext39:	
  8967 ;; *************** function _CC2500_RxData *****************
  8968 ;; Defined at:
  8969 ;;		line 73 in file "../src/CC2500_B1.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;		None
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;  loop_f          1    7[COMMON] unsigned char 
  8974 ;; Return value:  Size  Location     Type
  8975 ;;		None               void
  8976 ;; Registers used:
  8977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8978 ;; Tracked objects:
  8979 ;;		On entry : 0/0
  8980 ;;		On exit  : 0/0
  8981 ;;		Unchanged: 0/0
  8982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;Total ram usage:        2 bytes
  8988 ;; Hardware stack levels used:    1
  8989 ;; Hardware stack levels required when called:    5
  8990 ;; This function calls:
  8991 ;;		_CC2500_ReadByte
  8992 ;;		_CC2500_ReadStatus
  8993 ;;		_CC2500_WriteByte
  8994 ;;		_CC2500_WriteCommand
  8995 ;;		_RF_Timeout_Counter
  8996 ;;		_setRF_TimeoutCleared
  8997 ;; This function is called by:
  8998 ;;		_setRF_Main
  8999 ;; This function uses a non-reentrant model
  9000 ;;
  9001                           
  9002                           
  9003                           ;psect for function _CC2500_RxData
  9004  160B                     _CC2500_RxData:	
  9005                           
  9006                           ;CC2500_B1.c: 74: unsigned char loop_f;
  9007                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  9008                           
  9009                           ;incstack = 0
  9010                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9011  160B  0020               	movlb	0	; select bank0
  9012  160C  180D               	btfsc	13,0	;volatile
  9013  160D  0008               	return
  9014                           
  9015                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  9016  160E  303B               	movlw	59
  9017  160F  319D  252C  3196   	fcall	_CC2500_ReadStatus
  9018                           
  9019                           ;CC2500_B1.c: 89: if (s_data != 0) {
  9020  1612  0021               	movlb	1	; select bank1
  9021  1613  086F               	movf	_s_data^(0+128),w
  9022  1614  1903               	btfsc	3,2
  9023  1615  0008               	return
  9024                           
  9025                           ;CC2500_B1.c: 90: RC4 = 0;
  9026  1616  0020               	movlb	0	; select bank0
  9027  1617  120E               	bcf	14,4	;volatile
  9028                           
  9029                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  9030  1618  30FF               	movlw	255
  9031  1619  00F6               	movwf	??_CC2500_RxData
  9032  161A  0876               	movf	??_CC2500_RxData,w
  9033  161B  0021               	movlb	1	; select bank1
  9034  161C  00ED               	movwf	_SPI0Buffer^(0+128)
  9035                           
  9036                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  9037  161D  2E21               	goto	l10231
  9038  161E                     l10229:	
  9039                           
  9040                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  9041  161E  319A  2276  3196   	fcall	_RF_Timeout_Counter
  9042  1621                     l10231:	
  9043  1621  0020               	movlb	0	; select bank0
  9044  1622  1D0E               	btfss	14,2	;volatile
  9045  1623  2E27               	goto	l10235
  9046  1624  0021               	movlb	1	; select bank1
  9047  1625  1F41               	btfss	(_RF1^(0+128)+1),6
  9048  1626  2E1E               	goto	l10229
  9049  1627                     l10235:	
  9050                           
  9051                           ;CC2500_B1.c: 95: };
  9052                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  9053  1627  31A7  27C5  3196   	fcall	_setRF_TimeoutCleared
  9054                           
  9055                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  9056  162A  319B  2323  3196   	fcall	_CC2500_WriteByte
  9057                           
  9058                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  9059  162D  319B  23F2  3196   	fcall	_CC2500_ReadByte
  9060                           
  9061                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  9062  1630  0021               	movlb	1	; select bank1
  9063  1631  086D               	movf	_SPI0Buffer^(0+128),w
  9064  1632  00F6               	movwf	??_CC2500_RxData
  9065  1633  0876               	movf	??_CC2500_RxData,w
  9066  1634  00EC               	movwf	_Rx_Length^(0+128)
  9067                           
  9068                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9069  1635  01F7               	clrf	CC2500_RxData@loop_f
  9070  1636                     l10251:	
  9071  1636  086C               	movf	_Rx_Length^(0+128),w
  9072  1637  0277               	subwf	CC2500_RxData@loop_f,w
  9073  1638  1803               	btfsc	3,0
  9074  1639  2E4C               	goto	l10253
  9075                           
  9076                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9077  163A  319B  23F2  3196   	fcall	_CC2500_ReadByte
  9078                           
  9079                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  9080  163D  0021               	movlb	1	; select bank1
  9081  163E  086D               	movf	_SPI0Buffer^(0+128),w
  9082  163F  00F6               	movwf	??_CC2500_RxData
  9083  1640  0877               	movf	CC2500_RxData@loop_f,w
  9084  1641  3EA0               	addlw	_RF_Data& (0+255)
  9085  1642  0086               	movwf	6
  9086  1643  3001               	movlw	1	; select bank3/4
  9087  1644  0087               	movwf	7
  9088  1645  0876               	movf	??_CC2500_RxData,w
  9089  1646  0081               	movwf	1
  9090  1647  3001               	movlw	1
  9091  1648  00F6               	movwf	??_CC2500_RxData
  9092  1649  0876               	movf	??_CC2500_RxData,w
  9093  164A  07F7               	addwf	CC2500_RxData@loop_f,f
  9094  164B  2E36               	goto	l10251
  9095  164C                     l10253:	
  9096                           
  9097                           ;CC2500_B1.c: 104: }
  9098                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  9099  164C  319B  23F2  3196   	fcall	_CC2500_ReadByte
  9100                           
  9101                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  9102  164F  0021               	movlb	1	; select bank1
  9103  1650  086D               	movf	_SPI0Buffer^(0+128),w
  9104  1651  00F6               	movwf	??_CC2500_RxData
  9105  1652  0876               	movf	??_CC2500_RxData,w
  9106  1653  0022               	movlb	2	; select bank2
  9107  1654  00AE               	movwf	_RSSI^(0+256)
  9108                           
  9109                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  9110  1655  319B  23F2  3196   	fcall	_CC2500_ReadByte
  9111                           
  9112                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9113  1658  0021               	movlb	1	; select bank1
  9114  1659  086D               	movf	_SPI0Buffer^(0+128),w
  9115  165A  00F6               	movwf	??_CC2500_RxData
  9116  165B  0876               	movf	??_CC2500_RxData,w
  9117  165C  00E8               	movwf	_CRC^(0+128)
  9118                           
  9119                           ;CC2500_B1.c: 109: RC4 = 1;
  9120  165D  0020               	movlb	0	; select bank0
  9121  165E  160E               	bsf	14,4	;volatile
  9122                           
  9123                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9124  165F  0021               	movlb	1	; select bank1
  9125  1660  1BE8               	btfsc	_CRC^(0+128),7
  9126                           
  9127                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9128  1661  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9129                           
  9130                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9131  1662  11C0               	bcf	_RF1^(0+128),3
  9132                           
  9133                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9134  1663  14C0               	bsf	_RF1^(0+128),1
  9135                           
  9136                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9137  1664  3036               	movlw	54
  9138  1665  319B  2353  3196   	fcall	_CC2500_WriteCommand
  9139                           
  9140                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9141  1668  303A               	movlw	58
  9142  1669  319B  2353         	fcall	_CC2500_WriteCommand
  9143  166B  0021               	movlb	1	; select bank1
  9144  166C  0008               	return
  9145  166D                     __end_of_CC2500_RxData:	
  9146                           
  9147                           	psect	text40
  9148  1D2C                     __ptext40:	
  9149 ;; *************** function _CC2500_ReadStatus *****************
  9150 ;; Defined at:
  9151 ;;		line 308 in file "../src/CC2500_B1.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;  status_addr     1    wreg     unsigned char 
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;  status_addr     1    5[COMMON] unsigned char 
  9156 ;; Return value:  Size  Location     Type
  9157 ;;		None               void
  9158 ;; Registers used:
  9159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;Total ram usage:        2 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    4
  9172 ;; This function calls:
  9173 ;;		_CC2500_ReadByte
  9174 ;;		_CC2500_WriteByte
  9175 ;;		_RF_Timeout_Counter
  9176 ;;		_setRF_TimeoutCleared
  9177 ;; This function is called by:
  9178 ;;		_CC2500_RxData
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           
  9183                           ;psect for function _CC2500_ReadStatus
  9184  1D2C                     _CC2500_ReadStatus:	
  9185                           
  9186                           ;incstack = 0
  9187                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9188                           ;CC2500_ReadStatus@status_addr stored from wreg
  9189  1D2C  00F5               	movwf	CC2500_ReadStatus@status_addr
  9190                           
  9191                           ;CC2500_B1.c: 309: RC4 = 0;
  9192  1D2D  0020               	movlb	0	; select bank0
  9193  1D2E  120E               	bcf	14,4	;volatile
  9194                           
  9195                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9196  1D2F  0875               	movf	CC2500_ReadStatus@status_addr,w
  9197  1D30  3EC0               	addlw	192
  9198  1D31  00F4               	movwf	??_CC2500_ReadStatus
  9199  1D32  0874               	movf	??_CC2500_ReadStatus,w
  9200  1D33  0021               	movlb	1	; select bank1
  9201  1D34  00ED               	movwf	_SPI0Buffer^(0+128)
  9202                           
  9203                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  9204  1D35  2D39               	goto	l9995
  9205  1D36                     l9993:	
  9206                           
  9207                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9208  1D36  319A  2276  319D   	fcall	_RF_Timeout_Counter
  9209  1D39                     l9995:	
  9210  1D39  0020               	movlb	0	; select bank0
  9211  1D3A  1D0E               	btfss	14,2	;volatile
  9212  1D3B  2D3F               	goto	l9999
  9213  1D3C  0021               	movlb	1	; select bank1
  9214  1D3D  1F41               	btfss	(_RF1^(0+128)+1),6
  9215  1D3E  2D36               	goto	l9993
  9216  1D3F                     l9999:	
  9217                           
  9218                           ;CC2500_B1.c: 314: };
  9219                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9220  1D3F  31A7  27C5  319D   	fcall	_setRF_TimeoutCleared
  9221                           
  9222                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9223  1D42  319B  2323  319D   	fcall	_CC2500_WriteByte
  9224                           
  9225                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9226  1D45  319B  23F2         	fcall	_CC2500_ReadByte
  9227                           
  9228                           ;CC2500_B1.c: 319: RC4 = 1;
  9229  1D47  0020               	movlb	0	; select bank0
  9230  1D48  160E               	bsf	14,4	;volatile
  9231                           
  9232                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9233  1D49  0021               	movlb	1	; select bank1
  9234  1D4A  086D               	movf	_SPI0Buffer^(0+128),w
  9235  1D4B  00F4               	movwf	??_CC2500_ReadStatus
  9236  1D4C  0874               	movf	??_CC2500_ReadStatus,w
  9237  1D4D  00EF               	movwf	_s_data^(0+128)
  9238  1D4E  0008               	return
  9239  1D4F                     __end_of_CC2500_ReadStatus:	
  9240                           
  9241                           	psect	text41
  9242  1BF2                     __ptext41:	
  9243 ;; *************** function _CC2500_ReadByte *****************
  9244 ;; Defined at:
  9245 ;;		line 242 in file "../src/CC2500_B1.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;		None
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;  loop_b          1    3[COMMON] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;		None               void
  9252 ;; Registers used:
  9253 ;;		wreg, status,2, status,0
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;Total ram usage:        2 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    3
  9266 ;; This function calls:
  9267 ;;		Nothing
  9268 ;; This function is called by:
  9269 ;;		_CC2500_RxData
  9270 ;;		_CC2500_ReadStatus
  9271 ;;		_CC2500_ReadREG
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           
  9276                           ;psect for function _CC2500_ReadByte
  9277  1BF2                     _CC2500_ReadByte:	
  9278                           
  9279                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9280                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9281                           
  9282                           ;incstack = 0
  9283                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9284  1BF2  01F3               	clrf	CC2500_ReadByte@loop_b
  9285  1BF3                     L4:	
  9286  1BF3  3008               	movlw	8
  9287  1BF4  0273               	subwf	CC2500_ReadByte@loop_b,w
  9288  1BF5  1803               	btfsc	3,0
  9289  1BF6  0008               	return
  9290                           
  9291                           ;CC2500_B1.c: 245: RC1 = 1;
  9292  1BF7  0020               	movlb	0	; select bank0
  9293  1BF8  148E               	bsf	14,1	;volatile
  9294                           
  9295                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9296  1BF9  1003               	clrc
  9297  1BFA  0021               	movlb	1	; select bank1
  9298  1BFB  0DED               	rlf	_SPI0Buffer^(0+128),f
  9299                           
  9300                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9301  1BFC  0020               	movlb	0	; select bank0
  9302  1BFD  1D0E               	btfss	14,2	;volatile
  9303  1BFE  2C02               	goto	l7231
  9304                           
  9305                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9306  1BFF  0021               	movlb	1	; select bank1
  9307  1C00  146D               	bsf	_SPI0Buffer^(0+128),0
  9308  1C01  2C07               	goto	l7233
  9309  1C02                     l7231:	
  9310                           
  9311                           ;CC2500_B1.c: 249: else
  9312                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9313  1C02  30FE               	movlw	254
  9314  1C03  00F2               	movwf	??_CC2500_ReadByte
  9315  1C04  0872               	movf	??_CC2500_ReadByte,w
  9316  1C05  0021               	movlb	1	; select bank1
  9317  1C06  05ED               	andwf	_SPI0Buffer^(0+128),f
  9318  1C07                     l7233:	
  9319                           
  9320                           ;CC2500_B1.c: 251: RC1 = 0;
  9321  1C07  0020               	movlb	0	; select bank0
  9322  1C08  108E               	bcf	14,1	;volatile
  9323  1C09  3001               	movlw	1
  9324  1C0A  00F2               	movwf	??_CC2500_ReadByte
  9325  1C0B  0872               	movf	??_CC2500_ReadByte,w
  9326  1C0C  07F3               	addwf	CC2500_ReadByte@loop_b,f
  9327  1C0D  2BF3               	goto	L4
  9328  1C0E                     __end_of_CC2500_ReadByte:	
  9329                           
  9330                           	psect	text42
  9331  1A8B                     __ptext42:	
  9332 ;; *************** function _CC2500_PowerOnInitial *****************
  9333 ;; Defined at:
  9334 ;;		line 126 in file "../src/CC2500_B1.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;		None
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;		None
  9339 ;; Return value:  Size  Location     Type
  9340 ;;		None               void
  9341 ;; Registers used:
  9342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;Total ram usage:        0 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    6
  9355 ;; This function calls:
  9356 ;;		_CC2500_ClearRXFIFO
  9357 ;;		_CC2500_ClearTXFIFO
  9358 ;;		_CC2500_FrequencyCabr
  9359 ;;		_CC2500_InitPATable
  9360 ;;		_CC2500_InitSetREG
  9361 ;;		_CC2500_PowerRST
  9362 ;;		_CC2500_SIDLEMode
  9363 ;; This function is called by:
  9364 ;;		_setRF_Main
  9365 ;;		_main
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           
  9370                           ;psect for function _CC2500_PowerOnInitial
  9371  1A8B                     _CC2500_PowerOnInitial:	
  9372                           
  9373                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9374                           
  9375                           ;incstack = 0
  9376                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9377  1A8B  3192  221E  319A   	fcall	_CC2500_PowerRST
  9378                           
  9379                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9380  1A8E  3188  2001  319A   	fcall	_CC2500_InitSetREG
  9381                           
  9382                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9383  1A91  319C  2448  319A   	fcall	_CC2500_InitPATable
  9384                           
  9385                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9386  1A94  31A7  27CD  319A   	fcall	_CC2500_ClearTXFIFO
  9387                           
  9388                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9389  1A97  31A7  27C9  319A   	fcall	_CC2500_ClearRXFIFO
  9390                           
  9391                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9392  1A9A  3198  2080  319A   	fcall	_CC2500_FrequencyCabr
  9393                           
  9394                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9395  1A9D  31A7  27D1         	fcall	_CC2500_SIDLEMode
  9396  1A9F  0008               	return
  9397  1AA0                     __end_of_CC2500_PowerOnInitial:	
  9398                           
  9399                           	psect	text43
  9400  27D1                     __ptext43:	
  9401 ;; *************** function _CC2500_SIDLEMode *****************
  9402 ;; Defined at:
  9403 ;;		line 216 in file "../src/CC2500_B1.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;		None
  9408 ;; Return value:  Size  Location     Type
  9409 ;;		None               void
  9410 ;; Registers used:
  9411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;Total ram usage:        0 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    5
  9424 ;; This function calls:
  9425 ;;		_CC2500_WriteCommand
  9426 ;; This function is called by:
  9427 ;;		_CC2500_PowerOnInitial
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           
  9432                           ;psect for function _CC2500_SIDLEMode
  9433  27D1                     _CC2500_SIDLEMode:	
  9434                           
  9435                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9436                           
  9437                           ;incstack = 0
  9438                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9439  27D1  3036               	movlw	54
  9440  27D2  319B  2353         	fcall	_CC2500_WriteCommand
  9441  27D4  0008               	return
  9442  27D5                     __end_of_CC2500_SIDLEMode:	
  9443                           
  9444                           	psect	text44
  9445  121E                     __ptext44:	
  9446 ;; *************** function _CC2500_PowerRST *****************
  9447 ;; Defined at:
  9448 ;;		line 139 in file "../src/CC2500_B1.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;		None
  9453 ;; Return value:  Size  Location     Type
  9454 ;;		None               void
  9455 ;; Registers used:
  9456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;Total ram usage:        1 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    4
  9469 ;; This function calls:
  9470 ;;		_CC2500_WriteByte
  9471 ;;		_DelayTime_1us
  9472 ;;		_RF_Timeout_Counter
  9473 ;;		_setRF_TimeoutCleared
  9474 ;; This function is called by:
  9475 ;;		_CC2500_PowerOnInitial
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           
  9480                           ;psect for function _CC2500_PowerRST
  9481  121E                     _CC2500_PowerRST:	
  9482                           
  9483                           ;CC2500_B1.c: 140: RC1 = 0;
  9484                           
  9485                           ;incstack = 0
  9486                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9487  121E  0020               	movlb	0	; select bank0
  9488  121F  108E               	bcf	14,1	;volatile
  9489                           
  9490                           ;CC2500_B1.c: 141: RC0 = 0;
  9491  1220  100E               	bcf	14,0	;volatile
  9492                           
  9493                           ;CC2500_B1.c: 142: RC4 = 1;
  9494  1221  160E               	bsf	14,4	;volatile
  9495                           
  9496                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9497  1222  300A               	movlw	10
  9498  1223  00F2               	movwf	DelayTime_1us@count
  9499  1224  3000               	movlw	0
  9500  1225  00F3               	movwf	DelayTime_1us@count+1
  9501  1226  319D  2574  3192   	fcall	_DelayTime_1us
  9502                           
  9503                           ;CC2500_B1.c: 144: RC4 = 0;
  9504  1229  0020               	movlb	0	; select bank0
  9505  122A  120E               	bcf	14,4	;volatile
  9506                           
  9507                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9508  122B  300A               	movlw	10
  9509  122C  00F2               	movwf	DelayTime_1us@count
  9510  122D  3000               	movlw	0
  9511  122E  00F3               	movwf	DelayTime_1us@count+1
  9512  122F  319D  2574  3192   	fcall	_DelayTime_1us
  9513                           
  9514                           ;CC2500_B1.c: 146: RC4 = 1;
  9515  1232  0020               	movlb	0	; select bank0
  9516  1233  160E               	bsf	14,4	;volatile
  9517                           
  9518                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9519  1234  3028               	movlw	40
  9520  1235  00F2               	movwf	DelayTime_1us@count
  9521  1236  3000               	movlw	0
  9522  1237  00F3               	movwf	DelayTime_1us@count+1
  9523  1238  319D  2574  3192   	fcall	_DelayTime_1us
  9524                           
  9525                           ;CC2500_B1.c: 148: RC4 = 0;
  9526  123B  0020               	movlb	0	; select bank0
  9527  123C  120E               	bcf	14,4	;volatile
  9528                           
  9529                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9530  123D  3030               	movlw	48
  9531  123E  00F8               	movwf	??_CC2500_PowerRST
  9532  123F  0878               	movf	??_CC2500_PowerRST,w
  9533  1240  0021               	movlb	1	; select bank1
  9534  1241  00ED               	movwf	_SPI0Buffer^(0+128)
  9535                           
  9536                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9537  1242  2A46               	goto	l10023
  9538  1243                     l10021:	
  9539                           
  9540                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9541  1243  319A  2276  3192   	fcall	_RF_Timeout_Counter
  9542  1246                     l10023:	
  9543  1246  0020               	movlb	0	; select bank0
  9544  1247  1D0E               	btfss	14,2	;volatile
  9545  1248  2A4C               	goto	l10027
  9546  1249  0021               	movlb	1	; select bank1
  9547  124A  1F41               	btfss	(_RF1^(0+128)+1),6
  9548  124B  2A43               	goto	l10021
  9549  124C                     l10027:	
  9550                           
  9551                           ;CC2500_B1.c: 152: };
  9552                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9553  124C  31A7  27C5  3192   	fcall	_setRF_TimeoutCleared
  9554                           
  9555                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9556  124F  319B  2323  3192   	fcall	_CC2500_WriteByte
  9557                           
  9558                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9559  1252  2A56               	goto	l10033
  9560  1253                     l10031:	
  9561                           
  9562                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9563  1253  319A  2276  3192   	fcall	_RF_Timeout_Counter
  9564  1256                     l10033:	
  9565  1256  0020               	movlb	0	; select bank0
  9566  1257  1D0E               	btfss	14,2	;volatile
  9567  1258  2A5C               	goto	l10037
  9568  1259  0021               	movlb	1	; select bank1
  9569  125A  1F41               	btfss	(_RF1^(0+128)+1),6
  9570  125B  2A53               	goto	l10031
  9571  125C                     l10037:	
  9572                           
  9573                           ;CC2500_B1.c: 157: };
  9574                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9575  125C  31A7  27C5         	fcall	_setRF_TimeoutCleared
  9576                           
  9577                           ;CC2500_B1.c: 159: RC0 = 0;
  9578  125E  0020               	movlb	0	; select bank0
  9579  125F  100E               	bcf	14,0	;volatile
  9580                           
  9581                           ;CC2500_B1.c: 160: RC4 = 1;
  9582  1260  160E               	bsf	14,4	;volatile
  9583  1261  0008               	return
  9584  1262                     __end_of_CC2500_PowerRST:	
  9585                           
  9586                           	psect	text45
  9587  0801                     __ptext45:	
  9588 ;; *************** function _CC2500_InitSetREG *****************
  9589 ;; Defined at:
  9590 ;;		line 166 in file "../src/CC2500_B1.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9595 ;;  temp2           1    1[BANK0 ] unsigned char 
  9596 ;;  temp1           1    0[BANK0 ] unsigned char 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;		None               void
  9599 ;; Registers used:
  9600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;Total ram usage:        4 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    5
  9613 ;; This function calls:
  9614 ;;		_CC2500_WriteREG
  9615 ;; This function is called by:
  9616 ;;		_CC2500_PowerOnInitial
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           
  9621                           ;psect for function _CC2500_InitSetREG
  9622  0801                     _CC2500_InitSetREG:	
  9623                           
  9624                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9625                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9626                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9627                           
  9628                           ;incstack = 0
  9629                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9630  0801  0020               	movlb	0	; select bank0
  9631  0802  01A2               	clrf	CC2500_InitSetREG@loop_c
  9632  0803                     L5:	
  9633  0803  302F               	movlw	47
  9634  0804  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9635  0805  1803               	btfsc	3,0
  9636  0806  0008               	return
  9637                           
  9638                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9639  0807  0822               	movf	CC2500_InitSetREG@loop_c,w
  9640  0808  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9641  0809  0084               	movwf	4
  9642  080A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9643  080B  1803               	skipnc
  9644  080C  3E01               	addlw	1
  9645  080D  0085               	movwf	5
  9646  080E  0800               	movf	0,w	;code access
  9647  080F  00F7               	movwf	??_CC2500_InitSetREG
  9648  0810  0877               	movf	??_CC2500_InitSetREG,w
  9649  0811  00A0               	movwf	CC2500_InitSetREG@temp1
  9650                           
  9651                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9652  0812  0822               	movf	CC2500_InitSetREG@loop_c,w
  9653  0813  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9654  0814  0084               	movwf	4
  9655  0815  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9656  0816  1803               	skipnc
  9657  0817  3E01               	addlw	1
  9658  0818  0085               	movwf	5
  9659  0819  0800               	movf	0,w	;code access
  9660  081A  00F7               	movwf	??_CC2500_InitSetREG
  9661  081B  0877               	movf	??_CC2500_InitSetREG,w
  9662  081C  00A1               	movwf	CC2500_InitSetREG@temp2
  9663                           
  9664                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9665  081D  0821               	movf	CC2500_InitSetREG@temp2,w
  9666  081E  00F7               	movwf	??_CC2500_InitSetREG
  9667  081F  0877               	movf	??_CC2500_InitSetREG,w
  9668  0820  00F4               	movwf	CC2500_WriteREG@value
  9669  0821  0820               	movf	CC2500_InitSetREG@temp1,w
  9670  0822  319D  250A  3188   	fcall	_CC2500_WriteREG
  9671  0825  3001               	movlw	1
  9672  0826  00F7               	movwf	??_CC2500_InitSetREG
  9673  0827  0877               	movf	??_CC2500_InitSetREG,w
  9674  0828  0020               	movlb	0	; select bank0
  9675  0829  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9676  082A  2803               	goto	L5
  9677  082B                     __end_of_CC2500_InitSetREG:	
  9678                           
  9679                           	psect	text46
  9680  1C48                     __ptext46:	
  9681 ;; *************** function _CC2500_InitPATable *****************
  9682 ;; Defined at:
  9683 ;;		line 181 in file "../src/CC2500_B1.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;		None
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;  loop_d          1    9[COMMON] unsigned char 
  9688 ;;  temp            1    8[COMMON] unsigned char 
  9689 ;; Return value:  Size  Location     Type
  9690 ;;		None               void
  9691 ;; Registers used:
  9692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;Total ram usage:        3 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    5
  9705 ;; This function calls:
  9706 ;;		_CC2500_WriteREG
  9707 ;; This function is called by:
  9708 ;;		_CC2500_PowerOnInitial
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           
  9713                           ;psect for function _CC2500_InitPATable
  9714  1C48                     _CC2500_InitPATable:	
  9715                           
  9716                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9717                           ;CC2500_B1.c: 183: unsigned char temp;
  9718                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9722  1C48  01F9               	clrf	CC2500_InitPATable@loop_d
  9723  1C49                     L6:	
  9724  1C49  3008               	movlw	8
  9725  1C4A  0279               	subwf	CC2500_InitPATable@loop_d,w
  9726  1C4B  1803               	btfsc	3,0
  9727  1C4C  0008               	return
  9728                           
  9729                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9730  1C4D  0879               	movf	CC2500_InitPATable@loop_d,w
  9731  1C4E  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9732  1C4F  0084               	movwf	4
  9733  1C50  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9734  1C51  1803               	skipnc
  9735  1C52  3E01               	addlw	1
  9736  1C53  0085               	movwf	5
  9737  1C54  0800               	movf	0,w	;code access
  9738  1C55  00F7               	movwf	??_CC2500_InitPATable
  9739  1C56  0877               	movf	??_CC2500_InitPATable,w
  9740  1C57  00F8               	movwf	CC2500_InitPATable@temp
  9741                           
  9742                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9743  1C58  0878               	movf	CC2500_InitPATable@temp,w
  9744  1C59  00F7               	movwf	??_CC2500_InitPATable
  9745  1C5A  0877               	movf	??_CC2500_InitPATable,w
  9746  1C5B  00F4               	movwf	CC2500_WriteREG@value
  9747  1C5C  303E               	movlw	62
  9748  1C5D  319D  250A  319C   	fcall	_CC2500_WriteREG
  9749  1C60  3001               	movlw	1
  9750  1C61  00F7               	movwf	??_CC2500_InitPATable
  9751  1C62  0877               	movf	??_CC2500_InitPATable,w
  9752  1C63  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9753  1C64  2C49               	goto	L6
  9754  1C65                     __end_of_CC2500_InitPATable:	
  9755                           
  9756                           	psect	text47
  9757  1D0A                     __ptext47:	
  9758 ;; *************** function _CC2500_WriteREG *****************
  9759 ;; Defined at:
  9760 ;;		line 258 in file "../src/CC2500_B1.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;  w_addr          1    wreg     unsigned char 
  9763 ;;  value           1    4[COMMON] unsigned char 
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;  w_addr          1    6[COMMON] unsigned char 
  9766 ;; Return value:  Size  Location     Type
  9767 ;;		None               void
  9768 ;; Registers used:
  9769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9775 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;Total ram usage:        3 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    4
  9782 ;; This function calls:
  9783 ;;		_CC2500_WriteByte
  9784 ;;		_RF_Timeout_Counter
  9785 ;;		_setRF_TimeoutCleared
  9786 ;; This function is called by:
  9787 ;;		_CC2500_InitSetREG
  9788 ;;		_CC2500_InitPATable
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           
  9793                           ;psect for function _CC2500_WriteREG
  9794  1D0A                     _CC2500_WriteREG:	
  9795                           
  9796                           ;incstack = 0
  9797                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9798                           ;CC2500_WriteREG@w_addr stored from wreg
  9799  1D0A  00F6               	movwf	CC2500_WriteREG@w_addr
  9800                           
  9801                           ;CC2500_B1.c: 259: RC4 = 0;
  9802  1D0B  0020               	movlb	0	; select bank0
  9803  1D0C  120E               	bcf	14,4	;volatile
  9804                           
  9805                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9806  1D0D  0876               	movf	CC2500_WriteREG@w_addr,w
  9807  1D0E  00F5               	movwf	??_CC2500_WriteREG
  9808  1D0F  0875               	movf	??_CC2500_WriteREG,w
  9809  1D10  0021               	movlb	1	; select bank1
  9810  1D11  00ED               	movwf	_SPI0Buffer^(0+128)
  9811                           
  9812                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9813  1D12  2D16               	goto	l9913
  9814  1D13                     l9911:	
  9815                           
  9816                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9817  1D13  319A  2276  319D   	fcall	_RF_Timeout_Counter
  9818  1D16                     l9913:	
  9819  1D16  0020               	movlb	0	; select bank0
  9820  1D17  1D0E               	btfss	14,2	;volatile
  9821  1D18  2D1C               	goto	l9917
  9822  1D19  0021               	movlb	1	; select bank1
  9823  1D1A  1F41               	btfss	(_RF1^(0+128)+1),6
  9824  1D1B  2D13               	goto	l9911
  9825  1D1C                     l9917:	
  9826                           
  9827                           ;CC2500_B1.c: 263: };
  9828                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9829  1D1C  31A7  27C5  319D   	fcall	_setRF_TimeoutCleared
  9830                           
  9831                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9832  1D1F  319B  2323  319D   	fcall	_CC2500_WriteByte
  9833                           
  9834                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9835  1D22  0874               	movf	CC2500_WriteREG@value,w
  9836  1D23  00F5               	movwf	??_CC2500_WriteREG
  9837  1D24  0875               	movf	??_CC2500_WriteREG,w
  9838  1D25  0021               	movlb	1	; select bank1
  9839  1D26  00ED               	movwf	_SPI0Buffer^(0+128)
  9840                           
  9841                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9842  1D27  319B  2323         	fcall	_CC2500_WriteByte
  9843                           
  9844                           ;CC2500_B1.c: 269: RC4 = 1;
  9845  1D29  0020               	movlb	0	; select bank0
  9846  1D2A  160E               	bsf	14,4	;volatile
  9847  1D2B  0008               	return
  9848  1D2C                     __end_of_CC2500_WriteREG:	
  9849                           
  9850                           	psect	text48
  9851  1880                     __ptext48:	
  9852 ;; *************** function _CC2500_FrequencyCabr *****************
  9853 ;; Defined at:
  9854 ;;		line 208 in file "../src/CC2500_B1.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;		None
  9857 ;; Auto vars:     Size  Location     Type
  9858 ;;		None
  9859 ;; Return value:  Size  Location     Type
  9860 ;;		None               void
  9861 ;; Registers used:
  9862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9863 ;; Tracked objects:
  9864 ;;		On entry : 0/0
  9865 ;;		On exit  : 0/0
  9866 ;;		Unchanged: 0/0
  9867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;Total ram usage:        0 bytes
  9873 ;; Hardware stack levels used:    1
  9874 ;; Hardware stack levels required when called:    5
  9875 ;; This function calls:
  9876 ;;		_CC2500_WriteCommand
  9877 ;;		_DelayTime_1us
  9878 ;; This function is called by:
  9879 ;;		_CC2500_PowerOnInitial
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           
  9884                           ;psect for function _CC2500_FrequencyCabr
  9885  1880                     _CC2500_FrequencyCabr:	
  9886                           
  9887                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9888                           
  9889                           ;incstack = 0
  9890                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9891  1880  3033               	movlw	51
  9892  1881  319B  2353  3198   	fcall	_CC2500_WriteCommand
  9893                           
  9894                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9895  1884  30E8               	movlw	232
  9896  1885  00F2               	movwf	DelayTime_1us@count
  9897  1886  3003               	movlw	3
  9898  1887  00F3               	movwf	DelayTime_1us@count+1
  9899  1888  319D  2574         	fcall	_DelayTime_1us
  9900  188A  0008               	return
  9901  188B                     __end_of_CC2500_FrequencyCabr:	
  9902                           
  9903                           	psect	text49
  9904  1D74                     __ptext49:	
  9905 ;; *************** function _DelayTime_1us *****************
  9906 ;; Defined at:
  9907 ;;		line 327 in file "../src/CC2500_B1.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;  count           2    2[COMMON] int 
  9910 ;; Auto vars:     Size  Location     Type
  9911 ;;  j               2    6[COMMON] unsigned int 
  9912 ;;  i               2    4[COMMON] unsigned int 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;		None               void
  9915 ;; Registers used:
  9916 ;;		wreg, status,2
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;Total ram usage:        6 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    3
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_CC2500_PowerRST
  9933 ;;		_CC2500_FrequencyCabr
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           
  9938                           ;psect for function _DelayTime_1us
  9939  1D74                     _DelayTime_1us:	
  9940                           
  9941                           ;CC2500_B1.c: 328: unsigned int i, j;
  9942                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9943                           
  9944                           ;incstack = 0
  9945                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9946  1D74  3001               	movlw	1
  9947  1D75  00F4               	movwf	DelayTime_1us@i
  9948  1D76  3000               	movlw	0
  9949  1D77  00F5               	movwf	DelayTime_1us@i+1
  9950  1D78                     l375:	
  9951  1D78  0873               	movf	DelayTime_1us@count+1,w
  9952  1D79  0275               	subwf	DelayTime_1us@i+1,w
  9953  1D7A  1D03               	skipz
  9954  1D7B  2D7E               	goto	u6565
  9955  1D7C  0872               	movf	DelayTime_1us@count,w
  9956  1D7D  0274               	subwf	DelayTime_1us@i,w
  9957  1D7E                     u6565:	
  9958  1D7E  1803               	btfsc	3,0
  9959  1D7F  0008               	return
  9960                           
  9961                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9962  1D80  01F6               	clrf	DelayTime_1us@j
  9963  1D81  01F7               	clrf	DelayTime_1us@j+1
  9964  1D82  3000               	movlw	0
  9965  1D83  0277               	subwf	DelayTime_1us@j+1,w
  9966  1D84  3002               	movlw	2
  9967  1D85  1903               	skipnz
  9968  1D86  0276               	subwf	DelayTime_1us@j,w
  9969  1D87  1803               	btfsc	3,0
  9970  1D88  2D94               	goto	l7247
  9971  1D89                     l7245:	
  9972  1D89  3001               	movlw	1
  9973  1D8A  07F6               	addwf	DelayTime_1us@j,f
  9974  1D8B  3000               	movlw	0
  9975  1D8C  3DF7               	addwfc	DelayTime_1us@j+1,f
  9976  1D8D  3000               	movlw	0
  9977  1D8E  0277               	subwf	DelayTime_1us@j+1,w
  9978  1D8F  3002               	movlw	2
  9979  1D90  1903               	skipnz
  9980  1D91  0276               	subwf	DelayTime_1us@j,w
  9981  1D92  1C03               	skipc
  9982  1D93  2D89               	goto	l7245
  9983  1D94                     l7247:	
  9984  1D94  3001               	movlw	1
  9985  1D95  07F4               	addwf	DelayTime_1us@i,f
  9986  1D96  3000               	movlw	0
  9987  1D97  3DF5               	addwfc	DelayTime_1us@i+1,f
  9988  1D98  2D78               	goto	l375
  9989  1D99                     __end_of_DelayTime_1us:	
  9990                           
  9991                           	psect	text50
  9992  27CD                     __ptext50:	
  9993 ;; *************** function _CC2500_ClearTXFIFO *****************
  9994 ;; Defined at:
  9995 ;;		line 194 in file "../src/CC2500_B1.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;		None
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;		None               void
 10002 ;; Registers used:
 10003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;Total ram usage:        0 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    5
 10016 ;; This function calls:
 10017 ;;		_CC2500_WriteCommand
 10018 ;; This function is called by:
 10019 ;;		_CC2500_PowerOnInitial
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           
 10024                           ;psect for function _CC2500_ClearTXFIFO
 10025  27CD                     _CC2500_ClearTXFIFO:	
 10026                           
 10027                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
 10028                           
 10029                           ;incstack = 0
 10030                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10031  27CD  303B               	movlw	59
 10032  27CE  319B  2353         	fcall	_CC2500_WriteCommand
 10033  27D0  0008               	return
 10034  27D1                     __end_of_CC2500_ClearTXFIFO:	
 10035                           
 10036                           	psect	text51
 10037  27C9                     __ptext51:	
 10038 ;; *************** function _CC2500_ClearRXFIFO *****************
 10039 ;; Defined at:
 10040 ;;		line 201 in file "../src/CC2500_B1.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;		None
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;		None
 10045 ;; Return value:  Size  Location     Type
 10046 ;;		None               void
 10047 ;; Registers used:
 10048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/0
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;Total ram usage:        0 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    5
 10061 ;; This function calls:
 10062 ;;		_CC2500_WriteCommand
 10063 ;; This function is called by:
 10064 ;;		_CC2500_PowerOnInitial
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           
 10069                           ;psect for function _CC2500_ClearRXFIFO
 10070  27C9                     _CC2500_ClearRXFIFO:	
 10071                           
 10072                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
 10073                           
 10074                           ;incstack = 0
 10075                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10076  27C9  303A               	movlw	58
 10077  27CA  319B  2353         	fcall	_CC2500_WriteCommand
 10078  27CC  0008               	return
 10079  27CD                     __end_of_CC2500_ClearRXFIFO:	
 10080                           
 10081                           	psect	text52
 10082  1B53                     __ptext52:	
 10083 ;; *************** function _CC2500_WriteCommand *****************
 10084 ;; Defined at:
 10085 ;;		line 292 in file "../src/CC2500_B1.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;  command         1    wreg     unsigned char 
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  command         1    5[COMMON] unsigned char 
 10090 ;; Return value:  Size  Location     Type
 10091 ;;		None               void
 10092 ;; Registers used:
 10093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;Total ram usage:        2 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; Hardware stack levels required when called:    4
 10106 ;; This function calls:
 10107 ;;		_CC2500_WriteByte
 10108 ;;		_RF_Timeout_Counter
 10109 ;;		_setRF_TimeoutCleared
 10110 ;; This function is called by:
 10111 ;;		_CC2500_TxData
 10112 ;;		_CC2500_RxData
 10113 ;;		_CC2500_ClearTXFIFO
 10114 ;;		_CC2500_ClearRXFIFO
 10115 ;;		_CC2500_FrequencyCabr
 10116 ;;		_CC2500_SIDLEMode
 10117 ;;		_setRF_Main
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           
 10122                           ;psect for function _CC2500_WriteCommand
 10123  1B53                     _CC2500_WriteCommand:	
 10124                           
 10125                           ;incstack = 0
 10126                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10127                           ;CC2500_WriteCommand@command stored from wreg
 10128  1B53  00F5               	movwf	CC2500_WriteCommand@command
 10129                           
 10130                           ;CC2500_B1.c: 293: RC4 = 0;
 10131  1B54  0020               	movlb	0	; select bank0
 10132  1B55  120E               	bcf	14,4	;volatile
 10133                           
 10134                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10135  1B56  0875               	movf	CC2500_WriteCommand@command,w
 10136  1B57  00F4               	movwf	??_CC2500_WriteCommand
 10137  1B58  0874               	movf	??_CC2500_WriteCommand,w
 10138  1B59  0021               	movlb	1	; select bank1
 10139  1B5A  00ED               	movwf	_SPI0Buffer^(0+128)
 10140                           
 10141                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
 10142  1B5B  2B5F               	goto	l9897
 10143  1B5C                     l9895:	
 10144                           
 10145                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10146  1B5C  319A  2276  319B   	fcall	_RF_Timeout_Counter
 10147  1B5F                     l9897:	
 10148  1B5F  0020               	movlb	0	; select bank0
 10149  1B60  1D0E               	btfss	14,2	;volatile
 10150  1B61  2B65               	goto	l9901
 10151  1B62  0021               	movlb	1	; select bank1
 10152  1B63  1F41               	btfss	(_RF1^(0+128)+1),6
 10153  1B64  2B5C               	goto	l9895
 10154  1B65                     l9901:	
 10155                           
 10156                           ;CC2500_B1.c: 298: };
 10157                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10158  1B65  31A7  27C5  319B   	fcall	_setRF_TimeoutCleared
 10159                           
 10160                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10161  1B68  319B  2323         	fcall	_CC2500_WriteByte
 10162                           
 10163                           ;CC2500_B1.c: 302: RC4 = 1;
 10164  1B6A  0020               	movlb	0	; select bank0
 10165  1B6B  160E               	bsf	14,4	;volatile
 10166  1B6C  0008               	return
 10167  1B6D                     __end_of_CC2500_WriteCommand:	
 10168                           
 10169                           	psect	text53
 10170  27C5                     __ptext53:	
 10171 ;; *************** function _setRF_TimeoutCleared *****************
 10172 ;; Defined at:
 10173 ;;		line 150 in file "../src/RF_Control_B1.c"
 10174 ;; Parameters:    Size  Location     Type
 10175 ;;		None
 10176 ;; Auto vars:     Size  Location     Type
 10177 ;;		None
 10178 ;; Return value:  Size  Location     Type
 10179 ;;		None               void
 10180 ;; Registers used:
 10181 ;;		status,2
 10182 ;; Tracked objects:
 10183 ;;		On entry : 0/0
 10184 ;;		On exit  : 0/0
 10185 ;;		Unchanged: 0/0
 10186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;Total ram usage:        0 bytes
 10192 ;; Hardware stack levels used:    1
 10193 ;; Hardware stack levels required when called:    3
 10194 ;; This function calls:
 10195 ;;		Nothing
 10196 ;; This function is called by:
 10197 ;;		_CC2500_TxData
 10198 ;;		_CC2500_RxData
 10199 ;;		_CC2500_PowerRST
 10200 ;;		_CC2500_WriteREG
 10201 ;;		_CC2500_WriteCommand
 10202 ;;		_CC2500_ReadStatus
 10203 ;;		_CC2500_ReadREG
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           
 10208                           ;psect for function _setRF_TimeoutCleared
 10209  27C5                     _setRF_TimeoutCleared:	
 10210                           
 10211                           ;RF_Control_B1.c: 151: RF1.TimeoutCount = 0;
 10212                           
 10213                           ;incstack = 0
 10214                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10215  27C5  0021               	movlb	1	; select bank1
 10216  27C6  01CD               	clrf	(_RF1^(0+128)+13)
 10217  27C7  01CE               	clrf	((_RF1+1)^(0+128)+13)
 10218  27C8  0008               	return
 10219  27C9                     __end_of_setRF_TimeoutCleared:	
 10220                           
 10221                           	psect	text54
 10222  1A76                     __ptext54:	
 10223 ;; *************** function _RF_Timeout_Counter *****************
 10224 ;; Defined at:
 10225 ;;		line 142 in file "../src/RF_Control_B1.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;		None
 10228 ;; Auto vars:     Size  Location     Type
 10229 ;;		None
 10230 ;; Return value:  Size  Location     Type
 10231 ;;		None               void
 10232 ;; Registers used:
 10233 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10234 ;; Tracked objects:
 10235 ;;		On entry : 0/0
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;Total ram usage:        0 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    3
 10246 ;; This function calls:
 10247 ;;		Nothing
 10248 ;; This function is called by:
 10249 ;;		_CC2500_TxData
 10250 ;;		_CC2500_RxData
 10251 ;;		_CC2500_PowerRST
 10252 ;;		_CC2500_WriteREG
 10253 ;;		_CC2500_WriteCommand
 10254 ;;		_CC2500_ReadStatus
 10255 ;;		_CC2500_ReadREG
 10256 ;; This function uses a non-reentrant model
 10257 ;;
 10258                           
 10259                           
 10260                           ;psect for function _RF_Timeout_Counter
 10261  1A76                     _RF_Timeout_Counter:	
 10262                           
 10263                           ;RF_Control_B1.c: 143: RF1.TimeoutCount++;
 10264                           
 10265                           ;incstack = 0
 10266                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10267  1A76  3001               	movlw	1
 10268  1A77  0021               	movlb	1	; select bank1
 10269  1A78  07CD               	addwf	(_RF1^(0+128)+13),f
 10270  1A79  3000               	movlw	0
 10271  1A7A  3DCE               	addwfc	((_RF1+1)^(0+128)+13),f
 10272                           
 10273                           ;RF_Control_B1.c: 144: if (RF1.TimeoutCount == 25000) {
 10274  1A7B  300D               	movlw	13
 10275  1A7C  3EC0               	addlw	_RF1& (0+255)
 10276  1A7D  0086               	movwf	6
 10277  1A7E  0187               	clrf	7
 10278  1A7F  3F40               	moviw [0]fsr1
 10279  1A80  3AA8               	xorlw	168
 10280  1A81  1D03               	skipz
 10281  1A82  2A85               	goto	u10705
 10282  1A83  3F41               	moviw [1]fsr1
 10283  1A84  3A61               	xorlw	97
 10284  1A85                     u10705:	
 10285  1A85  1D03               	skipz
 10286  1A86  0008               	return
 10287                           
 10288                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
 10289  1A87  01CD               	clrf	(_RF1^(0+128)+13)
 10290  1A88  01CE               	clrf	((_RF1+1)^(0+128)+13)
 10291                           
 10292                           ;RF_Control_B1.c: 146: RF1.Timeout = 1;
 10293  1A89  1741               	bsf	(_RF1^(0+128)+1),6
 10294  1A8A  0008               	return
 10295  1A8B                     __end_of_RF_Timeout_Counter:	
 10296                           
 10297                           	psect	text55
 10298  1B23                     __ptext55:	
 10299 ;; *************** function _CC2500_WriteByte *****************
 10300 ;; Defined at:
 10301 ;;		line 226 in file "../src/CC2500_B1.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;		None
 10304 ;; Auto vars:     Size  Location     Type
 10305 ;;  loop_a          1    3[COMMON] unsigned char 
 10306 ;; Return value:  Size  Location     Type
 10307 ;;		None               void
 10308 ;; Registers used:
 10309 ;;		wreg, status,2, status,0
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;Total ram usage:        2 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; Hardware stack levels required when called:    3
 10322 ;; This function calls:
 10323 ;;		Nothing
 10324 ;; This function is called by:
 10325 ;;		_CC2500_TxData
 10326 ;;		_CC2500_RxData
 10327 ;;		_CC2500_PowerRST
 10328 ;;		_CC2500_WriteREG
 10329 ;;		_CC2500_WriteCommand
 10330 ;;		_CC2500_ReadStatus
 10331 ;;		_CC2500_ReadREG
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function _CC2500_WriteByte
 10337  1B23                     _CC2500_WriteByte:	
 10338                           
 10339                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10340                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10344  1B23  01F3               	clrf	CC2500_WriteByte@loop_a
 10345  1B24                     L7:	
 10346  1B24  3008               	movlw	8
 10347  1B25  0273               	subwf	CC2500_WriteByte@loop_a,w
 10348  1B26  1803               	btfsc	3,0
 10349  1B27  0008               	return
 10350                           
 10351                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10352  1B28  0021               	movlb	1	; select bank1
 10353  1B29  1FED               	btfss	_SPI0Buffer^(0+128),7
 10354  1B2A  2B2E               	goto	l331
 10355                           
 10356                           ;CC2500_B1.c: 230: RC0 = 1;
 10357  1B2B  0020               	movlb	0	; select bank0
 10358  1B2C  140E               	bsf	14,0	;volatile
 10359  1B2D  2B30               	goto	l332
 10360  1B2E                     l331:	
 10361                           
 10362                           ;CC2500_B1.c: 231: else
 10363                           ;CC2500_B1.c: 232: RC0 = 0;
 10364  1B2E  0020               	movlb	0	; select bank0
 10365  1B2F  100E               	bcf	14,0	;volatile
 10366  1B30                     l332:	
 10367                           
 10368                           ;CC2500_B1.c: 233: RC1 = 1;
 10369  1B30  148E               	bsf	14,1	;volatile
 10370                           
 10371                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10372  1B31  1003               	clrc
 10373  1B32  0021               	movlb	1	; select bank1
 10374  1B33  0DED               	rlf	_SPI0Buffer^(0+128),f
 10375                           
 10376                           ;CC2500_B1.c: 235: RC1 = 0;
 10377  1B34  0020               	movlb	0	; select bank0
 10378  1B35  108E               	bcf	14,1	;volatile
 10379  1B36  3001               	movlw	1
 10380  1B37  00F2               	movwf	??_CC2500_WriteByte
 10381  1B38  0872               	movf	??_CC2500_WriteByte,w
 10382  1B39  07F3               	addwf	CC2500_WriteByte@loop_a,f
 10383  1B3A  2B24               	goto	L7
 10384  1B3B                     __end_of_CC2500_WriteByte:	
 10385                           
 10386                           	psect	text56
 10387  27B8                     __ptext56:	
 10388 ;; *************** function _RF_Initialization *****************
 10389 ;; Defined at:
 10390 ;;		line 9 in file "../src/RF_Control_B1.c"
 10391 ;; Parameters:    Size  Location     Type
 10392 ;;		None
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;		None
 10395 ;; Return value:  Size  Location     Type
 10396 ;;		None               void
 10397 ;; Registers used:
 10398 ;;		wreg, status,2, status,0, pclath, cstack
 10399 ;; Tracked objects:
 10400 ;;		On entry : 0/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;Total ram usage:        0 bytes
 10409 ;; Hardware stack levels used:    1
 10410 ;; Hardware stack levels required when called:    4
 10411 ;; This function calls:
 10412 ;;		_setRF_Initialization
 10413 ;; This function is called by:
 10414 ;;		_main
 10415 ;; This function uses a non-reentrant model
 10416 ;;
 10417                           
 10418                           
 10419                           ;psect for function _RF_Initialization
 10420  27B8                     _RF_Initialization:	
 10421                           
 10422                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10423                           
 10424                           ;incstack = 0
 10425                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10426  27B8  3198  2055         	fcall	_setRF_Initialization
 10427  27BA  0008               	return
 10428  27BB                     __end_of_RF_Initialization:	
 10429                           
 10430                           	psect	text57
 10431  1855                     __ptext57:	
 10432 ;; *************** function _setRF_Initialization *****************
 10433 ;; Defined at:
 10434 ;;		line 17 in file "../src/RF_Control_B1.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;		None
 10437 ;; Auto vars:     Size  Location     Type
 10438 ;;		None
 10439 ;; Return value:  Size  Location     Type
 10440 ;;		None               void
 10441 ;; Registers used:
 10442 ;;		wreg
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;Total ram usage:        1 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:    3
 10455 ;; This function calls:
 10456 ;;		Nothing
 10457 ;; This function is called by:
 10458 ;;		_RF_Initialization
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           
 10463                           ;psect for function _setRF_Initialization
 10464  1855                     _setRF_Initialization:	
 10465                           
 10466                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10467                           
 10468                           ;incstack = 0
 10469                           ; Regs used in _setRF_Initialization: [wreg]
 10470  1855  3015               	movlw	21
 10471  1856  00F2               	movwf	??_setRF_Initialization
 10472  1857  0872               	movf	??_setRF_Initialization,w
 10473  1858  0021               	movlb	1	; select bank1
 10474  1859  00EE               	movwf	_Tx_Length^(0+128)
 10475                           
 10476                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10477  185A  30C8               	movlw	200
 10478  185B  00C8               	movwf	(_RF1^(0+128)+8)
 10479  185C  3000               	movlw	0
 10480  185D  00C9               	movwf	(_RF1^(0+128)+9)
 10481  185E  0008               	return
 10482  185F                     __end_of_setRF_Initialization:	
 10483                           
 10484                           	psect	text58
 10485  19FC                     __ptext58:	
 10486 ;; *************** function _Mcu_Initialization *****************
 10487 ;; Defined at:
 10488 ;;		line 30 in file "../src/MCU_B1.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;		None
 10493 ;; Return value:  Size  Location     Type
 10494 ;;		None               void
 10495 ;; Registers used:
 10496 ;;		wreg, status,2, status,0, pclath, cstack
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:        0 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    4
 10509 ;; This function calls:
 10510 ;;		_ADC_Set
 10511 ;;		_Fosc_Set
 10512 ;;		_IOC_Set
 10513 ;;		_IO_Set
 10514 ;;		_TMR1_Set
 10515 ;;		_WDT_Set
 10516 ;; This function is called by:
 10517 ;;		_main
 10518 ;; This function uses a non-reentrant model
 10519 ;;
 10520                           
 10521                           
 10522                           ;psect for function _Mcu_Initialization
 10523  19FC                     _Mcu_Initialization:	
 10524                           
 10525                           ;MCU_B1.c: 32: Fosc_Set();
 10526                           
 10527                           ;incstack = 0
 10528                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10529  19FC  31A7  27C1  3199   	fcall	_Fosc_Set
 10530                           
 10531                           ;MCU_B1.c: 34: IO_Set();
 10532  19FF  319B  23D7  3199   	fcall	_IO_Set
 10533                           
 10534                           ;MCU_B1.c: 36: ;;
 10535                           ;MCU_B1.c: 38: TMR1_Set();
 10536  1A02  3198  20D2  3199   	fcall	_TMR1_Set
 10537                           
 10538                           ;MCU_B1.c: 40: ADC_Set();
 10539  1A05  3198  200A  3199   	fcall	_ADC_Set
 10540                           
 10541                           ;MCU_B1.c: 42: ;;
 10542                           ;MCU_B1.c: 44: ;;
 10543                           ;MCU_B1.c: 46: IOC_Set();
 10544  1A08  3198  2075  3199   	fcall	_IOC_Set
 10545                           
 10546                           ;MCU_B1.c: 48: ;;
 10547                           ;MCU_B1.c: 50: ;;
 10548                           ;MCU_B1.c: 52: WDT_Set();
 10549  1A0B  3198  204B         	fcall	_WDT_Set
 10550  1A0D  0008               	return
 10551  1A0E                     __end_of_Mcu_Initialization:	
 10552                           
 10553                           	psect	text59
 10554  184B                     __ptext59:	
 10555 ;; *************** function _WDT_Set *****************
 10556 ;; Defined at:
 10557 ;;		line 1107 in file "../src/MCU_B1.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;		None               void
 10564 ;; Registers used:
 10565 ;;		wreg
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;Total ram usage:        1 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    3
 10578 ;; This function calls:
 10579 ;;		Nothing
 10580 ;; This function is called by:
 10581 ;;		_Mcu_Initialization
 10582 ;; This function uses a non-reentrant model
 10583 ;;
 10584                           
 10585                           
 10586                           ;psect for function _WDT_Set
 10587  184B                     _WDT_Set:	
 10588                           
 10589                           ;MCU_B1.c: 1114: WDTCON = 0b00010111;;
 10590                           
 10591                           ;incstack = 0
 10592                           ; Regs used in _WDT_Set: [wreg]
 10593  184B  3017               	movlw	23
 10594  184C  0021               	movlb	1	; select bank1
 10595  184D  0097               	movwf	23	;volatile
 10596                           
 10597                           ;MCU_B1.c: 1116: WDT.Enable = 1;
 10598  184E  0022               	movlb	2	; select bank2
 10599  184F  142A               	bsf	_WDT^(0+256),0
 10600                           
 10601                           ;MCU_B1.c: 1117: WDT.Timer = 10;
 10602  1850  300A               	movlw	10
 10603  1851  00F2               	movwf	??_WDT_Set
 10604  1852  0872               	movf	??_WDT_Set,w
 10605  1853  00AB               	movwf	(_WDT^(0+256)+1)
 10606  1854  0008               	return
 10607  1855                     __end_of_WDT_Set:	
 10608                           
 10609                           	psect	text60
 10610  18D2                     __ptext60:	
 10611 ;; *************** function _TMR1_Set *****************
 10612 ;; Defined at:
 10613 ;;		line 226 in file "../src/MCU_B1.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;		None
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;		None
 10618 ;; Return value:  Size  Location     Type
 10619 ;;		None               void
 10620 ;; Registers used:
 10621 ;;		wreg
 10622 ;; Tracked objects:
 10623 ;;		On entry : 0/0
 10624 ;;		On exit  : 0/0
 10625 ;;		Unchanged: 0/0
 10626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;Total ram usage:        0 bytes
 10632 ;; Hardware stack levels used:    1
 10633 ;; Hardware stack levels required when called:    3
 10634 ;; This function calls:
 10635 ;;		Nothing
 10636 ;; This function is called by:
 10637 ;;		_Mcu_Initialization
 10638 ;; This function uses a non-reentrant model
 10639 ;;
 10640                           
 10641                           
 10642                           ;psect for function _TMR1_Set
 10643  18D2                     _TMR1_Set:	
 10644                           
 10645                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10646                           
 10647                           ;incstack = 0
 10648                           ; Regs used in _TMR1_Set: [wreg]
 10649  18D2  3041               	movlw	65
 10650  18D3  0020               	movlb	0	; select bank0
 10651  18D4  0098               	movwf	24	;volatile
 10652                           
 10653                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10654  18D5  30FA               	movlw	250
 10655  18D6  0097               	movwf	23	;volatile
 10656                           
 10657                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10658  18D7  3038               	movlw	56
 10659  18D8  0096               	movwf	22	;volatile
 10660                           
 10661                           ;MCU_B1.c: 230: TMR1IE = 1;
 10662  18D9  0021               	movlb	1	; select bank1
 10663  18DA  1411               	bsf	17,0	;volatile
 10664                           
 10665                           ;MCU_B1.c: 231: PEIE = 1;
 10666  18DB  170B               	bsf	11,6	;volatile
 10667                           
 10668                           ;MCU_B1.c: 232: GIE = 1;
 10669  18DC  178B               	bsf	11,7	;volatile
 10670  18DD  0008               	return
 10671  18DE                     __end_of_TMR1_Set:	
 10672                           
 10673                           	psect	text61
 10674  1BD7                     __ptext61:	
 10675 ;; *************** function _IO_Set *****************
 10676 ;; Defined at:
 10677 ;;		line 60 in file "../src/MCU_B1.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;		None
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;		None
 10682 ;; Return value:  Size  Location     Type
 10683 ;;		None               void
 10684 ;; Registers used:
 10685 ;;		wreg, status,2
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;Total ram usage:        0 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; Hardware stack levels required when called:    3
 10698 ;; This function calls:
 10699 ;;		Nothing
 10700 ;; This function is called by:
 10701 ;;		_Mcu_Initialization
 10702 ;; This function uses a non-reentrant model
 10703 ;;
 10704                           
 10705                           
 10706                           ;psect for function _IO_Set
 10707  1BD7                     _IO_Set:	
 10708                           
 10709                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10710                           
 10711                           ;incstack = 0
 10712                           ; Regs used in _IO_Set: [wreg+status,2]
 10713  1BD7  3077               	movlw	119
 10714  1BD8  0021               	movlb	1	; select bank1
 10715  1BD9  008C               	movwf	12	;volatile
 10716                           
 10717                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10718  1BDA  3007               	movlw	7
 10719  1BDB  008D               	movwf	13	;volatile
 10720                           
 10721                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10722  1BDC  300C               	movlw	12
 10723  1BDD  008E               	movwf	14	;volatile
 10724                           
 10725                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10726  1BDE  0022               	movlb	2	; select bank2
 10727  1BDF  018C               	clrf	12	;volatile
 10728                           
 10729                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10730  1BE0  3002               	movlw	2
 10731  1BE1  008D               	movwf	13	;volatile
 10732                           
 10733                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10734  1BE2  018E               	clrf	14	;volatile
 10735                           
 10736                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10737  1BE3  3022               	movlw	34
 10738  1BE4  0023               	movlb	3	; select bank3
 10739  1BE5  008C               	movwf	12	;volatile
 10740                           
 10741                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10742  1BE6  018D               	clrf	13	;volatile
 10743                           
 10744                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10745  1BE7  018E               	clrf	14	;volatile
 10746                           
 10747                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10748  1BE8  3077               	movlw	119
 10749  1BE9  0020               	movlb	0	; select bank0
 10750  1BEA  008C               	movwf	12	;volatile
 10751                           
 10752                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10753  1BEB  3007               	movlw	7
 10754  1BEC  008D               	movwf	13	;volatile
 10755                           
 10756                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10757  1BED  300C               	movlw	12
 10758  1BEE  008E               	movwf	14	;volatile
 10759                           
 10760                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10761  1BEF  0024               	movlb	4	; select bank4
 10762  1BF0  018D               	clrf	13	;volatile
 10763  1BF1  0008               	return
 10764  1BF2                     __end_of_IO_Set:	
 10765                           
 10766                           	psect	text62
 10767  1875                     __ptext62:	
 10768 ;; *************** function _IOC_Set *****************
 10769 ;; Defined at:
 10770 ;;		line 381 in file "../src/MCU_B1.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;		None
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;		None
 10775 ;; Return value:  Size  Location     Type
 10776 ;;		None               void
 10777 ;; Registers used:
 10778 ;;		wreg, status,2
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;Total ram usage:        0 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:    3
 10791 ;; This function calls:
 10792 ;;		Nothing
 10793 ;; This function is called by:
 10794 ;;		_Mcu_Initialization
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           
 10799                           ;psect for function _IOC_Set
 10800  1875                     _IOC_Set:	
 10801                           
 10802                           ;MCU_B1.c: 383: IOCBP = 0b00000100;;
 10803                           
 10804                           ;incstack = 0
 10805                           ; Regs used in _IOC_Set: [wreg+status,2]
 10806  1875  3004               	movlw	4
 10807  1876  0027               	movlb	7	; select bank7
 10808  1877  0094               	movwf	20	;volatile
 10809                           
 10810                           ;MCU_B1.c: 384: IOCBN = 0b00000100;;
 10811  1878  3004               	movlw	4
 10812  1879  0095               	movwf	21	;volatile
 10813                           
 10814                           ;MCU_B1.c: 386: IOCBF = 0b00000000;
 10815  187A  0196               	clrf	22	;volatile
 10816                           
 10817                           ;MCU_B1.c: 388: IOCIE = 1;
 10818  187B  158B               	bsf	11,3	;volatile
 10819                           
 10820                           ;MCU_B1.c: 389: IOCIF = 0;
 10821  187C  100B               	bcf	11,0	;volatile
 10822                           
 10823                           ;MCU_B1.c: 390: PEIE = 1;
 10824  187D  170B               	bsf	11,6	;volatile
 10825                           
 10826                           ;MCU_B1.c: 391: GIE = 1;
 10827  187E  178B               	bsf	11,7	;volatile
 10828  187F  0008               	return
 10829  1880                     __end_of_IOC_Set:	
 10830                           
 10831                           	psect	text63
 10832  27C1                     __ptext63:	
 10833 ;; *************** function _Fosc_Set *****************
 10834 ;; Defined at:
 10835 ;;		line 56 in file "../src/MCU_B1.c"
 10836 ;; Parameters:    Size  Location     Type
 10837 ;;		None
 10838 ;; Auto vars:     Size  Location     Type
 10839 ;;		None
 10840 ;; Return value:  Size  Location     Type
 10841 ;;		None               void
 10842 ;; Registers used:
 10843 ;;		wreg
 10844 ;; Tracked objects:
 10845 ;;		On entry : 0/0
 10846 ;;		On exit  : 0/0
 10847 ;;		Unchanged: 0/0
 10848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;Total ram usage:        0 bytes
 10854 ;; Hardware stack levels used:    1
 10855 ;; Hardware stack levels required when called:    3
 10856 ;; This function calls:
 10857 ;;		Nothing
 10858 ;; This function is called by:
 10859 ;;		_Mcu_Initialization
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           
 10864                           ;psect for function _Fosc_Set
 10865  27C1                     _Fosc_Set:	
 10866                           
 10867                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10868                           
 10869                           ;incstack = 0
 10870                           ; Regs used in _Fosc_Set: [wreg]
 10871  27C1  3078               	movlw	120
 10872  27C2  0021               	movlb	1	; select bank1
 10873  27C3  0099               	movwf	25	;volatile
 10874  27C4  0008               	return
 10875  27C5                     __end_of_Fosc_Set:	
 10876                           
 10877                           	psect	text64
 10878  180A                     __ptext64:	
 10879 ;; *************** function _ADC_Set *****************
 10880 ;; Defined at:
 10881 ;;		line 429 in file "../src/MCU_B1.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;		None
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;		None
 10886 ;; Return value:  Size  Location     Type
 10887 ;;		None               void
 10888 ;; Registers used:
 10889 ;;		wreg
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;Total ram usage:        0 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    3
 10902 ;; This function calls:
 10903 ;;		Nothing
 10904 ;; This function is called by:
 10905 ;;		_Mcu_Initialization
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           
 10910                           ;psect for function _ADC_Set
 10911  180A                     _ADC_Set:	
 10912                           
 10913                           ;MCU_B1.c: 430: ADCON1 = 0xf3;
 10914                           
 10915                           ;incstack = 0
 10916                           ; Regs used in _ADC_Set: [wreg]
 10917  180A  30F3               	movlw	243
 10918  180B  0021               	movlb	1	; select bank1
 10919  180C  009E               	movwf	30	;volatile
 10920                           
 10921                           ;MCU_B1.c: 431: FVRCON = 0xc1;
 10922  180D  30C1               	movlw	193
 10923  180E  0022               	movlb	2	; select bank2
 10924  180F  0097               	movwf	23	;volatile
 10925  1810  0008               	return
 10926  1811                     __end_of_ADC_Set:	
 10927                           
 10928                           	psect	text65
 10929  0053                     __ptext65:	
 10930 ;; *************** function _Load_Main *****************
 10931 ;; Defined at:
 10932 ;;		line 40 in file "../src/OverLoad_B1.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;  i               2    8[BANK0 ] int 
 10937 ;;  LightsCount     1    7[BANK0 ] unsigned char 
 10938 ;;  Load_RunStat    1    6[BANK0 ] unsigned char 
 10939 ;;  ErrorCountVa    1    5[BANK0 ] unsigned char 
 10940 ;;  error           1    2[BANK0 ] unsigned char 
 10941 ;; Return value:  Size  Location     Type
 10942 ;;		None               void
 10943 ;; Registers used:
 10944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10945 ;; Tracked objects:
 10946 ;;		On entry : 0/0
 10947 ;;		On exit  : 0/0
 10948 ;;		Unchanged: 0/0
 10949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10951 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;Total ram usage:       10 bytes
 10955 ;; Hardware stack levels used:    1
 10956 ;; Hardware stack levels required when called:    4
 10957 ;; This function calls:
 10958 ;;		___lwdiv
 10959 ;;		___wmul
 10960 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10961 ;;		_getDimmer_LoadGO
 10962 ;;		_getDimmer_Load_Status
 10963 ;;		_getMain_All_Error_Status
 10964 ;;		_getMain_All_LightsStatus
 10965 ;;		_getMain_Lights_Count
 10966 ;;		_setLoad_AH_AL_Restore
 10967 ;; This function is called by:
 10968 ;;		_main
 10969 ;; This function uses a non-reentrant model
 10970 ;;
 10971                           
 10972                           
 10973                           ;psect for function _Load_Main
 10974  0053                     _Load_Main:	
 10975                           
 10976                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10977                           
 10978                           ;incstack = 0
 10979                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10980  0053  3000               	movlw	0
 10981  0054  319E  263C  3180   	fcall	_getMain_All_Error_Status
 10982  0057  0020               	movlb	0	; select bank0
 10983  0058  00A0               	movwf	??_Load_Main
 10984  0059  0820               	movf	??_Load_Main,w
 10985  005A  00A2               	movwf	Load_Main@error
 10986                           
 10987                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10988  005B  01A6               	clrf	Load_Main@Load_RunStatus
 10989  005C  01A5               	clrf	Load_Main@ErrorCountValue
 10990  005D  01A7               	clrf	Load_Main@LightsCount
 10991                           
 10992                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10993  005E  0022               	movlb	2	; select bank2
 10994  005F  1C32               	btfss	_Load^(0+256),0
 10995  0060  29ED               	goto	l1665
 10996                           
 10997                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10998  0061  3199  2119  3180   	fcall	_getMain_All_LightsStatus
 10999  0064  3800               	iorlw	0
 11000  0065  1D03               	skipz
 11001  0066  2869               	goto	l11057
 11002                           
 11003                           ;OverLoad_B1.c: 46: Load.GO = 0;
 11004  0067  0022               	movlb	2	; select bank2
 11005  0068  288A               	goto	l11075
 11006  0069                     l11057:	
 11007                           ;OverLoad_B1.c: 47: } else {
 11008                           
 11009                           
 11010                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 11011  0069  0020               	movlb	0	; select bank0
 11012  006A  08A2               	movf	Load_Main@error,f
 11013  006B  1D03               	skipz
 11014  006C  2887               	goto	l1668
 11015  006D  319B  23BC  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 11016  0070  3800               	iorlw	0
 11017  0071  1D03               	skipz
 11018  0072  2887               	goto	l1668
 11019                           
 11020                           ;OverLoad_B1.c: 51: Load.GO = 1;
 11021  0073  0022               	movlb	2	; select bank2
 11022  0074  14B2               	bsf	_Load^(0+256),1
 11023                           
 11024                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 11025  0075  31A7  27F9  3180   	fcall	_getDimmer_LoadGO
 11026  0078  3A01               	xorlw	1
 11027  0079  1D03               	skipz
 11028  007A  2882               	goto	l1669
 11029                           
 11030                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 11031  007B  0022               	movlb	2	; select bank2
 11032  007C  1DB2               	btfss	_Load^(0+256),3
 11033  007D  1BB2               	btfsc	_Load^(0+256),7
 11034  007E  288B               	goto	l1667
 11035                           
 11036                           ;OverLoad_B1.c: 55: Load.Run = 1;
 11037  007F  15B2               	bsf	_Load^(0+256),3
 11038                           
 11039                           ;OverLoad_B1.c: 56: Load.Count = 0;
 11040  0080  01D7               	clrf	(_Load^(0+256)+37)
 11041                           
 11042                           ;OverLoad_B1.c: 57: }
 11043                           ;OverLoad_B1.c: 58: } else {
 11044  0081  288B               	goto	l1667
 11045  0082                     l1669:	
 11046                           
 11047                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 11048  0082  0022               	movlb	2	; select bank2
 11049  0083  1FB2               	btfss	_Load^(0+256),7
 11050  0084  288B               	goto	l1667
 11051                           
 11052                           ;OverLoad_B1.c: 60: Load.OK = 0;
 11053  0085  13B2               	bcf	_Load^(0+256),7
 11054                           
 11055                           ;OverLoad_B1.c: 61: }
 11056                           ;OverLoad_B1.c: 62: }
 11057                           ;OverLoad_B1.c: 63: } else {
 11058  0086  288B               	goto	l1667
 11059  0087                     l1668:	
 11060                           
 11061                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 11062  0087  0022               	movlb	2	; select bank2
 11063  0088  1CB2               	btfss	_Load^(0+256),1
 11064  0089  288B               	goto	l1667
 11065  008A                     l11075:	
 11066                           
 11067                           ;OverLoad_B1.c: 65: Load.GO = 0;
 11068  008A  10B2               	bcf	_Load^(0+256),1
 11069  008B                     l1667:	
 11070                           
 11071                           ;OverLoad_B1.c: 66: }
 11072                           ;OverLoad_B1.c: 67: }
 11073                           ;OverLoad_B1.c: 89: }
 11074                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 11075  008B  1CB2               	btfss	_Load^(0+256),1
 11076  008C  29C9               	goto	l1675
 11077                           
 11078                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 11079  008D  1532               	bsf	_Load^(0+256),2
 11080                           
 11081                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 11082  008E  1E32               	btfss	_Load^(0+256),4
 11083  008F  29C7               	goto	l1676
 11084                           
 11085                           ;OverLoad_B1.c: 96: Load.Time++;
 11086  0090  3001               	movlw	1
 11087  0091  07B3               	addwf	(_Load^(0+256)+1),f
 11088  0092  3000               	movlw	0
 11089  0093  3DB4               	addwfc	((_Load+1)^(0+256)+1),f
 11090                           
 11091                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 11092  0094  3000               	movlw	0
 11093  0095  0234               	subwf	((_Load+1)^(0+256)+1),w
 11094  0096  3002               	movlw	2
 11095  0097  1903               	skipnz
 11096  0098  0233               	subwf	(_Load^(0+256)+1),w
 11097  0099  1C03               	skipc
 11098  009A  0008               	return
 11099                           
 11100                           ;OverLoad_B1.c: 98: Load.Time = 0;
 11101  009B  01B3               	clrf	(_Load^(0+256)+1)
 11102  009C  01B4               	clrf	((_Load+1)^(0+256)+1)
 11103                           
 11104                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 11105  009D  1232               	bcf	_Load^(0+256),4
 11106                           
 11107                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 11108  009E  3001               	movlw	1
 11109  009F  0020               	movlb	0	; select bank0
 11110  00A0  00A8               	movwf	Load_Main@i
 11111  00A1  3000               	movlw	0
 11112  00A2  00A9               	movwf	Load_Main@i+1
 11113  00A3  0829               	movf	Load_Main@i+1,w
 11114  00A4  3A80               	xorlw	128
 11115  00A5  00A0               	movwf	??_Load_Main
 11116  00A6  3080               	movlw	128
 11117  00A7  0220               	subwf	??_Load_Main,w
 11118  00A8  1D03               	skipz
 11119  00A9  28AC               	goto	u12715
 11120  00AA  3004               	movlw	4
 11121  00AB  0228               	subwf	Load_Main@i,w
 11122  00AC                     u12715:	
 11123  00AC  1803               	btfsc	3,0
 11124  00AD  28E0               	goto	l11097
 11125  00AE                     l11091:	
 11126                           
 11127                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 11128  00AE  0020               	movlb	0	; select bank0
 11129  00AF  3528               	lslf	Load_Main@i,w
 11130  00B0  3E3D               	addlw	(_Load+11)& (0+255)
 11131  00B1  0086               	movwf	6
 11132  00B2  3001               	movlw	1	; select bank2/3
 11133  00B3  0087               	movwf	7
 11134  00B4  3F40               	moviw [0]fsr1
 11135  00B5  00A0               	movwf	??_Load_Main
 11136  00B6  3F41               	moviw [1]fsr1
 11137  00B7  00A1               	movwf	??_Load_Main+1
 11138  00B8  0820               	movf	??_Load_Main,w
 11139  00B9  0022               	movlb	2	; select bank2
 11140  00BA  07B7               	addwf	(_Load^(0+256)+5),f
 11141  00BB  0020               	movlb	0	; select bank0
 11142  00BC  0821               	movf	??_Load_Main+1,w
 11143  00BD  0022               	movlb	2	; select bank2
 11144  00BE  3DB8               	addwfc	((_Load+1)^(0+256)+5),f
 11145                           
 11146                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11147  00BF  0020               	movlb	0	; select bank0
 11148  00C0  3528               	lslf	Load_Main@i,w
 11149  00C1  3E47               	addlw	(_Load+21)& (0+255)
 11150  00C2  0086               	movwf	6
 11151  00C3  3001               	movlw	1	; select bank2/3
 11152  00C4  0087               	movwf	7
 11153  00C5  3F40               	moviw [0]fsr1
 11154  00C6  00A0               	movwf	??_Load_Main
 11155  00C7  3F41               	moviw [1]fsr1
 11156  00C8  00A1               	movwf	??_Load_Main+1
 11157  00C9  0820               	movf	??_Load_Main,w
 11158  00CA  0022               	movlb	2	; select bank2
 11159  00CB  07B9               	addwf	(_Load^(0+256)+7),f
 11160  00CC  0020               	movlb	0	; select bank0
 11161  00CD  0821               	movf	??_Load_Main+1,w
 11162  00CE  0022               	movlb	2	; select bank2
 11163  00CF  3DBA               	addwfc	((_Load+1)^(0+256)+7),f
 11164  00D0  3001               	movlw	1
 11165  00D1  0020               	movlb	0	; select bank0
 11166  00D2  07A8               	addwf	Load_Main@i,f
 11167  00D3  3000               	movlw	0
 11168  00D4  3DA9               	addwfc	Load_Main@i+1,f
 11169  00D5  0829               	movf	Load_Main@i+1,w
 11170  00D6  3A80               	xorlw	128
 11171  00D7  00A0               	movwf	??_Load_Main
 11172  00D8  3080               	movlw	128
 11173  00D9  0220               	subwf	??_Load_Main,w
 11174  00DA  1D03               	skipz
 11175  00DB  28DE               	goto	u12725
 11176  00DC  3004               	movlw	4
 11177  00DD  0228               	subwf	Load_Main@i,w
 11178  00DE                     u12725:	
 11179  00DE  1C03               	skipc
 11180  00DF  28AE               	goto	l11091
 11181  00E0                     l11097:	
 11182                           
 11183                           ;OverLoad_B1.c: 104: }
 11184                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11185  00E0  3003               	movlw	3
 11186  00E1  00F2               	movwf	___lwdiv@divisor
 11187  00E2  3000               	movlw	0
 11188  00E3  00F3               	movwf	___lwdiv@divisor+1
 11189  00E4  0022               	movlb	2	; select bank2
 11190  00E5  0838               	movf	((_Load+1)^(0+256)+5),w
 11191  00E6  01F5               	clrf	___lwdiv@dividend+1
 11192  00E7  07F5               	addwf	___lwdiv@dividend+1,f
 11193  00E8  0837               	movf	(_Load^(0+256)+5),w
 11194  00E9  01F4               	clrf	___lwdiv@dividend
 11195  00EA  07F4               	addwf	___lwdiv@dividend,f
 11196  00EB  319F  275D  3180   	fcall	___lwdiv
 11197  00EE  0873               	movf	?___lwdiv+1,w
 11198  00EF  0022               	movlb	2	; select bank2
 11199  00F0  01B8               	clrf	((_Load+1)^(0+256)+5)
 11200  00F1  07B8               	addwf	((_Load+1)^(0+256)+5),f
 11201  00F2  0872               	movf	?___lwdiv,w
 11202  00F3  01B7               	clrf	(_Load^(0+256)+5)
 11203  00F4  07B7               	addwf	(_Load^(0+256)+5),f
 11204                           
 11205                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11206  00F5  3003               	movlw	3
 11207  00F6  00F2               	movwf	___lwdiv@divisor
 11208  00F7  3000               	movlw	0
 11209  00F8  00F3               	movwf	___lwdiv@divisor+1
 11210  00F9  083A               	movf	((_Load+1)^(0+256)+7),w
 11211  00FA  01F5               	clrf	___lwdiv@dividend+1
 11212  00FB  07F5               	addwf	___lwdiv@dividend+1,f
 11213  00FC  0839               	movf	(_Load^(0+256)+7),w
 11214  00FD  01F4               	clrf	___lwdiv@dividend
 11215  00FE  07F4               	addwf	___lwdiv@dividend,f
 11216  00FF  319F  275D  3180   	fcall	___lwdiv
 11217  0102  0873               	movf	?___lwdiv+1,w
 11218  0103  0022               	movlb	2	; select bank2
 11219  0104  01BA               	clrf	((_Load+1)^(0+256)+7)
 11220  0105  07BA               	addwf	((_Load+1)^(0+256)+7),f
 11221  0106  0872               	movf	?___lwdiv,w
 11222  0107  01B9               	clrf	(_Load^(0+256)+7)
 11223  0108  07B9               	addwf	(_Load^(0+256)+7),f
 11224                           
 11225                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11226  0109  319B  23A1  3180   	fcall	_setLoad_AH_AL_Restore
 11227                           
 11228                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11229  010C  0022               	movlb	2	; select bank2
 11230  010D  083A               	movf	((_Load+1)^(0+256)+7),w
 11231  010E  0238               	subwf	((_Load+1)^(0+256)+5),w
 11232  010F  1D03               	skipz
 11233  0110  2913               	goto	u12735
 11234  0111  0839               	movf	(_Load^(0+256)+7),w
 11235  0112  0237               	subwf	(_Load^(0+256)+5),w
 11236  0113                     u12735:	
 11237  0113  1C03               	skipc
 11238  0114  0008               	return
 11239                           
 11240                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11241  0115  3005               	movlw	5
 11242  0116  3E32               	addlw	_Load& (0+255)
 11243  0117  0086               	movwf	6
 11244  0118  3001               	movlw	1	; select bank2/3
 11245  0119  0087               	movwf	7
 11246  011A  0939               	comf	(_Load^(0+256)+7),w
 11247  011B  0020               	movlb	0	; select bank0
 11248  011C  00A0               	movwf	??_Load_Main
 11249  011D  0022               	movlb	2	; select bank2
 11250  011E  093A               	comf	((_Load+1)^(0+256)+7),w
 11251  011F  0020               	movlb	0	; select bank0
 11252  0120  00A1               	movwf	??_Load_Main+1
 11253  0121  0AA0               	incf	??_Load_Main,f
 11254  0122  1903               	skipnz
 11255  0123  0AA1               	incf	??_Load_Main+1,f
 11256  0124  3F40               	moviw [0]fsr1
 11257  0125  0720               	addwf	??_Load_Main,w
 11258  0126  0022               	movlb	2	; select bank2
 11259  0127  00D1               	movwf	(_Load^(0+256)+31)
 11260  0128  3F41               	moviw [1]fsr1
 11261  0129  0020               	movlb	0	; select bank0
 11262  012A  3D21               	addwfc	??_Load_Main+1,w
 11263  012B  0022               	movlb	2	; select bank2
 11264  012C  00D2               	movwf	(_Load^(0+256)+32)
 11265                           
 11266                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11267  012D  01B7               	clrf	(_Load^(0+256)+5)
 11268  012E  01B8               	clrf	((_Load+1)^(0+256)+5)
 11269                           
 11270                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11271  012F  01B9               	clrf	(_Load^(0+256)+7)
 11272  0130  01BA               	clrf	((_Load+1)^(0+256)+7)
 11273                           
 11274                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11275  0131  1DB2               	btfss	_Load^(0+256),3
 11276  0132  2989               	goto	l11137
 11277                           
 11278                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11279  0133  3002               	movlw	2
 11280  0134  0257               	subwf	(_Load^(0+256)+37),w
 11281  0135  1803               	skipnc
 11282  0136  2989               	goto	l11137
 11283                           
 11284                           ;OverLoad_B1.c: 117: Load.Count++;
 11285  0137  3001               	movlw	1
 11286  0138  0020               	movlb	0	; select bank0
 11287  0139  00A0               	movwf	??_Load_Main
 11288  013A  0820               	movf	??_Load_Main,w
 11289  013B  0022               	movlb	2	; select bank2
 11290  013C  07D7               	addwf	(_Load^(0+256)+37),f
 11291                           
 11292                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11293  013D  3198  2003  3180   	fcall	_getDimmer_Load_Status
 11294  0140  0020               	movlb	0	; select bank0
 11295  0141  00A0               	movwf	??_Load_Main
 11296  0142  0820               	movf	??_Load_Main,w
 11297  0143  00A6               	movwf	Load_Main@Load_RunStatus
 11298                           
 11299                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11300  0144  3199  21C9  3180   	fcall	_getMain_Lights_Count
 11301  0147  0020               	movlb	0	; select bank0
 11302  0148  00A0               	movwf	??_Load_Main
 11303  0149  0820               	movf	??_Load_Main,w
 11304  014A  00A7               	movwf	Load_Main@LightsCount
 11305                           
 11306                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11307  014B  0022               	movlb	2	; select bank2
 11308  014C  0857               	movf	(_Load^(0+256)+37),w
 11309  014D  3A01               	xorlw	1
 11310  014E  1D03               	skipz
 11311  014F  2954               	goto	l11123
 11312                           
 11313                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*56);
 11314  0150  3060               	movlw	96
 11315  0151  00D5               	movwf	(_Load^(0+256)+35)
 11316  0152  3004               	movlw	4
 11317  0153  2961               	goto	L8
 11318  0154                     l11123:	
 11319                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11320                           
 11321  0154  0857               	movf	(_Load^(0+256)+37),w
 11322  0155  3A02               	xorlw	2
 11323  0156  1D03               	skipz
 11324  0157  2989               	goto	l11137
 11325                           
 11326                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11327  0158  0020               	movlb	0	; select bank0
 11328  0159  0827               	movf	Load_Main@LightsCount,w
 11329  015A  3A01               	xorlw	1
 11330  015B  1D03               	skipz
 11331  015C  2963               	goto	l11129
 11332                           
 11333                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.2*56);
 11334  015D  3043               	movlw	67
 11335  015E  0022               	movlb	2	; select bank2
 11336  015F  00D5               	movwf	(_Load^(0+256)+35)
 11337  0160  3000               	movlw	0
 11338  0161                     L8:	
 11339  0161  00D6               	movwf	(_Load^(0+256)+36)
 11340                           
 11341                           ;OverLoad_B1.c: 132: } else {
 11342  0162  2989               	goto	l11137
 11343  0163                     l11129:	
 11344                           
 11345                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11346  0163  0020               	movlb	0	; select bank0
 11347  0164  08A6               	movf	Load_Main@Load_RunStatus,f
 11348  0165  1D03               	skipz
 11349  0166  297D               	goto	l11133
 11350                           
 11351                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.2*56) * LightsCount;
 11352  0167  0827               	movf	Load_Main@LightsCount,w
 11353  0168  00A0               	movwf	??_Load_Main
 11354  0169  01A1               	clrf	??_Load_Main+1
 11355  016A  0820               	movf	??_Load_Main,w
 11356  016B  00F2               	movwf	___wmul@multiplier
 11357  016C  0821               	movf	??_Load_Main+1,w
 11358  016D  00F3               	movwf	___wmul@multiplier+1
 11359  016E  3043               	movlw	67
 11360  016F  00F4               	movwf	___wmul@multiplicand
 11361  0170  3000               	movlw	0
 11362  0171  00F5               	movwf	___wmul@multiplicand+1
 11363  0172  319C  242B  3180   	fcall	___wmul
 11364  0175  0873               	movf	?___wmul+1,w
 11365  0176  0022               	movlb	2	; select bank2
 11366  0177  01D6               	clrf	((_Load+1)^(0+256)+35)
 11367  0178  07D6               	addwf	((_Load+1)^(0+256)+35),f
 11368  0179  0872               	movf	?___wmul,w
 11369  017A  01D5               	clrf	(_Load^(0+256)+35)
 11370  017B  07D5               	addwf	(_Load^(0+256)+35),f
 11371                           
 11372                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11373  017C  2989               	goto	l11137
 11374  017D                     l11133:	
 11375  017D  0020               	movlb	0	; select bank0
 11376  017E  0826               	movf	Load_Main@Load_RunStatus,w
 11377  017F  3A01               	xorlw	1
 11378  0180  1D03               	skipz
 11379  0181  2989               	goto	l11137
 11380                           
 11381                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.2*56) + Load.TotalLoad;
 11382  0182  0022               	movlb	2	; select bank2
 11383  0183  083B               	movf	(_Load^(0+256)+9),w
 11384  0184  3E43               	addlw	67
 11385  0185  00D5               	movwf	(_Load^(0+256)+35)
 11386  0186  3000               	movlw	0
 11387  0187  3D3C               	addwfc	((_Load+1)^(0+256)+9),w
 11388  0188  00D6               	movwf	((_Load+1)^(0+256)+35)
 11389  0189                     l11137:	
 11390                           
 11391                           ;OverLoad_B1.c: 137: }
 11392                           ;OverLoad_B1.c: 138: }
 11393                           ;OverLoad_B1.c: 139: }
 11394                           ;OverLoad_B1.c: 140: }
 11395                           ;OverLoad_B1.c: 141: }
 11396                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11397  0189  0022               	movlb	2	; select bank2
 11398  018A  0856               	movf	((_Load+1)^(0+256)+35),w
 11399  018B  0252               	subwf	((_Load+1)^(0+256)+31),w
 11400  018C  1D03               	skipz
 11401  018D  2990               	goto	u12815
 11402  018E  0855               	movf	(_Load^(0+256)+35),w
 11403  018F  0251               	subwf	(_Load^(0+256)+31),w
 11404  0190                     u12815:	
 11405  0190  1C03               	skipc
 11406  0191  29AF               	goto	l11153
 11407                           
 11408                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11409  0192  0020               	movlb	0	; select bank0
 11410  0193  0827               	movf	Load_Main@LightsCount,w
 11411  0194  3A01               	xorlw	1
 11412  0195  1903               	skipnz
 11413  0196  2999               	goto	l11143
 11414  0197  3003               	movlw	3
 11415  0198  299A               	goto	L9
 11416  0199                     l11143:	
 11417  0199  3002               	movlw	2
 11418  019A                     L9:	
 11419  019A  00A3               	movwf	_Load_Main$4131
 11420  019B  3000               	movlw	0
 11421  019C  00A4               	movwf	_Load_Main$4131+1
 11422  019D  0823               	movf	_Load_Main$4131,w
 11423  019E  00A0               	movwf	??_Load_Main
 11424  019F  0820               	movf	??_Load_Main,w
 11425  01A0  00A5               	movwf	Load_Main@ErrorCountValue
 11426                           
 11427                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11428  01A1  3001               	movlw	1
 11429  01A2  00A0               	movwf	??_Load_Main
 11430  01A3  0820               	movf	??_Load_Main,w
 11431  01A4  0022               	movlb	2	; select bank2
 11432  01A5  07D8               	addwf	(_Load^(0+256)+38),f
 11433                           
 11434                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11435  01A6  0858               	movf	(_Load^(0+256)+38),w
 11436  01A7  0020               	movlb	0	; select bank0
 11437  01A8  0225               	subwf	Load_Main@ErrorCountValue,w
 11438  01A9  1803               	skipnc
 11439  01AA  0008               	return
 11440                           
 11441                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11442  01AB  0022               	movlb	2	; select bank2
 11443  01AC  01D8               	clrf	(_Load^(0+256)+38)
 11444                           
 11445                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11446  01AD  16B2               	bsf	_Load^(0+256),5
 11447                           
 11448                           ;OverLoad_B1.c: 170: }
 11449                           ;OverLoad_B1.c: 171: } else {
 11450  01AE  0008               	return
 11451  01AF                     l11153:	
 11452                           
 11453                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11454  01AF  01D8               	clrf	(_Load^(0+256)+38)
 11455                           
 11456                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11457  01B0  1DB2               	btfss	_Load^(0+256),3
 11458  01B1  0008               	return
 11459                           
 11460                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11461  01B2  3001               	movlw	1
 11462  01B3  0020               	movlb	0	; select bank0
 11463  01B4  00A0               	movwf	??_Load_Main
 11464  01B5  0820               	movf	??_Load_Main,w
 11465  01B6  0022               	movlb	2	; select bank2
 11466  01B7  07D9               	addwf	(_Load^(0+256)+39),f
 11467                           
 11468                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11469  01B8  3003               	movlw	3
 11470  01B9  0259               	subwf	(_Load^(0+256)+39),w
 11471  01BA  1C03               	skipc
 11472  01BB  0008               	return
 11473                           
 11474                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11475  01BC  01D9               	clrf	(_Load^(0+256)+39)
 11476                           
 11477                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11478  01BD  17B2               	bsf	_Load^(0+256),7
 11479                           
 11480                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11481  01BE  11B2               	bcf	_Load^(0+256),3
 11482                           
 11483                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11484  01BF  01D7               	clrf	(_Load^(0+256)+37)
 11485                           
 11486                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11487  01C0  0852               	movf	((_Load+1)^(0+256)+31),w
 11488  01C1  01BC               	clrf	((_Load+1)^(0+256)+9)
 11489  01C2  07BC               	addwf	((_Load+1)^(0+256)+9),f
 11490  01C3  0851               	movf	(_Load^(0+256)+31),w
 11491  01C4  01BB               	clrf	(_Load^(0+256)+9)
 11492  01C5  07BB               	addwf	(_Load^(0+256)+9),f
 11493                           
 11494                           ;OverLoad_B1.c: 184: }
 11495                           ;OverLoad_B1.c: 185: }
 11496                           ;OverLoad_B1.c: 208: }
 11497                           ;OverLoad_B1.c: 209: }
 11498                           ;OverLoad_B1.c: 210: }
 11499                           ;OverLoad_B1.c: 211: } else {
 11500  01C6  0008               	return
 11501  01C7                     l1676:	
 11502                           
 11503                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11504  01C7  1632               	bsf	_Load^(0+256),4
 11505                           
 11506                           ;OverLoad_B1.c: 213: }
 11507                           ;OverLoad_B1.c: 214: } else {
 11508  01C8  0008               	return
 11509  01C9                     l1675:	
 11510                           
 11511                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11512  01C9  1D32               	btfss	_Load^(0+256),2
 11513  01CA  29DC               	goto	l11189
 11514                           
 11515                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11516  01CB  1132               	bcf	_Load^(0+256),2
 11517                           
 11518                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11519  01CC  1232               	bcf	_Load^(0+256),4
 11520                           
 11521                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11522  01CD  01B3               	clrf	(_Load^(0+256)+1)
 11523  01CE  01B4               	clrf	((_Load+1)^(0+256)+1)
 11524                           
 11525                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11526  01CF  319B  23A1  3180   	fcall	_setLoad_AH_AL_Restore
 11527                           
 11528                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11529  01D2  0022               	movlb	2	; select bank2
 11530  01D3  01D8               	clrf	(_Load^(0+256)+38)
 11531                           
 11532                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11533  01D4  01D9               	clrf	(_Load^(0+256)+39)
 11534                           
 11535                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11536  01D5  01B7               	clrf	(_Load^(0+256)+5)
 11537  01D6  01B8               	clrf	((_Load+1)^(0+256)+5)
 11538                           
 11539                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11540  01D7  01B9               	clrf	(_Load^(0+256)+7)
 11541  01D8  01BA               	clrf	((_Load+1)^(0+256)+7)
 11542                           
 11543                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11544  01D9  11B2               	bcf	_Load^(0+256),3
 11545                           
 11546                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11547  01DA  01D7               	clrf	(_Load^(0+256)+37)
 11548                           
 11549                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11550  01DB  13B2               	bcf	_Load^(0+256),7
 11551  01DC                     l11189:	
 11552                           
 11553                           ;OverLoad_B1.c: 257: }
 11554                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11555  01DC  1EB2               	btfss	_Load^(0+256),5
 11556  01DD  0008               	return
 11557                           
 11558                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11559  01DE  3001               	movlw	1
 11560  01DF  07B5               	addwf	(_Load^(0+256)+3),f
 11561  01E0  3000               	movlw	0
 11562  01E1  3DB6               	addwfc	((_Load+1)^(0+256)+3),f
 11563                           
 11564                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11565  01E2  3001               	movlw	1
 11566  01E3  0236               	subwf	((_Load+1)^(0+256)+3),w
 11567  01E4  30F4               	movlw	244
 11568  01E5  1903               	skipnz
 11569  01E6  0235               	subwf	(_Load^(0+256)+3),w
 11570  01E7  1C03               	skipc
 11571  01E8  0008               	return
 11572                           
 11573                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11574  01E9  01B5               	clrf	(_Load^(0+256)+3)
 11575  01EA  01B6               	clrf	((_Load+1)^(0+256)+3)
 11576                           
 11577                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11578  01EB  12B2               	bcf	_Load^(0+256),5
 11579                           
 11580                           ;OverLoad_B1.c: 263: }
 11581                           ;OverLoad_B1.c: 264: }
 11582                           ;OverLoad_B1.c: 265: }
 11583                           ;OverLoad_B1.c: 266: } else {
 11584  01EC  0008               	return
 11585  01ED                     l1665:	
 11586                           
 11587                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11588  01ED  0021               	movlb	1	; select bank1
 11589  01EE  1C4F               	btfss	_myMain^(0+128),0
 11590  01EF  0008               	return
 11591                           
 11592                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11593  01F0  0022               	movlb	2	; select bank2
 11594  01F1  1432               	bsf	_Load^(0+256),0
 11595  01F2  0008               	return
 11596  01F3                     __end_of_Load_Main:	
 11597                           
 11598                           	psect	text66
 11599  19C9                     __ptext66:	
 11600 ;; *************** function _getMain_Lights_Count *****************
 11601 ;; Defined at:
 11602 ;;		line 464 in file "../src/main_B1.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;		None
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;  count           1    5[COMMON] unsigned char 
 11607 ;;  status2         1    4[COMMON] unsigned char 
 11608 ;;  status1         1    3[COMMON] unsigned char 
 11609 ;; Return value:  Size  Location     Type
 11610 ;;                  1    wreg      unsigned char 
 11611 ;; Registers used:
 11612 ;;		wreg, status,2, status,0
 11613 ;; Tracked objects:
 11614 ;;		On entry : 0/0
 11615 ;;		On exit  : 0/0
 11616 ;;		Unchanged: 0/0
 11617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;Total ram usage:        4 bytes
 11623 ;; Hardware stack levels used:    1
 11624 ;; Hardware stack levels required when called:    3
 11625 ;; This function calls:
 11626 ;;		Nothing
 11627 ;; This function is called by:
 11628 ;;		_Load_Main
 11629 ;; This function uses a non-reentrant model
 11630 ;;
 11631                           
 11632                           
 11633                           ;psect for function _getMain_Lights_Count
 11634  19C9                     _getMain_Lights_Count:	
 11635                           
 11636                           ;main_B1.c: 465: char count = 0;
 11637                           
 11638                           ;incstack = 0
 11639                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11640  19C9  01F5               	clrf	getMain_Lights_Count@count
 11641                           
 11642                           ;main_B1.c: 469: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11643  19CA  3000               	movlw	0
 11644  19CB  0021               	movlb	1	; select bank1
 11645  19CC  19A0               	btfsc	_DimmerIntr1^(0+128),3
 11646  19CD  3001               	movlw	1
 11647  19CE  00F3               	movwf	getMain_Lights_Count@status1
 11648                           
 11649                           ;main_B1.c: 472: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11650  19CF  3000               	movlw	0
 11651  19D0  19B0               	btfsc	_DimmerIntr2^(0+128),3
 11652  19D1  3001               	movlw	1
 11653  19D2  00F4               	movwf	getMain_Lights_Count@status2
 11654                           
 11655                           ;main_B1.c: 495: count = (status1 + status2);
 11656  19D3  0873               	movf	getMain_Lights_Count@status1,w
 11657  19D4  0774               	addwf	getMain_Lights_Count@status2,w
 11658  19D5  00F2               	movwf	??_getMain_Lights_Count
 11659  19D6  0872               	movf	??_getMain_Lights_Count,w
 11660  19D7  00F5               	movwf	getMain_Lights_Count@count
 11661                           
 11662                           ;main_B1.c: 500: return count;
 11663  19D8  0875               	movf	getMain_Lights_Count@count,w
 11664  19D9  0008               	return
 11665  19DA                     __end_of_getMain_Lights_Count:	
 11666                           
 11667                           	psect	text67
 11668  1803                     __ptext67:	
 11669 ;; *************** function _getDimmer_Load_Status *****************
 11670 ;; Defined at:
 11671 ;;		line 1344 in file "../src/Dimmer_B1.c"
 11672 ;; Parameters:    Size  Location     Type
 11673 ;;		None
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;  status          1    2[COMMON] unsigned char 
 11676 ;; Return value:  Size  Location     Type
 11677 ;;                  1    wreg      unsigned char 
 11678 ;; Registers used:
 11679 ;;		wreg, status,2
 11680 ;; Tracked objects:
 11681 ;;		On entry : 0/0
 11682 ;;		On exit  : 0/0
 11683 ;;		Unchanged: 0/0
 11684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;Total ram usage:        1 bytes
 11690 ;; Hardware stack levels used:    1
 11691 ;; Hardware stack levels required when called:    3
 11692 ;; This function calls:
 11693 ;;		Nothing
 11694 ;; This function is called by:
 11695 ;;		_Load_Main
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           
 11700                           ;psect for function _getDimmer_Load_Status
 11701  1803                     _getDimmer_Load_Status:	
 11702                           
 11703                           ;Dimmer_B1.c: 1345: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11704                           
 11705                           ;incstack = 0
 11706                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11707  1803  3000               	movlw	0
 11708  1804  0022               	movlb	2	; select bank2
 11709  1805  1920               	btfsc	_Dimmer^(0+256),2
 11710  1806  3001               	movlw	1
 11711  1807  00F2               	movwf	getDimmer_Load_Status@status
 11712                           
 11713                           ;Dimmer_B1.c: 1346: return status;
 11714  1808  0872               	movf	getDimmer_Load_Status@status,w
 11715  1809  0008               	return
 11716  180A                     __end_of_getDimmer_Load_Status:	
 11717                           
 11718                           	psect	text68
 11719  27F9                     __ptext68:	
 11720 ;; *************** function _getDimmer_LoadGO *****************
 11721 ;; Defined at:
 11722 ;;		line 1338 in file "../src/Dimmer_B1.c"
 11723 ;; Parameters:    Size  Location     Type
 11724 ;;		None
 11725 ;; Auto vars:     Size  Location     Type
 11726 ;;  loadgo          1    2[COMMON] unsigned char 
 11727 ;; Return value:  Size  Location     Type
 11728 ;;                  1    wreg      unsigned char 
 11729 ;; Registers used:
 11730 ;;		wreg, status,2
 11731 ;; Tracked objects:
 11732 ;;		On entry : 0/0
 11733 ;;		On exit  : 0/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;Total ram usage:        1 bytes
 11741 ;; Hardware stack levels used:    1
 11742 ;; Hardware stack levels required when called:    3
 11743 ;; This function calls:
 11744 ;;		Nothing
 11745 ;; This function is called by:
 11746 ;;		_Load_Main
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           
 11751                           ;psect for function _getDimmer_LoadGO
 11752  27F9                     _getDimmer_LoadGO:	
 11753                           
 11754                           ;Dimmer_B1.c: 1339: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11755                           
 11756                           ;incstack = 0
 11757                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11758  27F9  3000               	movlw	0
 11759  27FA  0022               	movlb	2	; select bank2
 11760  27FB  18A0               	btfsc	_Dimmer^(0+256),1
 11761  27FC  3001               	movlw	1
 11762  27FD  00F2               	movwf	getDimmer_LoadGO@loadgo
 11763                           
 11764                           ;Dimmer_B1.c: 1340: return loadgo;
 11765  27FE  0872               	movf	getDimmer_LoadGO@loadgo,w
 11766  27FF  0008               	return
 11767  2800                     __end_of_getDimmer_LoadGO:	
 11768                           
 11769                           	psect	text69
 11770  1BBC                     __ptext69:	
 11771 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11772 ;; Defined at:
 11773 ;;		line 348 in file "../src/Dimmer_B1.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;  status          1    5[COMMON] unsigned char 
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      unsigned char 
 11780 ;; Registers used:
 11781 ;;		wreg, status,2, status,0
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;Total ram usage:        4 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:    3
 11794 ;; This function calls:
 11795 ;;		Nothing
 11796 ;; This function is called by:
 11797 ;;		_Load_Main
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800                           
 11801                           
 11802                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11803  1BBC                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11804                           
 11805                           ;Dimmer_B1.c: 349: char status = 0;
 11806                           
 11807                           ;incstack = 0
 11808                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11809  1BBC  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11810                           
 11811                           ;Dimmer_B1.c: 356: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11812  1BBD  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2605
 11813  1BBE  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2605,f
 11814  1BBF  0021               	movlb	1	; select bank1
 11815  1BC0  1E20               	btfss	_DimmerIntr1^(0+128),4
 11816  1BC1  1A30               	btfsc	_DimmerIntr2^(0+128),4
 11817  1BC2  2BC4               	goto	l8285
 11818  1BC3  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2605
 11819  1BC4                     l8285:	
 11820  1BC4  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2605,w
 11821  1BC5  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11822  1BC6  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11823  1BC7  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11824                           
 11825                           ;Dimmer_B1.c: 364: if (status == 0) {
 11826  1BC8  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11827  1BC9  1D03               	skipz
 11828  1BCA  2BD5               	goto	l8297
 11829                           
 11830                           ;Dimmer_B1.c: 370: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11831  1BCB  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2606
 11832  1BCC  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2606,f
 11833  1BCD  1F20               	btfss	_DimmerIntr1^(0+128),6
 11834  1BCE  1B30               	btfsc	_DimmerIntr2^(0+128),6
 11835  1BCF  2BD1               	goto	l8295
 11836  1BD0  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2606
 11837  1BD1                     l8295:	
 11838  1BD1  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2606,w
 11839  1BD2  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11840  1BD3  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11841  1BD4  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11842  1BD5                     l8297:	
 11843                           
 11844                           ;Dimmer_B1.c: 376: }
 11845                           ;Dimmer_B1.c: 378: return status;
 11846  1BD5  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11847  1BD6  0008               	return
 11848  1BD7                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11849                           
 11850                           	psect	text70
 11851  1C2B                     __ptext70:	
 11852 ;; *************** function ___wmul *****************
 11853 ;; Defined at:
 11854 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;  multiplier      2    2[COMMON] unsigned int 
 11857 ;;  multiplicand    2    4[COMMON] unsigned int 
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;  product         2    6[COMMON] unsigned int 
 11860 ;; Return value:  Size  Location     Type
 11861 ;;                  2    2[COMMON] unsigned int 
 11862 ;; Registers used:
 11863 ;;		wreg, status,2, status,0
 11864 ;; Tracked objects:
 11865 ;;		On entry : 0/0
 11866 ;;		On exit  : 0/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11869 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;Total ram usage:        6 bytes
 11874 ;; Hardware stack levels used:    1
 11875 ;; Hardware stack levels required when called:    3
 11876 ;; This function calls:
 11877 ;;		Nothing
 11878 ;; This function is called by:
 11879 ;;		_Load_Main
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function ___wmul
 11885  1C2B                     ___wmul:	
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11889  1C2B  01F6               	clrf	___wmul@product
 11890  1C2C  01F7               	clrf	___wmul@product+1
 11891  1C2D                     l8999:	
 11892  1C2D  1C72               	btfss	___wmul@multiplier,0
 11893  1C2E  2C33               	goto	l3140
 11894  1C2F  0874               	movf	___wmul@multiplicand,w
 11895  1C30  07F6               	addwf	___wmul@product,f
 11896  1C31  0875               	movf	___wmul@multiplicand+1,w
 11897  1C32  3DF7               	addwfc	___wmul@product+1,f
 11898  1C33                     l3140:	
 11899  1C33  3001               	movlw	1
 11900  1C34                     u9405:	
 11901  1C34  35F4               	lslf	___wmul@multiplicand,f
 11902  1C35  0DF5               	rlf	___wmul@multiplicand+1,f
 11903  1C36  0B89               	decfsz	9,f
 11904  1C37  2C34               	goto	u9405
 11905  1C38  3001               	movlw	1
 11906  1C39                     u9415:	
 11907  1C39  36F3               	lsrf	___wmul@multiplier+1,f
 11908  1C3A  0CF2               	rrf	___wmul@multiplier,f
 11909  1C3B  0B89               	decfsz	9,f
 11910  1C3C  2C39               	goto	u9415
 11911  1C3D  0873               	movf	___wmul@multiplier+1,w
 11912  1C3E  0472               	iorwf	___wmul@multiplier,w
 11913  1C3F  1D03               	skipz
 11914  1C40  2C2D               	goto	l8999
 11915  1C41  0877               	movf	___wmul@product+1,w
 11916  1C42  01F3               	clrf	?___wmul+1
 11917  1C43  07F3               	addwf	?___wmul+1,f
 11918  1C44  0876               	movf	___wmul@product,w
 11919  1C45  01F2               	clrf	?___wmul
 11920  1C46  07F2               	addwf	?___wmul,f
 11921  1C47  0008               	return
 11922  1C48                     __end_of___wmul:	
 11923                           
 11924                           	psect	text71
 11925  1F5D                     __ptext71:	
 11926 ;; *************** function ___lwdiv *****************
 11927 ;; Defined at:
 11928 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;  divisor         2    2[COMMON] unsigned int 
 11931 ;;  dividend        2    4[COMMON] unsigned int 
 11932 ;; Auto vars:     Size  Location     Type
 11933 ;;  quotient        2    7[COMMON] unsigned int 
 11934 ;;  counter         1    9[COMMON] unsigned char 
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  2    2[COMMON] unsigned int 
 11937 ;; Registers used:
 11938 ;;		wreg, status,2, status,0
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;Total ram usage:        8 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    3
 11951 ;; This function calls:
 11952 ;;		Nothing
 11953 ;; This function is called by:
 11954 ;;		_Load_Main
 11955 ;;		_setTemp_Main
 11956 ;;		_setRF_Main
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           
 11961                           ;psect for function ___lwdiv
 11962  1F5D                     ___lwdiv:	
 11963                           
 11964                           ;incstack = 0
 11965                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11966  1F5D  01F7               	clrf	___lwdiv@quotient
 11967  1F5E  01F8               	clrf	___lwdiv@quotient+1
 11968  1F5F  0873               	movf	___lwdiv@divisor+1,w
 11969  1F60  0472               	iorwf	___lwdiv@divisor,w
 11970  1F61  1903               	skipnz
 11971  1F62  2F8C               	goto	l8207
 11972  1F63  01F9               	clrf	___lwdiv@counter
 11973  1F64  0AF9               	incf	___lwdiv@counter,f
 11974  1F65                     l8195:	
 11975  1F65  1BF3               	btfsc	___lwdiv@divisor+1,7
 11976  1F66  2F71               	goto	l8197
 11977  1F67  3001               	movlw	1
 11978  1F68                     u7895:	
 11979  1F68  35F2               	lslf	___lwdiv@divisor,f
 11980  1F69  0DF3               	rlf	___lwdiv@divisor+1,f
 11981  1F6A  0B89               	decfsz	9,f
 11982  1F6B  2F68               	goto	u7895
 11983  1F6C  3001               	movlw	1
 11984  1F6D  00F6               	movwf	??___lwdiv
 11985  1F6E  0876               	movf	??___lwdiv,w
 11986  1F6F  07F9               	addwf	___lwdiv@counter,f
 11987  1F70  2F65               	goto	l8195
 11988  1F71                     l8197:	
 11989  1F71  3001               	movlw	1
 11990  1F72                     u7915:	
 11991  1F72  35F7               	lslf	___lwdiv@quotient,f
 11992  1F73  0DF8               	rlf	___lwdiv@quotient+1,f
 11993  1F74  0B89               	decfsz	9,f
 11994  1F75  2F72               	goto	u7915
 11995  1F76  0873               	movf	___lwdiv@divisor+1,w
 11996  1F77  0275               	subwf	___lwdiv@dividend+1,w
 11997  1F78  1D03               	skipz
 11998  1F79  2F7C               	goto	u7925
 11999  1F7A  0872               	movf	___lwdiv@divisor,w
 12000  1F7B  0274               	subwf	___lwdiv@dividend,w
 12001  1F7C                     u7925:	
 12002  1F7C  1C03               	skipc
 12003  1F7D  2F83               	goto	l8203
 12004  1F7E  0872               	movf	___lwdiv@divisor,w
 12005  1F7F  02F4               	subwf	___lwdiv@dividend,f
 12006  1F80  0873               	movf	___lwdiv@divisor+1,w
 12007  1F81  3BF5               	subwfb	___lwdiv@dividend+1,f
 12008  1F82  1477               	bsf	___lwdiv@quotient,0
 12009  1F83                     l8203:	
 12010  1F83  3001               	movlw	1
 12011  1F84                     u7935:	
 12012  1F84  36F3               	lsrf	___lwdiv@divisor+1,f
 12013  1F85  0CF2               	rrf	___lwdiv@divisor,f
 12014  1F86  0B89               	decfsz	9,f
 12015  1F87  2F84               	goto	u7935
 12016  1F88  3001               	movlw	1
 12017  1F89  02F9               	subwf	___lwdiv@counter,f
 12018  1F8A  1D03               	btfss	3,2
 12019  1F8B  2F71               	goto	l8197
 12020  1F8C                     l8207:	
 12021  1F8C  0878               	movf	___lwdiv@quotient+1,w
 12022  1F8D  01F3               	clrf	?___lwdiv+1
 12023  1F8E  07F3               	addwf	?___lwdiv+1,f
 12024  1F8F  0877               	movf	___lwdiv@quotient,w
 12025  1F90  01F2               	clrf	?___lwdiv
 12026  1F91  07F2               	addwf	?___lwdiv,f
 12027  1F92  0008               	return
 12028  1F93                     __end_of___lwdiv:	
 12029                           
 12030                           	psect	text72
 12031  27B5                     __ptext72:	
 12032 ;; *************** function _Load_Initialization *****************
 12033 ;; Defined at:
 12034 ;;		line 9 in file "../src/OverLoad_B1.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;		None
 12037 ;; Auto vars:     Size  Location     Type
 12038 ;;		None
 12039 ;; Return value:  Size  Location     Type
 12040 ;;		None               void
 12041 ;; Registers used:
 12042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12043 ;; Tracked objects:
 12044 ;;		On entry : 0/0
 12045 ;;		On exit  : 0/0
 12046 ;;		Unchanged: 0/0
 12047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;Total ram usage:        0 bytes
 12053 ;; Hardware stack levels used:    1
 12054 ;; Hardware stack levels required when called:    4
 12055 ;; This function calls:
 12056 ;;		_setLoad_AH_AL_Restore
 12057 ;; This function is called by:
 12058 ;;		_main
 12059 ;; This function uses a non-reentrant model
 12060 ;;
 12061                           
 12062                           
 12063                           ;psect for function _Load_Initialization
 12064  27B5                     _Load_Initialization:	
 12065                           
 12066                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12067                           
 12068                           ;incstack = 0
 12069                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12070  27B5  319B  23A1         	fcall	_setLoad_AH_AL_Restore
 12071  27B7  0008               	return
 12072  27B8                     __end_of_Load_Initialization:	
 12073                           
 12074                           	psect	text73
 12075  1BA1                     __ptext73:	
 12076 ;; *************** function _setLoad_AH_AL_Restore *****************
 12077 ;; Defined at:
 12078 ;;		line 294 in file "../src/OverLoad_B1.c"
 12079 ;; Parameters:    Size  Location     Type
 12080 ;;		None
 12081 ;; Auto vars:     Size  Location     Type
 12082 ;;  i               1    3[COMMON] unsigned char 
 12083 ;; Return value:  Size  Location     Type
 12084 ;;		None               void
 12085 ;; Registers used:
 12086 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12087 ;; Tracked objects:
 12088 ;;		On entry : 0/0
 12089 ;;		On exit  : 0/0
 12090 ;;		Unchanged: 0/0
 12091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12094 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12095 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;Total ram usage:        2 bytes
 12097 ;; Hardware stack levels used:    1
 12098 ;; Hardware stack levels required when called:    3
 12099 ;; This function calls:
 12100 ;;		Nothing
 12101 ;; This function is called by:
 12102 ;;		_Load_Initialization
 12103 ;;		_Load_Main
 12104 ;; This function uses a non-reentrant model
 12105 ;;
 12106                           
 12107                           
 12108                           ;psect for function _setLoad_AH_AL_Restore
 12109  1BA1                     _setLoad_AH_AL_Restore:	
 12110                           
 12111                           ;OverLoad_B1.c: 295: char i;
 12112                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 12113                           
 12114                           ;incstack = 0
 12115                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12116  1BA1  01F3               	clrf	setLoad_AH_AL_Restore@i
 12117  1BA2                     L10:	
 12118  1BA2  3005               	movlw	5
 12119  1BA3  0273               	subwf	setLoad_AH_AL_Restore@i,w
 12120  1BA4  1803               	btfsc	3,0
 12121  1BA5  0008               	return
 12122                           
 12123                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 12124  1BA6  3573               	lslf	setLoad_AH_AL_Restore@i,w
 12125  1BA7  3E3D               	addlw	(_Load+11)& (0+255)
 12126  1BA8  0086               	movwf	6
 12127  1BA9  3001               	movlw	1	; select bank2/3
 12128  1BAA  0087               	movwf	7
 12129  1BAB  3000               	movlw	0
 12130  1BAC  3FC0               	movwi [0]fsr1
 12131  1BAD  3FC1               	movwi [1]fsr1
 12132                           
 12133                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 12134  1BAE  3573               	lslf	setLoad_AH_AL_Restore@i,w
 12135  1BAF  3E47               	addlw	(_Load+21)& (0+255)
 12136  1BB0  0086               	movwf	6
 12137  1BB1  3001               	movlw	1	; select bank2/3
 12138  1BB2  0087               	movwf	7
 12139  1BB3  30FF               	movlw	255
 12140  1BB4  3FC0               	movwi [0]fsr1
 12141  1BB5  30FF               	movlw	255
 12142  1BB6  3FC1               	movwi [1]fsr1
 12143  1BB7  3001               	movlw	1
 12144  1BB8  00F2               	movwf	??_setLoad_AH_AL_Restore
 12145  1BB9  0872               	movf	??_setLoad_AH_AL_Restore,w
 12146  1BBA  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 12147  1BBB  2BA2               	goto	L10
 12148  1BBC                     __end_of_setLoad_AH_AL_Restore:	
 12149                           
 12150                           	psect	text74
 12151  18C6                     __ptext74:	
 12152 ;; *************** function _LED_Main *****************
 12153 ;; Defined at:
 12154 ;;		line 47 in file "../src/LED_B1.c"
 12155 ;; Parameters:    Size  Location     Type
 12156 ;;		None
 12157 ;; Auto vars:     Size  Location     Type
 12158 ;;		None
 12159 ;; Return value:  Size  Location     Type
 12160 ;;		None               void
 12161 ;; Registers used:
 12162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12163 ;; Tracked objects:
 12164 ;;		On entry : 0/0
 12165 ;;		On exit  : 0/0
 12166 ;;		Unchanged: 0/0
 12167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;Total ram usage:        0 bytes
 12173 ;; Hardware stack levels used:    1
 12174 ;; Hardware stack levels required when called:    5
 12175 ;; This function calls:
 12176 ;;		_setLED_Main
 12177 ;; This function is called by:
 12178 ;;		_main
 12179 ;; This function uses a non-reentrant model
 12180 ;;
 12181                           
 12182                           
 12183                           ;psect for function _LED_Main
 12184  18C6                     _LED_Main:	
 12185                           
 12186                           ;LED_B1.c: 58: setLED_Main(1);
 12187                           
 12188                           ;incstack = 0
 12189                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12190  18C6  3001               	movlw	1
 12191  18C7  3191  21DD  3198   	fcall	_setLED_Main
 12192                           
 12193                           ;LED_B1.c: 61: setLED_Main(2);
 12194  18CA  3002               	movlw	2
 12195  18CB  3191  21DD  3198   	fcall	_setLED_Main
 12196                           
 12197                           ;LED_B1.c: 67: setLED_Main(99);
 12198  18CE  3063               	movlw	99
 12199  18CF  3191  21DD         	fcall	_setLED_Main
 12200  18D1  0008               	return
 12201  18D2                     __end_of_LED_Main:	
 12202                           
 12203                           	psect	text75
 12204  11DD                     __ptext75:	
 12205 ;; *************** function _setLED_Main *****************
 12206 ;; Defined at:
 12207 ;;		line 229 in file "../src/LED_B1.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;  led             1    wreg     unsigned char 
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;  led             1    6[COMMON] unsigned char 
 12212 ;; Return value:  Size  Location     Type
 12213 ;;		None               void
 12214 ;; Registers used:
 12215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12216 ;; Tracked objects:
 12217 ;;		On entry : 0/0
 12218 ;;		On exit  : 0/0
 12219 ;;		Unchanged: 0/0
 12220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;Total ram usage:        3 bytes
 12226 ;; Hardware stack levels used:    1
 12227 ;; Hardware stack levels required when called:    4
 12228 ;; This function calls:
 12229 ;;		_LedPointSelect
 12230 ;; This function is called by:
 12231 ;;		_LED_Main
 12232 ;; This function uses a non-reentrant model
 12233 ;;
 12234                           
 12235                           
 12236                           ;psect for function _setLED_Main
 12237  11DD                     _setLED_Main:	
 12238                           
 12239                           ;incstack = 0
 12240                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12241                           ;setLED_Main@led stored from wreg
 12242  11DD  00F6               	movwf	setLED_Main@led
 12243                           
 12244                           ;LED_B1.c: 230: LedPointSelect(led);
 12245  11DE  0876               	movf	setLED_Main@led,w
 12246  11DF  319C  240E  3191   	fcall	_LedPointSelect
 12247                           
 12248                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12249  11E2  0021               	movlb	1	; select bank1
 12250  11E3  086B               	movf	_LED^(0+128),w
 12251  11E4  0086               	movwf	6
 12252  11E5  3001               	movlw	1	; select bank2/3
 12253  11E6  0087               	movwf	7
 12254  11E7  1C81               	btfss	1,1
 12255  11E8  0008               	return
 12256                           
 12257                           ;LED_B1.c: 232: LED->Time++;
 12258  11E9  0A6B               	incf	_LED^(0+128),w
 12259  11EA  0086               	movwf	6
 12260  11EB  3001               	movlw	1	; select bank2/3
 12261  11EC  0087               	movwf	7
 12262  11ED  3001               	movlw	1
 12263  11EE  0781               	addwf	1,f
 12264  11EF  3141               	addfsr 1,1
 12265  11F0  1803               	skipnc
 12266  11F1  0A81               	incf	1,f
 12267                           
 12268                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12269  11F2  0A6B               	incf	_LED^(0+128),w
 12270  11F3  0086               	movwf	6
 12271  11F4  3001               	movlw	1	; select bank2/3
 12272  11F5  0087               	movwf	7
 12273  11F6  3F40               	moviw [0]fsr1
 12274  11F7  00F4               	movwf	??_setLED_Main
 12275  11F8  3F41               	moviw [1]fsr1
 12276  11F9  00F5               	movwf	??_setLED_Main+1
 12277  11FA  3000               	movlw	0
 12278  11FB  0275               	subwf	??_setLED_Main+1,w
 12279  11FC  3019               	movlw	25
 12280  11FD  1903               	skipnz
 12281  11FE  0274               	subwf	??_setLED_Main,w
 12282  11FF  1C03               	skipc
 12283  1200  0008               	return
 12284                           
 12285                           ;LED_B1.c: 234: LED->Time = 0;
 12286  1201  0A6B               	incf	_LED^(0+128),w
 12287  1202  0086               	movwf	6
 12288  1203  3001               	movlw	1	; select bank2/3
 12289  1204  0087               	movwf	7
 12290  1205  3000               	movlw	0
 12291  1206  3FC0               	movwi [0]fsr1
 12292  1207  3FC1               	movwi [1]fsr1
 12293                           
 12294                           ;LED_B1.c: 237: if (led == 1) {
 12295  1208  0876               	movf	setLED_Main@led,w
 12296  1209  3A01               	xorlw	1
 12297  120A  1D03               	skipz
 12298  120B  2A0F               	goto	l1223
 12299                           
 12300                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
 12301  120C  3080               	movlw	128
 12302  120D  0020               	movlb	0	; select bank0
 12303  120E  068E               	xorwf	14,f
 12304  120F                     l1223:	
 12305                           
 12306                           ;LED_B1.c: 239: }
 12307                           ;LED_B1.c: 242: if (led == 2) {
 12308  120F  0876               	movf	setLED_Main@led,w
 12309  1210  3A02               	xorlw	2
 12310  1211  1D03               	skipz
 12311  1212  2A16               	goto	l1224
 12312                           
 12313                           ;LED_B1.c: 243: RA3 = RA3 == 1 ? 0 : 1;
 12314  1213  3008               	movlw	8
 12315  1214  0020               	movlb	0	; select bank0
 12316  1215  068C               	xorwf	12,f
 12317  1216                     l1224:	
 12318                           
 12319                           ;LED_B1.c: 244: }
 12320                           ;LED_B1.c: 252: if (led == 99) {
 12321  1216  0876               	movf	setLED_Main@led,w
 12322  1217  3A63               	xorlw	99
 12323  1218  1D03               	skipz
 12324  1219  0008               	return
 12325                           
 12326                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12327  121A  3020               	movlw	32
 12328  121B  0020               	movlb	0	; select bank0
 12329  121C  068D               	xorwf	13,f
 12330  121D  0008               	return
 12331  121E                     __end_of_setLED_Main:	
 12332                           
 12333                           	psect	text76
 12334  18BA                     __ptext76:	
 12335 ;; *************** function _LED_Initialization *****************
 12336 ;; Defined at:
 12337 ;;		line 31 in file "../src/LED_B1.c"
 12338 ;; Parameters:    Size  Location     Type
 12339 ;;		None
 12340 ;; Auto vars:     Size  Location     Type
 12341 ;;		None
 12342 ;; Return value:  Size  Location     Type
 12343 ;;		None               void
 12344 ;; Registers used:
 12345 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12346 ;; Tracked objects:
 12347 ;;		On entry : 0/0
 12348 ;;		On exit  : 0/0
 12349 ;;		Unchanged: 0/0
 12350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;Total ram usage:        0 bytes
 12356 ;; Hardware stack levels used:    1
 12357 ;; Hardware stack levels required when called:    6
 12358 ;; This function calls:
 12359 ;;		_setLED_Initialization
 12360 ;; This function is called by:
 12361 ;;		_main
 12362 ;; This function uses a non-reentrant model
 12363 ;;
 12364                           
 12365                           
 12366                           ;psect for function _LED_Initialization
 12367  18BA                     _LED_Initialization:	
 12368                           
 12369                           ;LED_B1.c: 33: setLED_Initialization(1);
 12370                           
 12371                           ;incstack = 0
 12372                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12373  18BA  3001               	movlw	1
 12374  18BB  3199  2167  3198   	fcall	_setLED_Initialization
 12375                           
 12376                           ;LED_B1.c: 36: setLED_Initialization(2);
 12377  18BE  3002               	movlw	2
 12378  18BF  3199  2167  3198   	fcall	_setLED_Initialization
 12379                           
 12380                           ;LED_B1.c: 42: setLED_Initialization(99);
 12381  18C2  3063               	movlw	99
 12382  18C3  3199  2167         	fcall	_setLED_Initialization
 12383  18C5  0008               	return
 12384  18C6                     __end_of_LED_Initialization:	
 12385                           
 12386                           	psect	text77
 12387  1967                     __ptext77:	
 12388 ;; *************** function _setLED_Initialization *****************
 12389 ;; Defined at:
 12390 ;;		line 74 in file "../src/LED_B1.c"
 12391 ;; Parameters:    Size  Location     Type
 12392 ;;  led             1    wreg     unsigned char 
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;  led             1    6[COMMON] unsigned char 
 12395 ;; Return value:  Size  Location     Type
 12396 ;;		None               void
 12397 ;; Registers used:
 12398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;Total ram usage:        1 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:    5
 12411 ;; This function calls:
 12412 ;;		_LedPointSelect
 12413 ;;		_setLED
 12414 ;; This function is called by:
 12415 ;;		_LED_Initialization
 12416 ;; This function uses a non-reentrant model
 12417 ;;
 12418                           
 12419                           
 12420                           ;psect for function _setLED_Initialization
 12421  1967                     _setLED_Initialization:	
 12422                           
 12423                           ;incstack = 0
 12424                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12425                           ;setLED_Initialization@led stored from wreg
 12426  1967  00F6               	movwf	setLED_Initialization@led
 12427                           
 12428                           ;LED_B1.c: 75: LedPointSelect(led);
 12429  1968  0876               	movf	setLED_Initialization@led,w
 12430  1969  319C  240E  3199   	fcall	_LedPointSelect
 12431                           
 12432                           ;LED_B1.c: 76: LED->Enable = 1;
 12433  196C  0021               	movlb	1	; select bank1
 12434  196D  086B               	movf	_LED^(0+128),w
 12435  196E  0086               	movwf	6
 12436  196F  3001               	movlw	1	; select bank2/3
 12437  1970  0087               	movwf	7
 12438  1971  1401               	bsf	1,0
 12439                           
 12440                           ;LED_B1.c: 77: setLED(led, 0);
 12441  1972  01F4               	clrf	setLED@command
 12442  1973  0876               	movf	setLED_Initialization@led,w
 12443  1974  3194  24ED         	fcall	_setLED
 12444  1976  0008               	return
 12445  1977                     __end_of_setLED_Initialization:	
 12446                           
 12447                           	psect	text78
 12448  119C                     __ptext78:	
 12449 ;; *************** function _Flash_Memory_Main *****************
 12450 ;; Defined at:
 12451 ;;		line 980 in file "../src/MCU_B1.c"
 12452 ;; Parameters:    Size  Location     Type
 12453 ;;		None
 12454 ;; Auto vars:     Size  Location     Type
 12455 ;;  key_Status      1    0[BANK0 ] unsigned char 
 12456 ;; Return value:  Size  Location     Type
 12457 ;;		None               void
 12458 ;; Registers used:
 12459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12460 ;; Tracked objects:
 12461 ;;		On entry : 0/0
 12462 ;;		On exit  : 0/0
 12463 ;;		Unchanged: 0/0
 12464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;Total ram usage:        3 bytes
 12470 ;; Hardware stack levels used:    1
 12471 ;; Hardware stack levels required when called:    6
 12472 ;; This function calls:
 12473 ;;		_Flash_Memory_Modify
 12474 ;;		_getAll_Sw_KeyStatus
 12475 ;;		_getMain_All_LightsStatus
 12476 ;; This function is called by:
 12477 ;;		_main
 12478 ;; This function uses a non-reentrant model
 12479 ;;
 12480                           
 12481                           
 12482                           ;psect for function _Flash_Memory_Main
 12483  119C                     _Flash_Memory_Main:	
 12484                           
 12485                           ;MCU_B1.c: 981: char key_Status = 0;
 12486                           
 12487                           ;incstack = 0
 12488                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12489  119C  0020               	movlb	0	; select bank0
 12490  119D  01A0               	clrf	Flash_Memory_Main@key_Status
 12491                           
 12492                           ;MCU_B1.c: 983: key_Status = getAll_Sw_KeyStatus();
 12493  119E  3199  21B8  3191   	fcall	_getAll_Sw_KeyStatus
 12494  11A1  00F8               	movwf	??_Flash_Memory_Main
 12495  11A2  0878               	movf	??_Flash_Memory_Main,w
 12496  11A3  0020               	movlb	0	; select bank0
 12497  11A4  00A0               	movwf	Flash_Memory_Main@key_Status
 12498                           
 12499                           ;MCU_B1.c: 985: if (Memory.Modify == 1) {
 12500  11A5  0024               	movlb	4	; select bank4
 12501  11A6  1C54               	btfss	(_Memory^(0+512)+36),0
 12502  11A7  0008               	return
 12503                           
 12504                           ;MCU_B1.c: 986: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12505  11A8  0020               	movlb	0	; select bank0
 12506  11A9  01A1               	clrf	_Flash_Memory_Main$3708
 12507  11AA  3199  2119  3191   	fcall	_getMain_All_LightsStatus
 12508  11AD  3800               	iorlw	0
 12509  11AE  1D03               	skipz
 12510  11AF  29B6               	goto	l11021
 12511  11B0  0020               	movlb	0	; select bank0
 12512  11B1  08A0               	movf	Flash_Memory_Main@key_Status,f
 12513  11B2  1D03               	skipz
 12514  11B3  29B6               	goto	l11021
 12515  11B4  01A1               	clrf	_Flash_Memory_Main$3708
 12516  11B5  0AA1               	incf	_Flash_Memory_Main$3708,f
 12517  11B6                     l11021:	
 12518  11B6  0020               	movlb	0	; select bank0
 12519  11B7  0821               	movf	_Flash_Memory_Main$3708,w
 12520  11B8  0024               	movlb	4	; select bank4
 12521  11B9  10D4               	bcf	(_Memory^(0+512)+36),1
 12522  11BA  1D03               	skipz
 12523  11BB  14D4               	bsf	(_Memory^(0+512)+36),1
 12524                           
 12525                           ;MCU_B1.c: 987: if (Memory.GO == 1) {
 12526  11BC  1CD4               	btfss	(_Memory^(0+512)+36),1
 12527  11BD  29D7               	goto	l1499
 12528                           
 12529                           ;MCU_B1.c: 988: Memory.Runtime = 1;
 12530  11BE  15D4               	bsf	(_Memory^(0+512)+36),3
 12531                           
 12532                           ;MCU_B1.c: 989: Memory.Time++;
 12533  11BF  3001               	movlw	1
 12534  11C0  07D2               	addwf	(_Memory^(0+512)+34),f
 12535  11C1  3000               	movlw	0
 12536  11C2  3DD3               	addwfc	((_Memory+1)^(0+512)+34),f
 12537                           
 12538                           ;MCU_B1.c: 990: if (Memory.Time == (200 / 20)) {
 12539  11C3  3022               	movlw	34
 12540  11C4  3E30               	addlw	_Memory& (0+255)
 12541  11C5  0086               	movwf	6
 12542  11C6  3002               	movlw	2	; select bank4/5
 12543  11C7  0087               	movwf	7
 12544  11C8  3F40               	moviw [0]fsr1
 12545  11C9  3A0A               	xorlw	10
 12546  11CA  1D03               	skipz
 12547  11CB  29CE               	goto	u12575
 12548  11CC  3F41               	moviw [1]fsr1
 12549  11CD  3A00               	xorlw	0
 12550  11CE                     u12575:	
 12551  11CE  1D03               	skipz
 12552  11CF  0008               	return
 12553                           
 12554                           ;MCU_B1.c: 991: Memory.Time = 0;
 12555  11D0  01D2               	clrf	(_Memory^(0+512)+34)
 12556  11D1  01D3               	clrf	((_Memory+1)^(0+512)+34)
 12557                           
 12558                           ;MCU_B1.c: 992: Memory.Modify = 0;
 12559  11D2  1054               	bcf	(_Memory^(0+512)+36),0
 12560                           
 12561                           ;MCU_B1.c: 993: Memory.GO = 0;
 12562  11D3  10D4               	bcf	(_Memory^(0+512)+36),1
 12563                           
 12564                           ;MCU_B1.c: 994: Flash_Memory_Modify();
 12565  11D4  3189  21DA         	fcall	_Flash_Memory_Modify
 12566                           
 12567                           ;MCU_B1.c: 995: }
 12568                           ;MCU_B1.c: 996: } else {
 12569  11D6  0008               	return
 12570  11D7                     l1499:	
 12571                           
 12572                           ;MCU_B1.c: 997: if (Memory.Runtime == 1) {
 12573  11D7  1DD4               	btfss	(_Memory^(0+512)+36),3
 12574  11D8  0008               	return
 12575                           
 12576                           ;MCU_B1.c: 998: Memory.Runtime = 0;
 12577  11D9  11D4               	bcf	(_Memory^(0+512)+36),3
 12578                           
 12579                           ;MCU_B1.c: 999: Memory.Time = 0;
 12580  11DA  01D2               	clrf	(_Memory^(0+512)+34)
 12581  11DB  01D3               	clrf	((_Memory+1)^(0+512)+34)
 12582  11DC  0008               	return
 12583  11DD                     __end_of_Flash_Memory_Main:	
 12584                           
 12585                           	psect	text79
 12586  19B8                     __ptext79:	
 12587 ;; *************** function _getAll_Sw_KeyStatus *****************
 12588 ;; Defined at:
 12589 ;;		line 286 in file "../src/Switch_B1.c"
 12590 ;; Parameters:    Size  Location     Type
 12591 ;;		None
 12592 ;; Auto vars:     Size  Location     Type
 12593 ;;  status          1    3[COMMON] unsigned char 
 12594 ;; Return value:  Size  Location     Type
 12595 ;;                  1    wreg      unsigned char 
 12596 ;; Registers used:
 12597 ;;		wreg, status,2
 12598 ;; Tracked objects:
 12599 ;;		On entry : 0/0
 12600 ;;		On exit  : 0/0
 12601 ;;		Unchanged: 0/0
 12602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;Total ram usage:        3 bytes
 12608 ;; Hardware stack levels used:    1
 12609 ;; Hardware stack levels required when called:    3
 12610 ;; This function calls:
 12611 ;;		Nothing
 12612 ;; This function is called by:
 12613 ;;		_Flash_Memory_Main
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           
 12618                           ;psect for function _getAll_Sw_KeyStatus
 12619  19B8                     _getAll_Sw_KeyStatus:	
 12620                           
 12621                           ;Switch_B1.c: 287: char status = 0;
 12622                           
 12623                           ;incstack = 0
 12624                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12625  19B8  01F3               	clrf	getAll_Sw_KeyStatus@status
 12626                           
 12627                           ;Switch_B1.c: 301: status = RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1 ? 1 : 0;
 12628  19B9  01F4               	clrf	_getAll_Sw_KeyStatus$6943
 12629  19BA  0AF4               	incf	_getAll_Sw_KeyStatus$6943,f
 12630  19BB  0020               	movlb	0	; select bank0
 12631  19BC  1C0C               	btfss	12,0	;volatile
 12632  19BD  188D               	btfsc	13,1	;volatile
 12633  19BE  29C3               	goto	l10681
 12634  19BF  1F0C               	btfss	12,6	;volatile
 12635  19C0  1A0C               	btfsc	12,4	;volatile
 12636  19C1  29C3               	goto	l10681
 12637  19C2  01F4               	clrf	_getAll_Sw_KeyStatus$6943
 12638  19C3                     l10681:	
 12639  19C3  0874               	movf	_getAll_Sw_KeyStatus$6943,w
 12640  19C4  00F2               	movwf	??_getAll_Sw_KeyStatus
 12641  19C5  0872               	movf	??_getAll_Sw_KeyStatus,w
 12642  19C6  00F3               	movwf	getAll_Sw_KeyStatus@status
 12643                           
 12644                           ;Switch_B1.c: 315: return status;
 12645  19C7  0873               	movf	getAll_Sw_KeyStatus@status,w
 12646  19C8  0008               	return
 12647  19C9                     __end_of_getAll_Sw_KeyStatus:	
 12648                           
 12649                           	psect	text80
 12650  09DA                     __ptext80:	
 12651 ;; *************** function _Flash_Memory_Modify *****************
 12652 ;; Defined at:
 12653 ;;		line 1057 in file "../src/MCU_B1.c"
 12654 ;; Parameters:    Size  Location     Type
 12655 ;;		None
 12656 ;; Auto vars:     Size  Location     Type
 12657 ;;  i               1    7[COMMON] unsigned char 
 12658 ;; Return value:  Size  Location     Type
 12659 ;;		None               void
 12660 ;; Registers used:
 12661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;Total ram usage:        2 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    5
 12674 ;; This function calls:
 12675 ;;		_Flash_Memory_Erasing
 12676 ;;		_Flash_Memory_Read
 12677 ;;		_Flash_Memory_Write
 12678 ;;		_setMemory_Data
 12679 ;; This function is called by:
 12680 ;;		_Flash_Memory_Main
 12681 ;; This function uses a non-reentrant model
 12682 ;;
 12683                           
 12684                           
 12685                           ;psect for function _Flash_Memory_Modify
 12686  09DA                     _Flash_Memory_Modify:	
 12687                           
 12688                           ;MCU_B1.c: 1058: char i = 0;
 12689                           
 12690                           ;incstack = 0
 12691                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12692  09DA  01F7               	clrf	Flash_Memory_Modify@i
 12693                           
 12694                           ;MCU_B1.c: 1059: for (i = 0; i < 32; i++) {
 12695  09DB  01F7               	clrf	Flash_Memory_Modify@i
 12696  09DC  3020               	movlw	32
 12697  09DD  0277               	subwf	Flash_Memory_Modify@i,w
 12698  09DE  1803               	btfsc	3,0
 12699  09DF  29F4               	goto	l10699
 12700  09E0                     l10693:	
 12701                           
 12702                           ;MCU_B1.c: 1060: Memory.Data[i] = Flash_Memory_Read(i);
 12703  09E0  0877               	movf	Flash_Memory_Modify@i,w
 12704  09E1  3190  2066  3189   	fcall	_Flash_Memory_Read
 12705  09E4  00F6               	movwf	??_Flash_Memory_Modify
 12706  09E5  0877               	movf	Flash_Memory_Modify@i,w
 12707  09E6  3E30               	addlw	_Memory& (0+255)
 12708  09E7  0086               	movwf	6
 12709  09E8  3002               	movlw	2	; select bank4/5
 12710  09E9  0087               	movwf	7
 12711  09EA  0876               	movf	??_Flash_Memory_Modify,w
 12712  09EB  0081               	movwf	1
 12713  09EC  3001               	movlw	1
 12714  09ED  00F6               	movwf	??_Flash_Memory_Modify
 12715  09EE  0876               	movf	??_Flash_Memory_Modify,w
 12716  09EF  07F7               	addwf	Flash_Memory_Modify@i,f
 12717  09F0  3020               	movlw	32
 12718  09F1  0277               	subwf	Flash_Memory_Modify@i,w
 12719  09F2  1C03               	skipc
 12720  09F3  29E0               	goto	l10693
 12721  09F4                     l10699:	
 12722                           
 12723                           ;MCU_B1.c: 1061: }
 12724                           ;MCU_B1.c: 1062: setMemory_Data(6, product->Data[11]);
 12725  09F4  087B               	movf	_product,w
 12726  09F5  0086               	movwf	6
 12727  09F6  3002               	movlw	2	; select bank4/5
 12728  09F7  0087               	movwf	7
 12729  09F8  3002               	movlw	2	; select bank4/5
 12730  09F9  3F4B               	moviw [11]fsr1
 12731  09FA  00F2               	movwf	setMemory_Data@data
 12732  09FB  3006               	movlw	6
 12733  09FC  3198  206A  3189   	fcall	_setMemory_Data
 12734                           
 12735                           ;MCU_B1.c: 1063: setMemory_Data(0, product->Data[12]);
 12736  09FF  087B               	movf	_product,w
 12737  0A00  0086               	movwf	6
 12738  0A01  3002               	movlw	2	; select bank4/5
 12739  0A02  0087               	movwf	7
 12740  0A03  3002               	movlw	2	; select bank4/5
 12741  0A04  3F4C               	moviw [12]fsr1
 12742  0A05  00F2               	movwf	setMemory_Data@data
 12743  0A06  3000               	movlw	0
 12744  0A07  3198  206A  3189   	fcall	_setMemory_Data
 12745                           
 12746                           ;MCU_B1.c: 1064: setMemory_Data(1, product->Data[13]);
 12747  0A0A  087B               	movf	_product,w
 12748  0A0B  0086               	movwf	6
 12749  0A0C  3002               	movlw	2	; select bank4/5
 12750  0A0D  0087               	movwf	7
 12751  0A0E  3002               	movlw	2	; select bank4/5
 12752  0A0F  3F4D               	moviw [13]fsr1
 12753  0A10  00F2               	movwf	setMemory_Data@data
 12754  0A11  3001               	movlw	1
 12755  0A12  3198  206A  3189   	fcall	_setMemory_Data
 12756                           
 12757                           ;MCU_B1.c: 1065: setMemory_Data(2, product->Data[14]);
 12758  0A15  087B               	movf	_product,w
 12759  0A16  0086               	movwf	6
 12760  0A17  3002               	movlw	2	; select bank4/5
 12761  0A18  0087               	movwf	7
 12762  0A19  3002               	movlw	2	; select bank4/5
 12763  0A1A  3F4E               	moviw [14]fsr1
 12764  0A1B  00F2               	movwf	setMemory_Data@data
 12765  0A1C  3002               	movlw	2
 12766  0A1D  3198  206A  3189   	fcall	_setMemory_Data
 12767                           
 12768                           ;MCU_B1.c: 1067: setMemory_Data(3, product->Data[21]);
 12769  0A20  087B               	movf	_product,w
 12770  0A21  0086               	movwf	6
 12771  0A22  3002               	movlw	2	; select bank4/5
 12772  0A23  0087               	movwf	7
 12773  0A24  3002               	movlw	2	; select bank4/5
 12774  0A25  3F55               	moviw [21]fsr1
 12775  0A26  00F2               	movwf	setMemory_Data@data
 12776  0A27  3003               	movlw	3
 12777  0A28  3198  206A  3189   	fcall	_setMemory_Data
 12778                           
 12779                           ;MCU_B1.c: 1068: setMemory_Data(4, product->Data[22]);
 12780  0A2B  087B               	movf	_product,w
 12781  0A2C  0086               	movwf	6
 12782  0A2D  3002               	movlw	2	; select bank4/5
 12783  0A2E  0087               	movwf	7
 12784  0A2F  3002               	movlw	2	; select bank4/5
 12785  0A30  3F56               	moviw [22]fsr1
 12786  0A31  00F2               	movwf	setMemory_Data@data
 12787  0A32  3004               	movlw	4
 12788  0A33  3198  206A  3189   	fcall	_setMemory_Data
 12789                           
 12790                           ;MCU_B1.c: 1069: setMemory_Data(5, product->Data[23]);
 12791  0A36  087B               	movf	_product,w
 12792  0A37  0086               	movwf	6
 12793  0A38  3002               	movlw	2	; select bank4/5
 12794  0A39  0087               	movwf	7
 12795  0A3A  3002               	movlw	2	; select bank4/5
 12796  0A3B  3F57               	moviw [23]fsr1
 12797  0A3C  00F2               	movwf	setMemory_Data@data
 12798  0A3D  3005               	movlw	5
 12799  0A3E  3198  206A  3189   	fcall	_setMemory_Data
 12800                           
 12801                           ;MCU_B1.c: 1070: if (myMain.SaveDimmer == 1) {
 12802  0A41  0021               	movlb	1	; select bank1
 12803  0A42  1ED9               	btfss	(_myMain^(0+128)+10),5
 12804  0A43  2A4D               	goto	l10707
 12805                           
 12806                           ;MCU_B1.c: 1071: myMain.SaveDimmer = 0;
 12807  0A44  12D9               	bcf	(_myMain^(0+128)+10),5
 12808                           
 12809                           ;MCU_B1.c: 1072: setMemory_Data(30, 0xaa);
 12810  0A45  30AA               	movlw	170
 12811  0A46  00F6               	movwf	??_Flash_Memory_Modify
 12812  0A47  0876               	movf	??_Flash_Memory_Modify,w
 12813  0A48  00F2               	movwf	setMemory_Data@data
 12814  0A49  301E               	movlw	30
 12815  0A4A  3198  206A  3189   	fcall	_setMemory_Data
 12816  0A4D                     l10707:	
 12817                           
 12818                           ;MCU_B1.c: 1073: }
 12819                           ;MCU_B1.c: 1075: if (Memory.LoopSave == 1) {
 12820  0A4D  0024               	movlb	4	; select bank4
 12821  0A4E  1D54               	btfss	(_Memory^(0+512)+36),2
 12822  0A4F  2A54               	goto	l1523
 12823                           
 12824                           ;MCU_B1.c: 1076: Memory.LoopSave = 0;
 12825  0A50  1154               	bcf	(_Memory^(0+512)+36),2
 12826                           
 12827                           ;MCU_B1.c: 1077: myMain.FirstOpen = 0;
 12828  0A51  0021               	movlb	1	; select bank1
 12829  0A52  11CF               	bcf	_myMain^(0+128),3
 12830                           
 12831                           ;MCU_B1.c: 1078: myMain.First = 0;
 12832  0A53  12CF               	bcf	_myMain^(0+128),5
 12833  0A54                     l1523:	
 12834                           
 12835                           ;MCU_B1.c: 1080: }
 12836                           ;MCU_B1.c: 1081: GIE = 0;
 12837  0A54  138B               	bcf	11,7	;volatile
 12838                           
 12839                           ;MCU_B1.c: 1082: Flash_Memory_Erasing();
 12840  0A55  3198  20AE  3189   	fcall	_Flash_Memory_Erasing
 12841                           
 12842                           ;MCU_B1.c: 1083: Flash_Memory_Write();
 12843  0A58  319E  2612         	fcall	_Flash_Memory_Write
 12844                           
 12845                           ;MCU_B1.c: 1084: GIE = 1;
 12846  0A5A  178B               	bsf	11,7	;volatile
 12847  0A5B  0008               	return
 12848  0A5C                     __end_of_Flash_Memory_Modify:	
 12849                           
 12850                           	psect	text81
 12851  18AE                     __ptext81:	
 12852 ;; *************** function _Flash_Memory_Erasing *****************
 12853 ;; Defined at:
 12854 ;;		line 1046 in file "../src/MCU_B1.c"
 12855 ;; Parameters:    Size  Location     Type
 12856 ;;		None
 12857 ;; Auto vars:     Size  Location     Type
 12858 ;;		None
 12859 ;; Return value:  Size  Location     Type
 12860 ;;		None               void
 12861 ;; Registers used:
 12862 ;;		wreg, status,2, status,0, pclath, cstack
 12863 ;; Tracked objects:
 12864 ;;		On entry : 0/0
 12865 ;;		On exit  : 0/0
 12866 ;;		Unchanged: 0/0
 12867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12872 ;;Total ram usage:        0 bytes
 12873 ;; Hardware stack levels used:    1
 12874 ;; Hardware stack levels required when called:    4
 12875 ;; This function calls:
 12876 ;;		_Flash_Memory_Unlock
 12877 ;; This function is called by:
 12878 ;;		_Flash_Memory_Modify
 12879 ;; This function uses a non-reentrant model
 12880 ;;
 12881                           
 12882                           
 12883                           ;psect for function _Flash_Memory_Erasing
 12884  18AE                     _Flash_Memory_Erasing:	
 12885                           
 12886                           ;MCU_B1.c: 1047: CFGS = 0;
 12887                           
 12888                           ;incstack = 0
 12889                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12890  18AE  0023               	movlb	3	; select bank3
 12891  18AF  1315               	bcf	21,6	;volatile
 12892                           
 12893                           ;MCU_B1.c: 1048: PMADRH = 0x30;
 12894  18B0  3030               	movlw	48
 12895  18B1  0092               	movwf	18	;volatile
 12896                           
 12897                           ;MCU_B1.c: 1049: PMADRL = 0x00;
 12898  18B2  0191               	clrf	17	;volatile
 12899                           
 12900                           ;MCU_B1.c: 1050: FREE = 1;
 12901  18B3  1615               	bsf	21,4	;volatile
 12902                           
 12903                           ;MCU_B1.c: 1051: WREN = 1;
 12904  18B4  1515               	bsf	21,2	;volatile
 12905                           
 12906                           ;MCU_B1.c: 1052: Flash_Memory_Unlock();
 12907  18B5  3187  27F7         	fcall	_Flash_Memory_Unlock
 12908                           
 12909                           ;MCU_B1.c: 1053: WREN = 0;
 12910  18B7  0023               	movlb	3	; select bank3
 12911  18B8  1115               	bcf	21,2	;volatile
 12912  18B9  0008               	return
 12913  18BA                     __end_of_Flash_Memory_Erasing:	
 12914                           
 12915                           	psect	text82
 12916  0601                     __ptext82:	
 12917 ;; *************** function _Flash_Memory_Initialization *****************
 12918 ;; Defined at:
 12919 ;;		line 934 in file "../src/MCU_B1.c"
 12920 ;; Parameters:    Size  Location     Type
 12921 ;;		None
 12922 ;; Auto vars:     Size  Location     Type
 12923 ;;  value           1    7[COMMON] unsigned char 
 12924 ;; Return value:  Size  Location     Type
 12925 ;;		None               void
 12926 ;; Registers used:
 12927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12928 ;; Tracked objects:
 12929 ;;		On entry : 0/0
 12930 ;;		On exit  : 0/0
 12931 ;;		Unchanged: 0/0
 12932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12937 ;;Total ram usage:        2 bytes
 12938 ;; Hardware stack levels used:    1
 12939 ;; Hardware stack levels required when called:    5
 12940 ;; This function calls:
 12941 ;;		_Flash_Memory_Read
 12942 ;;		_Flash_Memory_Write
 12943 ;;		_setMemory_Data
 12944 ;; This function is called by:
 12945 ;;		_main
 12946 ;; This function uses a non-reentrant model
 12947 ;;
 12948                           
 12949                           
 12950                           ;psect for function _Flash_Memory_Initialization
 12951  0601                     _Flash_Memory_Initialization:	
 12952                           
 12953                           ;MCU_B1.c: 935: char value = 0;
 12954                           
 12955                           ;incstack = 0
 12956                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12957  0601  01F7               	clrf	Flash_Memory_Initialization@value
 12958                           
 12959                           ;MCU_B1.c: 936: if (Flash_Memory_Read(31) == 0xaa) {
 12960  0602  301F               	movlw	31
 12961  0603  3190  2066  3186   	fcall	_Flash_Memory_Read
 12962  0606  3AAA               	xorlw	170
 12963  0607  1D03               	skipz
 12964  0608  2E7C               	goto	l10995
 12965                           
 12966                           ;MCU_B1.c: 937: product->Data[11] = Flash_Memory_Read(6);
 12967  0609  3006               	movlw	6
 12968  060A  3190  2066  3186   	fcall	_Flash_Memory_Read
 12969  060D  00F6               	movwf	??_Flash_Memory_Initialization
 12970  060E  087B               	movf	_product,w
 12971  060F  3E0B               	addlw	11
 12972  0610  0086               	movwf	6
 12973  0611  3002               	movlw	2	; select bank4/5
 12974  0612  0087               	movwf	7
 12975  0613  0876               	movf	??_Flash_Memory_Initialization,w
 12976  0614  0081               	movwf	1
 12977                           
 12978                           ;MCU_B1.c: 938: product->Data[12] = Flash_Memory_Read(0);
 12979  0615  3000               	movlw	0
 12980  0616  3190  2066  3186   	fcall	_Flash_Memory_Read
 12981  0619  00F6               	movwf	??_Flash_Memory_Initialization
 12982  061A  087B               	movf	_product,w
 12983  061B  3E0C               	addlw	12
 12984  061C  0086               	movwf	6
 12985  061D  3002               	movlw	2	; select bank4/5
 12986  061E  0087               	movwf	7
 12987  061F  0876               	movf	??_Flash_Memory_Initialization,w
 12988  0620  0081               	movwf	1
 12989                           
 12990                           ;MCU_B1.c: 939: product->Data[13] = Flash_Memory_Read(1);
 12991  0621  3001               	movlw	1
 12992  0622  3190  2066  3186   	fcall	_Flash_Memory_Read
 12993  0625  00F6               	movwf	??_Flash_Memory_Initialization
 12994  0626  087B               	movf	_product,w
 12995  0627  3E0D               	addlw	13
 12996  0628  0086               	movwf	6
 12997  0629  3002               	movlw	2	; select bank4/5
 12998  062A  0087               	movwf	7
 12999  062B  0876               	movf	??_Flash_Memory_Initialization,w
 13000  062C  0081               	movwf	1
 13001                           
 13002                           ;MCU_B1.c: 940: product->Data[14] = Flash_Memory_Read(2);
 13003  062D  3002               	movlw	2
 13004  062E  3190  2066  3186   	fcall	_Flash_Memory_Read
 13005  0631  00F6               	movwf	??_Flash_Memory_Initialization
 13006  0632  087B               	movf	_product,w
 13007  0633  3E0E               	addlw	14
 13008  0634  0086               	movwf	6
 13009  0635  3002               	movlw	2	; select bank4/5
 13010  0636  0087               	movwf	7
 13011  0637  0876               	movf	??_Flash_Memory_Initialization,w
 13012  0638  0081               	movwf	1
 13013                           
 13014                           ;MCU_B1.c: 943: product->Data[21] = Flash_Memory_Read(3);
 13015  0639  3003               	movlw	3
 13016  063A  3190  2066  3186   	fcall	_Flash_Memory_Read
 13017  063D  00F6               	movwf	??_Flash_Memory_Initialization
 13018  063E  087B               	movf	_product,w
 13019  063F  3E15               	addlw	21
 13020  0640  0086               	movwf	6
 13021  0641  3002               	movlw	2	; select bank4/5
 13022  0642  0087               	movwf	7
 13023  0643  0876               	movf	??_Flash_Memory_Initialization,w
 13024  0644  0081               	movwf	1
 13025                           
 13026                           ;MCU_B1.c: 944: product->Data[22] = Flash_Memory_Read(4);
 13027  0645  3004               	movlw	4
 13028  0646  3190  2066  3186   	fcall	_Flash_Memory_Read
 13029  0649  00F6               	movwf	??_Flash_Memory_Initialization
 13030  064A  087B               	movf	_product,w
 13031  064B  3E16               	addlw	22
 13032  064C  0086               	movwf	6
 13033  064D  3002               	movlw	2	; select bank4/5
 13034  064E  0087               	movwf	7
 13035  064F  0876               	movf	??_Flash_Memory_Initialization,w
 13036  0650  0081               	movwf	1
 13037                           
 13038                           ;MCU_B1.c: 945: product->Data[23] = Flash_Memory_Read(5);
 13039  0651  3005               	movlw	5
 13040  0652  3190  2066  3186   	fcall	_Flash_Memory_Read
 13041  0655  00F6               	movwf	??_Flash_Memory_Initialization
 13042  0656  087B               	movf	_product,w
 13043  0657  3E17               	addlw	23
 13044  0658  0086               	movwf	6
 13045  0659  3002               	movlw	2	; select bank4/5
 13046  065A  0087               	movwf	7
 13047  065B  0876               	movf	??_Flash_Memory_Initialization,w
 13048  065C  0081               	movwf	1
 13049                           
 13050                           ;MCU_B1.c: 952: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13051  065D  087B               	movf	_product,w
 13052  065E  3E0C               	addlw	12
 13053  065F  0086               	movwf	6
 13054  0660  3002               	movlw	2	; select bank4/5
 13055  0661  0087               	movwf	7
 13056  0662  0801               	movf	1,w
 13057  0663  3AFF               	xorlw	255
 13058  0664  1D03               	skipz
 13059  0665  0008               	return
 13060  0666  087B               	movf	_product,w
 13061  0667  3E0D               	addlw	13
 13062  0668  0086               	movwf	6
 13063  0669  3002               	movlw	2	; select bank4/5
 13064  066A  0087               	movwf	7
 13065  066B  0801               	movf	1,w
 13066  066C  3AFF               	xorlw	255
 13067  066D  1D03               	skipz
 13068  066E  0008               	return
 13069  066F  087B               	movf	_product,w
 13070  0670  3E0E               	addlw	14
 13071  0671  0086               	movwf	6
 13072  0672  3002               	movlw	2	; select bank4/5
 13073  0673  0087               	movwf	7
 13074  0674  0801               	movf	1,w
 13075  0675  3AFF               	xorlw	255
 13076  0676  1D03               	skipz
 13077  0677  0008               	return
 13078                           
 13079                           ;MCU_B1.c: 953: myMain.FirstOpen = 1;
 13080  0678  0021               	movlb	1	; select bank1
 13081  0679  15CF               	bsf	_myMain^(0+128),3
 13082                           
 13083                           ;MCU_B1.c: 954: myMain.First = 1;
 13084  067A  16CF               	bsf	_myMain^(0+128),5
 13085                           
 13086                           ;MCU_B1.c: 955: }
 13087                           ;MCU_B1.c: 956: } else {
 13088  067B  0008               	return
 13089  067C                     l10995:	
 13090                           
 13091                           ;MCU_B1.c: 958: setMemory_Data(0, 0xff);
 13092  067C  30FF               	movlw	255
 13093  067D  00F6               	movwf	??_Flash_Memory_Initialization
 13094  067E  0876               	movf	??_Flash_Memory_Initialization,w
 13095  067F  00F2               	movwf	setMemory_Data@data
 13096  0680  3000               	movlw	0
 13097  0681  3198  206A  3186   	fcall	_setMemory_Data
 13098                           
 13099                           ;MCU_B1.c: 959: setMemory_Data(1, 0xff);
 13100  0684  30FF               	movlw	255
 13101  0685  00F6               	movwf	??_Flash_Memory_Initialization
 13102  0686  0876               	movf	??_Flash_Memory_Initialization,w
 13103  0687  00F2               	movwf	setMemory_Data@data
 13104  0688  3001               	movlw	1
 13105  0689  3198  206A  3186   	fcall	_setMemory_Data
 13106                           
 13107                           ;MCU_B1.c: 960: setMemory_Data(2, 0xff);
 13108  068C  30FF               	movlw	255
 13109  068D  00F6               	movwf	??_Flash_Memory_Initialization
 13110  068E  0876               	movf	??_Flash_Memory_Initialization,w
 13111  068F  00F2               	movwf	setMemory_Data@data
 13112  0690  3002               	movlw	2
 13113  0691  3198  206A  3186   	fcall	_setMemory_Data
 13114                           
 13115                           ;MCU_B1.c: 961: setMemory_Data(3, 0xff);
 13116  0694  30FF               	movlw	255
 13117  0695  00F6               	movwf	??_Flash_Memory_Initialization
 13118  0696  0876               	movf	??_Flash_Memory_Initialization,w
 13119  0697  00F2               	movwf	setMemory_Data@data
 13120  0698  3003               	movlw	3
 13121  0699  3198  206A  3186   	fcall	_setMemory_Data
 13122                           
 13123                           ;MCU_B1.c: 962: setMemory_Data(4, 0xff);
 13124  069C  30FF               	movlw	255
 13125  069D  00F6               	movwf	??_Flash_Memory_Initialization
 13126  069E  0876               	movf	??_Flash_Memory_Initialization,w
 13127  069F  00F2               	movwf	setMemory_Data@data
 13128  06A0  3004               	movlw	4
 13129  06A1  3198  206A  3186   	fcall	_setMemory_Data
 13130                           
 13131                           ;MCU_B1.c: 963: setMemory_Data(5, 0xff);
 13132  06A4  30FF               	movlw	255
 13133  06A5  00F6               	movwf	??_Flash_Memory_Initialization
 13134  06A6  0876               	movf	??_Flash_Memory_Initialization,w
 13135  06A7  00F2               	movwf	setMemory_Data@data
 13136  06A8  3005               	movlw	5
 13137  06A9  3198  206A  3186   	fcall	_setMemory_Data
 13138                           
 13139                           ;MCU_B1.c: 964: setMemory_Data(6, 0xff);
 13140  06AC  30FF               	movlw	255
 13141  06AD  00F6               	movwf	??_Flash_Memory_Initialization
 13142  06AE  0876               	movf	??_Flash_Memory_Initialization,w
 13143  06AF  00F2               	movwf	setMemory_Data@data
 13144  06B0  3006               	movlw	6
 13145  06B1  3198  206A  3186   	fcall	_setMemory_Data
 13146                           
 13147                           ;MCU_B1.c: 965: setMemory_Data(31, 0xaa);
 13148  06B4  30AA               	movlw	170
 13149  06B5  00F6               	movwf	??_Flash_Memory_Initialization
 13150  06B6  0876               	movf	??_Flash_Memory_Initialization,w
 13151  06B7  00F2               	movwf	setMemory_Data@data
 13152  06B8  301F               	movlw	31
 13153  06B9  3198  206A  3186   	fcall	_setMemory_Data
 13154                           
 13155                           ;MCU_B1.c: 970: GIE = 0;
 13156  06BC  138B               	bcf	11,7	;volatile
 13157                           
 13158                           ;MCU_B1.c: 971: Flash_Memory_Write();
 13159  06BD  319E  2612         	fcall	_Flash_Memory_Write
 13160                           
 13161                           ;MCU_B1.c: 972: GIE = 1;
 13162  06BF  178B               	bsf	11,7	;volatile
 13163                           
 13164                           ;MCU_B1.c: 973: myMain.FirstOpen = 1;
 13165  06C0  0021               	movlb	1	; select bank1
 13166  06C1  15CF               	bsf	_myMain^(0+128),3
 13167                           
 13168                           ;MCU_B1.c: 974: myMain.First = 1;
 13169  06C2  16CF               	bsf	_myMain^(0+128),5
 13170                           
 13171                           ;MCU_B1.c: 975: myMain.InitDimmer = 1;
 13172  06C3  1659               	bsf	(_myMain^(0+128)+10),4
 13173  06C4  0008               	return
 13174  06C5                     __end_of_Flash_Memory_Initialization:	
 13175                           
 13176                           	psect	text83
 13177  186A                     __ptext83:	
 13178 ;; *************** function _setMemory_Data *****************
 13179 ;; Defined at:
 13180 ;;		line 1099 in file "../src/MCU_B1.c"
 13181 ;; Parameters:    Size  Location     Type
 13182 ;;  address         1    wreg     unsigned char 
 13183 ;;  data            1    2[COMMON] unsigned char 
 13184 ;; Auto vars:     Size  Location     Type
 13185 ;;  address         1    4[COMMON] unsigned char 
 13186 ;; Return value:  Size  Location     Type
 13187 ;;		None               void
 13188 ;; Registers used:
 13189 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13190 ;; Tracked objects:
 13191 ;;		On entry : 0/0
 13192 ;;		On exit  : 0/0
 13193 ;;		Unchanged: 0/0
 13194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13195 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;Total ram usage:        3 bytes
 13200 ;; Hardware stack levels used:    1
 13201 ;; Hardware stack levels required when called:    3
 13202 ;; This function calls:
 13203 ;;		Nothing
 13204 ;; This function is called by:
 13205 ;;		_Flash_Memory_Initialization
 13206 ;;		_Flash_Memory_Modify
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           
 13211                           ;psect for function _setMemory_Data
 13212  186A                     _setMemory_Data:	
 13213                           
 13214                           ;incstack = 0
 13215                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13216                           ;setMemory_Data@address stored from wreg
 13217  186A  00F4               	movwf	setMemory_Data@address
 13218                           
 13219                           ;MCU_B1.c: 1100: Memory.Data[address] = data;
 13220  186B  0872               	movf	setMemory_Data@data,w
 13221  186C  00F3               	movwf	??_setMemory_Data
 13222  186D  0874               	movf	setMemory_Data@address,w
 13223  186E  3E30               	addlw	_Memory& (0+255)
 13224  186F  0086               	movwf	6
 13225  1870  3002               	movlw	2	; select bank4/5
 13226  1871  0087               	movwf	7
 13227  1872  0873               	movf	??_setMemory_Data,w
 13228  1873  0081               	movwf	1
 13229  1874  0008               	return
 13230  1875                     __end_of_setMemory_Data:	
 13231                           
 13232                           	psect	text84
 13233  1E12                     __ptext84:	
 13234 ;; *************** function _Flash_Memory_Write *****************
 13235 ;; Defined at:
 13236 ;;		line 1027 in file "../src/MCU_B1.c"
 13237 ;; Parameters:    Size  Location     Type
 13238 ;;		None
 13239 ;; Auto vars:     Size  Location     Type
 13240 ;;  i               1    3[COMMON] unsigned char 
 13241 ;; Return value:  Size  Location     Type
 13242 ;;		None               void
 13243 ;; Registers used:
 13244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13245 ;; Tracked objects:
 13246 ;;		On entry : 0/0
 13247 ;;		On exit  : 0/0
 13248 ;;		Unchanged: 0/0
 13249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;Total ram usage:        2 bytes
 13255 ;; Hardware stack levels used:    1
 13256 ;; Hardware stack levels required when called:    4
 13257 ;; This function calls:
 13258 ;;		_Flash_Memory_Unlock
 13259 ;; This function is called by:
 13260 ;;		_Flash_Memory_Initialization
 13261 ;;		_Flash_Memory_Modify
 13262 ;; This function uses a non-reentrant model
 13263 ;;
 13264                           
 13265                           
 13266                           ;psect for function _Flash_Memory_Write
 13267  1E12                     _Flash_Memory_Write:	
 13268                           
 13269                           ;MCU_B1.c: 1028: char i = 0;
 13270                           
 13271                           ;incstack = 0
 13272                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13273  1E12  01F3               	clrf	Flash_Memory_Write@i
 13274                           
 13275                           ;MCU_B1.c: 1029: CFGS = 0;
 13276  1E13  0023               	movlb	3	; select bank3
 13277  1E14  1315               	bcf	21,6	;volatile
 13278                           
 13279                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 13280  1E15  3030               	movlw	48
 13281  1E16  0092               	movwf	18	;volatile
 13282                           
 13283                           ;MCU_B1.c: 1031: PMDATH = 0;
 13284  1E17  0194               	clrf	20	;volatile
 13285                           
 13286                           ;MCU_B1.c: 1032: FREE = 0;
 13287  1E18  1215               	bcf	21,4	;volatile
 13288                           
 13289                           ;MCU_B1.c: 1033: LWLO = 1;
 13290  1E19  1695               	bsf	21,5	;volatile
 13291                           
 13292                           ;MCU_B1.c: 1034: WREN = 1;
 13293  1E1A  1515               	bsf	21,2	;volatile
 13294                           
 13295                           ;MCU_B1.c: 1035: for (i = 0; i < 32; i++) {
 13296  1E1B  01F3               	clrf	Flash_Memory_Write@i
 13297  1E1C  3020               	movlw	32
 13298  1E1D  0273               	subwf	Flash_Memory_Write@i,w
 13299  1E1E  1803               	btfsc	3,0
 13300  1E1F  2E35               	goto	l1513
 13301  1E20                     l10411:	
 13302                           
 13303                           ;MCU_B1.c: 1036: PMADRL = i;
 13304  1E20  0873               	movf	Flash_Memory_Write@i,w
 13305  1E21  0023               	movlb	3	; select bank3
 13306  1E22  0091               	movwf	17	;volatile
 13307                           
 13308                           ;MCU_B1.c: 1037: PMDATL = Memory.Data[i];
 13309  1E23  0873               	movf	Flash_Memory_Write@i,w
 13310  1E24  3E30               	addlw	_Memory& (0+255)
 13311  1E25  0086               	movwf	6
 13312  1E26  3002               	movlw	2	; select bank4/5
 13313  1E27  0087               	movwf	7
 13314  1E28  0801               	movf	1,w
 13315  1E29  0093               	movwf	19	;volatile
 13316                           
 13317                           ;MCU_B1.c: 1038: Flash_Memory_Unlock();
 13318  1E2A  3187  27F7  319E   	fcall	_Flash_Memory_Unlock
 13319  1E2D  3001               	movlw	1
 13320  1E2E  00F2               	movwf	??_Flash_Memory_Write
 13321  1E2F  0872               	movf	??_Flash_Memory_Write,w
 13322  1E30  07F3               	addwf	Flash_Memory_Write@i,f
 13323  1E31  3020               	movlw	32
 13324  1E32  0273               	subwf	Flash_Memory_Write@i,w
 13325  1E33  1C03               	skipc
 13326  1E34  2E20               	goto	l10411
 13327  1E35                     l1513:	
 13328                           
 13329                           ;MCU_B1.c: 1039: }
 13330                           ;MCU_B1.c: 1040: LWLO = 0;
 13331  1E35  0023               	movlb	3	; select bank3
 13332  1E36  1295               	bcf	21,5	;volatile
 13333                           
 13334                           ;MCU_B1.c: 1041: Flash_Memory_Unlock();
 13335  1E37  3187  27F7         	fcall	_Flash_Memory_Unlock
 13336                           
 13337                           ;MCU_B1.c: 1042: WREN = 0;
 13338  1E39  0023               	movlb	3	; select bank3
 13339  1E3A  1115               	bcf	21,2	;volatile
 13340  1E3B  0008               	return
 13341  1E3C                     __end_of_Flash_Memory_Write:	
 13342                           
 13343                           	psect	text85
 13344  07F7                     __ptext85:	
 13345 ;; *************** function _Flash_Memory_Unlock *****************
 13346 ;; Defined at:
 13347 ;;		line 1006 in file "../src/MCU_B1.c"
 13348 ;; Parameters:    Size  Location     Type
 13349 ;;		None
 13350 ;; Auto vars:     Size  Location     Type
 13351 ;;		None
 13352 ;; Return value:  Size  Location     Type
 13353 ;;		None               void
 13354 ;; Registers used:
 13355 ;;		wreg
 13356 ;; Tracked objects:
 13357 ;;		On entry : 0/0
 13358 ;;		On exit  : 0/0
 13359 ;;		Unchanged: 0/0
 13360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13365 ;;Total ram usage:        0 bytes
 13366 ;; Hardware stack levels used:    1
 13367 ;; Hardware stack levels required when called:    3
 13368 ;; This function calls:
 13369 ;;		Nothing
 13370 ;; This function is called by:
 13371 ;;		_Flash_Memory_Write
 13372 ;;		_Flash_Memory_Erasing
 13373 ;; This function uses a non-reentrant model
 13374 ;;
 13375                           
 13376                           
 13377                           ;psect for function _Flash_Memory_Unlock
 13378  07F7                     _Flash_Memory_Unlock:	
 13379                           
 13380                           ;MCU_B1.c: 1007: PMCON2 = 0x55;
 13381                           
 13382                           ;incstack = 0
 13383                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13384  07F7  3055               	movlw	85
 13385  07F8  0023               	movlb	3	; select bank3
 13386  07F9  0096               	movwf	22	;volatile
 13387                           
 13388                           ;MCU_B1.c: 1008: PMCON2 = 0xaa;
 13389  07FA  30AA               	movlw	170
 13390  07FB  0096               	movwf	22	;volatile
 13391                           
 13392                           ;MCU_B1.c: 1009: WR = 1;
 13393  07FC  1495               	bsf	21,1	;volatile
 13394                           
 13395                           ;MCU_B1.c: 1010: __nop();
 13396  07FD  0000               	nop
 13397                           
 13398                           ;MCU_B1.c: 1011: __nop();
 13399  07FE  0000               	nop
 13400  07FF  0008               	return
 13401  0800                     __end_of_Flash_Memory_Unlock:	
 13402                           
 13403                           	psect	text86
 13404  1066                     __ptext86:	
 13405 ;; *************** function _Flash_Memory_Read *****************
 13406 ;; Defined at:
 13407 ;;		line 1015 in file "../src/MCU_B1.c"
 13408 ;; Parameters:    Size  Location     Type
 13409 ;;  address         1    wreg     unsigned char 
 13410 ;; Auto vars:     Size  Location     Type
 13411 ;;  address         1    4[COMMON] unsigned char 
 13412 ;;  ret             1    5[COMMON] unsigned char 
 13413 ;;  i               1    3[COMMON] unsigned char 
 13414 ;; Return value:  Size  Location     Type
 13415 ;;                  1    wreg      unsigned char 
 13416 ;; Registers used:
 13417 ;;		wreg, status,2
 13418 ;; Tracked objects:
 13419 ;;		On entry : 0/0
 13420 ;;		On exit  : 0/0
 13421 ;;		Unchanged: 0/0
 13422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;Total ram usage:        4 bytes
 13428 ;; Hardware stack levels used:    1
 13429 ;; Hardware stack levels required when called:    3
 13430 ;; This function calls:
 13431 ;;		Nothing
 13432 ;; This function is called by:
 13433 ;;		_Flash_Memory_Initialization
 13434 ;;		_Flash_Memory_Modify
 13435 ;; This function uses a non-reentrant model
 13436 ;;
 13437                           
 13438                           
 13439                           ;psect for function _Flash_Memory_Read
 13440  1066                     _Flash_Memory_Read:	
 13441                           
 13442                           ;incstack = 0
 13443                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13444                           ;Flash_Memory_Read@address stored from wreg
 13445  1066  00F4               	movwf	Flash_Memory_Read@address
 13446                           
 13447                           ;MCU_B1.c: 1016: char i = 0, ret = 0;
 13448  1067  01F3               	clrf	Flash_Memory_Read@i
 13449  1068  01F5               	clrf	Flash_Memory_Read@ret
 13450                           
 13451                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 13452  1069  3030               	movlw	48
 13453  106A  0023               	movlb	3	; select bank3
 13454  106B  0092               	movwf	18	;volatile
 13455                           
 13456                           ;MCU_B1.c: 1018: PMADRL = address;
 13457  106C  0874               	movf	Flash_Memory_Read@address,w
 13458  106D  0091               	movwf	17	;volatile
 13459                           
 13460                           ;MCU_B1.c: 1019: CFGS = 0;
 13461  106E  1315               	bcf	21,6	;volatile
 13462                           
 13463                           ;MCU_B1.c: 1020: RD = 1;
 13464  106F  1415               	bsf	21,0	;volatile
 13465                           
 13466                           ;MCU_B1.c: 1021: i = PMDATH;
 13467  1070  0814               	movf	20,w	;volatile
 13468  1071  00F2               	movwf	??_Flash_Memory_Read
 13469  1072  0872               	movf	??_Flash_Memory_Read,w
 13470  1073  00F3               	movwf	Flash_Memory_Read@i
 13471                           
 13472                           ;MCU_B1.c: 1022: ret = PMDATL;
 13473  1074  0813               	movf	19,w	;volatile
 13474  1075  00F2               	movwf	??_Flash_Memory_Read
 13475  1076  0872               	movf	??_Flash_Memory_Read,w
 13476  1077  00F5               	movwf	Flash_Memory_Read@ret
 13477                           
 13478                           ;MCU_B1.c: 1023: return ret;
 13479  1078  0875               	movf	Flash_Memory_Read@ret,w
 13480  1079  0008               	return
 13481  107A                     __end_of_Flash_Memory_Read:	
 13482                           
 13483                           	psect	text87
 13484  052F                     __ptext87:	
 13485 ;; *************** function _Exception_Main *****************
 13486 ;; Defined at:
 13487 ;;		line 504 in file "../src/main_B1.c"
 13488 ;; Parameters:    Size  Location     Type
 13489 ;;		None
 13490 ;; Auto vars:     Size  Location     Type
 13491 ;;  i               2   11[BANK0 ] int 
 13492 ;;  i               2    9[BANK0 ] int 
 13493 ;;  lights          1   13[BANK0 ] unsigned char 
 13494 ;;  error           1    8[BANK0 ] unsigned char 
 13495 ;;  count           1    7[BANK0 ] unsigned char 
 13496 ;;  status          1    6[BANK0 ] unsigned char 
 13497 ;; Return value:  Size  Location     Type
 13498 ;;		None               void
 13499 ;; Registers used:
 13500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13501 ;; Tracked objects:
 13502 ;;		On entry : 0/0
 13503 ;;		On exit  : 0/0
 13504 ;;		Unchanged: 0/0
 13505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13508 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13510 ;;Total ram usage:        9 bytes
 13511 ;; Hardware stack levels used:    1
 13512 ;; Hardware stack levels required when called:    5
 13513 ;; This function calls:
 13514 ;;		_getDimmerLights_Line
 13515 ;;		_getDimmerLights_Status
 13516 ;;		_getMain_All_Error_Status
 13517 ;;		_getMain_All_LightsStatus
 13518 ;;		_setBuz
 13519 ;;		_setDimmerLights_SwOff
 13520 ;;		_setLED
 13521 ;; This function is called by:
 13522 ;;		_main
 13523 ;; This function uses a non-reentrant model
 13524 ;;
 13525                           
 13526                           
 13527                           ;psect for function _Exception_Main
 13528  052F                     _Exception_Main:	
 13529                           
 13530                           ;main_B1.c: 505: char error = getMain_All_Error_Status(0);
 13531                           
 13532                           ;incstack = 0
 13533                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13534  052F  3000               	movlw	0
 13535  0530  319E  263C  3185   	fcall	_getMain_All_Error_Status
 13536  0533  00F9               	movwf	??_Exception_Main
 13537  0534  0879               	movf	??_Exception_Main,w
 13538  0535  0020               	movlb	0	; select bank0
 13539  0536  00A8               	movwf	Exception_Main@error
 13540                           
 13541                           ;main_B1.c: 506: char lights = 0, count = 2;
 13542  0537  01AD               	clrf	Exception_Main@lights
 13543  0538  3002               	movlw	2
 13544  0539  00F9               	movwf	??_Exception_Main
 13545  053A  0879               	movf	??_Exception_Main,w
 13546  053B  00A7               	movwf	Exception_Main@count
 13547                           
 13548                           ;main_B1.c: 507: char status = 0;
 13549  053C  01A6               	clrf	Exception_Main@status
 13550                           
 13551                           ;main_B1.c: 509: if (myMain.Error_Run == 1) {
 13552  053D  0021               	movlb	1	; select bank1
 13553  053E  1DD9               	btfss	(_myMain^(0+128)+10),3
 13554  053F  2D4E               	goto	l11251
 13555                           
 13556                           ;main_B1.c: 510: if (error == 0) {
 13557  0540  0020               	movlb	0	; select bank0
 13558  0541  08A8               	movf	Exception_Main@error,f
 13559  0542  1D03               	skipz
 13560  0543  0008               	return
 13561                           
 13562                           ;main_B1.c: 511: myMain.Error_Run = 0;
 13563  0544  0021               	movlb	1	; select bank1
 13564  0545  11D9               	bcf	(_myMain^(0+128)+10),3
 13565                           
 13566                           ;main_B1.c: 514: setLED(99, 10);
 13567  0546  300A               	movlw	10
 13568  0547  00F9               	movwf	??_Exception_Main
 13569  0548  0879               	movf	??_Exception_Main,w
 13570  0549  00F4               	movwf	setLED@command
 13571  054A  3063               	movlw	99
 13572  054B  3194  24ED         	fcall	_setLED
 13573                           
 13574                           ;main_B1.c: 527: }
 13575                           ;main_B1.c: 528: } else {
 13576  054D  0008               	return
 13577  054E                     l11251:	
 13578                           
 13579                           ;main_B1.c: 529: if (error != 0) {
 13580  054E  0020               	movlb	0	; select bank0
 13581  054F  0828               	movf	Exception_Main@error,w
 13582  0550  1903               	btfsc	3,2
 13583  0551  0008               	return
 13584                           
 13585                           ;main_B1.c: 530: myMain.Error_Run = 1;
 13586  0552  0021               	movlb	1	; select bank1
 13587  0553  15D9               	bsf	(_myMain^(0+128)+10),3
 13588                           
 13589                           ;main_B1.c: 532: setLED(99, 11);
 13590  0554  300B               	movlw	11
 13591  0555  00F9               	movwf	??_Exception_Main
 13592  0556  0879               	movf	??_Exception_Main,w
 13593  0557  00F4               	movwf	setLED@command
 13594  0558  3063               	movlw	99
 13595  0559  3194  24ED  3185   	fcall	_setLED
 13596                           
 13597                           ;main_B1.c: 543: switch (error) {
 13598  055C  2DF6               	goto	l11299
 13599  055D                     l11257:	
 13600                           ;main_B1.c: 544: case 2:
 13601                           
 13602                           
 13603                           ;main_B1.c: 551: if (getMain_All_LightsStatus() == 1) {
 13604  055D  3199  2119  3185   	fcall	_getMain_All_LightsStatus
 13605  0560  3A01               	xorlw	1
 13606  0561  1D03               	skipz
 13607  0562  2D6C               	goto	l11261
 13608                           
 13609                           ;main_B1.c: 552: setBuz(10, 300);
 13610  0563  302C               	movlw	44
 13611  0564  0020               	movlb	0	; select bank0
 13612  0565  00A4               	movwf	setBuz@time
 13613  0566  3001               	movlw	1
 13614  0567  00A5               	movwf	setBuz@time+1
 13615  0568  300A               	movlw	10
 13616  0569  3192  22EC  3185   	fcall	_setBuz
 13617  056C                     l11261:	
 13618                           
 13619                           ;main_B1.c: 553: }
 13620                           ;main_B1.c: 555: for (int i = 0; i < count; i++) {
 13621  056C  0020               	movlb	0	; select bank0
 13622  056D  01A9               	clrf	Exception_Main@i
 13623  056E  01AA               	clrf	Exception_Main@i+1
 13624  056F                     l11271:	
 13625  056F  082A               	movf	Exception_Main@i+1,w
 13626  0570  3A80               	xorlw	128
 13627  0571  00F9               	movwf	??_Exception_Main
 13628  0572  3080               	movlw	128
 13629  0573  0279               	subwf	??_Exception_Main,w
 13630  0574  1D03               	skipz
 13631  0575  2D78               	goto	u13005
 13632  0576  0827               	movf	Exception_Main@count,w
 13633  0577  0229               	subwf	Exception_Main@i,w
 13634  0578                     u13005:	
 13635  0578  1803               	btfsc	3,0
 13636  0579  2D99               	goto	u13000
 13637                           
 13638                           ;main_B1.c: 557: if (getDimmerLights_Status(i + 1) == 1) {
 13639  057A  0020               	movlb	0	; select bank0
 13640  057B  0829               	movf	Exception_Main@i,w
 13641  057C  3E01               	addlw	1
 13642  057D  3198  20EC  3185   	fcall	_getDimmerLights_Status
 13643  0580  3A01               	xorlw	1
 13644  0581  1D03               	skipz
 13645  0582  2D93               	goto	l11269
 13646                           
 13647                           ;main_B1.c: 558: DimmerLights->SwFlag = 1;
 13648  0583  0020               	movlb	0	; select bank0
 13649  0584  086C               	movf	_DimmerLights,w
 13650  0585  0086               	movwf	6
 13651  0586  3001               	movlw	1	; select bank2/3
 13652  0587  0087               	movwf	7
 13653  0588  1401               	bsf	1,0
 13654                           
 13655                           ;main_B1.c: 559: DimmerLights->Status = 0;
 13656  0589  0A6C               	incf	_DimmerLights,w
 13657  058A  0086               	movwf	6
 13658  058B  3001               	movlw	1	; select bank2/3
 13659  058C  0087               	movwf	7
 13660  058D  1001               	bcf	1,0
 13661                           
 13662                           ;main_B1.c: 560: setDimmerLights_SwOff(i + 1);
 13663  058E  0829               	movf	Exception_Main@i,w
 13664  058F  3E01               	addlw	1
 13665  0590  3191  2122  3185   	fcall	_setDimmerLights_SwOff
 13666  0593                     l11269:	
 13667  0593  3001               	movlw	1
 13668  0594  0020               	movlb	0	; select bank0
 13669  0595  07A9               	addwf	Exception_Main@i,f
 13670  0596  3000               	movlw	0
 13671  0597  3DAA               	addwfc	Exception_Main@i+1,f
 13672  0598  2D6F               	goto	l11271
 13673  0599                     u13000:	
 13674  0599  0020               	movlb	0	; select bank0
 13675  059A  0008               	return
 13676  059B                     l11273:	
 13677                           ;main_B1.c: 566: case 3:
 13678                           
 13679                           ;main_B1.c: 561: }
 13680                           ;main_B1.c: 562: }
 13681                           ;main_B1.c: 565: break;
 13682                           
 13683                           
 13684                           ;main_B1.c: 568: setBuz(5, 300);
 13685  059B  302C               	movlw	44
 13686  059C  0020               	movlb	0	; select bank0
 13687  059D  00A4               	movwf	setBuz@time
 13688  059E  3001               	movlw	1
 13689  059F  00A5               	movwf	setBuz@time+1
 13690  05A0  3005               	movlw	5
 13691  05A1  3192  22EC  3185   	fcall	_setBuz
 13692                           
 13693                           ;main_B1.c: 569: lights = getDimmerLights_Line();
 13694  05A4  3199  2128  3185   	fcall	_getDimmerLights_Line
 13695  05A7  00F9               	movwf	??_Exception_Main
 13696  05A8  0879               	movf	??_Exception_Main,w
 13697  05A9  0020               	movlb	0	; select bank0
 13698  05AA  00AD               	movwf	Exception_Main@lights
 13699                           
 13700                           ;main_B1.c: 570: if (lights == 0) {
 13701  05AB  08AD               	movf	Exception_Main@lights,f
 13702  05AC  1D03               	skipz
 13703  05AD  2DDC               	goto	l11291
 13704                           
 13705                           ;main_B1.c: 572: for (int i = 0; i < count; i++) {
 13706  05AE  01AB               	clrf	Exception_Main@i_7782
 13707  05AF  01AC               	clrf	Exception_Main@i_7782+1
 13708  05B0                     l11289:	
 13709  05B0  082C               	movf	Exception_Main@i_7782+1,w
 13710  05B1  3A80               	xorlw	128
 13711  05B2  00F9               	movwf	??_Exception_Main
 13712  05B3  3080               	movlw	128
 13713  05B4  0279               	subwf	??_Exception_Main,w
 13714  05B5  1D03               	skipz
 13715  05B6  2DB9               	goto	u13035
 13716  05B7  0827               	movf	Exception_Main@count,w
 13717  05B8  022B               	subwf	Exception_Main@i_7782,w
 13718  05B9                     u13035:	
 13719  05B9  1803               	btfsc	3,0
 13720  05BA  2DDA               	goto	u13030
 13721                           
 13722                           ;main_B1.c: 574: if (getDimmerLights_Status(i + 1) == 1) {
 13723  05BB  0020               	movlb	0	; select bank0
 13724  05BC  082B               	movf	Exception_Main@i_7782,w
 13725  05BD  3E01               	addlw	1
 13726  05BE  3198  20EC  3185   	fcall	_getDimmerLights_Status
 13727  05C1  3A01               	xorlw	1
 13728  05C2  1D03               	skipz
 13729  05C3  2DD4               	goto	l11287
 13730                           
 13731                           ;main_B1.c: 575: DimmerLights->SwFlag = 1;
 13732  05C4  0020               	movlb	0	; select bank0
 13733  05C5  086C               	movf	_DimmerLights,w
 13734  05C6  0086               	movwf	6
 13735  05C7  3001               	movlw	1	; select bank2/3
 13736  05C8  0087               	movwf	7
 13737  05C9  1401               	bsf	1,0
 13738                           
 13739                           ;main_B1.c: 576: DimmerLights->Status = 0;
 13740  05CA  0A6C               	incf	_DimmerLights,w
 13741  05CB  0086               	movwf	6
 13742  05CC  3001               	movlw	1	; select bank2/3
 13743  05CD  0087               	movwf	7
 13744  05CE  1001               	bcf	1,0
 13745                           
 13746                           ;main_B1.c: 577: setDimmerLights_SwOff(i + 1);
 13747  05CF  082B               	movf	Exception_Main@i_7782,w
 13748  05D0  3E01               	addlw	1
 13749  05D1  3191  2122  3185   	fcall	_setDimmerLights_SwOff
 13750  05D4                     l11287:	
 13751  05D4  3001               	movlw	1
 13752  05D5  0020               	movlb	0	; select bank0
 13753  05D6  07AB               	addwf	Exception_Main@i_7782,f
 13754  05D7  3000               	movlw	0
 13755  05D8  3DAC               	addwfc	Exception_Main@i_7782+1,f
 13756  05D9  2DB0               	goto	l11289
 13757  05DA                     u13030:	
 13758  05DA  0020               	movlb	0	; select bank0
 13759  05DB  0008               	return
 13760  05DC                     l11291:	
 13761                           ;main_B1.c: 578: }
 13762                           ;main_B1.c: 579: }
 13763                           ;main_B1.c: 580: } else {
 13764                           
 13765                           
 13766                           ;main_B1.c: 582: if (getDimmerLights_Status(lights) == 1) {
 13767  05DC  0020               	movlb	0	; select bank0
 13768  05DD  082D               	movf	Exception_Main@lights,w
 13769  05DE  3198  20EC  3185   	fcall	_getDimmerLights_Status
 13770  05E1  3A01               	xorlw	1
 13771  05E2  1903               	btfsc	3,2
 13772  05E3  2DE6               	goto	l11293
 13773  05E4  0020               	movlb	0	; select bank0
 13774  05E5  0008               	return
 13775  05E6                     l11293:	
 13776                           
 13777                           ;main_B1.c: 584: DimmerLights->SwFlag = 1;
 13778  05E6  0020               	movlb	0	; select bank0
 13779  05E7  086C               	movf	_DimmerLights,w
 13780  05E8  0086               	movwf	6
 13781  05E9  3001               	movlw	1	; select bank2/3
 13782  05EA  0087               	movwf	7
 13783  05EB  1401               	bsf	1,0
 13784                           
 13785                           ;main_B1.c: 585: DimmerLights->Status = 0;
 13786  05EC  0A6C               	incf	_DimmerLights,w
 13787  05ED  0086               	movwf	6
 13788  05EE  3001               	movlw	1	; select bank2/3
 13789  05EF  0087               	movwf	7
 13790  05F0  1001               	bcf	1,0
 13791                           
 13792                           ;main_B1.c: 586: setDimmerLights_SwOff(lights);
 13793  05F1  082D               	movf	Exception_Main@lights,w
 13794  05F2  3191  2122         	fcall	_setDimmerLights_SwOff
 13795  05F4  0020               	movlb	0	; select bank0
 13796  05F5  0008               	return
 13797  05F6                     l11299:	
 13798                           ;main_B1.c: 591: }
 13799                           
 13800                           ;main_B1.c: 587: }
 13801                           ;main_B1.c: 588: }
 13802                           ;main_B1.c: 590: break;
 13803                           
 13804  05F6  0020               	movlb	0	; select bank0
 13805  05F7  0828               	movf	Exception_Main@error,w
 13806                           
 13807                           ; Switch size 1, requested type "space"
 13808                           ; Number of cases is 2, Range of values is 2 to 3
 13809                           ; switch strategies available:
 13810                           ; Name         Instructions Cycles
 13811                           ; simple_byte            7     4 (average)
 13812                           ; direct_byte           13     9 (fixed)
 13813                           ; jumptable            263     9 (fixed)
 13814                           ;	Chosen strategy is simple_byte
 13815  05F8  3A02               	xorlw	2	; case 2
 13816  05F9  1903               	skipnz
 13817  05FA  2D5D               	goto	l11257
 13818  05FB  3A01               	xorlw	1	; case 3
 13819  05FC  1903               	skipnz
 13820  05FD  2D9B               	goto	l11273
 13821  05FE  2E00               	goto	l3033
 13822  05FF  0008               	return
 13823  0600                     l3033:	
 13824  0600  0008               	return
 13825  0601                     __end_of_Exception_Main:	
 13826                           
 13827                           	psect	text88
 13828  1928                     __ptext88:	
 13829 ;; *************** function _getDimmerLights_Line *****************
 13830 ;; Defined at:
 13831 ;;		line 1238 in file "../src/Dimmer_B1.c"
 13832 ;; Parameters:    Size  Location     Type
 13833 ;;		None
 13834 ;; Auto vars:     Size  Location     Type
 13835 ;;  line            1    3[COMMON] unsigned char 
 13836 ;; Return value:  Size  Location     Type
 13837 ;;                  1    wreg      unsigned char 
 13838 ;; Registers used:
 13839 ;;		wreg, status,2
 13840 ;; Tracked objects:
 13841 ;;		On entry : 0/0
 13842 ;;		On exit  : 0/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;Total ram usage:        2 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; Hardware stack levels required when called:    3
 13852 ;; This function calls:
 13853 ;;		Nothing
 13854 ;; This function is called by:
 13855 ;;		_Exception_Main
 13856 ;; This function uses a non-reentrant model
 13857 ;;
 13858                           
 13859                           
 13860                           ;psect for function _getDimmerLights_Line
 13861  1928                     _getDimmerLights_Line:	
 13862                           
 13863                           ;Dimmer_B1.c: 1239: char line = 0;
 13864                           
 13865                           ;incstack = 0
 13866                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13867  1928  01F3               	clrf	getDimmerLights_Line@line
 13868                           
 13869                           ;Dimmer_B1.c: 1241: if (DimmerLights1.Line == 1) {
 13870  1929  0023               	movlb	3	; select bank3
 13871  192A  1CBF               	btfss	(_DimmerLights1^(0+384)+1),1
 13872  192B  292F               	goto	l960
 13873                           
 13874                           ;Dimmer_B1.c: 1242: line = 1;
 13875  192C  01F3               	clrf	getDimmerLights_Line@line
 13876  192D  0AF3               	incf	getDimmerLights_Line@line,f
 13877                           
 13878                           ;Dimmer_B1.c: 1243: }
 13879  192E  2935               	goto	l961
 13880  192F                     l960:	
 13881                           
 13882                           ;Dimmer_B1.c: 1246: else if (DimmerLights2.Line == 1) {
 13883  192F  1CC8               	btfss	(_DimmerLights2^(0+384)+1),1
 13884  1930  2935               	goto	l961
 13885                           
 13886                           ;Dimmer_B1.c: 1247: line = 2;
 13887  1931  3002               	movlw	2
 13888  1932  00F2               	movwf	??_getDimmerLights_Line
 13889  1933  0872               	movf	??_getDimmerLights_Line,w
 13890  1934  00F3               	movwf	getDimmerLights_Line@line
 13891  1935                     l961:	
 13892                           
 13893                           ;Dimmer_B1.c: 1248: }
 13894                           ;Dimmer_B1.c: 1255: return line;
 13895  1935  0873               	movf	getDimmerLights_Line@line,w
 13896  1936  0008               	return
 13897  1937                     __end_of_getDimmerLights_Line:	
 13898                           
 13899                           	psect	text89
 13900  1EF9                     __ptext89:	
 13901 ;; *************** function _DimmerLights_Main *****************
 13902 ;; Defined at:
 13903 ;;		line 867 in file "../src/Dimmer_B1.c"
 13904 ;; Parameters:    Size  Location     Type
 13905 ;;		None
 13906 ;; Auto vars:     Size  Location     Type
 13907 ;;		None
 13908 ;; Return value:  Size  Location     Type
 13909 ;;		None               void
 13910 ;; Registers used:
 13911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13912 ;; Tracked objects:
 13913 ;;		On entry : 0/0
 13914 ;;		On exit  : 0/0
 13915 ;;		Unchanged: 0/0
 13916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13921 ;;Total ram usage:        0 bytes
 13922 ;; Hardware stack levels used:    1
 13923 ;; Hardware stack levels required when called:    8
 13924 ;; This function calls:
 13925 ;;		_DimmerLights_DimmingFunction
 13926 ;;		_DimmerLights_TwoPhase_Main
 13927 ;;		_getLoad_OK
 13928 ;;		_getMain_All_Error_Status
 13929 ;;		_getMain_All_LightsStatus
 13930 ;;		_setDimmerLights_Main
 13931 ;; This function is called by:
 13932 ;;		_main
 13933 ;; This function uses a non-reentrant model
 13934 ;;
 13935                           
 13936                           
 13937                           ;psect for function _DimmerLights_Main
 13938  1EF9                     _DimmerLights_Main:	
 13939                           
 13940                           ;Dimmer_B1.c: 870: if (Dimmer.LoadGO == 1) {
 13941                           
 13942                           ;incstack = 0
 13943                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13944  1EF9  0022               	movlb	2	; select bank2
 13945  1EFA  1CA0               	btfss	_Dimmer^(0+256),1
 13946  1EFB  2F11               	goto	l10971
 13947                           
 13948                           ;Dimmer_B1.c: 871: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13949  1EFC  31A7  27EB  319E   	fcall	_getLoad_OK
 13950  1EFF  3A01               	xorlw	1
 13951  1F00  1903               	skipnz
 13952  1F01  2F0F               	goto	l886
 13953  1F02  3000               	movlw	0
 13954  1F03  319E  263C  319E   	fcall	_getMain_All_Error_Status
 13955  1F06  3800               	iorlw	0
 13956  1F07  1D03               	skipz
 13957  1F08  2F0F               	goto	l886
 13958  1F09  3199  2119  319E   	fcall	_getMain_All_LightsStatus
 13959  1F0C  3800               	iorlw	0
 13960  1F0D  1D03               	skipz
 13961  1F0E  2F11               	goto	l10971
 13962  1F0F                     l886:	
 13963                           
 13964                           ;Dimmer_B1.c: 872: Dimmer.LoadGO = 0;
 13965  1F0F  0022               	movlb	2	; select bank2
 13966  1F10  10A0               	bcf	_Dimmer^(0+256),1
 13967  1F11                     l10971:	
 13968                           
 13969                           ;Dimmer_B1.c: 873: }
 13970                           ;Dimmer_B1.c: 874: }
 13971                           ;Dimmer_B1.c: 879: setDimmerLights_Main(1);
 13972  1F11  3001               	movlw	1
 13973  1F12  3197  279B  319E   	fcall	_setDimmerLights_Main
 13974                           
 13975                           ;Dimmer_B1.c: 882: DimmerLights_DimmingFunction(1);
 13976  1F15  3001               	movlw	1
 13977  1F16  318C  2491  319E   	fcall	_DimmerLights_DimmingFunction
 13978                           
 13979                           ;Dimmer_B1.c: 886: DimmerLights_TwoPhase_Main(1);
 13980  1F19  3001               	movlw	1
 13981  1F1A  3193  2393  319E   	fcall	_DimmerLights_TwoPhase_Main
 13982                           
 13983                           ;Dimmer_B1.c: 892: setDimmerLights_Main(2);
 13984  1F1D  3002               	movlw	2
 13985  1F1E  3197  279B  319E   	fcall	_setDimmerLights_Main
 13986                           
 13987                           ;Dimmer_B1.c: 894: DimmerLights_DimmingFunction(2);
 13988  1F21  3002               	movlw	2
 13989  1F22  318C  2491  319E   	fcall	_DimmerLights_DimmingFunction
 13990                           
 13991                           ;Dimmer_B1.c: 898: DimmerLights_TwoPhase_Main(2);
 13992  1F25  3002               	movlw	2
 13993  1F26  3193  2393         	fcall	_DimmerLights_TwoPhase_Main
 13994  1F28  0008               	return
 13995  1F29                     __end_of_DimmerLights_Main:	
 13996                           
 13997                           	psect	text90
 13998  179B                     __ptext90:	
 13999 ;; *************** function _setDimmerLights_Main *****************
 14000 ;; Defined at:
 14001 ;;		line 924 in file "../src/Dimmer_B1.c"
 14002 ;; Parameters:    Size  Location     Type
 14003 ;;  lights          1    wreg     unsigned char 
 14004 ;; Auto vars:     Size  Location     Type
 14005 ;;  lights          1   73[BANK0 ] unsigned char 
 14006 ;; Return value:  Size  Location     Type
 14007 ;;		None               void
 14008 ;; Registers used:
 14009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14010 ;; Tracked objects:
 14011 ;;		On entry : 0/0
 14012 ;;		On exit  : 0/0
 14013 ;;		Unchanged: 0/0
 14014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14018 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14019 ;;Total ram usage:        1 bytes
 14020 ;; Hardware stack levels used:    1
 14021 ;; Hardware stack levels required when called:    7
 14022 ;; This function calls:
 14023 ;;		_DimmerLights_SelectPointer
 14024 ;;		_getDimmerLights_Allow_Condition
 14025 ;;		_getMain_All_LightsStatus
 14026 ;;		_setDimmerLights_Dimming
 14027 ;;		_setDimmerLights_OnOff
 14028 ;; This function is called by:
 14029 ;;		_DimmerLights_Main
 14030 ;; This function uses a non-reentrant model
 14031 ;;
 14032                           
 14033                           
 14034                           ;psect for function _setDimmerLights_Main
 14035  179B                     _setDimmerLights_Main:	
 14036                           
 14037                           ;incstack = 0
 14038                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14039                           ;setDimmerLights_Main@lights stored from wreg
 14040  179B  0020               	movlb	0	; select bank0
 14041  179C  00E9               	movwf	setDimmerLights_Main@lights
 14042                           
 14043                           ;Dimmer_B1.c: 926: DimmerLights_SelectPointer(lights);
 14044  179D  0869               	movf	setDimmerLights_Main@lights,w
 14045  179E  319A  2237  3197   	fcall	_DimmerLights_SelectPointer
 14046                           
 14047                           ;Dimmer_B1.c: 927: if (DimmerLights->Trigger == 1) {
 14048  17A1  0020               	movlb	0	; select bank0
 14049  17A2  086C               	movf	_DimmerLights,w
 14050  17A3  0086               	movwf	6
 14051  17A4  3001               	movlw	1	; select bank2/3
 14052  17A5  0087               	movwf	7
 14053  17A6  1C81               	btfss	1,1
 14054  17A7  2FC7               	goto	l10549
 14055                           
 14056                           ;Dimmer_B1.c: 928: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14057  17A8  0869               	movf	setDimmerLights_Main@lights,w
 14058  17A9  319F  27C9  3197   	fcall	_getDimmerLights_Allow_Condition
 14059  17AC  3800               	iorlw	0
 14060  17AD  1D03               	skipz
 14061  17AE  0008               	return
 14062                           
 14063                           ;Dimmer_B1.c: 929: DimmerLights->Trigger = 0;
 14064  17AF  0020               	movlb	0	; select bank0
 14065  17B0  086C               	movf	_DimmerLights,w
 14066  17B1  0086               	movwf	6
 14067  17B2  3001               	movlw	1	; select bank2/3
 14068  17B3  0087               	movwf	7
 14069  17B4  1081               	bcf	1,1
 14070                           
 14071                           ;Dimmer_B1.c: 930: if (DimmerLights->Switch == 1) {
 14072  17B5  086C               	movf	_DimmerLights,w
 14073  17B6  0086               	movwf	6
 14074  17B7  3001               	movlw	1	; select bank2/3
 14075  17B8  0087               	movwf	7
 14076  17B9  1D01               	btfss	1,2
 14077  17BA  2FC1               	goto	l10547
 14078                           
 14079                           ;Dimmer_B1.c: 931: setDimmerLights_OnOff(lights, 1);
 14080  17BB  01E5               	clrf	setDimmerLights_OnOff@command
 14081  17BC  0AE5               	incf	setDimmerLights_OnOff@command,f
 14082  17BD  0869               	movf	setDimmerLights_Main@lights,w
 14083  17BE  318F  2742         	fcall	_setDimmerLights_OnOff
 14084                           
 14085                           ;Dimmer_B1.c: 932: } else {
 14086  17C0  0008               	return
 14087  17C1                     l10547:	
 14088                           
 14089                           ;Dimmer_B1.c: 933: setDimmerLights_OnOff(lights, 0);
 14090  17C1  0020               	movlb	0	; select bank0
 14091  17C2  01E5               	clrf	setDimmerLights_OnOff@command
 14092  17C3  0869               	movf	setDimmerLights_Main@lights,w
 14093  17C4  318F  2742         	fcall	_setDimmerLights_OnOff
 14094                           
 14095                           ;Dimmer_B1.c: 934: }
 14096                           ;Dimmer_B1.c: 935: }
 14097                           ;Dimmer_B1.c: 936: } else {
 14098  17C6  0008               	return
 14099  17C7                     l10549:	
 14100                           
 14101                           ;Dimmer_B1.c: 937: if (getMain_All_LightsStatus() == 1) {
 14102  17C7  3199  2119  3197   	fcall	_getMain_All_LightsStatus
 14103  17CA  3A01               	xorlw	1
 14104  17CB  1D03               	skipz
 14105  17CC  2FF3               	goto	l10561
 14106                           
 14107                           ;Dimmer_B1.c: 938: if (DimmerLights->DimmingTrigger == 1) {
 14108  17CD  0020               	movlb	0	; select bank0
 14109  17CE  086C               	movf	_DimmerLights,w
 14110  17CF  0086               	movwf	6
 14111  17D0  3001               	movlw	1	; select bank2/3
 14112  17D1  0087               	movwf	7
 14113  17D2  1E01               	btfss	1,4
 14114  17D3  0008               	return
 14115                           
 14116                           ;Dimmer_B1.c: 939: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14117  17D4  0869               	movf	setDimmerLights_Main@lights,w
 14118  17D5  319F  27C9  3197   	fcall	_getDimmerLights_Allow_Condition
 14119  17D8  3800               	iorlw	0
 14120  17D9  1D03               	skipz
 14121  17DA  0008               	return
 14122                           
 14123                           ;Dimmer_B1.c: 940: DimmerLights->DimmingTrigger = 0;
 14124  17DB  0020               	movlb	0	; select bank0
 14125  17DC  086C               	movf	_DimmerLights,w
 14126  17DD  0086               	movwf	6
 14127  17DE  3001               	movlw	1	; select bank2/3
 14128  17DF  0087               	movwf	7
 14129  17E0  1201               	bcf	1,4
 14130                           
 14131                           ;Dimmer_B1.c: 941: if (DimmerLights->DimmingSwitch == 1) {
 14132  17E1  086C               	movf	_DimmerLights,w
 14133  17E2  0086               	movwf	6
 14134  17E3  3001               	movlw	1	; select bank2/3
 14135  17E4  0087               	movwf	7
 14136  17E5  1E81               	btfss	1,5
 14137  17E6  2FED               	goto	l10559
 14138                           
 14139                           ;Dimmer_B1.c: 942: setDimmerLights_Dimming(lights, 1);
 14140  17E7  01E2               	clrf	setDimmerLights_Dimming@status
 14141  17E8  0AE2               	incf	setDimmerLights_Dimming@status,f
 14142  17E9  0869               	movf	setDimmerLights_Main@lights,w
 14143  17EA  3193  23E7         	fcall	_setDimmerLights_Dimming
 14144                           
 14145                           ;Dimmer_B1.c: 943: } else {
 14146  17EC  0008               	return
 14147  17ED                     l10559:	
 14148                           
 14149                           ;Dimmer_B1.c: 944: setDimmerLights_Dimming(lights, 0);
 14150  17ED  0020               	movlb	0	; select bank0
 14151  17EE  01E2               	clrf	setDimmerLights_Dimming@status
 14152  17EF  0869               	movf	setDimmerLights_Main@lights,w
 14153  17F0  3193  23E7         	fcall	_setDimmerLights_Dimming
 14154                           
 14155                           ;Dimmer_B1.c: 945: }
 14156                           ;Dimmer_B1.c: 946: }
 14157                           ;Dimmer_B1.c: 947: }
 14158                           ;Dimmer_B1.c: 948: } else {
 14159  17F2  0008               	return
 14160  17F3                     l10561:	
 14161                           
 14162                           ;Dimmer_B1.c: 949: if (DimmerLights->DimmingTrigger == 1) {
 14163  17F3  0020               	movlb	0	; select bank0
 14164  17F4  086C               	movf	_DimmerLights,w
 14165  17F5  0086               	movwf	6
 14166  17F6  3001               	movlw	1	; select bank2/3
 14167  17F7  0087               	movwf	7
 14168  17F8  1E01               	btfss	1,4
 14169  17F9  0008               	return
 14170                           
 14171                           ;Dimmer_B1.c: 950: DimmerLights->DimmingTrigger = 0;
 14172  17FA  086C               	movf	_DimmerLights,w
 14173  17FB  0086               	movwf	6
 14174  17FC  3001               	movlw	1	; select bank2/3
 14175  17FD  0087               	movwf	7
 14176  17FE  1201               	bcf	1,4
 14177  17FF  0008               	return
 14178  1800                     __end_of_setDimmerLights_Main:	
 14179                           
 14180                           	psect	text91
 14181  0F42                     __ptext91:	
 14182 ;; *************** function _setDimmerLights_OnOff *****************
 14183 ;; Defined at:
 14184 ;;		line 1001 in file "../src/Dimmer_B1.c"
 14185 ;; Parameters:    Size  Location     Type
 14186 ;;  lights          1    wreg     unsigned char 
 14187 ;;  command         1   69[BANK0 ] unsigned char 
 14188 ;; Auto vars:     Size  Location     Type
 14189 ;;  lights          1   72[BANK0 ] unsigned char 
 14190 ;; Return value:  Size  Location     Type
 14191 ;;		None               void
 14192 ;; Registers used:
 14193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14194 ;; Tracked objects:
 14195 ;;		On entry : 0/0
 14196 ;;		On exit  : 0/0
 14197 ;;		Unchanged: 0/0
 14198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14199 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;Total ram usage:        4 bytes
 14204 ;; Hardware stack levels used:    1
 14205 ;; Hardware stack levels required when called:    6
 14206 ;; This function calls:
 14207 ;;		_DimmerIntr_ValueCalculate
 14208 ;;		_getCmd_Status
 14209 ;;		_getDelayOff_GO
 14210 ;;		_getDimmerLights_PercentToValue
 14211 ;;		_getMain_All_LightsStatus
 14212 ;;		_setCmd_Status
 14213 ;;		_setDelayOff_GO
 14214 ;;		_setDimmerIntr_ControlStatus
 14215 ;;		_setDimmerIntr_DimmingValue
 14216 ;;		_setDimmerIntr_Dimming_RF
 14217 ;;		_setDimmerIntr_MaxmumValue
 14218 ;;		_setDimmerLights_DimmingClose
 14219 ;;		_setDimmerLights_Line
 14220 ;;		_setLED
 14221 ;;		_setProductData
 14222 ;;		_setRF_DimmerLights
 14223 ;;		_setTxData
 14224 ;; This function is called by:
 14225 ;;		_setDimmerLights_Main
 14226 ;; This function uses a non-reentrant model
 14227 ;;
 14228                           
 14229                           
 14230                           ;psect for function _setDimmerLights_OnOff
 14231  0F42                     _setDimmerLights_OnOff:	
 14232                           
 14233                           ;incstack = 0
 14234                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14235                           ;setDimmerLights_OnOff@lights stored from wreg
 14236  0F42  0020               	movlb	0	; select bank0
 14237  0F43  00E8               	movwf	setDimmerLights_OnOff@lights
 14238                           
 14239                           ;Dimmer_B1.c: 1003: if (command == 1) {
 14240  0F44  0865               	movf	setDimmerLights_OnOff@command,w
 14241  0F45  3A01               	xorlw	1
 14242  0F46  1D03               	skipz
 14243  0F47  2FA0               	goto	l10299
 14244                           
 14245                           ;Dimmer_B1.c: 1005: setDimmerIntr_ControlStatus(lights, 1);
 14246  0F48  01F2               	clrf	setDimmerIntr_ControlStatus@command
 14247  0F49  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 14248  0F4A  0868               	movf	setDimmerLights_OnOff@lights,w
 14249  0F4B  319D  25E9  318F   	fcall	_setDimmerIntr_ControlStatus
 14250                           
 14251                           ;Dimmer_B1.c: 1008: Dimmer.Load_Status = 1;
 14252  0F4E  0022               	movlb	2	; select bank2
 14253  0F4F  1520               	bsf	_Dimmer^(0+256),2
 14254                           
 14255                           ;Dimmer_B1.c: 1009: setDimmerLights_Line(lights);
 14256  0F50  0020               	movlb	0	; select bank0
 14257  0F51  0868               	movf	setDimmerLights_OnOff@lights,w
 14258  0F52  319B  230C  318F   	fcall	_setDimmerLights_Line
 14259                           
 14260                           ;Dimmer_B1.c: 1015: setLED(lights, 0);
 14261  0F55  01F4               	clrf	setLED@command
 14262  0F56  0020               	movlb	0	; select bank0
 14263  0F57  0868               	movf	setDimmerLights_OnOff@lights,w
 14264  0F58  3194  24ED  318F   	fcall	_setLED
 14265                           
 14266                           ;Dimmer_B1.c: 1036: if (DimmerLights->DimmingRun == 1) {
 14267  0F5B  0020               	movlb	0	; select bank0
 14268  0F5C  0A6C               	incf	_DimmerLights,w
 14269  0F5D  0086               	movwf	6
 14270  0F5E  3001               	movlw	1	; select bank2/3
 14271  0F5F  0087               	movwf	7
 14272  0F60  1F01               	btfss	1,6
 14273  0F61  2F83               	goto	l10289
 14274                           
 14275                           ;Dimmer_B1.c: 1037: DimmerLights->DimmingRun = 0;
 14276  0F62  0A6C               	incf	_DimmerLights,w
 14277  0F63  0086               	movwf	6
 14278  0F64  3001               	movlw	1	; select bank2/3
 14279  0F65  0087               	movwf	7
 14280  0F66  1301               	bcf	1,6
 14281                           
 14282                           ;Dimmer_B1.c: 1038: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14283  0F67  0868               	movf	setDimmerLights_OnOff@lights,w
 14284  0F68  3E14               	addlw	20
 14285  0F69  077B               	addwf	_product,w
 14286  0F6A  00E6               	movwf	??_setDimmerLights_OnOff
 14287  0F6B  0866               	movf	??_setDimmerLights_OnOff,w
 14288  0F6C  0086               	movwf	6
 14289  0F6D  3002               	movlw	2	; select bank4/5
 14290  0F6E  0087               	movwf	7
 14291  0F6F  0801               	movf	1,w
 14292  0F70  3196  26D1  318F   	fcall	_getDimmerLights_PercentToValue
 14293  0F73  0020               	movlb	0	; select bank0
 14294  0F74  00E7               	movwf	??_setDimmerLights_OnOff+1
 14295  0F75  0867               	movf	??_setDimmerLights_OnOff+1,w
 14296  0F76  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 14297  0F77  0868               	movf	setDimmerLights_OnOff@lights,w
 14298  0F78  319A  22F5  318F   	fcall	_setDimmerIntr_MaxmumValue
 14299                           
 14300                           ;Dimmer_B1.c: 1039: setDimmerIntr_Dimming_RF(lights, 1);
 14301  0F7B  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 14302  0F7C  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 14303  0F7D  0020               	movlb	0	; select bank0
 14304  0F7E  0868               	movf	setDimmerLights_OnOff@lights,w
 14305  0F7F  319D  25C0  318F   	fcall	_setDimmerIntr_Dimming_RF
 14306                           
 14307                           ;Dimmer_B1.c: 1040: } else {
 14308  0F82  2F8C               	goto	l10291
 14309  0F83                     l10289:	
 14310                           
 14311                           ;Dimmer_B1.c: 1045: setDimmerIntr_DimmingValue(lights, ((char)(5*0.55))+((((char)(77*0.5
      +                          5))-((char)(5*0.55)))/2));
 14312  0F83  3016               	movlw	22
 14313  0F84  0020               	movlb	0	; select bank0
 14314  0F85  00E6               	movwf	??_setDimmerLights_OnOff
 14315  0F86  0866               	movf	??_setDimmerLights_OnOff,w
 14316  0F87  00F2               	movwf	setDimmerIntr_DimmingValue@value
 14317  0F88  0868               	movf	setDimmerLights_OnOff@lights,w
 14318  0F89  319A  2261  318F   	fcall	_setDimmerIntr_DimmingValue
 14319  0F8C                     l10291:	
 14320                           
 14321                           ;Dimmer_B1.c: 1049: }
 14322                           ;Dimmer_B1.c: 1051: if (lights == 1) {
 14323  0F8C  0020               	movlb	0	; select bank0
 14324  0F8D  0868               	movf	setDimmerLights_OnOff@lights,w
 14325  0F8E  3A01               	xorlw	1
 14326  0F8F  1D03               	skipz
 14327  0F90  2F96               	goto	l10295
 14328                           
 14329                           ;Dimmer_B1.c: 1054: DimmerIntr_ValueCalculate(1);
 14330  0F91  3001               	movlw	1
 14331  0F92  3194  243B  318F   	fcall	_DimmerIntr_ValueCalculate
 14332                           
 14333                           ;Dimmer_B1.c: 1056: } else if (lights == 2) {
 14334  0F95  2FD0               	goto	l10317
 14335  0F96                     l10295:	
 14336  0F96  0020               	movlb	0	; select bank0
 14337  0F97  0868               	movf	setDimmerLights_OnOff@lights,w
 14338  0F98  3A02               	xorlw	2
 14339  0F99  1D03               	skipz
 14340  0F9A  2FD0               	goto	l10317
 14341                           
 14342                           ;Dimmer_B1.c: 1059: DimmerIntr_ValueCalculate(2);
 14343  0F9B  3002               	movlw	2
 14344  0F9C  3194  243B  318F   	fcall	_DimmerIntr_ValueCalculate
 14345                           
 14346                           ;Dimmer_B1.c: 1061: }
 14347                           ;Dimmer_B1.c: 1067: } else if (command == 0) {
 14348  0F9F  2FD0               	goto	l10317
 14349  0FA0                     l10299:	
 14350  0FA0  0020               	movlb	0	; select bank0
 14351  0FA1  08E5               	movf	setDimmerLights_OnOff@command,f
 14352  0FA2  1D03               	skipz
 14353  0FA3  2FD0               	goto	l10317
 14354                           
 14355                           ;Dimmer_B1.c: 1069: setDimmerIntr_ControlStatus(lights, 0);
 14356  0FA4  01F2               	clrf	setDimmerIntr_ControlStatus@command
 14357  0FA5  0868               	movf	setDimmerLights_OnOff@lights,w
 14358  0FA6  319D  25E9  318F   	fcall	_setDimmerIntr_ControlStatus
 14359                           
 14360                           ;Dimmer_B1.c: 1071: Dimmer.Load_Status = 0;
 14361  0FA9  0022               	movlb	2	; select bank2
 14362  0FAA  1120               	bcf	_Dimmer^(0+256),2
 14363                           
 14364                           ;Dimmer_B1.c: 1072: setDimmerLights_Line(0);
 14365  0FAB  3000               	movlw	0
 14366  0FAC  319B  230C  318F   	fcall	_setDimmerLights_Line
 14367                           
 14368                           ;Dimmer_B1.c: 1076: if (getDelayOff_GO(lights) == 1) {
 14369  0FAF  0020               	movlb	0	; select bank0
 14370  0FB0  0868               	movf	setDimmerLights_OnOff@lights,w
 14371  0FB1  3199  210A  318F   	fcall	_getDelayOff_GO
 14372  0FB4  3A01               	xorlw	1
 14373  0FB5  1D03               	skipz
 14374  0FB6  2FBE               	goto	l926
 14375                           
 14376                           ;Dimmer_B1.c: 1077: setDelayOff_GO(lights, 0, 0);
 14377  0FB7  0020               	movlb	0	; select bank0
 14378  0FB8  01DD               	clrf	setDelayOff_GO@command
 14379  0FB9  01DE               	clrf	setDelayOff_GO@value
 14380  0FBA  0868               	movf	setDimmerLights_OnOff@lights,w
 14381  0FBB  318B  236A  318F   	fcall	_setDelayOff_GO
 14382  0FBE                     l926:	
 14383                           
 14384                           ;Dimmer_B1.c: 1078: }
 14385                           ;Dimmer_B1.c: 1083: setLED(lights, 1);
 14386  0FBE  01F4               	clrf	setLED@command
 14387  0FBF  0AF4               	incf	setLED@command,f
 14388  0FC0  0020               	movlb	0	; select bank0
 14389  0FC1  0868               	movf	setDimmerLights_OnOff@lights,w
 14390  0FC2  3194  24ED  318F   	fcall	_setLED
 14391                           
 14392                           ;Dimmer_B1.c: 1088: if (lights == 1) {
 14393  0FC5  0020               	movlb	0	; select bank0
 14394  0FC6  0868               	movf	setDimmerLights_OnOff@lights,w
 14395  0FC7  3A01               	xorlw	1
 14396  0FC8  1D03               	skipz
 14397  0FC9  2FCC               	goto	l10313
 14398                           
 14399                           ;Dimmer_B1.c: 1090: RB4 = 0;
 14400  0FCA  120D               	bcf	13,4	;volatile
 14401                           
 14402                           ;Dimmer_B1.c: 1096: }
 14403  0FCB  2FD0               	goto	l10317
 14404  0FCC                     l10313:	
 14405                           
 14406                           ;Dimmer_B1.c: 1099: else if (lights == 2) {
 14407  0FCC  0868               	movf	setDimmerLights_OnOff@lights,w
 14408  0FCD  3A02               	xorlw	2
 14409  0FCE  1903               	btfsc	3,2
 14410                           
 14411                           ;Dimmer_B1.c: 1101: RA7 = 0;
 14412  0FCF  138C               	bcf	12,7	;volatile
 14413  0FD0                     l10317:	
 14414                           
 14415                           ;Dimmer_B1.c: 1106: }
 14416                           ;Dimmer_B1.c: 1122: }
 14417                           ;Dimmer_B1.c: 1124: setDimmerLights_DimmingClose();
 14418  0FD0  3198  2041  318F   	fcall	_setDimmerLights_DimmingClose
 14419                           
 14420                           ;Dimmer_B1.c: 1126: setRF_DimmerLights(lights, command);
 14421  0FD3  0020               	movlb	0	; select bank0
 14422  0FD4  0865               	movf	setDimmerLights_OnOff@command,w
 14423  0FD5  00E6               	movwf	??_setDimmerLights_OnOff
 14424  0FD6  0866               	movf	??_setDimmerLights_OnOff,w
 14425  0FD7  00DD               	movwf	setRF_DimmerLights@on
 14426  0FD8  0868               	movf	setDimmerLights_OnOff@lights,w
 14427  0FD9  3188  202B  318F   	fcall	_setRF_DimmerLights
 14428                           
 14429                           ;Dimmer_B1.c: 1128: if (getCmd_Status(1) == 1) {
 14430  0FDC  3001               	movlw	1
 14431  0FDD  3199  2157  318F   	fcall	_getCmd_Status
 14432  0FE0  3A01               	xorlw	1
 14433  0FE1  1D03               	skipz
 14434  0FE2  2FFD               	goto	l10333
 14435                           
 14436                           ;Dimmer_B1.c: 1129: if (getMain_All_LightsStatus() == 0) {
 14437  0FE3  3199  2119  318F   	fcall	_getMain_All_LightsStatus
 14438  0FE6  3800               	iorlw	0
 14439  0FE7  1D03               	skipz
 14440  0FE8  0008               	return
 14441                           
 14442                           ;Dimmer_B1.c: 1130: setCmd_Status(1, 0);
 14443  0FE9  01F2               	clrf	setCmd_Status@cmd
 14444  0FEA  3001               	movlw	1
 14445  0FEB  319A  224C  318F   	fcall	_setCmd_Status
 14446                           
 14447                           ;Dimmer_B1.c: 1131: setProductData(11, 0);
 14448  0FEE  0020               	movlb	0	; select bank0
 14449  0FEF  01DA               	clrf	setProductData@value
 14450  0FF0  300B               	movlw	11
 14451  0FF1  3198  20A2  318F   	fcall	_setProductData
 14452                           
 14453                           ;Dimmer_B1.c: 1132: setProductData(17, 0);
 14454  0FF4  0020               	movlb	0	; select bank0
 14455  0FF5  01DA               	clrf	setProductData@value
 14456  0FF6  3011               	movlw	17
 14457  0FF7  3198  20A2  318F   	fcall	_setProductData
 14458                           
 14459                           ;Dimmer_B1.c: 1133: setTxData();
 14460  0FFA  31A7  27F2         	fcall	_setTxData
 14461                           
 14462                           ;Dimmer_B1.c: 1134: }
 14463                           ;Dimmer_B1.c: 1135: } else {
 14464  0FFC  0008               	return
 14465  0FFD                     l10333:	
 14466                           
 14467                           ;Dimmer_B1.c: 1136: setTxData();
 14468  0FFD  31A7  27F2         	fcall	_setTxData
 14469  0FFF  0008               	return
 14470  1000                     __end_of_setDimmerLights_OnOff:	
 14471                           
 14472                           	psect	text92
 14473  14ED                     __ptext92:	
 14474 ;; *************** function _setLED *****************
 14475 ;; Defined at:
 14476 ;;		line 81 in file "../src/LED_B1.c"
 14477 ;; Parameters:    Size  Location     Type
 14478 ;;  led             1    wreg     unsigned char 
 14479 ;;  command         1    4[COMMON] unsigned char 
 14480 ;; Auto vars:     Size  Location     Type
 14481 ;;  led             1    5[COMMON] unsigned char 
 14482 ;; Return value:  Size  Location     Type
 14483 ;;		None               void
 14484 ;; Registers used:
 14485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14486 ;; Tracked objects:
 14487 ;;		On entry : 0/0
 14488 ;;		On exit  : 0/0
 14489 ;;		Unchanged: 0/0
 14490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14491 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;Total ram usage:        2 bytes
 14496 ;; Hardware stack levels used:    1
 14497 ;; Hardware stack levels required when called:    4
 14498 ;; This function calls:
 14499 ;;		_LedPointSelect
 14500 ;; This function is called by:
 14501 ;;		_setDimmerLights_OnOff
 14502 ;;		_setLED_Initialization
 14503 ;;		_setSw_Initialization
 14504 ;;		_Exception_Main
 14505 ;; This function uses a non-reentrant model
 14506 ;;
 14507                           
 14508                           
 14509                           ;psect for function _setLED
 14510  14ED                     _setLED:	
 14511                           
 14512                           ;incstack = 0
 14513                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14514                           ;setLED@led stored from wreg
 14515  14ED  00F5               	movwf	setLED@led
 14516                           
 14517                           ;LED_B1.c: 82: LedPointSelect(led);
 14518  14EE  0875               	movf	setLED@led,w
 14519  14EF  319C  240E  3194   	fcall	_LedPointSelect
 14520                           
 14521                           ;LED_B1.c: 83: if (command == 0) {
 14522  14F2  08F4               	movf	setLED@command,f
 14523  14F3  1D03               	skipz
 14524  14F4  2D07               	goto	l7577
 14525                           
 14526                           ;LED_B1.c: 85: if (led == 1) {
 14527  14F5  0875               	movf	setLED@led,w
 14528  14F6  3A01               	xorlw	1
 14529  14F7  1D03               	skipz
 14530  14F8  2CFB               	goto	l7569
 14531                           
 14532                           ;LED_B1.c: 89: RC7 = 1;
 14533  14F9  0020               	movlb	0	; select bank0
 14534  14FA  178E               	bsf	14,7	;volatile
 14535  14FB                     l7569:	
 14536                           
 14537                           ;LED_B1.c: 91: }
 14538                           ;LED_B1.c: 94: if (led == 2) {
 14539  14FB  0875               	movf	setLED@led,w
 14540  14FC  3A02               	xorlw	2
 14541  14FD  1D03               	skipz
 14542  14FE  2D01               	goto	l7573
 14543                           
 14544                           ;LED_B1.c: 98: RA3 = 1;
 14545  14FF  0020               	movlb	0	; select bank0
 14546  1500  158C               	bsf	12,3	;volatile
 14547  1501                     l7573:	
 14548                           
 14549                           ;LED_B1.c: 100: }
 14550                           ;LED_B1.c: 112: if (led == 99) {
 14551  1501  0875               	movf	setLED@led,w
 14552  1502  3A63               	xorlw	99
 14553  1503  1D03               	skipz
 14554  1504  2D07               	goto	l7577
 14555                           
 14556                           ;LED_B1.c: 116: RB5 = 1;
 14557  1505  0020               	movlb	0	; select bank0
 14558  1506  168D               	bsf	13,5	;volatile
 14559  1507                     l7577:	
 14560                           
 14561                           ;LED_B1.c: 118: }
 14562                           ;LED_B1.c: 120: }
 14563                           ;LED_B1.c: 121: if (command == 1) {
 14564  1507  0874               	movf	setLED@command,w
 14565  1508  3A01               	xorlw	1
 14566  1509  1D03               	skipz
 14567  150A  2D1D               	goto	l7591
 14568                           
 14569                           ;LED_B1.c: 123: if (led == 1) {
 14570  150B  0875               	movf	setLED@led,w
 14571  150C  3A01               	xorlw	1
 14572  150D  1D03               	skipz
 14573  150E  2D11               	goto	l7583
 14574                           
 14575                           ;LED_B1.c: 127: RC7 = 0;
 14576  150F  0020               	movlb	0	; select bank0
 14577  1510  138E               	bcf	14,7	;volatile
 14578  1511                     l7583:	
 14579                           
 14580                           ;LED_B1.c: 129: }
 14581                           ;LED_B1.c: 132: if (led == 2) {
 14582  1511  0875               	movf	setLED@led,w
 14583  1512  3A02               	xorlw	2
 14584  1513  1D03               	skipz
 14585  1514  2D17               	goto	l7587
 14586                           
 14587                           ;LED_B1.c: 136: RA3 = 0;
 14588  1515  0020               	movlb	0	; select bank0
 14589  1516  118C               	bcf	12,3	;volatile
 14590  1517                     l7587:	
 14591                           
 14592                           ;LED_B1.c: 138: }
 14593                           ;LED_B1.c: 150: if (led == 99) {
 14594  1517  0875               	movf	setLED@led,w
 14595  1518  3A63               	xorlw	99
 14596  1519  1D03               	skipz
 14597  151A  2D1D               	goto	l7591
 14598                           
 14599                           ;LED_B1.c: 154: RB5 = 0;
 14600  151B  0020               	movlb	0	; select bank0
 14601  151C  128D               	bcf	13,5	;volatile
 14602  151D                     l7591:	
 14603                           
 14604                           ;LED_B1.c: 156: }
 14605                           ;LED_B1.c: 158: }
 14606                           ;LED_B1.c: 159: if (command == 10) {
 14607  151D  0874               	movf	setLED@command,w
 14608  151E  3A0A               	xorlw	10
 14609  151F  1D03               	skipz
 14610  1520  2D41               	goto	l7607
 14611                           
 14612                           ;LED_B1.c: 160: LED->GO = 0;
 14613  1521  0021               	movlb	1	; select bank1
 14614  1522  086B               	movf	_LED^(0+128),w
 14615  1523  0086               	movwf	6
 14616  1524  3001               	movlw	1	; select bank2/3
 14617  1525  0087               	movwf	7
 14618  1526  1081               	bcf	1,1
 14619                           
 14620                           ;LED_B1.c: 161: LED->Time = 0;
 14621  1527  0A6B               	incf	_LED^(0+128),w
 14622  1528  0086               	movwf	6
 14623  1529  3001               	movlw	1	; select bank2/3
 14624  152A  0087               	movwf	7
 14625  152B  3000               	movlw	0
 14626  152C  3FC0               	movwi [0]fsr1
 14627  152D  3FC1               	movwi [1]fsr1
 14628                           
 14629                           ;LED_B1.c: 163: if (led == 1) {
 14630  152E  0875               	movf	setLED@led,w
 14631  152F  3A01               	xorlw	1
 14632  1530  1D03               	skipz
 14633  1531  2D35               	goto	l7599
 14634                           
 14635                           ;LED_B1.c: 167: RC7 = 1;
 14636  1532  0020               	movlb	0	; select bank0
 14637  1533  178E               	bsf	14,7	;volatile
 14638                           
 14639                           ;LED_B1.c: 169: }
 14640  1534  2D3B               	goto	l7603
 14641  1535                     l7599:	
 14642                           
 14643                           ;LED_B1.c: 172: else if (led == 2) {
 14644  1535  0875               	movf	setLED@led,w
 14645  1536  3A02               	xorlw	2
 14646  1537  1D03               	skipz
 14647  1538  2D3B               	goto	l7603
 14648                           
 14649                           ;LED_B1.c: 176: RA3 = 1;
 14650  1539  0020               	movlb	0	; select bank0
 14651  153A  158C               	bsf	12,3	;volatile
 14652  153B                     l7603:	
 14653                           
 14654                           ;LED_B1.c: 178: }
 14655                           ;LED_B1.c: 190: if (led == 99) {
 14656  153B  0875               	movf	setLED@led,w
 14657  153C  3A63               	xorlw	99
 14658  153D  1D03               	skipz
 14659  153E  2D41               	goto	l7607
 14660                           
 14661                           ;LED_B1.c: 194: RB5 = 1;
 14662  153F  0020               	movlb	0	; select bank0
 14663  1540  168D               	bsf	13,5	;volatile
 14664  1541                     l7607:	
 14665                           
 14666                           ;LED_B1.c: 196: }
 14667                           ;LED_B1.c: 198: }
 14668                           ;LED_B1.c: 199: if (command == 11) {
 14669  1541  0874               	movf	setLED@command,w
 14670  1542  3A0B               	xorlw	11
 14671  1543  1D03               	skipz
 14672  1544  0008               	return
 14673                           
 14674                           ;LED_B1.c: 200: LED->GO = 1;
 14675  1545  0021               	movlb	1	; select bank1
 14676  1546  086B               	movf	_LED^(0+128),w
 14677  1547  0086               	movwf	6
 14678  1548  3001               	movlw	1	; select bank2/3
 14679  1549  0087               	movwf	7
 14680  154A  1481               	bsf	1,1
 14681  154B  0008               	return
 14682  154C                     __end_of_setLED:	
 14683                           
 14684                           	psect	text93
 14685  1C0E                     __ptext93:	
 14686 ;; *************** function _LedPointSelect *****************
 14687 ;; Defined at:
 14688 ;;		line 7 in file "../src/LED_B1.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;  led             1    wreg     unsigned char 
 14691 ;; Auto vars:     Size  Location     Type
 14692 ;;  led             1    3[COMMON] unsigned char 
 14693 ;; Return value:  Size  Location     Type
 14694 ;;		None               void
 14695 ;; Registers used:
 14696 ;;		wreg
 14697 ;; Tracked objects:
 14698 ;;		On entry : 0/0
 14699 ;;		On exit  : 0/0
 14700 ;;		Unchanged: 0/0
 14701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;Total ram usage:        2 bytes
 14707 ;; Hardware stack levels used:    1
 14708 ;; Hardware stack levels required when called:    3
 14709 ;; This function calls:
 14710 ;;		Nothing
 14711 ;; This function is called by:
 14712 ;;		_setLED_Initialization
 14713 ;;		_setLED
 14714 ;;		_setLED_Main
 14715 ;; This function uses a non-reentrant model
 14716 ;;
 14717                           
 14718                           
 14719                           ;psect for function _LedPointSelect
 14720  1C0E                     _LedPointSelect:	
 14721                           
 14722                           ;incstack = 0
 14723                           ; Regs used in _LedPointSelect: [wreg]
 14724                           ;LedPointSelect@led stored from wreg
 14725  1C0E  00F3               	movwf	LedPointSelect@led
 14726                           
 14727                           ;LED_B1.c: 9: if (led == 1) {
 14728  1C0F  0873               	movf	LedPointSelect@led,w
 14729  1C10  3A01               	xorlw	1
 14730  1C11  1D03               	skipz
 14731  1C12  2C18               	goto	l1189
 14732                           
 14733                           ;LED_B1.c: 10: LED = &VarLED1;
 14734  1C13  306C               	movlw	_VarLED1& (0+255)
 14735  1C14  00F2               	movwf	??_LedPointSelect
 14736  1C15  0872               	movf	??_LedPointSelect,w
 14737  1C16  0021               	movlb	1	; select bank1
 14738  1C17  00EB               	movwf	_LED^(0+128)
 14739  1C18                     l1189:	
 14740                           
 14741                           ;LED_B1.c: 11: }
 14742                           ;LED_B1.c: 14: if (led == 2) {
 14743  1C18  0873               	movf	LedPointSelect@led,w
 14744  1C19  3A02               	xorlw	2
 14745  1C1A  1D03               	skipz
 14746  1C1B  2C21               	goto	l1190
 14747                           
 14748                           ;LED_B1.c: 15: LED = &VarLED2;
 14749  1C1C  30EC               	movlw	_VarLED2& (0+255)
 14750  1C1D  00F2               	movwf	??_LedPointSelect
 14751  1C1E  0872               	movf	??_LedPointSelect,w
 14752  1C1F  0021               	movlb	1	; select bank1
 14753  1C20  00EB               	movwf	_LED^(0+128)
 14754  1C21                     l1190:	
 14755                           
 14756                           ;LED_B1.c: 16: }
 14757                           ;LED_B1.c: 24: if (led == 99) {
 14758  1C21  0873               	movf	LedPointSelect@led,w
 14759  1C22  3A63               	xorlw	99
 14760  1C23  1D03               	skipz
 14761  1C24  0008               	return
 14762                           
 14763                           ;LED_B1.c: 25: LED = &VarErrLED;
 14764  1C25  3068               	movlw	_VarErrLED& (0+255)
 14765  1C26  00F2               	movwf	??_LedPointSelect
 14766  1C27  0872               	movf	??_LedPointSelect,w
 14767  1C28  0021               	movlb	1	; select bank1
 14768  1C29  00EB               	movwf	_LED^(0+128)
 14769  1C2A  0008               	return
 14770  1C2B                     __end_of_LedPointSelect:	
 14771                           
 14772                           	psect	text94
 14773  1841                     __ptext94:	
 14774 ;; *************** function _setDimmerLights_DimmingClose *****************
 14775 ;; Defined at:
 14776 ;;		line 2043 in file "../src/Dimmer_B1.c"
 14777 ;; Parameters:    Size  Location     Type
 14778 ;;		None
 14779 ;; Auto vars:     Size  Location     Type
 14780 ;;		None
 14781 ;; Return value:  Size  Location     Type
 14782 ;;		None               void
 14783 ;; Registers used:
 14784 ;;		wreg, status,2, status,0, pclath, cstack
 14785 ;; Tracked objects:
 14786 ;;		On entry : 0/0
 14787 ;;		On exit  : 0/0
 14788 ;;		Unchanged: 0/0
 14789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14794 ;;Total ram usage:        0 bytes
 14795 ;; Hardware stack levels used:    1
 14796 ;; Hardware stack levels required when called:    4
 14797 ;; This function calls:
 14798 ;;		_setDimmerIntr_Dimming_Sw
 14799 ;; This function is called by:
 14800 ;;		_setDimmerLights_OnOff
 14801 ;; This function uses a non-reentrant model
 14802 ;;
 14803                           
 14804                           
 14805                           ;psect for function _setDimmerLights_DimmingClose
 14806  1841                     _setDimmerLights_DimmingClose:	
 14807                           
 14808                           ;Dimmer_B1.c: 2045: setDimmerIntr_Dimming_Sw(1, 0);
 14809                           
 14810                           ;incstack = 0
 14811                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14812  1841  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14813  1842  3001               	movlw	1
 14814  1843  319D  254F  3198   	fcall	_setDimmerIntr_Dimming_Sw
 14815                           
 14816                           ;Dimmer_B1.c: 2049: setDimmerIntr_Dimming_Sw(2, 0);
 14817  1846  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14818  1847  3002               	movlw	2
 14819  1848  319D  254F         	fcall	_setDimmerIntr_Dimming_Sw
 14820  184A  0008               	return
 14821  184B                     __end_of_setDimmerLights_DimmingClose:	
 14822                           
 14823                           	psect	text95
 14824  1A61                     __ptext95:	
 14825 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14826 ;; Defined at:
 14827 ;;		line 137 in file "../src/Dimmer_B1.c"
 14828 ;; Parameters:    Size  Location     Type
 14829 ;;  lights          1    wreg     unsigned char 
 14830 ;;  value           1    2[COMMON] unsigned char 
 14831 ;; Auto vars:     Size  Location     Type
 14832 ;;  lights          1    4[COMMON] unsigned char 
 14833 ;; Return value:  Size  Location     Type
 14834 ;;		None               void
 14835 ;; Registers used:
 14836 ;;		wreg
 14837 ;; Tracked objects:
 14838 ;;		On entry : 0/0
 14839 ;;		On exit  : 0/0
 14840 ;;		Unchanged: 0/0
 14841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14842 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14846 ;;Total ram usage:        3 bytes
 14847 ;; Hardware stack levels used:    1
 14848 ;; Hardware stack levels required when called:    3
 14849 ;; This function calls:
 14850 ;;		Nothing
 14851 ;; This function is called by:
 14852 ;;		_setDimmerLights_OnOff
 14853 ;; This function uses a non-reentrant model
 14854 ;;
 14855                           
 14856                           
 14857                           ;psect for function _setDimmerIntr_DimmingValue
 14858  1A61                     _setDimmerIntr_DimmingValue:	
 14859                           
 14860                           ;incstack = 0
 14861                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14862                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14863  1A61  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14864                           
 14865                           ;Dimmer_B1.c: 139: if (lights == 1) {
 14866  1A62  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14867  1A63  3A01               	xorlw	1
 14868  1A64  1D03               	skipz
 14869  1A65  2A6C               	goto	l7501
 14870                           
 14871                           ;Dimmer_B1.c: 140: DimmerIntr1.DimmingValue = value;
 14872  1A66  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14873  1A67  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14874  1A68  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14875  1A69  0021               	movlb	1	; select bank1
 14876  1A6A  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 14877                           
 14878                           ;Dimmer_B1.c: 141: }
 14879  1A6B  0008               	return
 14880  1A6C                     l7501:	
 14881                           
 14882                           ;Dimmer_B1.c: 144: else if (lights == 2) {
 14883  1A6C  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14884  1A6D  3A02               	xorlw	2
 14885  1A6E  1D03               	skipz
 14886  1A6F  0008               	return
 14887                           
 14888                           ;Dimmer_B1.c: 145: DimmerIntr2.DimmingValue = value;
 14889  1A70  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14890  1A71  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14891  1A72  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14892  1A73  0021               	movlb	1	; select bank1
 14893  1A74  00B5               	movwf	(_DimmerIntr2^(0+128)+5)
 14894  1A75  0008               	return
 14895  1A76                     __end_of_setDimmerIntr_DimmingValue:	
 14896                           
 14897                           	psect	text96
 14898  1DE9                     __ptext96:	
 14899 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14900 ;; Defined at:
 14901 ;;		line 119 in file "../src/Dimmer_B1.c"
 14902 ;; Parameters:    Size  Location     Type
 14903 ;;  lights          1    wreg     unsigned char 
 14904 ;;  command         1    2[COMMON] unsigned char 
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;  lights          1    4[COMMON] unsigned char 
 14907 ;; Return value:  Size  Location     Type
 14908 ;;		None               void
 14909 ;; Registers used:
 14910 ;;		wreg, status,2, status,0
 14911 ;; Tracked objects:
 14912 ;;		On entry : 0/0
 14913 ;;		On exit  : 0/0
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14916 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;Total ram usage:        3 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:    3
 14923 ;; This function calls:
 14924 ;;		Nothing
 14925 ;; This function is called by:
 14926 ;;		_setDimmerLights_OnOff
 14927 ;; This function uses a non-reentrant model
 14928 ;;
 14929                           
 14930                           
 14931                           ;psect for function _setDimmerIntr_ControlStatus
 14932  1DE9                     _setDimmerIntr_ControlStatus:	
 14933                           
 14934                           ;incstack = 0
 14935                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14936                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14937  1DE9  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14938                           
 14939                           ;Dimmer_B1.c: 121: if (lights == 1) {
 14940  1DEA  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14941  1DEB  3A01               	xorlw	1
 14942  1DEC  1D03               	skipz
 14943  1DED  2DFE               	goto	l7493
 14944                           
 14945                           ;Dimmer_B1.c: 122: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14946  1DEE  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14947  1DEF  3A01               	xorlw	1
 14948  1DF0  3000               	movlw	0
 14949  1DF1  1903               	skipnz
 14950  1DF2  3001               	movlw	1
 14951  1DF3  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14952  1DF4  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14953  1DF5  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14954  1DF6  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14955  1DF7  0021               	movlb	1	; select bank1
 14956  1DF8  0820               	movf	_DimmerIntr1^(0+128),w
 14957  1DF9  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14958  1DFA  39F7               	andlw	-9
 14959  1DFB  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14960  1DFC  00A0               	movwf	_DimmerIntr1^(0+128)
 14961                           
 14962                           ;Dimmer_B1.c: 123: }
 14963  1DFD  0008               	return
 14964  1DFE                     l7493:	
 14965                           
 14966                           ;Dimmer_B1.c: 126: else if (lights == 2) {
 14967  1DFE  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14968  1DFF  3A02               	xorlw	2
 14969  1E00  1D03               	skipz
 14970  1E01  0008               	return
 14971                           
 14972                           ;Dimmer_B1.c: 127: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14973  1E02  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14974  1E03  3A01               	xorlw	1
 14975  1E04  3000               	movlw	0
 14976  1E05  1903               	skipnz
 14977  1E06  3001               	movlw	1
 14978  1E07  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14979  1E08  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14980  1E09  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14981  1E0A  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14982  1E0B  0021               	movlb	1	; select bank1
 14983  1E0C  0830               	movf	_DimmerIntr2^(0+128),w
 14984  1E0D  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14985  1E0E  39F7               	andlw	-9
 14986  1E0F  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14987  1E10  00B0               	movwf	_DimmerIntr2^(0+128)
 14988  1E11  0008               	return
 14989  1E12                     __end_of_setDimmerIntr_ControlStatus:	
 14990                           
 14991                           	psect	text97
 14992  0B6A                     __ptext97:	
 14993 ;; *************** function _setDelayOff_GO *****************
 14994 ;; Defined at:
 14995 ;;		line 87 in file "../src/DelayOff_B1.c"
 14996 ;; Parameters:    Size  Location     Type
 14997 ;;  sw              1    wreg     unsigned char 
 14998 ;;  command         1   61[BANK0 ] unsigned char 
 14999 ;;  value           1   62[BANK0 ] unsigned char 
 15000 ;; Auto vars:     Size  Location     Type
 15001 ;;  sw              1   68[BANK0 ] unsigned char 
 15002 ;;  k               1   67[BANK0 ] unsigned char 
 15003 ;;  j               1   66[BANK0 ] unsigned char 
 15004 ;;  i               1   65[BANK0 ] unsigned char 
 15005 ;; Return value:  Size  Location     Type
 15006 ;;		None               void
 15007 ;; Registers used:
 15008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15009 ;; Tracked objects:
 15010 ;;		On entry : 0/0
 15011 ;;		On exit  : 0/0
 15012 ;;		Unchanged: 0/0
 15013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15014 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;Total ram usage:        8 bytes
 15019 ;; Hardware stack levels used:    1
 15020 ;; Hardware stack levels required when called:    4
 15021 ;; This function calls:
 15022 ;;		_DelayOffPointSelect
 15023 ;;		___bmul
 15024 ;;		_setProductData
 15025 ;; This function is called by:
 15026 ;;		_setDimmerLights_OnOff
 15027 ;;		_setRFSW_Control
 15028 ;; This function uses a non-reentrant model
 15029 ;;
 15030                           
 15031                           
 15032                           ;psect for function _setDelayOff_GO
 15033  0B6A                     _setDelayOff_GO:	
 15034                           
 15035                           ;incstack = 0
 15036                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15037                           ;setDelayOff_GO@sw stored from wreg
 15038  0B6A  0020               	movlb	0	; select bank0
 15039  0B6B  00E4               	movwf	setDelayOff_GO@sw
 15040                           
 15041                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 15042  0B6C  0864               	movf	setDelayOff_GO@sw,w
 15043  0B6D  319A  2222  318B   	fcall	_DelayOffPointSelect
 15044                           
 15045                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 15046  0B70  0020               	movlb	0	; select bank0
 15047  0B71  085D               	movf	setDelayOff_GO@command,w
 15048  0B72  3A01               	xorlw	1
 15049  0B73  3000               	movlw	0
 15050  0B74  1903               	skipnz
 15051  0B75  3001               	movlw	1
 15052  0B76  00DF               	movwf	??_setDelayOff_GO
 15053  0B77  0021               	movlb	1	; select bank1
 15054  0B78  086A               	movf	_DelayOff^(0+128),w
 15055  0B79  0086               	movwf	6
 15056  0B7A  3001               	movlw	1	; select bank2/3
 15057  0B7B  0087               	movwf	7
 15058  0B7C  0020               	movlb	0	; select bank0
 15059  0B7D  0DDF               	rlf	??_setDelayOff_GO,f
 15060  0B7E  0801               	movf	1,w
 15061  0B7F  065F               	xorwf	??_setDelayOff_GO,w
 15062  0B80  39FD               	andlw	-3
 15063  0B81  065F               	xorwf	??_setDelayOff_GO,w
 15064  0B82  0081               	movwf	1
 15065                           
 15066                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 15067  0B83  0021               	movlb	1	; select bank1
 15068  0B84  086A               	movf	_DelayOff^(0+128),w
 15069  0B85  3E02               	addlw	2
 15070  0B86  0086               	movwf	6
 15071  0B87  3001               	movlw	1	; select bank2/3
 15072  0B88  0087               	movwf	7
 15073  0B89  3000               	movlw	0
 15074  0B8A  3FC0               	movwi [0]fsr1
 15075  0B8B  3FC1               	movwi [1]fsr1
 15076                           
 15077                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 15078  0B8C  086A               	movf	_DelayOff^(0+128),w
 15079  0B8D  3E04               	addlw	4
 15080  0B8E  0086               	movwf	6
 15081  0B8F  3001               	movlw	1	; select bank2/3
 15082  0B90  0087               	movwf	7
 15083  0B91  0181               	clrf	1
 15084                           
 15085                           ;DelayOff_B1.c: 94: if (command == 1) {
 15086  0B92  0020               	movlb	0	; select bank0
 15087  0B93  085D               	movf	setDelayOff_GO@command,w
 15088  0B94  3A01               	xorlw	1
 15089  0B95  1D03               	skipz
 15090  0B96  2BEC               	goto	l7117
 15091                           
 15092                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 15093  0B97  3005               	movlw	5
 15094  0B98  00DF               	movwf	??_setDelayOff_GO
 15095  0B99  085F               	movf	??_setDelayOff_GO,w
 15096  0B9A  00E1               	movwf	setDelayOff_GO@i
 15097  0B9B  01E2               	clrf	setDelayOff_GO@j
 15098  0B9C  01E3               	clrf	setDelayOff_GO@k
 15099                           
 15100                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 15101  0B9D  300F               	movlw	15
 15102  0B9E  055E               	andwf	setDelayOff_GO@value,w
 15103  0B9F  00DF               	movwf	??_setDelayOff_GO
 15104  0BA0  085F               	movf	??_setDelayOff_GO,w
 15105  0BA1  3A05               	xorlw	5
 15106  0BA2  1903               	skipnz
 15107  0BA3  2BA8               	goto	l7103
 15108  0BA4  085E               	movf	setDelayOff_GO@value,w
 15109  0BA5  390F               	andlw	15
 15110  0BA6  1D03               	btfss	3,2
 15111  0BA7  2BD8               	goto	l7113
 15112  0BA8                     l7103:	
 15113  0BA8  3031               	movlw	49
 15114  0BA9  025E               	subwf	setDelayOff_GO@value,w
 15115  0BAA  1803               	skipnc
 15116  0BAB  2BD8               	goto	l7113
 15117                           
 15118                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 15119  0BAC  085E               	movf	setDelayOff_GO@value,w
 15120  0BAD  390F               	andlw	15
 15121  0BAE  00DF               	movwf	??_setDelayOff_GO
 15122  0BAF  085F               	movf	??_setDelayOff_GO,w
 15123  0BB0  00E2               	movwf	setDelayOff_GO@j
 15124                           
 15125                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 15126  0BB1  085E               	movf	setDelayOff_GO@value,w
 15127  0BB2  00DF               	movwf	??_setDelayOff_GO
 15128  0BB3  3004               	movlw	4
 15129  0BB4                     u6375:	
 15130  0BB4  36DF               	lsrf	??_setDelayOff_GO,f
 15131  0BB5  0B89               	decfsz	9,f
 15132  0BB6  2BB4               	goto	u6375
 15133  0BB7  085F               	movf	??_setDelayOff_GO,w
 15134  0BB8  390F               	andlw	15
 15135  0BB9  00E0               	movwf	??_setDelayOff_GO+1
 15136  0BBA  0860               	movf	??_setDelayOff_GO+1,w
 15137  0BBB  00E3               	movwf	setDelayOff_GO@k
 15138                           
 15139                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 15140  0BBC  300A               	movlw	10
 15141  0BBD  00DF               	movwf	??_setDelayOff_GO
 15142  0BBE  085F               	movf	??_setDelayOff_GO,w
 15143  0BBF  00F2               	movwf	___bmul@multiplicand
 15144  0BC0  0863               	movf	setDelayOff_GO@k,w
 15145  0BC1  3199  21A7  318B   	fcall	___bmul
 15146  0BC4  0020               	movlb	0	; select bank0
 15147  0BC5  0762               	addwf	setDelayOff_GO@j,w
 15148  0BC6  00E0               	movwf	??_setDelayOff_GO+1
 15149  0BC7  0021               	movlb	1	; select bank1
 15150  0BC8  0A6A               	incf	_DelayOff^(0+128),w
 15151  0BC9  0086               	movwf	6
 15152  0BCA  3001               	movlw	1	; select bank2/3
 15153  0BCB  0087               	movwf	7
 15154  0BCC  0020               	movlb	0	; select bank0
 15155  0BCD  0860               	movf	??_setDelayOff_GO+1,w
 15156  0BCE  0081               	movwf	1
 15157                           
 15158                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 15159  0BCF  085E               	movf	setDelayOff_GO@value,w
 15160  0BD0  00DF               	movwf	??_setDelayOff_GO
 15161  0BD1  085F               	movf	??_setDelayOff_GO,w
 15162  0BD2  00DA               	movwf	setProductData@value
 15163  0BD3  0864               	movf	setDelayOff_GO@sw,w
 15164  0BD4  3E1A               	addlw	26
 15165  0BD5  3198  20A2         	fcall	_setProductData
 15166                           
 15167                           ;DelayOff_B1.c: 103: } else {
 15168  0BD7  0008               	return
 15169  0BD8                     l7113:	
 15170                           
 15171                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 15172  0BD8  3005               	movlw	5
 15173  0BD9  0020               	movlb	0	; select bank0
 15174  0BDA  00DF               	movwf	??_setDelayOff_GO
 15175  0BDB  0021               	movlb	1	; select bank1
 15176  0BDC  0A6A               	incf	_DelayOff^(0+128),w
 15177  0BDD  0086               	movwf	6
 15178  0BDE  3001               	movlw	1	; select bank2/3
 15179  0BDF  0087               	movwf	7
 15180  0BE0  0020               	movlb	0	; select bank0
 15181  0BE1  085F               	movf	??_setDelayOff_GO,w
 15182  0BE2  0081               	movwf	1
 15183                           
 15184                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 15185  0BE3  3005               	movlw	5
 15186  0BE4  00DF               	movwf	??_setDelayOff_GO
 15187  0BE5  085F               	movf	??_setDelayOff_GO,w
 15188  0BE6  00DA               	movwf	setProductData@value
 15189  0BE7  0864               	movf	setDelayOff_GO@sw,w
 15190  0BE8  3E1A               	addlw	26
 15191  0BE9  3198  20A2         	fcall	_setProductData
 15192                           
 15193                           ;DelayOff_B1.c: 106: }
 15194                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 15195  0BEB  0008               	return
 15196  0BEC                     l7117:	
 15197  0BEC  0020               	movlb	0	; select bank0
 15198  0BED  08DD               	movf	setDelayOff_GO@command,f
 15199  0BEE  1D03               	skipz
 15200  0BEF  0008               	return
 15201                           
 15202                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 15203  0BF0  01DA               	clrf	setProductData@value
 15204  0BF1  0864               	movf	setDelayOff_GO@sw,w
 15205  0BF2  3E1A               	addlw	26
 15206  0BF3  3198  20A2         	fcall	_setProductData
 15207  0BF5  0008               	return
 15208  0BF6                     __end_of_setDelayOff_GO:	
 15209                           
 15210                           	psect	text98
 15211  19A7                     __ptext98:	
 15212 ;; *************** function ___bmul *****************
 15213 ;; Defined at:
 15214 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15215 ;; Parameters:    Size  Location     Type
 15216 ;;  multiplier      1    wreg     unsigned char 
 15217 ;;  multiplicand    1    2[COMMON] unsigned char 
 15218 ;; Auto vars:     Size  Location     Type
 15219 ;;  multiplier      1    5[COMMON] unsigned char 
 15220 ;;  product         1    4[COMMON] unsigned char 
 15221 ;; Return value:  Size  Location     Type
 15222 ;;                  1    wreg      unsigned char 
 15223 ;; Registers used:
 15224 ;;		wreg, status,2, status,0
 15225 ;; Tracked objects:
 15226 ;;		On entry : 0/0
 15227 ;;		On exit  : 0/0
 15228 ;;		Unchanged: 0/0
 15229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15230 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15234 ;;Total ram usage:        4 bytes
 15235 ;; Hardware stack levels used:    1
 15236 ;; Hardware stack levels required when called:    3
 15237 ;; This function calls:
 15238 ;;		Nothing
 15239 ;; This function is called by:
 15240 ;;		_setDelayOff_GO
 15241 ;;		_DelayTimejudge
 15242 ;; This function uses a non-reentrant model
 15243 ;;
 15244                           
 15245                           
 15246                           ;psect for function ___bmul
 15247  19A7                     ___bmul:	
 15248                           
 15249                           ;incstack = 0
 15250                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15251                           ;___bmul@multiplier stored from wreg
 15252  19A7  00F5               	movwf	___bmul@multiplier
 15253  19A8  01F4               	clrf	___bmul@product
 15254  19A9                     l6753:	
 15255  19A9  1C75               	btfss	___bmul@multiplier,0
 15256  19AA  29AF               	goto	l6757
 15257  19AB  0872               	movf	___bmul@multiplicand,w
 15258  19AC  00F3               	movwf	??___bmul
 15259  19AD  0873               	movf	??___bmul,w
 15260  19AE  07F4               	addwf	___bmul@product,f
 15261  19AF                     l6757:	
 15262  19AF  1003               	clrc
 15263  19B0  0DF2               	rlf	___bmul@multiplicand,f
 15264  19B1  1003               	clrc
 15265  19B2  0CF5               	rrf	___bmul@multiplier,f
 15266  19B3  08F5               	movf	___bmul@multiplier,f
 15267  19B4  1D03               	skipz
 15268  19B5  29A9               	goto	l6753
 15269  19B6  0874               	movf	___bmul@product,w
 15270  19B7  0008               	return
 15271  19B8                     __end_of___bmul:	
 15272                           
 15273                           	psect	text99
 15274  1A4C                     __ptext99:	
 15275 ;; *************** function _setCmd_Status *****************
 15276 ;; Defined at:
 15277 ;;		line 656 in file "../src/main_B1.c"
 15278 ;; Parameters:    Size  Location     Type
 15279 ;;  number          1    wreg     unsigned char 
 15280 ;;  cmd             1    2[COMMON] unsigned char 
 15281 ;; Auto vars:     Size  Location     Type
 15282 ;;  number          1    4[COMMON] unsigned char 
 15283 ;; Return value:  Size  Location     Type
 15284 ;;		None               void
 15285 ;; Registers used:
 15286 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15287 ;; Tracked objects:
 15288 ;;		On entry : 0/0
 15289 ;;		On exit  : 0/0
 15290 ;;		Unchanged: 0/0
 15291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15292 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;Total ram usage:        3 bytes
 15297 ;; Hardware stack levels used:    1
 15298 ;; Hardware stack levels required when called:    3
 15299 ;; This function calls:
 15300 ;;		Nothing
 15301 ;; This function is called by:
 15302 ;;		_setDimmerLights_OnOff
 15303 ;;		_setControl_Lights_Table
 15304 ;; This function uses a non-reentrant model
 15305 ;;
 15306                           
 15307                           
 15308                           ;psect for function _setCmd_Status
 15309  1A4C                     _setCmd_Status:	
 15310                           
 15311                           ;incstack = 0
 15312                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15313                           ;setCmd_Status@number stored from wreg
 15314  1A4C  00F4               	movwf	setCmd_Status@number
 15315                           
 15316                           ;main_B1.c: 657: switch (number) {
 15317  1A4D  2A5B               	goto	l7299
 15318  1A4E                     l7295:	
 15319                           ;main_B1.c: 658: case 1:
 15320                           
 15321                           
 15322                           ;main_B1.c: 659: Cmd.all_off = cmd == 1 ? 1 : 0;
 15323  1A4E  0872               	movf	setCmd_Status@cmd,w
 15324  1A4F  3A01               	xorlw	1
 15325  1A50  3000               	movlw	0
 15326  1A51  1903               	skipnz
 15327  1A52  3001               	movlw	1
 15328  1A53  00F3               	movwf	??_setCmd_Status
 15329  1A54  0021               	movlb	1	; select bank1
 15330  1A55  0869               	movf	_Cmd^(0+128),w
 15331  1A56  0673               	xorwf	??_setCmd_Status,w
 15332  1A57  39FE               	andlw	-2
 15333  1A58  0673               	xorwf	??_setCmd_Status,w
 15334  1A59  00E9               	movwf	_Cmd^(0+128)
 15335                           
 15336                           ;main_B1.c: 661: }
 15337                           
 15338                           ;main_B1.c: 660: break;
 15339  1A5A  0008               	return
 15340  1A5B                     l7299:	
 15341  1A5B  0874               	movf	setCmd_Status@number,w
 15342                           
 15343                           ; Switch size 1, requested type "space"
 15344                           ; Number of cases is 1, Range of values is 1 to 1
 15345                           ; switch strategies available:
 15346                           ; Name         Instructions Cycles
 15347                           ; simple_byte            4     3 (average)
 15348                           ; direct_byte           11     9 (fixed)
 15349                           ; jumptable            263     9 (fixed)
 15350                           ;	Chosen strategy is simple_byte
 15351  1A5C  3A01               	xorlw	1	; case 1
 15352  1A5D  1903               	skipnz
 15353  1A5E  2A4E               	goto	l7295
 15354  1A5F  2A60               	goto	l3042
 15355  1A60                     l3042:	
 15356  1A60  0008               	return
 15357  1A61                     __end_of_setCmd_Status:	
 15358                           
 15359                           	psect	text100
 15360  1919                     __ptext100:	
 15361 ;; *************** function _getMain_All_LightsStatus *****************
 15362 ;; Defined at:
 15363 ;;		line 378 in file "../src/main_B1.c"
 15364 ;; Parameters:    Size  Location     Type
 15365 ;;		None
 15366 ;; Auto vars:     Size  Location     Type
 15367 ;;  status          1    2[COMMON] unsigned char 
 15368 ;; Return value:  Size  Location     Type
 15369 ;;                  1    wreg      unsigned char 
 15370 ;; Registers used:
 15371 ;;		wreg, status,2, status,0
 15372 ;; Tracked objects:
 15373 ;;		On entry : 0/0
 15374 ;;		On exit  : 0/0
 15375 ;;		Unchanged: 0/0
 15376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15378 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;Total ram usage:        1 bytes
 15382 ;; Hardware stack levels used:    1
 15383 ;; Hardware stack levels required when called:    3
 15384 ;; This function calls:
 15385 ;;		Nothing
 15386 ;; This function is called by:
 15387 ;;		_DimmerLights_Main
 15388 ;;		_setDimmerLights_Main
 15389 ;;		_setDimmerLights_OnOff
 15390 ;;		_Flash_Memory_Main
 15391 ;;		_Load_Main
 15392 ;;		_setTemp_Main
 15393 ;;		_setControl_Lights_Table
 15394 ;;		_Exception_Main
 15395 ;; This function uses a non-reentrant model
 15396 ;;
 15397                           
 15398                           
 15399                           ;psect for function _getMain_All_LightsStatus
 15400  1919                     _getMain_All_LightsStatus:	
 15401                           
 15402                           ;main_B1.c: 379: char status = 0;
 15403                           
 15404                           ;incstack = 0
 15405                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15406  1919  01F2               	clrf	getMain_All_LightsStatus@status
 15407                           
 15408                           ;main_B1.c: 398: status = DimmerLights1.Status == 1 ? 1 : 0;
 15409  191A  3000               	movlw	0
 15410  191B  0023               	movlb	3	; select bank3
 15411  191C  183F               	btfsc	(_DimmerLights1^(0+384)+1),0
 15412  191D  3001               	movlw	1
 15413  191E  00F2               	movwf	getMain_All_LightsStatus@status
 15414                           
 15415                           ;main_B1.c: 399: if (status == 0) {
 15416  191F  08F2               	movf	getMain_All_LightsStatus@status,f
 15417  1920  1D03               	skipz
 15418  1921  2926               	goto	l9939
 15419                           
 15420                           ;main_B1.c: 400: status = DimmerLights2.Status == 1 ? 1 : 0;
 15421  1922  3000               	movlw	0
 15422  1923  1848               	btfsc	(_DimmerLights2^(0+384)+1),0
 15423  1924  3001               	movlw	1
 15424  1925  00F2               	movwf	getMain_All_LightsStatus@status
 15425  1926                     l9939:	
 15426                           
 15427                           ;main_B1.c: 401: }
 15428                           ;main_B1.c: 425: return status;
 15429  1926  0872               	movf	getMain_All_LightsStatus@status,w
 15430  1927  0008               	return
 15431  1928                     __end_of_getMain_All_LightsStatus:	
 15432                           
 15433                           	psect	text101
 15434  190A                     __ptext101:	
 15435 ;; *************** function _getDelayOff_GO *****************
 15436 ;; Defined at:
 15437 ;;		line 114 in file "../src/DelayOff_B1.c"
 15438 ;; Parameters:    Size  Location     Type
 15439 ;;  sw              1    wreg     unsigned char 
 15440 ;; Auto vars:     Size  Location     Type
 15441 ;;  sw              1    4[COMMON] unsigned char 
 15442 ;;  go              1    5[COMMON] unsigned char 
 15443 ;; Return value:  Size  Location     Type
 15444 ;;                  1    wreg      unsigned char 
 15445 ;; Registers used:
 15446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15447 ;; Tracked objects:
 15448 ;;		On entry : 0/0
 15449 ;;		On exit  : 0/0
 15450 ;;		Unchanged: 0/0
 15451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;Total ram usage:        2 bytes
 15457 ;; Hardware stack levels used:    1
 15458 ;; Hardware stack levels required when called:    4
 15459 ;; This function calls:
 15460 ;;		_DelayOffPointSelect
 15461 ;; This function is called by:
 15462 ;;		_setDimmerLights_OnOff
 15463 ;; This function uses a non-reentrant model
 15464 ;;
 15465                           
 15466                           
 15467                           ;psect for function _getDelayOff_GO
 15468  190A                     _getDelayOff_GO:	
 15469                           
 15470                           ;incstack = 0
 15471                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15472                           ;getDelayOff_GO@sw stored from wreg
 15473  190A  00F4               	movwf	getDelayOff_GO@sw
 15474                           
 15475                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15476  190B  0874               	movf	getDelayOff_GO@sw,w
 15477  190C  319A  2222         	fcall	_DelayOffPointSelect
 15478                           
 15479                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15480  190E  0021               	movlb	1	; select bank1
 15481  190F  086A               	movf	_DelayOff^(0+128),w
 15482  1910  0086               	movwf	6
 15483  1911  3001               	movlw	1	; select bank2/3
 15484  1912  0087               	movwf	7
 15485  1913  3000               	movlw	0
 15486  1914  1881               	btfsc	1,1
 15487  1915  3001               	movlw	1
 15488  1916  00F5               	movwf	getDelayOff_GO@go
 15489                           
 15490                           ;DelayOff_B1.c: 117: return go;
 15491  1917  0875               	movf	getDelayOff_GO@go,w
 15492  1918  0008               	return
 15493  1919                     __end_of_getDelayOff_GO:	
 15494                           
 15495                           	psect	text102
 15496  1957                     __ptext102:	
 15497 ;; *************** function _getCmd_Status *****************
 15498 ;; Defined at:
 15499 ;;		line 664 in file "../src/main_B1.c"
 15500 ;; Parameters:    Size  Location     Type
 15501 ;;  number          1    wreg     unsigned char 
 15502 ;; Auto vars:     Size  Location     Type
 15503 ;;  number          1    2[COMMON] unsigned char 
 15504 ;;  cmd             1    3[COMMON] unsigned char 
 15505 ;; Return value:  Size  Location     Type
 15506 ;;                  1    wreg      unsigned char 
 15507 ;; Registers used:
 15508 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15509 ;; Tracked objects:
 15510 ;;		On entry : 0/0
 15511 ;;		On exit  : 0/0
 15512 ;;		Unchanged: 0/0
 15513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;Total ram usage:        2 bytes
 15519 ;; Hardware stack levels used:    1
 15520 ;; Hardware stack levels required when called:    3
 15521 ;; This function calls:
 15522 ;;		Nothing
 15523 ;; This function is called by:
 15524 ;;		_setDimmerLights_OnOff
 15525 ;; This function uses a non-reentrant model
 15526 ;;
 15527                           
 15528                           
 15529                           ;psect for function _getCmd_Status
 15530  1957                     _getCmd_Status:	
 15531                           
 15532                           ;incstack = 0
 15533                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15534                           ;getCmd_Status@number stored from wreg
 15535  1957  00F2               	movwf	getCmd_Status@number
 15536                           
 15537                           ;main_B1.c: 665: char cmd = 0;
 15538  1958  01F3               	clrf	getCmd_Status@cmd
 15539                           
 15540                           ;main_B1.c: 666: switch (number) {
 15541  1959  2960               	goto	l7643
 15542  195A                     l7639:	
 15543                           ;main_B1.c: 667: case 1:
 15544                           
 15545                           
 15546                           ;main_B1.c: 668: cmd = Cmd.all_off == 1 ? 1 : 0;
 15547  195A  3000               	movlw	0
 15548  195B  0021               	movlb	1	; select bank1
 15549  195C  1869               	btfsc	_Cmd^(0+128),0
 15550  195D  3001               	movlw	1
 15551  195E  00F3               	movwf	getCmd_Status@cmd
 15552                           
 15553                           ;main_B1.c: 670: }
 15554                           
 15555                           ;main_B1.c: 669: break;
 15556  195F  2965               	goto	l7645
 15557  1960                     l7643:	
 15558  1960  0872               	movf	getCmd_Status@number,w
 15559                           
 15560                           ; Switch size 1, requested type "space"
 15561                           ; Number of cases is 1, Range of values is 1 to 1
 15562                           ; switch strategies available:
 15563                           ; Name         Instructions Cycles
 15564                           ; simple_byte            4     3 (average)
 15565                           ; direct_byte           11     9 (fixed)
 15566                           ; jumptable            263     9 (fixed)
 15567                           ;	Chosen strategy is simple_byte
 15568  1961  3A01               	xorlw	1	; case 1
 15569  1962  1903               	skipnz
 15570  1963  295A               	goto	l7639
 15571  1964  2965               	goto	l7645
 15572  1965                     l7645:	
 15573                           
 15574                           ;main_B1.c: 671: return cmd;
 15575  1965  0873               	movf	getCmd_Status@cmd,w
 15576  1966  0008               	return
 15577  1967                     __end_of_getCmd_Status:	
 15578                           
 15579                           	psect	text103
 15580  13E7                     __ptext103:	
 15581 ;; *************** function _setDimmerLights_Dimming *****************
 15582 ;; Defined at:
 15583 ;;		line 1142 in file "../src/Dimmer_B1.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;  lights          1    wreg     unsigned char 
 15586 ;;  status          1   66[BANK0 ] unsigned char 
 15587 ;; Auto vars:     Size  Location     Type
 15588 ;;  lights          1   69[BANK0 ] unsigned char 
 15589 ;;  value           1   68[BANK0 ] unsigned char 
 15590 ;; Return value:  Size  Location     Type
 15591 ;;		None               void
 15592 ;; Registers used:
 15593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15594 ;; Tracked objects:
 15595 ;;		On entry : 0/0
 15596 ;;		On exit  : 0/0
 15597 ;;		Unchanged: 0/0
 15598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15599 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;Total ram usage:        4 bytes
 15604 ;; Hardware stack levels used:    1
 15605 ;; Hardware stack levels required when called:    6
 15606 ;; This function calls:
 15607 ;;		_getDimmerIntr_DimmingValue
 15608 ;;		_getDimmerLights_ValueToPercent
 15609 ;;		_setBuz
 15610 ;;		_setDimmerIntr_Dimming_Sw
 15611 ;;		_setDimmerIntr_MaxmumValue
 15612 ;;		_setDimmerLights_Line
 15613 ;;		_setMemory_Modify
 15614 ;;		_setProductData
 15615 ;;		_setRF_DimmerLights
 15616 ;;		_setRF_TransceiveGO
 15617 ;;		_setTxData
 15618 ;; This function is called by:
 15619 ;;		_setDimmerLights_Main
 15620 ;; This function uses a non-reentrant model
 15621 ;;
 15622                           
 15623                           
 15624                           ;psect for function _setDimmerLights_Dimming
 15625  13E7                     _setDimmerLights_Dimming:	
 15626                           
 15627                           ;incstack = 0
 15628                           ; Regs used in _setDimmerLights_Dimming: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15629                           ;setDimmerLights_Dimming@lights stored from wreg
 15630  13E7  0020               	movlb	0	; select bank0
 15631  13E8  00E5               	movwf	setDimmerLights_Dimming@lights
 15632                           
 15633                           ;Dimmer_B1.c: 1143: setDimmerIntr_Dimming_Sw(lights, status);
 15634  13E9  0862               	movf	setDimmerLights_Dimming@status,w
 15635  13EA  00E3               	movwf	??_setDimmerLights_Dimming
 15636  13EB  0863               	movf	??_setDimmerLights_Dimming,w
 15637  13EC  00F2               	movwf	setDimmerIntr_Dimming_Sw@command
 15638  13ED  0865               	movf	setDimmerLights_Dimming@lights,w
 15639  13EE  319D  254F  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15640                           
 15641                           ;Dimmer_B1.c: 1144: if (status == 1) {
 15642  13F1  0020               	movlb	0	; select bank0
 15643  13F2  0862               	movf	setDimmerLights_Dimming@status,w
 15644  13F3  3A01               	xorlw	1
 15645  13F4  1D03               	skipz
 15646  13F5  2C03               	goto	l10341
 15647                           
 15648                           ;Dimmer_B1.c: 1146: setRF_TransceiveGO(0);
 15649  13F6  3000               	movlw	0
 15650  13F7  3199  2147  3193   	fcall	_setRF_TransceiveGO
 15651                           
 15652                           ;Dimmer_B1.c: 1148: setBuz(1, 100);
 15653  13FA  3064               	movlw	100
 15654  13FB  0020               	movlb	0	; select bank0
 15655  13FC  00A4               	movwf	setBuz@time
 15656  13FD  3000               	movlw	0
 15657  13FE  00A5               	movwf	setBuz@time+1
 15658  13FF  3001               	movlw	1
 15659  1400  3192  22EC         	fcall	_setBuz
 15660                           
 15661                           ;Dimmer_B1.c: 1149: } else if (status == 0) {
 15662  1402  0008               	return
 15663  1403                     l10341:	
 15664  1403  0020               	movlb	0	; select bank0
 15665  1404  08E2               	movf	setDimmerLights_Dimming@status,f
 15666  1405  1D03               	skipz
 15667  1406  0008               	return
 15668                           
 15669                           ;Dimmer_B1.c: 1152: Dimmer.Load_Status = 0;
 15670  1407  0022               	movlb	2	; select bank2
 15671  1408  1120               	bcf	_Dimmer^(0+256),2
 15672                           
 15673                           ;Dimmer_B1.c: 1153: setDimmerLights_Line(lights);
 15674  1409  0020               	movlb	0	; select bank0
 15675  140A  0865               	movf	setDimmerLights_Dimming@lights,w
 15676  140B  319B  230C  3193   	fcall	_setDimmerLights_Line
 15677                           
 15678                           ;Dimmer_B1.c: 1155: char value = getDimmerIntr_DimmingValue(lights);
 15679  140E  0020               	movlb	0	; select bank0
 15680  140F  0865               	movf	setDimmerLights_Dimming@lights,w
 15681  1410  319A  220E  3193   	fcall	_getDimmerIntr_DimmingValue
 15682  1413  0020               	movlb	0	; select bank0
 15683  1414  00E3               	movwf	??_setDimmerLights_Dimming
 15684  1415  0863               	movf	??_setDimmerLights_Dimming,w
 15685  1416  00E4               	movwf	setDimmerLights_Dimming@value
 15686                           
 15687                           ;Dimmer_B1.c: 1156: setDimmerIntr_MaxmumValue(lights, value);
 15688  1417  0864               	movf	setDimmerLights_Dimming@value,w
 15689  1418  00E3               	movwf	??_setDimmerLights_Dimming
 15690  1419  0863               	movf	??_setDimmerLights_Dimming,w
 15691  141A  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15692  141B  0865               	movf	setDimmerLights_Dimming@lights,w
 15693  141C  319A  22F5  3193   	fcall	_setDimmerIntr_MaxmumValue
 15694                           
 15695                           ;Dimmer_B1.c: 1157: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15696  141F  0020               	movlb	0	; select bank0
 15697  1420  0864               	movf	setDimmerLights_Dimming@value,w
 15698  1421  3197  2736  3193   	fcall	_getDimmerLights_ValueToPercent
 15699  1424  0020               	movlb	0	; select bank0
 15700  1425  00E3               	movwf	??_setDimmerLights_Dimming
 15701  1426  0863               	movf	??_setDimmerLights_Dimming,w
 15702  1427  00DA               	movwf	setProductData@value
 15703  1428  0865               	movf	setDimmerLights_Dimming@lights,w
 15704  1429  3E14               	addlw	20
 15705  142A  3198  20A2  3193   	fcall	_setProductData
 15706                           
 15707                           ;Dimmer_B1.c: 1164: setMemory_Modify(1);
 15708  142D  3001               	movlw	1
 15709  142E  3199  2137  3193   	fcall	_setMemory_Modify
 15710                           
 15711                           ;Dimmer_B1.c: 1168: setRF_DimmerLights(lights, 1);
 15712  1431  0020               	movlb	0	; select bank0
 15713  1432  01DD               	clrf	setRF_DimmerLights@on
 15714  1433  0ADD               	incf	setRF_DimmerLights@on,f
 15715  1434  0865               	movf	setDimmerLights_Dimming@lights,w
 15716  1435  3188  202B  3193   	fcall	_setRF_DimmerLights
 15717                           
 15718                           ;Dimmer_B1.c: 1169: setTxData();
 15719  1438  31A7  27F2         	fcall	_setTxData
 15720  143A  0008               	return
 15721  143B                     __end_of_setDimmerLights_Dimming:	
 15722                           
 15723                           	psect	text104
 15724  27F2                     __ptext104:	
 15725 ;; *************** function _setTxData *****************
 15726 ;; Defined at:
 15727 ;;		line 237 in file "../src/RF_Control_B1.c"
 15728 ;; Parameters:    Size  Location     Type
 15729 ;;		None
 15730 ;; Auto vars:     Size  Location     Type
 15731 ;;  i               1    0        unsigned char 
 15732 ;; Return value:  Size  Location     Type
 15733 ;;		None               void
 15734 ;; Registers used:
 15735 ;;		status,2
 15736 ;; Tracked objects:
 15737 ;;		On entry : 0/0
 15738 ;;		On exit  : 0/0
 15739 ;;		Unchanged: 0/0
 15740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15745 ;;Total ram usage:        0 bytes
 15746 ;; Hardware stack levels used:    1
 15747 ;; Hardware stack levels required when called:    3
 15748 ;; This function calls:
 15749 ;;		Nothing
 15750 ;; This function is called by:
 15751 ;;		_setDimmerLights_OnOff
 15752 ;;		_setDimmerLights_Dimming
 15753 ;;		_getRxData
 15754 ;;		_setControl_Lights_Table
 15755 ;;		_setRFSW_Control
 15756 ;;		_setRFSW_AdjControl
 15757 ;; This function uses a non-reentrant model
 15758 ;;
 15759                           
 15760                           
 15761                           ;psect for function _setTxData
 15762  27F2                     _setTxData:	
 15763                           
 15764                           ;RF_Control_B1.c: 238: char i;
 15765                           ;RF_Control_B1.c: 239: if (RF1.Enable == 1) {
 15766                           
 15767                           ;incstack = 0
 15768                           ; Regs used in _setTxData: [status,2]
 15769  27F2  0021               	movlb	1	; select bank1
 15770  27F3  1C40               	btfss	_RF1^(0+128),0
 15771  27F4  0008               	return
 15772                           
 15773                           ;RF_Control_B1.c: 241: RF1.TransceiveGO = 1;
 15774  27F5  1540               	bsf	_RF1^(0+128),2
 15775                           
 15776                           ;RF_Control_B1.c: 242: RF1.Count = 0;
 15777  27F6  01C3               	clrf	(_RF1^(0+128)+3)
 15778  27F7  01C4               	clrf	((_RF1+1)^(0+128)+3)
 15779  27F8  0008               	return
 15780  27F9                     __end_of_setTxData:	
 15781                           
 15782                           	psect	text105
 15783  1947                     __ptext105:	
 15784 ;; *************** function _setRF_TransceiveGO *****************
 15785 ;; Defined at:
 15786 ;;		line 575 in file "../src/RF_Control_B1.c"
 15787 ;; Parameters:    Size  Location     Type
 15788 ;;  command         1    wreg     unsigned char 
 15789 ;; Auto vars:     Size  Location     Type
 15790 ;;  command         1    3[COMMON] unsigned char 
 15791 ;; Return value:  Size  Location     Type
 15792 ;;		None               void
 15793 ;; Registers used:
 15794 ;;		wreg, status,2, status,0
 15795 ;; Tracked objects:
 15796 ;;		On entry : 0/0
 15797 ;;		On exit  : 0/0
 15798 ;;		Unchanged: 0/0
 15799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15802 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15803 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15804 ;;Total ram usage:        2 bytes
 15805 ;; Hardware stack levels used:    1
 15806 ;; Hardware stack levels required when called:    3
 15807 ;; This function calls:
 15808 ;;		Nothing
 15809 ;; This function is called by:
 15810 ;;		_setDimmerLights_Dimming
 15811 ;; This function uses a non-reentrant model
 15812 ;;
 15813                           
 15814                           
 15815                           ;psect for function _setRF_TransceiveGO
 15816  1947                     _setRF_TransceiveGO:	
 15817                           
 15818                           ;incstack = 0
 15819                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15820                           ;setRF_TransceiveGO@command stored from wreg
 15821  1947  00F3               	movwf	setRF_TransceiveGO@command
 15822                           
 15823                           ;RF_Control_B1.c: 576: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15824  1948  0873               	movf	setRF_TransceiveGO@command,w
 15825  1949  3A01               	xorlw	1
 15826  194A  3000               	movlw	0
 15827  194B  1903               	skipnz
 15828  194C  3001               	movlw	1
 15829  194D  00F2               	movwf	??_setRF_TransceiveGO
 15830  194E  0DF2               	rlf	??_setRF_TransceiveGO,f
 15831  194F  0DF2               	rlf	??_setRF_TransceiveGO,f
 15832  1950  0021               	movlb	1	; select bank1
 15833  1951  0840               	movf	_RF1^(0+128),w
 15834  1952  0672               	xorwf	??_setRF_TransceiveGO,w
 15835  1953  39FB               	andlw	-5
 15836  1954  0672               	xorwf	??_setRF_TransceiveGO,w
 15837  1955  00C0               	movwf	_RF1^(0+128)
 15838  1956  0008               	return
 15839  1957                     __end_of_setRF_TransceiveGO:	
 15840                           
 15841                           	psect	text106
 15842  082B                     __ptext106:	
 15843 ;; *************** function _setRF_DimmerLights *****************
 15844 ;; Defined at:
 15845 ;;		line 550 in file "../src/RF_Control_B1.c"
 15846 ;; Parameters:    Size  Location     Type
 15847 ;;  lights          1    wreg     unsigned char 
 15848 ;;  on              1   61[BANK0 ] unsigned char 
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;  lights          1   65[BANK0 ] unsigned char 
 15851 ;;  status          1   64[BANK0 ] unsigned char 
 15852 ;; Return value:  Size  Location     Type
 15853 ;;		None               void
 15854 ;; Registers used:
 15855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15856 ;; Tracked objects:
 15857 ;;		On entry : 0/0
 15858 ;;		On exit  : 0/0
 15859 ;;		Unchanged: 0/0
 15860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15861 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15865 ;;Total ram usage:        5 bytes
 15866 ;; Hardware stack levels used:    1
 15867 ;; Hardware stack levels required when called:    4
 15868 ;; This function calls:
 15869 ;;		_setProductData
 15870 ;; This function is called by:
 15871 ;;		_setDimmerLights_OnOff
 15872 ;;		_setDimmerLights_Dimming
 15873 ;;		_setRFSW_Control
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877                           
 15878                           ;psect for function _setRF_DimmerLights
 15879  082B                     _setRF_DimmerLights:	
 15880                           
 15881                           ;incstack = 0
 15882                           ; Regs used in _setRF_DimmerLights: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15883                           ;setRF_DimmerLights@lights stored from wreg
 15884  082B  0020               	movlb	0	; select bank0
 15885  082C  00E1               	movwf	setRF_DimmerLights@lights
 15886                           
 15887                           ;RF_Control_B1.c: 551: char status = 1;
 15888  082D  01E0               	clrf	setRF_DimmerLights@status
 15889  082E  0AE0               	incf	setRF_DimmerLights@status,f
 15890                           
 15891                           ;RF_Control_B1.c: 552: switch (lights) {
 15892  082F  2836               	goto	l7157
 15893  0830                     l7151:	
 15894                           ;RF_Control_B1.c: 553: case 2:
 15895                           
 15896  0830  2833               	goto	L11
 15897  0831                     l7153:	
 15898                           ;RF_Control_B1.c: 556: case 3:
 15899                           
 15900                           ;RF_Control_B1.c: 555: break;
 15901                           
 15902                           ;RF_Control_B1.c: 554: status <<= 1;
 15903                           
 15904                           
 15905                           ;RF_Control_B1.c: 557: status <<= 2;
 15906  0831  1003               	clrc
 15907  0832  0DE0               	rlf	setRF_DimmerLights@status,f
 15908  0833                     L11:	
 15909  0833  1003               	clrc
 15910  0834  0DE0               	rlf	setRF_DimmerLights@status,f
 15911                           
 15912                           ;RF_Control_B1.c: 559: }
 15913                           
 15914                           ;RF_Control_B1.c: 558: break;
 15915  0835  283E               	goto	l2349
 15916  0836                     l7157:	
 15917  0836  0861               	movf	setRF_DimmerLights@lights,w
 15918                           
 15919                           ; Switch size 1, requested type "space"
 15920                           ; Number of cases is 2, Range of values is 2 to 3
 15921                           ; switch strategies available:
 15922                           ; Name         Instructions Cycles
 15923                           ; simple_byte            7     4 (average)
 15924                           ; direct_byte           13     9 (fixed)
 15925                           ; jumptable            263     9 (fixed)
 15926                           ;	Chosen strategy is simple_byte
 15927  0837  3A02               	xorlw	2	; case 2
 15928  0838  1903               	skipnz
 15929  0839  2830               	goto	l7151
 15930  083A  3A01               	xorlw	1	; case 3
 15931  083B  1903               	skipnz
 15932  083C  2831               	goto	l7153
 15933  083D  283E               	goto	l2349
 15934  083E                     l2349:	
 15935                           
 15936                           ;RF_Control_B1.c: 560: status = ~status;
 15937  083E  09E0               	comf	setRF_DimmerLights@status,f
 15938                           
 15939                           ;RF_Control_B1.c: 562: setProductData(11, lights);
 15940  083F  0861               	movf	setRF_DimmerLights@lights,w
 15941  0840  00DE               	movwf	??_setRF_DimmerLights
 15942  0841  085E               	movf	??_setRF_DimmerLights,w
 15943  0842  00DA               	movwf	setProductData@value
 15944  0843  300B               	movlw	11
 15945  0844  3198  20A2  3188   	fcall	_setProductData
 15946                           
 15947                           ;RF_Control_B1.c: 563: setProductData(17, product->Data[26 + lights]);
 15948  0847  0020               	movlb	0	; select bank0
 15949  0848  0861               	movf	setRF_DimmerLights@lights,w
 15950  0849  3E1A               	addlw	26
 15951  084A  077B               	addwf	_product,w
 15952  084B  00DE               	movwf	??_setRF_DimmerLights
 15953  084C  085E               	movf	??_setRF_DimmerLights,w
 15954  084D  0086               	movwf	6
 15955  084E  3002               	movlw	2	; select bank4/5
 15956  084F  0087               	movwf	7
 15957  0850  0801               	movf	1,w
 15958  0851  00DF               	movwf	??_setRF_DimmerLights+1
 15959  0852  085F               	movf	??_setRF_DimmerLights+1,w
 15960  0853  00DA               	movwf	setProductData@value
 15961  0854  3011               	movlw	17
 15962  0855  3198  20A2  3188   	fcall	_setProductData
 15963                           
 15964                           ;RF_Control_B1.c: 564: if (on == 1) {
 15965  0858  0020               	movlb	0	; select bank0
 15966  0859  085D               	movf	setRF_DimmerLights@on,w
 15967  085A  3A01               	xorlw	1
 15968  085B  1D03               	skipz
 15969  085C  287C               	goto	l7165
 15970                           
 15971                           ;RF_Control_B1.c: 565: setProductData(9, product->Data[20 + lights]);
 15972  085D  0861               	movf	setRF_DimmerLights@lights,w
 15973  085E  3E14               	addlw	20
 15974  085F  077B               	addwf	_product,w
 15975  0860  00DE               	movwf	??_setRF_DimmerLights
 15976  0861  085E               	movf	??_setRF_DimmerLights,w
 15977  0862  0086               	movwf	6
 15978  0863  3002               	movlw	2	; select bank4/5
 15979  0864  0087               	movwf	7
 15980  0865  0801               	movf	1,w
 15981  0866  00DF               	movwf	??_setRF_DimmerLights+1
 15982  0867  085F               	movf	??_setRF_DimmerLights+1,w
 15983  0868  00DA               	movwf	setProductData@value
 15984  0869  3009               	movlw	9
 15985  086A  3198  20A2  3188   	fcall	_setProductData
 15986                           
 15987                           ;RF_Control_B1.c: 566: setProductData(15, (product->Data[15] | lights));
 15988  086D  087B               	movf	_product,w
 15989  086E  3E0F               	addlw	15
 15990  086F  0086               	movwf	6
 15991  0870  3002               	movlw	2	; select bank4/5
 15992  0871  0087               	movwf	7
 15993  0872  0801               	movf	1,w
 15994  0873  0020               	movlb	0	; select bank0
 15995  0874  0461               	iorwf	setRF_DimmerLights@lights,w
 15996  0875  00DE               	movwf	??_setRF_DimmerLights
 15997  0876  085E               	movf	??_setRF_DimmerLights,w
 15998  0877  00DA               	movwf	setProductData@value
 15999  0878  300F               	movlw	15
 16000  0879  3198  20A2         	fcall	_setProductData
 16001                           
 16002                           ;RF_Control_B1.c: 567: } else {
 16003  087B  0008               	return
 16004  087C                     l7165:	
 16005                           
 16006                           ;RF_Control_B1.c: 568: setProductData(9, 0x00);
 16007  087C  0020               	movlb	0	; select bank0
 16008  087D  01DA               	clrf	setProductData@value
 16009  087E  3009               	movlw	9
 16010  087F  3198  20A2  3188   	fcall	_setProductData
 16011                           
 16012                           ;RF_Control_B1.c: 569: setProductData(15, (product->Data[15] & status));
 16013  0882  087B               	movf	_product,w
 16014  0883  3E0F               	addlw	15
 16015  0884  0086               	movwf	6
 16016  0885  3002               	movlw	2	; select bank4/5
 16017  0886  0087               	movwf	7
 16018  0887  0801               	movf	1,w
 16019  0888  0020               	movlb	0	; select bank0
 16020  0889  0560               	andwf	setRF_DimmerLights@status,w
 16021  088A  00DE               	movwf	??_setRF_DimmerLights
 16022  088B  085E               	movf	??_setRF_DimmerLights,w
 16023  088C  00DA               	movwf	setProductData@value
 16024  088D  300F               	movlw	15
 16025  088E  3198  20A2         	fcall	_setProductData
 16026  0890  0008               	return
 16027  0891                     __end_of_setRF_DimmerLights:	
 16028                           
 16029                           	psect	text107
 16030  1B0C                     __ptext107:	
 16031 ;; *************** function _setDimmerLights_Line *****************
 16032 ;; Defined at:
 16033 ;;		line 1215 in file "../src/Dimmer_B1.c"
 16034 ;; Parameters:    Size  Location     Type
 16035 ;;  lights          1    wreg     unsigned char 
 16036 ;; Auto vars:     Size  Location     Type
 16037 ;;  lights          1    2[COMMON] unsigned char 
 16038 ;; Return value:  Size  Location     Type
 16039 ;;		None               void
 16040 ;; Registers used:
 16041 ;;		wreg
 16042 ;; Tracked objects:
 16043 ;;		On entry : 0/0
 16044 ;;		On exit  : 0/0
 16045 ;;		Unchanged: 0/0
 16046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16051 ;;Total ram usage:        1 bytes
 16052 ;; Hardware stack levels used:    1
 16053 ;; Hardware stack levels required when called:    3
 16054 ;; This function calls:
 16055 ;;		Nothing
 16056 ;; This function is called by:
 16057 ;;		_setDimmerLights_OnOff
 16058 ;;		_setDimmerLights_Dimming
 16059 ;; This function uses a non-reentrant model
 16060 ;;
 16061                           
 16062                           
 16063                           ;psect for function _setDimmerLights_Line
 16064  1B0C                     _setDimmerLights_Line:	
 16065                           
 16066                           ;incstack = 0
 16067                           ; Regs used in _setDimmerLights_Line: [wreg]
 16068                           ;setDimmerLights_Line@lights stored from wreg
 16069  1B0C  00F2               	movwf	setDimmerLights_Line@lights
 16070                           
 16071                           ;Dimmer_B1.c: 1216: Dimmer.LoadGO = 1;
 16072  1B0D  0022               	movlb	2	; select bank2
 16073  1B0E  14A0               	bsf	_Dimmer^(0+256),1
 16074                           
 16075                           ;Dimmer_B1.c: 1218: DimmerLights1.Line = 0;
 16076  1B0F  0023               	movlb	3	; select bank3
 16077  1B10  10BF               	bcf	(_DimmerLights1^(0+384)+1),1
 16078                           
 16079                           ;Dimmer_B1.c: 1219: if (lights == 1 && lights != 0) {
 16080  1B11  0872               	movf	setDimmerLights_Line@lights,w
 16081  1B12  3A01               	xorlw	1
 16082  1B13  1D03               	skipz
 16083  1B14  2B19               	goto	l955
 16084  1B15  0872               	movf	setDimmerLights_Line@lights,w
 16085  1B16  1903               	btfsc	3,2
 16086  1B17  2B19               	goto	l955
 16087                           
 16088                           ;Dimmer_B1.c: 1220: DimmerLights1.Line = 1;
 16089  1B18  14BF               	bsf	(_DimmerLights1^(0+384)+1),1
 16090  1B19                     l955:	
 16091                           
 16092                           ;Dimmer_B1.c: 1221: }
 16093                           ;Dimmer_B1.c: 1224: DimmerLights2.Line = 0;
 16094  1B19  10C8               	bcf	(_DimmerLights2^(0+384)+1),1
 16095                           
 16096                           ;Dimmer_B1.c: 1225: if (lights == 2 && lights != 0) {
 16097  1B1A  0872               	movf	setDimmerLights_Line@lights,w
 16098  1B1B  3A02               	xorlw	2
 16099  1B1C  1D03               	skipz
 16100  1B1D  0008               	return
 16101  1B1E  0872               	movf	setDimmerLights_Line@lights,w
 16102  1B1F  1903               	btfsc	3,2
 16103  1B20  0008               	return
 16104                           
 16105                           ;Dimmer_B1.c: 1226: DimmerLights2.Line = 1;
 16106  1B21  14C8               	bsf	(_DimmerLights2^(0+384)+1),1
 16107  1B22  0008               	return
 16108  1B23                     __end_of_setDimmerLights_Line:	
 16109                           
 16110                           	psect	text108
 16111  1D4F                     __ptext108:	
 16112 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16113 ;; Defined at:
 16114 ;;		line 251 in file "../src/Dimmer_B1.c"
 16115 ;; Parameters:    Size  Location     Type
 16116 ;;  lights          1    wreg     unsigned char 
 16117 ;;  command         1    2[COMMON] unsigned char 
 16118 ;; Auto vars:     Size  Location     Type
 16119 ;;  lights          1    4[COMMON] unsigned char 
 16120 ;; Return value:  Size  Location     Type
 16121 ;;		None               void
 16122 ;; Registers used:
 16123 ;;		wreg, status,2, status,0
 16124 ;; Tracked objects:
 16125 ;;		On entry : 0/0
 16126 ;;		On exit  : 0/0
 16127 ;;		Unchanged: 0/0
 16128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16129 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16130 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16131 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16132 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16133 ;;Total ram usage:        3 bytes
 16134 ;; Hardware stack levels used:    1
 16135 ;; Hardware stack levels required when called:    3
 16136 ;; This function calls:
 16137 ;;		Nothing
 16138 ;; This function is called by:
 16139 ;;		_setDimmerLights_Dimming
 16140 ;;		_setDimmerLights_DimmingClose
 16141 ;; This function uses a non-reentrant model
 16142 ;;
 16143                           
 16144                           
 16145                           ;psect for function _setDimmerIntr_Dimming_Sw
 16146  1D4F                     _setDimmerIntr_Dimming_Sw:	
 16147                           
 16148                           ;incstack = 0
 16149                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16150                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16151  1D4F  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 16152                           
 16153                           ;Dimmer_B1.c: 253: if (lights == 1) {
 16154  1D50  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16155  1D51  3A01               	xorlw	1
 16156  1D52  1D03               	skipz
 16157  1D53  2D62               	goto	l7277
 16158                           
 16159                           ;Dimmer_B1.c: 254: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16160  1D54  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16161  1D55  3A01               	xorlw	1
 16162  1D56  3000               	movlw	0
 16163  1D57  1903               	skipnz
 16164  1D58  3001               	movlw	1
 16165  1D59  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16166  1D5A  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16167  1D5B  0021               	movlb	1	; select bank1
 16168  1D5C  0820               	movf	_DimmerIntr1^(0+128),w
 16169  1D5D  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16170  1D5E  39EF               	andlw	-17
 16171  1D5F  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16172  1D60  00A0               	movwf	_DimmerIntr1^(0+128)
 16173                           
 16174                           ;Dimmer_B1.c: 255: }
 16175  1D61  0008               	return
 16176  1D62                     l7277:	
 16177                           
 16178                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 16179  1D62  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16180  1D63  3A02               	xorlw	2
 16181  1D64  1D03               	skipz
 16182  1D65  0008               	return
 16183                           
 16184                           ;Dimmer_B1.c: 259: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16185  1D66  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16186  1D67  3A01               	xorlw	1
 16187  1D68  3000               	movlw	0
 16188  1D69  1903               	skipnz
 16189  1D6A  3001               	movlw	1
 16190  1D6B  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16191  1D6C  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16192  1D6D  0021               	movlb	1	; select bank1
 16193  1D6E  0830               	movf	_DimmerIntr2^(0+128),w
 16194  1D6F  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16195  1D70  39EF               	andlw	-17
 16196  1D71  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16197  1D72  00B0               	movwf	_DimmerIntr2^(0+128)
 16198  1D73  0008               	return
 16199  1D74                     __end_of_setDimmerIntr_Dimming_Sw:	
 16200                           
 16201                           	psect	text109
 16202  1A0E                     __ptext109:	
 16203 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16204 ;; Defined at:
 16205 ;;		line 155 in file "../src/Dimmer_B1.c"
 16206 ;; Parameters:    Size  Location     Type
 16207 ;;  lights          1    wreg     unsigned char 
 16208 ;; Auto vars:     Size  Location     Type
 16209 ;;  lights          1    4[COMMON] unsigned char 
 16210 ;;  value           1    3[COMMON] unsigned char 
 16211 ;; Return value:  Size  Location     Type
 16212 ;;                  1    wreg      unsigned char 
 16213 ;; Registers used:
 16214 ;;		wreg, status,2
 16215 ;; Tracked objects:
 16216 ;;		On entry : 0/0
 16217 ;;		On exit  : 0/0
 16218 ;;		Unchanged: 0/0
 16219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;Total ram usage:        3 bytes
 16225 ;; Hardware stack levels used:    1
 16226 ;; Hardware stack levels required when called:    3
 16227 ;; This function calls:
 16228 ;;		Nothing
 16229 ;; This function is called by:
 16230 ;;		_setDimmerLights_Dimming
 16231 ;; This function uses a non-reentrant model
 16232 ;;
 16233                           
 16234                           
 16235                           ;psect for function _getDimmerIntr_DimmingValue
 16236  1A0E                     _getDimmerIntr_DimmingValue:	
 16237                           
 16238                           ;incstack = 0
 16239                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16240                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16241  1A0E  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 16242                           
 16243                           ;Dimmer_B1.c: 156: char value = 0;
 16244  1A0F  01F3               	clrf	getDimmerIntr_DimmingValue@value
 16245                           
 16246                           ;Dimmer_B1.c: 158: if (lights == 1) {
 16247  1A10  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16248  1A11  3A01               	xorlw	1
 16249  1A12  1D03               	skipz
 16250  1A13  2A17               	goto	l7511
 16251                           
 16252                           ;Dimmer_B1.c: 159: value = DimmerIntr1.DimmingValue;
 16253  1A14  0021               	movlb	1	; select bank1
 16254  1A15  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 16255  1A16  2A1D               	goto	L12
 16256  1A17                     l7511:	
 16257                           ;Dimmer_B1.c: 160: }
 16258                           
 16259                           
 16260                           ;Dimmer_B1.c: 163: else if (lights == 2) {
 16261  1A17  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16262  1A18  3A02               	xorlw	2
 16263  1A19  1D03               	skipz
 16264  1A1A  2A20               	goto	l779
 16265                           
 16266                           ;Dimmer_B1.c: 164: value = DimmerIntr2.DimmingValue;
 16267  1A1B  0021               	movlb	1	; select bank1
 16268  1A1C  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 16269  1A1D                     L12:	
 16270  1A1D  00F2               	movwf	??_getDimmerIntr_DimmingValue
 16271  1A1E  0872               	movf	??_getDimmerIntr_DimmingValue,w
 16272  1A1F  00F3               	movwf	getDimmerIntr_DimmingValue@value
 16273  1A20                     l779:	
 16274                           
 16275                           ;Dimmer_B1.c: 165: }
 16276                           ;Dimmer_B1.c: 172: return value;
 16277  1A20  0873               	movf	getDimmerIntr_DimmingValue@value,w
 16278  1A21  0008               	return
 16279  1A22                     __end_of_getDimmerIntr_DimmingValue:	
 16280                           
 16281                           	psect	text110
 16282  1FC9                     __ptext110:	
 16283 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16284 ;; Defined at:
 16285 ;;		line 1175 in file "../src/Dimmer_B1.c"
 16286 ;; Parameters:    Size  Location     Type
 16287 ;;  lights          1    wreg     unsigned char 
 16288 ;; Auto vars:     Size  Location     Type
 16289 ;;  lights          1    7[COMMON] unsigned char 
 16290 ;;  allow           1    8[COMMON] unsigned char 
 16291 ;; Return value:  Size  Location     Type
 16292 ;;                  1    wreg      unsigned char 
 16293 ;; Registers used:
 16294 ;;		wreg, status,2, status,0, pclath, cstack
 16295 ;; Tracked objects:
 16296 ;;		On entry : 0/0
 16297 ;;		On exit  : 0/0
 16298 ;;		Unchanged: 0/0
 16299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16302 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16303 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16304 ;;Total ram usage:        6 bytes
 16305 ;; Hardware stack levels used:    1
 16306 ;; Hardware stack levels required when called:    4
 16307 ;; This function calls:
 16308 ;;		_getLoad_OK
 16309 ;; This function is called by:
 16310 ;;		_setDimmerLights_Main
 16311 ;; This function uses a non-reentrant model
 16312 ;;
 16313                           
 16314                           
 16315                           ;psect for function _getDimmerLights_Allow_Condition
 16316  1FC9                     _getDimmerLights_Allow_Condition:	
 16317                           
 16318                           ;incstack = 0
 16319                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16320                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16321  1FC9  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 16322                           
 16323                           ;Dimmer_B1.c: 1176: char allow = 0;
 16324  1FCA  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 16325                           
 16326                           ;Dimmer_B1.c: 1182: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16327  1FCB  01F4               	clrf	_getDimmerLights_Allow_Condition$2729
 16328  1FCC  0AF4               	incf	_getDimmerLights_Allow_Condition$2729,f
 16329  1FCD  31A7  27EB  319F   	fcall	_getLoad_OK
 16330  1FD0  3800               	iorlw	0
 16331  1FD1  1D03               	skipz
 16332  1FD2  2FD7               	goto	l7833
 16333  1FD3  0022               	movlb	2	; select bank2
 16334  1FD4  18A0               	btfsc	_Dimmer^(0+256),1
 16335  1FD5  2FD7               	goto	l7833
 16336  1FD6  01F4               	clrf	_getDimmerLights_Allow_Condition$2729
 16337  1FD7                     l7833:	
 16338  1FD7  0874               	movf	_getDimmerLights_Allow_Condition$2729,w
 16339  1FD8  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16340  1FD9  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16341  1FDA  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16342                           
 16343                           ;Dimmer_B1.c: 1186: if (allow == 0) {
 16344  1FDB  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 16345  1FDC  1D03               	skipz
 16346  1FDD  2FFE               	goto	l7857
 16347                           
 16348                           ;Dimmer_B1.c: 1187: if (lights == 1) {
 16349  1FDE  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16350  1FDF  3A01               	xorlw	1
 16351  1FE0  1D03               	skipz
 16352  1FE1  2FED               	goto	l7847
 16353                           
 16354                           ;Dimmer_B1.c: 1188: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16355  1FE2  01F5               	clrf	_getDimmerLights_Allow_Condition$2730
 16356  1FE3  0AF5               	incf	_getDimmerLights_Allow_Condition$2730,f
 16357  1FE4  0023               	movlb	3	; select bank3
 16358  1FE5  1A47               	btfsc	_DimmerLights2^(0+384),4
 16359  1FE6  2FEB               	goto	l7845
 16360  1FE7  0021               	movlb	1	; select bank1
 16361  1FE8  1A30               	btfsc	_DimmerIntr2^(0+128),4
 16362  1FE9  2FEB               	goto	l7845
 16363  1FEA  01F5               	clrf	_getDimmerLights_Allow_Condition$2730
 16364  1FEB                     l7845:	
 16365  1FEB  0875               	movf	_getDimmerLights_Allow_Condition$2730,w
 16366  1FEC  2FFB               	goto	L13
 16367  1FED                     l7847:	
 16368                           ;Dimmer_B1.c: 1189: } else if (lights == 2) {
 16369                           
 16370  1FED  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16371  1FEE  3A02               	xorlw	2
 16372  1FEF  1D03               	skipz
 16373  1FF0  2FFE               	goto	l7857
 16374                           
 16375                           ;Dimmer_B1.c: 1190: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16376  1FF1  01F6               	clrf	_getDimmerLights_Allow_Condition$2731
 16377  1FF2  0AF6               	incf	_getDimmerLights_Allow_Condition$2731,f
 16378  1FF3  0023               	movlb	3	; select bank3
 16379  1FF4  1A3E               	btfsc	_DimmerLights1^(0+384),4
 16380  1FF5  2FFA               	goto	l7855
 16381  1FF6  0021               	movlb	1	; select bank1
 16382  1FF7  1A20               	btfsc	_DimmerIntr1^(0+128),4
 16383  1FF8  2FFA               	goto	l7855
 16384  1FF9  01F6               	clrf	_getDimmerLights_Allow_Condition$2731
 16385  1FFA                     l7855:	
 16386  1FFA  0876               	movf	_getDimmerLights_Allow_Condition$2731,w
 16387  1FFB                     L13:	
 16388  1FFB  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16389  1FFC  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16390  1FFD  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16391  1FFE                     l7857:	
 16392                           
 16393                           ;Dimmer_B1.c: 1191: }
 16394                           ;Dimmer_B1.c: 1192: }
 16395                           ;Dimmer_B1.c: 1210: return allow;
 16396  1FFE  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 16397  1FFF  0008               	return
 16398  2000                     __end_of_getDimmerLights_Allow_Condition:	
 16399                           
 16400                           	psect	text111
 16401  27EB                     __ptext111:	
 16402 ;; *************** function _getLoad_OK *****************
 16403 ;; Defined at:
 16404 ;;		line 274 in file "../src/OverLoad_B1.c"
 16405 ;; Parameters:    Size  Location     Type
 16406 ;;		None
 16407 ;; Auto vars:     Size  Location     Type
 16408 ;;  ok              1    2[COMMON] unsigned char 
 16409 ;; Return value:  Size  Location     Type
 16410 ;;                  1    wreg      unsigned char 
 16411 ;; Registers used:
 16412 ;;		wreg, status,2
 16413 ;; Tracked objects:
 16414 ;;		On entry : 0/0
 16415 ;;		On exit  : 0/0
 16416 ;;		Unchanged: 0/0
 16417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;Total ram usage:        1 bytes
 16423 ;; Hardware stack levels used:    1
 16424 ;; Hardware stack levels required when called:    3
 16425 ;; This function calls:
 16426 ;;		Nothing
 16427 ;; This function is called by:
 16428 ;;		_DimmerLights_Main
 16429 ;;		_getDimmerLights_Allow_Condition
 16430 ;; This function uses a non-reentrant model
 16431 ;;
 16432                           
 16433                           
 16434                           ;psect for function _getLoad_OK
 16435  27EB                     _getLoad_OK:	
 16436                           
 16437                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16438                           
 16439                           ;incstack = 0
 16440                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16441  27EB  3000               	movlw	0
 16442  27EC  0022               	movlb	2	; select bank2
 16443  27ED  1BB2               	btfsc	_Load^(0+256),7
 16444  27EE  3001               	movlw	1
 16445  27EF  00F2               	movwf	getLoad_OK@ok
 16446                           
 16447                           ;OverLoad_B1.c: 276: return ok;
 16448  27F0  0872               	movf	getLoad_OK@ok,w
 16449  27F1  0008               	return
 16450  27F2                     __end_of_getLoad_OK:	
 16451                           
 16452                           	psect	text112
 16453  1E3C                     __ptext112:	
 16454 ;; *************** function _getMain_All_Error_Status *****************
 16455 ;; Defined at:
 16456 ;;		line 429 in file "../src/main_B1.c"
 16457 ;; Parameters:    Size  Location     Type
 16458 ;;  command         1    wreg     unsigned char 
 16459 ;; Auto vars:     Size  Location     Type
 16460 ;;  command         1    7[COMMON] unsigned char 
 16461 ;;  status          1    8[COMMON] unsigned char 
 16462 ;; Return value:  Size  Location     Type
 16463 ;;                  1    wreg      unsigned char 
 16464 ;; Registers used:
 16465 ;;		wreg, status,2, status,0
 16466 ;; Tracked objects:
 16467 ;;		On entry : 0/0
 16468 ;;		On exit  : 0/0
 16469 ;;		Unchanged: 0/0
 16470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16472 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16474 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16475 ;;Total ram usage:        7 bytes
 16476 ;; Hardware stack levels used:    1
 16477 ;; Hardware stack levels required when called:    3
 16478 ;; This function calls:
 16479 ;;		Nothing
 16480 ;; This function is called by:
 16481 ;;		_DimmerLights_Main
 16482 ;;		_Load_Main
 16483 ;;		_setTemp_Main
 16484 ;;		_getRxData
 16485 ;;		_setSw_Main
 16486 ;;		_Exception_Main
 16487 ;; This function uses a non-reentrant model
 16488 ;;
 16489                           
 16490                           
 16491                           ;psect for function _getMain_All_Error_Status
 16492  1E3C                     _getMain_All_Error_Status:	
 16493                           
 16494                           ;incstack = 0
 16495                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16496                           ;getMain_All_Error_Status@command stored from wreg
 16497  1E3C  00F7               	movwf	getMain_All_Error_Status@command
 16498                           
 16499                           ;main_B1.c: 430: char status = 0;
 16500  1E3D  01F8               	clrf	getMain_All_Error_Status@status
 16501                           
 16502                           ;main_B1.c: 441: if (status == 0 && command != 2) {
 16503  1E3E  08F8               	movf	getMain_All_Error_Status@status,f
 16504  1E3F  1D03               	skipz
 16505  1E40  2E53               	goto	l7535
 16506  1E41  0877               	movf	getMain_All_Error_Status@command,w
 16507  1E42  3A02               	xorlw	2
 16508  1E43  1903               	skipnz
 16509  1E44  2E53               	goto	l7535
 16510                           
 16511                           ;main_B1.c: 442: status = Temp.ERROR == 1 ? 2 : 0;
 16512  1E45  0022               	movlb	2	; select bank2
 16513  1E46  18DA               	btfsc	_Temp^(0+256),1
 16514  1E47  2E4B               	goto	l7533
 16515  1E48  01F3               	clrf	_getMain_All_Error_Status$7769
 16516  1E49  01F4               	clrf	_getMain_All_Error_Status$7769+1
 16517  1E4A  2E4F               	goto	l3001
 16518  1E4B                     l7533:	
 16519  1E4B  3002               	movlw	2
 16520  1E4C  00F3               	movwf	_getMain_All_Error_Status$7769
 16521  1E4D  3000               	movlw	0
 16522  1E4E  00F4               	movwf	_getMain_All_Error_Status$7769+1
 16523  1E4F                     l3001:	
 16524  1E4F  0873               	movf	_getMain_All_Error_Status$7769,w
 16525  1E50  00F2               	movwf	??_getMain_All_Error_Status
 16526  1E51  0872               	movf	??_getMain_All_Error_Status,w
 16527  1E52  00F8               	movwf	getMain_All_Error_Status@status
 16528  1E53                     l7535:	
 16529                           
 16530                           ;main_B1.c: 443: }
 16531                           ;main_B1.c: 448: if (status == 0 && command != 3) {
 16532  1E53  08F8               	movf	getMain_All_Error_Status@status,f
 16533  1E54  1D03               	skipz
 16534  1E55  2E68               	goto	l3002
 16535  1E56  0877               	movf	getMain_All_Error_Status@command,w
 16536  1E57  3A03               	xorlw	3
 16537  1E58  1903               	skipnz
 16538  1E59  2E68               	goto	l3002
 16539                           
 16540                           ;main_B1.c: 449: status = Load.ERROR == 1 ? 3 : 0;
 16541  1E5A  0022               	movlb	2	; select bank2
 16542  1E5B  1AB2               	btfsc	_Load^(0+256),5
 16543  1E5C  2E60               	goto	l7543
 16544  1E5D  01F5               	clrf	_getMain_All_Error_Status$7770
 16545  1E5E  01F6               	clrf	_getMain_All_Error_Status$7770+1
 16546  1E5F  2E64               	goto	l3006
 16547  1E60                     l7543:	
 16548  1E60  3003               	movlw	3
 16549  1E61  00F5               	movwf	_getMain_All_Error_Status$7770
 16550  1E62  3000               	movlw	0
 16551  1E63  00F6               	movwf	_getMain_All_Error_Status$7770+1
 16552  1E64                     l3006:	
 16553  1E64  0875               	movf	_getMain_All_Error_Status$7770,w
 16554  1E65  00F2               	movwf	??_getMain_All_Error_Status
 16555  1E66  0872               	movf	??_getMain_All_Error_Status,w
 16556  1E67  00F8               	movwf	getMain_All_Error_Status@status
 16557  1E68                     l3002:	
 16558                           
 16559                           ;main_B1.c: 450: }
 16560                           ;main_B1.c: 460: return status;
 16561  1E68  0878               	movf	getMain_All_Error_Status@status,w
 16562  1E69  0008               	return
 16563  1E6A                     __end_of_getMain_All_Error_Status:	
 16564                           
 16565                           	psect	text113
 16566  1393                     __ptext113:	
 16567 ;; *************** function _DimmerLights_TwoPhase_Main *****************
 16568 ;; Defined at:
 16569 ;;		line 957 in file "../src/Dimmer_B1.c"
 16570 ;; Parameters:    Size  Location     Type
 16571 ;;  lights          1    wreg     unsigned char 
 16572 ;; Auto vars:     Size  Location     Type
 16573 ;;  lights          1   65[BANK0 ] unsigned char 
 16574 ;; Return value:  Size  Location     Type
 16575 ;;		None               void
 16576 ;; Registers used:
 16577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16578 ;; Tracked objects:
 16579 ;;		On entry : 0/0
 16580 ;;		On exit  : 0/0
 16581 ;;		Unchanged: 0/0
 16582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;Total ram usage:        1 bytes
 16588 ;; Hardware stack levels used:    1
 16589 ;; Hardware stack levels required when called:    7
 16590 ;; This function calls:
 16591 ;;		_DimmerLights_AssignationDimming
 16592 ;;		_DimmerLights_SelectPointer
 16593 ;; This function is called by:
 16594 ;;		_DimmerLights_Main
 16595 ;; This function uses a non-reentrant model
 16596 ;;
 16597                           
 16598                           
 16599                           ;psect for function _DimmerLights_TwoPhase_Main
 16600  1393                     _DimmerLights_TwoPhase_Main:	
 16601                           
 16602                           ;incstack = 0
 16603                           ; Regs used in _DimmerLights_TwoPhase_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16604                           ;DimmerLights_TwoPhase_Main@lights stored from wreg
 16605  1393  0020               	movlb	0	; select bank0
 16606  1394  00E1               	movwf	DimmerLights_TwoPhase_Main@lights
 16607                           
 16608                           ;Dimmer_B1.c: 959: DimmerLights_SelectPointer(lights);
 16609  1395  0861               	movf	DimmerLights_TwoPhase_Main@lights,w
 16610  1396  319A  2237  3193   	fcall	_DimmerLights_SelectPointer
 16611                           
 16612                           ;Dimmer_B1.c: 960: if (DimmerLights->Phase == 1) {
 16613  1399  0020               	movlb	0	; select bank0
 16614  139A  086C               	movf	_DimmerLights,w
 16615  139B  3E02               	addlw	2
 16616  139C  0086               	movwf	6
 16617  139D  3001               	movlw	1	; select bank2/3
 16618  139E  0087               	movwf	7
 16619  139F  1C01               	btfss	1,0
 16620  13A0  0008               	return
 16621                           
 16622                           ;Dimmer_B1.c: 961: if (DimmerLights->PhaseFirst == 0) {
 16623  13A1  086C               	movf	_DimmerLights,w
 16624  13A2  3E02               	addlw	2
 16625  13A3  0086               	movwf	6
 16626  13A4  3001               	movlw	1	; select bank2/3
 16627  13A5  0087               	movwf	7
 16628  13A6  1881               	btfsc	1,1
 16629  13A7  2BD1               	goto	l10661
 16630                           
 16631                           ;Dimmer_B1.c: 963: if (DimmerLights->PhaseSwitch == 1) {
 16632  13A8  086C               	movf	_DimmerLights,w
 16633  13A9  3E02               	addlw	2
 16634  13AA  0086               	movwf	6
 16635  13AB  3001               	movlw	1	; select bank2/3
 16636  13AC  0087               	movwf	7
 16637  13AD  1D01               	btfss	1,2
 16638  13AE  2BC0               	goto	l10659
 16639                           
 16640                           ;Dimmer_B1.c: 964: DimmerLights->PhaseFirst = 1;
 16641  13AF  086C               	movf	_DimmerLights,w
 16642  13B0  3E02               	addlw	2
 16643  13B1  0086               	movwf	6
 16644  13B2  3001               	movlw	1	; select bank2/3
 16645  13B3  0087               	movwf	7
 16646  13B4  1481               	bsf	1,1
 16647                           
 16648                           ;Dimmer_B1.c: 965: DimmerLights->Trigger = 1;
 16649  13B5  086C               	movf	_DimmerLights,w
 16650  13B6  0086               	movwf	6
 16651  13B7  3001               	movlw	1	; select bank2/3
 16652  13B8  0087               	movwf	7
 16653  13B9  1481               	bsf	1,1
 16654                           
 16655                           ;Dimmer_B1.c: 966: DimmerLights->Switch = 1;
 16656  13BA  086C               	movf	_DimmerLights,w
 16657  13BB  0086               	movwf	6
 16658  13BC  3001               	movlw	1	; select bank2/3
 16659  13BD  0087               	movwf	7
 16660  13BE  1501               	bsf	1,2
 16661                           
 16662                           ;Dimmer_B1.c: 967: } else {
 16663  13BF  0008               	return
 16664  13C0                     l10659:	
 16665                           
 16666                           ;Dimmer_B1.c: 968: DimmerLights->Phase = 0;
 16667  13C0  086C               	movf	_DimmerLights,w
 16668  13C1  3E02               	addlw	2
 16669  13C2  0086               	movwf	6
 16670  13C3  3001               	movlw	1	; select bank2/3
 16671  13C4  0087               	movwf	7
 16672  13C5  1001               	bcf	1,0
 16673                           
 16674                           ;Dimmer_B1.c: 969: DimmerLights->Trigger = 1;
 16675  13C6  086C               	movf	_DimmerLights,w
 16676  13C7  0086               	movwf	6
 16677  13C8  3001               	movlw	1	; select bank2/3
 16678  13C9  0087               	movwf	7
 16679  13CA  1481               	bsf	1,1
 16680                           
 16681                           ;Dimmer_B1.c: 970: DimmerLights->Switch = 0;
 16682  13CB  086C               	movf	_DimmerLights,w
 16683  13CC  0086               	movwf	6
 16684  13CD  3001               	movlw	1	; select bank2/3
 16685  13CE  0087               	movwf	7
 16686  13CF  1101               	bcf	1,2
 16687                           
 16688                           ;Dimmer_B1.c: 971: }
 16689                           ;Dimmer_B1.c: 972: } else {
 16690  13D0  0008               	return
 16691  13D1                     l10661:	
 16692                           
 16693                           ;Dimmer_B1.c: 973: if (DimmerLights->Trigger == 0) {
 16694  13D1  086C               	movf	_DimmerLights,w
 16695  13D2  0086               	movwf	6
 16696  13D3  3001               	movlw	1	; select bank2/3
 16697  13D4  0087               	movwf	7
 16698  13D5  1881               	btfsc	1,1
 16699  13D6  0008               	return
 16700                           
 16701                           ;Dimmer_B1.c: 974: DimmerLights->PhaseFirst = 0;
 16702  13D7  086C               	movf	_DimmerLights,w
 16703  13D8  3E02               	addlw	2
 16704  13D9  0086               	movwf	6
 16705  13DA  3001               	movlw	1	; select bank2/3
 16706  13DB  0087               	movwf	7
 16707  13DC  1081               	bcf	1,1
 16708                           
 16709                           ;Dimmer_B1.c: 975: DimmerLights->Phase = 0;
 16710  13DD  086C               	movf	_DimmerLights,w
 16711  13DE  3E02               	addlw	2
 16712  13DF  0086               	movwf	6
 16713  13E0  3001               	movlw	1	; select bank2/3
 16714  13E1  0087               	movwf	7
 16715  13E2  1001               	bcf	1,0
 16716                           
 16717                           ;Dimmer_B1.c: 976: DimmerLights_AssignationDimming(lights);
 16718  13E3  0861               	movf	DimmerLights_TwoPhase_Main@lights,w
 16719  13E4  319E  266A         	fcall	_DimmerLights_AssignationDimming
 16720  13E6  0008               	return
 16721  13E7                     __end_of_DimmerLights_TwoPhase_Main:	
 16722                           
 16723                           	psect	text114
 16724  1E6A                     __ptext114:	
 16725 ;; *************** function _DimmerLights_AssignationDimming *****************
 16726 ;; Defined at:
 16727 ;;		line 983 in file "../src/Dimmer_B1.c"
 16728 ;; Parameters:    Size  Location     Type
 16729 ;;  sw              1    wreg     unsigned char 
 16730 ;; Auto vars:     Size  Location     Type
 16731 ;;  sw              1   64[BANK0 ] unsigned char 
 16732 ;;  status          1   63[BANK0 ] unsigned char 
 16733 ;; Return value:  Size  Location     Type
 16734 ;;		None               void
 16735 ;; Registers used:
 16736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16737 ;; Tracked objects:
 16738 ;;		On entry : 0/0
 16739 ;;		On exit  : 0/0
 16740 ;;		Unchanged: 0/0
 16741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16744 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16745 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;Total ram usage:        4 bytes
 16747 ;; Hardware stack levels used:    1
 16748 ;; Hardware stack levels required when called:    6
 16749 ;; This function calls:
 16750 ;;		_getDimmerLights_PercentToValue
 16751 ;;		_getDimmerLights_Status
 16752 ;;		_setDimmerIntr_Dimming_RF
 16753 ;;		_setDimmerIntr_MaxmumValue
 16754 ;;		_setMemory_Modify
 16755 ;; This function is called by:
 16756 ;;		_DimmerLights_TwoPhase_Main
 16757 ;; This function uses a non-reentrant model
 16758 ;;
 16759                           
 16760                           
 16761                           ;psect for function _DimmerLights_AssignationDimming
 16762  1E6A                     _DimmerLights_AssignationDimming:	
 16763                           
 16764                           ;incstack = 0
 16765                           ; Regs used in _DimmerLights_AssignationDimming: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 16766                           ;DimmerLights_AssignationDimming@sw stored from wreg
 16767  1E6A  0020               	movlb	0	; select bank0
 16768  1E6B  00E0               	movwf	DimmerLights_AssignationDimming@sw
 16769                           
 16770                           ;Dimmer_B1.c: 984: char status = 0;
 16771  1E6C  01DF               	clrf	DimmerLights_AssignationDimming@status
 16772                           
 16773                           ;Dimmer_B1.c: 986: status = getDimmerLights_Status(sw);
 16774  1E6D  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16775  1E6E  3198  20EC  319E   	fcall	_getDimmerLights_Status
 16776  1E71  0020               	movlb	0	; select bank0
 16777  1E72  00DD               	movwf	??_DimmerLights_AssignationDimming
 16778  1E73  085D               	movf	??_DimmerLights_AssignationDimming,w
 16779  1E74  00DF               	movwf	DimmerLights_AssignationDimming@status
 16780                           
 16781                           ;Dimmer_B1.c: 990: setMemory_Modify(1);
 16782  1E75  3001               	movlw	1
 16783  1E76  3199  2137  319E   	fcall	_setMemory_Modify
 16784                           
 16785                           ;Dimmer_B1.c: 994: if (status == 1) {
 16786  1E79  0020               	movlb	0	; select bank0
 16787  1E7A  085F               	movf	DimmerLights_AssignationDimming@status,w
 16788  1E7B  3A01               	xorlw	1
 16789  1E7C  1D03               	skipz
 16790  1E7D  0008               	return
 16791                           
 16792                           ;Dimmer_B1.c: 995: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(product-
      +                          >Data[20 + sw]));
 16793  1E7E  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16794  1E7F  3E14               	addlw	20
 16795  1E80  077B               	addwf	_product,w
 16796  1E81  00DD               	movwf	??_DimmerLights_AssignationDimming
 16797  1E82  085D               	movf	??_DimmerLights_AssignationDimming,w
 16798  1E83  0086               	movwf	6
 16799  1E84  3002               	movlw	2	; select bank4/5
 16800  1E85  0087               	movwf	7
 16801  1E86  0801               	movf	1,w
 16802  1E87  3196  26D1  319E   	fcall	_getDimmerLights_PercentToValue
 16803  1E8A  0020               	movlb	0	; select bank0
 16804  1E8B  00DE               	movwf	??_DimmerLights_AssignationDimming+1
 16805  1E8C  085E               	movf	??_DimmerLights_AssignationDimming+1,w
 16806  1E8D  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 16807  1E8E  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16808  1E8F  319A  22F5  319E   	fcall	_setDimmerIntr_MaxmumValue
 16809                           
 16810                           ;Dimmer_B1.c: 996: setDimmerIntr_Dimming_RF(sw, 1);
 16811  1E92  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 16812  1E93  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 16813  1E94  0020               	movlb	0	; select bank0
 16814  1E95  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16815  1E96  319D  25C0         	fcall	_setDimmerIntr_Dimming_RF
 16816  1E98  0008               	return
 16817  1E99                     __end_of_DimmerLights_AssignationDimming:	
 16818                           
 16819                           	psect	text115
 16820  1AF5                     __ptext115:	
 16821 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16822 ;; Defined at:
 16823 ;;		line 175 in file "../src/Dimmer_B1.c"
 16824 ;; Parameters:    Size  Location     Type
 16825 ;;  lights          1    wreg     unsigned char 
 16826 ;;  value           1   58[BANK0 ] unsigned char 
 16827 ;; Auto vars:     Size  Location     Type
 16828 ;;  lights          1   60[BANK0 ] unsigned char 
 16829 ;; Return value:  Size  Location     Type
 16830 ;;		None               void
 16831 ;; Registers used:
 16832 ;;		wreg
 16833 ;; Tracked objects:
 16834 ;;		On entry : 0/0
 16835 ;;		On exit  : 0/0
 16836 ;;		Unchanged: 0/0
 16837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16838 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16842 ;;Total ram usage:        3 bytes
 16843 ;; Hardware stack levels used:    1
 16844 ;; Hardware stack levels required when called:    3
 16845 ;; This function calls:
 16846 ;;		Nothing
 16847 ;; This function is called by:
 16848 ;;		_DimmerLights_AssignationDimming
 16849 ;;		_setDimmerLights_OnOff
 16850 ;;		_setDimmerLights_Dimming
 16851 ;;		_setRFSW_AdjControl
 16852 ;; This function uses a non-reentrant model
 16853 ;;
 16854                           
 16855                           
 16856                           ;psect for function _setDimmerIntr_MaxmumValue
 16857  1AF5                     _setDimmerIntr_MaxmumValue:	
 16858                           
 16859                           ;incstack = 0
 16860                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16861                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16862  1AF5  0020               	movlb	0	; select bank0
 16863  1AF6  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 16864                           
 16865                           ;Dimmer_B1.c: 177: if (lights == 1) {
 16866  1AF7  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16867  1AF8  3A01               	xorlw	1
 16868  1AF9  1D03               	skipz
 16869  1AFA  2B01               	goto	l7137
 16870                           
 16871                           ;Dimmer_B1.c: 178: DimmerIntr1.MaxmumValue = value;
 16872  1AFB  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16873  1AFC  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16874  1AFD  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16875  1AFE  0021               	movlb	1	; select bank1
 16876  1AFF  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 16877                           
 16878                           ;Dimmer_B1.c: 179: }
 16879  1B00  0008               	return
 16880  1B01                     l7137:	
 16881                           
 16882                           ;Dimmer_B1.c: 182: else if (lights == 2) {
 16883  1B01  0020               	movlb	0	; select bank0
 16884  1B02  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16885  1B03  3A02               	xorlw	2
 16886  1B04  1D03               	skipz
 16887  1B05  0008               	return
 16888                           
 16889                           ;Dimmer_B1.c: 183: DimmerIntr2.MaxmumValue = value;
 16890  1B06  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16891  1B07  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16892  1B08  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16893  1B09  0021               	movlb	1	; select bank1
 16894  1B0A  00B6               	movwf	(_DimmerIntr2^(0+128)+6)
 16895  1B0B  0008               	return
 16896  1B0C                     __end_of_setDimmerIntr_MaxmumValue:	
 16897                           
 16898                           	psect	text116
 16899  1DC0                     __ptext116:	
 16900 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 16901 ;; Defined at:
 16902 ;;		line 290 in file "../src/Dimmer_B1.c"
 16903 ;; Parameters:    Size  Location     Type
 16904 ;;  lights          1    wreg     unsigned char 
 16905 ;;  command         1    2[COMMON] unsigned char 
 16906 ;; Auto vars:     Size  Location     Type
 16907 ;;  lights          1    4[COMMON] unsigned char 
 16908 ;; Return value:  Size  Location     Type
 16909 ;;		None               void
 16910 ;; Registers used:
 16911 ;;		wreg, status,2, status,0
 16912 ;; Tracked objects:
 16913 ;;		On entry : 0/0
 16914 ;;		On exit  : 0/0
 16915 ;;		Unchanged: 0/0
 16916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16917 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16919 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16920 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16921 ;;Total ram usage:        3 bytes
 16922 ;; Hardware stack levels used:    1
 16923 ;; Hardware stack levels required when called:    3
 16924 ;; This function calls:
 16925 ;;		Nothing
 16926 ;; This function is called by:
 16927 ;;		_DimmerLights_AssignationDimming
 16928 ;;		_setDimmerLights_OnOff
 16929 ;;		_setRFSW_AdjControl
 16930 ;; This function uses a non-reentrant model
 16931 ;;
 16932                           
 16933                           
 16934                           ;psect for function _setDimmerIntr_Dimming_RF
 16935  1DC0                     _setDimmerIntr_Dimming_RF:	
 16936                           
 16937                           ;incstack = 0
 16938                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 16939                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 16940  1DC0  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 16941                           
 16942                           ;Dimmer_B1.c: 292: if (lights == 1) {
 16943  1DC1  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 16944  1DC2  3A01               	xorlw	1
 16945  1DC3  1D03               	skipz
 16946  1DC4  2DD5               	goto	l7145
 16947                           
 16948                           ;Dimmer_B1.c: 293: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 16949  1DC5  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 16950  1DC6  3A01               	xorlw	1
 16951  1DC7  3000               	movlw	0
 16952  1DC8  1903               	skipnz
 16953  1DC9  3001               	movlw	1
 16954  1DCA  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 16955  1DCB  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 16956  1DCC  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16957  1DCD  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16958  1DCE  0021               	movlb	1	; select bank1
 16959  1DCF  0820               	movf	_DimmerIntr1^(0+128),w
 16960  1DD0  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16961  1DD1  39BF               	andlw	-65
 16962  1DD2  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16963  1DD3  00A0               	movwf	_DimmerIntr1^(0+128)
 16964                           
 16965                           ;Dimmer_B1.c: 294: }
 16966  1DD4  0008               	return
 16967  1DD5                     l7145:	
 16968                           
 16969                           ;Dimmer_B1.c: 297: else if (lights == 2) {
 16970  1DD5  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 16971  1DD6  3A02               	xorlw	2
 16972  1DD7  1D03               	skipz
 16973  1DD8  0008               	return
 16974                           
 16975                           ;Dimmer_B1.c: 298: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 16976  1DD9  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 16977  1DDA  3A01               	xorlw	1
 16978  1DDB  3000               	movlw	0
 16979  1DDC  1903               	skipnz
 16980  1DDD  3001               	movlw	1
 16981  1DDE  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 16982  1DDF  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 16983  1DE0  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16984  1DE1  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16985  1DE2  0021               	movlb	1	; select bank1
 16986  1DE3  0830               	movf	_DimmerIntr2^(0+128),w
 16987  1DE4  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16988  1DE5  39BF               	andlw	-65
 16989  1DE6  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16990  1DE7  00B0               	movwf	_DimmerIntr2^(0+128)
 16991  1DE8  0008               	return
 16992  1DE9                     __end_of_setDimmerIntr_Dimming_RF:	
 16993                           
 16994                           	psect	text117
 16995  0C91                     __ptext117:	
 16996 ;; *************** function _DimmerLights_DimmingFunction *****************
 16997 ;; Defined at:
 16998 ;;		line 2127 in file "../src/Dimmer_B1.c"
 16999 ;; Parameters:    Size  Location     Type
 17000 ;;  lights          1    wreg     unsigned char 
 17001 ;; Auto vars:     Size  Location     Type
 17002 ;;  lights          1    6[BANK0 ] unsigned char 
 17003 ;; Return value:  Size  Location     Type
 17004 ;;		None               void
 17005 ;; Registers used:
 17006 ;;		wreg, status,2, status,0, pclath, cstack
 17007 ;; Tracked objects:
 17008 ;;		On entry : 0/0
 17009 ;;		On exit  : 0/0
 17010 ;;		Unchanged: 0/0
 17011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17015 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17016 ;;Total ram usage:        2 bytes
 17017 ;; Hardware stack levels used:    1
 17018 ;; Hardware stack levels required when called:    6
 17019 ;; This function calls:
 17020 ;;		_DimmerIntr_ValueCalculate
 17021 ;; This function is called by:
 17022 ;;		_DimmerLights_Main
 17023 ;; This function uses a non-reentrant model
 17024 ;;
 17025                           
 17026                           
 17027                           ;psect for function _DimmerLights_DimmingFunction
 17028  0C91                     _DimmerLights_DimmingFunction:	
 17029                           
 17030                           ;incstack = 0
 17031                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0+pclath+cstack]
 17032                           ;DimmerLights_DimmingFunction@lights stored from wreg
 17033  0C91  0020               	movlb	0	; select bank0
 17034  0C92  00A6               	movwf	DimmerLights_DimmingFunction@lights
 17035                           
 17036                           ;Dimmer_B1.c: 2129: if (lights == 1) {
 17037  0C93  0826               	movf	DimmerLights_DimmingFunction@lights,w
 17038  0C94  3A01               	xorlw	1
 17039  0C95  1D03               	skipz
 17040  0C96  2CE7               	goto	l10607
 17041                           
 17042                           ;Dimmer_B1.c: 2130: if (DimmerIntr1.Tune == 1) {
 17043  0C97  0021               	movlb	1	; select bank1
 17044  0C98  1CA0               	btfss	_DimmerIntr1^(0+128),1
 17045  0C99  2CE7               	goto	l10607
 17046                           
 17047                           ;Dimmer_B1.c: 2131: DimmerIntr1.Tune = 0;
 17048  0C9A  10A0               	bcf	_DimmerIntr1^(0+128),1
 17049                           
 17050                           ;Dimmer_B1.c: 2132: DimmerIntr1.TuneTime++;
 17051  0C9B  3001               	movlw	1
 17052  0C9C  0020               	movlb	0	; select bank0
 17053  0C9D  00A5               	movwf	??_DimmerLights_DimmingFunction
 17054  0C9E  0825               	movf	??_DimmerLights_DimmingFunction,w
 17055  0C9F  0021               	movlb	1	; select bank1
 17056  0CA0  07A3               	addwf	(_DimmerIntr1^(0+128)+3),f
 17057                           
 17058                           ;Dimmer_B1.c: 2133: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 17059  0CA1  0824               	movf	(_DimmerIntr1^(0+128)+4),w
 17060  0CA2  0223               	subwf	(_DimmerIntr1^(0+128)+3),w
 17061  0CA3  1C03               	skipc
 17062  0CA4  2CE7               	goto	l10607
 17063                           
 17064                           ;Dimmer_B1.c: 2134: DimmerIntr1.TuneTime = 0;
 17065  0CA5  01A3               	clrf	(_DimmerIntr1^(0+128)+3)
 17066                           
 17067                           ;Dimmer_B1.c: 2135: DimmerIntr1.TuneGO = 1;
 17068  0CA6  1721               	bsf	(_DimmerIntr1^(0+128)+1),6
 17069                           
 17070                           ;Dimmer_B1.c: 2136: if (DimmerIntr1.Dimming_Sw == 1) {
 17071  0CA7  1E20               	btfss	_DimmerIntr1^(0+128),4
 17072  0CA8  2CC9               	goto	l1054
 17073                           
 17074                           ;Dimmer_B1.c: 2138: if (DimmerIntr1.Dimming_Status == 0) {
 17075  0CA9  1AA0               	btfsc	_DimmerIntr1^(0+128),5
 17076  0CAA  2CBC               	goto	l10589
 17077                           
 17078                           ;Dimmer_B1.c: 2139: if (DimmerIntr1.DimmingValue < ((char)(77*0.55))) {
 17079  0CAB  302A               	movlw	42
 17080  0CAC  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17081  0CAD  1803               	skipnc
 17082  0CAE  2CBA               	goto	l1056
 17083                           
 17084                           ;Dimmer_B1.c: 2140: DimmerIntr1.DimmingValue++;
 17085  0CAF  3001               	movlw	1
 17086  0CB0  0020               	movlb	0	; select bank0
 17087  0CB1  00A5               	movwf	??_DimmerLights_DimmingFunction
 17088  0CB2  0825               	movf	??_DimmerLights_DimmingFunction,w
 17089  0CB3  0021               	movlb	1	; select bank1
 17090  0CB4  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 17091                           
 17092                           ;Dimmer_B1.c: 2141: DimmerIntr_ValueCalculate(1);
 17093  0CB5  3001               	movlw	1
 17094  0CB6  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17095                           
 17096                           ;Dimmer_B1.c: 2142: } else {
 17097  0CB9  2CE7               	goto	l10607
 17098  0CBA                     l1056:	
 17099                           
 17100                           ;Dimmer_B1.c: 2143: DimmerIntr1.Dimming_Status = 1;
 17101  0CBA  16A0               	bsf	_DimmerIntr1^(0+128),5
 17102                           
 17103                           ;Dimmer_B1.c: 2144: }
 17104                           ;Dimmer_B1.c: 2145: } else {
 17105  0CBB  2CE7               	goto	l10607
 17106  0CBC                     l10589:	
 17107                           
 17108                           ;Dimmer_B1.c: 2146: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 17109  0CBC  3003               	movlw	3
 17110  0CBD  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17111  0CBE  1C03               	skipc
 17112  0CBF  2CC7               	goto	l1059
 17113                           
 17114                           ;Dimmer_B1.c: 2147: DimmerIntr1.DimmingValue--;
 17115  0CC0  3001               	movlw	1
 17116  0CC1  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 17117                           
 17118                           ;Dimmer_B1.c: 2148: DimmerIntr_ValueCalculate(1);
 17119  0CC2  3001               	movlw	1
 17120  0CC3  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17121                           
 17122                           ;Dimmer_B1.c: 2149: } else {
 17123  0CC6  2CE7               	goto	l10607
 17124  0CC7                     l1059:	
 17125                           
 17126                           ;Dimmer_B1.c: 2150: DimmerIntr1.Dimming_Status = 0;
 17127  0CC7  12A0               	bcf	_DimmerIntr1^(0+128),5
 17128                           
 17129                           ;Dimmer_B1.c: 2151: }
 17130                           ;Dimmer_B1.c: 2152: }
 17131                           ;Dimmer_B1.c: 2171: } else if (DimmerIntr1.Dimming_RF == 1) {
 17132  0CC8  2CE7               	goto	l10607
 17133  0CC9                     l1054:	
 17134  0CC9  1F20               	btfss	_DimmerIntr1^(0+128),6
 17135  0CCA  2CE7               	goto	l10607
 17136                           
 17137                           ;Dimmer_B1.c: 2173: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 17138  0CCB  0826               	movf	(_DimmerIntr1^(0+128)+6),w
 17139  0CCC  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17140  0CCD  1803               	skipnc
 17141  0CCE  2CDA               	goto	l10601
 17142                           
 17143                           ;Dimmer_B1.c: 2174: DimmerIntr1.DimmingValue++;
 17144  0CCF  3001               	movlw	1
 17145  0CD0  0020               	movlb	0	; select bank0
 17146  0CD1  00A5               	movwf	??_DimmerLights_DimmingFunction
 17147  0CD2  0825               	movf	??_DimmerLights_DimmingFunction,w
 17148  0CD3  0021               	movlb	1	; select bank1
 17149  0CD4  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 17150                           
 17151                           ;Dimmer_B1.c: 2175: DimmerIntr_ValueCalculate(1);
 17152  0CD5  3001               	movlw	1
 17153  0CD6  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17154                           
 17155                           ;Dimmer_B1.c: 2176: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 17156  0CD9  2CE7               	goto	l10607
 17157  0CDA                     l10601:	
 17158  0CDA  0021               	movlb	1	; select bank1
 17159  0CDB  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 17160  0CDC  0226               	subwf	(_DimmerIntr1^(0+128)+6),w
 17161  0CDD  1803               	skipnc
 17162  0CDE  2CE6               	goto	l1065
 17163                           
 17164                           ;Dimmer_B1.c: 2177: DimmerIntr1.DimmingValue--;
 17165  0CDF  3001               	movlw	1
 17166  0CE0  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 17167                           
 17168                           ;Dimmer_B1.c: 2178: DimmerIntr_ValueCalculate(1);
 17169  0CE1  3001               	movlw	1
 17170  0CE2  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17171                           
 17172                           ;Dimmer_B1.c: 2179: } else {
 17173  0CE5  2CE7               	goto	l10607
 17174  0CE6                     l1065:	
 17175                           
 17176                           ;Dimmer_B1.c: 2180: DimmerIntr1.Dimming_RF = 0;
 17177  0CE6  1320               	bcf	_DimmerIntr1^(0+128),6
 17178  0CE7                     l10607:	
 17179                           
 17180                           ;Dimmer_B1.c: 2181: }
 17181                           ;Dimmer_B1.c: 2194: }
 17182                           ;Dimmer_B1.c: 2195: }
 17183                           ;Dimmer_B1.c: 2196: }
 17184                           ;Dimmer_B1.c: 2197: }
 17185                           ;Dimmer_B1.c: 2201: if (lights == 2) {
 17186  0CE7  0020               	movlb	0	; select bank0
 17187  0CE8  0826               	movf	DimmerLights_DimmingFunction@lights,w
 17188  0CE9  3A02               	xorlw	2
 17189  0CEA  1D03               	skipz
 17190  0CEB  0008               	return
 17191                           
 17192                           ;Dimmer_B1.c: 2202: if (DimmerIntr2.Tune == 1) {
 17193  0CEC  0021               	movlb	1	; select bank1
 17194  0CED  1CB0               	btfss	_DimmerIntr2^(0+128),1
 17195  0CEE  0008               	return
 17196                           
 17197                           ;Dimmer_B1.c: 2203: DimmerIntr2.Tune = 0;
 17198  0CEF  10B0               	bcf	_DimmerIntr2^(0+128),1
 17199                           
 17200                           ;Dimmer_B1.c: 2204: DimmerIntr2.TuneTime++;
 17201  0CF0  3001               	movlw	1
 17202  0CF1  0020               	movlb	0	; select bank0
 17203  0CF2  00A5               	movwf	??_DimmerLights_DimmingFunction
 17204  0CF3  0825               	movf	??_DimmerLights_DimmingFunction,w
 17205  0CF4  0021               	movlb	1	; select bank1
 17206  0CF5  07B3               	addwf	(_DimmerIntr2^(0+128)+3),f
 17207                           
 17208                           ;Dimmer_B1.c: 2205: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 17209  0CF6  0834               	movf	(_DimmerIntr2^(0+128)+4),w
 17210  0CF7  0233               	subwf	(_DimmerIntr2^(0+128)+3),w
 17211  0CF8  1C03               	skipc
 17212  0CF9  0008               	return
 17213                           
 17214                           ;Dimmer_B1.c: 2206: DimmerIntr2.TuneTime = 0;
 17215  0CFA  01B3               	clrf	(_DimmerIntr2^(0+128)+3)
 17216                           
 17217                           ;Dimmer_B1.c: 2207: DimmerIntr2.TuneGO = 1;
 17218  0CFB  1731               	bsf	(_DimmerIntr2^(0+128)+1),6
 17219                           
 17220                           ;Dimmer_B1.c: 2208: if (DimmerIntr2.Dimming_Sw == 1) {
 17221  0CFC  1E30               	btfss	_DimmerIntr2^(0+128),4
 17222  0CFD  2D1C               	goto	l1070
 17223                           
 17224                           ;Dimmer_B1.c: 2210: if (DimmerIntr2.Dimming_Status == 0) {
 17225  0CFE  1AB0               	btfsc	_DimmerIntr2^(0+128),5
 17226  0CFF  2D10               	goto	l10631
 17227                           
 17228                           ;Dimmer_B1.c: 2211: if (DimmerIntr2.DimmingValue < ((char)(77*0.55))) {
 17229  0D00  302A               	movlw	42
 17230  0D01  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17231  0D02  1803               	skipnc
 17232  0D03  2D0E               	goto	l1072
 17233                           
 17234                           ;Dimmer_B1.c: 2212: DimmerIntr2.DimmingValue++;
 17235  0D04  3001               	movlw	1
 17236  0D05  0020               	movlb	0	; select bank0
 17237  0D06  00A5               	movwf	??_DimmerLights_DimmingFunction
 17238  0D07  0825               	movf	??_DimmerLights_DimmingFunction,w
 17239  0D08  0021               	movlb	1	; select bank1
 17240  0D09  07B5               	addwf	(_DimmerIntr2^(0+128)+5),f
 17241                           
 17242                           ;Dimmer_B1.c: 2213: DimmerIntr_ValueCalculate(2);
 17243  0D0A  3002               	movlw	2
 17244  0D0B  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17245                           
 17246                           ;Dimmer_B1.c: 2214: } else {
 17247  0D0D  0008               	return
 17248  0D0E                     l1072:	
 17249                           
 17250                           ;Dimmer_B1.c: 2215: DimmerIntr2.Dimming_Status = 1;
 17251  0D0E  16B0               	bsf	_DimmerIntr2^(0+128),5
 17252                           
 17253                           ;Dimmer_B1.c: 2216: }
 17254                           ;Dimmer_B1.c: 2217: } else {
 17255  0D0F  0008               	return
 17256  0D10                     l10631:	
 17257                           
 17258                           ;Dimmer_B1.c: 2218: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 17259  0D10  3003               	movlw	3
 17260  0D11  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17261  0D12  1C03               	skipc
 17262  0D13  2D1A               	goto	l1075
 17263                           
 17264                           ;Dimmer_B1.c: 2219: DimmerIntr2.DimmingValue--;
 17265  0D14  3001               	movlw	1
 17266  0D15  02B5               	subwf	(_DimmerIntr2^(0+128)+5),f
 17267                           
 17268                           ;Dimmer_B1.c: 2220: DimmerIntr_ValueCalculate(2);
 17269  0D16  3002               	movlw	2
 17270  0D17  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17271                           
 17272                           ;Dimmer_B1.c: 2221: } else {
 17273  0D19  0008               	return
 17274  0D1A                     l1075:	
 17275                           
 17276                           ;Dimmer_B1.c: 2222: DimmerIntr2.Dimming_Status = 0;
 17277  0D1A  12B0               	bcf	_DimmerIntr2^(0+128),5
 17278                           
 17279                           ;Dimmer_B1.c: 2223: }
 17280                           ;Dimmer_B1.c: 2224: }
 17281                           ;Dimmer_B1.c: 2243: } else if (DimmerIntr2.Dimming_RF == 1) {
 17282  0D1B  0008               	return
 17283  0D1C                     l1070:	
 17284  0D1C  1F30               	btfss	_DimmerIntr2^(0+128),6
 17285  0D1D  0008               	return
 17286                           
 17287                           ;Dimmer_B1.c: 2245: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 17288  0D1E  0836               	movf	(_DimmerIntr2^(0+128)+6),w
 17289  0D1F  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17290  0D20  1803               	skipnc
 17291  0D21  2D2C               	goto	l10643
 17292                           
 17293                           ;Dimmer_B1.c: 2246: DimmerIntr2.DimmingValue++;
 17294  0D22  3001               	movlw	1
 17295  0D23  0020               	movlb	0	; select bank0
 17296  0D24  00A5               	movwf	??_DimmerLights_DimmingFunction
 17297  0D25  0825               	movf	??_DimmerLights_DimmingFunction,w
 17298  0D26  0021               	movlb	1	; select bank1
 17299  0D27  07B5               	addwf	(_DimmerIntr2^(0+128)+5),f
 17300                           
 17301                           ;Dimmer_B1.c: 2247: DimmerIntr_ValueCalculate(2);
 17302  0D28  3002               	movlw	2
 17303  0D29  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17304                           
 17305                           ;Dimmer_B1.c: 2248: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 17306  0D2B  0008               	return
 17307  0D2C                     l10643:	
 17308  0D2C  0021               	movlb	1	; select bank1
 17309  0D2D  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 17310  0D2E  0236               	subwf	(_DimmerIntr2^(0+128)+6),w
 17311  0D2F  1803               	skipnc
 17312  0D30  2D37               	goto	l1081
 17313                           
 17314                           ;Dimmer_B1.c: 2249: DimmerIntr2.DimmingValue--;
 17315  0D31  3001               	movlw	1
 17316  0D32  02B5               	subwf	(_DimmerIntr2^(0+128)+5),f
 17317                           
 17318                           ;Dimmer_B1.c: 2250: DimmerIntr_ValueCalculate(2);
 17319  0D33  3002               	movlw	2
 17320  0D34  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17321                           
 17322                           ;Dimmer_B1.c: 2251: } else {
 17323  0D36  0008               	return
 17324  0D37                     l1081:	
 17325                           
 17326                           ;Dimmer_B1.c: 2252: DimmerIntr2.Dimming_RF = 0;
 17327  0D37  1330               	bcf	_DimmerIntr2^(0+128),6
 17328  0D38  0008               	return
 17329  0D39                     __end_of_DimmerLights_DimmingFunction:	
 17330                           
 17331                           	psect	text118
 17332  143B                     __ptext118:	
 17333 ;; *************** function _DimmerIntr_ValueCalculate *****************
 17334 ;; Defined at:
 17335 ;;		line 2058 in file "../src/Dimmer_B1.c"
 17336 ;; Parameters:    Size  Location     Type
 17337 ;;  lights          1    wreg     unsigned char 
 17338 ;; Auto vars:     Size  Location     Type
 17339 ;;  lights          1    4[BANK0 ] unsigned char 
 17340 ;; Return value:  Size  Location     Type
 17341 ;;		None               void
 17342 ;; Registers used:
 17343 ;;		wreg, status,2, status,0, pclath, cstack
 17344 ;; Tracked objects:
 17345 ;;		On entry : 0/0
 17346 ;;		On exit  : 0/0
 17347 ;;		Unchanged: 0/0
 17348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17353 ;;Total ram usage:        3 bytes
 17354 ;; Hardware stack levels used:    1
 17355 ;; Hardware stack levels required when called:    5
 17356 ;; This function calls:
 17357 ;;		_Division
 17358 ;; This function is called by:
 17359 ;;		_setDimmerLights_OnOff
 17360 ;;		_DimmerLights_DimmingFunction
 17361 ;; This function uses a non-reentrant model
 17362 ;;
 17363                           
 17364                           
 17365                           ;psect for function _DimmerIntr_ValueCalculate
 17366  143B                     _DimmerIntr_ValueCalculate:	
 17367                           
 17368                           ;incstack = 0
 17369                           ; Regs used in _DimmerIntr_ValueCalculate: [wreg+status,2+status,0+pclath+cstack]
 17370                           ;DimmerIntr_ValueCalculate@lights stored from wreg
 17371  143B  0020               	movlb	0	; select bank0
 17372  143C  00A4               	movwf	DimmerIntr_ValueCalculate@lights
 17373                           
 17374                           ;Dimmer_B1.c: 2060: if (lights == 1) {
 17375  143D  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 17376  143E  3A01               	xorlw	1
 17377  143F  1D03               	skipz
 17378  1440  2C67               	goto	l10101
 17379                           
 17380                           ;Dimmer_B1.c: 2071: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 17381  1441  3002               	movlw	2
 17382  1442  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17383  1443  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17384  1444  00F7               	movwf	Division@num
 17385  1445  0021               	movlb	1	; select bank1
 17386  1446  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 17387  1447  3198  20FB  3194   	fcall	_Division
 17388  144A  0020               	movlb	0	; select bank0
 17389  144B  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 17390  144C  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 17391  144D  0021               	movlb	1	; select bank1
 17392  144E  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 17393                           
 17394                           ;Dimmer_B1.c: 2072: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 17395  144F  0325               	decf	(_DimmerIntr1^(0+128)+5),w
 17396  1450  3AFF               	xorlw	255
 17397  1451  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17398  1452  3E37               	addlw	55
 17399  1453  0020               	movlb	0	; select bank0
 17400  1454  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17401  1455  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17402  1456  0021               	movlb	1	; select bank1
 17403  1457  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 17404                           
 17405                           ;Dimmer_B1.c: 2073: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 17406  1458  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 17407  1459  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17408  145A  0020               	movlb	0	; select bank0
 17409  145B  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17410  145C  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17411  145D  0021               	movlb	1	; select bank1
 17412  145E  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 17413                           
 17414                           ;Dimmer_B1.c: 2074: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 17415  145F  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 17416  1460  3E05               	addlw	5
 17417  1461  0020               	movlb	0	; select bank0
 17418  1462  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17419  1463  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17420  1464  0021               	movlb	1	; select bank1
 17421  1465  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 17422                           
 17423                           ;Dimmer_B1.c: 2076: DimmerIntr1.Calculate = 1;
 17424  1466  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 17425  1467                     l10101:	
 17426                           
 17427                           ;Dimmer_B1.c: 2078: }
 17428                           ;Dimmer_B1.c: 2083: if (lights == 2) {
 17429  1467  0020               	movlb	0	; select bank0
 17430  1468  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 17431  1469  3A02               	xorlw	2
 17432  146A  1D03               	skipz
 17433  146B  0008               	return
 17434                           
 17435                           ;Dimmer_B1.c: 2094: DimmerIntr2.TuneValue2 = Division(DimmerIntr2.DimmingValue, 2);
 17436  146C  3002               	movlw	2
 17437  146D  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17438  146E  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17439  146F  00F7               	movwf	Division@num
 17440  1470  0021               	movlb	1	; select bank1
 17441  1471  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 17442  1472  3198  20FB         	fcall	_Division
 17443  1474  0020               	movlb	0	; select bank0
 17444  1475  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 17445  1476  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 17446  1477  0021               	movlb	1	; select bank1
 17447  1478  00B8               	movwf	(_DimmerIntr2^(0+128)+8)
 17448                           
 17449                           ;Dimmer_B1.c: 2095: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - DimmerIntr2.
      +                          DimmingValue);
 17450  1479  0335               	decf	(_DimmerIntr2^(0+128)+5),w
 17451  147A  3AFF               	xorlw	255
 17452  147B  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17453  147C  3E37               	addlw	55
 17454  147D  0020               	movlb	0	; select bank0
 17455  147E  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17456  147F  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17457  1480  0021               	movlb	1	; select bank1
 17458  1481  00B9               	movwf	(_DimmerIntr2^(0+128)+9)
 17459                           
 17460                           ;Dimmer_B1.c: 2096: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneVa
      +                          lue2;
 17461  1482  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 17462  1483  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17463  1484  0020               	movlb	0	; select bank0
 17464  1485  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17465  1486  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17466  1487  0021               	movlb	1	; select bank1
 17467  1488  00BA               	movwf	(_DimmerIntr2^(0+128)+10)
 17468                           
 17469                           ;Dimmer_B1.c: 2097: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 5;
 17470  1489  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 17471  148A  3E05               	addlw	5
 17472  148B  0020               	movlb	0	; select bank0
 17473  148C  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17474  148D  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17475  148E  0021               	movlb	1	; select bank1
 17476  148F  00BB               	movwf	(_DimmerIntr2^(0+128)+11)
 17477                           
 17478                           ;Dimmer_B1.c: 2099: DimmerIntr2.Calculate = 1;
 17479  1490  17B1               	bsf	(_DimmerIntr2^(0+128)+1),7
 17480  1491  0008               	return
 17481  1492                     __end_of_DimmerIntr_ValueCalculate:	
 17482                           
 17483                           	psect	text119
 17484  185F                     __ptext119:	
 17485 ;; *************** function _DimmerLights_Initialization *****************
 17486 ;; Defined at:
 17487 ;;		line 703 in file "../src/Dimmer_B1.c"
 17488 ;; Parameters:    Size  Location     Type
 17489 ;;		None
 17490 ;; Auto vars:     Size  Location     Type
 17491 ;;		None
 17492 ;; Return value:  Size  Location     Type
 17493 ;;		None               void
 17494 ;; Registers used:
 17495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17496 ;; Tracked objects:
 17497 ;;		On entry : 0/0
 17498 ;;		On exit  : 0/0
 17499 ;;		Unchanged: 0/0
 17500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17505 ;;Total ram usage:        0 bytes
 17506 ;; Hardware stack levels used:    1
 17507 ;; Hardware stack levels required when called:    7
 17508 ;; This function calls:
 17509 ;;		_DimmerIntr_Initialization
 17510 ;;		_setDimmerLights_Initialization
 17511 ;; This function is called by:
 17512 ;;		_main
 17513 ;; This function uses a non-reentrant model
 17514 ;;
 17515                           
 17516                           
 17517                           ;psect for function _DimmerLights_Initialization
 17518  185F                     _DimmerLights_Initialization:	
 17519                           
 17520                           ;Dimmer_B1.c: 705: setDimmerLights_Initialization(1);
 17521                           
 17522                           ;incstack = 0
 17523                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 17524  185F  3001               	movlw	1
 17525  1860  31A7  27B1  3198   	fcall	_setDimmerLights_Initialization
 17526                           
 17527                           ;Dimmer_B1.c: 709: setDimmerLights_Initialization(2);
 17528  1863  3002               	movlw	2
 17529  1864  31A7  27B1  3198   	fcall	_setDimmerLights_Initialization
 17530                           
 17531                           ;Dimmer_B1.c: 715: DimmerIntr_Initialization();
 17532  1867  318D  25E2         	fcall	_DimmerIntr_Initialization
 17533  1869  0008               	return
 17534  186A                     __end_of_DimmerLights_Initialization:	
 17535                           
 17536                           	psect	text120
 17537  27B1                     __ptext120:	
 17538 ;; *************** function _setDimmerLights_Initialization *****************
 17539 ;; Defined at:
 17540 ;;		line 719 in file "../src/Dimmer_B1.c"
 17541 ;; Parameters:    Size  Location     Type
 17542 ;;  lights          1    wreg     unsigned char 
 17543 ;; Auto vars:     Size  Location     Type
 17544 ;;  lights          1    0[COMMON] unsigned char 
 17545 ;; Return value:  Size  Location     Type
 17546 ;;		None               void
 17547 ;; Registers used:
 17548 ;;		wreg
 17549 ;; Tracked objects:
 17550 ;;		On entry : 0/0
 17551 ;;		On exit  : 0/0
 17552 ;;		Unchanged: 0/0
 17553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;Total ram usage:        0 bytes
 17559 ;; Hardware stack levels used:    1
 17560 ;; Hardware stack levels required when called:    3
 17561 ;; This function calls:
 17562 ;;		Nothing
 17563 ;; This function is called by:
 17564 ;;		_DimmerLights_Initialization
 17565 ;; This function uses a non-reentrant model
 17566 ;;
 17567                           
 17568                           
 17569                           ;psect for function _setDimmerLights_Initialization
 17570  27B1                     _setDimmerLights_Initialization:	
 17571                           
 17572                           ;incstack = 0
 17573                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17574  27B1  0008               	return
 17575  27B2                     __end_of_setDimmerLights_Initialization:	
 17576                           
 17577                           	psect	text121
 17578  0DE2                     __ptext121:	
 17579 ;; *************** function _DimmerIntr_Initialization *****************
 17580 ;; Defined at:
 17581 ;;		line 7 in file "../src/Dimmer_B1.c"
 17582 ;; Parameters:    Size  Location     Type
 17583 ;;		None
 17584 ;; Auto vars:     Size  Location     Type
 17585 ;;		None
 17586 ;; Return value:  Size  Location     Type
 17587 ;;		None               void
 17588 ;; Registers used:
 17589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17590 ;; Tracked objects:
 17591 ;;		On entry : 0/0
 17592 ;;		On exit  : 0/0
 17593 ;;		Unchanged: 0/0
 17594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17597 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17598 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17599 ;;Total ram usage:        2 bytes
 17600 ;; Hardware stack levels used:    1
 17601 ;; Hardware stack levels required when called:    6
 17602 ;; This function calls:
 17603 ;;		_Division
 17604 ;;		_getDimmerLights_PercentToValue
 17605 ;;		_getDimmerLights_ValueToPercent
 17606 ;;		_setMemory_Modify
 17607 ;; This function is called by:
 17608 ;;		_DimmerLights_Initialization
 17609 ;; This function uses a non-reentrant model
 17610 ;;
 17611                           
 17612                           
 17613                           ;psect for function _DimmerIntr_Initialization
 17614  0DE2                     _DimmerIntr_Initialization:	
 17615                           
 17616                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 17617                           
 17618                           ;incstack = 0
 17619                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 17620  0DE2  3003               	movlw	3
 17621  0DE3  0020               	movlb	0	; select bank0
 17622  0DE4  00DA               	movwf	??_DimmerIntr_Initialization
 17623  0DE5  085A               	movf	??_DimmerIntr_Initialization,w
 17624  0DE6  0021               	movlb	1	; select bank1
 17625  0DE7  00A4               	movwf	(_DimmerIntr1^(0+128)+4)
 17626                           
 17627                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(77*0.55));
 17628  0DE8  302A               	movlw	42
 17629  0DE9  0020               	movlb	0	; select bank0
 17630  0DEA  00DA               	movwf	??_DimmerIntr_Initialization
 17631  0DEB  085A               	movf	??_DimmerIntr_Initialization,w
 17632  0DEC  0021               	movlb	1	; select bank1
 17633  0DED  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 17634                           
 17635                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 17636  0DEE  3002               	movlw	2
 17637  0DEF  0020               	movlb	0	; select bank0
 17638  0DF0  00DA               	movwf	??_DimmerIntr_Initialization
 17639  0DF1  085A               	movf	??_DimmerIntr_Initialization,w
 17640  0DF2  0021               	movlb	1	; select bank1
 17641  0DF3  00A7               	movwf	(_DimmerIntr1^(0+128)+7)
 17642                           
 17643                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 17644  0DF4  10A0               	bcf	_DimmerIntr1^(0+128),1
 17645                           
 17646                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17647  0DF5  302A               	movlw	42
 17648  0DF6  3197  2736  318D   	fcall	_getDimmerLights_ValueToPercent
 17649  0DF9  0020               	movlb	0	; select bank0
 17650  0DFA  00DA               	movwf	??_DimmerIntr_Initialization
 17651  0DFB  087B               	movf	_product,w
 17652  0DFC  3E15               	addlw	21
 17653  0DFD  0086               	movwf	6
 17654  0DFE  3002               	movlw	2	; select bank4/5
 17655  0DFF  0087               	movwf	7
 17656  0E00  085A               	movf	??_DimmerIntr_Initialization,w
 17657  0E01  0081               	movwf	1
 17658                           
 17659                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 17660  0E02  087B               	movf	_product,w
 17661  0E03  3E15               	addlw	21
 17662  0E04  0086               	movwf	6
 17663  0E05  3002               	movlw	2	; select bank4/5
 17664  0E06  0087               	movwf	7
 17665  0E07  0801               	movf	1,w
 17666  0E08  3196  26D1  318D   	fcall	_getDimmerLights_PercentToValue
 17667  0E0B  0020               	movlb	0	; select bank0
 17668  0E0C  00DA               	movwf	??_DimmerIntr_Initialization
 17669  0E0D  085A               	movf	??_DimmerIntr_Initialization,w
 17670  0E0E  0021               	movlb	1	; select bank1
 17671  0E0F  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 17672                           
 17673                           ;Dimmer_B1.c: 38: DimmerIntr1.TuneValue2 = Division(((char)(77*0.55)), 2);
 17674  0E10  3002               	movlw	2
 17675  0E11  0020               	movlb	0	; select bank0
 17676  0E12  00DA               	movwf	??_DimmerIntr_Initialization
 17677  0E13  085A               	movf	??_DimmerIntr_Initialization,w
 17678  0E14  00F7               	movwf	Division@num
 17679  0E15  302A               	movlw	42
 17680  0E16  3198  20FB  318D   	fcall	_Division
 17681  0E19  0020               	movlb	0	; select bank0
 17682  0E1A  00DB               	movwf	??_DimmerIntr_Initialization+1
 17683  0E1B  085B               	movf	??_DimmerIntr_Initialization+1,w
 17684  0E1C  0021               	movlb	1	; select bank1
 17685  0E1D  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 17686                           
 17687                           ;Dimmer_B1.c: 39: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17688  0E1E  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 17689  0E1F  3E0D               	addlw	13
 17690  0E20  0020               	movlb	0	; select bank0
 17691  0E21  00DA               	movwf	??_DimmerIntr_Initialization
 17692  0E22  085A               	movf	??_DimmerIntr_Initialization,w
 17693  0E23  0021               	movlb	1	; select bank1
 17694  0E24  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 17695                           
 17696                           ;Dimmer_B1.c: 40: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 17697  0E25  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 17698  0E26  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17699  0E27  0020               	movlb	0	; select bank0
 17700  0E28  00DA               	movwf	??_DimmerIntr_Initialization
 17701  0E29  085A               	movf	??_DimmerIntr_Initialization,w
 17702  0E2A  0021               	movlb	1	; select bank1
 17703  0E2B  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 17704                           
 17705                           ;Dimmer_B1.c: 41: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 17706  0E2C  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 17707  0E2D  3E01               	addlw	1
 17708  0E2E  0020               	movlb	0	; select bank0
 17709  0E2F  00DA               	movwf	??_DimmerIntr_Initialization
 17710  0E30  085A               	movf	??_DimmerIntr_Initialization,w
 17711  0E31  0021               	movlb	1	; select bank1
 17712  0E32  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 17713                           
 17714                           ;Dimmer_B1.c: 42: DimmerIntr1.Calculate = 1;
 17715  0E33  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 17716                           
 17717                           ;Dimmer_B1.c: 51: DimmerIntr2.TuneTimeValue = 3;
 17718  0E34  3003               	movlw	3
 17719  0E35  0020               	movlb	0	; select bank0
 17720  0E36  00DA               	movwf	??_DimmerIntr_Initialization
 17721  0E37  085A               	movf	??_DimmerIntr_Initialization,w
 17722  0E38  0021               	movlb	1	; select bank1
 17723  0E39  00B4               	movwf	(_DimmerIntr2^(0+128)+4)
 17724                           
 17725                           ;Dimmer_B1.c: 52: DimmerIntr2.MaxmumValue = ((char)(77*0.55));
 17726  0E3A  302A               	movlw	42
 17727  0E3B  0020               	movlb	0	; select bank0
 17728  0E3C  00DA               	movwf	??_DimmerIntr_Initialization
 17729  0E3D  085A               	movf	??_DimmerIntr_Initialization,w
 17730  0E3E  0021               	movlb	1	; select bank1
 17731  0E3F  00B6               	movwf	(_DimmerIntr2^(0+128)+6)
 17732                           
 17733                           ;Dimmer_B1.c: 53: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 17734  0E40  3002               	movlw	2
 17735  0E41  0020               	movlb	0	; select bank0
 17736  0E42  00DA               	movwf	??_DimmerIntr_Initialization
 17737  0E43  085A               	movf	??_DimmerIntr_Initialization,w
 17738  0E44  0021               	movlb	1	; select bank1
 17739  0E45  00B7               	movwf	(_DimmerIntr2^(0+128)+7)
 17740                           
 17741                           ;Dimmer_B1.c: 54: DimmerIntr2.Tune = 0;
 17742  0E46  10B0               	bcf	_DimmerIntr2^(0+128),1
 17743                           
 17744                           ;Dimmer_B1.c: 59: product->Data[22] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17745  0E47  302A               	movlw	42
 17746  0E48  3197  2736  318D   	fcall	_getDimmerLights_ValueToPercent
 17747  0E4B  0020               	movlb	0	; select bank0
 17748  0E4C  00DA               	movwf	??_DimmerIntr_Initialization
 17749  0E4D  087B               	movf	_product,w
 17750  0E4E  3E16               	addlw	22
 17751  0E4F  0086               	movwf	6
 17752  0E50  3002               	movlw	2	; select bank4/5
 17753  0E51  0087               	movwf	7
 17754  0E52  085A               	movf	??_DimmerIntr_Initialization,w
 17755  0E53  0081               	movwf	1
 17756                           
 17757                           ;Dimmer_B1.c: 62: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 17758  0E54  087B               	movf	_product,w
 17759  0E55  3E16               	addlw	22
 17760  0E56  0086               	movwf	6
 17761  0E57  3002               	movlw	2	; select bank4/5
 17762  0E58  0087               	movwf	7
 17763  0E59  0801               	movf	1,w
 17764  0E5A  3196  26D1  318D   	fcall	_getDimmerLights_PercentToValue
 17765  0E5D  0020               	movlb	0	; select bank0
 17766  0E5E  00DA               	movwf	??_DimmerIntr_Initialization
 17767  0E5F  085A               	movf	??_DimmerIntr_Initialization,w
 17768  0E60  0021               	movlb	1	; select bank1
 17769  0E61  00B5               	movwf	(_DimmerIntr2^(0+128)+5)
 17770                           
 17771                           ;Dimmer_B1.c: 77: DimmerIntr2.TuneValue2 = Division(((char)(77*0.55)), 2);
 17772  0E62  3002               	movlw	2
 17773  0E63  0020               	movlb	0	; select bank0
 17774  0E64  00DA               	movwf	??_DimmerIntr_Initialization
 17775  0E65  085A               	movf	??_DimmerIntr_Initialization,w
 17776  0E66  00F7               	movwf	Division@num
 17777  0E67  302A               	movlw	42
 17778  0E68  3198  20FB  318D   	fcall	_Division
 17779  0E6B  0020               	movlb	0	; select bank0
 17780  0E6C  00DB               	movwf	??_DimmerIntr_Initialization+1
 17781  0E6D  085B               	movf	??_DimmerIntr_Initialization+1,w
 17782  0E6E  0021               	movlb	1	; select bank1
 17783  0E6F  00B8               	movwf	(_DimmerIntr2^(0+128)+8)
 17784                           
 17785                           ;Dimmer_B1.c: 78: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17786  0E70  0838               	movf	(_DimmerIntr2^(0+128)+8),w
 17787  0E71  3E0D               	addlw	13
 17788  0E72  0020               	movlb	0	; select bank0
 17789  0E73  00DA               	movwf	??_DimmerIntr_Initialization
 17790  0E74  085A               	movf	??_DimmerIntr_Initialization,w
 17791  0E75  0021               	movlb	1	; select bank1
 17792  0E76  00B9               	movwf	(_DimmerIntr2^(0+128)+9)
 17793                           
 17794                           ;Dimmer_B1.c: 79: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneValu
      +                          e2;
 17795  0E77  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 17796  0E78  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17797  0E79  0020               	movlb	0	; select bank0
 17798  0E7A  00DA               	movwf	??_DimmerIntr_Initialization
 17799  0E7B  085A               	movf	??_DimmerIntr_Initialization,w
 17800  0E7C  0021               	movlb	1	; select bank1
 17801  0E7D  00BA               	movwf	(_DimmerIntr2^(0+128)+10)
 17802                           
 17803                           ;Dimmer_B1.c: 80: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 1;
 17804  0E7E  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 17805  0E7F  3E01               	addlw	1
 17806  0E80  0020               	movlb	0	; select bank0
 17807  0E81  00DA               	movwf	??_DimmerIntr_Initialization
 17808  0E82  085A               	movf	??_DimmerIntr_Initialization,w
 17809  0E83  0021               	movlb	1	; select bank1
 17810  0E84  00BB               	movwf	(_DimmerIntr2^(0+128)+11)
 17811                           
 17812                           ;Dimmer_B1.c: 81: DimmerIntr2.Calculate = 1;
 17813  0E85  17B1               	bsf	(_DimmerIntr2^(0+128)+1),7
 17814                           
 17815                           ;Dimmer_B1.c: 111: if (myMain.InitDimmer == 1) {
 17816  0E86  1E59               	btfss	(_myMain^(0+128)+10),4
 17817  0E87  0008               	return
 17818                           
 17819                           ;Dimmer_B1.c: 112: myMain.InitDimmer = 0;
 17820  0E88  1259               	bcf	(_myMain^(0+128)+10),4
 17821                           
 17822                           ;Dimmer_B1.c: 113: myMain.SaveDimmer = 1;
 17823  0E89  16D9               	bsf	(_myMain^(0+128)+10),5
 17824                           
 17825                           ;Dimmer_B1.c: 114: setMemory_Modify(1);
 17826  0E8A  3001               	movlw	1
 17827  0E8B  3199  2137         	fcall	_setMemory_Modify
 17828  0E8D  0008               	return
 17829  0E8E                     __end_of_DimmerIntr_Initialization:	
 17830                           
 17831                           	psect	text122
 17832  1937                     __ptext122:	
 17833 ;; *************** function _setMemory_Modify *****************
 17834 ;; Defined at:
 17835 ;;		line 1088 in file "../src/MCU_B1.c"
 17836 ;; Parameters:    Size  Location     Type
 17837 ;;  command         1    wreg     unsigned char 
 17838 ;; Auto vars:     Size  Location     Type
 17839 ;;  command         1    3[COMMON] unsigned char 
 17840 ;; Return value:  Size  Location     Type
 17841 ;;		None               void
 17842 ;; Registers used:
 17843 ;;		wreg, status,2, status,0
 17844 ;; Tracked objects:
 17845 ;;		On entry : 0/0
 17846 ;;		On exit  : 0/0
 17847 ;;		Unchanged: 0/0
 17848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17850 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17851 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17852 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17853 ;;Total ram usage:        2 bytes
 17854 ;; Hardware stack levels used:    1
 17855 ;; Hardware stack levels required when called:    3
 17856 ;; This function calls:
 17857 ;;		Nothing
 17858 ;; This function is called by:
 17859 ;;		_DimmerIntr_Initialization
 17860 ;;		_DimmerLights_AssignationDimming
 17861 ;;		_setDimmerLights_Dimming
 17862 ;;		_setLog_Code
 17863 ;;		_setRFSW_AdjControl
 17864 ;; This function uses a non-reentrant model
 17865 ;;
 17866                           
 17867                           
 17868                           ;psect for function _setMemory_Modify
 17869  1937                     _setMemory_Modify:	
 17870                           
 17871                           ;incstack = 0
 17872                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 17873                           ;setMemory_Modify@command stored from wreg
 17874  1937  00F3               	movwf	setMemory_Modify@command
 17875                           
 17876                           ;MCU_B1.c: 1089: Memory.Modify = command == 1 ? 1 : 0;
 17877  1938  0873               	movf	setMemory_Modify@command,w
 17878  1939  3A01               	xorlw	1
 17879  193A  3000               	movlw	0
 17880  193B  1903               	skipnz
 17881  193C  3001               	movlw	1
 17882  193D  00F2               	movwf	??_setMemory_Modify
 17883  193E  0024               	movlb	4	; select bank4
 17884  193F  0854               	movf	(_Memory^(0+512)+36),w
 17885  1940  0672               	xorwf	??_setMemory_Modify,w
 17886  1941  39FE               	andlw	-2
 17887  1942  0672               	xorwf	??_setMemory_Modify,w
 17888  1943  00D4               	movwf	(_Memory^(0+512)+36)
 17889                           
 17890                           ;MCU_B1.c: 1090: Memory.Time = 0;
 17891  1944  01D2               	clrf	(_Memory^(0+512)+34)
 17892  1945  01D3               	clrf	((_Memory+1)^(0+512)+34)
 17893  1946  0008               	return
 17894  1947                     __end_of_setMemory_Modify:	
 17895                           
 17896                           	psect	text123
 17897  1736                     __ptext123:	
 17898 ;; *************** function _getDimmerLights_ValueToPercent *****************
 17899 ;; Defined at:
 17900 ;;		line 1315 in file "../src/Dimmer_B1.c"
 17901 ;; Parameters:    Size  Location     Type
 17902 ;;  value           1    wreg     unsigned char 
 17903 ;; Auto vars:     Size  Location     Type
 17904 ;;  value           1   54[BANK0 ] unsigned char 
 17905 ;;  i               3   55[BANK0 ] float 
 17906 ;; Return value:  Size  Location     Type
 17907 ;;                  1    wreg      unsigned char 
 17908 ;; Registers used:
 17909 ;;		wreg, status,2, status,0, pclath, cstack
 17910 ;; Tracked objects:
 17911 ;;		On entry : 0/0
 17912 ;;		On exit  : 0/0
 17913 ;;		Unchanged: 0/0
 17914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17918 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17919 ;;Total ram usage:        6 bytes
 17920 ;; Hardware stack levels used:    1
 17921 ;; Hardware stack levels required when called:    5
 17922 ;; This function calls:
 17923 ;;		___awtoft
 17924 ;;		___ftadd
 17925 ;;		___ftdiv
 17926 ;;		___ftneg
 17927 ;;		___fttol
 17928 ;; This function is called by:
 17929 ;;		_DimmerIntr_Initialization
 17930 ;;		_setDimmerLights_Dimming
 17931 ;; This function uses a non-reentrant model
 17932 ;;
 17933                           
 17934                           
 17935                           ;psect for function _getDimmerLights_ValueToPercent
 17936  1736                     _getDimmerLights_ValueToPercent:	
 17937                           
 17938                           ;incstack = 0
 17939                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 17940                           ;getDimmerLights_ValueToPercent@value stored from wreg
 17941  1736  0020               	movlb	0	; select bank0
 17942  1737  00D6               	movwf	getDimmerLights_ValueToPercent@value
 17943                           
 17944                           ;Dimmer_B1.c: 1323: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 17945  1738  3000               	movlw	0
 17946  1739  00D7               	movwf	getDimmerLights_ValueToPercent@i
 17947  173A  3020               	movlw	32
 17948  173B  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 17949  173C  3042               	movlw	66
 17950  173D  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 17951                           
 17952                           ;Dimmer_B1.c: 1324: i /= 100;
 17953  173E  3000               	movlw	0
 17954  173F  00A6               	movwf	___ftdiv@f2
 17955  1740  30C8               	movlw	200
 17956  1741  00A7               	movwf	___ftdiv@f2+1
 17957  1742  3042               	movlw	66
 17958  1743  00A8               	movwf	___ftdiv@f2+2
 17959  1744  0857               	movf	getDimmerLights_ValueToPercent@i,w
 17960  1745  00A9               	movwf	___ftdiv@f1
 17961  1746  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 17962  1747  00AA               	movwf	___ftdiv@f1+1
 17963  1748  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 17964  1749  00AB               	movwf	___ftdiv@f1+2
 17965  174A  318D  2539  3197   	fcall	___ftdiv
 17966  174D  0020               	movlb	0	; select bank0
 17967  174E  0826               	movf	?___ftdiv,w
 17968  174F  00D7               	movwf	getDimmerLights_ValueToPercent@i
 17969  1750  0827               	movf	?___ftdiv+1,w
 17970  1751  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 17971  1752  0828               	movf	?___ftdiv+2,w
 17972  1753  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 17973                           
 17974                           ;Dimmer_B1.c: 1326: return (char) (100 - ((((char)(77*0.55)) - value) / i));
 17975  1754  0856               	movf	getDimmerLights_ValueToPercent@value,w
 17976  1755  00D4               	movwf	??_getDimmerLights_ValueToPercent
 17977  1756  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 17978  1757  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 17979  1758  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 17980  1759  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 17981  175A  1903               	skipnz
 17982  175B  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 17983  175C  0854               	movf	??_getDimmerLights_ValueToPercent,w
 17984  175D  3E2A               	addlw	42
 17985  175E  00A0               	movwf	___awtoft@c
 17986  175F  3000               	movlw	0
 17987  1760  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17988  1761  00A1               	movwf	___awtoft@c+1
 17989  1762  319C  24E8  3197   	fcall	___awtoft
 17990  1765  0020               	movlb	0	; select bank0
 17991  1766  0820               	movf	?___awtoft,w
 17992  1767  00A9               	movwf	___ftdiv@f1
 17993  1768  0821               	movf	?___awtoft+1,w
 17994  1769  00AA               	movwf	___ftdiv@f1+1
 17995  176A  0822               	movf	?___awtoft+2,w
 17996  176B  00AB               	movwf	___ftdiv@f1+2
 17997  176C  0857               	movf	getDimmerLights_ValueToPercent@i,w
 17998  176D  00A6               	movwf	___ftdiv@f2
 17999  176E  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 18000  176F  00A7               	movwf	___ftdiv@f2+1
 18001  1770  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 18002  1771  00A8               	movwf	___ftdiv@f2+2
 18003  1772  318D  2539  3197   	fcall	___ftdiv
 18004  1775  0020               	movlb	0	; select bank0
 18005  1776  0826               	movf	?___ftdiv,w
 18006  1777  00B6               	movwf	___ftneg@f1
 18007  1778  0827               	movf	?___ftdiv+1,w
 18008  1779  00B7               	movwf	___ftneg@f1+1
 18009  177A  0828               	movf	?___ftdiv+2,w
 18010  177B  00B8               	movwf	___ftneg@f1+2
 18011  177C  3198  2038  3197   	fcall	___ftneg
 18012  177F  0020               	movlb	0	; select bank0
 18013  1780  0836               	movf	?___ftneg,w
 18014  1781  00BC               	movwf	___ftadd@f2
 18015  1782  0837               	movf	?___ftneg+1,w
 18016  1783  00BD               	movwf	___ftadd@f2+1
 18017  1784  0838               	movf	?___ftneg+2,w
 18018  1785  00BE               	movwf	___ftadd@f2+2
 18019  1786  3000               	movlw	0
 18020  1787  00B9               	movwf	___ftadd@f1
 18021  1788  30C8               	movlw	200
 18022  1789  00BA               	movwf	___ftadd@f1+1
 18023  178A  3042               	movlw	66
 18024  178B  00BB               	movwf	___ftadd@f1+2
 18025  178C  3183  2364  3197   	fcall	___ftadd
 18026  178F  0020               	movlb	0	; select bank0
 18027  1790  0839               	movf	?___ftadd,w
 18028  1791  00C6               	movwf	___fttol@f1
 18029  1792  083A               	movf	?___ftadd+1,w
 18030  1793  00C7               	movwf	___fttol@f1+1
 18031  1794  083B               	movf	?___ftadd+2,w
 18032  1795  00C8               	movwf	___fttol@f1+2
 18033  1796  318A  225C         	fcall	___fttol
 18034  1798  0020               	movlb	0	; select bank0
 18035  1799  0846               	movf	?___fttol,w
 18036  179A  0008               	return
 18037  179B                     __end_of_getDimmerLights_ValueToPercent:	
 18038                           
 18039                           	psect	text124
 18040  16D1                     __ptext124:	
 18041 ;; *************** function _getDimmerLights_PercentToValue *****************
 18042 ;; Defined at:
 18043 ;;		line 1299 in file "../src/Dimmer_B1.c"
 18044 ;; Parameters:    Size  Location     Type
 18045 ;;  value           1    wreg     unsigned char 
 18046 ;; Auto vars:     Size  Location     Type
 18047 ;;  value           1   54[BANK0 ] unsigned char 
 18048 ;;  i               3   55[BANK0 ] float 
 18049 ;; Return value:  Size  Location     Type
 18050 ;;                  1    wreg      unsigned char 
 18051 ;; Registers used:
 18052 ;;		wreg, status,2, status,0, pclath, cstack
 18053 ;; Tracked objects:
 18054 ;;		On entry : 0/0
 18055 ;;		On exit  : 0/0
 18056 ;;		Unchanged: 0/0
 18057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18059 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18060 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18061 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;Total ram usage:        6 bytes
 18063 ;; Hardware stack levels used:    1
 18064 ;; Hardware stack levels required when called:    5
 18065 ;; This function calls:
 18066 ;;		___awtoft
 18067 ;;		___ftadd
 18068 ;;		___ftdiv
 18069 ;;		___ftmul
 18070 ;;		___ftneg
 18071 ;;		___fttol
 18072 ;; This function is called by:
 18073 ;;		_DimmerIntr_Initialization
 18074 ;;		_DimmerLights_AssignationDimming
 18075 ;;		_setDimmerLights_OnOff
 18076 ;;		_setRFSW_AdjControl
 18077 ;; This function uses a non-reentrant model
 18078 ;;
 18079                           
 18080                           
 18081                           ;psect for function _getDimmerLights_PercentToValue
 18082  16D1                     _getDimmerLights_PercentToValue:	
 18083                           
 18084                           ;incstack = 0
 18085                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 18086                           ;getDimmerLights_PercentToValue@value stored from wreg
 18087  16D1  0020               	movlb	0	; select bank0
 18088  16D2  00D6               	movwf	getDimmerLights_PercentToValue@value
 18089                           
 18090                           ;Dimmer_B1.c: 1307: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 18091  16D3  3000               	movlw	0
 18092  16D4  00D7               	movwf	getDimmerLights_PercentToValue@i
 18093  16D5  3020               	movlw	32
 18094  16D6  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 18095  16D7  3042               	movlw	66
 18096  16D8  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 18097                           
 18098                           ;Dimmer_B1.c: 1308: i /= 100;
 18099  16D9  3000               	movlw	0
 18100  16DA  00A6               	movwf	___ftdiv@f2
 18101  16DB  30C8               	movlw	200
 18102  16DC  00A7               	movwf	___ftdiv@f2+1
 18103  16DD  3042               	movlw	66
 18104  16DE  00A8               	movwf	___ftdiv@f2+2
 18105  16DF  0857               	movf	getDimmerLights_PercentToValue@i,w
 18106  16E0  00A9               	movwf	___ftdiv@f1
 18107  16E1  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 18108  16E2  00AA               	movwf	___ftdiv@f1+1
 18109  16E3  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 18110  16E4  00AB               	movwf	___ftdiv@f1+2
 18111  16E5  318D  2539  3196   	fcall	___ftdiv
 18112  16E8  0020               	movlb	0	; select bank0
 18113  16E9  0826               	movf	?___ftdiv,w
 18114  16EA  00D7               	movwf	getDimmerLights_PercentToValue@i
 18115  16EB  0827               	movf	?___ftdiv+1,w
 18116  16EC  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 18117  16ED  0828               	movf	?___ftdiv+2,w
 18118  16EE  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 18119                           
 18120                           ;Dimmer_B1.c: 1310: return (char) (((char)(77*0.55)) - ((100 - value) * i));
 18121  16EF  0856               	movf	getDimmerLights_PercentToValue@value,w
 18122  16F0  00D4               	movwf	??_getDimmerLights_PercentToValue
 18123  16F1  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 18124  16F2  09D4               	comf	??_getDimmerLights_PercentToValue,f
 18125  16F3  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 18126  16F4  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 18127  16F5  1903               	skipnz
 18128  16F6  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 18129  16F7  0854               	movf	??_getDimmerLights_PercentToValue,w
 18130  16F8  3E64               	addlw	100
 18131  16F9  00A0               	movwf	___awtoft@c
 18132  16FA  3000               	movlw	0
 18133  16FB  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 18134  16FC  00A1               	movwf	___awtoft@c+1
 18135  16FD  319C  24E8  3196   	fcall	___awtoft
 18136  1700  0020               	movlb	0	; select bank0
 18137  1701  0820               	movf	?___awtoft,w
 18138  1702  00A9               	movwf	___ftmul@f2
 18139  1703  0821               	movf	?___awtoft+1,w
 18140  1704  00AA               	movwf	___ftmul@f2+1
 18141  1705  0822               	movf	?___awtoft+2,w
 18142  1706  00AB               	movwf	___ftmul@f2+2
 18143  1707  0857               	movf	getDimmerLights_PercentToValue@i,w
 18144  1708  00A6               	movwf	___ftmul@f1
 18145  1709  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 18146  170A  00A7               	movwf	___ftmul@f1+1
 18147  170B  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 18148  170C  00A8               	movwf	___ftmul@f1+2
 18149  170D  318E  268E  3196   	fcall	___ftmul
 18150  1710  0020               	movlb	0	; select bank0
 18151  1711  0826               	movf	?___ftmul,w
 18152  1712  00B6               	movwf	___ftneg@f1
 18153  1713  0827               	movf	?___ftmul+1,w
 18154  1714  00B7               	movwf	___ftneg@f1+1
 18155  1715  0828               	movf	?___ftmul+2,w
 18156  1716  00B8               	movwf	___ftneg@f1+2
 18157  1717  3198  2038  3196   	fcall	___ftneg
 18158  171A  0020               	movlb	0	; select bank0
 18159  171B  0836               	movf	?___ftneg,w
 18160  171C  00BC               	movwf	___ftadd@f2
 18161  171D  0837               	movf	?___ftneg+1,w
 18162  171E  00BD               	movwf	___ftadd@f2+1
 18163  171F  0838               	movf	?___ftneg+2,w
 18164  1720  00BE               	movwf	___ftadd@f2+2
 18165  1721  3000               	movlw	0
 18166  1722  00B9               	movwf	___ftadd@f1
 18167  1723  3028               	movlw	40
 18168  1724  00BA               	movwf	___ftadd@f1+1
 18169  1725  3042               	movlw	66
 18170  1726  00BB               	movwf	___ftadd@f1+2
 18171  1727  3183  2364  3196   	fcall	___ftadd
 18172  172A  0020               	movlb	0	; select bank0
 18173  172B  0839               	movf	?___ftadd,w
 18174  172C  00C6               	movwf	___fttol@f1
 18175  172D  083A               	movf	?___ftadd+1,w
 18176  172E  00C7               	movwf	___fttol@f1+1
 18177  172F  083B               	movf	?___ftadd+2,w
 18178  1730  00C8               	movwf	___fttol@f1+2
 18179  1731  318A  225C         	fcall	___fttol
 18180  1733  0020               	movlb	0	; select bank0
 18181  1734  0846               	movf	?___fttol,w
 18182  1735  0008               	return
 18183  1736                     __end_of_getDimmerLights_PercentToValue:	
 18184                           
 18185                           	psect	text125
 18186  0A5C                     __ptext125:	
 18187 ;; *************** function ___fttol *****************
 18188 ;; Defined at:
 18189 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 18190 ;; Parameters:    Size  Location     Type
 18191 ;;  f1              3   38[BANK0 ] float 
 18192 ;; Auto vars:     Size  Location     Type
 18193 ;;  lval            4   47[BANK0 ] unsigned long 
 18194 ;;  exp1            1   51[BANK0 ] unsigned char 
 18195 ;;  sign1           1   46[BANK0 ] unsigned char 
 18196 ;; Return value:  Size  Location     Type
 18197 ;;                  4   38[BANK0 ] long 
 18198 ;; Registers used:
 18199 ;;		wreg, status,2, status,0
 18200 ;; Tracked objects:
 18201 ;;		On entry : 0/0
 18202 ;;		On exit  : 0/0
 18203 ;;		Unchanged: 0/0
 18204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18205 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18206 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18207 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18208 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18209 ;;Total ram usage:       14 bytes
 18210 ;; Hardware stack levels used:    1
 18211 ;; Hardware stack levels required when called:    3
 18212 ;; This function calls:
 18213 ;;		Nothing
 18214 ;; This function is called by:
 18215 ;;		_getDimmerLights_PercentToValue
 18216 ;;		_getDimmerLights_ValueToPercent
 18217 ;; This function uses a non-reentrant model
 18218 ;;
 18219                           
 18220                           
 18221                           ;psect for function ___fttol
 18222  0A5C                     ___fttol:	
 18223                           
 18224                           ;incstack = 0
 18225                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 18226  0A5C  0020               	movlb	0	; select bank0
 18227  0A5D  0846               	movf	___fttol@f1,w
 18228  0A5E  00CA               	movwf	??___fttol
 18229  0A5F  0847               	movf	___fttol@f1+1,w
 18230  0A60  00CB               	movwf	??___fttol+1
 18231  0A61  0848               	movf	___fttol@f1+2,w
 18232  0A62  00CC               	movwf	??___fttol+2
 18233  0A63  1003               	clrc
 18234  0A64  0D4B               	rlf	??___fttol+1,w
 18235  0A65  0D4C               	rlf	??___fttol+2,w
 18236  0A66  00CD               	movwf	??___fttol+3
 18237  0A67  084D               	movf	??___fttol+3,w
 18238  0A68  00D3               	movwf	___fttol@exp1
 18239  0A69  08D3               	movf	___fttol@exp1,f
 18240  0A6A  1D03               	skipz
 18241  0A6B  2A75               	goto	l6957
 18242  0A6C  3000               	movlw	0
 18243  0A6D  00C9               	movwf	?___fttol+3
 18244  0A6E  3000               	movlw	0
 18245  0A6F  00C8               	movwf	?___fttol+2
 18246  0A70  3000               	movlw	0
 18247  0A71  00C7               	movwf	?___fttol+1
 18248  0A72  3000               	movlw	0
 18249  0A73  00C6               	movwf	?___fttol
 18250  0A74  0008               	return
 18251  0A75                     l6957:	
 18252  0A75  0846               	movf	___fttol@f1,w
 18253  0A76  00CA               	movwf	??___fttol
 18254  0A77  0847               	movf	___fttol@f1+1,w
 18255  0A78  00CB               	movwf	??___fttol+1
 18256  0A79  0848               	movf	___fttol@f1+2,w
 18257  0A7A  00CC               	movwf	??___fttol+2
 18258  0A7B  3017               	movlw	23
 18259  0A7C                     u6075:	
 18260  0A7C  36CC               	lsrf	??___fttol+2,f
 18261  0A7D  0CCB               	rrf	??___fttol+1,f
 18262  0A7E  0CCA               	rrf	??___fttol,f
 18263  0A7F  0B89               	decfsz	9,f
 18264  0A80  2A7C               	goto	u6075
 18265  0A81  084A               	movf	??___fttol,w
 18266  0A82  00CD               	movwf	??___fttol+3
 18267  0A83  084D               	movf	??___fttol+3,w
 18268  0A84  00CE               	movwf	___fttol@sign1
 18269  0A85  17C7               	bsf	___fttol@f1+1,7
 18270  0A86  30FF               	movlw	255
 18271  0A87  05C6               	andwf	___fttol@f1,f
 18272  0A88  30FF               	movlw	255
 18273  0A89  05C7               	andwf	___fttol@f1+1,f
 18274  0A8A  3000               	movlw	0
 18275  0A8B  05C8               	andwf	___fttol@f1+2,f
 18276  0A8C  0846               	movf	___fttol@f1,w
 18277  0A8D  00CF               	movwf	___fttol@lval
 18278  0A8E  0847               	movf	___fttol@f1+1,w
 18279  0A8F  00D0               	movwf	___fttol@lval+1
 18280  0A90  0848               	movf	___fttol@f1+2,w
 18281  0A91  00D1               	movwf	___fttol@lval+2
 18282  0A92  01D2               	clrf	___fttol@lval+3
 18283  0A93  308E               	movlw	142
 18284  0A94  02D3               	subwf	___fttol@exp1,f
 18285  0A95  1FD3               	btfss	___fttol@exp1,7
 18286  0A96  2AB3               	goto	l6977
 18287  0A97  0853               	movf	___fttol@exp1,w
 18288  0A98  3A80               	xorlw	128
 18289  0A99  3E8F               	addlw	143
 18290  0A9A  1803               	skipnc
 18291  0A9B  2AA5               	goto	l6975
 18292  0A9C  3000               	movlw	0
 18293  0A9D  00C9               	movwf	?___fttol+3
 18294  0A9E  3000               	movlw	0
 18295  0A9F  00C8               	movwf	?___fttol+2
 18296  0AA0  3000               	movlw	0
 18297  0AA1  00C7               	movwf	?___fttol+1
 18298  0AA2  3000               	movlw	0
 18299  0AA3  00C6               	movwf	?___fttol
 18300  0AA4  0008               	return
 18301  0AA5                     l6975:	
 18302  0AA5  3001               	movlw	1
 18303  0AA6                     u6105:	
 18304  0AA6  36D2               	lsrf	___fttol@lval+3,f
 18305  0AA7  0CD1               	rrf	___fttol@lval+2,f
 18306  0AA8  0CD0               	rrf	___fttol@lval+1,f
 18307  0AA9  0CCF               	rrf	___fttol@lval,f
 18308  0AAA  0B89               	decfsz	9,f
 18309  0AAB  2AA6               	goto	u6105
 18310  0AAC  3001               	movlw	1
 18311  0AAD  00CA               	movwf	??___fttol
 18312  0AAE  084A               	movf	??___fttol,w
 18313  0AAF  07D3               	addwf	___fttol@exp1,f
 18314  0AB0  1903               	btfsc	3,2
 18315  0AB1  2ACC               	goto	l6987
 18316  0AB2  2AA5               	goto	l6975
 18317  0AB3                     l6977:	
 18318  0AB3  3018               	movlw	24
 18319  0AB4  0253               	subwf	___fttol@exp1,w
 18320  0AB5  1C03               	skipc
 18321  0AB6  2AC9               	goto	l6985
 18322  0AB7  3000               	movlw	0
 18323  0AB8  00C9               	movwf	?___fttol+3
 18324  0AB9  3000               	movlw	0
 18325  0ABA  00C8               	movwf	?___fttol+2
 18326  0ABB  3000               	movlw	0
 18327  0ABC  00C7               	movwf	?___fttol+1
 18328  0ABD  3000               	movlw	0
 18329  0ABE  00C6               	movwf	?___fttol
 18330  0ABF  0008               	return
 18331  0AC0                     l6983:	
 18332  0AC0  3001               	movlw	1
 18333  0AC1                     u6135:	
 18334  0AC1  35CF               	lslf	___fttol@lval,f
 18335  0AC2  0DD0               	rlf	___fttol@lval+1,f
 18336  0AC3  0DD1               	rlf	___fttol@lval+2,f
 18337  0AC4  0DD2               	rlf	___fttol@lval+3,f
 18338  0AC5  0B89               	decfsz	9,f
 18339  0AC6  2AC1               	goto	u6135
 18340  0AC7  3001               	movlw	1
 18341  0AC8  02D3               	subwf	___fttol@exp1,f
 18342  0AC9                     l6985:	
 18343  0AC9  08D3               	movf	___fttol@exp1,f
 18344  0ACA  1D03               	skipz
 18345  0ACB  2AC0               	goto	l6983
 18346  0ACC                     l6987:	
 18347  0ACC  084E               	movf	___fttol@sign1,w
 18348  0ACD  1903               	btfsc	3,2
 18349  0ACE  2ADA               	goto	l6991
 18350  0ACF  09CF               	comf	___fttol@lval,f
 18351  0AD0  09D0               	comf	___fttol@lval+1,f
 18352  0AD1  09D1               	comf	___fttol@lval+2,f
 18353  0AD2  09D2               	comf	___fttol@lval+3,f
 18354  0AD3  0ACF               	incf	___fttol@lval,f
 18355  0AD4  1903               	skipnz
 18356  0AD5  0AD0               	incf	___fttol@lval+1,f
 18357  0AD6  1903               	skipnz
 18358  0AD7  0AD1               	incf	___fttol@lval+2,f
 18359  0AD8  1903               	skipnz
 18360  0AD9  0AD2               	incf	___fttol@lval+3,f
 18361  0ADA                     l6991:	
 18362  0ADA  0852               	movf	___fttol@lval+3,w
 18363  0ADB  00C9               	movwf	?___fttol+3
 18364  0ADC  0851               	movf	___fttol@lval+2,w
 18365  0ADD  00C8               	movwf	?___fttol+2
 18366  0ADE  0850               	movf	___fttol@lval+1,w
 18367  0ADF  00C7               	movwf	?___fttol+1
 18368  0AE0  084F               	movf	___fttol@lval,w
 18369  0AE1  00C6               	movwf	?___fttol
 18370  0AE2  0008               	return
 18371  0AE3                     __end_of___fttol:	
 18372                           
 18373                           	psect	text126
 18374  1838                     __ptext126:	
 18375 ;; *************** function ___ftneg *****************
 18376 ;; Defined at:
 18377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;  f1              3   22[BANK0 ] float 
 18380 ;; Auto vars:     Size  Location     Type
 18381 ;;		None
 18382 ;; Return value:  Size  Location     Type
 18383 ;;                  3   22[BANK0 ] float 
 18384 ;; Registers used:
 18385 ;;		wreg
 18386 ;; Tracked objects:
 18387 ;;		On entry : 0/0
 18388 ;;		On exit  : 0/0
 18389 ;;		Unchanged: 0/0
 18390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18391 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;Total ram usage:        3 bytes
 18396 ;; Hardware stack levels used:    1
 18397 ;; Hardware stack levels required when called:    3
 18398 ;; This function calls:
 18399 ;;		Nothing
 18400 ;; This function is called by:
 18401 ;;		_getDimmerLights_PercentToValue
 18402 ;;		_getDimmerLights_ValueToPercent
 18403 ;; This function uses a non-reentrant model
 18404 ;;
 18405                           
 18406                           
 18407                           ;psect for function ___ftneg
 18408  1838                     ___ftneg:	
 18409                           
 18410                           ;incstack = 0
 18411                           ; Regs used in ___ftneg: [wreg]
 18412  1838  0020               	movlb	0	; select bank0
 18413  1839  0838               	movf	___ftneg@f1+2,w
 18414  183A  0437               	iorwf	___ftneg@f1+1,w
 18415  183B  0436               	iorwf	___ftneg@f1,w
 18416  183C  1903               	skipnz
 18417  183D  0008               	return
 18418  183E  3080               	movlw	128
 18419  183F  06B8               	xorwf	___ftneg@f1+2,f
 18420  1840  0008               	return
 18421  1841                     __end_of___ftneg:	
 18422                           
 18423                           	psect	text127
 18424  0E8E                     __ptext127:	
 18425 ;; *************** function ___ftmul *****************
 18426 ;; Defined at:
 18427 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 18428 ;; Parameters:    Size  Location     Type
 18429 ;;  f1              3    6[BANK0 ] float 
 18430 ;;  f2              3    9[BANK0 ] float 
 18431 ;; Auto vars:     Size  Location     Type
 18432 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 18433 ;;  sign            1   21[BANK0 ] unsigned char 
 18434 ;;  cntr            1   20[BANK0 ] unsigned char 
 18435 ;;  exp             1   16[BANK0 ] unsigned char 
 18436 ;; Return value:  Size  Location     Type
 18437 ;;                  3    6[BANK0 ] float 
 18438 ;; Registers used:
 18439 ;;		wreg, status,2, status,0, pclath, cstack
 18440 ;; Tracked objects:
 18441 ;;		On entry : 0/0
 18442 ;;		On exit  : 0/0
 18443 ;;		Unchanged: 0/0
 18444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18445 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18446 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18447 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18448 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18449 ;;Total ram usage:       16 bytes
 18450 ;; Hardware stack levels used:    1
 18451 ;; Hardware stack levels required when called:    4
 18452 ;; This function calls:
 18453 ;;		___ftpack
 18454 ;; This function is called by:
 18455 ;;		_getDimmerLights_PercentToValue
 18456 ;; This function uses a non-reentrant model
 18457 ;;
 18458                           
 18459                           
 18460                           ;psect for function ___ftmul
 18461  0E8E                     ___ftmul:	
 18462                           
 18463                           ;incstack = 0
 18464                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 18465  0E8E  0020               	movlb	0	; select bank0
 18466  0E8F  0826               	movf	___ftmul@f1,w
 18467  0E90  00AC               	movwf	??___ftmul
 18468  0E91  0827               	movf	___ftmul@f1+1,w
 18469  0E92  00AD               	movwf	??___ftmul+1
 18470  0E93  0828               	movf	___ftmul@f1+2,w
 18471  0E94  00AE               	movwf	??___ftmul+2
 18472  0E95  1003               	clrc
 18473  0E96  0D2D               	rlf	??___ftmul+1,w
 18474  0E97  0D2E               	rlf	??___ftmul+2,w
 18475  0E98  00AF               	movwf	??___ftmul+3
 18476  0E99  082F               	movf	??___ftmul+3,w
 18477  0E9A  00B0               	movwf	___ftmul@exp
 18478  0E9B  08B0               	movf	___ftmul@exp,f
 18479  0E9C  1D03               	skipz
 18480  0E9D  2EA5               	goto	l6899
 18481  0E9E  3000               	movlw	0
 18482  0E9F  00A6               	movwf	?___ftmul
 18483  0EA0  3000               	movlw	0
 18484  0EA1  00A7               	movwf	?___ftmul+1
 18485  0EA2  3000               	movlw	0
 18486  0EA3  00A8               	movwf	?___ftmul+2
 18487  0EA4  0008               	return
 18488  0EA5                     l6899:	
 18489  0EA5  0829               	movf	___ftmul@f2,w
 18490  0EA6  00AC               	movwf	??___ftmul
 18491  0EA7  082A               	movf	___ftmul@f2+1,w
 18492  0EA8  00AD               	movwf	??___ftmul+1
 18493  0EA9  082B               	movf	___ftmul@f2+2,w
 18494  0EAA  00AE               	movwf	??___ftmul+2
 18495  0EAB  1003               	clrc
 18496  0EAC  0D2D               	rlf	??___ftmul+1,w
 18497  0EAD  0D2E               	rlf	??___ftmul+2,w
 18498  0EAE  00AF               	movwf	??___ftmul+3
 18499  0EAF  082F               	movf	??___ftmul+3,w
 18500  0EB0  00B5               	movwf	___ftmul@sign
 18501  0EB1  08B5               	movf	___ftmul@sign,f
 18502  0EB2  1D03               	skipz
 18503  0EB3  2EBB               	goto	l6905
 18504  0EB4  3000               	movlw	0
 18505  0EB5  00A6               	movwf	?___ftmul
 18506  0EB6  3000               	movlw	0
 18507  0EB7  00A7               	movwf	?___ftmul+1
 18508  0EB8  3000               	movlw	0
 18509  0EB9  00A8               	movwf	?___ftmul+2
 18510  0EBA  0008               	return
 18511  0EBB                     l6905:	
 18512  0EBB  0835               	movf	___ftmul@sign,w
 18513  0EBC  3E7B               	addlw	123
 18514  0EBD  00AC               	movwf	??___ftmul
 18515  0EBE  082C               	movf	??___ftmul,w
 18516  0EBF  07B0               	addwf	___ftmul@exp,f
 18517  0EC0  0826               	movf	___ftmul@f1,w
 18518  0EC1  00AC               	movwf	??___ftmul
 18519  0EC2  0827               	movf	___ftmul@f1+1,w
 18520  0EC3  00AD               	movwf	??___ftmul+1
 18521  0EC4  0828               	movf	___ftmul@f1+2,w
 18522  0EC5  00AE               	movwf	??___ftmul+2
 18523  0EC6  3010               	movlw	16
 18524  0EC7                     u5955:	
 18525  0EC7  36AE               	lsrf	??___ftmul+2,f
 18526  0EC8  0CAD               	rrf	??___ftmul+1,f
 18527  0EC9  0CAC               	rrf	??___ftmul,f
 18528  0ECA  0B89               	decfsz	9,f
 18529  0ECB  2EC7               	goto	u5955
 18530  0ECC  082C               	movf	??___ftmul,w
 18531  0ECD  00AF               	movwf	??___ftmul+3
 18532  0ECE  082F               	movf	??___ftmul+3,w
 18533  0ECF  00B5               	movwf	___ftmul@sign
 18534  0ED0  0829               	movf	___ftmul@f2,w
 18535  0ED1  00AC               	movwf	??___ftmul
 18536  0ED2  082A               	movf	___ftmul@f2+1,w
 18537  0ED3  00AD               	movwf	??___ftmul+1
 18538  0ED4  082B               	movf	___ftmul@f2+2,w
 18539  0ED5  00AE               	movwf	??___ftmul+2
 18540  0ED6  3010               	movlw	16
 18541  0ED7                     u5965:	
 18542  0ED7  36AE               	lsrf	??___ftmul+2,f
 18543  0ED8  0CAD               	rrf	??___ftmul+1,f
 18544  0ED9  0CAC               	rrf	??___ftmul,f
 18545  0EDA  0B89               	decfsz	9,f
 18546  0EDB  2ED7               	goto	u5965
 18547  0EDC  082C               	movf	??___ftmul,w
 18548  0EDD  00AF               	movwf	??___ftmul+3
 18549  0EDE  082F               	movf	??___ftmul+3,w
 18550  0EDF  06B5               	xorwf	___ftmul@sign,f
 18551  0EE0  3080               	movlw	128
 18552  0EE1  00AC               	movwf	??___ftmul
 18553  0EE2  082C               	movf	??___ftmul,w
 18554  0EE3  05B5               	andwf	___ftmul@sign,f
 18555  0EE4  17A7               	bsf	___ftmul@f1+1,7
 18556  0EE5  17AA               	bsf	___ftmul@f2+1,7
 18557  0EE6  30FF               	movlw	255
 18558  0EE7  05A9               	andwf	___ftmul@f2,f
 18559  0EE8  30FF               	movlw	255
 18560  0EE9  05AA               	andwf	___ftmul@f2+1,f
 18561  0EEA  3000               	movlw	0
 18562  0EEB  05AB               	andwf	___ftmul@f2+2,f
 18563  0EEC  3000               	movlw	0
 18564  0EED  00B1               	movwf	___ftmul@f3_as_product
 18565  0EEE  3000               	movlw	0
 18566  0EEF  00B2               	movwf	___ftmul@f3_as_product+1
 18567  0EF0  3000               	movlw	0
 18568  0EF1  00B3               	movwf	___ftmul@f3_as_product+2
 18569  0EF2  3007               	movlw	7
 18570  0EF3  00AC               	movwf	??___ftmul
 18571  0EF4  082C               	movf	??___ftmul,w
 18572  0EF5  00B4               	movwf	___ftmul@cntr
 18573  0EF6                     l6917:	
 18574  0EF6  1C26               	btfss	___ftmul@f1,0
 18575  0EF7  2EFE               	goto	l6921
 18576  0EF8  0829               	movf	___ftmul@f2,w
 18577  0EF9  07B1               	addwf	___ftmul@f3_as_product,f
 18578  0EFA  082A               	movf	___ftmul@f2+1,w
 18579  0EFB  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 18580  0EFC  082B               	movf	___ftmul@f2+2,w
 18581  0EFD  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 18582  0EFE                     l6921:	
 18583  0EFE  3001               	movlw	1
 18584  0EFF                     u5985:	
 18585  0EFF  36A8               	lsrf	___ftmul@f1+2,f
 18586  0F00  0CA7               	rrf	___ftmul@f1+1,f
 18587  0F01  0CA6               	rrf	___ftmul@f1,f
 18588  0F02  0B89               	decfsz	9,f
 18589  0F03  2EFF               	goto	u5985
 18590  0F04  3001               	movlw	1
 18591  0F05                     u5995:	
 18592  0F05  35A9               	lslf	___ftmul@f2,f
 18593  0F06  0DAA               	rlf	___ftmul@f2+1,f
 18594  0F07  0DAB               	rlf	___ftmul@f2+2,f
 18595  0F08  0B89               	decfsz	9,f
 18596  0F09  2F05               	goto	u5995
 18597  0F0A  3001               	movlw	1
 18598  0F0B  02B4               	subwf	___ftmul@cntr,f
 18599  0F0C  1D03               	btfss	3,2
 18600  0F0D  2EF6               	goto	l6917
 18601  0F0E  3009               	movlw	9
 18602  0F0F  00AC               	movwf	??___ftmul
 18603  0F10  082C               	movf	??___ftmul,w
 18604  0F11  00B4               	movwf	___ftmul@cntr
 18605  0F12                     l6929:	
 18606  0F12  1C26               	btfss	___ftmul@f1,0
 18607  0F13  2F1A               	goto	l6933
 18608  0F14  0829               	movf	___ftmul@f2,w
 18609  0F15  07B1               	addwf	___ftmul@f3_as_product,f
 18610  0F16  082A               	movf	___ftmul@f2+1,w
 18611  0F17  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 18612  0F18  082B               	movf	___ftmul@f2+2,w
 18613  0F19  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 18614  0F1A                     l6933:	
 18615  0F1A  3001               	movlw	1
 18616  0F1B                     u6025:	
 18617  0F1B  36A8               	lsrf	___ftmul@f1+2,f
 18618  0F1C  0CA7               	rrf	___ftmul@f1+1,f
 18619  0F1D  0CA6               	rrf	___ftmul@f1,f
 18620  0F1E  0B89               	decfsz	9,f
 18621  0F1F  2F1B               	goto	u6025
 18622  0F20  3001               	movlw	1
 18623  0F21                     u6035:	
 18624  0F21  36B3               	lsrf	___ftmul@f3_as_product+2,f
 18625  0F22  0CB2               	rrf	___ftmul@f3_as_product+1,f
 18626  0F23  0CB1               	rrf	___ftmul@f3_as_product,f
 18627  0F24  0B89               	decfsz	9,f
 18628  0F25  2F21               	goto	u6035
 18629  0F26  3001               	movlw	1
 18630  0F27  02B4               	subwf	___ftmul@cntr,f
 18631  0F28  1D03               	btfss	3,2
 18632  0F29  2F12               	goto	l6929
 18633  0F2A  0831               	movf	___ftmul@f3_as_product,w
 18634  0F2B  00F2               	movwf	___ftpack@arg
 18635  0F2C  0832               	movf	___ftmul@f3_as_product+1,w
 18636  0F2D  00F3               	movwf	___ftpack@arg+1
 18637  0F2E  0833               	movf	___ftmul@f3_as_product+2,w
 18638  0F2F  00F4               	movwf	___ftpack@arg+2
 18639  0F30  0830               	movf	___ftmul@exp,w
 18640  0F31  00AC               	movwf	??___ftmul
 18641  0F32  082C               	movf	??___ftmul,w
 18642  0F33  00F5               	movwf	___ftpack@exp
 18643  0F34  0835               	movf	___ftmul@sign,w
 18644  0F35  00AD               	movwf	??___ftmul+1
 18645  0F36  082D               	movf	??___ftmul+1,w
 18646  0F37  00F6               	movwf	___ftpack@sign
 18647  0F38  3195  25AB         	fcall	___ftpack
 18648  0F3A  0872               	movf	?___ftpack,w
 18649  0F3B  0020               	movlb	0	; select bank0
 18650  0F3C  00A6               	movwf	?___ftmul
 18651  0F3D  0873               	movf	?___ftpack+1,w
 18652  0F3E  00A7               	movwf	?___ftmul+1
 18653  0F3F  0874               	movf	?___ftpack+2,w
 18654  0F40  00A8               	movwf	?___ftmul+2
 18655  0F41  0008               	return
 18656  0F42                     __end_of___ftmul:	
 18657                           
 18658                           	psect	text128
 18659  0D39                     __ptext128:	
 18660 ;; *************** function ___ftdiv *****************
 18661 ;; Defined at:
 18662 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18663 ;; Parameters:    Size  Location     Type
 18664 ;;  f2              3    6[BANK0 ] float 
 18665 ;;  f1              3    9[BANK0 ] float 
 18666 ;; Auto vars:     Size  Location     Type
 18667 ;;  f3              3   17[BANK0 ] float 
 18668 ;;  sign            1   21[BANK0 ] unsigned char 
 18669 ;;  exp             1   20[BANK0 ] unsigned char 
 18670 ;;  cntr            1   16[BANK0 ] unsigned char 
 18671 ;; Return value:  Size  Location     Type
 18672 ;;                  3    6[BANK0 ] float 
 18673 ;; Registers used:
 18674 ;;		wreg, status,2, status,0, pclath, cstack
 18675 ;; Tracked objects:
 18676 ;;		On entry : 0/0
 18677 ;;		On exit  : 0/0
 18678 ;;		Unchanged: 0/0
 18679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18680 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18681 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18682 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18683 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18684 ;;Total ram usage:       16 bytes
 18685 ;; Hardware stack levels used:    1
 18686 ;; Hardware stack levels required when called:    4
 18687 ;; This function calls:
 18688 ;;		___ftpack
 18689 ;; This function is called by:
 18690 ;;		_getDimmerLights_PercentToValue
 18691 ;;		_getDimmerLights_ValueToPercent
 18692 ;; This function uses a non-reentrant model
 18693 ;;
 18694                           
 18695                           
 18696                           ;psect for function ___ftdiv
 18697  0D39                     ___ftdiv:	
 18698                           
 18699                           ;incstack = 0
 18700                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18701  0D39  0020               	movlb	0	; select bank0
 18702  0D3A  0829               	movf	___ftdiv@f1,w
 18703  0D3B  00AC               	movwf	??___ftdiv
 18704  0D3C  082A               	movf	___ftdiv@f1+1,w
 18705  0D3D  00AD               	movwf	??___ftdiv+1
 18706  0D3E  082B               	movf	___ftdiv@f1+2,w
 18707  0D3F  00AE               	movwf	??___ftdiv+2
 18708  0D40  1003               	clrc
 18709  0D41  0D2D               	rlf	??___ftdiv+1,w
 18710  0D42  0D2E               	rlf	??___ftdiv+2,w
 18711  0D43  00AF               	movwf	??___ftdiv+3
 18712  0D44  082F               	movf	??___ftdiv+3,w
 18713  0D45  00B4               	movwf	___ftdiv@exp
 18714  0D46  08B4               	movf	___ftdiv@exp,f
 18715  0D47  1D03               	skipz
 18716  0D48  2D50               	goto	l6857
 18717  0D49  3000               	movlw	0
 18718  0D4A  00A6               	movwf	?___ftdiv
 18719  0D4B  3000               	movlw	0
 18720  0D4C  00A7               	movwf	?___ftdiv+1
 18721  0D4D  3000               	movlw	0
 18722  0D4E  00A8               	movwf	?___ftdiv+2
 18723  0D4F  0008               	return
 18724  0D50                     l6857:	
 18725  0D50  0826               	movf	___ftdiv@f2,w
 18726  0D51  00AC               	movwf	??___ftdiv
 18727  0D52  0827               	movf	___ftdiv@f2+1,w
 18728  0D53  00AD               	movwf	??___ftdiv+1
 18729  0D54  0828               	movf	___ftdiv@f2+2,w
 18730  0D55  00AE               	movwf	??___ftdiv+2
 18731  0D56  1003               	clrc
 18732  0D57  0D2D               	rlf	??___ftdiv+1,w
 18733  0D58  0D2E               	rlf	??___ftdiv+2,w
 18734  0D59  00AF               	movwf	??___ftdiv+3
 18735  0D5A  082F               	movf	??___ftdiv+3,w
 18736  0D5B  00B5               	movwf	___ftdiv@sign
 18737  0D5C  08B5               	movf	___ftdiv@sign,f
 18738  0D5D  1D03               	skipz
 18739  0D5E  2D66               	goto	l6863
 18740  0D5F  3000               	movlw	0
 18741  0D60  00A6               	movwf	?___ftdiv
 18742  0D61  3000               	movlw	0
 18743  0D62  00A7               	movwf	?___ftdiv+1
 18744  0D63  3000               	movlw	0
 18745  0D64  00A8               	movwf	?___ftdiv+2
 18746  0D65  0008               	return
 18747  0D66                     l6863:	
 18748  0D66  3000               	movlw	0
 18749  0D67  00B1               	movwf	___ftdiv@f3
 18750  0D68  3000               	movlw	0
 18751  0D69  00B2               	movwf	___ftdiv@f3+1
 18752  0D6A  3000               	movlw	0
 18753  0D6B  00B3               	movwf	___ftdiv@f3+2
 18754  0D6C  3089               	movlw	137
 18755  0D6D  0735               	addwf	___ftdiv@sign,w
 18756  0D6E  00AC               	movwf	??___ftdiv
 18757  0D6F  082C               	movf	??___ftdiv,w
 18758  0D70  02B4               	subwf	___ftdiv@exp,f
 18759  0D71  0829               	movf	___ftdiv@f1,w
 18760  0D72  00AC               	movwf	??___ftdiv
 18761  0D73  082A               	movf	___ftdiv@f1+1,w
 18762  0D74  00AD               	movwf	??___ftdiv+1
 18763  0D75  082B               	movf	___ftdiv@f1+2,w
 18764  0D76  00AE               	movwf	??___ftdiv+2
 18765  0D77  3010               	movlw	16
 18766  0D78                     u5875:	
 18767  0D78  36AE               	lsrf	??___ftdiv+2,f
 18768  0D79  0CAD               	rrf	??___ftdiv+1,f
 18769  0D7A  0CAC               	rrf	??___ftdiv,f
 18770  0D7B  0B89               	decfsz	9,f
 18771  0D7C  2D78               	goto	u5875
 18772  0D7D  082C               	movf	??___ftdiv,w
 18773  0D7E  00AF               	movwf	??___ftdiv+3
 18774  0D7F  082F               	movf	??___ftdiv+3,w
 18775  0D80  00B5               	movwf	___ftdiv@sign
 18776  0D81  0826               	movf	___ftdiv@f2,w
 18777  0D82  00AC               	movwf	??___ftdiv
 18778  0D83  0827               	movf	___ftdiv@f2+1,w
 18779  0D84  00AD               	movwf	??___ftdiv+1
 18780  0D85  0828               	movf	___ftdiv@f2+2,w
 18781  0D86  00AE               	movwf	??___ftdiv+2
 18782  0D87  3010               	movlw	16
 18783  0D88                     u5885:	
 18784  0D88  36AE               	lsrf	??___ftdiv+2,f
 18785  0D89  0CAD               	rrf	??___ftdiv+1,f
 18786  0D8A  0CAC               	rrf	??___ftdiv,f
 18787  0D8B  0B89               	decfsz	9,f
 18788  0D8C  2D88               	goto	u5885
 18789  0D8D  082C               	movf	??___ftdiv,w
 18790  0D8E  00AF               	movwf	??___ftdiv+3
 18791  0D8F  082F               	movf	??___ftdiv+3,w
 18792  0D90  06B5               	xorwf	___ftdiv@sign,f
 18793  0D91  3080               	movlw	128
 18794  0D92  00AC               	movwf	??___ftdiv
 18795  0D93  082C               	movf	??___ftdiv,w
 18796  0D94  05B5               	andwf	___ftdiv@sign,f
 18797  0D95  17AA               	bsf	___ftdiv@f1+1,7
 18798  0D96  30FF               	movlw	255
 18799  0D97  05A9               	andwf	___ftdiv@f1,f
 18800  0D98  30FF               	movlw	255
 18801  0D99  05AA               	andwf	___ftdiv@f1+1,f
 18802  0D9A  3000               	movlw	0
 18803  0D9B  05AB               	andwf	___ftdiv@f1+2,f
 18804  0D9C  17A7               	bsf	___ftdiv@f2+1,7
 18805  0D9D  30FF               	movlw	255
 18806  0D9E  05A6               	andwf	___ftdiv@f2,f
 18807  0D9F  30FF               	movlw	255
 18808  0DA0  05A7               	andwf	___ftdiv@f2+1,f
 18809  0DA1  3000               	movlw	0
 18810  0DA2  05A8               	andwf	___ftdiv@f2+2,f
 18811  0DA3  3018               	movlw	24
 18812  0DA4  00AC               	movwf	??___ftdiv
 18813  0DA5  082C               	movf	??___ftdiv,w
 18814  0DA6  00B0               	movwf	___ftdiv@cntr
 18815  0DA7                     l6877:	
 18816  0DA7  3001               	movlw	1
 18817  0DA8                     u5895:	
 18818  0DA8  35B1               	lslf	___ftdiv@f3,f
 18819  0DA9  0DB2               	rlf	___ftdiv@f3+1,f
 18820  0DAA  0DB3               	rlf	___ftdiv@f3+2,f
 18821  0DAB  0B89               	decfsz	9,f
 18822  0DAC  2DA8               	goto	u5895
 18823  0DAD  0828               	movf	___ftdiv@f2+2,w
 18824  0DAE  022B               	subwf	___ftdiv@f1+2,w
 18825  0DAF  1D03               	skipz
 18826  0DB0  2DB7               	goto	u5905
 18827  0DB1  0827               	movf	___ftdiv@f2+1,w
 18828  0DB2  022A               	subwf	___ftdiv@f1+1,w
 18829  0DB3  1D03               	skipz
 18830  0DB4  2DB7               	goto	u5905
 18831  0DB5  0826               	movf	___ftdiv@f2,w
 18832  0DB6  0229               	subwf	___ftdiv@f1,w
 18833  0DB7                     u5905:	
 18834  0DB7  1C03               	skipc
 18835  0DB8  2DC0               	goto	l6885
 18836  0DB9  0826               	movf	___ftdiv@f2,w
 18837  0DBA  02A9               	subwf	___ftdiv@f1,f
 18838  0DBB  0827               	movf	___ftdiv@f2+1,w
 18839  0DBC  3BAA               	subwfb	___ftdiv@f1+1,f
 18840  0DBD  0828               	movf	___ftdiv@f2+2,w
 18841  0DBE  3BAB               	subwfb	___ftdiv@f1+2,f
 18842  0DBF  1431               	bsf	___ftdiv@f3,0
 18843  0DC0                     l6885:	
 18844  0DC0  3001               	movlw	1
 18845  0DC1                     u5915:	
 18846  0DC1  35A9               	lslf	___ftdiv@f1,f
 18847  0DC2  0DAA               	rlf	___ftdiv@f1+1,f
 18848  0DC3  0DAB               	rlf	___ftdiv@f1+2,f
 18849  0DC4  0B89               	decfsz	9,f
 18850  0DC5  2DC1               	goto	u5915
 18851  0DC6  3001               	movlw	1
 18852  0DC7  02B0               	subwf	___ftdiv@cntr,f
 18853  0DC8  1D03               	btfss	3,2
 18854  0DC9  2DA7               	goto	l6877
 18855  0DCA  0831               	movf	___ftdiv@f3,w
 18856  0DCB  00F2               	movwf	___ftpack@arg
 18857  0DCC  0832               	movf	___ftdiv@f3+1,w
 18858  0DCD  00F3               	movwf	___ftpack@arg+1
 18859  0DCE  0833               	movf	___ftdiv@f3+2,w
 18860  0DCF  00F4               	movwf	___ftpack@arg+2
 18861  0DD0  0834               	movf	___ftdiv@exp,w
 18862  0DD1  00AC               	movwf	??___ftdiv
 18863  0DD2  082C               	movf	??___ftdiv,w
 18864  0DD3  00F5               	movwf	___ftpack@exp
 18865  0DD4  0835               	movf	___ftdiv@sign,w
 18866  0DD5  00AD               	movwf	??___ftdiv+1
 18867  0DD6  082D               	movf	??___ftdiv+1,w
 18868  0DD7  00F6               	movwf	___ftpack@sign
 18869  0DD8  3195  25AB         	fcall	___ftpack
 18870  0DDA  0872               	movf	?___ftpack,w
 18871  0DDB  0020               	movlb	0	; select bank0
 18872  0DDC  00A6               	movwf	?___ftdiv
 18873  0DDD  0873               	movf	?___ftpack+1,w
 18874  0DDE  00A7               	movwf	?___ftdiv+1
 18875  0DDF  0874               	movf	?___ftpack+2,w
 18876  0DE0  00A8               	movwf	?___ftdiv+2
 18877  0DE1  0008               	return
 18878  0DE2                     __end_of___ftdiv:	
 18879                           
 18880                           	psect	text129
 18881  0364                     __ptext129:	
 18882 ;; *************** function ___ftadd *****************
 18883 ;; Defined at:
 18884 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 18885 ;; Parameters:    Size  Location     Type
 18886 ;;  f1              3   25[BANK0 ] float 
 18887 ;;  f2              3   28[BANK0 ] float 
 18888 ;; Auto vars:     Size  Location     Type
 18889 ;;  exp1            1   37[BANK0 ] unsigned char 
 18890 ;;  exp2            1   36[BANK0 ] unsigned char 
 18891 ;;  sign            1   35[BANK0 ] unsigned char 
 18892 ;; Return value:  Size  Location     Type
 18893 ;;                  3   25[BANK0 ] float 
 18894 ;; Registers used:
 18895 ;;		wreg, status,2, status,0, pclath, cstack
 18896 ;; Tracked objects:
 18897 ;;		On entry : 0/0
 18898 ;;		On exit  : 0/0
 18899 ;;		Unchanged: 0/0
 18900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18901 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18902 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18903 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18904 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18905 ;;Total ram usage:       13 bytes
 18906 ;; Hardware stack levels used:    1
 18907 ;; Hardware stack levels required when called:    4
 18908 ;; This function calls:
 18909 ;;		___ftpack
 18910 ;; This function is called by:
 18911 ;;		_getDimmerLights_PercentToValue
 18912 ;;		_getDimmerLights_ValueToPercent
 18913 ;; This function uses a non-reentrant model
 18914 ;;
 18915                           
 18916                           
 18917                           ;psect for function ___ftadd
 18918  0364                     ___ftadd:	
 18919                           
 18920                           ;incstack = 0
 18921                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18922  0364  0020               	movlb	0	; select bank0
 18923  0365  0839               	movf	___ftadd@f1,w
 18924  0366  00BF               	movwf	??___ftadd
 18925  0367  083A               	movf	___ftadd@f1+1,w
 18926  0368  00C0               	movwf	??___ftadd+1
 18927  0369  083B               	movf	___ftadd@f1+2,w
 18928  036A  00C1               	movwf	??___ftadd+2
 18929  036B  1003               	clrc
 18930  036C  0D40               	rlf	??___ftadd+1,w
 18931  036D  0D41               	rlf	??___ftadd+2,w
 18932  036E  00C2               	movwf	??___ftadd+3
 18933  036F  0842               	movf	??___ftadd+3,w
 18934  0370  00C5               	movwf	___ftadd@exp1
 18935  0371  083C               	movf	___ftadd@f2,w
 18936  0372  00BF               	movwf	??___ftadd
 18937  0373  083D               	movf	___ftadd@f2+1,w
 18938  0374  00C0               	movwf	??___ftadd+1
 18939  0375  083E               	movf	___ftadd@f2+2,w
 18940  0376  00C1               	movwf	??___ftadd+2
 18941  0377  1003               	clrc
 18942  0378  0D40               	rlf	??___ftadd+1,w
 18943  0379  0D41               	rlf	??___ftadd+2,w
 18944  037A  00C2               	movwf	??___ftadd+3
 18945  037B  0842               	movf	??___ftadd+3,w
 18946  037C  00C4               	movwf	___ftadd@exp2
 18947  037D  0845               	movf	___ftadd@exp1,w
 18948  037E  1903               	btfsc	3,2
 18949  037F  2B8C               	goto	l6787
 18950  0380  0844               	movf	___ftadd@exp2,w
 18951  0381  0245               	subwf	___ftadd@exp1,w
 18952  0382  1803               	skipnc
 18953  0383  2B93               	goto	l6791
 18954  0384  0345               	decf	___ftadd@exp1,w
 18955  0385  3AFF               	xorlw	255
 18956  0386  0744               	addwf	___ftadd@exp2,w
 18957  0387  00BF               	movwf	??___ftadd
 18958  0388  3019               	movlw	25
 18959  0389  023F               	subwf	??___ftadd,w
 18960  038A  1C03               	skipc
 18961  038B  2B93               	goto	l6791
 18962  038C                     l6787:	
 18963  038C  083C               	movf	___ftadd@f2,w
 18964  038D  00B9               	movwf	?___ftadd
 18965  038E  083D               	movf	___ftadd@f2+1,w
 18966  038F  00BA               	movwf	?___ftadd+1
 18967  0390  083E               	movf	___ftadd@f2+2,w
 18968  0391  00BB               	movwf	?___ftadd+2
 18969  0392  0008               	return
 18970  0393                     l6791:	
 18971  0393  0844               	movf	___ftadd@exp2,w
 18972  0394  1903               	btfsc	3,2
 18973  0395  0008               	return
 18974  0396  0845               	movf	___ftadd@exp1,w
 18975  0397  0244               	subwf	___ftadd@exp2,w
 18976  0398  1803               	skipnc
 18977  0399  2BA2               	goto	l6797
 18978  039A  0344               	decf	___ftadd@exp2,w
 18979  039B  3AFF               	xorlw	255
 18980  039C  0745               	addwf	___ftadd@exp1,w
 18981  039D  00BF               	movwf	??___ftadd
 18982  039E  3019               	movlw	25
 18983  039F  023F               	subwf	??___ftadd,w
 18984  03A0  1803               	btfsc	3,0
 18985  03A1  0008               	return
 18986  03A2                     l6797:	
 18987  03A2  3006               	movlw	6
 18988  03A3  00BF               	movwf	??___ftadd
 18989  03A4  083F               	movf	??___ftadd,w
 18990  03A5  00C3               	movwf	___ftadd@sign
 18991  03A6  1BBB               	btfsc	___ftadd@f1+2,7
 18992  03A7  17C3               	bsf	___ftadd@sign,7
 18993  03A8  1BBE               	btfsc	___ftadd@f2+2,7
 18994  03A9  1743               	bsf	___ftadd@sign,6
 18995  03AA  17BA               	bsf	___ftadd@f1+1,7
 18996  03AB  30FF               	movlw	255
 18997  03AC  05B9               	andwf	___ftadd@f1,f
 18998  03AD  30FF               	movlw	255
 18999  03AE  05BA               	andwf	___ftadd@f1+1,f
 19000  03AF  3000               	movlw	0
 19001  03B0  05BB               	andwf	___ftadd@f1+2,f
 19002  03B1  17BD               	bsf	___ftadd@f2+1,7
 19003  03B2  30FF               	movlw	255
 19004  03B3  05BC               	andwf	___ftadd@f2,f
 19005  03B4  30FF               	movlw	255
 19006  03B5  05BD               	andwf	___ftadd@f2+1,f
 19007  03B6  3000               	movlw	0
 19008  03B7  05BE               	andwf	___ftadd@f2+2,f
 19009  03B8  0844               	movf	___ftadd@exp2,w
 19010  03B9  0245               	subwf	___ftadd@exp1,w
 19011  03BA  1803               	skipnc
 19012  03BB  2BDE               	goto	l6819
 19013  03BC                     l6809:	
 19014  03BC  3001               	movlw	1
 19015  03BD                     u5715:	
 19016  03BD  35BC               	lslf	___ftadd@f2,f
 19017  03BE  0DBD               	rlf	___ftadd@f2+1,f
 19018  03BF  0DBE               	rlf	___ftadd@f2+2,f
 19019  03C0  0B89               	decfsz	9,f
 19020  03C1  2BBD               	goto	u5715
 19021  03C2  3001               	movlw	1
 19022  03C3  02C4               	subwf	___ftadd@exp2,f
 19023  03C4  0844               	movf	___ftadd@exp2,w
 19024  03C5  0645               	xorwf	___ftadd@exp1,w
 19025  03C6  1903               	skipnz
 19026  03C7  2BD9               	goto	l6817
 19027  03C8  3001               	movlw	1
 19028  03C9  02C3               	subwf	___ftadd@sign,f
 19029  03CA  0843               	movf	___ftadd@sign,w
 19030  03CB  3907               	andlw	7
 19031  03CC  1903               	btfsc	3,2
 19032  03CD  2BD9               	goto	l6817
 19033  03CE  2BBC               	goto	l6809
 19034  03CF                     l6815:	
 19035  03CF  3001               	movlw	1
 19036  03D0                     u5745:	
 19037  03D0  36BB               	lsrf	___ftadd@f1+2,f
 19038  03D1  0CBA               	rrf	___ftadd@f1+1,f
 19039  03D2  0CB9               	rrf	___ftadd@f1,f
 19040  03D3  0B89               	decfsz	9,f
 19041  03D4  2BD0               	goto	u5745
 19042  03D5  3001               	movlw	1
 19043  03D6  00BF               	movwf	??___ftadd
 19044  03D7  083F               	movf	??___ftadd,w
 19045  03D8  07C5               	addwf	___ftadd@exp1,f
 19046  03D9                     l6817:	
 19047  03D9  0845               	movf	___ftadd@exp1,w
 19048  03DA  0644               	xorwf	___ftadd@exp2,w
 19049  03DB  1903               	btfsc	3,2
 19050  03DC  2C03               	goto	l3330
 19051  03DD  2BCF               	goto	l6815
 19052  03DE                     l6819:	
 19053  03DE  0845               	movf	___ftadd@exp1,w
 19054  03DF  0244               	subwf	___ftadd@exp2,w
 19055  03E0  1803               	skipnc
 19056  03E1  2C03               	goto	l3330
 19057  03E2                     l6821:	
 19058  03E2  3001               	movlw	1
 19059  03E3                     u5775:	
 19060  03E3  35B9               	lslf	___ftadd@f1,f
 19061  03E4  0DBA               	rlf	___ftadd@f1+1,f
 19062  03E5  0DBB               	rlf	___ftadd@f1+2,f
 19063  03E6  0B89               	decfsz	9,f
 19064  03E7  2BE3               	goto	u5775
 19065  03E8  3001               	movlw	1
 19066  03E9  02C5               	subwf	___ftadd@exp1,f
 19067  03EA  0844               	movf	___ftadd@exp2,w
 19068  03EB  0645               	xorwf	___ftadd@exp1,w
 19069  03EC  1903               	skipnz
 19070  03ED  2BFF               	goto	l6829
 19071  03EE  3001               	movlw	1
 19072  03EF  02C3               	subwf	___ftadd@sign,f
 19073  03F0  0843               	movf	___ftadd@sign,w
 19074  03F1  3907               	andlw	7
 19075  03F2  1903               	btfsc	3,2
 19076  03F3  2BFF               	goto	l6829
 19077  03F4  2BE2               	goto	l6821
 19078  03F5                     l6827:	
 19079  03F5  3001               	movlw	1
 19080  03F6                     u5805:	
 19081  03F6  36BE               	lsrf	___ftadd@f2+2,f
 19082  03F7  0CBD               	rrf	___ftadd@f2+1,f
 19083  03F8  0CBC               	rrf	___ftadd@f2,f
 19084  03F9  0B89               	decfsz	9,f
 19085  03FA  2BF6               	goto	u5805
 19086  03FB  3001               	movlw	1
 19087  03FC  00BF               	movwf	??___ftadd
 19088  03FD  083F               	movf	??___ftadd,w
 19089  03FE  07C4               	addwf	___ftadd@exp2,f
 19090  03FF                     l6829:	
 19091  03FF  0845               	movf	___ftadd@exp1,w
 19092  0400  0644               	xorwf	___ftadd@exp2,w
 19093  0401  1D03               	skipz
 19094  0402  2BF5               	goto	l6827
 19095  0403                     l3330:	
 19096  0403  1FC3               	btfss	___ftadd@sign,7
 19097  0404  2C15               	goto	l6833
 19098  0405  30FF               	movlw	255
 19099  0406  06B9               	xorwf	___ftadd@f1,f
 19100  0407  30FF               	movlw	255
 19101  0408  06BA               	xorwf	___ftadd@f1+1,f
 19102  0409  30FF               	movlw	255
 19103  040A  06BB               	xorwf	___ftadd@f1+2,f
 19104  040B  3001               	movlw	1
 19105  040C  07B9               	addwf	___ftadd@f1,f
 19106  040D  3000               	movlw	0
 19107  040E  1803               	skipnc
 19108  040F  3001               	movlw	1
 19109  0410  07BA               	addwf	___ftadd@f1+1,f
 19110  0411  3000               	movlw	0
 19111  0412  1803               	skipnc
 19112  0413  3001               	movlw	1
 19113  0414  07BB               	addwf	___ftadd@f1+2,f
 19114  0415                     l6833:	
 19115  0415  1F43               	btfss	___ftadd@sign,6
 19116  0416  2C27               	goto	l6837
 19117  0417  30FF               	movlw	255
 19118  0418  06BC               	xorwf	___ftadd@f2,f
 19119  0419  30FF               	movlw	255
 19120  041A  06BD               	xorwf	___ftadd@f2+1,f
 19121  041B  30FF               	movlw	255
 19122  041C  06BE               	xorwf	___ftadd@f2+2,f
 19123  041D  3001               	movlw	1
 19124  041E  07BC               	addwf	___ftadd@f2,f
 19125  041F  3000               	movlw	0
 19126  0420  1803               	skipnc
 19127  0421  3001               	movlw	1
 19128  0422  07BD               	addwf	___ftadd@f2+1,f
 19129  0423  3000               	movlw	0
 19130  0424  1803               	skipnc
 19131  0425  3001               	movlw	1
 19132  0426  07BE               	addwf	___ftadd@f2+2,f
 19133  0427                     l6837:	
 19134  0427  01C3               	clrf	___ftadd@sign
 19135  0428  0839               	movf	___ftadd@f1,w
 19136  0429  07BC               	addwf	___ftadd@f2,f
 19137  042A  083A               	movf	___ftadd@f1+1,w
 19138  042B  3DBD               	addwfc	___ftadd@f2+1,f
 19139  042C  083B               	movf	___ftadd@f1+2,w
 19140  042D  3DBE               	addwfc	___ftadd@f2+2,f
 19141  042E  1FBE               	btfss	___ftadd@f2+2,7
 19142  042F  2C42               	goto	l6847
 19143  0430  30FF               	movlw	255
 19144  0431  06BC               	xorwf	___ftadd@f2,f
 19145  0432  30FF               	movlw	255
 19146  0433  06BD               	xorwf	___ftadd@f2+1,f
 19147  0434  30FF               	movlw	255
 19148  0435  06BE               	xorwf	___ftadd@f2+2,f
 19149  0436  3001               	movlw	1
 19150  0437  07BC               	addwf	___ftadd@f2,f
 19151  0438  3000               	movlw	0
 19152  0439  1803               	skipnc
 19153  043A  3001               	movlw	1
 19154  043B  07BD               	addwf	___ftadd@f2+1,f
 19155  043C  3000               	movlw	0
 19156  043D  1803               	skipnc
 19157  043E  3001               	movlw	1
 19158  043F  07BE               	addwf	___ftadd@f2+2,f
 19159  0440  01C3               	clrf	___ftadd@sign
 19160  0441  0AC3               	incf	___ftadd@sign,f
 19161  0442                     l6847:	
 19162  0442  083C               	movf	___ftadd@f2,w
 19163  0443  00F2               	movwf	___ftpack@arg
 19164  0444  083D               	movf	___ftadd@f2+1,w
 19165  0445  00F3               	movwf	___ftpack@arg+1
 19166  0446  083E               	movf	___ftadd@f2+2,w
 19167  0447  00F4               	movwf	___ftpack@arg+2
 19168  0448  0845               	movf	___ftadd@exp1,w
 19169  0449  00BF               	movwf	??___ftadd
 19170  044A  083F               	movf	??___ftadd,w
 19171  044B  00F5               	movwf	___ftpack@exp
 19172  044C  0843               	movf	___ftadd@sign,w
 19173  044D  00C0               	movwf	??___ftadd+1
 19174  044E  0840               	movf	??___ftadd+1,w
 19175  044F  00F6               	movwf	___ftpack@sign
 19176  0450  3195  25AB         	fcall	___ftpack
 19177  0452  0872               	movf	?___ftpack,w
 19178  0453  0020               	movlb	0	; select bank0
 19179  0454  00B9               	movwf	?___ftadd
 19180  0455  0873               	movf	?___ftpack+1,w
 19181  0456  00BA               	movwf	?___ftadd+1
 19182  0457  0874               	movf	?___ftpack+2,w
 19183  0458  00BB               	movwf	?___ftadd+2
 19184  0459  0008               	return
 19185  045A                     __end_of___ftadd:	
 19186                           
 19187                           	psect	text130
 19188  1CE8                     __ptext130:	
 19189 ;; *************** function ___awtoft *****************
 19190 ;; Defined at:
 19191 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 19192 ;; Parameters:    Size  Location     Type
 19193 ;;  c               2    0[BANK0 ] int 
 19194 ;; Auto vars:     Size  Location     Type
 19195 ;;  sign            1    5[BANK0 ] unsigned char 
 19196 ;; Return value:  Size  Location     Type
 19197 ;;                  3    0[BANK0 ] float 
 19198 ;; Registers used:
 19199 ;;		wreg, status,2, status,0, pclath, cstack
 19200 ;; Tracked objects:
 19201 ;;		On entry : 0/0
 19202 ;;		On exit  : 0/0
 19203 ;;		Unchanged: 0/0
 19204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19205 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19207 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19208 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19209 ;;Total ram usage:        6 bytes
 19210 ;; Hardware stack levels used:    1
 19211 ;; Hardware stack levels required when called:    4
 19212 ;; This function calls:
 19213 ;;		___ftpack
 19214 ;; This function is called by:
 19215 ;;		_getDimmerLights_PercentToValue
 19216 ;;		_getDimmerLights_ValueToPercent
 19217 ;; This function uses a non-reentrant model
 19218 ;;
 19219                           
 19220                           
 19221                           ;psect for function ___awtoft
 19222  1CE8                     ___awtoft:	
 19223                           
 19224                           ;incstack = 0
 19225                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 19226  1CE8  0020               	movlb	0	; select bank0
 19227  1CE9  01A5               	clrf	___awtoft@sign
 19228  1CEA  1FA1               	btfss	___awtoft@c+1,7
 19229  1CEB  2CF3               	goto	l9785
 19230  1CEC  09A0               	comf	___awtoft@c,f
 19231  1CED  09A1               	comf	___awtoft@c+1,f
 19232  1CEE  0AA0               	incf	___awtoft@c,f
 19233  1CEF  1903               	skipnz
 19234  1CF0  0AA1               	incf	___awtoft@c+1,f
 19235  1CF1  01A5               	clrf	___awtoft@sign
 19236  1CF2  0AA5               	incf	___awtoft@sign,f
 19237  1CF3                     l9785:	
 19238  1CF3  0820               	movf	___awtoft@c,w
 19239  1CF4  00F2               	movwf	___ftpack@arg
 19240  1CF5  0821               	movf	___awtoft@c+1,w
 19241  1CF6  00F3               	movwf	___ftpack@arg+1
 19242  1CF7  01F4               	clrf	___ftpack@arg+2
 19243  1CF8  308E               	movlw	142
 19244  1CF9  00A3               	movwf	??___awtoft
 19245  1CFA  0823               	movf	??___awtoft,w
 19246  1CFB  00F5               	movwf	___ftpack@exp
 19247  1CFC  0825               	movf	___awtoft@sign,w
 19248  1CFD  00A4               	movwf	??___awtoft+1
 19249  1CFE  0824               	movf	??___awtoft+1,w
 19250  1CFF  00F6               	movwf	___ftpack@sign
 19251  1D00  3195  25AB         	fcall	___ftpack
 19252  1D02  0872               	movf	?___ftpack,w
 19253  1D03  0020               	movlb	0	; select bank0
 19254  1D04  00A0               	movwf	?___awtoft
 19255  1D05  0873               	movf	?___ftpack+1,w
 19256  1D06  00A1               	movwf	?___awtoft+1
 19257  1D07  0874               	movf	?___ftpack+2,w
 19258  1D08  00A2               	movwf	?___awtoft+2
 19259  1D09  0008               	return
 19260  1D0A                     __end_of___awtoft:	
 19261                           
 19262                           	psect	text131
 19263  15AB                     __ptext131:	
 19264 ;; *************** function ___ftpack *****************
 19265 ;; Defined at:
 19266 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 19267 ;; Parameters:    Size  Location     Type
 19268 ;;  arg             3    2[COMMON] unsigned um
 19269 ;;  exp             1    5[COMMON] unsigned char 
 19270 ;;  sign            1    6[COMMON] unsigned char 
 19271 ;; Auto vars:     Size  Location     Type
 19272 ;;		None
 19273 ;; Return value:  Size  Location     Type
 19274 ;;                  3    2[COMMON] float 
 19275 ;; Registers used:
 19276 ;;		wreg, status,2, status,0
 19277 ;; Tracked objects:
 19278 ;;		On entry : 0/0
 19279 ;;		On exit  : 0/0
 19280 ;;		Unchanged: 0/0
 19281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19282 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19284 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19285 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19286 ;;Total ram usage:        8 bytes
 19287 ;; Hardware stack levels used:    1
 19288 ;; Hardware stack levels required when called:    3
 19289 ;; This function calls:
 19290 ;;		Nothing
 19291 ;; This function is called by:
 19292 ;;		___awtoft
 19293 ;;		___ftadd
 19294 ;;		___ftdiv
 19295 ;;		___ftmul
 19296 ;; This function uses a non-reentrant model
 19297 ;;
 19298                           
 19299                           
 19300                           ;psect for function ___ftpack
 19301  15AB                     ___ftpack:	
 19302                           
 19303                           ;incstack = 0
 19304                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 19305  15AB  0875               	movf	___ftpack@exp,w
 19306  15AC  1903               	btfsc	3,2
 19307  15AD  2DB3               	goto	l6621
 19308  15AE  0874               	movf	___ftpack@arg+2,w
 19309  15AF  0473               	iorwf	___ftpack@arg+1,w
 19310  15B0  0472               	iorwf	___ftpack@arg,w
 19311  15B1  1D03               	skipz
 19312  15B2  2DC4               	goto	l6627
 19313  15B3                     l6621:	
 19314  15B3  3000               	movlw	0
 19315  15B4  00F2               	movwf	?___ftpack
 19316  15B5  3000               	movlw	0
 19317  15B6  00F3               	movwf	?___ftpack+1
 19318  15B7  3000               	movlw	0
 19319  15B8  00F4               	movwf	?___ftpack+2
 19320  15B9  0008               	return
 19321  15BA                     l6625:	
 19322  15BA  3001               	movlw	1
 19323  15BB  00F7               	movwf	??___ftpack
 19324  15BC  0877               	movf	??___ftpack,w
 19325  15BD  07F5               	addwf	___ftpack@exp,f
 19326  15BE  3001               	movlw	1
 19327  15BF                     u5305:	
 19328  15BF  36F4               	lsrf	___ftpack@arg+2,f
 19329  15C0  0CF3               	rrf	___ftpack@arg+1,f
 19330  15C1  0CF2               	rrf	___ftpack@arg,f
 19331  15C2  0B89               	decfsz	9,f
 19332  15C3  2DBF               	goto	u5305
 19333  15C4                     l6627:	
 19334  15C4  30FE               	movlw	254
 19335  15C5  0574               	andwf	___ftpack@arg+2,w
 19336  15C6  1903               	btfsc	3,2
 19337  15C7  2DDD               	goto	l3301
 19338  15C8  2DBA               	goto	l6625
 19339  15C9                     l6629:	
 19340  15C9  3001               	movlw	1
 19341  15CA  00F7               	movwf	??___ftpack
 19342  15CB  0877               	movf	??___ftpack,w
 19343  15CC  07F5               	addwf	___ftpack@exp,f
 19344  15CD  3001               	movlw	1
 19345  15CE  07F2               	addwf	___ftpack@arg,f
 19346  15CF  3000               	movlw	0
 19347  15D0  1803               	skipnc
 19348  15D1  3001               	movlw	1
 19349  15D2  07F3               	addwf	___ftpack@arg+1,f
 19350  15D3  3000               	movlw	0
 19351  15D4  1803               	skipnc
 19352  15D5  3001               	movlw	1
 19353  15D6  07F4               	addwf	___ftpack@arg+2,f
 19354  15D7  3001               	movlw	1
 19355  15D8                     u5325:	
 19356  15D8  36F4               	lsrf	___ftpack@arg+2,f
 19357  15D9  0CF3               	rrf	___ftpack@arg+1,f
 19358  15DA  0CF2               	rrf	___ftpack@arg,f
 19359  15DB  0B89               	decfsz	9,f
 19360  15DC  2DD8               	goto	u5325
 19361  15DD                     l3301:	
 19362  15DD  30FF               	movlw	255
 19363  15DE  0574               	andwf	___ftpack@arg+2,w
 19364  15DF  1903               	btfsc	3,2
 19365  15E0  2DEA               	goto	l6637
 19366  15E1  2DC9               	goto	l6629
 19367  15E2                     l6635:	
 19368  15E2  3001               	movlw	1
 19369  15E3  02F5               	subwf	___ftpack@exp,f
 19370  15E4  3001               	movlw	1
 19371  15E5                     u5345:	
 19372  15E5  35F2               	lslf	___ftpack@arg,f
 19373  15E6  0DF3               	rlf	___ftpack@arg+1,f
 19374  15E7  0DF4               	rlf	___ftpack@arg+2,f
 19375  15E8  0B89               	decfsz	9,f
 19376  15E9  2DE5               	goto	u5345
 19377  15EA                     l6637:	
 19378  15EA  1FF3               	btfss	___ftpack@arg+1,7
 19379  15EB  2DE2               	goto	l6635
 19380  15EC  1875               	btfsc	___ftpack@exp,0
 19381  15ED  2DF4               	goto	l3307
 19382  15EE  30FF               	movlw	255
 19383  15EF  05F2               	andwf	___ftpack@arg,f
 19384  15F0  307F               	movlw	127
 19385  15F1  05F3               	andwf	___ftpack@arg+1,f
 19386  15F2  30FF               	movlw	255
 19387  15F3  05F4               	andwf	___ftpack@arg+2,f
 19388  15F4                     l3307:	
 19389  15F4  1003               	clrc
 19390  15F5  0CF5               	rrf	___ftpack@exp,f
 19391  15F6  0875               	movf	___ftpack@exp,w
 19392  15F7  00F7               	movwf	??___ftpack
 19393  15F8  01F8               	clrf	??___ftpack+1
 19394  15F9  01F9               	clrf	??___ftpack+2
 19395  15FA  3010               	movlw	16
 19396  15FB                     u5375:	
 19397  15FB  35F7               	lslf	??___ftpack,f
 19398  15FC  0DF8               	rlf	??___ftpack+1,f
 19399  15FD  0DF9               	rlf	??___ftpack+2,f
 19400  15FE  0B89               	decfsz	9,f
 19401  15FF  2DFB               	goto	u5375
 19402  1600  0877               	movf	??___ftpack,w
 19403  1601  04F2               	iorwf	___ftpack@arg,f
 19404  1602  0878               	movf	??___ftpack+1,w
 19405  1603  04F3               	iorwf	___ftpack@arg+1,f
 19406  1604  0879               	movf	??___ftpack+2,w
 19407  1605  04F4               	iorwf	___ftpack@arg+2,f
 19408  1606  0876               	movf	___ftpack@sign,w
 19409  1607  1903               	btfsc	3,2
 19410  1608  0008               	return
 19411  1609  17F4               	bsf	___ftpack@arg+2,7
 19412  160A  0008               	return
 19413  160B                     __end_of___ftpack:	
 19414                           
 19415                           	psect	text132
 19416  18FB                     __ptext132:	
 19417 ;; *************** function _Division *****************
 19418 ;; Defined at:
 19419 ;;		line 2398 in file "../src/Dimmer_B1.c"
 19420 ;; Parameters:    Size  Location     Type
 19421 ;;  value           1    wreg     unsigned char 
 19422 ;;  num             1    7[COMMON] unsigned char 
 19423 ;; Auto vars:     Size  Location     Type
 19424 ;;  value           1    0[BANK0 ] unsigned char 
 19425 ;;  result          1    1[BANK0 ] unsigned char 
 19426 ;; Return value:  Size  Location     Type
 19427 ;;                  1    wreg      unsigned char 
 19428 ;; Registers used:
 19429 ;;		wreg, status,2, status,0, pclath, cstack
 19430 ;; Tracked objects:
 19431 ;;		On entry : 0/0
 19432 ;;		On exit  : 0/0
 19433 ;;		Unchanged: 0/0
 19434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19435 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19438 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19439 ;;Total ram usage:        5 bytes
 19440 ;; Hardware stack levels used:    1
 19441 ;; Hardware stack levels required when called:    4
 19442 ;; This function calls:
 19443 ;;		___lbdiv
 19444 ;; This function is called by:
 19445 ;;		_DimmerIntr_Initialization
 19446 ;;		_DimmerIntr_ValueCalculate
 19447 ;; This function uses a non-reentrant model
 19448 ;;
 19449                           
 19450                           
 19451                           ;psect for function _Division
 19452  18FB                     _Division:	
 19453                           
 19454                           ;incstack = 0
 19455                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19456                           ;Division@value stored from wreg
 19457  18FB  0020               	movlb	0	; select bank0
 19458  18FC  00A0               	movwf	Division@value
 19459                           
 19460                           ;Dimmer_B1.c: 2399: char result = (char) (value / num);
 19461  18FD  0877               	movf	Division@num,w
 19462  18FE  00F8               	movwf	??_Division
 19463  18FF  0878               	movf	??_Division,w
 19464  1900  00F2               	movwf	___lbdiv@divisor
 19465  1901  0820               	movf	Division@value,w
 19466  1902  319C  24A5         	fcall	___lbdiv
 19467  1904  00F9               	movwf	??_Division+1
 19468  1905  0879               	movf	??_Division+1,w
 19469  1906  0020               	movlb	0	; select bank0
 19470  1907  00A1               	movwf	Division@result
 19471                           
 19472                           ;Dimmer_B1.c: 2400: return result;
 19473  1908  0821               	movf	Division@result,w
 19474  1909  0008               	return
 19475  190A                     __end_of_Division:	
 19476                           
 19477                           	psect	text133
 19478  1CA5                     __ptext133:	
 19479 ;; *************** function ___lbdiv *****************
 19480 ;; Defined at:
 19481 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19482 ;; Parameters:    Size  Location     Type
 19483 ;;  dividend        1    wreg     unsigned char 
 19484 ;;  divisor         1    2[COMMON] unsigned char 
 19485 ;; Auto vars:     Size  Location     Type
 19486 ;;  dividend        1    4[COMMON] unsigned char 
 19487 ;;  quotient        1    6[COMMON] unsigned char 
 19488 ;;  counter         1    5[COMMON] unsigned char 
 19489 ;; Return value:  Size  Location     Type
 19490 ;;                  1    wreg      unsigned char 
 19491 ;; Registers used:
 19492 ;;		wreg, status,2, status,0
 19493 ;; Tracked objects:
 19494 ;;		On entry : 0/0
 19495 ;;		On exit  : 0/0
 19496 ;;		Unchanged: 0/0
 19497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19498 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19499 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19501 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19502 ;;Total ram usage:        5 bytes
 19503 ;; Hardware stack levels used:    1
 19504 ;; Hardware stack levels required when called:    3
 19505 ;; This function calls:
 19506 ;;		Nothing
 19507 ;; This function is called by:
 19508 ;;		_Division
 19509 ;; This function uses a non-reentrant model
 19510 ;;
 19511                           
 19512                           
 19513                           ;psect for function ___lbdiv
 19514  1CA5                     ___lbdiv:	
 19515                           
 19516                           ;incstack = 0
 19517                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19518                           ;___lbdiv@dividend stored from wreg
 19519  1CA5  00F4               	movwf	___lbdiv@dividend
 19520  1CA6  01F6               	clrf	___lbdiv@quotient
 19521  1CA7  0872               	movf	___lbdiv@divisor,w
 19522  1CA8  1903               	btfsc	3,2
 19523  1CA9  2CC4               	goto	l9887
 19524  1CAA  01F5               	clrf	___lbdiv@counter
 19525  1CAB  0AF5               	incf	___lbdiv@counter,f
 19526  1CAC                     l9875:	
 19527  1CAC  1BF2               	btfsc	___lbdiv@divisor,7
 19528  1CAD  2CB5               	goto	l9877
 19529  1CAE  1003               	clrc
 19530  1CAF  0DF2               	rlf	___lbdiv@divisor,f
 19531  1CB0  3001               	movlw	1
 19532  1CB1  00F3               	movwf	??___lbdiv
 19533  1CB2  0873               	movf	??___lbdiv,w
 19534  1CB3  07F5               	addwf	___lbdiv@counter,f
 19535  1CB4  2CAC               	goto	l9875
 19536  1CB5                     l9877:	
 19537  1CB5  1003               	clrc
 19538  1CB6  0DF6               	rlf	___lbdiv@quotient,f
 19539  1CB7  0872               	movf	___lbdiv@divisor,w
 19540  1CB8  0274               	subwf	___lbdiv@dividend,w
 19541  1CB9  1C03               	skipc
 19542  1CBA  2CBF               	goto	L14
 19543  1CBB  0872               	movf	___lbdiv@divisor,w
 19544  1CBC  02F4               	subwf	___lbdiv@dividend,f
 19545  1CBD  1476               	bsf	___lbdiv@quotient,0
 19546  1CBE  1003               	clrc
 19547  1CBF                     L14:	
 19548  1CBF  0CF2               	rrf	___lbdiv@divisor,f
 19549  1CC0  3001               	movlw	1
 19550  1CC1  02F5               	subwf	___lbdiv@counter,f
 19551  1CC2  1D03               	btfss	3,2
 19552  1CC3  2CB5               	goto	l9877
 19553  1CC4                     l9887:	
 19554  1CC4  0876               	movf	___lbdiv@quotient,w
 19555  1CC5  0008               	return
 19556  1CC6                     __end_of___lbdiv:	
 19557                           
 19558                           	psect	text134
 19559  1820                     __ptext134:	
 19560 ;; *************** function _DelayOff_Main *****************
 19561 ;; Defined at:
 19562 ;;		line 41 in file "../src/DelayOff_B1.c"
 19563 ;; Parameters:    Size  Location     Type
 19564 ;;		None
 19565 ;; Auto vars:     Size  Location     Type
 19566 ;;		None
 19567 ;; Return value:  Size  Location     Type
 19568 ;;		None               void
 19569 ;; Registers used:
 19570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19571 ;; Tracked objects:
 19572 ;;		On entry : 0/0
 19573 ;;		On exit  : 0/0
 19574 ;;		Unchanged: 0/0
 19575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19580 ;;Total ram usage:        0 bytes
 19581 ;; Hardware stack levels used:    1
 19582 ;; Hardware stack levels required when called:    7
 19583 ;; This function calls:
 19584 ;;		_DlyOff_Main
 19585 ;; This function is called by:
 19586 ;;		_main
 19587 ;; This function uses a non-reentrant model
 19588 ;;
 19589                           
 19590                           
 19591                           ;psect for function _DelayOff_Main
 19592  1820                     _DelayOff_Main:	
 19593                           
 19594                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 19595                           
 19596                           ;incstack = 0
 19597                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19598  1820  3001               	movlw	1
 19599  1821  3188  20F9  3198   	fcall	_DlyOff_Main
 19600                           
 19601                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 19602  1824  3002               	movlw	2
 19603  1825  3188  20F9         	fcall	_DlyOff_Main
 19604  1827  0008               	return
 19605  1828                     __end_of_DelayOff_Main:	
 19606                           
 19607                           	psect	text135
 19608  08F9                     __ptext135:	
 19609 ;; *************** function _DlyOff_Main *****************
 19610 ;; Defined at:
 19611 ;;		line 61 in file "../src/DelayOff_B1.c"
 19612 ;; Parameters:    Size  Location     Type
 19613 ;;  sw              1    wreg     unsigned char 
 19614 ;; Auto vars:     Size  Location     Type
 19615 ;;  sw              1   63[BANK0 ] unsigned char 
 19616 ;; Return value:  Size  Location     Type
 19617 ;;		None               void
 19618 ;; Registers used:
 19619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19620 ;; Tracked objects:
 19621 ;;		On entry : 0/0
 19622 ;;		On exit  : 0/0
 19623 ;;		Unchanged: 0/0
 19624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19627 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19628 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19629 ;;Total ram usage:        3 bytes
 19630 ;; Hardware stack levels used:    1
 19631 ;; Hardware stack levels required when called:    6
 19632 ;; This function calls:
 19633 ;;		_DelayOffPointSelect
 19634 ;;		_getDimmerLights_Status
 19635 ;;		_setDimmerLights_SwOff
 19636 ;;		_setDimmerLights_SwOn
 19637 ;;		_setProductData
 19638 ;; This function is called by:
 19639 ;;		_DelayOff_Main
 19640 ;; This function uses a non-reentrant model
 19641 ;;
 19642                           
 19643                           
 19644                           ;psect for function _DlyOff_Main
 19645  08F9                     _DlyOff_Main:	
 19646                           
 19647                           ;incstack = 0
 19648                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19649                           ;DlyOff_Main@sw stored from wreg
 19650  08F9  0020               	movlb	0	; select bank0
 19651  08FA  00DF               	movwf	DlyOff_Main@sw
 19652                           
 19653                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 19654  08FB  085F               	movf	DlyOff_Main@sw,w
 19655  08FC  319A  2222  3188   	fcall	_DelayOffPointSelect
 19656                           
 19657                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 19658  08FF  0021               	movlb	1	; select bank1
 19659  0900  086A               	movf	_DelayOff^(0+128),w
 19660  0901  0086               	movwf	6
 19661  0902  3001               	movlw	1	; select bank2/3
 19662  0903  0087               	movwf	7
 19663  0904  1C81               	btfss	1,1
 19664  0905  0008               	return
 19665                           
 19666                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 19667  0906  086A               	movf	_DelayOff^(0+128),w
 19668  0907  3E02               	addlw	2
 19669  0908  0086               	movwf	6
 19670  0909  3001               	movlw	1	; select bank2/3
 19671  090A  0087               	movwf	7
 19672  090B  3001               	movlw	1
 19673  090C  0781               	addwf	1,f
 19674  090D  3141               	addfsr 1,1
 19675  090E  1803               	skipnc
 19676  090F  0A81               	incf	1,f
 19677                           
 19678                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= (60000-10000)/20) {
 19679  0910  086A               	movf	_DelayOff^(0+128),w
 19680  0911  3E02               	addlw	2
 19681  0912  0086               	movwf	6
 19682  0913  3001               	movlw	1	; select bank2/3
 19683  0914  0087               	movwf	7
 19684  0915  3F40               	moviw [0]fsr1
 19685  0916  0020               	movlb	0	; select bank0
 19686  0917  00DD               	movwf	??_DlyOff_Main
 19687  0918  3F41               	moviw [1]fsr1
 19688  0919  00DE               	movwf	??_DlyOff_Main+1
 19689  091A  3009               	movlw	9
 19690  091B  025E               	subwf	??_DlyOff_Main+1,w
 19691  091C  30C4               	movlw	196
 19692  091D  1903               	skipnz
 19693  091E  025D               	subwf	??_DlyOff_Main,w
 19694  091F  1C03               	skipc
 19695  0920  0008               	return
 19696                           
 19697                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 19698  0921  0021               	movlb	1	; select bank1
 19699  0922  086A               	movf	_DelayOff^(0+128),w
 19700  0923  3E02               	addlw	2
 19701  0924  0086               	movwf	6
 19702  0925  3001               	movlw	1	; select bank2/3
 19703  0926  0087               	movwf	7
 19704  0927  3000               	movlw	0
 19705  0928  3FC0               	movwi [0]fsr1
 19706  0929  3FC1               	movwi [1]fsr1
 19707                           
 19708                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 19709  092A  3001               	movlw	1
 19710  092B  0020               	movlb	0	; select bank0
 19711  092C  00DD               	movwf	??_DlyOff_Main
 19712  092D  0021               	movlb	1	; select bank1
 19713  092E  086A               	movf	_DelayOff^(0+128),w
 19714  092F  3E04               	addlw	4
 19715  0930  0086               	movwf	6
 19716  0931  3001               	movlw	1	; select bank2/3
 19717  0932  0087               	movwf	7
 19718  0933  0020               	movlb	0	; select bank0
 19719  0934  085D               	movf	??_DlyOff_Main,w
 19720  0935  0781               	addwf	1,f
 19721                           
 19722                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 19723  0936  0021               	movlb	1	; select bank1
 19724  0937  086A               	movf	_DelayOff^(0+128),w
 19725  0938  3E04               	addlw	4
 19726  0939  0086               	movwf	6
 19727  093A  3001               	movlw	1	; select bank2/3
 19728  093B  0087               	movwf	7
 19729  093C  0A6A               	incf	_DelayOff^(0+128),w
 19730  093D  0084               	movwf	4
 19731  093E  3001               	movlw	1	; select bank2/3
 19732  093F  0085               	movwf	5
 19733  0940  0800               	movf	0,w
 19734  0941  0201               	subwf	1,w
 19735  0942  1C03               	skipc
 19736  0943  0008               	return
 19737                           
 19738                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 19739  0944  086A               	movf	_DelayOff^(0+128),w
 19740  0945  3E04               	addlw	4
 19741  0946  0086               	movwf	6
 19742  0947  3001               	movlw	1	; select bank2/3
 19743  0948  0087               	movwf	7
 19744  0949  0181               	clrf	1
 19745                           
 19746                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 19747  094A  086A               	movf	_DelayOff^(0+128),w
 19748  094B  0086               	movwf	6
 19749  094C  3001               	movlw	1	; select bank2/3
 19750  094D  0087               	movwf	7
 19751  094E  1081               	bcf	1,1
 19752                           
 19753                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 19754  094F  0020               	movlb	0	; select bank0
 19755  0950  085F               	movf	DlyOff_Main@sw,w
 19756  0951  3198  20EC  3188   	fcall	_getDimmerLights_Status
 19757  0954  3A01               	xorlw	1
 19758  0955  1D03               	skipz
 19759  0956  2961               	goto	l589
 19760                           
 19761                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 19762  0957  0020               	movlb	0	; select bank0
 19763  0958  085F               	movf	DlyOff_Main@sw,w
 19764  0959  3187  2784  3188   	fcall	_setDimmerLights_SwOn
 19765                           
 19766                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 19767  095C  0020               	movlb	0	; select bank0
 19768  095D  085F               	movf	DlyOff_Main@sw,w
 19769  095E  3191  2122  3188   	fcall	_setDimmerLights_SwOff
 19770  0961                     l589:	
 19771                           
 19772                           ;DelayOff_B1.c: 78: }
 19773                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 19774  0961  0020               	movlb	0	; select bank0
 19775  0962  01DA               	clrf	setProductData@value
 19776  0963  085F               	movf	DlyOff_Main@sw,w
 19777  0964  3E1A               	addlw	26
 19778  0965  3198  20A2         	fcall	_setProductData
 19779  0967  0008               	return
 19780  0968                     __end_of_DlyOff_Main:	
 19781                           
 19782                           	psect	text136
 19783  18A2                     __ptext136:	
 19784 ;; *************** function _setProductData *****************
 19785 ;; Defined at:
 19786 ;;		line 650 in file "../src/main_B1.c"
 19787 ;; Parameters:    Size  Location     Type
 19788 ;;  address         1    wreg     unsigned char 
 19789 ;;  value           1   58[BANK0 ] unsigned char 
 19790 ;; Auto vars:     Size  Location     Type
 19791 ;;  address         1   60[BANK0 ] unsigned char 
 19792 ;; Return value:  Size  Location     Type
 19793 ;;		None               void
 19794 ;; Registers used:
 19795 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19796 ;; Tracked objects:
 19797 ;;		On entry : 0/0
 19798 ;;		On exit  : 0/0
 19799 ;;		Unchanged: 0/0
 19800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19801 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19803 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19804 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19805 ;;Total ram usage:        3 bytes
 19806 ;; Hardware stack levels used:    1
 19807 ;; Hardware stack levels required when called:    3
 19808 ;; This function calls:
 19809 ;;		Nothing
 19810 ;; This function is called by:
 19811 ;;		_DlyOff_Main
 19812 ;;		_setDelayOff_GO
 19813 ;;		_setDimmerLights_OnOff
 19814 ;;		_setDimmerLights_Dimming
 19815 ;;		_setTemp_Main
 19816 ;;		_setLog_Code
 19817 ;;		_setControl_Lights_Table
 19818 ;;		_setRFSW_AdjControl
 19819 ;;		_setRF_DimmerLights
 19820 ;; This function uses a non-reentrant model
 19821 ;;
 19822                           
 19823                           
 19824                           ;psect for function _setProductData
 19825  18A2                     _setProductData:	
 19826                           
 19827                           ;incstack = 0
 19828                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 19829                           ;setProductData@address stored from wreg
 19830  18A2  0020               	movlb	0	; select bank0
 19831  18A3  00DC               	movwf	setProductData@address
 19832                           
 19833                           ;main_B1.c: 651: _product.Data[address] = value;
 19834  18A4  085A               	movf	setProductData@value,w
 19835  18A5  00DB               	movwf	??_setProductData
 19836  18A6  085C               	movf	setProductData@address,w
 19837  18A7  3EA0               	addlw	__product& (0+255)
 19838  18A8  0086               	movwf	6
 19839  18A9  3002               	movlw	2	; select bank5/6
 19840  18AA  0087               	movwf	7
 19841  18AB  085B               	movf	??_setProductData,w
 19842  18AC  0081               	movwf	1
 19843  18AD  0008               	return
 19844  18AE                     __end_of_setProductData:	
 19845                           
 19846                           	psect	text137
 19847  0784                     __ptext137:	
 19848 ;; *************** function _setDimmerLights_SwOn *****************
 19849 ;; Defined at:
 19850 ;;		line 759 in file "../src/Dimmer_B1.c"
 19851 ;; Parameters:    Size  Location     Type
 19852 ;;  sw              1    wreg     unsigned char 
 19853 ;; Auto vars:     Size  Location     Type
 19854 ;;  sw              1   10[BANK0 ] unsigned char 
 19855 ;;  idle            1    9[BANK0 ] unsigned char 
 19856 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
 19857 ;; Return value:  Size  Location     Type
 19858 ;;		None               void
 19859 ;; Registers used:
 19860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19861 ;; Tracked objects:
 19862 ;;		On entry : 0/0
 19863 ;;		On exit  : 0/0
 19864 ;;		Unchanged: 0/0
 19865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19867 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19868 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19869 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19870 ;;Total ram usage:        6 bytes
 19871 ;; Hardware stack levels used:    1
 19872 ;; Hardware stack levels required when called:    5
 19873 ;; This function calls:
 19874 ;;		_DimmerLights_SelectPointer
 19875 ;;		_getDimmerIntr_Dimming_Sw
 19876 ;;		_setBuz
 19877 ;; This function is called by:
 19878 ;;		_DlyOff_Main
 19879 ;;		_setControl_Lights_Table
 19880 ;;		_setRFSW_Control
 19881 ;;		_setRFSW_AdjControl
 19882 ;;		_setSw_Main
 19883 ;; This function uses a non-reentrant model
 19884 ;;
 19885                           
 19886                           
 19887                           ;psect for function _setDimmerLights_SwOn
 19888  0784                     _setDimmerLights_SwOn:	
 19889                           
 19890                           ;incstack = 0
 19891                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19892                           ;setDimmerLights_SwOn@sw stored from wreg
 19893  0784  0020               	movlb	0	; select bank0
 19894  0785  00AA               	movwf	setDimmerLights_SwOn@sw
 19895                           
 19896                           ;Dimmer_B1.c: 760: char idle = 0;
 19897  0786  01A9               	clrf	setDimmerLights_SwOn@idle
 19898                           
 19899                           ;Dimmer_B1.c: 762: char dimmingStatus = 0;
 19900  0787  01A6               	clrf	setDimmerLights_SwOn@dimmingStatus
 19901                           
 19902                           ;Dimmer_B1.c: 763: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 19903  0788  082A               	movf	setDimmerLights_SwOn@sw,w
 19904  0789  319A  22DF  3187   	fcall	_getDimmerIntr_Dimming_Sw
 19905  078C  00F9               	movwf	??_setDimmerLights_SwOn
 19906  078D  0879               	movf	??_setDimmerLights_SwOn,w
 19907  078E  0020               	movlb	0	; select bank0
 19908  078F  00A6               	movwf	setDimmerLights_SwOn@dimmingStatus
 19909                           
 19910                           ;Dimmer_B1.c: 767: if (idle == 0) {
 19911  0790  08A9               	movf	setDimmerLights_SwOn@idle,f
 19912  0791  1D03               	skipz
 19913  0792  2FB7               	goto	l9841
 19914                           
 19915                           ;Dimmer_B1.c: 768: if (sw == 1) {
 19916  0793  082A               	movf	setDimmerLights_SwOn@sw,w
 19917  0794  3A01               	xorlw	1
 19918  0795  1D03               	skipz
 19919  0796  2FA4               	goto	l9831
 19920                           
 19921                           ;Dimmer_B1.c: 769: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19922  0797  01A7               	clrf	_setDimmerLights_SwOn$2659
 19923  0798  0AA7               	incf	_setDimmerLights_SwOn$2659,f
 19924  0799  0023               	movlb	3	; select bank3
 19925  079A  1A47               	btfsc	_DimmerLights2^(0+384),4
 19926  079B  2FA1               	goto	l9829
 19927  079C  0021               	movlb	1	; select bank1
 19928  079D  1A30               	btfsc	_DimmerIntr2^(0+128),4
 19929  079E  2FA1               	goto	l9829
 19930  079F  0020               	movlb	0	; select bank0
 19931  07A0  01A7               	clrf	_setDimmerLights_SwOn$2659
 19932  07A1                     l9829:	
 19933  07A1  0020               	movlb	0	; select bank0
 19934  07A2  0827               	movf	_setDimmerLights_SwOn$2659,w
 19935  07A3  2FB4               	goto	L15
 19936  07A4                     l9831:	
 19937                           ;Dimmer_B1.c: 770: } else if (sw == 2) {
 19938                           
 19939  07A4  082A               	movf	setDimmerLights_SwOn@sw,w
 19940  07A5  3A02               	xorlw	2
 19941  07A6  1D03               	skipz
 19942  07A7  2FB7               	goto	l9841
 19943                           
 19944                           ;Dimmer_B1.c: 771: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19945  07A8  01A8               	clrf	_setDimmerLights_SwOn$2668
 19946  07A9  0AA8               	incf	_setDimmerLights_SwOn$2668,f
 19947  07AA  0023               	movlb	3	; select bank3
 19948  07AB  1A3E               	btfsc	_DimmerLights1^(0+384),4
 19949  07AC  2FB2               	goto	l9839
 19950  07AD  0021               	movlb	1	; select bank1
 19951  07AE  1A20               	btfsc	_DimmerIntr1^(0+128),4
 19952  07AF  2FB2               	goto	l9839
 19953  07B0  0020               	movlb	0	; select bank0
 19954  07B1  01A8               	clrf	_setDimmerLights_SwOn$2668
 19955  07B2                     l9839:	
 19956  07B2  0020               	movlb	0	; select bank0
 19957  07B3  0828               	movf	_setDimmerLights_SwOn$2668,w
 19958  07B4                     L15:	
 19959  07B4  00F9               	movwf	??_setDimmerLights_SwOn
 19960  07B5  0879               	movf	??_setDimmerLights_SwOn,w
 19961  07B6  00A9               	movwf	setDimmerLights_SwOn@idle
 19962  07B7                     l9841:	
 19963                           
 19964                           ;Dimmer_B1.c: 772: }
 19965                           ;Dimmer_B1.c: 773: }
 19966                           ;Dimmer_B1.c: 790: DimmerLights_SelectPointer(sw);
 19967  07B7  082A               	movf	setDimmerLights_SwOn@sw,w
 19968  07B8  319A  2237  3187   	fcall	_DimmerLights_SelectPointer
 19969                           
 19970                           ;Dimmer_B1.c: 791: if (idle == 0) {
 19971  07BB  0020               	movlb	0	; select bank0
 19972  07BC  08A9               	movf	setDimmerLights_SwOn@idle,f
 19973  07BD  1D03               	skipz
 19974  07BE  0008               	return
 19975                           
 19976                           ;Dimmer_B1.c: 793: if (dimmingStatus == 0) {
 19977  07BF  08A6               	movf	setDimmerLights_SwOn@dimmingStatus,f
 19978  07C0  1D03               	skipz
 19979  07C1  2FE5               	goto	l9853
 19980                           
 19981                           ;Dimmer_B1.c: 794: DimmerLights->SwFlag = 1;
 19982  07C2  086C               	movf	_DimmerLights,w
 19983  07C3  0086               	movwf	6
 19984  07C4  3001               	movlw	1	; select bank2/3
 19985  07C5  0087               	movwf	7
 19986  07C6  1401               	bsf	1,0
 19987                           
 19988                           ;Dimmer_B1.c: 795: if (DimmerLights->Status == 0) {
 19989  07C7  0A6C               	incf	_DimmerLights,w
 19990  07C8  0086               	movwf	6
 19991  07C9  3001               	movlw	1	; select bank2/3
 19992  07CA  0087               	movwf	7
 19993  07CB  1801               	btfsc	1,0
 19994  07CC  2FDF               	goto	l9851
 19995                           
 19996                           ;Dimmer_B1.c: 796: DimmerLights->Status = 1;
 19997  07CD  0A6C               	incf	_DimmerLights,w
 19998  07CE  0086               	movwf	6
 19999  07CF  3001               	movlw	1	; select bank2/3
 20000  07D0  0087               	movwf	7
 20001  07D1  1401               	bsf	1,0
 20002                           
 20003                           ;Dimmer_B1.c: 802: DimmerLights->Phase = 1;
 20004  07D2  086C               	movf	_DimmerLights,w
 20005  07D3  3E02               	addlw	2
 20006  07D4  0086               	movwf	6
 20007  07D5  3001               	movlw	1	; select bank2/3
 20008  07D6  0087               	movwf	7
 20009  07D7  1401               	bsf	1,0
 20010                           
 20011                           ;Dimmer_B1.c: 803: DimmerLights->PhaseSwitch = 1;
 20012  07D8  086C               	movf	_DimmerLights,w
 20013  07D9  3E02               	addlw	2
 20014  07DA  0086               	movwf	6
 20015  07DB  3001               	movlw	1	; select bank2/3
 20016  07DC  0087               	movwf	7
 20017  07DD  1501               	bsf	1,2
 20018                           
 20019                           ;Dimmer_B1.c: 807: } else {
 20020  07DE  2FEF               	goto	l9855
 20021  07DF                     l9851:	
 20022                           
 20023                           ;Dimmer_B1.c: 808: DimmerLights->Status = 0;
 20024  07DF  0A6C               	incf	_DimmerLights,w
 20025  07E0  0086               	movwf	6
 20026  07E1  3001               	movlw	1	; select bank2/3
 20027  07E2  0087               	movwf	7
 20028  07E3  1001               	bcf	1,0
 20029                           
 20030                           ;Dimmer_B1.c: 809: }
 20031                           ;Dimmer_B1.c: 810: } else {
 20032  07E4  2FEF               	goto	l9855
 20033  07E5                     l9853:	
 20034                           
 20035                           ;Dimmer_B1.c: 811: DimmerLights->DimmingTrigger = 1;
 20036  07E5  086C               	movf	_DimmerLights,w
 20037  07E6  0086               	movwf	6
 20038  07E7  3001               	movlw	1	; select bank2/3
 20039  07E8  0087               	movwf	7
 20040  07E9  1601               	bsf	1,4
 20041                           
 20042                           ;Dimmer_B1.c: 812: DimmerLights->DimmingSwitch = 0;
 20043  07EA  086C               	movf	_DimmerLights,w
 20044  07EB  0086               	movwf	6
 20045  07EC  3001               	movlw	1	; select bank2/3
 20046  07ED  0087               	movwf	7
 20047  07EE  1281               	bcf	1,5
 20048  07EF                     l9855:	
 20049                           
 20050                           ;Dimmer_B1.c: 813: }
 20051                           ;Dimmer_B1.c: 814: setBuz(1, 100);
 20052  07EF  3064               	movlw	100
 20053  07F0  00A4               	movwf	setBuz@time
 20054  07F1  3000               	movlw	0
 20055  07F2  00A5               	movwf	setBuz@time+1
 20056  07F3  3001               	movlw	1
 20057  07F4  3192  22EC         	fcall	_setBuz
 20058  07F6  0008               	return
 20059  07F7                     __end_of_setDimmerLights_SwOn:	
 20060                           
 20061                           	psect	text138
 20062  12EC                     __ptext138:	
 20063 ;; *************** function _setBuz *****************
 20064 ;; Defined at:
 20065 ;;		line 22 in file "../src/Buzzer_B1.c"
 20066 ;; Parameters:    Size  Location     Type
 20067 ;;  count           1    wreg     unsigned char 
 20068 ;;  time            2    4[BANK0 ] int 
 20069 ;; Auto vars:     Size  Location     Type
 20070 ;;  count           1    8[COMMON] unsigned char 
 20071 ;; Return value:  Size  Location     Type
 20072 ;;		None               void
 20073 ;; Registers used:
 20074 ;;		wreg, status,2, status,0, pclath, cstack
 20075 ;; Tracked objects:
 20076 ;;		On entry : 0/0
 20077 ;;		On exit  : 0/0
 20078 ;;		Unchanged: 0/0
 20079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20080 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20081 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20083 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20084 ;;Total ram usage:        4 bytes
 20085 ;; Hardware stack levels used:    1
 20086 ;; Hardware stack levels required when called:    4
 20087 ;; This function calls:
 20088 ;;		___awdiv
 20089 ;; This function is called by:
 20090 ;;		_setDimmerLights_SwOn
 20091 ;;		_setDimmerLights_Dimming
 20092 ;;		_setTemp_Main
 20093 ;;		_setLog_Code
 20094 ;;		_setRFSW_Control
 20095 ;;		_setRFSW_AdjControl
 20096 ;;		_setSw_Main
 20097 ;;		_my_MainTimer
 20098 ;;		_Exception_Main
 20099 ;; This function uses a non-reentrant model
 20100 ;;
 20101                           
 20102                           
 20103                           ;psect for function _setBuz
 20104  12EC                     _setBuz:	
 20105                           
 20106                           ;incstack = 0
 20107                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 20108                           ;setBuz@count stored from wreg
 20109  12EC  00F8               	movwf	setBuz@count
 20110                           
 20111                           ;Buzzer_B1.c: 23: time /= 20;
 20112  12ED  3014               	movlw	20
 20113  12EE  00F2               	movwf	___awdiv@divisor
 20114  12EF  3000               	movlw	0
 20115  12F0  00F3               	movwf	___awdiv@divisor+1
 20116  12F1  0020               	movlb	0	; select bank0
 20117  12F2  0825               	movf	setBuz@time+1,w
 20118  12F3  01F5               	clrf	___awdiv@dividend+1
 20119  12F4  07F5               	addwf	___awdiv@dividend+1,f
 20120  12F5  0824               	movf	setBuz@time,w
 20121  12F6  01F4               	clrf	___awdiv@dividend
 20122  12F7  07F4               	addwf	___awdiv@dividend,f
 20123  12F8  3193  233F  3192   	fcall	___awdiv
 20124  12FB  0873               	movf	?___awdiv+1,w
 20125  12FC  0020               	movlb	0	; select bank0
 20126  12FD  01A5               	clrf	setBuz@time+1
 20127  12FE  07A5               	addwf	setBuz@time+1,f
 20128  12FF  0872               	movf	?___awdiv,w
 20129  1300  01A4               	clrf	setBuz@time
 20130  1301  07A4               	addwf	setBuz@time,f
 20131                           
 20132                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 20133  1302  0021               	movlb	1	; select bank1
 20134  1303  1C5C               	btfss	_Buz1^(0+128),0
 20135  1304  0008               	return
 20136                           
 20137                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 20138  1305  18DC               	btfsc	_Buz1^(0+128),1
 20139  1306  2B1B               	goto	l100
 20140                           
 20141                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 20142  1307  14DC               	bsf	_Buz1^(0+128),1
 20143                           
 20144                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 20145  1308  01DD               	clrf	(_Buz1^(0+128)+1)
 20146  1309  01DE               	clrf	((_Buz1+1)^(0+128)+1)
 20147                           
 20148                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 20149  130A  0878               	movf	setBuz@count,w
 20150  130B  00F7               	movwf	??_setBuz
 20151  130C  0877               	movf	??_setBuz,w
 20152  130D  00DF               	movwf	(_Buz1^(0+128)+3)
 20153                           
 20154                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 20155  130E  0020               	movlb	0	; select bank0
 20156  130F  0825               	movf	setBuz@time+1,w
 20157  1310  0021               	movlb	1	; select bank1
 20158  1311  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 20159  1312  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 20160  1313  0020               	movlb	0	; select bank0
 20161  1314  0824               	movf	setBuz@time,w
 20162  1315  0021               	movlb	1	; select bank1
 20163  1316  01E2               	clrf	(_Buz1^(0+128)+6)
 20164  1317  07E2               	addwf	(_Buz1^(0+128)+6),f
 20165                           
 20166                           ;Buzzer_B1.c: 30: RB3 = 1;
 20167  1318  0020               	movlb	0	; select bank0
 20168  1319  158D               	bsf	13,3	;volatile
 20169                           
 20170                           ;Buzzer_B1.c: 31: } else {
 20171  131A  0008               	return
 20172  131B                     l100:	
 20173                           
 20174                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 20175  131B  19DC               	btfsc	_Buz1^(0+128),3
 20176  131C  2B2D               	goto	l102
 20177                           
 20178                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 20179  131D  15DC               	bsf	_Buz1^(0+128),3
 20180                           
 20181                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 20182  131E  0878               	movf	setBuz@count,w
 20183  131F  00F7               	movwf	??_setBuz
 20184  1320  0877               	movf	??_setBuz,w
 20185  1321  00E0               	movwf	(_Buz1^(0+128)+4)
 20186                           
 20187                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 20188  1322  0020               	movlb	0	; select bank0
 20189  1323  0825               	movf	setBuz@time+1,w
 20190  1324  0021               	movlb	1	; select bank1
 20191  1325  01E5               	clrf	((_Buz1+1)^(0+128)+8)
 20192  1326  07E5               	addwf	((_Buz1+1)^(0+128)+8),f
 20193  1327  0020               	movlb	0	; select bank0
 20194  1328  0824               	movf	setBuz@time,w
 20195  1329  0021               	movlb	1	; select bank1
 20196  132A  01E4               	clrf	(_Buz1^(0+128)+8)
 20197  132B  07E4               	addwf	(_Buz1^(0+128)+8),f
 20198                           
 20199                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 20200  132C  0008               	return
 20201  132D                     l102:	
 20202  132D  1A5C               	btfsc	_Buz1^(0+128),4
 20203  132E  0008               	return
 20204                           
 20205                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 20206  132F  165C               	bsf	_Buz1^(0+128),4
 20207                           
 20208                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 20209  1330  0878               	movf	setBuz@count,w
 20210  1331  00F7               	movwf	??_setBuz
 20211  1332  0877               	movf	??_setBuz,w
 20212  1333  00E1               	movwf	(_Buz1^(0+128)+5)
 20213                           
 20214                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 20215  1334  0020               	movlb	0	; select bank0
 20216  1335  0825               	movf	setBuz@time+1,w
 20217  1336  0021               	movlb	1	; select bank1
 20218  1337  01E7               	clrf	((_Buz1+1)^(0+128)+10)
 20219  1338  07E7               	addwf	((_Buz1+1)^(0+128)+10),f
 20220  1339  0020               	movlb	0	; select bank0
 20221  133A  0824               	movf	setBuz@time,w
 20222  133B  0021               	movlb	1	; select bank1
 20223  133C  01E6               	clrf	(_Buz1^(0+128)+10)
 20224  133D  07E6               	addwf	(_Buz1^(0+128)+10),f
 20225  133E  0008               	return
 20226  133F                     __end_of_setBuz:	
 20227                           
 20228                           	psect	text139
 20229  133F                     __ptext139:	
 20230 ;; *************** function ___awdiv *****************
 20231 ;; Defined at:
 20232 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 20233 ;; Parameters:    Size  Location     Type
 20234 ;;  divisor         2    2[COMMON] int 
 20235 ;;  dividend        2    4[COMMON] int 
 20236 ;; Auto vars:     Size  Location     Type
 20237 ;;  quotient        2    2[BANK0 ] int 
 20238 ;;  sign            1    1[BANK0 ] unsigned char 
 20239 ;;  counter         1    0[BANK0 ] unsigned char 
 20240 ;; Return value:  Size  Location     Type
 20241 ;;                  2    2[COMMON] int 
 20242 ;; Registers used:
 20243 ;;		wreg, status,2, status,0
 20244 ;; Tracked objects:
 20245 ;;		On entry : 0/0
 20246 ;;		On exit  : 0/0
 20247 ;;		Unchanged: 0/0
 20248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20249 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20250 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20251 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20252 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20253 ;;Total ram usage:        9 bytes
 20254 ;; Hardware stack levels used:    1
 20255 ;; Hardware stack levels required when called:    3
 20256 ;; This function calls:
 20257 ;;		Nothing
 20258 ;; This function is called by:
 20259 ;;		_setBuz
 20260 ;; This function uses a non-reentrant model
 20261 ;;
 20262                           
 20263                           
 20264                           ;psect for function ___awdiv
 20265  133F                     ___awdiv:	
 20266                           
 20267                           ;incstack = 0
 20268                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20269  133F  0020               	movlb	0	; select bank0
 20270  1340  01A1               	clrf	___awdiv@sign
 20271  1341  1FF3               	btfss	___awdiv@divisor+1,7
 20272  1342  2B4A               	goto	l9713
 20273  1343  09F2               	comf	___awdiv@divisor,f
 20274  1344  09F3               	comf	___awdiv@divisor+1,f
 20275  1345  0AF2               	incf	___awdiv@divisor,f
 20276  1346  1903               	skipnz
 20277  1347  0AF3               	incf	___awdiv@divisor+1,f
 20278  1348  01A1               	clrf	___awdiv@sign
 20279  1349  0AA1               	incf	___awdiv@sign,f
 20280  134A                     l9713:	
 20281  134A  1FF5               	btfss	___awdiv@dividend+1,7
 20282  134B  2B55               	goto	l9719
 20283  134C  09F4               	comf	___awdiv@dividend,f
 20284  134D  09F5               	comf	___awdiv@dividend+1,f
 20285  134E  0AF4               	incf	___awdiv@dividend,f
 20286  134F  1903               	skipnz
 20287  1350  0AF5               	incf	___awdiv@dividend+1,f
 20288  1351  3001               	movlw	1
 20289  1352  00F6               	movwf	??___awdiv
 20290  1353  0876               	movf	??___awdiv,w
 20291  1354  06A1               	xorwf	___awdiv@sign,f
 20292  1355                     l9719:	
 20293  1355  01A2               	clrf	___awdiv@quotient
 20294  1356  01A3               	clrf	___awdiv@quotient+1
 20295  1357  0873               	movf	___awdiv@divisor+1,w
 20296  1358  0472               	iorwf	___awdiv@divisor,w
 20297  1359  1903               	skipnz
 20298  135A  2B84               	goto	l9741
 20299  135B  01A0               	clrf	___awdiv@counter
 20300  135C  0AA0               	incf	___awdiv@counter,f
 20301  135D                     l9729:	
 20302  135D  1BF3               	btfsc	___awdiv@divisor+1,7
 20303  135E  2B69               	goto	l9731
 20304  135F  3001               	movlw	1
 20305  1360                     u10585:	
 20306  1360  35F2               	lslf	___awdiv@divisor,f
 20307  1361  0DF3               	rlf	___awdiv@divisor+1,f
 20308  1362  0B89               	decfsz	9,f
 20309  1363  2B60               	goto	u10585
 20310  1364  3001               	movlw	1
 20311  1365  00F6               	movwf	??___awdiv
 20312  1366  0876               	movf	??___awdiv,w
 20313  1367  07A0               	addwf	___awdiv@counter,f
 20314  1368  2B5D               	goto	l9729
 20315  1369                     l9731:	
 20316  1369  3001               	movlw	1
 20317  136A                     u10605:	
 20318  136A  35A2               	lslf	___awdiv@quotient,f
 20319  136B  0DA3               	rlf	___awdiv@quotient+1,f
 20320  136C  0B89               	decfsz	9,f
 20321  136D  2B6A               	goto	u10605
 20322  136E  0873               	movf	___awdiv@divisor+1,w
 20323  136F  0275               	subwf	___awdiv@dividend+1,w
 20324  1370  1D03               	skipz
 20325  1371  2B74               	goto	u10615
 20326  1372  0872               	movf	___awdiv@divisor,w
 20327  1373  0274               	subwf	___awdiv@dividend,w
 20328  1374                     u10615:	
 20329  1374  1C03               	skipc
 20330  1375  2B7B               	goto	l9737
 20331  1376  0872               	movf	___awdiv@divisor,w
 20332  1377  02F4               	subwf	___awdiv@dividend,f
 20333  1378  0873               	movf	___awdiv@divisor+1,w
 20334  1379  3BF5               	subwfb	___awdiv@dividend+1,f
 20335  137A  1422               	bsf	___awdiv@quotient,0
 20336  137B                     l9737:	
 20337  137B  3001               	movlw	1
 20338  137C                     u10625:	
 20339  137C  36F3               	lsrf	___awdiv@divisor+1,f
 20340  137D  0CF2               	rrf	___awdiv@divisor,f
 20341  137E  0B89               	decfsz	9,f
 20342  137F  2B7C               	goto	u10625
 20343  1380  3001               	movlw	1
 20344  1381  02A0               	subwf	___awdiv@counter,f
 20345  1382  1D03               	btfss	3,2
 20346  1383  2B69               	goto	l9731
 20347  1384                     l9741:	
 20348  1384  0821               	movf	___awdiv@sign,w
 20349  1385  1903               	btfsc	3,2
 20350  1386  2B8C               	goto	l9745
 20351  1387  09A2               	comf	___awdiv@quotient,f
 20352  1388  09A3               	comf	___awdiv@quotient+1,f
 20353  1389  0AA2               	incf	___awdiv@quotient,f
 20354  138A  1903               	skipnz
 20355  138B  0AA3               	incf	___awdiv@quotient+1,f
 20356  138C                     l9745:	
 20357  138C  0823               	movf	___awdiv@quotient+1,w
 20358  138D  01F3               	clrf	?___awdiv+1
 20359  138E  07F3               	addwf	?___awdiv+1,f
 20360  138F  0822               	movf	___awdiv@quotient,w
 20361  1390  01F2               	clrf	?___awdiv
 20362  1391  07F2               	addwf	?___awdiv,f
 20363  1392  0008               	return
 20364  1393                     __end_of___awdiv:	
 20365                           
 20366                           	psect	text140
 20367  1ADF                     __ptext140:	
 20368 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 20369 ;; Defined at:
 20370 ;;		line 269 in file "../src/Dimmer_B1.c"
 20371 ;; Parameters:    Size  Location     Type
 20372 ;;  lights          1    wreg     unsigned char 
 20373 ;; Auto vars:     Size  Location     Type
 20374 ;;  lights          1    3[COMMON] unsigned char 
 20375 ;;  status          1    2[COMMON] unsigned char 
 20376 ;; Return value:  Size  Location     Type
 20377 ;;                  1    wreg      unsigned char 
 20378 ;; Registers used:
 20379 ;;		wreg, status,2
 20380 ;; Tracked objects:
 20381 ;;		On entry : 0/0
 20382 ;;		On exit  : 0/0
 20383 ;;		Unchanged: 0/0
 20384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20389 ;;Total ram usage:        2 bytes
 20390 ;; Hardware stack levels used:    1
 20391 ;; Hardware stack levels required when called:    3
 20392 ;; This function calls:
 20393 ;;		Nothing
 20394 ;; This function is called by:
 20395 ;;		_setDimmerLights_SwOn
 20396 ;;		_setRF_AdjControl
 20397 ;; This function uses a non-reentrant model
 20398 ;;
 20399                           
 20400                           
 20401                           ;psect for function _getDimmerIntr_Dimming_Sw
 20402  1ADF                     _getDimmerIntr_Dimming_Sw:	
 20403                           
 20404                           ;incstack = 0
 20405                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 20406                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 20407  1ADF  00F3               	movwf	getDimmerIntr_Dimming_Sw@lights
 20408                           
 20409                           ;Dimmer_B1.c: 270: char status = 0;
 20410  1AE0  01F2               	clrf	getDimmerIntr_Dimming_Sw@status
 20411                           
 20412                           ;Dimmer_B1.c: 272: if (lights == 1) {
 20413  1AE1  0873               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20414  1AE2  3A01               	xorlw	1
 20415  1AE3  1D03               	skipz
 20416  1AE4  2AEA               	goto	l6735
 20417                           
 20418                           ;Dimmer_B1.c: 273: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 20419  1AE5  3000               	movlw	0
 20420  1AE6  0021               	movlb	1	; select bank1
 20421  1AE7  1A20               	btfsc	_DimmerIntr1^(0+128),4
 20422  1AE8  3001               	movlw	1
 20423  1AE9  00F2               	movwf	getDimmerIntr_Dimming_Sw@status
 20424  1AEA                     l6735:	
 20425                           
 20426                           ;Dimmer_B1.c: 274: }
 20427                           ;Dimmer_B1.c: 277: if (lights == 2) {
 20428  1AEA  0873               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20429  1AEB  3A02               	xorlw	2
 20430  1AEC  1D03               	skipz
 20431  1AED  2AF3               	goto	l6739
 20432                           
 20433                           ;Dimmer_B1.c: 278: status = DimmerIntr2.Dimming_Sw == 1 ? 1 : 0;
 20434  1AEE  3000               	movlw	0
 20435  1AEF  0021               	movlb	1	; select bank1
 20436  1AF0  1A30               	btfsc	_DimmerIntr2^(0+128),4
 20437  1AF1  3001               	movlw	1
 20438  1AF2  00F2               	movwf	getDimmerIntr_Dimming_Sw@status
 20439  1AF3                     l6739:	
 20440                           
 20441                           ;Dimmer_B1.c: 279: }
 20442                           ;Dimmer_B1.c: 287: return status;
 20443  1AF3  0872               	movf	getDimmerIntr_Dimming_Sw@status,w
 20444  1AF4  0008               	return
 20445  1AF5                     __end_of_getDimmerIntr_Dimming_Sw:	
 20446                           
 20447                           	psect	text141
 20448  1122                     __ptext141:	
 20449 ;; *************** function _setDimmerLights_SwOff *****************
 20450 ;; Defined at:
 20451 ;;		line 819 in file "../src/Dimmer_B1.c"
 20452 ;; Parameters:    Size  Location     Type
 20453 ;;  sw              1    wreg     unsigned char 
 20454 ;; Auto vars:     Size  Location     Type
 20455 ;;  sw              1    4[COMMON] unsigned char 
 20456 ;; Return value:  Size  Location     Type
 20457 ;;		None               void
 20458 ;; Registers used:
 20459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20460 ;; Tracked objects:
 20461 ;;		On entry : 0/0
 20462 ;;		On exit  : 0/0
 20463 ;;		Unchanged: 0/0
 20464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20468 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20469 ;;Total ram usage:        1 bytes
 20470 ;; Hardware stack levels used:    1
 20471 ;; Hardware stack levels required when called:    4
 20472 ;; This function calls:
 20473 ;;		_DimmerLights_SelectPointer
 20474 ;; This function is called by:
 20475 ;;		_DlyOff_Main
 20476 ;;		_setControl_Lights_Table
 20477 ;;		_setRFSW_Control
 20478 ;;		_setRFSW_AdjControl
 20479 ;;		_setSw_Main
 20480 ;;		_Exception_Main
 20481 ;; This function uses a non-reentrant model
 20482 ;;
 20483                           
 20484                           
 20485                           ;psect for function _setDimmerLights_SwOff
 20486  1122                     _setDimmerLights_SwOff:	
 20487                           
 20488                           ;incstack = 0
 20489                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 20490                           ;setDimmerLights_SwOff@sw stored from wreg
 20491  1122  00F4               	movwf	setDimmerLights_SwOff@sw
 20492                           
 20493                           ;Dimmer_B1.c: 821: DimmerLights_SelectPointer(sw);
 20494  1123  0874               	movf	setDimmerLights_SwOff@sw,w
 20495  1124  319A  2237  3191   	fcall	_DimmerLights_SelectPointer
 20496                           
 20497                           ;Dimmer_B1.c: 823: if (DimmerLights->SwFlag == 1) {
 20498  1127  0020               	movlb	0	; select bank0
 20499  1128  086C               	movf	_DimmerLights,w
 20500  1129  0086               	movwf	6
 20501  112A  3001               	movlw	1	; select bank2/3
 20502  112B  0087               	movwf	7
 20503  112C  1C01               	btfss	1,0
 20504  112D  0008               	return
 20505                           
 20506                           ;Dimmer_B1.c: 824: DimmerLights->SwFlag = 0;
 20507  112E  086C               	movf	_DimmerLights,w
 20508  112F  0086               	movwf	6
 20509  1130  3001               	movlw	1	; select bank2/3
 20510  1131  0087               	movwf	7
 20511  1132  1001               	bcf	1,0
 20512                           
 20513                           ;Dimmer_B1.c: 825: if (DimmerLights->Status == 1) {
 20514  1133  0A6C               	incf	_DimmerLights,w
 20515  1134  0086               	movwf	6
 20516  1135  3001               	movlw	1	; select bank2/3
 20517  1136  0087               	movwf	7
 20518  1137  1C01               	btfss	1,0
 20519  1138  294F               	goto	l7081
 20520                           
 20521                           ;Dimmer_B1.c: 826: if (DimmerLights->DimmingSwFlag == 1) {
 20522  1139  086C               	movf	_DimmerLights,w
 20523  113A  0086               	movwf	6
 20524  113B  3001               	movlw	1	; select bank2/3
 20525  113C  0087               	movwf	7
 20526  113D  1D81               	btfss	1,3
 20527  113E  0008               	return
 20528                           
 20529                           ;Dimmer_B1.c: 827: DimmerLights->DimmingSwFlag = 0;
 20530  113F  086C               	movf	_DimmerLights,w
 20531  1140  0086               	movwf	6
 20532  1141  3001               	movlw	1	; select bank2/3
 20533  1142  0087               	movwf	7
 20534  1143  1181               	bcf	1,3
 20535                           
 20536                           ;Dimmer_B1.c: 829: DimmerLights->DimmingTrigger = 1;
 20537  1144  086C               	movf	_DimmerLights,w
 20538  1145  0086               	movwf	6
 20539  1146  3001               	movlw	1	; select bank2/3
 20540  1147  0087               	movwf	7
 20541  1148  1601               	bsf	1,4
 20542                           
 20543                           ;Dimmer_B1.c: 830: DimmerLights->DimmingSwitch = 0;
 20544  1149  086C               	movf	_DimmerLights,w
 20545  114A  0086               	movwf	6
 20546  114B  3001               	movlw	1	; select bank2/3
 20547  114C  0087               	movwf	7
 20548  114D  1281               	bcf	1,5
 20549                           
 20550                           ;Dimmer_B1.c: 831: }
 20551                           ;Dimmer_B1.c: 832: } else {
 20552  114E  0008               	return
 20553  114F                     l7081:	
 20554                           
 20555                           ;Dimmer_B1.c: 838: DimmerLights->Phase = 1;
 20556  114F  086C               	movf	_DimmerLights,w
 20557  1150  3E02               	addlw	2
 20558  1151  0086               	movwf	6
 20559  1152  3001               	movlw	1	; select bank2/3
 20560  1153  0087               	movwf	7
 20561  1154  1401               	bsf	1,0
 20562                           
 20563                           ;Dimmer_B1.c: 839: DimmerLights->PhaseSwitch = 0;
 20564  1155  086C               	movf	_DimmerLights,w
 20565  1156  3E02               	addlw	2
 20566  1157  0086               	movwf	6
 20567  1158  3001               	movlw	1	; select bank2/3
 20568  1159  0087               	movwf	7
 20569  115A  1101               	bcf	1,2
 20570  115B  0008               	return
 20571  115C                     __end_of_setDimmerLights_SwOff:	
 20572                           
 20573                           	psect	text142
 20574  18EC                     __ptext142:	
 20575 ;; *************** function _getDimmerLights_Status *****************
 20576 ;; Defined at:
 20577 ;;		line 1266 in file "../src/Dimmer_B1.c"
 20578 ;; Parameters:    Size  Location     Type
 20579 ;;  lights          1    wreg     unsigned char 
 20580 ;; Auto vars:     Size  Location     Type
 20581 ;;  lights          1    4[COMMON] unsigned char 
 20582 ;;  status          1    5[COMMON] unsigned char 
 20583 ;; Return value:  Size  Location     Type
 20584 ;;                  1    wreg      unsigned char 
 20585 ;; Registers used:
 20586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20587 ;; Tracked objects:
 20588 ;;		On entry : 0/0
 20589 ;;		On exit  : 0/0
 20590 ;;		Unchanged: 0/0
 20591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20595 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20596 ;;Total ram usage:        2 bytes
 20597 ;; Hardware stack levels used:    1
 20598 ;; Hardware stack levels required when called:    4
 20599 ;; This function calls:
 20600 ;;		_DimmerLights_SelectPointer
 20601 ;; This function is called by:
 20602 ;;		_DlyOff_Main
 20603 ;;		_DimmerLights_AssignationDimming
 20604 ;;		_setControl_Lights_Table
 20605 ;;		_setRFSW_Control
 20606 ;;		_setRFSW_AdjControl
 20607 ;;		_setRF_AdjControl
 20608 ;;		_Exception_Main
 20609 ;; This function uses a non-reentrant model
 20610 ;;
 20611                           
 20612                           
 20613                           ;psect for function _getDimmerLights_Status
 20614  18EC                     _getDimmerLights_Status:	
 20615                           
 20616                           ;incstack = 0
 20617                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 20618                           ;getDimmerLights_Status@lights stored from wreg
 20619  18EC  00F4               	movwf	getDimmerLights_Status@lights
 20620                           
 20621                           ;Dimmer_B1.c: 1267: DimmerLights_SelectPointer(lights);
 20622  18ED  0874               	movf	getDimmerLights_Status@lights,w
 20623  18EE  319A  2237         	fcall	_DimmerLights_SelectPointer
 20624                           
 20625                           ;Dimmer_B1.c: 1268: char status = DimmerLights->Status == 1 ? 1 : 0;
 20626  18F0  0020               	movlb	0	; select bank0
 20627  18F1  0A6C               	incf	_DimmerLights,w
 20628  18F2  0086               	movwf	6
 20629  18F3  3001               	movlw	1	; select bank2/3
 20630  18F4  0087               	movwf	7
 20631  18F5  3000               	movlw	0
 20632  18F6  1801               	btfsc	1,0
 20633  18F7  3001               	movlw	1
 20634  18F8  00F5               	movwf	getDimmerLights_Status@status
 20635                           
 20636                           ;Dimmer_B1.c: 1269: return status;
 20637  18F9  0875               	movf	getDimmerLights_Status@status,w
 20638  18FA  0008               	return
 20639  18FB                     __end_of_getDimmerLights_Status:	
 20640                           
 20641                           	psect	text143
 20642  1A37                     __ptext143:	
 20643 ;; *************** function _DimmerLights_SelectPointer *****************
 20644 ;; Defined at:
 20645 ;;		line 682 in file "../src/Dimmer_B1.c"
 20646 ;; Parameters:    Size  Location     Type
 20647 ;;  lights          1    wreg     unsigned char 
 20648 ;; Auto vars:     Size  Location     Type
 20649 ;;  lights          1    3[COMMON] unsigned char 
 20650 ;; Return value:  Size  Location     Type
 20651 ;;		None               void
 20652 ;; Registers used:
 20653 ;;		wreg
 20654 ;; Tracked objects:
 20655 ;;		On entry : 0/0
 20656 ;;		On exit  : 0/0
 20657 ;;		Unchanged: 0/0
 20658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20661 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20662 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20663 ;;Total ram usage:        2 bytes
 20664 ;; Hardware stack levels used:    1
 20665 ;; Hardware stack levels required when called:    3
 20666 ;; This function calls:
 20667 ;;		Nothing
 20668 ;; This function is called by:
 20669 ;;		_setDimmerLights_SwOn
 20670 ;;		_setDimmerLights_SwOff
 20671 ;;		_setDimmerLights_DimmingOn
 20672 ;;		_setDimmerLights_Main
 20673 ;;		_DimmerLights_TwoPhase_Main
 20674 ;;		_getDimmerLights_Status
 20675 ;;		_setDimmerLights_DimmingRun
 20676 ;;		_setRF_AdjControl
 20677 ;;		_setDimmerLights_Status
 20678 ;; This function uses a non-reentrant model
 20679 ;;
 20680                           
 20681                           
 20682                           ;psect for function _DimmerLights_SelectPointer
 20683  1A37                     _DimmerLights_SelectPointer:	
 20684                           
 20685                           ;incstack = 0
 20686                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 20687                           ;DimmerLights_SelectPointer@lights stored from wreg
 20688  1A37  00F3               	movwf	DimmerLights_SelectPointer@lights
 20689                           
 20690                           ;Dimmer_B1.c: 684: if (lights == 1) {
 20691  1A38  0873               	movf	DimmerLights_SelectPointer@lights,w
 20692  1A39  3A01               	xorlw	1
 20693  1A3A  1D03               	skipz
 20694  1A3B  2A42               	goto	l6747
 20695                           
 20696                           ;Dimmer_B1.c: 685: DimmerLights = &DimmerLights1;
 20697  1A3C  30BE               	movlw	_DimmerLights1& (0+255)
 20698  1A3D  00F2               	movwf	??_DimmerLights_SelectPointer
 20699  1A3E  0872               	movf	??_DimmerLights_SelectPointer,w
 20700  1A3F  0020               	movlb	0	; select bank0
 20701  1A40  00EC               	movwf	_DimmerLights
 20702                           
 20703                           ;Dimmer_B1.c: 686: }
 20704  1A41  0008               	return
 20705  1A42                     l6747:	
 20706                           
 20707                           ;Dimmer_B1.c: 689: else if (lights == 2) {
 20708  1A42  0873               	movf	DimmerLights_SelectPointer@lights,w
 20709  1A43  3A02               	xorlw	2
 20710  1A44  1D03               	skipz
 20711  1A45  0008               	return
 20712                           
 20713                           ;Dimmer_B1.c: 690: DimmerLights = &DimmerLights2;
 20714  1A46  30C7               	movlw	_DimmerLights2& (0+255)
 20715  1A47  00F2               	movwf	??_DimmerLights_SelectPointer
 20716  1A48  0872               	movf	??_DimmerLights_SelectPointer,w
 20717  1A49  0020               	movlb	0	; select bank0
 20718  1A4A  00EC               	movwf	_DimmerLights
 20719  1A4B  0008               	return
 20720  1A4C                     __end_of_DimmerLights_SelectPointer:	
 20721                           
 20722                           	psect	text144
 20723  1818                     __ptext144:	
 20724 ;; *************** function _DelayOff_Initialization *****************
 20725 ;; Defined at:
 20726 ;;		line 26 in file "../src/DelayOff_B1.c"
 20727 ;; Parameters:    Size  Location     Type
 20728 ;;		None
 20729 ;; Auto vars:     Size  Location     Type
 20730 ;;		None
 20731 ;; Return value:  Size  Location     Type
 20732 ;;		None               void
 20733 ;; Registers used:
 20734 ;;		wreg, status,2, status,0, pclath, cstack
 20735 ;; Tracked objects:
 20736 ;;		On entry : 0/0
 20737 ;;		On exit  : 0/0
 20738 ;;		Unchanged: 0/0
 20739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20744 ;;Total ram usage:        0 bytes
 20745 ;; Hardware stack levels used:    1
 20746 ;; Hardware stack levels required when called:    5
 20747 ;; This function calls:
 20748 ;;		_DlyOff_Initialization
 20749 ;; This function is called by:
 20750 ;;		_main
 20751 ;; This function uses a non-reentrant model
 20752 ;;
 20753                           
 20754                           
 20755                           ;psect for function _DelayOff_Initialization
 20756  1818                     _DelayOff_Initialization:	
 20757                           
 20758                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 20759                           
 20760                           ;incstack = 0
 20761                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20762  1818  3001               	movlw	1
 20763  1819  31A7  27D5  3198   	fcall	_DlyOff_Initialization
 20764                           
 20765                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 20766  181C  3002               	movlw	2
 20767  181D  31A7  27D5         	fcall	_DlyOff_Initialization
 20768  181F  0008               	return
 20769  1820                     __end_of_DelayOff_Initialization:	
 20770                           
 20771                           	psect	text145
 20772  27D5                     __ptext145:	
 20773 ;; *************** function _DlyOff_Initialization *****************
 20774 ;; Defined at:
 20775 ;;		line 56 in file "../src/DelayOff_B1.c"
 20776 ;; Parameters:    Size  Location     Type
 20777 ;;  sw              1    wreg     unsigned char 
 20778 ;; Auto vars:     Size  Location     Type
 20779 ;;  sw              1    4[COMMON] unsigned char 
 20780 ;; Return value:  Size  Location     Type
 20781 ;;		None               void
 20782 ;; Registers used:
 20783 ;;		wreg, status,2, status,0, pclath, cstack
 20784 ;; Tracked objects:
 20785 ;;		On entry : 0/0
 20786 ;;		On exit  : 0/0
 20787 ;;		Unchanged: 0/0
 20788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20793 ;;Total ram usage:        1 bytes
 20794 ;; Hardware stack levels used:    1
 20795 ;; Hardware stack levels required when called:    4
 20796 ;; This function calls:
 20797 ;;		_DelayOffPointSelect
 20798 ;; This function is called by:
 20799 ;;		_DelayOff_Initialization
 20800 ;; This function uses a non-reentrant model
 20801 ;;
 20802                           
 20803                           
 20804                           ;psect for function _DlyOff_Initialization
 20805  27D5                     _DlyOff_Initialization:	
 20806                           
 20807                           ;incstack = 0
 20808                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20809                           ;DlyOff_Initialization@sw stored from wreg
 20810  27D5  00F4               	movwf	DlyOff_Initialization@sw
 20811                           
 20812                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 20813  27D6  0874               	movf	DlyOff_Initialization@sw,w
 20814  27D7  319A  2222         	fcall	_DelayOffPointSelect
 20815  27D9  0008               	return
 20816  27DA                     __end_of_DlyOff_Initialization:	
 20817                           
 20818                           	psect	text146
 20819  1A22                     __ptext146:	
 20820 ;; *************** function _DelayOffPointSelect *****************
 20821 ;; Defined at:
 20822 ;;		line 7 in file "../src/DelayOff_B1.c"
 20823 ;; Parameters:    Size  Location     Type
 20824 ;;  sw              1    wreg     unsigned char 
 20825 ;; Auto vars:     Size  Location     Type
 20826 ;;  sw              1    3[COMMON] unsigned char 
 20827 ;; Return value:  Size  Location     Type
 20828 ;;		None               void
 20829 ;; Registers used:
 20830 ;;		wreg
 20831 ;; Tracked objects:
 20832 ;;		On entry : 0/0
 20833 ;;		On exit  : 0/0
 20834 ;;		Unchanged: 0/0
 20835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20838 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20840 ;;Total ram usage:        2 bytes
 20841 ;; Hardware stack levels used:    1
 20842 ;; Hardware stack levels required when called:    3
 20843 ;; This function calls:
 20844 ;;		Nothing
 20845 ;; This function is called by:
 20846 ;;		_DlyOff_Initialization
 20847 ;;		_DlyOff_Main
 20848 ;;		_setDelayOff_GO
 20849 ;;		_getDelayOff_GO
 20850 ;; This function uses a non-reentrant model
 20851 ;;
 20852                           
 20853                           
 20854                           ;psect for function _DelayOffPointSelect
 20855  1A22                     _DelayOffPointSelect:	
 20856                           
 20857                           ;incstack = 0
 20858                           ; Regs used in _DelayOffPointSelect: [wreg]
 20859                           ;DelayOffPointSelect@sw stored from wreg
 20860  1A22  00F3               	movwf	DelayOffPointSelect@sw
 20861                           
 20862                           ;DelayOff_B1.c: 9: if (sw == 1) {
 20863  1A23  0873               	movf	DelayOffPointSelect@sw,w
 20864  1A24  3A01               	xorlw	1
 20865  1A25  1D03               	skipz
 20866  1A26  2A2D               	goto	l6723
 20867                           
 20868                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 20869  1A27  30E2               	movlw	_DlySw1& (0+255)
 20870  1A28  00F2               	movwf	??_DelayOffPointSelect
 20871  1A29  0872               	movf	??_DelayOffPointSelect,w
 20872  1A2A  0021               	movlb	1	; select bank1
 20873  1A2B  00EA               	movwf	_DelayOff^(0+128)
 20874                           
 20875                           ;DelayOff_B1.c: 11: }
 20876  1A2C  0008               	return
 20877  1A2D                     l6723:	
 20878                           
 20879                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 20880  1A2D  0873               	movf	DelayOffPointSelect@sw,w
 20881  1A2E  3A02               	xorlw	2
 20882  1A2F  1D03               	skipz
 20883  1A30  0008               	return
 20884                           
 20885                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 20886  1A31  30E7               	movlw	_DlySw2& (0+255)
 20887  1A32  00F2               	movwf	??_DelayOffPointSelect
 20888  1A33  0872               	movf	??_DelayOffPointSelect,w
 20889  1A34  0021               	movlb	1	; select bank1
 20890  1A35  00EA               	movwf	_DelayOff^(0+128)
 20891  1A36  0008               	return
 20892  1A37                     __end_of_DelayOffPointSelect:	
 20893                           
 20894                           	psect	text147
 20895  12A6                     __ptext147:	
 20896 ;; *************** function _Buzzer_Main *****************
 20897 ;; Defined at:
 20898 ;;		line 46 in file "../src/Buzzer_B1.c"
 20899 ;; Parameters:    Size  Location     Type
 20900 ;;		None
 20901 ;; Auto vars:     Size  Location     Type
 20902 ;;		None
 20903 ;; Return value:  Size  Location     Type
 20904 ;;		None               void
 20905 ;; Registers used:
 20906 ;;		wreg, status,2, status,0
 20907 ;; Tracked objects:
 20908 ;;		On entry : 0/0
 20909 ;;		On exit  : 0/0
 20910 ;;		Unchanged: 0/0
 20911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20915 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20916 ;;Total ram usage:        1 bytes
 20917 ;; Hardware stack levels used:    1
 20918 ;; Hardware stack levels required when called:    3
 20919 ;; This function calls:
 20920 ;;		Nothing
 20921 ;; This function is called by:
 20922 ;;		_main
 20923 ;; This function uses a non-reentrant model
 20924 ;;
 20925                           
 20926                           
 20927                           ;psect for function _Buzzer_Main
 20928  12A6                     _Buzzer_Main:	
 20929                           
 20930                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 20931                           
 20932                           ;incstack = 0
 20933                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 20934  12A6  0021               	movlb	1	; select bank1
 20935  12A7  1CDC               	btfss	_Buz1^(0+128),1
 20936  12A8  0008               	return
 20937                           
 20938                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 20939  12A9  3001               	movlw	1
 20940  12AA  07DD               	addwf	(_Buz1^(0+128)+1),f
 20941  12AB  3000               	movlw	0
 20942  12AC  3DDE               	addwfc	((_Buz1+1)^(0+128)+1),f
 20943                           
 20944                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 20945  12AD  0863               	movf	((_Buz1+1)^(0+128)+6),w
 20946  12AE  025E               	subwf	((_Buz1+1)^(0+128)+1),w
 20947  12AF  1D03               	skipz
 20948  12B0  2AB3               	goto	u9445
 20949  12B1  0862               	movf	(_Buz1^(0+128)+6),w
 20950  12B2  025D               	subwf	(_Buz1^(0+128)+1),w
 20951  12B3                     u9445:	
 20952  12B3  1C03               	skipc
 20953  12B4  0008               	return
 20954                           
 20955                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 20956  12B5  01DD               	clrf	(_Buz1^(0+128)+1)
 20957  12B6  01DE               	clrf	((_Buz1+1)^(0+128)+1)
 20958                           
 20959                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 20960  12B7  12DC               	bcf	_Buz1^(0+128),5
 20961  12B8  0020               	movlb	0	; select bank0
 20962  12B9  1D8D               	btfss	13,3	;volatile
 20963  12BA  2ABD               	goto	l9019
 20964  12BB  0021               	movlb	1	; select bank1
 20965  12BC  16DC               	bsf	_Buz1^(0+128),5
 20966  12BD                     l9019:	
 20967                           
 20968                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 20969  12BD  0021               	movlb	1	; select bank1
 20970  12BE  1ADC               	btfsc	_Buz1^(0+128),5
 20971  12BF  2AE5               	goto	l110
 20972                           
 20973                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 20974  12C0  08DF               	movf	(_Buz1^(0+128)+3),f
 20975  12C1  1D03               	skipz
 20976  12C2  2AE1               	goto	l111
 20977                           
 20978                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 20979  12C3  1DDC               	btfss	_Buz1^(0+128),3
 20980  12C4  2AD1               	goto	l112
 20981                           
 20982                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 20983  12C5  11DC               	bcf	_Buz1^(0+128),3
 20984                           
 20985                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 20986  12C6  0860               	movf	(_Buz1^(0+128)+4),w
 20987  12C7  00F2               	movwf	??_Buzzer_Main
 20988  12C8  0872               	movf	??_Buzzer_Main,w
 20989  12C9  00DF               	movwf	(_Buz1^(0+128)+3)
 20990                           
 20991                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 20992  12CA  0865               	movf	((_Buz1+1)^(0+128)+8),w
 20993  12CB  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 20994  12CC  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 20995  12CD  0864               	movf	(_Buz1^(0+128)+8),w
 20996  12CE  01E2               	clrf	(_Buz1^(0+128)+6)
 20997  12CF  07E2               	addwf	(_Buz1^(0+128)+6),f
 20998                           
 20999                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 21000  12D0  0008               	return
 21001  12D1                     l112:	
 21002  12D1  1E5C               	btfss	_Buz1^(0+128),4
 21003  12D2  2ADF               	goto	l114
 21004                           
 21005                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 21006  12D3  125C               	bcf	_Buz1^(0+128),4
 21007                           
 21008                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 21009  12D4  0861               	movf	(_Buz1^(0+128)+5),w
 21010  12D5  00F2               	movwf	??_Buzzer_Main
 21011  12D6  0872               	movf	??_Buzzer_Main,w
 21012  12D7  00DF               	movwf	(_Buz1^(0+128)+3)
 21013                           
 21014                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 21015  12D8  0867               	movf	((_Buz1+1)^(0+128)+10),w
 21016  12D9  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 21017  12DA  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 21018  12DB  0866               	movf	(_Buz1^(0+128)+10),w
 21019  12DC  01E2               	clrf	(_Buz1^(0+128)+6)
 21020  12DD  07E2               	addwf	(_Buz1^(0+128)+6),f
 21021                           
 21022                           ;Buzzer_B1.c: 62: } else {
 21023  12DE  0008               	return
 21024  12DF                     l114:	
 21025                           
 21026                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 21027  12DF  10DC               	bcf	_Buz1^(0+128),1
 21028                           
 21029                           ;Buzzer_B1.c: 64: }
 21030                           ;Buzzer_B1.c: 65: } else {
 21031  12E0  0008               	return
 21032  12E1                     l111:	
 21033                           
 21034                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 21035  12E1  16DC               	bsf	_Buz1^(0+128),5
 21036                           
 21037                           ;Buzzer_B1.c: 68: RB3 = 1;
 21038  12E2  0020               	movlb	0	; select bank0
 21039  12E3  158D               	bsf	13,3	;volatile
 21040                           
 21041                           ;Buzzer_B1.c: 69: }
 21042                           ;Buzzer_B1.c: 70: } else {
 21043  12E4  0008               	return
 21044  12E5                     l110:	
 21045                           
 21046                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 21047  12E5  12DC               	bcf	_Buz1^(0+128),5
 21048                           
 21049                           ;Buzzer_B1.c: 73: RB3 = 0;
 21050  12E6  0020               	movlb	0	; select bank0
 21051  12E7  118D               	bcf	13,3	;volatile
 21052                           
 21053                           ;Buzzer_B1.c: 75: Buz1.Count--;
 21054  12E8  3001               	movlw	1
 21055  12E9  0021               	movlb	1	; select bank1
 21056  12EA  02DF               	subwf	(_Buz1^(0+128)+3),f
 21057  12EB  0008               	return
 21058  12EC                     __end_of_Buzzer_Main:	
 21059                           
 21060                           	psect	text148
 21061  27B2                     __ptext148:	
 21062 ;; *************** function _Buzzer_Initialization *****************
 21063 ;; Defined at:
 21064 ;;		line 11 in file "../src/Buzzer_B1.c"
 21065 ;; Parameters:    Size  Location     Type
 21066 ;;		None
 21067 ;; Auto vars:     Size  Location     Type
 21068 ;;		None
 21069 ;; Return value:  Size  Location     Type
 21070 ;;		None               void
 21071 ;; Registers used:
 21072 ;;		None
 21073 ;; Tracked objects:
 21074 ;;		On entry : 0/0
 21075 ;;		On exit  : 0/0
 21076 ;;		Unchanged: 0/0
 21077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21082 ;;Total ram usage:        0 bytes
 21083 ;; Hardware stack levels used:    1
 21084 ;; Hardware stack levels required when called:    3
 21085 ;; This function calls:
 21086 ;;		Nothing
 21087 ;; This function is called by:
 21088 ;;		_main
 21089 ;; This function uses a non-reentrant model
 21090 ;;
 21091                           
 21092                           
 21093                           ;psect for function _Buzzer_Initialization
 21094  27B2                     _Buzzer_Initialization:	
 21095                           
 21096                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 21097                           
 21098                           ;incstack = 0
 21099                           ; Regs used in _Buzzer_Initialization: []
 21100  27B2  0021               	movlb	1	; select bank1
 21101  27B3  145C               	bsf	_Buz1^(0+128),0
 21102  27B4  0008               	return
 21103  27B5                     __end_of_Buzzer_Initialization:	
 21104                           
 21105                           	psect	intentry
 21106  0004                     __pintentry:	
 21107 ;; *************** function _ISR *****************
 21108 ;; Defined at:
 21109 ;;		line 116 in file "../src/MCU_B1.c"
 21110 ;; Parameters:    Size  Location     Type
 21111 ;;		None
 21112 ;; Auto vars:     Size  Location     Type
 21113 ;;		None
 21114 ;; Return value:  Size  Location     Type
 21115 ;;		None               void
 21116 ;; Registers used:
 21117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21118 ;; Tracked objects:
 21119 ;;		On entry : 0/0
 21120 ;;		On exit  : 0/0
 21121 ;;		Unchanged: 0/0
 21122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21125 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21126 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21127 ;;Total ram usage:        1 bytes
 21128 ;; Hardware stack levels used:    1
 21129 ;; Hardware stack levels required when called:    2
 21130 ;; This function calls:
 21131 ;;		_IOC_ISR
 21132 ;;		_TMR1_ISR
 21133 ;; This function is called by:
 21134 ;;		Interrupt level 1
 21135 ;; This function uses a non-reentrant model
 21136 ;;
 21137                           
 21138  0004                     _ISR:	
 21139                           
 21140                           ;incstack = 0
 21141                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21142  0004  147E               	bsf	126,0	;set compiler interrupt flag
 21143  0005  3180               	pagesel	$
 21144  0006  0020               	movlb	0	; select bank0
 21145  0007  087F               	movf	127,w
 21146  0008  00F1               	movwf	??_ISR
 21147                           
 21148                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 21149  0009  0021               	movlb	1	; select bank1
 21150  000A  1C11               	btfss	17,0	;volatile
 21151  000B  2812               	goto	i1l9627
 21152  000C  0020               	movlb	0	; select bank0
 21153  000D  1C11               	btfss	17,0	;volatile
 21154  000E  2812               	goto	i1l9627
 21155                           
 21156                           ;MCU_B1.c: 126: TMR1_ISR();
 21157  000F  319C  24C6  3180   	fcall	_TMR1_ISR
 21158  0012                     i1l9627:	
 21159                           
 21160                           ;MCU_B1.c: 127: }
 21161                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 21162  0012  198B               	btfsc	11,3	;volatile
 21163  0013  1C0B               	btfss	11,0	;volatile
 21164  0014  281A               	goto	i1l1462
 21165  0015  0027               	movlb	7	; select bank7
 21166  0016  1D16               	btfss	22,2	;volatile
 21167  0017  281A               	goto	i1l1462
 21168                           
 21169                           ;MCU_B1.c: 139: IOC_ISR();
 21170  0018  3198  2096         	fcall	_IOC_ISR
 21171  001A                     i1l1462:	
 21172                           ;MCU_B1.c: 140: }
 21173                           ;MCU_B1.c: 148: return;
 21174                           
 21175  001A  0871               	movf	??_ISR,w
 21176  001B  0020               	movlb	0	; select bank0
 21177  001C  00FF               	movwf	127
 21178  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 21179  001E  0009               	retfie
 21180  001F                     __end_of_ISR:	
 21181                           
 21182                           	psect	text150
 21183  1CC6                     __ptext150:	
 21184 ;; *************** function _TMR1_ISR *****************
 21185 ;; Defined at:
 21186 ;;		line 236 in file "../src/MCU_B1.c"
 21187 ;; Parameters:    Size  Location     Type
 21188 ;;		None
 21189 ;; Auto vars:     Size  Location     Type
 21190 ;;		None
 21191 ;; Return value:  Size  Location     Type
 21192 ;;		None               void
 21193 ;; Registers used:
 21194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21195 ;; Tracked objects:
 21196 ;;		On entry : 0/0
 21197 ;;		On exit  : 0/0
 21198 ;;		Unchanged: 0/0
 21199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21204 ;;Total ram usage:        0 bytes
 21205 ;; Hardware stack levels used:    1
 21206 ;; Hardware stack levels required when called:    1
 21207 ;; This function calls:
 21208 ;;		_DimmerLights_TMR_1
 21209 ;;		_DimmerLights_TMR_2
 21210 ;; This function is called by:
 21211 ;;		_ISR
 21212 ;; This function uses a non-reentrant model
 21213 ;;
 21214                           
 21215                           
 21216                           ;psect for function _TMR1_ISR
 21217  1CC6                     _TMR1_ISR:	
 21218                           
 21219                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 21220                           
 21221                           ;incstack = 0
 21222                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21223  1CC6  3190  207A  319C   	fcall	_DimmerLights_TMR_1
 21224                           
 21225                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 21226  1CC9  3190  20B2  319C   	fcall	_DimmerLights_TMR_2
 21227                           
 21228                           ;MCU_B1.c: 269: Timer1.Count++;
 21229  1CCC  3001               	movlw	1
 21230  1CCD  0022               	movlb	2	; select bank2
 21231  1CCE  07A6               	addwf	(_Timer1^(0+256)+1),f
 21232  1CCF  3000               	movlw	0
 21233  1CD0  3DA7               	addwfc	((_Timer1+1)^(0+256)+1),f
 21234                           
 21235                           ;MCU_B1.c: 270: if (Timer1.Count == (int)(20*10)) {
 21236  1CD1  3001               	movlw	1
 21237  1CD2  3E25               	addlw	_Timer1& (0+255)
 21238  1CD3  0086               	movwf	6
 21239  1CD4  3001               	movlw	1	; select bank2/3
 21240  1CD5  0087               	movwf	7
 21241  1CD6  3F40               	moviw [0]fsr1
 21242  1CD7  3AC8               	xorlw	200
 21243  1CD8  1D03               	skipz
 21244  1CD9  2CDC               	goto	u954_25
 21245  1CDA  3F41               	moviw [1]fsr1
 21246  1CDB  3A00               	xorlw	0
 21247  1CDC                     u954_25:	
 21248  1CDC  1D03               	skipz
 21249  1CDD  2CE1               	goto	i1l9081
 21250                           
 21251                           ;MCU_B1.c: 271: Timer1.Count = 0;
 21252  1CDE  01A6               	clrf	(_Timer1^(0+256)+1)
 21253  1CDF  01A7               	clrf	((_Timer1+1)^(0+256)+1)
 21254                           
 21255                           ;MCU_B1.c: 272: Timer1.Timeout = 1;
 21256  1CE0  1425               	bsf	_Timer1^(0+256),0
 21257  1CE1                     i1l9081:	
 21258                           
 21259                           ;MCU_B1.c: 273: }
 21260                           ;MCU_B1.c: 275: TMR1H = (int)((65536-1480)/256);
 21261  1CE1  30FA               	movlw	250
 21262  1CE2  0020               	movlb	0	; select bank0
 21263  1CE3  0097               	movwf	23	;volatile
 21264                           
 21265                           ;MCU_B1.c: 276: TMR1L = (int)((65536-1480)%256);
 21266  1CE4  3038               	movlw	56
 21267  1CE5  0096               	movwf	22	;volatile
 21268                           
 21269                           ;MCU_B1.c: 277: TMR1IF = 0;
 21270  1CE6  1011               	bcf	17,0	;volatile
 21271  1CE7  0008               	return
 21272  1CE8                     __end_of_TMR1_ISR:	
 21273                           
 21274                           	psect	text151
 21275  10B2                     __ptext151:	
 21276 ;; *************** function _DimmerLights_TMR_2 *****************
 21277 ;; Defined at:
 21278 ;;		line 1892 in file "../src/Dimmer_B1.c"
 21279 ;; Parameters:    Size  Location     Type
 21280 ;;		None
 21281 ;; Auto vars:     Size  Location     Type
 21282 ;;		None
 21283 ;; Return value:  Size  Location     Type
 21284 ;;		None               void
 21285 ;; Registers used:
 21286 ;;		wreg, status,2, status,0
 21287 ;; Tracked objects:
 21288 ;;		On entry : 0/0
 21289 ;;		On exit  : 0/0
 21290 ;;		Unchanged: 0/0
 21291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21294 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21295 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21296 ;;Total ram usage:        1 bytes
 21297 ;; Hardware stack levels used:    1
 21298 ;; This function calls:
 21299 ;;		Nothing
 21300 ;; This function is called by:
 21301 ;;		_TMR1_ISR
 21302 ;; This function uses a non-reentrant model
 21303 ;;
 21304                           
 21305                           
 21306                           ;psect for function _DimmerLights_TMR_2
 21307  10B2                     _DimmerLights_TMR_2:	
 21308                           
 21309                           ;Dimmer_B1.c: 1894: if (DimmerIntr2.Start == 1) {
 21310                           
 21311                           ;incstack = 0
 21312                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 21313  10B2  0021               	movlb	1	; select bank1
 21314  10B3  1D30               	btfss	_DimmerIntr2^(0+128),2
 21315  10B4  28D8               	goto	i1l1019
 21316                           
 21317                           ;Dimmer_B1.c: 1895: DimmerIntr2.Count++;
 21318  10B5  3001               	movlw	1
 21319  10B6  00F0               	movwf	??_DimmerLights_TMR_2
 21320  10B7  0870               	movf	??_DimmerLights_TMR_2,w
 21321  10B8  07B2               	addwf	(_DimmerIntr2^(0+128)+2),f
 21322                           
 21323                           ;Dimmer_B1.c: 1897: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd_Value) {
 21324  10B9  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21325  10BA  063F               	xorwf	(_DimmerIntr2^(0+128)+15),w
 21326  10BB  1D03               	skipz
 21327  10BC  28BF               	goto	i1l8525
 21328                           
 21329                           ;Dimmer_B1.c: 1898: DimmerIntr2.Count = 0;
 21330  10BD  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21331                           
 21332                           ;Dimmer_B1.c: 1899: DimmerIntr2.Start = 0;
 21333  10BE  1130               	bcf	_DimmerIntr2^(0+128),2
 21334  10BF                     i1l8525:	
 21335                           
 21336                           ;Dimmer_B1.c: 1900: }
 21337                           ;Dimmer_B1.c: 1904: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2_Value) {
 21338  10BF  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21339  10C0  063C               	xorwf	(_DimmerIntr2^(0+128)+12),w
 21340  10C1  1903               	btfsc	3,2
 21341                           
 21342                           ;Dimmer_B1.c: 1905: if (DimmerIntr2.ControlStatus == 1) {
 21343  10C2  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21344  10C3  28C6               	goto	i1l8531
 21345                           
 21346                           ;Dimmer_B1.c: 1906: RA7 = 0;
 21347  10C4  0020               	movlb	0	; select bank0
 21348  10C5  138C               	bcf	12,7	;volatile
 21349  10C6                     i1l8531:	
 21350                           
 21351                           ;Dimmer_B1.c: 1907: }
 21352                           ;Dimmer_B1.c: 1908: }
 21353                           ;Dimmer_B1.c: 1911: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3_Value) {
 21354  10C6  0021               	movlb	1	; select bank1
 21355  10C7  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21356  10C8  063D               	xorwf	(_DimmerIntr2^(0+128)+13),w
 21357  10C9  1903               	btfsc	3,2
 21358                           
 21359                           ;Dimmer_B1.c: 1912: if (DimmerIntr2.ControlStatus == 1) {
 21360  10CA  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21361  10CB  28CE               	goto	i1l8537
 21362                           
 21363                           ;Dimmer_B1.c: 1913: RA7 = 1;
 21364  10CC  0020               	movlb	0	; select bank0
 21365  10CD  178C               	bsf	12,7	;volatile
 21366  10CE                     i1l8537:	
 21367                           
 21368                           ;Dimmer_B1.c: 1914: }
 21369                           ;Dimmer_B1.c: 1915: }
 21370                           ;Dimmer_B1.c: 1918: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4_Value) {
 21371  10CE  0021               	movlb	1	; select bank1
 21372  10CF  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21373  10D0  063E               	xorwf	(_DimmerIntr2^(0+128)+14),w
 21374  10D1  1D03               	skipz
 21375  10D2  0008               	return
 21376                           
 21377                           ;Dimmer_B1.c: 1919: if (DimmerIntr2.ControlStatus == 1) {
 21378  10D3  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21379  10D4  0008               	return
 21380                           
 21381                           ;Dimmer_B1.c: 1920: RA7 = 0;
 21382  10D5  0020               	movlb	0	; select bank0
 21383  10D6  138C               	bcf	12,7	;volatile
 21384                           
 21385                           ;Dimmer_B1.c: 1921: }
 21386                           ;Dimmer_B1.c: 1924: }
 21387                           ;Dimmer_B1.c: 1926: } else {
 21388  10D7  0008               	return
 21389  10D8                     i1l1019:	
 21390                           
 21391                           ;Dimmer_B1.c: 1927: if (DimmerIntr2.GO == 1) {
 21392  10D8  1C30               	btfss	_DimmerIntr2^(0+128),0
 21393  10D9  0008               	return
 21394                           
 21395                           ;Dimmer_B1.c: 1928: DimmerIntr2.Count++;
 21396  10DA  3001               	movlw	1
 21397  10DB  00F0               	movwf	??_DimmerLights_TMR_2
 21398  10DC  0870               	movf	??_DimmerLights_TMR_2,w
 21399  10DD  07B2               	addwf	(_DimmerIntr2^(0+128)+2),f
 21400                           
 21401                           ;Dimmer_B1.c: 1929: if (DimmerIntr2.Count == 4) {
 21402  10DE  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21403  10DF  3A04               	xorlw	4
 21404  10E0  1D03               	skipz
 21405  10E1  0008               	return
 21406                           
 21407                           ;Dimmer_B1.c: 1930: DimmerIntr2.Count = 0;
 21408  10E2  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21409                           
 21410                           ;Dimmer_B1.c: 1931: DimmerIntr2.GO = 0;
 21411  10E3  1030               	bcf	_DimmerIntr2^(0+128),0
 21412                           
 21413                           ;Dimmer_B1.c: 1932: DimmerIntr2.Start = 1;
 21414  10E4  1530               	bsf	_DimmerIntr2^(0+128),2
 21415                           
 21416                           ;Dimmer_B1.c: 1934: if (DimmerIntr2.ControlStatus == 1) {
 21417  10E5  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21418  10E6  0008               	return
 21419                           
 21420                           ;Dimmer_B1.c: 1935: RA7 = 1;
 21421  10E7  0020               	movlb	0	; select bank0
 21422  10E8  178C               	bsf	12,7	;volatile
 21423  10E9  0008               	return
 21424  10EA                     __end_of_DimmerLights_TMR_2:	
 21425                           
 21426                           	psect	text152
 21427  107A                     __ptext152:	
 21428 ;; *************** function _DimmerLights_TMR_1 *****************
 21429 ;; Defined at:
 21430 ;;		line 1731 in file "../src/Dimmer_B1.c"
 21431 ;; Parameters:    Size  Location     Type
 21432 ;;		None
 21433 ;; Auto vars:     Size  Location     Type
 21434 ;;		None
 21435 ;; Return value:  Size  Location     Type
 21436 ;;		None               void
 21437 ;; Registers used:
 21438 ;;		wreg, status,2, status,0
 21439 ;; Tracked objects:
 21440 ;;		On entry : 0/0
 21441 ;;		On exit  : 0/0
 21442 ;;		Unchanged: 0/0
 21443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21447 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21448 ;;Total ram usage:        1 bytes
 21449 ;; Hardware stack levels used:    1
 21450 ;; This function calls:
 21451 ;;		Nothing
 21452 ;; This function is called by:
 21453 ;;		_TMR1_ISR
 21454 ;; This function uses a non-reentrant model
 21455 ;;
 21456                           
 21457                           
 21458                           ;psect for function _DimmerLights_TMR_1
 21459  107A                     _DimmerLights_TMR_1:	
 21460                           
 21461                           ;Dimmer_B1.c: 1734: if (DimmerIntr1.Start == 1) {
 21462                           
 21463                           ;incstack = 0
 21464                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 21465  107A  0021               	movlb	1	; select bank1
 21466  107B  1D20               	btfss	_DimmerIntr1^(0+128),2
 21467  107C  28A0               	goto	i1l995
 21468                           
 21469                           ;Dimmer_B1.c: 1735: DimmerIntr1.Count++;
 21470  107D  3001               	movlw	1
 21471  107E  00F0               	movwf	??_DimmerLights_TMR_1
 21472  107F  0870               	movf	??_DimmerLights_TMR_1,w
 21473  1080  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 21474                           
 21475                           ;Dimmer_B1.c: 1737: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd_Value) {
 21476  1081  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21477  1082  062F               	xorwf	(_DimmerIntr1^(0+128)+15),w
 21478  1083  1D03               	skipz
 21479  1084  2887               	goto	i1l8463
 21480                           
 21481                           ;Dimmer_B1.c: 1738: DimmerIntr1.Count = 0;
 21482  1085  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21483                           
 21484                           ;Dimmer_B1.c: 1739: DimmerIntr1.Start = 0;
 21485  1086  1120               	bcf	_DimmerIntr1^(0+128),2
 21486  1087                     i1l8463:	
 21487                           
 21488                           ;Dimmer_B1.c: 1740: }
 21489                           ;Dimmer_B1.c: 1744: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2_Value) {
 21490  1087  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21491  1088  062C               	xorwf	(_DimmerIntr1^(0+128)+12),w
 21492  1089  1903               	btfsc	3,2
 21493                           
 21494                           ;Dimmer_B1.c: 1745: if (DimmerIntr1.ControlStatus == 1) {
 21495  108A  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21496  108B  288E               	goto	i1l8469
 21497                           
 21498                           ;Dimmer_B1.c: 1746: RB4 = 0;
 21499  108C  0020               	movlb	0	; select bank0
 21500  108D  120D               	bcf	13,4	;volatile
 21501  108E                     i1l8469:	
 21502                           
 21503                           ;Dimmer_B1.c: 1747: }
 21504                           ;Dimmer_B1.c: 1748: }
 21505                           ;Dimmer_B1.c: 1751: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3_Value) {
 21506  108E  0021               	movlb	1	; select bank1
 21507  108F  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21508  1090  062D               	xorwf	(_DimmerIntr1^(0+128)+13),w
 21509  1091  1903               	btfsc	3,2
 21510                           
 21511                           ;Dimmer_B1.c: 1752: if (DimmerIntr1.ControlStatus == 1) {
 21512  1092  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21513  1093  2896               	goto	i1l8475
 21514                           
 21515                           ;Dimmer_B1.c: 1753: RB4 = 1;
 21516  1094  0020               	movlb	0	; select bank0
 21517  1095  160D               	bsf	13,4	;volatile
 21518  1096                     i1l8475:	
 21519                           
 21520                           ;Dimmer_B1.c: 1754: }
 21521                           ;Dimmer_B1.c: 1755: }
 21522                           ;Dimmer_B1.c: 1758: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4_Value) {
 21523  1096  0021               	movlb	1	; select bank1
 21524  1097  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21525  1098  062E               	xorwf	(_DimmerIntr1^(0+128)+14),w
 21526  1099  1D03               	skipz
 21527  109A  0008               	return
 21528                           
 21529                           ;Dimmer_B1.c: 1759: if (DimmerIntr1.ControlStatus == 1) {
 21530  109B  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21531  109C  0008               	return
 21532                           
 21533                           ;Dimmer_B1.c: 1760: RB4 = 0;
 21534  109D  0020               	movlb	0	; select bank0
 21535  109E  120D               	bcf	13,4	;volatile
 21536                           
 21537                           ;Dimmer_B1.c: 1761: }
 21538                           ;Dimmer_B1.c: 1764: }
 21539                           ;Dimmer_B1.c: 1766: } else {
 21540  109F  0008               	return
 21541  10A0                     i1l995:	
 21542                           
 21543                           ;Dimmer_B1.c: 1767: if (DimmerIntr1.GO == 1) {
 21544  10A0  1C20               	btfss	_DimmerIntr1^(0+128),0
 21545  10A1  0008               	return
 21546                           
 21547                           ;Dimmer_B1.c: 1768: DimmerIntr1.Count++;
 21548  10A2  3001               	movlw	1
 21549  10A3  00F0               	movwf	??_DimmerLights_TMR_1
 21550  10A4  0870               	movf	??_DimmerLights_TMR_1,w
 21551  10A5  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 21552                           
 21553                           ;Dimmer_B1.c: 1769: if (DimmerIntr1.Count == 4) {
 21554  10A6  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21555  10A7  3A04               	xorlw	4
 21556  10A8  1D03               	skipz
 21557  10A9  0008               	return
 21558                           
 21559                           ;Dimmer_B1.c: 1770: DimmerIntr1.Count = 0;
 21560  10AA  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21561                           
 21562                           ;Dimmer_B1.c: 1771: DimmerIntr1.GO = 0;
 21563  10AB  1020               	bcf	_DimmerIntr1^(0+128),0
 21564                           
 21565                           ;Dimmer_B1.c: 1772: DimmerIntr1.Start = 1;
 21566  10AC  1520               	bsf	_DimmerIntr1^(0+128),2
 21567                           
 21568                           ;Dimmer_B1.c: 1774: if (DimmerIntr1.ControlStatus == 1) {
 21569  10AD  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21570  10AE  0008               	return
 21571                           
 21572                           ;Dimmer_B1.c: 1775: RB4 = 1;
 21573  10AF  0020               	movlb	0	; select bank0
 21574  10B0  160D               	bsf	13,4	;volatile
 21575  10B1  0008               	return
 21576  10B2                     __end_of_DimmerLights_TMR_1:	
 21577                           
 21578                           	psect	text153
 21579  1896                     __ptext153:	
 21580 ;; *************** function _IOC_ISR *****************
 21581 ;; Defined at:
 21582 ;;		line 396 in file "../src/MCU_B1.c"
 21583 ;; Parameters:    Size  Location     Type
 21584 ;;		None
 21585 ;; Auto vars:     Size  Location     Type
 21586 ;;		None
 21587 ;; Return value:  Size  Location     Type
 21588 ;;		None               void
 21589 ;; Registers used:
 21590 ;;		wreg, status,2, status,0, pclath, cstack
 21591 ;; Tracked objects:
 21592 ;;		On entry : 0/0
 21593 ;;		On exit  : 0/0
 21594 ;;		Unchanged: 0/0
 21595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21600 ;;Total ram usage:        0 bytes
 21601 ;; Hardware stack levels used:    1
 21602 ;; Hardware stack levels required when called:    1
 21603 ;; This function calls:
 21604 ;;		_DimmerLights_IOC_1
 21605 ;;		_DimmerLights_IOC_2
 21606 ;; This function is called by:
 21607 ;;		_ISR
 21608 ;; This function uses a non-reentrant model
 21609 ;;
 21610                           
 21611                           
 21612                           ;psect for function _IOC_ISR
 21613  1896                     _IOC_ISR:	
 21614                           
 21615                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 21616                           
 21617                           ;incstack = 0
 21618                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 21619  1896  0021               	movlb	1	; select bank1
 21620  1897  1C4F               	btfss	_myMain^(0+128),0
 21621  1898  289E               	goto	i1l9091
 21622                           
 21623                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 21624  1899  319E  2699  3198   	fcall	_DimmerLights_IOC_1
 21625                           
 21626                           ;MCU_B1.c: 409: DimmerLights_IOC_2();
 21627  189C  319E  26C9         	fcall	_DimmerLights_IOC_2
 21628  189E                     i1l9091:	
 21629                           
 21630                           ;MCU_B1.c: 418: }
 21631                           ;MCU_B1.c: 420: IOCBF2 = 0;
 21632  189E  0027               	movlb	7	; select bank7
 21633  189F  1116               	bcf	22,2	;volatile
 21634                           
 21635                           ;MCU_B1.c: 421: IOCIF = 0;
 21636  18A0  100B               	bcf	11,0	;volatile
 21637  18A1  0008               	return
 21638  18A2                     __end_of_IOC_ISR:	
 21639                           
 21640                           	psect	text154
 21641  1EC9                     __ptext154:	
 21642 ;; *************** function _DimmerLights_IOC_2 *****************
 21643 ;; Defined at:
 21644 ;;		line 1975 in file "../src/Dimmer_B1.c"
 21645 ;; Parameters:    Size  Location     Type
 21646 ;;		None
 21647 ;; Auto vars:     Size  Location     Type
 21648 ;;		None
 21649 ;; Return value:  Size  Location     Type
 21650 ;;		None               void
 21651 ;; Registers used:
 21652 ;;		wreg, status,2, status,0
 21653 ;; Tracked objects:
 21654 ;;		On entry : 0/0
 21655 ;;		On exit  : 0/0
 21656 ;;		Unchanged: 0/0
 21657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21660 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21661 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21662 ;;Total ram usage:        1 bytes
 21663 ;; Hardware stack levels used:    1
 21664 ;; This function calls:
 21665 ;;		Nothing
 21666 ;; This function is called by:
 21667 ;;		_IOC_ISR
 21668 ;; This function uses a non-reentrant model
 21669 ;;
 21670                           
 21671                           
 21672                           ;psect for function _DimmerLights_IOC_2
 21673  1EC9                     _DimmerLights_IOC_2:	
 21674                           
 21675                           ;Dimmer_B1.c: 1990: if (DimmerIntr2.Start == 0 && DimmerIntr2.GO == 0) {
 21676                           
 21677                           ;incstack = 0
 21678                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0]
 21679  1EC9  0021               	movlb	1	; select bank1
 21680  1ECA  1930               	btfsc	_DimmerIntr2^(0+128),2
 21681  1ECB  0008               	return
 21682  1ECC  1830               	btfsc	_DimmerIntr2^(0+128),0
 21683  1ECD  0008               	return
 21684                           
 21685                           ;Dimmer_B1.c: 1992: if (RB2 != DimmerIntr2.Status) {
 21686  1ECE  0E31               	swapf	(_DimmerIntr2^(0+128)+1),w
 21687  1ECF  0C89               	rrf	9,f
 21688  1ED0  3901               	andlw	1
 21689  1ED1  00F0               	movwf	??_DimmerLights_IOC_2
 21690  1ED2  3000               	movlw	0
 21691  1ED3  0020               	movlb	0	; select bank0
 21692  1ED4  190D               	btfsc	13,2	;volatile
 21693  1ED5  3001               	movlw	1
 21694  1ED6  0670               	xorwf	??_DimmerLights_IOC_2,w
 21695  1ED7  1903               	skipnz
 21696  1ED8  0008               	return
 21697                           
 21698                           ;Dimmer_B1.c: 1995: DimmerIntr2.Count = 0;
 21699  1ED9  0021               	movlb	1	; select bank1
 21700  1EDA  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21701                           
 21702                           ;Dimmer_B1.c: 1996: DimmerIntr2.GO = 1;
 21703  1EDB  1430               	bsf	_DimmerIntr2^(0+128),0
 21704                           
 21705                           ;Dimmer_B1.c: 1998: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 21706  1EDC  1E30               	btfss	_DimmerIntr2^(0+128),4
 21707  1EDD  1B30               	btfsc	_DimmerIntr2^(0+128),6
 21708                           
 21709                           ;Dimmer_B1.c: 1999: DimmerIntr2.Tune = 1;
 21710  1EDE  14B0               	bsf	_DimmerIntr2^(0+128),1
 21711                           
 21712                           ;Dimmer_B1.c: 2000: }
 21713                           ;Dimmer_B1.c: 2002: if (DimmerIntr2.Calculate == 1) {
 21714  1EDF  1FB1               	btfss	(_DimmerIntr2^(0+128)+1),7
 21715  1EE0  2EF2               	goto	i1l8575
 21716                           
 21717                           ;Dimmer_B1.c: 2003: DimmerIntr2.Calculate = 0;
 21718  1EE1  13B1               	bcf	(_DimmerIntr2^(0+128)+1),7
 21719                           
 21720                           ;Dimmer_B1.c: 2004: DimmerIntr2.TuneEnd_Value = DimmerIntr2.TuneEnd;
 21721  1EE2  083B               	movf	(_DimmerIntr2^(0+128)+11),w
 21722  1EE3  00F0               	movwf	??_DimmerLights_IOC_2
 21723  1EE4  0870               	movf	??_DimmerLights_IOC_2,w
 21724  1EE5  00BF               	movwf	(_DimmerIntr2^(0+128)+15)
 21725                           
 21726                           ;Dimmer_B1.c: 2005: DimmerIntr2.TuneValue2_Value = DimmerIntr2.TuneValue2;
 21727  1EE6  0838               	movf	(_DimmerIntr2^(0+128)+8),w
 21728  1EE7  00F0               	movwf	??_DimmerLights_IOC_2
 21729  1EE8  0870               	movf	??_DimmerLights_IOC_2,w
 21730  1EE9  00BC               	movwf	(_DimmerIntr2^(0+128)+12)
 21731                           
 21732                           ;Dimmer_B1.c: 2006: DimmerIntr2.TuneValue3_Value = DimmerIntr2.TuneValue3;
 21733  1EEA  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 21734  1EEB  00F0               	movwf	??_DimmerLights_IOC_2
 21735  1EEC  0870               	movf	??_DimmerLights_IOC_2,w
 21736  1EED  00BD               	movwf	(_DimmerIntr2^(0+128)+13)
 21737                           
 21738                           ;Dimmer_B1.c: 2007: DimmerIntr2.TuneValue4_Value = DimmerIntr2.TuneValue4;
 21739  1EEE  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 21740  1EEF  00F0               	movwf	??_DimmerLights_IOC_2
 21741  1EF0  0870               	movf	??_DimmerLights_IOC_2,w
 21742  1EF1  00BE               	movwf	(_DimmerIntr2^(0+128)+14)
 21743  1EF2                     i1l8575:	
 21744                           
 21745                           ;Dimmer_B1.c: 2008: }
 21746                           ;Dimmer_B1.c: 2018: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 21747  1EF2  12B1               	bcf	(_DimmerIntr2^(0+128)+1),5
 21748  1EF3  0020               	movlb	0	; select bank0
 21749  1EF4  1D0D               	btfss	13,2	;volatile
 21750  1EF5  0008               	return
 21751  1EF6  0021               	movlb	1	; select bank1
 21752  1EF7  16B1               	bsf	(_DimmerIntr2^(0+128)+1),5
 21753  1EF8  0008               	return
 21754  1EF9                     __end_of_DimmerLights_IOC_2:	
 21755                           
 21756                           	psect	text155
 21757  1E99                     __ptext155:	
 21758 ;; *************** function _DimmerLights_IOC_1 *****************
 21759 ;; Defined at:
 21760 ;;		line 1817 in file "../src/Dimmer_B1.c"
 21761 ;; Parameters:    Size  Location     Type
 21762 ;;		None
 21763 ;; Auto vars:     Size  Location     Type
 21764 ;;		None
 21765 ;; Return value:  Size  Location     Type
 21766 ;;		None               void
 21767 ;; Registers used:
 21768 ;;		wreg, status,2, status,0
 21769 ;; Tracked objects:
 21770 ;;		On entry : 0/0
 21771 ;;		On exit  : 0/0
 21772 ;;		Unchanged: 0/0
 21773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21778 ;;Total ram usage:        1 bytes
 21779 ;; Hardware stack levels used:    1
 21780 ;; This function calls:
 21781 ;;		Nothing
 21782 ;; This function is called by:
 21783 ;;		_IOC_ISR
 21784 ;; This function uses a non-reentrant model
 21785 ;;
 21786                           
 21787                           
 21788                           ;psect for function _DimmerLights_IOC_1
 21789  1E99                     _DimmerLights_IOC_1:	
 21790                           
 21791                           ;Dimmer_B1.c: 1831: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 21792                           
 21793                           ;incstack = 0
 21794                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0]
 21795  1E99  0021               	movlb	1	; select bank1
 21796  1E9A  1920               	btfsc	_DimmerIntr1^(0+128),2
 21797  1E9B  0008               	return
 21798  1E9C  1820               	btfsc	_DimmerIntr1^(0+128),0
 21799  1E9D  0008               	return
 21800                           
 21801                           ;Dimmer_B1.c: 1833: if (RB2 != DimmerIntr1.Status) {
 21802  1E9E  0E21               	swapf	(_DimmerIntr1^(0+128)+1),w
 21803  1E9F  0C89               	rrf	9,f
 21804  1EA0  3901               	andlw	1
 21805  1EA1  00F0               	movwf	??_DimmerLights_IOC_1
 21806  1EA2  3000               	movlw	0
 21807  1EA3  0020               	movlb	0	; select bank0
 21808  1EA4  190D               	btfsc	13,2	;volatile
 21809  1EA5  3001               	movlw	1
 21810  1EA6  0670               	xorwf	??_DimmerLights_IOC_1,w
 21811  1EA7  1903               	skipnz
 21812  1EA8  0008               	return
 21813                           
 21814                           ;Dimmer_B1.c: 1836: DimmerIntr1.Count = 0;
 21815  1EA9  0021               	movlb	1	; select bank1
 21816  1EAA  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21817                           
 21818                           ;Dimmer_B1.c: 1837: DimmerIntr1.GO = 1;
 21819  1EAB  1420               	bsf	_DimmerIntr1^(0+128),0
 21820                           
 21821                           ;Dimmer_B1.c: 1839: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 21822  1EAC  1E20               	btfss	_DimmerIntr1^(0+128),4
 21823  1EAD  1B20               	btfsc	_DimmerIntr1^(0+128),6
 21824                           
 21825                           ;Dimmer_B1.c: 1840: DimmerIntr1.Tune = 1;
 21826  1EAE  14A0               	bsf	_DimmerIntr1^(0+128),1
 21827                           
 21828                           ;Dimmer_B1.c: 1841: }
 21829                           ;Dimmer_B1.c: 1843: if (DimmerIntr1.Calculate == 1) {
 21830  1EAF  1FA1               	btfss	(_DimmerIntr1^(0+128)+1),7
 21831  1EB0  2EC2               	goto	i1l8513
 21832                           
 21833                           ;Dimmer_B1.c: 1844: DimmerIntr1.Calculate = 0;
 21834  1EB1  13A1               	bcf	(_DimmerIntr1^(0+128)+1),7
 21835                           
 21836                           ;Dimmer_B1.c: 1845: DimmerIntr1.TuneEnd_Value = DimmerIntr1.TuneEnd;
 21837  1EB2  082B               	movf	(_DimmerIntr1^(0+128)+11),w
 21838  1EB3  00F0               	movwf	??_DimmerLights_IOC_1
 21839  1EB4  0870               	movf	??_DimmerLights_IOC_1,w
 21840  1EB5  00AF               	movwf	(_DimmerIntr1^(0+128)+15)
 21841                           
 21842                           ;Dimmer_B1.c: 1846: DimmerIntr1.TuneValue2_Value = DimmerIntr1.TuneValue2;
 21843  1EB6  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 21844  1EB7  00F0               	movwf	??_DimmerLights_IOC_1
 21845  1EB8  0870               	movf	??_DimmerLights_IOC_1,w
 21846  1EB9  00AC               	movwf	(_DimmerIntr1^(0+128)+12)
 21847                           
 21848                           ;Dimmer_B1.c: 1847: DimmerIntr1.TuneValue3_Value = DimmerIntr1.TuneValue3;
 21849  1EBA  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 21850  1EBB  00F0               	movwf	??_DimmerLights_IOC_1
 21851  1EBC  0870               	movf	??_DimmerLights_IOC_1,w
 21852  1EBD  00AD               	movwf	(_DimmerIntr1^(0+128)+13)
 21853                           
 21854                           ;Dimmer_B1.c: 1848: DimmerIntr1.TuneValue4_Value = DimmerIntr1.TuneValue4;
 21855  1EBE  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 21856  1EBF  00F0               	movwf	??_DimmerLights_IOC_1
 21857  1EC0  0870               	movf	??_DimmerLights_IOC_1,w
 21858  1EC1  00AE               	movwf	(_DimmerIntr1^(0+128)+14)
 21859  1EC2                     i1l8513:	
 21860                           
 21861                           ;Dimmer_B1.c: 1849: }
 21862                           ;Dimmer_B1.c: 1859: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 21863  1EC2  12A1               	bcf	(_DimmerIntr1^(0+128)+1),5
 21864  1EC3  0020               	movlb	0	; select bank0
 21865  1EC4  1D0D               	btfss	13,2	;volatile
 21866  1EC5  0008               	return
 21867  1EC6  0021               	movlb	1	; select bank1
 21868  1EC7  16A1               	bsf	(_DimmerIntr1^(0+128)+1),5
 21869  1EC8  0008               	return
 21870  1EC9                     __end_of_DimmerLights_IOC_1:	
 21871  007E                     btemp	set	126	;btemp
 21872  007E                     pic14e$flags	set	126
 21873  007E                     wtemp	set	126
 21874  007E                     wtemp0	set	126
 21875  0080                     wtemp1	set	128
 21876  0082                     wtemp2	set	130
 21877  0084                     wtemp3	set	132
 21878  0086                     wtemp4	set	134
 21879  0088                     wtemp5	set	136
 21880  007F                     wtemp6	set	127
 21881  007E                     ttemp	set	126
 21882  007E                     ttemp0	set	126
 21883  0081                     ttemp1	set	129
 21884  0084                     ttemp2	set	132
 21885  0087                     ttemp3	set	135
 21886  007F                     ttemp4	set	127
 21887  007E                     ltemp	set	126
 21888  007E                     ltemp0	set	126
 21889  0082                     ltemp1	set	130
 21890  0086                     ltemp2	set	134
 21891  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         295
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      78
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      80
    BANK4            80      4      57
    BANK5            80      0      32
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK5[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_getTemp_AD
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setTemp_Main->___lwdiv
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setControl_Lights_Table->_setRF_AdjControl
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerIntr_ValueCalculate->_Division
    _DimmerIntr_Initialization->_Division
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _DimmerLights_TwoPhase_Main->_DimmerLights_AssignationDimming
    _DimmerLights_AssignationDimming->_setDimmerIntr_MaxmumValue
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DimmerLights_DimmingFunction->_DimmerIntr_ValueCalculate
    _DimmerIntr_ValueCalculate->_Division
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  181963
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1913
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              6 COMMON     4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              6 COMMON     2     2      0
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6429
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    6429
                                             61 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4876
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4876
                                             11 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   50311
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   50311
                                             74 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
                            _setData
 ---------------------------------------------------------------------------------
 (3) _setData                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45880
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4671
                                             61 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   41014
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     338
                                              6 COMMON     4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11472
                                             69 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   23710
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
                             _setBuz
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2438
                                              0 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      70
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2285
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    2066
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1936
                                              6 COMMON     2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1726
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3694
                                              9 COMMON     1     1      0
                                              6 BANK0      8     8      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   68979
       _DimmerLights_DimmingFunction
         _DimmerLights_TwoPhase_Main
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   51315
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   29582
                                             69 BANK0      4     3      1
          _DimmerIntr_ValueCalculate
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     355
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             61 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      71
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   21214
                                             66 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3161
                                             61 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     355
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_TwoPhase_Main                           1     1      0   16428
                                             65 BANK0      1     1      0
    _DimmerLights_AssignationDimming
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _DimmerLights_AssignationDimming                      4     4      0   16322
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     355
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0     981
                                              5 BANK0      2     2      0
          _DimmerIntr_ValueCalculate
 ---------------------------------------------------------------------------------
 (4) _DimmerIntr_ValueCalculate                            3     3      0     919
                                              2 BANK0      3     3      0
                           _Division
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   28004
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   28004
                                             58 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) _Division                                             5     4      1     857
                                              7 COMMON     3     2      1
                                              0 BANK0      2     2      0
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              5     4      1     345
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5400
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5400
                                             61 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             58 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 6     6      0    2332
                                              9 COMMON     1     1      0
                                              6 BANK0      5     5      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
       _DimmerIntr_ValueCalculate
         _Division
           ___lbdiv
     _DimmerLights_TwoPhase_Main
       _DimmerLights_AssignationDimming
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_Status
           _DimmerLights_SelectPointer
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setMemory_Modify
       _DimmerLights_SelectPointer
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _DimmerIntr_ValueCalculate
           _Division
             ___lbdiv
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
     _DimmerLights_IOC_2
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      39      13       71.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      20      15       40.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1A3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1A3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Mar 30 13:51:27 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1A61                            ___bmul@product 0074  
               getMain_Lights_Count@count 0075                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1D2C                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _u1 0220  
                                      _Sw 006D                            setTemp_Main@AD 0065  
                     ___wmul@multiplicand 0074                      _getDimmerLights_Line 1928  
                  __end_of_setDelayOff_GO 0BF6                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                    setRF_AdjControl@status 0077  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 179B  
                    _setDimmerLights_Line 1B0C                              ___ftadd@sign 0043  
                                     l100 131B                                       l110 12E5  
                                     l102 132D                                       l111 12E1  
                                     l112 12D1                                       l114 12DF  
                                     l331 1B2E                      _setDimmerLights_SwOn 0784  
                                     l332 1B30                                       l263 08D0  
                                     l375 1D78                                       l589 0961  
                                     l926 0FBE                                       l960 192F  
                                     l961 1935                                       l779 1A20  
                                     l955 1B19                                       l886 1F0F  
                                     _GIE 005F                                       _CRC 00E8  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00EB                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00C0  
                                     _ISR 0004                                       _WDT 012A  
                                     _Cmd 00E9              getDimmerLights_Status@lights 0074  
                                     _Sw1 01D0                                       _Sw2 01D9  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 1B3B  
                   _Buzzer_Initialization 27B2                           __end_of_ADC_Set 1811  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 1E12  
             _setDimmerIntr_ControlStatus 1DE9                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 18A2                     _setDimmerLights_OnOff 0F42  
        setDimmerLights_DimmingRun@lights 0076                                Load_Main@i 0028  
                            ___ftdiv@sign 0035                                      l1070 0D1C  
                                    l1054 0CC9                                      l1223 120F  
                                    l1072 0D0E                                      l1056 0CBA  
                                    l1224 1216                                      l1081 0D37  
                                    l1065 0CE6                                      l3001 1E4F  
                                    l3002 1E68                                      l1075 0D1A  
                                    l1059 0CC7                                      l3006 1E64  
                                    l1190 1C21                                      l3033 0600  
                                    l1513 1E35                            _Load_Main$4131 0023  
                                    l3042 1A60                                      l2306 0C0C  
                                    l2242 06E8                                      l1523 0A54  
                                    l2243 072C                                      l3140 1C33  
                                    l3301 15DD                                      l1189 1C18  
                                    l2317 0C90                                      l2238 0780  
                                    l3330 0403                                      l3307 15F4  
                                    l2268 182D                                      l2349 083E  
                         __end_of_IOC_Set 1880                                      l2286 15A9  
                                    l1665 01ED                                      l1499 11D7  
                                    l1675 01C9                                      l1667 008B  
                                    l2299 1F59                                      l1851 0529  
                                    l1676 01C7                                      l1668 0087  
                                    l2660 1ABC                                      l1669 0082  
                                    l1857 047C                                      l2682 035A  
                                    l2684 0238                                      l7103 0BA8  
                                    l7113 0BD8                                      l7117 0BEC  
                                    l7151 0830                                      l7231 1C02  
                                    l7081 114F                                      l7145 1DD5  
                                    l7137 1B01                                      l7153 0831  
                                    l7233 1C07                                      l2977 1120  
                                    l8203 1F83                     _setDimmerLights_SwOff 1122  
                                    l6621 15B3                                      l7165 087C  
                                    l7157 0836                                      l7501 1A6C  
                                    l7245 1D89                                      l7511 1A17  
                                    l8207 1F8C                                      l7247 1D94  
                                    l6625 15BA                                      l9019 12BD  
                                    l6723 1A2D                                      l6635 15E2  
                                    l6627 15C4                                      l7603 153B  
                                    l8067 19E5                                      l8155 1AD5  
                                    l8171 1C74                                      l6637 15EA  
                                    l6629 15C9                                      l6821 03E2  
                                    l7533 1E4B                                      l7277 1D62  
                                    l8181 1C83                                      l6735 1AEA  
                                    l6815 03CF                                      l7543 1E60  
                                    l7535 1E53                                      l7295 1A4E  
                                    l7607 1541                                      l7375 1FBA  
                                    l9207 09D5                                      l6833 0415  
                                    l6817 03D9                                      l6809 03BC  
                                    l6921 0EFE                                      l6905 0EBB  
                                    l6753 19A9                                      l8169 1C72  
                                    l6747 1A42                                      l6739 1AF3  
                                    l6827 03F5                                      l6819 03DE  
                                    l7643 1960                                      l7299 1A5B  
                                    l8195 1F65                                      l8179 1C7F  
                                    l6837 0427                                      l6829 03FF  
                                    l6933 0F1A                                      l6917 0EF6  
                                    l7645 1965                                      l6757 19AF  
                                    l7493 1DFE                                      l7573 1501  
                                    l8197 1F71                                      l8285 1BC4  
                                    l6847 0442                                      l6791 0393  
                                    l6863 0D66                                      l7639 195A  
                                    l7583 1511                                      l7591 151D  
                                    l8295 1BD1                                      l9191 09AE  
                                    l6857 0D50                                      l6929 0F12  
                                    l7833 1FD7                                      l7569 14FB  
                                    l7577 1507                                      l8297 1BD5  
                                    l6787 038C                                      l7587 1517  
                                    l8651 1B8F                                      l9187 09A6  
                                    l9179 0987                                      l6797 03A2  
                                    l6885 0DC0                                      l6877 0DA7  
                                    l6957 0A75                                      l7845 1FEB  
                                    l8901 1AC1                                      l8653 1B92  
                                    l9381 1695                     _myMain_Initialization 18DE  
                                    l6991 0ADA                                      l6983 0AC0  
                                    l6975 0AA5                                      l7855 1FFA  
                                    l7847 1FED                                      l7599 1535  
                                    l9713 134A                                      l6985 0AC9  
                                    l6977 0AB3                                      l7857 1FFE  
                                    l8905 1AC7                                      l8657 1B97  
                                    l9393 16C2                                      l9385 16A4  
                                    l9731 1369                                      l6899 0EA5  
                                    l6987 0ACC                                      l9741 1384  
                                    l9901 1B65                                      l9389 16B3  
                                    l9719 1355                                      l9831 07A4  
                                    l9911 1D13                                      l9745 138C  
                                    l9737 137B                                      l9729 135D  
                                    l9841 07B7                                      l9913 1D16  
                                    _CFGS 0CAE                                      l9851 07DF  
                                    l9853 07E5                                      l9829 07A1  
                                    l9917 1D1C                                      l9855 07EF  
                                    l9839 07B2                              __CFG_WDTE$ON 0000  
                                    l9785 1CF3                                      l9875 1CAC  
                                    l9939 1926                                      l9877 1CB5  
                                    l9973 0AFF                                      l9957 118F  
                                    l9887 1CC4                                      l8999 1C2D  
                                    l9895 1B5C                                      l9897 1B5F  
                                    l9993 1D36                                      l9985 0B56  
                                    l9969 0AFA                                      l9995 1D39  
                                    l9999 1D3F                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5305 15BF  
                                    u6025 0F1B                                      u6105 0AA6  
                                    u6035 0F21                                      _PEIE 005E  
                                    u5325 15D8                                      u6135 0AC1  
                                    u5345 15E5                                      u6075 0A7C  
                                    u5375 15FB                                      u5715 03BD  
                                    u5805 03F6                                      u6375 0BB4  
                                    u5745 03D0                                      u5905 0DB7  
                                    u5915 0DC1                                      u6565 1D7E  
                                    u5775 03E3                                      u5875 0D78  
                                    u5955 0EC7                                      u5885 0D88  
                                    u5965 0ED7                                      u9405 1C34  
                                    u7565 1AAF                                      u5895 0DA8  
                                    u9415 1C39                                      u5985 0EFF  
                                    u5995 0F05                                      u7915 1F72  
                                    u7595 1B78                                      u9445 12B3  
                                    u7925 1F7C                                      u7935 1F84  
                                    u9705 0996                                      u7895 1F68  
                                    u9755 09C5                                      _LWLO 0CAD  
                                    _RSSI 012E                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1B53  
              _setDimmerLights_DimmingRun 1B3B                                      _Buz1 00DC  
                                    _Load 0132                                      _Temp 015A  
                                    _main 1492                              ___ftpack@arg 0072  
                     __end_of_DlyOff_Main 0968                           __end_of_RF_Main 27BE  
                            ___ftpack@exp 0075                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1855                                      ltemp 007E  
           __size_of_setRF_Initialization 000A                                      start 001F  
                                    ttemp 007E                                      wtemp 007E  
       setDimmerLights_SwOn@dimmingStatus 0026      __end_of_DimmerLights_DimmingFunction 0D39  
   __size_of_DimmerLights_DimmingFunction 00A8              _DimmerLights_DimmingFunction 0C91  
              __end_of_setRFSW_AdjControl 0B6A                         ___bmul@multiplier 0075  
                            ___ftmul@cntr 0034                              ___ftmul@sign 0035  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2730 0075  
    _getDimmerLights_Allow_Condition$2731 0076      _getDimmerLights_Allow_Condition$2729 0074  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0071  
                            ___fttol@exp1 0053                ?_DimmerIntr_ValueCalculate 0070  
                            ___fttol@lval 004F         setDimmerLights_DimmingRun@command 0074  
 __end_of_getDimmerLights_Allow_Condition 2000  __size_of_getDimmerLights_Allow_Condition 0037  
       ??_getDimmerLights_Allow_Condition 0073          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1FC9                    _getDimmerLights_Status 18EC  
                      ??_getDimmer_LoadGO 0072                          __end_of_LED_Main 18D2  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 012C  
                                   l10101 1467                                     l10021 1243  
                                   l10031 1253                                     l10023 1246  
                                   l10033 1256                                     l10027 124C  
                                   l10211 08ED                                     l10203 08E0  
                                   l11021 11B6                                     l10037 125C  
                                   l10205 08E4                                     l10141 0C1B  
                                   l10133 0BF7                                     l10231 1621  
                                   l10207 08E7                                     l10151 0C5D  
                                   l10143 0C21                                     l10313 0FCC  
                                   l10161 0C71                                     l10153 0C61  
                                   l10411 1E20                                     l11123 0154  
                                   l10251 1636                                     l10235 1627  
                                   l10155 0C65                                     l10147 0C3C  
                                   l10341 1403                                     l10333 0FFD  
                                   l10317 0FD0                                     l11133 017D  
                                   l10253 164C                                     l10229 161E  
                                   l10173 08A1                                     l10157 0C69  
                                   l10165 0C75                                     l11143 0199  
                                   l10175 08A4                                     l10159 0C6D  
                                   l10601 0CDA                                     l11153 01AF  
                                   l11129 0163                                     l11137 0189  
                                   l11057 0069                                     l10193 08B9  
                                   l10291 0F8C                                     l11251 054E  
                                   l11091 00AE                                     l11075 008A  
                                   l10179 08AA                                     l11219 1102  
                                   l11261 056C                                     l10197 08D7  
                                   l11341 14B6                                     l10631 0D10  
                                   l10607 0CE7                                     l10295 0F96  
                                   l11271 056F                                     l10199 08DA  
                                   l10463 1584                                     l10447 1562  
                                   l10289 0F83                                     l10561 17F3  
                                   l11273 059B                                     l11257 055D  
                                   l11097 00E0                                     l11345 14C1  
                                   l10643 0D2C                                     l10299 0FA0  
                                   l10547 17C1                                     l11291 05DC  
                                   l10707 0A4D                                     l10459 157B  
                                   l10661 13D1                                     l10549 17C7  
                                   l11293 05E6                                     l11269 0593  
                                   l11189 01DC                                     l10821 0727  
                                   l10741 048E                                     l10559 17ED  
                                   l11287 05D4                                     l10735 047F  
                                   l10743 0491                     ?_setDimmerLights_Main 0070  
                                   l11289 05B0                                     l10681 19C3  
                                   l10905 0297                                     l10659 13C0  
                                   l11299 05F6                                     l10835 073B  
                                   l10589 0CBC                                     l10693 09E0  
                                   l10861 0779                                     l10773 0500  
                                   l10919 02D5                                     l10783 0515  
                                   l10849 0765                                     l10929 0307  
                                   l10785 0517                                     l10971 1F11  
                                   l10699 09F4                                     l10895 0265  
                                   l10879 0222                                     l10995 067C  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005D  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0255  
                         __end_of___awdiv 1393                           __end_of___lbdiv 1CC6  
                         __end_of___ftadd 045A                           __end_of___ftdiv 0DE2  
                         __end_of___ftneg 1841                                     u10115 168C  
                                   u10125 169B                                     u10135 16AA  
                                   u10145 16B9                                     u10155 16C8  
                         __end_of___ftmul 0F42                                     u13000 0599  
                                   u12115 04E9                           ___awdiv@divisor 0072  
                                   u10605 136A                                     u13005 0578  
                                   u13030 05DA                                     u10615 1374  
                                   u12135 0507                                     _T1CON 0018  
                                   u10625 137C                                     u10705 1A85  
                                   u12225 0704                                     u13035 05B9  
                         __end_of___fttol 0AE3                                     u12255 0754  
                                   u12095 04D2                                     u10585 1360  
                                   u12715 00AC                                     u12725 00DE  
                                   u12575 11CE                                     u12815 0190  
                                   u12735 0113                                     _IOCBF 0396  
                                   u12935 1118                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1F93  
                                   i1l995 10A0                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0073  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1AB5  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 179B  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1736  
                                   _Light 012D                          __end_of_TMR1_ISR 1CE8  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 18DE        DimmerLights_DimmingFunction@lights 0026  
                                   _getAD 1B87                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076                           __end_of_setData 12A6  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0072  
                        __end_of_WDT_Main 19A7               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0077                            __pbitbssCOMMON 03D0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 19DA  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010             __end_of_setLED_Initialization 1977  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                     _getAll_Sw_KeyStatus 19B8                        _setRF_DimmerLights 082B  
                         ___lbdiv@divisor 0072               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0075  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 005F  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 190A                   __size_of_getDelayOff_GO 000F  
                            __end_of_main 14ED                       ?_setRF_DimmerLights 005D  
                        __end_of_Fosc_Set 27C5            getMain_All_LightsStatus@status 0072  
                      ??_setMemory_Modify 0072              setDimmerLights_OnOff@command 0065  
                          _Exception_Main 052F                          ?_CC2500_WriteREG 0074  
       __end_of_DimmerIntr_ValueCalculate 1492                                 ??_ADC_Set 0072  
                    _setSw_Initialization 1811                                    ??_main 007A  
                           ___fttol@sign1 004E                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0072  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0BF6  
                          _setMemory_Data 186A                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 13E7  
                               ??_IOC_ISR 0071                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00A0                               _DimmerIntr2 00B0  
                _getMain_All_LightsStatus 1919                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1A76                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0065                      ??_setRF_DimmerLights 005E  
                                  ?_getAD 0072                         ??_getRF_KeyStatus 0072  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08F9  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E          __end_of_getDimmerIntr_Dimming_Sw 1AF5  
                               ??_RF_Main 007A               ?_DimmerLights_TwoPhase_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 1803  
                               ??_WDT_Set 0072                          __end_of___awtoft 1D0A  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 160B  
                _getMain_All_Error_Status 1E3C                                    _IOCBF2 1CB2  
                                  i1l1019 10D8                                    i1l1462 001A  
                                  i1l8513 1EC2                                    i1l9081 1CE1  
                                  i1l9091 189E                                    i1l8531 10C6  
                                  i1l8525 10BF                                    i1l8463 1087  
                                  i1l8537 10CE                                    i1l8475 1096  
                                  i1l8469 108E                                    i1l8575 1EF2  
                                  i1l9627 0012                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0078                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01A0                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1BD7  
                                  u954_25 1CDC                                    _WDTCON 0097  
    __end_of_setDimmerLights_DimmingClose 184B     __size_of_setDimmerLights_DimmingClose 000A  
            _setDimmerLights_DimmingClose 1841                        DelayTime_1us@count 0072  
                      setRF_AdjControl@sw 0079                      Exception_Main@i_7782 002B  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 005B  
           __end_of_CC2500_PowerOnInitial 1AA0                                    _Dimmer 0120  
                                  _DlySw1 01E2                                    _DlySw2 01E7  
                        _setRF_AdjControl 1F93                  ?_setOverTemp_ADV_Restore 0070  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1967  
              __end_of_Mcu_Initialization 1A0E                       __end_of_Buzzer_Main 12EC  
                                  _Memory 0230                                    _Timer1 0125  
                                  ___bmul 19A7                    __end_of_Exception_Main 0601  
                    Exception_Main@lights 002D                                    ___wmul 1C2B  
                               ??___awdiv 0076                                 ??___lbdiv 0073  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 0015  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 0131  
                    Exception_Main@status 0026   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1BD7  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1BBC  
                                  _s_data 00EF                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 14ED                                    _myMain 00CF  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 1875  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 12EC                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0027               __end_of_Load_Initialization 27B8  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0072          __end_of_setDimmerIntr_Dimming_RF 1DE9  
        __end_of_setDimmerIntr_Dimming_Sw 1D74                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 1D99                                 ??_setData 0072  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1997               getMain_Lights_Count@status1 0073  
             getMain_Lights_Count@status2 0074               __size_of_DimmerLights_IOC_1 0030  
             __size_of_DimmerLights_IOC_2 0030                     __end_of_SwPointSelect 1ADF  
             __size_of_DimmerLights_TMR_1 0038               __size_of_DimmerLights_TMR_2 0038  
            __size_of_Flash_Memory_Modify 0082                   __size_of_LedPointSelect 001D  
         setDimmerIntr_Dimming_Sw@command 0072                        setTemp_Main@TempGO 0060  
                        ___lbdiv@dividend 0074                       Flash_Memory_Write@i 0073  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1AB5  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 004F  
         getDimmerIntr_DimmingValue@value 0073           setDimmerIntr_DimmingValue@value 0072  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$5745 0074  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0029  
               _setDimmerLights_SwOn$2659 0027                 _setDimmerLights_SwOn$2668 0028  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
           ?_setDimmerLights_DimmingClose 0070                                ___ftneg@f1 0036  
                              ___awtoft@c 0020                       ___bmul@multiplicand 0072  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 0026  
                              ___ftmul@f2 0029                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 0046                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK5 1C85  
                           __end_of_getAD 1BA1                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0073  
               setMemory_LoopSave@command 0073                        _LED_Initialization 18BA  
                         _getSw_KeyStatus 1C65                 ??_setControl_Lights_Table 007A  
                      getRF_KeyStatus@key 0073     DimmerLights_AssignationDimming@status 005F  
                         ?_setMemory_Data 0072            ??_DimmerLights_DimmingFunction 0025  
        ??_getDimmerLights_PercentToValue 0054           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 0063             ??_Flash_Memory_Initialization 0076  
                        ___lbdiv@quotient 0076                      _getMain_Lights_Count 19C9  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F3  
       setDimmerIntr_ControlStatus@lights 0074                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 1AF5                __end_of_set_TimeoutCleared 27DF  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 005F  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 18A2                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 27BE                        ??_CC2500_WriteByte 0072  
                               ?_Division 0077                                __pbssBANK0 006C  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 12A6  
                       ??_setRFSW_Control 0065               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 1803                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1818  
                              __pnvCOMMON 007B                             ??_Switch_Main 007A  
                          DelayTime_1us@i 0074                            DelayTime_1us@j 0076  
                    ??_LED_Initialization 0077                              _DimmerLights 006C  
                       LedPointSelect@led 0073     getAll_DimmerIntr_Dimming_Sw_RF@status 0075  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0011  
                             setBuz@count 0078                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1492                            _getDelayOff_GO 190A  
                     _CC2500_WriteCommand 1B53                      ?_Temp_Initialization 0070  
                                 ?___bmul 0072                          ??_setDelayOff_GO 005F  
       __end_of_DimmerIntr_Initialization 0E8E             ??_DimmerLights_Initialization 007A  
                                 ?___wmul 0072                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070         __size_of_getDimmerIntr_Dimming_Sw 0016  
                              _getLoad_AD 0968                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 27EB                 ?_getDimmerIntr_Dimming_Sw 0070  
                      __size_of_setTxData 0007               ??_DimmerIntr_ValueCalculate 0022  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
     __size_of_DimmerLights_TwoPhase_Main 0054                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 180A                                   ?_setBuz 0024  
                               ?___awtoft 0020                                 ?___ftpack 0072  
                              _getTemp_AD 166D        __end_of_DimmerLights_SelectPointer 1A4C  
              _DimmerLights_SelectPointer 1A37                                ??_WDT_Main 0072  
            __end_of_setRF_Initialization 185F                        _setRFSW_AdjControl 0AE3  
                  __end_of_setProductData 18AE             setDimmerLights_Dimming@lights 0065  
                                 _IOC_ISR 1896                                   _IOC_Set 1875  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 0062  
   getDimmerLights_Allow_Condition@lights 0077                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 119C                 __size_of_getDimmer_LoadGO 0007  
                       _Flash_Memory_Read 1066                    __size_of_CC2500_RxData 0062  
                  __size_of_CC2500_TxData 0068                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 27BB  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0078                                   _WDT_Set 184B  
         __end_of_setControl_Lights_Table 0C91                           setRF_Main@error 006B  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 143B  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 188B                           __size_of_IO_Set 001B  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1987  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1919                                   _VarLED1 016C  
                                 _VarLED2 01EC            __end_of_getDimmerLights_Status 18FB  
                       __end_of_getRxData 15AB                   __end_of_getSw_KeyStatus 1C85  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005D                            ??_setTemp_Main 005D  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 133F            ??_setDimmerLights_DimmingClose 0075  
                                 ___lbdiv 1CA5                                   ___ftadd 0364  
                                 ___ftdiv 0D39                                   ___ftneg 1838  
                         __size_of___wmul 001D                                   ___ftmul 0E8E  
                                 ___fttol 0A5C                       __end_of_Switch_Main 1896  
                                 ___lwdiv 1F5D                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 19DA  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0060  
         DimmerIntr_ValueCalculate@lights 0024                           __size_of_setBuz 0053  
                                 __ptext1 10EA                                   __ptext2 18DE  
                                 __ptext3 166D                                   __ptext4 0968  
                                 __ptext5 1B87                                   __ptext6 1997  
                                 __ptext7 0002                                   __ptext8 1800  
                                 __ptext9 045A                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0072  
                 ??_setDimmerLights_OnOff 0066                           ?_setProductData 005A  
               __end_of_Flash_Memory_Main 11DD                 __end_of_Flash_Memory_Read 107A  
                 ??_setDimmerLights_SwOff 0074                                _setRF_Main 06C5  
                 ??_myMain_Initialization 0072                             _DelayOff_Main 1820  
                __end_of_setRF_AdjControl 1FC9                         _DimmerLights_Main 1EF9  
                                 _setData 1262            __size_of_DlyOff_Initialization 0005  
                   ??_CC2500_WriteCommand 0074                 __size_of_setMemory_Modify 0010  
           __end_of_DlyOff_Initialization 27DA                __end_of_CC2500_ClearRXFIFO 27CD  
                ??_setTemp_Initialization 0072                __end_of_CC2500_ClearTXFIFO 27D1  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 007B                            _LedPointSelect 1C0E  
               getAll_Sw_KeyStatus@status 0073                           getTemp_AD@ADRES 0078  
                     _DelayOffPointSelect 1A22                                   clrloop0 27E6  
          __size_of_Switch_Initialization 0008                 _DimmerIntr_ValueCalculate 143B  
           __end_of_Switch_Initialization 1838                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 0801  
                           _DelayTime_1us 1D74                         __end_of_setTxData 27F9  
              __end_of_Flash_Memory_Write 1E3C        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 27DF                __end_of_setRF_TransceiveGO 1957  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 27E0  
                              _setSw_Main 01F3                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 002A                         _CC2500_ReadStatus 1D2C  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1967  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 160B                             _CC2500_TxData 0891  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 09DA  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1A4C                       _Flash_Memory_Unlock 07F7  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                   setTemp_Main@DangerValue 0063  
                  setSw_Initialization@sw 0076                 __end_of_DimmerLights_Main 1F29  
                      _Mcu_Initialization 19FC                  __size_of_CC2500_PowerRST 0044  
        __size_of_setOverTemp_ADV_Restore 001A              __end_of_setRF_TimeoutCleared 27C9  
                    __end_of_my_MainTimer 1122                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1C2B  
                __size_of_CC2500_WriteREG 0022                  Load_Main@ErrorCountValue 0025  
        getDimmerIntr_DimmingValue@lights 0074          setDimmerIntr_DimmingValue@lights 0074  
               __end_of_CC2500_InitSetREG 082B                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0066  
       DimmerLights_AssignationDimming@sw 0060                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 1D4F                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 1DC0  
                        ??_Exception_Main 0079                            __end_of_IO_Set 1BF2  
                    _setRF_Initialization 1855                        _setMemory_LoopSave 1987  
                             _Switch_Main 188B                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 19EB  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1A8B               ??_DimmerIntr_Initialization 005A  
                    ??_Mcu_Initialization 0073               __end_of_getAll_Sw_KeyStatus 19C9  
                   ??_DelayOffPointSelect 0072                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0072                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 19B8       __size_of_getDimmerIntr_DimmingValue 0014  
        DimmerLights_TwoPhase_Main@lights 0061                      setRF_DimmerLights@on 005D  
                          __end_of___wmul 1C48                         getSw_KeyStatus@sw 0076  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0022  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0065  
                          __end_of_setLED 154C             __size_of_setDimmerLights_Line 0017  
           __size_of_setDimmerLights_SwOn 0073                            __end_of_setBuz 133F  
              __end_of_DimmerLights_IOC_1 1EC9                __end_of_DimmerLights_IOC_2 1EF9  
                    _CC2500_FrequencyCabr 1880                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 115C  
                       __size_of_WDT_Main 0010                __end_of_DimmerLights_TMR_1 10B2  
              __end_of_DimmerLights_TMR_2 10EA                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 27F9                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1C65           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 052F                            ??_RF_RxDisable 0072  
  __end_of_getDimmerLights_PercentToValue 1736   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 16D1                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007             setRF_AdjControl@dimmingStatus 0078  
                      _set_TimeoutCleared 27DA         __end_of_setDimmerIntr_MaxmumValue 1B0C  
                                ??_IO_Set 0072                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0168                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0064  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 1800                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00EC  
                   setProductData@address 005C                       Exception_Main@count 0027  
                     Exception_Main@error 0028                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 0015  
        __end_of_getMain_All_LightsStatus 1928                                 _Tx_Length 00EE  
                             __pdataBANK5 02A0                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1E6A  
                        _CC2500_SIDLEMode 27D1                __size_of_DimmerLights_Main 0030  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074            getDimmerIntr_Dimming_Sw@lights 0073  
                           ??_setLED_Main 0074                         __size_of___awtoft 0022  
                       __size_of___ftpack 0060                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 0026  
          getDimmerIntr_Dimming_Sw@status 0072                                 ___latbits 0003  
                        _setMemory_Modify 1937                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                 setRF_TransceiveGO@command 0073  
                           __pcstackBANK4 0255                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 0DE2                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 005F  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 01BE  
                           _DimmerLights2 01C7                     CC2500_WriteREG@w_addr 0076  
                   setDelayOff_GO@command 005D            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1BBC  
                setRFSW_AdjControl@status 005F                           ??_CC2500_TxData 0076  
                          getRxData@error 0069               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 27C5                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0029                                ?_Temp_Main 0070  
      __size_of_DimmerIntr_ValueCalculate 0057                       __size_of_setRF_Main 00BF  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1957                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005E  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 0800  
                               _getBuz_GO 1977                  ?_setDimmerLights_Dimming 0062  
     __end_of_Flash_Memory_Initialization 06C5               _Flash_Memory_Initialization 0601  
                                ?___awdiv 0072                                 __ptext100 1919  
                               __ptext101 190A                                  ?___lbdiv 0072  
                               __ptext110 1FC9                                 __ptext102 1957  
                               __ptext111 27EB                                 __ptext103 13E7  
                               __ptext120 27B1                                 __ptext112 1E3C  
                               __ptext104 27F2                                 __ptext121 0DE2  
                               __ptext113 1393                                 __ptext105 1947  
                               __ptext130 1CE8                                 __ptext122 1937  
                               __ptext114 1E6A                                 __ptext106 082B  
                               __ptext131 15AB                                 __ptext123 1736  
                               __ptext115 1AF5                                 __ptext107 1B0C  
                               __ptext140 1ADF                                 __ptext132 18FB  
                               __ptext124 16D1                                 __ptext116 1DC0  
                               __ptext108 1D4F                                 __ptext141 1122  
                               __ptext133 1CA5                                 __ptext125 0A5C  
                               __ptext117 0C91                                 __ptext109 1A0E  
                                ?___ftadd 0039                                 __ptext150 1CC6  
                               __ptext142 18EC                                 __ptext134 1820  
                               __ptext126 1838                                 __ptext118 143B  
                               __ptext151 10B2                                 __ptext143 1A37  
                               __ptext135 08F9                                 __ptext127 0E8E  
                               __ptext119 185F                                 __ptext152 107A  
                               __ptext144 1818                                 __ptext136 18A2  
                               __ptext128 0D39                                 __ptext153 1896  
                               __ptext145 27D5                                 __ptext137 0784  
                               __ptext129 0364                                 __ptext154 1EC9  
                               __ptext146 1A22                                 __ptext138 12EC  
                               __ptext155 1E99                                 __ptext147 12A6  
                               __ptext139 133F                                 __ptext148 27B2  
                               _getRxData 154C                                  ?___ftdiv 0026  
                                ?___ftneg 0036                                  ?___ftmul 0026  
                                ?___fttol 0046                     __size_of_my_MainTimer 0038  
                                ?___lwdiv 0072                   __end_of_setRFSW_Control 119C  
                        ??_setProductData 005B                   _setOverTemp_ADV_Restore 1B6D  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 27B5                             ??_setLog_Code 005D  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1ACA  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1A22              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1A0E                    CC2500_WriteByte@loop_a 0073  
                                ?_setData 0070            __size_of_setDimmerLights_OnOff 00BE  
                       ?_setRF_AdjControl 0070                                 _r_address 0130  
           __end_of_setDimmerLights_OnOff 1000            __size_of_setDimmerLights_SwOff 003A  
          __size_of_myMain_Initialization 000E             __end_of_setDimmerLights_SwOff 115C  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 18EC  
                          __size_of_getAD 001A                          ___lwdiv@quotient 0077  
                      ??_setRF_AdjControl 0076                             _SwPointSelect 1ACA  
                     __end_of_setLED_Main 121E              ??_DimmerLights_TwoPhase_Main 007A  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 27C1                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 18C6  
                         SwPointSelect@sw 0073                                 clear_ram0 27E5  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 10EA                                 _setTxData 27F2  
     __end_of_DimmerLights_Initialization 186A               _DimmerLights_Initialization 185F  
                      _CC2500_ClearRXFIFO 27C9                    _Flash_Memory_Main$3708 0021  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 27CD  
                _getDimmerIntr_Dimming_Sw 1ADF                  setRF_DimmerLights@lights 0061  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 19FC  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0060      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 0087       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 1E12                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 1CC6  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 18D2  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1947                                  _RF_Count 0128  
                    __end_of_RF_RxDisable 1830                              ??_getTemp_AD 0076  
             __end_of_CC2500_WriteCommand 1B6D                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 1997                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0075                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0072                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00D5                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00EA  
                            setSw_Main@sw 002D                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 18BA  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1F5D  
                   _DlyOff_Initialization 27D5         __size_of_getMain_All_LightsStatus 000F  
                    ??_CC2500_ClearRXFIFO 0076                                  _Division 18FB  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0076  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1DC0               setDimmerLights_OnOff@lights 0068  
                _setDimmerIntr_Dimming_Sw 1D4F                                  _Fosc_Set 27C1  
                        __size_of_WDT_Set 000A                     setRFSW_Control@status 0066  
                      __end_of_getLoad_AD 09DA                        __end_of_getLoad_OK 27F2  
                   _Switch_Initialization 1830         __size_of_getMain_All_Error_Status 002E  
                    ??_Flash_Memory_Write 0072                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                        __end_of_getTemp_AD 16D1  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1B23                         getLoad_AD@channel 0020  
     __size_of_DimmerLights_SelectPointer 0015                      ??_setRF_TransceiveGO 0072  
                                _SwDetect 012F                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0067             _getMain_All_Error_Status$7770 0075  
           _getMain_All_Error_Status$7769 0073                  __end_of_getDimmer_LoadGO 2800  
                     _Load_Initialization 27B5          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
               ??_setOverTemp_ADV_Restore 0072                              _setTemp_Main 045A  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0029  
                                ___awtoft 1CE8                          ??_LedPointSelect 0072  
                                ___ftpack 15AB             __size_of_getMain_Lights_Count 0011  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 006A                      CC2500_WriteREG@value 0074  
                             _setLED_Main 11DD                __end_of_setRF_DimmerLights 0891  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 180A                          setDelayOff_GO@sw 0064  
                         ___lwdiv@divisor 0072                          __size_of_setData 0044  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0079  
                                __ptext10 1B6D                                  __ptext11 27BE  
                                __ptext20 27DA                                  __ptext12 0800  
                                __ptext21 1AA0                                  __ptext13 188B  
                                __ptext30 0BF6                                  __ptext22 1830  
                                __ptext14 01F3                                  __ptext31 1F93  
                                __ptext23 1811                                  __ptext15 19EB  
                                __ptext40 1D2C                                  __ptext32 115C  
                                __ptext24 27BB                                  __ptext16 1D99  
                                __ptext41 1BF2                                  __ptext33 0AE3  
                                __ptext25 06C5                                  __ptext17 1C65  
                                __ptext50 27CD                                  __ptext42 1A8B  
                                __ptext34 1B3B                                  __ptext26 1262  
                                __ptext18 1ACA                                  __ptext51 27C9  
                                __ptext43 27D1                                  __ptext35 19DA  
                                __ptext27 154C                                  __ptext19 1AB5  
                                __ptext60 18D2                                  __ptext52 1B53  
                                __ptext44 121E                                  __ptext36 1977  
                                __ptext28 1F29                                  __ptext61 1BD7  
                                __ptext53 27C5                                  __ptext45 0801  
                                __ptext37 1828                                  __ptext29 1987  
                                __ptext70 1C2B                                  __ptext62 1875  
                                __ptext54 1A76                                  __ptext46 1C48  
                                __ptext38 0891                                  __ptext71 1F5D  
                                __ptext63 27C1                                  __ptext55 1B23  
                                __ptext47 1D0A                                  __ptext39 160B  
                                __ptext80 09DA                                  __ptext72 27B5  
                                __ptext64 180A                                  __ptext56 27B8  
                                __ptext48 1880                                  __ptext81 18AE  
                                __ptext73 1BA1                                  __ptext65 0053  
                                __ptext57 1855                                  __ptext49 1D74  
                                __ptext90 179B                                  __ptext82 0601  
                                __ptext74 18C6                                  __ptext66 19C9  
                                __ptext58 19FC                                  __ptext91 0F42  
                                __ptext83 186A                                  __ptext75 11DD  
                                __ptext67 1803                                  __ptext59 184B  
                                __ptext92 14ED                                  __ptext84 1E12  
                                __ptext76 18BA                                  __ptext68 27F9  
                                __ptext93 1C0E                                  __ptext85 07F7  
                                __ptext77 1967                                  __ptext69 1BBC  
                                __ptext94 1841                                  __ptext86 1066  
                                __ptext78 119C                                  __ptext95 1A61  
                                __ptext87 052F                                  __ptext79 19B8  
                                __ptext96 1DE9                                  __ptext88 1928  
                                __ptext97 0B6A                                  __ptext89 1EF9  
                                __ptext98 19A7                                  __ptext99 1A4C  
                                __product 02A0                   ??_setLED_Initialization 0076  
                ??_getDimmerLights_Status 0074              __end_of_getDimmerLights_Line 1937  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1B23  
                      _DimmerLights_IOC_1 1E99                        _DimmerLights_IOC_2 1EC9  
            __end_of_setDimmerLights_SwOn 07F7                              ??_setSw_Main 002B  
                  ??_setRF_TimeoutCleared 0072              ??_setDimmerLights_DimmingRun 0075  
                           setLED@command 0074                             __size_of_main 005B  
                             _setRF_Learn 19EB        __size_of_DimmerIntr_Initialization 00AC  
                         ??_getCmd_Status 0072                        _DimmerLights_TMR_1 107A  
                      _DimmerLights_TMR_2 10B2                  __end_of_CC2500_SIDLEMode 27D5  
              setDimmerLights_Main@lights 0069               __end_of_DelayOffPointSelect 1A37  
                setOverTemp_ADV_Restore@i 0073                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1BF2                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1C48                  __end_of_setMemory_Modify 1947  
    _getAll_DimmerIntr_Dimming_Sw_RF$2605 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2606 0074  
                     ?_DimmerLights_IOC_1 0070                       ?_DimmerLights_IOC_2 0070  
                      __end_of_setRF_Main 0784                               ??_getBuz_GO 0074  
                     ?_DimmerLights_TMR_1 0070                       ?_DimmerLights_TMR_2 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0068                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1A8B               Flash_Memory_Main@key_Status 0020  
                _getAll_Sw_KeyStatus$6943 0074                                  main@argc 0255  
                                main@argv 0257                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6940 0074                      _getSw_KeyStatus$6939 0073  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 121E  
                __size_of_getSw_KeyStatus 0020              setDimmerLights_Dimming@value 0064  
      __end_of_setDimmerIntr_DimmingValue 1A76                _setDimmerIntr_DimmingValue 1A61  
             __end_of_Flash_Memory_Modify 0A5C              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 1F29               __end_of_Flash_Memory_Unlock 0800  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1D0A  
                      __end_of_setSw_Main 0364                     ??_Load_Initialization 0074  
                    ??_DimmerLights_IOC_1 0070                      ??_DimmerLights_IOC_2 0070  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                      ??_DimmerLights_TMR_2 0070  
                          Division@result 0021           __end_of_setOverTemp_ADV_Restore 1B87  
      __end_of_DimmerLights_TwoPhase_Main 13E7                _DimmerLights_TwoPhase_Main 1393  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0061                           setDelayOff_GO@j 0062  
                         setDelayOff_GO@k 0063                   ??_CC2500_PowerOnInitial 007A  
                   setTemp_Main@SafeValue 0061    __end_of_setDimmerLights_Initialization 27B2  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 27B1  
              ?_setDimmerIntr_MaxmumValue 005A                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0078  
                         getLoad_AD@ADRES 0023                     __size_of_RF_RxDisable 0008  
                       _RF_Initialization 27B8                               getLoad_AD@i 0025  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
 __end_of_DimmerLights_AssignationDimming 1E99  __size_of_DimmerLights_AssignationDimming 002F  
       ??_DimmerLights_AssignationDimming 005D          ?_DimmerLights_AssignationDimming 0070  
         _DimmerLights_AssignationDimming 1E6A                      _Flash_Memory_Erasing 18AE  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00ED  
                 __size_of_Exception_Main 00D2                             Division@value 0020  
         __end_of_DelayOff_Initialization 1820                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1828                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0B6A  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 009B  
        __size_of_setDimmerLights_Dimming 0054               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00C4               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005D                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 1D99                ??_getDimmerIntr_Dimming_Sw 0072  
                 __end_of_CC2500_ReadByte 1C0E              __end_of_setSw_Initialization 1818  
                         _Timeout_Counter 1AA0           __size_of_getDimmerLights_Status 000F  
         getDimmerLights_ValueToPercent@i 0057                              _RF_RxDisable 1828  
        Flash_Memory_Initialization@value 0077                __end_of_LED_Initialization 18C6  
          __end_of_setTemp_Initialization 0801                               Division@num 0077  
                 setMemory_Modify@command 0073                 __end_of_RF_Initialization 27BB  
               __size_of_setRF_AdjControl 0036                     __end_of_CC2500_RxData 166D  
                   __end_of_CC2500_TxData 08F9                     _setLoad_AH_AL_Restore 1BA1  
                 __end_of_CC2500_PowerRST 1262  
