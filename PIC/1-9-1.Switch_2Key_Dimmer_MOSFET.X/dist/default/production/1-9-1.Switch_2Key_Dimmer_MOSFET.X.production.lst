

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Dec 10 17:34:02 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1EBD                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1EBD  3463               	retlw	99
  2163  1EBE  3402               	retlw	2
  2164  1EBF  3400               	retlw	0
  2165  1EC0  3400               	retlw	0
  2166  1EC1  3400               	retlw	0
  2167  1EC2  3400               	retlw	0
  2168  1EC3  3400               	retlw	0
  2169  1EC4  3400               	retlw	0
  2170  1EC5  3400               	retlw	0
  2171  1EC6  3400               	retlw	0
  2172  1EC7  3400               	retlw	0
  2173  1EC8  3400               	retlw	0
  2174  1EC9  34FF               	retlw	255
  2175  1ECA  34FF               	retlw	255
  2176  1ECB  34FF               	retlw	255
  2177  1ECC  3400               	retlw	0
  2178  1ECD  3400               	retlw	0
  2179  1ECE  3400               	retlw	0
  2180  1ECF  3400               	retlw	0
  2181  1ED0  3400               	retlw	0
  2182  1ED1  3400               	retlw	0
  2183  1ED2  3400               	retlw	0
  2184  1ED3  3400               	retlw	0
  2185  1ED4  3400               	retlw	0
  2186  1ED5  3400               	retlw	0
  2187  1ED6  3400               	retlw	0
  2188  1ED7  3400               	retlw	0
  2189  1ED8  3400               	retlw	0
  2190  1ED9  3400               	retlw	0
  2191  1EDA  3400               	retlw	0
  2192  1EDB  3400               	retlw	0
  2193  1EDC  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvBANK0
  2307  006E                     __pnvBANK0:	
  2308  006E                     _product:	
  2309  006E                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0063                     _RA3	set	99
  2322  0064                     _RA4	set	100
  2323  0066                     _RA6	set	102
  2324  0067                     _RA7	set	103
  2325  0068                     _RB0	set	104
  2326  0069                     _RB1	set	105
  2327  006A                     _RB2	set	106
  2328  006B                     _RB3	set	107
  2329  006C                     _RB4	set	108
  2330  006D                     _RB5	set	109
  2331  0070                     _RC0	set	112
  2332  0071                     _RC1	set	113
  2333  0072                     _RC2	set	114
  2334  0074                     _RC4	set	116
  2335  0075                     _RC5	set	117
  2336  0077                     _RC7	set	119
  2337  0088                     _TMR1IF	set	136
  2338  009D                     _ADCON0	set	157
  2339  009E                     _ADCON1	set	158
  2340  009C                     _ADRESH	set	156
  2341  009B                     _ADRESL	set	155
  2342  0099                     _OSCCON	set	153
  2343  008C                     _TRISA	set	140
  2344  008D                     _TRISB	set	141
  2345  008E                     _TRISC	set	142
  2346  0097                     _WDTCON	set	151
  2347  04E9                     _GO_nDONE	set	1257
  2348  0488                     _TMR1IE	set	1160
  2349  0117                     _FVRCON	set	279
  2350  010C                     _LATA	set	268
  2351  010D                     _LATB	set	269
  2352  010E                     _LATC	set	270
  2353  018C                     _ANSELA	set	396
  2354  018D                     _ANSELB	set	397
  2355  018E                     _ANSELC	set	398
  2356  0192                     _PMADRH	set	402
  2357  0191                     _PMADRL	set	401
  2358  0196                     _PMCON2	set	406
  2359  0194                     _PMDATH	set	404
  2360  0193                     _PMDATL	set	403
  2361  0CAE                     _CFGS	set	3246
  2362  0CAC                     _FREE	set	3244
  2363  0CAD                     _LWLO	set	3245
  2364  0CA8                     _RD	set	3240
  2365  0CA9                     _WR	set	3241
  2366  0CAA                     _WREN	set	3242
  2367  1069                     _WPUB1	set	4201
  2368  106A                     _WPUB2	set	4202
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0015                     start_initialization:	
  2378  0015                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITCOMMON
  2381  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to COMMON
  2384  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2385  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2386  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2387  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2388  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BANK0
  2391  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2392                           
  2393                           ; Clear objects allocated to BANK1
  2394  001C  30A0               	movlw	low __pbssBANK1
  2395  001D  0084               	movwf	4
  2396  001E  3000               	movlw	high __pbssBANK1
  2397  001F  0085               	movwf	5
  2398  0020  3048               	movlw	72
  2399  0021  319A  22B8  3180   	fcall	clear_ram0
  2400                           
  2401                           ; Clear objects allocated to BANK2
  2402  0024  3020               	movlw	low __pbssBANK2
  2403  0025  0084               	movwf	4
  2404  0026  3001               	movlw	high __pbssBANK2
  2405  0027  0085               	movwf	5
  2406  0028  3050               	movlw	80
  2407  0029  319A  22B8  3180   	fcall	clear_ram0
  2408                           
  2409                           ; Clear objects allocated to BANK3
  2410  002C  30A0               	movlw	low __pbssBANK3
  2411  002D  0084               	movwf	4
  2412  002E  3001               	movlw	high __pbssBANK3
  2413  002F  0085               	movwf	5
  2414  0030  304B               	movlw	75
  2415  0031  319A  22B8  3180   	fcall	clear_ram0
  2416                           
  2417                           ; Clear objects allocated to BANK4
  2418  0034  3020               	movlw	low __pbssBANK4
  2419  0035  0084               	movwf	4
  2420  0036  3002               	movlw	high __pbssBANK4
  2421  0037  0085               	movwf	5
  2422  0038  3025               	movlw	37
  2423  0039  319A  22B8  3180   	fcall	clear_ram0
  2424                           
  2425                           ; Initialize objects allocated to BANK4
  2426  003C  30BD               	movlw	low __pidataBANK4
  2427  003D  0084               	movwf	4
  2428  003E  309E               	movlw	(high __pidataBANK4)| (0+128)
  2429  003F  0085               	movwf	5
  2430  0040  3045               	movlw	low __pdataBANK4
  2431  0041  0086               	movwf	6
  2432  0042  3002               	movlw	high __pdataBANK4
  2433  0043  0087               	movwf	7
  2434  0044  3020               	movlw	32
  2435  0045  319A  22B2         	fcall	init_ram
  2436  0047                     end_of_initialization:	
  2437                           ;End of C runtime variable initialization code
  2438                           
  2439  0047                     __end_of__initialization:	
  2440  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2441  0048  0020               	movlb	0
  2442  0049  3196  2E91         	ljmp	_main	;jump to C main() function
  2443                           
  2444                           	psect	bitbssCOMMON
  2445  03E8                     __pbitbssCOMMON:	
  2446  03E8                     _Receive_OK:	
  2447  03E8                     	ds	1
  2448  03E9                     _Transceive_OK:	
  2449  03E9                     	ds	1
  2450                           
  2451                           	psect	bssCOMMON
  2452  0078                     __pbssCOMMON:	
  2453  0078                     _DelayOff:	
  2454  0078                     	ds	1
  2455  0079                     _DimmerLightsIntr:	
  2456  0079                     	ds	1
  2457  007A                     _LED:	
  2458  007A                     	ds	1
  2459  007B                     _SPI0Buffer:	
  2460  007B                     	ds	1
  2461  007C                     _Sw:	
  2462  007C                     	ds	1
  2463                           
  2464                           	psect	bssBANK0
  2465  006F                     __pbssBANK0:	
  2466  006F                     _DimmerLights:	
  2467  006F                     	ds	1
  2468                           
  2469                           	psect	bssBANK1
  2470  00A0                     __pbssBANK1:	
  2471  00A0                     _myMain:	
  2472  00A0                     	ds	14
  2473  00AE                     _Buz1:	
  2474  00AE                     	ds	12
  2475  00BA                     _RF1:	
  2476  00BA                     	ds	12
  2477  00C6                     _Dimmer:	
  2478  00C6                     	ds	3
  2479  00C9                     _WDT:	
  2480  00C9                     	ds	2
  2481  00CB                     _CRC:	
  2482  00CB                     	ds	1
  2483  00CC                     _DimmerLights11:	
  2484  00CC                     	ds	1
  2485  00CD                     _DimmerLights22:	
  2486  00CD                     	ds	1
  2487  00CE                     _DimmerLightsIntrIOC:	
  2488  00CE                     	ds	1
  2489  00CF                     _RSSI:	
  2490  00CF                     	ds	1
  2491  00D0                     _Rx_Length:	
  2492  00D0                     	ds	1
  2493  00D1                     _SwDetect:	
  2494  00D1                     	ds	1
  2495  00D2                     _Tx_Length:	
  2496  00D2                     	ds	1
  2497  00D3                     _r_address:	
  2498  00D3                     	ds	1
  2499  00D4                     _r_data:	
  2500  00D4                     	ds	1
  2501  00D5                     _s_data:	
  2502  00D5                     	ds	1
  2503  00D6                     _Temp:	
  2504  00D6                     	ds	18
  2505                           
  2506                           	psect	bssBANK2
  2507  0120                     __pbssBANK2:	
  2508  0120                     _Timer1:	
  2509  0120                     	ds	3
  2510  0123                     _RF_Count:	
  2511  0123                     	ds	2
  2512  0125                     _Load:	
  2513  0125                     	ds	46
  2514  0153                     _DimmerLights1:	
  2515  0153                     	ds	17
  2516  0164                     _VarErrLED:	
  2517  0164                     	ds	4
  2518  0168                     _VarLED1:	
  2519  0168                     	ds	4
  2520  016C                     _VarLED2:	
  2521  016C                     	ds	4
  2522                           
  2523                           	psect	bssBANK3
  2524  01A0                     __pbssBANK3:	
  2525  01A0                     _RF_Data:	
  2526  01A0                     	ds	30
  2527  01BE                     _DimmerLights2:	
  2528  01BE                     	ds	17
  2529  01CF                     _Sw1:	
  2530  01CF                     	ds	9
  2531  01D8                     _Sw2:	
  2532  01D8                     	ds	9
  2533  01E1                     _DlySw1:	
  2534  01E1                     	ds	5
  2535  01E6                     _DlySw2:	
  2536  01E6                     	ds	5
  2537                           
  2538                           	psect	bssBANK4
  2539  0220                     __pbssBANK4:	
  2540  0220                     _Memory:	
  2541  0220                     	ds	37
  2542                           
  2543                           	psect	dataBANK4
  2544  0245                     __pdataBANK4:	
  2545  0245                     __product:	
  2546  0245                     	ds	32
  2547                           
  2548                           	psect	clrtext
  2549  1AB8                     clear_ram0:	
  2550                           ;	Called with FSR0 containing the base address, and
  2551                           ;	WREG with the size to clear
  2552                           
  2553  1AB8  0064               	clrwdt	;clear the watchdog before getting into this loop
  2554  1AB9                     clrloop0:	
  2555  1AB9  0180               	clrf	0	;clear RAM location pointed to by FSR
  2556  1ABA  3101               	addfsr 0,1
  2557  1ABB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2558  1ABC  2AB9               	goto	clrloop0	;have we reached the end yet?
  2559  1ABD  3400               	retlw	0	;all done for this memory range, return
  2560                           
  2561                           	psect	inittext
  2562  1AB2                     init_ram:	
  2563  1AB2  00FE               	movwf	126
  2564  1AB3                     initloop:	
  2565  1AB3  0012               	moviw fsr0++
  2566  1AB4  001E               	movwi fsr1++
  2567  1AB5  0BFE               	decfsz	126,f
  2568  1AB6  2AB3               	goto	initloop
  2569  1AB7  3400               	retlw	0
  2570                           
  2571                           	psect	cstackBANK1
  2572  00E8                     __pcstackBANK1:	
  2573  00E8                     setRF_Main@loop_f:	
  2574                           
  2575                           ; 1 bytes @ 0x0
  2576  00E8                     	ds	1
  2577  00E9                     setRF_Main@Receive_OK:	
  2578                           
  2579                           ; 1 bytes @ 0x1
  2580  00E9                     	ds	1
  2581  00EA                     setRF_Main@error:	
  2582                           
  2583                           ; 1 bytes @ 0x2
  2584  00EA                     	ds	1
  2585  00EB                     ?_main:	
  2586  00EB                     main@argc:	
  2587                           ; 2 bytes @ 0x3
  2588                           
  2589                           
  2590                           ; 2 bytes @ 0x3
  2591  00EB                     	ds	2
  2592  00ED                     main@argv:	
  2593                           
  2594                           ; 2 bytes @ 0x5
  2595  00ED                     	ds	2
  2596                           
  2597                           	psect	cstackCOMMON
  2598  0070                     __pcstackCOMMON:	
  2599  0070                     ?_Timeout_Counter:	
  2600  0070                     ?_set_TimeoutCleared:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_WriteByte:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_WriteCommand:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_ReadStatus:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_ReadByte:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_PowerRST:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_InitSetREG:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_InitPATable:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_ClearTXFIFO:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_ClearRXFIFO:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_FrequencyCabr:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_CC2500_SIDLEMode:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DlyOff_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DlyOff_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_ErrorClose:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setDimmerLights_Initialization:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_Dimmer_Initialization:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_Main:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setDimmerLights_Line:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setTxData:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setLED_Initialization:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setLED_Main:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_Fosc_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_IO_Set:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_TMR1_Set:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_ADC_Set:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_IOC_Set:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_WDT_Set:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_IOC_ISR:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_TMR1_ISR:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Write:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Flash_Memory_Modify:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_WDT_Clearing:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_setLoad_AH_AL_Restore:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_setTemp_Initialization:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setTemp_Main:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setRF_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_setRF_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_RF_RxDisable:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_getRxData:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_setLog_Code:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_setControl_Lights_Table:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setRFSW_Control:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_setRFSW_AdjControl:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_setRF_DimmerValue:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setSw_Initialization:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setMain_Exception:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setSw_Main:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_myMain_Initialization:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_my_MainTimer:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_Exception_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_Buzzer_Initialization:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_Buzzer_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_CC2500_TxData:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_CC2500_RxData:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_CC2500_PowerOnInitial:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_DelayOffPointSelect:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_DelayOff_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_DelayOff_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_DimmerIntrIOCPointSelect:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ??_DimmerIntrIOCPointSelect:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_DimmerIntrPointSelect:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ??_DimmerIntrPointSelect:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_setDimmerLights_IntrControl:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_DimmerLightsPointSelect:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DimmerLights_Initialization:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DimmerLights_Main:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_setDimmerLights_SwOn:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_setDimmerLights_SwOff:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_setDimmerLights_AdjControl:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_setDimmerLights_AdjRF:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_LedPointSelect:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_LED_Initialization:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_LED_Main:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_Mcu_Initialization:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_ISR:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_setDimmerReClock:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Flash_Memory_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_Flash_Memory_Main:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_Flash_Memory_Unlock:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_Flash_Memory_Erasing:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_setMemory_Modify:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_setMemory_LoopSave:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_WDT_Main:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_Load_Initialization:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_getLoad_AD:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_Load_Main:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_Temp_Initialization:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_getTemp_AD:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_Temp_Main:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_RF_Initialization:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_RF_Main:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_setRF_Learn:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_TouchPower:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_SwPointSelect:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_Switch_Initialization:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_Switch_Main:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_DelayTimejudge:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0070                     ?_getMain_All_Error_Status:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getLoad_OK:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getMain_LightsStatus:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_setPercentValue:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getPercentValue:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_Flash_Memory_Read:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getMain_LoadOK:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getMain_Lights_Count:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getRF_KeyStatus:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getSw_KeyStatus:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getDelayOff_GO:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_getDimmerLights_Status:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_getAll_DimmerLights_AdjGO:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_getDimmer_LoadOK:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_getDimmerLights_Line:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942                           
  2943                           ; 1 bytes @ 0x0
  2944  0070                     	ds	1
  2945  0071                     DimmerIntrIOCPointSelect@lights:	
  2946  0071                     DimmerIntrPointSelect@lights:	
  2947                           ; 1 bytes @ 0x1
  2948                           
  2949                           
  2950                           ; 1 bytes @ 0x1
  2951  0071                     	ds	1
  2952  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2953  0072                     ??_setDimmerLights_IntrControl:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959                           
  2960                           ; 1 bytes @ 0x2
  2961  0072                     	ds	1
  2962  0073                     ??_IOC_ISR:	
  2963  0073                     ??_setDimmerReClock:	
  2964                           ; 0 bytes @ 0x3
  2965                           
  2966                           
  2967                           ; 0 bytes @ 0x3
  2968  0073                     	ds	3
  2969  0076                     setDimmerLights_IntrControl@lights:	
  2970                           
  2971                           ; 1 bytes @ 0x6
  2972  0076                     	ds	1
  2973  0077                     ??_TMR1_ISR:	
  2974  0077                     ??_ISR:	
  2975                           ; 0 bytes @ 0x7
  2976                           
  2977                           
  2978                           ; 0 bytes @ 0x7
  2979  0077                     	ds	1
  2980                           
  2981                           	psect	cstackBANK0
  2982  0020                     __pcstackBANK0:	
  2983  0020                     ??_Timeout_Counter:	
  2984  0020                     ??_set_TimeoutCleared:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0020                     ??_CC2500_WriteByte:	
  2988                           ; 0 bytes @ 0x0
  2989                           
  2990  0020                     ??_CC2500_ReadByte:	
  2991                           ; 0 bytes @ 0x0
  2992                           
  2993  0020                     ?_DelayTime_1us:	
  2994                           ; 0 bytes @ 0x0
  2995                           
  2996  0020                     ??_Dimmer_Initialization:	
  2997                           ; 0 bytes @ 0x0
  2998                           
  2999  0020                     ??_getMain_All_Error_Status:	
  3000                           ; 0 bytes @ 0x0
  3001                           
  3002  0020                     ??_getLoad_OK:	
  3003                           ; 0 bytes @ 0x0
  3004                           
  3005  0020                     ??_setDimmerLights_Line:	
  3006                           ; 0 bytes @ 0x0
  3007                           
  3008  0020                     ?_setRF_DimmerLights:	
  3009                           ; 0 bytes @ 0x0
  3010                           
  3011  0020                     ??_setTxData:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0020                     ??_Fosc_Set:	
  3015                           ; 0 bytes @ 0x0
  3016                           
  3017  0020                     ??_IO_Set:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_TMR1_Set:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_ADC_Set:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ??_IOC_Set:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_WDT_Set:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_Flash_Memory_Read:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ?_setMemory_Data:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_Flash_Memory_Write:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_WDT_Clearing:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ??_setLoad_AH_AL_Restore:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_getMain_Lights_Count:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_setTemp_Initialization:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_setRF_Initialization:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_getRF_KeyStatus:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_getSw_KeyStatus:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_myMain_Initialization:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_Buzzer_Initialization:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_Buzzer_Main:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_DelayOffPointSelect:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_DimmerLightsPointSelect:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_getAll_DimmerLights_AdjGO:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_getDimmer_LoadOK:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_getDimmerLights_Line:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_LedPointSelect:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_Flash_Memory_Unlock:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_Flash_Memory_Erasing:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_setMemory_Modify:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_setMemory_LoopSave:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_WDT_Main:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_Temp_Initialization:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_setRF_Learn:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_TouchPower:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_SwPointSelect:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ?___bmul:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ?_getBuz_GO:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0020                     ?_getAD:	
  3123                           ; 2 bytes @ 0x0
  3124                           
  3125  0020                     ?___awdiv:	
  3126                           ; 2 bytes @ 0x0
  3127                           
  3128  0020                     ?___lwdiv:	
  3129                           ; 2 bytes @ 0x0
  3130                           
  3131  0020                     ?___ftpack:	
  3132                           ; 2 bytes @ 0x0
  3133                           
  3134  0020                     getDimmer_LoadOK@status:	
  3135                           ; 3 bytes @ 0x0
  3136                           
  3137  0020                     setDimmerLights_Line@lights:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140  0020                     getAD@adcon1:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143  0020                     setMemory_Data@data:	
  3144                           ; 1 bytes @ 0x0
  3145                           
  3146  0020                     getLoad_OK@ok:	
  3147                           ; 1 bytes @ 0x0
  3148                           
  3149  0020                     setRF_DimmerLights@on:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0020                     getMain_Lights_Count@count:	
  3153                           ; 1 bytes @ 0x0
  3154                           
  3155  0020                     ___bmul@multiplicand:	
  3156                           ; 1 bytes @ 0x0
  3157                           
  3158  0020                     DelayTime_1us@count:	
  3159                           ; 1 bytes @ 0x0
  3160                           
  3161  0020                     ___awdiv@divisor:	
  3162                           ; 2 bytes @ 0x0
  3163                           
  3164  0020                     ___lwdiv@divisor:	
  3165                           ; 2 bytes @ 0x0
  3166                           
  3167  0020                     ___ftpack@arg:	
  3168                           ; 2 bytes @ 0x0
  3169                           
  3170                           
  3171                           ; 3 bytes @ 0x0
  3172  0020                     	ds	1
  3173  0021                     ??_setRF_DimmerLights:	
  3174  0021                     ??_setMemory_Data:	
  3175                           ; 0 bytes @ 0x1
  3176                           
  3177  0021                     ??_getMain_LoadOK:	
  3178                           ; 0 bytes @ 0x1
  3179                           
  3180  0021                     ??_Mcu_Initialization:	
  3181                           ; 0 bytes @ 0x1
  3182                           
  3183  0021                     ??_RF_Initialization:	
  3184                           ; 0 bytes @ 0x1
  3185                           
  3186  0021                     ??___bmul:	
  3187                           ; 0 bytes @ 0x1
  3188                           
  3189  0021                     CC2500_WriteByte@loop_a:	
  3190                           ; 0 bytes @ 0x1
  3191                           
  3192  0021                     CC2500_ReadByte@loop_b:	
  3193                           ; 1 bytes @ 0x1
  3194                           
  3195  0021                     DelayOffPointSelect@sw:	
  3196                           ; 1 bytes @ 0x1
  3197                           
  3198  0021                     DimmerLightsPointSelect@lights:	
  3199                           ; 1 bytes @ 0x1
  3200                           
  3201  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3202                           ; 1 bytes @ 0x1
  3203                           
  3204  0021                     getDimmerLights_Line@line:	
  3205                           ; 1 bytes @ 0x1
  3206                           
  3207  0021                     LedPointSelect@led:	
  3208                           ; 1 bytes @ 0x1
  3209                           
  3210  0021                     Flash_Memory_Read@i:	
  3211                           ; 1 bytes @ 0x1
  3212                           
  3213  0021                     Flash_Memory_Write@i:	
  3214                           ; 1 bytes @ 0x1
  3215                           
  3216  0021                     setMemory_Modify@command:	
  3217                           ; 1 bytes @ 0x1
  3218                           
  3219  0021                     setMemory_LoopSave@command:	
  3220                           ; 1 bytes @ 0x1
  3221                           
  3222  0021                     setLoad_AH_AL_Restore@i:	
  3223                           ; 1 bytes @ 0x1
  3224                           
  3225  0021                     setRF_Learn@command:	
  3226                           ; 1 bytes @ 0x1
  3227                           
  3228  0021                     getRF_KeyStatus@key:	
  3229                           ; 1 bytes @ 0x1
  3230                           
  3231  0021                     SwPointSelect@sw:	
  3232                           ; 1 bytes @ 0x1
  3233                           
  3234  0021                     _getSw_KeyStatus$5785:	
  3235                           ; 1 bytes @ 0x1
  3236                           
  3237  0021                     getMain_Lights_Count@status3:	
  3238                           ; 1 bytes @ 0x1
  3239                           
  3240  0021                     _getMain_All_Error_Status$6485:	
  3241                           ; 1 bytes @ 0x1
  3242                           
  3243                           
  3244                           ; 2 bytes @ 0x1
  3245  0021                     	ds	1
  3246  0022                     ??_CC2500_WriteCommand:	
  3247  0022                     ??_CC2500_ReadStatus:	
  3248                           ; 0 bytes @ 0x2
  3249                           
  3250  0022                     ??_DelayTime_1us:	
  3251                           ; 0 bytes @ 0x2
  3252                           
  3253  0022                     ?_CC2500_WriteREG:	
  3254                           ; 0 bytes @ 0x2
  3255                           
  3256  0022                     ??_DlyOff_Initialization:	
  3257                           ; 0 bytes @ 0x2
  3258                           
  3259  0022                     ??_setDimmerLights_Initialization:	
  3260                           ; 0 bytes @ 0x2
  3261                           
  3262  0022                     ?_setDimmerLights_Trigger:	
  3263                           ; 0 bytes @ 0x2
  3264                           
  3265  0022                     ?_setDimmerLights_TriggerAdj:	
  3266                           ; 0 bytes @ 0x2
  3267                           
  3268  0022                     ?_setLED:	
  3269                           ; 0 bytes @ 0x2
  3270                           
  3271  0022                     ??_setLED_Main:	
  3272                           ; 0 bytes @ 0x2
  3273                           
  3274  0022                     ??_getBuz_GO:	
  3275                           ; 0 bytes @ 0x2
  3276                           
  3277  0022                     ??_getDelayOff_GO:	
  3278                           ; 0 bytes @ 0x2
  3279                           
  3280  0022                     ??_getDimmerLights_Status:	
  3281                           ; 0 bytes @ 0x2
  3282                           
  3283  0022                     ??_Load_Initialization:	
  3284                           ; 0 bytes @ 0x2
  3285                           
  3286  0022                     CC2500_WriteREG@value:	
  3287                           ; 0 bytes @ 0x2
  3288                           
  3289  0022                     DlyOff_Initialization@sw:	
  3290                           ; 1 bytes @ 0x2
  3291                           
  3292  0022                     getDelayOff_GO@sw:	
  3293                           ; 1 bytes @ 0x2
  3294                           
  3295  0022                     getDimmerLights_Status@lights:	
  3296                           ; 1 bytes @ 0x2
  3297                           
  3298  0022                     _getAll_DimmerLights_AdjGO$2324:	
  3299                           ; 1 bytes @ 0x2
  3300                           
  3301  0022                     setDimmerLights_Trigger@command:	
  3302                           ; 1 bytes @ 0x2
  3303                           
  3304  0022                     setDimmerLights_TriggerAdj@command:	
  3305                           ; 1 bytes @ 0x2
  3306                           
  3307  0022                     setLED@command:	
  3308                           ; 1 bytes @ 0x2
  3309                           
  3310  0022                     Flash_Memory_Read@address:	
  3311                           ; 1 bytes @ 0x2
  3312                           
  3313  0022                     setMemory_Data@address:	
  3314                           ; 1 bytes @ 0x2
  3315                           
  3316  0022                     _getRF_KeyStatus$4796:	
  3317                           ; 1 bytes @ 0x2
  3318                           
  3319  0022                     _getSw_KeyStatus$5786:	
  3320                           ; 1 bytes @ 0x2
  3321                           
  3322  0022                     getMain_Lights_Count@status1:	
  3323                           ; 1 bytes @ 0x2
  3324                           
  3325  0022                     getMain_LoadOK@ok:	
  3326                           ; 1 bytes @ 0x2
  3327                           
  3328  0022                     ___bmul@product:	
  3329                           ; 1 bytes @ 0x2
  3330                           
  3331  0022                     DelayTime_1us@i:	
  3332                           ; 1 bytes @ 0x2
  3333                           
  3334  0022                     ___awdiv@dividend:	
  3335                           ; 2 bytes @ 0x2
  3336                           
  3337  0022                     ___lwdiv@dividend:	
  3338                           ; 2 bytes @ 0x2
  3339                           
  3340                           
  3341                           ; 2 bytes @ 0x2
  3342  0022                     	ds	1
  3343  0023                     ??_CC2500_WriteREG:	
  3344  0023                     ??_setDimmerLights_Trigger:	
  3345                           ; 0 bytes @ 0x3
  3346                           
  3347  0023                     ??_setDimmerLights_TriggerAdj:	
  3348                           ; 0 bytes @ 0x3
  3349                           
  3350  0023                     ??_setLED:	
  3351                           ; 0 bytes @ 0x3
  3352                           
  3353  0023                     ??_DelayOff_Initialization:	
  3354                           ; 0 bytes @ 0x3
  3355                           
  3356  0023                     ??_getAD:	
  3357                           ; 0 bytes @ 0x3
  3358                           
  3359  0023                     CC2500_WriteCommand@command:	
  3360                           ; 0 bytes @ 0x3
  3361                           
  3362  0023                     CC2500_ReadStatus@status_addr:	
  3363                           ; 1 bytes @ 0x3
  3364                           
  3365  0023                     getDelayOff_GO@go:	
  3366                           ; 1 bytes @ 0x3
  3367                           
  3368  0023                     setDimmerLights_Initialization@lights:	
  3369                           ; 1 bytes @ 0x3
  3370                           
  3371  0023                     getDimmerLights_Status@status:	
  3372                           ; 1 bytes @ 0x3
  3373                           
  3374  0023                     setLED@led:	
  3375                           ; 1 bytes @ 0x3
  3376                           
  3377  0023                     getAD@adcon0:	
  3378                           ; 1 bytes @ 0x3
  3379                           
  3380  0023                     Flash_Memory_Read@ret:	
  3381                           ; 1 bytes @ 0x3
  3382                           
  3383  0023                     setRF_DimmerLights@status:	
  3384                           ; 1 bytes @ 0x3
  3385                           
  3386  0023                     getSw_KeyStatus@status:	
  3387                           ; 1 bytes @ 0x3
  3388                           
  3389  0023                     getMain_Lights_Count@status2:	
  3390                           ; 1 bytes @ 0x3
  3391                           
  3392  0023                     ___bmul@multiplier:	
  3393                           ; 1 bytes @ 0x3
  3394                           
  3395  0023                     ___ftpack@exp:	
  3396                           ; 1 bytes @ 0x3
  3397                           
  3398  0023                     _getMain_All_Error_Status$6486:	
  3399                           ; 1 bytes @ 0x3
  3400                           
  3401                           
  3402                           ; 2 bytes @ 0x3
  3403  0023                     	ds	1
  3404  0024                     ??_CC2500_ClearTXFIFO:	
  3405  0024                     ??_CC2500_ClearRXFIFO:	
  3406                           ; 0 bytes @ 0x4
  3407                           
  3408  0024                     ??_CC2500_SIDLEMode:	
  3409                           ; 0 bytes @ 0x4
  3410                           
  3411  0024                     ??_DelayTimejudge:	
  3412                           ; 0 bytes @ 0x4
  3413                           
  3414  0024                     ??_getMain_LightsStatus:	
  3415                           ; 0 bytes @ 0x4
  3416                           
  3417  0024                     ??_setLED_Initialization:	
  3418                           ; 0 bytes @ 0x4
  3419                           
  3420  0024                     ??_Flash_Memory_Modify:	
  3421                           ; 0 bytes @ 0x4
  3422                           
  3423  0024                     ??_RF_RxDisable:	
  3424                           ; 0 bytes @ 0x4
  3425                           
  3426  0024                     ??_setSw_Initialization:	
  3427                           ; 0 bytes @ 0x4
  3428                           
  3429  0024                     ??_CC2500_TxData:	
  3430                           ; 0 bytes @ 0x4
  3431                           
  3432  0024                     ??_CC2500_RxData:	
  3433                           ; 0 bytes @ 0x4
  3434                           
  3435  0024                     ??_DimmerLights_Initialization:	
  3436                           ; 0 bytes @ 0x4
  3437                           
  3438  0024                     ??_getLoad_AD:	
  3439                           ; 0 bytes @ 0x4
  3440                           
  3441  0024                     ??_getTemp_AD:	
  3442                           ; 0 bytes @ 0x4
  3443                           
  3444  0024                     ??___awdiv:	
  3445                           ; 0 bytes @ 0x4
  3446                           
  3447  0024                     ??___lwdiv:	
  3448                           ; 0 bytes @ 0x4
  3449                           
  3450  0024                     CC2500_WriteREG@w_addr:	
  3451                           ; 0 bytes @ 0x4
  3452                           
  3453  0024                     setDimmerLights_Trigger@lights:	
  3454                           ; 1 bytes @ 0x4
  3455                           
  3456  0024                     setDimmerLights_TriggerAdj@lights:	
  3457                           ; 1 bytes @ 0x4
  3458                           
  3459  0024                     setLED_Initialization@led:	
  3460                           ; 1 bytes @ 0x4
  3461                           
  3462  0024                     setLED_Main@led:	
  3463                           ; 1 bytes @ 0x4
  3464                           
  3465  0024                     setRF_DimmerLights@lights:	
  3466                           ; 1 bytes @ 0x4
  3467                           
  3468  0024                     setSw_Initialization@sw:	
  3469                           ; 1 bytes @ 0x4
  3470                           
  3471  0024                     getSw_KeyStatus@sw:	
  3472                           ; 1 bytes @ 0x4
  3473                           
  3474  0024                     ___ftpack@sign:	
  3475                           ; 1 bytes @ 0x4
  3476                           
  3477  0024                     getBuz_GO@i:	
  3478                           ; 1 bytes @ 0x4
  3479                           
  3480  0024                     DelayTime_1us@j:	
  3481                           ; 2 bytes @ 0x4
  3482                           
  3483                           
  3484                           ; 2 bytes @ 0x4
  3485  0024                     	ds	1
  3486  0025                     ??_CC2500_InitSetREG:	
  3487  0025                     ??_CC2500_InitPATable:	
  3488                           ; 0 bytes @ 0x5
  3489                           
  3490  0025                     ??___ftpack:	
  3491                           ; 0 bytes @ 0x5
  3492                           
  3493  0025                     ??_setDimmerLights_AdjControl:	
  3494                           ; 0 bytes @ 0x5
  3495                           
  3496  0025                     ??_LED_Initialization:	
  3497                           ; 0 bytes @ 0x5
  3498                           
  3499  0025                     ??_LED_Main:	
  3500                           ; 0 bytes @ 0x5
  3501                           
  3502  0025                     ??_Switch_Initialization:	
  3503                           ; 0 bytes @ 0x5
  3504                           
  3505  0025                     CC2500_TxData@loop_e:	
  3506                           ; 0 bytes @ 0x5
  3507                           
  3508  0025                     CC2500_RxData@loop_f:	
  3509                           ; 1 bytes @ 0x5
  3510                           
  3511  0025                     Flash_Memory_Modify@i:	
  3512                           ; 1 bytes @ 0x5
  3513                           
  3514  0025                     getTemp_AD@channel:	
  3515                           ; 1 bytes @ 0x5
  3516                           
  3517  0025                     getMain_LightsStatus@count:	
  3518                           ; 1 bytes @ 0x5
  3519                           
  3520  0025                     getMain_All_Error_Status@command:	
  3521                           ; 1 bytes @ 0x5
  3522                           
  3523  0025                     ___awdiv@counter:	
  3524                           ; 1 bytes @ 0x5
  3525                           
  3526  0025                     ___lwdiv@quotient:	
  3527                           ; 1 bytes @ 0x5
  3528                           
  3529                           
  3530                           ; 2 bytes @ 0x5
  3531  0025                     	ds	1
  3532  0026                     ??_CC2500_PowerRST:	
  3533  0026                     ??_CC2500_FrequencyCabr:	
  3534                           ; 0 bytes @ 0x6
  3535                           
  3536  0026                     CC2500_InitSetREG@temp1:	
  3537                           ; 0 bytes @ 0x6
  3538                           
  3539  0026                     CC2500_InitPATable@temp:	
  3540                           ; 1 bytes @ 0x6
  3541                           
  3542  0026                     DelayTimejudge@i:	
  3543                           ; 1 bytes @ 0x6
  3544                           
  3545  0026                     setDimmerLights_AdjControl@idle:	
  3546                           ; 1 bytes @ 0x6
  3547                           
  3548  0026                     getLoad_AD@channel:	
  3549                           ; 1 bytes @ 0x6
  3550                           
  3551  0026                     getMain_All_Error_Status@status:	
  3552                           ; 1 bytes @ 0x6
  3553                           
  3554  0026                     ___awdiv@sign:	
  3555                           ; 1 bytes @ 0x6
  3556                           
  3557  0026                     getMain_LightsStatus@i:	
  3558                           ; 1 bytes @ 0x6
  3559                           
  3560                           
  3561                           ; 2 bytes @ 0x6
  3562  0026                     	ds	1
  3563  0027                     ??_Exception_Main:	
  3564  0027                     CC2500_InitSetREG@temp2:	
  3565                           ; 0 bytes @ 0x7
  3566                           
  3567  0027                     CC2500_InitPATable@loop_d:	
  3568                           ; 1 bytes @ 0x7
  3569                           
  3570  0027                     DelayTimejudge@j:	
  3571                           ; 1 bytes @ 0x7
  3572                           
  3573  0027                     _setDimmerLights_AdjControl$2337:	
  3574                           ; 1 bytes @ 0x7
  3575                           
  3576  0027                     getLoad_AD@k:	
  3577                           ; 1 bytes @ 0x7
  3578                           
  3579  0027                     ___lwdiv@counter:	
  3580                           ; 1 bytes @ 0x7
  3581                           
  3582  0027                     ___awdiv@quotient:	
  3583                           ; 1 bytes @ 0x7
  3584                           
  3585                           
  3586                           ; 2 bytes @ 0x7
  3587  0027                     	ds	1
  3588  0028                     ?___awtoft:	
  3589  0028                     CC2500_InitSetREG@loop_c:	
  3590                           ; 3 bytes @ 0x8
  3591                           
  3592  0028                     DelayTimejudge@k:	
  3593                           ; 1 bytes @ 0x8
  3594                           
  3595  0028                     setDimmerLights_AdjControl@sw:	
  3596                           ; 1 bytes @ 0x8
  3597                           
  3598  0028                     getLoad_AD@j:	
  3599                           ; 1 bytes @ 0x8
  3600                           
  3601  0028                     getMain_LightsStatus@status:	
  3602                           ; 1 bytes @ 0x8
  3603                           
  3604  0028                     Exception_Main@error:	
  3605                           ; 1 bytes @ 0x8
  3606                           
  3607  0028                     ___awtoft@c:	
  3608                           ; 1 bytes @ 0x8
  3609                           
  3610                           
  3611                           ; 2 bytes @ 0x8
  3612  0028                     	ds	1
  3613  0029                     ?_setBuz:	
  3614  0029                     ??_CC2500_PowerOnInitial:	
  3615                           ; 0 bytes @ 0x9
  3616                           
  3617  0029                     ??_Flash_Memory_Main:	
  3618                           ; 0 bytes @ 0x9
  3619                           
  3620  0029                     ??_Load_Main:	
  3621                           ; 0 bytes @ 0x9
  3622                           
  3623  0029                     DelayTimejudge@value:	
  3624                           ; 0 bytes @ 0x9
  3625                           
  3626  0029                     getLoad_AD@i:	
  3627                           ; 1 bytes @ 0x9
  3628                           
  3629  0029                     setBuz@time:	
  3630                           ; 1 bytes @ 0x9
  3631                           
  3632                           
  3633                           ; 2 bytes @ 0x9
  3634  0029                     	ds	1
  3635  002A                     ?_setDelayOff_GO:	
  3636  002A                     setDelayOff_GO@command:	
  3637                           ; 0 bytes @ 0xA
  3638                           
  3639                           
  3640                           ; 1 bytes @ 0xA
  3641  002A                     	ds	1
  3642  002B                     ??_setBuz:	
  3643  002B                     ??___awtoft:	
  3644                           ; 0 bytes @ 0xB
  3645                           
  3646  002B                     setDelayOff_GO@value:	
  3647                           ; 0 bytes @ 0xB
  3648                           
  3649  002B                     Load_Main@j:	
  3650                           ; 1 bytes @ 0xB
  3651                           
  3652                           
  3653                           ; 1 bytes @ 0xB
  3654  002B                     	ds	1
  3655  002C                     ??_setDelayOff_GO:	
  3656  002C                     setBuz@count:	
  3657                           ; 0 bytes @ 0xC
  3658                           
  3659  002C                     Load_Main@adjgo:	
  3660                           ; 1 bytes @ 0xC
  3661                           
  3662                           
  3663                           ; 1 bytes @ 0xC
  3664  002C                     	ds	1
  3665  002D                     ??_setTemp_Main:	
  3666  002D                     ??_setLog_Code:	
  3667                           ; 0 bytes @ 0xD
  3668                           
  3669  002D                     ??_my_MainTimer:	
  3670                           ; 0 bytes @ 0xD
  3671                           
  3672  002D                     ??_setDimmerLights_SwOn:	
  3673                           ; 0 bytes @ 0xD
  3674                           
  3675  002D                     _Load_Main$3495:	
  3676                           ; 0 bytes @ 0xD
  3677                           
  3678  002D                     ___awtoft@sign:	
  3679                           ; 1 bytes @ 0xD
  3680                           
  3681                           
  3682                           ; 1 bytes @ 0xD
  3683  002D                     	ds	1
  3684  002E                     ?___ftdiv:	
  3685  002E                     ?___ftmul:	
  3686                           ; 3 bytes @ 0xE
  3687                           
  3688  002E                     setDelayOff_GO@sw:	
  3689                           ; 3 bytes @ 0xE
  3690                           
  3691  002E                     setDimmerLights_SwOn@idle:	
  3692                           ; 1 bytes @ 0xE
  3693                           
  3694  002E                     Load_Main@error:	
  3695                           ; 1 bytes @ 0xE
  3696                           
  3697  002E                     ___ftdiv@f2:	
  3698                           ; 1 bytes @ 0xE
  3699                           
  3700  002E                     ___ftmul@f1:	
  3701                           ; 3 bytes @ 0xE
  3702                           
  3703                           
  3704                           ; 3 bytes @ 0xE
  3705  002E                     	ds	1
  3706  002F                     ??_setDimmerLights_SwOff:	
  3707  002F                     setDimmerLights_SwOn@sw:	
  3708                           ; 0 bytes @ 0xF
  3709                           
  3710  002F                     setDimmerLights_SwOff@command:	
  3711                           ; 1 bytes @ 0xF
  3712                           
  3713  002F                     Load_Main@i:	
  3714                           ; 1 bytes @ 0xF
  3715                           
  3716  002F                     setTemp_Main@error:	
  3717                           ; 1 bytes @ 0xF
  3718                           
  3719                           
  3720                           ; 1 bytes @ 0xF
  3721  002F                     	ds	1
  3722  0030                     ??_Temp_Main:	
  3723  0030                     setDimmerLights_SwOff@sw:	
  3724                           ; 0 bytes @ 0x10
  3725                           
  3726                           
  3727                           ; 1 bytes @ 0x10
  3728  0030                     	ds	1
  3729  0031                     ??_setDimmerLights_ErrorClose:	
  3730  0031                     ??_setRFSW_Control:	
  3731                           ; 0 bytes @ 0x11
  3732                           
  3733  0031                     ??_setSw_Main:	
  3734                           ; 0 bytes @ 0x11
  3735                           
  3736  0031                     ___ftdiv@f1:	
  3737                           ; 0 bytes @ 0x11
  3738                           
  3739  0031                     ___ftmul@f2:	
  3740                           ; 3 bytes @ 0x11
  3741                           
  3742                           
  3743                           ; 3 bytes @ 0x11
  3744  0031                     	ds	1
  3745  0032                     setDimmerLights_ErrorClose@count:	
  3746  0032                     setRFSW_Control@status:	
  3747                           ; 1 bytes @ 0x12
  3748                           
  3749                           
  3750                           ; 1 bytes @ 0x12
  3751  0032                     	ds	1
  3752  0033                     setDimmerLights_ErrorClose@lights:	
  3753  0033                     setRFSW_Control@sw:	
  3754                           ; 1 bytes @ 0x13
  3755                           
  3756  0033                     setSw_Main@sw:	
  3757                           ; 1 bytes @ 0x13
  3758                           
  3759                           
  3760                           ; 1 bytes @ 0x13
  3761  0033                     	ds	1
  3762  0034                     ??___ftdiv:	
  3763  0034                     ??___ftmul:	
  3764                           ; 0 bytes @ 0x14
  3765                           
  3766  0034                     setDimmerLights_ErrorClose@i:	
  3767                           ; 0 bytes @ 0x14
  3768                           
  3769                           
  3770                           ; 2 bytes @ 0x14
  3771  0034                     	ds	2
  3772  0036                     ??_DlyOff_Main:	
  3773  0036                     ??_setMain_Exception:	
  3774                           ; 0 bytes @ 0x16
  3775                           
  3776                           
  3777                           ; 0 bytes @ 0x16
  3778  0036                     	ds	2
  3779  0038                     DlyOff_Main@sw:	
  3780  0038                     setMain_Exception@buz:	
  3781                           ; 1 bytes @ 0x18
  3782                           
  3783  0038                     ___ftdiv@cntr:	
  3784                           ; 1 bytes @ 0x18
  3785                           
  3786  0038                     ___ftmul@exp:	
  3787                           ; 1 bytes @ 0x18
  3788                           
  3789                           
  3790                           ; 1 bytes @ 0x18
  3791  0038                     	ds	1
  3792  0039                     ??_DelayOff_Main:	
  3793  0039                     _setMain_Exception$6475:	
  3794                           ; 0 bytes @ 0x19
  3795                           
  3796  0039                     ___ftdiv@f3:	
  3797                           ; 2 bytes @ 0x19
  3798                           
  3799  0039                     ___ftmul@f3_as_product:	
  3800                           ; 3 bytes @ 0x19
  3801                           
  3802                           
  3803                           ; 3 bytes @ 0x19
  3804  0039                     	ds	2
  3805  003B                     setMain_Exception@status:	
  3806                           
  3807                           ; 1 bytes @ 0x1B
  3808  003B                     	ds	1
  3809  003C                     setMain_Exception@command:	
  3810  003C                     ___ftdiv@exp:	
  3811                           ; 1 bytes @ 0x1C
  3812                           
  3813  003C                     ___ftmul@cntr:	
  3814                           ; 1 bytes @ 0x1C
  3815                           
  3816                           
  3817                           ; 1 bytes @ 0x1C
  3818  003C                     	ds	1
  3819  003D                     ??_Switch_Main:	
  3820  003D                     ___ftdiv@sign:	
  3821                           ; 0 bytes @ 0x1D
  3822                           
  3823  003D                     ___ftmul@sign:	
  3824                           ; 1 bytes @ 0x1D
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0x1D
  3828  003D                     	ds	1
  3829  003E                     ?___ftneg:	
  3830  003E                     Switch_Main@error:	
  3831                           ; 3 bytes @ 0x1E
  3832                           
  3833  003E                     ___ftneg@f1:	
  3834                           ; 1 bytes @ 0x1E
  3835                           
  3836                           
  3837                           ; 3 bytes @ 0x1E
  3838  003E                     	ds	3
  3839  0041                     ??___ftneg:	
  3840  0041                     ?___ftadd:	
  3841                           ; 0 bytes @ 0x21
  3842                           
  3843  0041                     ___ftadd@f1:	
  3844                           ; 3 bytes @ 0x21
  3845                           
  3846                           
  3847                           ; 3 bytes @ 0x21
  3848  0041                     	ds	3
  3849  0044                     ___ftadd@f2:	
  3850                           
  3851                           ; 3 bytes @ 0x24
  3852  0044                     	ds	3
  3853  0047                     ??___ftadd:	
  3854                           
  3855                           ; 0 bytes @ 0x27
  3856  0047                     	ds	4
  3857  004B                     ___ftadd@sign:	
  3858                           
  3859                           ; 1 bytes @ 0x2B
  3860  004B                     	ds	1
  3861  004C                     ___ftadd@exp2:	
  3862                           
  3863                           ; 1 bytes @ 0x2C
  3864  004C                     	ds	1
  3865  004D                     ___ftadd@exp1:	
  3866                           
  3867                           ; 1 bytes @ 0x2D
  3868  004D                     	ds	1
  3869  004E                     ?___fttol:	
  3870  004E                     ___fttol@f1:	
  3871                           ; 4 bytes @ 0x2E
  3872                           
  3873                           
  3874                           ; 3 bytes @ 0x2E
  3875  004E                     	ds	4
  3876  0052                     ??___fttol:	
  3877                           
  3878                           ; 0 bytes @ 0x32
  3879  0052                     	ds	4
  3880  0056                     ___fttol@sign1:	
  3881                           
  3882                           ; 1 bytes @ 0x36
  3883  0056                     	ds	1
  3884  0057                     ___fttol@lval:	
  3885                           
  3886                           ; 4 bytes @ 0x37
  3887  0057                     	ds	4
  3888  005B                     ___fttol@exp1:	
  3889                           
  3890                           ; 1 bytes @ 0x3B
  3891  005B                     	ds	1
  3892  005C                     ??_setPercentValue:	
  3893  005C                     ??_getPercentValue:	
  3894                           ; 0 bytes @ 0x3C
  3895                           
  3896                           
  3897                           ; 0 bytes @ 0x3C
  3898  005C                     	ds	2
  3899  005E                     getPercentValue@value:	
  3900  005E                     setPercentValue@value:	
  3901                           ; 1 bytes @ 0x3E
  3902                           
  3903                           
  3904                           ; 1 bytes @ 0x3E
  3905  005E                     	ds	1
  3906  005F                     getPercentValue@i:	
  3907  005F                     setPercentValue@i:	
  3908                           ; 3 bytes @ 0x3F
  3909                           
  3910                           
  3911                           ; 3 bytes @ 0x3F
  3912  005F                     	ds	3
  3913  0062                     ?_setDimmerLights:	
  3914  0062                     ?_setDimmerLights_Adj:	
  3915                           ; 0 bytes @ 0x42
  3916                           
  3917  0062                     ??_setDimmerLights_AdjRF:	
  3918                           ; 0 bytes @ 0x42
  3919                           
  3920  0062                     ??_Flash_Memory_Initialization:	
  3921                           ; 0 bytes @ 0x42
  3922                           
  3923  0062                     setDimmerLights@status:	
  3924                           ; 0 bytes @ 0x42
  3925                           
  3926  0062                     setDimmerLights_Adj@status:	
  3927                           ; 1 bytes @ 0x42
  3928                           
  3929                           
  3930                           ; 1 bytes @ 0x42
  3931  0062                     	ds	1
  3932  0063                     ??_setDimmerLights:	
  3933  0063                     ??_setDimmerLights_Adj:	
  3934                           ; 0 bytes @ 0x43
  3935                           
  3936  0063                     setDimmerLights_AdjRF@lights:	
  3937                           ; 0 bytes @ 0x43
  3938                           
  3939  0063                     Flash_Memory_Initialization@i:	
  3940                           ; 1 bytes @ 0x43
  3941                           
  3942                           
  3943                           ; 1 bytes @ 0x43
  3944  0063                     	ds	1
  3945  0064                     ??_setRF_DimmerValue:	
  3946                           
  3947                           ; 0 bytes @ 0x44
  3948  0064                     	ds	1
  3949  0065                     setDimmerLights@lights:	
  3950  0065                     setDimmerLights_Adj@lights:	
  3951                           ; 1 bytes @ 0x45
  3952                           
  3953                           
  3954                           ; 1 bytes @ 0x45
  3955  0065                     	ds	1
  3956  0066                     ??_setDimmerLights_Main:	
  3957  0066                     setDimmerLights_Main@lights:	
  3958                           ; 0 bytes @ 0x46
  3959                           
  3960  0066                     setRF_DimmerValue@lights:	
  3961                           ; 1 bytes @ 0x46
  3962                           
  3963                           
  3964                           ; 1 bytes @ 0x46
  3965  0066                     	ds	1
  3966  0067                     ??_setRFSW_AdjControl:	
  3967  0067                     ??_DimmerLights_Main:	
  3968                           ; 0 bytes @ 0x47
  3969                           
  3970                           
  3971                           ; 0 bytes @ 0x47
  3972  0067                     	ds	2
  3973  0069                     setRFSW_AdjControl@status:	
  3974  0069                     _DimmerLights_Main$2310:	
  3975                           ; 1 bytes @ 0x49
  3976                           
  3977                           
  3978                           ; 2 bytes @ 0x49
  3979  0069                     	ds	1
  3980  006A                     setRFSW_AdjControl@sw:	
  3981                           
  3982                           ; 1 bytes @ 0x4A
  3983  006A                     	ds	1
  3984  006B                     ??_getRxData:	
  3985  006B                     ??_setControl_Lights_Table:	
  3986                           ; 0 bytes @ 0x4B
  3987                           
  3988                           
  3989                           ; 0 bytes @ 0x4B
  3990  006B                     	ds	1
  3991  006C                     getRxData@error:	
  3992                           
  3993                           ; 1 bytes @ 0x4C
  3994  006C                     	ds	1
  3995  006D                     ??_setRF_Main:	
  3996                           
  3997                           ; 0 bytes @ 0x4D
  3998  006D                     	ds	1
  3999  006E                     ??_RF_Main:	
  4000  006E                     ??_main:	
  4001                           ; 0 bytes @ 0x4E
  4002                           
  4003                           
  4004                           	psect	maintext
  4005  1691                     __pmaintext:	
  4006                           ; 0 bytes @ 0x4E
  4007 ;;
  4008 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4009 ;;
  4010 ;; *************** function _main *****************
  4011 ;; Defined at:
  4012 ;;		line 7 in file "../src/main_B1.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  argc            2    3[BANK1 ] int 
  4015 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  2    3[BANK1 ] int 
  4020 ;; Registers used:
  4021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 17F/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4027 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4030 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4031 ;;Total ram usage:        4 bytes
  4032 ;; Hardware stack levels required when called:   15
  4033 ;; This function calls:
  4034 ;;		_Buzzer_Initialization
  4035 ;;		_Buzzer_Main
  4036 ;;		_CC2500_PowerOnInitial
  4037 ;;		_DelayOff_Initialization
  4038 ;;		_DelayOff_Main
  4039 ;;		_DimmerLights_Initialization
  4040 ;;		_DimmerLights_Main
  4041 ;;		_Exception_Main
  4042 ;;		_Flash_Memory_Initialization
  4043 ;;		_Flash_Memory_Main
  4044 ;;		_LED_Initialization
  4045 ;;		_LED_Main
  4046 ;;		_Load_Initialization
  4047 ;;		_Load_Main
  4048 ;;		_Mcu_Initialization
  4049 ;;		_RF_Initialization
  4050 ;;		_RF_Main
  4051 ;;		_Switch_Initialization
  4052 ;;		_Switch_Main
  4053 ;;		_Temp_Initialization
  4054 ;;		_Temp_Main
  4055 ;;		_WDT_Main
  4056 ;;		_getLoad_AD
  4057 ;;		_getTemp_AD
  4058 ;;		_myMain_Initialization
  4059 ;;		_my_MainTimer
  4060 ;; This function is called by:
  4061 ;;		Startup code after reset
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _main
  4067  1691                     _main:	
  4068                           
  4069                           ;main_B1.c: 8: myMain_Initialization();
  4070                           
  4071                           ;incstack = 0
  4072                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4073  1691  3187  27F1  3196   	fcall	_myMain_Initialization
  4074                           
  4075                           ;main_B1.c: 9: Mcu_Initialization();
  4076  1694  319C  2422  3196   	fcall	_Mcu_Initialization
  4077                           
  4078                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4079  1697  3186  2656  3196   	fcall	_Flash_Memory_Initialization
  4080                           
  4081                           ;main_B1.c: 11: LED_Initialization();
  4082  169A  319B  2341  3196   	fcall	_LED_Initialization
  4083                           
  4084                           ;main_B1.c: 12: Buzzer_Initialization();
  4085  169D  319A  2283  3196   	fcall	_Buzzer_Initialization
  4086                           
  4087                           ;main_B1.c: 14: ;;
  4088                           ;main_B1.c: 15: Temp_Initialization();
  4089  16A0  319A  228C  3196   	fcall	_Temp_Initialization
  4090                           
  4091                           ;main_B1.c: 16: Load_Initialization();
  4092  16A3  319A  22A7  3196   	fcall	_Load_Initialization
  4093                           
  4094                           ;main_B1.c: 17: ;;
  4095                           ;main_B1.c: 18: DelayOff_Initialization();
  4096  16A6  319A  22CD  3196   	fcall	_DelayOff_Initialization
  4097                           
  4098                           ;main_B1.c: 20: DimmerLights_Initialization();
  4099  16A9  319D  2575  3196   	fcall	_DimmerLights_Initialization
  4100                           
  4101                           ;main_B1.c: 21: ;;
  4102                           ;main_B1.c: 22: ;;
  4103                           ;main_B1.c: 23: ;;
  4104                           ;main_B1.c: 24: Switch_Initialization();
  4105  16AC  319B  2371  3196   	fcall	_Switch_Initialization
  4106                           
  4107                           ;main_B1.c: 25: RF_Initialization();
  4108  16AF  319A  2286  3196   	fcall	_RF_Initialization
  4109                           
  4110                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4111  16B2  319D  251F  3196   	fcall	_CC2500_PowerOnInitial
  4112  16B5                     l8483:	
  4113                           ;main_B1.c: 27: ;;
  4114                           ;main_B1.c: 28: ;;
  4115                           ;main_B1.c: 30: while (1) {
  4116                           
  4117                           
  4118                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4119  16B5  0021               	movlb	1	; select bank1
  4120  16B6  1C20               	btfss	_myMain^(0+128),0
  4121  16B7  2EC0               	goto	l8487
  4122                           
  4123                           ;main_B1.c: 38: getLoad_AD(0x05);
  4124  16B8  3005               	movlw	5
  4125  16B9  318B  23CE  3196   	fcall	_getLoad_AD
  4126                           
  4127                           ;main_B1.c: 42: getTemp_AD(0x09);
  4128  16BC  3009               	movlw	9
  4129  16BD  3193  2358  3196   	fcall	_getTemp_AD
  4130  16C0                     l8487:	
  4131                           
  4132                           ;main_B1.c: 57: }
  4133                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4134  16C0  0022               	movlb	2	; select bank2
  4135  16C1  1C20               	btfss	_Timer1^(0+256),0
  4136  16C2  2EB5               	goto	l8483
  4137                           
  4138                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4139  16C3  1020               	bcf	_Timer1^(0+256),0
  4140                           
  4141                           ;main_B1.c: 96: my_MainTimer();
  4142  16C4  3192  22DE  3196   	fcall	_my_MainTimer
  4143                           
  4144                           ;main_B1.c: 97: WDT_Main();
  4145  16C7  319C  2434  3196   	fcall	_WDT_Main
  4146                           
  4147                           ;main_B1.c: 98: ;;
  4148                           ;main_B1.c: 99: ;;
  4149                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4150  16CA  0021               	movlb	1	; select bank1
  4151  16CB  1C20               	btfss	_myMain^(0+128),0
  4152  16CC  2EB5               	goto	l8483
  4153                           
  4154                           ;main_B1.c: 101: Flash_Memory_Main();
  4155  16CD  3191  21CC  3196   	fcall	_Flash_Memory_Main
  4156                           
  4157                           ;main_B1.c: 103: LED_Main();
  4158  16D0  319B  234D  3196   	fcall	_LED_Main
  4159                           
  4160                           ;main_B1.c: 104: Buzzer_Main();
  4161  16D3  3194  2459  3196   	fcall	_Buzzer_Main
  4162                           
  4163                           ;main_B1.c: 106: ;;
  4164                           ;main_B1.c: 107: Temp_Main();
  4165  16D6  319A  228F  3196   	fcall	_Temp_Main
  4166                           
  4167                           ;main_B1.c: 108: Load_Main();
  4168  16D9  3180  204B  3196   	fcall	_Load_Main
  4169                           
  4170                           ;main_B1.c: 109: ;;
  4171                           ;main_B1.c: 111: ;;
  4172                           ;main_B1.c: 112: DimmerLights_Main();
  4173  16DC  3191  2198  3196   	fcall	_DimmerLights_Main
  4174                           
  4175                           ;main_B1.c: 113: Switch_Main();
  4176  16DF  319F  2766  3196   	fcall	_Switch_Main
  4177                           
  4178                           ;main_B1.c: 114: ;;
  4179                           ;main_B1.c: 115: ;;
  4180                           ;main_B1.c: 117: RF_Main();
  4181  16E2  319A  2289  3196   	fcall	_RF_Main
  4182                           
  4183                           ;main_B1.c: 118: DelayOff_Main();
  4184  16E5  319A  22D5  3196   	fcall	_DelayOff_Main
  4185                           
  4186                           ;main_B1.c: 119: ;;
  4187                           ;main_B1.c: 120: ;;
  4188                           ;main_B1.c: 121: Exception_Main();
  4189  16E8  319D  25D5  3196   	fcall	_Exception_Main
  4190  16EB  2EB5               	goto	l8483
  4191  16EC                     __end_of_main:	
  4192                           ;main_B1.c: 128: }
  4193                           ;main_B1.c: 129: }
  4194                           ;main_B1.c: 163: }
  4195                           ;main_B1.c: 164: return (0);
  4196                           ;	Return value of _main is never used
  4197                           
  4198                           
  4199                           	psect	text1
  4200  12DE                     __ptext1:	
  4201 ;; *************** function _my_MainTimer *****************
  4202 ;; Defined at:
  4203 ;;		line 185 in file "../src/main_B1.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;		None               void
  4210 ;; Registers used:
  4211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;Total ram usage:        1 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    7
  4224 ;; This function calls:
  4225 ;;		_setBuz
  4226 ;; This function is called by:
  4227 ;;		_main
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _my_MainTimer
  4233  12DE                     _my_MainTimer:	
  4234                           
  4235                           ;main_B1.c: 188: if (myMain.PowerON == 0) {
  4236                           
  4237                           ;incstack = 0
  4238                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4239  12DE  0021               	movlb	1	; select bank1
  4240  12DF  1820               	btfsc	_myMain^(0+128),0
  4241  12E0  2AF8               	goto	l8339
  4242                           
  4243                           ;main_B1.c: 189: myMain.PowerCount++;
  4244  12E1  3001               	movlw	1
  4245  12E2  0020               	movlb	0	; select bank0
  4246  12E3  00AD               	movwf	??_my_MainTimer
  4247  12E4  082D               	movf	??_my_MainTimer,w
  4248  12E5  0021               	movlb	1	; select bank1
  4249  12E6  07A1               	addwf	(_myMain^(0+128)+1),f
  4250                           
  4251                           ;main_B1.c: 190: if (myMain.PowerCount == 150) {
  4252  12E7  0821               	movf	(_myMain^(0+128)+1),w
  4253  12E8  3A96               	xorlw	150
  4254  12E9  1D03               	skipz
  4255  12EA  0008               	return
  4256                           
  4257                           ;main_B1.c: 191: myMain.PowerCount = 0;
  4258  12EB  01A1               	clrf	(_myMain^(0+128)+1)
  4259                           
  4260                           ;main_B1.c: 192: myMain.PowerON = 1;
  4261  12EC  1420               	bsf	_myMain^(0+128),0
  4262                           
  4263                           ;main_B1.c: 197: setBuz(3, 50);
  4264  12ED  3032               	movlw	50
  4265  12EE  0020               	movlb	0	; select bank0
  4266  12EF  00A9               	movwf	setBuz@time
  4267  12F0  3000               	movlw	0
  4268  12F1  00AA               	movwf	setBuz@time+1
  4269  12F2  3003               	movlw	3
  4270  12F3  3195  25DF         	fcall	_setBuz
  4271                           
  4272                           ;main_B1.c: 198: myMain.SelfTest = 1;
  4273  12F5  0021               	movlb	1	; select bank1
  4274  12F6  1620               	bsf	_myMain^(0+128),4
  4275                           
  4276                           ;main_B1.c: 207: }
  4277                           ;main_B1.c: 208: } else {
  4278  12F7  0008               	return
  4279  12F8                     l8339:	
  4280                           
  4281                           ;main_B1.c: 209: myMain.PowerCount++;
  4282  12F8  3001               	movlw	1
  4283  12F9  0020               	movlb	0	; select bank0
  4284  12FA  00AD               	movwf	??_my_MainTimer
  4285  12FB  082D               	movf	??_my_MainTimer,w
  4286  12FC  0021               	movlb	1	; select bank1
  4287  12FD  07A1               	addwf	(_myMain^(0+128)+1),f
  4288                           
  4289                           ;main_B1.c: 210: if (myMain.PowerCount == 100) {
  4290  12FE  0821               	movf	(_myMain^(0+128)+1),w
  4291  12FF  3A64               	xorlw	100
  4292  1300  1903               	btfsc	3,2
  4293                           
  4294                           ;main_B1.c: 211: myMain.PowerCount = 0;
  4295  1301  01A1               	clrf	(_myMain^(0+128)+1)
  4296                           
  4297                           ;main_B1.c: 226: }
  4298                           ;main_B1.c: 228: myMain.Count1++;
  4299  1302  3001               	movlw	1
  4300  1303  07A4               	addwf	(_myMain^(0+128)+4),f
  4301  1304  3000               	movlw	0
  4302  1305  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4303                           
  4304                           ;main_B1.c: 229: if (myMain.Count1 == 100)
  4305  1306  3004               	movlw	4
  4306  1307  3EA0               	addlw	_myMain& (0+255)
  4307  1308  0086               	movwf	6
  4308  1309  0187               	clrf	7
  4309  130A  3F40               	moviw [0]fsr1
  4310  130B  3A64               	xorlw	100
  4311  130C  1D03               	skipz
  4312  130D  2B10               	goto	u8525
  4313  130E  3F41               	moviw [1]fsr1
  4314  130F  3A00               	xorlw	0
  4315  1310                     u8525:	
  4316  1310  1D03               	skipz
  4317  1311  0008               	return
  4318                           
  4319                           ;main_B1.c: 230: {
  4320                           ;main_B1.c: 231: myMain.Count1 = 0;
  4321  1312  01A4               	clrf	(_myMain^(0+128)+4)
  4322  1313  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4323                           
  4324                           ;main_B1.c: 243: if (myMain.Flag) {
  4325  1314  1CA0               	btfss	_myMain^(0+128),1
  4326  1315  2B18               	goto	l2684
  4327                           
  4328                           ;main_B1.c: 244: myMain.Flag = 0;
  4329  1316  10A0               	bcf	_myMain^(0+128),1
  4330                           
  4331                           ;main_B1.c: 253: } else {
  4332  1317  0008               	return
  4333  1318                     l2684:	
  4334                           
  4335                           ;main_B1.c: 254: myMain.Flag = 1;
  4336  1318  14A0               	bsf	_myMain^(0+128),1
  4337  1319  0008               	return
  4338  131A                     __end_of_my_MainTimer:	
  4339                           
  4340                           	psect	text2
  4341  07F1                     __ptext2:	
  4342 ;; *************** function _myMain_Initialization *****************
  4343 ;; Defined at:
  4344 ;;		line 170 in file "../src/main_B1.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;		None
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;		None
  4349 ;; Return value:  Size  Location     Type
  4350 ;;		None               void
  4351 ;; Registers used:
  4352 ;;		wreg, fsr1l, fsr1h
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4360 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4361 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4362 ;;Total ram usage:        1 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    5
  4365 ;; This function calls:
  4366 ;;		Nothing
  4367 ;; This function is called by:
  4368 ;;		_main
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           
  4373                           ;psect for function _myMain_Initialization
  4374  07F1                     _myMain_Initialization:	
  4375                           
  4376                           ;main_B1.c: 173: product = &_product;
  4377                           
  4378                           ;incstack = 0
  4379                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4380  07F1  3045               	movlw	__product& (0+255)
  4381  07F2  0020               	movlb	0	; select bank0
  4382  07F3  00A0               	movwf	??_myMain_Initialization
  4383  07F4  0820               	movf	??_myMain_Initialization,w
  4384  07F5  00EE               	movwf	_product
  4385                           
  4386                           ;main_B1.c: 174: product->Data[20] = 210;
  4387  07F6  30D2               	movlw	210
  4388  07F7  00A0               	movwf	??_myMain_Initialization
  4389  07F8  086E               	movf	_product,w
  4390  07F9  3E14               	addlw	20
  4391  07FA  0086               	movwf	6
  4392  07FB  3002               	movlw	2	; select bank4/5
  4393  07FC  0087               	movwf	7
  4394  07FD  0820               	movf	??_myMain_Initialization,w
  4395  07FE  0081               	movwf	1
  4396  07FF  0008               	return
  4397  0800                     __end_of_myMain_Initialization:	
  4398                           
  4399                           	psect	text3
  4400  1358                     __ptext3:	
  4401 ;; *************** function _getTemp_AD *****************
  4402 ;; Defined at:
  4403 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  channel         1    wreg     unsigned char 
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;  channel         1    5[BANK0 ] unsigned char 
  4408 ;; Return value:  Size  Location     Type
  4409 ;;		None               void
  4410 ;; Registers used:
  4411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;Total ram usage:        2 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    7
  4424 ;; This function calls:
  4425 ;;		_getAD
  4426 ;; This function is called by:
  4427 ;;		_main
  4428 ;; This function uses a non-reentrant model
  4429 ;;
  4430                           
  4431                           
  4432                           ;psect for function _getTemp_AD
  4433  1358                     _getTemp_AD:	
  4434                           
  4435                           ;incstack = 0
  4436                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4437                           ;getTemp_AD@channel stored from wreg
  4438  1358  0020               	movlb	0	; select bank0
  4439  1359  00A5               	movwf	getTemp_AD@channel
  4440                           
  4441                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4442  135A  0021               	movlb	1	; select bank1
  4443  135B  1D56               	btfss	_Temp^(0+128),2
  4444  135C  0008               	return
  4445                           
  4446                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4447  135D  30F0               	movlw	240
  4448  135E  0020               	movlb	0	; select bank0
  4449  135F  00A4               	movwf	??_getTemp_AD
  4450  1360  0824               	movf	??_getTemp_AD,w
  4451  1361  00A0               	movwf	getAD@adcon1
  4452  1362  0825               	movf	getTemp_AD@channel,w
  4453  1363  319E  269D  3193   	fcall	_getAD
  4454  1366  0020               	movlb	0	; select bank0
  4455  1367  0821               	movf	?_getAD+1,w
  4456  1368  0021               	movlb	1	; select bank1
  4457  1369  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4458  136A  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4459  136B  0020               	movlb	0	; select bank0
  4460  136C  0820               	movf	?_getAD,w
  4461  136D  0021               	movlb	1	; select bank1
  4462  136E  01E2               	clrf	(_Temp^(0+128)+12)
  4463  136F  07E2               	addwf	(_Temp^(0+128)+12),f
  4464                           
  4465                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4466  1370  300C               	movlw	12
  4467  1371  3ED6               	addlw	_Temp& (0+255)
  4468  1372  0086               	movwf	6
  4469  1373  0187               	clrf	7
  4470  1374  0016               	moviw fsr1++
  4471  1375  0401               	iorwf	1,w
  4472  1376  1903               	skipnz
  4473  1377  0008               	return
  4474                           
  4475                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4476  1378  0863               	movf	((_Temp+1)^(0+128)+12),w
  4477  1379  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4478  137A  1D03               	skipz
  4479  137B  2B7E               	goto	u8445
  4480  137C  0862               	movf	(_Temp^(0+128)+12),w
  4481  137D  025E               	subwf	(_Temp^(0+128)+8),w
  4482  137E                     u8445:	
  4483  137E  1803               	skipnc
  4484  137F  2B87               	goto	l8287
  4485                           
  4486                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4487  1380  0863               	movf	((_Temp+1)^(0+128)+12),w
  4488  1381  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4489  1382  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4490  1383  0862               	movf	(_Temp^(0+128)+12),w
  4491  1384  01DE               	clrf	(_Temp^(0+128)+8)
  4492  1385  07DE               	addwf	(_Temp^(0+128)+8),f
  4493                           
  4494                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4495  1386  0008               	return
  4496  1387                     l8287:	
  4497  1387  0863               	movf	((_Temp+1)^(0+128)+12),w
  4498  1388  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4499  1389  1D03               	skipz
  4500  138A  2B8D               	goto	u8455
  4501  138B  0862               	movf	(_Temp^(0+128)+12),w
  4502  138C  0260               	subwf	(_Temp^(0+128)+10),w
  4503  138D                     u8455:	
  4504  138D  1803               	skipnc
  4505  138E  0008               	return
  4506                           
  4507                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4508  138F  0863               	movf	((_Temp+1)^(0+128)+12),w
  4509  1390  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4510  1391  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4511  1392  0862               	movf	(_Temp^(0+128)+12),w
  4512  1393  01E0               	clrf	(_Temp^(0+128)+10)
  4513  1394  07E0               	addwf	(_Temp^(0+128)+10),f
  4514  1395  0008               	return
  4515  1396                     __end_of_getTemp_AD:	
  4516                           
  4517                           	psect	text4
  4518  0BCE                     __ptext4:	
  4519 ;; *************** function _getLoad_AD *****************
  4520 ;; Defined at:
  4521 ;;		line 15 in file "../src/OverLoad_B1.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  channel         1    wreg     unsigned char 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;  channel         1    6[BANK0 ] unsigned char 
  4526 ;;  i               1    9[BANK0 ] unsigned char 
  4527 ;;  j               1    8[BANK0 ] unsigned char 
  4528 ;;  k               1    7[BANK0 ] unsigned char 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;		None               void
  4531 ;; Registers used:
  4532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4541 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4542 ;;Total ram usage:        6 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    7
  4545 ;; This function calls:
  4546 ;;		_getAD
  4547 ;; This function is called by:
  4548 ;;		_main
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           
  4553                           ;psect for function _getLoad_AD
  4554  0BCE                     _getLoad_AD:	
  4555                           
  4556                           ;incstack = 0
  4557                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4558                           ;getLoad_AD@channel stored from wreg
  4559  0BCE  0020               	movlb	0	; select bank0
  4560  0BCF  00A6               	movwf	getLoad_AD@channel
  4561                           
  4562                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4563  0BD0  01A9               	clrf	getLoad_AD@i
  4564  0BD1  01A8               	clrf	getLoad_AD@j
  4565  0BD2  01A7               	clrf	getLoad_AD@k
  4566                           
  4567                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4568  0BD3  0022               	movlb	2	; select bank2
  4569  0BD4  1E25               	btfss	_Load^(0+256),4
  4570  0BD5  0008               	return
  4571                           
  4572                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4573  0BD6  30F3               	movlw	243
  4574  0BD7  0020               	movlb	0	; select bank0
  4575  0BD8  00A4               	movwf	??_getLoad_AD
  4576  0BD9  0824               	movf	??_getLoad_AD,w
  4577  0BDA  00A0               	movwf	getAD@adcon1
  4578  0BDB  0826               	movf	getLoad_AD@channel,w
  4579  0BDC  319E  269D  318B   	fcall	_getAD
  4580  0BDF  0020               	movlb	0	; select bank0
  4581  0BE0  0821               	movf	?_getAD+1,w
  4582  0BE1  0022               	movlb	2	; select bank2
  4583  0BE2  01C7               	clrf	((_Load+1)^(0+256)+33)
  4584  0BE3  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4585  0BE4  0020               	movlb	0	; select bank0
  4586  0BE5  0820               	movf	?_getAD,w
  4587  0BE6  0022               	movlb	2	; select bank2
  4588  0BE7  01C6               	clrf	(_Load^(0+256)+33)
  4589  0BE8  07C6               	addwf	(_Load^(0+256)+33),f
  4590                           
  4591                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4592  0BE9  0020               	movlb	0	; select bank0
  4593  0BEA  01A9               	clrf	getLoad_AD@i
  4594  0BEB  3004               	movlw	4
  4595  0BEC  0229               	subwf	getLoad_AD@i,w
  4596  0BED  1803               	btfsc	3,0
  4597  0BEE  2C1C               	goto	l8105
  4598  0BEF                     l8093:	
  4599                           
  4600                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4601  0BEF  3529               	lslf	getLoad_AD@i,w
  4602  0BF0  3E30               	addlw	(_Load+11)& (0+255)
  4603  0BF1  0086               	movwf	6
  4604  0BF2  3001               	movlw	1	; select bank2/3
  4605  0BF3  0087               	movwf	7
  4606  0BF4  3F40               	moviw [0]fsr1
  4607  0BF5  00A4               	movwf	??_getLoad_AD
  4608  0BF6  3F41               	moviw [1]fsr1
  4609  0BF7  00A5               	movwf	??_getLoad_AD+1
  4610  0BF8  0022               	movlb	2	; select bank2
  4611  0BF9  0847               	movf	((_Load+1)^(0+256)+33),w
  4612  0BFA  0020               	movlb	0	; select bank0
  4613  0BFB  0225               	subwf	??_getLoad_AD+1,w
  4614  0BFC  1D03               	skipz
  4615  0BFD  2C02               	goto	u8075
  4616  0BFE  0022               	movlb	2	; select bank2
  4617  0BFF  0846               	movf	(_Load^(0+256)+33),w
  4618  0C00  0020               	movlb	0	; select bank0
  4619  0C01  0224               	subwf	??_getLoad_AD,w
  4620  0C02                     u8075:	
  4621  0C02  1803               	skipnc
  4622  0C03  2C14               	goto	l8101
  4623  0C04  08A8               	movf	getLoad_AD@j,f
  4624  0C05  1D03               	skipz
  4625  0C06  2C14               	goto	l8101
  4626                           
  4627                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4628  0C07  3529               	lslf	getLoad_AD@i,w
  4629  0C08  3E30               	addlw	(_Load+11)& (0+255)
  4630  0C09  0086               	movwf	6
  4631  0C0A  3001               	movlw	1	; select bank2/3
  4632  0C0B  0087               	movwf	7
  4633  0C0C  0022               	movlb	2	; select bank2
  4634  0C0D  0846               	movf	(_Load^(0+256)+33),w
  4635  0C0E  3FC0               	movwi [0]fsr1
  4636  0C0F  0847               	movf	((_Load+1)^(0+256)+33),w
  4637  0C10  3FC1               	movwi [1]fsr1
  4638                           
  4639                           ;OverLoad_B1.c: 24: j = 1;
  4640  0C11  0020               	movlb	0	; select bank0
  4641  0C12  01A8               	clrf	getLoad_AD@j
  4642  0C13  0AA8               	incf	getLoad_AD@j,f
  4643  0C14                     l8101:	
  4644  0C14  3001               	movlw	1
  4645  0C15  00A4               	movwf	??_getLoad_AD
  4646  0C16  0824               	movf	??_getLoad_AD,w
  4647  0C17  07A9               	addwf	getLoad_AD@i,f
  4648  0C18  3004               	movlw	4
  4649  0C19  0229               	subwf	getLoad_AD@i,w
  4650  0C1A  1C03               	skipc
  4651  0C1B  2BEF               	goto	l8093
  4652  0C1C                     l8105:	
  4653                           
  4654                           ;OverLoad_B1.c: 25: }
  4655                           ;OverLoad_B1.c: 26: }
  4656                           ;OverLoad_B1.c: 27: if (j == 0) {
  4657  0C1C  08A8               	movf	getLoad_AD@j,f
  4658  0C1D  1D03               	skipz
  4659  0C1E  0008               	return
  4660                           
  4661                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4662  0C1F  01A9               	clrf	getLoad_AD@i
  4663  0C20                     L1:	
  4664  0C20  3004               	movlw	4
  4665  0C21  0229               	subwf	getLoad_AD@i,w
  4666  0C22  1803               	btfsc	3,0
  4667  0C23  0008               	return
  4668                           
  4669                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4670  0C24  3529               	lslf	getLoad_AD@i,w
  4671  0C25  3E3A               	addlw	(_Load+21)& (0+255)
  4672  0C26  0086               	movwf	6
  4673  0C27  3001               	movlw	1	; select bank2/3
  4674  0C28  0087               	movwf	7
  4675  0C29  3F40               	moviw [0]fsr1
  4676  0C2A  00A4               	movwf	??_getLoad_AD
  4677  0C2B  3F41               	moviw [1]fsr1
  4678  0C2C  00A5               	movwf	??_getLoad_AD+1
  4679  0C2D  0825               	movf	??_getLoad_AD+1,w
  4680  0C2E  0022               	movlb	2	; select bank2
  4681  0C2F  0247               	subwf	((_Load+1)^(0+256)+33),w
  4682  0C30  1D03               	skipz
  4683  0C31  2C36               	goto	u8125
  4684  0C32  0020               	movlb	0	; select bank0
  4685  0C33  0824               	movf	??_getLoad_AD,w
  4686  0C34  0022               	movlb	2	; select bank2
  4687  0C35  0246               	subwf	(_Load^(0+256)+33),w
  4688  0C36                     u8125:	
  4689  0C36  1803               	skipnc
  4690  0C37  2C49               	goto	l8121
  4691  0C38  0020               	movlb	0	; select bank0
  4692  0C39  08A7               	movf	getLoad_AD@k,f
  4693  0C3A  1D03               	skipz
  4694  0C3B  2C49               	goto	l8121
  4695                           
  4696                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4697  0C3C  3529               	lslf	getLoad_AD@i,w
  4698  0C3D  3E3A               	addlw	(_Load+21)& (0+255)
  4699  0C3E  0086               	movwf	6
  4700  0C3F  3001               	movlw	1	; select bank2/3
  4701  0C40  0087               	movwf	7
  4702  0C41  0022               	movlb	2	; select bank2
  4703  0C42  0846               	movf	(_Load^(0+256)+33),w
  4704  0C43  3FC0               	movwi [0]fsr1
  4705  0C44  0847               	movf	((_Load+1)^(0+256)+33),w
  4706  0C45  3FC1               	movwi [1]fsr1
  4707                           
  4708                           ;OverLoad_B1.c: 31: k = 1;
  4709  0C46  0020               	movlb	0	; select bank0
  4710  0C47  01A7               	clrf	getLoad_AD@k
  4711  0C48  0AA7               	incf	getLoad_AD@k,f
  4712  0C49                     l8121:	
  4713  0C49  3001               	movlw	1
  4714  0C4A  0020               	movlb	0	; select bank0
  4715  0C4B  00A4               	movwf	??_getLoad_AD
  4716  0C4C  0824               	movf	??_getLoad_AD,w
  4717  0C4D  07A9               	addwf	getLoad_AD@i,f
  4718  0C4E  2C20               	goto	L1
  4719  0C4F                     __end_of_getLoad_AD:	
  4720                           
  4721                           	psect	text5
  4722  1E9D                     __ptext5:	
  4723 ;; *************** function _getAD *****************
  4724 ;; Defined at:
  4725 ;;		line 454 in file "../src/MCU_B1.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;  adcon0          1    wreg     unsigned char 
  4728 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  2    0[BANK0 ] int 
  4733 ;; Registers used:
  4734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4740 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4743 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4744 ;;Total ram usage:        4 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    6
  4747 ;; This function calls:
  4748 ;;		_Timeout_Counter
  4749 ;;		_set_TimeoutCleared
  4750 ;; This function is called by:
  4751 ;;		_getLoad_AD
  4752 ;;		_getTemp_AD
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _getAD
  4758  1E9D                     _getAD:	
  4759                           
  4760                           ;incstack = 0
  4761                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4762                           ;getAD@adcon0 stored from wreg
  4763  1E9D  0020               	movlb	0	; select bank0
  4764  1E9E  00A3               	movwf	getAD@adcon0
  4765                           
  4766                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4767  1E9F  0823               	movf	getAD@adcon0,w
  4768  1EA0  0021               	movlb	1	; select bank1
  4769  1EA1  009D               	movwf	29	;volatile
  4770                           
  4771                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4772  1EA2  0020               	movlb	0	; select bank0
  4773  1EA3  0820               	movf	getAD@adcon1,w
  4774  1EA4  0021               	movlb	1	; select bank1
  4775  1EA5  009E               	movwf	30	;volatile
  4776                           
  4777                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4778  1EA6  149D               	bsf	29,1	;volatile
  4779                           
  4780                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4781  1EA7  2EAB               	goto	l7493
  4782  1EA8                     l7491:	
  4783                           
  4784                           ;MCU_B1.c: 459: Timeout_Counter();
  4785  1EA8  319D  250A  319E   	fcall	_Timeout_Counter
  4786  1EAB                     l7493:	
  4787  1EAB  0021               	movlb	1	; select bank1
  4788  1EAC  1C9D               	btfss	29,1	;volatile
  4789  1EAD  2EB0               	goto	l7497
  4790  1EAE  1D2B               	btfss	(_myMain^(0+128)+11),2
  4791  1EAF  2EA8               	goto	l7491
  4792  1EB0                     l7497:	
  4793                           
  4794                           ;MCU_B1.c: 460: };
  4795                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4796  1EB0  319A  22A2         	fcall	_set_TimeoutCleared
  4797                           
  4798                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4799  1EB2  0021               	movlb	1	; select bank1
  4800  1EB3  081C               	movf	28,w	;volatile
  4801  1EB4  0020               	movlb	0	; select bank0
  4802  1EB5  01A1               	clrf	?_getAD+1
  4803  1EB6  07A1               	addwf	?_getAD+1,f
  4804  1EB7  0021               	movlb	1	; select bank1
  4805  1EB8  081B               	movf	27,w	;volatile
  4806  1EB9  0020               	movlb	0	; select bank0
  4807  1EBA  01A0               	clrf	?_getAD
  4808  1EBB  07A0               	addwf	?_getAD,f
  4809  1EBC  0008               	return
  4810  1EBD                     __end_of_getAD:	
  4811                           
  4812                           	psect	text6
  4813  1C34                     __ptext6:	
  4814 ;; *************** function _WDT_Main *****************
  4815 ;; Defined at:
  4816 ;;		line 1098 in file "../src/MCU_B1.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;		None
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;		None               void
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0, pclath, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;Total ram usage:        1 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    6
  4837 ;; This function calls:
  4838 ;;		_WDT_Clearing
  4839 ;; This function is called by:
  4840 ;;		_main
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function _WDT_Main
  4846  1C34                     _WDT_Main:	
  4847                           
  4848                           ;MCU_B1.c: 1099: if (WDT.Enable == 1) {
  4849                           
  4850                           ;incstack = 0
  4851                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4852  1C34  0021               	movlb	1	; select bank1
  4853  1C35  1C49               	btfss	_WDT^(0+128),0
  4854  1C36  0008               	return
  4855                           
  4856                           ;MCU_B1.c: 1100: if (WDT.Timer-- > 0) {
  4857  1C37  3001               	movlw	1
  4858  1C38  02CA               	subwf	(_WDT^(0+128)+1),f
  4859  1C39  084A               	movf	(_WDT^(0+128)+1),w
  4860  1C3A  3AFF               	xorlw	255
  4861  1C3B  1903               	skipnz
  4862  1C3C  0008               	return
  4863                           
  4864                           ;MCU_B1.c: 1101: WDT.Timer = 100;
  4865  1C3D  3064               	movlw	100
  4866  1C3E  0020               	movlb	0	; select bank0
  4867  1C3F  00A0               	movwf	??_WDT_Main
  4868  1C40  0820               	movf	??_WDT_Main,w
  4869  1C41  0021               	movlb	1	; select bank1
  4870  1C42  00CA               	movwf	(_WDT^(0+128)+1)
  4871                           
  4872                           ;MCU_B1.c: 1102: WDT_Clearing();
  4873  1C43  3180  2002         	fcall	_WDT_Clearing
  4874  1C45  0008               	return
  4875  1C46                     __end_of_WDT_Main:	
  4876                           
  4877                           	psect	text7
  4878  0002                     __ptext7:	
  4879 ;; *************** function _WDT_Clearing *****************
  4880 ;; Defined at:
  4881 ;;		line 1108 in file "../src/MCU_B1.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;		None
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;		None               void
  4888 ;; Registers used:
  4889 ;;		None
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;Total ram usage:        0 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    5
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		_WDT_Main
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           
  4910                           ;psect for function _WDT_Clearing
  4911  0002                     _WDT_Clearing:	
  4912                           
  4913                           ;incstack = 0
  4914                           ; Regs used in _WDT_Clearing: []
  4915  0002  0064               	clrwdt	;# 
  4916  0003  0008               	return
  4917  0004                     __end_of_WDT_Clearing:	
  4918                           
  4919                           	psect	text8
  4920  1A8F                     __ptext8:	
  4921 ;; *************** function _Temp_Main *****************
  4922 ;; Defined at:
  4923 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;		None
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;		None
  4928 ;; Return value:  Size  Location     Type
  4929 ;;		None               void
  4930 ;; Registers used:
  4931 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;Total ram usage:        0 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    8
  4944 ;; This function calls:
  4945 ;;		_setTemp_Main
  4946 ;; This function is called by:
  4947 ;;		_main
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           
  4952                           ;psect for function _Temp_Main
  4953  1A8F                     _Temp_Main:	
  4954                           
  4955                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4956                           
  4957                           ;incstack = 0
  4958                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4959  1A8F  318E  2699         	fcall	_setTemp_Main
  4960  1A91  0008               	return
  4961  1A92                     __end_of_Temp_Main:	
  4962                           
  4963                           	psect	text9
  4964  0E99                     __ptext9:	
  4965 ;; *************** function _setTemp_Main *****************
  4966 ;; Defined at:
  4967 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;		None
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  error           1   15[BANK0 ] unsigned char 
  4972 ;; Return value:  Size  Location     Type
  4973 ;;		None               void
  4974 ;; Registers used:
  4975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;Total ram usage:        3 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    7
  4988 ;; This function calls:
  4989 ;;		_getMain_All_Error_Status
  4990 ;;		_setBuz
  4991 ;; This function is called by:
  4992 ;;		_Temp_Main
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           
  4997                           ;psect for function _setTemp_Main
  4998  0E99                     _setTemp_Main:	
  4999                           
  5000                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  5001                           
  5002                           ;incstack = 0
  5003                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5004  0E99  3000               	movlw	0
  5005  0E9A  3191  2165  318E   	fcall	_getMain_All_Error_Status
  5006  0E9D  0020               	movlb	0	; select bank0
  5007  0E9E  00AD               	movwf	??_setTemp_Main
  5008  0E9F  082D               	movf	??_setTemp_Main,w
  5009  0EA0  00AF               	movwf	setTemp_Main@error
  5010                           
  5011                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5012  0EA1  0021               	movlb	1	; select bank1
  5013  0EA2  1C56               	btfss	_Temp^(0+128),0
  5014  0EA3  2F48               	goto	l1618
  5015                           
  5016                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5017  0EA4  1956               	btfsc	_Temp^(0+128),2
  5018  0EA5  2EB5               	goto	l7571
  5019                           
  5020                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5021  0EA6  3001               	movlw	1
  5022  0EA7  07D7               	addwf	(_Temp^(0+128)+1),f
  5023  0EA8  3000               	movlw	0
  5024  0EA9  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5025                           
  5026                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  5027  0EAA  3001               	movlw	1
  5028  0EAB  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5029  0EAC  30F4               	movlw	244
  5030  0EAD  1903               	skipnz
  5031  0EAE  0257               	subwf	(_Temp^(0+128)+1),w
  5032  0EAF  1C03               	skipc
  5033  0EB0  0008               	return
  5034                           
  5035                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5036  0EB1  01D7               	clrf	(_Temp^(0+128)+1)
  5037  0EB2  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5038                           
  5039                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5040  0EB3  1556               	bsf	_Temp^(0+128),2
  5041                           
  5042                           ;OverTemperature_B1.c: 70: }
  5043                           ;OverTemperature_B1.c: 71: } else {
  5044  0EB4  0008               	return
  5045  0EB5                     l7571:	
  5046                           
  5047                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5048  0EB5  3001               	movlw	1
  5049  0EB6  07D7               	addwf	(_Temp^(0+128)+1),f
  5050  0EB7  3000               	movlw	0
  5051  0EB8  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5052                           
  5053                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5054  0EB9  3000               	movlw	0
  5055  0EBA  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5056  0EBB  3005               	movlw	5
  5057  0EBC  1903               	skipnz
  5058  0EBD  0257               	subwf	(_Temp^(0+128)+1),w
  5059  0EBE  1C03               	skipc
  5060  0EBF  0008               	return
  5061                           
  5062                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5063  0EC0  01D7               	clrf	(_Temp^(0+128)+1)
  5064  0EC1  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5065                           
  5066                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5067  0EC2  3008               	movlw	8
  5068  0EC3  3ED6               	addlw	_Temp& (0+255)
  5069  0EC4  0086               	movwf	6
  5070  0EC5  0187               	clrf	7
  5071  0EC6  0016               	moviw fsr1++
  5072  0EC7  0401               	iorwf	1,w
  5073  0EC8  1903               	skipnz
  5074  0EC9  2F42               	goto	l7617
  5075  0ECA  300A               	movlw	10
  5076  0ECB  3ED6               	addlw	_Temp& (0+255)
  5077  0ECC  0086               	movwf	6
  5078  0ECD  0187               	clrf	7
  5079  0ECE  0016               	moviw fsr1++
  5080  0ECF  0401               	iorwf	1,w
  5081  0ED0  1903               	skipnz
  5082  0ED1  2F42               	goto	l7617
  5083                           
  5084                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5085  0ED2  1156               	bcf	_Temp^(0+128),2
  5086                           
  5087                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5088  0ED3  300A               	movlw	10
  5089  0ED4  3ED6               	addlw	_Temp& (0+255)
  5090  0ED5  0086               	movwf	6
  5091  0ED6  0187               	clrf	7
  5092  0ED7  3008               	movlw	8
  5093  0ED8  3ED6               	addlw	_Temp& (0+255)
  5094  0ED9  0084               	movwf	4
  5095  0EDA  0185               	clrf	5
  5096  0EDB  3F40               	moviw [0]fsr1
  5097  0EDC  0700               	addwf	0,w
  5098  0EDD  0020               	movlb	0	; select bank0
  5099  0EDE  00AD               	movwf	??_setTemp_Main
  5100  0EDF  3101               	addfsr 0,1
  5101  0EE0  3F41               	moviw [1]fsr1
  5102  0EE1  3D00               	addwfc	0,w
  5103  0EE2  00AE               	movwf	??_setTemp_Main+1
  5104  0EE3  36AE               	lsrf	??_setTemp_Main+1,f
  5105  0EE4  0CAD               	rrf	??_setTemp_Main,f
  5106  0EE5  082D               	movf	??_setTemp_Main,w
  5107  0EE6  0021               	movlb	1	; select bank1
  5108  0EE7  00DC               	movwf	(_Temp^(0+128)+6)
  5109  0EE8  0020               	movlb	0	; select bank0
  5110  0EE9  082E               	movf	??_setTemp_Main+1,w
  5111  0EEA  0021               	movlb	1	; select bank1
  5112  0EEB  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5113                           
  5114                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5115  0EEC  30C7               	movlw	199
  5116  0EED  00E4               	movwf	(_Temp^(0+128)+14)
  5117  0EEE  3001               	movlw	1
  5118  0EEF  00E5               	movwf	(_Temp^(0+128)+15)
  5119                           
  5120                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5121  0EF0  309F               	movlw	159
  5122  0EF1  00E6               	movwf	(_Temp^(0+128)+16)
  5123  0EF2  3001               	movlw	1
  5124  0EF3  00E7               	movwf	(_Temp^(0+128)+17)
  5125                           
  5126                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5127  0EF4  1CD6               	btfss	_Temp^(0+128),1
  5128  0EF5  2F16               	goto	l7603
  5129                           
  5130                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5131  0EF6  0865               	movf	((_Temp+1)^(0+128)+14),w
  5132  0EF7  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5133  0EF8  1D03               	skipz
  5134  0EF9  2EFC               	goto	u7155
  5135  0EFA  0864               	movf	(_Temp^(0+128)+14),w
  5136  0EFB  025C               	subwf	(_Temp^(0+128)+6),w
  5137  0EFC                     u7155:	
  5138  0EFC  1C03               	skipc
  5139  0EFD  2F14               	goto	l7601
  5140                           
  5141                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5142  0EFE  3001               	movlw	1
  5143  0EFF  0020               	movlb	0	; select bank0
  5144  0F00  00AD               	movwf	??_setTemp_Main
  5145  0F01  082D               	movf	??_setTemp_Main,w
  5146  0F02  0021               	movlb	1	; select bank1
  5147  0F03  07D9               	addwf	(_Temp^(0+128)+3),f
  5148                           
  5149                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5150  0F04  3003               	movlw	3
  5151  0F05  0259               	subwf	(_Temp^(0+128)+3),w
  5152  0F06  1C03               	skipc
  5153  0F07  2F2C               	goto	l7615
  5154                           
  5155                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5156  0F08  01D9               	clrf	(_Temp^(0+128)+3)
  5157                           
  5158                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5159  0F09  10D6               	bcf	_Temp^(0+128),1
  5160                           
  5161                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5162  0F0A  3064               	movlw	100
  5163  0F0B  0020               	movlb	0	; select bank0
  5164  0F0C  00A9               	movwf	setBuz@time
  5165  0F0D  3000               	movlw	0
  5166  0F0E  00AA               	movwf	setBuz@time+1
  5167  0F0F  3002               	movlw	2
  5168  0F10  3195  25DF  318E   	fcall	_setBuz
  5169                           
  5170                           ;OverTemperature_B1.c: 103: }
  5171                           ;OverTemperature_B1.c: 104: } else {
  5172  0F13  2F2C               	goto	l7615
  5173  0F14                     l7601:	
  5174                           
  5175                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5176  0F14  0021               	movlb	1	; select bank1
  5177  0F15  2F2B               	goto	l7613
  5178  0F16                     l7603:	
  5179                           ;OverTemperature_B1.c: 106: }
  5180                           ;OverTemperature_B1.c: 107: } else {
  5181                           
  5182                           
  5183                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5184  0F16  085D               	movf	((_Temp+1)^(0+128)+6),w
  5185  0F17  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5186  0F18  1D03               	skipz
  5187  0F19  2F1C               	goto	u7175
  5188  0F1A  085C               	movf	(_Temp^(0+128)+6),w
  5189  0F1B  0266               	subwf	(_Temp^(0+128)+16),w
  5190  0F1C                     u7175:	
  5191  0F1C  1C03               	skipc
  5192  0F1D  2F2B               	goto	l7613
  5193                           
  5194                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5195  0F1E  3001               	movlw	1
  5196  0F1F  0020               	movlb	0	; select bank0
  5197  0F20  00AD               	movwf	??_setTemp_Main
  5198  0F21  082D               	movf	??_setTemp_Main,w
  5199  0F22  0021               	movlb	1	; select bank1
  5200  0F23  07D9               	addwf	(_Temp^(0+128)+3),f
  5201                           
  5202                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5203  0F24  3003               	movlw	3
  5204  0F25  0259               	subwf	(_Temp^(0+128)+3),w
  5205  0F26  1C03               	skipc
  5206  0F27  2F2C               	goto	l7615
  5207                           
  5208                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5209  0F28  01D9               	clrf	(_Temp^(0+128)+3)
  5210                           
  5211                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5212  0F29  14D6               	bsf	_Temp^(0+128),1
  5213                           
  5214                           ;OverTemperature_B1.c: 113: }
  5215                           ;OverTemperature_B1.c: 114: } else {
  5216  0F2A  2F2C               	goto	l7615
  5217  0F2B                     l7613:	
  5218                           
  5219                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5220  0F2B  01D9               	clrf	(_Temp^(0+128)+3)
  5221  0F2C                     l7615:	
  5222                           
  5223                           ;OverTemperature_B1.c: 116: }
  5224                           ;OverTemperature_B1.c: 117: }
  5225                           ;OverTemperature_B1.c: 118: product->Data[24]=Temp.AD >> 8;
  5226  0F2C  0021               	movlb	1	; select bank1
  5227  0F2D  085D               	movf	((_Temp+1)^(0+128)+6),w
  5228  0F2E  0020               	movlb	0	; select bank0
  5229  0F2F  00AD               	movwf	??_setTemp_Main
  5230  0F30  086E               	movf	_product,w
  5231  0F31  3E18               	addlw	24
  5232  0F32  0086               	movwf	6
  5233  0F33  3002               	movlw	2	; select bank4/5
  5234  0F34  0087               	movwf	7
  5235  0F35  082D               	movf	??_setTemp_Main,w
  5236  0F36  0081               	movwf	1
  5237                           
  5238                           ;OverTemperature_B1.c: 119: product->Data[25]=Temp.AD;
  5239  0F37  0021               	movlb	1	; select bank1
  5240  0F38  085C               	movf	(_Temp^(0+128)+6),w
  5241  0F39  0020               	movlb	0	; select bank0
  5242  0F3A  00AD               	movwf	??_setTemp_Main
  5243  0F3B  086E               	movf	_product,w
  5244  0F3C  3E19               	addlw	25
  5245  0F3D  0086               	movwf	6
  5246  0F3E  3002               	movlw	2	; select bank4/5
  5247  0F3F  0087               	movwf	7
  5248  0F40  082D               	movf	??_setTemp_Main,w
  5249  0F41  0081               	movwf	1
  5250  0F42                     l7617:	
  5251                           
  5252                           ;OverTemperature_B1.c: 135: }
  5253                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5254  0F42  0021               	movlb	1	; select bank1
  5255  0F43  01DE               	clrf	(_Temp^(0+128)+8)
  5256  0F44  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5257                           
  5258                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5259  0F45  01E0               	clrf	(_Temp^(0+128)+10)
  5260  0F46  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5261                           
  5262                           ;OverTemperature_B1.c: 138: }
  5263                           ;OverTemperature_B1.c: 139: }
  5264                           ;OverTemperature_B1.c: 141: } else {
  5265  0F47  0008               	return
  5266  0F48                     l1618:	
  5267                           
  5268                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5269  0F48  1C20               	btfss	_myMain^(0+128),0
  5270  0F49  0008               	return
  5271                           
  5272                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5273  0F4A  1456               	bsf	_Temp^(0+128),0
  5274  0F4B  0008               	return
  5275  0F4C                     __end_of_setTemp_Main:	
  5276                           
  5277                           	psect	text10
  5278  1A8C                     __ptext10:	
  5279 ;; *************** function _Temp_Initialization *****************
  5280 ;; Defined at:
  5281 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;		None
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;		None               void
  5288 ;; Registers used:
  5289 ;;		status,2, status,0, pclath, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5299 ;;Total ram usage:        0 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    6
  5302 ;; This function calls:
  5303 ;;		_setTemp_Initialization
  5304 ;; This function is called by:
  5305 ;;		_main
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           
  5310                           ;psect for function _Temp_Initialization
  5311  1A8C                     _Temp_Initialization:	
  5312                           
  5313                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5317  1A8C  319A  2282         	fcall	_setTemp_Initialization
  5318  1A8E  0008               	return
  5319  1A8F                     __end_of_Temp_Initialization:	
  5320                           
  5321                           	psect	text11
  5322  1A82                     __ptext11:	
  5323 ;; *************** function _setTemp_Initialization *****************
  5324 ;; Defined at:
  5325 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;		None
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;		None
  5330 ;; Return value:  Size  Location     Type
  5331 ;;		None               void
  5332 ;; Registers used:
  5333 ;;		None
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;Total ram usage:        0 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    5
  5346 ;; This function calls:
  5347 ;;		Nothing
  5348 ;; This function is called by:
  5349 ;;		_Temp_Initialization
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           
  5354                           ;psect for function _setTemp_Initialization
  5355  1A82                     _setTemp_Initialization:	
  5356                           
  5357                           ;incstack = 0
  5358                           ; Regs used in _setTemp_Initialization: []
  5359  1A82  0008               	return
  5360  1A83                     __end_of_setTemp_Initialization:	
  5361                           
  5362                           	psect	text12
  5363  1F66                     __ptext12:	
  5364 ;; *************** function _Switch_Main *****************
  5365 ;; Defined at:
  5366 ;;		line 72 in file "../src/Switch_B1.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;		None
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;  error           1   30[BANK0 ] unsigned char 
  5371 ;; Return value:  Size  Location     Type
  5372 ;;		None               void
  5373 ;; Registers used:
  5374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5383 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5384 ;;Total ram usage:        2 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; Hardware stack levels required when called:   11
  5387 ;; This function calls:
  5388 ;;		_TouchPower
  5389 ;;		_getMain_All_Error_Status
  5390 ;;		_setMain_Exception
  5391 ;;		_setSw_Main
  5392 ;; This function is called by:
  5393 ;;		_main
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           
  5398                           ;psect for function _Switch_Main
  5399  1F66                     _Switch_Main:	
  5400                           
  5401                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5402                           
  5403                           ;incstack = 0
  5404                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5405  1F66  3000               	movlw	0
  5406  1F67  3191  2165  319F   	fcall	_getMain_All_Error_Status
  5407  1F6A  0020               	movlb	0	; select bank0
  5408  1F6B  00BD               	movwf	??_Switch_Main
  5409  1F6C  083D               	movf	??_Switch_Main,w
  5410  1F6D  00BE               	movwf	Switch_Main@error
  5411                           
  5412                           ;Switch_B1.c: 74: if (error != 0) {
  5413  1F6E  083E               	movf	Switch_Main@error,w
  5414  1F6F  1903               	btfsc	3,2
  5415  1F70  2F76               	goto	l2387
  5416                           
  5417                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5418  1F71  0021               	movlb	1	; select bank1
  5419  1F72  1851               	btfsc	_SwDetect^(0+128),0
  5420  1F73  2F7F               	goto	l8315
  5421                           
  5422                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5423  1F74  1451               	bsf	_SwDetect^(0+128),0
  5424  1F75  2F7A               	goto	L2
  5425  1F76                     l2387:	
  5426                           ;Switch_B1.c: 80: }
  5427                           ;Switch_B1.c: 81: } else {
  5428                           
  5429                           ;Switch_B1.c: 78: setMain_Exception(error);
  5430                           
  5431                           
  5432                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5433  1F76  0021               	movlb	1	; select bank1
  5434  1F77  1C51               	btfss	_SwDetect^(0+128),0
  5435  1F78  2F7F               	goto	l8315
  5436                           
  5437                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5438  1F79  1051               	bcf	_SwDetect^(0+128),0
  5439  1F7A                     L2:	
  5440                           
  5441                           ;Switch_B1.c: 85: setMain_Exception(error);
  5442  1F7A  0020               	movlb	0	; select bank0
  5443  1F7B  083E               	movf	Switch_Main@error,w
  5444  1F7C  3197  27A4  319F   	fcall	_setMain_Exception
  5445  1F7F                     l8315:	
  5446                           
  5447                           ;Switch_B1.c: 87: }
  5448                           ;Switch_B1.c: 88: }
  5449                           ;Switch_B1.c: 91: setSw_Main(1);
  5450  1F7F  3001               	movlw	1
  5451  1F80  3181  21C8  319F   	fcall	_setSw_Main
  5452                           
  5453                           ;Switch_B1.c: 95: setSw_Main(2);
  5454  1F83  3002               	movlw	2
  5455  1F84  3181  21C8  319F   	fcall	_setSw_Main
  5456                           
  5457                           ;Switch_B1.c: 103: TouchPower();
  5458  1F87  319D  2534         	fcall	_TouchPower
  5459  1F89  0008               	return
  5460  1F8A                     __end_of_Switch_Main:	
  5461                           
  5462                           	psect	text13
  5463  01C8                     __ptext13:	
  5464 ;; *************** function _setSw_Main *****************
  5465 ;; Defined at:
  5466 ;;		line 137 in file "../src/Switch_B1.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  sw              1    wreg     unsigned char 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  sw              1   19[BANK0 ] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;		None               void
  5473 ;; Registers used:
  5474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;Total ram usage:        3 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    9
  5487 ;; This function calls:
  5488 ;;		_SwPointSelect
  5489 ;;		_getSw_KeyStatus
  5490 ;;		_setBuz
  5491 ;;		_setDimmerLights_AdjControl
  5492 ;;		_setDimmerLights_SwOff
  5493 ;;		_setDimmerLights_SwOn
  5494 ;;		_setRF_Learn
  5495 ;; This function is called by:
  5496 ;;		_Switch_Main
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           
  5501                           ;psect for function _setSw_Main
  5502  01C8                     _setSw_Main:	
  5503                           
  5504                           ;incstack = 0
  5505                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5506                           ;setSw_Main@sw stored from wreg
  5507  01C8  0020               	movlb	0	; select bank0
  5508  01C9  00B3               	movwf	setSw_Main@sw
  5509                           
  5510                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5511  01CA  0833               	movf	setSw_Main@sw,w
  5512  01CB  319C  24E2  3181   	fcall	_SwPointSelect
  5513                           
  5514                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5515  01CE  087C               	movf	_Sw,w
  5516  01CF  0086               	movwf	6
  5517  01D0  3001               	movlw	1	; select bank2/3
  5518  01D1  0087               	movwf	7
  5519  01D2  1C01               	btfss	1,0
  5520  01D3  2B2E               	goto	l2397
  5521                           
  5522                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5523  01D4  0021               	movlb	1	; select bank1
  5524  01D5  1851               	btfsc	_SwDetect^(0+128),0
  5525  01D6  29F2               	goto	l7787
  5526                           
  5527                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5528  01D7  0A7C               	incf	_Sw,w
  5529  01D8  0086               	movwf	6
  5530  01D9  3001               	movlw	1	; select bank2/3
  5531  01DA  0087               	movwf	7
  5532  01DB  1081               	bcf	1,1
  5533                           
  5534                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5535  01DC  0020               	movlb	0	; select bank0
  5536  01DD  0833               	movf	setSw_Main@sw,w
  5537  01DE  319E  267E  3181   	fcall	_getSw_KeyStatus
  5538  01E1  3A01               	xorlw	1
  5539  01E2  3000               	movlw	0
  5540  01E3  1903               	skipnz
  5541  01E4  3001               	movlw	1
  5542  01E5  0020               	movlb	0	; select bank0
  5543  01E6  00B1               	movwf	??_setSw_Main
  5544  01E7  087C               	movf	_Sw,w
  5545  01E8  0086               	movwf	6
  5546  01E9  3001               	movlw	1	; select bank2/3
  5547  01EA  0087               	movwf	7
  5548  01EB  0DB1               	rlf	??_setSw_Main,f
  5549  01EC  0801               	movf	1,w
  5550  01ED  0631               	xorwf	??_setSw_Main,w
  5551  01EE  39FD               	andlw	-3
  5552  01EF  0631               	xorwf	??_setSw_Main,w
  5553  01F0  0081               	movwf	1
  5554                           
  5555                           ;Switch_B1.c: 143: } else {
  5556  01F1  2A07               	goto	l2399
  5557  01F2                     l7787:	
  5558                           
  5559                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5560  01F2  0A7C               	incf	_Sw,w
  5561  01F3  0086               	movwf	6
  5562  01F4  3001               	movlw	1	; select bank2/3
  5563  01F5  0087               	movwf	7
  5564  01F6  1881               	btfsc	1,1
  5565  01F7  2A07               	goto	l2399
  5566                           
  5567                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5568  01F8  0A7C               	incf	_Sw,w
  5569  01F9  0086               	movwf	6
  5570  01FA  3001               	movlw	1	; select bank2/3
  5571  01FB  0087               	movwf	7
  5572  01FC  1481               	bsf	1,1
  5573                           
  5574                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5575  01FD  087C               	movf	_Sw,w
  5576  01FE  0086               	movwf	6
  5577  01FF  3001               	movlw	1	; select bank2/3
  5578  0200  0087               	movwf	7
  5579  0201  1081               	bcf	1,1
  5580                           
  5581                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5582  0202  087C               	movf	_Sw,w
  5583  0203  0086               	movwf	6
  5584  0204  3001               	movlw	1	; select bank2/3
  5585  0205  0087               	movwf	7
  5586  0206  1501               	bsf	1,2
  5587  0207                     l2399:	
  5588                           
  5589                           ;Switch_B1.c: 148: }
  5590                           ;Switch_B1.c: 149: }
  5591                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5592  0207  087C               	movf	_Sw,w
  5593  0208  0086               	movwf	6
  5594  0209  3001               	movlw	1	; select bank2/3
  5595  020A  0087               	movwf	7
  5596  020B  1C81               	btfss	1,1
  5597  020C  2AD7               	goto	l7837
  5598                           
  5599                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5600  020D  087C               	movf	_Sw,w
  5601  020E  0086               	movwf	6
  5602  020F  3001               	movlw	1	; select bank2/3
  5603  0210  0087               	movwf	7
  5604  0211  1901               	btfsc	1,2
  5605  0212  2A35               	goto	l7803
  5606                           
  5607                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5608  0213  3001               	movlw	1
  5609  0214  0020               	movlb	0	; select bank0
  5610  0215  00B1               	movwf	??_setSw_Main
  5611  0216  087C               	movf	_Sw,w
  5612  0217  3E02               	addlw	2
  5613  0218  0086               	movwf	6
  5614  0219  3001               	movlw	1	; select bank2/3
  5615  021A  0087               	movwf	7
  5616  021B  0831               	movf	??_setSw_Main,w
  5617  021C  0781               	addwf	1,f
  5618                           
  5619                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5620  021D  087C               	movf	_Sw,w
  5621  021E  3E02               	addlw	2
  5622  021F  0086               	movwf	6
  5623  0220  3001               	movlw	1	; select bank2/3
  5624  0221  0087               	movwf	7
  5625  0222  3005               	movlw	5
  5626  0223  0201               	subwf	1,w
  5627  0224  1C03               	skipc
  5628  0225  0008               	return
  5629                           
  5630                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5631  0226  087C               	movf	_Sw,w
  5632  0227  3E02               	addlw	2
  5633  0228  0086               	movwf	6
  5634  0229  3001               	movlw	1	; select bank2/3
  5635  022A  0087               	movwf	7
  5636  022B  0181               	clrf	1
  5637                           
  5638                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5639  022C  087C               	movf	_Sw,w
  5640  022D  0086               	movwf	6
  5641  022E  3001               	movlw	1	; select bank2/3
  5642  022F  0087               	movwf	7
  5643  0230  1501               	bsf	1,2
  5644                           
  5645                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5646  0231  0833               	movf	setSw_Main@sw,w
  5647  0232  3193  23D6         	fcall	_setDimmerLights_SwOn
  5648                           
  5649                           ;Switch_B1.c: 162: }
  5650                           ;Switch_B1.c: 163: } else {
  5651  0234  0008               	return
  5652  0235                     l7803:	
  5653                           
  5654                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5655  0235  087C               	movf	_Sw,w
  5656  0236  0086               	movwf	6
  5657  0237  3001               	movlw	1	; select bank2/3
  5658  0238  0087               	movwf	7
  5659  0239  1981               	btfsc	1,3
  5660  023A  2A67               	goto	l7813
  5661                           
  5662                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5663  023B  087C               	movf	_Sw,w
  5664  023C  3E03               	addlw	3
  5665  023D  0086               	movwf	6
  5666  023E  3001               	movlw	1	; select bank2/3
  5667  023F  0087               	movwf	7
  5668  0240  3001               	movlw	1
  5669  0241  0781               	addwf	1,f
  5670  0242  3141               	addfsr 1,1
  5671  0243  1803               	skipnc
  5672  0244  0A81               	incf	1,f
  5673                           
  5674                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5675  0245  087C               	movf	_Sw,w
  5676  0246  3E03               	addlw	3
  5677  0247  0086               	movwf	6
  5678  0248  3001               	movlw	1	; select bank2/3
  5679  0249  0087               	movwf	7
  5680  024A  3F40               	moviw [0]fsr1
  5681  024B  0020               	movlb	0	; select bank0
  5682  024C  00B1               	movwf	??_setSw_Main
  5683  024D  3F41               	moviw [1]fsr1
  5684  024E  00B2               	movwf	??_setSw_Main+1
  5685  024F  3000               	movlw	0
  5686  0250  0232               	subwf	??_setSw_Main+1,w
  5687  0251  3096               	movlw	150
  5688  0252  1903               	skipnz
  5689  0253  0231               	subwf	??_setSw_Main,w
  5690  0254  1C03               	skipc
  5691  0255  0008               	return
  5692                           
  5693                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5694  0256  087C               	movf	_Sw,w
  5695  0257  3E03               	addlw	3
  5696  0258  0086               	movwf	6
  5697  0259  3001               	movlw	1	; select bank2/3
  5698  025A  0087               	movwf	7
  5699  025B  3000               	movlw	0
  5700  025C  3FC0               	movwi [0]fsr1
  5701  025D  3FC1               	movwi [1]fsr1
  5702                           
  5703                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5704  025E  087C               	movf	_Sw,w
  5705  025F  0086               	movwf	6
  5706  0260  3001               	movlw	1	; select bank2/3
  5707  0261  0087               	movwf	7
  5708  0262  1581               	bsf	1,3
  5709                           
  5710                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5711  0263  0833               	movf	setSw_Main@sw,w
  5712  0264  3192  2238         	fcall	_setDimmerLights_AdjControl
  5713                           
  5714                           ;Switch_B1.c: 174: }
  5715                           ;Switch_B1.c: 175: } else {
  5716  0266  0008               	return
  5717  0267                     l7813:	
  5718                           
  5719                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5720  0267  087C               	movf	_Sw,w
  5721  0268  0086               	movwf	6
  5722  0269  3001               	movlw	1	; select bank2/3
  5723  026A  0087               	movwf	7
  5724  026B  1A01               	btfsc	1,4
  5725  026C  2AA5               	goto	l7827
  5726                           
  5727                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5728  026D  087C               	movf	_Sw,w
  5729  026E  3E05               	addlw	5
  5730  026F  0086               	movwf	6
  5731  0270  3001               	movlw	1	; select bank2/3
  5732  0271  0087               	movwf	7
  5733  0272  3001               	movlw	1
  5734  0273  0781               	addwf	1,f
  5735  0274  3141               	addfsr 1,1
  5736  0275  1803               	skipnc
  5737  0276  0A81               	incf	1,f
  5738                           
  5739                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5740  0277  087C               	movf	_Sw,w
  5741  0278  3E05               	addlw	5
  5742  0279  0086               	movwf	6
  5743  027A  3001               	movlw	1	; select bank2/3
  5744  027B  0087               	movwf	7
  5745  027C  3F40               	moviw [0]fsr1
  5746  027D  0020               	movlb	0	; select bank0
  5747  027E  00B1               	movwf	??_setSw_Main
  5748  027F  3F41               	moviw [1]fsr1
  5749  0280  00B2               	movwf	??_setSw_Main+1
  5750  0281  3000               	movlw	0
  5751  0282  0232               	subwf	??_setSw_Main+1,w
  5752  0283  3096               	movlw	150
  5753  0284  1903               	skipnz
  5754  0285  0231               	subwf	??_setSw_Main,w
  5755  0286  1C03               	skipc
  5756  0287  0008               	return
  5757                           
  5758                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5759  0288  087C               	movf	_Sw,w
  5760  0289  3E05               	addlw	5
  5761  028A  0086               	movwf	6
  5762  028B  3001               	movlw	1	; select bank2/3
  5763  028C  0087               	movwf	7
  5764  028D  3000               	movlw	0
  5765  028E  3FC0               	movwi [0]fsr1
  5766  028F  3FC1               	movwi [1]fsr1
  5767                           
  5768                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5769  0290  087C               	movf	_Sw,w
  5770  0291  0086               	movwf	6
  5771  0292  3001               	movlw	1	; select bank2/3
  5772  0293  0087               	movwf	7
  5773  0294  1601               	bsf	1,4
  5774                           
  5775                           ;Switch_B1.c: 183: setRF_Learn(1);
  5776  0295  3001               	movlw	1
  5777  0296  319C  24F6  3181   	fcall	_setRF_Learn
  5778                           
  5779                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5780  0299  0021               	movlb	1	; select bank1
  5781  029A  1EA0               	btfss	_myMain^(0+128),5
  5782  029B  0008               	return
  5783                           
  5784                           ;Switch_B1.c: 186: setBuz(2, 100);
  5785  029C  3064               	movlw	100
  5786  029D  0020               	movlb	0	; select bank0
  5787  029E  00A9               	movwf	setBuz@time
  5788  029F  3000               	movlw	0
  5789  02A0  00AA               	movwf	setBuz@time+1
  5790  02A1  3002               	movlw	2
  5791  02A2  3195  25DF         	fcall	_setBuz
  5792                           
  5793                           ;Switch_B1.c: 187: }
  5794                           ;Switch_B1.c: 189: }
  5795                           ;Switch_B1.c: 190: } else {
  5796  02A4  0008               	return
  5797  02A5                     l7827:	
  5798                           
  5799                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5800  02A5  087C               	movf	_Sw,w
  5801  02A6  0086               	movwf	6
  5802  02A7  3001               	movlw	1	; select bank2/3
  5803  02A8  0087               	movwf	7
  5804  02A9  1A81               	btfsc	1,5
  5805  02AA  0008               	return
  5806                           
  5807                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5808  02AB  087C               	movf	_Sw,w
  5809  02AC  3E07               	addlw	7
  5810  02AD  0086               	movwf	6
  5811  02AE  3001               	movlw	1	; select bank2/3
  5812  02AF  0087               	movwf	7
  5813  02B0  3001               	movlw	1
  5814  02B1  0781               	addwf	1,f
  5815  02B2  3141               	addfsr 1,1
  5816  02B3  1803               	skipnc
  5817  02B4  0A81               	incf	1,f
  5818                           
  5819                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5820  02B5  087C               	movf	_Sw,w
  5821  02B6  3E07               	addlw	7
  5822  02B7  0086               	movwf	6
  5823  02B8  3001               	movlw	1	; select bank2/3
  5824  02B9  0087               	movwf	7
  5825  02BA  3F40               	moviw [0]fsr1
  5826  02BB  0020               	movlb	0	; select bank0
  5827  02BC  00B1               	movwf	??_setSw_Main
  5828  02BD  3F41               	moviw [1]fsr1
  5829  02BE  00B2               	movwf	??_setSw_Main+1
  5830  02BF  3001               	movlw	1
  5831  02C0  0232               	subwf	??_setSw_Main+1,w
  5832  02C1  302C               	movlw	44
  5833  02C2  1903               	skipnz
  5834  02C3  0231               	subwf	??_setSw_Main,w
  5835  02C4  1C03               	skipc
  5836  02C5  0008               	return
  5837                           
  5838                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5839  02C6  087C               	movf	_Sw,w
  5840  02C7  3E07               	addlw	7
  5841  02C8  0086               	movwf	6
  5842  02C9  3001               	movlw	1	; select bank2/3
  5843  02CA  0087               	movwf	7
  5844  02CB  3000               	movlw	0
  5845  02CC  3FC0               	movwi [0]fsr1
  5846  02CD  3FC1               	movwi [1]fsr1
  5847                           
  5848                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5849  02CE  087C               	movf	_Sw,w
  5850  02CF  0086               	movwf	6
  5851  02D0  3001               	movlw	1	; select bank2/3
  5852  02D1  0087               	movwf	7
  5853  02D2  1681               	bsf	1,5
  5854                           
  5855                           ;Switch_B1.c: 198: setRF_Learn(0);
  5856  02D3  3000               	movlw	0
  5857  02D4  319C  24F6         	fcall	_setRF_Learn
  5858                           
  5859                           ;Switch_B1.c: 201: }
  5860                           ;Switch_B1.c: 202: }
  5861                           ;Switch_B1.c: 203: }
  5862                           ;Switch_B1.c: 204: }
  5863                           ;Switch_B1.c: 205: }
  5864                           ;Switch_B1.c: 206: } else {
  5865  02D6  0008               	return
  5866  02D7                     l7837:	
  5867                           
  5868                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5869  02D7  087C               	movf	_Sw,w
  5870  02D8  0086               	movwf	6
  5871  02D9  3001               	movlw	1	; select bank2/3
  5872  02DA  0087               	movwf	7
  5873  02DB  1D01               	btfss	1,2
  5874  02DC  0008               	return
  5875                           
  5876                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5877  02DD  3001               	movlw	1
  5878  02DE  0020               	movlb	0	; select bank0
  5879  02DF  00B1               	movwf	??_setSw_Main
  5880  02E0  087C               	movf	_Sw,w
  5881  02E1  3E02               	addlw	2
  5882  02E2  0086               	movwf	6
  5883  02E3  3001               	movlw	1	; select bank2/3
  5884  02E4  0087               	movwf	7
  5885  02E5  0831               	movf	??_setSw_Main,w
  5886  02E6  0781               	addwf	1,f
  5887                           
  5888                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5889  02E7  087C               	movf	_Sw,w
  5890  02E8  3E02               	addlw	2
  5891  02E9  0086               	movwf	6
  5892  02EA  3001               	movlw	1	; select bank2/3
  5893  02EB  0087               	movwf	7
  5894  02EC  3005               	movlw	5
  5895  02ED  0201               	subwf	1,w
  5896  02EE  1C03               	skipc
  5897  02EF  0008               	return
  5898                           
  5899                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5900  02F0  087C               	movf	_Sw,w
  5901  02F1  3E02               	addlw	2
  5902  02F2  0086               	movwf	6
  5903  02F3  3001               	movlw	1	; select bank2/3
  5904  02F4  0087               	movwf	7
  5905  02F5  0181               	clrf	1
  5906                           
  5907                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5908  02F6  087C               	movf	_Sw,w
  5909  02F7  0086               	movwf	6
  5910  02F8  3001               	movlw	1	; select bank2/3
  5911  02F9  0087               	movwf	7
  5912  02FA  1101               	bcf	1,2
  5913                           
  5914                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5915  02FB  087C               	movf	_Sw,w
  5916  02FC  3E03               	addlw	3
  5917  02FD  0086               	movwf	6
  5918  02FE  3001               	movlw	1	; select bank2/3
  5919  02FF  0087               	movwf	7
  5920  0300  3000               	movlw	0
  5921  0301  3FC0               	movwi [0]fsr1
  5922  0302  3FC1               	movwi [1]fsr1
  5923                           
  5924                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5925  0303  087C               	movf	_Sw,w
  5926  0304  0086               	movwf	6
  5927  0305  3001               	movlw	1	; select bank2/3
  5928  0306  0087               	movwf	7
  5929  0307  1181               	bcf	1,3
  5930                           
  5931                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5932  0308  087C               	movf	_Sw,w
  5933  0309  3E05               	addlw	5
  5934  030A  0086               	movwf	6
  5935  030B  3001               	movlw	1	; select bank2/3
  5936  030C  0087               	movwf	7
  5937  030D  3000               	movlw	0
  5938  030E  3FC0               	movwi [0]fsr1
  5939  030F  3FC1               	movwi [1]fsr1
  5940                           
  5941                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5942  0310  087C               	movf	_Sw,w
  5943  0311  0086               	movwf	6
  5944  0312  3001               	movlw	1	; select bank2/3
  5945  0313  0087               	movwf	7
  5946  0314  1201               	bcf	1,4
  5947                           
  5948                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5949  0315  087C               	movf	_Sw,w
  5950  0316  3E07               	addlw	7
  5951  0317  0086               	movwf	6
  5952  0318  3001               	movlw	1	; select bank2/3
  5953  0319  0087               	movwf	7
  5954  031A  3000               	movlw	0
  5955  031B  3FC0               	movwi [0]fsr1
  5956  031C  3FC1               	movwi [1]fsr1
  5957                           
  5958                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5959  031D  087C               	movf	_Sw,w
  5960  031E  0086               	movwf	6
  5961  031F  3001               	movlw	1	; select bank2/3
  5962  0320  0087               	movwf	7
  5963  0321  1281               	bcf	1,5
  5964                           
  5965                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5966  0322  0021               	movlb	1	; select bank1
  5967  0323  1851               	btfsc	_SwDetect^(0+128),0
  5968  0324  2B2A               	goto	l7863
  5969                           
  5970                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5971  0325  0020               	movlb	0	; select bank0
  5972  0326  0833               	movf	setSw_Main@sw,w
  5973  0327  3194  24A3  3181   	fcall	_setDimmerLights_SwOff
  5974  032A                     l7863:	
  5975                           
  5976                           ;Switch_B1.c: 221: }
  5977                           ;Switch_B1.c: 224: setRF_Learn(0);
  5978  032A  3000               	movlw	0
  5979  032B  319C  24F6         	fcall	_setRF_Learn
  5980                           
  5981                           ;Switch_B1.c: 226: }
  5982                           ;Switch_B1.c: 227: }
  5983                           ;Switch_B1.c: 228: }
  5984                           ;Switch_B1.c: 229: } else {
  5985  032D  0008               	return
  5986  032E                     l2397:	
  5987                           
  5988                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5989  032E  0021               	movlb	1	; select bank1
  5990  032F  1C20               	btfss	_myMain^(0+128),0
  5991  0330  0008               	return
  5992                           
  5993                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5994  0331  087C               	movf	_Sw,w
  5995  0332  0086               	movwf	6
  5996  0333  3001               	movlw	1	; select bank2/3
  5997  0334  0087               	movwf	7
  5998  0335  1401               	bsf	1,0
  5999  0336  0008               	return
  6000  0337                     __end_of_setSw_Main:	
  6001                           
  6002                           	psect	text14
  6003  1CF6                     __ptext14:	
  6004 ;; *************** function _setRF_Learn *****************
  6005 ;; Defined at:
  6006 ;;		line 23 in file "../src/RF_Control_B1.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  command         1    wreg     unsigned char 
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  command         1    1[BANK0 ] unsigned char 
  6011 ;; Return value:  Size  Location     Type
  6012 ;;		None               void
  6013 ;; Registers used:
  6014 ;;		wreg, status,2, status,0
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;Total ram usage:        2 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    5
  6027 ;; This function calls:
  6028 ;;		Nothing
  6029 ;; This function is called by:
  6030 ;;		_setSw_Main
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           
  6035                           ;psect for function _setRF_Learn
  6036  1CF6                     _setRF_Learn:	
  6037                           
  6038                           ;incstack = 0
  6039                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6040                           ;setRF_Learn@command stored from wreg
  6041  1CF6  0020               	movlb	0	; select bank0
  6042  1CF7  00A1               	movwf	setRF_Learn@command
  6043                           
  6044                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  6045  1CF8  0821               	movf	setRF_Learn@command,w
  6046  1CF9  3A01               	xorlw	1
  6047  1CFA  3000               	movlw	0
  6048  1CFB  1903               	skipnz
  6049  1CFC  3001               	movlw	1
  6050  1CFD  00A0               	movwf	??_setRF_Learn
  6051  1CFE  0EA0               	swapf	??_setRF_Learn,f
  6052  1CFF  0DA0               	rlf	??_setRF_Learn,f
  6053  1D00  0DA0               	rlf	??_setRF_Learn,f
  6054  1D01  0021               	movlb	1	; select bank1
  6055  1D02  083A               	movf	_RF1^(0+128),w
  6056  1D03  0020               	movlb	0	; select bank0
  6057  1D04  0620               	xorwf	??_setRF_Learn,w
  6058  1D05  39BF               	andlw	-65
  6059  1D06  0620               	xorwf	??_setRF_Learn,w
  6060  1D07  0021               	movlb	1	; select bank1
  6061  1D08  00BA               	movwf	_RF1^(0+128)
  6062  1D09  0008               	return
  6063  1D0A                     __end_of_setRF_Learn:	
  6064                           
  6065                           	psect	text15
  6066  1238                     __ptext15:	
  6067 ;; *************** function _setDimmerLights_AdjControl *****************
  6068 ;; Defined at:
  6069 ;;		line 546 in file "../src/Dimmer_B1.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;  sw              1    wreg     unsigned char 
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;  sw              1    8[BANK0 ] unsigned char 
  6074 ;;  idle            1    6[BANK0 ] unsigned char 
  6075 ;; Return value:  Size  Location     Type
  6076 ;;		None               void
  6077 ;; Registers used:
  6078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;Total ram usage:        4 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    7
  6091 ;; This function calls:
  6092 ;;		_DimmerLightsPointSelect
  6093 ;;		_getAll_DimmerLights_AdjGO
  6094 ;;		_setDimmerLights_TriggerAdj
  6095 ;; This function is called by:
  6096 ;;		_setSw_Main
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function _setDimmerLights_AdjControl
  6102  1238                     _setDimmerLights_AdjControl:	
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6106                           ;setDimmerLights_AdjControl@sw stored from wreg
  6107  1238  0020               	movlb	0	; select bank0
  6108  1239  00A8               	movwf	setDimmerLights_AdjControl@sw
  6109                           
  6110                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(sw);
  6111  123A  0828               	movf	setDimmerLights_AdjControl@sw,w
  6112  123B  319C  2446  3192   	fcall	_DimmerLightsPointSelect
  6113                           
  6114                           ;Dimmer_B1.c: 548: char idle = 0;
  6115  123E  0020               	movlb	0	; select bank0
  6116  123F  01A6               	clrf	setDimmerLights_AdjControl@idle
  6117                           
  6118                           ;Dimmer_B1.c: 550: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6119  1240  01A7               	clrf	_setDimmerLights_AdjControl$2337
  6120  1241  319C  2459  3192   	fcall	_getAll_DimmerLights_AdjGO
  6121  1244  3A01               	xorlw	1
  6122  1245  1D03               	skipz
  6123  1246  2A4D               	goto	l6987
  6124  1247  0021               	movlb	1	; select bank1
  6125  1248  1CC6               	btfss	_Dimmer^(0+128),1	;volatile
  6126  1249  2A4D               	goto	l6987
  6127  124A  0020               	movlb	0	; select bank0
  6128  124B  01A7               	clrf	_setDimmerLights_AdjControl$2337
  6129  124C  0AA7               	incf	_setDimmerLights_AdjControl$2337,f
  6130  124D                     l6987:	
  6131  124D  0020               	movlb	0	; select bank0
  6132  124E  0827               	movf	_setDimmerLights_AdjControl$2337,w
  6133  124F  00A5               	movwf	??_setDimmerLights_AdjControl
  6134  1250  0825               	movf	??_setDimmerLights_AdjControl,w
  6135  1251  00A6               	movwf	setDimmerLights_AdjControl@idle
  6136                           
  6137                           ;Dimmer_B1.c: 552: if (idle == 0) {
  6138  1252  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6139  1253  1D03               	skipz
  6140  1254  0008               	return
  6141                           
  6142                           ;Dimmer_B1.c: 553: if (DimmerLights->SwFlag == 1) {
  6143  1255  086F               	movf	_DimmerLights,w
  6144  1256  3E0B               	addlw	11
  6145  1257  0086               	movwf	6
  6146  1258  3001               	movlw	1	; select bank2/3
  6147  1259  0087               	movwf	7
  6148  125A  1C81               	btfss	1,1
  6149  125B  0008               	return
  6150                           
  6151                           ;Dimmer_B1.c: 554: DimmerLights->SwAdj = 1;
  6152  125C  086F               	movf	_DimmerLights,w
  6153  125D  3E0B               	addlw	11
  6154  125E  0086               	movwf	6
  6155  125F  3001               	movlw	1	; select bank2/3
  6156  1260  0087               	movwf	7
  6157  1261  1501               	bsf	1,2
  6158                           
  6159                           ;Dimmer_B1.c: 555: DimmerLights->Status = 1;
  6160  1262  086F               	movf	_DimmerLights,w
  6161  1263  3E02               	addlw	2
  6162  1264  0086               	movwf	6
  6163  1265  3001               	movlw	1	; select bank2/3
  6164  1266  0087               	movwf	7
  6165  1267  1481               	bsf	1,1
  6166                           
  6167                           ;Dimmer_B1.c: 556: setDimmerLights_TriggerAdj(sw, 1);
  6168  1268  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6169  1269  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6170  126A  0828               	movf	setDimmerLights_AdjControl@sw,w
  6171  126B  319E  265F         	fcall	_setDimmerLights_TriggerAdj
  6172  126D  0008               	return
  6173  126E                     __end_of_setDimmerLights_AdjControl:	
  6174                           
  6175                           	psect	text16
  6176  1E7E                     __ptext16:	
  6177 ;; *************** function _getSw_KeyStatus *****************
  6178 ;; Defined at:
  6179 ;;		line 237 in file "../src/Switch_B1.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  sw              1    wreg     unsigned char 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  sw              1    4[BANK0 ] unsigned char 
  6184 ;;  status          1    3[BANK0 ] unsigned char 
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      unsigned char 
  6187 ;; Registers used:
  6188 ;;		wreg, status,2
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;Total ram usage:        5 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    5
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_setSw_Main
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           
  6209                           ;psect for function _getSw_KeyStatus
  6210  1E7E                     _getSw_KeyStatus:	
  6211                           
  6212                           ;incstack = 0
  6213                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6214                           ;getSw_KeyStatus@sw stored from wreg
  6215  1E7E  0020               	movlb	0	; select bank0
  6216  1E7F  00A4               	movwf	getSw_KeyStatus@sw
  6217                           
  6218                           ;Switch_B1.c: 238: char status = 0;
  6219  1E80  01A3               	clrf	getSw_KeyStatus@status
  6220                           
  6221                           ;Switch_B1.c: 250: if (sw == 1) {
  6222  1E81  0824               	movf	getSw_KeyStatus@sw,w
  6223  1E82  3A01               	xorlw	1
  6224  1E83  1D03               	skipz
  6225  1E84  2E8D               	goto	l7187
  6226                           
  6227                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6228  1E85  01A1               	clrf	_getSw_KeyStatus$5785
  6229  1E86  0AA1               	incf	_getSw_KeyStatus$5785,f
  6230  1E87  1F0C               	btfss	12,6	;volatile
  6231  1E88  1A0C               	btfsc	12,4	;volatile
  6232  1E89  2E8B               	goto	l7185
  6233  1E8A  01A1               	clrf	_getSw_KeyStatus$5785
  6234  1E8B                     l7185:	
  6235  1E8B  0821               	movf	_getSw_KeyStatus$5785,w
  6236  1E8C  2E98               	goto	L3
  6237  1E8D                     l7187:	
  6238                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6239                           
  6240  1E8D  0824               	movf	getSw_KeyStatus@sw,w
  6241  1E8E  3A02               	xorlw	2
  6242  1E8F  1D03               	skipz
  6243  1E90  2E9B               	goto	l7197
  6244                           
  6245                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6246  1E91  01A2               	clrf	_getSw_KeyStatus$5786
  6247  1E92  0AA2               	incf	_getSw_KeyStatus$5786,f
  6248  1E93  1C0C               	btfss	12,0	;volatile
  6249  1E94  188D               	btfsc	13,1	;volatile
  6250  1E95  2E97               	goto	l7195
  6251  1E96  01A2               	clrf	_getSw_KeyStatus$5786
  6252  1E97                     l7195:	
  6253  1E97  0822               	movf	_getSw_KeyStatus$5786,w
  6254  1E98                     L3:	
  6255  1E98  00A0               	movwf	??_getSw_KeyStatus
  6256  1E99  0820               	movf	??_getSw_KeyStatus,w
  6257  1E9A  00A3               	movwf	getSw_KeyStatus@status
  6258  1E9B                     l7197:	
  6259                           
  6260                           ;Switch_B1.c: 254: }
  6261                           ;Switch_B1.c: 261: return status;
  6262  1E9B  0823               	movf	getSw_KeyStatus@status,w
  6263  1E9C  0008               	return
  6264  1E9D                     __end_of_getSw_KeyStatus:	
  6265                           
  6266                           	psect	text17
  6267  1CE2                     __ptext17:	
  6268 ;; *************** function _SwPointSelect *****************
  6269 ;; Defined at:
  6270 ;;		line 25 in file "../src/Switch_B1.c"
  6271 ;; Parameters:    Size  Location     Type
  6272 ;;  sw              1    wreg     unsigned char 
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;  sw              1    1[BANK0 ] unsigned char 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;		None               void
  6277 ;; Registers used:
  6278 ;;		wreg
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;Total ram usage:        2 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    5
  6291 ;; This function calls:
  6292 ;;		Nothing
  6293 ;; This function is called by:
  6294 ;;		_setSw_Main
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           
  6299                           ;psect for function _SwPointSelect
  6300  1CE2                     _SwPointSelect:	
  6301                           
  6302                           ;incstack = 0
  6303                           ; Regs used in _SwPointSelect: [wreg]
  6304                           ;SwPointSelect@sw stored from wreg
  6305  1CE2  0020               	movlb	0	; select bank0
  6306  1CE3  00A1               	movwf	SwPointSelect@sw
  6307                           
  6308                           ;Switch_B1.c: 28: if (sw == 1) {
  6309  1CE4  0821               	movf	SwPointSelect@sw,w
  6310  1CE5  3A01               	xorlw	1
  6311  1CE6  1D03               	skipz
  6312  1CE7  2CED               	goto	l7171
  6313                           
  6314                           ;Switch_B1.c: 29: Sw = &Sw1;
  6315  1CE8  30CF               	movlw	_Sw1& (0+255)
  6316  1CE9  00A0               	movwf	??_SwPointSelect
  6317  1CEA  0820               	movf	??_SwPointSelect,w
  6318  1CEB  00FC               	movwf	_Sw
  6319                           
  6320                           ;Switch_B1.c: 30: }
  6321  1CEC  0008               	return
  6322  1CED                     l7171:	
  6323                           
  6324                           ;Switch_B1.c: 33: else if (sw == 2) {
  6325  1CED  0821               	movf	SwPointSelect@sw,w
  6326  1CEE  3A02               	xorlw	2
  6327  1CEF  1D03               	skipz
  6328  1CF0  0008               	return
  6329                           
  6330                           ;Switch_B1.c: 34: Sw = &Sw2;
  6331  1CF1  30D8               	movlw	_Sw2& (0+255)
  6332  1CF2  00A0               	movwf	??_SwPointSelect
  6333  1CF3  0820               	movf	??_SwPointSelect,w
  6334  1CF4  00FC               	movwf	_Sw
  6335  1CF5  0008               	return
  6336  1CF6                     __end_of_SwPointSelect:	
  6337                           
  6338                           	psect	text18
  6339  17A4                     __ptext18:	
  6340 ;; *************** function _setMain_Exception *****************
  6341 ;; Defined at:
  6342 ;;		line 289 in file "../src/main_B1.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  command         1    wreg     unsigned char 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  command         1   28[BANK0 ] unsigned char 
  6347 ;;  status          1   27[BANK0 ] unsigned char 
  6348 ;;  buz             1   24[BANK0 ] unsigned char 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;		None               void
  6351 ;; Registers used:
  6352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;Total ram usage:        7 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:   10
  6365 ;; This function calls:
  6366 ;;		_getDimmerLights_Line
  6367 ;;		_getMain_LightsStatus
  6368 ;;		_setBuz
  6369 ;;		_setDimmerLights_ErrorClose
  6370 ;;		_setLED
  6371 ;; This function is called by:
  6372 ;;		_Switch_Main
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           
  6377                           ;psect for function _setMain_Exception
  6378  17A4                     _setMain_Exception:	
  6379                           
  6380                           ;incstack = 0
  6381                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6382                           ;setMain_Exception@command stored from wreg
  6383  17A4  0020               	movlb	0	; select bank0
  6384  17A5  00BC               	movwf	setMain_Exception@command
  6385                           
  6386                           ;main_B1.c: 290: char status = 0, buz = 0;
  6387  17A6  01BB               	clrf	setMain_Exception@status
  6388  17A7  01B8               	clrf	setMain_Exception@buz
  6389                           
  6390                           ;main_B1.c: 333: status = command == 3 ? getDimmerLights_Line() : 255;
  6391  17A8  083C               	movf	setMain_Exception@command,w
  6392  17A9  3A03               	xorlw	3
  6393  17AA  1903               	skipnz
  6394  17AB  2FB0               	goto	l7749
  6395  17AC  30FF               	movlw	255
  6396  17AD  00B9               	movwf	_setMain_Exception$6475
  6397  17AE  3000               	movlw	0
  6398  17AF  2FB9               	goto	L4
  6399  17B0                     l7749:	
  6400  17B0  319C  24CE  3197   	fcall	_getDimmerLights_Line
  6401  17B3  0020               	movlb	0	; select bank0
  6402  17B4  00B6               	movwf	??_setMain_Exception
  6403  17B5  01B7               	clrf	??_setMain_Exception+1
  6404  17B6  0836               	movf	??_setMain_Exception,w
  6405  17B7  00B9               	movwf	_setMain_Exception$6475
  6406  17B8  0837               	movf	??_setMain_Exception+1,w
  6407  17B9                     L4:	
  6408  17B9  00BA               	movwf	_setMain_Exception$6475+1
  6409  17BA  0839               	movf	_setMain_Exception$6475,w
  6410  17BB  00B6               	movwf	??_setMain_Exception
  6411  17BC  0836               	movf	??_setMain_Exception,w
  6412  17BD  00BB               	movwf	setMain_Exception@status
  6413                           
  6414                           ;main_B1.c: 335: if (command == 0) {
  6415  17BE  08BC               	movf	setMain_Exception@command,f
  6416  17BF  1D03               	skipz
  6417  17C0  2FC3               	goto	l7757
  6418                           
  6419                           ;main_B1.c: 336: setLED(99, 10);
  6420  17C1  300A               	movlw	10
  6421  17C2  2FC5               	goto	L5
  6422  17C3                     l7757:	
  6423                           ;main_B1.c: 337: } else {
  6424                           
  6425                           
  6426                           ;main_B1.c: 338: setLED(99, 11);
  6427  17C3  300B               	movlw	11
  6428  17C4  0020               	movlb	0	; select bank0
  6429  17C5                     L5:	
  6430  17C5  00B6               	movwf	??_setMain_Exception
  6431  17C6  0836               	movf	??_setMain_Exception,w
  6432  17C7  00A2               	movwf	setLED@command
  6433  17C8  3063               	movlw	99
  6434  17C9  3188  2000  3197   	fcall	_setLED
  6435                           
  6436                           ;main_B1.c: 339: }
  6437                           ;main_B1.c: 341: if (command != 0) {
  6438  17CC  0020               	movlb	0	; select bank0
  6439  17CD  083C               	movf	setMain_Exception@command,w
  6440  17CE  1903               	btfsc	3,2
  6441  17CF  0008               	return
  6442                           
  6443                           ;main_B1.c: 342: switch (command) {
  6444  17D0  2FF1               	goto	l7773
  6445  17D1                     l7763:	
  6446                           ;main_B1.c: 343: case 2:
  6447                           
  6448                           
  6449                           ;main_B1.c: 344: if (getMain_LightsStatus() == 1) {
  6450  17D1  3190  20D7  3197   	fcall	_getMain_LightsStatus
  6451  17D4  3A01               	xorlw	1
  6452  17D5  1D03               	skipz
  6453  17D6  2FFA               	goto	l7775
  6454                           
  6455                           ;main_B1.c: 345: setBuz(10, 300);
  6456  17D7  302C               	movlw	44
  6457  17D8  0020               	movlb	0	; select bank0
  6458  17D9  00A9               	movwf	setBuz@time
  6459  17DA  3001               	movlw	1
  6460  17DB  00AA               	movwf	setBuz@time+1
  6461  17DC  300A               	movlw	10
  6462  17DD  3195  25DF  3197   	fcall	_setBuz
  6463                           
  6464                           ;main_B1.c: 346: }
  6465                           ;main_B1.c: 347: break;
  6466  17E0  2FFA               	goto	l7775
  6467  17E1                     l7767:	
  6468                           ;main_B1.c: 348: case 3:
  6469                           
  6470                           
  6471                           ;main_B1.c: 349: if (getMain_LightsStatus() == 1) {
  6472  17E1  3190  20D7  3197   	fcall	_getMain_LightsStatus
  6473  17E4  3A01               	xorlw	1
  6474  17E5  1D03               	skipz
  6475  17E6  2FFA               	goto	l7775
  6476                           
  6477                           ;main_B1.c: 350: setBuz(5, 300);
  6478  17E7  302C               	movlw	44
  6479  17E8  0020               	movlb	0	; select bank0
  6480  17E9  00A9               	movwf	setBuz@time
  6481  17EA  3001               	movlw	1
  6482  17EB  00AA               	movwf	setBuz@time+1
  6483  17EC  3005               	movlw	5
  6484  17ED  3195  25DF  3197   	fcall	_setBuz
  6485                           
  6486                           ;main_B1.c: 353: }
  6487                           
  6488                           ;main_B1.c: 351: }
  6489                           ;main_B1.c: 352: break;
  6490  17F0  2FFA               	goto	l7775
  6491  17F1                     l7773:	
  6492  17F1  0020               	movlb	0	; select bank0
  6493  17F2  083C               	movf	setMain_Exception@command,w
  6494                           
  6495                           ; Switch size 1, requested type "space"
  6496                           ; Number of cases is 2, Range of values is 2 to 3
  6497                           ; switch strategies available:
  6498                           ; Name         Instructions Cycles
  6499                           ; simple_byte            7     4 (average)
  6500                           ; direct_byte           13     9 (fixed)
  6501                           ; jumptable            263     9 (fixed)
  6502                           ;	Chosen strategy is simple_byte
  6503  17F3  3A02               	xorlw	2	; case 2
  6504  17F4  1903               	skipnz
  6505  17F5  2FD1               	goto	l7763
  6506  17F6  3A01               	xorlw	1	; case 3
  6507  17F7  1903               	skipnz
  6508  17F8  2FE1               	goto	l7767
  6509  17F9  2FFA               	goto	l7775
  6510  17FA                     l7775:	
  6511                           
  6512                           ;main_B1.c: 354: setDimmerLights_ErrorClose(status);
  6513  17FA  0020               	movlb	0	; select bank0
  6514  17FB  083B               	movf	setMain_Exception@status,w
  6515  17FC  3196  26EC         	fcall	_setDimmerLights_ErrorClose
  6516  17FE  0020               	movlb	0	; select bank0
  6517  17FF  0008               	return
  6518  1800                     __end_of_setMain_Exception:	
  6519                           
  6520                           	psect	text19
  6521  1CCE                     __ptext19:	
  6522 ;; *************** function _getDimmerLights_Line *****************
  6523 ;; Defined at:
  6524 ;;		line 695 in file "../src/Dimmer_B1.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;		None
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;  line            1    1[BANK0 ] unsigned char 
  6529 ;; Return value:  Size  Location     Type
  6530 ;;                  1    wreg      unsigned char 
  6531 ;; Registers used:
  6532 ;;		wreg, status,2
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;Total ram usage:        2 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; Hardware stack levels required when called:    5
  6545 ;; This function calls:
  6546 ;;		Nothing
  6547 ;; This function is called by:
  6548 ;;		_setMain_Exception
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           
  6553                           ;psect for function _getDimmerLights_Line
  6554  1CCE                     _getDimmerLights_Line:	
  6555                           
  6556                           ;Dimmer_B1.c: 696: char line = 0;
  6557                           
  6558                           ;incstack = 0
  6559                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6560  1CCE  0020               	movlb	0	; select bank0
  6561  1CCF  01A1               	clrf	getDimmerLights_Line@line
  6562                           
  6563                           ;Dimmer_B1.c: 698: if (DimmerLights1.Line == 1) {
  6564  1CD0  0022               	movlb	2	; select bank2
  6565  1CD1  1F5D               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
  6566  1CD2  2CD7               	goto	l866
  6567                           
  6568                           ;Dimmer_B1.c: 699: line = 1;
  6569  1CD3  0020               	movlb	0	; select bank0
  6570  1CD4  01A1               	clrf	getDimmerLights_Line@line
  6571  1CD5  0AA1               	incf	getDimmerLights_Line@line,f
  6572                           
  6573                           ;Dimmer_B1.c: 700: }
  6574  1CD6  2CDF               	goto	l867
  6575  1CD7                     l866:	
  6576                           
  6577                           ;Dimmer_B1.c: 703: else if (DimmerLights2.Line == 1) {
  6578  1CD7  0023               	movlb	3	; select bank3
  6579  1CD8  1F48               	btfss	(_DimmerLights2^(0+384)+10),6	;volatile
  6580  1CD9  2CDF               	goto	l867
  6581                           
  6582                           ;Dimmer_B1.c: 704: line = 2;
  6583  1CDA  3002               	movlw	2
  6584  1CDB  0020               	movlb	0	; select bank0
  6585  1CDC  00A0               	movwf	??_getDimmerLights_Line
  6586  1CDD  0820               	movf	??_getDimmerLights_Line,w
  6587  1CDE  00A1               	movwf	getDimmerLights_Line@line
  6588  1CDF                     l867:	
  6589                           
  6590                           ;Dimmer_B1.c: 705: }
  6591                           ;Dimmer_B1.c: 712: return line;
  6592  1CDF  0020               	movlb	0	; select bank0
  6593  1CE0  0821               	movf	getDimmerLights_Line@line,w
  6594  1CE1  0008               	return
  6595  1CE2                     __end_of_getDimmerLights_Line:	
  6596                           
  6597                           	psect	text20
  6598  1B71                     __ptext20:	
  6599 ;; *************** function _Switch_Initialization *****************
  6600 ;; Defined at:
  6601 ;;		line 46 in file "../src/Switch_B1.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;		None
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;		None
  6606 ;; Return value:  Size  Location     Type
  6607 ;;		None               void
  6608 ;; Registers used:
  6609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;Total ram usage:        0 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    8
  6622 ;; This function calls:
  6623 ;;		_TouchPower
  6624 ;;		_setSw_Initialization
  6625 ;; This function is called by:
  6626 ;;		_main
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           
  6631                           ;psect for function _Switch_Initialization
  6632  1B71                     _Switch_Initialization:	
  6633                           
  6634                           ;Switch_B1.c: 47: TouchPower();
  6635                           
  6636                           ;incstack = 0
  6637                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6638  1B71  319D  2534  319B   	fcall	_TouchPower
  6639                           
  6640                           ;Switch_B1.c: 49: WPUB1 = 0;
  6641  1B74  0024               	movlb	4	; select bank4
  6642  1B75  108D               	bcf	13,1	;volatile
  6643                           
  6644                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6645  1B76  3001               	movlw	1
  6646  1B77  319A  22ED  319B   	fcall	_setSw_Initialization
  6647                           
  6648                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6649  1B7A  3002               	movlw	2
  6650  1B7B  319A  22ED         	fcall	_setSw_Initialization
  6651  1B7D  0008               	return
  6652  1B7E                     __end_of_Switch_Initialization:	
  6653                           
  6654                           	psect	text21
  6655  1AED                     __ptext21:	
  6656 ;; *************** function _setSw_Initialization *****************
  6657 ;; Defined at:
  6658 ;;		line 109 in file "../src/Switch_B1.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  sw              1    wreg     unsigned char 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  sw              1    4[BANK0 ] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;		None               void
  6665 ;; Registers used:
  6666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;Total ram usage:        1 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    7
  6679 ;; This function calls:
  6680 ;;		_setLED
  6681 ;; This function is called by:
  6682 ;;		_Switch_Initialization
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685                           
  6686                           
  6687                           ;psect for function _setSw_Initialization
  6688  1AED                     _setSw_Initialization:	
  6689                           
  6690                           ;incstack = 0
  6691                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6692                           ;setSw_Initialization@sw stored from wreg
  6693  1AED  0020               	movlb	0	; select bank0
  6694  1AEE  00A4               	movwf	setSw_Initialization@sw
  6695                           
  6696                           ;Switch_B1.c: 110: setLED(sw, 1);
  6697  1AEF  01A2               	clrf	setLED@command
  6698  1AF0  0AA2               	incf	setLED@command,f
  6699  1AF1  0824               	movf	setSw_Initialization@sw,w
  6700  1AF2  3188  2000         	fcall	_setLED
  6701  1AF4  0008               	return
  6702  1AF5                     __end_of_setSw_Initialization:	
  6703                           
  6704                           	psect	text22
  6705  1D34                     __ptext22:	
  6706 ;; *************** function _TouchPower *****************
  6707 ;; Defined at:
  6708 ;;		line 10 in file "../src/Switch_B1.c"
  6709 ;; Parameters:    Size  Location     Type
  6710 ;;		None
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;		None
  6713 ;; Return value:  Size  Location     Type
  6714 ;;		None               void
  6715 ;; Registers used:
  6716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;Total ram usage:        0 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    6
  6729 ;; This function calls:
  6730 ;;		_Timeout_Counter
  6731 ;;		_set_TimeoutCleared
  6732 ;; This function is called by:
  6733 ;;		_Switch_Initialization
  6734 ;;		_Switch_Main
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           
  6739                           ;psect for function _TouchPower
  6740  1D34                     _TouchPower:	
  6741                           
  6742                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6743                           
  6744                           ;incstack = 0
  6745                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6746  1D34  0020               	movlb	0	; select bank0
  6747  1D35  1A8E               	btfsc	14,5	;volatile
  6748  1D36  0008               	return
  6749                           
  6750                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6751  1D37  0021               	movlb	1	; select bank1
  6752  1D38  1C20               	btfss	_myMain^(0+128),0
  6753  1D39  0008               	return
  6754  1D3A  2D40               	goto	l7735
  6755  1D3B                     l2371:	
  6756                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6757                           
  6758                           
  6759                           ;Switch_B1.c: 14: RC5 = 1;
  6760  1D3B  0020               	movlb	0	; select bank0
  6761  1D3C  168E               	bsf	14,5	;volatile
  6762                           
  6763                           ;Switch_B1.c: 15: Timeout_Counter();
  6764  1D3D  319D  250A  319D   	fcall	_Timeout_Counter
  6765  1D40                     l7735:	
  6766  1D40  0020               	movlb	0	; select bank0
  6767  1D41  1A8E               	btfsc	14,5	;volatile
  6768  1D42  2D46               	goto	l7739
  6769  1D43  0021               	movlb	1	; select bank1
  6770  1D44  1D2B               	btfss	(_myMain^(0+128)+11),2
  6771  1D45  2D3B               	goto	l2371
  6772  1D46                     l7739:	
  6773                           
  6774                           ;Switch_B1.c: 16: }
  6775                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6776  1D46  319A  22A2         	fcall	_set_TimeoutCleared
  6777  1D48  0008               	return
  6778  1D49                     __end_of_TouchPower:	
  6779                           
  6780                           	psect	text23
  6781  1A89                     __ptext23:	
  6782 ;; *************** function _RF_Main *****************
  6783 ;; Defined at:
  6784 ;;		line 16 in file "../src/RF_Control_B1.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;		None
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;		None               void
  6791 ;; Registers used:
  6792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;Total ram usage:        0 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:   14
  6805 ;; This function calls:
  6806 ;;		_setRF_Main
  6807 ;; This function is called by:
  6808 ;;		_main
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _RF_Main
  6814  1A89                     _RF_Main:	
  6815                           
  6816                           ;RF_Control_B1.c: 18: setRF_Main();
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6820  1A89  3185  2577         	fcall	_setRF_Main
  6821  1A8B  0008               	return
  6822  1A8C                     __end_of_RF_Main:	
  6823                           
  6824                           	psect	text24
  6825  0577                     __ptext24:	
  6826 ;; *************** function _setRF_Main *****************
  6827 ;; Defined at:
  6828 ;;		line 52 in file "../src/RF_Control_B1.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;		None
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;  error           1    2[BANK1 ] unsigned char 
  6833 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6834 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6835 ;; Return value:  Size  Location     Type
  6836 ;;		None               void
  6837 ;; Registers used:
  6838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;Total ram usage:        4 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:   13
  6851 ;; This function calls:
  6852 ;;		_CC2500_RxData
  6853 ;;		_CC2500_TxData
  6854 ;;		_CC2500_WriteCommand
  6855 ;;		_RF_RxDisable
  6856 ;;		_getBuz_GO
  6857 ;;		_getMain_All_Error_Status
  6858 ;;		_getRF_KeyStatus
  6859 ;;		_getRxData
  6860 ;; This function is called by:
  6861 ;;		_RF_Main
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           
  6866                           ;psect for function _setRF_Main
  6867  0577                     _setRF_Main:	
  6868                           
  6869                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6870                           
  6871                           ;incstack = 0
  6872                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6873  0577  0021               	movlb	1	; select bank1
  6874  0578  01E8               	clrf	setRF_Main@loop_f^(0+128)
  6875  0579  01E9               	clrf	setRF_Main@Receive_OK^(0+128)
  6876  057A  01EA               	clrf	setRF_Main@error^(0+128)
  6877                           
  6878                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6879  057B  1C3A               	btfss	_RF1^(0+128),0
  6880  057C  2E52               	goto	l1970
  6881                           
  6882                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6883  057D  319B  23DC  3185   	fcall	_getBuz_GO
  6884  0580  0020               	movlb	0	; select bank0
  6885  0581  0821               	movf	?_getBuz_GO+1,w
  6886  0582  0420               	iorwf	?_getBuz_GO,w
  6887  0583  1D03               	skipz
  6888  0584  0008               	return
  6889                           
  6890                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6891  0585  3000               	movlw	0
  6892  0586  3191  2165  3185   	fcall	_getMain_All_Error_Status
  6893  0589  3800               	iorlw	0
  6894  058A  1D03               	skipz
  6895  058B  2DA0               	goto	l1972
  6896                           
  6897                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6898  058C  319B  23ED  3185   	fcall	_getRF_KeyStatus
  6899  058F  3A01               	xorlw	1
  6900  0590  3000               	movlw	0
  6901  0591  1903               	skipnz
  6902  0592  3001               	movlw	1
  6903  0593  0020               	movlb	0	; select bank0
  6904  0594  00ED               	movwf	??_setRF_Main
  6905  0595  0CED               	rrf	??_setRF_Main,f
  6906  0596  0CED               	rrf	??_setRF_Main,f
  6907  0597  0021               	movlb	1	; select bank1
  6908  0598  083A               	movf	_RF1^(0+128),w
  6909  0599  0020               	movlb	0	; select bank0
  6910  059A  066D               	xorwf	??_setRF_Main,w
  6911  059B  397F               	andlw	-129
  6912  059C  066D               	xorwf	??_setRF_Main,w
  6913  059D  0021               	movlb	1	; select bank1
  6914  059E  00BA               	movwf	_RF1^(0+128)
  6915                           
  6916                           ;RF_Control_B1.c: 65: } else {
  6917  059F  2DA2               	goto	l1973
  6918  05A0                     l1972:	
  6919                           
  6920                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6921  05A0  0021               	movlb	1	; select bank1
  6922  05A1  13BA               	bcf	_RF1^(0+128),7
  6923  05A2                     l1973:	
  6924                           
  6925                           ;RF_Control_B1.c: 70: }
  6926                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6927  05A2  1BBA               	btfsc	_RF1^(0+128),7
  6928  05A3  1B3A               	btfsc	_RF1^(0+128),6
  6929  05A4  2DAA               	goto	l1974
  6930                           
  6931                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6932  05A5  01BC               	clrf	(_RF1^(0+128)+2)
  6933  05A6  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6934                           
  6935                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6936  05A7  14BB               	bsf	(_RF1^(0+128)+1),1
  6937                           
  6938                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6939  05A8  11BA               	bcf	_RF1^(0+128),3
  6940                           
  6941                           ;RF_Control_B1.c: 76: } else {
  6942  05A9  0008               	return
  6943  05AA                     l1974:	
  6944                           
  6945                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6946  05AA  18BB               	btfsc	(_RF1^(0+128)+1),1
  6947  05AB  1B3A               	btfsc	_RF1^(0+128),6
  6948  05AC  2DC1               	goto	l7653
  6949                           
  6950                           ;RF_Control_B1.c: 78: RF1.Count++;
  6951  05AD  3001               	movlw	1
  6952  05AE  07BC               	addwf	(_RF1^(0+128)+2),f
  6953  05AF  3000               	movlw	0
  6954  05B0  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6955                           
  6956                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6957  05B1  3002               	movlw	2
  6958  05B2  3EBA               	addlw	_RF1& (0+255)
  6959  05B3  0086               	movwf	6
  6960  05B4  0187               	clrf	7
  6961  05B5  3F40               	moviw [0]fsr1
  6962  05B6  0641               	xorwf	(_RF1^(0+128)+7),w
  6963  05B7  1D03               	skipz
  6964  05B8  2DBB               	goto	u7275
  6965  05B9  3F41               	moviw [1]fsr1
  6966  05BA  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6967  05BB                     u7275:	
  6968  05BB  1D03               	skipz
  6969  05BC  2E1F               	goto	l7705
  6970                           
  6971                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6972  05BD  01BC               	clrf	(_RF1^(0+128)+2)
  6973  05BE  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6974                           
  6975                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6976  05BF  10BB               	bcf	(_RF1^(0+128)+1),1
  6977                           
  6978                           ;RF_Control_B1.c: 82: }
  6979                           ;RF_Control_B1.c: 83: } else {
  6980  05C0  2E1F               	goto	l7705
  6981  05C1                     l7653:	
  6982                           
  6983                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6984  05C1  01BC               	clrf	(_RF1^(0+128)+2)
  6985  05C2  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6986                           
  6987                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6988  05C3  10BB               	bcf	(_RF1^(0+128)+1),1
  6989                           
  6990                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6991  05C4  193A               	btfsc	_RF1^(0+128),2
  6992  05C5  1B3A               	btfsc	_RF1^(0+128),6
  6993  05C6  2DD5               	goto	l1979
  6994                           
  6995                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6996  05C7  113A               	bcf	_RF1^(0+128),2
  6997                           
  6998                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6999  05C8  11BA               	bcf	_RF1^(0+128),3
  7000                           
  7001                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  7002  05C9  10BA               	bcf	_RF1^(0+128),1
  7003                           
  7004                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  7005  05CA  300A               	movlw	10
  7006  05CB  00C1               	movwf	(_RF1^(0+128)+7)
  7007  05CC  3000               	movlw	0
  7008  05CD  00C2               	movwf	(_RF1^(0+128)+8)
  7009                           
  7010                           ;RF_Control_B1.c: 95: RF_RxDisable();
  7011  05CE  319B  239B  3185   	fcall	_RF_RxDisable
  7012                           
  7013                           ;RF_Control_B1.c: 102: CC2500_TxData();
  7014  05D1  3189  216B  3185   	fcall	_CC2500_TxData
  7015                           
  7016                           ;RF_Control_B1.c: 104: } else {
  7017  05D4  2E1F               	goto	l7705
  7018  05D5                     l1979:	
  7019                           
  7020                           ;RF_Control_B1.c: 106: if (RF1.RxStatus == 1) {
  7021  05D5  1DBA               	btfss	_RF1^(0+128),3
  7022  05D6  2E0E               	goto	l1981
  7023                           
  7024                           ;RF_Control_B1.c: 108: CC2500_RxData();
  7025  05D7  318B  2364  3185   	fcall	_CC2500_RxData
  7026                           
  7027                           ;RF_Control_B1.c: 110: if (RF1.ReceiveGO == 1) {
  7028  05DA  0021               	movlb	1	; select bank1
  7029  05DB  1CBA               	btfss	_RF1^(0+128),1
  7030  05DC  2E1F               	goto	l7705
  7031                           
  7032                           ;RF_Control_B1.c: 111: RF1.ReceiveGO = 0;
  7033  05DD  10BA               	bcf	_RF1^(0+128),1
  7034                           
  7035                           ;RF_Control_B1.c: 112: RF1.Correction = 0;
  7036  05DE  12BB               	bcf	(_RF1^(0+128)+1),5
  7037                           
  7038                           ;RF_Control_B1.c: 113: RF1.CorrectionCounter = 0;
  7039  05DF  01C4               	clrf	(_RF1^(0+128)+10)
  7040  05E0  01C5               	clrf	((_RF1+1)^(0+128)+10)
  7041                           
  7042                           ;RF_Control_B1.c: 124: getRxData();
  7043  05E1  318D  2560  3185   	fcall	_getRxData
  7044                           
  7045                           ;RF_Control_B1.c: 125: RF1.Run = 1;
  7046  05E4  0021               	movlb	1	; select bank1
  7047  05E5  14BB               	bsf	(_RF1^(0+128)+1),1
  7048                           
  7049                           ;RF_Control_B1.c: 127: if (RF1.Checked == 1) {
  7050  05E6  1DBB               	btfss	(_RF1^(0+128)+1),3
  7051  05E7  2DF5               	goto	l7689
  7052                           
  7053                           ;RF_Control_B1.c: 128: if (RF1.RunTime > 10) {
  7054  05E8  3000               	movlw	0
  7055  05E9  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7056  05EA  300B               	movlw	11
  7057  05EB  1903               	skipnz
  7058  05EC  0241               	subwf	(_RF1^(0+128)+7),w
  7059  05ED  1C03               	skipc
  7060  05EE  2DF3               	goto	l7687
  7061                           
  7062                           ;RF_Control_B1.c: 129: RF1.RunTime = 10;
  7063  05EF  300A               	movlw	10
  7064  05F0  00C1               	movwf	(_RF1^(0+128)+7)
  7065  05F1  3000               	movlw	0
  7066  05F2  00C2               	movwf	(_RF1^(0+128)+8)
  7067  05F3                     l7687:	
  7068                           
  7069                           ;RF_Control_B1.c: 130: }
  7070                           ;RF_Control_B1.c: 131: RF1.CheckCount = 0;
  7071  05F3  01BE               	clrf	(_RF1^(0+128)+4)
  7072                           
  7073                           ;RF_Control_B1.c: 132: } else {
  7074  05F4  2E1F               	goto	l7705
  7075  05F5                     l7689:	
  7076                           
  7077                           ;RF_Control_B1.c: 133: RF1.CheckCount++;
  7078  05F5  3001               	movlw	1
  7079  05F6  0020               	movlb	0	; select bank0
  7080  05F7  00ED               	movwf	??_setRF_Main
  7081  05F8  086D               	movf	??_setRF_Main,w
  7082  05F9  0021               	movlb	1	; select bank1
  7083  05FA  07BE               	addwf	(_RF1^(0+128)+4),f
  7084                           
  7085                           ;RF_Control_B1.c: 134: if (RF1.CheckCount == 2) {
  7086  05FB  083E               	movf	(_RF1^(0+128)+4),w
  7087  05FC  3A02               	xorlw	2
  7088  05FD  1D03               	skipz
  7089  05FE  2E1F               	goto	l7705
  7090                           
  7091                           ;RF_Control_B1.c: 135: RF1.CheckCount = 0;
  7092  05FF  01BE               	clrf	(_RF1^(0+128)+4)
  7093                           
  7094                           ;RF_Control_B1.c: 136: RF1.CheckedCounter = 0;
  7095  0600  01BF               	clrf	(_RF1^(0+128)+5)
  7096  0601  01C0               	clrf	((_RF1+1)^(0+128)+5)
  7097                           
  7098                           ;RF_Control_B1.c: 137: if (RF1.RunTime < 200) {
  7099  0602  3000               	movlw	0
  7100  0603  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7101  0604  30C8               	movlw	200
  7102  0605  1903               	skipnz
  7103  0606  0241               	subwf	(_RF1^(0+128)+7),w
  7104  0607  1803               	skipnc
  7105  0608  2E1F               	goto	l7705
  7106                           
  7107                           ;RF_Control_B1.c: 138: RF1.RunTime += 10;
  7108  0609  300A               	movlw	10
  7109  060A  07C1               	addwf	(_RF1^(0+128)+7),f
  7110  060B  3000               	movlw	0
  7111  060C  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  7112                           
  7113                           ;RF_Control_B1.c: 139: }
  7114                           ;RF_Control_B1.c: 140: }
  7115                           ;RF_Control_B1.c: 141: }
  7116                           ;RF_Control_B1.c: 142: }
  7117                           ;RF_Control_B1.c: 143: } else {
  7118  060D  2E1F               	goto	l7705
  7119  060E                     l1981:	
  7120                           
  7121                           ;RF_Control_B1.c: 145: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7122  060E  1DBA               	btfss	_RF1^(0+128),3
  7123  060F  18BA               	btfsc	_RF1^(0+128),1
  7124  0610  2E1F               	goto	l7705
  7125                           
  7126                           ;RF_Control_B1.c: 146: RF1.RxStatus = 1;
  7127  0611  15BA               	bsf	_RF1^(0+128),3
  7128                           
  7129                           ;RF_Control_B1.c: 147: RF1.Correction = 1;
  7130  0612  16BB               	bsf	(_RF1^(0+128)+1),5
  7131                           
  7132                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x36);
  7133  0613  3036               	movlw	54
  7134  0614  319D  25A3  3185   	fcall	_CC2500_WriteCommand
  7135                           
  7136                           ;RF_Control_B1.c: 151: CC2500_WriteCommand(0x3A);
  7137  0617  303A               	movlw	58
  7138  0618  319D  25A3  3185   	fcall	_CC2500_WriteCommand
  7139                           
  7140                           ;RF_Control_B1.c: 152: CC2500_WriteCommand(0x34);
  7141  061B  3034               	movlw	52
  7142  061C  319D  25A3  3185   	fcall	_CC2500_WriteCommand
  7143  061F                     l7705:	
  7144                           
  7145                           ;RF_Control_B1.c: 153: }
  7146                           ;RF_Control_B1.c: 155: }
  7147                           ;RF_Control_B1.c: 156: }
  7148                           ;RF_Control_B1.c: 157: }
  7149                           ;RF_Control_B1.c: 158: if (RF1.RxStatus == 1) {
  7150  061F  0021               	movlb	1	; select bank1
  7151  0620  1DBA               	btfss	_RF1^(0+128),3
  7152  0621  2E40               	goto	l7717
  7153                           
  7154                           ;RF_Control_B1.c: 159: RF1.CheckedCounter++;
  7155  0622  3001               	movlw	1
  7156  0623  07BF               	addwf	(_RF1^(0+128)+5),f
  7157  0624  3000               	movlw	0
  7158  0625  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  7159                           
  7160                           ;RF_Control_B1.c: 160: if (RF1.CheckedCounter == 100) {
  7161  0626  3005               	movlw	5
  7162  0627  3EBA               	addlw	_RF1& (0+255)
  7163  0628  0086               	movwf	6
  7164  0629  0187               	clrf	7
  7165  062A  3F40               	moviw [0]fsr1
  7166  062B  3A64               	xorlw	100
  7167  062C  1D03               	skipz
  7168  062D  2E30               	goto	u7395
  7169  062E  3F41               	moviw [1]fsr1
  7170  062F  3A00               	xorlw	0
  7171  0630                     u7395:	
  7172  0630  1D03               	skipz
  7173  0631  2E40               	goto	l7717
  7174                           
  7175                           ;RF_Control_B1.c: 161: RF1.CheckedCounter = 0;
  7176  0632  01BF               	clrf	(_RF1^(0+128)+5)
  7177  0633  01C0               	clrf	((_RF1+1)^(0+128)+5)
  7178                           
  7179                           ;RF_Control_B1.c: 162: RF1.CheckCount = 0;
  7180  0634  01BE               	clrf	(_RF1^(0+128)+4)
  7181                           
  7182                           ;RF_Control_B1.c: 163: if (RF1.RunTime > 10) {
  7183  0635  3000               	movlw	0
  7184  0636  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7185  0637  300B               	movlw	11
  7186  0638  1903               	skipnz
  7187  0639  0241               	subwf	(_RF1^(0+128)+7),w
  7188  063A  1C03               	skipc
  7189  063B  2E40               	goto	l7717
  7190                           
  7191                           ;RF_Control_B1.c: 164: RF1.RunTime -= 10;
  7192  063C  300A               	movlw	10
  7193  063D  02C1               	subwf	(_RF1^(0+128)+7),f
  7194  063E  3000               	movlw	0
  7195  063F  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  7196  0640                     l7717:	
  7197                           
  7198                           ;RF_Control_B1.c: 165: }
  7199                           ;RF_Control_B1.c: 166: }
  7200                           ;RF_Control_B1.c: 167: }
  7201                           ;RF_Control_B1.c: 168: if (RF1.Correction == 1) {
  7202  0640  1EBB               	btfss	(_RF1^(0+128)+1),5
  7203  0641  0008               	return
  7204                           
  7205                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter++;
  7206  0642  3001               	movlw	1
  7207  0643  07C4               	addwf	(_RF1^(0+128)+10),f
  7208  0644  3000               	movlw	0
  7209  0645  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  7210                           
  7211                           ;RF_Control_B1.c: 170: if (RF1.CorrectionCounter >= 6000) {
  7212  0646  3017               	movlw	23
  7213  0647  0245               	subwf	((_RF1+1)^(0+128)+10),w
  7214  0648  3070               	movlw	112
  7215  0649  1903               	skipnz
  7216  064A  0244               	subwf	(_RF1^(0+128)+10),w
  7217  064B  1C03               	skipc
  7218  064C  0008               	return
  7219                           
  7220                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter = 0;
  7221  064D  01C4               	clrf	(_RF1^(0+128)+10)
  7222  064E  01C5               	clrf	((_RF1+1)^(0+128)+10)
  7223                           
  7224                           ;RF_Control_B1.c: 172: RF_RxDisable();
  7225  064F  319B  239B         	fcall	_RF_RxDisable
  7226                           
  7227                           ;RF_Control_B1.c: 173: }
  7228                           ;RF_Control_B1.c: 174: }
  7229                           ;RF_Control_B1.c: 175: }
  7230                           ;RF_Control_B1.c: 176: }
  7231                           ;RF_Control_B1.c: 183: } else {
  7232  0651  0008               	return
  7233  0652                     l1970:	
  7234                           
  7235                           ;RF_Control_B1.c: 184: if (myMain.PowerON == 1) {
  7236  0652  1C20               	btfss	_myMain^(0+128),0
  7237  0653  0008               	return
  7238                           
  7239                           ;RF_Control_B1.c: 185: RF1.Enable = 1;
  7240  0654  143A               	bsf	_RF1^(0+128),0
  7241  0655  0008               	return
  7242  0656                     __end_of_setRF_Main:	
  7243                           
  7244                           	psect	text25
  7245  0D60                     __ptext25:	
  7246 ;; *************** function _getRxData *****************
  7247 ;; Defined at:
  7248 ;;		line 279 in file "../src/RF_Control_B1.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;		None
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;  error           1   76[BANK0 ] unsigned char 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;		None               void
  7255 ;; Registers used:
  7256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;Total ram usage:        2 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:   12
  7269 ;; This function calls:
  7270 ;;		_getMain_All_Error_Status
  7271 ;;		_setControl_Lights_Table
  7272 ;;		_setLog_Code
  7273 ;;		_setTxData
  7274 ;; This function is called by:
  7275 ;;		_setRF_Main
  7276 ;; This function uses a non-reentrant model
  7277 ;;
  7278                           
  7279                           
  7280                           ;psect for function _getRxData
  7281  0D60                     _getRxData:	
  7282                           
  7283                           ;RF_Control_B1.c: 280: char error = getMain_All_Error_Status(0);
  7284                           
  7285                           ;incstack = 0
  7286                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7287  0D60  3000               	movlw	0
  7288  0D61  3191  2165  318D   	fcall	_getMain_All_Error_Status
  7289  0D64  0020               	movlb	0	; select bank0
  7290  0D65  00EB               	movwf	??_getRxData
  7291  0D66  086B               	movf	??_getRxData,w
  7292  0D67  00EC               	movwf	getRxData@error
  7293                           
  7294                           ;RF_Control_B1.c: 281: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7295  0D68  0023               	movlb	3	; select bank3
  7296  0D69  0820               	movf	_RF_Data^(0+384),w
  7297  0D6A  3AAA               	xorlw	170
  7298  0D6B  1D03               	skipz
  7299  0D6C  2D83               	goto	l7121
  7300  0D6D  0821               	movf	(_RF_Data^(0+384)+1),w
  7301  0D6E  3A01               	xorlw	1
  7302  0D6F  1D03               	skipz
  7303  0D70  2D83               	goto	l7121
  7304                           
  7305                           ;RF_Control_B1.c: 283: product->Data[2] = 0x55;
  7306  0D71  3055               	movlw	85
  7307  0D72  0020               	movlb	0	; select bank0
  7308  0D73  00EB               	movwf	??_getRxData
  7309  0D74  086E               	movf	_product,w
  7310  0D75  3E02               	addlw	2
  7311  0D76  0086               	movwf	6
  7312  0D77  3002               	movlw	2	; select bank4/5
  7313  0D78  0087               	movwf	7
  7314  0D79  086B               	movf	??_getRxData,w
  7315  0D7A  0081               	movwf	1
  7316                           
  7317                           ;RF_Control_B1.c: 284: setTxData();
  7318  0D7B  3187  2732         	fcall	_setTxData
  7319                           
  7320                           ;RF_Control_B1.c: 285: RF1.RunTime = 10;
  7321  0D7D  300A               	movlw	10
  7322  0D7E  0021               	movlb	1	; select bank1
  7323  0D7F  00C1               	movwf	(_RF1^(0+128)+7)
  7324  0D80  3000               	movlw	0
  7325  0D81  00C2               	movwf	(_RF1^(0+128)+8)
  7326                           
  7327                           ;RF_Control_B1.c: 291: } else {
  7328  0D82  0008               	return
  7329  0D83                     l7121:	
  7330                           
  7331                           ;RF_Control_B1.c: 293: if (error == 0) {
  7332  0D83  0020               	movlb	0	; select bank0
  7333  0D84  08EC               	movf	getRxData@error,f
  7334  0D85  1D03               	skipz
  7335  0D86  0008               	return
  7336                           
  7337                           ;RF_Control_B1.c: 294: if (RF1.Learn == 1) {
  7338  0D87  0021               	movlb	1	; select bank1
  7339  0D88  1F3A               	btfss	_RF1^(0+128),6
  7340  0D89  2D9A               	goto	l7133
  7341                           
  7342                           ;RF_Control_B1.c: 295: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7343  0D8A  0023               	movlb	3	; select bank3
  7344  0D8B  08A0               	movf	_RF_Data^(0+384),f
  7345  0D8C  1D03               	skipz
  7346  0D8D  2D97               	goto	l2023
  7347  0D8E  0821               	movf	(_RF_Data^(0+384)+1),w
  7348  0D8F  3A64               	xorlw	100
  7349  0D90  1D03               	skipz
  7350  0D91  2D97               	goto	l2023
  7351                           
  7352                           ;RF_Control_B1.c: 296: setLog_Code();
  7353  0D92  3192  2202         	fcall	_setLog_Code
  7354                           
  7355                           ;RF_Control_B1.c: 297: RF1.Checked = 1;
  7356  0D94  0021               	movlb	1	; select bank1
  7357  0D95  15BB               	bsf	(_RF1^(0+128)+1),3
  7358                           
  7359                           ;RF_Control_B1.c: 298: } else {
  7360  0D96  0008               	return
  7361  0D97                     l2023:	
  7362                           
  7363                           ;RF_Control_B1.c: 299: RF1.Checked = 0;
  7364  0D97  0021               	movlb	1	; select bank1
  7365  0D98  11BB               	bcf	(_RF1^(0+128)+1),3
  7366                           
  7367                           ;RF_Control_B1.c: 300: }
  7368                           ;RF_Control_B1.c: 301: } else {
  7369  0D99  0008               	return
  7370  0D9A                     l7133:	
  7371                           
  7372                           ;RF_Control_B1.c: 302: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7373  0D9A  0023               	movlb	3	; select bank3
  7374  0D9B  08A0               	movf	_RF_Data^(0+384),f
  7375  0D9C  1D03               	skipz
  7376  0D9D  2DD8               	goto	l7155
  7377  0D9E  0821               	movf	(_RF_Data^(0+384)+1),w
  7378  0D9F  3A02               	xorlw	2
  7379  0DA0  1D03               	skipz
  7380  0DA1  2DD8               	goto	l7155
  7381                           
  7382                           ;RF_Control_B1.c: 304: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7383  0DA2  082C               	movf	(_RF_Data^(0+384)+12),w
  7384  0DA3  3AFF               	xorlw	255
  7385  0DA4  1D03               	skipz
  7386  0DA5  2DB2               	goto	l7145
  7387  0DA6  082D               	movf	(_RF_Data^(0+384)+13),w
  7388  0DA7  3AFF               	xorlw	255
  7389  0DA8  1D03               	skipz
  7390  0DA9  2DB2               	goto	l7145
  7391  0DAA  082E               	movf	(_RF_Data^(0+384)+14),w
  7392  0DAB  3AFF               	xorlw	255
  7393  0DAC  1D03               	skipz
  7394  0DAD  2DB2               	goto	l7145
  7395                           
  7396                           ;RF_Control_B1.c: 305: __nop();
  7397  0DAE  0000               	nop
  7398                           
  7399                           ;RF_Control_B1.c: 306: RF1.Checked = 0;
  7400  0DAF  0021               	movlb	1	; select bank1
  7401  0DB0  11BB               	bcf	(_RF1^(0+128)+1),3
  7402                           
  7403                           ;RF_Control_B1.c: 307: } else {
  7404  0DB1  0008               	return
  7405  0DB2                     l7145:	
  7406                           
  7407                           ;RF_Control_B1.c: 308: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7408  0DB2  0020               	movlb	0	; select bank0
  7409  0DB3  086E               	movf	_product,w
  7410  0DB4  3E0C               	addlw	12
  7411  0DB5  0086               	movwf	6
  7412  0DB6  3002               	movlw	2	; select bank4/5
  7413  0DB7  0087               	movwf	7
  7414  0DB8  0023               	movlb	3	; select bank3
  7415  0DB9  082C               	movf	(_RF_Data^(0+384)+12),w
  7416  0DBA  0601               	xorwf	1,w
  7417  0DBB  1D03               	skipz
  7418  0DBC  0008               	return
  7419  0DBD  0020               	movlb	0	; select bank0
  7420  0DBE  086E               	movf	_product,w
  7421  0DBF  3E0D               	addlw	13
  7422  0DC0  0086               	movwf	6
  7423  0DC1  3002               	movlw	2	; select bank4/5
  7424  0DC2  0087               	movwf	7
  7425  0DC3  0023               	movlb	3	; select bank3
  7426  0DC4  082D               	movf	(_RF_Data^(0+384)+13),w
  7427  0DC5  0601               	xorwf	1,w
  7428  0DC6  1D03               	skipz
  7429  0DC7  0008               	return
  7430  0DC8  0020               	movlb	0	; select bank0
  7431  0DC9  086E               	movf	_product,w
  7432  0DCA  3E0E               	addlw	14
  7433  0DCB  0086               	movwf	6
  7434  0DCC  3002               	movlw	2	; select bank4/5
  7435  0DCD  0087               	movwf	7
  7436  0DCE  0023               	movlb	3	; select bank3
  7437  0DCF  082E               	movf	(_RF_Data^(0+384)+14),w
  7438  0DD0  0601               	xorwf	1,w
  7439  0DD1  1D03               	skipz
  7440  0DD2  0008               	return
  7441                           
  7442                           ;RF_Control_B1.c: 309: setControl_Lights_Table();
  7443  0DD3  318A  22FC         	fcall	_setControl_Lights_Table
  7444                           
  7445                           ;RF_Control_B1.c: 310: RF1.Checked = 1;
  7446  0DD5  0021               	movlb	1	; select bank1
  7447  0DD6  15BB               	bsf	(_RF1^(0+128)+1),3
  7448                           
  7449                           ;RF_Control_B1.c: 311: }
  7450                           ;RF_Control_B1.c: 312: }
  7451                           ;RF_Control_B1.c: 313: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7452  0DD7  0008               	return
  7453  0DD8                     l7155:	
  7454  0DD8  0023               	movlb	3	; select bank3
  7455  0DD9  0820               	movf	_RF_Data^(0+384),w
  7456  0DDA  3AFF               	xorlw	255
  7457  0DDB  1D03               	skipz
  7458  0DDC  2DE3               	goto	l7161
  7459  0DDD  0821               	movf	(_RF_Data^(0+384)+1),w
  7460  0DDE  3A02               	xorlw	2
  7461  0DDF  1D03               	skipz
  7462  0DE0  2DE3               	goto	l7161
  7463                           
  7464                           ;RF_Control_B1.c: 314: __nop();
  7465  0DE1  0000               	nop
  7466                           
  7467                           ;RF_Control_B1.c: 315: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7468  0DE2  0008               	return
  7469  0DE3                     l7161:	
  7470  0DE3  0023               	movlb	3	; select bank3
  7471  0DE4  08A0               	movf	_RF_Data^(0+384),f
  7472  0DE5  1D03               	skipz
  7473  0DE6  2DED               	goto	l2033
  7474  0DE7  0821               	movf	(_RF_Data^(0+384)+1),w
  7475  0DE8  3A65               	xorlw	101
  7476  0DE9  1D03               	skipz
  7477  0DEA  2DED               	goto	l2033
  7478                           
  7479                           ;RF_Control_B1.c: 316: __nop();
  7480  0DEB  0000               	nop
  7481                           
  7482                           ;RF_Control_B1.c: 317: } else {
  7483  0DEC  0008               	return
  7484  0DED                     l2033:	
  7485                           
  7486                           ;RF_Control_B1.c: 318: RF1.Checked = 0;
  7487  0DED  0021               	movlb	1	; select bank1
  7488  0DEE  11BB               	bcf	(_RF1^(0+128)+1),3
  7489                           
  7490                           ;RF_Control_B1.c: 326: ;
  7491                           
  7492                           ;RF_Control_B1.c: 319: }
  7493                           ;RF_Control_B1.c: 324: }
  7494                           ;RF_Control_B1.c: 325: } else {
  7495  0DEF  0008               	return
  7496  0DF0                     __end_of_getRxData:	
  7497                           
  7498                           	psect	text26
  7499  1202                     __ptext26:	
  7500 ;; *************** function _setLog_Code *****************
  7501 ;; Defined at:
  7502 ;;		line 332 in file "../src/RF_Control_B1.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;		None
  7505 ;; Auto vars:     Size  Location     Type
  7506 ;;		None
  7507 ;; Return value:  Size  Location     Type
  7508 ;;		None               void
  7509 ;; Registers used:
  7510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;Total ram usage:        1 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    7
  7523 ;; This function calls:
  7524 ;;		_setBuz
  7525 ;;		_setMemory_LoopSave
  7526 ;;		_setMemory_Modify
  7527 ;; This function is called by:
  7528 ;;		_getRxData
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           
  7533                           ;psect for function _setLog_Code
  7534  1202                     _setLog_Code:	
  7535                           
  7536                           ;RF_Control_B1.c: 333: RF1.Learn = 0;
  7537                           
  7538                           ;incstack = 0
  7539                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7540  1202  0021               	movlb	1	; select bank1
  7541  1203  133A               	bcf	_RF1^(0+128),6
  7542                           
  7543                           ;RF_Control_B1.c: 334: product->Data[12]=RF_Data[12];
  7544  1204  0023               	movlb	3	; select bank3
  7545  1205  082C               	movf	(_RF_Data^(0+384)+12),w
  7546  1206  0020               	movlb	0	; select bank0
  7547  1207  00AD               	movwf	??_setLog_Code
  7548  1208  086E               	movf	_product,w
  7549  1209  3E0C               	addlw	12
  7550  120A  0086               	movwf	6
  7551  120B  3002               	movlw	2	; select bank4/5
  7552  120C  0087               	movwf	7
  7553  120D  082D               	movf	??_setLog_Code,w
  7554  120E  0081               	movwf	1
  7555                           
  7556                           ;RF_Control_B1.c: 335: product->Data[13]=RF_Data[13];
  7557  120F  0023               	movlb	3	; select bank3
  7558  1210  082D               	movf	(_RF_Data^(0+384)+13),w
  7559  1211  0020               	movlb	0	; select bank0
  7560  1212  00AD               	movwf	??_setLog_Code
  7561  1213  086E               	movf	_product,w
  7562  1214  3E0D               	addlw	13
  7563  1215  0086               	movwf	6
  7564  1216  3002               	movlw	2	; select bank4/5
  7565  1217  0087               	movwf	7
  7566  1218  082D               	movf	??_setLog_Code,w
  7567  1219  0081               	movwf	1
  7568                           
  7569                           ;RF_Control_B1.c: 336: product->Data[14]=RF_Data[14];
  7570  121A  0023               	movlb	3	; select bank3
  7571  121B  082E               	movf	(_RF_Data^(0+384)+14),w
  7572  121C  0020               	movlb	0	; select bank0
  7573  121D  00AD               	movwf	??_setLog_Code
  7574  121E  086E               	movf	_product,w
  7575  121F  3E0E               	addlw	14
  7576  1220  0086               	movwf	6
  7577  1221  3002               	movlw	2	; select bank4/5
  7578  1222  0087               	movwf	7
  7579  1223  082D               	movf	??_setLog_Code,w
  7580  1224  0081               	movwf	1
  7581                           
  7582                           ;RF_Control_B1.c: 337: setBuz(1, 100);
  7583  1225  3064               	movlw	100
  7584  1226  00A9               	movwf	setBuz@time
  7585  1227  3000               	movlw	0
  7586  1228  00AA               	movwf	setBuz@time+1
  7587  1229  3001               	movlw	1
  7588  122A  3195  25DF  3192   	fcall	_setBuz
  7589                           
  7590                           ;RF_Control_B1.c: 338: if (myMain.First == 1) {
  7591  122D  0021               	movlb	1	; select bank1
  7592  122E  1EA0               	btfss	_myMain^(0+128),5
  7593  122F  2A34               	goto	l2039
  7594                           
  7595                           ;RF_Control_B1.c: 339: setMemory_LoopSave(1);
  7596  1230  3001               	movlw	1
  7597  1231  319C  247F  3192   	fcall	_setMemory_LoopSave
  7598  1234                     l2039:	
  7599                           
  7600                           ;RF_Control_B1.c: 340: }
  7601                           ;RF_Control_B1.c: 341: setMemory_Modify(1);
  7602  1234  3001               	movlw	1
  7603  1235  319C  246C         	fcall	_setMemory_Modify
  7604  1237  0008               	return
  7605  1238                     __end_of_setLog_Code:	
  7606                           
  7607                           	psect	text27
  7608  1C7F                     __ptext27:	
  7609 ;; *************** function _setMemory_LoopSave *****************
  7610 ;; Defined at:
  7611 ;;		line 1071 in file "../src/MCU_B1.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;  command         1    wreg     unsigned char 
  7614 ;; Auto vars:     Size  Location     Type
  7615 ;;  command         1    1[BANK0 ] unsigned char 
  7616 ;; Return value:  Size  Location     Type
  7617 ;;		None               void
  7618 ;; Registers used:
  7619 ;;		wreg, status,2, status,0
  7620 ;; Tracked objects:
  7621 ;;		On entry : 0/0
  7622 ;;		On exit  : 0/0
  7623 ;;		Unchanged: 0/0
  7624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;Total ram usage:        2 bytes
  7630 ;; Hardware stack levels used:    1
  7631 ;; Hardware stack levels required when called:    5
  7632 ;; This function calls:
  7633 ;;		Nothing
  7634 ;; This function is called by:
  7635 ;;		_setLog_Code
  7636 ;; This function uses a non-reentrant model
  7637 ;;
  7638                           
  7639                           
  7640                           ;psect for function _setMemory_LoopSave
  7641  1C7F                     _setMemory_LoopSave:	
  7642                           
  7643                           ;incstack = 0
  7644                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7645                           ;setMemory_LoopSave@command stored from wreg
  7646  1C7F  0020               	movlb	0	; select bank0
  7647  1C80  00A1               	movwf	setMemory_LoopSave@command
  7648                           
  7649                           ;MCU_B1.c: 1072: Memory.LoopSave = command == 1 ? 1 : 0;
  7650  1C81  0821               	movf	setMemory_LoopSave@command,w
  7651  1C82  3A01               	xorlw	1
  7652  1C83  3000               	movlw	0
  7653  1C84  1903               	skipnz
  7654  1C85  3001               	movlw	1
  7655  1C86  00A0               	movwf	??_setMemory_LoopSave
  7656  1C87  0DA0               	rlf	??_setMemory_LoopSave,f
  7657  1C88  0DA0               	rlf	??_setMemory_LoopSave,f
  7658  1C89  0024               	movlb	4	; select bank4
  7659  1C8A  0844               	movf	(_Memory^(0+512)+36),w
  7660  1C8B  0020               	movlb	0	; select bank0
  7661  1C8C  0620               	xorwf	??_setMemory_LoopSave,w
  7662  1C8D  39FB               	andlw	-5
  7663  1C8E  0620               	xorwf	??_setMemory_LoopSave,w
  7664  1C8F  0024               	movlb	4	; select bank4
  7665  1C90  00C4               	movwf	(_Memory^(0+512)+36)
  7666  1C91  0008               	return
  7667  1C92                     __end_of_setMemory_LoopSave:	
  7668                           
  7669                           	psect	text28
  7670  0AFC                     __ptext28:	
  7671 ;; *************** function _setControl_Lights_Table *****************
  7672 ;; Defined at:
  7673 ;;		line 345 in file "../src/RF_Control_B1.c"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;		None
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;		None
  7678 ;; Return value:  Size  Location     Type
  7679 ;;		None               void
  7680 ;; Registers used:
  7681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7691 ;;Total ram usage:        0 bytes
  7692 ;; Hardware stack levels used:    1
  7693 ;; Hardware stack levels required when called:   11
  7694 ;; This function calls:
  7695 ;;		_setBuz
  7696 ;;		_setDimmerLights_ErrorClose
  7697 ;;		_setRFSW_AdjControl
  7698 ;;		_setRFSW_Control
  7699 ;;		_setTxData
  7700 ;; This function is called by:
  7701 ;;		_getRxData
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           
  7706                           ;psect for function _setControl_Lights_Table
  7707  0AFC                     _setControl_Lights_Table:	
  7708                           
  7709                           ;RF_Control_B1.c: 346: switch (RF_Data[15]) {
  7710                           
  7711                           ;incstack = 0
  7712                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7713  0AFC  2B48               	goto	l6735
  7714  0AFD                     l6709:	
  7715                           ;RF_Control_B1.c: 347: case 0x00:
  7716                           
  7717                           
  7718                           ;RF_Control_B1.c: 349: setDimmerLights_ErrorClose(255);
  7719  0AFD  30FF               	movlw	255
  7720  0AFE  3196  26EC  318A   	fcall	_setDimmerLights_ErrorClose
  7721                           
  7722                           ;RF_Control_B1.c: 351: product->Data[9]=0;
  7723  0B01  0020               	movlb	0	; select bank0
  7724  0B02  086E               	movf	_product,w
  7725  0B03  3E09               	addlw	9
  7726  0B04  0086               	movwf	6
  7727  0B05  3002               	movlw	2	; select bank4/5
  7728  0B06  0087               	movwf	7
  7729  0B07  0181               	clrf	1
  7730                           
  7731                           ;RF_Control_B1.c: 352: product->Data[11]=0;
  7732  0B08  086E               	movf	_product,w
  7733  0B09  3E0B               	addlw	11
  7734  0B0A  0086               	movwf	6
  7735  0B0B  3002               	movlw	2	; select bank4/5
  7736  0B0C  0087               	movwf	7
  7737  0B0D  0181               	clrf	1
  7738                           
  7739                           ;RF_Control_B1.c: 353: product->Data[15]=0;
  7740  0B0E  086E               	movf	_product,w
  7741  0B0F  3E0F               	addlw	15
  7742  0B10  0086               	movwf	6
  7743  0B11  3002               	movlw	2	; select bank4/5
  7744  0B12  0087               	movwf	7
  7745  0B13  0181               	clrf	1
  7746                           
  7747                           ;RF_Control_B1.c: 354: product->Data[17]=0;
  7748  0B14  086E               	movf	_product,w
  7749  0B15  3E11               	addlw	17
  7750  0B16  0086               	movwf	6
  7751  0B17  3002               	movlw	2	; select bank4/5
  7752  0B18  0087               	movwf	7
  7753  0B19  0181               	clrf	1
  7754                           
  7755                           ;RF_Control_B1.c: 355: setBuz(1, 100);
  7756  0B1A  3064               	movlw	100
  7757  0B1B  00A9               	movwf	setBuz@time
  7758  0B1C  3000               	movlw	0
  7759  0B1D  00AA               	movwf	setBuz@time+1
  7760  0B1E  3001               	movlw	1
  7761  0B1F  3195  25DF         	fcall	_setBuz
  7762                           
  7763                           ;RF_Control_B1.c: 357: break;
  7764  0B21  0008               	return
  7765  0B22                     l6721:	
  7766                           ;RF_Control_B1.c: 358: case 0x20:
  7767                           
  7768                           
  7769                           ;RF_Control_B1.c: 359: product->Data[9]=0;
  7770  0B22  0020               	movlb	0	; select bank0
  7771  0B23  086E               	movf	_product,w
  7772  0B24  3E09               	addlw	9
  7773  0B25  0086               	movwf	6
  7774  0B26  3002               	movlw	2	; select bank4/5
  7775  0B27  0087               	movwf	7
  7776  0B28  0181               	clrf	1
  7777                           
  7778                           ;RF_Control_B1.c: 360: product->Data[11]=0;
  7779  0B29  086E               	movf	_product,w
  7780  0B2A  3E0B               	addlw	11
  7781  0B2B  0086               	movwf	6
  7782  0B2C  3002               	movlw	2	; select bank4/5
  7783  0B2D  0087               	movwf	7
  7784  0B2E  0181               	clrf	1
  7785                           
  7786                           ;RF_Control_B1.c: 361: product->Data[17]=0;
  7787  0B2F  086E               	movf	_product,w
  7788  0B30  3E11               	addlw	17
  7789  0B31  0086               	movwf	6
  7790  0B32  3002               	movlw	2	; select bank4/5
  7791  0B33  0087               	movwf	7
  7792  0B34  0181               	clrf	1
  7793                           
  7794                           ;RF_Control_B1.c: 362: setTxData();
  7795  0B35  3187  2732         	fcall	_setTxData
  7796                           
  7797                           ;RF_Control_B1.c: 363: break;
  7798  0B37  0008               	return
  7799  0B38                     l6725:	
  7800                           ;RF_Control_B1.c: 364: case 0x01:
  7801                           
  7802                           
  7803                           ;RF_Control_B1.c: 366: setRFSW_Control(1);
  7804  0B38  3001               	movlw	1
  7805  0B39  3195  253C         	fcall	_setRFSW_Control
  7806                           
  7807                           ;RF_Control_B1.c: 368: break;
  7808  0B3B  0008               	return
  7809  0B3C                     l6727:	
  7810                           ;RF_Control_B1.c: 369: case 0x02:
  7811                           
  7812                           
  7813                           ;RF_Control_B1.c: 371: setRFSW_Control(2);
  7814  0B3C  3002               	movlw	2
  7815  0B3D  3195  253C         	fcall	_setRFSW_Control
  7816                           
  7817                           ;RF_Control_B1.c: 378: break;
  7818                           
  7819                           ;RF_Control_B1.c: 374: case 0x03:
  7820                           
  7821                           ;RF_Control_B1.c: 373: break;
  7822  0B3F  0008               	return
  7823  0B40                     l6729:	
  7824                           ;RF_Control_B1.c: 379: case 0x11:
  7825                           
  7826                           
  7827                           ;RF_Control_B1.c: 382: setRFSW_AdjControl(1);
  7828  0B40  3001               	movlw	1
  7829  0B41  3193  2396         	fcall	_setRFSW_AdjControl
  7830                           
  7831                           ;RF_Control_B1.c: 385: break;
  7832  0B43  0008               	return
  7833  0B44                     l6731:	
  7834                           ;RF_Control_B1.c: 386: case 0x21:
  7835                           
  7836                           
  7837                           ;RF_Control_B1.c: 389: setRFSW_AdjControl(2);
  7838  0B44  3002               	movlw	2
  7839  0B45  3193  2396         	fcall	_setRFSW_AdjControl
  7840                           
  7841                           ;RF_Control_B1.c: 400: }
  7842                           
  7843                           ;RF_Control_B1.c: 399: break;
  7844                           
  7845                           ;RF_Control_B1.c: 393: case 0x31:
  7846                           
  7847                           ;RF_Control_B1.c: 392: break;
  7848  0B47  0008               	return
  7849  0B48                     l6735:	
  7850  0B48  0023               	movlb	3	; select bank3
  7851  0B49  082F               	movf	(_RF_Data^(0+384)+15),w
  7852                           
  7853                           ; Switch size 1, requested type "space"
  7854                           ; Number of cases is 8, Range of values is 0 to 49
  7855                           ; switch strategies available:
  7856                           ; Name         Instructions Cycles
  7857                           ; simple_byte           25    13 (average)
  7858                           ; direct_byte          106     6 (fixed)
  7859                           ; jumptable            260     6 (fixed)
  7860                           ;	Chosen strategy is simple_byte
  7861  0B4A  3A00               	xorlw	0	; case 0
  7862  0B4B  1903               	skipnz
  7863  0B4C  2AFD               	goto	l6709
  7864  0B4D  3A01               	xorlw	1	; case 1
  7865  0B4E  1903               	skipnz
  7866  0B4F  2B38               	goto	l6725
  7867  0B50  3A03               	xorlw	3	; case 2
  7868  0B51  1903               	skipnz
  7869  0B52  2B3C               	goto	l6727
  7870  0B53  3A01               	xorlw	1	; case 3
  7871  0B54  1903               	skipnz
  7872  0B55  2B63               	goto	l2053
  7873  0B56  3A12               	xorlw	18	; case 17
  7874  0B57  1903               	skipnz
  7875  0B58  2B40               	goto	l6729
  7876  0B59  3A31               	xorlw	49	; case 32
  7877  0B5A  1903               	skipnz
  7878  0B5B  2B22               	goto	l6721
  7879  0B5C  3A01               	xorlw	1	; case 33
  7880  0B5D  1903               	skipnz
  7881  0B5E  2B44               	goto	l6731
  7882  0B5F  3A10               	xorlw	16	; case 49
  7883  0B60  1903               	skipnz
  7884  0B61  2B63               	goto	l2053
  7885  0B62  2B63               	goto	l2053
  7886  0B63                     l2053:	
  7887  0B63  0008               	return
  7888  0B64                     __end_of_setControl_Lights_Table:	
  7889                           
  7890                           	psect	text29
  7891  153C                     __ptext29:	
  7892 ;; *************** function _setRFSW_Control *****************
  7893 ;; Defined at:
  7894 ;;		line 427 in file "../src/RF_Control_B1.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  sw              1    wreg     unsigned char 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  sw              1   19[BANK0 ] unsigned char 
  7899 ;;  status          1   18[BANK0 ] unsigned char 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;		None               void
  7902 ;; Registers used:
  7903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : 0/0
  7906 ;;		On exit  : 0/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;Total ram usage:        3 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    9
  7916 ;; This function calls:
  7917 ;;		_getDelayOff_GO
  7918 ;;		_getDimmerLights_Status
  7919 ;;		_setBuz
  7920 ;;		_setDelayOff_GO
  7921 ;;		_setDimmerLights_SwOff
  7922 ;;		_setDimmerLights_SwOn
  7923 ;;		_setRF_DimmerLights
  7924 ;;		_setTxData
  7925 ;; This function is called by:
  7926 ;;		_setControl_Lights_Table
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           
  7931                           ;psect for function _setRFSW_Control
  7932  153C                     _setRFSW_Control:	
  7933                           
  7934                           ;incstack = 0
  7935                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7936                           ;setRFSW_Control@sw stored from wreg
  7937  153C  0020               	movlb	0	; select bank0
  7938  153D  00B3               	movwf	setRFSW_Control@sw
  7939                           
  7940                           ;RF_Control_B1.c: 428: char status = 0;
  7941  153E  01B2               	clrf	setRFSW_Control@status
  7942                           
  7943                           ;RF_Control_B1.c: 431: if (RF_Data[16] == 0x80) {
  7944  153F  0023               	movlb	3	; select bank3
  7945  1540  0830               	movf	(_RF_Data^(0+384)+16),w
  7946  1541  3A80               	xorlw	128
  7947  1542  1D03               	skipz
  7948  1543  2D6F               	goto	l6533
  7949                           
  7950                           ;RF_Control_B1.c: 432: setDelayOff_GO(sw, 1, RF_Data[17]);
  7951  1544  0020               	movlb	0	; select bank0
  7952  1545  01AA               	clrf	setDelayOff_GO@command
  7953  1546  0AAA               	incf	setDelayOff_GO@command,f
  7954  1547  0023               	movlb	3	; select bank3
  7955  1548  0831               	movf	(_RF_Data^(0+384)+17),w
  7956  1549  0020               	movlb	0	; select bank0
  7957  154A  00B1               	movwf	??_setRFSW_Control
  7958  154B  0831               	movf	??_setRFSW_Control,w
  7959  154C  00AB               	movwf	setDelayOff_GO@value
  7960  154D  0833               	movf	setRFSW_Control@sw,w
  7961  154E  3188  2050  3195   	fcall	_setDelayOff_GO
  7962                           
  7963                           ;RF_Control_B1.c: 433: if (getDimmerLights_Status(sw) == 1) {
  7964  1551  0020               	movlb	0	; select bank0
  7965  1552  0833               	movf	setRFSW_Control@sw,w
  7966  1553  319B  23BA  3195   	fcall	_getDimmerLights_Status
  7967  1556  3A01               	xorlw	1
  7968  1557  1D03               	skipz
  7969  1558  2D7E               	goto	l6537
  7970                           
  7971                           ;RF_Control_B1.c: 434: setBuz(1, 100);
  7972  1559  3064               	movlw	100
  7973  155A  0020               	movlb	0	; select bank0
  7974  155B  00A9               	movwf	setBuz@time
  7975  155C  3000               	movlw	0
  7976  155D  00AA               	movwf	setBuz@time+1
  7977  155E  3001               	movlw	1
  7978  155F  3195  25DF  3195   	fcall	_setBuz
  7979                           
  7980                           ;RF_Control_B1.c: 435: status = 1;
  7981  1562  0020               	movlb	0	; select bank0
  7982  1563  01B2               	clrf	setRFSW_Control@status
  7983  1564  0AB2               	incf	setRFSW_Control@status,f
  7984                           
  7985                           ;RF_Control_B1.c: 436: setRF_DimmerLights(sw, 1);
  7986  1565  01A0               	clrf	setRF_DimmerLights@on
  7987  1566  0AA0               	incf	setRF_DimmerLights@on,f
  7988  1567  0833               	movf	setRFSW_Control@sw,w
  7989  1568  3197  2748  3195   	fcall	_setRF_DimmerLights
  7990                           
  7991                           ;RF_Control_B1.c: 437: setTxData();
  7992  156B  3187  2732  3195   	fcall	_setTxData
  7993                           
  7994                           ;RF_Control_B1.c: 439: }
  7995                           ;RF_Control_B1.c: 440: } else {
  7996  156E  2D7E               	goto	l6537
  7997  156F                     l6533:	
  7998                           
  7999                           ;RF_Control_B1.c: 442: if (getDelayOff_GO(sw) == 1) {
  8000  156F  0020               	movlb	0	; select bank0
  8001  1570  0833               	movf	setRFSW_Control@sw,w
  8002  1571  319B  23AA  3195   	fcall	_getDelayOff_GO
  8003  1574  3A01               	xorlw	1
  8004  1575  1D03               	skipz
  8005  1576  2D7E               	goto	l6537
  8006                           
  8007                           ;RF_Control_B1.c: 443: setDelayOff_GO(sw, 0, 0);
  8008  1577  0020               	movlb	0	; select bank0
  8009  1578  01AA               	clrf	setDelayOff_GO@command
  8010  1579  01AB               	clrf	setDelayOff_GO@value
  8011  157A  0833               	movf	setRFSW_Control@sw,w
  8012  157B  3188  2050  3195   	fcall	_setDelayOff_GO
  8013  157E                     l6537:	
  8014                           
  8015                           ;RF_Control_B1.c: 444: }
  8016                           ;RF_Control_B1.c: 446: }
  8017                           ;RF_Control_B1.c: 447: if (status == 0) {
  8018  157E  0020               	movlb	0	; select bank0
  8019  157F  08B2               	movf	setRFSW_Control@status,f
  8020  1580  1D03               	skipz
  8021  1581  0008               	return
  8022                           
  8023                           ;RF_Control_B1.c: 449: setDimmerLights_SwOn(sw);
  8024  1582  0833               	movf	setRFSW_Control@sw,w
  8025  1583  3193  23D6  3195   	fcall	_setDimmerLights_SwOn
  8026                           
  8027                           ;RF_Control_B1.c: 450: setDimmerLights_SwOff(sw);
  8028  1586  0020               	movlb	0	; select bank0
  8029  1587  0833               	movf	setRFSW_Control@sw,w
  8030  1588  3194  24A3         	fcall	_setDimmerLights_SwOff
  8031  158A  0008               	return
  8032  158B                     __end_of_setRFSW_Control:	
  8033                           
  8034                           	psect	text30
  8035  13D6                     __ptext30:	
  8036 ;; *************** function _setDimmerLights_SwOn *****************
  8037 ;; Defined at:
  8038 ;;		line 505 in file "../src/Dimmer_B1.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;  sw              1    wreg     unsigned char 
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;  sw              1   15[BANK0 ] unsigned char 
  8043 ;;  idle            1   14[BANK0 ] unsigned char 
  8044 ;; Return value:  Size  Location     Type
  8045 ;;		None               void
  8046 ;; Registers used:
  8047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;Total ram usage:        3 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    7
  8060 ;; This function calls:
  8061 ;;		_DimmerLightsPointSelect
  8062 ;;		_getAll_DimmerLights_AdjGO
  8063 ;;		_setBuz
  8064 ;;		_setDimmerLights_Trigger
  8065 ;; This function is called by:
  8066 ;;		_setRFSW_Control
  8067 ;;		_setSw_Main
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           
  8072                           ;psect for function _setDimmerLights_SwOn
  8073  13D6                     _setDimmerLights_SwOn:	
  8074                           
  8075                           ;incstack = 0
  8076                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8077                           ;setDimmerLights_SwOn@sw stored from wreg
  8078  13D6  0020               	movlb	0	; select bank0
  8079  13D7  00AF               	movwf	setDimmerLights_SwOn@sw
  8080                           
  8081                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(sw);
  8082  13D8  082F               	movf	setDimmerLights_SwOn@sw,w
  8083  13D9  319C  2446  3193   	fcall	_DimmerLightsPointSelect
  8084                           
  8085                           ;Dimmer_B1.c: 507: char idle = 0;
  8086  13DC  0020               	movlb	0	; select bank0
  8087  13DD  01AE               	clrf	setDimmerLights_SwOn@idle
  8088                           
  8089                           ;Dimmer_B1.c: 509: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  8090  13DE  319C  2459  3193   	fcall	_getAll_DimmerLights_AdjGO
  8091  13E1  3A01               	xorlw	1
  8092  13E2  3000               	movlw	0
  8093  13E3  1903               	skipnz
  8094  13E4  3001               	movlw	1
  8095  13E5  0020               	movlb	0	; select bank0
  8096  13E6  00AD               	movwf	??_setDimmerLights_SwOn
  8097  13E7  082D               	movf	??_setDimmerLights_SwOn,w
  8098  13E8  00AE               	movwf	setDimmerLights_SwOn@idle
  8099                           
  8100                           ;Dimmer_B1.c: 511: if (idle == 0) {
  8101  13E9  08AE               	movf	setDimmerLights_SwOn@idle,f
  8102  13EA  1D03               	skipz
  8103  13EB  0008               	return
  8104                           
  8105                           ;Dimmer_B1.c: 512: DimmerLights->SwFlag = 1;
  8106  13EC  086F               	movf	_DimmerLights,w
  8107  13ED  3E0B               	addlw	11
  8108  13EE  0086               	movwf	6
  8109  13EF  3001               	movlw	1	; select bank2/3
  8110  13F0  0087               	movwf	7
  8111  13F1  1481               	bsf	1,1
  8112                           
  8113                           ;Dimmer_B1.c: 513: setBuz(1, 100);
  8114  13F2  3064               	movlw	100
  8115  13F3  00A9               	movwf	setBuz@time
  8116  13F4  3000               	movlw	0
  8117  13F5  00AA               	movwf	setBuz@time+1
  8118  13F6  3001               	movlw	1
  8119  13F7  3195  25DF  3193   	fcall	_setBuz
  8120                           
  8121                           ;Dimmer_B1.c: 514: if (DimmerLights->Status == 0) {
  8122  13FA  0020               	movlb	0	; select bank0
  8123  13FB  086F               	movf	_DimmerLights,w
  8124  13FC  3E02               	addlw	2
  8125  13FD  0086               	movwf	6
  8126  13FE  3001               	movlw	1	; select bank2/3
  8127  13FF  0087               	movwf	7
  8128  1400  1881               	btfsc	1,1
  8129  1401  2C0E               	goto	l6341
  8130                           
  8131                           ;Dimmer_B1.c: 515: DimmerLights->Status = 1;
  8132  1402  086F               	movf	_DimmerLights,w
  8133  1403  3E02               	addlw	2
  8134  1404  0086               	movwf	6
  8135  1405  3001               	movlw	1	; select bank2/3
  8136  1406  0087               	movwf	7
  8137  1407  1481               	bsf	1,1
  8138                           
  8139                           ;Dimmer_B1.c: 516: setDimmerLights_Trigger(sw, 1);
  8140  1408  01A2               	clrf	setDimmerLights_Trigger@command
  8141  1409  0AA2               	incf	setDimmerLights_Trigger@command,f
  8142  140A  082F               	movf	setDimmerLights_SwOn@sw,w
  8143  140B  3190  2066         	fcall	_setDimmerLights_Trigger
  8144                           
  8145                           ;Dimmer_B1.c: 517: } else {
  8146  140D  0008               	return
  8147  140E                     l6341:	
  8148                           
  8149                           ;Dimmer_B1.c: 518: DimmerLights->Status = 0;
  8150  140E  0020               	movlb	0	; select bank0
  8151  140F  086F               	movf	_DimmerLights,w
  8152  1410  3E02               	addlw	2
  8153  1411  0086               	movwf	6
  8154  1412  3001               	movlw	1	; select bank2/3
  8155  1413  0087               	movwf	7
  8156  1414  1081               	bcf	1,1
  8157  1415  0008               	return
  8158  1416                     __end_of_setDimmerLights_SwOn:	
  8159                           
  8160                           	psect	text31
  8161  1396                     __ptext31:	
  8162 ;; *************** function _setRFSW_AdjControl *****************
  8163 ;; Defined at:
  8164 ;;		line 456 in file "../src/RF_Control_B1.c"
  8165 ;; Parameters:    Size  Location     Type
  8166 ;;  sw              1    wreg     unsigned char 
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;  sw              1   74[BANK0 ] unsigned char 
  8169 ;;  status          1   73[BANK0 ] unsigned char 
  8170 ;; Return value:  Size  Location     Type
  8171 ;;		None               void
  8172 ;; Registers used:
  8173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8174 ;; Tracked objects:
  8175 ;;		On entry : 0/0
  8176 ;;		On exit  : 0/0
  8177 ;;		Unchanged: 0/0
  8178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;Total ram usage:        4 bytes
  8184 ;; Hardware stack levels used:    1
  8185 ;; Hardware stack levels required when called:   10
  8186 ;; This function calls:
  8187 ;;		_getDimmerLights_Status
  8188 ;;		_setMemory_Modify
  8189 ;;		_setRF_DimmerValue
  8190 ;;		_setTxData
  8191 ;; This function is called by:
  8192 ;;		_setControl_Lights_Table
  8193 ;; This function uses a non-reentrant model
  8194 ;;
  8195                           
  8196                           
  8197                           ;psect for function _setRFSW_AdjControl
  8198  1396                     _setRFSW_AdjControl:	
  8199                           
  8200                           ;incstack = 0
  8201                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8202                           ;setRFSW_AdjControl@sw stored from wreg
  8203  1396  0020               	movlb	0	; select bank0
  8204  1397  00EA               	movwf	setRFSW_AdjControl@sw
  8205                           
  8206                           ;RF_Control_B1.c: 457: char status = 0;
  8207  1398  01E9               	clrf	setRFSW_AdjControl@status
  8208                           
  8209                           ;RF_Control_B1.c: 459: status = getDimmerLights_Status(sw);
  8210  1399  086A               	movf	setRFSW_AdjControl@sw,w
  8211  139A  319B  23BA  3193   	fcall	_getDimmerLights_Status
  8212  139D  0020               	movlb	0	; select bank0
  8213  139E  00E7               	movwf	??_setRFSW_AdjControl
  8214  139F  0867               	movf	??_setRFSW_AdjControl,w
  8215  13A0  00E9               	movwf	setRFSW_AdjControl@status
  8216                           
  8217                           ;RF_Control_B1.c: 462: if (status == 1) {
  8218  13A1  0869               	movf	setRFSW_AdjControl@status,w
  8219  13A2  3A01               	xorlw	1
  8220  13A3  1D03               	skipz
  8221  13A4  2BAF               	goto	l6551
  8222                           
  8223                           ;RF_Control_B1.c: 463: setMemory_Modify(1);
  8224  13A5  3001               	movlw	1
  8225  13A6  319C  246C  3193   	fcall	_setMemory_Modify
  8226                           
  8227                           ;RF_Control_B1.c: 464: setRF_DimmerValue(sw);
  8228  13A9  0020               	movlb	0	; select bank0
  8229  13AA  086A               	movf	setRFSW_AdjControl@sw,w
  8230  13AB  3191  2133  3193   	fcall	_setRF_DimmerValue
  8231                           
  8232                           ;RF_Control_B1.c: 465: } else {
  8233  13AE  2BC1               	goto	l2065
  8234  13AF                     l6551:	
  8235                           
  8236                           ;RF_Control_B1.c: 466: product->Data[9]=product->Data[20 + sw];
  8237  13AF  0020               	movlb	0	; select bank0
  8238  13B0  086A               	movf	setRFSW_AdjControl@sw,w
  8239  13B1  3E14               	addlw	20
  8240  13B2  076E               	addwf	_product,w
  8241  13B3  00E7               	movwf	??_setRFSW_AdjControl
  8242  13B4  0867               	movf	??_setRFSW_AdjControl,w
  8243  13B5  0086               	movwf	6
  8244  13B6  3002               	movlw	2	; select bank4/5
  8245  13B7  0087               	movwf	7
  8246  13B8  0801               	movf	1,w
  8247  13B9  00E8               	movwf	??_setRFSW_AdjControl+1
  8248  13BA  086E               	movf	_product,w
  8249  13BB  3E09               	addlw	9
  8250  13BC  0086               	movwf	6
  8251  13BD  3002               	movlw	2	; select bank4/5
  8252  13BE  0087               	movwf	7
  8253  13BF  0868               	movf	??_setRFSW_AdjControl+1,w
  8254  13C0  0081               	movwf	1
  8255  13C1                     l2065:	
  8256                           
  8257                           ;RF_Control_B1.c: 467: }
  8258                           ;RF_Control_B1.c: 468: product->Data[17]=product->Data[26 + sw];
  8259  13C1  0020               	movlb	0	; select bank0
  8260  13C2  086A               	movf	setRFSW_AdjControl@sw,w
  8261  13C3  3E1A               	addlw	26
  8262  13C4  076E               	addwf	_product,w
  8263  13C5  00E7               	movwf	??_setRFSW_AdjControl
  8264  13C6  0867               	movf	??_setRFSW_AdjControl,w
  8265  13C7  0086               	movwf	6
  8266  13C8  3002               	movlw	2	; select bank4/5
  8267  13C9  0087               	movwf	7
  8268  13CA  0801               	movf	1,w
  8269  13CB  00E8               	movwf	??_setRFSW_AdjControl+1
  8270  13CC  086E               	movf	_product,w
  8271  13CD  3E11               	addlw	17
  8272  13CE  0086               	movwf	6
  8273  13CF  3002               	movlw	2	; select bank4/5
  8274  13D0  0087               	movwf	7
  8275  13D1  0868               	movf	??_setRFSW_AdjControl+1,w
  8276  13D2  0081               	movwf	1
  8277                           
  8278                           ;RF_Control_B1.c: 469: setTxData();
  8279  13D3  3187  2732         	fcall	_setTxData
  8280  13D5  0008               	return
  8281  13D6                     __end_of_setRFSW_AdjControl:	
  8282                           
  8283                           	psect	text32
  8284  1133                     __ptext32:	
  8285 ;; *************** function _setRF_DimmerValue *****************
  8286 ;; Defined at:
  8287 ;;		line 474 in file "../src/RF_Control_B1.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;  lights          1    wreg     unsigned char 
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;  lights          1   70[BANK0 ] unsigned char 
  8292 ;; Return value:  Size  Location     Type
  8293 ;;		None               void
  8294 ;; Registers used:
  8295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8296 ;; Tracked objects:
  8297 ;;		On entry : 0/0
  8298 ;;		On exit  : 0/0
  8299 ;;		Unchanged: 0/0
  8300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;Total ram usage:        3 bytes
  8306 ;; Hardware stack levels used:    1
  8307 ;; Hardware stack levels required when called:    9
  8308 ;; This function calls:
  8309 ;;		_setDimmerLights_AdjRF
  8310 ;; This function is called by:
  8311 ;;		_setRFSW_AdjControl
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           
  8316                           ;psect for function _setRF_DimmerValue
  8317  1133                     _setRF_DimmerValue:	
  8318                           
  8319                           ;incstack = 0
  8320                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8321                           ;setRF_DimmerValue@lights stored from wreg
  8322  1133  0020               	movlb	0	; select bank0
  8323  1134  00E6               	movwf	setRF_DimmerValue@lights
  8324                           
  8325                           ;RF_Control_B1.c: 475: if (RF_Data[9] > 0x64) {
  8326  1135  3065               	movlw	101
  8327  1136  0023               	movlb	3	; select bank3
  8328  1137  0229               	subwf	(_RF_Data^(0+384)+9),w
  8329  1138  1C03               	skipc
  8330  1139  2940               	goto	l6429
  8331                           
  8332                           ;RF_Control_B1.c: 476: RF_Data[9] = 0x64;
  8333  113A  3064               	movlw	100
  8334  113B  0020               	movlb	0	; select bank0
  8335  113C  00E4               	movwf	??_setRF_DimmerValue
  8336  113D  0864               	movf	??_setRF_DimmerValue,w
  8337  113E  0023               	movlb	3	; select bank3
  8338  113F  00A9               	movwf	(_RF_Data^(0+384)+9)
  8339  1140                     l6429:	
  8340                           
  8341                           ;RF_Control_B1.c: 477: }
  8342                           ;RF_Control_B1.c: 478: product->Data[9]=RF_Data[9];
  8343  1140  0829               	movf	(_RF_Data^(0+384)+9),w
  8344  1141  0020               	movlb	0	; select bank0
  8345  1142  00E4               	movwf	??_setRF_DimmerValue
  8346  1143  086E               	movf	_product,w
  8347  1144  3E09               	addlw	9
  8348  1145  0086               	movwf	6
  8349  1146  3002               	movlw	2	; select bank4/5
  8350  1147  0087               	movwf	7
  8351  1148  0864               	movf	??_setRF_DimmerValue,w
  8352  1149  0081               	movwf	1
  8353                           
  8354                           ;RF_Control_B1.c: 479: product->Data[11]=lights;
  8355  114A  0866               	movf	setRF_DimmerValue@lights,w
  8356  114B  00E4               	movwf	??_setRF_DimmerValue
  8357  114C  086E               	movf	_product,w
  8358  114D  3E0B               	addlw	11
  8359  114E  0086               	movwf	6
  8360  114F  3002               	movlw	2	; select bank4/5
  8361  1150  0087               	movwf	7
  8362  1151  0864               	movf	??_setRF_DimmerValue,w
  8363  1152  0081               	movwf	1
  8364                           
  8365                           ;RF_Control_B1.c: 480: product->Data[(20 + lights)]=RF_Data[9];
  8366  1153  0023               	movlb	3	; select bank3
  8367  1154  0829               	movf	(_RF_Data^(0+384)+9),w
  8368  1155  0020               	movlb	0	; select bank0
  8369  1156  00E4               	movwf	??_setRF_DimmerValue
  8370  1157  0866               	movf	setRF_DimmerValue@lights,w
  8371  1158  3E14               	addlw	20
  8372  1159  076E               	addwf	_product,w
  8373  115A  00E5               	movwf	??_setRF_DimmerValue+1
  8374  115B  0865               	movf	??_setRF_DimmerValue+1,w
  8375  115C  0086               	movwf	6
  8376  115D  3002               	movlw	2	; select bank4/5
  8377  115E  0087               	movwf	7
  8378  115F  0864               	movf	??_setRF_DimmerValue,w
  8379  1160  0081               	movwf	1
  8380                           
  8381                           ;RF_Control_B1.c: 481: setDimmerLights_AdjRF(lights);
  8382  1161  0866               	movf	setRF_DimmerValue@lights,w
  8383  1162  319F  2742         	fcall	_setDimmerLights_AdjRF
  8384  1164  0008               	return
  8385  1165                     __end_of_setRF_DimmerValue:	
  8386                           
  8387                           	psect	text33
  8388  1F42                     __ptext33:	
  8389 ;; *************** function _setDimmerLights_AdjRF *****************
  8390 ;; Defined at:
  8391 ;;		line 746 in file "../src/Dimmer_B1.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  lights          1    wreg     unsigned char 
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;  lights          1   67[BANK0 ] unsigned char 
  8396 ;; Return value:  Size  Location     Type
  8397 ;;		None               void
  8398 ;; Registers used:
  8399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;Total ram usage:        2 bytes
  8410 ;; Hardware stack levels used:    1
  8411 ;; Hardware stack levels required when called:    8
  8412 ;; This function calls:
  8413 ;;		_DimmerLightsPointSelect
  8414 ;;		_getPercentValue
  8415 ;; This function is called by:
  8416 ;;		_setRF_DimmerValue
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function _setDimmerLights_AdjRF
  8422  1F42                     _setDimmerLights_AdjRF:	
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8426                           ;setDimmerLights_AdjRF@lights stored from wreg
  8427  1F42  0020               	movlb	0	; select bank0
  8428  1F43  00E3               	movwf	setDimmerLights_AdjRF@lights
  8429                           
  8430                           ;Dimmer_B1.c: 747: DimmerLightsPointSelect(lights);
  8431  1F44  0863               	movf	setDimmerLights_AdjRF@lights,w
  8432  1F45  319C  2446  319F   	fcall	_DimmerLightsPointSelect
  8433                           
  8434                           ;Dimmer_B1.c: 748: DimmerLights->AdjRF = 1;
  8435  1F48  0020               	movlb	0	; select bank0
  8436  1F49  086F               	movf	_DimmerLights,w
  8437  1F4A  3E02               	addlw	2
  8438  1F4B  0086               	movwf	6
  8439  1F4C  3001               	movlw	1	; select bank2/3
  8440  1F4D  0087               	movwf	7
  8441  1F4E  1401               	bsf	1,0
  8442                           
  8443                           ;Dimmer_B1.c: 749: DimmerLights->Signal = 1;
  8444  1F4F  0A6F               	incf	_DimmerLights,w
  8445  1F50  0086               	movwf	6
  8446  1F51  3001               	movlw	1	; select bank2/3
  8447  1F52  0087               	movwf	7
  8448  1F53  1681               	bsf	1,5
  8449                           
  8450                           ;Dimmer_B1.c: 750: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8451  1F54  086E               	movf	_product,w
  8452  1F55  3E09               	addlw	9
  8453  1F56  0086               	movwf	6
  8454  1F57  3002               	movlw	2	; select bank4/5
  8455  1F58  0087               	movwf	7
  8456  1F59  0801               	movf	1,w
  8457  1F5A  318A  2231         	fcall	_getPercentValue
  8458  1F5C  0020               	movlb	0	; select bank0
  8459  1F5D  00E2               	movwf	??_setDimmerLights_AdjRF
  8460  1F5E  086F               	movf	_DimmerLights,w
  8461  1F5F  3E06               	addlw	6
  8462  1F60  0086               	movwf	6
  8463  1F61  3001               	movlw	1	; select bank2/3
  8464  1F62  0087               	movwf	7
  8465  1F63  0862               	movf	??_setDimmerLights_AdjRF,w
  8466  1F64  0081               	movwf	1
  8467  1F65  0008               	return
  8468  1F66                     __end_of_setDimmerLights_AdjRF:	
  8469                           
  8470                           	psect	text34
  8471  0A31                     __ptext34:	
  8472 ;; *************** function _getPercentValue *****************
  8473 ;; Defined at:
  8474 ;;		line 858 in file "../src/Dimmer_B1.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;  value           1    wreg     unsigned char 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  value           1   62[BANK0 ] unsigned char 
  8479 ;;  i               3   63[BANK0 ] float 
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      unsigned char 
  8482 ;; Registers used:
  8483 ;;		wreg, status,2, status,0, pclath, cstack
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;Total ram usage:        6 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    7
  8496 ;; This function calls:
  8497 ;;		___awtoft
  8498 ;;		___ftadd
  8499 ;;		___ftdiv
  8500 ;;		___ftmul
  8501 ;;		___ftneg
  8502 ;;		___fttol
  8503 ;; This function is called by:
  8504 ;;		_setDimmerLights_AdjRF
  8505 ;; This function uses a non-reentrant model
  8506 ;;
  8507                           
  8508                           
  8509                           ;psect for function _getPercentValue
  8510  0A31                     _getPercentValue:	
  8511                           
  8512                           ;incstack = 0
  8513                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8514                           ;getPercentValue@value stored from wreg
  8515  0A31  0020               	movlb	0	; select bank0
  8516  0A32  00DE               	movwf	getPercentValue@value
  8517                           
  8518                           ;Dimmer_B1.c: 866: float i = ((char)(65*0.8)) - ((char)(15*0.8));
  8519  0A33  3000               	movlw	0
  8520  0A34  00DF               	movwf	getPercentValue@i
  8521  0A35  3020               	movlw	32
  8522  0A36  00E0               	movwf	getPercentValue@i+1
  8523  0A37  3042               	movlw	66
  8524  0A38  00E1               	movwf	getPercentValue@i+2
  8525                           
  8526                           ;Dimmer_B1.c: 867: i /= 100;
  8527  0A39  3000               	movlw	0
  8528  0A3A  00AE               	movwf	___ftdiv@f2
  8529  0A3B  30C8               	movlw	200
  8530  0A3C  00AF               	movwf	___ftdiv@f2+1
  8531  0A3D  3042               	movlw	66
  8532  0A3E  00B0               	movwf	___ftdiv@f2+2
  8533  0A3F  085F               	movf	getPercentValue@i,w
  8534  0A40  00B1               	movwf	___ftdiv@f1
  8535  0A41  0860               	movf	getPercentValue@i+1,w
  8536  0A42  00B2               	movwf	___ftdiv@f1+1
  8537  0A43  0861               	movf	getPercentValue@i+2,w
  8538  0A44  00B3               	movwf	___ftdiv@f1+2
  8539  0A45  318D  25F0  318A   	fcall	___ftdiv
  8540  0A48  0020               	movlb	0	; select bank0
  8541  0A49  082E               	movf	?___ftdiv,w
  8542  0A4A  00DF               	movwf	getPercentValue@i
  8543  0A4B  082F               	movf	?___ftdiv+1,w
  8544  0A4C  00E0               	movwf	getPercentValue@i+1
  8545  0A4D  0830               	movf	?___ftdiv+2,w
  8546  0A4E  00E1               	movwf	getPercentValue@i+2
  8547                           
  8548                           ;Dimmer_B1.c: 869: return (char) (((char)(65*0.8)) - ((100 - value) * i));
  8549  0A4F  085E               	movf	getPercentValue@value,w
  8550  0A50  00DC               	movwf	??_getPercentValue
  8551  0A51  01DD               	clrf	??_getPercentValue+1
  8552  0A52  09DC               	comf	??_getPercentValue,f
  8553  0A53  09DD               	comf	??_getPercentValue+1,f
  8554  0A54  0ADC               	incf	??_getPercentValue,f
  8555  0A55  1903               	skipnz
  8556  0A56  0ADD               	incf	??_getPercentValue+1,f
  8557  0A57  085C               	movf	??_getPercentValue,w
  8558  0A58  3E64               	addlw	100
  8559  0A59  00A8               	movwf	___awtoft@c
  8560  0A5A  3000               	movlw	0
  8561  0A5B  3D5D               	addwfc	??_getPercentValue+1,w
  8562  0A5C  00A9               	movwf	___awtoft@c+1
  8563  0A5D  319E  26FE  318A   	fcall	___awtoft
  8564  0A60  0020               	movlb	0	; select bank0
  8565  0A61  0828               	movf	?___awtoft,w
  8566  0A62  00B1               	movwf	___ftmul@f2
  8567  0A63  0829               	movf	?___awtoft+1,w
  8568  0A64  00B2               	movwf	___ftmul@f2+1
  8569  0A65  082A               	movf	?___awtoft+2,w
  8570  0A66  00B3               	movwf	___ftmul@f2+2
  8571  0A67  085F               	movf	getPercentValue@i,w
  8572  0A68  00AE               	movwf	___ftmul@f1
  8573  0A69  0860               	movf	getPercentValue@i+1,w
  8574  0A6A  00AF               	movwf	___ftmul@f1+1
  8575  0A6B  0861               	movf	getPercentValue@i+2,w
  8576  0A6C  00B0               	movwf	___ftmul@f1+2
  8577  0A6D  318F  274C  318A   	fcall	___ftmul
  8578  0A70  0020               	movlb	0	; select bank0
  8579  0A71  082E               	movf	?___ftmul,w
  8580  0A72  00BE               	movwf	___ftneg@f1
  8581  0A73  082F               	movf	?___ftmul+1,w
  8582  0A74  00BF               	movwf	___ftneg@f1+1
  8583  0A75  0830               	movf	?___ftmul+2,w
  8584  0A76  00C0               	movwf	___ftneg@f1+2
  8585  0A77  319A  22F5  318A   	fcall	___ftneg
  8586  0A7A  0020               	movlb	0	; select bank0
  8587  0A7B  083E               	movf	?___ftneg,w
  8588  0A7C  00C4               	movwf	___ftadd@f2
  8589  0A7D  083F               	movf	?___ftneg+1,w
  8590  0A7E  00C5               	movwf	___ftadd@f2+1
  8591  0A7F  0840               	movf	?___ftneg+2,w
  8592  0A80  00C6               	movwf	___ftadd@f2+2
  8593  0A81  3000               	movlw	0
  8594  0A82  00C1               	movwf	___ftadd@f1
  8595  0A83  3050               	movlw	80
  8596  0A84  00C2               	movwf	___ftadd@f1+1
  8597  0A85  3042               	movlw	66
  8598  0A86  00C3               	movwf	___ftadd@f1+2
  8599  0A87  3184  2481  318A   	fcall	___ftadd
  8600  0A8A  0020               	movlb	0	; select bank0
  8601  0A8B  0841               	movf	?___ftadd,w
  8602  0A8C  00CE               	movwf	___fttol@f1
  8603  0A8D  0842               	movf	?___ftadd+1,w
  8604  0A8E  00CF               	movwf	___fttol@f1+1
  8605  0A8F  0843               	movf	?___ftadd+2,w
  8606  0A90  00D0               	movwf	___fttol@f1+2
  8607  0A91  318C  244F         	fcall	___fttol
  8608  0A93  0020               	movlb	0	; select bank0
  8609  0A94  084E               	movf	?___fttol,w
  8610  0A95  0008               	return
  8611  0A96                     __end_of_getPercentValue:	
  8612                           
  8613                           	psect	text35
  8614  0F4C                     __ptext35:	
  8615 ;; *************** function ___ftmul *****************
  8616 ;; Defined at:
  8617 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  f1              3   14[BANK0 ] float 
  8620 ;;  f2              3   17[BANK0 ] float 
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8623 ;;  sign            1   29[BANK0 ] unsigned char 
  8624 ;;  cntr            1   28[BANK0 ] unsigned char 
  8625 ;;  exp             1   24[BANK0 ] unsigned char 
  8626 ;; Return value:  Size  Location     Type
  8627 ;;                  3   14[BANK0 ] float 
  8628 ;; Registers used:
  8629 ;;		wreg, status,2, status,0, pclath, cstack
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8635 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8637 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8638 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8639 ;;Total ram usage:       16 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    6
  8642 ;; This function calls:
  8643 ;;		___ftpack
  8644 ;; This function is called by:
  8645 ;;		_getPercentValue
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           
  8650                           ;psect for function ___ftmul
  8651  0F4C                     ___ftmul:	
  8652                           
  8653                           ;incstack = 0
  8654                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8655  0F4C  0020               	movlb	0	; select bank0
  8656  0F4D  082E               	movf	___ftmul@f1,w
  8657  0F4E  00B4               	movwf	??___ftmul
  8658  0F4F  082F               	movf	___ftmul@f1+1,w
  8659  0F50  00B5               	movwf	??___ftmul+1
  8660  0F51  0830               	movf	___ftmul@f1+2,w
  8661  0F52  00B6               	movwf	??___ftmul+2
  8662  0F53  1003               	clrc
  8663  0F54  0D35               	rlf	??___ftmul+1,w
  8664  0F55  0D36               	rlf	??___ftmul+2,w
  8665  0F56  00B7               	movwf	??___ftmul+3
  8666  0F57  0837               	movf	??___ftmul+3,w
  8667  0F58  00B8               	movwf	___ftmul@exp
  8668  0F59  08B8               	movf	___ftmul@exp,f
  8669  0F5A  1D03               	skipz
  8670  0F5B  2F63               	goto	l6043
  8671  0F5C  3000               	movlw	0
  8672  0F5D  00AE               	movwf	?___ftmul
  8673  0F5E  3000               	movlw	0
  8674  0F5F  00AF               	movwf	?___ftmul+1
  8675  0F60  3000               	movlw	0
  8676  0F61  00B0               	movwf	?___ftmul+2
  8677  0F62  0008               	return
  8678  0F63                     l6043:	
  8679  0F63  0831               	movf	___ftmul@f2,w
  8680  0F64  00B4               	movwf	??___ftmul
  8681  0F65  0832               	movf	___ftmul@f2+1,w
  8682  0F66  00B5               	movwf	??___ftmul+1
  8683  0F67  0833               	movf	___ftmul@f2+2,w
  8684  0F68  00B6               	movwf	??___ftmul+2
  8685  0F69  1003               	clrc
  8686  0F6A  0D35               	rlf	??___ftmul+1,w
  8687  0F6B  0D36               	rlf	??___ftmul+2,w
  8688  0F6C  00B7               	movwf	??___ftmul+3
  8689  0F6D  0837               	movf	??___ftmul+3,w
  8690  0F6E  00BD               	movwf	___ftmul@sign
  8691  0F6F  08BD               	movf	___ftmul@sign,f
  8692  0F70  1D03               	skipz
  8693  0F71  2F79               	goto	l6049
  8694  0F72  3000               	movlw	0
  8695  0F73  00AE               	movwf	?___ftmul
  8696  0F74  3000               	movlw	0
  8697  0F75  00AF               	movwf	?___ftmul+1
  8698  0F76  3000               	movlw	0
  8699  0F77  00B0               	movwf	?___ftmul+2
  8700  0F78  0008               	return
  8701  0F79                     l6049:	
  8702  0F79  083D               	movf	___ftmul@sign,w
  8703  0F7A  3E7B               	addlw	123
  8704  0F7B  00B4               	movwf	??___ftmul
  8705  0F7C  0834               	movf	??___ftmul,w
  8706  0F7D  07B8               	addwf	___ftmul@exp,f
  8707  0F7E  082E               	movf	___ftmul@f1,w
  8708  0F7F  00B4               	movwf	??___ftmul
  8709  0F80  082F               	movf	___ftmul@f1+1,w
  8710  0F81  00B5               	movwf	??___ftmul+1
  8711  0F82  0830               	movf	___ftmul@f1+2,w
  8712  0F83  00B6               	movwf	??___ftmul+2
  8713  0F84  3010               	movlw	16
  8714  0F85                     u4815:	
  8715  0F85  36B6               	lsrf	??___ftmul+2,f
  8716  0F86  0CB5               	rrf	??___ftmul+1,f
  8717  0F87  0CB4               	rrf	??___ftmul,f
  8718  0F88  0B89               	decfsz	9,f
  8719  0F89  2F85               	goto	u4815
  8720  0F8A  0834               	movf	??___ftmul,w
  8721  0F8B  00B7               	movwf	??___ftmul+3
  8722  0F8C  0837               	movf	??___ftmul+3,w
  8723  0F8D  00BD               	movwf	___ftmul@sign
  8724  0F8E  0831               	movf	___ftmul@f2,w
  8725  0F8F  00B4               	movwf	??___ftmul
  8726  0F90  0832               	movf	___ftmul@f2+1,w
  8727  0F91  00B5               	movwf	??___ftmul+1
  8728  0F92  0833               	movf	___ftmul@f2+2,w
  8729  0F93  00B6               	movwf	??___ftmul+2
  8730  0F94  3010               	movlw	16
  8731  0F95                     u4825:	
  8732  0F95  36B6               	lsrf	??___ftmul+2,f
  8733  0F96  0CB5               	rrf	??___ftmul+1,f
  8734  0F97  0CB4               	rrf	??___ftmul,f
  8735  0F98  0B89               	decfsz	9,f
  8736  0F99  2F95               	goto	u4825
  8737  0F9A  0834               	movf	??___ftmul,w
  8738  0F9B  00B7               	movwf	??___ftmul+3
  8739  0F9C  0837               	movf	??___ftmul+3,w
  8740  0F9D  06BD               	xorwf	___ftmul@sign,f
  8741  0F9E  3080               	movlw	128
  8742  0F9F  00B4               	movwf	??___ftmul
  8743  0FA0  0834               	movf	??___ftmul,w
  8744  0FA1  05BD               	andwf	___ftmul@sign,f
  8745  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8746  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8747  0FA4  30FF               	movlw	255
  8748  0FA5  05B1               	andwf	___ftmul@f2,f
  8749  0FA6  30FF               	movlw	255
  8750  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8751  0FA8  3000               	movlw	0
  8752  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8753  0FAA  3000               	movlw	0
  8754  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8755  0FAC  3000               	movlw	0
  8756  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8757  0FAE  3000               	movlw	0
  8758  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8759  0FB0  3007               	movlw	7
  8760  0FB1  00B4               	movwf	??___ftmul
  8761  0FB2  0834               	movf	??___ftmul,w
  8762  0FB3  00BC               	movwf	___ftmul@cntr
  8763  0FB4                     l6061:	
  8764  0FB4  1C2E               	btfss	___ftmul@f1,0
  8765  0FB5  2FBC               	goto	l6065
  8766  0FB6  0831               	movf	___ftmul@f2,w
  8767  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8768  0FB8  0832               	movf	___ftmul@f2+1,w
  8769  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8770  0FBA  0833               	movf	___ftmul@f2+2,w
  8771  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8772  0FBC                     l6065:	
  8773  0FBC  3001               	movlw	1
  8774  0FBD                     u4845:	
  8775  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8776  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8777  0FBF  0CAE               	rrf	___ftmul@f1,f
  8778  0FC0  0B89               	decfsz	9,f
  8779  0FC1  2FBD               	goto	u4845
  8780  0FC2  3001               	movlw	1
  8781  0FC3                     u4855:	
  8782  0FC3  35B1               	lslf	___ftmul@f2,f
  8783  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8784  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8785  0FC6  0B89               	decfsz	9,f
  8786  0FC7  2FC3               	goto	u4855
  8787  0FC8  3001               	movlw	1
  8788  0FC9  02BC               	subwf	___ftmul@cntr,f
  8789  0FCA  1D03               	btfss	3,2
  8790  0FCB  2FB4               	goto	l6061
  8791  0FCC  3009               	movlw	9
  8792  0FCD  00B4               	movwf	??___ftmul
  8793  0FCE  0834               	movf	??___ftmul,w
  8794  0FCF  00BC               	movwf	___ftmul@cntr
  8795  0FD0                     l6073:	
  8796  0FD0  1C2E               	btfss	___ftmul@f1,0
  8797  0FD1  2FD8               	goto	l6077
  8798  0FD2  0831               	movf	___ftmul@f2,w
  8799  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8800  0FD4  0832               	movf	___ftmul@f2+1,w
  8801  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8802  0FD6  0833               	movf	___ftmul@f2+2,w
  8803  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8804  0FD8                     l6077:	
  8805  0FD8  3001               	movlw	1
  8806  0FD9                     u4885:	
  8807  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8808  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8809  0FDB  0CAE               	rrf	___ftmul@f1,f
  8810  0FDC  0B89               	decfsz	9,f
  8811  0FDD  2FD9               	goto	u4885
  8812  0FDE  3001               	movlw	1
  8813  0FDF                     u4895:	
  8814  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8815  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8816  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8817  0FE2  0B89               	decfsz	9,f
  8818  0FE3  2FDF               	goto	u4895
  8819  0FE4  3001               	movlw	1
  8820  0FE5  02BC               	subwf	___ftmul@cntr,f
  8821  0FE6  1D03               	btfss	3,2
  8822  0FE7  2FD0               	goto	l6073
  8823  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8824  0FE9  00A0               	movwf	___ftpack@arg
  8825  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8826  0FEB  00A1               	movwf	___ftpack@arg+1
  8827  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8828  0FED  00A2               	movwf	___ftpack@arg+2
  8829  0FEE  0838               	movf	___ftmul@exp,w
  8830  0FEF  00B4               	movwf	??___ftmul
  8831  0FF0  0834               	movf	??___ftmul,w
  8832  0FF1  00A3               	movwf	___ftpack@exp
  8833  0FF2  083D               	movf	___ftmul@sign,w
  8834  0FF3  00B5               	movwf	??___ftmul+1
  8835  0FF4  0835               	movf	??___ftmul+1,w
  8836  0FF5  00A4               	movwf	___ftpack@sign
  8837  0FF6  3189  210A         	fcall	___ftpack
  8838  0FF8  0020               	movlb	0	; select bank0
  8839  0FF9  0820               	movf	?___ftpack,w
  8840  0FFA  00AE               	movwf	?___ftmul
  8841  0FFB  0821               	movf	?___ftpack+1,w
  8842  0FFC  00AF               	movwf	?___ftmul+1
  8843  0FFD  0822               	movf	?___ftpack+2,w
  8844  0FFE  00B0               	movwf	?___ftmul+2
  8845  0FFF  0008               	return
  8846  1000                     __end_of___ftmul:	
  8847                           
  8848                           	psect	text36
  8849  1C6C                     __ptext36:	
  8850 ;; *************** function _setMemory_Modify *****************
  8851 ;; Defined at:
  8852 ;;		line 1065 in file "../src/MCU_B1.c"
  8853 ;; Parameters:    Size  Location     Type
  8854 ;;  command         1    wreg     unsigned char 
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;  command         1    1[BANK0 ] unsigned char 
  8857 ;; Return value:  Size  Location     Type
  8858 ;;		None               void
  8859 ;; Registers used:
  8860 ;;		wreg, status,2, status,0
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;Total ram usage:        2 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    5
  8873 ;; This function calls:
  8874 ;;		Nothing
  8875 ;; This function is called by:
  8876 ;;		_setLog_Code
  8877 ;;		_setRFSW_AdjControl
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           
  8882                           ;psect for function _setMemory_Modify
  8883  1C6C                     _setMemory_Modify:	
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8887                           ;setMemory_Modify@command stored from wreg
  8888  1C6C  0020               	movlb	0	; select bank0
  8889  1C6D  00A1               	movwf	setMemory_Modify@command
  8890                           
  8891                           ;MCU_B1.c: 1066: Memory.Modify = command == 1 ? 1 : 0;
  8892  1C6E  0821               	movf	setMemory_Modify@command,w
  8893  1C6F  3A01               	xorlw	1
  8894  1C70  3000               	movlw	0
  8895  1C71  1903               	skipnz
  8896  1C72  3001               	movlw	1
  8897  1C73  00A0               	movwf	??_setMemory_Modify
  8898  1C74  0024               	movlb	4	; select bank4
  8899  1C75  0844               	movf	(_Memory^(0+512)+36),w
  8900  1C76  0020               	movlb	0	; select bank0
  8901  1C77  0620               	xorwf	??_setMemory_Modify,w
  8902  1C78  39FE               	andlw	-2
  8903  1C79  0620               	xorwf	??_setMemory_Modify,w
  8904  1C7A  0024               	movlb	4	; select bank4
  8905  1C7B  00C4               	movwf	(_Memory^(0+512)+36)
  8906                           
  8907                           ;MCU_B1.c: 1067: Memory.Time = 0;
  8908  1C7C  01C2               	clrf	(_Memory^(0+512)+34)
  8909  1C7D  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8910  1C7E  0008               	return
  8911  1C7F                     __end_of_setMemory_Modify:	
  8912                           
  8913                           	psect	text37
  8914  1BED                     __ptext37:	
  8915 ;; *************** function _getRF_KeyStatus *****************
  8916 ;; Defined at:
  8917 ;;		line 191 in file "../src/RF_Control_B1.c"
  8918 ;; Parameters:    Size  Location     Type
  8919 ;;		None
  8920 ;; Auto vars:     Size  Location     Type
  8921 ;;  key             1    1[BANK0 ] unsigned char 
  8922 ;; Return value:  Size  Location     Type
  8923 ;;                  1    wreg      unsigned char 
  8924 ;; Registers used:
  8925 ;;		wreg, status,2
  8926 ;; Tracked objects:
  8927 ;;		On entry : 0/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;Total ram usage:        3 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; Hardware stack levels required when called:    5
  8938 ;; This function calls:
  8939 ;;		Nothing
  8940 ;; This function is called by:
  8941 ;;		_setRF_Main
  8942 ;; This function uses a non-reentrant model
  8943 ;;
  8944                           
  8945                           
  8946                           ;psect for function _getRF_KeyStatus
  8947  1BED                     _getRF_KeyStatus:	
  8948                           
  8949                           ;RF_Control_B1.c: 192: char key = 0;
  8950                           
  8951                           ;incstack = 0
  8952                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8953  1BED  0020               	movlb	0	; select bank0
  8954  1BEE  01A1               	clrf	getRF_KeyStatus@key
  8955                           
  8956                           ;RF_Control_B1.c: 198: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8957  1BEF  01A2               	clrf	_getRF_KeyStatus$4796
  8958  1BF0  0AA2               	incf	_getRF_KeyStatus$4796,f
  8959  1BF1  1F0C               	btfss	12,6	;volatile
  8960  1BF2  1A0C               	btfsc	12,4	;volatile
  8961  1BF3  2BF8               	goto	l7097
  8962  1BF4  1C0C               	btfss	12,0	;volatile
  8963  1BF5  188D               	btfsc	13,1	;volatile
  8964  1BF6  2BF8               	goto	l7097
  8965  1BF7  01A2               	clrf	_getRF_KeyStatus$4796
  8966  1BF8                     l7097:	
  8967  1BF8  0822               	movf	_getRF_KeyStatus$4796,w
  8968  1BF9  00A0               	movwf	??_getRF_KeyStatus
  8969  1BFA  0820               	movf	??_getRF_KeyStatus,w
  8970  1BFB  00A1               	movwf	getRF_KeyStatus@key
  8971                           
  8972                           ;RF_Control_B1.c: 204: return key;
  8973  1BFC  0821               	movf	getRF_KeyStatus@key,w
  8974  1BFD  0008               	return
  8975  1BFE                     __end_of_getRF_KeyStatus:	
  8976                           
  8977                           	psect	text38
  8978  1BDC                     __ptext38:	
  8979 ;; *************** function _getBuz_GO *****************
  8980 ;; Defined at:
  8981 ;;		line 82 in file "../src/Buzzer_B1.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;		None
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;  i               2    4[BANK0 ] int 
  8986 ;; Return value:  Size  Location     Type
  8987 ;;                  2    0[BANK0 ] int 
  8988 ;; Registers used:
  8989 ;;		wreg, status,2, status,0
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/0
  8992 ;;		On exit  : 0/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8995 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8996 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8997 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8998 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;Total ram usage:        6 bytes
  9000 ;; Hardware stack levels used:    1
  9001 ;; Hardware stack levels required when called:    5
  9002 ;; This function calls:
  9003 ;;		Nothing
  9004 ;; This function is called by:
  9005 ;;		_setRF_Main
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           
  9010                           ;psect for function _getBuz_GO
  9011  1BDC                     _getBuz_GO:	
  9012                           
  9013                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9014                           
  9015                           ;incstack = 0
  9016                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9017  1BDC  0021               	movlb	1	; select bank1
  9018  1BDD  0C2E               	rrf	_Buz1^(0+128),w
  9019  1BDE  3901               	andlw	1
  9020  1BDF  0020               	movlb	0	; select bank0
  9021  1BE0  00A2               	movwf	??_getBuz_GO
  9022  1BE1  01A3               	clrf	??_getBuz_GO+1
  9023  1BE2  0822               	movf	??_getBuz_GO,w
  9024  1BE3  00A4               	movwf	getBuz_GO@i
  9025  1BE4  0823               	movf	??_getBuz_GO+1,w
  9026  1BE5  00A5               	movwf	getBuz_GO@i+1
  9027                           
  9028                           ;Buzzer_B1.c: 84: return i;
  9029  1BE6  0825               	movf	getBuz_GO@i+1,w
  9030  1BE7  01A1               	clrf	?_getBuz_GO+1
  9031  1BE8  07A1               	addwf	?_getBuz_GO+1,f
  9032  1BE9  0824               	movf	getBuz_GO@i,w
  9033  1BEA  01A0               	clrf	?_getBuz_GO
  9034  1BEB  07A0               	addwf	?_getBuz_GO,f
  9035  1BEC  0008               	return
  9036  1BED                     __end_of_getBuz_GO:	
  9037                           
  9038                           	psect	text39
  9039  1B9B                     __ptext39:	
  9040 ;; *************** function _RF_RxDisable *****************
  9041 ;; Defined at:
  9042 ;;		line 266 in file "../src/RF_Control_B1.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;		None
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;		None
  9047 ;; Return value:  Size  Location     Type
  9048 ;;		None               void
  9049 ;; Registers used:
  9050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;Total ram usage:        0 bytes
  9061 ;; Hardware stack levels used:    1
  9062 ;; Hardware stack levels required when called:    7
  9063 ;; This function calls:
  9064 ;;		_CC2500_WriteCommand
  9065 ;; This function is called by:
  9066 ;;		_setRF_Main
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           
  9071                           ;psect for function _RF_RxDisable
  9072  1B9B                     _RF_RxDisable:	
  9073                           
  9074                           ;RF_Control_B1.c: 267: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  9075                           
  9076                           ;incstack = 0
  9077                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9078  1B9B  0021               	movlb	1	; select bank1
  9079  1B9C  18BA               	btfsc	_RF1^(0+128),1
  9080  1B9D  2BA0               	goto	l2015
  9081  1B9E  1DBA               	btfss	_RF1^(0+128),3
  9082  1B9F  0008               	return
  9083  1BA0                     l2015:	
  9084                           
  9085                           ;RF_Control_B1.c: 268: RF1.RxStatus = 0;
  9086  1BA0  11BA               	bcf	_RF1^(0+128),3
  9087                           
  9088                           ;RF_Control_B1.c: 269: RF1.ReceiveGO = 0;
  9089  1BA1  10BA               	bcf	_RF1^(0+128),1
  9090                           
  9091                           ;RF_Control_B1.c: 270: CC2500_WriteCommand(0x36);
  9092  1BA2  3036               	movlw	54
  9093  1BA3  319D  25A3  319B   	fcall	_CC2500_WriteCommand
  9094                           
  9095                           ;RF_Control_B1.c: 272: CC2500_WriteCommand(0x3A);
  9096  1BA6  303A               	movlw	58
  9097  1BA7  319D  25A3         	fcall	_CC2500_WriteCommand
  9098  1BA9  0008               	return
  9099  1BAA                     __end_of_RF_RxDisable:	
  9100                           
  9101                           	psect	text40
  9102  096B                     __ptext40:	
  9103 ;; *************** function _CC2500_TxData *****************
  9104 ;; Defined at:
  9105 ;;		line 32 in file "../src/CC2500_B1.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;		None
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9110 ;; Return value:  Size  Location     Type
  9111 ;;		None               void
  9112 ;; Registers used:
  9113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9123 ;;Total ram usage:        2 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    7
  9126 ;; This function calls:
  9127 ;;		_CC2500_WriteByte
  9128 ;;		_CC2500_WriteCommand
  9129 ;;		_Timeout_Counter
  9130 ;;		_set_TimeoutCleared
  9131 ;; This function is called by:
  9132 ;;		_setRF_Main
  9133 ;; This function uses a non-reentrant model
  9134 ;;
  9135                           
  9136                           
  9137                           ;psect for function _CC2500_TxData
  9138  096B                     _CC2500_TxData:	
  9139                           
  9140                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9141                           ;CC2500_B1.c: 35: RC4 = 0;
  9142                           
  9143                           ;incstack = 0
  9144                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9145  096B  0020               	movlb	0	; select bank0
  9146  096C  120E               	bcf	14,4	;volatile
  9147                           
  9148                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9149  096D  307F               	movlw	127
  9150  096E  00A4               	movwf	??_CC2500_TxData
  9151  096F  0824               	movf	??_CC2500_TxData,w
  9152  0970  00FB               	movwf	_SPI0Buffer
  9153                           
  9154                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9155  0971  2975               	goto	l6747
  9156  0972                     l6745:	
  9157                           
  9158                           ;CC2500_B1.c: 38: Timeout_Counter();
  9159  0972  319D  250A  3189   	fcall	_Timeout_Counter
  9160  0975                     l6747:	
  9161  0975  0020               	movlb	0	; select bank0
  9162  0976  1D0E               	btfss	14,2	;volatile
  9163  0977  297B               	goto	l6751
  9164  0978  0021               	movlb	1	; select bank1
  9165  0979  1D2B               	btfss	(_myMain^(0+128)+11),2
  9166  097A  2972               	goto	l6745
  9167  097B                     l6751:	
  9168                           
  9169                           ;CC2500_B1.c: 39: };
  9170                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9171  097B  319A  22A2  3189   	fcall	_set_TimeoutCleared
  9172                           
  9173                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9174  097E  319C  24A6  3189   	fcall	_CC2500_WriteByte
  9175                           
  9176                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9177  0981  0021               	movlb	1	; select bank1
  9178  0982  0852               	movf	_Tx_Length^(0+128),w
  9179  0983  0020               	movlb	0	; select bank0
  9180  0984  00A4               	movwf	??_CC2500_TxData
  9181  0985  0824               	movf	??_CC2500_TxData,w
  9182  0986  00FB               	movwf	_SPI0Buffer
  9183                           
  9184                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9185  0987  319C  24A6  3189   	fcall	_CC2500_WriteByte
  9186                           
  9187                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9188  098A  0020               	movlb	0	; select bank0
  9189  098B  01A5               	clrf	CC2500_TxData@loop_e
  9190  098C                     l6765:	
  9191  098C  0021               	movlb	1	; select bank1
  9192  098D  0852               	movf	_Tx_Length^(0+128),w
  9193  098E  0020               	movlb	0	; select bank0
  9194  098F  0225               	subwf	CC2500_TxData@loop_e,w
  9195  0990  1803               	btfsc	3,0
  9196  0991  29A4               	goto	l255
  9197                           
  9198                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9199  0992  0825               	movf	CC2500_TxData@loop_e,w
  9200  0993  3EA0               	addlw	_RF_Data& (0+255)
  9201  0994  0086               	movwf	6
  9202  0995  3001               	movlw	1	; select bank3/4
  9203  0996  0087               	movwf	7
  9204  0997  0801               	movf	1,w
  9205  0998  00A4               	movwf	??_CC2500_TxData
  9206  0999  0824               	movf	??_CC2500_TxData,w
  9207  099A  00FB               	movwf	_SPI0Buffer
  9208                           
  9209                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9210  099B  319C  24A6  3189   	fcall	_CC2500_WriteByte
  9211  099E  3001               	movlw	1
  9212  099F  0020               	movlb	0	; select bank0
  9213  09A0  00A4               	movwf	??_CC2500_TxData
  9214  09A1  0824               	movf	??_CC2500_TxData,w
  9215  09A2  07A5               	addwf	CC2500_TxData@loop_e,f
  9216  09A3  298C               	goto	l6765
  9217  09A4                     l255:	
  9218                           
  9219                           ;CC2500_B1.c: 48: }
  9220                           ;CC2500_B1.c: 49: RC4 = 1;
  9221  09A4  160E               	bsf	14,4	;volatile
  9222                           
  9223                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9224  09A5  3035               	movlw	53
  9225  09A6  319D  25A3  3189   	fcall	_CC2500_WriteCommand
  9226                           
  9227                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9228  09A9  29AD               	goto	l6771
  9229  09AA                     l6769:	
  9230                           
  9231                           ;CC2500_B1.c: 52: Timeout_Counter();
  9232  09AA  319D  250A  3189   	fcall	_Timeout_Counter
  9233  09AD                     l6771:	
  9234  09AD  0020               	movlb	0	; select bank0
  9235  09AE  180D               	btfsc	13,0	;volatile
  9236  09AF  29B3               	goto	l6775
  9237  09B0  0021               	movlb	1	; select bank1
  9238  09B1  1D2B               	btfss	(_myMain^(0+128)+11),2
  9239  09B2  29AA               	goto	l6769
  9240  09B3                     l6775:	
  9241                           
  9242                           ;CC2500_B1.c: 53: };
  9243                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9244  09B3  319A  22A2  3189   	fcall	_set_TimeoutCleared
  9245                           
  9246                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9247  09B6  29BA               	goto	l6779
  9248  09B7                     l6777:	
  9249                           
  9250                           ;CC2500_B1.c: 57: Timeout_Counter();
  9251  09B7  319D  250A  3189   	fcall	_Timeout_Counter
  9252  09BA                     l6779:	
  9253  09BA  0020               	movlb	0	; select bank0
  9254  09BB  1C0D               	btfss	13,0	;volatile
  9255  09BC  29C0               	goto	l6783
  9256  09BD  0021               	movlb	1	; select bank1
  9257  09BE  1D2B               	btfss	(_myMain^(0+128)+11),2
  9258  09BF  29B7               	goto	l6777
  9259  09C0                     l6783:	
  9260                           
  9261                           ;CC2500_B1.c: 58: };
  9262                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9263  09C0  319A  22A2  3189   	fcall	_set_TimeoutCleared
  9264                           
  9265                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9266  09C3  3036               	movlw	54
  9267  09C4  319D  25A3  3189   	fcall	_CC2500_WriteCommand
  9268                           
  9269                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9270  09C7  303B               	movlw	59
  9271  09C8  319D  25A3         	fcall	_CC2500_WriteCommand
  9272                           
  9273                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9274  09CA  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9275  09CB  0008               	return
  9276  09CC                     __end_of_CC2500_TxData:	
  9277                           
  9278                           	psect	text41
  9279  0B64                     __ptext41:	
  9280 ;; *************** function _CC2500_RxData *****************
  9281 ;; Defined at:
  9282 ;;		line 70 in file "../src/CC2500_B1.c"
  9283 ;; Parameters:    Size  Location     Type
  9284 ;;		None
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9287 ;; Return value:  Size  Location     Type
  9288 ;;		None               void
  9289 ;; Registers used:
  9290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;Total ram usage:        2 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    7
  9303 ;; This function calls:
  9304 ;;		_CC2500_ReadByte
  9305 ;;		_CC2500_ReadStatus
  9306 ;;		_CC2500_WriteByte
  9307 ;;		_Timeout_Counter
  9308 ;;		_set_TimeoutCleared
  9309 ;; This function is called by:
  9310 ;;		_setRF_Main
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           
  9315                           ;psect for function _CC2500_RxData
  9316  0B64                     _CC2500_RxData:	
  9317                           
  9318                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9319                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9320                           
  9321                           ;incstack = 0
  9322                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9323  0B64  0020               	movlb	0	; select bank0
  9324  0B65  180D               	btfsc	13,0	;volatile
  9325  0B66  2B6B               	goto	l6797
  9326  0B67  2B74               	goto	l6803
  9327  0B68                     l6795:	
  9328                           ;CC2500_B1.c: 76: {
  9329                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9330                           
  9331                           
  9332                           ;CC2500_B1.c: 78: Timeout_Counter();
  9333  0B68  319D  250A  318B   	fcall	_Timeout_Counter
  9334  0B6B                     l6797:	
  9335  0B6B  0020               	movlb	0	; select bank0
  9336  0B6C  1C0D               	btfss	13,0	;volatile
  9337  0B6D  2B71               	goto	l6801
  9338  0B6E  0021               	movlb	1	; select bank1
  9339  0B6F  1D2B               	btfss	(_myMain^(0+128)+11),2
  9340  0B70  2B68               	goto	l6795
  9341  0B71                     l6801:	
  9342                           
  9343                           ;CC2500_B1.c: 79: };
  9344                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9345  0B71  319A  22A2  318B   	fcall	_set_TimeoutCleared
  9346  0B74                     l6803:	
  9347                           
  9348                           ;CC2500_B1.c: 81: }
  9349                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9350  0B74  303B               	movlw	59
  9351  0B75  319F  2720  318B   	fcall	_CC2500_ReadStatus
  9352                           
  9353                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9354  0B78  0021               	movlb	1	; select bank1
  9355  0B79  0855               	movf	_s_data^(0+128),w
  9356  0B7A  1903               	btfsc	3,2
  9357  0B7B  0008               	return
  9358                           
  9359                           ;CC2500_B1.c: 86: RC4 = 0;
  9360  0B7C  0020               	movlb	0	; select bank0
  9361  0B7D  120E               	bcf	14,4	;volatile
  9362                           
  9363                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9364  0B7E  30FF               	movlw	255
  9365  0B7F  00A4               	movwf	??_CC2500_RxData
  9366  0B80  0824               	movf	??_CC2500_RxData,w
  9367  0B81  00FB               	movwf	_SPI0Buffer
  9368                           
  9369                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9370  0B82  2B86               	goto	l6813
  9371  0B83                     l6811:	
  9372                           
  9373                           ;CC2500_B1.c: 89: Timeout_Counter();
  9374  0B83  319D  250A  318B   	fcall	_Timeout_Counter
  9375  0B86                     l6813:	
  9376  0B86  0020               	movlb	0	; select bank0
  9377  0B87  1D0E               	btfss	14,2	;volatile
  9378  0B88  2B8C               	goto	l6817
  9379  0B89  0021               	movlb	1	; select bank1
  9380  0B8A  1D2B               	btfss	(_myMain^(0+128)+11),2
  9381  0B8B  2B83               	goto	l6811
  9382  0B8C                     l6817:	
  9383                           
  9384                           ;CC2500_B1.c: 90: };
  9385                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9386  0B8C  319A  22A2  318B   	fcall	_set_TimeoutCleared
  9387                           
  9388                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9389  0B8F  319C  24A6  318B   	fcall	_CC2500_WriteByte
  9390                           
  9391                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9392  0B92  319D  258C  318B   	fcall	_CC2500_ReadByte
  9393                           
  9394                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9395  0B95  087B               	movf	_SPI0Buffer,w
  9396  0B96  0020               	movlb	0	; select bank0
  9397  0B97  00A4               	movwf	??_CC2500_RxData
  9398  0B98  0824               	movf	??_CC2500_RxData,w
  9399  0B99  0021               	movlb	1	; select bank1
  9400  0B9A  00D0               	movwf	_Rx_Length^(0+128)
  9401                           
  9402                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9403  0B9B  0020               	movlb	0	; select bank0
  9404  0B9C  01A5               	clrf	CC2500_RxData@loop_f
  9405  0B9D                     l6833:	
  9406  0B9D  0021               	movlb	1	; select bank1
  9407  0B9E  0850               	movf	_Rx_Length^(0+128),w
  9408  0B9F  0020               	movlb	0	; select bank0
  9409  0BA0  0225               	subwf	CC2500_RxData@loop_f,w
  9410  0BA1  1803               	btfsc	3,0
  9411  0BA2  2BB5               	goto	l6835
  9412                           
  9413                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9414  0BA3  319D  258C  318B   	fcall	_CC2500_ReadByte
  9415                           
  9416                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9417  0BA6  087B               	movf	_SPI0Buffer,w
  9418  0BA7  0020               	movlb	0	; select bank0
  9419  0BA8  00A4               	movwf	??_CC2500_RxData
  9420  0BA9  0825               	movf	CC2500_RxData@loop_f,w
  9421  0BAA  3EA0               	addlw	_RF_Data& (0+255)
  9422  0BAB  0086               	movwf	6
  9423  0BAC  3001               	movlw	1	; select bank3/4
  9424  0BAD  0087               	movwf	7
  9425  0BAE  0824               	movf	??_CC2500_RxData,w
  9426  0BAF  0081               	movwf	1
  9427  0BB0  3001               	movlw	1
  9428  0BB1  00A4               	movwf	??_CC2500_RxData
  9429  0BB2  0824               	movf	??_CC2500_RxData,w
  9430  0BB3  07A5               	addwf	CC2500_RxData@loop_f,f
  9431  0BB4  2B9D               	goto	l6833
  9432  0BB5                     l6835:	
  9433                           
  9434                           ;CC2500_B1.c: 99: }
  9435                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9436  0BB5  319D  258C  318B   	fcall	_CC2500_ReadByte
  9437                           
  9438                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9439  0BB8  087B               	movf	_SPI0Buffer,w
  9440  0BB9  0020               	movlb	0	; select bank0
  9441  0BBA  00A4               	movwf	??_CC2500_RxData
  9442  0BBB  0824               	movf	??_CC2500_RxData,w
  9443  0BBC  0021               	movlb	1	; select bank1
  9444  0BBD  00CF               	movwf	_RSSI^(0+128)
  9445                           
  9446                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9447  0BBE  319D  258C         	fcall	_CC2500_ReadByte
  9448                           
  9449                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9450  0BC0  087B               	movf	_SPI0Buffer,w
  9451  0BC1  0020               	movlb	0	; select bank0
  9452  0BC2  00A4               	movwf	??_CC2500_RxData
  9453  0BC3  0824               	movf	??_CC2500_RxData,w
  9454  0BC4  0021               	movlb	1	; select bank1
  9455  0BC5  00CB               	movwf	_CRC^(0+128)
  9456                           
  9457                           ;CC2500_B1.c: 104: RC4 = 1;
  9458  0BC6  0020               	movlb	0	; select bank0
  9459  0BC7  160E               	bsf	14,4	;volatile
  9460                           
  9461                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9462  0BC8  0021               	movlb	1	; select bank1
  9463  0BC9  1BCB               	btfsc	_CRC^(0+128),7
  9464                           
  9465                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9466  0BCA  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9467                           
  9468                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9469  0BCB  11BA               	bcf	_RF1^(0+128),3
  9470                           
  9471                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9472  0BCC  14BA               	bsf	_RF1^(0+128),1
  9473  0BCD  0008               	return
  9474  0BCE                     __end_of_CC2500_RxData:	
  9475                           
  9476                           	psect	text42
  9477  1F20                     __ptext42:	
  9478 ;; *************** function _CC2500_ReadStatus *****************
  9479 ;; Defined at:
  9480 ;;		line 301 in file "../src/CC2500_B1.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;  status_addr     1    wreg     unsigned char 
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9485 ;; Return value:  Size  Location     Type
  9486 ;;		None               void
  9487 ;; Registers used:
  9488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;Total ram usage:        2 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    6
  9501 ;; This function calls:
  9502 ;;		_CC2500_ReadByte
  9503 ;;		_CC2500_WriteByte
  9504 ;;		_Timeout_Counter
  9505 ;;		_set_TimeoutCleared
  9506 ;; This function is called by:
  9507 ;;		_CC2500_RxData
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           
  9512                           ;psect for function _CC2500_ReadStatus
  9513  1F20                     _CC2500_ReadStatus:	
  9514                           
  9515                           ;incstack = 0
  9516                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9517                           ;CC2500_ReadStatus@status_addr stored from wreg
  9518  1F20  0020               	movlb	0	; select bank0
  9519  1F21  00A3               	movwf	CC2500_ReadStatus@status_addr
  9520                           
  9521                           ;CC2500_B1.c: 302: RC4 = 0;
  9522  1F22  120E               	bcf	14,4	;volatile
  9523                           
  9524                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9525  1F23  0823               	movf	CC2500_ReadStatus@status_addr,w
  9526  1F24  3EC0               	addlw	192
  9527  1F25  00A2               	movwf	??_CC2500_ReadStatus
  9528  1F26  0822               	movf	??_CC2500_ReadStatus,w
  9529  1F27  00FB               	movwf	_SPI0Buffer
  9530                           
  9531                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9532  1F28  2F2C               	goto	l6577
  9533  1F29                     l6575:	
  9534                           
  9535                           ;CC2500_B1.c: 306: Timeout_Counter();
  9536  1F29  319D  250A  319F   	fcall	_Timeout_Counter
  9537  1F2C                     l6577:	
  9538  1F2C  0020               	movlb	0	; select bank0
  9539  1F2D  1D0E               	btfss	14,2	;volatile
  9540  1F2E  2F32               	goto	l6581
  9541  1F2F  0021               	movlb	1	; select bank1
  9542  1F30  1D2B               	btfss	(_myMain^(0+128)+11),2
  9543  1F31  2F29               	goto	l6575
  9544  1F32                     l6581:	
  9545                           
  9546                           ;CC2500_B1.c: 307: };
  9547                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9548  1F32  319A  22A2  319F   	fcall	_set_TimeoutCleared
  9549                           
  9550                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9551  1F35  319C  24A6  319F   	fcall	_CC2500_WriteByte
  9552                           
  9553                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9554  1F38  319D  258C         	fcall	_CC2500_ReadByte
  9555                           
  9556                           ;CC2500_B1.c: 312: RC4 = 1;
  9557  1F3A  0020               	movlb	0	; select bank0
  9558  1F3B  160E               	bsf	14,4	;volatile
  9559                           
  9560                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9561  1F3C  087B               	movf	_SPI0Buffer,w
  9562  1F3D  00A2               	movwf	??_CC2500_ReadStatus
  9563  1F3E  0822               	movf	??_CC2500_ReadStatus,w
  9564  1F3F  0021               	movlb	1	; select bank1
  9565  1F40  00D5               	movwf	_s_data^(0+128)
  9566  1F41  0008               	return
  9567  1F42                     __end_of_CC2500_ReadStatus:	
  9568                           
  9569                           	psect	text43
  9570  1D8C                     __ptext43:	
  9571 ;; *************** function _CC2500_ReadByte *****************
  9572 ;; Defined at:
  9573 ;;		line 235 in file "../src/CC2500_B1.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;		None
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;		None               void
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;Total ram usage:        2 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    5
  9594 ;; This function calls:
  9595 ;;		Nothing
  9596 ;; This function is called by:
  9597 ;;		_CC2500_RxData
  9598 ;;		_CC2500_ReadStatus
  9599 ;;		_CC2500_ReadREG
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603                           
  9604                           ;psect for function _CC2500_ReadByte
  9605  1D8C                     _CC2500_ReadByte:	
  9606                           
  9607                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9608                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9609                           
  9610                           ;incstack = 0
  9611                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9612  1D8C  0020               	movlb	0	; select bank0
  9613  1D8D  01A1               	clrf	CC2500_ReadByte@loop_b
  9614  1D8E                     L6:	
  9615  1D8E  3008               	movlw	8
  9616  1D8F  0221               	subwf	CC2500_ReadByte@loop_b,w
  9617  1D90  1803               	btfsc	3,0
  9618  1D91  0008               	return
  9619                           
  9620                           ;CC2500_B1.c: 238: RC1 = 1;
  9621  1D92  148E               	bsf	14,1	;volatile
  9622                           
  9623                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9624  1D93  1003               	clrc
  9625  1D94  0DFB               	rlf	_SPI0Buffer,f
  9626                           
  9627                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9628  1D95  1D0E               	btfss	14,2	;volatile
  9629  1D96  2D99               	goto	l6477
  9630                           
  9631                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9632  1D97  147B               	bsf	_SPI0Buffer,0
  9633  1D98  2D9D               	goto	l6479
  9634  1D99                     l6477:	
  9635                           
  9636                           ;CC2500_B1.c: 242: else
  9637                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9638  1D99  30FE               	movlw	254
  9639  1D9A  00A0               	movwf	??_CC2500_ReadByte
  9640  1D9B  0820               	movf	??_CC2500_ReadByte,w
  9641  1D9C  05FB               	andwf	_SPI0Buffer,f
  9642  1D9D                     l6479:	
  9643                           
  9644                           ;CC2500_B1.c: 244: RC1 = 0;
  9645  1D9D  108E               	bcf	14,1	;volatile
  9646  1D9E  3001               	movlw	1
  9647  1D9F  00A0               	movwf	??_CC2500_ReadByte
  9648  1DA0  0820               	movf	??_CC2500_ReadByte,w
  9649  1DA1  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9650  1DA2  2D8E               	goto	L6
  9651  1DA3                     __end_of_CC2500_ReadByte:	
  9652                           
  9653                           	psect	text44
  9654  1A86                     __ptext44:	
  9655 ;; *************** function _RF_Initialization *****************
  9656 ;; Defined at:
  9657 ;;		line 9 in file "../src/RF_Control_B1.c"
  9658 ;; Parameters:    Size  Location     Type
  9659 ;;		None
  9660 ;; Auto vars:     Size  Location     Type
  9661 ;;		None
  9662 ;; Return value:  Size  Location     Type
  9663 ;;		None               void
  9664 ;; Registers used:
  9665 ;;		wreg, status,2, status,0, pclath, cstack
  9666 ;; Tracked objects:
  9667 ;;		On entry : 0/0
  9668 ;;		On exit  : 0/0
  9669 ;;		Unchanged: 0/0
  9670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;Total ram usage:        0 bytes
  9676 ;; Hardware stack levels used:    1
  9677 ;; Hardware stack levels required when called:    6
  9678 ;; This function calls:
  9679 ;;		_setRF_Initialization
  9680 ;; This function is called by:
  9681 ;;		_main
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           
  9686                           ;psect for function _RF_Initialization
  9687  1A86                     _RF_Initialization:	
  9688                           
  9689                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9690                           
  9691                           ;incstack = 0
  9692                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9693  1A86  319B  2312         	fcall	_setRF_Initialization
  9694  1A88  0008               	return
  9695  1A89                     __end_of_RF_Initialization:	
  9696                           
  9697                           	psect	text45
  9698  1B12                     __ptext45:	
  9699 ;; *************** function _setRF_Initialization *****************
  9700 ;; Defined at:
  9701 ;;		line 43 in file "../src/RF_Control_B1.c"
  9702 ;; Parameters:    Size  Location     Type
  9703 ;;		None
  9704 ;; Auto vars:     Size  Location     Type
  9705 ;;		None
  9706 ;; Return value:  Size  Location     Type
  9707 ;;		None               void
  9708 ;; Registers used:
  9709 ;;		wreg
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;Total ram usage:        1 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    5
  9722 ;; This function calls:
  9723 ;;		Nothing
  9724 ;; This function is called by:
  9725 ;;		_RF_Initialization
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           
  9730                           ;psect for function _setRF_Initialization
  9731  1B12                     _setRF_Initialization:	
  9732                           
  9733                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9734                           
  9735                           ;incstack = 0
  9736                           ; Regs used in _setRF_Initialization: [wreg]
  9737  1B12  3015               	movlw	21
  9738  1B13  0020               	movlb	0	; select bank0
  9739  1B14  00A0               	movwf	??_setRF_Initialization
  9740  1B15  0820               	movf	??_setRF_Initialization,w
  9741  1B16  0021               	movlb	1	; select bank1
  9742  1B17  00D2               	movwf	_Tx_Length^(0+128)
  9743                           
  9744                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9745  1B18  300A               	movlw	10
  9746  1B19  00C1               	movwf	(_RF1^(0+128)+7)
  9747  1B1A  3000               	movlw	0
  9748  1B1B  00C2               	movwf	(_RF1^(0+128)+8)
  9749  1B1C  0008               	return
  9750  1B1D                     __end_of_setRF_Initialization:	
  9751                           
  9752                           	psect	text46
  9753  1C22                     __ptext46:	
  9754 ;; *************** function _Mcu_Initialization *****************
  9755 ;; Defined at:
  9756 ;;		line 30 in file "../src/MCU_B1.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;		None
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;		None
  9761 ;; Return value:  Size  Location     Type
  9762 ;;		None               void
  9763 ;; Registers used:
  9764 ;;		wreg, status,2, status,0, pclath, cstack
  9765 ;; Tracked objects:
  9766 ;;		On entry : 0/0
  9767 ;;		On exit  : 0/0
  9768 ;;		Unchanged: 0/0
  9769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;Total ram usage:        0 bytes
  9775 ;; Hardware stack levels used:    1
  9776 ;; Hardware stack levels required when called:    6
  9777 ;; This function calls:
  9778 ;;		_ADC_Set
  9779 ;;		_Fosc_Set
  9780 ;;		_IOC_Set
  9781 ;;		_IO_Set
  9782 ;;		_TMR1_Set
  9783 ;;		_WDT_Set
  9784 ;; This function is called by:
  9785 ;;		_main
  9786 ;; This function uses a non-reentrant model
  9787 ;;
  9788                           
  9789                           
  9790                           ;psect for function _Mcu_Initialization
  9791  1C22                     _Mcu_Initialization:	
  9792                           
  9793                           ;MCU_B1.c: 32: Fosc_Set();
  9794                           
  9795                           ;incstack = 0
  9796                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9797  1C22  319A  229E  319C   	fcall	_Fosc_Set
  9798                           
  9799                           ;MCU_B1.c: 34: IO_Set();
  9800  1C25  319D  25BC  319C   	fcall	_IO_Set
  9801                           
  9802                           ;MCU_B1.c: 36: ;;
  9803                           ;MCU_B1.c: 38: TMR1_Set();
  9804  1C28  319B  2365  319C   	fcall	_TMR1_Set
  9805                           
  9806                           ;MCU_B1.c: 40: ADC_Set();
  9807  1C2B  319A  22BE  319C   	fcall	_ADC_Set
  9808                           
  9809                           ;MCU_B1.c: 42: ;;
  9810                           ;MCU_B1.c: 44: ;;
  9811                           ;MCU_B1.c: 46: IOC_Set();
  9812  1C2E  319B  2359  319C   	fcall	_IOC_Set
  9813                           
  9814                           ;MCU_B1.c: 48: ;;
  9815                           ;MCU_B1.c: 50: ;;
  9816                           ;MCU_B1.c: 52: WDT_Set();
  9817  1C31  319B  2307         	fcall	_WDT_Set
  9818  1C33  0008               	return
  9819  1C34                     __end_of_Mcu_Initialization:	
  9820                           
  9821                           	psect	text47
  9822  1B07                     __ptext47:	
  9823 ;; *************** function _WDT_Set *****************
  9824 ;; Defined at:
  9825 ;;		line 1084 in file "../src/MCU_B1.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;		None
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;		None
  9830 ;; Return value:  Size  Location     Type
  9831 ;;		None               void
  9832 ;; Registers used:
  9833 ;;		wreg
  9834 ;; Tracked objects:
  9835 ;;		On entry : 0/0
  9836 ;;		On exit  : 0/0
  9837 ;;		Unchanged: 0/0
  9838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;Total ram usage:        1 bytes
  9844 ;; Hardware stack levels used:    1
  9845 ;; Hardware stack levels required when called:    5
  9846 ;; This function calls:
  9847 ;;		Nothing
  9848 ;; This function is called by:
  9849 ;;		_Mcu_Initialization
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           
  9854                           ;psect for function _WDT_Set
  9855  1B07                     _WDT_Set:	
  9856                           
  9857                           ;MCU_B1.c: 1091: WDTCON = 0b00010111;;
  9858                           
  9859                           ;incstack = 0
  9860                           ; Regs used in _WDT_Set: [wreg]
  9861  1B07  3017               	movlw	23
  9862  1B08  0021               	movlb	1	; select bank1
  9863  1B09  0097               	movwf	23	;volatile
  9864                           
  9865                           ;MCU_B1.c: 1093: WDT.Enable = 1;
  9866  1B0A  1449               	bsf	_WDT^(0+128),0
  9867                           
  9868                           ;MCU_B1.c: 1094: WDT.Timer = 10;
  9869  1B0B  300A               	movlw	10
  9870  1B0C  0020               	movlb	0	; select bank0
  9871  1B0D  00A0               	movwf	??_WDT_Set
  9872  1B0E  0820               	movf	??_WDT_Set,w
  9873  1B0F  0021               	movlb	1	; select bank1
  9874  1B10  00CA               	movwf	(_WDT^(0+128)+1)
  9875  1B11  0008               	return
  9876  1B12                     __end_of_WDT_Set:	
  9877                           
  9878                           	psect	text48
  9879  1B65                     __ptext48:	
  9880 ;; *************** function _TMR1_Set *****************
  9881 ;; Defined at:
  9882 ;;		line 199 in file "../src/MCU_B1.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;		None
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;		None
  9887 ;; Return value:  Size  Location     Type
  9888 ;;		None               void
  9889 ;; Registers used:
  9890 ;;		wreg
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;Total ram usage:        0 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    5
  9903 ;; This function calls:
  9904 ;;		Nothing
  9905 ;; This function is called by:
  9906 ;;		_Mcu_Initialization
  9907 ;; This function uses a non-reentrant model
  9908 ;;
  9909                           
  9910                           
  9911                           ;psect for function _TMR1_Set
  9912  1B65                     _TMR1_Set:	
  9913                           
  9914                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9915                           
  9916                           ;incstack = 0
  9917                           ; Regs used in _TMR1_Set: [wreg]
  9918  1B65  3041               	movlw	65
  9919  1B66  0020               	movlb	0	; select bank0
  9920  1B67  0098               	movwf	24	;volatile
  9921                           
  9922                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9923  1B68  30FA               	movlw	250
  9924  1B69  0097               	movwf	23	;volatile
  9925                           
  9926                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9927  1B6A  3038               	movlw	56
  9928  1B6B  0096               	movwf	22	;volatile
  9929                           
  9930                           ;MCU_B1.c: 203: TMR1IE = 1;
  9931  1B6C  0021               	movlb	1	; select bank1
  9932  1B6D  1411               	bsf	17,0	;volatile
  9933                           
  9934                           ;MCU_B1.c: 204: PEIE = 1;
  9935  1B6E  170B               	bsf	11,6	;volatile
  9936                           
  9937                           ;MCU_B1.c: 205: GIE = 1;
  9938  1B6F  178B               	bsf	11,7	;volatile
  9939  1B70  0008               	return
  9940  1B71                     __end_of_TMR1_Set:	
  9941                           
  9942                           	psect	text49
  9943  1DBC                     __ptext49:	
  9944 ;; *************** function _IO_Set *****************
  9945 ;; Defined at:
  9946 ;;		line 60 in file "../src/MCU_B1.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;		None
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;		None
  9951 ;; Return value:  Size  Location     Type
  9952 ;;		None               void
  9953 ;; Registers used:
  9954 ;;		wreg, status,2
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;Total ram usage:        0 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    5
  9967 ;; This function calls:
  9968 ;;		Nothing
  9969 ;; This function is called by:
  9970 ;;		_Mcu_Initialization
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           
  9975                           ;psect for function _IO_Set
  9976  1DBC                     _IO_Set:	
  9977                           
  9978                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9979                           
  9980                           ;incstack = 0
  9981                           ; Regs used in _IO_Set: [wreg+status,2]
  9982  1DBC  3077               	movlw	119
  9983  1DBD  0021               	movlb	1	; select bank1
  9984  1DBE  008C               	movwf	12	;volatile
  9985                           
  9986                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9987  1DBF  3007               	movlw	7
  9988  1DC0  008D               	movwf	13	;volatile
  9989                           
  9990                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9991  1DC1  300C               	movlw	12
  9992  1DC2  008E               	movwf	14	;volatile
  9993                           
  9994                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9995  1DC3  0022               	movlb	2	; select bank2
  9996  1DC4  018C               	clrf	12	;volatile
  9997                           
  9998                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9999  1DC5  3002               	movlw	2
 10000  1DC6  008D               	movwf	13	;volatile
 10001                           
 10002                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10003  1DC7  018E               	clrf	14	;volatile
 10004                           
 10005                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10006  1DC8  3022               	movlw	34
 10007  1DC9  0023               	movlb	3	; select bank3
 10008  1DCA  008C               	movwf	12	;volatile
 10009                           
 10010                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10011  1DCB  018D               	clrf	13	;volatile
 10012                           
 10013                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10014  1DCC  018E               	clrf	14	;volatile
 10015                           
 10016                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10017  1DCD  3077               	movlw	119
 10018  1DCE  0020               	movlb	0	; select bank0
 10019  1DCF  008C               	movwf	12	;volatile
 10020                           
 10021                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10022  1DD0  3007               	movlw	7
 10023  1DD1  008D               	movwf	13	;volatile
 10024                           
 10025                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10026  1DD2  300C               	movlw	12
 10027  1DD3  008E               	movwf	14	;volatile
 10028  1DD4  0008               	return
 10029  1DD5                     __end_of_IO_Set:	
 10030                           
 10031                           	psect	text50
 10032  1B59                     __ptext50:	
 10033 ;; *************** function _IOC_Set *****************
 10034 ;; Defined at:
 10035 ;;		line 365 in file "../src/MCU_B1.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;		None
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;		None
 10040 ;; Return value:  Size  Location     Type
 10041 ;;		None               void
 10042 ;; Registers used:
 10043 ;;		wreg, status,2
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;Total ram usage:        0 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:    5
 10056 ;; This function calls:
 10057 ;;		Nothing
 10058 ;; This function is called by:
 10059 ;;		_Mcu_Initialization
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           
 10064                           ;psect for function _IOC_Set
 10065  1B59                     _IOC_Set:	
 10066                           
 10067                           ;MCU_B1.c: 366: WPUB2 = 0;
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in _IOC_Set: [wreg+status,2]
 10071  1B59  0024               	movlb	4	; select bank4
 10072  1B5A  110D               	bcf	13,2	;volatile
 10073                           
 10074                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
 10075  1B5B  0027               	movlb	7	; select bank7
 10076  1B5C  0194               	clrf	20	;volatile
 10077                           
 10078                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
 10079  1B5D  3004               	movlw	4
 10080  1B5E  0095               	movwf	21	;volatile
 10081                           
 10082                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
 10083  1B5F  0196               	clrf	22	;volatile
 10084                           
 10085                           ;MCU_B1.c: 393: IOCIE = 1;
 10086  1B60  158B               	bsf	11,3	;volatile
 10087                           
 10088                           ;MCU_B1.c: 394: IOCIF = 0;
 10089  1B61  100B               	bcf	11,0	;volatile
 10090                           
 10091                           ;MCU_B1.c: 395: PEIE = 1;
 10092  1B62  170B               	bsf	11,6	;volatile
 10093                           
 10094                           ;MCU_B1.c: 396: GIE = 1;
 10095  1B63  178B               	bsf	11,7	;volatile
 10096  1B64  0008               	return
 10097  1B65                     __end_of_IOC_Set:	
 10098                           
 10099                           	psect	text51
 10100  1A9E                     __ptext51:	
 10101 ;; *************** function _Fosc_Set *****************
 10102 ;; Defined at:
 10103 ;;		line 56 in file "../src/MCU_B1.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;		None
 10106 ;; Auto vars:     Size  Location     Type
 10107 ;;		None
 10108 ;; Return value:  Size  Location     Type
 10109 ;;		None               void
 10110 ;; Registers used:
 10111 ;;		wreg
 10112 ;; Tracked objects:
 10113 ;;		On entry : 0/0
 10114 ;;		On exit  : 0/0
 10115 ;;		Unchanged: 0/0
 10116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;Total ram usage:        0 bytes
 10122 ;; Hardware stack levels used:    1
 10123 ;; Hardware stack levels required when called:    5
 10124 ;; This function calls:
 10125 ;;		Nothing
 10126 ;; This function is called by:
 10127 ;;		_Mcu_Initialization
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           
 10132                           ;psect for function _Fosc_Set
 10133  1A9E                     _Fosc_Set:	
 10134                           
 10135                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10136                           
 10137                           ;incstack = 0
 10138                           ; Regs used in _Fosc_Set: [wreg]
 10139  1A9E  3078               	movlw	120
 10140  1A9F  0021               	movlb	1	; select bank1
 10141  1AA0  0099               	movwf	25	;volatile
 10142  1AA1  0008               	return
 10143  1AA2                     __end_of_Fosc_Set:	
 10144                           
 10145                           	psect	text52
 10146  1ABE                     __ptext52:	
 10147 ;; *************** function _ADC_Set *****************
 10148 ;; Defined at:
 10149 ;;		line 420 in file "../src/MCU_B1.c"
 10150 ;; Parameters:    Size  Location     Type
 10151 ;;		None
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;		None
 10154 ;; Return value:  Size  Location     Type
 10155 ;;		None               void
 10156 ;; Registers used:
 10157 ;;		wreg
 10158 ;; Tracked objects:
 10159 ;;		On entry : 0/0
 10160 ;;		On exit  : 0/0
 10161 ;;		Unchanged: 0/0
 10162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;Total ram usage:        0 bytes
 10168 ;; Hardware stack levels used:    1
 10169 ;; Hardware stack levels required when called:    5
 10170 ;; This function calls:
 10171 ;;		Nothing
 10172 ;; This function is called by:
 10173 ;;		_Mcu_Initialization
 10174 ;; This function uses a non-reentrant model
 10175 ;;
 10176                           
 10177                           
 10178                           ;psect for function _ADC_Set
 10179  1ABE                     _ADC_Set:	
 10180                           
 10181                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10182                           
 10183                           ;incstack = 0
 10184                           ; Regs used in _ADC_Set: [wreg]
 10185  1ABE  30F3               	movlw	243
 10186  1ABF  0021               	movlb	1	; select bank1
 10187  1AC0  009E               	movwf	30	;volatile
 10188                           
 10189                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10190  1AC1  30C1               	movlw	193
 10191  1AC2  0022               	movlb	2	; select bank2
 10192  1AC3  0097               	movwf	23	;volatile
 10193  1AC4  0008               	return
 10194  1AC5                     __end_of_ADC_Set:	
 10195                           
 10196                           	psect	text53
 10197  004B                     __ptext53:	
 10198 ;; *************** function _Load_Main *****************
 10199 ;; Defined at:
 10200 ;;		line 39 in file "../src/OverLoad_B1.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;		None
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  i               1   15[BANK0 ] unsigned char 
 10205 ;;  error           1   14[BANK0 ] unsigned char 
 10206 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10207 ;;  j               1   11[BANK0 ] unsigned char 
 10208 ;; Return value:  Size  Location     Type
 10209 ;;		None               void
 10210 ;; Registers used:
 10211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;Total ram usage:        7 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    8
 10224 ;; This function calls:
 10225 ;;		___lwdiv
 10226 ;;		_getAll_DimmerLights_AdjGO
 10227 ;;		_getMain_All_Error_Status
 10228 ;;		_getMain_LightsStatus
 10229 ;;		_getMain_Lights_Count
 10230 ;;		_getMain_LoadOK
 10231 ;;		_setLoad_AH_AL_Restore
 10232 ;; This function is called by:
 10233 ;;		_main
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function _Load_Main
 10239  004B                     _Load_Main:	
 10240                           
 10241                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10242                           
 10243                           ;incstack = 0
 10244                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10245  004B  0020               	movlb	0	; select bank0
 10246  004C  01AF               	clrf	Load_Main@i
 10247  004D  01AB               	clrf	Load_Main@j
 10248  004E  3000               	movlw	0
 10249  004F  3191  2165  3180   	fcall	_getMain_All_Error_Status
 10250  0052  0020               	movlb	0	; select bank0
 10251  0053  00A9               	movwf	??_Load_Main
 10252  0054  0829               	movf	??_Load_Main,w
 10253  0055  00AE               	movwf	Load_Main@error
 10254  0056  01AC               	clrf	Load_Main@adjgo
 10255                           
 10256                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10257  0057  0022               	movlb	2	; select bank2
 10258  0058  1C25               	btfss	_Load^(0+256),0
 10259  0059  29C2               	goto	l1460
 10260                           
 10261                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10262  005A  319C  2459  3180   	fcall	_getAll_DimmerLights_AdjGO
 10263  005D  0020               	movlb	0	; select bank0
 10264  005E  00A9               	movwf	??_Load_Main
 10265  005F  0829               	movf	??_Load_Main,w
 10266  0060  00AC               	movwf	Load_Main@adjgo
 10267                           
 10268                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10269  0061  01AD               	clrf	_Load_Main$3495
 10270  0062  3190  20D7  3180   	fcall	_getMain_LightsStatus
 10271  0065  3A01               	xorlw	1
 10272  0066  1D03               	skipz
 10273  0067  2871               	goto	l8145
 10274  0068  0020               	movlb	0	; select bank0
 10275  0069  08AE               	movf	Load_Main@error,f
 10276  006A  1D03               	skipz
 10277  006B  2871               	goto	l8145
 10278  006C  08AC               	movf	Load_Main@adjgo,f
 10279  006D  1D03               	skipz
 10280  006E  2871               	goto	l8145
 10281  006F  01AD               	clrf	_Load_Main$3495
 10282  0070  0AAD               	incf	_Load_Main$3495,f
 10283  0071                     l8145:	
 10284  0071  0020               	movlb	0	; select bank0
 10285  0072  082D               	movf	_Load_Main$3495,w
 10286  0073  0022               	movlb	2	; select bank2
 10287  0074  10A5               	bcf	_Load^(0+256),1
 10288  0075  1D03               	skipz
 10289  0076  14A5               	bsf	_Load^(0+256),1
 10290                           
 10291                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10292  0077  319B  237E  3180   	fcall	_getMain_LoadOK
 10293  007A  3A01               	xorlw	1
 10294  007B  1D03               	skipz
 10295  007C  2882               	goto	l1463
 10296  007D  0022               	movlb	2	; select bank2
 10297  007E  19A5               	btfsc	_Load^(0+256),3
 10298  007F  2882               	goto	l1463
 10299                           
 10300                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10301  0080  15A5               	bsf	_Load^(0+256),3
 10302                           
 10303                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10304  0081  13A5               	bcf	_Load^(0+256),7
 10305  0082                     l1463:	
 10306                           
 10307                           ;OverLoad_B1.c: 51: }
 10308                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10309  0082  0022               	movlb	2	; select bank2
 10310  0083  1CA5               	btfss	_Load^(0+256),1
 10311  0084  2992               	goto	l1464
 10312                           
 10313                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10314  0085  1525               	bsf	_Load^(0+256),2
 10315                           
 10316                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10317  0086  1E25               	btfss	_Load^(0+256),4
 10318  0087  2990               	goto	l1465
 10319                           
 10320                           ;OverLoad_B1.c: 58: Load.Time++;
 10321  0088  3001               	movlw	1
 10322  0089  07A6               	addwf	(_Load^(0+256)+1),f
 10323  008A  3000               	movlw	0
 10324  008B  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
 10325                           
 10326                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10327  008C  3000               	movlw	0
 10328  008D  0227               	subwf	((_Load+1)^(0+256)+1),w
 10329  008E  3005               	movlw	5
 10330  008F  1903               	skipnz
 10331  0090  0226               	subwf	(_Load^(0+256)+1),w
 10332  0091  1C03               	skipc
 10333  0092  0008               	return
 10334                           
 10335                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10336  0093  01A6               	clrf	(_Load^(0+256)+1)
 10337  0094  01A7               	clrf	((_Load+1)^(0+256)+1)
 10338                           
 10339                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10340  0095  1225               	bcf	_Load^(0+256),4
 10341                           
 10342                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
 10343  0096  0020               	movlb	0	; select bank0
 10344  0097  01AF               	clrf	Load_Main@i
 10345  0098  0AAF               	incf	Load_Main@i,f
 10346  0099  3004               	movlw	4
 10347  009A  022F               	subwf	Load_Main@i,w
 10348  009B  1803               	btfsc	3,0
 10349  009C  28C7               	goto	l8173
 10350  009D                     l8167:	
 10351                           
 10352                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10353  009D  352F               	lslf	Load_Main@i,w
 10354  009E  3E30               	addlw	(_Load+11)& (0+255)
 10355  009F  0086               	movwf	6
 10356  00A0  3001               	movlw	1	; select bank2/3
 10357  00A1  0087               	movwf	7
 10358  00A2  3F40               	moviw [0]fsr1
 10359  00A3  00A9               	movwf	??_Load_Main
 10360  00A4  3F41               	moviw [1]fsr1
 10361  00A5  00AA               	movwf	??_Load_Main+1
 10362  00A6  0829               	movf	??_Load_Main,w
 10363  00A7  0022               	movlb	2	; select bank2
 10364  00A8  07AA               	addwf	(_Load^(0+256)+5),f
 10365  00A9  0020               	movlb	0	; select bank0
 10366  00AA  082A               	movf	??_Load_Main+1,w
 10367  00AB  0022               	movlb	2	; select bank2
 10368  00AC  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
 10369                           
 10370                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10371  00AD  0020               	movlb	0	; select bank0
 10372  00AE  352F               	lslf	Load_Main@i,w
 10373  00AF  3E3A               	addlw	(_Load+21)& (0+255)
 10374  00B0  0086               	movwf	6
 10375  00B1  3001               	movlw	1	; select bank2/3
 10376  00B2  0087               	movwf	7
 10377  00B3  3F40               	moviw [0]fsr1
 10378  00B4  00A9               	movwf	??_Load_Main
 10379  00B5  3F41               	moviw [1]fsr1
 10380  00B6  00AA               	movwf	??_Load_Main+1
 10381  00B7  0829               	movf	??_Load_Main,w
 10382  00B8  0022               	movlb	2	; select bank2
 10383  00B9  07AC               	addwf	(_Load^(0+256)+7),f
 10384  00BA  0020               	movlb	0	; select bank0
 10385  00BB  082A               	movf	??_Load_Main+1,w
 10386  00BC  0022               	movlb	2	; select bank2
 10387  00BD  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
 10388  00BE  3001               	movlw	1
 10389  00BF  0020               	movlb	0	; select bank0
 10390  00C0  00A9               	movwf	??_Load_Main
 10391  00C1  0829               	movf	??_Load_Main,w
 10392  00C2  07AF               	addwf	Load_Main@i,f
 10393  00C3  3004               	movlw	4
 10394  00C4  022F               	subwf	Load_Main@i,w
 10395  00C5  1C03               	skipc
 10396  00C6  289D               	goto	l8167
 10397  00C7                     l8173:	
 10398                           
 10399                           ;OverLoad_B1.c: 66: }
 10400                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
 10401  00C7  3003               	movlw	3
 10402  00C8  00A0               	movwf	___lwdiv@divisor
 10403  00C9  3000               	movlw	0
 10404  00CA  00A1               	movwf	___lwdiv@divisor+1
 10405  00CB  0022               	movlb	2	; select bank2
 10406  00CC  082B               	movf	((_Load+1)^(0+256)+5),w
 10407  00CD  0020               	movlb	0	; select bank0
 10408  00CE  01A3               	clrf	___lwdiv@dividend+1
 10409  00CF  07A3               	addwf	___lwdiv@dividend+1,f
 10410  00D0  0022               	movlb	2	; select bank2
 10411  00D1  082A               	movf	(_Load^(0+256)+5),w
 10412  00D2  0020               	movlb	0	; select bank0
 10413  00D3  01A2               	clrf	___lwdiv@dividend
 10414  00D4  07A2               	addwf	___lwdiv@dividend,f
 10415  00D5  3192  226E  3180   	fcall	___lwdiv
 10416  00D8  0020               	movlb	0	; select bank0
 10417  00D9  0821               	movf	?___lwdiv+1,w
 10418  00DA  0022               	movlb	2	; select bank2
 10419  00DB  01AB               	clrf	((_Load+1)^(0+256)+5)
 10420  00DC  07AB               	addwf	((_Load+1)^(0+256)+5),f
 10421  00DD  0020               	movlb	0	; select bank0
 10422  00DE  0820               	movf	?___lwdiv,w
 10423  00DF  0022               	movlb	2	; select bank2
 10424  00E0  01AA               	clrf	(_Load^(0+256)+5)
 10425  00E1  07AA               	addwf	(_Load^(0+256)+5),f
 10426                           
 10427                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
 10428  00E2  3003               	movlw	3
 10429  00E3  0020               	movlb	0	; select bank0
 10430  00E4  00A0               	movwf	___lwdiv@divisor
 10431  00E5  3000               	movlw	0
 10432  00E6  00A1               	movwf	___lwdiv@divisor+1
 10433  00E7  0022               	movlb	2	; select bank2
 10434  00E8  082D               	movf	((_Load+1)^(0+256)+7),w
 10435  00E9  0020               	movlb	0	; select bank0
 10436  00EA  01A3               	clrf	___lwdiv@dividend+1
 10437  00EB  07A3               	addwf	___lwdiv@dividend+1,f
 10438  00EC  0022               	movlb	2	; select bank2
 10439  00ED  082C               	movf	(_Load^(0+256)+7),w
 10440  00EE  0020               	movlb	0	; select bank0
 10441  00EF  01A2               	clrf	___lwdiv@dividend
 10442  00F0  07A2               	addwf	___lwdiv@dividend,f
 10443  00F1  3192  226E  3180   	fcall	___lwdiv
 10444  00F4  0020               	movlb	0	; select bank0
 10445  00F5  0821               	movf	?___lwdiv+1,w
 10446  00F6  0022               	movlb	2	; select bank2
 10447  00F7  01AD               	clrf	((_Load+1)^(0+256)+7)
 10448  00F8  07AD               	addwf	((_Load+1)^(0+256)+7),f
 10449  00F9  0020               	movlb	0	; select bank0
 10450  00FA  0820               	movf	?___lwdiv,w
 10451  00FB  0022               	movlb	2	; select bank2
 10452  00FC  01AC               	clrf	(_Load^(0+256)+7)
 10453  00FD  07AC               	addwf	(_Load^(0+256)+7),f
 10454                           
 10455                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10456  00FE  319E  2624  3180   	fcall	_setLoad_AH_AL_Restore
 10457                           
 10458                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10459  0101  0022               	movlb	2	; select bank2
 10460  0102  082B               	movf	((_Load+1)^(0+256)+5),w
 10461  0103  022D               	subwf	((_Load+1)^(0+256)+7),w
 10462  0104  1D03               	skipz
 10463  0105  2908               	goto	u8265
 10464  0106  082A               	movf	(_Load^(0+256)+5),w
 10465  0107  022C               	subwf	(_Load^(0+256)+7),w
 10466  0108                     u8265:	
 10467  0108  1803               	skipnc
 10468  0109  0008               	return
 10469                           
 10470                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10471  010A  3005               	movlw	5
 10472  010B  3E25               	addlw	_Load& (0+255)
 10473  010C  0086               	movwf	6
 10474  010D  3001               	movlw	1	; select bank2/3
 10475  010E  0087               	movwf	7
 10476  010F  092C               	comf	(_Load^(0+256)+7),w
 10477  0110  0020               	movlb	0	; select bank0
 10478  0111  00A9               	movwf	??_Load_Main
 10479  0112  0022               	movlb	2	; select bank2
 10480  0113  092D               	comf	((_Load+1)^(0+256)+7),w
 10481  0114  0020               	movlb	0	; select bank0
 10482  0115  00AA               	movwf	??_Load_Main+1
 10483  0116  0AA9               	incf	??_Load_Main,f
 10484  0117  1903               	skipnz
 10485  0118  0AAA               	incf	??_Load_Main+1,f
 10486  0119  3F40               	moviw [0]fsr1
 10487  011A  0729               	addwf	??_Load_Main,w
 10488  011B  0022               	movlb	2	; select bank2
 10489  011C  00C4               	movwf	(_Load^(0+256)+31)
 10490  011D  3F41               	moviw [1]fsr1
 10491  011E  0020               	movlb	0	; select bank0
 10492  011F  3D2A               	addwfc	??_Load_Main+1,w
 10493  0120  0022               	movlb	2	; select bank2
 10494  0121  00C5               	movwf	(_Load^(0+256)+32)
 10495                           
 10496                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10497  0122  01AA               	clrf	(_Load^(0+256)+5)
 10498  0123  01AB               	clrf	((_Load+1)^(0+256)+5)
 10499                           
 10500                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10501  0124  01AC               	clrf	(_Load^(0+256)+7)
 10502  0125  01AD               	clrf	((_Load+1)^(0+256)+7)
 10503                           
 10504                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10505  0126  319D  255F  3180   	fcall	_getMain_Lights_Count
 10506  0129  0020               	movlb	0	; select bank0
 10507  012A  00A9               	movwf	??_Load_Main
 10508  012B  0829               	movf	??_Load_Main,w
 10509  012C  0022               	movlb	2	; select bank2
 10510  012D  00D1               	movwf	(_Load^(0+256)+44)
 10511                           
 10512                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10513  012E  1DA5               	btfss	_Load^(0+256),3
 10514  012F  295B               	goto	l8205
 10515                           
 10516                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10517  0130  3002               	movlw	2
 10518  0131  024E               	subwf	(_Load^(0+256)+41),w
 10519  0132  1803               	skipnc
 10520  0133  295B               	goto	l8205
 10521                           
 10522                           ;OverLoad_B1.c: 79: Load.Count++;
 10523  0134  3001               	movlw	1
 10524  0135  0020               	movlb	0	; select bank0
 10525  0136  00A9               	movwf	??_Load_Main
 10526  0137  0829               	movf	??_Load_Main,w
 10527  0138  0022               	movlb	2	; select bank2
 10528  0139  07CE               	addwf	(_Load^(0+256)+41),f
 10529                           
 10530                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10531  013A  084E               	movf	(_Load^(0+256)+41),w
 10532  013B  3A01               	xorlw	1
 10533  013C  1D03               	skipz
 10534  013D  2948               	goto	l8197
 10535                           
 10536                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
 10537  013E  3002               	movlw	2
 10538  013F  0020               	movlb	0	; select bank0
 10539  0140  00A9               	movwf	??_Load_Main
 10540  0141  0829               	movf	??_Load_Main,w
 10541  0142  0022               	movlb	2	; select bank2
 10542  0143  00D0               	movwf	(_Load^(0+256)+43)
 10543                           
 10544                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*50);
 10545  0144  30E8               	movlw	232
 10546  0145  00CA               	movwf	(_Load^(0+256)+37)
 10547  0146  3003               	movlw	3
 10548  0147  2953               	goto	L7
 10549  0148                     l8197:	
 10550                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
 10551                           
 10552  0148  084E               	movf	(_Load^(0+256)+41),w
 10553  0149  3A02               	xorlw	2
 10554  014A  1D03               	skipz
 10555  014B  295B               	goto	l8205
 10556                           
 10557                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
 10558  014C  0851               	movf	(_Load^(0+256)+44),w
 10559  014D  3A01               	xorlw	1
 10560  014E  1D03               	skipz
 10561  014F  2955               	goto	l8203
 10562                           
 10563                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(1.1*50);
 10564  0150  3037               	movlw	55
 10565  0151  00CA               	movwf	(_Load^(0+256)+37)
 10566  0152  3000               	movlw	0
 10567  0153                     L7:	
 10568  0153  00CB               	movwf	(_Load^(0+256)+38)
 10569                           
 10570                           ;OverLoad_B1.c: 86: } else {
 10571  0154  295B               	goto	l8205
 10572  0155                     l8203:	
 10573                           
 10574                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10575  0155  082E               	movf	(_Load^(0+256)+9),w
 10576  0156  3E37               	addlw	55
 10577  0157  00CA               	movwf	(_Load^(0+256)+37)
 10578  0158  3000               	movlw	0
 10579  0159  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10580  015A  00CB               	movwf	((_Load+1)^(0+256)+37)
 10581  015B                     l8205:	
 10582                           
 10583                           ;OverLoad_B1.c: 88: }
 10584                           ;OverLoad_B1.c: 89: }
 10585                           ;OverLoad_B1.c: 90: }
 10586                           ;OverLoad_B1.c: 91: }
 10587                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
 10588  015B  084B               	movf	((_Load+1)^(0+256)+37),w
 10589  015C  0245               	subwf	((_Load+1)^(0+256)+31),w
 10590  015D  1D03               	skipz
 10591  015E  2961               	goto	u8325
 10592  015F  084A               	movf	(_Load^(0+256)+37),w
 10593  0160  0244               	subwf	(_Load^(0+256)+31),w
 10594  0161                     u8325:	
 10595  0161  1C03               	skipc
 10596  0162  2970               	goto	l8215
 10597                           
 10598                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
 10599  0163  3001               	movlw	1
 10600  0164  0020               	movlb	0	; select bank0
 10601  0165  00A9               	movwf	??_Load_Main
 10602  0166  0829               	movf	??_Load_Main,w
 10603  0167  0022               	movlb	2	; select bank2
 10604  0168  07CF               	addwf	(_Load^(0+256)+42),f
 10605                           
 10606                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
 10607  0169  084F               	movf	(_Load^(0+256)+42),w
 10608  016A  0250               	subwf	(_Load^(0+256)+43),w
 10609  016B  1803               	skipnc
 10610  016C  0008               	return
 10611                           
 10612                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
 10613  016D  01CF               	clrf	(_Load^(0+256)+42)
 10614                           
 10615                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
 10616  016E  16A5               	bsf	_Load^(0+256),5
 10617                           
 10618                           ;OverLoad_B1.c: 118: }
 10619                           ;OverLoad_B1.c: 119: } else {
 10620  016F  0008               	return
 10621  0170                     l8215:	
 10622                           
 10623                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
 10624  0170  01CF               	clrf	(_Load^(0+256)+42)
 10625                           
 10626                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
 10627  0171  1DA5               	btfss	_Load^(0+256),3
 10628  0172  0008               	return
 10629                           
 10630                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
 10631  0173  1BA5               	btfsc	_Load^(0+256),7
 10632  0174  0008               	return
 10633                           
 10634                           ;OverLoad_B1.c: 123: Load.SafeCount++;
 10635  0175  3001               	movlw	1
 10636  0176  0020               	movlb	0	; select bank0
 10637  0177  00A9               	movwf	??_Load_Main
 10638  0178  0829               	movf	??_Load_Main,w
 10639  0179  0022               	movlb	2	; select bank2
 10640  017A  07D2               	addwf	(_Load^(0+256)+45),f
 10641                           
 10642                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
 10643  017B  3003               	movlw	3
 10644  017C  0252               	subwf	(_Load^(0+256)+45),w
 10645  017D  1C03               	skipc
 10646  017E  0008               	return
 10647                           
 10648                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
 10649  017F  01D2               	clrf	(_Load^(0+256)+45)
 10650                           
 10651                           ;OverLoad_B1.c: 126: Load.OK = 1;
 10652  0180  17A5               	bsf	_Load^(0+256),7
 10653                           
 10654                           ;OverLoad_B1.c: 127: Load.Run = 0;
 10655  0181  11A5               	bcf	_Load^(0+256),3
 10656                           
 10657                           ;OverLoad_B1.c: 128: Load.Count = 0;
 10658  0182  01CE               	clrf	(_Load^(0+256)+41)
 10659                           
 10660                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
 10661  0183  0845               	movf	((_Load+1)^(0+256)+31),w
 10662  0184  01AF               	clrf	((_Load+1)^(0+256)+9)
 10663  0185  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10664  0186  0844               	movf	(_Load^(0+256)+31),w
 10665  0187  01AE               	clrf	(_Load^(0+256)+9)
 10666  0188  07AE               	addwf	(_Load^(0+256)+9),f
 10667                           
 10668                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
 10669  0189  3003               	movlw	3
 10670  018A  0020               	movlb	0	; select bank0
 10671  018B  00A9               	movwf	??_Load_Main
 10672  018C  0829               	movf	??_Load_Main,w
 10673  018D  0022               	movlb	2	; select bank2
 10674  018E  00D0               	movwf	(_Load^(0+256)+43)
 10675                           
 10676                           ;OverLoad_B1.c: 154: }
 10677                           ;OverLoad_B1.c: 155: }
 10678                           ;OverLoad_B1.c: 156: }
 10679                           ;OverLoad_B1.c: 157: }
 10680                           ;OverLoad_B1.c: 158: }
 10681                           ;OverLoad_B1.c: 159: }
 10682                           ;OverLoad_B1.c: 160: } else {
 10683  018F  0008               	return
 10684  0190                     l1465:	
 10685                           
 10686                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
 10687  0190  1625               	bsf	_Load^(0+256),4
 10688                           
 10689                           ;OverLoad_B1.c: 162: }
 10690                           ;OverLoad_B1.c: 163: } else {
 10691  0191  0008               	return
 10692  0192                     l1464:	
 10693                           
 10694                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
 10695  0192  1D25               	btfss	_Load^(0+256),2
 10696  0193  29B0               	goto	l8265
 10697  0194  0020               	movlb	0	; select bank0
 10698  0195  082E               	movf	Load_Main@error,w
 10699  0196  3A03               	xorlw	3
 10700  0197  1903               	skipnz
 10701  0198  29B0               	goto	l8265
 10702                           
 10703                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
 10704  0199  0022               	movlb	2	; select bank2
 10705  019A  1125               	bcf	_Load^(0+256),2
 10706                           
 10707                           ;OverLoad_B1.c: 167: Load.Time = 0;
 10708  019B  01A6               	clrf	(_Load^(0+256)+1)
 10709  019C  01A7               	clrf	((_Load+1)^(0+256)+1)
 10710                           
 10711                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
 10712  019D  1225               	bcf	_Load^(0+256),4
 10713                           
 10714                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
 10715  019E  319E  2624  3180   	fcall	_setLoad_AH_AL_Restore
 10716                           
 10717                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10718  01A1  0022               	movlb	2	; select bank2
 10719  01A2  01CE               	clrf	(_Load^(0+256)+41)
 10720                           
 10721                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
 10722  01A3  01CF               	clrf	(_Load^(0+256)+42)
 10723                           
 10724                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
 10725  01A4  01D2               	clrf	(_Load^(0+256)+45)
 10726                           
 10727                           ;OverLoad_B1.c: 174: Load.ADH = 0;
 10728  01A5  01AA               	clrf	(_Load^(0+256)+5)
 10729  01A6  01AB               	clrf	((_Load+1)^(0+256)+5)
 10730                           
 10731                           ;OverLoad_B1.c: 175: Load.ADL = 0;
 10732  01A7  01AC               	clrf	(_Load^(0+256)+7)
 10733  01A8  01AD               	clrf	((_Load+1)^(0+256)+7)
 10734                           
 10735                           ;OverLoad_B1.c: 176: Load.AD = 0;
 10736  01A9  01C4               	clrf	(_Load^(0+256)+31)
 10737  01AA  01C5               	clrf	((_Load+1)^(0+256)+31)
 10738                           
 10739                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
 10740  01AB  01CA               	clrf	(_Load^(0+256)+37)
 10741  01AC  01CB               	clrf	((_Load+1)^(0+256)+37)
 10742                           
 10743                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
 10744  01AD  01D1               	clrf	(_Load^(0+256)+44)
 10745                           
 10746                           ;OverLoad_B1.c: 179: Load.Run = 0;
 10747  01AE  11A5               	bcf	_Load^(0+256),3
 10748                           
 10749                           ;OverLoad_B1.c: 180: Load.OK = 1;
 10750  01AF  17A5               	bsf	_Load^(0+256),7
 10751  01B0                     l8265:	
 10752                           
 10753                           ;OverLoad_B1.c: 201: }
 10754                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
 10755  01B0  0022               	movlb	2	; select bank2
 10756  01B1  1EA5               	btfss	_Load^(0+256),5
 10757  01B2  0008               	return
 10758                           
 10759                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
 10760  01B3  3001               	movlw	1
 10761  01B4  07A8               	addwf	(_Load^(0+256)+3),f
 10762  01B5  3000               	movlw	0
 10763  01B6  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10764                           
 10765                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
 10766  01B7  3003               	movlw	3
 10767  01B8  0229               	subwf	((_Load+1)^(0+256)+3),w
 10768  01B9  30E8               	movlw	232
 10769  01BA  1903               	skipnz
 10770  01BB  0228               	subwf	(_Load^(0+256)+3),w
 10771  01BC  1C03               	skipc
 10772  01BD  0008               	return
 10773                           
 10774                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
 10775  01BE  01A8               	clrf	(_Load^(0+256)+3)
 10776  01BF  01A9               	clrf	((_Load+1)^(0+256)+3)
 10777                           
 10778                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
 10779  01C0  12A5               	bcf	_Load^(0+256),5
 10780                           
 10781                           ;OverLoad_B1.c: 207: }
 10782                           ;OverLoad_B1.c: 208: }
 10783                           ;OverLoad_B1.c: 209: }
 10784                           ;OverLoad_B1.c: 210: } else {
 10785  01C1  0008               	return
 10786  01C2                     l1460:	
 10787                           
 10788                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
 10789  01C2  0021               	movlb	1	; select bank1
 10790  01C3  1C20               	btfss	_myMain^(0+128),0
 10791  01C4  0008               	return
 10792                           
 10793                           ;OverLoad_B1.c: 212: Load.Enable = 1;
 10794  01C5  0022               	movlb	2	; select bank2
 10795  01C6  1425               	bsf	_Load^(0+256),0
 10796  01C7  0008               	return
 10797  01C8                     __end_of_Load_Main:	
 10798                           
 10799                           	psect	text54
 10800  1B7E                     __ptext54:	
 10801 ;; *************** function _getMain_LoadOK *****************
 10802 ;; Defined at:
 10803 ;;		line 475 in file "../src/main_B1.c"
 10804 ;; Parameters:    Size  Location     Type
 10805 ;;		None
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;  ok              1    2[BANK0 ] unsigned char 
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  1    wreg      unsigned char 
 10810 ;; Registers used:
 10811 ;;		wreg, status,2, pclath, cstack
 10812 ;; Tracked objects:
 10813 ;;		On entry : 0/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;Total ram usage:        2 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    6
 10824 ;; This function calls:
 10825 ;;		_getDimmer_LoadOK
 10826 ;; This function is called by:
 10827 ;;		_Load_Main
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           
 10832                           ;psect for function _getMain_LoadOK
 10833  1B7E                     _getMain_LoadOK:	
 10834                           
 10835                           ;main_B1.c: 476: char ok = 0;
 10836                           
 10837                           ;incstack = 0
 10838                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10839  1B7E  0020               	movlb	0	; select bank0
 10840  1B7F  01A2               	clrf	getMain_LoadOK@ok
 10841                           
 10842                           ;main_B1.c: 482: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10843  1B80  319A  22E5         	fcall	_getDimmer_LoadOK
 10844  1B82  3A01               	xorlw	1
 10845  1B83  3000               	movlw	0
 10846  1B84  1903               	skipnz
 10847  1B85  3001               	movlw	1
 10848  1B86  0020               	movlb	0	; select bank0
 10849  1B87  00A1               	movwf	??_getMain_LoadOK
 10850  1B88  0821               	movf	??_getMain_LoadOK,w
 10851  1B89  00A2               	movwf	getMain_LoadOK@ok
 10852                           
 10853                           ;main_B1.c: 484: return ok;
 10854  1B8A  0822               	movf	getMain_LoadOK@ok,w
 10855  1B8B  0008               	return
 10856  1B8C                     __end_of_getMain_LoadOK:	
 10857                           
 10858                           	psect	text55
 10859  1AE5                     __ptext55:	
 10860 ;; *************** function _getDimmer_LoadOK *****************
 10861 ;; Defined at:
 10862 ;;		line 599 in file "../src/Dimmer_B1.c"
 10863 ;; Parameters:    Size  Location     Type
 10864 ;;		None
 10865 ;; Auto vars:     Size  Location     Type
 10866 ;;  status          1    0[BANK0 ] unsigned char 
 10867 ;; Return value:  Size  Location     Type
 10868 ;;                  1    wreg      unsigned char 
 10869 ;; Registers used:
 10870 ;;		wreg, status,2
 10871 ;; Tracked objects:
 10872 ;;		On entry : 0/0
 10873 ;;		On exit  : 0/0
 10874 ;;		Unchanged: 0/0
 10875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10879 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;Total ram usage:        1 bytes
 10881 ;; Hardware stack levels used:    1
 10882 ;; Hardware stack levels required when called:    5
 10883 ;; This function calls:
 10884 ;;		Nothing
 10885 ;; This function is called by:
 10886 ;;		_getMain_LoadOK
 10887 ;; This function uses a non-reentrant model
 10888 ;;
 10889                           
 10890                           
 10891                           ;psect for function _getDimmer_LoadOK
 10892  1AE5                     _getDimmer_LoadOK:	
 10893                           
 10894                           ;Dimmer_B1.c: 600: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10895                           
 10896                           ;incstack = 0
 10897                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10898  1AE5  3000               	movlw	0
 10899  1AE6  0021               	movlb	1	; select bank1
 10900  1AE7  18C6               	btfsc	_Dimmer^(0+128),1	;volatile
 10901  1AE8  3001               	movlw	1
 10902  1AE9  0020               	movlb	0	; select bank0
 10903  1AEA  00A0               	movwf	getDimmer_LoadOK@status
 10904                           
 10905                           ;Dimmer_B1.c: 601: return status;
 10906  1AEB  0820               	movf	getDimmer_LoadOK@status,w
 10907  1AEC  0008               	return
 10908  1AED                     __end_of_getDimmer_LoadOK:	
 10909                           
 10910                           	psect	text56
 10911  1D5F                     __ptext56:	
 10912 ;; *************** function _getMain_Lights_Count *****************
 10913 ;; Defined at:
 10914 ;;		line 445 in file "../src/main_B1.c"
 10915 ;; Parameters:    Size  Location     Type
 10916 ;;		None
 10917 ;; Auto vars:     Size  Location     Type
 10918 ;;  status2         1    3[BANK0 ] unsigned char 
 10919 ;;  status1         1    2[BANK0 ] unsigned char 
 10920 ;;  status3         1    1[BANK0 ] unsigned char 
 10921 ;;  count           1    0[BANK0 ] unsigned char 
 10922 ;; Return value:  Size  Location     Type
 10923 ;;                  1    wreg      unsigned char 
 10924 ;; Registers used:
 10925 ;;		wreg, status,2, status,0
 10926 ;; Tracked objects:
 10927 ;;		On entry : 0/0
 10928 ;;		On exit  : 0/0
 10929 ;;		Unchanged: 0/0
 10930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10932 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10934 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10935 ;;Total ram usage:        4 bytes
 10936 ;; Hardware stack levels used:    1
 10937 ;; Hardware stack levels required when called:    5
 10938 ;; This function calls:
 10939 ;;		Nothing
 10940 ;; This function is called by:
 10941 ;;		_Load_Main
 10942 ;; This function uses a non-reentrant model
 10943 ;;
 10944                           
 10945                           
 10946                           ;psect for function _getMain_Lights_Count
 10947  1D5F                     _getMain_Lights_Count:	
 10948                           
 10949                           ;main_B1.c: 446: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10950                           
 10951                           ;incstack = 0
 10952                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10953  1D5F  0020               	movlb	0	; select bank0
 10954  1D60  01A2               	clrf	getMain_Lights_Count@status1
 10955  1D61  01A3               	clrf	getMain_Lights_Count@status2
 10956  1D62  01A1               	clrf	getMain_Lights_Count@status3
 10957  1D63  01A0               	clrf	getMain_Lights_Count@count
 10958                           
 10959                           ;main_B1.c: 450: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10960  1D64  3000               	movlw	0
 10961  1D65  0022               	movlb	2	; select bank2
 10962  1D66  1BDD               	btfsc	(_DimmerLights1^(0+256)+10),7	;volatile
 10963  1D67  3001               	movlw	1
 10964  1D68  0020               	movlb	0	; select bank0
 10965  1D69  00A2               	movwf	getMain_Lights_Count@status1
 10966                           
 10967                           ;main_B1.c: 453: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10968  1D6A  3000               	movlw	0
 10969  1D6B  0023               	movlb	3	; select bank3
 10970  1D6C  1BC8               	btfsc	(_DimmerLights2^(0+384)+10),7	;volatile
 10971  1D6D  3001               	movlw	1
 10972  1D6E  0020               	movlb	0	; select bank0
 10973  1D6F  00A3               	movwf	getMain_Lights_Count@status2
 10974                           
 10975                           ;main_B1.c: 471: return count = (status1 + status2 + status3);
 10976  1D70  0822               	movf	getMain_Lights_Count@status1,w
 10977  1D71  0723               	addwf	getMain_Lights_Count@status2,w
 10978  1D72  0721               	addwf	getMain_Lights_Count@status3,w
 10979  1D73  00A0               	movwf	getMain_Lights_Count@count
 10980  1D74  0008               	return
 10981  1D75                     __end_of_getMain_Lights_Count:	
 10982                           
 10983                           	psect	text57
 10984  1C59                     __ptext57:	
 10985 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10986 ;; Defined at:
 10987 ;;		line 490 in file "../src/Dimmer_B1.c"
 10988 ;; Parameters:    Size  Location     Type
 10989 ;;		None
 10990 ;; Auto vars:     Size  Location     Type
 10991 ;;  adjgo           1    1[BANK0 ] unsigned char 
 10992 ;; Return value:  Size  Location     Type
 10993 ;;                  1    wreg      unsigned char 
 10994 ;; Registers used:
 10995 ;;		wreg, status,2
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;Total ram usage:        3 bytes
 11006 ;; Hardware stack levels used:    1
 11007 ;; Hardware stack levels required when called:    5
 11008 ;; This function calls:
 11009 ;;		Nothing
 11010 ;; This function is called by:
 11011 ;;		_setDimmerLights_SwOn
 11012 ;;		_setDimmerLights_AdjControl
 11013 ;;		_Load_Main
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017                           
 11018                           ;psect for function _getAll_DimmerLights_AdjGO
 11019  1C59                     _getAll_DimmerLights_AdjGO:	
 11020                           
 11021                           ;Dimmer_B1.c: 491: char adjgo = 0;
 11022                           
 11023                           ;incstack = 0
 11024                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 11025  1C59  0020               	movlb	0	; select bank0
 11026  1C5A  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 11027                           
 11028                           ;Dimmer_B1.c: 496: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 11029  1C5B  01A2               	clrf	_getAll_DimmerLights_AdjGO$2324
 11030  1C5C  0AA2               	incf	_getAll_DimmerLights_AdjGO$2324,f
 11031  1C5D  0022               	movlb	2	; select bank2
 11032  1C5E  195D               	btfsc	(_DimmerLights1^(0+256)+10),2	;volatile
 11033  1C5F  2C65               	goto	l6291
 11034  1C60  0023               	movlb	3	; select bank3
 11035  1C61  1948               	btfsc	(_DimmerLights2^(0+384)+10),2	;volatile
 11036  1C62  2C65               	goto	l6291
 11037  1C63  0020               	movlb	0	; select bank0
 11038  1C64  01A2               	clrf	_getAll_DimmerLights_AdjGO$2324
 11039  1C65                     l6291:	
 11040  1C65  0020               	movlb	0	; select bank0
 11041  1C66  0822               	movf	_getAll_DimmerLights_AdjGO$2324,w
 11042  1C67  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 11043  1C68  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 11044  1C69  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 11045                           
 11046                           ;Dimmer_B1.c: 501: return adjgo;
 11047  1C6A  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 11048  1C6B  0008               	return
 11049  1C6C                     __end_of_getAll_DimmerLights_AdjGO:	
 11050                           
 11051                           	psect	text58
 11052  126E                     __ptext58:	
 11053 ;; *************** function ___lwdiv *****************
 11054 ;; Defined at:
 11055 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11056 ;; Parameters:    Size  Location     Type
 11057 ;;  divisor         2    0[BANK0 ] unsigned int 
 11058 ;;  dividend        2    2[BANK0 ] unsigned int 
 11059 ;; Auto vars:     Size  Location     Type
 11060 ;;  quotient        2    5[BANK0 ] unsigned int 
 11061 ;;  counter         1    7[BANK0 ] unsigned char 
 11062 ;; Return value:  Size  Location     Type
 11063 ;;                  2    0[BANK0 ] unsigned int 
 11064 ;; Registers used:
 11065 ;;		wreg, status,2, status,0
 11066 ;; Tracked objects:
 11067 ;;		On entry : 0/0
 11068 ;;		On exit  : 0/0
 11069 ;;		Unchanged: 0/0
 11070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11071 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11074 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11075 ;;Total ram usage:        8 bytes
 11076 ;; Hardware stack levels used:    1
 11077 ;; Hardware stack levels required when called:    5
 11078 ;; This function calls:
 11079 ;;		Nothing
 11080 ;; This function is called by:
 11081 ;;		_Load_Main
 11082 ;; This function uses a non-reentrant model
 11083 ;;
 11084                           
 11085                           
 11086                           ;psect for function ___lwdiv
 11087  126E                     ___lwdiv:	
 11088                           
 11089                           ;incstack = 0
 11090                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11091  126E  0020               	movlb	0	; select bank0
 11092  126F  01A5               	clrf	___lwdiv@quotient
 11093  1270  01A6               	clrf	___lwdiv@quotient+1
 11094  1271  0821               	movf	___lwdiv@divisor+1,w
 11095  1272  0420               	iorwf	___lwdiv@divisor,w
 11096  1273  1903               	skipnz
 11097  1274  2A9E               	goto	l7889
 11098  1275  01A7               	clrf	___lwdiv@counter
 11099  1276  0AA7               	incf	___lwdiv@counter,f
 11100  1277                     l7877:	
 11101  1277  1BA1               	btfsc	___lwdiv@divisor+1,7
 11102  1278  2A83               	goto	l7879
 11103  1279  3001               	movlw	1
 11104  127A                     u7715:	
 11105  127A  35A0               	lslf	___lwdiv@divisor,f
 11106  127B  0DA1               	rlf	___lwdiv@divisor+1,f
 11107  127C  0B89               	decfsz	9,f
 11108  127D  2A7A               	goto	u7715
 11109  127E  3001               	movlw	1
 11110  127F  00A4               	movwf	??___lwdiv
 11111  1280  0824               	movf	??___lwdiv,w
 11112  1281  07A7               	addwf	___lwdiv@counter,f
 11113  1282  2A77               	goto	l7877
 11114  1283                     l7879:	
 11115  1283  3001               	movlw	1
 11116  1284                     u7735:	
 11117  1284  35A5               	lslf	___lwdiv@quotient,f
 11118  1285  0DA6               	rlf	___lwdiv@quotient+1,f
 11119  1286  0B89               	decfsz	9,f
 11120  1287  2A84               	goto	u7735
 11121  1288  0821               	movf	___lwdiv@divisor+1,w
 11122  1289  0223               	subwf	___lwdiv@dividend+1,w
 11123  128A  1D03               	skipz
 11124  128B  2A8E               	goto	u7745
 11125  128C  0820               	movf	___lwdiv@divisor,w
 11126  128D  0222               	subwf	___lwdiv@dividend,w
 11127  128E                     u7745:	
 11128  128E  1C03               	skipc
 11129  128F  2A95               	goto	l7885
 11130  1290  0820               	movf	___lwdiv@divisor,w
 11131  1291  02A2               	subwf	___lwdiv@dividend,f
 11132  1292  0821               	movf	___lwdiv@divisor+1,w
 11133  1293  3BA3               	subwfb	___lwdiv@dividend+1,f
 11134  1294  1425               	bsf	___lwdiv@quotient,0
 11135  1295                     l7885:	
 11136  1295  3001               	movlw	1
 11137  1296                     u7755:	
 11138  1296  36A1               	lsrf	___lwdiv@divisor+1,f
 11139  1297  0CA0               	rrf	___lwdiv@divisor,f
 11140  1298  0B89               	decfsz	9,f
 11141  1299  2A96               	goto	u7755
 11142  129A  3001               	movlw	1
 11143  129B  02A7               	subwf	___lwdiv@counter,f
 11144  129C  1D03               	btfss	3,2
 11145  129D  2A83               	goto	l7879
 11146  129E                     l7889:	
 11147  129E  0826               	movf	___lwdiv@quotient+1,w
 11148  129F  01A1               	clrf	?___lwdiv+1
 11149  12A0  07A1               	addwf	?___lwdiv+1,f
 11150  12A1  0825               	movf	___lwdiv@quotient,w
 11151  12A2  01A0               	clrf	?___lwdiv
 11152  12A3  07A0               	addwf	?___lwdiv,f
 11153  12A4  0008               	return
 11154  12A5                     __end_of___lwdiv:	
 11155                           
 11156                           	psect	text59
 11157  1AA7                     __ptext59:	
 11158 ;; *************** function _Load_Initialization *****************
 11159 ;; Defined at:
 11160 ;;		line 9 in file "../src/OverLoad_B1.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;		None
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;		None
 11165 ;; Return value:  Size  Location     Type
 11166 ;;		None               void
 11167 ;; Registers used:
 11168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;Total ram usage:        0 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; Hardware stack levels required when called:    6
 11181 ;; This function calls:
 11182 ;;		_setLoad_AH_AL_Restore
 11183 ;; This function is called by:
 11184 ;;		_main
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           
 11189                           ;psect for function _Load_Initialization
 11190  1AA7                     _Load_Initialization:	
 11191                           
 11192                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11193                           
 11194                           ;incstack = 0
 11195                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11196  1AA7  0022               	movlb	2	; select bank2
 11197  1AA8  17A5               	bsf	_Load^(0+256),7
 11198                           
 11199                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11200  1AA9  319E  2624         	fcall	_setLoad_AH_AL_Restore
 11201  1AAB  0008               	return
 11202  1AAC                     __end_of_Load_Initialization:	
 11203                           
 11204                           	psect	text60
 11205  1E24                     __ptext60:	
 11206 ;; *************** function _setLoad_AH_AL_Restore *****************
 11207 ;; Defined at:
 11208 ;;		line 239 in file "../src/OverLoad_B1.c"
 11209 ;; Parameters:    Size  Location     Type
 11210 ;;		None
 11211 ;; Auto vars:     Size  Location     Type
 11212 ;;  i               1    1[BANK0 ] unsigned char 
 11213 ;; Return value:  Size  Location     Type
 11214 ;;		None               void
 11215 ;; Registers used:
 11216 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11217 ;; Tracked objects:
 11218 ;;		On entry : 0/0
 11219 ;;		On exit  : 0/0
 11220 ;;		Unchanged: 0/0
 11221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;Total ram usage:        2 bytes
 11227 ;; Hardware stack levels used:    1
 11228 ;; Hardware stack levels required when called:    5
 11229 ;; This function calls:
 11230 ;;		Nothing
 11231 ;; This function is called by:
 11232 ;;		_Load_Initialization
 11233 ;;		_Load_Main
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           
 11238                           ;psect for function _setLoad_AH_AL_Restore
 11239  1E24                     _setLoad_AH_AL_Restore:	
 11240                           
 11241                           ;OverLoad_B1.c: 240: char i;
 11242                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
 11243                           
 11244                           ;incstack = 0
 11245                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11246  1E24  0020               	movlb	0	; select bank0
 11247  1E25  01A1               	clrf	setLoad_AH_AL_Restore@i
 11248  1E26                     L8:	
 11249  1E26  3005               	movlw	5
 11250  1E27  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11251  1E28  1803               	btfsc	3,0
 11252  1E29  0008               	return
 11253                           
 11254                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
 11255  1E2A  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11256  1E2B  3E30               	addlw	(_Load+11)& (0+255)
 11257  1E2C  0086               	movwf	6
 11258  1E2D  3001               	movlw	1	; select bank2/3
 11259  1E2E  0087               	movwf	7
 11260  1E2F  3000               	movlw	0
 11261  1E30  3FC0               	movwi [0]fsr1
 11262  1E31  3FC1               	movwi [1]fsr1
 11263                           
 11264                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xffff;
 11265  1E32  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11266  1E33  3E3A               	addlw	(_Load+21)& (0+255)
 11267  1E34  0086               	movwf	6
 11268  1E35  3001               	movlw	1	; select bank2/3
 11269  1E36  0087               	movwf	7
 11270  1E37  30FF               	movlw	255
 11271  1E38  3FC0               	movwi [0]fsr1
 11272  1E39  30FF               	movlw	255
 11273  1E3A  3FC1               	movwi [1]fsr1
 11274  1E3B  3001               	movlw	1
 11275  1E3C  00A0               	movwf	??_setLoad_AH_AL_Restore
 11276  1E3D  0820               	movf	??_setLoad_AH_AL_Restore,w
 11277  1E3E  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11278  1E3F  2E26               	goto	L8
 11279  1E40                     __end_of_setLoad_AH_AL_Restore:	
 11280                           
 11281                           	psect	text61
 11282  1B4D                     __ptext61:	
 11283 ;; *************** function _LED_Main *****************
 11284 ;; Defined at:
 11285 ;;		line 47 in file "../src/LED_B1.c"
 11286 ;; Parameters:    Size  Location     Type
 11287 ;;		None
 11288 ;; Auto vars:     Size  Location     Type
 11289 ;;		None
 11290 ;; Return value:  Size  Location     Type
 11291 ;;		None               void
 11292 ;; Registers used:
 11293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11294 ;; Tracked objects:
 11295 ;;		On entry : 0/0
 11296 ;;		On exit  : 0/0
 11297 ;;		Unchanged: 0/0
 11298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;Total ram usage:        0 bytes
 11304 ;; Hardware stack levels used:    1
 11305 ;; Hardware stack levels required when called:    7
 11306 ;; This function calls:
 11307 ;;		_setLED_Main
 11308 ;; This function is called by:
 11309 ;;		_main
 11310 ;; This function uses a non-reentrant model
 11311 ;;
 11312                           
 11313                           
 11314                           ;psect for function _LED_Main
 11315  1B4D                     _LED_Main:	
 11316                           
 11317                           ;LED_B1.c: 53: setLED_Main(1);
 11318                           
 11319                           ;incstack = 0
 11320                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11321  1B4D  3001               	movlw	1
 11322  1B4E  3193  231A  319B   	fcall	_setLED_Main
 11323                           
 11324                           ;LED_B1.c: 56: setLED_Main(2);
 11325  1B51  3002               	movlw	2
 11326  1B52  3193  231A  319B   	fcall	_setLED_Main
 11327                           
 11328                           ;LED_B1.c: 62: setLED_Main(99);
 11329  1B55  3063               	movlw	99
 11330  1B56  3193  231A         	fcall	_setLED_Main
 11331  1B58  0008               	return
 11332  1B59                     __end_of_LED_Main:	
 11333                           
 11334                           	psect	text62
 11335  131A                     __ptext62:	
 11336 ;; *************** function _setLED_Main *****************
 11337 ;; Defined at:
 11338 ;;		line 221 in file "../src/LED_B1.c"
 11339 ;; Parameters:    Size  Location     Type
 11340 ;;  led             1    wreg     unsigned char 
 11341 ;; Auto vars:     Size  Location     Type
 11342 ;;  led             1    4[BANK0 ] unsigned char 
 11343 ;; Return value:  Size  Location     Type
 11344 ;;		None               void
 11345 ;; Registers used:
 11346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11354 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;Total ram usage:        3 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; Hardware stack levels required when called:    6
 11359 ;; This function calls:
 11360 ;;		_LedPointSelect
 11361 ;; This function is called by:
 11362 ;;		_LED_Main
 11363 ;; This function uses a non-reentrant model
 11364 ;;
 11365                           
 11366                           
 11367                           ;psect for function _setLED_Main
 11368  131A                     _setLED_Main:	
 11369                           
 11370                           ;incstack = 0
 11371                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11372                           ;setLED_Main@led stored from wreg
 11373  131A  0020               	movlb	0	; select bank0
 11374  131B  00A4               	movwf	setLED_Main@led
 11375                           
 11376                           ;LED_B1.c: 222: LedPointSelect(led);
 11377  131C  0824               	movf	setLED_Main@led,w
 11378  131D  319E  2609  3193   	fcall	_LedPointSelect
 11379                           
 11380                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11381  1320  087A               	movf	_LED,w
 11382  1321  0086               	movwf	6
 11383  1322  3001               	movlw	1	; select bank2/3
 11384  1323  0087               	movwf	7
 11385  1324  1C81               	btfss	1,1
 11386  1325  0008               	return
 11387                           
 11388                           ;LED_B1.c: 224: LED->Time++;
 11389  1326  0A7A               	incf	_LED,w
 11390  1327  0086               	movwf	6
 11391  1328  3001               	movlw	1	; select bank2/3
 11392  1329  0087               	movwf	7
 11393  132A  3001               	movlw	1
 11394  132B  0781               	addwf	1,f
 11395  132C  3141               	addfsr 1,1
 11396  132D  1803               	skipnc
 11397  132E  0A81               	incf	1,f
 11398                           
 11399                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11400  132F  0A7A               	incf	_LED,w
 11401  1330  0086               	movwf	6
 11402  1331  3001               	movlw	1	; select bank2/3
 11403  1332  0087               	movwf	7
 11404  1333  3F40               	moviw [0]fsr1
 11405  1334  0020               	movlb	0	; select bank0
 11406  1335  00A2               	movwf	??_setLED_Main
 11407  1336  3F41               	moviw [1]fsr1
 11408  1337  00A3               	movwf	??_setLED_Main+1
 11409  1338  3000               	movlw	0
 11410  1339  0223               	subwf	??_setLED_Main+1,w
 11411  133A  3032               	movlw	50
 11412  133B  1903               	skipnz
 11413  133C  0222               	subwf	??_setLED_Main,w
 11414  133D  1C03               	skipc
 11415  133E  0008               	return
 11416                           
 11417                           ;LED_B1.c: 226: LED->Time = 0;
 11418  133F  0A7A               	incf	_LED,w
 11419  1340  0086               	movwf	6
 11420  1341  3001               	movlw	1	; select bank2/3
 11421  1342  0087               	movwf	7
 11422  1343  3000               	movlw	0
 11423  1344  3FC0               	movwi [0]fsr1
 11424  1345  3FC1               	movwi [1]fsr1
 11425                           
 11426                           ;LED_B1.c: 228: if (led == 1) {
 11427  1346  0824               	movf	setLED_Main@led,w
 11428  1347  3A01               	xorlw	1
 11429                           
 11430                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11431  1348  3008               	movlw	8
 11432  1349  1903               	btfsc	3,2
 11433  134A  068C               	xorwf	12,f
 11434                           
 11435                           ;LED_B1.c: 230: }
 11436                           ;LED_B1.c: 233: if (led == 2) {
 11437  134B  0824               	movf	setLED_Main@led,w
 11438  134C  3A02               	xorlw	2
 11439  134D  1D03               	skipz
 11440  134E  2B51               	goto	l1033
 11441                           
 11442                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11443  134F  3080               	movlw	128
 11444  1350  068E               	xorwf	14,f
 11445  1351                     l1033:	
 11446                           
 11447                           ;LED_B1.c: 235: }
 11448                           ;LED_B1.c: 243: if (led == 99) {
 11449  1351  0824               	movf	setLED_Main@led,w
 11450  1352  3A63               	xorlw	99
 11451  1353  1D03               	skipz
 11452  1354  0008               	return
 11453                           
 11454                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11455  1355  3020               	movlw	32
 11456  1356  068D               	xorwf	13,f
 11457  1357  0008               	return
 11458  1358                     __end_of_setLED_Main:	
 11459                           
 11460                           	psect	text63
 11461  1B41                     __ptext63:	
 11462 ;; *************** function _LED_Initialization *****************
 11463 ;; Defined at:
 11464 ;;		line 31 in file "../src/LED_B1.c"
 11465 ;; Parameters:    Size  Location     Type
 11466 ;;		None
 11467 ;; Auto vars:     Size  Location     Type
 11468 ;;		None
 11469 ;; Return value:  Size  Location     Type
 11470 ;;		None               void
 11471 ;; Registers used:
 11472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11473 ;; Tracked objects:
 11474 ;;		On entry : 0/0
 11475 ;;		On exit  : 0/0
 11476 ;;		Unchanged: 0/0
 11477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11482 ;;Total ram usage:        0 bytes
 11483 ;; Hardware stack levels used:    1
 11484 ;; Hardware stack levels required when called:    8
 11485 ;; This function calls:
 11486 ;;		_setLED_Initialization
 11487 ;; This function is called by:
 11488 ;;		_main
 11489 ;; This function uses a non-reentrant model
 11490 ;;
 11491                           
 11492                           
 11493                           ;psect for function _LED_Initialization
 11494  1B41                     _LED_Initialization:	
 11495                           
 11496                           ;LED_B1.c: 33: setLED_Initialization(1);
 11497                           
 11498                           ;incstack = 0
 11499                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11500  1B41  3001               	movlw	1
 11501  1B42  319B  23CB  319B   	fcall	_setLED_Initialization
 11502                           
 11503                           ;LED_B1.c: 36: setLED_Initialization(2);
 11504  1B45  3002               	movlw	2
 11505  1B46  319B  23CB  319B   	fcall	_setLED_Initialization
 11506                           
 11507                           ;LED_B1.c: 42: setLED_Initialization(99);
 11508  1B49  3063               	movlw	99
 11509  1B4A  319B  23CB         	fcall	_setLED_Initialization
 11510  1B4C  0008               	return
 11511  1B4D                     __end_of_LED_Initialization:	
 11512                           
 11513                           	psect	text64
 11514  1BCB                     __ptext64:	
 11515 ;; *************** function _setLED_Initialization *****************
 11516 ;; Defined at:
 11517 ;;		line 69 in file "../src/LED_B1.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;  led             1    wreg     unsigned char 
 11520 ;; Auto vars:     Size  Location     Type
 11521 ;;  led             1    4[BANK0 ] unsigned char 
 11522 ;; Return value:  Size  Location     Type
 11523 ;;		None               void
 11524 ;; Registers used:
 11525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;Total ram usage:        1 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    7
 11538 ;; This function calls:
 11539 ;;		_LedPointSelect
 11540 ;;		_setLED
 11541 ;; This function is called by:
 11542 ;;		_LED_Initialization
 11543 ;; This function uses a non-reentrant model
 11544 ;;
 11545                           
 11546                           
 11547                           ;psect for function _setLED_Initialization
 11548  1BCB                     _setLED_Initialization:	
 11549                           
 11550                           ;incstack = 0
 11551                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11552                           ;setLED_Initialization@led stored from wreg
 11553  1BCB  0020               	movlb	0	; select bank0
 11554  1BCC  00A4               	movwf	setLED_Initialization@led
 11555                           
 11556                           ;LED_B1.c: 70: LedPointSelect(led);
 11557  1BCD  0824               	movf	setLED_Initialization@led,w
 11558  1BCE  319E  2609  319B   	fcall	_LedPointSelect
 11559                           
 11560                           ;LED_B1.c: 71: LED->Enable = 1;
 11561  1BD1  087A               	movf	_LED,w
 11562  1BD2  0086               	movwf	6
 11563  1BD3  3001               	movlw	1	; select bank2/3
 11564  1BD4  0087               	movwf	7
 11565  1BD5  1401               	bsf	1,0
 11566                           
 11567                           ;LED_B1.c: 72: setLED(led, 0);
 11568  1BD6  0020               	movlb	0	; select bank0
 11569  1BD7  01A2               	clrf	setLED@command
 11570  1BD8  0824               	movf	setLED_Initialization@led,w
 11571  1BD9  3188  2000         	fcall	_setLED
 11572  1BDB  0008               	return
 11573  1BDC                     __end_of_setLED_Initialization:	
 11574                           
 11575                           	psect	text65
 11576  11CC                     __ptext65:	
 11577 ;; *************** function _Flash_Memory_Main *****************
 11578 ;; Defined at:
 11579 ;;		line 966 in file "../src/MCU_B1.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;		None
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;		None
 11584 ;; Return value:  Size  Location     Type
 11585 ;;		None               void
 11586 ;; Registers used:
 11587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11588 ;; Tracked objects:
 11589 ;;		On entry : 0/0
 11590 ;;		On exit  : 0/0
 11591 ;;		Unchanged: 0/0
 11592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;Total ram usage:        1 bytes
 11598 ;; Hardware stack levels used:    1
 11599 ;; Hardware stack levels required when called:    8
 11600 ;; This function calls:
 11601 ;;		_Flash_Memory_Modify
 11602 ;;		_getMain_LightsStatus
 11603 ;; This function is called by:
 11604 ;;		_main
 11605 ;; This function uses a non-reentrant model
 11606 ;;
 11607                           
 11608                           
 11609                           ;psect for function _Flash_Memory_Main
 11610  11CC                     _Flash_Memory_Main:	
 11611                           
 11612                           ;MCU_B1.c: 967: if (Memory.Modify == 1) {
 11613                           
 11614                           ;incstack = 0
 11615                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11616  11CC  0024               	movlb	4	; select bank4
 11617  11CD  1C44               	btfss	(_Memory^(0+512)+36),0
 11618  11CE  0008               	return
 11619                           
 11620                           ;MCU_B1.c: 968: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11621  11CF  3190  20D7  3191   	fcall	_getMain_LightsStatus
 11622  11D2  3A00               	xorlw	0
 11623  11D3  3000               	movlw	0
 11624  11D4  1903               	skipnz
 11625  11D5  3001               	movlw	1
 11626  11D6  0020               	movlb	0	; select bank0
 11627  11D7  00A9               	movwf	??_Flash_Memory_Main
 11628  11D8  0DA9               	rlf	??_Flash_Memory_Main,f
 11629  11D9  0024               	movlb	4	; select bank4
 11630  11DA  0844               	movf	(_Memory^(0+512)+36),w
 11631  11DB  0020               	movlb	0	; select bank0
 11632  11DC  0629               	xorwf	??_Flash_Memory_Main,w
 11633  11DD  39FD               	andlw	-3
 11634  11DE  0629               	xorwf	??_Flash_Memory_Main,w
 11635  11DF  0024               	movlb	4	; select bank4
 11636  11E0  00C4               	movwf	(_Memory^(0+512)+36)
 11637                           
 11638                           ;MCU_B1.c: 969: if (Memory.GO == 1) {
 11639  11E1  1CC4               	btfss	(_Memory^(0+512)+36),1
 11640  11E2  29FC               	goto	l1301
 11641                           
 11642                           ;MCU_B1.c: 970: Memory.Runtime = 1;
 11643  11E3  15C4               	bsf	(_Memory^(0+512)+36),3
 11644                           
 11645                           ;MCU_B1.c: 971: Memory.Time++;
 11646  11E4  3001               	movlw	1
 11647  11E5  07C2               	addwf	(_Memory^(0+512)+34),f
 11648  11E6  3000               	movlw	0
 11649  11E7  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11650                           
 11651                           ;MCU_B1.c: 972: if (Memory.Time == 25) {
 11652  11E8  3022               	movlw	34
 11653  11E9  3E20               	addlw	_Memory& (0+255)
 11654  11EA  0086               	movwf	6
 11655  11EB  3002               	movlw	2	; select bank4/5
 11656  11EC  0087               	movwf	7
 11657  11ED  3F40               	moviw [0]fsr1
 11658  11EE  3A19               	xorlw	25
 11659  11EF  1D03               	skipz
 11660  11F0  29F3               	goto	u8015
 11661  11F1  3F41               	moviw [1]fsr1
 11662  11F2  3A00               	xorlw	0
 11663  11F3                     u8015:	
 11664  11F3  1D03               	skipz
 11665  11F4  0008               	return
 11666                           
 11667                           ;MCU_B1.c: 973: Memory.Time = 0;
 11668  11F5  01C2               	clrf	(_Memory^(0+512)+34)
 11669  11F6  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11670                           
 11671                           ;MCU_B1.c: 974: Memory.Modify = 0;
 11672  11F7  1044               	bcf	(_Memory^(0+512)+36),0
 11673                           
 11674                           ;MCU_B1.c: 975: Memory.GO = 0;
 11675  11F8  10C4               	bcf	(_Memory^(0+512)+36),1
 11676                           
 11677                           ;MCU_B1.c: 976: Flash_Memory_Modify();
 11678  11F9  3194  24EE         	fcall	_Flash_Memory_Modify
 11679                           
 11680                           ;MCU_B1.c: 977: }
 11681                           ;MCU_B1.c: 978: } else {
 11682  11FB  0008               	return
 11683  11FC                     l1301:	
 11684                           
 11685                           ;MCU_B1.c: 979: if (Memory.Runtime == 1) {
 11686  11FC  1DC4               	btfss	(_Memory^(0+512)+36),3
 11687  11FD  0008               	return
 11688                           
 11689                           ;MCU_B1.c: 980: Memory.Runtime = 0;
 11690  11FE  11C4               	bcf	(_Memory^(0+512)+36),3
 11691                           
 11692                           ;MCU_B1.c: 981: Memory.Time = 0;
 11693  11FF  01C2               	clrf	(_Memory^(0+512)+34)
 11694  1200  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11695  1201  0008               	return
 11696  1202                     __end_of_Flash_Memory_Main:	
 11697                           
 11698                           	psect	text66
 11699  14EE                     __ptext66:	
 11700 ;; *************** function _Flash_Memory_Modify *****************
 11701 ;; Defined at:
 11702 ;;		line 1039 in file "../src/MCU_B1.c"
 11703 ;; Parameters:    Size  Location     Type
 11704 ;;		None
 11705 ;; Auto vars:     Size  Location     Type
 11706 ;;  i               1    5[BANK0 ] unsigned char 
 11707 ;; Return value:  Size  Location     Type
 11708 ;;		None               void
 11709 ;; Registers used:
 11710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11711 ;; Tracked objects:
 11712 ;;		On entry : 0/0
 11713 ;;		On exit  : 0/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;Total ram usage:        2 bytes
 11721 ;; Hardware stack levels used:    1
 11722 ;; Hardware stack levels required when called:    7
 11723 ;; This function calls:
 11724 ;;		_Flash_Memory_Erasing
 11725 ;;		_Flash_Memory_Read
 11726 ;;		_Flash_Memory_Write
 11727 ;;		_setMemory_Data
 11728 ;; This function is called by:
 11729 ;;		_Flash_Memory_Main
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           
 11734                           ;psect for function _Flash_Memory_Modify
 11735  14EE                     _Flash_Memory_Modify:	
 11736                           
 11737                           ;MCU_B1.c: 1040: char i = 0;
 11738                           
 11739                           ;incstack = 0
 11740                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11741  14EE  0020               	movlb	0	; select bank0
 11742  14EF  01A5               	clrf	Flash_Memory_Modify@i
 11743                           
 11744                           ;MCU_B1.c: 1041: for (i = 0; i < 32; i++) {
 11745  14F0  01A5               	clrf	Flash_Memory_Modify@i
 11746  14F1  3020               	movlw	32
 11747  14F2  0225               	subwf	Flash_Memory_Modify@i,w
 11748  14F3  1803               	btfsc	3,0
 11749  14F4  2D0A               	goto	l7515
 11750  14F5                     l7509:	
 11751                           
 11752                           ;MCU_B1.c: 1042: Memory.Data[i] = Flash_Memory_Read(i);
 11753  14F5  0825               	movf	Flash_Memory_Modify@i,w
 11754  14F6  319D  25EF  3194   	fcall	_Flash_Memory_Read
 11755  14F9  0020               	movlb	0	; select bank0
 11756  14FA  00A4               	movwf	??_Flash_Memory_Modify
 11757  14FB  0825               	movf	Flash_Memory_Modify@i,w
 11758  14FC  3E20               	addlw	_Memory& (0+255)
 11759  14FD  0086               	movwf	6
 11760  14FE  3002               	movlw	2	; select bank4/5
 11761  14FF  0087               	movwf	7
 11762  1500  0824               	movf	??_Flash_Memory_Modify,w
 11763  1501  0081               	movwf	1
 11764  1502  3001               	movlw	1
 11765  1503  00A4               	movwf	??_Flash_Memory_Modify
 11766  1504  0824               	movf	??_Flash_Memory_Modify,w
 11767  1505  07A5               	addwf	Flash_Memory_Modify@i,f
 11768  1506  3020               	movlw	32
 11769  1507  0225               	subwf	Flash_Memory_Modify@i,w
 11770  1508  1C03               	skipc
 11771  1509  2CF5               	goto	l7509
 11772  150A                     l7515:	
 11773                           
 11774                           ;MCU_B1.c: 1043: }
 11775                           ;MCU_B1.c: 1044: setMemory_Data(0, product->Data[12]);
 11776  150A  086E               	movf	_product,w
 11777  150B  0086               	movwf	6
 11778  150C  3002               	movlw	2	; select bank4/5
 11779  150D  0087               	movwf	7
 11780  150E  3002               	movlw	2	; select bank4/5
 11781  150F  3F4C               	moviw [12]fsr1
 11782  1510  00A0               	movwf	setMemory_Data@data
 11783  1511  3000               	movlw	0
 11784  1512  319B  2329  3194   	fcall	_setMemory_Data
 11785                           
 11786                           ;MCU_B1.c: 1045: setMemory_Data(1, product->Data[13]);
 11787  1515  0020               	movlb	0	; select bank0
 11788  1516  086E               	movf	_product,w
 11789  1517  0086               	movwf	6
 11790  1518  3002               	movlw	2	; select bank4/5
 11791  1519  0087               	movwf	7
 11792  151A  3002               	movlw	2	; select bank4/5
 11793  151B  3F4D               	moviw [13]fsr1
 11794  151C  00A0               	movwf	setMemory_Data@data
 11795  151D  3001               	movlw	1
 11796  151E  319B  2329  3194   	fcall	_setMemory_Data
 11797                           
 11798                           ;MCU_B1.c: 1046: setMemory_Data(2, product->Data[14]);
 11799  1521  0020               	movlb	0	; select bank0
 11800  1522  086E               	movf	_product,w
 11801  1523  0086               	movwf	6
 11802  1524  3002               	movlw	2	; select bank4/5
 11803  1525  0087               	movwf	7
 11804  1526  3002               	movlw	2	; select bank4/5
 11805  1527  3F4E               	moviw [14]fsr1
 11806  1528  00A0               	movwf	setMemory_Data@data
 11807  1529  3002               	movlw	2
 11808  152A  319B  2329  3194   	fcall	_setMemory_Data
 11809                           
 11810                           ;MCU_B1.c: 1052: if (Memory.LoopSave == 1) {
 11811  152D  0024               	movlb	4	; select bank4
 11812  152E  1D44               	btfss	(_Memory^(0+512)+36),2
 11813  152F  2D34               	goto	l1324
 11814                           
 11815                           ;MCU_B1.c: 1053: Memory.LoopSave = 0;
 11816  1530  1144               	bcf	(_Memory^(0+512)+36),2
 11817                           
 11818                           ;MCU_B1.c: 1054: myMain.FirstOpen = 0;
 11819  1531  0021               	movlb	1	; select bank1
 11820  1532  11A0               	bcf	_myMain^(0+128),3
 11821                           
 11822                           ;MCU_B1.c: 1055: myMain.First = 0;
 11823  1533  12A0               	bcf	_myMain^(0+128),5
 11824  1534                     l1324:	
 11825                           
 11826                           ;MCU_B1.c: 1057: }
 11827                           ;MCU_B1.c: 1058: GIE = 0;
 11828  1534  138B               	bcf	11,7	;volatile
 11829                           
 11830                           ;MCU_B1.c: 1059: Flash_Memory_Erasing();
 11831  1535  319B  2335  3194   	fcall	_Flash_Memory_Erasing
 11832                           
 11833                           ;MCU_B1.c: 1060: Flash_Memory_Write();
 11834  1538  3191  2104         	fcall	_Flash_Memory_Write
 11835                           
 11836                           ;MCU_B1.c: 1061: GIE = 1;
 11837  153A  178B               	bsf	11,7	;volatile
 11838  153B  0008               	return
 11839  153C                     __end_of_Flash_Memory_Modify:	
 11840                           
 11841                           	psect	text67
 11842  1B35                     __ptext67:	
 11843 ;; *************** function _Flash_Memory_Erasing *****************
 11844 ;; Defined at:
 11845 ;;		line 1028 in file "../src/MCU_B1.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;		None
 11848 ;; Auto vars:     Size  Location     Type
 11849 ;;		None
 11850 ;; Return value:  Size  Location     Type
 11851 ;;		None               void
 11852 ;; Registers used:
 11853 ;;		wreg, status,2, status,0, pclath, cstack
 11854 ;; Tracked objects:
 11855 ;;		On entry : 0/0
 11856 ;;		On exit  : 0/0
 11857 ;;		Unchanged: 0/0
 11858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;Total ram usage:        0 bytes
 11864 ;; Hardware stack levels used:    1
 11865 ;; Hardware stack levels required when called:    6
 11866 ;; This function calls:
 11867 ;;		_Flash_Memory_Unlock
 11868 ;; This function is called by:
 11869 ;;		_Flash_Memory_Modify
 11870 ;; This function uses a non-reentrant model
 11871 ;;
 11872                           
 11873                           
 11874                           ;psect for function _Flash_Memory_Erasing
 11875  1B35                     _Flash_Memory_Erasing:	
 11876                           
 11877                           ;MCU_B1.c: 1029: CFGS = 0;
 11878                           
 11879                           ;incstack = 0
 11880                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11881  1B35  0023               	movlb	3	; select bank3
 11882  1B36  1315               	bcf	21,6	;volatile
 11883                           
 11884                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 11885  1B37  3030               	movlw	48
 11886  1B38  0092               	movwf	18	;volatile
 11887                           
 11888                           ;MCU_B1.c: 1031: PMADRL = 0x00;
 11889  1B39  0191               	clrf	17	;volatile
 11890                           
 11891                           ;MCU_B1.c: 1032: FREE = 1;
 11892  1B3A  1615               	bsf	21,4	;volatile
 11893                           
 11894                           ;MCU_B1.c: 1033: WREN = 1;
 11895  1B3B  1515               	bsf	21,2	;volatile
 11896                           
 11897                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 11898  1B3C  319A  22FE         	fcall	_Flash_Memory_Unlock
 11899                           
 11900                           ;MCU_B1.c: 1035: WREN = 0;
 11901  1B3E  0023               	movlb	3	; select bank3
 11902  1B3F  1115               	bcf	21,2	;volatile
 11903  1B40  0008               	return
 11904  1B41                     __end_of_Flash_Memory_Erasing:	
 11905                           
 11906                           	psect	text68
 11907  0656                     __ptext68:	
 11908 ;; *************** function _Flash_Memory_Initialization *****************
 11909 ;; Defined at:
 11910 ;;		line 925 in file "../src/MCU_B1.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;		None
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;  i               1   67[BANK0 ] unsigned char 
 11915 ;; Return value:  Size  Location     Type
 11916 ;;		None               void
 11917 ;; Registers used:
 11918 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;Total ram usage:        2 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:    8
 11931 ;; This function calls:
 11932 ;;		_Flash_Memory_Read
 11933 ;;		_Flash_Memory_Write
 11934 ;;		_setMemory_Data
 11935 ;;		_setPercentValue
 11936 ;; This function is called by:
 11937 ;;		_main
 11938 ;; This function uses a non-reentrant model
 11939 ;;
 11940                           
 11941                           
 11942                           ;psect for function _Flash_Memory_Initialization
 11943  0656                     _Flash_Memory_Initialization:	
 11944                           
 11945                           ;MCU_B1.c: 926: char i = 0;
 11946                           
 11947                           ;incstack = 0
 11948                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11949  0656  0020               	movlb	0	; select bank0
 11950  0657  01E3               	clrf	Flash_Memory_Initialization@i
 11951                           
 11952                           ;MCU_B1.c: 927: if (Flash_Memory_Read(31) == 0xaa) {
 11953  0658  301F               	movlw	31
 11954  0659  319D  25EF  3186   	fcall	_Flash_Memory_Read
 11955  065C  3AAA               	xorlw	170
 11956  065D  1D03               	skipz
 11957  065E  2EC8               	goto	l8013
 11958                           
 11959                           ;MCU_B1.c: 928: product->Data[12] = Flash_Memory_Read(0);
 11960  065F  3000               	movlw	0
 11961  0660  319D  25EF  3186   	fcall	_Flash_Memory_Read
 11962  0663  0020               	movlb	0	; select bank0
 11963  0664  00E2               	movwf	??_Flash_Memory_Initialization
 11964  0665  086E               	movf	_product,w
 11965  0666  3E0C               	addlw	12
 11966  0667  0086               	movwf	6
 11967  0668  3002               	movlw	2	; select bank4/5
 11968  0669  0087               	movwf	7
 11969  066A  0862               	movf	??_Flash_Memory_Initialization,w
 11970  066B  0081               	movwf	1
 11971                           
 11972                           ;MCU_B1.c: 929: product->Data[13] = Flash_Memory_Read(1);
 11973  066C  3001               	movlw	1
 11974  066D  319D  25EF  3186   	fcall	_Flash_Memory_Read
 11975  0670  0020               	movlb	0	; select bank0
 11976  0671  00E2               	movwf	??_Flash_Memory_Initialization
 11977  0672  086E               	movf	_product,w
 11978  0673  3E0D               	addlw	13
 11979  0674  0086               	movwf	6
 11980  0675  3002               	movlw	2	; select bank4/5
 11981  0676  0087               	movwf	7
 11982  0677  0862               	movf	??_Flash_Memory_Initialization,w
 11983  0678  0081               	movwf	1
 11984                           
 11985                           ;MCU_B1.c: 930: product->Data[14] = Flash_Memory_Read(2);
 11986  0679  3002               	movlw	2
 11987  067A  319D  25EF  3186   	fcall	_Flash_Memory_Read
 11988  067D  0020               	movlb	0	; select bank0
 11989  067E  00E2               	movwf	??_Flash_Memory_Initialization
 11990  067F  086E               	movf	_product,w
 11991  0680  3E0E               	addlw	14
 11992  0681  0086               	movwf	6
 11993  0682  3002               	movlw	2	; select bank4/5
 11994  0683  0087               	movwf	7
 11995  0684  0862               	movf	??_Flash_Memory_Initialization,w
 11996  0685  0081               	movwf	1
 11997                           
 11998                           ;MCU_B1.c: 936: i = setPercentValue(((char)(65*0.8)));
 11999  0686  3034               	movlw	52
 12000  0687  3189  21CC  3186   	fcall	_setPercentValue
 12001  068A  0020               	movlb	0	; select bank0
 12002  068B  00E2               	movwf	??_Flash_Memory_Initialization
 12003  068C  0862               	movf	??_Flash_Memory_Initialization,w
 12004  068D  00E3               	movwf	Flash_Memory_Initialization@i
 12005                           
 12006                           ;MCU_B1.c: 937: product->Data[21] = i;
 12007  068E  0863               	movf	Flash_Memory_Initialization@i,w
 12008  068F  00E2               	movwf	??_Flash_Memory_Initialization
 12009  0690  086E               	movf	_product,w
 12010  0691  3E15               	addlw	21
 12011  0692  0086               	movwf	6
 12012  0693  3002               	movlw	2	; select bank4/5
 12013  0694  0087               	movwf	7
 12014  0695  0862               	movf	??_Flash_Memory_Initialization,w
 12015  0696  0081               	movwf	1
 12016                           
 12017                           ;MCU_B1.c: 938: product->Data[22] = i;
 12018  0697  0863               	movf	Flash_Memory_Initialization@i,w
 12019  0698  00E2               	movwf	??_Flash_Memory_Initialization
 12020  0699  086E               	movf	_product,w
 12021  069A  3E16               	addlw	22
 12022  069B  0086               	movwf	6
 12023  069C  3002               	movlw	2	; select bank4/5
 12024  069D  0087               	movwf	7
 12025  069E  0862               	movf	??_Flash_Memory_Initialization,w
 12026  069F  0081               	movwf	1
 12027                           
 12028                           ;MCU_B1.c: 939: product->Data[23] = i;
 12029  06A0  0863               	movf	Flash_Memory_Initialization@i,w
 12030  06A1  00E2               	movwf	??_Flash_Memory_Initialization
 12031  06A2  086E               	movf	_product,w
 12032  06A3  3E17               	addlw	23
 12033  06A4  0086               	movwf	6
 12034  06A5  3002               	movlw	2	; select bank4/5
 12035  06A6  0087               	movwf	7
 12036  06A7  0862               	movf	??_Flash_Memory_Initialization,w
 12037  06A8  0081               	movwf	1
 12038                           
 12039                           ;MCU_B1.c: 941: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12040  06A9  086E               	movf	_product,w
 12041  06AA  3E0C               	addlw	12
 12042  06AB  0086               	movwf	6
 12043  06AC  3002               	movlw	2	; select bank4/5
 12044  06AD  0087               	movwf	7
 12045  06AE  0801               	movf	1,w
 12046  06AF  3AFF               	xorlw	255
 12047  06B0  1D03               	skipz
 12048  06B1  0008               	return
 12049  06B2  086E               	movf	_product,w
 12050  06B3  3E0D               	addlw	13
 12051  06B4  0086               	movwf	6
 12052  06B5  3002               	movlw	2	; select bank4/5
 12053  06B6  0087               	movwf	7
 12054  06B7  0801               	movf	1,w
 12055  06B8  3AFF               	xorlw	255
 12056  06B9  1D03               	skipz
 12057  06BA  0008               	return
 12058  06BB  086E               	movf	_product,w
 12059  06BC  3E0E               	addlw	14
 12060  06BD  0086               	movwf	6
 12061  06BE  3002               	movlw	2	; select bank4/5
 12062  06BF  0087               	movwf	7
 12063  06C0  0801               	movf	1,w
 12064  06C1  3AFF               	xorlw	255
 12065  06C2  1D03               	skipz
 12066  06C3  0008               	return
 12067                           
 12068                           ;MCU_B1.c: 942: myMain.FirstOpen = 1;
 12069  06C4  0021               	movlb	1	; select bank1
 12070  06C5  15A0               	bsf	_myMain^(0+128),3
 12071                           
 12072                           ;MCU_B1.c: 943: myMain.First = 1;
 12073  06C6  16A0               	bsf	_myMain^(0+128),5
 12074                           
 12075                           ;MCU_B1.c: 944: }
 12076                           ;MCU_B1.c: 945: } else {
 12077  06C7  0008               	return
 12078  06C8                     l8013:	
 12079                           
 12080                           ;MCU_B1.c: 946: i = setPercentValue(((char)(65*0.8)));
 12081  06C8  3034               	movlw	52
 12082  06C9  3189  21CC  3186   	fcall	_setPercentValue
 12083  06CC  0020               	movlb	0	; select bank0
 12084  06CD  00E2               	movwf	??_Flash_Memory_Initialization
 12085  06CE  0862               	movf	??_Flash_Memory_Initialization,w
 12086  06CF  00E3               	movwf	Flash_Memory_Initialization@i
 12087                           
 12088                           ;MCU_B1.c: 947: setMemory_Data(0, 0xff);
 12089  06D0  30FF               	movlw	255
 12090  06D1  00E2               	movwf	??_Flash_Memory_Initialization
 12091  06D2  0862               	movf	??_Flash_Memory_Initialization,w
 12092  06D3  00A0               	movwf	setMemory_Data@data
 12093  06D4  3000               	movlw	0
 12094  06D5  319B  2329  3186   	fcall	_setMemory_Data
 12095                           
 12096                           ;MCU_B1.c: 948: setMemory_Data(1, 0xff);
 12097  06D8  30FF               	movlw	255
 12098  06D9  0020               	movlb	0	; select bank0
 12099  06DA  00E2               	movwf	??_Flash_Memory_Initialization
 12100  06DB  0862               	movf	??_Flash_Memory_Initialization,w
 12101  06DC  00A0               	movwf	setMemory_Data@data
 12102  06DD  3001               	movlw	1
 12103  06DE  319B  2329  3186   	fcall	_setMemory_Data
 12104                           
 12105                           ;MCU_B1.c: 949: setMemory_Data(2, 0xff);
 12106  06E1  30FF               	movlw	255
 12107  06E2  0020               	movlb	0	; select bank0
 12108  06E3  00E2               	movwf	??_Flash_Memory_Initialization
 12109  06E4  0862               	movf	??_Flash_Memory_Initialization,w
 12110  06E5  00A0               	movwf	setMemory_Data@data
 12111  06E6  3002               	movlw	2
 12112  06E7  319B  2329  3186   	fcall	_setMemory_Data
 12113                           
 12114                           ;MCU_B1.c: 950: setMemory_Data(3, 0xff);
 12115  06EA  30FF               	movlw	255
 12116  06EB  0020               	movlb	0	; select bank0
 12117  06EC  00E2               	movwf	??_Flash_Memory_Initialization
 12118  06ED  0862               	movf	??_Flash_Memory_Initialization,w
 12119  06EE  00A0               	movwf	setMemory_Data@data
 12120  06EF  3003               	movlw	3
 12121  06F0  319B  2329  3186   	fcall	_setMemory_Data
 12122                           
 12123                           ;MCU_B1.c: 951: setMemory_Data(4, 0xff);
 12124  06F3  30FF               	movlw	255
 12125  06F4  0020               	movlb	0	; select bank0
 12126  06F5  00E2               	movwf	??_Flash_Memory_Initialization
 12127  06F6  0862               	movf	??_Flash_Memory_Initialization,w
 12128  06F7  00A0               	movwf	setMemory_Data@data
 12129  06F8  3004               	movlw	4
 12130  06F9  319B  2329  3186   	fcall	_setMemory_Data
 12131                           
 12132                           ;MCU_B1.c: 952: setMemory_Data(5, 0xff);
 12133  06FC  30FF               	movlw	255
 12134  06FD  0020               	movlb	0	; select bank0
 12135  06FE  00E2               	movwf	??_Flash_Memory_Initialization
 12136  06FF  0862               	movf	??_Flash_Memory_Initialization,w
 12137  0700  00A0               	movwf	setMemory_Data@data
 12138  0701  3005               	movlw	5
 12139  0702  319B  2329  3186   	fcall	_setMemory_Data
 12140                           
 12141                           ;MCU_B1.c: 953: setMemory_Data(31, 0xaa);
 12142  0705  30AA               	movlw	170
 12143  0706  0020               	movlb	0	; select bank0
 12144  0707  00E2               	movwf	??_Flash_Memory_Initialization
 12145  0708  0862               	movf	??_Flash_Memory_Initialization,w
 12146  0709  00A0               	movwf	setMemory_Data@data
 12147  070A  301F               	movlw	31
 12148  070B  319B  2329  3186   	fcall	_setMemory_Data
 12149                           
 12150                           ;MCU_B1.c: 954: product->Data[21] = i;
 12151  070E  0020               	movlb	0	; select bank0
 12152  070F  0863               	movf	Flash_Memory_Initialization@i,w
 12153  0710  00E2               	movwf	??_Flash_Memory_Initialization
 12154  0711  086E               	movf	_product,w
 12155  0712  3E15               	addlw	21
 12156  0713  0086               	movwf	6
 12157  0714  3002               	movlw	2	; select bank4/5
 12158  0715  0087               	movwf	7
 12159  0716  0862               	movf	??_Flash_Memory_Initialization,w
 12160  0717  0081               	movwf	1
 12161                           
 12162                           ;MCU_B1.c: 955: product->Data[22] = i;
 12163  0718  0863               	movf	Flash_Memory_Initialization@i,w
 12164  0719  00E2               	movwf	??_Flash_Memory_Initialization
 12165  071A  086E               	movf	_product,w
 12166  071B  3E16               	addlw	22
 12167  071C  0086               	movwf	6
 12168  071D  3002               	movlw	2	; select bank4/5
 12169  071E  0087               	movwf	7
 12170  071F  0862               	movf	??_Flash_Memory_Initialization,w
 12171  0720  0081               	movwf	1
 12172                           
 12173                           ;MCU_B1.c: 956: product->Data[23] = i;
 12174  0721  0863               	movf	Flash_Memory_Initialization@i,w
 12175  0722  00E2               	movwf	??_Flash_Memory_Initialization
 12176  0723  086E               	movf	_product,w
 12177  0724  3E17               	addlw	23
 12178  0725  0086               	movwf	6
 12179  0726  3002               	movlw	2	; select bank4/5
 12180  0727  0087               	movwf	7
 12181  0728  0862               	movf	??_Flash_Memory_Initialization,w
 12182  0729  0081               	movwf	1
 12183                           
 12184                           ;MCU_B1.c: 957: GIE = 0;
 12185  072A  138B               	bcf	11,7	;volatile
 12186                           
 12187                           ;MCU_B1.c: 958: Flash_Memory_Write();
 12188  072B  3191  2104         	fcall	_Flash_Memory_Write
 12189                           
 12190                           ;MCU_B1.c: 959: GIE = 1;
 12191  072D  178B               	bsf	11,7	;volatile
 12192                           
 12193                           ;MCU_B1.c: 960: myMain.FirstOpen = 1;
 12194  072E  0021               	movlb	1	; select bank1
 12195  072F  15A0               	bsf	_myMain^(0+128),3
 12196                           
 12197                           ;MCU_B1.c: 961: myMain.First = 1;
 12198  0730  16A0               	bsf	_myMain^(0+128),5
 12199  0731  0008               	return
 12200  0732                     __end_of_Flash_Memory_Initialization:	
 12201                           
 12202                           	psect	text69
 12203  1B29                     __ptext69:	
 12204 ;; *************** function _setMemory_Data *****************
 12205 ;; Defined at:
 12206 ;;		line 1076 in file "../src/MCU_B1.c"
 12207 ;; Parameters:    Size  Location     Type
 12208 ;;  address         1    wreg     unsigned char 
 12209 ;;  data            1    0[BANK0 ] unsigned char 
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;  address         1    2[BANK0 ] unsigned char 
 12212 ;; Return value:  Size  Location     Type
 12213 ;;		None               void
 12214 ;; Registers used:
 12215 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12216 ;; Tracked objects:
 12217 ;;		On entry : 0/0
 12218 ;;		On exit  : 0/0
 12219 ;;		Unchanged: 0/0
 12220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12221 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;Total ram usage:        3 bytes
 12226 ;; Hardware stack levels used:    1
 12227 ;; Hardware stack levels required when called:    5
 12228 ;; This function calls:
 12229 ;;		Nothing
 12230 ;; This function is called by:
 12231 ;;		_Flash_Memory_Initialization
 12232 ;;		_Flash_Memory_Modify
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           
 12237                           ;psect for function _setMemory_Data
 12238  1B29                     _setMemory_Data:	
 12239                           
 12240                           ;incstack = 0
 12241                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12242                           ;setMemory_Data@address stored from wreg
 12243  1B29  0020               	movlb	0	; select bank0
 12244  1B2A  00A2               	movwf	setMemory_Data@address
 12245                           
 12246                           ;MCU_B1.c: 1077: Memory.Data[address] = data;
 12247  1B2B  0820               	movf	setMemory_Data@data,w
 12248  1B2C  00A1               	movwf	??_setMemory_Data
 12249  1B2D  0822               	movf	setMemory_Data@address,w
 12250  1B2E  3E20               	addlw	_Memory& (0+255)
 12251  1B2F  0086               	movwf	6
 12252  1B30  3002               	movlw	2	; select bank4/5
 12253  1B31  0087               	movwf	7
 12254  1B32  0821               	movf	??_setMemory_Data,w
 12255  1B33  0081               	movwf	1
 12256  1B34  0008               	return
 12257  1B35                     __end_of_setMemory_Data:	
 12258                           
 12259                           	psect	text70
 12260  1104                     __ptext70:	
 12261 ;; *************** function _Flash_Memory_Write *****************
 12262 ;; Defined at:
 12263 ;;		line 1009 in file "../src/MCU_B1.c"
 12264 ;; Parameters:    Size  Location     Type
 12265 ;;		None
 12266 ;; Auto vars:     Size  Location     Type
 12267 ;;  i               1    1[BANK0 ] unsigned char 
 12268 ;; Return value:  Size  Location     Type
 12269 ;;		None               void
 12270 ;; Registers used:
 12271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12272 ;; Tracked objects:
 12273 ;;		On entry : 0/0
 12274 ;;		On exit  : 0/0
 12275 ;;		Unchanged: 0/0
 12276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12281 ;;Total ram usage:        2 bytes
 12282 ;; Hardware stack levels used:    1
 12283 ;; Hardware stack levels required when called:    6
 12284 ;; This function calls:
 12285 ;;		_Flash_Memory_Unlock
 12286 ;; This function is called by:
 12287 ;;		_Flash_Memory_Initialization
 12288 ;;		_Flash_Memory_Modify
 12289 ;; This function uses a non-reentrant model
 12290 ;;
 12291                           
 12292                           
 12293                           ;psect for function _Flash_Memory_Write
 12294  1104                     _Flash_Memory_Write:	
 12295                           
 12296                           ;MCU_B1.c: 1010: char i = 0;
 12297                           
 12298                           ;incstack = 0
 12299                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12300  1104  0020               	movlb	0	; select bank0
 12301  1105  01A1               	clrf	Flash_Memory_Write@i
 12302                           
 12303                           ;MCU_B1.c: 1011: CFGS = 0;
 12304  1106  0023               	movlb	3	; select bank3
 12305  1107  1315               	bcf	21,6	;volatile
 12306                           
 12307                           ;MCU_B1.c: 1012: PMADRH = 0x30;
 12308  1108  3030               	movlw	48
 12309  1109  0092               	movwf	18	;volatile
 12310                           
 12311                           ;MCU_B1.c: 1013: PMDATH = 0;
 12312  110A  0194               	clrf	20	;volatile
 12313                           
 12314                           ;MCU_B1.c: 1014: FREE = 0;
 12315  110B  1215               	bcf	21,4	;volatile
 12316                           
 12317                           ;MCU_B1.c: 1015: LWLO = 1;
 12318  110C  1695               	bsf	21,5	;volatile
 12319                           
 12320                           ;MCU_B1.c: 1016: WREN = 1;
 12321  110D  1515               	bsf	21,2	;volatile
 12322                           
 12323                           ;MCU_B1.c: 1017: for (i = 0; i < 32; i++) {
 12324  110E  0020               	movlb	0	; select bank0
 12325  110F  01A1               	clrf	Flash_Memory_Write@i
 12326  1110  3020               	movlw	32
 12327  1111  0221               	subwf	Flash_Memory_Write@i,w
 12328  1112  1803               	btfsc	3,0
 12329  1113  292C               	goto	l1315
 12330  1114                     l7053:	
 12331                           
 12332                           ;MCU_B1.c: 1018: PMADRL = i;
 12333  1114  0821               	movf	Flash_Memory_Write@i,w
 12334  1115  0023               	movlb	3	; select bank3
 12335  1116  0091               	movwf	17	;volatile
 12336                           
 12337                           ;MCU_B1.c: 1019: PMDATL = Memory.Data[i];
 12338  1117  0020               	movlb	0	; select bank0
 12339  1118  0821               	movf	Flash_Memory_Write@i,w
 12340  1119  3E20               	addlw	_Memory& (0+255)
 12341  111A  0086               	movwf	6
 12342  111B  3002               	movlw	2	; select bank4/5
 12343  111C  0087               	movwf	7
 12344  111D  0801               	movf	1,w
 12345  111E  0023               	movlb	3	; select bank3
 12346  111F  0093               	movwf	19	;volatile
 12347                           
 12348                           ;MCU_B1.c: 1020: Flash_Memory_Unlock();
 12349  1120  319A  22FE  3191   	fcall	_Flash_Memory_Unlock
 12350  1123  3001               	movlw	1
 12351  1124  0020               	movlb	0	; select bank0
 12352  1125  00A0               	movwf	??_Flash_Memory_Write
 12353  1126  0820               	movf	??_Flash_Memory_Write,w
 12354  1127  07A1               	addwf	Flash_Memory_Write@i,f
 12355  1128  3020               	movlw	32
 12356  1129  0221               	subwf	Flash_Memory_Write@i,w
 12357  112A  1C03               	skipc
 12358  112B  2914               	goto	l7053
 12359  112C                     l1315:	
 12360                           
 12361                           ;MCU_B1.c: 1021: }
 12362                           ;MCU_B1.c: 1022: LWLO = 0;
 12363  112C  0023               	movlb	3	; select bank3
 12364  112D  1295               	bcf	21,5	;volatile
 12365                           
 12366                           ;MCU_B1.c: 1023: Flash_Memory_Unlock();
 12367  112E  319A  22FE         	fcall	_Flash_Memory_Unlock
 12368                           
 12369                           ;MCU_B1.c: 1024: WREN = 0;
 12370  1130  0023               	movlb	3	; select bank3
 12371  1131  1115               	bcf	21,2	;volatile
 12372  1132  0008               	return
 12373  1133                     __end_of_Flash_Memory_Write:	
 12374                           
 12375                           	psect	text71
 12376  1AFE                     __ptext71:	
 12377 ;; *************** function _Flash_Memory_Unlock *****************
 12378 ;; Defined at:
 12379 ;;		line 988 in file "../src/MCU_B1.c"
 12380 ;; Parameters:    Size  Location     Type
 12381 ;;		None
 12382 ;; Auto vars:     Size  Location     Type
 12383 ;;		None
 12384 ;; Return value:  Size  Location     Type
 12385 ;;		None               void
 12386 ;; Registers used:
 12387 ;;		wreg
 12388 ;; Tracked objects:
 12389 ;;		On entry : 0/0
 12390 ;;		On exit  : 0/0
 12391 ;;		Unchanged: 0/0
 12392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12397 ;;Total ram usage:        0 bytes
 12398 ;; Hardware stack levels used:    1
 12399 ;; Hardware stack levels required when called:    5
 12400 ;; This function calls:
 12401 ;;		Nothing
 12402 ;; This function is called by:
 12403 ;;		_Flash_Memory_Write
 12404 ;;		_Flash_Memory_Erasing
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           
 12409                           ;psect for function _Flash_Memory_Unlock
 12410  1AFE                     _Flash_Memory_Unlock:	
 12411                           
 12412                           ;MCU_B1.c: 989: PMCON2 = 0x55;
 12413                           
 12414                           ;incstack = 0
 12415                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12416  1AFE  3055               	movlw	85
 12417  1AFF  0023               	movlb	3	; select bank3
 12418  1B00  0096               	movwf	22	;volatile
 12419                           
 12420                           ;MCU_B1.c: 990: PMCON2 = 0xaa;
 12421  1B01  30AA               	movlw	170
 12422  1B02  0096               	movwf	22	;volatile
 12423                           
 12424                           ;MCU_B1.c: 991: WR = 1;
 12425  1B03  1495               	bsf	21,1	;volatile
 12426                           
 12427                           ;MCU_B1.c: 992: __nop();
 12428  1B04  0000               	nop
 12429                           
 12430                           ;MCU_B1.c: 993: __nop();
 12431  1B05  0000               	nop
 12432  1B06  0008               	return
 12433  1B07                     __end_of_Flash_Memory_Unlock:	
 12434                           
 12435                           	psect	text72
 12436  1DEF                     __ptext72:	
 12437 ;; *************** function _Flash_Memory_Read *****************
 12438 ;; Defined at:
 12439 ;;		line 997 in file "../src/MCU_B1.c"
 12440 ;; Parameters:    Size  Location     Type
 12441 ;;  address         1    wreg     unsigned char 
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;  address         1    2[BANK0 ] unsigned char 
 12444 ;;  ret             1    3[BANK0 ] unsigned char 
 12445 ;;  i               1    1[BANK0 ] unsigned char 
 12446 ;; Return value:  Size  Location     Type
 12447 ;;                  1    wreg      unsigned char 
 12448 ;; Registers used:
 12449 ;;		wreg, status,2
 12450 ;; Tracked objects:
 12451 ;;		On entry : 0/0
 12452 ;;		On exit  : 0/0
 12453 ;;		Unchanged: 0/0
 12454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;Total ram usage:        4 bytes
 12460 ;; Hardware stack levels used:    1
 12461 ;; Hardware stack levels required when called:    5
 12462 ;; This function calls:
 12463 ;;		Nothing
 12464 ;; This function is called by:
 12465 ;;		_Flash_Memory_Initialization
 12466 ;;		_Flash_Memory_Modify
 12467 ;; This function uses a non-reentrant model
 12468 ;;
 12469                           
 12470                           
 12471                           ;psect for function _Flash_Memory_Read
 12472  1DEF                     _Flash_Memory_Read:	
 12473                           
 12474                           ;incstack = 0
 12475                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12476                           ;Flash_Memory_Read@address stored from wreg
 12477  1DEF  0020               	movlb	0	; select bank0
 12478  1DF0  00A2               	movwf	Flash_Memory_Read@address
 12479                           
 12480                           ;MCU_B1.c: 998: char i = 0, ret = 0;
 12481  1DF1  01A1               	clrf	Flash_Memory_Read@i
 12482  1DF2  01A3               	clrf	Flash_Memory_Read@ret
 12483                           
 12484                           ;MCU_B1.c: 999: PMADRH = 0x30;
 12485  1DF3  3030               	movlw	48
 12486  1DF4  0023               	movlb	3	; select bank3
 12487  1DF5  0092               	movwf	18	;volatile
 12488                           
 12489                           ;MCU_B1.c: 1000: PMADRL = address;
 12490  1DF6  0020               	movlb	0	; select bank0
 12491  1DF7  0822               	movf	Flash_Memory_Read@address,w
 12492  1DF8  0023               	movlb	3	; select bank3
 12493  1DF9  0091               	movwf	17	;volatile
 12494                           
 12495                           ;MCU_B1.c: 1001: CFGS = 0;
 12496  1DFA  1315               	bcf	21,6	;volatile
 12497                           
 12498                           ;MCU_B1.c: 1002: RD = 1;
 12499  1DFB  1415               	bsf	21,0	;volatile
 12500                           
 12501                           ;MCU_B1.c: 1003: i = PMDATH;
 12502  1DFC  0814               	movf	20,w	;volatile
 12503  1DFD  0020               	movlb	0	; select bank0
 12504  1DFE  00A0               	movwf	??_Flash_Memory_Read
 12505  1DFF  0820               	movf	??_Flash_Memory_Read,w
 12506  1E00  00A1               	movwf	Flash_Memory_Read@i
 12507                           
 12508                           ;MCU_B1.c: 1004: ret = PMDATL;
 12509  1E01  0023               	movlb	3	; select bank3
 12510  1E02  0813               	movf	19,w	;volatile
 12511  1E03  0020               	movlb	0	; select bank0
 12512  1E04  00A0               	movwf	??_Flash_Memory_Read
 12513  1E05  0820               	movf	??_Flash_Memory_Read,w
 12514  1E06  00A3               	movwf	Flash_Memory_Read@ret
 12515                           
 12516                           ;MCU_B1.c: 1005: return ret;
 12517  1E07  0823               	movf	Flash_Memory_Read@ret,w
 12518  1E08  0008               	return
 12519  1E09                     __end_of_Flash_Memory_Read:	
 12520                           
 12521                           	psect	text73
 12522  1DD5                     __ptext73:	
 12523 ;; *************** function _Exception_Main *****************
 12524 ;; Defined at:
 12525 ;;		line 488 in file "../src/main_B1.c"
 12526 ;; Parameters:    Size  Location     Type
 12527 ;;		None
 12528 ;; Auto vars:     Size  Location     Type
 12529 ;;  error           1    8[BANK0 ] unsigned char 
 12530 ;; Return value:  Size  Location     Type
 12531 ;;		None               void
 12532 ;; Registers used:
 12533 ;;		wreg, status,2, status,0, pclath, cstack
 12534 ;; Tracked objects:
 12535 ;;		On entry : 0/0
 12536 ;;		On exit  : 0/0
 12537 ;;		Unchanged: 0/0
 12538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;Total ram usage:        2 bytes
 12544 ;; Hardware stack levels used:    1
 12545 ;; Hardware stack levels required when called:    6
 12546 ;; This function calls:
 12547 ;;		_getMain_All_Error_Status
 12548 ;; This function is called by:
 12549 ;;		_main
 12550 ;; This function uses a non-reentrant model
 12551 ;;
 12552                           
 12553                           
 12554                           ;psect for function _Exception_Main
 12555  1DD5                     _Exception_Main:	
 12556                           
 12557                           ;main_B1.c: 489: char error = getMain_All_Error_Status(0);
 12558                           
 12559                           ;incstack = 0
 12560                           ; Regs used in _Exception_Main: [wreg+status,2+status,0+pclath+cstack]
 12561  1DD5  3000               	movlw	0
 12562  1DD6  3191  2165  319D   	fcall	_getMain_All_Error_Status
 12563  1DD9  0020               	movlb	0	; select bank0
 12564  1DDA  00A7               	movwf	??_Exception_Main
 12565  1DDB  0827               	movf	??_Exception_Main,w
 12566  1DDC  00A8               	movwf	Exception_Main@error
 12567                           
 12568                           ;main_B1.c: 491: if (myMain.Error_Run == 1) {
 12569  1DDD  0021               	movlb	1	; select bank1
 12570  1DDE  1DAB               	btfss	(_myMain^(0+128)+11),3
 12571  1DDF  2DE7               	goto	l8363
 12572                           
 12573                           ;main_B1.c: 492: if (error == 0) {
 12574  1DE0  0020               	movlb	0	; select bank0
 12575  1DE1  08A8               	movf	Exception_Main@error,f
 12576  1DE2  1D03               	skipz
 12577  1DE3  0008               	return
 12578                           
 12579                           ;main_B1.c: 493: myMain.Error_Run = 0;
 12580  1DE4  0021               	movlb	1	; select bank1
 12581  1DE5  11AB               	bcf	(_myMain^(0+128)+11),3
 12582                           
 12583                           ;main_B1.c: 498: }
 12584                           ;main_B1.c: 499: } else {
 12585  1DE6  0008               	return
 12586  1DE7                     l8363:	
 12587                           
 12588                           ;main_B1.c: 500: if (error != 0) {
 12589  1DE7  0020               	movlb	0	; select bank0
 12590  1DE8  0828               	movf	Exception_Main@error,w
 12591  1DE9  1903               	btfsc	3,2
 12592  1DEA  0008               	return
 12593                           
 12594                           ;main_B1.c: 501: myMain.Error_Run = 1;
 12595  1DEB  0021               	movlb	1	; select bank1
 12596  1DEC  15AB               	bsf	(_myMain^(0+128)+11),3
 12597  1DED  0020               	movlb	0	; select bank0
 12598  1DEE  0008               	return
 12599  1DEF                     __end_of_Exception_Main:	
 12600                           
 12601                           	psect	text74
 12602  1198                     __ptext74:	
 12603 ;; *************** function _DimmerLights_Main *****************
 12604 ;; Defined at:
 12605 ;;		line 390 in file "../src/Dimmer_B1.c"
 12606 ;; Parameters:    Size  Location     Type
 12607 ;;		None
 12608 ;; Auto vars:     Size  Location     Type
 12609 ;;		None
 12610 ;; Return value:  Size  Location     Type
 12611 ;;		None               void
 12612 ;; Registers used:
 12613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12614 ;; Tracked objects:
 12615 ;;		On entry : 0/0
 12616 ;;		On exit  : 0/0
 12617 ;;		Unchanged: 0/0
 12618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;Total ram usage:        4 bytes
 12624 ;; Hardware stack levels used:    1
 12625 ;; Hardware stack levels required when called:   10
 12626 ;; This function calls:
 12627 ;;		_getLoad_OK
 12628 ;;		_getMain_All_Error_Status
 12629 ;;		_getMain_LightsStatus
 12630 ;;		_setDimmerLights_Main
 12631 ;; This function is called by:
 12632 ;;		_main
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           
 12637                           ;psect for function _DimmerLights_Main
 12638  1198                     _DimmerLights_Main:	
 12639                           
 12640                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 12641                           
 12642                           ;incstack = 0
 12643                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12644  1198  3000               	movlw	0
 12645  1199  3191  2165  3191   	fcall	_getMain_All_Error_Status
 12646  119C  3800               	iorlw	0
 12647  119D  1D03               	skipz
 12648  119E  29C2               	goto	l778
 12649                           
 12650                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 12651  119F  0021               	movlb	1	; select bank1
 12652  11A0  1CC6               	btfss	_Dimmer^(0+128),1	;volatile
 12653  11A1  29C4               	goto	l7955
 12654                           
 12655                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12656  11A2  319A  22DD  3191   	fcall	_getLoad_OK
 12657  11A5  3A01               	xorlw	1
 12658  11A6  1903               	skipnz
 12659  11A7  29B9               	goto	l7951
 12660  11A8  3190  20D7  3191   	fcall	_getMain_LightsStatus
 12661  11AB  3A00               	xorlw	0
 12662  11AC  1903               	skipnz
 12663  11AD  29B9               	goto	l7951
 12664  11AE  0021               	movlb	1	; select bank1
 12665  11AF  0C46               	rrf	_Dimmer^(0+128),w	;volatile
 12666  11B0  3901               	andlw	1
 12667  11B1  0020               	movlb	0	; select bank0
 12668  11B2  00E7               	movwf	??_DimmerLights_Main
 12669  11B3  01E8               	clrf	??_DimmerLights_Main+1
 12670  11B4  0867               	movf	??_DimmerLights_Main,w
 12671  11B5  00E9               	movwf	_DimmerLights_Main$2310
 12672  11B6  0868               	movf	??_DimmerLights_Main+1,w
 12673  11B7  00EA               	movwf	_DimmerLights_Main$2310+1
 12674  11B8  29BC               	goto	l7953
 12675  11B9                     l7951:	
 12676  11B9  0020               	movlb	0	; select bank0
 12677  11BA  01E9               	clrf	_DimmerLights_Main$2310
 12678  11BB  01EA               	clrf	_DimmerLights_Main$2310+1
 12679  11BC                     l7953:	
 12680  11BC  0869               	movf	_DimmerLights_Main$2310,w
 12681  11BD  0021               	movlb	1	; select bank1
 12682  11BE  10C6               	bcf	_Dimmer^(0+128),1	;volatile
 12683  11BF  1D03               	skipz
 12684  11C0  14C6               	bsf	_Dimmer^(0+128),1	;volatile
 12685                           
 12686                           ;Dimmer_B1.c: 395: }
 12687                           ;Dimmer_B1.c: 396: } else {
 12688  11C1  29C4               	goto	l7955
 12689  11C2                     l778:	
 12690                           
 12691                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 12692  11C2  0021               	movlb	1	; select bank1
 12693  11C3  10C6               	bcf	_Dimmer^(0+128),1	;volatile
 12694  11C4                     l7955:	
 12695                           
 12696                           ;Dimmer_B1.c: 398: }
 12697                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 12698  11C4  3001               	movlw	1
 12699  11C5  3196  2638  3191   	fcall	_setDimmerLights_Main
 12700                           
 12701                           ;Dimmer_B1.c: 406: setDimmerLights_Main(2);
 12702  11C8  3002               	movlw	2
 12703  11C9  3196  2638         	fcall	_setDimmerLights_Main
 12704  11CB  0008               	return
 12705  11CC                     __end_of_DimmerLights_Main:	
 12706                           
 12707                           	psect	text75
 12708  1638                     __ptext75:	
 12709 ;; *************** function _setDimmerLights_Main *****************
 12710 ;; Defined at:
 12711 ;;		line 416 in file "../src/Dimmer_B1.c"
 12712 ;; Parameters:    Size  Location     Type
 12713 ;;  lights          1    wreg     unsigned char 
 12714 ;; Auto vars:     Size  Location     Type
 12715 ;;  lights          1   70[BANK0 ] unsigned char 
 12716 ;; Return value:  Size  Location     Type
 12717 ;;		None               void
 12718 ;; Registers used:
 12719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12720 ;; Tracked objects:
 12721 ;;		On entry : 0/0
 12722 ;;		On exit  : 0/0
 12723 ;;		Unchanged: 0/0
 12724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;Total ram usage:        1 bytes
 12730 ;; Hardware stack levels used:    1
 12731 ;; Hardware stack levels required when called:    9
 12732 ;; This function calls:
 12733 ;;		_DimmerLightsPointSelect
 12734 ;;		_setBuz
 12735 ;;		_setDimmerLights
 12736 ;;		_setDimmerLights_Adj
 12737 ;; This function is called by:
 12738 ;;		_DimmerLights_Main
 12739 ;; This function uses a non-reentrant model
 12740 ;;
 12741                           
 12742                           
 12743                           ;psect for function _setDimmerLights_Main
 12744  1638                     _setDimmerLights_Main:	
 12745                           
 12746                           ;incstack = 0
 12747                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12748                           ;setDimmerLights_Main@lights stored from wreg
 12749  1638  0020               	movlb	0	; select bank0
 12750  1639  00E6               	movwf	setDimmerLights_Main@lights
 12751                           
 12752                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 12753  163A  0866               	movf	setDimmerLights_Main@lights,w
 12754  163B  319C  2446  3196   	fcall	_DimmerLightsPointSelect
 12755                           
 12756                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 12757  163E  0020               	movlb	0	; select bank0
 12758  163F  086F               	movf	_DimmerLights,w
 12759  1640  3E0A               	addlw	10
 12760  1641  0086               	movwf	6
 12761  1642  3001               	movlw	1	; select bank2/3
 12762  1643  0087               	movwf	7
 12763  1644  1C81               	btfss	1,1
 12764  1645  2E63               	goto	l7399
 12765                           
 12766                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 12767  1646  0021               	movlb	1	; select bank1
 12768  1647  18C6               	btfsc	_Dimmer^(0+128),1	;volatile
 12769  1648  0008               	return
 12770                           
 12771                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 12772  1649  0020               	movlb	0	; select bank0
 12773  164A  086F               	movf	_DimmerLights,w
 12774  164B  3E0A               	addlw	10
 12775  164C  0086               	movwf	6
 12776  164D  3001               	movlw	1	; select bank2/3
 12777  164E  0087               	movwf	7
 12778  164F  1081               	bcf	1,1
 12779                           
 12780                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 12781  1650  086F               	movf	_DimmerLights,w
 12782  1651  3E0A               	addlw	10
 12783  1652  0086               	movwf	6
 12784  1653  3001               	movlw	1	; select bank2/3
 12785  1654  0087               	movwf	7
 12786  1655  1C01               	btfss	1,0
 12787  1656  2E5D               	goto	l7397
 12788                           
 12789                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 12790  1657  01E2               	clrf	setDimmerLights@status
 12791  1658  0AE2               	incf	setDimmerLights@status,f
 12792  1659  0866               	movf	setDimmerLights_Main@lights,w
 12793  165A  318C  24D6         	fcall	_setDimmerLights
 12794                           
 12795                           ;Dimmer_B1.c: 425: } else {
 12796  165C  0008               	return
 12797  165D                     l7397:	
 12798                           
 12799                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 12800  165D  0020               	movlb	0	; select bank0
 12801  165E  01E2               	clrf	setDimmerLights@status
 12802  165F  0866               	movf	setDimmerLights_Main@lights,w
 12803  1660  318C  24D6         	fcall	_setDimmerLights
 12804                           
 12805                           ;Dimmer_B1.c: 427: }
 12806                           ;Dimmer_B1.c: 428: }
 12807                           ;Dimmer_B1.c: 429: } else {
 12808  1662  0008               	return
 12809  1663                     l7399:	
 12810                           
 12811                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 12812  1663  0020               	movlb	0	; select bank0
 12813  1664  086F               	movf	_DimmerLights,w
 12814  1665  3E0A               	addlw	10
 12815  1666  0086               	movwf	6
 12816  1667  3001               	movlw	1	; select bank2/3
 12817  1668  0087               	movwf	7
 12818  1669  1D81               	btfss	1,3
 12819  166A  0008               	return
 12820                           
 12821                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 12822  166B  0021               	movlb	1	; select bank1
 12823  166C  18C6               	btfsc	_Dimmer^(0+128),1	;volatile
 12824  166D  0008               	return
 12825                           
 12826                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 12827  166E  0020               	movlb	0	; select bank0
 12828  166F  086F               	movf	_DimmerLights,w
 12829  1670  3E0A               	addlw	10
 12830  1671  0086               	movwf	6
 12831  1672  3001               	movlw	1	; select bank2/3
 12832  1673  0087               	movwf	7
 12833  1674  1181               	bcf	1,3
 12834                           
 12835                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 12836  1675  086F               	movf	_DimmerLights,w
 12837  1676  3E0A               	addlw	10
 12838  1677  0086               	movwf	6
 12839  1678  3001               	movlw	1	; select bank2/3
 12840  1679  0087               	movwf	7
 12841  167A  1D01               	btfss	1,2
 12842  167B  2E8B               	goto	l7409
 12843                           
 12844                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 12845  167C  01E2               	clrf	setDimmerLights_Adj@status
 12846  167D  0AE2               	incf	setDimmerLights_Adj@status,f
 12847  167E  0866               	movf	setDimmerLights_Main@lights,w
 12848  167F  318A  2296  3196   	fcall	_setDimmerLights_Adj
 12849                           
 12850                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 12851  1682  3064               	movlw	100
 12852  1683  0020               	movlb	0	; select bank0
 12853  1684  00A9               	movwf	setBuz@time
 12854  1685  3000               	movlw	0
 12855  1686  00AA               	movwf	setBuz@time+1
 12856  1687  3001               	movlw	1
 12857  1688  3195  25DF         	fcall	_setBuz
 12858                           
 12859                           ;Dimmer_B1.c: 436: } else {
 12860  168A  0008               	return
 12861  168B                     l7409:	
 12862                           
 12863                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 12864  168B  0020               	movlb	0	; select bank0
 12865  168C  01E2               	clrf	setDimmerLights_Adj@status
 12866  168D  0866               	movf	setDimmerLights_Main@lights,w
 12867  168E  318A  2296         	fcall	_setDimmerLights_Adj
 12868  1690  0008               	return
 12869  1691                     __end_of_setDimmerLights_Main:	
 12870                           
 12871                           	psect	text76
 12872  0A96                     __ptext76:	
 12873 ;; *************** function _setDimmerLights_Adj *****************
 12874 ;; Defined at:
 12875 ;;		line 716 in file "../src/Dimmer_B1.c"
 12876 ;; Parameters:    Size  Location     Type
 12877 ;;  lights          1    wreg     unsigned char 
 12878 ;;  status          1   66[BANK0 ] unsigned char 
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;  lights          1   69[BANK0 ] unsigned char 
 12881 ;; Return value:  Size  Location     Type
 12882 ;;		None               void
 12883 ;; Registers used:
 12884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12890 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;Total ram usage:        4 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    8
 12897 ;; This function calls:
 12898 ;;		_DimmerLightsPointSelect
 12899 ;;		_getMain_All_Error_Status
 12900 ;;		_setPercentValue
 12901 ;;		_setRF_DimmerLights
 12902 ;;		_setTxData
 12903 ;; This function is called by:
 12904 ;;		_setDimmerLights_Main
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           
 12909                           ;psect for function _setDimmerLights_Adj
 12910  0A96                     _setDimmerLights_Adj:	
 12911                           
 12912                           ;incstack = 0
 12913                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12914                           ;setDimmerLights_Adj@lights stored from wreg
 12915  0A96  0020               	movlb	0	; select bank0
 12916  0A97  00E5               	movwf	setDimmerLights_Adj@lights
 12917                           
 12918                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12919  0A98  0865               	movf	setDimmerLights_Adj@lights,w
 12920  0A99  319C  2446  318A   	fcall	_DimmerLightsPointSelect
 12921                           
 12922                           ;Dimmer_B1.c: 718: if (status == 1) {
 12923  0A9C  0020               	movlb	0	; select bank0
 12924  0A9D  0862               	movf	setDimmerLights_Adj@status,w
 12925  0A9E  3A01               	xorlw	1
 12926  0A9F  1D03               	skipz
 12927  0AA0  2AAC               	goto	l6963
 12928                           
 12929                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12930  0AA1  0A6F               	incf	_DimmerLights,w
 12931  0AA2  0086               	movwf	6
 12932  0AA3  3001               	movlw	1	; select bank2/3
 12933  0AA4  0087               	movwf	7
 12934  0AA5  1701               	bsf	1,6
 12935                           
 12936                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12937  0AA6  0A6F               	incf	_DimmerLights,w
 12938  0AA7  0086               	movwf	6
 12939  0AA8  3001               	movlw	1	; select bank2/3
 12940  0AA9  0087               	movwf	7
 12941  0AAA  1681               	bsf	1,5
 12942                           
 12943                           ;Dimmer_B1.c: 721: } else {
 12944  0AAB  0008               	return
 12945  0AAC                     l6963:	
 12946                           
 12947                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12948  0AAC  0A6F               	incf	_DimmerLights,w
 12949  0AAD  0086               	movwf	6
 12950  0AAE  3001               	movlw	1	; select bank2/3
 12951  0AAF  0087               	movwf	7
 12952  0AB0  1F01               	btfss	1,6
 12953  0AB1  0008               	return
 12954                           
 12955                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12956  0AB2  0A6F               	incf	_DimmerLights,w
 12957  0AB3  0086               	movwf	6
 12958  0AB4  3001               	movlw	1	; select bank2/3
 12959  0AB5  0087               	movwf	7
 12960  0AB6  1281               	bcf	1,5
 12961                           
 12962                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12963  0AB7  0A6F               	incf	_DimmerLights,w
 12964  0AB8  0086               	movwf	6
 12965  0AB9  3001               	movlw	1	; select bank2/3
 12966  0ABA  0087               	movwf	7
 12967  0ABB  1301               	bcf	1,6
 12968                           
 12969                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12970  0ABC  086F               	movf	_DimmerLights,w
 12971  0ABD  3E04               	addlw	4
 12972  0ABE  0086               	movwf	6
 12973  0ABF  3001               	movlw	1	; select bank2/3
 12974  0AC0  0087               	movwf	7
 12975  0AC1  0801               	movf	1,w
 12976  0AC2  00E3               	movwf	??_setDimmerLights_Adj
 12977  0AC3  086F               	movf	_DimmerLights,w
 12978  0AC4  3E06               	addlw	6
 12979  0AC5  0086               	movwf	6
 12980  0AC6  3001               	movlw	1	; select bank2/3
 12981  0AC7  0087               	movwf	7
 12982  0AC8  0863               	movf	??_setDimmerLights_Adj,w
 12983  0AC9  0081               	movwf	1
 12984                           
 12985                           ;Dimmer_B1.c: 726: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12986  0ACA  086F               	movf	_DimmerLights,w
 12987  0ACB  3E04               	addlw	4
 12988  0ACC  0086               	movwf	6
 12989  0ACD  3001               	movlw	1	; select bank2/3
 12990  0ACE  0087               	movwf	7
 12991  0ACF  0801               	movf	1,w
 12992  0AD0  3189  21CC  318A   	fcall	_setPercentValue
 12993  0AD3  0020               	movlb	0	; select bank0
 12994  0AD4  00E3               	movwf	??_setDimmerLights_Adj
 12995  0AD5  0865               	movf	setDimmerLights_Adj@lights,w
 12996  0AD6  3E14               	addlw	20
 12997  0AD7  076E               	addwf	_product,w
 12998  0AD8  00E4               	movwf	??_setDimmerLights_Adj+1
 12999  0AD9  0864               	movf	??_setDimmerLights_Adj+1,w
 13000  0ADA  0086               	movwf	6
 13001  0ADB  3002               	movlw	2	; select bank4/5
 13002  0ADC  0087               	movwf	7
 13003  0ADD  0863               	movf	??_setDimmerLights_Adj,w
 13004  0ADE  0081               	movwf	1
 13005                           
 13006                           ;Dimmer_B1.c: 736: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 13007  0ADF  3000               	movlw	0
 13008  0AE0  3191  2165  318A   	fcall	_getMain_All_Error_Status
 13009  0AE3  3A00               	xorlw	0
 13010  0AE4  3000               	movlw	0
 13011  0AE5  1903               	skipnz
 13012  0AE6  3001               	movlw	1
 13013  0AE7  0020               	movlb	0	; select bank0
 13014  0AE8  00E3               	movwf	??_setDimmerLights_Adj
 13015  0AE9  0DE3               	rlf	??_setDimmerLights_Adj,f
 13016  0AEA  0021               	movlb	1	; select bank1
 13017  0AEB  0846               	movf	_Dimmer^(0+128),w	;volatile
 13018  0AEC  0020               	movlb	0	; select bank0
 13019  0AED  0663               	xorwf	??_setDimmerLights_Adj,w
 13020  0AEE  39FD               	andlw	-3
 13021  0AEF  0663               	xorwf	??_setDimmerLights_Adj,w
 13022  0AF0  0021               	movlb	1	; select bank1
 13023  0AF1  00C6               	movwf	_Dimmer^(0+128)	;volatile
 13024                           
 13025                           ;Dimmer_B1.c: 739: setRF_DimmerLights(lights, 1);
 13026  0AF2  0020               	movlb	0	; select bank0
 13027  0AF3  01A0               	clrf	setRF_DimmerLights@on
 13028  0AF4  0AA0               	incf	setRF_DimmerLights@on,f
 13029  0AF5  0865               	movf	setDimmerLights_Adj@lights,w
 13030  0AF6  3197  2748  318A   	fcall	_setRF_DimmerLights
 13031                           
 13032                           ;Dimmer_B1.c: 740: setTxData();
 13033  0AF9  3187  2732         	fcall	_setTxData
 13034  0AFB  0008               	return
 13035  0AFC                     __end_of_setDimmerLights_Adj:	
 13036                           
 13037                           	psect	text77
 13038  0CD6                     __ptext77:	
 13039 ;; *************** function _setDimmerLights *****************
 13040 ;; Defined at:
 13041 ;;		line 611 in file "../src/Dimmer_B1.c"
 13042 ;; Parameters:    Size  Location     Type
 13043 ;;  lights          1    wreg     unsigned char 
 13044 ;;  status          1   66[BANK0 ] unsigned char 
 13045 ;; Auto vars:     Size  Location     Type
 13046 ;;  lights          1   69[BANK0 ] unsigned char 
 13047 ;; Return value:  Size  Location     Type
 13048 ;;		None               void
 13049 ;; Registers used:
 13050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13051 ;; Tracked objects:
 13052 ;;		On entry : 0/0
 13053 ;;		On exit  : 0/0
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13056 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;Total ram usage:        4 bytes
 13061 ;; Hardware stack levels used:    1
 13062 ;; Hardware stack levels required when called:    8
 13063 ;; This function calls:
 13064 ;;		_DimmerLightsPointSelect
 13065 ;;		_getMain_All_Error_Status
 13066 ;;		_setDimmerLights_Line
 13067 ;;		_setLED
 13068 ;;		_setPercentValue
 13069 ;;		_setRF_DimmerLights
 13070 ;;		_setTxData
 13071 ;; This function is called by:
 13072 ;;		_setDimmerLights_Main
 13073 ;; This function uses a non-reentrant model
 13074 ;;
 13075                           
 13076                           
 13077                           ;psect for function _setDimmerLights
 13078  0CD6                     _setDimmerLights:	
 13079                           
 13080                           ;incstack = 0
 13081                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13082                           ;setDimmerLights@lights stored from wreg
 13083  0CD6  0020               	movlb	0	; select bank0
 13084  0CD7  00E5               	movwf	setDimmerLights@lights
 13085                           
 13086                           ;Dimmer_B1.c: 612: DimmerLightsPointSelect(lights);
 13087  0CD8  0865               	movf	setDimmerLights@lights,w
 13088  0CD9  319C  2446  318C   	fcall	_DimmerLightsPointSelect
 13089                           
 13090                           ;Dimmer_B1.c: 615: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 13091  0CDC  3000               	movlw	0
 13092  0CDD  3191  2165  318C   	fcall	_getMain_All_Error_Status
 13093  0CE0  3A00               	xorlw	0
 13094  0CE1  3000               	movlw	0
 13095  0CE2  1903               	skipnz
 13096  0CE3  3001               	movlw	1
 13097  0CE4  0020               	movlb	0	; select bank0
 13098  0CE5  00E3               	movwf	??_setDimmerLights
 13099  0CE6  0DE3               	rlf	??_setDimmerLights,f
 13100  0CE7  0021               	movlb	1	; select bank1
 13101  0CE8  0846               	movf	_Dimmer^(0+128),w	;volatile
 13102  0CE9  0020               	movlb	0	; select bank0
 13103  0CEA  0663               	xorwf	??_setDimmerLights,w
 13104  0CEB  39FD               	andlw	-3
 13105  0CEC  0663               	xorwf	??_setDimmerLights,w
 13106  0CED  0021               	movlb	1	; select bank1
 13107  0CEE  00C6               	movwf	_Dimmer^(0+128)	;volatile
 13108                           
 13109                           ;Dimmer_B1.c: 619: if (status == 1) {
 13110  0CEF  0020               	movlb	0	; select bank0
 13111  0CF0  0862               	movf	setDimmerLights@status,w
 13112  0CF1  3A01               	xorlw	1
 13113  0CF2  1D03               	skipz
 13114  0CF3  2D24               	goto	l6943
 13115                           
 13116                           ;Dimmer_B1.c: 620: DimmerLights->Loop = 1;
 13117  0CF4  086F               	movf	_DimmerLights,w
 13118  0CF5  3E0A               	addlw	10
 13119  0CF6  0086               	movwf	6
 13120  0CF7  3001               	movlw	1	; select bank2/3
 13121  0CF8  0087               	movwf	7
 13122  0CF9  1781               	bsf	1,7
 13123                           
 13124                           ;Dimmer_B1.c: 621: setLED(lights, 0);
 13125  0CFA  01A2               	clrf	setLED@command
 13126  0CFB  0865               	movf	setDimmerLights@lights,w
 13127  0CFC  3188  2000  318C   	fcall	_setLED
 13128                           
 13129                           ;Dimmer_B1.c: 623: setDimmerLights_Line(lights);
 13130  0CFF  0020               	movlb	0	; select bank0
 13131  0D00  0865               	movf	setDimmerLights@lights,w
 13132  0D01  319D  2549  318C   	fcall	_setDimmerLights_Line
 13133                           
 13134                           ;Dimmer_B1.c: 624: DimmerLights->StatusFlag = 1;
 13135  0D04  0020               	movlb	0	; select bank0
 13136  0D05  0A6F               	incf	_DimmerLights,w
 13137  0D06  0086               	movwf	6
 13138  0D07  3001               	movlw	1	; select bank2/3
 13139  0D08  0087               	movwf	7
 13140  0D09  1501               	bsf	1,2
 13141                           
 13142                           ;Dimmer_B1.c: 631: DimmerLights->DimmingValue = ((char)(65*0.8));
 13143  0D0A  3034               	movlw	52
 13144  0D0B  00E3               	movwf	??_setDimmerLights
 13145  0D0C  086F               	movf	_DimmerLights,w
 13146  0D0D  3E04               	addlw	4
 13147  0D0E  0086               	movwf	6
 13148  0D0F  3001               	movlw	1	; select bank2/3
 13149  0D10  0087               	movwf	7
 13150  0D11  0863               	movf	??_setDimmerLights,w
 13151  0D12  0081               	movwf	1
 13152                           
 13153                           ;Dimmer_B1.c: 632: product->Data[(20 + lights)]=setPercentValue(((char)(65*0.8)));
 13154  0D13  3034               	movlw	52
 13155  0D14  3189  21CC  318C   	fcall	_setPercentValue
 13156  0D17  0020               	movlb	0	; select bank0
 13157  0D18  00E3               	movwf	??_setDimmerLights
 13158  0D19  0865               	movf	setDimmerLights@lights,w
 13159  0D1A  3E14               	addlw	20
 13160  0D1B  076E               	addwf	_product,w
 13161  0D1C  00E4               	movwf	??_setDimmerLights+1
 13162  0D1D  0864               	movf	??_setDimmerLights+1,w
 13163  0D1E  0086               	movwf	6
 13164  0D1F  3002               	movlw	2	; select bank4/5
 13165  0D20  0087               	movwf	7
 13166  0D21  0863               	movf	??_setDimmerLights,w
 13167  0D22  0081               	movwf	1
 13168  0D23  2D4C               	goto	l6955
 13169  0D24                     l6943:	
 13170                           ;Dimmer_B1.c: 642: } else {
 13171                           
 13172                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 13173                           
 13174                           
 13175                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 0;
 13176  0D24  0A6F               	incf	_DimmerLights,w
 13177  0D25  0086               	movwf	6
 13178  0D26  3001               	movlw	1	; select bank2/3
 13179  0D27  0087               	movwf	7
 13180  0D28  1101               	bcf	1,2
 13181                           
 13182                           ;Dimmer_B1.c: 644: DimmerLights->Loop = 0;
 13183  0D29  086F               	movf	_DimmerLights,w
 13184  0D2A  3E0A               	addlw	10
 13185  0D2B  0086               	movwf	6
 13186  0D2C  3001               	movlw	1	; select bank2/3
 13187  0D2D  0087               	movwf	7
 13188  0D2E  1381               	bcf	1,7
 13189                           
 13190                           ;Dimmer_B1.c: 645: setLED(lights, 1);
 13191  0D2F  01A2               	clrf	setLED@command
 13192  0D30  0AA2               	incf	setLED@command,f
 13193  0D31  0865               	movf	setDimmerLights@lights,w
 13194  0D32  3188  2000  318C   	fcall	_setLED
 13195                           
 13196                           ;Dimmer_B1.c: 653: DimmerLights->MosfetClose = 1;
 13197  0D35  0020               	movlb	0	; select bank0
 13198  0D36  086F               	movf	_DimmerLights,w
 13199  0D37  3E0A               	addlw	10
 13200  0D38  0086               	movwf	6
 13201  0D39  3001               	movlw	1	; select bank2/3
 13202  0D3A  0087               	movwf	7
 13203  0D3B  1681               	bsf	1,5
 13204                           
 13205                           ;Dimmer_B1.c: 656: DimmerLights->AdjFlag = 0;
 13206  0D3C  0A6F               	incf	_DimmerLights,w
 13207  0D3D  0086               	movwf	6
 13208  0D3E  3001               	movlw	1	; select bank2/3
 13209  0D3F  0087               	movwf	7
 13210  0D40  1301               	bcf	1,6
 13211                           
 13212                           ;Dimmer_B1.c: 657: DimmerLights->AdjStatus = 0;
 13213  0D41  0A6F               	incf	_DimmerLights,w
 13214  0D42  0086               	movwf	6
 13215  0D43  3001               	movlw	1	; select bank2/3
 13216  0D44  0087               	movwf	7
 13217  0D45  1381               	bcf	1,7
 13218                           
 13219                           ;Dimmer_B1.c: 658: DimmerLights->AdjRF = 0;
 13220  0D46  086F               	movf	_DimmerLights,w
 13221  0D47  3E02               	addlw	2
 13222  0D48  0086               	movwf	6
 13223  0D49  3001               	movlw	1	; select bank2/3
 13224  0D4A  0087               	movwf	7
 13225  0D4B  1001               	bcf	1,0
 13226  0D4C                     l6955:	
 13227                           
 13228                           ;Dimmer_B1.c: 659: DimmerLights->DimmingTimeValue = 7;
 13229  0D4C  3007               	movlw	7
 13230  0D4D  00E3               	movwf	??_setDimmerLights
 13231  0D4E  086F               	movf	_DimmerLights,w
 13232  0D4F  3E08               	addlw	8
 13233  0D50  0086               	movwf	6
 13234  0D51  3001               	movlw	1	; select bank2/3
 13235  0D52  0087               	movwf	7
 13236  0D53  0863               	movf	??_setDimmerLights,w
 13237  0D54  0081               	movwf	1
 13238                           
 13239                           ;Dimmer_B1.c: 661: }
 13240                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 13241  0D55  0862               	movf	setDimmerLights@status,w
 13242  0D56  00E3               	movwf	??_setDimmerLights
 13243  0D57  0863               	movf	??_setDimmerLights,w
 13244  0D58  00A0               	movwf	setRF_DimmerLights@on
 13245  0D59  0865               	movf	setDimmerLights@lights,w
 13246  0D5A  3197  2748  318C   	fcall	_setRF_DimmerLights
 13247                           
 13248                           ;Dimmer_B1.c: 663: setTxData();
 13249  0D5D  3187  2732         	fcall	_setTxData
 13250  0D5F  0008               	return
 13251  0D60                     __end_of_setDimmerLights:	
 13252                           
 13253                           	psect	text78
 13254  0732                     __ptext78:	
 13255 ;; *************** function _setTxData *****************
 13256 ;; Defined at:
 13257 ;;		line 208 in file "../src/RF_Control_B1.c"
 13258 ;; Parameters:    Size  Location     Type
 13259 ;;		None
 13260 ;; Auto vars:     Size  Location     Type
 13261 ;;  i               1    0        unsigned char 
 13262 ;; Return value:  Size  Location     Type
 13263 ;;		None               void
 13264 ;; Registers used:
 13265 ;;		wreg, fsr1l, fsr1h
 13266 ;; Tracked objects:
 13267 ;;		On entry : 0/0
 13268 ;;		On exit  : 0/0
 13269 ;;		Unchanged: 0/0
 13270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13274 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13275 ;;Total ram usage:        1 bytes
 13276 ;; Hardware stack levels used:    1
 13277 ;; Hardware stack levels required when called:    5
 13278 ;; This function calls:
 13279 ;;		Nothing
 13280 ;; This function is called by:
 13281 ;;		_setDimmerLights
 13282 ;;		_setDimmerLights_Adj
 13283 ;;		_getRxData
 13284 ;;		_setControl_Lights_Table
 13285 ;;		_setRFSW_Control
 13286 ;;		_setRFSW_AdjControl
 13287 ;; This function uses a non-reentrant model
 13288 ;;
 13289                           
 13290                           
 13291                           ;psect for function _setTxData
 13292  0732                     _setTxData:	
 13293                           
 13294                           ;RF_Control_B1.c: 209: char i;
 13295                           ;RF_Control_B1.c: 210: if (RF1.Enable == 1) {
 13296                           
 13297                           ;incstack = 0
 13298                           ; Regs used in _setTxData: [wregfsr1]
 13299  0732  0021               	movlb	1	; select bank1
 13300  0733  1C3A               	btfss	_RF1^(0+128),0
 13301  0734  0008               	return
 13302                           
 13303                           ;RF_Control_B1.c: 212: if (RF1.TransceiveGO == 0) {
 13304  0735  193A               	btfsc	_RF1^(0+128),2
 13305  0736  0008               	return
 13306                           
 13307                           ;RF_Control_B1.c: 213: RF1.TransceiveGO = 1;
 13308  0737  153A               	bsf	_RF1^(0+128),2
 13309                           
 13310                           ;RF_Control_B1.c: 214: RF1.RunTime = 20;
 13311  0738  3014               	movlw	20
 13312  0739  00C1               	movwf	(_RF1^(0+128)+7)
 13313  073A  3000               	movlw	0
 13314  073B  00C2               	movwf	(_RF1^(0+128)+8)
 13315                           
 13316                           ;RF_Control_B1.c: 226: RF_Data[0] = 0x63;
 13317  073C  3063               	movlw	99
 13318  073D  0020               	movlb	0	; select bank0
 13319  073E  00A0               	movwf	??_setTxData
 13320  073F  0820               	movf	??_setTxData,w
 13321  0740  0023               	movlb	3	; select bank3
 13322  0741  00A0               	movwf	_RF_Data^(0+384)
 13323                           
 13324                           ;RF_Control_B1.c: 227: RF_Data[1] = 0x02;
 13325  0742  3002               	movlw	2
 13326  0743  0020               	movlb	0	; select bank0
 13327  0744  00A0               	movwf	??_setTxData
 13328  0745  0820               	movf	??_setTxData,w
 13329  0746  0023               	movlb	3	; select bank3
 13330  0747  00A1               	movwf	(_RF_Data^(0+384)+1)
 13331                           
 13332                           ;RF_Control_B1.c: 229: RF_Data[2] = product->Data[2];
 13333  0748  0020               	movlb	0	; select bank0
 13334  0749  086E               	movf	_product,w
 13335  074A  0086               	movwf	6
 13336  074B  3002               	movlw	2	; select bank4/5
 13337  074C  0087               	movwf	7
 13338  074D  3002               	movlw	2	; select bank4/5
 13339  074E  3F42               	moviw [2]fsr1
 13340  074F  0023               	movlb	3	; select bank3
 13341  0750  00A2               	movwf	(_RF_Data^(0+384)+2)
 13342                           
 13343                           ;RF_Control_B1.c: 230: RF_Data[3] = product->Data[3];
 13344  0751  0020               	movlb	0	; select bank0
 13345  0752  086E               	movf	_product,w
 13346  0753  0086               	movwf	6
 13347  0754  3002               	movlw	2	; select bank4/5
 13348  0755  0087               	movwf	7
 13349  0756  3002               	movlw	2	; select bank4/5
 13350  0757  3F43               	moviw [3]fsr1
 13351  0758  0023               	movlb	3	; select bank3
 13352  0759  00A3               	movwf	(_RF_Data^(0+384)+3)
 13353                           
 13354                           ;RF_Control_B1.c: 231: RF_Data[4] = product->Data[4];
 13355  075A  0020               	movlb	0	; select bank0
 13356  075B  086E               	movf	_product,w
 13357  075C  0086               	movwf	6
 13358  075D  3002               	movlw	2	; select bank4/5
 13359  075E  0087               	movwf	7
 13360  075F  3002               	movlw	2	; select bank4/5
 13361  0760  3F44               	moviw [4]fsr1
 13362  0761  0023               	movlb	3	; select bank3
 13363  0762  00A4               	movwf	(_RF_Data^(0+384)+4)
 13364                           
 13365                           ;RF_Control_B1.c: 232: RF_Data[5] = product->Data[5];
 13366  0763  0020               	movlb	0	; select bank0
 13367  0764  086E               	movf	_product,w
 13368  0765  0086               	movwf	6
 13369  0766  3002               	movlw	2	; select bank4/5
 13370  0767  0087               	movwf	7
 13371  0768  3002               	movlw	2	; select bank4/5
 13372  0769  3F45               	moviw [5]fsr1
 13373  076A  0023               	movlb	3	; select bank3
 13374  076B  00A5               	movwf	(_RF_Data^(0+384)+5)
 13375                           
 13376                           ;RF_Control_B1.c: 233: RF_Data[6] = product->Data[6];
 13377  076C  0020               	movlb	0	; select bank0
 13378  076D  086E               	movf	_product,w
 13379  076E  0086               	movwf	6
 13380  076F  3002               	movlw	2	; select bank4/5
 13381  0770  0087               	movwf	7
 13382  0771  3002               	movlw	2	; select bank4/5
 13383  0772  3F46               	moviw [6]fsr1
 13384  0773  0023               	movlb	3	; select bank3
 13385  0774  00A6               	movwf	(_RF_Data^(0+384)+6)
 13386                           
 13387                           ;RF_Control_B1.c: 234: RF_Data[7] = product->Data[7];
 13388  0775  0020               	movlb	0	; select bank0
 13389  0776  086E               	movf	_product,w
 13390  0777  0086               	movwf	6
 13391  0778  3002               	movlw	2	; select bank4/5
 13392  0779  0087               	movwf	7
 13393  077A  3002               	movlw	2	; select bank4/5
 13394  077B  3F47               	moviw [7]fsr1
 13395  077C  0023               	movlb	3	; select bank3
 13396  077D  00A7               	movwf	(_RF_Data^(0+384)+7)
 13397                           
 13398                           ;RF_Control_B1.c: 235: RF_Data[8] = product->Data[8];
 13399  077E  0020               	movlb	0	; select bank0
 13400  077F  086E               	movf	_product,w
 13401  0780  0086               	movwf	6
 13402  0781  3002               	movlw	2	; select bank4/5
 13403  0782  0087               	movwf	7
 13404  0783  3002               	movlw	2	; select bank4/5
 13405  0784  3F48               	moviw [8]fsr1
 13406  0785  0023               	movlb	3	; select bank3
 13407  0786  00A8               	movwf	(_RF_Data^(0+384)+8)
 13408                           
 13409                           ;RF_Control_B1.c: 236: RF_Data[9] = product->Data[9];
 13410  0787  0020               	movlb	0	; select bank0
 13411  0788  086E               	movf	_product,w
 13412  0789  0086               	movwf	6
 13413  078A  3002               	movlw	2	; select bank4/5
 13414  078B  0087               	movwf	7
 13415  078C  3002               	movlw	2	; select bank4/5
 13416  078D  3F49               	moviw [9]fsr1
 13417  078E  0023               	movlb	3	; select bank3
 13418  078F  00A9               	movwf	(_RF_Data^(0+384)+9)
 13419                           
 13420                           ;RF_Control_B1.c: 237: RF_Data[10] = product->Data[10];
 13421  0790  0020               	movlb	0	; select bank0
 13422  0791  086E               	movf	_product,w
 13423  0792  0086               	movwf	6
 13424  0793  3002               	movlw	2	; select bank4/5
 13425  0794  0087               	movwf	7
 13426  0795  3002               	movlw	2	; select bank4/5
 13427  0796  3F4A               	moviw [10]fsr1
 13428  0797  0023               	movlb	3	; select bank3
 13429  0798  00AA               	movwf	(_RF_Data^(0+384)+10)
 13430                           
 13431                           ;RF_Control_B1.c: 238: RF_Data[11] = product->Data[11];
 13432  0799  0020               	movlb	0	; select bank0
 13433  079A  086E               	movf	_product,w
 13434  079B  0086               	movwf	6
 13435  079C  3002               	movlw	2	; select bank4/5
 13436  079D  0087               	movwf	7
 13437  079E  3002               	movlw	2	; select bank4/5
 13438  079F  3F4B               	moviw [11]fsr1
 13439  07A0  0023               	movlb	3	; select bank3
 13440  07A1  00AB               	movwf	(_RF_Data^(0+384)+11)
 13441                           
 13442                           ;RF_Control_B1.c: 239: RF_Data[12] = product->Data[12];
 13443  07A2  0020               	movlb	0	; select bank0
 13444  07A3  086E               	movf	_product,w
 13445  07A4  0086               	movwf	6
 13446  07A5  3002               	movlw	2	; select bank4/5
 13447  07A6  0087               	movwf	7
 13448  07A7  3002               	movlw	2	; select bank4/5
 13449  07A8  3F4C               	moviw [12]fsr1
 13450  07A9  0023               	movlb	3	; select bank3
 13451  07AA  00AC               	movwf	(_RF_Data^(0+384)+12)
 13452                           
 13453                           ;RF_Control_B1.c: 240: RF_Data[13] = product->Data[13];
 13454  07AB  0020               	movlb	0	; select bank0
 13455  07AC  086E               	movf	_product,w
 13456  07AD  0086               	movwf	6
 13457  07AE  3002               	movlw	2	; select bank4/5
 13458  07AF  0087               	movwf	7
 13459  07B0  3002               	movlw	2	; select bank4/5
 13460  07B1  3F4D               	moviw [13]fsr1
 13461  07B2  0023               	movlb	3	; select bank3
 13462  07B3  00AD               	movwf	(_RF_Data^(0+384)+13)
 13463                           
 13464                           ;RF_Control_B1.c: 241: RF_Data[14] = product->Data[14];
 13465  07B4  0020               	movlb	0	; select bank0
 13466  07B5  086E               	movf	_product,w
 13467  07B6  0086               	movwf	6
 13468  07B7  3002               	movlw	2	; select bank4/5
 13469  07B8  0087               	movwf	7
 13470  07B9  3002               	movlw	2	; select bank4/5
 13471  07BA  3F4E               	moviw [14]fsr1
 13472  07BB  0023               	movlb	3	; select bank3
 13473  07BC  00AE               	movwf	(_RF_Data^(0+384)+14)
 13474                           
 13475                           ;RF_Control_B1.c: 242: RF_Data[15] = product->Data[15];
 13476  07BD  0020               	movlb	0	; select bank0
 13477  07BE  086E               	movf	_product,w
 13478  07BF  0086               	movwf	6
 13479  07C0  3002               	movlw	2	; select bank4/5
 13480  07C1  0087               	movwf	7
 13481  07C2  3002               	movlw	2	; select bank4/5
 13482  07C3  3F4F               	moviw [15]fsr1
 13483  07C4  0023               	movlb	3	; select bank3
 13484  07C5  00AF               	movwf	(_RF_Data^(0+384)+15)
 13485                           
 13486                           ;RF_Control_B1.c: 243: RF_Data[16] = product->Data[16];
 13487  07C6  0020               	movlb	0	; select bank0
 13488  07C7  086E               	movf	_product,w
 13489  07C8  0086               	movwf	6
 13490  07C9  3002               	movlw	2	; select bank4/5
 13491  07CA  0087               	movwf	7
 13492  07CB  3002               	movlw	2	; select bank4/5
 13493  07CC  3F50               	moviw [16]fsr1
 13494  07CD  0023               	movlb	3	; select bank3
 13495  07CE  00B0               	movwf	(_RF_Data^(0+384)+16)
 13496                           
 13497                           ;RF_Control_B1.c: 244: RF_Data[17] = product->Data[17];
 13498  07CF  0020               	movlb	0	; select bank0
 13499  07D0  086E               	movf	_product,w
 13500  07D1  0086               	movwf	6
 13501  07D2  3002               	movlw	2	; select bank4/5
 13502  07D3  0087               	movwf	7
 13503  07D4  3002               	movlw	2	; select bank4/5
 13504  07D5  3F51               	moviw [17]fsr1
 13505  07D6  0023               	movlb	3	; select bank3
 13506  07D7  00B1               	movwf	(_RF_Data^(0+384)+17)
 13507                           
 13508                           ;RF_Control_B1.c: 245: RF_Data[18] = product->Data[18];
 13509  07D8  0020               	movlb	0	; select bank0
 13510  07D9  086E               	movf	_product,w
 13511  07DA  0086               	movwf	6
 13512  07DB  3002               	movlw	2	; select bank4/5
 13513  07DC  0087               	movwf	7
 13514  07DD  3002               	movlw	2	; select bank4/5
 13515  07DE  3F52               	moviw [18]fsr1
 13516  07DF  0023               	movlb	3	; select bank3
 13517  07E0  00B2               	movwf	(_RF_Data^(0+384)+18)
 13518                           
 13519                           ;RF_Control_B1.c: 246: RF_Data[19] = product->Data[19];
 13520  07E1  0020               	movlb	0	; select bank0
 13521  07E2  086E               	movf	_product,w
 13522  07E3  0086               	movwf	6
 13523  07E4  3002               	movlw	2	; select bank4/5
 13524  07E5  0087               	movwf	7
 13525  07E6  3002               	movlw	2	; select bank4/5
 13526  07E7  3F53               	moviw [19]fsr1
 13527  07E8  0023               	movlb	3	; select bank3
 13528  07E9  00B3               	movwf	(_RF_Data^(0+384)+19)
 13529                           
 13530                           ;RF_Control_B1.c: 247: RF_Data[20] = 210;
 13531  07EA  30D2               	movlw	210
 13532  07EB  0020               	movlb	0	; select bank0
 13533  07EC  00A0               	movwf	??_setTxData
 13534  07ED  0820               	movf	??_setTxData,w
 13535  07EE  0023               	movlb	3	; select bank3
 13536  07EF  00B4               	movwf	(_RF_Data^(0+384)+20)
 13537  07F0  0008               	return
 13538  07F1                     __end_of_setTxData:	
 13539                           
 13540                           	psect	text79
 13541  1748                     __ptext79:	
 13542 ;; *************** function _setRF_DimmerLights *****************
 13543 ;; Defined at:
 13544 ;;		line 485 in file "../src/RF_Control_B1.c"
 13545 ;; Parameters:    Size  Location     Type
 13546 ;;  lights          1    wreg     unsigned char 
 13547 ;;  on              1    0[BANK0 ] unsigned char 
 13548 ;; Auto vars:     Size  Location     Type
 13549 ;;  lights          1    4[BANK0 ] unsigned char 
 13550 ;;  status          1    3[BANK0 ] unsigned char 
 13551 ;; Return value:  Size  Location     Type
 13552 ;;		None               void
 13553 ;; Registers used:
 13554 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13555 ;; Tracked objects:
 13556 ;;		On entry : 0/0
 13557 ;;		On exit  : 0/0
 13558 ;;		Unchanged: 0/0
 13559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13560 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13563 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13564 ;;Total ram usage:        5 bytes
 13565 ;; Hardware stack levels used:    1
 13566 ;; Hardware stack levels required when called:    5
 13567 ;; This function calls:
 13568 ;;		Nothing
 13569 ;; This function is called by:
 13570 ;;		_setDimmerLights
 13571 ;;		_setDimmerLights_Adj
 13572 ;;		_setRFSW_Control
 13573 ;; This function uses a non-reentrant model
 13574 ;;
 13575                           
 13576                           
 13577                           ;psect for function _setRF_DimmerLights
 13578  1748                     _setRF_DimmerLights:	
 13579                           
 13580                           ;incstack = 0
 13581                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13582                           ;setRF_DimmerLights@lights stored from wreg
 13583  1748  0020               	movlb	0	; select bank0
 13584  1749  00A4               	movwf	setRF_DimmerLights@lights
 13585                           
 13586                           ;RF_Control_B1.c: 486: char status = 1;
 13587  174A  01A3               	clrf	setRF_DimmerLights@status
 13588  174B  0AA3               	incf	setRF_DimmerLights@status,f
 13589                           
 13590                           ;RF_Control_B1.c: 487: status <<= (lights - 1);
 13591  174C  0824               	movf	setRF_DimmerLights@lights,w
 13592  174D  3EFF               	addlw	-1
 13593  174E  0A89               	incf	9,f
 13594  174F  2F52               	goto	u5340
 13595  1750                     u5345:	
 13596  1750  1003               	clrc
 13597  1751  0DA3               	rlf	setRF_DimmerLights@status,f
 13598  1752                     u5340:	
 13599  1752  3EFF               	addlw	-1
 13600  1753  1D03               	skipz
 13601  1754  2F50               	goto	u5345
 13602                           
 13603                           ;RF_Control_B1.c: 488: product->Data[11]=lights;
 13604  1755  0824               	movf	setRF_DimmerLights@lights,w
 13605  1756  00A1               	movwf	??_setRF_DimmerLights
 13606  1757  086E               	movf	_product,w
 13607  1758  3E0B               	addlw	11
 13608  1759  0086               	movwf	6
 13609  175A  3002               	movlw	2	; select bank4/5
 13610  175B  0087               	movwf	7
 13611  175C  0821               	movf	??_setRF_DimmerLights,w
 13612  175D  0081               	movwf	1
 13613                           
 13614                           ;RF_Control_B1.c: 496: product->Data[9]=product->Data[20 + lights];
 13615  175E  0824               	movf	setRF_DimmerLights@lights,w
 13616  175F  3E14               	addlw	20
 13617  1760  076E               	addwf	_product,w
 13618  1761  00A1               	movwf	??_setRF_DimmerLights
 13619  1762  0821               	movf	??_setRF_DimmerLights,w
 13620  1763  0086               	movwf	6
 13621  1764  3002               	movlw	2	; select bank4/5
 13622  1765  0087               	movwf	7
 13623  1766  0801               	movf	1,w
 13624  1767  00A2               	movwf	??_setRF_DimmerLights+1
 13625  1768  086E               	movf	_product,w
 13626  1769  3E09               	addlw	9
 13627  176A  0086               	movwf	6
 13628  176B  3002               	movlw	2	; select bank4/5
 13629  176C  0087               	movwf	7
 13630  176D  0822               	movf	??_setRF_DimmerLights+1,w
 13631  176E  0081               	movwf	1
 13632                           
 13633                           ;RF_Control_B1.c: 497: product->Data[17]=product->Data[26 + lights];
 13634  176F  0824               	movf	setRF_DimmerLights@lights,w
 13635  1770  3E1A               	addlw	26
 13636  1771  076E               	addwf	_product,w
 13637  1772  00A1               	movwf	??_setRF_DimmerLights
 13638  1773  0821               	movf	??_setRF_DimmerLights,w
 13639  1774  0086               	movwf	6
 13640  1775  3002               	movlw	2	; select bank4/5
 13641  1776  0087               	movwf	7
 13642  1777  0801               	movf	1,w
 13643  1778  00A2               	movwf	??_setRF_DimmerLights+1
 13644  1779  086E               	movf	_product,w
 13645  177A  3E11               	addlw	17
 13646  177B  0086               	movwf	6
 13647  177C  3002               	movlw	2	; select bank4/5
 13648  177D  0087               	movwf	7
 13649  177E  0822               	movf	??_setRF_DimmerLights+1,w
 13650  177F  0081               	movwf	1
 13651                           
 13652                           ;RF_Control_B1.c: 498: if (on == 1) {
 13653  1780  0820               	movf	setRF_DimmerLights@on,w
 13654  1781  3A01               	xorlw	1
 13655  1782  1D03               	skipz
 13656  1783  2F94               	goto	l6375
 13657                           
 13658                           ;RF_Control_B1.c: 499: product->Data[15]=(product->Data[15] | status);
 13659  1784  086E               	movf	_product,w
 13660  1785  3E0F               	addlw	15
 13661  1786  0086               	movwf	6
 13662  1787  3002               	movlw	2	; select bank4/5
 13663  1788  0087               	movwf	7
 13664  1789  0801               	movf	1,w
 13665  178A  0423               	iorwf	setRF_DimmerLights@status,w
 13666  178B  00A1               	movwf	??_setRF_DimmerLights
 13667  178C  086E               	movf	_product,w
 13668  178D  3E0F               	addlw	15
 13669  178E  0086               	movwf	6
 13670  178F  3002               	movlw	2	; select bank4/5
 13671  1790  0087               	movwf	7
 13672  1791  0821               	movf	??_setRF_DimmerLights,w
 13673  1792  0081               	movwf	1
 13674                           
 13675                           ;RF_Control_B1.c: 500: } else {
 13676  1793  0008               	return
 13677  1794                     l6375:	
 13678                           
 13679                           ;RF_Control_B1.c: 501: product->Data[15]=(product->Data[15]&(~status));
 13680  1794  086E               	movf	_product,w
 13681  1795  3E0F               	addlw	15
 13682  1796  0086               	movwf	6
 13683  1797  3002               	movlw	2	; select bank4/5
 13684  1798  0087               	movwf	7
 13685  1799  0923               	comf	setRF_DimmerLights@status,w
 13686  179A  0501               	andwf	1,w
 13687  179B  00A1               	movwf	??_setRF_DimmerLights
 13688  179C  086E               	movf	_product,w
 13689  179D  3E0F               	addlw	15
 13690  179E  0086               	movwf	6
 13691  179F  3002               	movlw	2	; select bank4/5
 13692  17A0  0087               	movwf	7
 13693  17A1  0821               	movf	??_setRF_DimmerLights,w
 13694  17A2  0081               	movwf	1
 13695  17A3  0008               	return
 13696  17A4                     __end_of_setRF_DimmerLights:	
 13697                           
 13698                           	psect	text80
 13699  09CC                     __ptext80:	
 13700 ;; *************** function _setPercentValue *****************
 13701 ;; Defined at:
 13702 ;;		line 874 in file "../src/Dimmer_B1.c"
 13703 ;; Parameters:    Size  Location     Type
 13704 ;;  value           1    wreg     unsigned char 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;  value           1   62[BANK0 ] unsigned char 
 13707 ;;  i               3   63[BANK0 ] float 
 13708 ;; Return value:  Size  Location     Type
 13709 ;;                  1    wreg      unsigned char 
 13710 ;; Registers used:
 13711 ;;		wreg, status,2, status,0, pclath, cstack
 13712 ;; Tracked objects:
 13713 ;;		On entry : 0/0
 13714 ;;		On exit  : 0/0
 13715 ;;		Unchanged: 0/0
 13716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13718 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13719 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;Total ram usage:        6 bytes
 13722 ;; Hardware stack levels used:    1
 13723 ;; Hardware stack levels required when called:    7
 13724 ;; This function calls:
 13725 ;;		___awtoft
 13726 ;;		___ftadd
 13727 ;;		___ftdiv
 13728 ;;		___ftneg
 13729 ;;		___fttol
 13730 ;; This function is called by:
 13731 ;;		_setDimmerLights
 13732 ;;		_setDimmerLights_Adj
 13733 ;;		_Flash_Memory_Initialization
 13734 ;; This function uses a non-reentrant model
 13735 ;;
 13736                           
 13737                           
 13738                           ;psect for function _setPercentValue
 13739  09CC                     _setPercentValue:	
 13740                           
 13741                           ;incstack = 0
 13742                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13743                           ;setPercentValue@value stored from wreg
 13744  09CC  0020               	movlb	0	; select bank0
 13745  09CD  00DE               	movwf	setPercentValue@value
 13746                           
 13747                           ;Dimmer_B1.c: 882: float i = ((char)(65*0.8)) - ((char)(15*0.8));
 13748  09CE  3000               	movlw	0
 13749  09CF  00DF               	movwf	setPercentValue@i
 13750  09D0  3020               	movlw	32
 13751  09D1  00E0               	movwf	setPercentValue@i+1
 13752  09D2  3042               	movlw	66
 13753  09D3  00E1               	movwf	setPercentValue@i+2
 13754                           
 13755                           ;Dimmer_B1.c: 883: i /= 100;
 13756  09D4  3000               	movlw	0
 13757  09D5  00AE               	movwf	___ftdiv@f2
 13758  09D6  30C8               	movlw	200
 13759  09D7  00AF               	movwf	___ftdiv@f2+1
 13760  09D8  3042               	movlw	66
 13761  09D9  00B0               	movwf	___ftdiv@f2+2
 13762  09DA  085F               	movf	setPercentValue@i,w
 13763  09DB  00B1               	movwf	___ftdiv@f1
 13764  09DC  0860               	movf	setPercentValue@i+1,w
 13765  09DD  00B2               	movwf	___ftdiv@f1+1
 13766  09DE  0861               	movf	setPercentValue@i+2,w
 13767  09DF  00B3               	movwf	___ftdiv@f1+2
 13768  09E0  318D  25F0  3189   	fcall	___ftdiv
 13769  09E3  0020               	movlb	0	; select bank0
 13770  09E4  082E               	movf	?___ftdiv,w
 13771  09E5  00DF               	movwf	setPercentValue@i
 13772  09E6  082F               	movf	?___ftdiv+1,w
 13773  09E7  00E0               	movwf	setPercentValue@i+1
 13774  09E8  0830               	movf	?___ftdiv+2,w
 13775  09E9  00E1               	movwf	setPercentValue@i+2
 13776                           
 13777                           ;Dimmer_B1.c: 885: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 13778  09EA  085E               	movf	setPercentValue@value,w
 13779  09EB  00DC               	movwf	??_setPercentValue
 13780  09EC  01DD               	clrf	??_setPercentValue+1
 13781  09ED  09DC               	comf	??_setPercentValue,f
 13782  09EE  09DD               	comf	??_setPercentValue+1,f
 13783  09EF  0ADC               	incf	??_setPercentValue,f
 13784  09F0  1903               	skipnz
 13785  09F1  0ADD               	incf	??_setPercentValue+1,f
 13786  09F2  085C               	movf	??_setPercentValue,w
 13787  09F3  3E34               	addlw	52
 13788  09F4  00A8               	movwf	___awtoft@c
 13789  09F5  3000               	movlw	0
 13790  09F6  3D5D               	addwfc	??_setPercentValue+1,w
 13791  09F7  00A9               	movwf	___awtoft@c+1
 13792  09F8  319E  26FE  3189   	fcall	___awtoft
 13793  09FB  0020               	movlb	0	; select bank0
 13794  09FC  0828               	movf	?___awtoft,w
 13795  09FD  00B1               	movwf	___ftdiv@f1
 13796  09FE  0829               	movf	?___awtoft+1,w
 13797  09FF  00B2               	movwf	___ftdiv@f1+1
 13798  0A00  082A               	movf	?___awtoft+2,w
 13799  0A01  00B3               	movwf	___ftdiv@f1+2
 13800  0A02  085F               	movf	setPercentValue@i,w
 13801  0A03  00AE               	movwf	___ftdiv@f2
 13802  0A04  0860               	movf	setPercentValue@i+1,w
 13803  0A05  00AF               	movwf	___ftdiv@f2+1
 13804  0A06  0861               	movf	setPercentValue@i+2,w
 13805  0A07  00B0               	movwf	___ftdiv@f2+2
 13806  0A08  318D  25F0  3189   	fcall	___ftdiv
 13807  0A0B  0020               	movlb	0	; select bank0
 13808  0A0C  082E               	movf	?___ftdiv,w
 13809  0A0D  00BE               	movwf	___ftneg@f1
 13810  0A0E  082F               	movf	?___ftdiv+1,w
 13811  0A0F  00BF               	movwf	___ftneg@f1+1
 13812  0A10  0830               	movf	?___ftdiv+2,w
 13813  0A11  00C0               	movwf	___ftneg@f1+2
 13814  0A12  319A  22F5  3189   	fcall	___ftneg
 13815  0A15  0020               	movlb	0	; select bank0
 13816  0A16  083E               	movf	?___ftneg,w
 13817  0A17  00C4               	movwf	___ftadd@f2
 13818  0A18  083F               	movf	?___ftneg+1,w
 13819  0A19  00C5               	movwf	___ftadd@f2+1
 13820  0A1A  0840               	movf	?___ftneg+2,w
 13821  0A1B  00C6               	movwf	___ftadd@f2+2
 13822  0A1C  3000               	movlw	0
 13823  0A1D  00C1               	movwf	___ftadd@f1
 13824  0A1E  30C8               	movlw	200
 13825  0A1F  00C2               	movwf	___ftadd@f1+1
 13826  0A20  3042               	movlw	66
 13827  0A21  00C3               	movwf	___ftadd@f1+2
 13828  0A22  3184  2481  3189   	fcall	___ftadd
 13829  0A25  0020               	movlb	0	; select bank0
 13830  0A26  0841               	movf	?___ftadd,w
 13831  0A27  00CE               	movwf	___fttol@f1
 13832  0A28  0842               	movf	?___ftadd+1,w
 13833  0A29  00CF               	movwf	___fttol@f1+1
 13834  0A2A  0843               	movf	?___ftadd+2,w
 13835  0A2B  00D0               	movwf	___fttol@f1+2
 13836  0A2C  318C  244F         	fcall	___fttol
 13837  0A2E  0020               	movlb	0	; select bank0
 13838  0A2F  084E               	movf	?___fttol,w
 13839  0A30  0008               	return
 13840  0A31                     __end_of_setPercentValue:	
 13841                           
 13842                           	psect	text81
 13843  0C4F                     __ptext81:	
 13844 ;; *************** function ___fttol *****************
 13845 ;; Defined at:
 13846 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13847 ;; Parameters:    Size  Location     Type
 13848 ;;  f1              3   46[BANK0 ] float 
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;  lval            4   55[BANK0 ] unsigned long 
 13851 ;;  exp1            1   59[BANK0 ] unsigned char 
 13852 ;;  sign1           1   54[BANK0 ] unsigned char 
 13853 ;; Return value:  Size  Location     Type
 13854 ;;                  4   46[BANK0 ] long 
 13855 ;; Registers used:
 13856 ;;		wreg, status,2, status,0
 13857 ;; Tracked objects:
 13858 ;;		On entry : 0/0
 13859 ;;		On exit  : 0/0
 13860 ;;		Unchanged: 0/0
 13861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13862 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13865 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13866 ;;Total ram usage:       14 bytes
 13867 ;; Hardware stack levels used:    1
 13868 ;; Hardware stack levels required when called:    5
 13869 ;; This function calls:
 13870 ;;		Nothing
 13871 ;; This function is called by:
 13872 ;;		_getPercentValue
 13873 ;;		_setPercentValue
 13874 ;; This function uses a non-reentrant model
 13875 ;;
 13876                           
 13877                           
 13878                           ;psect for function ___fttol
 13879  0C4F                     ___fttol:	
 13880                           
 13881                           ;incstack = 0
 13882                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13883  0C4F  0020               	movlb	0	; select bank0
 13884  0C50  084E               	movf	___fttol@f1,w
 13885  0C51  00D2               	movwf	??___fttol
 13886  0C52  084F               	movf	___fttol@f1+1,w
 13887  0C53  00D3               	movwf	??___fttol+1
 13888  0C54  0850               	movf	___fttol@f1+2,w
 13889  0C55  00D4               	movwf	??___fttol+2
 13890  0C56  1003               	clrc
 13891  0C57  0D53               	rlf	??___fttol+1,w
 13892  0C58  0D54               	rlf	??___fttol+2,w
 13893  0C59  00D5               	movwf	??___fttol+3
 13894  0C5A  0855               	movf	??___fttol+3,w
 13895  0C5B  00DB               	movwf	___fttol@exp1
 13896  0C5C  08DB               	movf	___fttol@exp1,f
 13897  0C5D  1D03               	skipz
 13898  0C5E  2C68               	goto	l6101
 13899  0C5F  3000               	movlw	0
 13900  0C60  00D1               	movwf	?___fttol+3
 13901  0C61  3000               	movlw	0
 13902  0C62  00D0               	movwf	?___fttol+2
 13903  0C63  3000               	movlw	0
 13904  0C64  00CF               	movwf	?___fttol+1
 13905  0C65  3000               	movlw	0
 13906  0C66  00CE               	movwf	?___fttol
 13907  0C67  0008               	return
 13908  0C68                     l6101:	
 13909  0C68  084E               	movf	___fttol@f1,w
 13910  0C69  00D2               	movwf	??___fttol
 13911  0C6A  084F               	movf	___fttol@f1+1,w
 13912  0C6B  00D3               	movwf	??___fttol+1
 13913  0C6C  0850               	movf	___fttol@f1+2,w
 13914  0C6D  00D4               	movwf	??___fttol+2
 13915  0C6E  3017               	movlw	23
 13916  0C6F                     u4935:	
 13917  0C6F  36D4               	lsrf	??___fttol+2,f
 13918  0C70  0CD3               	rrf	??___fttol+1,f
 13919  0C71  0CD2               	rrf	??___fttol,f
 13920  0C72  0B89               	decfsz	9,f
 13921  0C73  2C6F               	goto	u4935
 13922  0C74  0852               	movf	??___fttol,w
 13923  0C75  00D5               	movwf	??___fttol+3
 13924  0C76  0855               	movf	??___fttol+3,w
 13925  0C77  00D6               	movwf	___fttol@sign1
 13926  0C78  17CF               	bsf	___fttol@f1+1,7
 13927  0C79  30FF               	movlw	255
 13928  0C7A  05CE               	andwf	___fttol@f1,f
 13929  0C7B  30FF               	movlw	255
 13930  0C7C  05CF               	andwf	___fttol@f1+1,f
 13931  0C7D  3000               	movlw	0
 13932  0C7E  05D0               	andwf	___fttol@f1+2,f
 13933  0C7F  084E               	movf	___fttol@f1,w
 13934  0C80  00D7               	movwf	___fttol@lval
 13935  0C81  084F               	movf	___fttol@f1+1,w
 13936  0C82  00D8               	movwf	___fttol@lval+1
 13937  0C83  0850               	movf	___fttol@f1+2,w
 13938  0C84  00D9               	movwf	___fttol@lval+2
 13939  0C85  01DA               	clrf	___fttol@lval+3
 13940  0C86  308E               	movlw	142
 13941  0C87  02DB               	subwf	___fttol@exp1,f
 13942  0C88  1FDB               	btfss	___fttol@exp1,7
 13943  0C89  2CA6               	goto	l6121
 13944  0C8A  085B               	movf	___fttol@exp1,w
 13945  0C8B  3A80               	xorlw	128
 13946  0C8C  3E8F               	addlw	143
 13947  0C8D  1803               	skipnc
 13948  0C8E  2C98               	goto	l6119
 13949  0C8F  3000               	movlw	0
 13950  0C90  00D1               	movwf	?___fttol+3
 13951  0C91  3000               	movlw	0
 13952  0C92  00D0               	movwf	?___fttol+2
 13953  0C93  3000               	movlw	0
 13954  0C94  00CF               	movwf	?___fttol+1
 13955  0C95  3000               	movlw	0
 13956  0C96  00CE               	movwf	?___fttol
 13957  0C97  0008               	return
 13958  0C98                     l6119:	
 13959  0C98  3001               	movlw	1
 13960  0C99                     u4965:	
 13961  0C99  36DA               	lsrf	___fttol@lval+3,f
 13962  0C9A  0CD9               	rrf	___fttol@lval+2,f
 13963  0C9B  0CD8               	rrf	___fttol@lval+1,f
 13964  0C9C  0CD7               	rrf	___fttol@lval,f
 13965  0C9D  0B89               	decfsz	9,f
 13966  0C9E  2C99               	goto	u4965
 13967  0C9F  3001               	movlw	1
 13968  0CA0  00D2               	movwf	??___fttol
 13969  0CA1  0852               	movf	??___fttol,w
 13970  0CA2  07DB               	addwf	___fttol@exp1,f
 13971  0CA3  1903               	btfsc	3,2
 13972  0CA4  2CBF               	goto	l6131
 13973  0CA5  2C98               	goto	l6119
 13974  0CA6                     l6121:	
 13975  0CA6  3018               	movlw	24
 13976  0CA7  025B               	subwf	___fttol@exp1,w
 13977  0CA8  1C03               	skipc
 13978  0CA9  2CBC               	goto	l6129
 13979  0CAA  3000               	movlw	0
 13980  0CAB  00D1               	movwf	?___fttol+3
 13981  0CAC  3000               	movlw	0
 13982  0CAD  00D0               	movwf	?___fttol+2
 13983  0CAE  3000               	movlw	0
 13984  0CAF  00CF               	movwf	?___fttol+1
 13985  0CB0  3000               	movlw	0
 13986  0CB1  00CE               	movwf	?___fttol
 13987  0CB2  0008               	return
 13988  0CB3                     l6127:	
 13989  0CB3  3001               	movlw	1
 13990  0CB4                     u4995:	
 13991  0CB4  35D7               	lslf	___fttol@lval,f
 13992  0CB5  0DD8               	rlf	___fttol@lval+1,f
 13993  0CB6  0DD9               	rlf	___fttol@lval+2,f
 13994  0CB7  0DDA               	rlf	___fttol@lval+3,f
 13995  0CB8  0B89               	decfsz	9,f
 13996  0CB9  2CB4               	goto	u4995
 13997  0CBA  3001               	movlw	1
 13998  0CBB  02DB               	subwf	___fttol@exp1,f
 13999  0CBC                     l6129:	
 14000  0CBC  08DB               	movf	___fttol@exp1,f
 14001  0CBD  1D03               	skipz
 14002  0CBE  2CB3               	goto	l6127
 14003  0CBF                     l6131:	
 14004  0CBF  0856               	movf	___fttol@sign1,w
 14005  0CC0  1903               	btfsc	3,2
 14006  0CC1  2CCD               	goto	l6135
 14007  0CC2  09D7               	comf	___fttol@lval,f
 14008  0CC3  09D8               	comf	___fttol@lval+1,f
 14009  0CC4  09D9               	comf	___fttol@lval+2,f
 14010  0CC5  09DA               	comf	___fttol@lval+3,f
 14011  0CC6  0AD7               	incf	___fttol@lval,f
 14012  0CC7  1903               	skipnz
 14013  0CC8  0AD8               	incf	___fttol@lval+1,f
 14014  0CC9  1903               	skipnz
 14015  0CCA  0AD9               	incf	___fttol@lval+2,f
 14016  0CCB  1903               	skipnz
 14017  0CCC  0ADA               	incf	___fttol@lval+3,f
 14018  0CCD                     l6135:	
 14019  0CCD  085A               	movf	___fttol@lval+3,w
 14020  0CCE  00D1               	movwf	?___fttol+3
 14021  0CCF  0859               	movf	___fttol@lval+2,w
 14022  0CD0  00D0               	movwf	?___fttol+2
 14023  0CD1  0858               	movf	___fttol@lval+1,w
 14024  0CD2  00CF               	movwf	?___fttol+1
 14025  0CD3  0857               	movf	___fttol@lval,w
 14026  0CD4  00CE               	movwf	?___fttol
 14027  0CD5  0008               	return
 14028  0CD6                     __end_of___fttol:	
 14029                           
 14030                           	psect	text82
 14031  1AF5                     __ptext82:	
 14032 ;; *************** function ___ftneg *****************
 14033 ;; Defined at:
 14034 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 14035 ;; Parameters:    Size  Location     Type
 14036 ;;  f1              3   30[BANK0 ] float 
 14037 ;; Auto vars:     Size  Location     Type
 14038 ;;		None
 14039 ;; Return value:  Size  Location     Type
 14040 ;;                  3   30[BANK0 ] float 
 14041 ;; Registers used:
 14042 ;;		wreg
 14043 ;; Tracked objects:
 14044 ;;		On entry : 0/0
 14045 ;;		On exit  : 0/0
 14046 ;;		Unchanged: 0/0
 14047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14048 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14051 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14052 ;;Total ram usage:        3 bytes
 14053 ;; Hardware stack levels used:    1
 14054 ;; Hardware stack levels required when called:    5
 14055 ;; This function calls:
 14056 ;;		Nothing
 14057 ;; This function is called by:
 14058 ;;		_getPercentValue
 14059 ;;		_setPercentValue
 14060 ;; This function uses a non-reentrant model
 14061 ;;
 14062                           
 14063                           
 14064                           ;psect for function ___ftneg
 14065  1AF5                     ___ftneg:	
 14066                           
 14067                           ;incstack = 0
 14068                           ; Regs used in ___ftneg: [wreg]
 14069  1AF5  0020               	movlb	0	; select bank0
 14070  1AF6  0840               	movf	___ftneg@f1+2,w
 14071  1AF7  043F               	iorwf	___ftneg@f1+1,w
 14072  1AF8  043E               	iorwf	___ftneg@f1,w
 14073  1AF9  1903               	skipnz
 14074  1AFA  0008               	return
 14075  1AFB  3080               	movlw	128
 14076  1AFC  06C0               	xorwf	___ftneg@f1+2,f
 14077  1AFD  0008               	return
 14078  1AFE                     __end_of___ftneg:	
 14079                           
 14080                           	psect	text83
 14081  0DF0                     __ptext83:	
 14082 ;; *************** function ___ftdiv *****************
 14083 ;; Defined at:
 14084 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14085 ;; Parameters:    Size  Location     Type
 14086 ;;  f2              3   14[BANK0 ] float 
 14087 ;;  f1              3   17[BANK0 ] float 
 14088 ;; Auto vars:     Size  Location     Type
 14089 ;;  f3              3   25[BANK0 ] float 
 14090 ;;  sign            1   29[BANK0 ] unsigned char 
 14091 ;;  exp             1   28[BANK0 ] unsigned char 
 14092 ;;  cntr            1   24[BANK0 ] unsigned char 
 14093 ;; Return value:  Size  Location     Type
 14094 ;;                  3   14[BANK0 ] float 
 14095 ;; Registers used:
 14096 ;;		wreg, status,2, status,0, pclath, cstack
 14097 ;; Tracked objects:
 14098 ;;		On entry : 0/0
 14099 ;;		On exit  : 0/0
 14100 ;;		Unchanged: 0/0
 14101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14102 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14106 ;;Total ram usage:       16 bytes
 14107 ;; Hardware stack levels used:    1
 14108 ;; Hardware stack levels required when called:    6
 14109 ;; This function calls:
 14110 ;;		___ftpack
 14111 ;; This function is called by:
 14112 ;;		_getPercentValue
 14113 ;;		_setPercentValue
 14114 ;; This function uses a non-reentrant model
 14115 ;;
 14116                           
 14117                           
 14118                           ;psect for function ___ftdiv
 14119  0DF0                     ___ftdiv:	
 14120                           
 14121                           ;incstack = 0
 14122                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14123  0DF0  0020               	movlb	0	; select bank0
 14124  0DF1  0831               	movf	___ftdiv@f1,w
 14125  0DF2  00B4               	movwf	??___ftdiv
 14126  0DF3  0832               	movf	___ftdiv@f1+1,w
 14127  0DF4  00B5               	movwf	??___ftdiv+1
 14128  0DF5  0833               	movf	___ftdiv@f1+2,w
 14129  0DF6  00B6               	movwf	??___ftdiv+2
 14130  0DF7  1003               	clrc
 14131  0DF8  0D35               	rlf	??___ftdiv+1,w
 14132  0DF9  0D36               	rlf	??___ftdiv+2,w
 14133  0DFA  00B7               	movwf	??___ftdiv+3
 14134  0DFB  0837               	movf	??___ftdiv+3,w
 14135  0DFC  00BC               	movwf	___ftdiv@exp
 14136  0DFD  08BC               	movf	___ftdiv@exp,f
 14137  0DFE  1D03               	skipz
 14138  0DFF  2E07               	goto	l6001
 14139  0E00  3000               	movlw	0
 14140  0E01  00AE               	movwf	?___ftdiv
 14141  0E02  3000               	movlw	0
 14142  0E03  00AF               	movwf	?___ftdiv+1
 14143  0E04  3000               	movlw	0
 14144  0E05  00B0               	movwf	?___ftdiv+2
 14145  0E06  0008               	return
 14146  0E07                     l6001:	
 14147  0E07  082E               	movf	___ftdiv@f2,w
 14148  0E08  00B4               	movwf	??___ftdiv
 14149  0E09  082F               	movf	___ftdiv@f2+1,w
 14150  0E0A  00B5               	movwf	??___ftdiv+1
 14151  0E0B  0830               	movf	___ftdiv@f2+2,w
 14152  0E0C  00B6               	movwf	??___ftdiv+2
 14153  0E0D  1003               	clrc
 14154  0E0E  0D35               	rlf	??___ftdiv+1,w
 14155  0E0F  0D36               	rlf	??___ftdiv+2,w
 14156  0E10  00B7               	movwf	??___ftdiv+3
 14157  0E11  0837               	movf	??___ftdiv+3,w
 14158  0E12  00BD               	movwf	___ftdiv@sign
 14159  0E13  08BD               	movf	___ftdiv@sign,f
 14160  0E14  1D03               	skipz
 14161  0E15  2E1D               	goto	l6007
 14162  0E16  3000               	movlw	0
 14163  0E17  00AE               	movwf	?___ftdiv
 14164  0E18  3000               	movlw	0
 14165  0E19  00AF               	movwf	?___ftdiv+1
 14166  0E1A  3000               	movlw	0
 14167  0E1B  00B0               	movwf	?___ftdiv+2
 14168  0E1C  0008               	return
 14169  0E1D                     l6007:	
 14170  0E1D  3000               	movlw	0
 14171  0E1E  00B9               	movwf	___ftdiv@f3
 14172  0E1F  3000               	movlw	0
 14173  0E20  00BA               	movwf	___ftdiv@f3+1
 14174  0E21  3000               	movlw	0
 14175  0E22  00BB               	movwf	___ftdiv@f3+2
 14176  0E23  3089               	movlw	137
 14177  0E24  073D               	addwf	___ftdiv@sign,w
 14178  0E25  00B4               	movwf	??___ftdiv
 14179  0E26  0834               	movf	??___ftdiv,w
 14180  0E27  02BC               	subwf	___ftdiv@exp,f
 14181  0E28  0831               	movf	___ftdiv@f1,w
 14182  0E29  00B4               	movwf	??___ftdiv
 14183  0E2A  0832               	movf	___ftdiv@f1+1,w
 14184  0E2B  00B5               	movwf	??___ftdiv+1
 14185  0E2C  0833               	movf	___ftdiv@f1+2,w
 14186  0E2D  00B6               	movwf	??___ftdiv+2
 14187  0E2E  3010               	movlw	16
 14188  0E2F                     u4735:	
 14189  0E2F  36B6               	lsrf	??___ftdiv+2,f
 14190  0E30  0CB5               	rrf	??___ftdiv+1,f
 14191  0E31  0CB4               	rrf	??___ftdiv,f
 14192  0E32  0B89               	decfsz	9,f
 14193  0E33  2E2F               	goto	u4735
 14194  0E34  0834               	movf	??___ftdiv,w
 14195  0E35  00B7               	movwf	??___ftdiv+3
 14196  0E36  0837               	movf	??___ftdiv+3,w
 14197  0E37  00BD               	movwf	___ftdiv@sign
 14198  0E38  082E               	movf	___ftdiv@f2,w
 14199  0E39  00B4               	movwf	??___ftdiv
 14200  0E3A  082F               	movf	___ftdiv@f2+1,w
 14201  0E3B  00B5               	movwf	??___ftdiv+1
 14202  0E3C  0830               	movf	___ftdiv@f2+2,w
 14203  0E3D  00B6               	movwf	??___ftdiv+2
 14204  0E3E  3010               	movlw	16
 14205  0E3F                     u4745:	
 14206  0E3F  36B6               	lsrf	??___ftdiv+2,f
 14207  0E40  0CB5               	rrf	??___ftdiv+1,f
 14208  0E41  0CB4               	rrf	??___ftdiv,f
 14209  0E42  0B89               	decfsz	9,f
 14210  0E43  2E3F               	goto	u4745
 14211  0E44  0834               	movf	??___ftdiv,w
 14212  0E45  00B7               	movwf	??___ftdiv+3
 14213  0E46  0837               	movf	??___ftdiv+3,w
 14214  0E47  06BD               	xorwf	___ftdiv@sign,f
 14215  0E48  3080               	movlw	128
 14216  0E49  00B4               	movwf	??___ftdiv
 14217  0E4A  0834               	movf	??___ftdiv,w
 14218  0E4B  05BD               	andwf	___ftdiv@sign,f
 14219  0E4C  17B2               	bsf	___ftdiv@f1+1,7
 14220  0E4D  30FF               	movlw	255
 14221  0E4E  05B1               	andwf	___ftdiv@f1,f
 14222  0E4F  30FF               	movlw	255
 14223  0E50  05B2               	andwf	___ftdiv@f1+1,f
 14224  0E51  3000               	movlw	0
 14225  0E52  05B3               	andwf	___ftdiv@f1+2,f
 14226  0E53  17AF               	bsf	___ftdiv@f2+1,7
 14227  0E54  30FF               	movlw	255
 14228  0E55  05AE               	andwf	___ftdiv@f2,f
 14229  0E56  30FF               	movlw	255
 14230  0E57  05AF               	andwf	___ftdiv@f2+1,f
 14231  0E58  3000               	movlw	0
 14232  0E59  05B0               	andwf	___ftdiv@f2+2,f
 14233  0E5A  3018               	movlw	24
 14234  0E5B  00B4               	movwf	??___ftdiv
 14235  0E5C  0834               	movf	??___ftdiv,w
 14236  0E5D  00B8               	movwf	___ftdiv@cntr
 14237  0E5E                     l6021:	
 14238  0E5E  3001               	movlw	1
 14239  0E5F                     u4755:	
 14240  0E5F  35B9               	lslf	___ftdiv@f3,f
 14241  0E60  0DBA               	rlf	___ftdiv@f3+1,f
 14242  0E61  0DBB               	rlf	___ftdiv@f3+2,f
 14243  0E62  0B89               	decfsz	9,f
 14244  0E63  2E5F               	goto	u4755
 14245  0E64  0830               	movf	___ftdiv@f2+2,w
 14246  0E65  0233               	subwf	___ftdiv@f1+2,w
 14247  0E66  1D03               	skipz
 14248  0E67  2E6E               	goto	u4765
 14249  0E68  082F               	movf	___ftdiv@f2+1,w
 14250  0E69  0232               	subwf	___ftdiv@f1+1,w
 14251  0E6A  1D03               	skipz
 14252  0E6B  2E6E               	goto	u4765
 14253  0E6C  082E               	movf	___ftdiv@f2,w
 14254  0E6D  0231               	subwf	___ftdiv@f1,w
 14255  0E6E                     u4765:	
 14256  0E6E  1C03               	skipc
 14257  0E6F  2E77               	goto	l6029
 14258  0E70  082E               	movf	___ftdiv@f2,w
 14259  0E71  02B1               	subwf	___ftdiv@f1,f
 14260  0E72  082F               	movf	___ftdiv@f2+1,w
 14261  0E73  3BB2               	subwfb	___ftdiv@f1+1,f
 14262  0E74  0830               	movf	___ftdiv@f2+2,w
 14263  0E75  3BB3               	subwfb	___ftdiv@f1+2,f
 14264  0E76  1439               	bsf	___ftdiv@f3,0
 14265  0E77                     l6029:	
 14266  0E77  3001               	movlw	1
 14267  0E78                     u4775:	
 14268  0E78  35B1               	lslf	___ftdiv@f1,f
 14269  0E79  0DB2               	rlf	___ftdiv@f1+1,f
 14270  0E7A  0DB3               	rlf	___ftdiv@f1+2,f
 14271  0E7B  0B89               	decfsz	9,f
 14272  0E7C  2E78               	goto	u4775
 14273  0E7D  3001               	movlw	1
 14274  0E7E  02B8               	subwf	___ftdiv@cntr,f
 14275  0E7F  1D03               	btfss	3,2
 14276  0E80  2E5E               	goto	l6021
 14277  0E81  0839               	movf	___ftdiv@f3,w
 14278  0E82  00A0               	movwf	___ftpack@arg
 14279  0E83  083A               	movf	___ftdiv@f3+1,w
 14280  0E84  00A1               	movwf	___ftpack@arg+1
 14281  0E85  083B               	movf	___ftdiv@f3+2,w
 14282  0E86  00A2               	movwf	___ftpack@arg+2
 14283  0E87  083C               	movf	___ftdiv@exp,w
 14284  0E88  00B4               	movwf	??___ftdiv
 14285  0E89  0834               	movf	??___ftdiv,w
 14286  0E8A  00A3               	movwf	___ftpack@exp
 14287  0E8B  083D               	movf	___ftdiv@sign,w
 14288  0E8C  00B5               	movwf	??___ftdiv+1
 14289  0E8D  0835               	movf	??___ftdiv+1,w
 14290  0E8E  00A4               	movwf	___ftpack@sign
 14291  0E8F  3189  210A         	fcall	___ftpack
 14292  0E91  0020               	movlb	0	; select bank0
 14293  0E92  0820               	movf	?___ftpack,w
 14294  0E93  00AE               	movwf	?___ftdiv
 14295  0E94  0821               	movf	?___ftpack+1,w
 14296  0E95  00AF               	movwf	?___ftdiv+1
 14297  0E96  0822               	movf	?___ftpack+2,w
 14298  0E97  00B0               	movwf	?___ftdiv+2
 14299  0E98  0008               	return
 14300  0E99                     __end_of___ftdiv:	
 14301                           
 14302                           	psect	text84
 14303  0481                     __ptext84:	
 14304 ;; *************** function ___ftadd *****************
 14305 ;; Defined at:
 14306 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14307 ;; Parameters:    Size  Location     Type
 14308 ;;  f1              3   33[BANK0 ] float 
 14309 ;;  f2              3   36[BANK0 ] float 
 14310 ;; Auto vars:     Size  Location     Type
 14311 ;;  exp1            1   45[BANK0 ] unsigned char 
 14312 ;;  exp2            1   44[BANK0 ] unsigned char 
 14313 ;;  sign            1   43[BANK0 ] unsigned char 
 14314 ;; Return value:  Size  Location     Type
 14315 ;;                  3   33[BANK0 ] float 
 14316 ;; Registers used:
 14317 ;;		wreg, status,2, status,0, pclath, cstack
 14318 ;; Tracked objects:
 14319 ;;		On entry : 0/0
 14320 ;;		On exit  : 0/0
 14321 ;;		Unchanged: 0/0
 14322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14323 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14324 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14326 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14327 ;;Total ram usage:       13 bytes
 14328 ;; Hardware stack levels used:    1
 14329 ;; Hardware stack levels required when called:    6
 14330 ;; This function calls:
 14331 ;;		___ftpack
 14332 ;; This function is called by:
 14333 ;;		_getPercentValue
 14334 ;;		_setPercentValue
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           
 14339                           ;psect for function ___ftadd
 14340  0481                     ___ftadd:	
 14341                           
 14342                           ;incstack = 0
 14343                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14344  0481  0020               	movlb	0	; select bank0
 14345  0482  0841               	movf	___ftadd@f1,w
 14346  0483  00C7               	movwf	??___ftadd
 14347  0484  0842               	movf	___ftadd@f1+1,w
 14348  0485  00C8               	movwf	??___ftadd+1
 14349  0486  0843               	movf	___ftadd@f1+2,w
 14350  0487  00C9               	movwf	??___ftadd+2
 14351  0488  1003               	clrc
 14352  0489  0D48               	rlf	??___ftadd+1,w
 14353  048A  0D49               	rlf	??___ftadd+2,w
 14354  048B  00CA               	movwf	??___ftadd+3
 14355  048C  084A               	movf	??___ftadd+3,w
 14356  048D  00CD               	movwf	___ftadd@exp1
 14357  048E  0844               	movf	___ftadd@f2,w
 14358  048F  00C7               	movwf	??___ftadd
 14359  0490  0845               	movf	___ftadd@f2+1,w
 14360  0491  00C8               	movwf	??___ftadd+1
 14361  0492  0846               	movf	___ftadd@f2+2,w
 14362  0493  00C9               	movwf	??___ftadd+2
 14363  0494  1003               	clrc
 14364  0495  0D48               	rlf	??___ftadd+1,w
 14365  0496  0D49               	rlf	??___ftadd+2,w
 14366  0497  00CA               	movwf	??___ftadd+3
 14367  0498  084A               	movf	??___ftadd+3,w
 14368  0499  00CC               	movwf	___ftadd@exp2
 14369  049A  084D               	movf	___ftadd@exp1,w
 14370  049B  1903               	btfsc	3,2
 14371  049C  2CA9               	goto	l5931
 14372  049D  084C               	movf	___ftadd@exp2,w
 14373  049E  024D               	subwf	___ftadd@exp1,w
 14374  049F  1803               	skipnc
 14375  04A0  2CB0               	goto	l5935
 14376  04A1  034D               	decf	___ftadd@exp1,w
 14377  04A2  3AFF               	xorlw	255
 14378  04A3  074C               	addwf	___ftadd@exp2,w
 14379  04A4  00C7               	movwf	??___ftadd
 14380  04A5  3019               	movlw	25
 14381  04A6  0247               	subwf	??___ftadd,w
 14382  04A7  1C03               	skipc
 14383  04A8  2CB0               	goto	l5935
 14384  04A9                     l5931:	
 14385  04A9  0844               	movf	___ftadd@f2,w
 14386  04AA  00C1               	movwf	?___ftadd
 14387  04AB  0845               	movf	___ftadd@f2+1,w
 14388  04AC  00C2               	movwf	?___ftadd+1
 14389  04AD  0846               	movf	___ftadd@f2+2,w
 14390  04AE  00C3               	movwf	?___ftadd+2
 14391  04AF  0008               	return
 14392  04B0                     l5935:	
 14393  04B0  084C               	movf	___ftadd@exp2,w
 14394  04B1  1903               	btfsc	3,2
 14395  04B2  0008               	return
 14396  04B3  084D               	movf	___ftadd@exp1,w
 14397  04B4  024C               	subwf	___ftadd@exp2,w
 14398  04B5  1803               	skipnc
 14399  04B6  2CBF               	goto	l5941
 14400  04B7  034C               	decf	___ftadd@exp2,w
 14401  04B8  3AFF               	xorlw	255
 14402  04B9  074D               	addwf	___ftadd@exp1,w
 14403  04BA  00C7               	movwf	??___ftadd
 14404  04BB  3019               	movlw	25
 14405  04BC  0247               	subwf	??___ftadd,w
 14406  04BD  1803               	btfsc	3,0
 14407  04BE  0008               	return
 14408  04BF                     l5941:	
 14409  04BF  3006               	movlw	6
 14410  04C0  00C7               	movwf	??___ftadd
 14411  04C1  0847               	movf	??___ftadd,w
 14412  04C2  00CB               	movwf	___ftadd@sign
 14413  04C3  1BC3               	btfsc	___ftadd@f1+2,7
 14414  04C4  17CB               	bsf	___ftadd@sign,7
 14415  04C5  1BC6               	btfsc	___ftadd@f2+2,7
 14416  04C6  174B               	bsf	___ftadd@sign,6
 14417  04C7  17C2               	bsf	___ftadd@f1+1,7
 14418  04C8  30FF               	movlw	255
 14419  04C9  05C1               	andwf	___ftadd@f1,f
 14420  04CA  30FF               	movlw	255
 14421  04CB  05C2               	andwf	___ftadd@f1+1,f
 14422  04CC  3000               	movlw	0
 14423  04CD  05C3               	andwf	___ftadd@f1+2,f
 14424  04CE  17C5               	bsf	___ftadd@f2+1,7
 14425  04CF  30FF               	movlw	255
 14426  04D0  05C4               	andwf	___ftadd@f2,f
 14427  04D1  30FF               	movlw	255
 14428  04D2  05C5               	andwf	___ftadd@f2+1,f
 14429  04D3  3000               	movlw	0
 14430  04D4  05C6               	andwf	___ftadd@f2+2,f
 14431  04D5  084C               	movf	___ftadd@exp2,w
 14432  04D6  024D               	subwf	___ftadd@exp1,w
 14433  04D7  1803               	skipnc
 14434  04D8  2CFB               	goto	l5963
 14435  04D9                     l5953:	
 14436  04D9  3001               	movlw	1
 14437  04DA                     u4575:	
 14438  04DA  35C4               	lslf	___ftadd@f2,f
 14439  04DB  0DC5               	rlf	___ftadd@f2+1,f
 14440  04DC  0DC6               	rlf	___ftadd@f2+2,f
 14441  04DD  0B89               	decfsz	9,f
 14442  04DE  2CDA               	goto	u4575
 14443  04DF  3001               	movlw	1
 14444  04E0  02CC               	subwf	___ftadd@exp2,f
 14445  04E1  084C               	movf	___ftadd@exp2,w
 14446  04E2  064D               	xorwf	___ftadd@exp1,w
 14447  04E3  1903               	skipnz
 14448  04E4  2CF6               	goto	l5961
 14449  04E5  3001               	movlw	1
 14450  04E6  02CB               	subwf	___ftadd@sign,f
 14451  04E7  084B               	movf	___ftadd@sign,w
 14452  04E8  3907               	andlw	7
 14453  04E9  1903               	btfsc	3,2
 14454  04EA  2CF6               	goto	l5961
 14455  04EB  2CD9               	goto	l5953
 14456  04EC                     l5959:	
 14457  04EC  3001               	movlw	1
 14458  04ED                     u4605:	
 14459  04ED  36C3               	lsrf	___ftadd@f1+2,f
 14460  04EE  0CC2               	rrf	___ftadd@f1+1,f
 14461  04EF  0CC1               	rrf	___ftadd@f1,f
 14462  04F0  0B89               	decfsz	9,f
 14463  04F1  2CED               	goto	u4605
 14464  04F2  3001               	movlw	1
 14465  04F3  00C7               	movwf	??___ftadd
 14466  04F4  0847               	movf	??___ftadd,w
 14467  04F5  07CD               	addwf	___ftadd@exp1,f
 14468  04F6                     l5961:	
 14469  04F6  084D               	movf	___ftadd@exp1,w
 14470  04F7  064C               	xorwf	___ftadd@exp2,w
 14471  04F8  1903               	btfsc	3,2
 14472  04F9  2D20               	goto	l3024
 14473  04FA  2CEC               	goto	l5959
 14474  04FB                     l5963:	
 14475  04FB  084D               	movf	___ftadd@exp1,w
 14476  04FC  024C               	subwf	___ftadd@exp2,w
 14477  04FD  1803               	skipnc
 14478  04FE  2D20               	goto	l3024
 14479  04FF                     l5965:	
 14480  04FF  3001               	movlw	1
 14481  0500                     u4635:	
 14482  0500  35C1               	lslf	___ftadd@f1,f
 14483  0501  0DC2               	rlf	___ftadd@f1+1,f
 14484  0502  0DC3               	rlf	___ftadd@f1+2,f
 14485  0503  0B89               	decfsz	9,f
 14486  0504  2D00               	goto	u4635
 14487  0505  3001               	movlw	1
 14488  0506  02CD               	subwf	___ftadd@exp1,f
 14489  0507  084C               	movf	___ftadd@exp2,w
 14490  0508  064D               	xorwf	___ftadd@exp1,w
 14491  0509  1903               	skipnz
 14492  050A  2D1C               	goto	l5973
 14493  050B  3001               	movlw	1
 14494  050C  02CB               	subwf	___ftadd@sign,f
 14495  050D  084B               	movf	___ftadd@sign,w
 14496  050E  3907               	andlw	7
 14497  050F  1903               	btfsc	3,2
 14498  0510  2D1C               	goto	l5973
 14499  0511  2CFF               	goto	l5965
 14500  0512                     l5971:	
 14501  0512  3001               	movlw	1
 14502  0513                     u4665:	
 14503  0513  36C6               	lsrf	___ftadd@f2+2,f
 14504  0514  0CC5               	rrf	___ftadd@f2+1,f
 14505  0515  0CC4               	rrf	___ftadd@f2,f
 14506  0516  0B89               	decfsz	9,f
 14507  0517  2D13               	goto	u4665
 14508  0518  3001               	movlw	1
 14509  0519  00C7               	movwf	??___ftadd
 14510  051A  0847               	movf	??___ftadd,w
 14511  051B  07CC               	addwf	___ftadd@exp2,f
 14512  051C                     l5973:	
 14513  051C  084D               	movf	___ftadd@exp1,w
 14514  051D  064C               	xorwf	___ftadd@exp2,w
 14515  051E  1D03               	skipz
 14516  051F  2D12               	goto	l5971
 14517  0520                     l3024:	
 14518  0520  1FCB               	btfss	___ftadd@sign,7
 14519  0521  2D32               	goto	l5977
 14520  0522  30FF               	movlw	255
 14521  0523  06C1               	xorwf	___ftadd@f1,f
 14522  0524  30FF               	movlw	255
 14523  0525  06C2               	xorwf	___ftadd@f1+1,f
 14524  0526  30FF               	movlw	255
 14525  0527  06C3               	xorwf	___ftadd@f1+2,f
 14526  0528  3001               	movlw	1
 14527  0529  07C1               	addwf	___ftadd@f1,f
 14528  052A  3000               	movlw	0
 14529  052B  1803               	skipnc
 14530  052C  3001               	movlw	1
 14531  052D  07C2               	addwf	___ftadd@f1+1,f
 14532  052E  3000               	movlw	0
 14533  052F  1803               	skipnc
 14534  0530  3001               	movlw	1
 14535  0531  07C3               	addwf	___ftadd@f1+2,f
 14536  0532                     l5977:	
 14537  0532  1F4B               	btfss	___ftadd@sign,6
 14538  0533  2D44               	goto	l5981
 14539  0534  30FF               	movlw	255
 14540  0535  06C4               	xorwf	___ftadd@f2,f
 14541  0536  30FF               	movlw	255
 14542  0537  06C5               	xorwf	___ftadd@f2+1,f
 14543  0538  30FF               	movlw	255
 14544  0539  06C6               	xorwf	___ftadd@f2+2,f
 14545  053A  3001               	movlw	1
 14546  053B  07C4               	addwf	___ftadd@f2,f
 14547  053C  3000               	movlw	0
 14548  053D  1803               	skipnc
 14549  053E  3001               	movlw	1
 14550  053F  07C5               	addwf	___ftadd@f2+1,f
 14551  0540  3000               	movlw	0
 14552  0541  1803               	skipnc
 14553  0542  3001               	movlw	1
 14554  0543  07C6               	addwf	___ftadd@f2+2,f
 14555  0544                     l5981:	
 14556  0544  01CB               	clrf	___ftadd@sign
 14557  0545  0841               	movf	___ftadd@f1,w
 14558  0546  07C4               	addwf	___ftadd@f2,f
 14559  0547  0842               	movf	___ftadd@f1+1,w
 14560  0548  3DC5               	addwfc	___ftadd@f2+1,f
 14561  0549  0843               	movf	___ftadd@f1+2,w
 14562  054A  3DC6               	addwfc	___ftadd@f2+2,f
 14563  054B  1FC6               	btfss	___ftadd@f2+2,7
 14564  054C  2D5F               	goto	l5991
 14565  054D  30FF               	movlw	255
 14566  054E  06C4               	xorwf	___ftadd@f2,f
 14567  054F  30FF               	movlw	255
 14568  0550  06C5               	xorwf	___ftadd@f2+1,f
 14569  0551  30FF               	movlw	255
 14570  0552  06C6               	xorwf	___ftadd@f2+2,f
 14571  0553  3001               	movlw	1
 14572  0554  07C4               	addwf	___ftadd@f2,f
 14573  0555  3000               	movlw	0
 14574  0556  1803               	skipnc
 14575  0557  3001               	movlw	1
 14576  0558  07C5               	addwf	___ftadd@f2+1,f
 14577  0559  3000               	movlw	0
 14578  055A  1803               	skipnc
 14579  055B  3001               	movlw	1
 14580  055C  07C6               	addwf	___ftadd@f2+2,f
 14581  055D  01CB               	clrf	___ftadd@sign
 14582  055E  0ACB               	incf	___ftadd@sign,f
 14583  055F                     l5991:	
 14584  055F  0844               	movf	___ftadd@f2,w
 14585  0560  00A0               	movwf	___ftpack@arg
 14586  0561  0845               	movf	___ftadd@f2+1,w
 14587  0562  00A1               	movwf	___ftpack@arg+1
 14588  0563  0846               	movf	___ftadd@f2+2,w
 14589  0564  00A2               	movwf	___ftpack@arg+2
 14590  0565  084D               	movf	___ftadd@exp1,w
 14591  0566  00C7               	movwf	??___ftadd
 14592  0567  0847               	movf	??___ftadd,w
 14593  0568  00A3               	movwf	___ftpack@exp
 14594  0569  084B               	movf	___ftadd@sign,w
 14595  056A  00C8               	movwf	??___ftadd+1
 14596  056B  0848               	movf	??___ftadd+1,w
 14597  056C  00A4               	movwf	___ftpack@sign
 14598  056D  3189  210A         	fcall	___ftpack
 14599  056F  0020               	movlb	0	; select bank0
 14600  0570  0820               	movf	?___ftpack,w
 14601  0571  00C1               	movwf	?___ftadd
 14602  0572  0821               	movf	?___ftpack+1,w
 14603  0573  00C2               	movwf	?___ftadd+1
 14604  0574  0822               	movf	?___ftpack+2,w
 14605  0575  00C3               	movwf	?___ftadd+2
 14606  0576  0008               	return
 14607  0577                     __end_of___ftadd:	
 14608                           
 14609                           	psect	text85
 14610  1EFE                     __ptext85:	
 14611 ;; *************** function ___awtoft *****************
 14612 ;; Defined at:
 14613 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14614 ;; Parameters:    Size  Location     Type
 14615 ;;  c               2    8[BANK0 ] int 
 14616 ;; Auto vars:     Size  Location     Type
 14617 ;;  sign            1   13[BANK0 ] unsigned char 
 14618 ;; Return value:  Size  Location     Type
 14619 ;;                  3    8[BANK0 ] float 
 14620 ;; Registers used:
 14621 ;;		wreg, status,2, status,0, pclath, cstack
 14622 ;; Tracked objects:
 14623 ;;		On entry : 0/0
 14624 ;;		On exit  : 0/0
 14625 ;;		Unchanged: 0/0
 14626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14627 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14629 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14630 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;Total ram usage:        6 bytes
 14632 ;; Hardware stack levels used:    1
 14633 ;; Hardware stack levels required when called:    6
 14634 ;; This function calls:
 14635 ;;		___ftpack
 14636 ;; This function is called by:
 14637 ;;		_getPercentValue
 14638 ;;		_setPercentValue
 14639 ;; This function uses a non-reentrant model
 14640 ;;
 14641                           
 14642                           
 14643                           ;psect for function ___awtoft
 14644  1EFE                     ___awtoft:	
 14645                           
 14646                           ;incstack = 0
 14647                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14648  1EFE  0020               	movlb	0	; select bank0
 14649  1EFF  01AD               	clrf	___awtoft@sign
 14650  1F00  1FA9               	btfss	___awtoft@c+1,7
 14651  1F01  2F09               	goto	l5919
 14652  1F02  09A8               	comf	___awtoft@c,f
 14653  1F03  09A9               	comf	___awtoft@c+1,f
 14654  1F04  0AA8               	incf	___awtoft@c,f
 14655  1F05  1903               	skipnz
 14656  1F06  0AA9               	incf	___awtoft@c+1,f
 14657  1F07  01AD               	clrf	___awtoft@sign
 14658  1F08  0AAD               	incf	___awtoft@sign,f
 14659  1F09                     l5919:	
 14660  1F09  0828               	movf	___awtoft@c,w
 14661  1F0A  00A0               	movwf	___ftpack@arg
 14662  1F0B  0829               	movf	___awtoft@c+1,w
 14663  1F0C  00A1               	movwf	___ftpack@arg+1
 14664  1F0D  01A2               	clrf	___ftpack@arg+2
 14665  1F0E  308E               	movlw	142
 14666  1F0F  00AB               	movwf	??___awtoft
 14667  1F10  082B               	movf	??___awtoft,w
 14668  1F11  00A3               	movwf	___ftpack@exp
 14669  1F12  082D               	movf	___awtoft@sign,w
 14670  1F13  00AC               	movwf	??___awtoft+1
 14671  1F14  082C               	movf	??___awtoft+1,w
 14672  1F15  00A4               	movwf	___ftpack@sign
 14673  1F16  3189  210A         	fcall	___ftpack
 14674  1F18  0020               	movlb	0	; select bank0
 14675  1F19  0820               	movf	?___ftpack,w
 14676  1F1A  00A8               	movwf	?___awtoft
 14677  1F1B  0821               	movf	?___ftpack+1,w
 14678  1F1C  00A9               	movwf	?___awtoft+1
 14679  1F1D  0822               	movf	?___ftpack+2,w
 14680  1F1E  00AA               	movwf	?___awtoft+2
 14681  1F1F  0008               	return
 14682  1F20                     __end_of___awtoft:	
 14683                           
 14684                           	psect	text86
 14685  090A                     __ptext86:	
 14686 ;; *************** function ___ftpack *****************
 14687 ;; Defined at:
 14688 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;  arg             3    0[BANK0 ] unsigned um
 14691 ;;  exp             1    3[BANK0 ] unsigned char 
 14692 ;;  sign            1    4[BANK0 ] unsigned char 
 14693 ;; Auto vars:     Size  Location     Type
 14694 ;;		None
 14695 ;; Return value:  Size  Location     Type
 14696 ;;                  3    0[BANK0 ] float 
 14697 ;; Registers used:
 14698 ;;		wreg, status,2, status,0
 14699 ;; Tracked objects:
 14700 ;;		On entry : 0/0
 14701 ;;		On exit  : 0/0
 14702 ;;		Unchanged: 0/0
 14703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14704 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;Total ram usage:        8 bytes
 14709 ;; Hardware stack levels used:    1
 14710 ;; Hardware stack levels required when called:    5
 14711 ;; This function calls:
 14712 ;;		Nothing
 14713 ;; This function is called by:
 14714 ;;		___awtoft
 14715 ;;		___ftadd
 14716 ;;		___ftdiv
 14717 ;;		___ftmul
 14718 ;; This function uses a non-reentrant model
 14719 ;;
 14720                           
 14721                           
 14722                           ;psect for function ___ftpack
 14723  090A                     ___ftpack:	
 14724                           
 14725                           ;incstack = 0
 14726                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14727  090A  0020               	movlb	0	; select bank0
 14728  090B  0823               	movf	___ftpack@exp,w
 14729  090C  1903               	btfsc	3,2
 14730  090D  2913               	goto	l5869
 14731  090E  0822               	movf	___ftpack@arg+2,w
 14732  090F  0421               	iorwf	___ftpack@arg+1,w
 14733  0910  0420               	iorwf	___ftpack@arg,w
 14734  0911  1D03               	skipz
 14735  0912  2924               	goto	l5875
 14736  0913                     l5869:	
 14737  0913  3000               	movlw	0
 14738  0914  00A0               	movwf	?___ftpack
 14739  0915  3000               	movlw	0
 14740  0916  00A1               	movwf	?___ftpack+1
 14741  0917  3000               	movlw	0
 14742  0918  00A2               	movwf	?___ftpack+2
 14743  0919  0008               	return
 14744  091A                     l5873:	
 14745  091A  3001               	movlw	1
 14746  091B  00A5               	movwf	??___ftpack
 14747  091C  0825               	movf	??___ftpack,w
 14748  091D  07A3               	addwf	___ftpack@exp,f
 14749  091E  3001               	movlw	1
 14750  091F                     u4365:	
 14751  091F  36A2               	lsrf	___ftpack@arg+2,f
 14752  0920  0CA1               	rrf	___ftpack@arg+1,f
 14753  0921  0CA0               	rrf	___ftpack@arg,f
 14754  0922  0B89               	decfsz	9,f
 14755  0923  291F               	goto	u4365
 14756  0924                     l5875:	
 14757  0924  30FE               	movlw	254
 14758  0925  0522               	andwf	___ftpack@arg+2,w
 14759  0926  1903               	btfsc	3,2
 14760  0927  293D               	goto	l2995
 14761  0928  291A               	goto	l5873
 14762  0929                     l5877:	
 14763  0929  3001               	movlw	1
 14764  092A  00A5               	movwf	??___ftpack
 14765  092B  0825               	movf	??___ftpack,w
 14766  092C  07A3               	addwf	___ftpack@exp,f
 14767  092D  3001               	movlw	1
 14768  092E  07A0               	addwf	___ftpack@arg,f
 14769  092F  3000               	movlw	0
 14770  0930  1803               	skipnc
 14771  0931  3001               	movlw	1
 14772  0932  07A1               	addwf	___ftpack@arg+1,f
 14773  0933  3000               	movlw	0
 14774  0934  1803               	skipnc
 14775  0935  3001               	movlw	1
 14776  0936  07A2               	addwf	___ftpack@arg+2,f
 14777  0937  3001               	movlw	1
 14778  0938                     u4385:	
 14779  0938  36A2               	lsrf	___ftpack@arg+2,f
 14780  0939  0CA1               	rrf	___ftpack@arg+1,f
 14781  093A  0CA0               	rrf	___ftpack@arg,f
 14782  093B  0B89               	decfsz	9,f
 14783  093C  2938               	goto	u4385
 14784  093D                     l2995:	
 14785  093D  30FF               	movlw	255
 14786  093E  0522               	andwf	___ftpack@arg+2,w
 14787  093F  1903               	btfsc	3,2
 14788  0940  294A               	goto	l5885
 14789  0941  2929               	goto	l5877
 14790  0942                     l5883:	
 14791  0942  3001               	movlw	1
 14792  0943  02A3               	subwf	___ftpack@exp,f
 14793  0944  3001               	movlw	1
 14794  0945                     u4405:	
 14795  0945  35A0               	lslf	___ftpack@arg,f
 14796  0946  0DA1               	rlf	___ftpack@arg+1,f
 14797  0947  0DA2               	rlf	___ftpack@arg+2,f
 14798  0948  0B89               	decfsz	9,f
 14799  0949  2945               	goto	u4405
 14800  094A                     l5885:	
 14801  094A  1FA1               	btfss	___ftpack@arg+1,7
 14802  094B  2942               	goto	l5883
 14803  094C  1823               	btfsc	___ftpack@exp,0
 14804  094D  2954               	goto	l3001
 14805  094E  30FF               	movlw	255
 14806  094F  05A0               	andwf	___ftpack@arg,f
 14807  0950  307F               	movlw	127
 14808  0951  05A1               	andwf	___ftpack@arg+1,f
 14809  0952  30FF               	movlw	255
 14810  0953  05A2               	andwf	___ftpack@arg+2,f
 14811  0954                     l3001:	
 14812  0954  1003               	clrc
 14813  0955  0CA3               	rrf	___ftpack@exp,f
 14814  0956  0823               	movf	___ftpack@exp,w
 14815  0957  00A5               	movwf	??___ftpack
 14816  0958  01A6               	clrf	??___ftpack+1
 14817  0959  01A7               	clrf	??___ftpack+2
 14818  095A  3010               	movlw	16
 14819  095B                     u4435:	
 14820  095B  35A5               	lslf	??___ftpack,f
 14821  095C  0DA6               	rlf	??___ftpack+1,f
 14822  095D  0DA7               	rlf	??___ftpack+2,f
 14823  095E  0B89               	decfsz	9,f
 14824  095F  295B               	goto	u4435
 14825  0960  0825               	movf	??___ftpack,w
 14826  0961  04A0               	iorwf	___ftpack@arg,f
 14827  0962  0826               	movf	??___ftpack+1,w
 14828  0963  04A1               	iorwf	___ftpack@arg+1,f
 14829  0964  0827               	movf	??___ftpack+2,w
 14830  0965  04A2               	iorwf	___ftpack@arg+2,f
 14831  0966  0824               	movf	___ftpack@sign,w
 14832  0967  1903               	btfsc	3,2
 14833  0968  0008               	return
 14834  0969  17A2               	bsf	___ftpack@arg+2,7
 14835  096A  0008               	return
 14836  096B                     __end_of___ftpack:	
 14837                           
 14838                           	psect	text87
 14839  0800                     __ptext87:	
 14840 ;; *************** function _setLED *****************
 14841 ;; Defined at:
 14842 ;;		line 76 in file "../src/LED_B1.c"
 14843 ;; Parameters:    Size  Location     Type
 14844 ;;  led             1    wreg     unsigned char 
 14845 ;;  command         1    2[BANK0 ] unsigned char 
 14846 ;; Auto vars:     Size  Location     Type
 14847 ;;  led             1    3[BANK0 ] unsigned char 
 14848 ;; Return value:  Size  Location     Type
 14849 ;;		None               void
 14850 ;; Registers used:
 14851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14852 ;; Tracked objects:
 14853 ;;		On entry : 0/0
 14854 ;;		On exit  : 0/0
 14855 ;;		Unchanged: 0/0
 14856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14857 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14858 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14861 ;;Total ram usage:        2 bytes
 14862 ;; Hardware stack levels used:    1
 14863 ;; Hardware stack levels required when called:    6
 14864 ;; This function calls:
 14865 ;;		_LedPointSelect
 14866 ;; This function is called by:
 14867 ;;		_setDimmerLights
 14868 ;;		_setLED_Initialization
 14869 ;;		_setSw_Initialization
 14870 ;;		_setMain_Exception
 14871 ;; This function uses a non-reentrant model
 14872 ;;
 14873                           
 14874                           
 14875                           ;psect for function _setLED
 14876  0800                     _setLED:	
 14877                           
 14878                           ;incstack = 0
 14879                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14880                           ;setLED@led stored from wreg
 14881  0800  0020               	movlb	0	; select bank0
 14882  0801  00A3               	movwf	setLED@led
 14883                           
 14884                           ;LED_B1.c: 77: LedPointSelect(led);
 14885  0802  0823               	movf	setLED@led,w
 14886  0803  319E  2609  3188   	fcall	_LedPointSelect
 14887                           
 14888                           ;LED_B1.c: 78: if (command == 0) {
 14889  0806  0020               	movlb	0	; select bank0
 14890  0807  08A2               	movf	setLED@command,f
 14891  0808  1D03               	skipz
 14892  0809  2817               	goto	l6637
 14893                           
 14894                           ;LED_B1.c: 80: if (led == 1) {
 14895  080A  0823               	movf	setLED@led,w
 14896  080B  3A01               	xorlw	1
 14897  080C  1D03               	skipz
 14898  080D  280F               	goto	l6629
 14899                           
 14900                           ;LED_B1.c: 84: RA3 = 1;
 14901  080E  158C               	bsf	12,3	;volatile
 14902  080F                     l6629:	
 14903                           
 14904                           ;LED_B1.c: 86: }
 14905                           ;LED_B1.c: 89: if (led == 2) {
 14906  080F  0823               	movf	setLED@led,w
 14907  0810  3A02               	xorlw	2
 14908  0811  1903               	btfsc	3,2
 14909                           
 14910                           ;LED_B1.c: 93: RC7 = 1;
 14911  0812  178E               	bsf	14,7	;volatile
 14912                           
 14913                           ;LED_B1.c: 95: }
 14914                           ;LED_B1.c: 107: if (led == 99) {
 14915  0813  0823               	movf	setLED@led,w
 14916  0814  3A63               	xorlw	99
 14917  0815  1903               	btfsc	3,2
 14918                           
 14919                           ;LED_B1.c: 111: RB5 = 1;
 14920  0816  168D               	bsf	13,5	;volatile
 14921  0817                     l6637:	
 14922                           
 14923                           ;LED_B1.c: 113: }
 14924                           ;LED_B1.c: 115: }
 14925                           ;LED_B1.c: 116: if (command == 1) {
 14926  0817  0822               	movf	setLED@command,w
 14927  0818  3A01               	xorlw	1
 14928  0819  1D03               	skipz
 14929  081A  2828               	goto	l6651
 14930                           
 14931                           ;LED_B1.c: 118: if (led == 1) {
 14932  081B  0823               	movf	setLED@led,w
 14933  081C  3A01               	xorlw	1
 14934  081D  1D03               	skipz
 14935  081E  2820               	goto	l6643
 14936                           
 14937                           ;LED_B1.c: 122: RA3 = 0;
 14938  081F  118C               	bcf	12,3	;volatile
 14939  0820                     l6643:	
 14940                           
 14941                           ;LED_B1.c: 124: }
 14942                           ;LED_B1.c: 127: if (led == 2) {
 14943  0820  0823               	movf	setLED@led,w
 14944  0821  3A02               	xorlw	2
 14945  0822  1903               	btfsc	3,2
 14946                           
 14947                           ;LED_B1.c: 131: RC7 = 0;
 14948  0823  138E               	bcf	14,7	;volatile
 14949                           
 14950                           ;LED_B1.c: 133: }
 14951                           ;LED_B1.c: 145: if (led == 99) {
 14952  0824  0823               	movf	setLED@led,w
 14953  0825  3A63               	xorlw	99
 14954  0826  1903               	btfsc	3,2
 14955                           
 14956                           ;LED_B1.c: 149: RB5 = 0;
 14957  0827  128D               	bcf	13,5	;volatile
 14958  0828                     l6651:	
 14959                           
 14960                           ;LED_B1.c: 151: }
 14961                           ;LED_B1.c: 153: }
 14962                           ;LED_B1.c: 154: if (command == 10) {
 14963  0828  0822               	movf	setLED@command,w
 14964  0829  3A0A               	xorlw	10
 14965  082A  1D03               	skipz
 14966  082B  2846               	goto	l6667
 14967                           
 14968                           ;LED_B1.c: 155: LED->GO = 0;
 14969  082C  087A               	movf	_LED,w
 14970  082D  0086               	movwf	6
 14971  082E  3001               	movlw	1	; select bank2/3
 14972  082F  0087               	movwf	7
 14973  0830  1081               	bcf	1,1
 14974                           
 14975                           ;LED_B1.c: 156: LED->Time = 0;
 14976  0831  0A7A               	incf	_LED,w
 14977  0832  0086               	movwf	6
 14978  0833  3001               	movlw	1	; select bank2/3
 14979  0834  0087               	movwf	7
 14980  0835  3000               	movlw	0
 14981  0836  3FC0               	movwi [0]fsr1
 14982  0837  3FC1               	movwi [1]fsr1
 14983                           
 14984                           ;LED_B1.c: 158: if (led == 1) {
 14985  0838  0823               	movf	setLED@led,w
 14986  0839  3A01               	xorlw	1
 14987  083A  1D03               	skipz
 14988  083B  283E               	goto	l6659
 14989                           
 14990                           ;LED_B1.c: 162: RA3 = 1;
 14991  083C  158C               	bsf	12,3	;volatile
 14992                           
 14993                           ;LED_B1.c: 164: }
 14994  083D  2842               	goto	l6663
 14995  083E                     l6659:	
 14996                           
 14997                           ;LED_B1.c: 167: else if (led == 2) {
 14998  083E  0823               	movf	setLED@led,w
 14999  083F  3A02               	xorlw	2
 15000  0840  1903               	btfsc	3,2
 15001                           
 15002                           ;LED_B1.c: 171: RC7 = 1;
 15003  0841  178E               	bsf	14,7	;volatile
 15004  0842                     l6663:	
 15005                           
 15006                           ;LED_B1.c: 173: }
 15007                           ;LED_B1.c: 185: if (led == 99) {
 15008  0842  0823               	movf	setLED@led,w
 15009  0843  3A63               	xorlw	99
 15010  0844  1903               	btfsc	3,2
 15011                           
 15012                           ;LED_B1.c: 189: RB5 = 1;
 15013  0845  168D               	bsf	13,5	;volatile
 15014  0846                     l6667:	
 15015                           
 15016                           ;LED_B1.c: 191: }
 15017                           ;LED_B1.c: 193: }
 15018                           ;LED_B1.c: 194: if (command == 11) {
 15019  0846  0822               	movf	setLED@command,w
 15020  0847  3A0B               	xorlw	11
 15021  0848  1D03               	skipz
 15022  0849  0008               	return
 15023                           
 15024                           ;LED_B1.c: 195: LED->GO = 1;
 15025  084A  087A               	movf	_LED,w
 15026  084B  0086               	movwf	6
 15027  084C  3001               	movlw	1	; select bank2/3
 15028  084D  0087               	movwf	7
 15029  084E  1481               	bsf	1,1
 15030  084F  0008               	return
 15031  0850                     __end_of_setLED:	
 15032                           
 15033                           	psect	text88
 15034  1E09                     __ptext88:	
 15035 ;; *************** function _LedPointSelect *****************
 15036 ;; Defined at:
 15037 ;;		line 7 in file "../src/LED_B1.c"
 15038 ;; Parameters:    Size  Location     Type
 15039 ;;  led             1    wreg     unsigned char 
 15040 ;; Auto vars:     Size  Location     Type
 15041 ;;  led             1    1[BANK0 ] unsigned char 
 15042 ;; Return value:  Size  Location     Type
 15043 ;;		None               void
 15044 ;; Registers used:
 15045 ;;		wreg
 15046 ;; Tracked objects:
 15047 ;;		On entry : 0/0
 15048 ;;		On exit  : 0/0
 15049 ;;		Unchanged: 0/0
 15050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;Total ram usage:        2 bytes
 15056 ;; Hardware stack levels used:    1
 15057 ;; Hardware stack levels required when called:    5
 15058 ;; This function calls:
 15059 ;;		Nothing
 15060 ;; This function is called by:
 15061 ;;		_setLED_Initialization
 15062 ;;		_setLED
 15063 ;;		_setLED_Main
 15064 ;; This function uses a non-reentrant model
 15065 ;;
 15066                           
 15067                           
 15068                           ;psect for function _LedPointSelect
 15069  1E09                     _LedPointSelect:	
 15070                           
 15071                           ;incstack = 0
 15072                           ; Regs used in _LedPointSelect: [wreg]
 15073                           ;LedPointSelect@led stored from wreg
 15074  1E09  0020               	movlb	0	; select bank0
 15075  1E0A  00A1               	movwf	LedPointSelect@led
 15076                           
 15077                           ;LED_B1.c: 9: if (led == 1) {
 15078  1E0B  0821               	movf	LedPointSelect@led,w
 15079  1E0C  3A01               	xorlw	1
 15080  1E0D  1D03               	skipz
 15081  1E0E  2E13               	goto	l998
 15082                           
 15083                           ;LED_B1.c: 10: LED = &VarLED1;
 15084  1E0F  3068               	movlw	_VarLED1& (0+255)
 15085  1E10  00A0               	movwf	??_LedPointSelect
 15086  1E11  0820               	movf	??_LedPointSelect,w
 15087  1E12  00FA               	movwf	_LED
 15088  1E13                     l998:	
 15089                           
 15090                           ;LED_B1.c: 11: }
 15091                           ;LED_B1.c: 14: if (led == 2) {
 15092  1E13  0821               	movf	LedPointSelect@led,w
 15093  1E14  3A02               	xorlw	2
 15094  1E15  1D03               	skipz
 15095  1E16  2E1B               	goto	l999
 15096                           
 15097                           ;LED_B1.c: 15: LED = &VarLED2;
 15098  1E17  306C               	movlw	_VarLED2& (0+255)
 15099  1E18  00A0               	movwf	??_LedPointSelect
 15100  1E19  0820               	movf	??_LedPointSelect,w
 15101  1E1A  00FA               	movwf	_LED
 15102  1E1B                     l999:	
 15103                           
 15104                           ;LED_B1.c: 16: }
 15105                           ;LED_B1.c: 24: if (led == 99) {
 15106  1E1B  0821               	movf	LedPointSelect@led,w
 15107  1E1C  3A63               	xorlw	99
 15108  1E1D  1D03               	skipz
 15109  1E1E  0008               	return
 15110                           
 15111                           ;LED_B1.c: 25: LED = &VarErrLED;
 15112  1E1F  3064               	movlw	_VarErrLED& (0+255)
 15113  1E20  00A0               	movwf	??_LedPointSelect
 15114  1E21  0820               	movf	??_LedPointSelect,w
 15115  1E22  00FA               	movwf	_LED
 15116  1E23  0008               	return
 15117  1E24                     __end_of_LedPointSelect:	
 15118                           
 15119                           	psect	text89
 15120  1D49                     __ptext89:	
 15121 ;; *************** function _setDimmerLights_Line *****************
 15122 ;; Defined at:
 15123 ;;		line 667 in file "../src/Dimmer_B1.c"
 15124 ;; Parameters:    Size  Location     Type
 15125 ;;  lights          1    wreg     unsigned char 
 15126 ;; Auto vars:     Size  Location     Type
 15127 ;;  lights          1    0[BANK0 ] unsigned char 
 15128 ;; Return value:  Size  Location     Type
 15129 ;;		None               void
 15130 ;; Registers used:
 15131 ;;		wreg
 15132 ;; Tracked objects:
 15133 ;;		On entry : 0/0
 15134 ;;		On exit  : 0/0
 15135 ;;		Unchanged: 0/0
 15136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;Total ram usage:        1 bytes
 15142 ;; Hardware stack levels used:    1
 15143 ;; Hardware stack levels required when called:    5
 15144 ;; This function calls:
 15145 ;;		Nothing
 15146 ;; This function is called by:
 15147 ;;		_setDimmerLights
 15148 ;; This function uses a non-reentrant model
 15149 ;;
 15150                           
 15151                           
 15152                           ;psect for function _setDimmerLights_Line
 15153  1D49                     _setDimmerLights_Line:	
 15154                           
 15155                           ;incstack = 0
 15156                           ; Regs used in _setDimmerLights_Line: [wreg]
 15157                           ;setDimmerLights_Line@lights stored from wreg
 15158  1D49  0020               	movlb	0	; select bank0
 15159  1D4A  00A0               	movwf	setDimmerLights_Line@lights
 15160                           
 15161                           ;Dimmer_B1.c: 669: DimmerLights1.Line = 0;
 15162  1D4B  0022               	movlb	2	; select bank2
 15163  1D4C  135D               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 15164                           
 15165                           ;Dimmer_B1.c: 672: DimmerLights2.Line = 0;
 15166  1D4D  0023               	movlb	3	; select bank3
 15167  1D4E  1348               	bcf	(_DimmerLights2^(0+384)+10),6	;volatile
 15168                           
 15169                           ;Dimmer_B1.c: 678: if (lights == 1) {
 15170  1D4F  0020               	movlb	0	; select bank0
 15171  1D50  0820               	movf	setDimmerLights_Line@lights,w
 15172  1D51  3A01               	xorlw	1
 15173  1D52  1D03               	skipz
 15174  1D53  2D57               	goto	l6677
 15175                           
 15176                           ;Dimmer_B1.c: 679: DimmerLights1.Line = 1;
 15177  1D54  0022               	movlb	2	; select bank2
 15178  1D55  175D               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 15179                           
 15180                           ;Dimmer_B1.c: 680: }
 15181  1D56  0008               	return
 15182  1D57                     l6677:	
 15183                           
 15184                           ;Dimmer_B1.c: 683: else if (lights == 2) {
 15185  1D57  0020               	movlb	0	; select bank0
 15186  1D58  0820               	movf	setDimmerLights_Line@lights,w
 15187  1D59  3A02               	xorlw	2
 15188  1D5A  1D03               	skipz
 15189  1D5B  0008               	return
 15190                           
 15191                           ;Dimmer_B1.c: 684: DimmerLights2.Line = 1;
 15192  1D5C  0023               	movlb	3	; select bank3
 15193  1D5D  1748               	bsf	(_DimmerLights2^(0+384)+10),6	;volatile
 15194  1D5E  0008               	return
 15195  1D5F                     __end_of_setDimmerLights_Line:	
 15196                           
 15197                           	psect	text90
 15198  1165                     __ptext90:	
 15199 ;; *************** function _getMain_All_Error_Status *****************
 15200 ;; Defined at:
 15201 ;;		line 404 in file "../src/main_B1.c"
 15202 ;; Parameters:    Size  Location     Type
 15203 ;;  command         1    wreg     unsigned char 
 15204 ;; Auto vars:     Size  Location     Type
 15205 ;;  command         1    5[BANK0 ] unsigned char 
 15206 ;;  status          1    6[BANK0 ] unsigned char 
 15207 ;; Return value:  Size  Location     Type
 15208 ;;                  1    wreg      unsigned char 
 15209 ;; Registers used:
 15210 ;;		wreg, status,2, status,0
 15211 ;; Tracked objects:
 15212 ;;		On entry : 0/0
 15213 ;;		On exit  : 0/0
 15214 ;;		Unchanged: 0/0
 15215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15217 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;Total ram usage:        7 bytes
 15221 ;; Hardware stack levels used:    1
 15222 ;; Hardware stack levels required when called:    5
 15223 ;; This function calls:
 15224 ;;		Nothing
 15225 ;; This function is called by:
 15226 ;;		_DimmerLights_Main
 15227 ;;		_setDimmerLights
 15228 ;;		_setDimmerLights_Adj
 15229 ;;		_Load_Main
 15230 ;;		_setTemp_Main
 15231 ;;		_setRF_Main
 15232 ;;		_getRxData
 15233 ;;		_Switch_Main
 15234 ;;		_Exception_Main
 15235 ;; This function uses a non-reentrant model
 15236 ;;
 15237                           
 15238                           
 15239                           ;psect for function _getMain_All_Error_Status
 15240  1165                     _getMain_All_Error_Status:	
 15241                           
 15242                           ;incstack = 0
 15243                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15244                           ;getMain_All_Error_Status@command stored from wreg
 15245  1165  0020               	movlb	0	; select bank0
 15246  1166  00A5               	movwf	getMain_All_Error_Status@command
 15247                           
 15248                           ;main_B1.c: 405: char status = 0;
 15249  1167  01A6               	clrf	getMain_All_Error_Status@status
 15250                           
 15251                           ;main_B1.c: 416: if (status == 0 && command != 2) {
 15252  1168  08A6               	movf	getMain_All_Error_Status@status,f
 15253  1169  1D03               	skipz
 15254  116A  297F               	goto	l6609
 15255  116B  0825               	movf	getMain_All_Error_Status@command,w
 15256  116C  3A02               	xorlw	2
 15257  116D  1903               	skipnz
 15258  116E  297F               	goto	l6609
 15259                           
 15260                           ;main_B1.c: 417: status = Temp.ERROR == 1 ? 2 : 0;
 15261  116F  0021               	movlb	1	; select bank1
 15262  1170  18D6               	btfsc	_Temp^(0+128),1
 15263  1171  2976               	goto	l6607
 15264  1172  0020               	movlb	0	; select bank0
 15265  1173  01A1               	clrf	_getMain_All_Error_Status$6485
 15266  1174  01A2               	clrf	_getMain_All_Error_Status$6485+1
 15267  1175  297B               	goto	l2727
 15268  1176                     l6607:	
 15269  1176  3002               	movlw	2
 15270  1177  0020               	movlb	0	; select bank0
 15271  1178  00A1               	movwf	_getMain_All_Error_Status$6485
 15272  1179  3000               	movlw	0
 15273  117A  00A2               	movwf	_getMain_All_Error_Status$6485+1
 15274  117B                     l2727:	
 15275  117B  0821               	movf	_getMain_All_Error_Status$6485,w
 15276  117C  00A0               	movwf	??_getMain_All_Error_Status
 15277  117D  0820               	movf	??_getMain_All_Error_Status,w
 15278  117E  00A6               	movwf	getMain_All_Error_Status@status
 15279  117F                     l6609:	
 15280                           
 15281                           ;main_B1.c: 418: }
 15282                           ;main_B1.c: 423: if (status == 0 && command != 3) {
 15283  117F  08A6               	movf	getMain_All_Error_Status@status,f
 15284  1180  1D03               	skipz
 15285  1181  2996               	goto	l2728
 15286  1182  0825               	movf	getMain_All_Error_Status@command,w
 15287  1183  3A03               	xorlw	3
 15288  1184  1903               	skipnz
 15289  1185  2996               	goto	l2728
 15290                           
 15291                           ;main_B1.c: 424: status = Load.ERROR == 1 ? 3 : 0;
 15292  1186  0022               	movlb	2	; select bank2
 15293  1187  1AA5               	btfsc	_Load^(0+256),5
 15294  1188  298D               	goto	l6617
 15295  1189  0020               	movlb	0	; select bank0
 15296  118A  01A3               	clrf	_getMain_All_Error_Status$6486
 15297  118B  01A4               	clrf	_getMain_All_Error_Status$6486+1
 15298  118C  2992               	goto	l2732
 15299  118D                     l6617:	
 15300  118D  3003               	movlw	3
 15301  118E  0020               	movlb	0	; select bank0
 15302  118F  00A3               	movwf	_getMain_All_Error_Status$6486
 15303  1190  3000               	movlw	0
 15304  1191  00A4               	movwf	_getMain_All_Error_Status$6486+1
 15305  1192                     l2732:	
 15306  1192  0823               	movf	_getMain_All_Error_Status$6486,w
 15307  1193  00A0               	movwf	??_getMain_All_Error_Status
 15308  1194  0820               	movf	??_getMain_All_Error_Status,w
 15309  1195  00A6               	movwf	getMain_All_Error_Status@status
 15310  1196                     l2728:	
 15311                           
 15312                           ;main_B1.c: 425: }
 15313                           ;main_B1.c: 441: return status;
 15314  1196  0826               	movf	getMain_All_Error_Status@status,w
 15315  1197  0008               	return
 15316  1198                     __end_of_getMain_All_Error_Status:	
 15317                           
 15318                           	psect	text91
 15319  10D7                     __ptext91:	
 15320 ;; *************** function _getMain_LightsStatus *****************
 15321 ;; Defined at:
 15322 ;;		line 375 in file "../src/main_B1.c"
 15323 ;; Parameters:    Size  Location     Type
 15324 ;;		None
 15325 ;; Auto vars:     Size  Location     Type
 15326 ;;  i               2    6[BANK0 ] int 
 15327 ;;  status          1    8[BANK0 ] unsigned char 
 15328 ;;  count           1    5[BANK0 ] unsigned char 
 15329 ;; Return value:  Size  Location     Type
 15330 ;;                  1    wreg      unsigned char 
 15331 ;; Registers used:
 15332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15333 ;; Tracked objects:
 15334 ;;		On entry : 0/0
 15335 ;;		On exit  : 0/0
 15336 ;;		Unchanged: 0/0
 15337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;Total ram usage:        5 bytes
 15343 ;; Hardware stack levels used:    1
 15344 ;; Hardware stack levels required when called:    7
 15345 ;; This function calls:
 15346 ;;		_getDimmerLights_Status
 15347 ;; This function is called by:
 15348 ;;		_DimmerLights_Main
 15349 ;;		_Flash_Memory_Main
 15350 ;;		_Load_Main
 15351 ;;		_setMain_Exception
 15352 ;; This function uses a non-reentrant model
 15353 ;;
 15354                           
 15355                           
 15356                           ;psect for function _getMain_LightsStatus
 15357  10D7                     _getMain_LightsStatus:	
 15358                           
 15359                           ;main_B1.c: 376: char status = 0, count = 0;
 15360                           
 15361                           ;incstack = 0
 15362                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15363  10D7  0020               	movlb	0	; select bank0
 15364  10D8  01A8               	clrf	getMain_LightsStatus@status
 15365  10D9  01A5               	clrf	getMain_LightsStatus@count
 15366                           
 15367                           ;main_B1.c: 383: count = 2;
 15368  10DA  3002               	movlw	2
 15369  10DB  00A4               	movwf	??_getMain_LightsStatus
 15370  10DC  0824               	movf	??_getMain_LightsStatus,w
 15371  10DD  00A5               	movwf	getMain_LightsStatus@count
 15372                           
 15373                           ;main_B1.c: 390: for (int i = 0; i < count; i++) {
 15374  10DE  01A6               	clrf	getMain_LightsStatus@i
 15375  10DF  01A7               	clrf	getMain_LightsStatus@i+1
 15376  10E0                     l6919:	
 15377  10E0  0827               	movf	getMain_LightsStatus@i+1,w
 15378  10E1  3A80               	xorlw	128
 15379  10E2  00A4               	movwf	??_getMain_LightsStatus
 15380  10E3  3080               	movlw	128
 15381  10E4  0224               	subwf	??_getMain_LightsStatus,w
 15382  10E5  1D03               	skipz
 15383  10E6  28E9               	goto	u6155
 15384  10E7  0825               	movf	getMain_LightsStatus@count,w
 15385  10E8  0226               	subwf	getMain_LightsStatus@i,w
 15386  10E9                     u6155:	
 15387  10E9  1803               	btfsc	3,0
 15388  10EA  2901               	goto	l6921
 15389                           
 15390                           ;main_B1.c: 391: if (status == 0) {
 15391  10EB  0020               	movlb	0	; select bank0
 15392  10EC  08A8               	movf	getMain_LightsStatus@status,f
 15393  10ED  1D03               	skipz
 15394  10EE  28FC               	goto	l6917
 15395                           
 15396                           ;main_B1.c: 396: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 15397  10EF  0826               	movf	getMain_LightsStatus@i,w
 15398  10F0  3E01               	addlw	1
 15399  10F1  319B  23BA  3190   	fcall	_getDimmerLights_Status
 15400  10F4  3A01               	xorlw	1
 15401  10F5  3000               	movlw	0
 15402  10F6  1903               	skipnz
 15403  10F7  3001               	movlw	1
 15404  10F8  0020               	movlb	0	; select bank0
 15405  10F9  00A4               	movwf	??_getMain_LightsStatus
 15406  10FA  0824               	movf	??_getMain_LightsStatus,w
 15407  10FB  00A8               	movwf	getMain_LightsStatus@status
 15408  10FC                     l6917:	
 15409  10FC  3001               	movlw	1
 15410  10FD  07A6               	addwf	getMain_LightsStatus@i,f
 15411  10FE  3000               	movlw	0
 15412  10FF  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15413  1100  28E0               	goto	l6919
 15414  1101                     l6921:	
 15415                           
 15416                           ;main_B1.c: 398: }
 15417                           ;main_B1.c: 399: }
 15418                           ;main_B1.c: 400: return status;
 15419  1101  0020               	movlb	0	; select bank0
 15420  1102  0828               	movf	getMain_LightsStatus@status,w
 15421  1103  0008               	return
 15422  1104                     __end_of_getMain_LightsStatus:	
 15423                           
 15424                           	psect	text92
 15425  1ADD                     __ptext92:	
 15426 ;; *************** function _getLoad_OK *****************
 15427 ;; Defined at:
 15428 ;;		line 219 in file "../src/OverLoad_B1.c"
 15429 ;; Parameters:    Size  Location     Type
 15430 ;;		None
 15431 ;; Auto vars:     Size  Location     Type
 15432 ;;  ok              1    0[BANK0 ] unsigned char 
 15433 ;; Return value:  Size  Location     Type
 15434 ;;                  1    wreg      unsigned char 
 15435 ;; Registers used:
 15436 ;;		wreg, status,2
 15437 ;; Tracked objects:
 15438 ;;		On entry : 0/0
 15439 ;;		On exit  : 0/0
 15440 ;;		Unchanged: 0/0
 15441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;Total ram usage:        1 bytes
 15447 ;; Hardware stack levels used:    1
 15448 ;; Hardware stack levels required when called:    5
 15449 ;; This function calls:
 15450 ;;		Nothing
 15451 ;; This function is called by:
 15452 ;;		_DimmerLights_Main
 15453 ;; This function uses a non-reentrant model
 15454 ;;
 15455                           
 15456                           
 15457                           ;psect for function _getLoad_OK
 15458  1ADD                     _getLoad_OK:	
 15459                           
 15460                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
 15461                           
 15462                           ;incstack = 0
 15463                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15464  1ADD  3000               	movlw	0
 15465  1ADE  0022               	movlb	2	; select bank2
 15466  1ADF  1BA5               	btfsc	_Load^(0+256),7
 15467  1AE0  3001               	movlw	1
 15468  1AE1  0020               	movlb	0	; select bank0
 15469  1AE2  00A0               	movwf	getLoad_OK@ok
 15470                           
 15471                           ;OverLoad_B1.c: 221: return ok;
 15472  1AE3  0820               	movf	getLoad_OK@ok,w
 15473  1AE4  0008               	return
 15474  1AE5                     __end_of_getLoad_OK:	
 15475                           
 15476                           	psect	text93
 15477  1D75                     __ptext93:	
 15478 ;; *************** function _DimmerLights_Initialization *****************
 15479 ;; Defined at:
 15480 ;;		line 329 in file "../src/Dimmer_B1.c"
 15481 ;; Parameters:    Size  Location     Type
 15482 ;;		None
 15483 ;; Auto vars:     Size  Location     Type
 15484 ;;		None
 15485 ;; Return value:  Size  Location     Type
 15486 ;;		None               void
 15487 ;; Registers used:
 15488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15489 ;; Tracked objects:
 15490 ;;		On entry : 0/0
 15491 ;;		On exit  : 0/0
 15492 ;;		Unchanged: 0/0
 15493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15498 ;;Total ram usage:        1 bytes
 15499 ;; Hardware stack levels used:    1
 15500 ;; Hardware stack levels required when called:    7
 15501 ;; This function calls:
 15502 ;;		_Dimmer_Initialization
 15503 ;;		_setDimmerLights_Initialization
 15504 ;; This function is called by:
 15505 ;;		_main
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           
 15510                           ;psect for function _DimmerLights_Initialization
 15511  1D75                     _DimmerLights_Initialization:	
 15512                           
 15513                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 15514                           
 15515                           ;incstack = 0
 15516                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15517  1D75  3053               	movlw	_DimmerLights1& (0+255)
 15518  1D76  0020               	movlb	0	; select bank0
 15519  1D77  00A4               	movwf	??_DimmerLights_Initialization
 15520  1D78  0824               	movf	??_DimmerLights_Initialization,w
 15521  1D79  0021               	movlb	1	; select bank1
 15522  1D7A  00CC               	movwf	_DimmerLights11^(0+128)
 15523                           
 15524                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 15525  1D7B  3001               	movlw	1
 15526  1D7C  319F  27B0  319D   	fcall	_setDimmerLights_Initialization
 15527                           
 15528                           ;Dimmer_B1.c: 336: DimmerLights22 = &DimmerLights2;
 15529  1D7F  30BE               	movlw	_DimmerLights2& (0+255)
 15530  1D80  0020               	movlb	0	; select bank0
 15531  1D81  00A4               	movwf	??_DimmerLights_Initialization
 15532  1D82  0824               	movf	??_DimmerLights_Initialization,w
 15533  1D83  0021               	movlb	1	; select bank1
 15534  1D84  00CD               	movwf	_DimmerLights22^(0+128)
 15535                           
 15536                           ;Dimmer_B1.c: 337: setDimmerLights_Initialization(2);
 15537  1D85  3002               	movlw	2
 15538  1D86  319F  27B0  319D   	fcall	_setDimmerLights_Initialization
 15539                           
 15540                           ;Dimmer_B1.c: 346: Dimmer_Initialization();
 15541  1D89  319A  2281         	fcall	_Dimmer_Initialization
 15542  1D8B  0008               	return
 15543  1D8C                     __end_of_DimmerLights_Initialization:	
 15544                           
 15545                           	psect	text94
 15546  1FB0                     __ptext94:	
 15547 ;; *************** function _setDimmerLights_Initialization *****************
 15548 ;; Defined at:
 15549 ;;		line 352 in file "../src/Dimmer_B1.c"
 15550 ;; Parameters:    Size  Location     Type
 15551 ;;  lights          1    wreg     unsigned char 
 15552 ;; Auto vars:     Size  Location     Type
 15553 ;;  lights          1    3[BANK0 ] unsigned char 
 15554 ;; Return value:  Size  Location     Type
 15555 ;;		None               void
 15556 ;; Registers used:
 15557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15558 ;; Tracked objects:
 15559 ;;		On entry : 0/0
 15560 ;;		On exit  : 0/0
 15561 ;;		Unchanged: 0/0
 15562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15566 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15567 ;;Total ram usage:        2 bytes
 15568 ;; Hardware stack levels used:    1
 15569 ;; Hardware stack levels required when called:    6
 15570 ;; This function calls:
 15571 ;;		_DimmerLightsPointSelect
 15572 ;; This function is called by:
 15573 ;;		_DimmerLights_Initialization
 15574 ;; This function uses a non-reentrant model
 15575 ;;
 15576                           
 15577                           
 15578                           ;psect for function _setDimmerLights_Initialization
 15579  1FB0                     _setDimmerLights_Initialization:	
 15580                           
 15581                           ;incstack = 0
 15582                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15583                           ;setDimmerLights_Initialization@lights stored from wreg
 15584  1FB0  0020               	movlb	0	; select bank0
 15585  1FB1  00A3               	movwf	setDimmerLights_Initialization@lights
 15586                           
 15587                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 15588  1FB2  0823               	movf	setDimmerLights_Initialization@lights,w
 15589  1FB3  319C  2446         	fcall	_DimmerLightsPointSelect
 15590                           
 15591                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(65*0.8));
 15592  1FB5  3034               	movlw	52
 15593  1FB6  0020               	movlb	0	; select bank0
 15594  1FB7  00A2               	movwf	??_setDimmerLights_Initialization
 15595  1FB8  086F               	movf	_DimmerLights,w
 15596  1FB9  3E06               	addlw	6
 15597  1FBA  0086               	movwf	6
 15598  1FBB  3001               	movlw	1	; select bank2/3
 15599  1FBC  0087               	movwf	7
 15600  1FBD  0822               	movf	??_setDimmerLights_Initialization,w
 15601  1FBE  0081               	movwf	1
 15602                           
 15603                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 15604  1FBF  300C               	movlw	12
 15605  1FC0  00A2               	movwf	??_setDimmerLights_Initialization
 15606  1FC1  086F               	movf	_DimmerLights,w
 15607  1FC2  3E09               	addlw	9
 15608  1FC3  0086               	movwf	6
 15609  1FC4  3001               	movlw	1	; select bank2/3
 15610  1FC5  0087               	movwf	7
 15611  1FC6  0822               	movf	??_setDimmerLights_Initialization,w
 15612  1FC7  0081               	movwf	1
 15613                           
 15614                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15615  1FC8  086F               	movf	_DimmerLights,w
 15616  1FC9  3E06               	addlw	6
 15617  1FCA  0086               	movwf	6
 15618  1FCB  3001               	movlw	1	; select bank2/3
 15619  1FCC  0087               	movwf	7
 15620  1FCD  0801               	movf	1,w
 15621  1FCE  00A2               	movwf	??_setDimmerLights_Initialization
 15622  1FCF  086F               	movf	_DimmerLights,w
 15623  1FD0  3E04               	addlw	4
 15624  1FD1  0086               	movwf	6
 15625  1FD2  3001               	movlw	1	; select bank2/3
 15626  1FD3  0087               	movwf	7
 15627  1FD4  0822               	movf	??_setDimmerLights_Initialization,w
 15628  1FD5  0081               	movwf	1
 15629  1FD6  0008               	return
 15630  1FD7                     __end_of_setDimmerLights_Initialization:	
 15631                           
 15632                           	psect	text95
 15633  1A81                     __ptext95:	
 15634 ;; *************** function _Dimmer_Initialization *****************
 15635 ;; Defined at:
 15636 ;;		line 892 in file "../src/Dimmer_B1.c"
 15637 ;; Parameters:    Size  Location     Type
 15638 ;;		None
 15639 ;; Auto vars:     Size  Location     Type
 15640 ;;		None
 15641 ;; Return value:  Size  Location     Type
 15642 ;;		None               void
 15643 ;; Registers used:
 15644 ;;		None
 15645 ;; Tracked objects:
 15646 ;;		On entry : 0/0
 15647 ;;		On exit  : 0/0
 15648 ;;		Unchanged: 0/0
 15649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;Total ram usage:        0 bytes
 15655 ;; Hardware stack levels used:    1
 15656 ;; Hardware stack levels required when called:    5
 15657 ;; This function calls:
 15658 ;;		Nothing
 15659 ;; This function is called by:
 15660 ;;		_DimmerLights_Initialization
 15661 ;; This function uses a non-reentrant model
 15662 ;;
 15663                           
 15664                           
 15665                           ;psect for function _Dimmer_Initialization
 15666  1A81                     _Dimmer_Initialization:	
 15667                           
 15668                           ;incstack = 0
 15669                           ; Regs used in _Dimmer_Initialization: []
 15670  1A81  0008               	return
 15671  1A82                     __end_of_Dimmer_Initialization:	
 15672                           
 15673                           	psect	text96
 15674  1AD5                     __ptext96:	
 15675 ;; *************** function _DelayOff_Main *****************
 15676 ;; Defined at:
 15677 ;;		line 41 in file "../src/DelayOff_B1.c"
 15678 ;; Parameters:    Size  Location     Type
 15679 ;;		None
 15680 ;; Auto vars:     Size  Location     Type
 15681 ;;		None
 15682 ;; Return value:  Size  Location     Type
 15683 ;;		None               void
 15684 ;; Registers used:
 15685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15686 ;; Tracked objects:
 15687 ;;		On entry : 0/0
 15688 ;;		On exit  : 0/0
 15689 ;;		Unchanged: 0/0
 15690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15695 ;;Total ram usage:        0 bytes
 15696 ;; Hardware stack levels used:    1
 15697 ;; Hardware stack levels required when called:   11
 15698 ;; This function calls:
 15699 ;;		_DlyOff_Main
 15700 ;; This function is called by:
 15701 ;;		_main
 15702 ;; This function uses a non-reentrant model
 15703 ;;
 15704                           
 15705                           
 15706                           ;psect for function _DelayOff_Main
 15707  1AD5                     _DelayOff_Main:	
 15708                           
 15709                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15710                           
 15711                           ;incstack = 0
 15712                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15713  1AD5  3001               	movlw	1
 15714  1AD6  3188  20AD  319A   	fcall	_DlyOff_Main
 15715                           
 15716                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15717  1AD9  3002               	movlw	2
 15718  1ADA  3188  20AD         	fcall	_DlyOff_Main
 15719  1ADC  0008               	return
 15720  1ADD                     __end_of_DelayOff_Main:	
 15721                           
 15722                           	psect	text97
 15723  08AD                     __ptext97:	
 15724 ;; *************** function _DlyOff_Main *****************
 15725 ;; Defined at:
 15726 ;;		line 61 in file "../src/DelayOff_B1.c"
 15727 ;; Parameters:    Size  Location     Type
 15728 ;;  sw              1    wreg     unsigned char 
 15729 ;; Auto vars:     Size  Location     Type
 15730 ;;  sw              1   24[BANK0 ] unsigned char 
 15731 ;; Return value:  Size  Location     Type
 15732 ;;		None               void
 15733 ;; Registers used:
 15734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15735 ;; Tracked objects:
 15736 ;;		On entry : 0/0
 15737 ;;		On exit  : 0/0
 15738 ;;		Unchanged: 0/0
 15739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15743 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15744 ;;Total ram usage:        3 bytes
 15745 ;; Hardware stack levels used:    1
 15746 ;; Hardware stack levels required when called:   10
 15747 ;; This function calls:
 15748 ;;		_DelayOffPointSelect
 15749 ;;		_setBuz
 15750 ;;		_setDimmerLights_ErrorClose
 15751 ;; This function is called by:
 15752 ;;		_DelayOff_Main
 15753 ;; This function uses a non-reentrant model
 15754 ;;
 15755                           
 15756                           
 15757                           ;psect for function _DlyOff_Main
 15758  08AD                     _DlyOff_Main:	
 15759                           
 15760                           ;incstack = 0
 15761                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15762                           ;DlyOff_Main@sw stored from wreg
 15763  08AD  0020               	movlb	0	; select bank0
 15764  08AE  00B8               	movwf	DlyOff_Main@sw
 15765                           
 15766                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15767  08AF  0838               	movf	DlyOff_Main@sw,w
 15768  08B0  319C  24BA  3188   	fcall	_DelayOffPointSelect
 15769                           
 15770                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15771  08B3  0878               	movf	_DelayOff,w
 15772  08B4  0086               	movwf	6
 15773  08B5  3001               	movlw	1	; select bank2/3
 15774  08B6  0087               	movwf	7
 15775  08B7  1C81               	btfss	1,1
 15776  08B8  0008               	return
 15777                           
 15778                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15779  08B9  0878               	movf	_DelayOff,w
 15780  08BA  3E02               	addlw	2
 15781  08BB  0086               	movwf	6
 15782  08BC  3001               	movlw	1	; select bank2/3
 15783  08BD  0087               	movwf	7
 15784  08BE  3001               	movlw	1
 15785  08BF  0781               	addwf	1,f
 15786  08C0  3141               	addfsr 1,1
 15787  08C1  1803               	skipnc
 15788  08C2  0A81               	incf	1,f
 15789                           
 15790                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15791  08C3  0878               	movf	_DelayOff,w
 15792  08C4  3E02               	addlw	2
 15793  08C5  0086               	movwf	6
 15794  08C6  3001               	movlw	1	; select bank2/3
 15795  08C7  0087               	movwf	7
 15796  08C8  3F40               	moviw [0]fsr1
 15797  08C9  0020               	movlb	0	; select bank0
 15798  08CA  00B6               	movwf	??_DlyOff_Main
 15799  08CB  3F41               	moviw [1]fsr1
 15800  08CC  00B7               	movwf	??_DlyOff_Main+1
 15801  08CD  3017               	movlw	23
 15802  08CE  0237               	subwf	??_DlyOff_Main+1,w
 15803  08CF  3070               	movlw	112
 15804  08D0  1903               	skipnz
 15805  08D1  0236               	subwf	??_DlyOff_Main,w
 15806  08D2  1C03               	skipc
 15807  08D3  0008               	return
 15808                           
 15809                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15810  08D4  0878               	movf	_DelayOff,w
 15811  08D5  3E02               	addlw	2
 15812  08D6  0086               	movwf	6
 15813  08D7  3001               	movlw	1	; select bank2/3
 15814  08D8  0087               	movwf	7
 15815  08D9  3000               	movlw	0
 15816  08DA  3FC0               	movwi [0]fsr1
 15817  08DB  3FC1               	movwi [1]fsr1
 15818                           
 15819                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15820  08DC  3001               	movlw	1
 15821  08DD  00B6               	movwf	??_DlyOff_Main
 15822  08DE  0878               	movf	_DelayOff,w
 15823  08DF  3E04               	addlw	4
 15824  08E0  0086               	movwf	6
 15825  08E1  3001               	movlw	1	; select bank2/3
 15826  08E2  0087               	movwf	7
 15827  08E3  0836               	movf	??_DlyOff_Main,w
 15828  08E4  0781               	addwf	1,f
 15829                           
 15830                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15831  08E5  0878               	movf	_DelayOff,w
 15832  08E6  3E04               	addlw	4
 15833  08E7  0086               	movwf	6
 15834  08E8  3001               	movlw	1	; select bank2/3
 15835  08E9  0087               	movwf	7
 15836  08EA  0A78               	incf	_DelayOff,w
 15837  08EB  0084               	movwf	4
 15838  08EC  3001               	movlw	1	; select bank2/3
 15839  08ED  0085               	movwf	5
 15840  08EE  0800               	movf	0,w
 15841  08EF  0201               	subwf	1,w
 15842  08F0  1C03               	skipc
 15843  08F1  0008               	return
 15844                           
 15845                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15846  08F2  0878               	movf	_DelayOff,w
 15847  08F3  3E04               	addlw	4
 15848  08F4  0086               	movwf	6
 15849  08F5  3001               	movlw	1	; select bank2/3
 15850  08F6  0087               	movwf	7
 15851  08F7  0181               	clrf	1
 15852                           
 15853                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15854  08F8  0878               	movf	_DelayOff,w
 15855  08F9  0086               	movwf	6
 15856  08FA  3001               	movlw	1	; select bank2/3
 15857  08FB  0087               	movwf	7
 15858  08FC  1081               	bcf	1,1
 15859                           
 15860                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15861  08FD  3064               	movlw	100
 15862  08FE  00A9               	movwf	setBuz@time
 15863  08FF  3000               	movlw	0
 15864  0900  00AA               	movwf	setBuz@time+1
 15865  0901  3001               	movlw	1
 15866  0902  3195  25DF  3188   	fcall	_setBuz
 15867                           
 15868                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15869  0905  0020               	movlb	0	; select bank0
 15870  0906  0838               	movf	DlyOff_Main@sw,w
 15871  0907  3196  26EC         	fcall	_setDimmerLights_ErrorClose
 15872  0909  0008               	return
 15873  090A                     __end_of_DlyOff_Main:	
 15874                           
 15875                           	psect	text98
 15876  16EC                     __ptext98:	
 15877 ;; *************** function _setDimmerLights_ErrorClose *****************
 15878 ;; Defined at:
 15879 ;;		line 562 in file "../src/Dimmer_B1.c"
 15880 ;; Parameters:    Size  Location     Type
 15881 ;;  lights          1    wreg     unsigned char 
 15882 ;; Auto vars:     Size  Location     Type
 15883 ;;  lights          1   19[BANK0 ] unsigned char 
 15884 ;;  i               2   20[BANK0 ] int 
 15885 ;;  count           1   18[BANK0 ] unsigned char 
 15886 ;; Return value:  Size  Location     Type
 15887 ;;		None               void
 15888 ;; Registers used:
 15889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15890 ;; Tracked objects:
 15891 ;;		On entry : 0/0
 15892 ;;		On exit  : 0/0
 15893 ;;		Unchanged: 0/0
 15894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15896 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;Total ram usage:        5 bytes
 15900 ;; Hardware stack levels used:    1
 15901 ;; Hardware stack levels required when called:    9
 15902 ;; This function calls:
 15903 ;;		_DimmerLightsPointSelect
 15904 ;;		_getDimmerLights_Status
 15905 ;;		_setDimmerLights_SwOff
 15906 ;; This function is called by:
 15907 ;;		_DlyOff_Main
 15908 ;;		_setControl_Lights_Table
 15909 ;;		_setMain_Exception
 15910 ;; This function uses a non-reentrant model
 15911 ;;
 15912                           
 15913                           
 15914                           ;psect for function _setDimmerLights_ErrorClose
 15915  16EC                     _setDimmerLights_ErrorClose:	
 15916                           
 15917                           ;incstack = 0
 15918                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15919                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15920  16EC  0020               	movlb	0	; select bank0
 15921  16ED  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15922                           
 15923                           ;Dimmer_B1.c: 563: if (lights == 255) {
 15924  16EE  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15925  16EF  3AFF               	xorlw	255
 15926  16F0  1D03               	skipz
 15927  16F1  2F2A               	goto	l6501
 15928                           
 15929                           ;Dimmer_B1.c: 568: char count = 2;
 15930  16F2  3002               	movlw	2
 15931  16F3  00B1               	movwf	??_setDimmerLights_ErrorClose
 15932  16F4  0831               	movf	??_setDimmerLights_ErrorClose,w
 15933  16F5  00B2               	movwf	setDimmerLights_ErrorClose@count
 15934                           
 15935                           ;Dimmer_B1.c: 573: for (int i = 0; i < count; i++) {
 15936  16F6  01B4               	clrf	setDimmerLights_ErrorClose@i
 15937  16F7  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15938  16F8                     l6499:	
 15939  16F8  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15940  16F9  3A80               	xorlw	128
 15941  16FA  00B1               	movwf	??_setDimmerLights_ErrorClose
 15942  16FB  3080               	movlw	128
 15943  16FC  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15944  16FD  1D03               	skipz
 15945  16FE  2F01               	goto	u5485
 15946  16FF  0832               	movf	setDimmerLights_ErrorClose@count,w
 15947  1700  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15948  1701                     u5485:	
 15949  1701  1803               	btfsc	3,0
 15950  1702  0008               	return
 15951                           
 15952                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(i + 1);
 15953  1703  0020               	movlb	0	; select bank0
 15954  1704  0834               	movf	setDimmerLights_ErrorClose@i,w
 15955  1705  3E01               	addlw	1
 15956  1706  319C  2446  3196   	fcall	_DimmerLightsPointSelect
 15957                           
 15958                           ;Dimmer_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 15959  1709  0020               	movlb	0	; select bank0
 15960  170A  0834               	movf	setDimmerLights_ErrorClose@i,w
 15961  170B  3E01               	addlw	1
 15962  170C  319B  23BA  3196   	fcall	_getDimmerLights_Status
 15963  170F  3A01               	xorlw	1
 15964  1710  1D03               	skipz
 15965  1711  2F24               	goto	l6497
 15966                           
 15967                           ;Dimmer_B1.c: 576: DimmerLights->SwFlag = 1;
 15968  1712  0020               	movlb	0	; select bank0
 15969  1713  086F               	movf	_DimmerLights,w
 15970  1714  3E0B               	addlw	11
 15971  1715  0086               	movwf	6
 15972  1716  3001               	movlw	1	; select bank2/3
 15973  1717  0087               	movwf	7
 15974  1718  1481               	bsf	1,1
 15975                           
 15976                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 15977  1719  086F               	movf	_DimmerLights,w
 15978  171A  3E02               	addlw	2
 15979  171B  0086               	movwf	6
 15980  171C  3001               	movlw	1	; select bank2/3
 15981  171D  0087               	movwf	7
 15982  171E  1081               	bcf	1,1
 15983                           
 15984                           ;Dimmer_B1.c: 578: setDimmerLights_SwOff(i + 1);
 15985  171F  0834               	movf	setDimmerLights_ErrorClose@i,w
 15986  1720  3E01               	addlw	1
 15987  1721  3194  24A3  3196   	fcall	_setDimmerLights_SwOff
 15988  1724                     l6497:	
 15989  1724  3001               	movlw	1
 15990  1725  0020               	movlb	0	; select bank0
 15991  1726  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15992  1727  3000               	movlw	0
 15993  1728  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15994  1729  2EF8               	goto	l6499
 15995  172A                     l6501:	
 15996                           ;Dimmer_B1.c: 579: }
 15997                           ;Dimmer_B1.c: 580: }
 15998                           ;Dimmer_B1.c: 581: } else {
 15999                           
 16000                           
 16001                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 16002  172A  0020               	movlb	0	; select bank0
 16003  172B  0833               	movf	setDimmerLights_ErrorClose@lights,w
 16004  172C  319C  2446  3196   	fcall	_DimmerLightsPointSelect
 16005                           
 16006                           ;Dimmer_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 16007  172F  0020               	movlb	0	; select bank0
 16008  1730  0833               	movf	setDimmerLights_ErrorClose@lights,w
 16009  1731  319B  23BA  3196   	fcall	_getDimmerLights_Status
 16010  1734  3A01               	xorlw	1
 16011  1735  1D03               	skipz
 16012  1736  0008               	return
 16013                           
 16014                           ;Dimmer_B1.c: 584: DimmerLights->SwFlag = 1;
 16015  1737  0020               	movlb	0	; select bank0
 16016  1738  086F               	movf	_DimmerLights,w
 16017  1739  3E0B               	addlw	11
 16018  173A  0086               	movwf	6
 16019  173B  3001               	movlw	1	; select bank2/3
 16020  173C  0087               	movwf	7
 16021  173D  1481               	bsf	1,1
 16022                           
 16023                           ;Dimmer_B1.c: 585: DimmerLights->Status = 0;
 16024  173E  086F               	movf	_DimmerLights,w
 16025  173F  3E02               	addlw	2
 16026  1740  0086               	movwf	6
 16027  1741  3001               	movlw	1	; select bank2/3
 16028  1742  0087               	movwf	7
 16029  1743  1081               	bcf	1,1
 16030                           
 16031                           ;Dimmer_B1.c: 586: setDimmerLights_SwOff(lights);
 16032  1744  0833               	movf	setDimmerLights_ErrorClose@lights,w
 16033  1745  3194  24A3         	fcall	_setDimmerLights_SwOff
 16034  1747  0008               	return
 16035  1748                     __end_of_setDimmerLights_ErrorClose:	
 16036                           
 16037                           	psect	text99
 16038  14A3                     __ptext99:	
 16039 ;; *************** function _setDimmerLights_SwOff *****************
 16040 ;; Defined at:
 16041 ;;		line 524 in file "../src/Dimmer_B1.c"
 16042 ;; Parameters:    Size  Location     Type
 16043 ;;  sw              1    wreg     unsigned char 
 16044 ;; Auto vars:     Size  Location     Type
 16045 ;;  sw              1   16[BANK0 ] unsigned char 
 16046 ;;  command         1   15[BANK0 ] unsigned char 
 16047 ;; Return value:  Size  Location     Type
 16048 ;;		None               void
 16049 ;; Registers used:
 16050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16051 ;; Tracked objects:
 16052 ;;		On entry : 0/0
 16053 ;;		On exit  : 0/0
 16054 ;;		Unchanged: 0/0
 16055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16060 ;;Total ram usage:        2 bytes
 16061 ;; Hardware stack levels used:    1
 16062 ;; Hardware stack levels required when called:    8
 16063 ;; This function calls:
 16064 ;;		_DimmerLightsPointSelect
 16065 ;;		_getDelayOff_GO
 16066 ;;		_setDelayOff_GO
 16067 ;;		_setDimmerLights_Trigger
 16068 ;;		_setDimmerLights_TriggerAdj
 16069 ;; This function is called by:
 16070 ;;		_setDimmerLights_ErrorClose
 16071 ;;		_setRFSW_Control
 16072 ;;		_setSw_Main
 16073 ;; This function uses a non-reentrant model
 16074 ;;
 16075                           
 16076                           
 16077                           ;psect for function _setDimmerLights_SwOff
 16078  14A3                     _setDimmerLights_SwOff:	
 16079                           
 16080                           ;incstack = 0
 16081                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16082                           ;setDimmerLights_SwOff@sw stored from wreg
 16083  14A3  0020               	movlb	0	; select bank0
 16084  14A4  00B0               	movwf	setDimmerLights_SwOff@sw
 16085                           
 16086                           ;Dimmer_B1.c: 525: DimmerLightsPointSelect(sw);
 16087  14A5  0830               	movf	setDimmerLights_SwOff@sw,w
 16088  14A6  319C  2446  3194   	fcall	_DimmerLightsPointSelect
 16089                           
 16090                           ;Dimmer_B1.c: 526: char command = DimmerLights->Status == 1 ? 1 : 0;
 16091  14A9  0020               	movlb	0	; select bank0
 16092  14AA  086F               	movf	_DimmerLights,w
 16093  14AB  3E02               	addlw	2
 16094  14AC  0086               	movwf	6
 16095  14AD  3001               	movlw	1	; select bank2/3
 16096  14AE  0087               	movwf	7
 16097  14AF  3000               	movlw	0
 16098  14B0  1881               	btfsc	1,1
 16099  14B1  3001               	movlw	1
 16100  14B2  00AF               	movwf	setDimmerLights_SwOff@command
 16101                           
 16102                           ;Dimmer_B1.c: 527: if (DimmerLights->SwFlag == 1) {
 16103  14B3  086F               	movf	_DimmerLights,w
 16104  14B4  3E0B               	addlw	11
 16105  14B5  0086               	movwf	6
 16106  14B6  3001               	movlw	1	; select bank2/3
 16107  14B7  0087               	movwf	7
 16108  14B8  1C81               	btfss	1,1
 16109  14B9  0008               	return
 16110                           
 16111                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 0;
 16112  14BA  086F               	movf	_DimmerLights,w
 16113  14BB  3E0B               	addlw	11
 16114  14BC  0086               	movwf	6
 16115  14BD  3001               	movlw	1	; select bank2/3
 16116  14BE  0087               	movwf	7
 16117  14BF  1081               	bcf	1,1
 16118                           
 16119                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 1) {
 16120  14C0  086F               	movf	_DimmerLights,w
 16121  14C1  3E02               	addlw	2
 16122  14C2  0086               	movwf	6
 16123  14C3  3001               	movlw	1	; select bank2/3
 16124  14C4  0087               	movwf	7
 16125  14C5  1C81               	btfss	1,1
 16126  14C6  2CD9               	goto	l6357
 16127                           
 16128                           ;Dimmer_B1.c: 530: if (DimmerLights->SwAdj == 1) {
 16129  14C7  086F               	movf	_DimmerLights,w
 16130  14C8  3E0B               	addlw	11
 16131  14C9  0086               	movwf	6
 16132  14CA  3001               	movlw	1	; select bank2/3
 16133  14CB  0087               	movwf	7
 16134  14CC  1D01               	btfss	1,2
 16135  14CD  0008               	return
 16136                           
 16137                           ;Dimmer_B1.c: 531: DimmerLights->SwAdj = 0;
 16138  14CE  086F               	movf	_DimmerLights,w
 16139  14CF  3E0B               	addlw	11
 16140  14D0  0086               	movwf	6
 16141  14D1  3001               	movlw	1	; select bank2/3
 16142  14D2  0087               	movwf	7
 16143  14D3  1101               	bcf	1,2
 16144                           
 16145                           ;Dimmer_B1.c: 532: setDimmerLights_TriggerAdj(sw, 0);
 16146  14D4  01A2               	clrf	setDimmerLights_TriggerAdj@command
 16147  14D5  0830               	movf	setDimmerLights_SwOff@sw,w
 16148  14D6  319E  265F         	fcall	_setDimmerLights_TriggerAdj
 16149                           
 16150                           ;Dimmer_B1.c: 533: }
 16151                           ;Dimmer_B1.c: 534: } else {
 16152  14D8  0008               	return
 16153  14D9                     l6357:	
 16154                           
 16155                           ;Dimmer_B1.c: 535: setDimmerLights_Trigger(sw, 0);
 16156  14D9  0020               	movlb	0	; select bank0
 16157  14DA  01A2               	clrf	setDimmerLights_Trigger@command
 16158  14DB  0830               	movf	setDimmerLights_SwOff@sw,w
 16159  14DC  3190  2066  3194   	fcall	_setDimmerLights_Trigger
 16160                           
 16161                           ;Dimmer_B1.c: 537: if (getDelayOff_GO(sw) == 1) {
 16162  14DF  0020               	movlb	0	; select bank0
 16163  14E0  0830               	movf	setDimmerLights_SwOff@sw,w
 16164  14E1  319B  23AA  3194   	fcall	_getDelayOff_GO
 16165  14E4  3A01               	xorlw	1
 16166  14E5  1D03               	skipz
 16167  14E6  0008               	return
 16168                           
 16169                           ;Dimmer_B1.c: 538: setDelayOff_GO(sw, 0, 0);
 16170  14E7  0020               	movlb	0	; select bank0
 16171  14E8  01AA               	clrf	setDelayOff_GO@command
 16172  14E9  01AB               	clrf	setDelayOff_GO@value
 16173  14EA  0830               	movf	setDimmerLights_SwOff@sw,w
 16174  14EB  3188  2050         	fcall	_setDelayOff_GO
 16175  14ED  0008               	return
 16176  14EE                     __end_of_setDimmerLights_SwOff:	
 16177                           
 16178                           	psect	text100
 16179  1E5F                     __ptext100:	
 16180 ;; *************** function _setDimmerLights_TriggerAdj *****************
 16181 ;; Defined at:
 16182 ;;		line 773 in file "../src/Dimmer_B1.c"
 16183 ;; Parameters:    Size  Location     Type
 16184 ;;  lights          1    wreg     unsigned char 
 16185 ;;  command         1    2[BANK0 ] unsigned char 
 16186 ;; Auto vars:     Size  Location     Type
 16187 ;;  lights          1    4[BANK0 ] unsigned char 
 16188 ;; Return value:  Size  Location     Type
 16189 ;;		None               void
 16190 ;; Registers used:
 16191 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16192 ;; Tracked objects:
 16193 ;;		On entry : 0/0
 16194 ;;		On exit  : 0/0
 16195 ;;		Unchanged: 0/0
 16196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16197 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16200 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;Total ram usage:        3 bytes
 16202 ;; Hardware stack levels used:    1
 16203 ;; Hardware stack levels required when called:    6
 16204 ;; This function calls:
 16205 ;;		_DimmerLightsPointSelect
 16206 ;; This function is called by:
 16207 ;;		_setDimmerLights_SwOff
 16208 ;;		_setDimmerLights_AdjControl
 16209 ;; This function uses a non-reentrant model
 16210 ;;
 16211                           
 16212                           
 16213                           ;psect for function _setDimmerLights_TriggerAdj
 16214  1E5F                     _setDimmerLights_TriggerAdj:	
 16215                           
 16216                           ;incstack = 0
 16217                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16218                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 16219  1E5F  0020               	movlb	0	; select bank0
 16220  1E60  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 16221                           
 16222                           ;Dimmer_B1.c: 774: DimmerLightsPointSelect(lights);
 16223  1E61  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 16224  1E62  319C  2446         	fcall	_DimmerLightsPointSelect
 16225                           
 16226                           ;Dimmer_B1.c: 775: DimmerLights->TriggerAdj = 1;
 16227  1E64  0020               	movlb	0	; select bank0
 16228  1E65  086F               	movf	_DimmerLights,w
 16229  1E66  3E0A               	addlw	10
 16230  1E67  0086               	movwf	6
 16231  1E68  3001               	movlw	1	; select bank2/3
 16232  1E69  0087               	movwf	7
 16233  1E6A  1581               	bsf	1,3
 16234                           
 16235                           ;Dimmer_B1.c: 776: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 16236  1E6B  0822               	movf	setDimmerLights_TriggerAdj@command,w
 16237  1E6C  3A01               	xorlw	1
 16238  1E6D  3000               	movlw	0
 16239  1E6E  1903               	skipnz
 16240  1E6F  3001               	movlw	1
 16241  1E70  00A3               	movwf	??_setDimmerLights_TriggerAdj
 16242  1E71  086F               	movf	_DimmerLights,w
 16243  1E72  3E0A               	addlw	10
 16244  1E73  0086               	movwf	6
 16245  1E74  3001               	movlw	1	; select bank2/3
 16246  1E75  0087               	movwf	7
 16247  1E76  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16248  1E77  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16249  1E78  0801               	movf	1,w
 16250  1E79  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16251  1E7A  39FB               	andlw	-5
 16252  1E7B  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16253  1E7C  0081               	movwf	1
 16254  1E7D  0008               	return
 16255  1E7E                     __end_of_setDimmerLights_TriggerAdj:	
 16256                           
 16257                           	psect	text101
 16258  1066                     __ptext101:	
 16259 ;; *************** function _setDimmerLights_Trigger *****************
 16260 ;; Defined at:
 16261 ;;		line 767 in file "../src/Dimmer_B1.c"
 16262 ;; Parameters:    Size  Location     Type
 16263 ;;  lights          1    wreg     unsigned char 
 16264 ;;  command         1    2[BANK0 ] unsigned char 
 16265 ;; Auto vars:     Size  Location     Type
 16266 ;;  lights          1    4[BANK0 ] unsigned char 
 16267 ;; Return value:  Size  Location     Type
 16268 ;;		None               void
 16269 ;; Registers used:
 16270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16271 ;; Tracked objects:
 16272 ;;		On entry : 0/0
 16273 ;;		On exit  : 0/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16276 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;Total ram usage:        3 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; Hardware stack levels required when called:    6
 16283 ;; This function calls:
 16284 ;;		_DimmerLightsPointSelect
 16285 ;; This function is called by:
 16286 ;;		_setDimmerLights_SwOn
 16287 ;;		_setDimmerLights_SwOff
 16288 ;; This function uses a non-reentrant model
 16289 ;;
 16290                           
 16291                           
 16292                           ;psect for function _setDimmerLights_Trigger
 16293  1066                     _setDimmerLights_Trigger:	
 16294                           
 16295                           ;incstack = 0
 16296                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16297                           ;setDimmerLights_Trigger@lights stored from wreg
 16298  1066  0020               	movlb	0	; select bank0
 16299  1067  00A4               	movwf	setDimmerLights_Trigger@lights
 16300                           
 16301                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 16302  1068  0824               	movf	setDimmerLights_Trigger@lights,w
 16303  1069  319C  2446         	fcall	_DimmerLightsPointSelect
 16304                           
 16305                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 16306  106B  0020               	movlb	0	; select bank0
 16307  106C  086F               	movf	_DimmerLights,w
 16308  106D  3E0A               	addlw	10
 16309  106E  0086               	movwf	6
 16310  106F  3001               	movlw	1	; select bank2/3
 16311  1070  0087               	movwf	7
 16312  1071  1481               	bsf	1,1
 16313                           
 16314                           ;Dimmer_B1.c: 770: DimmerLights->Switch = command == 1 ? 1 : 0;
 16315  1072  0822               	movf	setDimmerLights_Trigger@command,w
 16316  1073  3A01               	xorlw	1
 16317  1074  3000               	movlw	0
 16318  1075  1903               	skipnz
 16319  1076  3001               	movlw	1
 16320  1077  00A3               	movwf	??_setDimmerLights_Trigger
 16321  1078  086F               	movf	_DimmerLights,w
 16322  1079  3E0A               	addlw	10
 16323  107A  0086               	movwf	6
 16324  107B  3001               	movlw	1	; select bank2/3
 16325  107C  0087               	movwf	7
 16326  107D  0801               	movf	1,w
 16327  107E  0623               	xorwf	??_setDimmerLights_Trigger,w
 16328  107F  39FE               	andlw	-2
 16329  1080  0623               	xorwf	??_setDimmerLights_Trigger,w
 16330  1081  0081               	movwf	1
 16331  1082  0008               	return
 16332  1083                     __end_of_setDimmerLights_Trigger:	
 16333                           
 16334                           	psect	text102
 16335  0850                     __ptext102:	
 16336 ;; *************** function _setDelayOff_GO *****************
 16337 ;; Defined at:
 16338 ;;		line 83 in file "../src/DelayOff_B1.c"
 16339 ;; Parameters:    Size  Location     Type
 16340 ;;  sw              1    wreg     unsigned char 
 16341 ;;  command         1   10[BANK0 ] unsigned char 
 16342 ;;  value           1   11[BANK0 ] unsigned char 
 16343 ;; Auto vars:     Size  Location     Type
 16344 ;;  sw              1   14[BANK0 ] unsigned char 
 16345 ;; Return value:  Size  Location     Type
 16346 ;;		None               void
 16347 ;; Registers used:
 16348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16349 ;; Tracked objects:
 16350 ;;		On entry : 0/0
 16351 ;;		On exit  : 0/0
 16352 ;;		Unchanged: 0/0
 16353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16354 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;Total ram usage:        5 bytes
 16359 ;; Hardware stack levels used:    1
 16360 ;; Hardware stack levels required when called:    7
 16361 ;; This function calls:
 16362 ;;		_DelayOffPointSelect
 16363 ;;		_DelayTimejudge
 16364 ;; This function is called by:
 16365 ;;		_setDimmerLights_SwOff
 16366 ;;		_setRFSW_Control
 16367 ;; This function uses a non-reentrant model
 16368 ;;
 16369                           
 16370                           
 16371                           ;psect for function _setDelayOff_GO
 16372  0850                     _setDelayOff_GO:	
 16373                           
 16374                           ;incstack = 0
 16375                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16376                           ;setDelayOff_GO@sw stored from wreg
 16377  0850  0020               	movlb	0	; select bank0
 16378  0851  00AE               	movwf	setDelayOff_GO@sw
 16379                           
 16380                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16381  0852  082E               	movf	setDelayOff_GO@sw,w
 16382  0853  319C  24BA  3188   	fcall	_DelayOffPointSelect
 16383                           
 16384                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16385  0856  0020               	movlb	0	; select bank0
 16386  0857  082A               	movf	setDelayOff_GO@command,w
 16387  0858  3A01               	xorlw	1
 16388  0859  3000               	movlw	0
 16389  085A  1903               	skipnz
 16390  085B  3001               	movlw	1
 16391  085C  00AC               	movwf	??_setDelayOff_GO
 16392  085D  0878               	movf	_DelayOff,w
 16393  085E  0086               	movwf	6
 16394  085F  3001               	movlw	1	; select bank2/3
 16395  0860  0087               	movwf	7
 16396  0861  0DAC               	rlf	??_setDelayOff_GO,f
 16397  0862  0801               	movf	1,w
 16398  0863  062C               	xorwf	??_setDelayOff_GO,w
 16399  0864  39FD               	andlw	-3
 16400  0865  062C               	xorwf	??_setDelayOff_GO,w
 16401  0866  0081               	movwf	1
 16402                           
 16403                           ;DelayOff_B1.c: 89: if (command == 1) {
 16404  0867  082A               	movf	setDelayOff_GO@command,w
 16405  0868  3A01               	xorlw	1
 16406  0869  1D03               	skipz
 16407  086A  2895               	goto	l6267
 16408                           
 16409                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16410  086B  082B               	movf	setDelayOff_GO@value,w
 16411  086C  3190  20AD  3188   	fcall	_DelayTimejudge
 16412  086F  0020               	movlb	0	; select bank0
 16413  0870  00AC               	movwf	??_setDelayOff_GO
 16414  0871  0A78               	incf	_DelayOff,w
 16415  0872  0086               	movwf	6
 16416  0873  3001               	movlw	1	; select bank2/3
 16417  0874  0087               	movwf	7
 16418  0875  082C               	movf	??_setDelayOff_GO,w
 16419  0876  0081               	movwf	1
 16420                           
 16421                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16422  0877  300F               	movlw	15
 16423  0878  052B               	andwf	setDelayOff_GO@value,w
 16424  0879  00AC               	movwf	??_setDelayOff_GO
 16425  087A  082C               	movf	??_setDelayOff_GO,w
 16426  087B  3A05               	xorlw	5
 16427  087C  1903               	skipnz
 16428  087D  2882               	goto	l6261
 16429  087E  082B               	movf	setDelayOff_GO@value,w
 16430  087F  390F               	andlw	15
 16431  0880  1D03               	btfss	3,2
 16432  0881  2888               	goto	l6265
 16433  0882                     l6261:	
 16434  0882  3026               	movlw	38
 16435  0883  022B               	subwf	setDelayOff_GO@value,w
 16436  0884  1803               	skipnc
 16437  0885  2888               	goto	l6265
 16438                           
 16439                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 16440  0886  082B               	movf	setDelayOff_GO@value,w
 16441  0887  2889               	goto	L9
 16442  0888                     l6265:	
 16443                           ;DelayOff_B1.c: 93: } else {
 16444                           
 16445                           
 16446                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16447  0888  3005               	movlw	5
 16448  0889                     L9:	
 16449  0889  00AC               	movwf	??_setDelayOff_GO
 16450  088A  082E               	movf	setDelayOff_GO@sw,w
 16451  088B  3E1A               	addlw	26
 16452  088C  076E               	addwf	_product,w
 16453  088D  00AD               	movwf	??_setDelayOff_GO+1
 16454  088E  082D               	movf	??_setDelayOff_GO+1,w
 16455  088F  0086               	movwf	6
 16456  0890  3002               	movlw	2	; select bank4/5
 16457  0891  0087               	movwf	7
 16458  0892  082C               	movf	??_setDelayOff_GO,w
 16459  0893  0081               	movwf	1
 16460                           
 16461                           ;DelayOff_B1.c: 95: }
 16462                           ;DelayOff_B1.c: 96: } else {
 16463  0894  289E               	goto	l6269
 16464  0895                     l6267:	
 16465                           
 16466                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16467  0895  082E               	movf	setDelayOff_GO@sw,w
 16468  0896  3E1A               	addlw	26
 16469  0897  076E               	addwf	_product,w
 16470  0898  00AC               	movwf	??_setDelayOff_GO
 16471  0899  082C               	movf	??_setDelayOff_GO,w
 16472  089A  0086               	movwf	6
 16473  089B  3002               	movlw	2	; select bank4/5
 16474  089C  0087               	movwf	7
 16475  089D  0181               	clrf	1
 16476  089E                     l6269:	
 16477                           
 16478                           ;DelayOff_B1.c: 98: }
 16479                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16480  089E  0878               	movf	_DelayOff,w
 16481  089F  3E02               	addlw	2
 16482  08A0  0086               	movwf	6
 16483  08A1  3001               	movlw	1	; select bank2/3
 16484  08A2  0087               	movwf	7
 16485  08A3  3000               	movlw	0
 16486  08A4  3FC0               	movwi [0]fsr1
 16487  08A5  3FC1               	movwi [1]fsr1
 16488                           
 16489                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16490  08A6  0878               	movf	_DelayOff,w
 16491  08A7  3E04               	addlw	4
 16492  08A8  0086               	movwf	6
 16493  08A9  3001               	movlw	1	; select bank2/3
 16494  08AA  0087               	movwf	7
 16495  08AB  0181               	clrf	1
 16496  08AC  0008               	return
 16497  08AD                     __end_of_setDelayOff_GO:	
 16498                           
 16499                           	psect	text103
 16500  10AD                     __ptext103:	
 16501 ;; *************** function _DelayTimejudge *****************
 16502 ;; Defined at:
 16503 ;;		line 112 in file "../src/DelayOff_B1.c"
 16504 ;; Parameters:    Size  Location     Type
 16505 ;;  value           1    wreg     unsigned char 
 16506 ;; Auto vars:     Size  Location     Type
 16507 ;;  value           1    9[BANK0 ] unsigned char 
 16508 ;;  k               1    8[BANK0 ] unsigned char 
 16509 ;;  j               1    7[BANK0 ] unsigned char 
 16510 ;;  i               1    6[BANK0 ] unsigned char 
 16511 ;; Return value:  Size  Location     Type
 16512 ;;                  1    wreg      unsigned char 
 16513 ;; Registers used:
 16514 ;;		wreg, status,2, status,0, pclath, cstack
 16515 ;; Tracked objects:
 16516 ;;		On entry : 0/0
 16517 ;;		On exit  : 0/0
 16518 ;;		Unchanged: 0/0
 16519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16522 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16523 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16524 ;;Total ram usage:        6 bytes
 16525 ;; Hardware stack levels used:    1
 16526 ;; Hardware stack levels required when called:    6
 16527 ;; This function calls:
 16528 ;;		___bmul
 16529 ;; This function is called by:
 16530 ;;		_setDelayOff_GO
 16531 ;; This function uses a non-reentrant model
 16532 ;;
 16533                           
 16534                           
 16535                           ;psect for function _DelayTimejudge
 16536  10AD                     _DelayTimejudge:	
 16537                           
 16538                           ;incstack = 0
 16539                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16540                           ;DelayTimejudge@value stored from wreg
 16541  10AD  0020               	movlb	0	; select bank0
 16542  10AE  00A9               	movwf	DelayTimejudge@value
 16543                           
 16544                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16545  10AF  3005               	movlw	5
 16546  10B0  00A4               	movwf	??_DelayTimejudge
 16547  10B1  0824               	movf	??_DelayTimejudge,w
 16548  10B2  00A6               	movwf	DelayTimejudge@i
 16549  10B3  01A7               	clrf	DelayTimejudge@j
 16550  10B4  01A8               	clrf	DelayTimejudge@k
 16551                           
 16552                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16553  10B5  3031               	movlw	49
 16554  10B6  0229               	subwf	DelayTimejudge@value,w
 16555  10B7  1803               	skipnc
 16556  10B8  28D5               	goto	l6159
 16557                           
 16558                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16559  10B9  0829               	movf	DelayTimejudge@value,w
 16560  10BA  390F               	andlw	15
 16561  10BB  00A4               	movwf	??_DelayTimejudge
 16562  10BC  0824               	movf	??_DelayTimejudge,w
 16563  10BD  00A7               	movwf	DelayTimejudge@j
 16564                           
 16565                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16566  10BE  0829               	movf	DelayTimejudge@value,w
 16567  10BF  00A4               	movwf	??_DelayTimejudge
 16568  10C0  3004               	movlw	4
 16569  10C1                     u5055:	
 16570  10C1  36A4               	lsrf	??_DelayTimejudge,f
 16571  10C2  0B89               	decfsz	9,f
 16572  10C3  28C1               	goto	u5055
 16573  10C4  0824               	movf	??_DelayTimejudge,w
 16574  10C5  390F               	andlw	15
 16575  10C6  00A5               	movwf	??_DelayTimejudge+1
 16576  10C7  0825               	movf	??_DelayTimejudge+1,w
 16577  10C8  00A8               	movwf	DelayTimejudge@k
 16578                           
 16579                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16580  10C9  300A               	movlw	10
 16581  10CA  00A4               	movwf	??_DelayTimejudge
 16582  10CB  0824               	movf	??_DelayTimejudge,w
 16583  10CC  00A0               	movwf	___bmul@multiplicand
 16584  10CD  0828               	movf	DelayTimejudge@k,w
 16585  10CE  319C  2410         	fcall	___bmul
 16586  10D0  0020               	movlb	0	; select bank0
 16587  10D1  0727               	addwf	DelayTimejudge@j,w
 16588  10D2  00A5               	movwf	??_DelayTimejudge+1
 16589  10D3  0825               	movf	??_DelayTimejudge+1,w
 16590  10D4  00A6               	movwf	DelayTimejudge@i
 16591  10D5                     l6159:	
 16592                           
 16593                           ;DelayOff_B1.c: 118: }
 16594                           ;DelayOff_B1.c: 139: return i;
 16595  10D5  0826               	movf	DelayTimejudge@i,w
 16596  10D6  0008               	return
 16597  10D7                     __end_of_DelayTimejudge:	
 16598                           
 16599                           	psect	text104
 16600  1C10                     __ptext104:	
 16601 ;; *************** function ___bmul *****************
 16602 ;; Defined at:
 16603 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16604 ;; Parameters:    Size  Location     Type
 16605 ;;  multiplier      1    wreg     unsigned char 
 16606 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16607 ;; Auto vars:     Size  Location     Type
 16608 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16609 ;;  product         1    2[BANK0 ] unsigned char 
 16610 ;; Return value:  Size  Location     Type
 16611 ;;                  1    wreg      unsigned char 
 16612 ;; Registers used:
 16613 ;;		wreg, status,2, status,0
 16614 ;; Tracked objects:
 16615 ;;		On entry : 0/0
 16616 ;;		On exit  : 0/0
 16617 ;;		Unchanged: 0/0
 16618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16619 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;Total ram usage:        4 bytes
 16624 ;; Hardware stack levels used:    1
 16625 ;; Hardware stack levels required when called:    5
 16626 ;; This function calls:
 16627 ;;		Nothing
 16628 ;; This function is called by:
 16629 ;;		_DelayTimejudge
 16630 ;; This function uses a non-reentrant model
 16631 ;;
 16632                           
 16633                           
 16634                           ;psect for function ___bmul
 16635  1C10                     ___bmul:	
 16636                           
 16637                           ;incstack = 0
 16638                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16639                           ;___bmul@multiplier stored from wreg
 16640  1C10  0020               	movlb	0	; select bank0
 16641  1C11  00A3               	movwf	___bmul@multiplier
 16642  1C12  01A2               	clrf	___bmul@product
 16643  1C13                     l5897:	
 16644  1C13  1C23               	btfss	___bmul@multiplier,0
 16645  1C14  2C19               	goto	l5901
 16646  1C15  0820               	movf	___bmul@multiplicand,w
 16647  1C16  00A1               	movwf	??___bmul
 16648  1C17  0821               	movf	??___bmul,w
 16649  1C18  07A2               	addwf	___bmul@product,f
 16650  1C19                     l5901:	
 16651  1C19  1003               	clrc
 16652  1C1A  0DA0               	rlf	___bmul@multiplicand,f
 16653  1C1B  1003               	clrc
 16654  1C1C  0CA3               	rrf	___bmul@multiplier,f
 16655  1C1D  08A3               	movf	___bmul@multiplier,f
 16656  1C1E  1D03               	skipz
 16657  1C1F  2C13               	goto	l5897
 16658  1C20  0822               	movf	___bmul@product,w
 16659  1C21  0008               	return
 16660  1C22                     __end_of___bmul:	
 16661                           
 16662                           	psect	text105
 16663  1BAA                     __ptext105:	
 16664 ;; *************** function _getDelayOff_GO *****************
 16665 ;; Defined at:
 16666 ;;		line 105 in file "../src/DelayOff_B1.c"
 16667 ;; Parameters:    Size  Location     Type
 16668 ;;  sw              1    wreg     unsigned char 
 16669 ;; Auto vars:     Size  Location     Type
 16670 ;;  sw              1    2[BANK0 ] unsigned char 
 16671 ;;  go              1    3[BANK0 ] unsigned char 
 16672 ;; Return value:  Size  Location     Type
 16673 ;;                  1    wreg      unsigned char 
 16674 ;; Registers used:
 16675 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16676 ;; Tracked objects:
 16677 ;;		On entry : 0/0
 16678 ;;		On exit  : 0/0
 16679 ;;		Unchanged: 0/0
 16680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;Total ram usage:        2 bytes
 16686 ;; Hardware stack levels used:    1
 16687 ;; Hardware stack levels required when called:    6
 16688 ;; This function calls:
 16689 ;;		_DelayOffPointSelect
 16690 ;; This function is called by:
 16691 ;;		_setDimmerLights_SwOff
 16692 ;;		_setRFSW_Control
 16693 ;; This function uses a non-reentrant model
 16694 ;;
 16695                           
 16696                           
 16697                           ;psect for function _getDelayOff_GO
 16698  1BAA                     _getDelayOff_GO:	
 16699                           
 16700                           ;incstack = 0
 16701                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16702                           ;getDelayOff_GO@sw stored from wreg
 16703  1BAA  0020               	movlb	0	; select bank0
 16704  1BAB  00A2               	movwf	getDelayOff_GO@sw
 16705                           
 16706                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16707  1BAC  0822               	movf	getDelayOff_GO@sw,w
 16708  1BAD  319C  24BA         	fcall	_DelayOffPointSelect
 16709                           
 16710                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16711  1BAF  0878               	movf	_DelayOff,w
 16712  1BB0  0086               	movwf	6
 16713  1BB1  3001               	movlw	1	; select bank2/3
 16714  1BB2  0087               	movwf	7
 16715  1BB3  3000               	movlw	0
 16716  1BB4  1881               	btfsc	1,1
 16717  1BB5  3001               	movlw	1
 16718  1BB6  0020               	movlb	0	; select bank0
 16719  1BB7  00A3               	movwf	getDelayOff_GO@go
 16720                           
 16721                           ;DelayOff_B1.c: 108: return go;
 16722  1BB8  0823               	movf	getDelayOff_GO@go,w
 16723  1BB9  0008               	return
 16724  1BBA                     __end_of_getDelayOff_GO:	
 16725                           
 16726                           	psect	text106
 16727  1BBA                     __ptext106:	
 16728 ;; *************** function _getDimmerLights_Status *****************
 16729 ;; Defined at:
 16730 ;;		line 445 in file "../src/Dimmer_B1.c"
 16731 ;; Parameters:    Size  Location     Type
 16732 ;;  lights          1    wreg     unsigned char 
 16733 ;; Auto vars:     Size  Location     Type
 16734 ;;  lights          1    2[BANK0 ] unsigned char 
 16735 ;;  status          1    3[BANK0 ] unsigned char 
 16736 ;; Return value:  Size  Location     Type
 16737 ;;                  1    wreg      unsigned char 
 16738 ;; Registers used:
 16739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16740 ;; Tracked objects:
 16741 ;;		On entry : 0/0
 16742 ;;		On exit  : 0/0
 16743 ;;		Unchanged: 0/0
 16744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16749 ;;Total ram usage:        2 bytes
 16750 ;; Hardware stack levels used:    1
 16751 ;; Hardware stack levels required when called:    6
 16752 ;; This function calls:
 16753 ;;		_DimmerLightsPointSelect
 16754 ;; This function is called by:
 16755 ;;		_setDimmerLights_ErrorClose
 16756 ;;		_setRFSW_Control
 16757 ;;		_setRFSW_AdjControl
 16758 ;;		_getMain_LightsStatus
 16759 ;; This function uses a non-reentrant model
 16760 ;;
 16761                           
 16762                           
 16763                           ;psect for function _getDimmerLights_Status
 16764  1BBA                     _getDimmerLights_Status:	
 16765                           
 16766                           ;incstack = 0
 16767                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16768                           ;getDimmerLights_Status@lights stored from wreg
 16769  1BBA  0020               	movlb	0	; select bank0
 16770  1BBB  00A2               	movwf	getDimmerLights_Status@lights
 16771                           
 16772                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 16773  1BBC  0822               	movf	getDimmerLights_Status@lights,w
 16774  1BBD  319C  2446         	fcall	_DimmerLightsPointSelect
 16775                           
 16776                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 16777  1BBF  0020               	movlb	0	; select bank0
 16778  1BC0  086F               	movf	_DimmerLights,w
 16779  1BC1  3E02               	addlw	2
 16780  1BC2  0086               	movwf	6
 16781  1BC3  3001               	movlw	1	; select bank2/3
 16782  1BC4  0087               	movwf	7
 16783  1BC5  3000               	movlw	0
 16784  1BC6  1881               	btfsc	1,1
 16785  1BC7  3001               	movlw	1
 16786  1BC8  00A3               	movwf	getDimmerLights_Status@status
 16787                           
 16788                           ;Dimmer_B1.c: 448: return status;
 16789  1BC9  0823               	movf	getDimmerLights_Status@status,w
 16790  1BCA  0008               	return
 16791  1BCB                     __end_of_getDimmerLights_Status:	
 16792                           
 16793                           	psect	text107
 16794  1C46                     __ptext107:	
 16795 ;; *************** function _DimmerLightsPointSelect *****************
 16796 ;; Defined at:
 16797 ;;		line 310 in file "../src/Dimmer_B1.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;  lights          1    wreg     unsigned char 
 16800 ;; Auto vars:     Size  Location     Type
 16801 ;;  lights          1    1[BANK0 ] unsigned char 
 16802 ;; Return value:  Size  Location     Type
 16803 ;;		None               void
 16804 ;; Registers used:
 16805 ;;		wreg
 16806 ;; Tracked objects:
 16807 ;;		On entry : 0/0
 16808 ;;		On exit  : 0/0
 16809 ;;		Unchanged: 0/0
 16810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;Total ram usage:        2 bytes
 16816 ;; Hardware stack levels used:    1
 16817 ;; Hardware stack levels required when called:    5
 16818 ;; This function calls:
 16819 ;;		Nothing
 16820 ;; This function is called by:
 16821 ;;		_setDimmerLights_Initialization
 16822 ;;		_setDimmerLights_Main
 16823 ;;		_getDimmerLights_Status
 16824 ;;		_setDimmerLights_SwOn
 16825 ;;		_setDimmerLights_SwOff
 16826 ;;		_setDimmerLights_AdjControl
 16827 ;;		_setDimmerLights_ErrorClose
 16828 ;;		_setDimmerLights
 16829 ;;		_setDimmerLights_Adj
 16830 ;;		_setDimmerLights_AdjRF
 16831 ;;		_setDimmerLights_Trigger
 16832 ;;		_setDimmerLights_TriggerAdj
 16833 ;;		_setDimmerLights_Status
 16834 ;;		_setDimmerLights_GO
 16835 ;;		_setDimmerLights_MaxmumValue
 16836 ;; This function uses a non-reentrant model
 16837 ;;
 16838                           
 16839                           
 16840                           ;psect for function _DimmerLightsPointSelect
 16841  1C46                     _DimmerLightsPointSelect:	
 16842                           
 16843                           ;incstack = 0
 16844                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16845                           ;DimmerLightsPointSelect@lights stored from wreg
 16846  1C46  0020               	movlb	0	; select bank0
 16847  1C47  00A1               	movwf	DimmerLightsPointSelect@lights
 16848                           
 16849                           ;Dimmer_B1.c: 312: if (lights == 1) {
 16850  1C48  0821               	movf	DimmerLightsPointSelect@lights,w
 16851  1C49  3A01               	xorlw	1
 16852  1C4A  1D03               	skipz
 16853  1C4B  2C50               	goto	l767
 16854                           
 16855                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 16856  1C4C  3053               	movlw	_DimmerLights1& (0+255)
 16857  1C4D  00A0               	movwf	??_DimmerLightsPointSelect
 16858  1C4E  0820               	movf	??_DimmerLightsPointSelect,w
 16859  1C4F  00EF               	movwf	_DimmerLights
 16860  1C50                     l767:	
 16861                           
 16862                           ;Dimmer_B1.c: 314: }
 16863                           ;Dimmer_B1.c: 317: if (lights == 2) {
 16864  1C50  0821               	movf	DimmerLightsPointSelect@lights,w
 16865  1C51  3A02               	xorlw	2
 16866  1C52  1D03               	skipz
 16867  1C53  0008               	return
 16868                           
 16869                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights2;
 16870  1C54  30BE               	movlw	_DimmerLights2& (0+255)
 16871  1C55  00A0               	movwf	??_DimmerLightsPointSelect
 16872  1C56  0820               	movf	??_DimmerLightsPointSelect,w
 16873  1C57  00EF               	movwf	_DimmerLights
 16874  1C58  0008               	return
 16875  1C59                     __end_of_DimmerLightsPointSelect:	
 16876                           
 16877                           	psect	text108
 16878  15DF                     __ptext108:	
 16879 ;; *************** function _setBuz *****************
 16880 ;; Defined at:
 16881 ;;		line 22 in file "../src/Buzzer_B1.c"
 16882 ;; Parameters:    Size  Location     Type
 16883 ;;  count           1    wreg     unsigned char 
 16884 ;;  time            2    9[BANK0 ] int 
 16885 ;; Auto vars:     Size  Location     Type
 16886 ;;  count           1   12[BANK0 ] unsigned char 
 16887 ;; Return value:  Size  Location     Type
 16888 ;;		None               void
 16889 ;; Registers used:
 16890 ;;		wreg, status,2, status,0, pclath, cstack
 16891 ;; Tracked objects:
 16892 ;;		On entry : 0/0
 16893 ;;		On exit  : 0/0
 16894 ;;		Unchanged: 0/0
 16895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16896 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16898 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;Total ram usage:        4 bytes
 16901 ;; Hardware stack levels used:    1
 16902 ;; Hardware stack levels required when called:    6
 16903 ;; This function calls:
 16904 ;;		___awdiv
 16905 ;; This function is called by:
 16906 ;;		_DlyOff_Main
 16907 ;;		_setDimmerLights_Main
 16908 ;;		_setDimmerLights_SwOn
 16909 ;;		_setTemp_Main
 16910 ;;		_setLog_Code
 16911 ;;		_setControl_Lights_Table
 16912 ;;		_setRFSW_Control
 16913 ;;		_setSw_Main
 16914 ;;		_my_MainTimer
 16915 ;;		_setMain_Exception
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           
 16920                           ;psect for function _setBuz
 16921  15DF                     _setBuz:	
 16922                           
 16923                           ;incstack = 0
 16924                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16925                           ;setBuz@count stored from wreg
 16926  15DF  0020               	movlb	0	; select bank0
 16927  15E0  00AC               	movwf	setBuz@count
 16928                           
 16929                           ;Buzzer_B1.c: 23: time /= 10;
 16930  15E1  300A               	movlw	10
 16931  15E2  00A0               	movwf	___awdiv@divisor
 16932  15E3  3000               	movlw	0
 16933  15E4  00A1               	movwf	___awdiv@divisor+1
 16934  15E5  082A               	movf	setBuz@time+1,w
 16935  15E6  01A3               	clrf	___awdiv@dividend+1
 16936  15E7  07A3               	addwf	___awdiv@dividend+1,f
 16937  15E8  0829               	movf	setBuz@time,w
 16938  15E9  01A2               	clrf	___awdiv@dividend
 16939  15EA  07A2               	addwf	___awdiv@dividend,f
 16940  15EB  3195  258B  3195   	fcall	___awdiv
 16941  15EE  0020               	movlb	0	; select bank0
 16942  15EF  0821               	movf	?___awdiv+1,w
 16943  15F0  01AA               	clrf	setBuz@time+1
 16944  15F1  07AA               	addwf	setBuz@time+1,f
 16945  15F2  0820               	movf	?___awdiv,w
 16946  15F3  01A9               	clrf	setBuz@time
 16947  15F4  07A9               	addwf	setBuz@time,f
 16948                           
 16949                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16950  15F5  0021               	movlb	1	; select bank1
 16951  15F6  1C2E               	btfss	_Buz1^(0+128),0
 16952  15F7  0008               	return
 16953                           
 16954                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16955  15F8  18AE               	btfsc	_Buz1^(0+128),1
 16956  15F9  2E10               	goto	l96
 16957                           
 16958                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16959  15FA  14AE               	bsf	_Buz1^(0+128),1
 16960                           
 16961                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16962  15FB  01AF               	clrf	(_Buz1^(0+128)+1)
 16963  15FC  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16964                           
 16965                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16966  15FD  0020               	movlb	0	; select bank0
 16967  15FE  082C               	movf	setBuz@count,w
 16968  15FF  00AB               	movwf	??_setBuz
 16969  1600  082B               	movf	??_setBuz,w
 16970  1601  0021               	movlb	1	; select bank1
 16971  1602  00B1               	movwf	(_Buz1^(0+128)+3)
 16972                           
 16973                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16974  1603  0020               	movlb	0	; select bank0
 16975  1604  082A               	movf	setBuz@time+1,w
 16976  1605  0021               	movlb	1	; select bank1
 16977  1606  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16978  1607  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16979  1608  0020               	movlb	0	; select bank0
 16980  1609  0829               	movf	setBuz@time,w
 16981  160A  0021               	movlb	1	; select bank1
 16982  160B  01B4               	clrf	(_Buz1^(0+128)+6)
 16983  160C  07B4               	addwf	(_Buz1^(0+128)+6),f
 16984                           
 16985                           ;Buzzer_B1.c: 30: RB3 = 1;
 16986  160D  0020               	movlb	0	; select bank0
 16987  160E  158D               	bsf	13,3	;volatile
 16988                           
 16989                           ;Buzzer_B1.c: 31: } else {
 16990  160F  0008               	return
 16991  1610                     l96:	
 16992                           
 16993                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16994  1610  19AE               	btfsc	_Buz1^(0+128),3
 16995  1611  2E24               	goto	l98
 16996                           
 16997                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16998  1612  15AE               	bsf	_Buz1^(0+128),3
 16999                           
 17000                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17001  1613  0020               	movlb	0	; select bank0
 17002  1614  082C               	movf	setBuz@count,w
 17003  1615  00AB               	movwf	??_setBuz
 17004  1616  082B               	movf	??_setBuz,w
 17005  1617  0021               	movlb	1	; select bank1
 17006  1618  00B2               	movwf	(_Buz1^(0+128)+4)
 17007                           
 17008                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17009  1619  0020               	movlb	0	; select bank0
 17010  161A  082A               	movf	setBuz@time+1,w
 17011  161B  0021               	movlb	1	; select bank1
 17012  161C  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 17013  161D  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 17014  161E  0020               	movlb	0	; select bank0
 17015  161F  0829               	movf	setBuz@time,w
 17016  1620  0021               	movlb	1	; select bank1
 17017  1621  01B6               	clrf	(_Buz1^(0+128)+8)
 17018  1622  07B6               	addwf	(_Buz1^(0+128)+8),f
 17019                           
 17020                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17021  1623  0008               	return
 17022  1624                     l98:	
 17023  1624  1A2E               	btfsc	_Buz1^(0+128),4
 17024  1625  0008               	return
 17025                           
 17026                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17027  1626  162E               	bsf	_Buz1^(0+128),4
 17028                           
 17029                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17030  1627  0020               	movlb	0	; select bank0
 17031  1628  082C               	movf	setBuz@count,w
 17032  1629  00AB               	movwf	??_setBuz
 17033  162A  082B               	movf	??_setBuz,w
 17034  162B  0021               	movlb	1	; select bank1
 17035  162C  00B3               	movwf	(_Buz1^(0+128)+5)
 17036                           
 17037                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17038  162D  0020               	movlb	0	; select bank0
 17039  162E  082A               	movf	setBuz@time+1,w
 17040  162F  0021               	movlb	1	; select bank1
 17041  1630  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 17042  1631  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 17043  1632  0020               	movlb	0	; select bank0
 17044  1633  0829               	movf	setBuz@time,w
 17045  1634  0021               	movlb	1	; select bank1
 17046  1635  01B8               	clrf	(_Buz1^(0+128)+10)
 17047  1636  07B8               	addwf	(_Buz1^(0+128)+10),f
 17048  1637  0008               	return
 17049  1638                     __end_of_setBuz:	
 17050                           
 17051                           	psect	text109
 17052  158B                     __ptext109:	
 17053 ;; *************** function ___awdiv *****************
 17054 ;; Defined at:
 17055 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17056 ;; Parameters:    Size  Location     Type
 17057 ;;  divisor         2    0[BANK0 ] int 
 17058 ;;  dividend        2    2[BANK0 ] int 
 17059 ;; Auto vars:     Size  Location     Type
 17060 ;;  quotient        2    7[BANK0 ] int 
 17061 ;;  sign            1    6[BANK0 ] unsigned char 
 17062 ;;  counter         1    5[BANK0 ] unsigned char 
 17063 ;; Return value:  Size  Location     Type
 17064 ;;                  2    0[BANK0 ] int 
 17065 ;; Registers used:
 17066 ;;		wreg, status,2, status,0
 17067 ;; Tracked objects:
 17068 ;;		On entry : 0/0
 17069 ;;		On exit  : 0/0
 17070 ;;		Unchanged: 0/0
 17071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17072 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17073 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17075 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17076 ;;Total ram usage:        9 bytes
 17077 ;; Hardware stack levels used:    1
 17078 ;; Hardware stack levels required when called:    5
 17079 ;; This function calls:
 17080 ;;		Nothing
 17081 ;; This function is called by:
 17082 ;;		_setBuz
 17083 ;; This function uses a non-reentrant model
 17084 ;;
 17085                           
 17086                           
 17087                           ;psect for function ___awdiv
 17088  158B                     ___awdiv:	
 17089                           
 17090                           ;incstack = 0
 17091                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17092  158B  0020               	movlb	0	; select bank0
 17093  158C  01A6               	clrf	___awdiv@sign
 17094  158D  1FA1               	btfss	___awdiv@divisor+1,7
 17095  158E  2D96               	goto	l6185
 17096  158F  09A0               	comf	___awdiv@divisor,f
 17097  1590  09A1               	comf	___awdiv@divisor+1,f
 17098  1591  0AA0               	incf	___awdiv@divisor,f
 17099  1592  1903               	skipnz
 17100  1593  0AA1               	incf	___awdiv@divisor+1,f
 17101  1594  01A6               	clrf	___awdiv@sign
 17102  1595  0AA6               	incf	___awdiv@sign,f
 17103  1596                     l6185:	
 17104  1596  1FA3               	btfss	___awdiv@dividend+1,7
 17105  1597  2DA1               	goto	l6191
 17106  1598  09A2               	comf	___awdiv@dividend,f
 17107  1599  09A3               	comf	___awdiv@dividend+1,f
 17108  159A  0AA2               	incf	___awdiv@dividend,f
 17109  159B  1903               	skipnz
 17110  159C  0AA3               	incf	___awdiv@dividend+1,f
 17111  159D  3001               	movlw	1
 17112  159E  00A4               	movwf	??___awdiv
 17113  159F  0824               	movf	??___awdiv,w
 17114  15A0  06A6               	xorwf	___awdiv@sign,f
 17115  15A1                     l6191:	
 17116  15A1  01A7               	clrf	___awdiv@quotient
 17117  15A2  01A8               	clrf	___awdiv@quotient+1
 17118  15A3  0821               	movf	___awdiv@divisor+1,w
 17119  15A4  0420               	iorwf	___awdiv@divisor,w
 17120  15A5  1903               	skipnz
 17121  15A6  2DD0               	goto	l6213
 17122  15A7  01A5               	clrf	___awdiv@counter
 17123  15A8  0AA5               	incf	___awdiv@counter,f
 17124  15A9                     l6201:	
 17125  15A9  1BA1               	btfsc	___awdiv@divisor+1,7
 17126  15AA  2DB5               	goto	l6203
 17127  15AB  3001               	movlw	1
 17128  15AC                     u5115:	
 17129  15AC  35A0               	lslf	___awdiv@divisor,f
 17130  15AD  0DA1               	rlf	___awdiv@divisor+1,f
 17131  15AE  0B89               	decfsz	9,f
 17132  15AF  2DAC               	goto	u5115
 17133  15B0  3001               	movlw	1
 17134  15B1  00A4               	movwf	??___awdiv
 17135  15B2  0824               	movf	??___awdiv,w
 17136  15B3  07A5               	addwf	___awdiv@counter,f
 17137  15B4  2DA9               	goto	l6201
 17138  15B5                     l6203:	
 17139  15B5  3001               	movlw	1
 17140  15B6                     u5135:	
 17141  15B6  35A7               	lslf	___awdiv@quotient,f
 17142  15B7  0DA8               	rlf	___awdiv@quotient+1,f
 17143  15B8  0B89               	decfsz	9,f
 17144  15B9  2DB6               	goto	u5135
 17145  15BA  0821               	movf	___awdiv@divisor+1,w
 17146  15BB  0223               	subwf	___awdiv@dividend+1,w
 17147  15BC  1D03               	skipz
 17148  15BD  2DC0               	goto	u5145
 17149  15BE  0820               	movf	___awdiv@divisor,w
 17150  15BF  0222               	subwf	___awdiv@dividend,w
 17151  15C0                     u5145:	
 17152  15C0  1C03               	skipc
 17153  15C1  2DC7               	goto	l6209
 17154  15C2  0820               	movf	___awdiv@divisor,w
 17155  15C3  02A2               	subwf	___awdiv@dividend,f
 17156  15C4  0821               	movf	___awdiv@divisor+1,w
 17157  15C5  3BA3               	subwfb	___awdiv@dividend+1,f
 17158  15C6  1427               	bsf	___awdiv@quotient,0
 17159  15C7                     l6209:	
 17160  15C7  3001               	movlw	1
 17161  15C8                     u5155:	
 17162  15C8  36A1               	lsrf	___awdiv@divisor+1,f
 17163  15C9  0CA0               	rrf	___awdiv@divisor,f
 17164  15CA  0B89               	decfsz	9,f
 17165  15CB  2DC8               	goto	u5155
 17166  15CC  3001               	movlw	1
 17167  15CD  02A5               	subwf	___awdiv@counter,f
 17168  15CE  1D03               	btfss	3,2
 17169  15CF  2DB5               	goto	l6203
 17170  15D0                     l6213:	
 17171  15D0  0826               	movf	___awdiv@sign,w
 17172  15D1  1903               	btfsc	3,2
 17173  15D2  2DD8               	goto	l6217
 17174  15D3  09A7               	comf	___awdiv@quotient,f
 17175  15D4  09A8               	comf	___awdiv@quotient+1,f
 17176  15D5  0AA7               	incf	___awdiv@quotient,f
 17177  15D6  1903               	skipnz
 17178  15D7  0AA8               	incf	___awdiv@quotient+1,f
 17179  15D8                     l6217:	
 17180  15D8  0828               	movf	___awdiv@quotient+1,w
 17181  15D9  01A1               	clrf	?___awdiv+1
 17182  15DA  07A1               	addwf	?___awdiv+1,f
 17183  15DB  0827               	movf	___awdiv@quotient,w
 17184  15DC  01A0               	clrf	?___awdiv
 17185  15DD  07A0               	addwf	?___awdiv,f
 17186  15DE  0008               	return
 17187  15DF                     __end_of___awdiv:	
 17188                           
 17189                           	psect	text110
 17190  1ACD                     __ptext110:	
 17191 ;; *************** function _DelayOff_Initialization *****************
 17192 ;; Defined at:
 17193 ;;		line 26 in file "../src/DelayOff_B1.c"
 17194 ;; Parameters:    Size  Location     Type
 17195 ;;		None
 17196 ;; Auto vars:     Size  Location     Type
 17197 ;;		None
 17198 ;; Return value:  Size  Location     Type
 17199 ;;		None               void
 17200 ;; Registers used:
 17201 ;;		wreg, status,2, status,0, pclath, cstack
 17202 ;; Tracked objects:
 17203 ;;		On entry : 0/0
 17204 ;;		On exit  : 0/0
 17205 ;;		Unchanged: 0/0
 17206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17211 ;;Total ram usage:        0 bytes
 17212 ;; Hardware stack levels used:    1
 17213 ;; Hardware stack levels required when called:    7
 17214 ;; This function calls:
 17215 ;;		_DlyOff_Initialization
 17216 ;; This function is called by:
 17217 ;;		_main
 17218 ;; This function uses a non-reentrant model
 17219 ;;
 17220                           
 17221                           
 17222                           ;psect for function _DelayOff_Initialization
 17223  1ACD                     _DelayOff_Initialization:	
 17224                           
 17225                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17226                           
 17227                           ;incstack = 0
 17228                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17229  1ACD  3001               	movlw	1
 17230  1ACE  319A  22AC  319A   	fcall	_DlyOff_Initialization
 17231                           
 17232                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17233  1AD1  3002               	movlw	2
 17234  1AD2  319A  22AC         	fcall	_DlyOff_Initialization
 17235  1AD4  0008               	return
 17236  1AD5                     __end_of_DelayOff_Initialization:	
 17237                           
 17238                           	psect	text111
 17239  1AAC                     __ptext111:	
 17240 ;; *************** function _DlyOff_Initialization *****************
 17241 ;; Defined at:
 17242 ;;		line 56 in file "../src/DelayOff_B1.c"
 17243 ;; Parameters:    Size  Location     Type
 17244 ;;  sw              1    wreg     unsigned char 
 17245 ;; Auto vars:     Size  Location     Type
 17246 ;;  sw              1    2[BANK0 ] unsigned char 
 17247 ;; Return value:  Size  Location     Type
 17248 ;;		None               void
 17249 ;; Registers used:
 17250 ;;		wreg, status,2, status,0, pclath, cstack
 17251 ;; Tracked objects:
 17252 ;;		On entry : 0/0
 17253 ;;		On exit  : 0/0
 17254 ;;		Unchanged: 0/0
 17255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17259 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17260 ;;Total ram usage:        1 bytes
 17261 ;; Hardware stack levels used:    1
 17262 ;; Hardware stack levels required when called:    6
 17263 ;; This function calls:
 17264 ;;		_DelayOffPointSelect
 17265 ;; This function is called by:
 17266 ;;		_DelayOff_Initialization
 17267 ;; This function uses a non-reentrant model
 17268 ;;
 17269                           
 17270                           
 17271                           ;psect for function _DlyOff_Initialization
 17272  1AAC                     _DlyOff_Initialization:	
 17273                           
 17274                           ;incstack = 0
 17275                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17276                           ;DlyOff_Initialization@sw stored from wreg
 17277  1AAC  0020               	movlb	0	; select bank0
 17278  1AAD  00A2               	movwf	DlyOff_Initialization@sw
 17279                           
 17280                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17281  1AAE  0822               	movf	DlyOff_Initialization@sw,w
 17282  1AAF  319C  24BA         	fcall	_DelayOffPointSelect
 17283  1AB1  0008               	return
 17284  1AB2                     __end_of_DlyOff_Initialization:	
 17285                           
 17286                           	psect	text112
 17287  1CBA                     __ptext112:	
 17288 ;; *************** function _DelayOffPointSelect *****************
 17289 ;; Defined at:
 17290 ;;		line 7 in file "../src/DelayOff_B1.c"
 17291 ;; Parameters:    Size  Location     Type
 17292 ;;  sw              1    wreg     unsigned char 
 17293 ;; Auto vars:     Size  Location     Type
 17294 ;;  sw              1    1[BANK0 ] unsigned char 
 17295 ;; Return value:  Size  Location     Type
 17296 ;;		None               void
 17297 ;; Registers used:
 17298 ;;		wreg
 17299 ;; Tracked objects:
 17300 ;;		On entry : 0/0
 17301 ;;		On exit  : 0/0
 17302 ;;		Unchanged: 0/0
 17303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17307 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17308 ;;Total ram usage:        2 bytes
 17309 ;; Hardware stack levels used:    1
 17310 ;; Hardware stack levels required when called:    5
 17311 ;; This function calls:
 17312 ;;		Nothing
 17313 ;; This function is called by:
 17314 ;;		_DlyOff_Initialization
 17315 ;;		_DlyOff_Main
 17316 ;;		_setDelayOff_GO
 17317 ;;		_getDelayOff_GO
 17318 ;; This function uses a non-reentrant model
 17319 ;;
 17320                           
 17321                           
 17322                           ;psect for function _DelayOffPointSelect
 17323  1CBA                     _DelayOffPointSelect:	
 17324                           
 17325                           ;incstack = 0
 17326                           ; Regs used in _DelayOffPointSelect: [wreg]
 17327                           ;DelayOffPointSelect@sw stored from wreg
 17328  1CBA  0020               	movlb	0	; select bank0
 17329  1CBB  00A1               	movwf	DelayOffPointSelect@sw
 17330                           
 17331                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17332  1CBC  0821               	movf	DelayOffPointSelect@sw,w
 17333  1CBD  3A01               	xorlw	1
 17334  1CBE  1D03               	skipz
 17335  1CBF  2CC5               	goto	l6143
 17336                           
 17337                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17338  1CC0  30E1               	movlw	_DlySw1& (0+255)
 17339  1CC1  00A0               	movwf	??_DelayOffPointSelect
 17340  1CC2  0820               	movf	??_DelayOffPointSelect,w
 17341  1CC3  00F8               	movwf	_DelayOff
 17342                           
 17343                           ;DelayOff_B1.c: 11: }
 17344  1CC4  0008               	return
 17345  1CC5                     l6143:	
 17346                           
 17347                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17348  1CC5  0821               	movf	DelayOffPointSelect@sw,w
 17349  1CC6  3A02               	xorlw	2
 17350  1CC7  1D03               	skipz
 17351  1CC8  0008               	return
 17352                           
 17353                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17354  1CC9  30E6               	movlw	_DlySw2& (0+255)
 17355  1CCA  00A0               	movwf	??_DelayOffPointSelect
 17356  1CCB  0820               	movf	??_DelayOffPointSelect,w
 17357  1CCC  00F8               	movwf	_DelayOff
 17358  1CCD  0008               	return
 17359  1CCE                     __end_of_DelayOffPointSelect:	
 17360                           
 17361                           	psect	text113
 17362  1D1F                     __ptext113:	
 17363 ;; *************** function _CC2500_PowerOnInitial *****************
 17364 ;; Defined at:
 17365 ;;		line 119 in file "../src/CC2500_B1.c"
 17366 ;; Parameters:    Size  Location     Type
 17367 ;;		None
 17368 ;; Auto vars:     Size  Location     Type
 17369 ;;		None
 17370 ;; Return value:  Size  Location     Type
 17371 ;;		None               void
 17372 ;; Registers used:
 17373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17374 ;; Tracked objects:
 17375 ;;		On entry : 0/0
 17376 ;;		On exit  : 0/0
 17377 ;;		Unchanged: 0/0
 17378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17383 ;;Total ram usage:        0 bytes
 17384 ;; Hardware stack levels used:    1
 17385 ;; Hardware stack levels required when called:    8
 17386 ;; This function calls:
 17387 ;;		_CC2500_ClearRXFIFO
 17388 ;;		_CC2500_ClearTXFIFO
 17389 ;;		_CC2500_FrequencyCabr
 17390 ;;		_CC2500_InitPATable
 17391 ;;		_CC2500_InitSetREG
 17392 ;;		_CC2500_PowerRST
 17393 ;;		_CC2500_SIDLEMode
 17394 ;; This function is called by:
 17395 ;;		_main
 17396 ;; This function uses a non-reentrant model
 17397 ;;
 17398                           
 17399                           
 17400                           ;psect for function _CC2500_PowerOnInitial
 17401  1D1F                     _CC2500_PowerOnInitial:	
 17402                           
 17403                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17404                           
 17405                           ;incstack = 0
 17406                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17407  1D1F  3194  2416  319D   	fcall	_CC2500_PowerRST
 17408                           
 17409                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17410  1D22  3190  2083  319D   	fcall	_CC2500_InitSetREG
 17411                           
 17412                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17413  1D25  319E  2640  319D   	fcall	_CC2500_InitPATable
 17414                           
 17415                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17416  1D28  319A  2296  319D   	fcall	_CC2500_ClearTXFIFO
 17417                           
 17418                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17419  1D2B  319A  2292  319D   	fcall	_CC2500_ClearRXFIFO
 17420                           
 17421                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17422  1D2E  319B  231D  319D   	fcall	_CC2500_FrequencyCabr
 17423                           
 17424                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17425  1D31  319A  229A         	fcall	_CC2500_SIDLEMode
 17426  1D33  0008               	return
 17427  1D34                     __end_of_CC2500_PowerOnInitial:	
 17428                           
 17429                           	psect	text114
 17430  1A9A                     __ptext114:	
 17431 ;; *************** function _CC2500_SIDLEMode *****************
 17432 ;; Defined at:
 17433 ;;		line 209 in file "../src/CC2500_B1.c"
 17434 ;; Parameters:    Size  Location     Type
 17435 ;;		None
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;		None
 17438 ;; Return value:  Size  Location     Type
 17439 ;;		None               void
 17440 ;; Registers used:
 17441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17442 ;; Tracked objects:
 17443 ;;		On entry : 0/0
 17444 ;;		On exit  : 0/0
 17445 ;;		Unchanged: 0/0
 17446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;Total ram usage:        0 bytes
 17452 ;; Hardware stack levels used:    1
 17453 ;; Hardware stack levels required when called:    7
 17454 ;; This function calls:
 17455 ;;		_CC2500_WriteCommand
 17456 ;; This function is called by:
 17457 ;;		_CC2500_PowerOnInitial
 17458 ;; This function uses a non-reentrant model
 17459 ;;
 17460                           
 17461                           
 17462                           ;psect for function _CC2500_SIDLEMode
 17463  1A9A                     _CC2500_SIDLEMode:	
 17464                           
 17465                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17466                           
 17467                           ;incstack = 0
 17468                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17469  1A9A  3036               	movlw	54
 17470  1A9B  319D  25A3         	fcall	_CC2500_WriteCommand
 17471  1A9D  0008               	return
 17472  1A9E                     __end_of_CC2500_SIDLEMode:	
 17473                           
 17474                           	psect	text115
 17475  1416                     __ptext115:	
 17476 ;; *************** function _CC2500_PowerRST *****************
 17477 ;; Defined at:
 17478 ;;		line 132 in file "../src/CC2500_B1.c"
 17479 ;; Parameters:    Size  Location     Type
 17480 ;;		None
 17481 ;; Auto vars:     Size  Location     Type
 17482 ;;		None
 17483 ;; Return value:  Size  Location     Type
 17484 ;;		None               void
 17485 ;; Registers used:
 17486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17487 ;; Tracked objects:
 17488 ;;		On entry : 0/0
 17489 ;;		On exit  : 0/0
 17490 ;;		Unchanged: 0/0
 17491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;Total ram usage:        1 bytes
 17497 ;; Hardware stack levels used:    1
 17498 ;; Hardware stack levels required when called:    6
 17499 ;; This function calls:
 17500 ;;		_CC2500_WriteByte
 17501 ;;		_DelayTime_1us
 17502 ;;		_Timeout_Counter
 17503 ;;		_set_TimeoutCleared
 17504 ;; This function is called by:
 17505 ;;		_CC2500_PowerOnInitial
 17506 ;; This function uses a non-reentrant model
 17507 ;;
 17508                           
 17509                           
 17510                           ;psect for function _CC2500_PowerRST
 17511  1416                     _CC2500_PowerRST:	
 17512                           
 17513                           ;CC2500_B1.c: 133: RC1 = 0;
 17514                           
 17515                           ;incstack = 0
 17516                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17517  1416  0020               	movlb	0	; select bank0
 17518  1417  108E               	bcf	14,1	;volatile
 17519                           
 17520                           ;CC2500_B1.c: 134: RC0 = 0;
 17521  1418  100E               	bcf	14,0	;volatile
 17522                           
 17523                           ;CC2500_B1.c: 135: RC4 = 1;
 17524  1419  160E               	bsf	14,4	;volatile
 17525                           
 17526                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17527  141A  300A               	movlw	10
 17528  141B  00A0               	movwf	DelayTime_1us@count
 17529  141C  3000               	movlw	0
 17530  141D  00A1               	movwf	DelayTime_1us@count+1
 17531  141E  319F  278A  3194   	fcall	_DelayTime_1us
 17532                           
 17533                           ;CC2500_B1.c: 137: RC4 = 0;
 17534  1421  0020               	movlb	0	; select bank0
 17535  1422  120E               	bcf	14,4	;volatile
 17536                           
 17537                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17538  1423  300A               	movlw	10
 17539  1424  00A0               	movwf	DelayTime_1us@count
 17540  1425  3000               	movlw	0
 17541  1426  00A1               	movwf	DelayTime_1us@count+1
 17542  1427  319F  278A  3194   	fcall	_DelayTime_1us
 17543                           
 17544                           ;CC2500_B1.c: 139: RC4 = 1;
 17545  142A  0020               	movlb	0	; select bank0
 17546  142B  160E               	bsf	14,4	;volatile
 17547                           
 17548                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17549  142C  3028               	movlw	40
 17550  142D  00A0               	movwf	DelayTime_1us@count
 17551  142E  3000               	movlw	0
 17552  142F  00A1               	movwf	DelayTime_1us@count+1
 17553  1430  319F  278A  3194   	fcall	_DelayTime_1us
 17554                           
 17555                           ;CC2500_B1.c: 141: RC4 = 0;
 17556  1433  0020               	movlb	0	; select bank0
 17557  1434  120E               	bcf	14,4	;volatile
 17558                           
 17559                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17560  1435  3030               	movlw	48
 17561  1436  00A6               	movwf	??_CC2500_PowerRST
 17562  1437  0826               	movf	??_CC2500_PowerRST,w
 17563  1438  00FB               	movwf	_SPI0Buffer
 17564                           
 17565                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17566  1439  2C3D               	goto	l7215
 17567  143A                     l7213:	
 17568                           
 17569                           ;CC2500_B1.c: 144: Timeout_Counter();
 17570  143A  319D  250A  3194   	fcall	_Timeout_Counter
 17571  143D                     l7215:	
 17572  143D  0020               	movlb	0	; select bank0
 17573  143E  1D0E               	btfss	14,2	;volatile
 17574  143F  2C43               	goto	l7219
 17575  1440  0021               	movlb	1	; select bank1
 17576  1441  1D2B               	btfss	(_myMain^(0+128)+11),2
 17577  1442  2C3A               	goto	l7213
 17578  1443                     l7219:	
 17579                           
 17580                           ;CC2500_B1.c: 145: };
 17581                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17582  1443  319A  22A2  3194   	fcall	_set_TimeoutCleared
 17583                           
 17584                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17585  1446  319C  24A6  3194   	fcall	_CC2500_WriteByte
 17586                           
 17587                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17588  1449  2C4D               	goto	l7225
 17589  144A                     l7223:	
 17590                           
 17591                           ;CC2500_B1.c: 149: Timeout_Counter();
 17592  144A  319D  250A  3194   	fcall	_Timeout_Counter
 17593  144D                     l7225:	
 17594  144D  0020               	movlb	0	; select bank0
 17595  144E  1D0E               	btfss	14,2	;volatile
 17596  144F  2C53               	goto	l7229
 17597  1450  0021               	movlb	1	; select bank1
 17598  1451  1D2B               	btfss	(_myMain^(0+128)+11),2
 17599  1452  2C4A               	goto	l7223
 17600  1453                     l7229:	
 17601                           
 17602                           ;CC2500_B1.c: 150: };
 17603                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17604  1453  319A  22A2         	fcall	_set_TimeoutCleared
 17605                           
 17606                           ;CC2500_B1.c: 152: RC0 = 0;
 17607  1455  0020               	movlb	0	; select bank0
 17608  1456  100E               	bcf	14,0	;volatile
 17609                           
 17610                           ;CC2500_B1.c: 153: RC4 = 1;
 17611  1457  160E               	bsf	14,4	;volatile
 17612  1458  0008               	return
 17613  1459                     __end_of_CC2500_PowerRST:	
 17614                           
 17615                           	psect	text116
 17616  1083                     __ptext116:	
 17617 ;; *************** function _CC2500_InitSetREG *****************
 17618 ;; Defined at:
 17619 ;;		line 159 in file "../src/CC2500_B1.c"
 17620 ;; Parameters:    Size  Location     Type
 17621 ;;		None
 17622 ;; Auto vars:     Size  Location     Type
 17623 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17624 ;;  temp2           1    7[BANK0 ] unsigned char 
 17625 ;;  temp1           1    6[BANK0 ] unsigned char 
 17626 ;; Return value:  Size  Location     Type
 17627 ;;		None               void
 17628 ;; Registers used:
 17629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17630 ;; Tracked objects:
 17631 ;;		On entry : 0/0
 17632 ;;		On exit  : 0/0
 17633 ;;		Unchanged: 0/0
 17634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17636 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;Total ram usage:        4 bytes
 17640 ;; Hardware stack levels used:    1
 17641 ;; Hardware stack levels required when called:    7
 17642 ;; This function calls:
 17643 ;;		_CC2500_WriteREG
 17644 ;; This function is called by:
 17645 ;;		_CC2500_PowerOnInitial
 17646 ;; This function uses a non-reentrant model
 17647 ;;
 17648                           
 17649                           
 17650                           ;psect for function _CC2500_InitSetREG
 17651  1083                     _CC2500_InitSetREG:	
 17652                           
 17653                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17654                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17655                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17656                           
 17657                           ;incstack = 0
 17658                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17659  1083  0020               	movlb	0	; select bank0
 17660  1084  01A8               	clrf	CC2500_InitSetREG@loop_c
 17661  1085                     L10:	
 17662  1085  302F               	movlw	47
 17663  1086  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17664  1087  1803               	btfsc	3,0
 17665  1088  0008               	return
 17666                           
 17667                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17668  1089  0828               	movf	CC2500_InitSetREG@loop_c,w
 17669  108A  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17670  108B  0084               	movwf	4
 17671  108C  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17672  108D  1803               	skipnc
 17673  108E  3E01               	addlw	1
 17674  108F  0085               	movwf	5
 17675  1090  0800               	movf	0,w	;code access
 17676  1091  00A5               	movwf	??_CC2500_InitSetREG
 17677  1092  0825               	movf	??_CC2500_InitSetREG,w
 17678  1093  00A6               	movwf	CC2500_InitSetREG@temp1
 17679                           
 17680                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17681  1094  0828               	movf	CC2500_InitSetREG@loop_c,w
 17682  1095  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17683  1096  0084               	movwf	4
 17684  1097  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17685  1098  1803               	skipnc
 17686  1099  3E01               	addlw	1
 17687  109A  0085               	movwf	5
 17688  109B  0800               	movf	0,w	;code access
 17689  109C  00A5               	movwf	??_CC2500_InitSetREG
 17690  109D  0825               	movf	??_CC2500_InitSetREG,w
 17691  109E  00A7               	movwf	CC2500_InitSetREG@temp2
 17692                           
 17693                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17694  109F  0827               	movf	CC2500_InitSetREG@temp2,w
 17695  10A0  00A5               	movwf	??_CC2500_InitSetREG
 17696  10A1  0825               	movf	??_CC2500_InitSetREG,w
 17697  10A2  00A2               	movwf	CC2500_WriteREG@value
 17698  10A3  0826               	movf	CC2500_InitSetREG@temp1,w
 17699  10A4  319E  26DD  3190   	fcall	_CC2500_WriteREG
 17700  10A7  3001               	movlw	1
 17701  10A8  0020               	movlb	0	; select bank0
 17702  10A9  00A5               	movwf	??_CC2500_InitSetREG
 17703  10AA  0825               	movf	??_CC2500_InitSetREG,w
 17704  10AB  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17705  10AC  2885               	goto	L10
 17706  10AD                     __end_of_CC2500_InitSetREG:	
 17707                           
 17708                           	psect	text117
 17709  1E40                     __ptext117:	
 17710 ;; *************** function _CC2500_InitPATable *****************
 17711 ;; Defined at:
 17712 ;;		line 174 in file "../src/CC2500_B1.c"
 17713 ;; Parameters:    Size  Location     Type
 17714 ;;		None
 17715 ;; Auto vars:     Size  Location     Type
 17716 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17717 ;;  temp            1    6[BANK0 ] unsigned char 
 17718 ;; Return value:  Size  Location     Type
 17719 ;;		None               void
 17720 ;; Registers used:
 17721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17722 ;; Tracked objects:
 17723 ;;		On entry : 0/0
 17724 ;;		On exit  : 0/0
 17725 ;;		Unchanged: 0/0
 17726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17729 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17731 ;;Total ram usage:        3 bytes
 17732 ;; Hardware stack levels used:    1
 17733 ;; Hardware stack levels required when called:    7
 17734 ;; This function calls:
 17735 ;;		_CC2500_WriteREG
 17736 ;; This function is called by:
 17737 ;;		_CC2500_PowerOnInitial
 17738 ;; This function uses a non-reentrant model
 17739 ;;
 17740                           
 17741                           
 17742                           ;psect for function _CC2500_InitPATable
 17743  1E40                     _CC2500_InitPATable:	
 17744                           
 17745                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17746                           ;CC2500_B1.c: 176: unsigned char temp;
 17747                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17748                           
 17749                           ;incstack = 0
 17750                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17751  1E40  0020               	movlb	0	; select bank0
 17752  1E41  01A7               	clrf	CC2500_InitPATable@loop_d
 17753  1E42                     L11:	
 17754  1E42  3008               	movlw	8
 17755  1E43  0227               	subwf	CC2500_InitPATable@loop_d,w
 17756  1E44  1803               	btfsc	3,0
 17757  1E45  0008               	return
 17758                           
 17759                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17760  1E46  0827               	movf	CC2500_InitPATable@loop_d,w
 17761  1E47  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17762  1E48  0084               	movwf	4
 17763  1E49  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17764  1E4A  1803               	skipnc
 17765  1E4B  3E01               	addlw	1
 17766  1E4C  0085               	movwf	5
 17767  1E4D  0800               	movf	0,w	;code access
 17768  1E4E  00A5               	movwf	??_CC2500_InitPATable
 17769  1E4F  0825               	movf	??_CC2500_InitPATable,w
 17770  1E50  00A6               	movwf	CC2500_InitPATable@temp
 17771                           
 17772                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17773  1E51  0826               	movf	CC2500_InitPATable@temp,w
 17774  1E52  00A5               	movwf	??_CC2500_InitPATable
 17775  1E53  0825               	movf	??_CC2500_InitPATable,w
 17776  1E54  00A2               	movwf	CC2500_WriteREG@value
 17777  1E55  303E               	movlw	62
 17778  1E56  319E  26DD  319E   	fcall	_CC2500_WriteREG
 17779  1E59  3001               	movlw	1
 17780  1E5A  0020               	movlb	0	; select bank0
 17781  1E5B  00A5               	movwf	??_CC2500_InitPATable
 17782  1E5C  0825               	movf	??_CC2500_InitPATable,w
 17783  1E5D  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17784  1E5E  2E42               	goto	L11
 17785  1E5F                     __end_of_CC2500_InitPATable:	
 17786                           
 17787                           	psect	text118
 17788  1EDD                     __ptext118:	
 17789 ;; *************** function _CC2500_WriteREG *****************
 17790 ;; Defined at:
 17791 ;;		line 251 in file "../src/CC2500_B1.c"
 17792 ;; Parameters:    Size  Location     Type
 17793 ;;  w_addr          1    wreg     unsigned char 
 17794 ;;  value           1    2[BANK0 ] unsigned char 
 17795 ;; Auto vars:     Size  Location     Type
 17796 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17797 ;; Return value:  Size  Location     Type
 17798 ;;		None               void
 17799 ;; Registers used:
 17800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17801 ;; Tracked objects:
 17802 ;;		On entry : 0/0
 17803 ;;		On exit  : 0/0
 17804 ;;		Unchanged: 0/0
 17805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17806 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17809 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17810 ;;Total ram usage:        3 bytes
 17811 ;; Hardware stack levels used:    1
 17812 ;; Hardware stack levels required when called:    6
 17813 ;; This function calls:
 17814 ;;		_CC2500_WriteByte
 17815 ;;		_Timeout_Counter
 17816 ;;		_set_TimeoutCleared
 17817 ;; This function is called by:
 17818 ;;		_CC2500_InitSetREG
 17819 ;;		_CC2500_InitPATable
 17820 ;; This function uses a non-reentrant model
 17821 ;;
 17822                           
 17823                           
 17824                           ;psect for function _CC2500_WriteREG
 17825  1EDD                     _CC2500_WriteREG:	
 17826                           
 17827                           ;incstack = 0
 17828                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17829                           ;CC2500_WriteREG@w_addr stored from wreg
 17830  1EDD  0020               	movlb	0	; select bank0
 17831  1EDE  00A4               	movwf	CC2500_WriteREG@w_addr
 17832                           
 17833                           ;CC2500_B1.c: 252: RC4 = 0;
 17834  1EDF  120E               	bcf	14,4	;volatile
 17835                           
 17836                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17837  1EE0  0824               	movf	CC2500_WriteREG@w_addr,w
 17838  1EE1  00A3               	movwf	??_CC2500_WriteREG
 17839  1EE2  0823               	movf	??_CC2500_WriteREG,w
 17840  1EE3  00FB               	movwf	_SPI0Buffer
 17841                           
 17842                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17843  1EE4  2EE8               	goto	l6865
 17844  1EE5                     l6863:	
 17845                           
 17846                           ;CC2500_B1.c: 255: Timeout_Counter();
 17847  1EE5  319D  250A  319E   	fcall	_Timeout_Counter
 17848  1EE8                     l6865:	
 17849  1EE8  0020               	movlb	0	; select bank0
 17850  1EE9  1D0E               	btfss	14,2	;volatile
 17851  1EEA  2EEE               	goto	l6869
 17852  1EEB  0021               	movlb	1	; select bank1
 17853  1EEC  1D2B               	btfss	(_myMain^(0+128)+11),2
 17854  1EED  2EE5               	goto	l6863
 17855  1EEE                     l6869:	
 17856                           
 17857                           ;CC2500_B1.c: 256: };
 17858                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17859  1EEE  319A  22A2  319E   	fcall	_set_TimeoutCleared
 17860                           
 17861                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17862  1EF1  319C  24A6  319E   	fcall	_CC2500_WriteByte
 17863                           
 17864                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17865  1EF4  0020               	movlb	0	; select bank0
 17866  1EF5  0822               	movf	CC2500_WriteREG@value,w
 17867  1EF6  00A3               	movwf	??_CC2500_WriteREG
 17868  1EF7  0823               	movf	??_CC2500_WriteREG,w
 17869  1EF8  00FB               	movwf	_SPI0Buffer
 17870                           
 17871                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17872  1EF9  319C  24A6         	fcall	_CC2500_WriteByte
 17873                           
 17874                           ;CC2500_B1.c: 262: RC4 = 1;
 17875  1EFB  0020               	movlb	0	; select bank0
 17876  1EFC  160E               	bsf	14,4	;volatile
 17877  1EFD  0008               	return
 17878  1EFE                     __end_of_CC2500_WriteREG:	
 17879                           
 17880                           	psect	text119
 17881  1B1D                     __ptext119:	
 17882 ;; *************** function _CC2500_FrequencyCabr *****************
 17883 ;; Defined at:
 17884 ;;		line 201 in file "../src/CC2500_B1.c"
 17885 ;; Parameters:    Size  Location     Type
 17886 ;;		None
 17887 ;; Auto vars:     Size  Location     Type
 17888 ;;		None
 17889 ;; Return value:  Size  Location     Type
 17890 ;;		None               void
 17891 ;; Registers used:
 17892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17893 ;; Tracked objects:
 17894 ;;		On entry : 0/0
 17895 ;;		On exit  : 0/0
 17896 ;;		Unchanged: 0/0
 17897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;Total ram usage:        0 bytes
 17903 ;; Hardware stack levels used:    1
 17904 ;; Hardware stack levels required when called:    7
 17905 ;; This function calls:
 17906 ;;		_CC2500_WriteCommand
 17907 ;;		_DelayTime_1us
 17908 ;; This function is called by:
 17909 ;;		_CC2500_PowerOnInitial
 17910 ;; This function uses a non-reentrant model
 17911 ;;
 17912                           
 17913                           
 17914                           ;psect for function _CC2500_FrequencyCabr
 17915  1B1D                     _CC2500_FrequencyCabr:	
 17916                           
 17917                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17918                           
 17919                           ;incstack = 0
 17920                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17921  1B1D  3033               	movlw	51
 17922  1B1E  319D  25A3  319B   	fcall	_CC2500_WriteCommand
 17923                           
 17924                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17925  1B21  30E8               	movlw	232
 17926  1B22  0020               	movlb	0	; select bank0
 17927  1B23  00A0               	movwf	DelayTime_1us@count
 17928  1B24  3003               	movlw	3
 17929  1B25  00A1               	movwf	DelayTime_1us@count+1
 17930  1B26  319F  278A         	fcall	_DelayTime_1us
 17931  1B28  0008               	return
 17932  1B29                     __end_of_CC2500_FrequencyCabr:	
 17933                           
 17934                           	psect	text120
 17935  1F8A                     __ptext120:	
 17936 ;; *************** function _DelayTime_1us *****************
 17937 ;; Defined at:
 17938 ;;		line 320 in file "../src/CC2500_B1.c"
 17939 ;; Parameters:    Size  Location     Type
 17940 ;;  count           2    0[BANK0 ] int 
 17941 ;; Auto vars:     Size  Location     Type
 17942 ;;  j               2    4[BANK0 ] unsigned int 
 17943 ;;  i               2    2[BANK0 ] unsigned int 
 17944 ;; Return value:  Size  Location     Type
 17945 ;;		None               void
 17946 ;; Registers used:
 17947 ;;		wreg, status,2
 17948 ;; Tracked objects:
 17949 ;;		On entry : 0/0
 17950 ;;		On exit  : 0/0
 17951 ;;		Unchanged: 0/0
 17952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17953 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17954 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;Total ram usage:        6 bytes
 17958 ;; Hardware stack levels used:    1
 17959 ;; Hardware stack levels required when called:    5
 17960 ;; This function calls:
 17961 ;;		Nothing
 17962 ;; This function is called by:
 17963 ;;		_CC2500_PowerRST
 17964 ;;		_CC2500_FrequencyCabr
 17965 ;; This function uses a non-reentrant model
 17966 ;;
 17967                           
 17968                           
 17969                           ;psect for function _DelayTime_1us
 17970  1F8A                     _DelayTime_1us:	
 17971                           
 17972                           ;CC2500_B1.c: 321: unsigned int i, j;
 17973                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17974                           
 17975                           ;incstack = 0
 17976                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17977  1F8A  3001               	movlw	1
 17978  1F8B  0020               	movlb	0	; select bank0
 17979  1F8C  00A2               	movwf	DelayTime_1us@i
 17980  1F8D  3000               	movlw	0
 17981  1F8E  00A3               	movwf	DelayTime_1us@i+1
 17982  1F8F                     l372:	
 17983  1F8F  0821               	movf	DelayTime_1us@count+1,w
 17984  1F90  0223               	subwf	DelayTime_1us@i+1,w
 17985  1F91  1D03               	skipz
 17986  1F92  2F95               	goto	u6035
 17987  1F93  0820               	movf	DelayTime_1us@count,w
 17988  1F94  0222               	subwf	DelayTime_1us@i,w
 17989  1F95                     u6035:	
 17990  1F95  1803               	btfsc	3,0
 17991  1F96  0008               	return
 17992                           
 17993                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17994  1F97  01A4               	clrf	DelayTime_1us@j
 17995  1F98  01A5               	clrf	DelayTime_1us@j+1
 17996  1F99  3000               	movlw	0
 17997  1F9A  0225               	subwf	DelayTime_1us@j+1,w
 17998  1F9B  3002               	movlw	2
 17999  1F9C  1903               	skipnz
 18000  1F9D  0224               	subwf	DelayTime_1us@j,w
 18001  1F9E  1803               	btfsc	3,0
 18002  1F9F  2FAB               	goto	l6857
 18003  1FA0                     l6855:	
 18004  1FA0  3001               	movlw	1
 18005  1FA1  07A4               	addwf	DelayTime_1us@j,f
 18006  1FA2  3000               	movlw	0
 18007  1FA3  3DA5               	addwfc	DelayTime_1us@j+1,f
 18008  1FA4  3000               	movlw	0
 18009  1FA5  0225               	subwf	DelayTime_1us@j+1,w
 18010  1FA6  3002               	movlw	2
 18011  1FA7  1903               	skipnz
 18012  1FA8  0224               	subwf	DelayTime_1us@j,w
 18013  1FA9  1C03               	skipc
 18014  1FAA  2FA0               	goto	l6855
 18015  1FAB                     l6857:	
 18016  1FAB  3001               	movlw	1
 18017  1FAC  07A2               	addwf	DelayTime_1us@i,f
 18018  1FAD  3000               	movlw	0
 18019  1FAE  3DA3               	addwfc	DelayTime_1us@i+1,f
 18020  1FAF  2F8F               	goto	l372
 18021  1FB0                     __end_of_DelayTime_1us:	
 18022                           
 18023                           	psect	text121
 18024  1A96                     __ptext121:	
 18025 ;; *************** function _CC2500_ClearTXFIFO *****************
 18026 ;; Defined at:
 18027 ;;		line 187 in file "../src/CC2500_B1.c"
 18028 ;; Parameters:    Size  Location     Type
 18029 ;;		None
 18030 ;; Auto vars:     Size  Location     Type
 18031 ;;		None
 18032 ;; Return value:  Size  Location     Type
 18033 ;;		None               void
 18034 ;; Registers used:
 18035 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18036 ;; Tracked objects:
 18037 ;;		On entry : 0/0
 18038 ;;		On exit  : 0/0
 18039 ;;		Unchanged: 0/0
 18040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18045 ;;Total ram usage:        0 bytes
 18046 ;; Hardware stack levels used:    1
 18047 ;; Hardware stack levels required when called:    7
 18048 ;; This function calls:
 18049 ;;		_CC2500_WriteCommand
 18050 ;; This function is called by:
 18051 ;;		_CC2500_PowerOnInitial
 18052 ;; This function uses a non-reentrant model
 18053 ;;
 18054                           
 18055                           
 18056                           ;psect for function _CC2500_ClearTXFIFO
 18057  1A96                     _CC2500_ClearTXFIFO:	
 18058                           
 18059                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 18060                           
 18061                           ;incstack = 0
 18062                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18063  1A96  303B               	movlw	59
 18064  1A97  319D  25A3         	fcall	_CC2500_WriteCommand
 18065  1A99  0008               	return
 18066  1A9A                     __end_of_CC2500_ClearTXFIFO:	
 18067                           
 18068                           	psect	text122
 18069  1A92                     __ptext122:	
 18070 ;; *************** function _CC2500_ClearRXFIFO *****************
 18071 ;; Defined at:
 18072 ;;		line 194 in file "../src/CC2500_B1.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;		None
 18075 ;; Auto vars:     Size  Location     Type
 18076 ;;		None
 18077 ;; Return value:  Size  Location     Type
 18078 ;;		None               void
 18079 ;; Registers used:
 18080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18081 ;; Tracked objects:
 18082 ;;		On entry : 0/0
 18083 ;;		On exit  : 0/0
 18084 ;;		Unchanged: 0/0
 18085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18090 ;;Total ram usage:        0 bytes
 18091 ;; Hardware stack levels used:    1
 18092 ;; Hardware stack levels required when called:    7
 18093 ;; This function calls:
 18094 ;;		_CC2500_WriteCommand
 18095 ;; This function is called by:
 18096 ;;		_CC2500_PowerOnInitial
 18097 ;; This function uses a non-reentrant model
 18098 ;;
 18099                           
 18100                           
 18101                           ;psect for function _CC2500_ClearRXFIFO
 18102  1A92                     _CC2500_ClearRXFIFO:	
 18103                           
 18104                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 18105                           
 18106                           ;incstack = 0
 18107                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18108  1A92  303A               	movlw	58
 18109  1A93  319D  25A3         	fcall	_CC2500_WriteCommand
 18110  1A95  0008               	return
 18111  1A96                     __end_of_CC2500_ClearRXFIFO:	
 18112                           
 18113                           	psect	text123
 18114  1DA3                     __ptext123:	
 18115 ;; *************** function _CC2500_WriteCommand *****************
 18116 ;; Defined at:
 18117 ;;		line 285 in file "../src/CC2500_B1.c"
 18118 ;; Parameters:    Size  Location     Type
 18119 ;;  command         1    wreg     unsigned char 
 18120 ;; Auto vars:     Size  Location     Type
 18121 ;;  command         1    3[BANK0 ] unsigned char 
 18122 ;; Return value:  Size  Location     Type
 18123 ;;		None               void
 18124 ;; Registers used:
 18125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18126 ;; Tracked objects:
 18127 ;;		On entry : 0/0
 18128 ;;		On exit  : 0/0
 18129 ;;		Unchanged: 0/0
 18130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18133 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18135 ;;Total ram usage:        2 bytes
 18136 ;; Hardware stack levels used:    1
 18137 ;; Hardware stack levels required when called:    6
 18138 ;; This function calls:
 18139 ;;		_CC2500_WriteByte
 18140 ;;		_Timeout_Counter
 18141 ;;		_set_TimeoutCleared
 18142 ;; This function is called by:
 18143 ;;		_CC2500_TxData
 18144 ;;		_CC2500_ClearTXFIFO
 18145 ;;		_CC2500_ClearRXFIFO
 18146 ;;		_CC2500_FrequencyCabr
 18147 ;;		_CC2500_SIDLEMode
 18148 ;;		_setRF_Main
 18149 ;;		_RF_RxDisable
 18150 ;; This function uses a non-reentrant model
 18151 ;;
 18152                           
 18153                           
 18154                           ;psect for function _CC2500_WriteCommand
 18155  1DA3                     _CC2500_WriteCommand:	
 18156                           
 18157                           ;incstack = 0
 18158                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18159                           ;CC2500_WriteCommand@command stored from wreg
 18160  1DA3  0020               	movlb	0	; select bank0
 18161  1DA4  00A3               	movwf	CC2500_WriteCommand@command
 18162                           
 18163                           ;CC2500_B1.c: 286: RC4 = 0;
 18164  1DA5  120E               	bcf	14,4	;volatile
 18165                           
 18166                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 18167  1DA6  0823               	movf	CC2500_WriteCommand@command,w
 18168  1DA7  00A2               	movwf	??_CC2500_WriteCommand
 18169  1DA8  0822               	movf	??_CC2500_WriteCommand,w
 18170  1DA9  00FB               	movwf	_SPI0Buffer
 18171                           
 18172                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 18173  1DAA  2DAE               	goto	l6561
 18174  1DAB                     l6559:	
 18175                           
 18176                           ;CC2500_B1.c: 290: Timeout_Counter();
 18177  1DAB  319D  250A  319D   	fcall	_Timeout_Counter
 18178  1DAE                     l6561:	
 18179  1DAE  0020               	movlb	0	; select bank0
 18180  1DAF  1D0E               	btfss	14,2	;volatile
 18181  1DB0  2DB4               	goto	l6565
 18182  1DB1  0021               	movlb	1	; select bank1
 18183  1DB2  1D2B               	btfss	(_myMain^(0+128)+11),2
 18184  1DB3  2DAB               	goto	l6559
 18185  1DB4                     l6565:	
 18186                           
 18187                           ;CC2500_B1.c: 291: };
 18188                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 18189  1DB4  319A  22A2  319D   	fcall	_set_TimeoutCleared
 18190                           
 18191                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 18192  1DB7  319C  24A6         	fcall	_CC2500_WriteByte
 18193                           
 18194                           ;CC2500_B1.c: 295: RC4 = 1;
 18195  1DB9  0020               	movlb	0	; select bank0
 18196  1DBA  160E               	bsf	14,4	;volatile
 18197  1DBB  0008               	return
 18198  1DBC                     __end_of_CC2500_WriteCommand:	
 18199                           
 18200                           	psect	text124
 18201  1AA2                     __ptext124:	
 18202 ;; *************** function _set_TimeoutCleared *****************
 18203 ;; Defined at:
 18204 ;;		line 283 in file "../src/main_B1.c"
 18205 ;; Parameters:    Size  Location     Type
 18206 ;;		None
 18207 ;; Auto vars:     Size  Location     Type
 18208 ;;		None
 18209 ;; Return value:  Size  Location     Type
 18210 ;;		None               void
 18211 ;; Registers used:
 18212 ;;		status,2
 18213 ;; Tracked objects:
 18214 ;;		On entry : 0/0
 18215 ;;		On exit  : 0/0
 18216 ;;		Unchanged: 0/0
 18217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18222 ;;Total ram usage:        0 bytes
 18223 ;; Hardware stack levels used:    1
 18224 ;; Hardware stack levels required when called:    5
 18225 ;; This function calls:
 18226 ;;		Nothing
 18227 ;; This function is called by:
 18228 ;;		_CC2500_TxData
 18229 ;;		_CC2500_RxData
 18230 ;;		_CC2500_PowerRST
 18231 ;;		_CC2500_WriteREG
 18232 ;;		_CC2500_WriteCommand
 18233 ;;		_CC2500_ReadStatus
 18234 ;;		_getAD
 18235 ;;		_TouchPower
 18236 ;;		_CC2500_ReadREG
 18237 ;; This function uses a non-reentrant model
 18238 ;;
 18239                           
 18240                           
 18241                           ;psect for function _set_TimeoutCleared
 18242  1AA2                     _set_TimeoutCleared:	
 18243                           
 18244                           ;main_B1.c: 284: myMain.Timeout = 0;
 18245                           
 18246                           ;incstack = 0
 18247                           ; Regs used in _set_TimeoutCleared: [status,2]
 18248  1AA2  0021               	movlb	1	; select bank1
 18249  1AA3  112B               	bcf	(_myMain^(0+128)+11),2
 18250                           
 18251                           ;main_B1.c: 285: myMain.Timeout_Counter = 0;
 18252  1AA4  01AC               	clrf	(_myMain^(0+128)+12)
 18253  1AA5  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18254  1AA6  0008               	return
 18255  1AA7                     __end_of_set_TimeoutCleared:	
 18256                           
 18257                           	psect	text125
 18258  1D0A                     __ptext125:	
 18259 ;; *************** function _Timeout_Counter *****************
 18260 ;; Defined at:
 18261 ;;		line 274 in file "../src/main_B1.c"
 18262 ;; Parameters:    Size  Location     Type
 18263 ;;		None
 18264 ;; Auto vars:     Size  Location     Type
 18265 ;;		None
 18266 ;; Return value:  Size  Location     Type
 18267 ;;		None               void
 18268 ;; Registers used:
 18269 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18270 ;; Tracked objects:
 18271 ;;		On entry : 0/0
 18272 ;;		On exit  : 0/0
 18273 ;;		Unchanged: 0/0
 18274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;Total ram usage:        0 bytes
 18280 ;; Hardware stack levels used:    1
 18281 ;; Hardware stack levels required when called:    5
 18282 ;; This function calls:
 18283 ;;		Nothing
 18284 ;; This function is called by:
 18285 ;;		_CC2500_TxData
 18286 ;;		_CC2500_RxData
 18287 ;;		_CC2500_PowerRST
 18288 ;;		_CC2500_WriteREG
 18289 ;;		_CC2500_WriteCommand
 18290 ;;		_CC2500_ReadStatus
 18291 ;;		_getAD
 18292 ;;		_TouchPower
 18293 ;;		_CC2500_ReadREG
 18294 ;; This function uses a non-reentrant model
 18295 ;;
 18296                           
 18297                           
 18298                           ;psect for function _Timeout_Counter
 18299  1D0A                     _Timeout_Counter:	
 18300                           
 18301                           ;main_B1.c: 275: myMain.Timeout_Counter++;
 18302                           
 18303                           ;incstack = 0
 18304                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18305  1D0A  3001               	movlw	1
 18306  1D0B  0021               	movlb	1	; select bank1
 18307  1D0C  07AC               	addwf	(_myMain^(0+128)+12),f
 18308  1D0D  3000               	movlw	0
 18309  1D0E  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 18310                           
 18311                           ;main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 18312  1D0F  300C               	movlw	12
 18313  1D10  3EA0               	addlw	_myMain& (0+255)
 18314  1D11  0086               	movwf	6
 18315  1D12  0187               	clrf	7
 18316  1D13  3F40               	moviw [0]fsr1
 18317  1D14  3A10               	xorlw	16
 18318  1D15  1D03               	skipz
 18319  1D16  2D19               	goto	u5395
 18320  1D17  3F41               	moviw [1]fsr1
 18321  1D18  3A27               	xorlw	39
 18322  1D19                     u5395:	
 18323  1D19  1D03               	skipz
 18324  1D1A  0008               	return
 18325                           
 18326                           ;main_B1.c: 277: myMain.Timeout_Counter = 0;
 18327  1D1B  01AC               	clrf	(_myMain^(0+128)+12)
 18328  1D1C  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18329                           
 18330                           ;main_B1.c: 278: myMain.Timeout = 1;
 18331  1D1D  152B               	bsf	(_myMain^(0+128)+11),2
 18332  1D1E  0008               	return
 18333  1D1F                     __end_of_Timeout_Counter:	
 18334                           
 18335                           	psect	text126
 18336  1CA6                     __ptext126:	
 18337 ;; *************** function _CC2500_WriteByte *****************
 18338 ;; Defined at:
 18339 ;;		line 219 in file "../src/CC2500_B1.c"
 18340 ;; Parameters:    Size  Location     Type
 18341 ;;		None
 18342 ;; Auto vars:     Size  Location     Type
 18343 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18344 ;; Return value:  Size  Location     Type
 18345 ;;		None               void
 18346 ;; Registers used:
 18347 ;;		wreg, status,2, status,0
 18348 ;; Tracked objects:
 18349 ;;		On entry : 0/0
 18350 ;;		On exit  : 0/0
 18351 ;;		Unchanged: 0/0
 18352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18356 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18357 ;;Total ram usage:        2 bytes
 18358 ;; Hardware stack levels used:    1
 18359 ;; Hardware stack levels required when called:    5
 18360 ;; This function calls:
 18361 ;;		Nothing
 18362 ;; This function is called by:
 18363 ;;		_CC2500_TxData
 18364 ;;		_CC2500_RxData
 18365 ;;		_CC2500_PowerRST
 18366 ;;		_CC2500_WriteREG
 18367 ;;		_CC2500_WriteCommand
 18368 ;;		_CC2500_ReadStatus
 18369 ;;		_CC2500_ReadREG
 18370 ;; This function uses a non-reentrant model
 18371 ;;
 18372                           
 18373                           
 18374                           ;psect for function _CC2500_WriteByte
 18375  1CA6                     _CC2500_WriteByte:	
 18376                           
 18377                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18378                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18379                           
 18380                           ;incstack = 0
 18381                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18382  1CA6  0020               	movlb	0	; select bank0
 18383  1CA7  01A1               	clrf	CC2500_WriteByte@loop_a
 18384  1CA8                     L12:	
 18385  1CA8  3008               	movlw	8
 18386  1CA9  0221               	subwf	CC2500_WriteByte@loop_a,w
 18387  1CAA  1803               	btfsc	3,0
 18388  1CAB  0008               	return
 18389                           
 18390                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18391  1CAC  1FFB               	btfss	_SPI0Buffer,7
 18392  1CAD  2CB0               	goto	l328
 18393                           
 18394                           ;CC2500_B1.c: 223: RC0 = 1;
 18395  1CAE  140E               	bsf	14,0	;volatile
 18396  1CAF  2CB1               	goto	l329
 18397  1CB0                     l328:	
 18398                           
 18399                           ;CC2500_B1.c: 224: else
 18400                           ;CC2500_B1.c: 225: RC0 = 0;
 18401  1CB0  100E               	bcf	14,0	;volatile
 18402  1CB1                     l329:	
 18403                           
 18404                           ;CC2500_B1.c: 226: RC1 = 1;
 18405  1CB1  148E               	bsf	14,1	;volatile
 18406                           
 18407                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18408  1CB2  1003               	clrc
 18409  1CB3  0DFB               	rlf	_SPI0Buffer,f
 18410                           
 18411                           ;CC2500_B1.c: 228: RC1 = 0;
 18412  1CB4  108E               	bcf	14,1	;volatile
 18413  1CB5  3001               	movlw	1
 18414  1CB6  00A0               	movwf	??_CC2500_WriteByte
 18415  1CB7  0820               	movf	??_CC2500_WriteByte,w
 18416  1CB8  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18417  1CB9  2CA8               	goto	L12
 18418  1CBA                     __end_of_CC2500_WriteByte:	
 18419                           
 18420                           	psect	text127
 18421  1459                     __ptext127:	
 18422 ;; *************** function _Buzzer_Main *****************
 18423 ;; Defined at:
 18424 ;;		line 46 in file "../src/Buzzer_B1.c"
 18425 ;; Parameters:    Size  Location     Type
 18426 ;;		None
 18427 ;; Auto vars:     Size  Location     Type
 18428 ;;		None
 18429 ;; Return value:  Size  Location     Type
 18430 ;;		None               void
 18431 ;; Registers used:
 18432 ;;		wreg, status,2, status,0
 18433 ;; Tracked objects:
 18434 ;;		On entry : 0/0
 18435 ;;		On exit  : 0/0
 18436 ;;		Unchanged: 0/0
 18437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18441 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18442 ;;Total ram usage:        1 bytes
 18443 ;; Hardware stack levels used:    1
 18444 ;; Hardware stack levels required when called:    5
 18445 ;; This function calls:
 18446 ;;		Nothing
 18447 ;; This function is called by:
 18448 ;;		_main
 18449 ;; This function uses a non-reentrant model
 18450 ;;
 18451                           
 18452                           
 18453                           ;psect for function _Buzzer_Main
 18454  1459                     _Buzzer_Main:	
 18455                           
 18456                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18457                           
 18458                           ;incstack = 0
 18459                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18460  1459  0021               	movlb	1	; select bank1
 18461  145A  1CAE               	btfss	_Buz1^(0+128),1
 18462  145B  0008               	return
 18463                           
 18464                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18465  145C  3001               	movlw	1
 18466  145D  07AF               	addwf	(_Buz1^(0+128)+1),f
 18467  145E  3000               	movlw	0
 18468  145F  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18469                           
 18470                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18471  1460  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18472  1461  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18473  1462  1D03               	skipz
 18474  1463  2C66               	goto	u7785
 18475  1464  0834               	movf	(_Buz1^(0+128)+6),w
 18476  1465  022F               	subwf	(_Buz1^(0+128)+1),w
 18477  1466                     u7785:	
 18478  1466  1C03               	skipc
 18479  1467  0008               	return
 18480                           
 18481                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18482  1468  01AF               	clrf	(_Buz1^(0+128)+1)
 18483  1469  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18484                           
 18485                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18486  146A  12AE               	bcf	_Buz1^(0+128),5
 18487  146B  0020               	movlb	0	; select bank0
 18488  146C  1D8D               	btfss	13,3	;volatile
 18489  146D  2C70               	goto	l7903
 18490  146E  0021               	movlb	1	; select bank1
 18491  146F  16AE               	bsf	_Buz1^(0+128),5
 18492  1470                     l7903:	
 18493                           
 18494                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18495  1470  0021               	movlb	1	; select bank1
 18496  1471  1AAE               	btfsc	_Buz1^(0+128),5
 18497  1472  2C9C               	goto	l106
 18498                           
 18499                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18500  1473  08B1               	movf	(_Buz1^(0+128)+3),f
 18501  1474  1D03               	skipz
 18502  1475  2C98               	goto	l107
 18503                           
 18504                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18505  1476  1DAE               	btfss	_Buz1^(0+128),3
 18506  1477  2C86               	goto	l108
 18507                           
 18508                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18509  1478  11AE               	bcf	_Buz1^(0+128),3
 18510                           
 18511                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18512  1479  0832               	movf	(_Buz1^(0+128)+4),w
 18513  147A  0020               	movlb	0	; select bank0
 18514  147B  00A0               	movwf	??_Buzzer_Main
 18515  147C  0820               	movf	??_Buzzer_Main,w
 18516  147D  0021               	movlb	1	; select bank1
 18517  147E  00B1               	movwf	(_Buz1^(0+128)+3)
 18518                           
 18519                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18520  147F  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18521  1480  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18522  1481  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18523  1482  0836               	movf	(_Buz1^(0+128)+8),w
 18524  1483  01B4               	clrf	(_Buz1^(0+128)+6)
 18525  1484  07B4               	addwf	(_Buz1^(0+128)+6),f
 18526                           
 18527                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18528  1485  0008               	return
 18529  1486                     l108:	
 18530  1486  1E2E               	btfss	_Buz1^(0+128),4
 18531  1487  2C96               	goto	l110
 18532                           
 18533                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18534  1488  122E               	bcf	_Buz1^(0+128),4
 18535                           
 18536                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18537  1489  0833               	movf	(_Buz1^(0+128)+5),w
 18538  148A  0020               	movlb	0	; select bank0
 18539  148B  00A0               	movwf	??_Buzzer_Main
 18540  148C  0820               	movf	??_Buzzer_Main,w
 18541  148D  0021               	movlb	1	; select bank1
 18542  148E  00B1               	movwf	(_Buz1^(0+128)+3)
 18543                           
 18544                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18545  148F  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18546  1490  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18547  1491  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18548  1492  0838               	movf	(_Buz1^(0+128)+10),w
 18549  1493  01B4               	clrf	(_Buz1^(0+128)+6)
 18550  1494  07B4               	addwf	(_Buz1^(0+128)+6),f
 18551                           
 18552                           ;Buzzer_B1.c: 62: } else {
 18553  1495  0008               	return
 18554  1496                     l110:	
 18555                           
 18556                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18557  1496  10AE               	bcf	_Buz1^(0+128),1
 18558                           
 18559                           ;Buzzer_B1.c: 64: }
 18560                           ;Buzzer_B1.c: 65: } else {
 18561  1497  0008               	return
 18562  1498                     l107:	
 18563                           
 18564                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18565  1498  16AE               	bsf	_Buz1^(0+128),5
 18566                           
 18567                           ;Buzzer_B1.c: 68: RB3 = 1;
 18568  1499  0020               	movlb	0	; select bank0
 18569  149A  158D               	bsf	13,3	;volatile
 18570                           
 18571                           ;Buzzer_B1.c: 69: }
 18572                           ;Buzzer_B1.c: 70: } else {
 18573  149B  0008               	return
 18574  149C                     l106:	
 18575                           
 18576                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18577  149C  12AE               	bcf	_Buz1^(0+128),5
 18578                           
 18579                           ;Buzzer_B1.c: 73: RB3 = 0;
 18580  149D  0020               	movlb	0	; select bank0
 18581  149E  118D               	bcf	13,3	;volatile
 18582                           
 18583                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18584  149F  3001               	movlw	1
 18585  14A0  0021               	movlb	1	; select bank1
 18586  14A1  02B1               	subwf	(_Buz1^(0+128)+3),f
 18587  14A2  0008               	return
 18588  14A3                     __end_of_Buzzer_Main:	
 18589                           
 18590                           	psect	text128
 18591  1A83                     __ptext128:	
 18592 ;; *************** function _Buzzer_Initialization *****************
 18593 ;; Defined at:
 18594 ;;		line 11 in file "../src/Buzzer_B1.c"
 18595 ;; Parameters:    Size  Location     Type
 18596 ;;		None
 18597 ;; Auto vars:     Size  Location     Type
 18598 ;;		None
 18599 ;; Return value:  Size  Location     Type
 18600 ;;		None               void
 18601 ;; Registers used:
 18602 ;;		None
 18603 ;; Tracked objects:
 18604 ;;		On entry : 0/0
 18605 ;;		On exit  : 0/0
 18606 ;;		Unchanged: 0/0
 18607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18612 ;;Total ram usage:        0 bytes
 18613 ;; Hardware stack levels used:    1
 18614 ;; Hardware stack levels required when called:    5
 18615 ;; This function calls:
 18616 ;;		Nothing
 18617 ;; This function is called by:
 18618 ;;		_main
 18619 ;; This function uses a non-reentrant model
 18620 ;;
 18621                           
 18622                           
 18623                           ;psect for function _Buzzer_Initialization
 18624  1A83                     _Buzzer_Initialization:	
 18625                           
 18626                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18627                           
 18628                           ;incstack = 0
 18629                           ; Regs used in _Buzzer_Initialization: []
 18630  1A83  0021               	movlb	1	; select bank1
 18631  1A84  142E               	bsf	_Buz1^(0+128),0
 18632  1A85  0008               	return
 18633  1A86                     __end_of_Buzzer_Initialization:	
 18634                           
 18635                           	psect	intentry
 18636  0004                     __pintentry:	
 18637 ;; *************** function _ISR *****************
 18638 ;; Defined at:
 18639 ;;		line 107 in file "../src/MCU_B1.c"
 18640 ;; Parameters:    Size  Location     Type
 18641 ;;		None
 18642 ;; Auto vars:     Size  Location     Type
 18643 ;;		None
 18644 ;; Return value:  Size  Location     Type
 18645 ;;		None               void
 18646 ;; Registers used:
 18647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18648 ;; Tracked objects:
 18649 ;;		On entry : 0/0
 18650 ;;		On exit  : 0/0
 18651 ;;		Unchanged: 0/0
 18652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18655 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18656 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18657 ;;Total ram usage:        1 bytes
 18658 ;; Hardware stack levels used:    1
 18659 ;; Hardware stack levels required when called:    4
 18660 ;; This function calls:
 18661 ;;		_IOC_ISR
 18662 ;;		_TMR1_ISR
 18663 ;; This function is called by:
 18664 ;;		Interrupt level 1
 18665 ;; This function uses a non-reentrant model
 18666 ;;
 18667                           
 18668  0004                     _ISR:	
 18669                           
 18670                           ;incstack = 0
 18671                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18672  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18673  0005  3180               	pagesel	$
 18674  0006  0020               	movlb	0	; select bank0
 18675  0007  087F               	movf	127,w
 18676  0008  00F7               	movwf	??_ISR
 18677                           
 18678                           ;MCU_B1.c: 109: IOC_ISR();
 18679  0009  319B  238C  3180   	fcall	_IOC_ISR
 18680                           
 18681                           ;MCU_B1.c: 111: ;;
 18682                           ;MCU_B1.c: 113: TMR1_ISR();
 18683  000C  319F  27D7         	fcall	_TMR1_ISR
 18684  000E  0877               	movf	??_ISR,w
 18685  000F  0020               	movlb	0	; select bank0
 18686  0010  00FF               	movwf	127
 18687  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18688  0012  0009               	retfie
 18689  0013                     __end_of_ISR:	
 18690                           
 18691                           	psect	text130
 18692  1FD7                     __ptext130:	
 18693 ;; *************** function _TMR1_ISR *****************
 18694 ;; Defined at:
 18695 ;;		line 209 in file "../src/MCU_B1.c"
 18696 ;; Parameters:    Size  Location     Type
 18697 ;;		None
 18698 ;; Auto vars:     Size  Location     Type
 18699 ;;		None
 18700 ;; Return value:  Size  Location     Type
 18701 ;;		None               void
 18702 ;; Registers used:
 18703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18704 ;; Tracked objects:
 18705 ;;		On entry : 0/0
 18706 ;;		On exit  : 0/0
 18707 ;;		Unchanged: 0/0
 18708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;Total ram usage:        0 bytes
 18714 ;; Hardware stack levels used:    1
 18715 ;; Hardware stack levels required when called:    2
 18716 ;; This function calls:
 18717 ;;		_setDimmerLights_IntrControl
 18718 ;; This function is called by:
 18719 ;;		_ISR
 18720 ;; This function uses a non-reentrant model
 18721 ;;
 18722                           
 18723                           
 18724                           ;psect for function _TMR1_ISR
 18725  1FD7                     _TMR1_ISR:	
 18726                           
 18727                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18728                           
 18729                           ;incstack = 0
 18730                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18731  1FD7  0021               	movlb	1	; select bank1
 18732  1FD8  1C11               	btfss	17,0	;volatile
 18733  1FD9  0008               	return
 18734  1FDA  0020               	movlb	0	; select bank0
 18735  1FDB  1C11               	btfss	17,0	;volatile
 18736  1FDC  0008               	return
 18737                           
 18738                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18739  1FDD  30FA               	movlw	250
 18740  1FDE  0097               	movwf	23	;volatile
 18741                           
 18742                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18743  1FDF  3038               	movlw	56
 18744  1FE0  0096               	movwf	22	;volatile
 18745                           
 18746                           ;MCU_B1.c: 214: TMR1IF = 0;
 18747  1FE1  1011               	bcf	17,0	;volatile
 18748                           
 18749                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18750  1FE2  3001               	movlw	1
 18751  1FE3  3183  2337  319F   	fcall	_setDimmerLights_IntrControl
 18752                           
 18753                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18754  1FE6  3002               	movlw	2
 18755  1FE7  3183  2337  319F   	fcall	_setDimmerLights_IntrControl
 18756                           
 18757                           ;MCU_B1.c: 234: Timer1.Count++;
 18758  1FEA  3001               	movlw	1
 18759  1FEB  0022               	movlb	2	; select bank2
 18760  1FEC  07A1               	addwf	(_Timer1^(0+256)+1),f
 18761  1FED  3000               	movlw	0
 18762  1FEE  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18763                           
 18764                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
 18765  1FEF  3001               	movlw	1
 18766  1FF0  3E20               	addlw	_Timer1& (0+255)
 18767  1FF1  0086               	movwf	6
 18768  1FF2  3001               	movlw	1	; select bank2/3
 18769  1FF3  0087               	movwf	7
 18770  1FF4  3F40               	moviw [0]fsr1
 18771  1FF5  3A64               	xorlw	100
 18772  1FF6  1D03               	skipz
 18773  1FF7  2FFA               	goto	u794_25
 18774  1FF8  3F41               	moviw [1]fsr1
 18775  1FF9  3A00               	xorlw	0
 18776  1FFA                     u794_25:	
 18777  1FFA  1D03               	skipz
 18778  1FFB  0008               	return
 18779                           
 18780                           ;MCU_B1.c: 236: Timer1.Count = 0;
 18781  1FFC  01A1               	clrf	(_Timer1^(0+256)+1)
 18782  1FFD  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18783                           
 18784                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
 18785  1FFE  1420               	bsf	_Timer1^(0+256),0
 18786  1FFF  0008               	return
 18787  2000                     __end_of_TMR1_ISR:	
 18788                           
 18789                           	psect	text131
 18790  0337                     __ptext131:	
 18791 ;; *************** function _setDimmerLights_IntrControl *****************
 18792 ;; Defined at:
 18793 ;;		line 94 in file "../src/Dimmer_B1.c"
 18794 ;; Parameters:    Size  Location     Type
 18795 ;;  lights          1    wreg     unsigned char 
 18796 ;; Auto vars:     Size  Location     Type
 18797 ;;  lights          1    6[COMMON] unsigned char 
 18798 ;; Return value:  Size  Location     Type
 18799 ;;		None               void
 18800 ;; Registers used:
 18801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18802 ;; Tracked objects:
 18803 ;;		On entry : 0/0
 18804 ;;		On exit  : 0/0
 18805 ;;		Unchanged: 0/0
 18806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18808 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18809 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18810 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18811 ;;Total ram usage:        5 bytes
 18812 ;; Hardware stack levels used:    1
 18813 ;; Hardware stack levels required when called:    1
 18814 ;; This function calls:
 18815 ;;		_DimmerIntrPointSelect
 18816 ;; This function is called by:
 18817 ;;		_TMR1_ISR
 18818 ;; This function uses a non-reentrant model
 18819 ;;
 18820                           
 18821                           
 18822                           ;psect for function _setDimmerLights_IntrControl
 18823  0337                     _setDimmerLights_IntrControl:	
 18824                           
 18825                           ;incstack = 0
 18826                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18827                           ;setDimmerLights_IntrControl@lights stored from wreg
 18828  0337  00F6               	movwf	setDimmerLights_IntrControl@lights
 18829                           
 18830                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 18831  0338  0876               	movf	setDimmerLights_IntrControl@lights,w
 18832  0339  319B  23FE  3183   	fcall	_DimmerIntrPointSelect
 18833                           
 18834                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 18835  033C  0A79               	incf	_DimmerLightsIntr,w
 18836  033D  0086               	movwf	6
 18837  033E  3001               	movlw	1	; select bank2/3
 18838  033F  0087               	movwf	7
 18839  0340  1C01               	btfss	1,0
 18840  0341  2B96               	goto	i1l7321
 18841                           
 18842                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 18843  0342  3001               	movlw	1
 18844  0343  00F2               	movwf	??_setDimmerLights_IntrControl
 18845  0344  0879               	movf	_DimmerLightsIntr,w
 18846  0345  3E03               	addlw	3
 18847  0346  0086               	movwf	6
 18848  0347  3001               	movlw	1	; select bank2/3
 18849  0348  0087               	movwf	7
 18850  0349  0872               	movf	??_setDimmerLights_IntrControl,w
 18851  034A  0781               	addwf	1,f
 18852                           
 18853                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 18854                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18855  034B  0021               	movlb	1	; select bank1
 18856  034C  0848               	movf	(_Dimmer^(0+128)+2),w	;volatile
 18857  034D  00F2               	movwf	??_setDimmerLights_IntrControl
 18858  034E  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18859  034F  09F2               	comf	??_setDimmerLights_IntrControl,f
 18860  0350  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18861  0351  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18862  0352  1903               	skipnz
 18863  0353  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18864  0354  0879               	movf	_DimmerLightsIntr,w
 18865  0355  3E04               	addlw	4
 18866  0356  0086               	movwf	6
 18867  0357  3001               	movlw	1	; select bank2/3
 18868  0358  0087               	movwf	7
 18869  0359  0801               	movf	1,w
 18870  035A  0772               	addwf	??_setDimmerLights_IntrControl,w
 18871  035B  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18872  035C  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18873  035D  1803               	skipnc
 18874  035E  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18875  035F  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18876  0360  0879               	movf	_DimmerLightsIntr,w
 18877  0361  3E03               	addlw	3
 18878  0362  0086               	movwf	6
 18879  0363  3001               	movlw	1	; select bank2/3
 18880  0364  0087               	movwf	7
 18881  0365  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18882  0366  3A80               	xorlw	128
 18883  0367  3C80               	sublw	128
 18884  0368  1D03               	skipz
 18885  0369  2B6C               	goto	u671_25
 18886  036A  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18887  036B  0201               	subwf	1,w
 18888  036C                     u671_25:	
 18889  036C  1C03               	skipc
 18890  036D  0008               	return
 18891                           
 18892                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 18893  036E  0879               	movf	_DimmerLightsIntr,w
 18894  036F  3E03               	addlw	3
 18895  0370  0086               	movwf	6
 18896  0371  3001               	movlw	1	; select bank2/3
 18897  0372  0087               	movwf	7
 18898  0373  0181               	clrf	1
 18899                           
 18900                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 18901  0374  0A79               	incf	_DimmerLightsIntr,w
 18902  0375  0086               	movwf	6
 18903  0376  3001               	movlw	1	; select bank2/3
 18904  0377  0087               	movwf	7
 18905  0378  1001               	bcf	1,0
 18906                           
 18907                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 18908  0379  0A79               	incf	_DimmerLightsIntr,w
 18909  037A  0086               	movwf	6
 18910  037B  3001               	movlw	1	; select bank2/3
 18911  037C  0087               	movwf	7
 18912  037D  1581               	bsf	1,3
 18913                           
 18914                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 18915  037E  0879               	movf	_DimmerLightsIntr,w
 18916  037F  0086               	movwf	6
 18917  0380  3001               	movlw	1	; select bank2/3
 18918  0381  0087               	movwf	7
 18919  0382  1C01               	btfss	1,0
 18920  0383  0008               	return
 18921                           
 18922                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 18923  0384  0879               	movf	_DimmerLightsIntr,w
 18924  0385  0086               	movwf	6
 18925  0386  3001               	movlw	1	; select bank2/3
 18926  0387  0087               	movwf	7
 18927  0388  1001               	bcf	1,0
 18928                           
 18929                           ;Dimmer_B1.c: 243: if (lights == 1) {
 18930  0389  0876               	movf	setDimmerLights_IntrControl@lights,w
 18931  038A  3A01               	xorlw	1
 18932  038B  1D03               	skipz
 18933  038C  2B8F               	goto	i1l7317
 18934                           
 18935                           ;Dimmer_B1.c: 244: RA7 = 0;
 18936  038D  0020               	movlb	0	; select bank0
 18937  038E  138C               	bcf	12,7	;volatile
 18938  038F                     i1l7317:	
 18939                           
 18940                           ;Dimmer_B1.c: 246: }
 18941                           ;Dimmer_B1.c: 249: if (lights == 2) {
 18942  038F  0876               	movf	setDimmerLights_IntrControl@lights,w
 18943  0390  3A02               	xorlw	2
 18944  0391  1D03               	skipz
 18945  0392  0008               	return
 18946                           
 18947                           ;Dimmer_B1.c: 250: RB4 = 0;
 18948  0393  0020               	movlb	0	; select bank0
 18949  0394  120D               	bcf	13,4	;volatile
 18950                           
 18951                           ;Dimmer_B1.c: 251: }
 18952                           ;Dimmer_B1.c: 253: }
 18953                           ;Dimmer_B1.c: 254: }
 18954                           ;Dimmer_B1.c: 255: } else {
 18955  0395  0008               	return
 18956  0396                     i1l7321:	
 18957                           
 18958                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 18959  0396  0A79               	incf	_DimmerLightsIntr,w
 18960  0397  0086               	movwf	6
 18961  0398  3001               	movlw	1	; select bank2/3
 18962  0399  0087               	movwf	7
 18963  039A  1D81               	btfss	1,3
 18964  039B  2C5D               	goto	i1l746
 18965                           
 18966                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 18967  039C  0A79               	incf	_DimmerLightsIntr,w
 18968  039D  0086               	movwf	6
 18969  039E  3001               	movlw	1	; select bank2/3
 18970  039F  0087               	movwf	7
 18971  03A0  1181               	bcf	1,3
 18972                           
 18973                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 18974  03A1  0A79               	incf	_DimmerLightsIntr,w
 18975  03A2  0086               	movwf	6
 18976  03A3  3001               	movlw	1	; select bank2/3
 18977  03A4  0087               	movwf	7
 18978  03A5  1E81               	btfss	1,5
 18979  03A6  2C5D               	goto	i1l746
 18980                           
 18981                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 18982  03A7  3001               	movlw	1
 18983  03A8  00F2               	movwf	??_setDimmerLights_IntrControl
 18984  03A9  0879               	movf	_DimmerLightsIntr,w
 18985  03AA  3E05               	addlw	5
 18986  03AB  0086               	movwf	6
 18987  03AC  3001               	movlw	1	; select bank2/3
 18988  03AD  0087               	movwf	7
 18989  03AE  0872               	movf	??_setDimmerLights_IntrControl,w
 18990  03AF  0781               	addwf	1,f
 18991                           
 18992                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18993  03B0  0879               	movf	_DimmerLightsIntr,w
 18994  03B1  3E05               	addlw	5
 18995  03B2  0086               	movwf	6
 18996  03B3  3001               	movlw	1	; select bank2/3
 18997  03B4  0087               	movwf	7
 18998  03B5  0879               	movf	_DimmerLightsIntr,w
 18999  03B6  3E08               	addlw	8
 19000  03B7  0084               	movwf	4
 19001  03B8  3001               	movlw	1	; select bank2/3
 19002  03B9  0085               	movwf	5
 19003  03BA  0800               	movf	0,w
 19004  03BB  0201               	subwf	1,w
 19005  03BC  1C03               	skipc
 19006  03BD  2C5D               	goto	i1l746
 19007                           
 19008                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 19009  03BE  0879               	movf	_DimmerLightsIntr,w
 19010  03BF  3E05               	addlw	5
 19011  03C0  0086               	movwf	6
 19012  03C1  3001               	movlw	1	; select bank2/3
 19013  03C2  0087               	movwf	7
 19014  03C3  0181               	clrf	1
 19015                           
 19016                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 19017  03C4  0A79               	incf	_DimmerLightsIntr,w
 19018  03C5  0086               	movwf	6
 19019  03C6  3001               	movlw	1	; select bank2/3
 19020  03C7  0087               	movwf	7
 19021  03C8  1F01               	btfss	1,6
 19022  03C9  2C10               	goto	i1l7351
 19023                           
 19024                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 19025  03CA  0A79               	incf	_DimmerLightsIntr,w
 19026  03CB  0086               	movwf	6
 19027  03CC  3001               	movlw	1	; select bank2/3
 19028  03CD  0087               	movwf	7
 19029  03CE  1B81               	btfsc	1,7
 19030  03CF  2BF1               	goto	i1l7343
 19031                           
 19032                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(65*0.8))) {
 19033  03D0  0879               	movf	_DimmerLightsIntr,w
 19034  03D1  3E04               	addlw	4
 19035  03D2  0086               	movwf	6
 19036  03D3  3001               	movlw	1	; select bank2/3
 19037  03D4  0087               	movwf	7
 19038  03D5  3034               	movlw	52
 19039  03D6  0201               	subwf	1,w
 19040  03D7  1803               	skipnc
 19041  03D8  2BE2               	goto	i1l7339
 19042                           
 19043                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 19044  03D9  3001               	movlw	1
 19045  03DA  00F2               	movwf	??_setDimmerLights_IntrControl
 19046  03DB  0879               	movf	_DimmerLightsIntr,w
 19047  03DC  3E04               	addlw	4
 19048  03DD  0086               	movwf	6
 19049  03DE  3001               	movlw	1	; select bank2/3
 19050  03DF  0087               	movwf	7
 19051  03E0  0872               	movf	??_setDimmerLights_IntrControl,w
 19052  03E1  0781               	addwf	1,f
 19053  03E2                     i1l7339:	
 19054                           
 19055                           ;Dimmer_B1.c: 266: }
 19056                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(65*0.8))) {
 19057  03E2  0879               	movf	_DimmerLightsIntr,w
 19058  03E3  3E04               	addlw	4
 19059  03E4  0086               	movwf	6
 19060  03E5  3001               	movlw	1	; select bank2/3
 19061  03E6  0087               	movwf	7
 19062  03E7  0801               	movf	1,w
 19063  03E8  3A34               	xorlw	52
 19064  03E9  1D03               	skipz
 19065  03EA  2C5D               	goto	i1l746
 19066                           
 19067                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 19068  03EB  0A79               	incf	_DimmerLightsIntr,w
 19069  03EC  0086               	movwf	6
 19070  03ED  3001               	movlw	1	; select bank2/3
 19071  03EE  0087               	movwf	7
 19072  03EF  1781               	bsf	1,7
 19073                           
 19074                           ;Dimmer_B1.c: 269: }
 19075                           ;Dimmer_B1.c: 270: } else {
 19076  03F0  2C5D               	goto	i1l746
 19077  03F1                     i1l7343:	
 19078                           
 19079                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 19080  03F1  0879               	movf	_DimmerLightsIntr,w
 19081  03F2  3E04               	addlw	4
 19082  03F3  0086               	movwf	6
 19083  03F4  3001               	movlw	1	; select bank2/3
 19084  03F5  0087               	movwf	7
 19085  03F6  300D               	movlw	13
 19086  03F7  0201               	subwf	1,w
 19087  03F8  1C03               	skipc
 19088  03F9  2C01               	goto	i1l7347
 19089                           
 19090                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 19091  03FA  0879               	movf	_DimmerLightsIntr,w
 19092  03FB  3E04               	addlw	4
 19093  03FC  0086               	movwf	6
 19094  03FD  3001               	movlw	1	; select bank2/3
 19095  03FE  0087               	movwf	7
 19096  03FF  3001               	movlw	1
 19097  0400  0281               	subwf	1,f
 19098  0401                     i1l7347:	
 19099                           
 19100                           ;Dimmer_B1.c: 273: }
 19101                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 19102  0401  0879               	movf	_DimmerLightsIntr,w
 19103  0402  3E04               	addlw	4
 19104  0403  0086               	movwf	6
 19105  0404  3001               	movlw	1	; select bank2/3
 19106  0405  0087               	movwf	7
 19107  0406  0801               	movf	1,w
 19108  0407  3A0C               	xorlw	12
 19109  0408  1D03               	skipz
 19110  0409  2C5D               	goto	i1l746
 19111                           
 19112                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 19113  040A  0A79               	incf	_DimmerLightsIntr,w
 19114  040B  0086               	movwf	6
 19115  040C  3001               	movlw	1	; select bank2/3
 19116  040D  0087               	movwf	7
 19117  040E  1381               	bcf	1,7
 19118                           
 19119                           ;Dimmer_B1.c: 276: }
 19120                           ;Dimmer_B1.c: 277: }
 19121                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 19122  040F  2C5D               	goto	i1l746
 19123  0410                     i1l7351:	
 19124  0410  0879               	movf	_DimmerLightsIntr,w
 19125  0411  3E02               	addlw	2
 19126  0412  0086               	movwf	6
 19127  0413  3001               	movlw	1	; select bank2/3
 19128  0414  0087               	movwf	7
 19129  0415  1C01               	btfss	1,0
 19130  0416  2C5D               	goto	i1l746
 19131                           
 19132                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19133  0417  0879               	movf	_DimmerLightsIntr,w
 19134  0418  3E04               	addlw	4
 19135  0419  0086               	movwf	6
 19136  041A  3001               	movlw	1	; select bank2/3
 19137  041B  0087               	movwf	7
 19138  041C  0879               	movf	_DimmerLightsIntr,w
 19139  041D  3E06               	addlw	6
 19140  041E  0084               	movwf	4
 19141  041F  3001               	movlw	1	; select bank2/3
 19142  0420  0085               	movwf	5
 19143  0421  0800               	movf	0,w
 19144  0422  0201               	subwf	1,w
 19145  0423  1803               	skipnc
 19146  0424  2C2F               	goto	i1l7357
 19147                           
 19148                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 19149  0425  3001               	movlw	1
 19150  0426  00F2               	movwf	??_setDimmerLights_IntrControl
 19151  0427  0879               	movf	_DimmerLightsIntr,w
 19152  0428  3E04               	addlw	4
 19153  0429  0086               	movwf	6
 19154  042A  3001               	movlw	1	; select bank2/3
 19155  042B  0087               	movwf	7
 19156  042C  0872               	movf	??_setDimmerLights_IntrControl,w
 19157  042D  0781               	addwf	1,f
 19158                           
 19159                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19160  042E  2C44               	goto	i1l7361
 19161  042F                     i1l7357:	
 19162  042F  0879               	movf	_DimmerLightsIntr,w
 19163  0430  3E06               	addlw	6
 19164  0431  0086               	movwf	6
 19165  0432  3001               	movlw	1	; select bank2/3
 19166  0433  0087               	movwf	7
 19167  0434  0879               	movf	_DimmerLightsIntr,w
 19168  0435  3E04               	addlw	4
 19169  0436  0084               	movwf	4
 19170  0437  3001               	movlw	1	; select bank2/3
 19171  0438  0085               	movwf	5
 19172  0439  0800               	movf	0,w
 19173  043A  0201               	subwf	1,w
 19174  043B  1803               	skipnc
 19175  043C  2C44               	goto	i1l7361
 19176                           
 19177                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 19178  043D  0879               	movf	_DimmerLightsIntr,w
 19179  043E  3E04               	addlw	4
 19180  043F  0086               	movwf	6
 19181  0440  3001               	movlw	1	; select bank2/3
 19182  0441  0087               	movwf	7
 19183  0442  3001               	movlw	1
 19184  0443  0281               	subwf	1,f
 19185  0444                     i1l7361:	
 19186                           
 19187                           ;Dimmer_B1.c: 283: }
 19188                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19189  0444  0879               	movf	_DimmerLightsIntr,w
 19190  0445  3E06               	addlw	6
 19191  0446  0086               	movwf	6
 19192  0447  3001               	movlw	1	; select bank2/3
 19193  0448  0087               	movwf	7
 19194  0449  0879               	movf	_DimmerLightsIntr,w
 19195  044A  3E04               	addlw	4
 19196  044B  0084               	movwf	4
 19197  044C  3001               	movlw	1	; select bank2/3
 19198  044D  0085               	movwf	5
 19199  044E  0800               	movf	0,w
 19200  044F  0601               	xorwf	1,w
 19201  0450  1D03               	skipz
 19202  0451  2C5D               	goto	i1l746
 19203                           
 19204                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 19205  0452  0879               	movf	_DimmerLightsIntr,w
 19206  0453  3E02               	addlw	2
 19207  0454  0086               	movwf	6
 19208  0455  3001               	movlw	1	; select bank2/3
 19209  0456  0087               	movwf	7
 19210  0457  1001               	bcf	1,0
 19211                           
 19212                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 19213  0458  0A79               	incf	_DimmerLightsIntr,w
 19214  0459  0086               	movwf	6
 19215  045A  3001               	movlw	1	; select bank2/3
 19216  045B  0087               	movwf	7
 19217  045C  1281               	bcf	1,5
 19218  045D                     i1l746:	
 19219                           
 19220                           ;Dimmer_B1.c: 287: }
 19221                           ;Dimmer_B1.c: 288: }
 19222                           ;Dimmer_B1.c: 289: }
 19223                           ;Dimmer_B1.c: 290: }
 19224                           ;Dimmer_B1.c: 291: }
 19225                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 19226  045D  0A79               	incf	_DimmerLightsIntr,w
 19227  045E  0086               	movwf	6
 19228  045F  3001               	movlw	1	; select bank2/3
 19229  0460  0087               	movwf	7
 19230  0461  1C81               	btfss	1,1
 19231  0462  0008               	return
 19232                           
 19233                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 19234  0463  3001               	movlw	1
 19235  0464  00F2               	movwf	??_setDimmerLights_IntrControl
 19236  0465  0879               	movf	_DimmerLightsIntr,w
 19237  0466  3E0D               	addlw	13
 19238  0467  0086               	movwf	6
 19239  0468  3001               	movlw	1	; select bank2/3
 19240  0469  0087               	movwf	7
 19241  046A  0872               	movf	??_setDimmerLights_IntrControl,w
 19242  046B  0781               	addwf	1,f
 19243                           
 19244                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 19245  046C  0879               	movf	_DimmerLightsIntr,w
 19246  046D  3E0D               	addlw	13
 19247  046E  0086               	movwf	6
 19248  046F  3001               	movlw	1	; select bank2/3
 19249  0470  0087               	movwf	7
 19250  0471  0801               	movf	1,w
 19251  0472  3A05               	xorlw	5
 19252  0473  1D03               	skipz
 19253  0474  0008               	return
 19254                           
 19255                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 19256  0475  0879               	movf	_DimmerLightsIntr,w
 19257  0476  3E0D               	addlw	13
 19258  0477  0086               	movwf	6
 19259  0478  3001               	movlw	1	; select bank2/3
 19260  0479  0087               	movwf	7
 19261  047A  0181               	clrf	1
 19262                           
 19263                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 19264  047B  0A79               	incf	_DimmerLightsIntr,w
 19265  047C  0086               	movwf	6
 19266  047D  3001               	movlw	1	; select bank2/3
 19267  047E  0087               	movwf	7
 19268  047F  1081               	bcf	1,1
 19269  0480  0008               	return
 19270  0481                     __end_of_setDimmerLights_IntrControl:	
 19271                           
 19272                           	psect	text132
 19273  1BFE                     __ptext132:	
 19274 ;; *************** function _DimmerIntrPointSelect *****************
 19275 ;; Defined at:
 19276 ;;		line 72 in file "../src/Dimmer_B1.c"
 19277 ;; Parameters:    Size  Location     Type
 19278 ;;  lights          1    wreg     unsigned char 
 19279 ;; Auto vars:     Size  Location     Type
 19280 ;;  lights          1    1[COMMON] unsigned char 
 19281 ;; Return value:  Size  Location     Type
 19282 ;;		None               void
 19283 ;; Registers used:
 19284 ;;		wreg
 19285 ;; Tracked objects:
 19286 ;;		On entry : 0/0
 19287 ;;		On exit  : 0/0
 19288 ;;		Unchanged: 0/0
 19289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19294 ;;Total ram usage:        2 bytes
 19295 ;; Hardware stack levels used:    1
 19296 ;; This function calls:
 19297 ;;		Nothing
 19298 ;; This function is called by:
 19299 ;;		_setDimmerLights_IntrControl
 19300 ;; This function uses a non-reentrant model
 19301 ;;
 19302                           
 19303                           
 19304                           ;psect for function _DimmerIntrPointSelect
 19305  1BFE                     _DimmerIntrPointSelect:	
 19306                           
 19307                           ;incstack = 0
 19308                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19309                           ;DimmerIntrPointSelect@lights stored from wreg
 19310  1BFE  00F1               	movwf	DimmerIntrPointSelect@lights
 19311                           
 19312                           ;Dimmer_B1.c: 74: if (lights == 1) {
 19313  1BFF  0871               	movf	DimmerIntrPointSelect@lights,w
 19314  1C00  3A01               	xorlw	1
 19315  1C01  1D03               	skipz
 19316  1C02  2C07               	goto	i1l735
 19317                           
 19318                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 19319  1C03  3053               	movlw	_DimmerLights1& (0+255)
 19320  1C04  00F0               	movwf	??_DimmerIntrPointSelect
 19321  1C05  0870               	movf	??_DimmerIntrPointSelect,w
 19322  1C06  00F9               	movwf	_DimmerLightsIntr
 19323  1C07                     i1l735:	
 19324                           
 19325                           ;Dimmer_B1.c: 76: }
 19326                           ;Dimmer_B1.c: 79: if (lights == 2) {
 19327  1C07  0871               	movf	DimmerIntrPointSelect@lights,w
 19328  1C08  3A02               	xorlw	2
 19329  1C09  1D03               	skipz
 19330  1C0A  0008               	return
 19331                           
 19332                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 19333  1C0B  30BE               	movlw	_DimmerLights2& (0+255)
 19334  1C0C  00F0               	movwf	??_DimmerIntrPointSelect
 19335  1C0D  0870               	movf	??_DimmerIntrPointSelect,w
 19336  1C0E  00F9               	movwf	_DimmerLightsIntr
 19337  1C0F  0008               	return
 19338  1C10                     __end_of_DimmerIntrPointSelect:	
 19339                           
 19340                           	psect	text133
 19341  1B8C                     __ptext133:	
 19342 ;; *************** function _IOC_ISR *****************
 19343 ;; Defined at:
 19344 ;;		line 400 in file "../src/MCU_B1.c"
 19345 ;; Parameters:    Size  Location     Type
 19346 ;;		None
 19347 ;; Auto vars:     Size  Location     Type
 19348 ;;		None
 19349 ;; Return value:  Size  Location     Type
 19350 ;;		None               void
 19351 ;; Registers used:
 19352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19353 ;; Tracked objects:
 19354 ;;		On entry : 0/0
 19355 ;;		On exit  : 0/0
 19356 ;;		Unchanged: 0/0
 19357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19362 ;;Total ram usage:        0 bytes
 19363 ;; Hardware stack levels used:    1
 19364 ;; Hardware stack levels required when called:    3
 19365 ;; This function calls:
 19366 ;;		_setDimmerReClock
 19367 ;; This function is called by:
 19368 ;;		_ISR
 19369 ;; This function uses a non-reentrant model
 19370 ;;
 19371                           
 19372                           
 19373                           ;psect for function _IOC_ISR
 19374  1B8C                     _IOC_ISR:	
 19375                           
 19376                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19377                           
 19378                           ;incstack = 0
 19379                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19380  1B8C  1D8B               	btfss	11,3	;volatile
 19381  1B8D  0008               	return
 19382  1B8E  1C0B               	btfss	11,0	;volatile
 19383  1B8F  0008               	return
 19384  1B90  0027               	movlb	7	; select bank7
 19385  1B91  1D16               	btfss	22,2	;volatile
 19386  1B92  0008               	return
 19387                           
 19388                           ;MCU_B1.c: 402: IOCBF2 = 0;
 19389  1B93  1116               	bcf	22,2	;volatile
 19390                           
 19391                           ;MCU_B1.c: 403: IOCIF = 0;
 19392  1B94  100B               	bcf	11,0	;volatile
 19393                           
 19394                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 19395  1B95  0021               	movlb	1	; select bank1
 19396  1B96  1C20               	btfss	_myMain^(0+128),0
 19397  1B97  0008               	return
 19398                           
 19399                           ;MCU_B1.c: 407: setDimmerReClock();
 19400  1B98  319A  22C5         	fcall	_setDimmerReClock
 19401  1B9A  0008               	return
 19402  1B9B                     __end_of_IOC_ISR:	
 19403                           
 19404                           	psect	text134
 19405  1AC5                     __ptext134:	
 19406 ;; *************** function _setDimmerReClock *****************
 19407 ;; Defined at:
 19408 ;;		line 243 in file "../src/MCU_B1.c"
 19409 ;; Parameters:    Size  Location     Type
 19410 ;;		None
 19411 ;; Auto vars:     Size  Location     Type
 19412 ;;		None
 19413 ;; Return value:  Size  Location     Type
 19414 ;;		None               void
 19415 ;; Registers used:
 19416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19417 ;; Tracked objects:
 19418 ;;		On entry : 0/0
 19419 ;;		On exit  : 0/0
 19420 ;;		Unchanged: 0/0
 19421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19426 ;;Total ram usage:        0 bytes
 19427 ;; Hardware stack levels used:    1
 19428 ;; Hardware stack levels required when called:    2
 19429 ;; This function calls:
 19430 ;;		_setDimmerLights_IntrIOC_GO
 19431 ;; This function is called by:
 19432 ;;		_IOC_ISR
 19433 ;; This function uses a non-reentrant model
 19434 ;;
 19435                           
 19436                           
 19437                           ;psect for function _setDimmerReClock
 19438  1AC5                     _setDimmerReClock:	
 19439                           
 19440                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 19441                           
 19442                           ;incstack = 0
 19443                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19444  1AC5  3001               	movlw	1
 19445  1AC6  3192  22A5  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19446                           
 19447                           ;MCU_B1.c: 252: setDimmerLights_IntrIOC_GO(2);
 19448  1AC9  3002               	movlw	2
 19449  1ACA  3192  22A5         	fcall	_setDimmerLights_IntrIOC_GO
 19450  1ACC  0008               	return
 19451  1ACD                     __end_of_setDimmerReClock:	
 19452                           
 19453                           	psect	text135
 19454  12A5                     __ptext135:	
 19455 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19456 ;; Defined at:
 19457 ;;		line 28 in file "../src/Dimmer_B1.c"
 19458 ;; Parameters:    Size  Location     Type
 19459 ;;  lights          1    wreg     unsigned char 
 19460 ;; Auto vars:     Size  Location     Type
 19461 ;;  lights          1    2[COMMON] unsigned char 
 19462 ;; Return value:  Size  Location     Type
 19463 ;;		None               void
 19464 ;; Registers used:
 19465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19466 ;; Tracked objects:
 19467 ;;		On entry : 0/0
 19468 ;;		On exit  : 0/0
 19469 ;;		Unchanged: 0/0
 19470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19475 ;;Total ram usage:        1 bytes
 19476 ;; Hardware stack levels used:    1
 19477 ;; Hardware stack levels required when called:    1
 19478 ;; This function calls:
 19479 ;;		_DimmerIntrIOCPointSelect
 19480 ;; This function is called by:
 19481 ;;		_setDimmerReClock
 19482 ;; This function uses a non-reentrant model
 19483 ;;
 19484                           
 19485                           
 19486                           ;psect for function _setDimmerLights_IntrIOC_GO
 19487  12A5                     _setDimmerLights_IntrIOC_GO:	
 19488                           
 19489                           ;incstack = 0
 19490                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19491                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19492  12A5  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19493                           
 19494                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19495  12A6  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19496  12A7  319C  2492  3192   	fcall	_DimmerIntrIOCPointSelect
 19497                           
 19498                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 19499  12AA  0021               	movlb	1	; select bank1
 19500  12AB  0A4E               	incf	_DimmerLightsIntrIOC^(0+128),w
 19501  12AC  0086               	movwf	6
 19502  12AD  3001               	movlw	1	; select bank2/3
 19503  12AE  0087               	movwf	7
 19504  12AF  1801               	btfsc	1,0
 19505  12B0  0008               	return
 19506  12B1  0A4E               	incf	_DimmerLightsIntrIOC^(0+128),w
 19507  12B2  0086               	movwf	6
 19508  12B3  3001               	movlw	1	; select bank2/3
 19509  12B4  0087               	movwf	7
 19510  12B5  1881               	btfsc	1,1
 19511  12B6  0008               	return
 19512  12B7  0020               	movlb	0	; select bank0
 19513  12B8  190D               	btfsc	13,2	;volatile
 19514  12B9  0008               	return
 19515                           
 19516                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19517  12BA  0021               	movlb	1	; select bank1
 19518  12BB  0A4E               	incf	_DimmerLightsIntrIOC^(0+128),w
 19519  12BC  0086               	movwf	6
 19520  12BD  3001               	movlw	1	; select bank2/3
 19521  12BE  0087               	movwf	7
 19522  12BF  1401               	bsf	1,0
 19523                           
 19524                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19525  12C0  0A4E               	incf	_DimmerLightsIntrIOC^(0+128),w
 19526  12C1  0086               	movwf	6
 19527  12C2  3001               	movlw	1	; select bank2/3
 19528  12C3  0087               	movwf	7
 19529  12C4  1481               	bsf	1,1
 19530                           
 19531                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 19532  12C5  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19533                           
 19534                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19535  12C6  0A4E               	incf	_DimmerLightsIntrIOC^(0+128),w
 19536  12C7  0086               	movwf	6
 19537  12C8  3001               	movlw	1	; select bank2/3
 19538  12C9  0087               	movwf	7
 19539  12CA  1D01               	btfss	1,2
 19540  12CB  0008               	return
 19541                           
 19542                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 19543  12CC  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19544  12CD  0086               	movwf	6
 19545  12CE  3001               	movlw	1	; select bank2/3
 19546  12CF  0087               	movwf	7
 19547  12D0  1401               	bsf	1,0
 19548                           
 19549                           ;Dimmer_B1.c: 53: if (lights == 1) {
 19550  12D1  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19551  12D2  3A01               	xorlw	1
 19552  12D3  1D03               	skipz
 19553  12D4  2AD7               	goto	i1l6897
 19554                           
 19555                           ;Dimmer_B1.c: 54: RA7 = 1;
 19556  12D5  0020               	movlb	0	; select bank0
 19557  12D6  178C               	bsf	12,7	;volatile
 19558  12D7                     i1l6897:	
 19559                           
 19560                           ;Dimmer_B1.c: 56: }
 19561                           ;Dimmer_B1.c: 59: if (lights == 2) {
 19562  12D7  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19563  12D8  3A02               	xorlw	2
 19564  12D9  1D03               	skipz
 19565  12DA  0008               	return
 19566                           
 19567                           ;Dimmer_B1.c: 60: RB4 = 1;
 19568  12DB  0020               	movlb	0	; select bank0
 19569  12DC  160D               	bsf	13,4	;volatile
 19570  12DD  0008               	return
 19571  12DE                     __end_of_setDimmerLights_IntrIOC_GO:	
 19572                           
 19573                           	psect	text136
 19574  1C92                     __ptext136:	
 19575 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19576 ;; Defined at:
 19577 ;;		line 8 in file "../src/Dimmer_B1.c"
 19578 ;; Parameters:    Size  Location     Type
 19579 ;;  lights          1    wreg     unsigned char 
 19580 ;; Auto vars:     Size  Location     Type
 19581 ;;  lights          1    1[COMMON] unsigned char 
 19582 ;; Return value:  Size  Location     Type
 19583 ;;		None               void
 19584 ;; Registers used:
 19585 ;;		wreg
 19586 ;; Tracked objects:
 19587 ;;		On entry : 0/0
 19588 ;;		On exit  : 0/0
 19589 ;;		Unchanged: 0/0
 19590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19594 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19595 ;;Total ram usage:        2 bytes
 19596 ;; Hardware stack levels used:    1
 19597 ;; This function calls:
 19598 ;;		Nothing
 19599 ;; This function is called by:
 19600 ;;		_setDimmerLights_IntrIOC_GO
 19601 ;; This function uses a non-reentrant model
 19602 ;;
 19603                           
 19604                           
 19605                           ;psect for function _DimmerIntrIOCPointSelect
 19606  1C92                     _DimmerIntrIOCPointSelect:	
 19607                           
 19608                           ;incstack = 0
 19609                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19610                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19611  1C92  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19612                           
 19613                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19614  1C93  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19615  1C94  3A01               	xorlw	1
 19616  1C95  1D03               	skipz
 19617  1C96  2C9C               	goto	i1l723
 19618                           
 19619                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19620  1C97  3053               	movlw	_DimmerLights1& (0+255)
 19621  1C98  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19622  1C99  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19623  1C9A  0021               	movlb	1	; select bank1
 19624  1C9B  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19625  1C9C                     i1l723:	
 19626                           
 19627                           ;Dimmer_B1.c: 12: }
 19628                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19629  1C9C  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19630  1C9D  3A02               	xorlw	2
 19631  1C9E  1D03               	skipz
 19632  1C9F  0008               	return
 19633                           
 19634                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19635  1CA0  30BE               	movlw	_DimmerLights2& (0+255)
 19636  1CA1  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19637  1CA2  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19638  1CA3  0021               	movlb	1	; select bank1
 19639  1CA4  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19640  1CA5  0008               	return
 19641  1CA6                     __end_of_DimmerIntrIOCPointSelect:	
 19642  007E                     btemp	set	126	;btemp
 19643  007E                     pic14e$flags	set	126
 19644  007E                     wtemp	set	126
 19645  007E                     wtemp0	set	126
 19646  0080                     wtemp1	set	128
 19647  0082                     wtemp2	set	130
 19648  0084                     wtemp3	set	132
 19649  0086                     wtemp4	set	134
 19650  0088                     wtemp5	set	136
 19651  007F                     wtemp6	set	127
 19652  007E                     ttemp	set	126
 19653  007E                     ttemp0	set	126
 19654  0081                     ttemp1	set	129
 19655  0084                     ttemp2	set	132
 19656  0087                     ttemp3	set	135
 19657  007F                     ttemp4	set	127
 19658  007E                     ltemp	set	126
 19659  007E                     ltemp0	set	126
 19660  0082                     ltemp1	set	130
 19661  0086                     ltemp2	set	134
 19662  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         270
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      79
    BANK2            80      0      80
    BANK3            80      0      75
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_getMain_All_Error_Status
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   78172
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     445
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1449
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    1449
                                             13 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0    9897
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5283
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     400
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4386
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     780
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     780
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   23520
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   23520
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   22737
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1331
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   21222
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    6258
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1663
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   11703
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11480
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11414
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11348
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1227
                                              9 BANK0      7     7      0
                            ___lwdiv
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     868
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     868
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1119
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    9804
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       2     2      0     206
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   21974
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   21561
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1    9615
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   10505
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     348
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0    8846
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     380
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     173
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3246
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     758
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     205
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3349
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3349
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    1974
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1640
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     216
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     216
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     964
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Exception_Main
     _getMain_All_Error_Status
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4B      11       93.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     18D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Dec 10 17:34:02 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 1610                                       l98 1624  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1EFE  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1CCE  
                 __end_of_setDelayOff_GO 08AD                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 1638  
                   _setDimmerLights_Line 1D49                             ___ftadd@sign 004B  
                                    l110 1496                                      l106 149C  
                                    l107 1498                                      l108 1486  
                   _setDimmerLights_SwOn 13D6                                      l255 09A4  
                                    l328 1CB0                                      l329 1CB1  
                                    l372 1F8F                                      l767 1C50  
                                    l778 11C2                                      l866 1CD7  
                                    l867 1CDF                                      _GIE 005F  
                                    _CRC 00CB                                      l998 1E13  
                                    l999 1E1B                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BA                                      _ISR 0004  
                                    _WDT 00C9             getDimmerLights_Status@lights 0022  
                                    _Sw1 01CF                                      _Sw2 01D8  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1CBA  
                  _Buzzer_Initialization 1A83                          __end_of_ADC_Set 1AC5  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0CD6                   _setMain_Exception$6475 0039  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 1F42  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0032  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1B9B  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l1033 1351  
                                   l1301 11FC                                     l2015 1BA0  
                                   l2023 0D97                                     l3001 0954  
                                   l2033 0DED                                     l1315 112C  
                                   l1324 1534                                     l2053 0B63  
                                   l2039 1234                                     l3024 0520  
                                   l2065 13C1                 ?_DimmerLightsPointSelect 0070  
                                   l1460 01C2                                     l1463 0082  
                                   l1464 0192                                     l1465 0190  
                                   l1618 0F48                                     l2371 1D3B  
                        __end_of_IOC_Set 1B65                                     l6001 0E07  
                                   l2387 1F76                                     l2732 1192  
                                   l6021 0E5E                                     l6101 0C68  
                                   l2397 032E                           _Load_Main$3495 002D  
                                   l2727 117B                                     l6007 0E1D  
                                   l2399 0207                                     l2728 1196  
                                   l6201 15A9                                     l6121 0CA6  
                                   l1970 0652                                     l6203 15B5  
                                   l6131 0CBF                                     l6043 0F63  
                                   l1972 05A0                                     l2684 1318  
                                   l6213 15D0                                     l6029 0E77  
                                   l6061 0FB4                                     l1981 060E  
                                   l1973 05A2                                     l1974 05AA  
                                   l6143 1CC5                                     l6135 0CCD  
                                   l6127 0CB3                                     l6119 0C98  
                                   l6217 15D8                                     l6209 15C7  
                                   l6129 0CBC                                     l6073 0FD0  
                                   l6065 0FBC                                     l6049 0F79  
                                   l7121 0D83                                     l1979 05D5  
                                   l7213 143A                                     l6261 0882  
                                   l6501 172A                                     l7053 1114  
                                   l8013 06C8                                     l6077 0FD8  
                                   l6341 140E                                     l7133 0D9A  
                                   l8101 0C14                                     l7223 144A  
                                   l7215 143D                                     l6191 15A1  
                                   l6159 10D5                                     l7225 144D  
                                   l6185 1596                                     l6265 0888  
                                   l7161 0DE3                                     l7145 0DB2  
                                   l8121 0C49                                     l8105 0C1C  
                                   l7219 1443                                     l6267 0895  
                                   l2995 093D                                     l6291 1C65  
                                   l8203 0155                                     l7155 0DD8  
                                   l7171 1CED                    _setDimmerLights_SwOff 14A3  
                                   l7229 1453                                     l5901 1C19  
                                   l6269 089E                                     l6357 14D9  
                                   l8205 015B                                     l6429 1140  
                                   l6533 156F                                     l6607 1176  
                                   l6375 1794                                     l8215 0170  
                                   l6551 13AF                                     l6561 1DAE  
                                   l6617 118D                                     l6609 117F  
                                   l7409 168B                                     l8145 0071  
                                   l6801 0B71                                     l7097 1BF8  
                                   l6537 157E                                     l6721 0B22  
                                   l7185 1E8B                                     l7601 0F14  
                                   l6643 0820                                     l6651 0828  
                                   l5931 04A9                                     l7515 150A  
                                   l6811 0B83                                     l6803 0B74  
                                   l6731 0B44                                     l7195 1E97  
                                   l7187 1E8D                                     l8315 1F7F  
                                   l7603 0F16                                     l6565 1DB4  
                                   l6629 080F                                     l6637 0817  
                                   l5941 04BF                                     l7509 14F5  
                                   l8173 00C7                                     l6477 1D99  
                                   l6581 1F32                                     l6813 0B86  
                                   l6725 0B38                                     l6709 0AFD  
                                   l7197 1E9B                                     l7613 0F2B  
                                   l8093 0BEF                                     l6559 1DAB  
                                   l6663 0842                                     l5919 1F09  
                                   l5935 04B0                                     l8167 009D  
                                   l6479 1D9D                                     l6575 1F29  
                                   l6751 097B                                     l6727 0B3C  
                                   l6735 0B48                                     l7615 0F2C  
                                   l6497 1724                                     l6921 1101  
                                   l5873 091A                                     l5961 04F6  
                                   l5953 04D9                                     l8265 01B0  
                                   l6577 1F2C                                     l6833 0B9D  
                                   l6817 0B8C                                     l6745 0972  
                                   l6729 0B40                                     l7705 061F  
                                   l7617 0F42                                     l6499 16F8  
                                   l6659 083E                                     l6667 0846  
                                   l5883 0942                                     l5875 0924  
                                   l5971 0512                                     l5963 04FB  
                                   l8363 1DE7                                     l6835 0BB5  
                                   l6771 09AD                                     l6747 0975  
                                   l7803 0235                                     l7571 0EB5  
                                   l7491 1EA8                                     l8339 12F8  
                                   l6917 10FC                                     l6677 1D57  
                                   l5885 094A                                     l5877 0929  
                                   l5869 0913                                     l5981 0544  
                                   l5973 051C                                     l5965 04FF  
                                   l7397 165D                                     l8197 0148  
                                   l6765 098C                                     l7717 0640  
                                   l7653 05C1                                     l7813 0267  
                                   l7493 1EAB                                     l7903 1470  
                                   l6855 1FA0                                     l6863 1EE5  
                                   l6919 10E0                                     l5991 055F  
                                   l5959 04EC                                     l6943 0D24  
                                   l7399 1663                                     l6783 09C0  
                                   l6775 09B3                                     l7735 1D40  
                                   l8287 1387                                     l6857 1FAB  
                                   l6865 1EE8                                     l5897 1C13  
                                   l5977 0532                                     l6777 09B7  
                                   l6769 09AA                                     l7497 1EB0  
                                   l6955 0D4C                                     l6963 0AAC  
                                   l6795 0B68                                     l6779 09BA  
                                   l7739 1D46                                     l7763 17D1  
                                   l7827 02A5                                     l8483 16B5  
                                   l6869 1EEE                                     l6797 0B6B  
                                   l7773 17F1                                     l7757 17C3  
                                   l7749 17B0                                     l7837 02D7  
                  _myMain_Initialization 07F1                                     l7951 11B9  
                                   l7687 05F3                                     l7767 17E1  
                                   l7775 17FA                                     l7863 032A  
                                   l8487 16C0                                     l7953 11BC  
                                   l7689 05F5                                     l7955 11C4  
                                   l6987 124D                                     l7787 01F2  
                                   l7885 1295                                     l7877 1277  
                                   l7879 1283                                     l7889 129E  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u5115 15AC                                     u4405 0945  
                                   u5135 15B6                                     u5055 10C1  
                                   u5145 15C0                                     u6035 1F95  
                                   u5155 15C8                                     u4435 095B  
                                   _PEIE 005E                                     u5340 1752  
                                   u4365 091F                                     u4605 04ED  
                                   u4385 0938                                     u5345 1750  
                                   u6155 10E9                                     u4635 0500  
                                   u4575 04DA                                     u4735 0E2F  
                                   u8015 11F3                                     u4815 0F85  
                                   u4665 0513                                     u4745 0E3F  
                                   u4825 0F95                                     u5395 1D19  
                                   u4755 0E5F                                     u7155 0EFC  
                                   u5485 1701                                     u4765 0E6E  
                                   u4845 0FBD                                     u8125 0C36  
                                   u4775 0E78                                     u4935 0C6F  
                                   u4855 0FC3                                     u7175 0F1C  
                                   u7275 05BB                                     u8075 0C02  
                                   u4965 0C99                                     u8325 0161  
                                   u4885 0FD9                                     u4895 0FDF  
                                   u8265 0108                                     u4995 0CB4  
                                   u7715 127A                                     u7395 0630  
                                   u8445 137E                                     u8525 1310  
                                   u7735 1284                                     u8455 138D  
                                   u7745 128E                                     u7755 1296  
                                   u7785 1466                                     _LWLO 0CAD  
                                   _RSSI 00CF                                     _WREN 0CAA  
                                   _Buz1 00AE                                     _Load 0125  
                                   _Temp 00D6                                     _main 1691  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 090A  
                        __end_of_RF_Main 1A8C                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 001F                                     btemp 007E  
                        __end_of_WDT_Set 1B12                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1AC5  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 13D6                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1BBA  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1B59         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1C10                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EB                          __end_of___awdiv 15DF  
                        __end_of___ftadd 0577                          __end_of___ftdiv 0E99  
                        __end_of___ftneg 1AFE                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CD6                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 12A5                                    i1l723 1C9C  
                                  i1l735 1C07                                    i1l746 045D  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1D1F  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 12DE  
             _setDimmerLights_IntrIOC_GO 12A5                         __end_of_TMR1_ISR 2000  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 1748  
             _setDimmerLights_ErrorClose 16EC                         __end_of_TMR1_Set 1B71  
                                  _getAD 1E9D                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1C46              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1D75  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 1104  
          __end_of_setLED_Initialization 1BDC                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1748  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                        setTemp_Main@error 002F  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0A31  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                __size_of_getDelayOff_GO 0010                        ??_setPercentValue 005C  
                           __end_of_main 16EC                      ?_setRF_DimmerLights 0020  
                       __end_of_Fosc_Set 1AA2                       ??_setMemory_Modify 0020  
                         _Exception_Main 1DD5                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D60  
                   _setSw_Initialization 1AED                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0AFC                           _setMemory_Data 1B29  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C59  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 08AD                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1F20  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 096B  
               _getMain_All_Error_Status 1165                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1066                                   i1l7321 0396  
                                 i1l7317 038F                                   i1l7343 03F1  
                                 i1l7351 0410                                   i1l7361 0444  
                                 i1l7347 0401                                   i1l7339 03E2  
                                 i1l7357 042F                                   i1l6897 12D7  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                       __size_of_Load_Main 017D  
                                 u671_25 036C                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1DBC  
                                 u794_25 1FFA                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1A81  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1D34  
                                 _Dimmer 00C6                                   _DlySw1 01E1  
                                 _DlySw2 01E6               __end_of_Mcu_Initialization 1C34  
                    __end_of_Buzzer_Main 14A3                                   _Memory 0220  
                                 _Timer1 0120       __end_of_setDimmerLights_TriggerAdj 1E7E  
             _setDimmerLights_TriggerAdj 1E5F                                   ___bmul 1C10  
                 __end_of_Exception_Main 1DEF                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D4  
                                 _s_data 00D5                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 0800                                   _myMain 00A0  
                 __end_of_setMemory_Data 1B35                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 15DF  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1AAC  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 0481              _setDimmerLights_IntrControl 0337  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1C92              getMain_Lights_Count@status1 0022  
            getMain_Lights_Count@status2 0023              getMain_Lights_Count@status3 0021  
                  __end_of_SwPointSelect 1CF6             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 001B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1D34               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0A96         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0047                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$4796 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                        ?_Exception_Main 0070                             __pidataBANK4 1EBD  
                          __end_of_getAD 1EBD                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0066  
                     _LED_Initialization 1B41                          _getSw_KeyStatus 1E7E  
              ??_setControl_Lights_Table 006B                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 0062  
                   _getMain_Lights_Count 1D5F                                ?_WDT_Main 0070  
                      __end_of_Load_Main 01C8                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 10D7               __end_of_set_TimeoutCleared 1AA7  
               __end_of_setDimmerReClock 1ACD                       __size_of_getRxData 0090  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CC  
                         _DimmerLights22 00CD                     __size_of_setLED_Main 003E  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1A8C                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1459                        ??_setRFSW_Control 0031  
                      __end_of_Temp_Main 1A92                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1ACD                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 003D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006F                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 1691                           _getDelayOff_GO 1BAA  
                    _CC2500_WriteCommand 1DA3                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                            ?_setTemp_Main 0070  
                             _getLoad_AD 0BCE                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1ADD                       __size_of_setTxData 00BF  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1ABE  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1358  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1B1D                       _setRFSW_AdjControl 1396  
                                _IOC_ISR 1B8C                                  _IOC_Set 1B59  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 11CC                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1DEF              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 006A                   __size_of_CC2500_TxData 0061  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 01A0                                  _RF_Main 1A89  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1B07          __end_of_setControl_Lights_Table 0B64  
                        setRF_Main@error 00EA                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 09CC  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1B29                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1BED                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1BBA  
                                _VarLED1 0168                                  _VarLED2 016C  
         __end_of_getDimmerLights_Status 1BCB                        __end_of_getRxData 0DF0  
                __end_of_getSw_KeyStatus 1E9D                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1CA6                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1083                     ??_setRFSW_AdjControl 0067  
                         ??_setTemp_Main 002D                          __size_of___bmul 0012  
                                ___awdiv 158B                                  ___ftadd 0481  
                                ___ftdiv 0DF0                                  ___ftneg 1AF5  
                                ___ftmul 0F4C                                  ___fttol 0C4F  
                    __end_of_Switch_Main 1F8A                                  ___lwdiv 126E  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1BED  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0050                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 12DE  
                                __ptext2 07F1                                  __ptext3 1358  
                                __ptext4 0BCE                                  __ptext5 1E9D  
                                __ptext6 1C34                                  __ptext7 0002  
                                __ptext8 1A8F                                  __ptext9 0E99  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1BFE                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 1202  
              __end_of_Flash_Memory_Read 1E09                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 0577                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1AD5                        _DimmerLights_Main 1198  
         __size_of_DlyOff_Initialization 0006                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1AB2  
             __end_of_CC2500_ClearRXFIFO 1A96                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1A9A            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1E09  
                    _DelayOffPointSelect 1CBA                           _getMain_LoadOK 1B7E  
                                clrloop0 1AB9           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1B7E                     end_of_initialization 0047  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1083  
                          _DelayTime_1us 1F8A                        __end_of_setTxData 07F1  
             __end_of_Flash_Memory_Write 1133                                  init_ram 1AB2  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1AB3  
                             _setSw_Main 01C8                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002F                        _CC2500_ReadStatus 1F20  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1BCB  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0B64                            _CC2500_TxData 096B  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 14EE                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1AFE  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 11CC  
                     _Mcu_Initialization 1C22                 __size_of_CC2500_PowerRST 0043  
                   __end_of_my_MainTimer 131A                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1E24  
                __end_of_setPercentValue 0A31                   __end_of_getMain_LoadOK 1B8C  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 10AD  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 005C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 0A96                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1F42                            ?_RF_RxDisable 0070  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                         ??_Exception_Main 0027  
                         __end_of_IO_Set 1DD5                     _setRF_Initialization 1B12  
                     _setMemory_LoopSave 1C7F                              _Switch_Main 1F66  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1C46                  __end_of_getRF_KeyStatus 1BFE  
                      _setMain_Exception 17A4                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1D1F  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1C22                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1C92  
        _setDimmerLights_AdjControl$2337 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0029            __size_of_getDimmerLights_Line 0014  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 0850  
          __size_of_setDimmerLights_Line 0016            __size_of_setDimmerLights_SwOn 0040  
                         __end_of_setBuz 1638                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1B1D               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 153C                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 1133                          ?_LedPointSelect 0070  
                              _Load_Main 004B                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1AE5  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1E5F          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0F4C  
                         ??_RF_RxDisable 0024                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1AA2                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0164  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 003E                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 1800                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1A8F                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D0  
                setRF_DimmerValue@lights 0066                      Exception_Main@error 0028  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D2  
                            __pdataBANK4 0245                _getAll_DimmerLights_AdjGO 1C59  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 1198  
                       _CC2500_SIDLEMode 1A9A               __size_of_DimmerLights_Main 0034  
              __end_of_setRF_DimmerValue 1165                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2324 0022  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1C6C  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E8                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 008A  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 0153  
                          _DimmerLights2 01BE                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1E40                 setRFSW_AdjControl@status 0069  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                         getRxData@error 006C              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00DF                           Load_Main@adjgo 002C  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 1A82  
                              _getBuz_GO 1BDC      __end_of_Flash_Memory_Initialization 0732  
            _Flash_Memory_Initialization 0656                                 ?___awdiv 0020  
                              __ptext100 1E5F                                __ptext101 1066  
                              __ptext110 1ACD                                __ptext102 0850  
                              __ptext111 1AAC                                __ptext103 10AD  
                              __ptext120 1F8A                                __ptext112 1CBA  
                              __ptext104 1C10                                __ptext121 1A96  
                              __ptext113 1D1F                                __ptext105 1BAA  
                              __ptext130 1FD7                                __ptext122 1A92  
                              __ptext114 1A9A                                __ptext106 1BBA  
                              __ptext131 0337                                __ptext123 1DA3  
                              __ptext115 1416                                __ptext107 1C46  
                              __ptext132 1BFE                                __ptext124 1AA2  
                              __ptext116 1083                                __ptext108 15DF  
                              __ptext133 1B8C                                __ptext125 1D0A  
                              __ptext117 1E40                                __ptext109 158B  
                               ?___ftadd 0041                                __ptext134 1AC5  
                              __ptext126 1CA6                                __ptext118 1EDD  
                              __ptext135 12A5                                __ptext127 1459  
                              __ptext119 1B1D                                __ptext136 1C92  
                              __ptext128 1A83                                _getRxData 0D60  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 003C                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 158B            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003                         getMain_LoadOK@ok 0022  
          __end_of_Buzzer_Initialization 1A86                         getPercentValue@i 005F  
                       setPercentValue@i 005F                            ??_setLog_Code 002D  
               getDimmerLights_Line@line 0021                       __end_of_TouchPower 1D49  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0024            __end_of_setDimmerLights_AdjRF 1F66  
                 CC2500_WriteByte@loop_a 0021                   _DimmerLights_Main$2310 0069  
                              _r_address 00D3           __size_of_setDimmerLights_SwOff 004B  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 14EE  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 0800  
                         __size_of_getAD 0020                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1CE2  
                    __end_of_setLED_Main 1358                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CE                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1A8F             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1B4D  
                        SwPointSelect@sw 0021                                clear_ram0 1AB8  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 12DE                                _setTxData 0732  
    __end_of_DimmerLights_Initialization 1D8C              _DimmerLights_Initialization 1D75  
                     _CC2500_ClearRXFIFO 1A92                       _CC2500_ClearTXFIFO 1A96  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1D0A  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 1104  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 1FD7                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1B65                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 0123                     __end_of_RF_RxDisable 1BAA  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1DBC  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1C34  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E8  
                  __size_of_setTemp_Main 00B3                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1B41  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1238  
                  _DlyOff_Initialization 1AAC                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1A9E  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0C4F  
                     __end_of_getLoad_OK 1AE5                    _Switch_Initialization 1B71  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 1396  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1CA6  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D1                              ??_Temp_Main 0030  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$6485 0021  
          _getMain_All_Error_Status$6486 0023                 __end_of_getDimmer_LoadOK 1AED  
                    _Load_Initialization 1AA7                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0036  
                           _setTemp_Main 0E99                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 1EFE                         ??_LedPointSelect 0020  
                               ___ftpack 090A            __size_of_getMain_Lights_Count 0016  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002D  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006D  
                   CC2500_WriteREG@value 0022                              _setLED_Main 131A  
             __end_of_setRF_DimmerLights 17A4                 ?_DelayOff_Initialization 0070  
                       getDelayOff_GO@go 0023                         getDelayOff_GO@sw 0022  
                       setDelayOff_GO@sw 002E                          ___lwdiv@divisor 0020  
     __size_of_getAll_DimmerLights_AdjGO 0013                     ?_Load_Initialization 0070  
                        ___lwdiv@counter 0027                                 __ptext10 1A8C  
                               __ptext11 1A82                                 __ptext20 1B71  
                               __ptext12 1F66                                 __ptext21 1AED  
                               __ptext13 01C8                                 __ptext30 13D6  
                               __ptext22 1D34                                 __ptext14 1CF6  
                               __ptext31 1396                                 __ptext23 1A89  
                               __ptext15 1238                                 __ptext40 096B  
                               __ptext32 1133                                 __ptext24 0577  
                               __ptext16 1E7E                                 __ptext41 0B64  
                               __ptext33 1F42                                 __ptext25 0D60  
                               __ptext17 1CE2                                 __ptext50 1B59  
                               __ptext42 1F20                                 __ptext34 0A31  
                               __ptext26 1202                                 __ptext18 17A4  
                               __ptext51 1A9E                                 __ptext43 1D8C  
                               __ptext35 0F4C                                 __ptext27 1C7F  
                               __ptext19 1CCE                                 __ptext60 1E24  
                               __ptext52 1ABE                                 __ptext44 1A86  
                               __ptext36 1C6C                                 __ptext28 0AFC  
                               __ptext61 1B4D                                 __ptext53 004B  
                               __ptext45 1B12                                 __ptext37 1BED  
                               __ptext29 153C                                 __ptext70 1104  
                               __ptext62 131A                                 __ptext54 1B7E  
                               __ptext46 1C22                                 __ptext38 1BDC  
                               __ptext71 1AFE                                 __ptext63 1B41  
                               __ptext55 1AE5                                 __ptext47 1B07  
                               __ptext39 1B9B                                 __ptext80 09CC  
                               __ptext72 1DEF                                 __ptext64 1BCB  
                               __ptext56 1D5F                                 __ptext48 1B65  
                               __ptext81 0C4F                                 __ptext73 1DD5  
                               __ptext65 11CC                                 __ptext57 1C59  
                               __ptext49 1DBC                                 __ptext90 1165  
                               __ptext82 1AF5                                 __ptext74 1198  
                               __ptext66 14EE                                 __ptext58 126E  
                               __ptext91 10D7                                 __ptext83 0DF0  
                               __ptext75 1638                                 __ptext67 1B35  
                               __ptext59 1AA7                                 __ptext92 1ADD  
                               __ptext84 0481                                 __ptext76 0A96  
                               __ptext68 0656                                 __ptext93 1D75  
                               __ptext85 1EFE                                 __ptext77 0CD6  
                               __ptext69 1B29                                 __ptext94 1FB0  
                               __ptext86 090A                                 __ptext78 0732  
                               __ptext95 1A81                                 __ptext87 0800  
                               __ptext79 1748                                 __ptext96 1AD5  
                               __ptext88 1E09                                 __ptext97 08AD  
                               __ptext89 1D49                                 __ptext98 16EC  
                               __ptext99 14A3                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1CE2            __end_of_Dimmer_Initialization 1A82  
           __end_of_setDimmerLights_Main 1691             __end_of_setDimmerLights_Line 1D5F  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 1416  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 005B  
                            _setRF_Learn 1CF6                 __end_of_CC2500_SIDLEMode 1A9E  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1CCE  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00E9  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1D8C                       _CC2500_InitPATable 1E40  
               __end_of_setMemory_Modify 1C7F            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0656                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0034  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006B  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EB                                 main@argv 00ED  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$5785 0021  
                   _getSw_KeyStatus$5786 0022                          _CC2500_PowerRST 1416  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 153C  
                      ??_getPercentValue 005C                              _setLog_Code 1202  
            __end_of_Flash_Memory_Unlock 1B07                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1EDD                       __end_of_setSw_Main 0337  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 10AD  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1C6C  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1FD7  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 1FB0  
            __end_of_setDimmerLights_Adj 0AFC                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1A86  
   __size_of_setDimmerLights_IntrControl 014A                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1B35                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007B                  __size_of_Exception_Main 001A  
        __end_of_DelayOff_Initialization 1AD5      __size_of_setDimmerLights_IntrIOC_GO 0039  
    __size_of_setDimmerLights_ErrorClose 005C                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1ADD       __end_of_setDimmerLights_AdjControl 126E  
             _setDimmerLights_AdjControl 1238                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0850  
       __size_of_setControl_Lights_Table 0068                   __end_of_DelayTimejudge 10D7  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 1FB0                  __end_of_CC2500_ReadByte 1DA3  
           __end_of_setSw_Initialization 1AF5                          _Timeout_Counter 1D0A  
        __size_of_getDimmerLights_Status 0011                     getPercentValue@value 005E  
                           _RF_RxDisable 1B9B               __end_of_LED_Initialization 1B4D  
       __size_of_setDimmerLights_Trigger 001D           __end_of_setTemp_Initialization 1A83  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1A89  
                  __end_of_CC2500_RxData 0BCE                    __end_of_CC2500_TxData 09CC  
                  _setLoad_AH_AL_Restore 1E24                  __end_of_CC2500_PowerRST 1459  
         getAll_DimmerLights_AdjGO@adjgo 0021  
