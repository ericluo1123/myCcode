

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Feb 06 16:45:44 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  1DAF                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  1DAF  3463               	retlw	99
  2172  1DB0  3402               	retlw	2
  2173  1DB1  3400               	retlw	0
  2174  1DB2  3400               	retlw	0
  2175  1DB3  3400               	retlw	0
  2176  1DB4  3400               	retlw	0
  2177  1DB5  3400               	retlw	0
  2178  1DB6  3400               	retlw	0
  2179  1DB7  3400               	retlw	0
  2180  1DB8  3400               	retlw	0
  2181  1DB9  3400               	retlw	0
  2182  1DBA  3400               	retlw	0
  2183  1DBB  34FF               	retlw	255
  2184  1DBC  34FF               	retlw	255
  2185  1DBD  34FF               	retlw	255
  2186  1DBE  3400               	retlw	0
  2187  1DBF  3400               	retlw	0
  2188  1DC0  3400               	retlw	0
  2189  1DC1  3400               	retlw	0
  2190  1DC2  3400               	retlw	0
  2191  1DC3  3400               	retlw	0
  2192  1DC4  3400               	retlw	0
  2193  1DC5  3400               	retlw	0
  2194  1DC6  3400               	retlw	0
  2195  1DC7  3400               	retlw	0
  2196  1DC8  3400               	retlw	0
  2197  1DC9  3400               	retlw	0
  2198  1DCA  3400               	retlw	0
  2199  1DCB  3400               	retlw	0
  2200  1DCC  3400               	retlw	0
  2201  1DCD  3400               	retlw	0
  2202  1DCE  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1800                     __pstringtext:	
  2206  1800                     _CC2500_registers_address:	
  2207  1800  3403               	retlw	3
  2208  1801  3416               	retlw	22
  2209  1802  3417               	retlw	23
  2210  1803  341E               	retlw	30
  2211  1804  341F               	retlw	31
  2212  1805  3420               	retlw	32
  2213  1806  342A               	retlw	42
  2214  1807  342B               	retlw	43
  2215  1808  340B               	retlw	11
  2216  1809  340C               	retlw	12
  2217  180A  340D               	retlw	13
  2218  180B  340E               	retlw	14
  2219  180C  340F               	retlw	15
  2220  180D  3410               	retlw	16
  2221  180E  3411               	retlw	17
  2222  180F  3412               	retlw	18
  2223  1810  3413               	retlw	19
  2224  1811  3414               	retlw	20
  2225  1812  340A               	retlw	10
  2226  1813  3415               	retlw	21
  2227  1814  3421               	retlw	33
  2228  1815  3422               	retlw	34
  2229  1816  3418               	retlw	24
  2230  1817  3419               	retlw	25
  2231  1818  341A               	retlw	26
  2232  1819  341B               	retlw	27
  2233  181A  341C               	retlw	28
  2234  181B  341D               	retlw	29
  2235  181C  3423               	retlw	35
  2236  181D  3424               	retlw	36
  2237  181E  3425               	retlw	37
  2238  181F  3426               	retlw	38
  2239  1820  3429               	retlw	41
  2240  1821  342C               	retlw	44
  2241  1822  342D               	retlw	45
  2242  1823  342E               	retlw	46
  2243  1824  3400               	retlw	0
  2244  1825  3401               	retlw	1
  2245  1826  3402               	retlw	2
  2246  1827  3407               	retlw	7
  2247  1828  3408               	retlw	8
  2248  1829  3409               	retlw	9
  2249  182A  3406               	retlw	6
  2250  182B  3404               	retlw	4
  2251  182C  3405               	retlw	5
  2252  182D  3427               	retlw	39
  2253  182E  3428               	retlw	40
  2254  182F                     __end_of_CC2500_registers_address:	
  2255  182F                     _CC2500_rfSettings:	
  2256  182F  3407               	retlw	7
  2257  1830  3407               	retlw	7
  2258  1831  3430               	retlw	48
  2259  1832  3487               	retlw	135
  2260  1833  346B               	retlw	107
  2261  1834  34F8               	retlw	248
  2262  1835  347F               	retlw	127
  2263  1836  343F               	retlw	63
  2264  1837  3409               	retlw	9
  2265  1838  3400               	retlw	0
  2266  1839  345C               	retlw	92
  2267  183A  34A7               	retlw	167
  2268  183B  3462               	retlw	98
  2269  183C  3486               	retlw	134
  2270  183D  3483               	retlw	131
  2271  183E  3403               	retlw	3
  2272  183F  3422               	retlw	34
  2273  1840  34F8               	retlw	248
  2274  1841  3400               	retlw	0
  2275  1842  3444               	retlw	68
  2276  1843  34B6               	retlw	182
  2277  1844  3410               	retlw	16
  2278  1845  3418               	retlw	24
  2279  1846  341D               	retlw	29
  2280  1847  341C               	retlw	28
  2281  1848  34C7               	retlw	199
  2282  1849  3400               	retlw	0
  2283  184A  34B2               	retlw	178
  2284  184B  34EA               	retlw	234
  2285  184C  340A               	retlw	10
  2286  184D  3400               	retlw	0
  2287  184E  3411               	retlw	17
  2288  184F  3459               	retlw	89
  2289  1850  3488               	retlw	136
  2290  1851  3431               	retlw	49
  2291  1852  340B               	retlw	11
  2292  1853  342F               	retlw	47
  2293  1854  342E               	retlw	46
  2294  1855  3406               	retlw	6
  2295  1856  3404               	retlw	4
  2296  1857  3405               	retlw	5
  2297  1858  3400               	retlw	0
  2298  1859  3430               	retlw	48
  2299  185A  34D3               	retlw	211
  2300  185B  3491               	retlw	145
  2301  185C  3441               	retlw	65
  2302  185D  3400               	retlw	0
  2303  185E                     __end_of_CC2500_rfSettings:	
  2304  185E                     _CC2500_patable_vaule:	
  2305  185E  34FE               	retlw	254
  2306  185F  34FE               	retlw	254
  2307  1860  34FE               	retlw	254
  2308  1861  34FE               	retlw	254
  2309  1862  34FE               	retlw	254
  2310  1863  34FE               	retlw	254
  2311  1864  34FE               	retlw	254
  2312  1865  34FE               	retlw	254
  2313  1866                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK1
  2316  00ED                     __pnvBANK1:	
  2317  00ED                     _product:	
  2318  00ED                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0063                     _RA3	set	99
  2331  0064                     _RA4	set	100
  2332  0066                     _RA6	set	102
  2333  0067                     _RA7	set	103
  2334  0068                     _RB0	set	104
  2335  0069                     _RB1	set	105
  2336  006A                     _RB2	set	106
  2337  006B                     _RB3	set	107
  2338  006C                     _RB4	set	108
  2339  006D                     _RB5	set	109
  2340  0070                     _RC0	set	112
  2341  0071                     _RC1	set	113
  2342  0072                     _RC2	set	114
  2343  0074                     _RC4	set	116
  2344  0075                     _RC5	set	117
  2345  0077                     _RC7	set	119
  2346  0088                     _TMR1IF	set	136
  2347  009D                     _ADCON0	set	157
  2348  009E                     _ADCON1	set	158
  2349  009C                     _ADRESH	set	156
  2350  009B                     _ADRESL	set	155
  2351  0099                     _OSCCON	set	153
  2352  008C                     _TRISA	set	140
  2353  008D                     _TRISB	set	141
  2354  008E                     _TRISC	set	142
  2355  0097                     _WDTCON	set	151
  2356  04E9                     _GO_nDONE	set	1257
  2357  0488                     _TMR1IE	set	1160
  2358  0117                     _FVRCON	set	279
  2359  010C                     _LATA	set	268
  2360  010D                     _LATB	set	269
  2361  010E                     _LATC	set	270
  2362  018C                     _ANSELA	set	396
  2363  018D                     _ANSELB	set	397
  2364  018E                     _ANSELC	set	398
  2365  0192                     _PMADRH	set	402
  2366  0191                     _PMADRL	set	401
  2367  0196                     _PMCON2	set	406
  2368  0194                     _PMDATH	set	404
  2369  0193                     _PMDATL	set	403
  2370  0CAE                     _CFGS	set	3246
  2371  0CAC                     _FREE	set	3244
  2372  0CAD                     _LWLO	set	3245
  2373  0CA8                     _RD	set	3240
  2374  0CA9                     _WR	set	3241
  2375  0CAA                     _WREN	set	3242
  2376  020D                     _WPUB	set	525
  2377  0396                     _IOCBF	set	918
  2378  0395                     _IOCBN	set	917
  2379  0394                     _IOCBP	set	916
  2380  1CB2                     _IOCBF2	set	7346
  2381                           
  2382                           ; #config settings
  2383  0000                     
  2384                           	psect	cinit
  2385  0022                     start_initialization:	
  2386  0022                     __initialization:	
  2387                           
  2388                           ; Clear objects allocated to BITBANK0
  2389  0022  01EE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BANK1
  2392  0023  30A0               	movlw	low __pbssBANK1
  2393  0024  0084               	movwf	4
  2394  0025  3000               	movlw	high __pbssBANK1
  2395  0026  0085               	movwf	5
  2396  0027  3045               	movlw	69
  2397  0028  3198  20E4  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Clear objects allocated to BANK2
  2400  002B  3020               	movlw	low __pbssBANK2
  2401  002C  0084               	movwf	4
  2402  002D  3001               	movlw	high __pbssBANK2
  2403  002E  0085               	movwf	5
  2404  002F  3050               	movlw	80
  2405  0030  3198  20E4  3180   	fcall	clear_ram0
  2406                           
  2407                           ; Clear objects allocated to BANK3
  2408  0033  30A0               	movlw	low __pbssBANK3
  2409  0034  0084               	movwf	4
  2410  0035  3001               	movlw	high __pbssBANK3
  2411  0036  0085               	movwf	5
  2412  0037  304E               	movlw	78
  2413  0038  3198  20E4  3180   	fcall	clear_ram0
  2414                           
  2415                           ; Clear objects allocated to BANK4
  2416  003B  3020               	movlw	low __pbssBANK4
  2417  003C  0084               	movwf	4
  2418  003D  3002               	movlw	high __pbssBANK4
  2419  003E  0085               	movwf	5
  2420  003F  3025               	movlw	37
  2421  0040  3198  20E4  3180   	fcall	clear_ram0
  2422                           
  2423                           ; Initialize objects allocated to BANK4
  2424  0043  30AF               	movlw	low __pidataBANK4
  2425  0044  0084               	movwf	4
  2426  0045  309D               	movlw	(high __pidataBANK4)| (0+128)
  2427  0046  0085               	movwf	5
  2428  0047  3045               	movlw	low __pdataBANK4
  2429  0048  0086               	movwf	6
  2430  0049  3002               	movlw	high __pdataBANK4
  2431  004A  0087               	movwf	7
  2432  004B  3020               	movlw	32
  2433  004C  3198  20DE         	fcall	init_ram
  2434  004E                     end_of_initialization:	
  2435                           ;End of C runtime variable initialization code
  2436                           
  2437  004E                     __end_of__initialization:	
  2438  004E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2439  004F  0020               	movlb	0
  2440  0050  3193  2BA9         	ljmp	_main	;jump to C main() function
  2441                           
  2442                           	psect	bitbssBANK0
  2443  0370                     __pbitbssBANK0:	
  2444  0370                     _Receive_OK:	
  2445  0370                     	ds	1
  2446  0371                     _Transceive_OK:	
  2447  0371                     	ds	1
  2448                           
  2449                           	psect	bssBANK1
  2450  00A0                     __pbssBANK1:	
  2451  00A0                     _RF1:	
  2452  00A0                     	ds	14
  2453  00AE                     _myMain:	
  2454  00AE                     	ds	13
  2455  00BB                     _DimmerIntr1:	
  2456  00BB                     	ds	12
  2457  00C7                     _DimmerIntr2:	
  2458  00C7                     	ds	12
  2459  00D3                     _Cmd:	
  2460  00D3                     	ds	1
  2461  00D4                     _DelayOff:	
  2462  00D4                     	ds	1
  2463  00D5                     _DimmerLights:	
  2464  00D5                     	ds	1
  2465  00D6                     _LED:	
  2466  00D6                     	ds	1
  2467  00D7                     _SPI0Buffer:	
  2468  00D7                     	ds	1
  2469  00D8                     _Sw:	
  2470  00D8                     	ds	1
  2471  00D9                     _Tx_Length:	
  2472  00D9                     	ds	1
  2473  00DA                     _s_data:	
  2474  00DA                     	ds	1
  2475  00DB                     _Temp:	
  2476  00DB                     	ds	10
  2477                           
  2478                           	psect	bssBANK2
  2479  0120                     __pbssBANK2:	
  2480  0120                     _Buz1:	
  2481  0120                     	ds	12
  2482  012C                     _Dimmer:	
  2483  012C                     	ds	5
  2484  0131                     _Timer1:	
  2485  0131                     	ds	3
  2486  0134                     _RF_Count:	
  2487  0134                     	ds	2
  2488  0136                     _WDT:	
  2489  0136                     	ds	2
  2490  0138                     _CRC:	
  2491  0138                     	ds	1
  2492  0139                     _DimmerIntr:	
  2493  0139                     	ds	1
  2494  013A                     _Light:	
  2495  013A                     	ds	1
  2496  013B                     _RSSI:	
  2497  013B                     	ds	1
  2498  013C                     _Rx_Length:	
  2499  013C                     	ds	1
  2500  013D                     _SwDetect:	
  2501  013D                     	ds	1
  2502  013E                     _r_address:	
  2503  013E                     	ds	1
  2504  013F                     _r_data:	
  2505  013F                     	ds	1
  2506  0140                     _Load:	
  2507  0140                     	ds	40
  2508  0168                     _DimmerLights1:	
  2509  0168                     	ds	8
  2510                           
  2511                           	psect	bssBANK3
  2512  01A0                     __pbssBANK3:	
  2513  01A0                     _RF_Data:	
  2514  01A0                     	ds	30
  2515  01BE                     _Sw1:	
  2516  01BE                     	ds	9
  2517  01C7                     _Sw2:	
  2518  01C7                     	ds	9
  2519  01D0                     _DimmerLights2:	
  2520  01D0                     	ds	8
  2521  01D8                     _DlySw1:	
  2522  01D8                     	ds	5
  2523  01DD                     _DlySw2:	
  2524  01DD                     	ds	5
  2525  01E2                     _VarErrLED:	
  2526  01E2                     	ds	4
  2527  01E6                     _VarLED1:	
  2528  01E6                     	ds	4
  2529  01EA                     _VarLED2:	
  2530  01EA                     	ds	4
  2531                           
  2532                           	psect	bssBANK4
  2533  0220                     __pbssBANK4:	
  2534  0220                     _Memory:	
  2535  0220                     	ds	37
  2536                           
  2537                           	psect	dataBANK4
  2538  0245                     __pdataBANK4:	
  2539  0245                     __product:	
  2540  0245                     	ds	32
  2541                           
  2542                           	psect	clrtext
  2543  18E4                     clear_ram0:	
  2544                           ;	Called with FSR0 containing the base address, and
  2545                           ;	WREG with the size to clear
  2546                           
  2547  18E4  0064               	clrwdt	;clear the watchdog before getting into this loop
  2548  18E5                     clrloop0:	
  2549  18E5  0180               	clrf	0	;clear RAM location pointed to by FSR
  2550  18E6  3101               	addfsr 0,1
  2551  18E7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2552  18E8  28E5               	goto	clrloop0	;have we reached the end yet?
  2553  18E9  3400               	retlw	0	;all done for this memory range, return
  2554                           
  2555                           	psect	inittext
  2556  18DE                     init_ram:	
  2557  18DE  00FE               	movwf	126
  2558  18DF                     initloop:	
  2559  18DF  0012               	moviw fsr0++
  2560  18E0  001E               	movwi fsr1++
  2561  18E1  0BFE               	decfsz	126,f
  2562  18E2  28DF               	goto	initloop
  2563  18E3  3400               	retlw	0
  2564                           
  2565                           	psect	cstackBANK4
  2566  0265                     __pcstackBANK4:	
  2567  0265                     ?_main:	
  2568  0265                     main@argc:	
  2569                           ; 2 bytes @ 0x0
  2570                           
  2571                           
  2572                           ; 2 bytes @ 0x0
  2573  0265                     	ds	2
  2574  0267                     main@argv:	
  2575                           
  2576                           ; 2 bytes @ 0x2
  2577  0267                     	ds	2
  2578                           
  2579                           	psect	cstackBANK1
  2580  00E5                     __pcstackBANK1:	
  2581  00E5                     ?_setDimmerLights_OnOff:	
  2582  00E5                     ??_setRFSW_Control:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  00E5                     setDimmerLights_OnOff@command:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  00E5                     setDimmerLights_Dimming@value:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  00E5                     setTemp_Main@error:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594                           
  2595                           ; 1 bytes @ 0x0
  2596  00E5                     	ds	1
  2597  00E6                     ??_setDimmerLights_OnOff:	
  2598  00E6                     setDimmerLights_Dimming@lights:	
  2599                           ; 0 bytes @ 0x1
  2600                           
  2601  00E6                     setTemp_Main@TempGO:	
  2602                           ; 1 bytes @ 0x1
  2603                           
  2604  00E6                     setRFSW_Control@status:	
  2605                           ; 1 bytes @ 0x1
  2606                           
  2607                           
  2608                           ; 1 bytes @ 0x1
  2609  00E6                     	ds	1
  2610  00E7                     setRFSW_Control@sw:	
  2611  00E7                     setTemp_Main@SafeValue:	
  2612                           ; 1 bytes @ 0x2
  2613                           
  2614                           
  2615                           ; 2 bytes @ 0x2
  2616  00E7                     	ds	1
  2617  00E8                     ??_getRxData:	
  2618  00E8                     setDimmerLights_OnOff@lights:	
  2619                           ; 0 bytes @ 0x3
  2620                           
  2621                           
  2622                           ; 1 bytes @ 0x3
  2623  00E8                     	ds	1
  2624  00E9                     setDimmerLights_Main@lights:	
  2625  00E9                     getRxData@error:	
  2626                           ; 1 bytes @ 0x4
  2627                           
  2628  00E9                     setTemp_Main@DangerValue:	
  2629                           ; 1 bytes @ 0x4
  2630                           
  2631                           
  2632                           ; 2 bytes @ 0x4
  2633  00E9                     	ds	1
  2634  00EA                     ??_setRF_Main:	
  2635                           
  2636                           ; 0 bytes @ 0x5
  2637  00EA                     	ds	1
  2638  00EB                     setRF_Main@error:	
  2639  00EB                     setTemp_Main@AD:	
  2640                           ; 1 bytes @ 0x6
  2641                           
  2642                           
  2643                           ; 2 bytes @ 0x6
  2644  00EB                     	ds	2
  2645                           
  2646                           	psect	cstackCOMMON
  2647  0070                     __pcstackCOMMON:	
  2648  0070                     ?_CC2500_WriteCommand:	
  2649  0070                     ?_RF_Timeout_Counter:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setRF_TimeoutCleared:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_CC2500_WriteByte:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_CC2500_ReadStatus:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_CC2500_ReadByte:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_CC2500_PowerRST:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_CC2500_InitSetREG:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_CC2500_InitPATable:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_CC2500_ClearTXFIFO:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_CC2500_ClearRXFIFO:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_CC2500_FrequencyCabr:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_CC2500_SIDLEMode:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_DlyOff_Initialization:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_DlyOff_Main:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setDimmerLights_SwOn:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setDimmerLights_SwOff:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setMemory_Modify:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_setDimmerLights_Initialization:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_setDimmerLights_Main:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_setDimmerLights_Line:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_setTxData:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_setRF_TransceiveGO:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_setLED_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setLED_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_Fosc_Set:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_IO_Set:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_TMR1_Set:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_ADC_Set:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_IOC_Set:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_WDT_Set:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_TMR1_ISR:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_IOC_ISR:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_Timeout_Counter:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_set_TimeoutCleared:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_Flash_Memory_Write:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_Flash_Memory_Modify:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_WDT_Clearing:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_setLoad_AH_AL_Restore:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setTemp_Initialization:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setTemp_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_setRF_Initialization:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setRF_Main:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_RF_RxDisable:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_getRxData:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setLog_Code:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setControl_Lights_Table:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setRFSW_Control:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setRFSW_AdjControl:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setSw_Initialization:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setSw_Main:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_myMain_Initialization:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_my_MainTimer:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_Exception_Main:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_Buzzer_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_Buzzer_Main:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_CC2500_TxData:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_CC2500_RxData:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_CC2500_PowerOnInitial:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_DelayOffPointSelect:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_DelayOff_Initialization:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DelayOff_Main:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DimmerIntr_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_DimmerLights_SelectPointer:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerLights_Initialization:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_setDimmerLights_DimmingOn:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_DimmerLights_Main:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_DimmerLights_TMR_1:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ??_DimmerLights_TMR_1:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_DimmerLights_IOC_1:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_DimmerLights_TMR_2:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ??_DimmerLights_TMR_2:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_DimmerLights_IOC_2:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_LedPointSelect:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_LED_Initialization:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_LED_Main:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_Mcu_Initialization:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_ISR:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_Flash_Memory_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_Flash_Memory_Main:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_Flash_Memory_Unlock:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_Flash_Memory_Erasing:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_setMemory_LoopSave:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_WDT_Main:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Load_Initialization:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_getLoad_AD:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_Load_Main:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_Temp_Initialization:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_getTemp_AD:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_Temp_Main:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_RF_Initialization:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_RF_Main:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0070                     ?_setRF_Learn:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0070                     ?_TouchPower:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0070                     ?_SwPointSelect:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0070                     ?_Switch_Initialization:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0070                     ?_Switch_Main:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0070                     ?_getDimmerLights_Status:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0070                     ?_getDimmerLights_ValueToPercent:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getDimmerLights_PercentToValue:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_getLoad_OK:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_getMain_All_Error_Status:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_getMain_All_LightsStatus:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_getDimmerLights_Allow_Condition:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_getCmd_Status:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_Flash_Memory_Read:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_getAll_Sw_KeyStatus:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_getMain_Lights_Count:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_getRF_KeyStatus:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_getSw_KeyStatus:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?_getDelayOff_GO:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_getDimmerIntr_DimmingValue:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     ?_getDimmerLights_Line:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     ?_getDimmer_LoadGO:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991  0070                     ?_getDimmer_Load_Status:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0070                     ?___lbdiv:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997  0070                     setDimmerLights_Initialization@lights:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000  0070                     ___lbdiv@divisor:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0x0
  3005  0070                     	ds	1
  3006  0071                     ??_TMR1_ISR:	
  3007  0071                     ??___lbdiv:	
  3008                           ; 0 bytes @ 0x1
  3009                           
  3010                           
  3011                           ; 0 bytes @ 0x1
  3012  0071                     	ds	1
  3013  0072                     ___lbdiv@dividend:	
  3014                           
  3015                           ; 1 bytes @ 0x2
  3016  0072                     	ds	1
  3017  0073                     ___lbdiv@counter:	
  3018                           
  3019                           ; 1 bytes @ 0x3
  3020  0073                     	ds	1
  3021  0074                     ___lbdiv@quotient:	
  3022                           
  3023                           ; 1 bytes @ 0x4
  3024  0074                     	ds	1
  3025  0075                     ?_Division:	
  3026  0075                     Division@num:	
  3027                           ; 1 bytes @ 0x5
  3028                           
  3029                           
  3030                           ; 1 bytes @ 0x5
  3031  0075                     	ds	1
  3032  0076                     ??_Division:	
  3033                           
  3034                           ; 0 bytes @ 0x6
  3035  0076                     	ds	2
  3036  0078                     Division@value:	
  3037                           
  3038                           ; 1 bytes @ 0x8
  3039  0078                     	ds	1
  3040  0079                     Division@result:	
  3041                           
  3042                           ; 1 bytes @ 0x9
  3043  0079                     	ds	1
  3044  007A                     ??_DimmerLights_IOC_1:	
  3045  007A                     ??_DimmerLights_IOC_2:	
  3046                           ; 0 bytes @ 0xA
  3047                           
  3048                           
  3049                           ; 0 bytes @ 0xA
  3050  007A                     	ds	2
  3051  007C                     DimmerLights_IOC_1@count:	
  3052  007C                     DimmerLights_IOC_2@count:	
  3053                           ; 1 bytes @ 0xC
  3054                           
  3055                           
  3056                           ; 1 bytes @ 0xC
  3057  007C                     	ds	1
  3058  007D                     DimmerLights_IOC_1@dimming:	
  3059  007D                     DimmerLights_IOC_2@dimming:	
  3060                           ; 1 bytes @ 0xD
  3061                           
  3062                           
  3063                           ; 1 bytes @ 0xD
  3064  007D                     	ds	1
  3065  007E                     ??_IOC_ISR:	
  3066                           
  3067                           	psect	cstackBANK0
  3068  0020                     __pcstackBANK0:	
  3069                           ; 0 bytes @ 0xE
  3070                           
  3071  0020                     ??_ISR:	
  3072                           
  3073                           ; 0 bytes @ 0x0
  3074  0020                     	ds	1
  3075  0021                     ??_RF_Timeout_Counter:	
  3076  0021                     ??_setRF_TimeoutCleared:	
  3077                           ; 0 bytes @ 0x1
  3078                           
  3079  0021                     ??_CC2500_WriteByte:	
  3080                           ; 0 bytes @ 0x1
  3081                           
  3082  0021                     ??_CC2500_ReadByte:	
  3083                           ; 0 bytes @ 0x1
  3084                           
  3085  0021                     ?_DelayTime_1us:	
  3086                           ; 0 bytes @ 0x1
  3087                           
  3088  0021                     ??_setMemory_Modify:	
  3089                           ; 0 bytes @ 0x1
  3090                           
  3091  0021                     ??_setDimmerLights_Initialization:	
  3092                           ; 0 bytes @ 0x1
  3093                           
  3094  0021                     ??_getLoad_OK:	
  3095                           ; 0 bytes @ 0x1
  3096                           
  3097  0021                     ??_getMain_All_Error_Status:	
  3098                           ; 0 bytes @ 0x1
  3099                           
  3100  0021                     ??_getMain_All_LightsStatus:	
  3101                           ; 0 bytes @ 0x1
  3102                           
  3103  0021                     ??_setDimmerLights_Line:	
  3104                           ; 0 bytes @ 0x1
  3105                           
  3106  0021                     ??_getCmd_Status:	
  3107                           ; 0 bytes @ 0x1
  3108                           
  3109  0021                     ?_setCmd_Status:	
  3110                           ; 0 bytes @ 0x1
  3111                           
  3112  0021                     ??_setTxData:	
  3113                           ; 0 bytes @ 0x1
  3114                           
  3115  0021                     ??_setRF_TransceiveGO:	
  3116                           ; 0 bytes @ 0x1
  3117                           
  3118  0021                     ??_Fosc_Set:	
  3119                           ; 0 bytes @ 0x1
  3120                           
  3121  0021                     ??_IO_Set:	
  3122                           ; 0 bytes @ 0x1
  3123                           
  3124  0021                     ??_TMR1_Set:	
  3125                           ; 0 bytes @ 0x1
  3126                           
  3127  0021                     ??_ADC_Set:	
  3128                           ; 0 bytes @ 0x1
  3129                           
  3130  0021                     ??_IOC_Set:	
  3131                           ; 0 bytes @ 0x1
  3132                           
  3133  0021                     ??_WDT_Set:	
  3134                           ; 0 bytes @ 0x1
  3135                           
  3136  0021                     ??_Timeout_Counter:	
  3137                           ; 0 bytes @ 0x1
  3138                           
  3139  0021                     ??_set_TimeoutCleared:	
  3140                           ; 0 bytes @ 0x1
  3141                           
  3142  0021                     ??_Flash_Memory_Read:	
  3143                           ; 0 bytes @ 0x1
  3144                           
  3145  0021                     ?_setMemory_Data:	
  3146                           ; 0 bytes @ 0x1
  3147                           
  3148  0021                     ??_Flash_Memory_Write:	
  3149                           ; 0 bytes @ 0x1
  3150                           
  3151  0021                     ??_getAll_Sw_KeyStatus:	
  3152                           ; 0 bytes @ 0x1
  3153                           
  3154  0021                     ??_WDT_Clearing:	
  3155                           ; 0 bytes @ 0x1
  3156                           
  3157  0021                     ??_setLoad_AH_AL_Restore:	
  3158                           ; 0 bytes @ 0x1
  3159                           
  3160  0021                     ??_getMain_Lights_Count:	
  3161                           ; 0 bytes @ 0x1
  3162                           
  3163  0021                     ??_setTemp_Initialization:	
  3164                           ; 0 bytes @ 0x1
  3165                           
  3166  0021                     ??_setRF_Initialization:	
  3167                           ; 0 bytes @ 0x1
  3168                           
  3169  0021                     ??_getRF_KeyStatus:	
  3170                           ; 0 bytes @ 0x1
  3171                           
  3172  0021                     ??_getSw_KeyStatus:	
  3173                           ; 0 bytes @ 0x1
  3174                           
  3175  0021                     ??_myMain_Initialization:	
  3176                           ; 0 bytes @ 0x1
  3177                           
  3178  0021                     ??_Buzzer_Initialization:	
  3179                           ; 0 bytes @ 0x1
  3180                           
  3181  0021                     ??_Buzzer_Main:	
  3182                           ; 0 bytes @ 0x1
  3183                           
  3184  0021                     ??_DelayOffPointSelect:	
  3185                           ; 0 bytes @ 0x1
  3186                           
  3187  0021                     ?_setDimmerIntr_ControlStatus:	
  3188                           ; 0 bytes @ 0x1
  3189                           
  3190  0021                     ??_getDimmerIntr_DimmingValue:	
  3191                           ; 0 bytes @ 0x1
  3192                           
  3193  0021                     ?_setDimmerIntr_Dimming_Sw:	
  3194                           ; 0 bytes @ 0x1
  3195                           
  3196  0021                     ?_setDimmerIntr_Dimming_RF:	
  3197                           ; 0 bytes @ 0x1
  3198                           
  3199  0021                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3200                           ; 0 bytes @ 0x1
  3201                           
  3202  0021                     ??_DimmerLights_SelectPointer:	
  3203                           ; 0 bytes @ 0x1
  3204                           
  3205  0021                     ??_getDimmerLights_Line:	
  3206                           ; 0 bytes @ 0x1
  3207                           
  3208  0021                     ??_getDimmer_LoadGO:	
  3209                           ; 0 bytes @ 0x1
  3210                           
  3211  0021                     ??_getDimmer_Load_Status:	
  3212                           ; 0 bytes @ 0x1
  3213                           
  3214  0021                     ??_LedPointSelect:	
  3215                           ; 0 bytes @ 0x1
  3216                           
  3217  0021                     ??_Flash_Memory_Unlock:	
  3218                           ; 0 bytes @ 0x1
  3219                           
  3220  0021                     ??_Flash_Memory_Erasing:	
  3221                           ; 0 bytes @ 0x1
  3222                           
  3223  0021                     ??_setMemory_LoopSave:	
  3224                           ; 0 bytes @ 0x1
  3225                           
  3226  0021                     ??_WDT_Main:	
  3227                           ; 0 bytes @ 0x1
  3228                           
  3229  0021                     ??_Temp_Initialization:	
  3230                           ; 0 bytes @ 0x1
  3231                           
  3232  0021                     ??_setRF_Learn:	
  3233                           ; 0 bytes @ 0x1
  3234                           
  3235  0021                     ??_TouchPower:	
  3236                           ; 0 bytes @ 0x1
  3237                           
  3238  0021                     ??_SwPointSelect:	
  3239                           ; 0 bytes @ 0x1
  3240                           
  3241  0021                     ?___bmul:	
  3242                           ; 0 bytes @ 0x1
  3243                           
  3244  0021                     ?_getBuz_GO:	
  3245                           ; 1 bytes @ 0x1
  3246                           
  3247  0021                     ?_getAD:	
  3248                           ; 2 bytes @ 0x1
  3249                           
  3250  0021                     ?___wmul:	
  3251                           ; 2 bytes @ 0x1
  3252                           
  3253  0021                     ?___awdiv:	
  3254                           ; 2 bytes @ 0x1
  3255                           
  3256  0021                     ?___lwdiv:	
  3257                           ; 2 bytes @ 0x1
  3258                           
  3259  0021                     ?___ftpack:	
  3260                           ; 2 bytes @ 0x1
  3261                           
  3262  0021                     setDimmerIntr_ControlStatus@command:	
  3263                           ; 3 bytes @ 0x1
  3264                           
  3265  0021                     setDimmerIntr_Dimming_Sw@command:	
  3266                           ; 1 bytes @ 0x1
  3267                           
  3268  0021                     setDimmerIntr_Dimming_RF@command:	
  3269                           ; 1 bytes @ 0x1
  3270                           
  3271  0021                     setDimmerLights_Line@lights:	
  3272                           ; 1 bytes @ 0x1
  3273                           
  3274  0021                     getDimmer_LoadGO@loadgo:	
  3275                           ; 1 bytes @ 0x1
  3276                           
  3277  0021                     getDimmer_Load_Status@status:	
  3278                           ; 1 bytes @ 0x1
  3279                           
  3280  0021                     getAD@adcon1:	
  3281                           ; 1 bytes @ 0x1
  3282                           
  3283  0021                     setMemory_Data@data:	
  3284                           ; 1 bytes @ 0x1
  3285                           
  3286  0021                     getLoad_OK@ok:	
  3287                           ; 1 bytes @ 0x1
  3288                           
  3289  0021                     getMain_All_LightsStatus@status:	
  3290                           ; 1 bytes @ 0x1
  3291                           
  3292  0021                     getMain_Lights_Count@count:	
  3293                           ; 1 bytes @ 0x1
  3294                           
  3295  0021                     setCmd_Status@cmd:	
  3296                           ; 1 bytes @ 0x1
  3297                           
  3298  0021                     getCmd_Status@number:	
  3299                           ; 1 bytes @ 0x1
  3300                           
  3301  0021                     ___bmul@multiplicand:	
  3302                           ; 1 bytes @ 0x1
  3303                           
  3304  0021                     DelayTime_1us@count:	
  3305                           ; 1 bytes @ 0x1
  3306                           
  3307  0021                     ___wmul@multiplier:	
  3308                           ; 2 bytes @ 0x1
  3309                           
  3310  0021                     ___awdiv@divisor:	
  3311                           ; 2 bytes @ 0x1
  3312                           
  3313  0021                     ___lwdiv@divisor:	
  3314                           ; 2 bytes @ 0x1
  3315                           
  3316  0021                     ___ftpack@arg:	
  3317                           ; 2 bytes @ 0x1
  3318                           
  3319                           
  3320                           ; 3 bytes @ 0x1
  3321  0021                     	ds	1
  3322  0022                     ??_getDimmerLights_Allow_Condition:	
  3323  0022                     ??_setCmd_Status:	
  3324                           ; 0 bytes @ 0x2
  3325                           
  3326  0022                     ??_setMemory_Data:	
  3327                           ; 0 bytes @ 0x2
  3328                           
  3329  0022                     ??_setDimmerIntr_ControlStatus:	
  3330                           ; 0 bytes @ 0x2
  3331                           
  3332  0022                     ??_setDimmerIntr_Dimming_Sw:	
  3333                           ; 0 bytes @ 0x2
  3334                           
  3335  0022                     ??_setDimmerIntr_Dimming_RF:	
  3336                           ; 0 bytes @ 0x2
  3337                           
  3338  0022                     ??_Mcu_Initialization:	
  3339                           ; 0 bytes @ 0x2
  3340                           
  3341  0022                     ??_RF_Initialization:	
  3342                           ; 0 bytes @ 0x2
  3343                           
  3344  0022                     ??___bmul:	
  3345                           ; 0 bytes @ 0x2
  3346                           
  3347  0022                     CC2500_WriteByte@loop_a:	
  3348                           ; 0 bytes @ 0x2
  3349                           
  3350  0022                     CC2500_ReadByte@loop_b:	
  3351                           ; 1 bytes @ 0x2
  3352                           
  3353  0022                     DelayOffPointSelect@sw:	
  3354                           ; 1 bytes @ 0x2
  3355                           
  3356  0022                     getDimmerIntr_DimmingValue@value:	
  3357                           ; 1 bytes @ 0x2
  3358                           
  3359  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2286:	
  3360                           ; 1 bytes @ 0x2
  3361                           
  3362  0022                     DimmerLights_SelectPointer@lights:	
  3363                           ; 1 bytes @ 0x2
  3364                           
  3365  0022                     getDimmerLights_Line@line:	
  3366                           ; 1 bytes @ 0x2
  3367                           
  3368  0022                     LedPointSelect@led:	
  3369                           ; 1 bytes @ 0x2
  3370                           
  3371  0022                     Flash_Memory_Read@i:	
  3372                           ; 1 bytes @ 0x2
  3373                           
  3374  0022                     Flash_Memory_Write@i:	
  3375                           ; 1 bytes @ 0x2
  3376                           
  3377  0022                     setMemory_Modify@command:	
  3378                           ; 1 bytes @ 0x2
  3379                           
  3380  0022                     setMemory_LoopSave@command:	
  3381                           ; 1 bytes @ 0x2
  3382                           
  3383  0022                     setLoad_AH_AL_Restore@i:	
  3384                           ; 1 bytes @ 0x2
  3385                           
  3386  0022                     setRF_Learn@command:	
  3387                           ; 1 bytes @ 0x2
  3388                           
  3389  0022                     getRF_KeyStatus@key:	
  3390                           ; 1 bytes @ 0x2
  3391                           
  3392  0022                     setRF_TransceiveGO@command:	
  3393                           ; 1 bytes @ 0x2
  3394                           
  3395  0022                     SwPointSelect@sw:	
  3396                           ; 1 bytes @ 0x2
  3397                           
  3398  0022                     _getSw_KeyStatus$6151:	
  3399                           ; 1 bytes @ 0x2
  3400                           
  3401  0022                     getAll_Sw_KeyStatus@status:	
  3402                           ; 1 bytes @ 0x2
  3403                           
  3404  0022                     getMain_Lights_Count@status1:	
  3405                           ; 1 bytes @ 0x2
  3406                           
  3407  0022                     getCmd_Status@cmd:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0022                     _getMain_All_Error_Status$6893:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413                           
  3414                           ; 2 bytes @ 0x2
  3415  0022                     	ds	1
  3416  0023                     ??_CC2500_WriteCommand:	
  3417  0023                     ??_CC2500_ReadStatus:	
  3418                           ; 0 bytes @ 0x3
  3419                           
  3420  0023                     ??_DelayTime_1us:	
  3421                           ; 0 bytes @ 0x3
  3422                           
  3423  0023                     ?_CC2500_WriteREG:	
  3424                           ; 0 bytes @ 0x3
  3425                           
  3426  0023                     ??_DlyOff_Initialization:	
  3427                           ; 0 bytes @ 0x3
  3428                           
  3429  0023                     ??_getDimmerLights_Status:	
  3430                           ; 0 bytes @ 0x3
  3431                           
  3432  0023                     ??_setDimmerLights_SwOff:	
  3433                           ; 0 bytes @ 0x3
  3434                           
  3435  0023                     ?_setLED:	
  3436                           ; 0 bytes @ 0x3
  3437                           
  3438  0023                     ??_setLED_Main:	
  3439                           ; 0 bytes @ 0x3
  3440                           
  3441  0023                     ??_getBuz_GO:	
  3442                           ; 0 bytes @ 0x3
  3443                           
  3444  0023                     ??_getDelayOff_GO:	
  3445                           ; 0 bytes @ 0x3
  3446                           
  3447  0023                     ??_setDimmerLights_DimmingOn:	
  3448                           ; 0 bytes @ 0x3
  3449                           
  3450  0023                     ?_setDimmerLights_DimmingRun:	
  3451                           ; 0 bytes @ 0x3
  3452                           
  3453  0023                     ??_Load_Initialization:	
  3454                           ; 0 bytes @ 0x3
  3455                           
  3456  0023                     CC2500_WriteREG@value:	
  3457                           ; 0 bytes @ 0x3
  3458                           
  3459  0023                     DlyOff_Initialization@sw:	
  3460                           ; 1 bytes @ 0x3
  3461                           
  3462  0023                     getDelayOff_GO@sw:	
  3463                           ; 1 bytes @ 0x3
  3464                           
  3465  0023                     setDimmerIntr_ControlStatus@lights:	
  3466                           ; 1 bytes @ 0x3
  3467                           
  3468  0023                     getDimmerIntr_DimmingValue@lights:	
  3469                           ; 1 bytes @ 0x3
  3470                           
  3471  0023                     setDimmerIntr_Dimming_Sw@lights:	
  3472                           ; 1 bytes @ 0x3
  3473                           
  3474  0023                     setDimmerIntr_Dimming_RF@lights:	
  3475                           ; 1 bytes @ 0x3
  3476                           
  3477  0023                     _getAll_DimmerIntr_Dimming_Sw_RF$2287:	
  3478                           ; 1 bytes @ 0x3
  3479                           
  3480  0023                     setDimmerLights_SwOff@sw:	
  3481                           ; 1 bytes @ 0x3
  3482                           
  3483  0023                     setDimmerLights_DimmingOn@sw:	
  3484                           ; 1 bytes @ 0x3
  3485                           
  3486  0023                     _getDimmerLights_Allow_Condition$2393:	
  3487                           ; 1 bytes @ 0x3
  3488                           
  3489  0023                     getDimmerLights_Status@lights:	
  3490                           ; 1 bytes @ 0x3
  3491                           
  3492  0023                     setDimmerLights_DimmingRun@command:	
  3493                           ; 1 bytes @ 0x3
  3494                           
  3495  0023                     setLED@command:	
  3496                           ; 1 bytes @ 0x3
  3497                           
  3498  0023                     Flash_Memory_Read@address:	
  3499                           ; 1 bytes @ 0x3
  3500                           
  3501  0023                     setMemory_Data@address:	
  3502                           ; 1 bytes @ 0x3
  3503                           
  3504  0023                     _getRF_KeyStatus$5098:	
  3505                           ; 1 bytes @ 0x3
  3506                           
  3507  0023                     _getSw_KeyStatus$6152:	
  3508                           ; 1 bytes @ 0x3
  3509                           
  3510  0023                     _getAll_Sw_KeyStatus$6155:	
  3511                           ; 1 bytes @ 0x3
  3512                           
  3513  0023                     getMain_Lights_Count@status2:	
  3514                           ; 1 bytes @ 0x3
  3515                           
  3516  0023                     setCmd_Status@number:	
  3517                           ; 1 bytes @ 0x3
  3518                           
  3519  0023                     ___bmul@product:	
  3520                           ; 1 bytes @ 0x3
  3521                           
  3522  0023                     DelayTime_1us@i:	
  3523                           ; 1 bytes @ 0x3
  3524                           
  3525  0023                     ___wmul@multiplicand:	
  3526                           ; 2 bytes @ 0x3
  3527                           
  3528  0023                     ___awdiv@dividend:	
  3529                           ; 2 bytes @ 0x3
  3530                           
  3531  0023                     ___lwdiv@dividend:	
  3532                           ; 2 bytes @ 0x3
  3533                           
  3534                           
  3535                           ; 2 bytes @ 0x3
  3536  0023                     	ds	1
  3537  0024                     ??_CC2500_WriteREG:	
  3538  0024                     ??_setLED:	
  3539                           ; 0 bytes @ 0x4
  3540                           
  3541  0024                     ??_DelayOff_Initialization:	
  3542                           ; 0 bytes @ 0x4
  3543                           
  3544  0024                     ??_setDimmerLights_DimmingRun:	
  3545                           ; 0 bytes @ 0x4
  3546                           
  3547  0024                     ??_getAD:	
  3548                           ; 0 bytes @ 0x4
  3549                           
  3550  0024                     CC2500_WriteCommand@command:	
  3551                           ; 0 bytes @ 0x4
  3552                           
  3553  0024                     CC2500_ReadStatus@status_addr:	
  3554                           ; 1 bytes @ 0x4
  3555                           
  3556  0024                     getDelayOff_GO@go:	
  3557                           ; 1 bytes @ 0x4
  3558                           
  3559  0024                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3560                           ; 1 bytes @ 0x4
  3561                           
  3562  0024                     _getDimmerLights_Allow_Condition$2394:	
  3563                           ; 1 bytes @ 0x4
  3564                           
  3565  0024                     getDimmerLights_Status@status:	
  3566                           ; 1 bytes @ 0x4
  3567                           
  3568  0024                     setLED@led:	
  3569                           ; 1 bytes @ 0x4
  3570                           
  3571  0024                     getAD@adcon0:	
  3572                           ; 1 bytes @ 0x4
  3573                           
  3574  0024                     Flash_Memory_Read@ret:	
  3575                           ; 1 bytes @ 0x4
  3576                           
  3577  0024                     getSw_KeyStatus@status:	
  3578                           ; 1 bytes @ 0x4
  3579                           
  3580  0024                     ___bmul@multiplier:	
  3581                           ; 1 bytes @ 0x4
  3582                           
  3583  0024                     ___ftpack@exp:	
  3584                           ; 1 bytes @ 0x4
  3585                           
  3586  0024                     _getMain_All_Error_Status$6894:	
  3587                           ; 1 bytes @ 0x4
  3588                           
  3589                           
  3590                           ; 2 bytes @ 0x4
  3591  0024                     	ds	1
  3592  0025                     ??_CC2500_ClearTXFIFO:	
  3593  0025                     ??_CC2500_ClearRXFIFO:	
  3594                           ; 0 bytes @ 0x5
  3595                           
  3596  0025                     ??_CC2500_SIDLEMode:	
  3597                           ; 0 bytes @ 0x5
  3598                           
  3599  0025                     ??_setLED_Initialization:	
  3600                           ; 0 bytes @ 0x5
  3601                           
  3602  0025                     ??_Flash_Memory_Modify:	
  3603                           ; 0 bytes @ 0x5
  3604                           
  3605  0025                     ??_RF_RxDisable:	
  3606                           ; 0 bytes @ 0x5
  3607                           
  3608  0025                     ??_setSw_Initialization:	
  3609                           ; 0 bytes @ 0x5
  3610                           
  3611  0025                     ??_CC2500_TxData:	
  3612                           ; 0 bytes @ 0x5
  3613                           
  3614  0025                     ??_CC2500_RxData:	
  3615                           ; 0 bytes @ 0x5
  3616                           
  3617  0025                     ??_Flash_Memory_Initialization:	
  3618                           ; 0 bytes @ 0x5
  3619                           
  3620  0025                     ??_getLoad_AD:	
  3621                           ; 0 bytes @ 0x5
  3622                           
  3623  0025                     ??_getTemp_AD:	
  3624                           ; 0 bytes @ 0x5
  3625                           
  3626  0025                     ??___wmul:	
  3627                           ; 0 bytes @ 0x5
  3628                           
  3629  0025                     ??___awdiv:	
  3630                           ; 0 bytes @ 0x5
  3631                           
  3632  0025                     ??___lwdiv:	
  3633                           ; 0 bytes @ 0x5
  3634                           
  3635  0025                     CC2500_WriteREG@w_addr:	
  3636                           ; 0 bytes @ 0x5
  3637                           
  3638  0025                     _getDimmerLights_Allow_Condition$2395:	
  3639                           ; 1 bytes @ 0x5
  3640                           
  3641  0025                     setDimmerLights_DimmingRun@lights:	
  3642                           ; 1 bytes @ 0x5
  3643                           
  3644  0025                     setLED_Initialization@led:	
  3645                           ; 1 bytes @ 0x5
  3646                           
  3647  0025                     setLED_Main@led:	
  3648                           ; 1 bytes @ 0x5
  3649                           
  3650  0025                     setSw_Initialization@sw:	
  3651                           ; 1 bytes @ 0x5
  3652                           
  3653  0025                     getSw_KeyStatus@sw:	
  3654                           ; 1 bytes @ 0x5
  3655                           
  3656  0025                     ___ftpack@sign:	
  3657                           ; 1 bytes @ 0x5
  3658                           
  3659  0025                     getBuz_GO@i:	
  3660                           ; 1 bytes @ 0x5
  3661                           
  3662  0025                     DelayTime_1us@j:	
  3663                           ; 2 bytes @ 0x5
  3664                           
  3665  0025                     ___wmul@product:	
  3666                           ; 2 bytes @ 0x5
  3667                           
  3668                           
  3669                           ; 2 bytes @ 0x5
  3670  0025                     	ds	1
  3671  0026                     ??_CC2500_InitSetREG:	
  3672  0026                     ??_CC2500_InitPATable:	
  3673                           ; 0 bytes @ 0x6
  3674                           
  3675  0026                     ??___ftpack:	
  3676                           ; 0 bytes @ 0x6
  3677                           
  3678  0026                     ??_LED_Initialization:	
  3679                           ; 0 bytes @ 0x6
  3680                           
  3681  0026                     ??_LED_Main:	
  3682                           ; 0 bytes @ 0x6
  3683                           
  3684  0026                     ??_Switch_Initialization:	
  3685                           ; 0 bytes @ 0x6
  3686                           
  3687  0026                     CC2500_TxData@loop_e:	
  3688                           ; 0 bytes @ 0x6
  3689                           
  3690  0026                     CC2500_RxData@loop_f:	
  3691                           ; 1 bytes @ 0x6
  3692                           
  3693  0026                     getDimmerLights_Allow_Condition@lights:	
  3694                           ; 1 bytes @ 0x6
  3695                           
  3696  0026                     Flash_Memory_Initialization@value:	
  3697                           ; 1 bytes @ 0x6
  3698                           
  3699  0026                     Flash_Memory_Modify@i:	
  3700                           ; 1 bytes @ 0x6
  3701                           
  3702  0026                     getTemp_AD@channel:	
  3703                           ; 1 bytes @ 0x6
  3704                           
  3705  0026                     getMain_All_Error_Status@command:	
  3706                           ; 1 bytes @ 0x6
  3707                           
  3708  0026                     ___awdiv@counter:	
  3709                           ; 1 bytes @ 0x6
  3710                           
  3711  0026                     ___lwdiv@quotient:	
  3712                           ; 1 bytes @ 0x6
  3713                           
  3714                           
  3715                           ; 2 bytes @ 0x6
  3716  0026                     	ds	1
  3717  0027                     ??_CC2500_PowerRST:	
  3718  0027                     ??_CC2500_FrequencyCabr:	
  3719                           ; 0 bytes @ 0x7
  3720                           
  3721  0027                     ??_Flash_Memory_Main:	
  3722                           ; 0 bytes @ 0x7
  3723                           
  3724  0027                     CC2500_InitSetREG@temp1:	
  3725                           ; 0 bytes @ 0x7
  3726                           
  3727  0027                     CC2500_InitPATable@temp:	
  3728                           ; 1 bytes @ 0x7
  3729                           
  3730  0027                     getDimmerLights_Allow_Condition@allow:	
  3731                           ; 1 bytes @ 0x7
  3732                           
  3733  0027                     getLoad_AD@channel:	
  3734                           ; 1 bytes @ 0x7
  3735                           
  3736  0027                     getMain_All_Error_Status@status:	
  3737                           ; 1 bytes @ 0x7
  3738                           
  3739  0027                     ___awdiv@sign:	
  3740                           ; 1 bytes @ 0x7
  3741                           
  3742  0027                     getTemp_AD@ADRES:	
  3743                           ; 1 bytes @ 0x7
  3744                           
  3745                           
  3746                           ; 2 bytes @ 0x7
  3747  0027                     	ds	1
  3748  0028                     CC2500_InitSetREG@temp2:	
  3749  0028                     CC2500_InitPATable@loop_d:	
  3750                           ; 1 bytes @ 0x8
  3751                           
  3752  0028                     Flash_Memory_Main@key_Status:	
  3753                           ; 1 bytes @ 0x8
  3754                           
  3755  0028                     getLoad_AD@k:	
  3756                           ; 1 bytes @ 0x8
  3757                           
  3758  0028                     ___lwdiv@counter:	
  3759                           ; 1 bytes @ 0x8
  3760                           
  3761  0028                     ___awdiv@quotient:	
  3762                           ; 1 bytes @ 0x8
  3763                           
  3764                           
  3765                           ; 2 bytes @ 0x8
  3766  0028                     	ds	1
  3767  0029                     ??_Load_Main:	
  3768  0029                     ?___awtoft:	
  3769                           ; 0 bytes @ 0x9
  3770                           
  3771  0029                     CC2500_InitSetREG@loop_c:	
  3772                           ; 3 bytes @ 0x9
  3773                           
  3774  0029                     _Flash_Memory_Main$3300:	
  3775                           ; 1 bytes @ 0x9
  3776                           
  3777  0029                     getLoad_AD@j:	
  3778                           ; 1 bytes @ 0x9
  3779                           
  3780  0029                     ___awtoft@c:	
  3781                           ; 1 bytes @ 0x9
  3782                           
  3783                           
  3784                           ; 2 bytes @ 0x9
  3785  0029                     	ds	1
  3786  002A                     ?_setBuz:	
  3787  002A                     ??_CC2500_PowerOnInitial:	
  3788                           ; 0 bytes @ 0xA
  3789                           
  3790  002A                     setBuz@time:	
  3791                           ; 0 bytes @ 0xA
  3792                           
  3793  002A                     getLoad_AD@ADRES:	
  3794                           ; 2 bytes @ 0xA
  3795                           
  3796                           
  3797                           ; 2 bytes @ 0xA
  3798  002A                     	ds	1
  3799  002B                     Load_Main@error:	
  3800                           
  3801                           ; 1 bytes @ 0xB
  3802  002B                     	ds	1
  3803  002C                     ??_setBuz:	
  3804  002C                     ??___awtoft:	
  3805                           ; 0 bytes @ 0xC
  3806                           
  3807  002C                     getLoad_AD@i:	
  3808                           ; 0 bytes @ 0xC
  3809                           
  3810  002C                     _Load_Main$3679:	
  3811                           ; 1 bytes @ 0xC
  3812                           
  3813                           
  3814                           ; 2 bytes @ 0xC
  3815  002C                     	ds	1
  3816  002D                     setBuz@count:	
  3817                           
  3818                           ; 1 bytes @ 0xD
  3819  002D                     	ds	1
  3820  002E                     ??_setDimmerLights_SwOn:	
  3821  002E                     ??_my_MainTimer:	
  3822                           ; 0 bytes @ 0xE
  3823                           
  3824  002E                     ??_Exception_Main:	
  3825                           ; 0 bytes @ 0xE
  3826                           
  3827  002E                     Load_Main@ErrorCountValue:	
  3828                           ; 0 bytes @ 0xE
  3829                           
  3830  002E                     ___awtoft@sign:	
  3831                           ; 1 bytes @ 0xE
  3832                           
  3833                           
  3834                           ; 1 bytes @ 0xE
  3835  002E                     	ds	1
  3836  002F                     ?___ftdiv:	
  3837  002F                     ?___ftmul:	
  3838                           ; 3 bytes @ 0xF
  3839                           
  3840  002F                     _setDimmerLights_SwOn$2332:	
  3841                           ; 3 bytes @ 0xF
  3842                           
  3843  002F                     Load_Main@Load_RunStatus:	
  3844                           ; 1 bytes @ 0xF
  3845                           
  3846  002F                     Exception_Main@status:	
  3847                           ; 1 bytes @ 0xF
  3848                           
  3849  002F                     ___ftdiv@f2:	
  3850                           ; 1 bytes @ 0xF
  3851                           
  3852  002F                     ___ftmul@f1:	
  3853                           ; 3 bytes @ 0xF
  3854                           
  3855                           
  3856                           ; 3 bytes @ 0xF
  3857  002F                     	ds	1
  3858  0030                     _setDimmerLights_SwOn$2341:	
  3859  0030                     Load_Main@LightsCount:	
  3860                           ; 1 bytes @ 0x10
  3861                           
  3862  0030                     Exception_Main@count:	
  3863                           ; 1 bytes @ 0x10
  3864                           
  3865                           
  3866                           ; 1 bytes @ 0x10
  3867  0030                     	ds	1
  3868  0031                     setDimmerLights_SwOn@idle:	
  3869  0031                     Exception_Main@error:	
  3870                           ; 1 bytes @ 0x11
  3871                           
  3872  0031                     Load_Main@i:	
  3873                           ; 1 bytes @ 0x11
  3874                           
  3875                           
  3876                           ; 2 bytes @ 0x11
  3877  0031                     	ds	1
  3878  0032                     setDimmerLights_SwOn@sw:	
  3879  0032                     Exception_Main@i:	
  3880                           ; 1 bytes @ 0x12
  3881                           
  3882  0032                     ___ftdiv@f1:	
  3883                           ; 2 bytes @ 0x12
  3884                           
  3885  0032                     ___ftmul@f2:	
  3886                           ; 3 bytes @ 0x12
  3887                           
  3888                           
  3889                           ; 3 bytes @ 0x12
  3890  0032                     	ds	1
  3891  0033                     ??_setSw_Main:	
  3892                           
  3893                           ; 0 bytes @ 0x13
  3894  0033                     	ds	1
  3895  0034                     Exception_Main@i_6906:	
  3896                           
  3897                           ; 2 bytes @ 0x14
  3898  0034                     	ds	1
  3899  0035                     ??___ftdiv:	
  3900  0035                     ??___ftmul:	
  3901                           ; 0 bytes @ 0x15
  3902                           
  3903  0035                     setSw_Main@sw:	
  3904                           ; 0 bytes @ 0x15
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x15
  3908  0035                     	ds	1
  3909  0036                     ??_Switch_Main:	
  3910  0036                     Exception_Main@lights:	
  3911                           ; 0 bytes @ 0x16
  3912                           
  3913                           
  3914                           ; 1 bytes @ 0x16
  3915  0036                     	ds	3
  3916  0039                     ___ftdiv@cntr:	
  3917  0039                     ___ftmul@exp:	
  3918                           ; 1 bytes @ 0x19
  3919                           
  3920                           
  3921                           ; 1 bytes @ 0x19
  3922  0039                     	ds	1
  3923  003A                     ___ftdiv@f3:	
  3924  003A                     ___ftmul@f3_as_product:	
  3925                           ; 3 bytes @ 0x1A
  3926                           
  3927                           
  3928                           ; 3 bytes @ 0x1A
  3929  003A                     	ds	3
  3930  003D                     ___ftdiv@exp:	
  3931  003D                     ___ftmul@cntr:	
  3932                           ; 1 bytes @ 0x1D
  3933                           
  3934                           
  3935                           ; 1 bytes @ 0x1D
  3936  003D                     	ds	1
  3937  003E                     ___ftdiv@sign:	
  3938  003E                     ___ftmul@sign:	
  3939                           ; 1 bytes @ 0x1E
  3940                           
  3941                           
  3942                           ; 1 bytes @ 0x1E
  3943  003E                     	ds	1
  3944  003F                     ?___ftneg:	
  3945  003F                     ___ftneg@f1:	
  3946                           ; 3 bytes @ 0x1F
  3947                           
  3948                           
  3949                           ; 3 bytes @ 0x1F
  3950  003F                     	ds	3
  3951  0042                     ??___ftneg:	
  3952  0042                     ?___ftadd:	
  3953                           ; 0 bytes @ 0x22
  3954                           
  3955  0042                     ___ftadd@f1:	
  3956                           ; 3 bytes @ 0x22
  3957                           
  3958                           
  3959                           ; 3 bytes @ 0x22
  3960  0042                     	ds	3
  3961  0045                     ___ftadd@f2:	
  3962                           
  3963                           ; 3 bytes @ 0x25
  3964  0045                     	ds	3
  3965  0048                     ??___ftadd:	
  3966                           
  3967                           ; 0 bytes @ 0x28
  3968  0048                     	ds	4
  3969  004C                     ___ftadd@sign:	
  3970                           
  3971                           ; 1 bytes @ 0x2C
  3972  004C                     	ds	1
  3973  004D                     ___ftadd@exp2:	
  3974                           
  3975                           ; 1 bytes @ 0x2D
  3976  004D                     	ds	1
  3977  004E                     ___ftadd@exp1:	
  3978                           
  3979                           ; 1 bytes @ 0x2E
  3980  004E                     	ds	1
  3981  004F                     ?___fttol:	
  3982  004F                     ___fttol@f1:	
  3983                           ; 4 bytes @ 0x2F
  3984                           
  3985                           
  3986                           ; 3 bytes @ 0x2F
  3987  004F                     	ds	4
  3988  0053                     ??___fttol:	
  3989                           
  3990                           ; 0 bytes @ 0x33
  3991  0053                     	ds	4
  3992  0057                     ___fttol@sign1:	
  3993                           
  3994                           ; 1 bytes @ 0x37
  3995  0057                     	ds	1
  3996  0058                     ___fttol@lval:	
  3997                           
  3998                           ; 4 bytes @ 0x38
  3999  0058                     	ds	4
  4000  005C                     ___fttol@exp1:	
  4001                           
  4002                           ; 1 bytes @ 0x3C
  4003  005C                     	ds	1
  4004  005D                     ??_getDimmerLights_ValueToPercent:	
  4005  005D                     ??_getDimmerLights_PercentToValue:	
  4006                           ; 0 bytes @ 0x3D
  4007                           
  4008                           
  4009                           ; 0 bytes @ 0x3D
  4010  005D                     	ds	2
  4011  005F                     getDimmerLights_PercentToValue@value:	
  4012  005F                     getDimmerLights_ValueToPercent@value:	
  4013                           ; 1 bytes @ 0x3F
  4014                           
  4015                           
  4016                           ; 1 bytes @ 0x3F
  4017  005F                     	ds	1
  4018  0060                     getDimmerLights_PercentToValue@i:	
  4019  0060                     getDimmerLights_ValueToPercent@i:	
  4020                           ; 3 bytes @ 0x40
  4021                           
  4022                           
  4023                           ; 3 bytes @ 0x40
  4024  0060                     	ds	3
  4025  0063                     ?_setProductData:	
  4026  0063                     ??_DimmerIntr_Initialization:	
  4027                           ; 0 bytes @ 0x43
  4028                           
  4029  0063                     ?_setDimmerIntr_DimmingValue:	
  4030                           ; 0 bytes @ 0x43
  4031                           
  4032  0063                     ?_setDimmerIntr_MaxmumValue:	
  4033                           ; 0 bytes @ 0x43
  4034                           
  4035  0063                     setDimmerIntr_DimmingValue@value:	
  4036                           ; 0 bytes @ 0x43
  4037                           
  4038  0063                     setDimmerIntr_MaxmumValue@value:	
  4039                           ; 1 bytes @ 0x43
  4040                           
  4041  0063                     setProductData@value:	
  4042                           ; 1 bytes @ 0x43
  4043                           
  4044                           
  4045                           ; 1 bytes @ 0x43
  4046  0063                     	ds	1
  4047  0064                     ??_setProductData:	
  4048  0064                     ??_setDimmerIntr_DimmingValue:	
  4049                           ; 0 bytes @ 0x44
  4050                           
  4051  0064                     ??_setDimmerIntr_MaxmumValue:	
  4052                           ; 0 bytes @ 0x44
  4053                           
  4054  0064                     ??_DimmerLights_Initialization:	
  4055                           ; 0 bytes @ 0x44
  4056                           
  4057                           
  4058                           ; 0 bytes @ 0x44
  4059  0064                     	ds	1
  4060  0065                     setDimmerIntr_DimmingValue@lights:	
  4061  0065                     setDimmerIntr_MaxmumValue@lights:	
  4062                           ; 1 bytes @ 0x45
  4063                           
  4064  0065                     setProductData@address:	
  4065                           ; 1 bytes @ 0x45
  4066                           
  4067                           
  4068                           ; 1 bytes @ 0x45
  4069  0065                     	ds	1
  4070  0066                     ??_DlyOff_Main:	
  4071  0066                     ?_setRF_DimmerLights:	
  4072                           ; 0 bytes @ 0x46
  4073                           
  4074  0066                     ??_setTemp_Main:	
  4075                           ; 0 bytes @ 0x46
  4076                           
  4077  0066                     ??_setLog_Code:	
  4078                           ; 0 bytes @ 0x46
  4079                           
  4080  0066                     ??_setRFSW_AdjControl:	
  4081                           ; 0 bytes @ 0x46
  4082                           
  4083  0066                     ?_setDelayOff_GO:	
  4084                           ; 0 bytes @ 0x46
  4085                           
  4086  0066                     setDelayOff_GO@command:	
  4087                           ; 0 bytes @ 0x46
  4088                           
  4089  0066                     setRF_DimmerLights@on:	
  4090                           ; 1 bytes @ 0x46
  4091                           
  4092                           
  4093                           ; 1 bytes @ 0x46
  4094  0066                     	ds	1
  4095  0067                     ??_setRF_DimmerLights:	
  4096  0067                     ??_Temp_Main:	
  4097                           ; 0 bytes @ 0x47
  4098                           
  4099  0067                     setDelayOff_GO@value:	
  4100                           ; 0 bytes @ 0x47
  4101                           
  4102                           
  4103                           ; 1 bytes @ 0x47
  4104  0067                     	ds	1
  4105  0068                     ??_setDelayOff_GO:	
  4106  0068                     DlyOff_Main@sw:	
  4107                           ; 0 bytes @ 0x48
  4108                           
  4109  0068                     setRFSW_AdjControl@status:	
  4110                           ; 1 bytes @ 0x48
  4111                           
  4112                           
  4113                           ; 1 bytes @ 0x48
  4114  0068                     	ds	1
  4115  0069                     ??_DelayOff_Main:	
  4116  0069                     setRFSW_AdjControl@sw:	
  4117                           ; 0 bytes @ 0x49
  4118                           
  4119  0069                     setRF_DimmerLights@status:	
  4120                           ; 1 bytes @ 0x49
  4121                           
  4122                           
  4123                           ; 1 bytes @ 0x49
  4124  0069                     	ds	1
  4125  006A                     setDelayOff_GO@i:	
  4126  006A                     setRF_DimmerLights@lights:	
  4127                           ; 1 bytes @ 0x4A
  4128                           
  4129                           
  4130                           ; 1 bytes @ 0x4A
  4131  006A                     	ds	1
  4132  006B                     ?_setDimmerLights_Dimming:	
  4133  006B                     setDelayOff_GO@j:	
  4134                           ; 0 bytes @ 0x4B
  4135                           
  4136  006B                     setDimmerLights_Dimming@status:	
  4137                           ; 1 bytes @ 0x4B
  4138                           
  4139                           
  4140                           ; 1 bytes @ 0x4B
  4141  006B                     	ds	1
  4142  006C                     ??_setDimmerLights_Dimming:	
  4143  006C                     setDelayOff_GO@k:	
  4144                           ; 0 bytes @ 0x4C
  4145                           
  4146                           
  4147                           ; 1 bytes @ 0x4C
  4148  006C                     	ds	1
  4149  006D                     setDelayOff_GO@sw:	
  4150                           
  4151                           ; 1 bytes @ 0x4D
  4152  006D                     	ds	1
  4153  006E                     ??_setDimmerLights_Main:	
  4154  006E                     ??_setControl_Lights_Table:	
  4155                           ; 0 bytes @ 0x4E
  4156                           
  4157  006E                     ??_DimmerLights_Main:	
  4158                           ; 0 bytes @ 0x4E
  4159                           
  4160  006E                     ??_RF_Main:	
  4161                           ; 0 bytes @ 0x4E
  4162                           
  4163  006E                     ??_main:	
  4164                           ; 0 bytes @ 0x4E
  4165                           
  4166                           
  4167                           	psect	maintext
  4168  13A9                     __pmaintext:	
  4169                           ; 0 bytes @ 0x4E
  4170 ;;
  4171 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4172 ;;
  4173 ;; *************** function _main *****************
  4174 ;; Defined at:
  4175 ;;		line 7 in file "../src/main_B1.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  argc            2    0[BANK4 ] int 
  4178 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;		None
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  2    0[BANK4 ] int 
  4183 ;; Registers used:
  4184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 17F/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4190 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4194 ;;Total ram usage:        4 bytes
  4195 ;; Hardware stack levels required when called:   13
  4196 ;; This function calls:
  4197 ;;		_Buzzer_Initialization
  4198 ;;		_Buzzer_Main
  4199 ;;		_CC2500_PowerOnInitial
  4200 ;;		_DelayOff_Initialization
  4201 ;;		_DelayOff_Main
  4202 ;;		_DimmerLights_Initialization
  4203 ;;		_DimmerLights_Main
  4204 ;;		_Exception_Main
  4205 ;;		_Flash_Memory_Initialization
  4206 ;;		_Flash_Memory_Main
  4207 ;;		_LED_Initialization
  4208 ;;		_LED_Main
  4209 ;;		_Load_Initialization
  4210 ;;		_Load_Main
  4211 ;;		_Mcu_Initialization
  4212 ;;		_RF_Initialization
  4213 ;;		_RF_Main
  4214 ;;		_Switch_Initialization
  4215 ;;		_Switch_Main
  4216 ;;		_Temp_Initialization
  4217 ;;		_Temp_Main
  4218 ;;		_WDT_Main
  4219 ;;		_getLoad_AD
  4220 ;;		_getTemp_AD
  4221 ;;		_myMain_Initialization
  4222 ;;		_my_MainTimer
  4223 ;; This function is called by:
  4224 ;;		Startup code after reset
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _main
  4230  13A9                     _main:	
  4231                           
  4232                           ;main_B1.c: 8: myMain_Initialization();
  4233                           
  4234                           ;incstack = 0
  4235                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4236  13A9  3190  2000  3193   	fcall	_myMain_Initialization
  4237                           
  4238                           ;main_B1.c: 9: Mcu_Initialization();
  4239  13AC  319A  228C  3193   	fcall	_Mcu_Initialization
  4240                           
  4241                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4242  13AF  3186  262A  3193   	fcall	_Flash_Memory_Initialization
  4243                           
  4244                           ;main_B1.c: 11: LED_Initialization();
  4245  13B2  3199  2197  3193   	fcall	_LED_Initialization
  4246                           
  4247                           ;main_B1.c: 12: Buzzer_Initialization();
  4248  13B5  3198  20AD  3193   	fcall	_Buzzer_Initialization
  4249                           
  4250                           ;main_B1.c: 14: ;;
  4251                           ;main_B1.c: 15: Temp_Initialization();
  4252  13B8  3198  20B9  3193   	fcall	_Temp_Initialization
  4253                           
  4254                           ;main_B1.c: 16: Load_Initialization();
  4255  13BB  3198  20B0  3193   	fcall	_Load_Initialization
  4256                           
  4257                           ;main_B1.c: 17: ;;
  4258                           ;main_B1.c: 18: DelayOff_Initialization();
  4259  13BE  3198  20F1  3193   	fcall	_DelayOff_Initialization
  4260                           
  4261                           ;main_B1.c: 20: DimmerLights_Initialization();
  4262  13C1  3199  213B  3193   	fcall	_DimmerLights_Initialization
  4263                           
  4264                           ;main_B1.c: 21: ;;
  4265                           ;main_B1.c: 22: ;;
  4266                           ;main_B1.c: 23: ;;
  4267                           ;main_B1.c: 24: Switch_Initialization();
  4268  13C4  3199  2121  3193   	fcall	_Switch_Initialization
  4269                           
  4270                           ;main_B1.c: 25: RF_Initialization();
  4271  13C7  3198  20B3  3193   	fcall	_RF_Initialization
  4272                           
  4273                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4274  13CA  319B  2339  3193   	fcall	_CC2500_PowerOnInitial
  4275  13CD                     l10608:	
  4276                           ;main_B1.c: 27: ;;
  4277                           ;main_B1.c: 28: ;;
  4278                           ;main_B1.c: 30: while (1) {
  4279                           
  4280                           
  4281                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4282  13CD  0021               	movlb	1	; select bank1
  4283  13CE  1C2E               	btfss	_myMain^(0+128),0
  4284  13CF  2BD8               	goto	l10612
  4285                           
  4286                           ;main_B1.c: 38: getLoad_AD(0x05);
  4287  13D0  3005               	movlw	5
  4288  13D1  3189  213A  3193   	fcall	_getLoad_AD
  4289                           
  4290                           ;main_B1.c: 42: getTemp_AD(0x09);
  4291  13D4  3009               	movlw	9
  4292  13D5  3191  2131  3193   	fcall	_getTemp_AD
  4293  13D8                     l10612:	
  4294                           
  4295                           ;main_B1.c: 57: }
  4296                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4297  13D8  0022               	movlb	2	; select bank2
  4298  13D9  1C31               	btfss	_Timer1^(0+256),0
  4299  13DA  2BCD               	goto	l10608
  4300                           
  4301                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4302  13DB  1031               	bcf	_Timer1^(0+256),0
  4303                           
  4304                           ;main_B1.c: 96: my_MainTimer();
  4305  13DC  3190  20B7  3193   	fcall	_my_MainTimer
  4306                           
  4307                           ;main_B1.c: 97: WDT_Main();
  4308  13DF  319A  229E  3193   	fcall	_WDT_Main
  4309                           
  4310                           ;main_B1.c: 98: ;;
  4311                           ;main_B1.c: 99: ;;
  4312                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4313  13E2  0021               	movlb	1	; select bank1
  4314  13E3  1C2E               	btfss	_myMain^(0+128),0
  4315  13E4  2BCD               	goto	l10608
  4316                           
  4317                           ;main_B1.c: 101: Flash_Memory_Main();
  4318  13E5  3191  21F3  3193   	fcall	_Flash_Memory_Main
  4319                           
  4320                           ;main_B1.c: 103: LED_Main();
  4321  13E8  3199  21A3  3193   	fcall	_LED_Main
  4322                           
  4323                           ;main_B1.c: 104: Buzzer_Main();
  4324  13EB  3192  22B8  3193   	fcall	_Buzzer_Main
  4325                           
  4326                           ;main_B1.c: 106: ;;
  4327                           ;main_B1.c: 107: Temp_Main();
  4328  13EE  3198  20BC  3193   	fcall	_Temp_Main
  4329                           
  4330                           ;main_B1.c: 108: Load_Main();
  4331  13F1  3180  2052  3193   	fcall	_Load_Main
  4332                           
  4333                           ;main_B1.c: 109: ;;
  4334                           ;main_B1.c: 111: ;;
  4335                           ;main_B1.c: 112: DimmerLights_Main();
  4336  13F4  319D  256F  3193   	fcall	_DimmerLights_Main
  4337                           
  4338                           ;main_B1.c: 113: Switch_Main();
  4339  13F7  3199  215C  3193   	fcall	_Switch_Main
  4340                           
  4341                           ;main_B1.c: 114: ;;
  4342                           ;main_B1.c: 115: ;;
  4343                           ;main_B1.c: 117: RF_Main();
  4344  13FA  3198  20B6  3193   	fcall	_RF_Main
  4345                           
  4346                           ;main_B1.c: 118: DelayOff_Main();
  4347  13FD  3198  20F9  3193   	fcall	_DelayOff_Main
  4348                           
  4349                           ;main_B1.c: 119: ;;
  4350                           ;main_B1.c: 120: ;;
  4351                           ;main_B1.c: 121: Exception_Main();
  4352  1400  3184  247E  3193   	fcall	_Exception_Main
  4353  1403  2BCD               	goto	l10608
  4354  1404                     __end_of_main:	
  4355                           ;main_B1.c: 128: }
  4356                           ;main_B1.c: 129: }
  4357                           ;main_B1.c: 163: }
  4358                           ;main_B1.c: 164: return (0);
  4359                           ;	Return value of _main is never used
  4360                           
  4361                           
  4362                           	psect	text1
  4363  10B7                     __ptext1:	
  4364 ;; *************** function _my_MainTimer *****************
  4365 ;; Defined at:
  4366 ;;		line 185 in file "../src/main_B1.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;		None
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;		None
  4371 ;; Return value:  Size  Location     Type
  4372 ;;		None               void
  4373 ;; Registers used:
  4374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;Total ram usage:        1 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    7
  4387 ;; This function calls:
  4388 ;;		_setBuz
  4389 ;; This function is called by:
  4390 ;;		_main
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _my_MainTimer
  4396  10B7                     _my_MainTimer:	
  4397                           
  4398                           ;main_B1.c: 187: if (myMain.PowerON == 0) {
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4402  10B7  0021               	movlb	1	; select bank1
  4403  10B8  182E               	btfsc	_myMain^(0+128),0
  4404  10B9  28D1               	goto	l10506
  4405                           
  4406                           ;main_B1.c: 188: myMain.PowerCount++;
  4407  10BA  3001               	movlw	1
  4408  10BB  0020               	movlb	0	; select bank0
  4409  10BC  00AE               	movwf	??_my_MainTimer
  4410  10BD  082E               	movf	??_my_MainTimer,w
  4411  10BE  0021               	movlb	1	; select bank1
  4412  10BF  07AF               	addwf	(_myMain^(0+128)+1),f
  4413                           
  4414                           ;main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4415  10C0  082F               	movf	(_myMain^(0+128)+1),w
  4416  10C1  3A4B               	xorlw	75
  4417  10C2  1D03               	skipz
  4418  10C3  0008               	return
  4419                           
  4420                           ;main_B1.c: 190: myMain.PowerCount = 0;
  4421  10C4  01AF               	clrf	(_myMain^(0+128)+1)
  4422                           
  4423                           ;main_B1.c: 191: myMain.PowerON = 1;
  4424  10C5  142E               	bsf	_myMain^(0+128),0
  4425                           
  4426                           ;main_B1.c: 196: setBuz(3, 50);
  4427  10C6  3032               	movlw	50
  4428  10C7  0020               	movlb	0	; select bank0
  4429  10C8  00AA               	movwf	setBuz@time
  4430  10C9  3000               	movlw	0
  4431  10CA  00AB               	movwf	setBuz@time+1
  4432  10CB  3003               	movlw	3
  4433  10CC  3188  2000         	fcall	_setBuz
  4434                           
  4435                           ;main_B1.c: 197: myMain.SelfTest = 1;
  4436  10CE  0021               	movlb	1	; select bank1
  4437  10CF  162E               	bsf	_myMain^(0+128),4
  4438                           
  4439                           ;main_B1.c: 206: }
  4440                           ;main_B1.c: 207: } else {
  4441  10D0  0008               	return
  4442  10D1                     l10506:	
  4443                           
  4444                           ;main_B1.c: 208: myMain.PowerCount++;
  4445  10D1  3001               	movlw	1
  4446  10D2  0020               	movlb	0	; select bank0
  4447  10D3  00AE               	movwf	??_my_MainTimer
  4448  10D4  082E               	movf	??_my_MainTimer,w
  4449  10D5  0021               	movlb	1	; select bank1
  4450  10D6  07AF               	addwf	(_myMain^(0+128)+1),f
  4451                           
  4452                           ;main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4453  10D7  082F               	movf	(_myMain^(0+128)+1),w
  4454  10D8  3A32               	xorlw	50
  4455  10D9  1903               	btfsc	3,2
  4456                           
  4457                           ;main_B1.c: 210: myMain.PowerCount = 0;
  4458  10DA  01AF               	clrf	(_myMain^(0+128)+1)
  4459                           
  4460                           ;main_B1.c: 226: }
  4461                           ;main_B1.c: 228: myMain.Count1++;
  4462  10DB  3001               	movlw	1
  4463  10DC  07B2               	addwf	(_myMain^(0+128)+4),f
  4464  10DD  3000               	movlw	0
  4465  10DE  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4466                           
  4467                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4468  10DF  3004               	movlw	4
  4469  10E0  3EAE               	addlw	_myMain& (0+255)
  4470  10E1  0086               	movwf	6
  4471  10E2  0187               	clrf	7
  4472  10E3  3F40               	moviw [0]fsr1
  4473  10E4  3A32               	xorlw	50
  4474  10E5  1D03               	skipz
  4475  10E6  28E9               	goto	u12735
  4476  10E7  3F41               	moviw [1]fsr1
  4477  10E8  3A00               	xorlw	0
  4478  10E9                     u12735:	
  4479  10E9  1D03               	skipz
  4480  10EA  0008               	return
  4481                           
  4482                           ;main_B1.c: 230: myMain.Count1 = 0;
  4483  10EB  01B2               	clrf	(_myMain^(0+128)+4)
  4484  10EC  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4485                           
  4486                           ;main_B1.c: 242: if (myMain.Flag) {
  4487  10ED  1CAE               	btfss	_myMain^(0+128),1
  4488  10EE  28F1               	goto	l2856
  4489                           
  4490                           ;main_B1.c: 243: myMain.Flag = 0;
  4491  10EF  10AE               	bcf	_myMain^(0+128),1
  4492                           
  4493                           ;main_B1.c: 252: } else {
  4494  10F0  0008               	return
  4495  10F1                     l2856:	
  4496                           
  4497                           ;main_B1.c: 253: myMain.Flag = 1;
  4498  10F1  14AE               	bsf	_myMain^(0+128),1
  4499  10F2  0008               	return
  4500  10F3                     __end_of_my_MainTimer:	
  4501                           
  4502                           	psect	text2
  4503  1000                     __ptext2:	
  4504 ;; *************** function _myMain_Initialization *****************
  4505 ;; Defined at:
  4506 ;;		line 170 in file "../src/main_B1.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;		None
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;		None
  4511 ;; Return value:  Size  Location     Type
  4512 ;;		None               void
  4513 ;; Registers used:
  4514 ;;		wreg, fsr1l, fsr1h
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;Total ram usage:        1 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:    5
  4527 ;; This function calls:
  4528 ;;		Nothing
  4529 ;; This function is called by:
  4530 ;;		_main
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           
  4535                           ;psect for function _myMain_Initialization
  4536  1000                     _myMain_Initialization:	
  4537                           
  4538                           ;main_B1.c: 173: product = &_product;
  4539                           
  4540                           ;incstack = 0
  4541                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4542  1000  3045               	movlw	__product& (0+255)
  4543  1001  0020               	movlb	0	; select bank0
  4544  1002  00A1               	movwf	??_myMain_Initialization
  4545  1003  0821               	movf	??_myMain_Initialization,w
  4546  1004  0021               	movlb	1	; select bank1
  4547  1005  00ED               	movwf	_product^(0+128)
  4548                           
  4549                           ;main_B1.c: 174: product->Data[20] = 210;
  4550  1006  30D2               	movlw	210
  4551  1007  0020               	movlb	0	; select bank0
  4552  1008  00A1               	movwf	??_myMain_Initialization
  4553  1009  0021               	movlb	1	; select bank1
  4554  100A  086D               	movf	_product^(0+128),w
  4555  100B  3E14               	addlw	20
  4556  100C  0086               	movwf	6
  4557  100D  3002               	movlw	2	; select bank4/5
  4558  100E  0087               	movwf	7
  4559  100F  0020               	movlb	0	; select bank0
  4560  1010  0821               	movf	??_myMain_Initialization,w
  4561  1011  0081               	movwf	1
  4562  1012  0008               	return
  4563  1013                     __end_of_myMain_Initialization:	
  4564                           
  4565                           	psect	text3
  4566  1131                     __ptext3:	
  4567 ;; *************** function _getTemp_AD *****************
  4568 ;; Defined at:
  4569 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;  channel         1    wreg     unsigned char 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;  channel         1    6[BANK0 ] unsigned char 
  4574 ;;  ADRES           2    7[BANK0 ] unsigned int 
  4575 ;; Return value:  Size  Location     Type
  4576 ;;		None               void
  4577 ;; Registers used:
  4578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4588 ;;Total ram usage:        4 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    7
  4591 ;; This function calls:
  4592 ;;		_getAD
  4593 ;; This function is called by:
  4594 ;;		_main
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           
  4599                           ;psect for function _getTemp_AD
  4600  1131                     _getTemp_AD:	
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4604                           ;getTemp_AD@channel stored from wreg
  4605  1131  0020               	movlb	0	; select bank0
  4606  1132  00A6               	movwf	getTemp_AD@channel
  4607                           
  4608                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4609  1133  01A7               	clrf	getTemp_AD@ADRES
  4610  1134  01A8               	clrf	getTemp_AD@ADRES+1
  4611                           
  4612                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4613  1135  0021               	movlb	1	; select bank1
  4614  1136  1D5B               	btfss	_Temp^(0+128),2
  4615  1137  2961               	goto	l8896
  4616                           
  4617                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4618  1138  30F0               	movlw	240
  4619  1139  0020               	movlb	0	; select bank0
  4620  113A  00A5               	movwf	??_getTemp_AD
  4621  113B  0825               	movf	??_getTemp_AD,w
  4622  113C  00A1               	movwf	getAD@adcon1
  4623  113D  0826               	movf	getTemp_AD@channel,w
  4624  113E  319D  258F  3191   	fcall	_getAD
  4625  1141  0020               	movlb	0	; select bank0
  4626  1142  0822               	movf	?_getAD+1,w
  4627  1143  01A8               	clrf	getTemp_AD@ADRES+1
  4628  1144  07A8               	addwf	getTemp_AD@ADRES+1,f
  4629  1145  0821               	movf	?_getAD,w
  4630  1146  01A7               	clrf	getTemp_AD@ADRES
  4631  1147  07A7               	addwf	getTemp_AD@ADRES,f
  4632                           
  4633                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4634  1148  0828               	movf	getTemp_AD@ADRES+1,w
  4635  1149  0427               	iorwf	getTemp_AD@ADRES,w
  4636  114A  1903               	skipnz
  4637  114B  2961               	goto	l8896
  4638                           
  4639                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4640  114C  0828               	movf	getTemp_AD@ADRES+1,w
  4641  114D  0021               	movlb	1	; select bank1
  4642  114E  0264               	subwf	((_Temp+1)^(0+128)+8),w
  4643  114F  1D03               	skipz
  4644  1150  2955               	goto	u9795
  4645  1151  0020               	movlb	0	; select bank0
  4646  1152  0827               	movf	getTemp_AD@ADRES,w
  4647  1153  0021               	movlb	1	; select bank1
  4648  1154  0263               	subwf	(_Temp^(0+128)+8),w
  4649  1155                     u9795:	
  4650  1155  1803               	skipnc
  4651  1156  2961               	goto	l8896
  4652                           
  4653                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4654  1157  0020               	movlb	0	; select bank0
  4655  1158  0828               	movf	getTemp_AD@ADRES+1,w
  4656  1159  0021               	movlb	1	; select bank1
  4657  115A  01E4               	clrf	((_Temp+1)^(0+128)+8)
  4658  115B  07E4               	addwf	((_Temp+1)^(0+128)+8),f
  4659  115C  0020               	movlb	0	; select bank0
  4660  115D  0827               	movf	getTemp_AD@ADRES,w
  4661  115E  0021               	movlb	1	; select bank1
  4662  115F  01E3               	clrf	(_Temp^(0+128)+8)
  4663  1160  07E3               	addwf	(_Temp^(0+128)+8),f
  4664  1161                     l8896:	
  4665                           
  4666                           ;OverTemperature_B1.c: 32: }
  4667                           ;OverTemperature_B1.c: 33: }
  4668                           ;OverTemperature_B1.c: 34: }
  4669                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4670  1161  30F0               	movlw	240
  4671  1162  0020               	movlb	0	; select bank0
  4672  1163  00A5               	movwf	??_getTemp_AD
  4673  1164  0825               	movf	??_getTemp_AD,w
  4674  1165  00A1               	movwf	getAD@adcon1
  4675  1166  0826               	movf	getTemp_AD@channel,w
  4676  1167  319D  258F         	fcall	_getAD
  4677  1169  0020               	movlb	0	; select bank0
  4678  116A  0822               	movf	?_getAD+1,w
  4679  116B  01A8               	clrf	getTemp_AD@ADRES+1
  4680  116C  07A8               	addwf	getTemp_AD@ADRES+1,f
  4681  116D  0821               	movf	?_getAD,w
  4682  116E  01A7               	clrf	getTemp_AD@ADRES
  4683  116F  07A7               	addwf	getTemp_AD@ADRES,f
  4684  1170  0008               	return
  4685  1171                     __end_of_getTemp_AD:	
  4686                           
  4687                           	psect	text4
  4688  093A                     __ptext4:	
  4689 ;; *************** function _getLoad_AD *****************
  4690 ;; Defined at:
  4691 ;;		line 15 in file "../src/OverLoad_B1.c"
  4692 ;; Parameters:    Size  Location     Type
  4693 ;;  channel         1    wreg     unsigned char 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  channel         1    7[BANK0 ] unsigned char 
  4696 ;;  ADRES           2   10[BANK0 ] unsigned int 
  4697 ;;  i               1   12[BANK0 ] unsigned char 
  4698 ;;  j               1    9[BANK0 ] unsigned char 
  4699 ;;  k               1    8[BANK0 ] unsigned char 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;		None               void
  4702 ;; Registers used:
  4703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4710 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4712 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;Total ram usage:        8 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    7
  4716 ;; This function calls:
  4717 ;;		_getAD
  4718 ;; This function is called by:
  4719 ;;		_main
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           
  4724                           ;psect for function _getLoad_AD
  4725  093A                     _getLoad_AD:	
  4726                           
  4727                           ;incstack = 0
  4728                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4729                           ;getLoad_AD@channel stored from wreg
  4730  093A  0020               	movlb	0	; select bank0
  4731  093B  00A7               	movwf	getLoad_AD@channel
  4732                           
  4733                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4734  093C  01AC               	clrf	getLoad_AD@i
  4735  093D  01A9               	clrf	getLoad_AD@j
  4736  093E  01A8               	clrf	getLoad_AD@k
  4737                           
  4738                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4739  093F  01AA               	clrf	getLoad_AD@ADRES
  4740  0940  01AB               	clrf	getLoad_AD@ADRES+1
  4741                           
  4742                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4743  0941  0022               	movlb	2	; select bank2
  4744  0942  1E40               	btfss	_Load^(0+256),4
  4745  0943  0008               	return
  4746                           
  4747                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4748  0944  30F3               	movlw	243
  4749  0945  0020               	movlb	0	; select bank0
  4750  0946  00A5               	movwf	??_getLoad_AD
  4751  0947  0825               	movf	??_getLoad_AD,w
  4752  0948  00A1               	movwf	getAD@adcon1
  4753  0949  0827               	movf	getLoad_AD@channel,w
  4754  094A  319D  258F  3189   	fcall	_getAD
  4755  094D  0020               	movlb	0	; select bank0
  4756  094E  0822               	movf	?_getAD+1,w
  4757  094F  01AB               	clrf	getLoad_AD@ADRES+1
  4758  0950  07AB               	addwf	getLoad_AD@ADRES+1,f
  4759  0951  0821               	movf	?_getAD,w
  4760  0952  01AA               	clrf	getLoad_AD@ADRES
  4761  0953  07AA               	addwf	getLoad_AD@ADRES,f
  4762                           
  4763                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4764  0954  01AC               	clrf	getLoad_AD@i
  4765  0955  3004               	movlw	4
  4766  0956  022C               	subwf	getLoad_AD@i,w
  4767  0957  1803               	btfsc	3,0
  4768  0958  2980               	goto	l8706
  4769  0959                     l8694:	
  4770                           
  4771                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4772  0959  352C               	lslf	getLoad_AD@i,w
  4773  095A  3E4B               	addlw	(_Load+11)& (0+255)
  4774  095B  0086               	movwf	6
  4775  095C  3001               	movlw	1	; select bank2/3
  4776  095D  0087               	movwf	7
  4777  095E  3F40               	moviw [0]fsr1
  4778  095F  00A5               	movwf	??_getLoad_AD
  4779  0960  3F41               	moviw [1]fsr1
  4780  0961  00A6               	movwf	??_getLoad_AD+1
  4781  0962  082B               	movf	getLoad_AD@ADRES+1,w
  4782  0963  0226               	subwf	??_getLoad_AD+1,w
  4783  0964  1D03               	skipz
  4784  0965  2968               	goto	u9385
  4785  0966  082A               	movf	getLoad_AD@ADRES,w
  4786  0967  0225               	subwf	??_getLoad_AD,w
  4787  0968                     u9385:	
  4788  0968  1803               	skipnc
  4789  0969  2978               	goto	l8702
  4790  096A  08A9               	movf	getLoad_AD@j,f
  4791  096B  1D03               	skipz
  4792  096C  2978               	goto	l8702
  4793                           
  4794                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4795  096D  352C               	lslf	getLoad_AD@i,w
  4796  096E  3E4B               	addlw	(_Load+11)& (0+255)
  4797  096F  0086               	movwf	6
  4798  0970  3001               	movlw	1	; select bank2/3
  4799  0971  0087               	movwf	7
  4800  0972  082A               	movf	getLoad_AD@ADRES,w
  4801  0973  3FC0               	movwi [0]fsr1
  4802  0974  082B               	movf	getLoad_AD@ADRES+1,w
  4803  0975  3FC1               	movwi [1]fsr1
  4804                           
  4805                           ;OverLoad_B1.c: 24: j = 1;
  4806  0976  01A9               	clrf	getLoad_AD@j
  4807  0977  0AA9               	incf	getLoad_AD@j,f
  4808  0978                     l8702:	
  4809  0978  3001               	movlw	1
  4810  0979  00A5               	movwf	??_getLoad_AD
  4811  097A  0825               	movf	??_getLoad_AD,w
  4812  097B  07AC               	addwf	getLoad_AD@i,f
  4813  097C  3004               	movlw	4
  4814  097D  022C               	subwf	getLoad_AD@i,w
  4815  097E  1C03               	skipc
  4816  097F  2959               	goto	l8694
  4817  0980                     l8706:	
  4818                           
  4819                           ;OverLoad_B1.c: 25: }
  4820                           ;OverLoad_B1.c: 26: }
  4821                           ;OverLoad_B1.c: 27: if (j == 0) {
  4822  0980  08A9               	movf	getLoad_AD@j,f
  4823  0981  1D03               	skipz
  4824  0982  0008               	return
  4825                           
  4826                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4827  0983  01AC               	clrf	getLoad_AD@i
  4828  0984                     L1:	
  4829  0984  3004               	movlw	4
  4830  0985  022C               	subwf	getLoad_AD@i,w
  4831  0986  1803               	btfsc	3,0
  4832  0987  0008               	return
  4833                           
  4834                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4835  0988  352C               	lslf	getLoad_AD@i,w
  4836  0989  3E55               	addlw	(_Load+21)& (0+255)
  4837  098A  0086               	movwf	6
  4838  098B  3001               	movlw	1	; select bank2/3
  4839  098C  0087               	movwf	7
  4840  098D  3F40               	moviw [0]fsr1
  4841  098E  00A5               	movwf	??_getLoad_AD
  4842  098F  3F41               	moviw [1]fsr1
  4843  0990  00A6               	movwf	??_getLoad_AD+1
  4844  0991  0826               	movf	??_getLoad_AD+1,w
  4845  0992  022B               	subwf	getLoad_AD@ADRES+1,w
  4846  0993  1D03               	skipz
  4847  0994  2997               	goto	u9435
  4848  0995  0825               	movf	??_getLoad_AD,w
  4849  0996  022A               	subwf	getLoad_AD@ADRES,w
  4850  0997                     u9435:	
  4851  0997  1803               	skipnc
  4852  0998  29A7               	goto	l8722
  4853  0999  08A8               	movf	getLoad_AD@k,f
  4854  099A  1D03               	skipz
  4855  099B  29A7               	goto	l8722
  4856                           
  4857                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4858  099C  352C               	lslf	getLoad_AD@i,w
  4859  099D  3E55               	addlw	(_Load+21)& (0+255)
  4860  099E  0086               	movwf	6
  4861  099F  3001               	movlw	1	; select bank2/3
  4862  09A0  0087               	movwf	7
  4863  09A1  082A               	movf	getLoad_AD@ADRES,w
  4864  09A2  3FC0               	movwi [0]fsr1
  4865  09A3  082B               	movf	getLoad_AD@ADRES+1,w
  4866  09A4  3FC1               	movwi [1]fsr1
  4867                           
  4868                           ;OverLoad_B1.c: 31: k = 1;
  4869  09A5  01A8               	clrf	getLoad_AD@k
  4870  09A6  0AA8               	incf	getLoad_AD@k,f
  4871  09A7                     l8722:	
  4872  09A7  3001               	movlw	1
  4873  09A8  00A5               	movwf	??_getLoad_AD
  4874  09A9  0825               	movf	??_getLoad_AD,w
  4875  09AA  07AC               	addwf	getLoad_AD@i,f
  4876  09AB  2984               	goto	L1
  4877  09AC                     __end_of_getLoad_AD:	
  4878                           
  4879                           	psect	text5
  4880  1D8F                     __ptext5:	
  4881 ;; *************** function _getAD *****************
  4882 ;; Defined at:
  4883 ;;		line 459 in file "../src/MCU_B1.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  adcon0          1    wreg     unsigned char 
  4886 ;;  adcon1          1    1[BANK0 ] unsigned char 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  adcon0          1    4[BANK0 ] unsigned char 
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  2    1[BANK0 ] int 
  4891 ;; Registers used:
  4892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4898 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;Total ram usage:        4 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    6
  4905 ;; This function calls:
  4906 ;;		_Timeout_Counter
  4907 ;;		_set_TimeoutCleared
  4908 ;; This function is called by:
  4909 ;;		_getLoad_AD
  4910 ;;		_getTemp_AD
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           
  4915                           ;psect for function _getAD
  4916  1D8F                     _getAD:	
  4917                           
  4918                           ;incstack = 0
  4919                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4920                           ;getAD@adcon0 stored from wreg
  4921  1D8F  0020               	movlb	0	; select bank0
  4922  1D90  00A4               	movwf	getAD@adcon0
  4923                           
  4924                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4925  1D91  0824               	movf	getAD@adcon0,w
  4926  1D92  0021               	movlb	1	; select bank1
  4927  1D93  009D               	movwf	29	;volatile
  4928                           
  4929                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4930  1D94  0020               	movlb	0	; select bank0
  4931  1D95  0821               	movf	getAD@adcon1,w
  4932  1D96  0021               	movlb	1	; select bank1
  4933  1D97  009E               	movwf	30	;volatile
  4934                           
  4935                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4936  1D98  149D               	bsf	29,1	;volatile
  4937                           
  4938                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4939  1D99  2D9D               	goto	l8188
  4940  1D9A                     l8186:	
  4941                           
  4942                           ;MCU_B1.c: 464: Timeout_Counter();
  4943  1D9A  319B  234E  319D   	fcall	_Timeout_Counter
  4944  1D9D                     l8188:	
  4945  1D9D  0021               	movlb	1	; select bank1
  4946  1D9E  1C9D               	btfss	29,1	;volatile
  4947  1D9F  2DA2               	goto	l8192
  4948  1DA0  1D38               	btfss	(_myMain^(0+128)+10),2
  4949  1DA1  2D9A               	goto	l8186
  4950  1DA2                     l8192:	
  4951                           
  4952                           ;MCU_B1.c: 465: };
  4953                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4954  1DA2  3198  20D3         	fcall	_set_TimeoutCleared
  4955                           
  4956                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4957  1DA4  0021               	movlb	1	; select bank1
  4958  1DA5  081C               	movf	28,w	;volatile
  4959  1DA6  0020               	movlb	0	; select bank0
  4960  1DA7  01A2               	clrf	?_getAD+1
  4961  1DA8  07A2               	addwf	?_getAD+1,f
  4962  1DA9  0021               	movlb	1	; select bank1
  4963  1DAA  081B               	movf	27,w	;volatile
  4964  1DAB  0020               	movlb	0	; select bank0
  4965  1DAC  01A1               	clrf	?_getAD
  4966  1DAD  07A1               	addwf	?_getAD,f
  4967  1DAE  0008               	return
  4968  1DAF                     __end_of_getAD:	
  4969                           
  4970                           	psect	text6
  4971  1A9E                     __ptext6:	
  4972 ;; *************** function _WDT_Main *****************
  4973 ;; Defined at:
  4974 ;;		line 1114 in file "../src/MCU_B1.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;		None
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;		None
  4979 ;; Return value:  Size  Location     Type
  4980 ;;		None               void
  4981 ;; Registers used:
  4982 ;;		wreg, status,2, status,0, pclath, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;Total ram usage:        1 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    6
  4995 ;; This function calls:
  4996 ;;		_WDT_Clearing
  4997 ;; This function is called by:
  4998 ;;		_main
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           
  5003                           ;psect for function _WDT_Main
  5004  1A9E                     _WDT_Main:	
  5005                           
  5006                           ;MCU_B1.c: 1115: if (WDT.Enable == 1) {
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5010  1A9E  0022               	movlb	2	; select bank2
  5011  1A9F  1C36               	btfss	_WDT^(0+256),0
  5012  1AA0  0008               	return
  5013                           
  5014                           ;MCU_B1.c: 1116: if (WDT.Timer-- > 0) {
  5015  1AA1  3001               	movlw	1
  5016  1AA2  02B7               	subwf	(_WDT^(0+256)+1),f
  5017  1AA3  0837               	movf	(_WDT^(0+256)+1),w
  5018  1AA4  3AFF               	xorlw	255
  5019  1AA5  1903               	skipnz
  5020  1AA6  0008               	return
  5021                           
  5022                           ;MCU_B1.c: 1117: WDT.Timer = 100;
  5023  1AA7  3064               	movlw	100
  5024  1AA8  0020               	movlb	0	; select bank0
  5025  1AA9  00A1               	movwf	??_WDT_Main
  5026  1AAA  0821               	movf	??_WDT_Main,w
  5027  1AAB  0022               	movlb	2	; select bank2
  5028  1AAC  00B7               	movwf	(_WDT^(0+256)+1)
  5029                           
  5030                           ;MCU_B1.c: 1118: WDT_Clearing();
  5031  1AAD  3180  2002         	fcall	_WDT_Clearing
  5032  1AAF  0008               	return
  5033  1AB0                     __end_of_WDT_Main:	
  5034                           
  5035                           	psect	text7
  5036  0002                     __ptext7:	
  5037 ;; *************** function _WDT_Clearing *****************
  5038 ;; Defined at:
  5039 ;;		line 1124 in file "../src/MCU_B1.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;		None
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;		None
  5044 ;; Return value:  Size  Location     Type
  5045 ;;		None               void
  5046 ;; Registers used:
  5047 ;;		None
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;Total ram usage:        0 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; Hardware stack levels required when called:    5
  5060 ;; This function calls:
  5061 ;;		Nothing
  5062 ;; This function is called by:
  5063 ;;		_WDT_Main
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           
  5068                           ;psect for function _WDT_Clearing
  5069  0002                     _WDT_Clearing:	
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in _WDT_Clearing: []
  5073  0002  0064               	clrwdt	;# 
  5074  0003  0008               	return
  5075  0004                     __end_of_WDT_Clearing:	
  5076                           
  5077                           	psect	text8
  5078  18BC                     __ptext8:	
  5079 ;; *************** function _Temp_Main *****************
  5080 ;; Defined at:
  5081 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;		None
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;		None               void
  5088 ;; Registers used:
  5089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;Total ram usage:        0 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    8
  5102 ;; This function calls:
  5103 ;;		_setTemp_Main
  5104 ;; This function is called by:
  5105 ;;		_main
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           
  5110                           ;psect for function _Temp_Main
  5111  18BC                     _Temp_Main:	
  5112                           
  5113                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5114                           
  5115                           ;incstack = 0
  5116                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5117  18BC  318D  25E3         	fcall	_setTemp_Main
  5118  18BE  0008               	return
  5119  18BF                     __end_of_Temp_Main:	
  5120                           
  5121                           	psect	text9
  5122  0DE3                     __ptext9:	
  5123 ;; *************** function _setTemp_Main *****************
  5124 ;; Defined at:
  5125 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  AD              2    6[BANK1 ] unsigned int 
  5130 ;;  DangerValue     2    4[BANK1 ] unsigned int 
  5131 ;;  SafeValue       2    2[BANK1 ] unsigned int 
  5132 ;;  TempGO          1    1[BANK1 ] unsigned char 
  5133 ;;  error           1    0[BANK1 ] unsigned char 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;		None               void
  5136 ;; Registers used:
  5137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5144 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;Total ram usage:        9 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    7
  5150 ;; This function calls:
  5151 ;;		_getMain_All_Error_Status
  5152 ;;		_getMain_All_LightsStatus
  5153 ;;		_setBuz
  5154 ;;		_setProductData
  5155 ;; This function is called by:
  5156 ;;		_Temp_Main
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           
  5161                           ;psect for function _setTemp_Main
  5162  0DE3                     _setTemp_Main:	
  5163                           
  5164                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5165                           
  5166                           ;incstack = 0
  5167                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5168  0DE3  3000               	movlw	0
  5169  0DE4  319F  27CD  318D   	fcall	_getMain_All_Error_Status
  5170  0DE7  0020               	movlb	0	; select bank0
  5171  0DE8  00E6               	movwf	??_setTemp_Main
  5172  0DE9  0866               	movf	??_setTemp_Main,w
  5173  0DEA  0021               	movlb	1	; select bank1
  5174  0DEB  00E5               	movwf	setTemp_Main@error^(0+128)
  5175                           
  5176                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5177  0DEC  01E7               	clrf	setTemp_Main@SafeValue^(0+128)
  5178  0DED  01E8               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5179  0DEE  01E9               	clrf	setTemp_Main@DangerValue^(0+128)
  5180  0DEF  01EA               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5181                           
  5182                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5183  0DF0  319A  22D6  318D   	fcall	_getMain_All_LightsStatus
  5184  0DF3  0020               	movlb	0	; select bank0
  5185  0DF4  00E6               	movwf	??_setTemp_Main
  5186  0DF5  0866               	movf	??_setTemp_Main,w
  5187  0DF6  0021               	movlb	1	; select bank1
  5188  0DF7  00E6               	movwf	setTemp_Main@TempGO^(0+128)
  5189                           
  5190                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5191  0DF8  1C5B               	btfss	_Temp^(0+128),0
  5192  0DF9  2E8D               	goto	l1778
  5193                           
  5194                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5195  0DFA  195B               	btfsc	_Temp^(0+128),2
  5196  0DFB  2E16               	goto	l10064
  5197                           
  5198                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5199  0DFC  0866               	movf	setTemp_Main@TempGO^(0+128),w
  5200  0DFD  3A01               	xorlw	1
  5201  0DFE  1D03               	skipz
  5202  0DFF  2E02               	goto	l1784
  5203  0E00  1CDB               	btfss	_Temp^(0+128),1
  5204  0E01  2E04               	goto	l10056
  5205  0E02                     l1784:	
  5206  0E02  1CDB               	btfss	_Temp^(0+128),1
  5207  0E03  2E13               	goto	l10062
  5208  0E04                     l10056:	
  5209                           
  5210                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5211  0E04  3001               	movlw	1
  5212  0E05  07DC               	addwf	(_Temp^(0+128)+1),f
  5213  0E06  3000               	movlw	0
  5214  0E07  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5215                           
  5216                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5217  0E08  3000               	movlw	0
  5218  0E09  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5219  0E0A  30FA               	movlw	250
  5220  0E0B  1903               	skipnz
  5221  0E0C  025C               	subwf	(_Temp^(0+128)+1),w
  5222  0E0D  1C03               	skipc
  5223  0E0E  0008               	return
  5224                           
  5225                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5226  0E0F  01DC               	clrf	(_Temp^(0+128)+1)
  5227  0E10  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5228                           
  5229                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5230  0E11  155B               	bsf	_Temp^(0+128),2
  5231                           
  5232                           ;OverTemperature_B1.c: 83: }
  5233                           ;OverTemperature_B1.c: 84: } else {
  5234  0E12  0008               	return
  5235  0E13                     l10062:	
  5236                           
  5237                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5238  0E13  01DC               	clrf	(_Temp^(0+128)+1)
  5239  0E14  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5240                           
  5241                           ;OverTemperature_B1.c: 86: }
  5242                           ;OverTemperature_B1.c: 87: } else {
  5243  0E15  0008               	return
  5244  0E16                     l10064:	
  5245                           
  5246                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5247  0E16  3001               	movlw	1
  5248  0E17  07DC               	addwf	(_Temp^(0+128)+1),f
  5249  0E18  3000               	movlw	0
  5250  0E19  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5251                           
  5252                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5253  0E1A  3000               	movlw	0
  5254  0E1B  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5255  0E1C  3005               	movlw	5
  5256  0E1D  1903               	skipnz
  5257  0E1E  025C               	subwf	(_Temp^(0+128)+1),w
  5258  0E1F  1C03               	skipc
  5259  0E20  0008               	return
  5260                           
  5261                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5262  0E21  01DC               	clrf	(_Temp^(0+128)+1)
  5263  0E22  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5264                           
  5265                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5266  0E23  3008               	movlw	8
  5267  0E24  3EDB               	addlw	_Temp& (0+255)
  5268  0E25  0086               	movwf	6
  5269  0E26  0187               	clrf	7
  5270  0E27  0016               	moviw fsr1++
  5271  0E28  0401               	iorwf	1,w
  5272  0E29  1903               	skipnz
  5273  0E2A  2E85               	goto	l1789
  5274                           
  5275                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5276  0E2B  115B               	bcf	_Temp^(0+128),2
  5277                           
  5278                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5279  0E2C  0864               	movf	((_Temp+1)^(0+128)+8),w
  5280  0E2D  01EC               	clrf	(setTemp_Main@AD+1)^(0+128)
  5281  0E2E  07EC               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5282  0E2F  0863               	movf	(_Temp^(0+128)+8),w
  5283  0E30  01EB               	clrf	setTemp_Main@AD^(0+128)
  5284  0E31  07EB               	addwf	setTemp_Main@AD^(0+128),f
  5285                           
  5286                           ;OverTemperature_B1.c: 112: SafeValue = 420;
  5287  0E32  30A4               	movlw	164
  5288  0E33  00E7               	movwf	setTemp_Main@SafeValue^(0+128)
  5289  0E34  3001               	movlw	1
  5290  0E35  00E8               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5291                           
  5292                           ;OverTemperature_B1.c: 113: DangerValue = 370;
  5293  0E36  3072               	movlw	114
  5294  0E37  00E9               	movwf	setTemp_Main@DangerValue^(0+128)
  5295  0E38  3001               	movlw	1
  5296  0E39  00EA               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5297                           
  5298                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5299  0E3A  1CDB               	btfss	_Temp^(0+128),1
  5300  0E3B  2E5C               	goto	l10094
  5301                           
  5302                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5303  0E3C  0868               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5304  0E3D  026C               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5305  0E3E  1D03               	skipz
  5306  0E3F  2E42               	goto	u11955
  5307  0E40  0867               	movf	setTemp_Main@SafeValue^(0+128),w
  5308  0E41  026B               	subwf	setTemp_Main@AD^(0+128),w
  5309  0E42                     u11955:	
  5310  0E42  1C03               	skipc
  5311  0E43  2E5A               	goto	l10092
  5312                           
  5313                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5314  0E44  3001               	movlw	1
  5315  0E45  0020               	movlb	0	; select bank0
  5316  0E46  00E6               	movwf	??_setTemp_Main
  5317  0E47  0866               	movf	??_setTemp_Main,w
  5318  0E48  0021               	movlb	1	; select bank1
  5319  0E49  07DE               	addwf	(_Temp^(0+128)+3),f
  5320                           
  5321                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5322  0E4A  3003               	movlw	3
  5323  0E4B  025E               	subwf	(_Temp^(0+128)+3),w
  5324  0E4C  1C03               	skipc
  5325  0E4D  2E72               	goto	l10106
  5326                           
  5327                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5328  0E4E  01DE               	clrf	(_Temp^(0+128)+3)
  5329                           
  5330                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5331  0E4F  10DB               	bcf	_Temp^(0+128),1
  5332                           
  5333                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5334  0E50  3064               	movlw	100
  5335  0E51  0020               	movlb	0	; select bank0
  5336  0E52  00AA               	movwf	setBuz@time
  5337  0E53  3000               	movlw	0
  5338  0E54  00AB               	movwf	setBuz@time+1
  5339  0E55  3002               	movlw	2
  5340  0E56  3188  2000  318D   	fcall	_setBuz
  5341                           
  5342                           ;OverTemperature_B1.c: 126: }
  5343                           ;OverTemperature_B1.c: 127: } else {
  5344  0E59  2E72               	goto	l10106
  5345  0E5A                     l10092:	
  5346                           
  5347                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5348  0E5A  0021               	movlb	1	; select bank1
  5349  0E5B  2E71               	goto	l10104
  5350  0E5C                     l10094:	
  5351                           ;OverTemperature_B1.c: 129: }
  5352                           ;OverTemperature_B1.c: 130: } else {
  5353                           
  5354                           
  5355                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5356  0E5C  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5357  0E5D  026A               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5358  0E5E  1D03               	skipz
  5359  0E5F  2E62               	goto	u11975
  5360  0E60  086B               	movf	setTemp_Main@AD^(0+128),w
  5361  0E61  0269               	subwf	setTemp_Main@DangerValue^(0+128),w
  5362  0E62                     u11975:	
  5363  0E62  1C03               	skipc
  5364  0E63  2E71               	goto	l10104
  5365                           
  5366                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5367  0E64  3001               	movlw	1
  5368  0E65  0020               	movlb	0	; select bank0
  5369  0E66  00E6               	movwf	??_setTemp_Main
  5370  0E67  0866               	movf	??_setTemp_Main,w
  5371  0E68  0021               	movlb	1	; select bank1
  5372  0E69  07DE               	addwf	(_Temp^(0+128)+3),f
  5373                           
  5374                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5375  0E6A  3003               	movlw	3
  5376  0E6B  025E               	subwf	(_Temp^(0+128)+3),w
  5377  0E6C  1C03               	skipc
  5378  0E6D  2E72               	goto	l10106
  5379                           
  5380                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5381  0E6E  01DE               	clrf	(_Temp^(0+128)+3)
  5382                           
  5383                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5384  0E6F  14DB               	bsf	_Temp^(0+128),1
  5385                           
  5386                           ;OverTemperature_B1.c: 136: }
  5387                           ;OverTemperature_B1.c: 137: } else {
  5388  0E70  2E72               	goto	l10106
  5389  0E71                     l10104:	
  5390                           
  5391                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5392  0E71  01DE               	clrf	(_Temp^(0+128)+3)
  5393  0E72                     l10106:	
  5394                           
  5395                           ;OverTemperature_B1.c: 139: }
  5396                           ;OverTemperature_B1.c: 140: }
  5397                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5398  0E72  0021               	movlb	1	; select bank1
  5399  0E73  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5400  0E74  0020               	movlb	0	; select bank0
  5401  0E75  00E6               	movwf	??_setTemp_Main
  5402  0E76  0866               	movf	??_setTemp_Main,w
  5403  0E77  00E3               	movwf	setProductData@value
  5404  0E78  3018               	movlw	24
  5405  0E79  3199  2173  318D   	fcall	_setProductData
  5406                           
  5407                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5408  0E7C  0021               	movlb	1	; select bank1
  5409  0E7D  086B               	movf	setTemp_Main@AD^(0+128),w
  5410  0E7E  0020               	movlb	0	; select bank0
  5411  0E7F  00E6               	movwf	??_setTemp_Main
  5412  0E80  0866               	movf	??_setTemp_Main,w
  5413  0E81  00E3               	movwf	setProductData@value
  5414  0E82  3019               	movlw	25
  5415  0E83  3199  2173         	fcall	_setProductData
  5416  0E85                     l1789:	
  5417                           
  5418                           ;OverTemperature_B1.c: 158: }
  5419                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5420  0E85  0021               	movlb	1	; select bank1
  5421  0E86  01DF               	clrf	(_Temp^(0+128)+4)
  5422  0E87  01E0               	clrf	((_Temp+1)^(0+128)+4)
  5423                           
  5424                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5425  0E88  01E1               	clrf	(_Temp^(0+128)+6)
  5426  0E89  01E2               	clrf	((_Temp+1)^(0+128)+6)
  5427                           
  5428                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5429  0E8A  01E3               	clrf	(_Temp^(0+128)+8)
  5430  0E8B  01E4               	clrf	((_Temp+1)^(0+128)+8)
  5431                           
  5432                           ;OverTemperature_B1.c: 162: }
  5433                           ;OverTemperature_B1.c: 163: }
  5434                           ;OverTemperature_B1.c: 166: } else {
  5435  0E8C  0008               	return
  5436  0E8D                     l1778:	
  5437                           
  5438                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5439  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5440  0E8E  0008               	return
  5441                           
  5442                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5443  0E8F  145B               	bsf	_Temp^(0+128),0
  5444  0E90  0008               	return
  5445  0E91                     __end_of_setTemp_Main:	
  5446                           
  5447                           	psect	text10
  5448  18B9                     __ptext10:	
  5449 ;; *************** function _Temp_Initialization *****************
  5450 ;; Defined at:
  5451 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;		None
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;		None
  5456 ;; Return value:  Size  Location     Type
  5457 ;;		None               void
  5458 ;; Registers used:
  5459 ;;		status,2, status,0, pclath, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5469 ;;Total ram usage:        0 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    6
  5472 ;; This function calls:
  5473 ;;		_setTemp_Initialization
  5474 ;; This function is called by:
  5475 ;;		_main
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           
  5480                           ;psect for function _Temp_Initialization
  5481  18B9                     _Temp_Initialization:	
  5482                           
  5483                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5484                           
  5485                           ;incstack = 0
  5486                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5487  18B9  3187  27FF         	fcall	_setTemp_Initialization
  5488  18BB  0008               	return
  5489  18BC                     __end_of_Temp_Initialization:	
  5490                           
  5491                           	psect	text11
  5492  07FF                     __ptext11:	
  5493 ;; *************** function _setTemp_Initialization *****************
  5494 ;; Defined at:
  5495 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;		None
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;		None
  5500 ;; Return value:  Size  Location     Type
  5501 ;;		None               void
  5502 ;; Registers used:
  5503 ;;		None
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;Total ram usage:        0 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    5
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_Temp_Initialization
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           
  5524                           ;psect for function _setTemp_Initialization
  5525  07FF                     _setTemp_Initialization:	
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in _setTemp_Initialization: []
  5529  07FF  0008               	return
  5530  0800                     __end_of_setTemp_Initialization:	
  5531                           
  5532                           	psect	text12
  5533  195C                     __ptext12:	
  5534 ;; *************** function _Switch_Main *****************
  5535 ;; Defined at:
  5536 ;;		line 76 in file "../src/Switch_B1.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;		None
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;		None
  5541 ;; Return value:  Size  Location     Type
  5542 ;;		None               void
  5543 ;; Registers used:
  5544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;Total ram usage:        0 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    9
  5557 ;; This function calls:
  5558 ;;		_TouchPower
  5559 ;;		_setSw_Main
  5560 ;; This function is called by:
  5561 ;;		_main
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _Switch_Main
  5567  195C                     _Switch_Main:	
  5568                           
  5569                           ;Switch_B1.c: 79: setSw_Main(1);
  5570                           
  5571                           ;incstack = 0
  5572                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5573  195C  3001               	movlw	1
  5574  195D  3182  2204  3199   	fcall	_setSw_Main
  5575                           
  5576                           ;Switch_B1.c: 83: setSw_Main(2);
  5577  1960  3002               	movlw	2
  5578  1961  3182  2204  3199   	fcall	_setSw_Main
  5579                           
  5580                           ;Switch_B1.c: 91: TouchPower();
  5581  1964  319B  2363         	fcall	_TouchPower
  5582  1966  0008               	return
  5583  1967                     __end_of_Switch_Main:	
  5584                           
  5585                           	psect	text13
  5586  0204                     __ptext13:	
  5587 ;; *************** function _setSw_Main *****************
  5588 ;; Defined at:
  5589 ;;		line 117 in file "../src/Switch_B1.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  sw              1    wreg     unsigned char 
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;  sw              1   21[BANK0 ] unsigned char 
  5594 ;; Return value:  Size  Location     Type
  5595 ;;		None               void
  5596 ;; Registers used:
  5597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5606 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5607 ;;Total ram usage:        3 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; Hardware stack levels required when called:    8
  5610 ;; This function calls:
  5611 ;;		_SwPointSelect
  5612 ;;		_getMain_All_Error_Status
  5613 ;;		_getSw_KeyStatus
  5614 ;;		_setBuz
  5615 ;;		_setDimmerLights_DimmingOn
  5616 ;;		_setDimmerLights_SwOff
  5617 ;;		_setDimmerLights_SwOn
  5618 ;;		_setRF_Learn
  5619 ;; This function is called by:
  5620 ;;		_Switch_Main
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           
  5625                           ;psect for function _setSw_Main
  5626  0204                     _setSw_Main:	
  5627                           
  5628                           ;incstack = 0
  5629                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5630                           ;setSw_Main@sw stored from wreg
  5631  0204  0020               	movlb	0	; select bank0
  5632  0205  00B5               	movwf	setSw_Main@sw
  5633                           
  5634                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5635  0206  0835               	movf	setSw_Main@sw,w
  5636  0207  319B  23EA  3182   	fcall	_SwPointSelect
  5637                           
  5638                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5639  020A  0021               	movlb	1	; select bank1
  5640  020B  0858               	movf	_Sw^(0+128),w
  5641  020C  0086               	movwf	6
  5642  020D  3001               	movlw	1	; select bank2/3
  5643  020E  0087               	movwf	7
  5644  020F  1C01               	btfss	1,0
  5645  0210  2B80               	goto	l2565
  5646                           
  5647                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5648  0211  3000               	movlw	0
  5649  0212  319F  27CD  3182   	fcall	_getMain_All_Error_Status
  5650  0215  3800               	iorlw	0
  5651  0216  1D03               	skipz
  5652  0217  2A36               	goto	l10200
  5653                           
  5654                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5655  0218  0021               	movlb	1	; select bank1
  5656  0219  0A58               	incf	_Sw^(0+128),w
  5657  021A  0086               	movwf	6
  5658  021B  3001               	movlw	1	; select bank2/3
  5659  021C  0087               	movwf	7
  5660  021D  1081               	bcf	1,1
  5661                           
  5662                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5663  021E  0020               	movlb	0	; select bank0
  5664  021F  0835               	movf	setSw_Main@sw,w
  5665  0220  319D  2530  3182   	fcall	_getSw_KeyStatus
  5666  0223  3A01               	xorlw	1
  5667  0224  3000               	movlw	0
  5668  0225  1903               	skipnz
  5669  0226  3001               	movlw	1
  5670  0227  0020               	movlb	0	; select bank0
  5671  0228  00B3               	movwf	??_setSw_Main
  5672  0229  0021               	movlb	1	; select bank1
  5673  022A  0858               	movf	_Sw^(0+128),w
  5674  022B  0086               	movwf	6
  5675  022C  3001               	movlw	1	; select bank2/3
  5676  022D  0087               	movwf	7
  5677  022E  0020               	movlb	0	; select bank0
  5678  022F  0DB3               	rlf	??_setSw_Main,f
  5679  0230  0801               	movf	1,w
  5680  0231  0633               	xorwf	??_setSw_Main,w
  5681  0232  39FD               	andlw	-3
  5682  0233  0633               	xorwf	??_setSw_Main,w
  5683  0234  0081               	movwf	1
  5684                           
  5685                           ;Switch_B1.c: 124: } else {
  5686  0235  2A4C               	goto	l2567
  5687  0236                     l10200:	
  5688                           
  5689                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5690  0236  0021               	movlb	1	; select bank1
  5691  0237  0A58               	incf	_Sw^(0+128),w
  5692  0238  0086               	movwf	6
  5693  0239  3001               	movlw	1	; select bank2/3
  5694  023A  0087               	movwf	7
  5695  023B  1881               	btfsc	1,1
  5696  023C  2A4C               	goto	l2567
  5697                           
  5698                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5699  023D  0A58               	incf	_Sw^(0+128),w
  5700  023E  0086               	movwf	6
  5701  023F  3001               	movlw	1	; select bank2/3
  5702  0240  0087               	movwf	7
  5703  0241  1481               	bsf	1,1
  5704                           
  5705                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5706  0242  0858               	movf	_Sw^(0+128),w
  5707  0243  0086               	movwf	6
  5708  0244  3001               	movlw	1	; select bank2/3
  5709  0245  0087               	movwf	7
  5710  0246  1081               	bcf	1,1
  5711                           
  5712                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5713  0247  0858               	movf	_Sw^(0+128),w
  5714  0248  0086               	movwf	6
  5715  0249  3001               	movlw	1	; select bank2/3
  5716  024A  0087               	movwf	7
  5717  024B  1501               	bsf	1,2
  5718  024C                     l2567:	
  5719                           
  5720                           ;Switch_B1.c: 130: }
  5721                           ;Switch_B1.c: 131: }
  5722                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5723  024C  0021               	movlb	1	; select bank1
  5724  024D  0858               	movf	_Sw^(0+128),w
  5725  024E  0086               	movwf	6
  5726  024F  3001               	movlw	1	; select bank2/3
  5727  0250  0087               	movwf	7
  5728  0251  1C81               	btfss	1,1
  5729  0252  2B28               	goto	l10250
  5730                           
  5731                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5732  0253  0858               	movf	_Sw^(0+128),w
  5733  0254  0086               	movwf	6
  5734  0255  3001               	movlw	1	; select bank2/3
  5735  0256  0087               	movwf	7
  5736  0257  1901               	btfsc	1,2
  5737  0258  2A7F               	goto	l10216
  5738                           
  5739                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5740  0259  3001               	movlw	1
  5741  025A  0020               	movlb	0	; select bank0
  5742  025B  00B3               	movwf	??_setSw_Main
  5743  025C  0021               	movlb	1	; select bank1
  5744  025D  0858               	movf	_Sw^(0+128),w
  5745  025E  3E02               	addlw	2
  5746  025F  0086               	movwf	6
  5747  0260  3001               	movlw	1	; select bank2/3
  5748  0261  0087               	movwf	7
  5749  0262  0020               	movlb	0	; select bank0
  5750  0263  0833               	movf	??_setSw_Main,w
  5751  0264  0781               	addwf	1,f
  5752                           
  5753                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5754  0265  0021               	movlb	1	; select bank1
  5755  0266  0858               	movf	_Sw^(0+128),w
  5756  0267  3E02               	addlw	2
  5757  0268  0086               	movwf	6
  5758  0269  3001               	movlw	1	; select bank2/3
  5759  026A  0087               	movwf	7
  5760  026B  3003               	movlw	3
  5761  026C  0201               	subwf	1,w
  5762  026D  1C03               	skipc
  5763  026E  0008               	return
  5764                           
  5765                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5766  026F  0858               	movf	_Sw^(0+128),w
  5767  0270  3E02               	addlw	2
  5768  0271  0086               	movwf	6
  5769  0272  3001               	movlw	1	; select bank2/3
  5770  0273  0087               	movwf	7
  5771  0274  0181               	clrf	1
  5772                           
  5773                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5774  0275  0858               	movf	_Sw^(0+128),w
  5775  0276  0086               	movwf	6
  5776  0277  3001               	movlw	1	; select bank2/3
  5777  0278  0087               	movwf	7
  5778  0279  1501               	bsf	1,2
  5779                           
  5780                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5781  027A  0020               	movlb	0	; select bank0
  5782  027B  0835               	movf	setSw_Main@sw,w
  5783  027C  3194  2404         	fcall	_setDimmerLights_SwOn
  5784                           
  5785                           ;Switch_B1.c: 146: }
  5786                           ;Switch_B1.c: 147: } else {
  5787  027E  0008               	return
  5788  027F                     l10216:	
  5789                           
  5790                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5791  027F  0021               	movlb	1	; select bank1
  5792  0280  0858               	movf	_Sw^(0+128),w
  5793  0281  0086               	movwf	6
  5794  0282  3001               	movlw	1	; select bank2/3
  5795  0283  0087               	movwf	7
  5796  0284  1981               	btfsc	1,3
  5797  0285  2AB4               	goto	l10226
  5798                           
  5799                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5800  0286  0858               	movf	_Sw^(0+128),w
  5801  0287  3E03               	addlw	3
  5802  0288  0086               	movwf	6
  5803  0289  3001               	movlw	1	; select bank2/3
  5804  028A  0087               	movwf	7
  5805  028B  3001               	movlw	1
  5806  028C  0781               	addwf	1,f
  5807  028D  3141               	addfsr 1,1
  5808  028E  1803               	skipnc
  5809  028F  0A81               	incf	1,f
  5810                           
  5811                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5812  0290  0858               	movf	_Sw^(0+128),w
  5813  0291  3E03               	addlw	3
  5814  0292  0086               	movwf	6
  5815  0293  3001               	movlw	1	; select bank2/3
  5816  0294  0087               	movwf	7
  5817  0295  3F40               	moviw [0]fsr1
  5818  0296  0020               	movlb	0	; select bank0
  5819  0297  00B3               	movwf	??_setSw_Main
  5820  0298  3F41               	moviw [1]fsr1
  5821  0299  00B4               	movwf	??_setSw_Main+1
  5822  029A  3000               	movlw	0
  5823  029B  0234               	subwf	??_setSw_Main+1,w
  5824  029C  304B               	movlw	75
  5825  029D  1903               	skipnz
  5826  029E  0233               	subwf	??_setSw_Main,w
  5827  029F  1C03               	skipc
  5828  02A0  0008               	return
  5829                           
  5830                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5831  02A1  0021               	movlb	1	; select bank1
  5832  02A2  0858               	movf	_Sw^(0+128),w
  5833  02A3  3E03               	addlw	3
  5834  02A4  0086               	movwf	6
  5835  02A5  3001               	movlw	1	; select bank2/3
  5836  02A6  0087               	movwf	7
  5837  02A7  3000               	movlw	0
  5838  02A8  3FC0               	movwi [0]fsr1
  5839  02A9  3FC1               	movwi [1]fsr1
  5840                           
  5841                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5842  02AA  0858               	movf	_Sw^(0+128),w
  5843  02AB  0086               	movwf	6
  5844  02AC  3001               	movlw	1	; select bank2/3
  5845  02AD  0087               	movwf	7
  5846  02AE  1581               	bsf	1,3
  5847                           
  5848                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5849  02AF  0020               	movlb	0	; select bank0
  5850  02B0  0835               	movf	setSw_Main@sw,w
  5851  02B1  319E  26C3         	fcall	_setDimmerLights_DimmingOn
  5852                           
  5853                           ;Switch_B1.c: 161: }
  5854                           ;Switch_B1.c: 162: } else {
  5855  02B3  0008               	return
  5856  02B4                     l10226:	
  5857                           
  5858                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5859  02B4  0021               	movlb	1	; select bank1
  5860  02B5  0858               	movf	_Sw^(0+128),w
  5861  02B6  0086               	movwf	6
  5862  02B7  3001               	movlw	1	; select bank2/3
  5863  02B8  0087               	movwf	7
  5864  02B9  1A01               	btfsc	1,4
  5865  02BA  2AF4               	goto	l10240
  5866                           
  5867                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5868  02BB  0858               	movf	_Sw^(0+128),w
  5869  02BC  3E05               	addlw	5
  5870  02BD  0086               	movwf	6
  5871  02BE  3001               	movlw	1	; select bank2/3
  5872  02BF  0087               	movwf	7
  5873  02C0  3001               	movlw	1
  5874  02C1  0781               	addwf	1,f
  5875  02C2  3141               	addfsr 1,1
  5876  02C3  1803               	skipnc
  5877  02C4  0A81               	incf	1,f
  5878                           
  5879                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5880  02C5  0858               	movf	_Sw^(0+128),w
  5881  02C6  3E05               	addlw	5
  5882  02C7  0086               	movwf	6
  5883  02C8  3001               	movlw	1	; select bank2/3
  5884  02C9  0087               	movwf	7
  5885  02CA  3F40               	moviw [0]fsr1
  5886  02CB  0020               	movlb	0	; select bank0
  5887  02CC  00B3               	movwf	??_setSw_Main
  5888  02CD  3F41               	moviw [1]fsr1
  5889  02CE  00B4               	movwf	??_setSw_Main+1
  5890  02CF  3000               	movlw	0
  5891  02D0  0234               	subwf	??_setSw_Main+1,w
  5892  02D1  304B               	movlw	75
  5893  02D2  1903               	skipnz
  5894  02D3  0233               	subwf	??_setSw_Main,w
  5895  02D4  1C03               	skipc
  5896  02D5  0008               	return
  5897                           
  5898                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5899  02D6  0021               	movlb	1	; select bank1
  5900  02D7  0858               	movf	_Sw^(0+128),w
  5901  02D8  3E05               	addlw	5
  5902  02D9  0086               	movwf	6
  5903  02DA  3001               	movlw	1	; select bank2/3
  5904  02DB  0087               	movwf	7
  5905  02DC  3000               	movlw	0
  5906  02DD  3FC0               	movwi [0]fsr1
  5907  02DE  3FC1               	movwi [1]fsr1
  5908                           
  5909                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5910  02DF  0858               	movf	_Sw^(0+128),w
  5911  02E0  0086               	movwf	6
  5912  02E1  3001               	movlw	1	; select bank2/3
  5913  02E2  0087               	movwf	7
  5914  02E3  1601               	bsf	1,4
  5915                           
  5916                           ;Switch_B1.c: 171: setRF_Learn(1);
  5917  02E4  3001               	movlw	1
  5918  02E5  319B  2310  3182   	fcall	_setRF_Learn
  5919                           
  5920                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5921  02E8  0021               	movlb	1	; select bank1
  5922  02E9  1EAE               	btfss	_myMain^(0+128),5
  5923  02EA  0008               	return
  5924                           
  5925                           ;Switch_B1.c: 173: setBuz(2, 100);
  5926  02EB  3064               	movlw	100
  5927  02EC  0020               	movlb	0	; select bank0
  5928  02ED  00AA               	movwf	setBuz@time
  5929  02EE  3000               	movlw	0
  5930  02EF  00AB               	movwf	setBuz@time+1
  5931  02F0  3002               	movlw	2
  5932  02F1  3188  2000         	fcall	_setBuz
  5933                           
  5934                           ;Switch_B1.c: 174: }
  5935                           ;Switch_B1.c: 178: }
  5936                           ;Switch_B1.c: 179: } else {
  5937  02F3  0008               	return
  5938  02F4                     l10240:	
  5939                           
  5940                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5941  02F4  0021               	movlb	1	; select bank1
  5942  02F5  0858               	movf	_Sw^(0+128),w
  5943  02F6  0086               	movwf	6
  5944  02F7  3001               	movlw	1	; select bank2/3
  5945  02F8  0087               	movwf	7
  5946  02F9  1A81               	btfsc	1,5
  5947  02FA  0008               	return
  5948                           
  5949                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5950  02FB  0858               	movf	_Sw^(0+128),w
  5951  02FC  3E07               	addlw	7
  5952  02FD  0086               	movwf	6
  5953  02FE  3001               	movlw	1	; select bank2/3
  5954  02FF  0087               	movwf	7
  5955  0300  3001               	movlw	1
  5956  0301  0781               	addwf	1,f
  5957  0302  3141               	addfsr 1,1
  5958  0303  1803               	skipnc
  5959  0304  0A81               	incf	1,f
  5960                           
  5961                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5962  0305  0858               	movf	_Sw^(0+128),w
  5963  0306  3E07               	addlw	7
  5964  0307  0086               	movwf	6
  5965  0308  3001               	movlw	1	; select bank2/3
  5966  0309  0087               	movwf	7
  5967  030A  3F40               	moviw [0]fsr1
  5968  030B  0020               	movlb	0	; select bank0
  5969  030C  00B3               	movwf	??_setSw_Main
  5970  030D  3F41               	moviw [1]fsr1
  5971  030E  00B4               	movwf	??_setSw_Main+1
  5972  030F  3000               	movlw	0
  5973  0310  0234               	subwf	??_setSw_Main+1,w
  5974  0311  3096               	movlw	150
  5975  0312  1903               	skipnz
  5976  0313  0233               	subwf	??_setSw_Main,w
  5977  0314  1C03               	skipc
  5978  0315  0008               	return
  5979                           
  5980                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5981  0316  0021               	movlb	1	; select bank1
  5982  0317  0858               	movf	_Sw^(0+128),w
  5983  0318  3E07               	addlw	7
  5984  0319  0086               	movwf	6
  5985  031A  3001               	movlw	1	; select bank2/3
  5986  031B  0087               	movwf	7
  5987  031C  3000               	movlw	0
  5988  031D  3FC0               	movwi [0]fsr1
  5989  031E  3FC1               	movwi [1]fsr1
  5990                           
  5991                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5992  031F  0858               	movf	_Sw^(0+128),w
  5993  0320  0086               	movwf	6
  5994  0321  3001               	movlw	1	; select bank2/3
  5995  0322  0087               	movwf	7
  5996  0323  1681               	bsf	1,5
  5997                           
  5998                           ;Switch_B1.c: 187: setRF_Learn(0);
  5999  0324  3000               	movlw	0
  6000  0325  319B  2310         	fcall	_setRF_Learn
  6001                           
  6002                           ;Switch_B1.c: 190: }
  6003                           ;Switch_B1.c: 191: }
  6004                           ;Switch_B1.c: 192: }
  6005                           ;Switch_B1.c: 194: }
  6006                           ;Switch_B1.c: 195: }
  6007                           ;Switch_B1.c: 196: } else {
  6008  0327  0008               	return
  6009  0328                     l10250:	
  6010                           
  6011                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  6012  0328  0021               	movlb	1	; select bank1
  6013  0329  0858               	movf	_Sw^(0+128),w
  6014  032A  0086               	movwf	6
  6015  032B  3001               	movlw	1	; select bank2/3
  6016  032C  0087               	movwf	7
  6017  032D  1D01               	btfss	1,2
  6018  032E  0008               	return
  6019                           
  6020                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  6021  032F  3001               	movlw	1
  6022  0330  0020               	movlb	0	; select bank0
  6023  0331  00B3               	movwf	??_setSw_Main
  6024  0332  0021               	movlb	1	; select bank1
  6025  0333  0858               	movf	_Sw^(0+128),w
  6026  0334  3E02               	addlw	2
  6027  0335  0086               	movwf	6
  6028  0336  3001               	movlw	1	; select bank2/3
  6029  0337  0087               	movwf	7
  6030  0338  0020               	movlb	0	; select bank0
  6031  0339  0833               	movf	??_setSw_Main,w
  6032  033A  0781               	addwf	1,f
  6033                           
  6034                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6035  033B  0021               	movlb	1	; select bank1
  6036  033C  0858               	movf	_Sw^(0+128),w
  6037  033D  3E02               	addlw	2
  6038  033E  0086               	movwf	6
  6039  033F  3001               	movlw	1	; select bank2/3
  6040  0340  0087               	movwf	7
  6041  0341  3003               	movlw	3
  6042  0342  0201               	subwf	1,w
  6043  0343  1C03               	skipc
  6044  0344  0008               	return
  6045                           
  6046                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6047  0345  0858               	movf	_Sw^(0+128),w
  6048  0346  3E02               	addlw	2
  6049  0347  0086               	movwf	6
  6050  0348  3001               	movlw	1	; select bank2/3
  6051  0349  0087               	movwf	7
  6052  034A  0181               	clrf	1
  6053                           
  6054                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6055  034B  0858               	movf	_Sw^(0+128),w
  6056  034C  0086               	movwf	6
  6057  034D  3001               	movlw	1	; select bank2/3
  6058  034E  0087               	movwf	7
  6059  034F  1101               	bcf	1,2
  6060                           
  6061                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6062  0350  0858               	movf	_Sw^(0+128),w
  6063  0351  3E03               	addlw	3
  6064  0352  0086               	movwf	6
  6065  0353  3001               	movlw	1	; select bank2/3
  6066  0354  0087               	movwf	7
  6067  0355  3000               	movlw	0
  6068  0356  3FC0               	movwi [0]fsr1
  6069  0357  3FC1               	movwi [1]fsr1
  6070                           
  6071                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6072  0358  0858               	movf	_Sw^(0+128),w
  6073  0359  0086               	movwf	6
  6074  035A  3001               	movlw	1	; select bank2/3
  6075  035B  0087               	movwf	7
  6076  035C  1181               	bcf	1,3
  6077                           
  6078                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6079  035D  0858               	movf	_Sw^(0+128),w
  6080  035E  0086               	movwf	6
  6081  035F  3001               	movlw	1	; select bank2/3
  6082  0360  0087               	movwf	7
  6083  0361  1201               	bcf	1,4
  6084                           
  6085                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6086  0362  0858               	movf	_Sw^(0+128),w
  6087  0363  0086               	movwf	6
  6088  0364  3001               	movlw	1	; select bank2/3
  6089  0365  0087               	movwf	7
  6090  0366  1281               	bcf	1,5
  6091                           
  6092                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6093  0367  0858               	movf	_Sw^(0+128),w
  6094  0368  3E05               	addlw	5
  6095  0369  0086               	movwf	6
  6096  036A  3001               	movlw	1	; select bank2/3
  6097  036B  0087               	movwf	7
  6098  036C  3000               	movlw	0
  6099  036D  3FC0               	movwi [0]fsr1
  6100  036E  3FC1               	movwi [1]fsr1
  6101                           
  6102                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6103  036F  0858               	movf	_Sw^(0+128),w
  6104  0370  3E07               	addlw	7
  6105  0371  0086               	movwf	6
  6106  0372  3001               	movlw	1	; select bank2/3
  6107  0373  0087               	movwf	7
  6108  0374  3000               	movlw	0
  6109  0375  3FC0               	movwi [0]fsr1
  6110  0376  3FC1               	movwi [1]fsr1
  6111                           
  6112                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6113  0377  0020               	movlb	0	; select bank0
  6114  0378  0835               	movf	setSw_Main@sw,w
  6115  0379  3190  207E  3182   	fcall	_setDimmerLights_SwOff
  6116                           
  6117                           ;Switch_B1.c: 219: setRF_Learn(0);
  6118  037C  3000               	movlw	0
  6119  037D  319B  2310         	fcall	_setRF_Learn
  6120                           
  6121                           ;Switch_B1.c: 221: }
  6122                           ;Switch_B1.c: 222: }
  6123                           ;Switch_B1.c: 223: }
  6124                           ;Switch_B1.c: 224: } else {
  6125  037F  0008               	return
  6126  0380                     l2565:	
  6127                           
  6128                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6129  0380  1C2E               	btfss	_myMain^(0+128),0
  6130  0381  0008               	return
  6131                           
  6132                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6133  0382  0858               	movf	_Sw^(0+128),w
  6134  0383  0086               	movwf	6
  6135  0384  3001               	movlw	1	; select bank2/3
  6136  0385  0087               	movwf	7
  6137  0386  1401               	bsf	1,0
  6138  0387  0008               	return
  6139  0388                     __end_of_setSw_Main:	
  6140                           
  6141                           	psect	text14
  6142  1B10                     __ptext14:	
  6143 ;; *************** function _setRF_Learn *****************
  6144 ;; Defined at:
  6145 ;;		line 33 in file "../src/RF_Control_B1.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;  command         1    wreg     unsigned char 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;  command         1    2[BANK0 ] unsigned char 
  6150 ;; Return value:  Size  Location     Type
  6151 ;;		None               void
  6152 ;; Registers used:
  6153 ;;		wreg, status,2, status,0
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;Total ram usage:        2 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    5
  6166 ;; This function calls:
  6167 ;;		Nothing
  6168 ;; This function is called by:
  6169 ;;		_setSw_Main
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           
  6174                           ;psect for function _setRF_Learn
  6175  1B10                     _setRF_Learn:	
  6176                           
  6177                           ;incstack = 0
  6178                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6179                           ;setRF_Learn@command stored from wreg
  6180  1B10  0020               	movlb	0	; select bank0
  6181  1B11  00A2               	movwf	setRF_Learn@command
  6182                           
  6183                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6184  1B12  0822               	movf	setRF_Learn@command,w
  6185  1B13  3A01               	xorlw	1
  6186  1B14  3000               	movlw	0
  6187  1B15  1903               	skipnz
  6188  1B16  3001               	movlw	1
  6189  1B17  00A1               	movwf	??_setRF_Learn
  6190  1B18  0EA1               	swapf	??_setRF_Learn,f
  6191  1B19  0DA1               	rlf	??_setRF_Learn,f
  6192  1B1A  0DA1               	rlf	??_setRF_Learn,f
  6193  1B1B  0021               	movlb	1	; select bank1
  6194  1B1C  0820               	movf	_RF1^(0+128),w
  6195  1B1D  0020               	movlb	0	; select bank0
  6196  1B1E  0621               	xorwf	??_setRF_Learn,w
  6197  1B1F  39BF               	andlw	-65
  6198  1B20  0621               	xorwf	??_setRF_Learn,w
  6199  1B21  0021               	movlb	1	; select bank1
  6200  1B22  00A0               	movwf	_RF1^(0+128)
  6201  1B23  0008               	return
  6202  1B24                     __end_of_setRF_Learn:	
  6203                           
  6204                           	psect	text15
  6205  1EC3                     __ptext15:	
  6206 ;; *************** function _setDimmerLights_DimmingOn *****************
  6207 ;; Defined at:
  6208 ;;		line 750 in file "../src/Dimmer_B1.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;  sw              1    wreg     unsigned char 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;  sw              1    3[BANK0 ] unsigned char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;		None               void
  6215 ;; Registers used:
  6216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;Total ram usage:        1 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    6
  6229 ;; This function calls:
  6230 ;;		_DimmerLights_SelectPointer
  6231 ;; This function is called by:
  6232 ;;		_setSw_Main
  6233 ;; This function uses a non-reentrant model
  6234 ;;
  6235                           
  6236                           
  6237                           ;psect for function _setDimmerLights_DimmingOn
  6238  1EC3                     _setDimmerLights_DimmingOn:	
  6239                           
  6240                           ;incstack = 0
  6241                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6242                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6243  1EC3  0020               	movlb	0	; select bank0
  6244  1EC4  00A3               	movwf	setDimmerLights_DimmingOn@sw
  6245                           
  6246                           ;Dimmer_B1.c: 756: DimmerLights_SelectPointer(sw);
  6247  1EC5  0823               	movf	setDimmerLights_DimmingOn@sw,w
  6248  1EC6  319B  23A5  319E   	fcall	_DimmerLights_SelectPointer
  6249                           
  6250                           ;Dimmer_B1.c: 757: if (DimmerLights->Trigger == 0) {
  6251  1EC9  0021               	movlb	1	; select bank1
  6252  1ECA  0855               	movf	_DimmerLights^(0+128),w
  6253  1ECB  0086               	movwf	6
  6254  1ECC  3001               	movlw	1	; select bank2/3
  6255  1ECD  0087               	movwf	7
  6256  1ECE  1881               	btfsc	1,1
  6257  1ECF  0008               	return
  6258                           
  6259                           ;Dimmer_B1.c: 758: if (DimmerLights->SwFlag == 1) {
  6260  1ED0  0855               	movf	_DimmerLights^(0+128),w
  6261  1ED1  0086               	movwf	6
  6262  1ED2  3001               	movlw	1	; select bank2/3
  6263  1ED3  0087               	movwf	7
  6264  1ED4  1C01               	btfss	1,0
  6265  1ED5  0008               	return
  6266                           
  6267                           ;Dimmer_B1.c: 759: DimmerLights->Status = 1;
  6268  1ED6  0A55               	incf	_DimmerLights^(0+128),w
  6269  1ED7  0086               	movwf	6
  6270  1ED8  3001               	movlw	1	; select bank2/3
  6271  1ED9  0087               	movwf	7
  6272  1EDA  1401               	bsf	1,0
  6273                           
  6274                           ;Dimmer_B1.c: 761: DimmerLights->DimmingSwFlag = 1;
  6275  1EDB  0855               	movf	_DimmerLights^(0+128),w
  6276  1EDC  0086               	movwf	6
  6277  1EDD  3001               	movlw	1	; select bank2/3
  6278  1EDE  0087               	movwf	7
  6279  1EDF  1581               	bsf	1,3
  6280                           
  6281                           ;Dimmer_B1.c: 762: DimmerLights->DimmingTrigger = 1;
  6282  1EE0  0855               	movf	_DimmerLights^(0+128),w
  6283  1EE1  0086               	movwf	6
  6284  1EE2  3001               	movlw	1	; select bank2/3
  6285  1EE3  0087               	movwf	7
  6286  1EE4  1601               	bsf	1,4
  6287                           
  6288                           ;Dimmer_B1.c: 763: DimmerLights->DimmingSwitch = 1;
  6289  1EE5  0855               	movf	_DimmerLights^(0+128),w
  6290  1EE6  0086               	movwf	6
  6291  1EE7  3001               	movlw	1	; select bank2/3
  6292  1EE8  0087               	movwf	7
  6293  1EE9  1681               	bsf	1,5
  6294  1EEA  0008               	return
  6295  1EEB                     __end_of_setDimmerLights_DimmingOn:	
  6296                           
  6297                           	psect	text16
  6298  1D30                     __ptext16:	
  6299 ;; *************** function _getSw_KeyStatus *****************
  6300 ;; Defined at:
  6301 ;;		line 237 in file "../src/Switch_B1.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  sw              1    wreg     unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  sw              1    5[BANK0 ] unsigned char 
  6306 ;;  status          1    4[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      unsigned char 
  6309 ;; Registers used:
  6310 ;;		wreg, status,2
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;Total ram usage:        5 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    5
  6323 ;; This function calls:
  6324 ;;		Nothing
  6325 ;; This function is called by:
  6326 ;;		_setSw_Main
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           
  6331                           ;psect for function _getSw_KeyStatus
  6332  1D30                     _getSw_KeyStatus:	
  6333                           
  6334                           ;incstack = 0
  6335                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6336                           ;getSw_KeyStatus@sw stored from wreg
  6337  1D30  0020               	movlb	0	; select bank0
  6338  1D31  00A5               	movwf	getSw_KeyStatus@sw
  6339                           
  6340                           ;Switch_B1.c: 238: char status = 0;
  6341  1D32  01A4               	clrf	getSw_KeyStatus@status
  6342                           
  6343                           ;Switch_B1.c: 258: if (sw == 1) {
  6344  1D33  0825               	movf	getSw_KeyStatus@sw,w
  6345  1D34  3A01               	xorlw	1
  6346  1D35  1D03               	skipz
  6347  1D36  2D3F               	goto	l7750
  6348                           
  6349                           ;Switch_B1.c: 259: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6350  1D37  01A2               	clrf	_getSw_KeyStatus$6151
  6351  1D38  0AA2               	incf	_getSw_KeyStatus$6151,f
  6352  1D39  1F0C               	btfss	12,6	;volatile
  6353  1D3A  1A0C               	btfsc	12,4	;volatile
  6354  1D3B  2D3D               	goto	l7748
  6355  1D3C  01A2               	clrf	_getSw_KeyStatus$6151
  6356  1D3D                     l7748:	
  6357  1D3D  0822               	movf	_getSw_KeyStatus$6151,w
  6358  1D3E  2D4A               	goto	L2
  6359  1D3F                     l7750:	
  6360                           ;Switch_B1.c: 260: } else if (sw == 2) {
  6361                           
  6362  1D3F  0825               	movf	getSw_KeyStatus@sw,w
  6363  1D40  3A02               	xorlw	2
  6364  1D41  1D03               	skipz
  6365  1D42  2D4D               	goto	l7760
  6366                           
  6367                           ;Switch_B1.c: 261: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6368  1D43  01A3               	clrf	_getSw_KeyStatus$6152
  6369  1D44  0AA3               	incf	_getSw_KeyStatus$6152,f
  6370  1D45  1C0C               	btfss	12,0	;volatile
  6371  1D46  188D               	btfsc	13,1	;volatile
  6372  1D47  2D49               	goto	l7758
  6373  1D48  01A3               	clrf	_getSw_KeyStatus$6152
  6374  1D49                     l7758:	
  6375  1D49  0823               	movf	_getSw_KeyStatus$6152,w
  6376  1D4A                     L2:	
  6377  1D4A  00A1               	movwf	??_getSw_KeyStatus
  6378  1D4B  0821               	movf	??_getSw_KeyStatus,w
  6379  1D4C  00A4               	movwf	getSw_KeyStatus@status
  6380  1D4D                     l7760:	
  6381                           
  6382                           ;Switch_B1.c: 262: }
  6383                           ;Switch_B1.c: 275: return status;
  6384  1D4D  0824               	movf	getSw_KeyStatus@status,w
  6385  1D4E  0008               	return
  6386  1D4F                     __end_of_getSw_KeyStatus:	
  6387                           
  6388                           	psect	text17
  6389  1BEA                     __ptext17:	
  6390 ;; *************** function _SwPointSelect *****************
  6391 ;; Defined at:
  6392 ;;		line 25 in file "../src/Switch_B1.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  sw              1    wreg     unsigned char 
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;  sw              1    2[BANK0 ] unsigned char 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;		None               void
  6399 ;; Registers used:
  6400 ;;		wreg
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;Total ram usage:        2 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    5
  6413 ;; This function calls:
  6414 ;;		Nothing
  6415 ;; This function is called by:
  6416 ;;		_setSw_Main
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           
  6421                           ;psect for function _SwPointSelect
  6422  1BEA                     _SwPointSelect:	
  6423                           
  6424                           ;incstack = 0
  6425                           ; Regs used in _SwPointSelect: [wreg]
  6426                           ;SwPointSelect@sw stored from wreg
  6427  1BEA  0020               	movlb	0	; select bank0
  6428  1BEB  00A2               	movwf	SwPointSelect@sw
  6429                           
  6430                           ;Switch_B1.c: 28: if (sw == 1) {
  6431  1BEC  0822               	movf	SwPointSelect@sw,w
  6432  1BED  3A01               	xorlw	1
  6433  1BEE  1D03               	skipz
  6434  1BEF  2BF6               	goto	l7734
  6435                           
  6436                           ;Switch_B1.c: 29: Sw = &Sw1;
  6437  1BF0  30BE               	movlw	_Sw1& (0+255)
  6438  1BF1  00A1               	movwf	??_SwPointSelect
  6439  1BF2  0821               	movf	??_SwPointSelect,w
  6440  1BF3  0021               	movlb	1	; select bank1
  6441  1BF4  00D8               	movwf	_Sw^(0+128)
  6442                           
  6443                           ;Switch_B1.c: 30: }
  6444  1BF5  0008               	return
  6445  1BF6                     l7734:	
  6446                           
  6447                           ;Switch_B1.c: 33: else if (sw == 2) {
  6448  1BF6  0020               	movlb	0	; select bank0
  6449  1BF7  0822               	movf	SwPointSelect@sw,w
  6450  1BF8  3A02               	xorlw	2
  6451  1BF9  1D03               	skipz
  6452  1BFA  0008               	return
  6453                           
  6454                           ;Switch_B1.c: 34: Sw = &Sw2;
  6455  1BFB  30C7               	movlw	_Sw2& (0+255)
  6456  1BFC  00A1               	movwf	??_SwPointSelect
  6457  1BFD  0821               	movf	??_SwPointSelect,w
  6458  1BFE  0021               	movlb	1	; select bank1
  6459  1BFF  00D8               	movwf	_Sw^(0+128)
  6460  1C00  0008               	return
  6461  1C01                     __end_of_SwPointSelect:	
  6462                           
  6463                           	psect	text18
  6464  1B63                     __ptext18:	
  6465 ;; *************** function _TouchPower *****************
  6466 ;; Defined at:
  6467 ;;		line 10 in file "../src/Switch_B1.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;		None
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;		None
  6472 ;; Return value:  Size  Location     Type
  6473 ;;		None               void
  6474 ;; Registers used:
  6475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;Total ram usage:        0 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    6
  6488 ;; This function calls:
  6489 ;;		_Timeout_Counter
  6490 ;;		_set_TimeoutCleared
  6491 ;; This function is called by:
  6492 ;;		_Switch_Main
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _TouchPower
  6498  1B63                     _TouchPower:	
  6499                           
  6500                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6501                           
  6502                           ;incstack = 0
  6503                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6504  1B63  0021               	movlb	1	; select bank1
  6505  1B64  1C2E               	btfss	_myMain^(0+128),0
  6506  1B65  0008               	return
  6507                           
  6508                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6509  1B66  0020               	movlb	0	; select bank0
  6510  1B67  1A8E               	btfsc	14,5	;volatile
  6511  1B68  0008               	return
  6512  1B69  2B6F               	goto	l8430
  6513  1B6A                     l2543:	
  6514                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6515                           
  6516                           
  6517                           ;Switch_B1.c: 14: RC5 = 1;
  6518  1B6A  0020               	movlb	0	; select bank0
  6519  1B6B  168E               	bsf	14,5	;volatile
  6520                           
  6521                           ;Switch_B1.c: 15: Timeout_Counter();
  6522  1B6C  319B  234E  319B   	fcall	_Timeout_Counter
  6523  1B6F                     l8430:	
  6524  1B6F  0020               	movlb	0	; select bank0
  6525  1B70  1A8E               	btfsc	14,5	;volatile
  6526  1B71  2B75               	goto	l8434
  6527  1B72  0021               	movlb	1	; select bank1
  6528  1B73  1D38               	btfss	(_myMain^(0+128)+10),2
  6529  1B74  2B6A               	goto	l2543
  6530  1B75                     l8434:	
  6531                           
  6532                           ;Switch_B1.c: 16: }
  6533                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6534  1B75  3198  20D3         	fcall	_set_TimeoutCleared
  6535  1B77  0008               	return
  6536  1B78                     __end_of_TouchPower:	
  6537                           
  6538                           	psect	text19
  6539  18D3                     __ptext19:	
  6540 ;; *************** function _set_TimeoutCleared *****************
  6541 ;; Defined at:
  6542 ;;		line 281 in file "../src/main_B1.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;		None
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		status,2
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;Total ram usage:        0 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    5
  6563 ;; This function calls:
  6564 ;;		Nothing
  6565 ;; This function is called by:
  6566 ;;		_getAD
  6567 ;;		_TouchPower
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           
  6572                           ;psect for function _set_TimeoutCleared
  6573  18D3                     _set_TimeoutCleared:	
  6574                           
  6575                           ;main_B1.c: 282: myMain.Timeout = 0;
  6576                           
  6577                           ;incstack = 0
  6578                           ; Regs used in _set_TimeoutCleared: [status,2]
  6579  18D3  0021               	movlb	1	; select bank1
  6580  18D4  1138               	bcf	(_myMain^(0+128)+10),2
  6581                           
  6582                           ;main_B1.c: 283: myMain.Timeout_Counter = 0;
  6583  18D5  01B9               	clrf	(_myMain^(0+128)+11)
  6584  18D6  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6585  18D7  0008               	return
  6586  18D8                     __end_of_set_TimeoutCleared:	
  6587                           
  6588                           	psect	text20
  6589  1B4E                     __ptext20:	
  6590 ;; *************** function _Timeout_Counter *****************
  6591 ;; Defined at:
  6592 ;;		line 272 in file "../src/main_B1.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;		None
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;		None
  6597 ;; Return value:  Size  Location     Type
  6598 ;;		None               void
  6599 ;; Registers used:
  6600 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;Total ram usage:        0 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:    5
  6613 ;; This function calls:
  6614 ;;		Nothing
  6615 ;; This function is called by:
  6616 ;;		_getAD
  6617 ;;		_TouchPower
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           
  6622                           ;psect for function _Timeout_Counter
  6623  1B4E                     _Timeout_Counter:	
  6624                           
  6625                           ;main_B1.c: 273: myMain.Timeout_Counter++;
  6626                           
  6627                           ;incstack = 0
  6628                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6629  1B4E  3001               	movlw	1
  6630  1B4F  0021               	movlb	1	; select bank1
  6631  1B50  07B9               	addwf	(_myMain^(0+128)+11),f
  6632  1B51  3000               	movlw	0
  6633  1B52  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6634                           
  6635                           ;main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6636  1B53  300B               	movlw	11
  6637  1B54  3EAE               	addlw	_myMain& (0+255)
  6638  1B55  0086               	movwf	6
  6639  1B56  0187               	clrf	7
  6640  1B57  3F40               	moviw [0]fsr1
  6641  1B58  3AA8               	xorlw	168
  6642  1B59  1D03               	skipz
  6643  1B5A  2B5D               	goto	u7295
  6644  1B5B  3F41               	moviw [1]fsr1
  6645  1B5C  3A61               	xorlw	97
  6646  1B5D                     u7295:	
  6647  1B5D  1D03               	skipz
  6648  1B5E  0008               	return
  6649                           
  6650                           ;main_B1.c: 275: myMain.Timeout_Counter = 0;
  6651  1B5F  01B9               	clrf	(_myMain^(0+128)+11)
  6652  1B60  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6653                           
  6654                           ;main_B1.c: 276: myMain.Timeout = 1;
  6655  1B61  1538               	bsf	(_myMain^(0+128)+10),2
  6656  1B62  0008               	return
  6657  1B63                     __end_of_Timeout_Counter:	
  6658                           
  6659                           	psect	text21
  6660  1921                     __ptext21:	
  6661 ;; *************** function _Switch_Initialization *****************
  6662 ;; Defined at:
  6663 ;;		line 46 in file "../src/Switch_B1.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;		None
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;		None               void
  6670 ;; Registers used:
  6671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;Total ram usage:        0 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    8
  6684 ;; This function calls:
  6685 ;;		_setSw_Initialization
  6686 ;; This function is called by:
  6687 ;;		_main
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _Switch_Initialization
  6693  1921                     _Switch_Initialization:	
  6694                           
  6695                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6696                           
  6697                           ;incstack = 0
  6698                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6699  1921  3001               	movlw	1
  6700  1922  3199  2119  3199   	fcall	_setSw_Initialization
  6701                           
  6702                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6703  1925  3002               	movlw	2
  6704  1926  3199  2119         	fcall	_setSw_Initialization
  6705  1928  0008               	return
  6706  1929                     __end_of_Switch_Initialization:	
  6707                           
  6708                           	psect	text22
  6709  1919                     __ptext22:	
  6710 ;; *************** function _setSw_Initialization *****************
  6711 ;; Defined at:
  6712 ;;		line 66 in file "../src/Switch_B1.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;  sw              1    wreg     unsigned char 
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  sw              1    5[BANK0 ] unsigned char 
  6717 ;; Return value:  Size  Location     Type
  6718 ;;		None               void
  6719 ;; Registers used:
  6720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;Total ram usage:        1 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    7
  6733 ;; This function calls:
  6734 ;;		_setLED
  6735 ;; This function is called by:
  6736 ;;		_Switch_Initialization
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           
  6741                           ;psect for function _setSw_Initialization
  6742  1919                     _setSw_Initialization:	
  6743                           
  6744                           ;incstack = 0
  6745                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6746                           ;setSw_Initialization@sw stored from wreg
  6747  1919  0020               	movlb	0	; select bank0
  6748  191A  00A5               	movwf	setSw_Initialization@sw
  6749                           
  6750                           ;Switch_B1.c: 68: setLED(sw, 1);
  6751  191B  01A3               	clrf	setLED@command
  6752  191C  0AA3               	incf	setLED@command,f
  6753  191D  0825               	movf	setSw_Initialization@sw,w
  6754  191E  3193  2302         	fcall	_setLED
  6755  1920  0008               	return
  6756  1921                     __end_of_setSw_Initialization:	
  6757                           
  6758                           	psect	text23
  6759  18B6                     __ptext23:	
  6760 ;; *************** function _RF_Main *****************
  6761 ;; Defined at:
  6762 ;;		line 26 in file "../src/RF_Control_B1.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;		None
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;		None
  6767 ;; Return value:  Size  Location     Type
  6768 ;;		None               void
  6769 ;; Registers used:
  6770 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;Total ram usage:        0 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:   12
  6783 ;; This function calls:
  6784 ;;		_setRF_Main
  6785 ;; This function is called by:
  6786 ;;		_main
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           
  6791                           ;psect for function _RF_Main
  6792  18B6                     _RF_Main:	
  6793                           
  6794                           ;RF_Control_B1.c: 28: setRF_Main();
  6795                           
  6796                           ;incstack = 0
  6797                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6798  18B6  3185  2555         	fcall	_setRF_Main
  6799  18B8  0008               	return
  6800  18B9                     __end_of_RF_Main:	
  6801                           
  6802                           	psect	text24
  6803  0555                     __ptext24:	
  6804 ;; *************** function _setRF_Main *****************
  6805 ;; Defined at:
  6806 ;;		line 53 in file "../src/RF_Control_B1.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;		None
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  error           1    6[BANK1 ] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;		None               void
  6813 ;; Registers used:
  6814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;Total ram usage:        2 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:   11
  6827 ;; This function calls:
  6828 ;;		_CC2500_PowerOnInitial
  6829 ;;		_CC2500_RxData
  6830 ;;		_CC2500_TxData
  6831 ;;		_CC2500_WriteCommand
  6832 ;;		_RF_RxDisable
  6833 ;;		___lwdiv
  6834 ;;		_getBuz_GO
  6835 ;;		_getRF_KeyStatus
  6836 ;;		_getRxData
  6837 ;; This function is called by:
  6838 ;;		_RF_Main
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           
  6843                           ;psect for function _setRF_Main
  6844  0555                     _setRF_Main:	
  6845                           
  6846                           ;RF_Control_B1.c: 54: char error = 0;
  6847                           
  6848                           ;incstack = 0
  6849                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6850  0555  0021               	movlb	1	; select bank1
  6851  0556  01EB               	clrf	setRF_Main@error^(0+128)
  6852                           
  6853                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6854  0557  1C20               	btfss	_RF1^(0+128),0
  6855  0558  2E26               	goto	l2146
  6856                           
  6857                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6858  0559  319A  2222  3185   	fcall	_getBuz_GO
  6859  055C  0020               	movlb	0	; select bank0
  6860  055D  0822               	movf	?_getBuz_GO+1,w
  6861  055E  0421               	iorwf	?_getBuz_GO,w
  6862  055F  1D03               	skipz
  6863  0560  2E07               	goto	l10168
  6864                           
  6865                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6866  0561  319A  2233  3185   	fcall	_getRF_KeyStatus
  6867  0564  3A01               	xorlw	1
  6868  0565  3000               	movlw	0
  6869  0566  1903               	skipnz
  6870  0567  3001               	movlw	1
  6871  0568  0021               	movlb	1	; select bank1
  6872  0569  00EA               	movwf	??_setRF_Main^(0+128)
  6873  056A  0CEA               	rrf	??_setRF_Main^(0+128),f
  6874  056B  0CEA               	rrf	??_setRF_Main^(0+128),f
  6875  056C  0820               	movf	_RF1^(0+128),w
  6876  056D  066A               	xorwf	??_setRF_Main^(0+128),w
  6877  056E  397F               	andlw	-129
  6878  056F  066A               	xorwf	??_setRF_Main^(0+128),w
  6879  0570  00A0               	movwf	_RF1^(0+128)
  6880                           
  6881                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6882  0571  1FA0               	btfss	_RF1^(0+128),7
  6883  0572  2D75               	goto	l2150
  6884  0573  1F20               	btfss	_RF1^(0+128),6
  6885  0574  2E07               	goto	l10168
  6886  0575                     l2150:	
  6887                           
  6888                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6889  0575  1D20               	btfss	_RF1^(0+128),2
  6890  0576  2DC6               	goto	l2151
  6891                           
  6892                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6893  0577  1B20               	btfsc	_RF1^(0+128),6
  6894  0578  2DC1               	goto	l10140
  6895                           
  6896                           ;RF_Control_B1.c: 68: RF1.Count++;
  6897  0579  3001               	movlw	1
  6898  057A  07A2               	addwf	(_RF1^(0+128)+2),f
  6899  057B  3000               	movlw	0
  6900  057C  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6901                           
  6902                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6903  057D  3014               	movlw	20
  6904  057E  0020               	movlb	0	; select bank0
  6905  057F  00A1               	movwf	___lwdiv@divisor
  6906  0580  3000               	movlw	0
  6907  0581  00A2               	movwf	___lwdiv@divisor+1
  6908  0582  0021               	movlb	1	; select bank1
  6909  0583  0828               	movf	((_RF1+1)^(0+128)+7),w
  6910  0584  0020               	movlb	0	; select bank0
  6911  0585  01A4               	clrf	___lwdiv@dividend+1
  6912  0586  07A4               	addwf	___lwdiv@dividend+1,f
  6913  0587  0021               	movlb	1	; select bank1
  6914  0588  0827               	movf	(_RF1^(0+128)+7),w
  6915  0589  0020               	movlb	0	; select bank0
  6916  058A  01A3               	clrf	___lwdiv@dividend
  6917  058B  07A3               	addwf	___lwdiv@dividend,f
  6918  058C  3190  2047  3185   	fcall	___lwdiv
  6919  058F  0020               	movlb	0	; select bank0
  6920  0590  0822               	movf	?___lwdiv+1,w
  6921  0591  0021               	movlb	1	; select bank1
  6922  0592  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6923  0593  1D03               	skipz
  6924  0594  2D99               	goto	u12065
  6925  0595  0020               	movlb	0	; select bank0
  6926  0596  0821               	movf	?___lwdiv,w
  6927  0597  0021               	movlb	1	; select bank1
  6928  0598  0222               	subwf	(_RF1^(0+128)+2),w
  6929  0599                     u12065:	
  6930  0599  1C03               	skipc
  6931  059A  2E07               	goto	l10168
  6932                           
  6933                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6934  059B  3014               	movlw	20
  6935  059C  0020               	movlb	0	; select bank0
  6936  059D  00A1               	movwf	___lwdiv@divisor
  6937  059E  3000               	movlw	0
  6938  059F  00A2               	movwf	___lwdiv@divisor+1
  6939  05A0  0021               	movlb	1	; select bank1
  6940  05A1  0828               	movf	((_RF1+1)^(0+128)+7),w
  6941  05A2  0020               	movlb	0	; select bank0
  6942  05A3  01A4               	clrf	___lwdiv@dividend+1
  6943  05A4  07A4               	addwf	___lwdiv@dividend+1,f
  6944  05A5  0021               	movlb	1	; select bank1
  6945  05A6  0827               	movf	(_RF1^(0+128)+7),w
  6946  05A7  0020               	movlb	0	; select bank0
  6947  05A8  01A3               	clrf	___lwdiv@dividend
  6948  05A9  07A3               	addwf	___lwdiv@dividend,f
  6949  05AA  3190  2047  3185   	fcall	___lwdiv
  6950  05AD  0020               	movlb	0	; select bank0
  6951  05AE  0822               	movf	?___lwdiv+1,w
  6952  05AF  0021               	movlb	1	; select bank1
  6953  05B0  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6954  05B1  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6955  05B2  0020               	movlb	0	; select bank0
  6956  05B3  0821               	movf	?___lwdiv,w
  6957  05B4  0021               	movlb	1	; select bank1
  6958  05B5  01A2               	clrf	(_RF1^(0+128)+2)
  6959  05B6  07A2               	addwf	(_RF1^(0+128)+2),f
  6960                           
  6961                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6962  05B7  1120               	bcf	_RF1^(0+128),2
  6963                           
  6964                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6965  05B8  01AA               	clrf	(_RF1^(0+128)+10)
  6966  05B9  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6967                           
  6968                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6969  05BA  3199  21E0  3185   	fcall	_RF_RxDisable
  6970                           
  6971                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6972  05BD  3196  26B6  3185   	fcall	_CC2500_TxData
  6973                           
  6974                           ;RF_Control_B1.c: 77: }
  6975                           ;RF_Control_B1.c: 78: } else {
  6976  05C0  2E07               	goto	l10168
  6977  05C1                     l10140:	
  6978                           
  6979                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6980  05C1  0021               	movlb	1	; select bank1
  6981  05C2  01A2               	clrf	(_RF1^(0+128)+2)
  6982  05C3  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6983                           
  6984                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6985  05C4  1120               	bcf	_RF1^(0+128),2
  6986                           
  6987                           ;RF_Control_B1.c: 81: }
  6988                           ;RF_Control_B1.c: 82: } else {
  6989  05C5  2E07               	goto	l10168
  6990  05C6                     l2151:	
  6991                           
  6992                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6993  05C6  1DA0               	btfss	_RF1^(0+128),3
  6994  05C7  2DD5               	goto	l10154
  6995                           
  6996                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6997  05C8  3197  2723  3185   	fcall	_CC2500_RxData
  6998                           
  6999                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7000  05CB  0021               	movlb	1	; select bank1
  7001  05CC  1CA0               	btfss	_RF1^(0+128),1
  7002  05CD  2E07               	goto	l10168
  7003                           
  7004                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7005  05CE  10A0               	bcf	_RF1^(0+128),1
  7006                           
  7007                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7008  05CF  01AA               	clrf	(_RF1^(0+128)+10)
  7009  05D0  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7010                           
  7011                           ;RF_Control_B1.c: 97: getRxData();
  7012  05D1  3188  20C8  3185   	fcall	_getRxData
  7013                           
  7014                           ;RF_Control_B1.c: 100: }
  7015                           ;RF_Control_B1.c: 101: } else {
  7016  05D4  2E07               	goto	l10168
  7017  05D5                     l10154:	
  7018                           
  7019                           ;RF_Control_B1.c: 102: RF1.Count++;
  7020  05D5  3001               	movlw	1
  7021  05D6  0021               	movlb	1	; select bank1
  7022  05D7  07A2               	addwf	(_RF1^(0+128)+2),f
  7023  05D8  3000               	movlw	0
  7024  05D9  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  7025                           
  7026                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7027  05DA  3014               	movlw	20
  7028  05DB  0020               	movlb	0	; select bank0
  7029  05DC  00A1               	movwf	___lwdiv@divisor
  7030  05DD  3000               	movlw	0
  7031  05DE  00A2               	movwf	___lwdiv@divisor+1
  7032  05DF  0021               	movlb	1	; select bank1
  7033  05E0  0828               	movf	((_RF1+1)^(0+128)+7),w
  7034  05E1  0020               	movlb	0	; select bank0
  7035  05E2  01A4               	clrf	___lwdiv@dividend+1
  7036  05E3  07A4               	addwf	___lwdiv@dividend+1,f
  7037  05E4  0021               	movlb	1	; select bank1
  7038  05E5  0827               	movf	(_RF1^(0+128)+7),w
  7039  05E6  0020               	movlb	0	; select bank0
  7040  05E7  01A3               	clrf	___lwdiv@dividend
  7041  05E8  07A3               	addwf	___lwdiv@dividend,f
  7042  05E9  3190  2047  3185   	fcall	___lwdiv
  7043  05EC  0020               	movlb	0	; select bank0
  7044  05ED  0822               	movf	?___lwdiv+1,w
  7045  05EE  0021               	movlb	1	; select bank1
  7046  05EF  0223               	subwf	((_RF1+1)^(0+128)+2),w
  7047  05F0  1D03               	skipz
  7048  05F1  2DF6               	goto	u12095
  7049  05F2  0020               	movlb	0	; select bank0
  7050  05F3  0821               	movf	?___lwdiv,w
  7051  05F4  0021               	movlb	1	; select bank1
  7052  05F5  0222               	subwf	(_RF1^(0+128)+2),w
  7053  05F6                     u12095:	
  7054  05F6  1C03               	skipc
  7055  05F7  2E07               	goto	l10168
  7056                           
  7057                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7058  05F8  01A2               	clrf	(_RF1^(0+128)+2)
  7059  05F9  01A3               	clrf	((_RF1+1)^(0+128)+2)
  7060                           
  7061                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7062  05FA  15A0               	bsf	_RF1^(0+128),3
  7063                           
  7064                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7065  05FB  3036               	movlw	54
  7066  05FC  319C  244D  3185   	fcall	_CC2500_WriteCommand
  7067                           
  7068                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7069  05FF  303A               	movlw	58
  7070  0600  319C  244D  3185   	fcall	_CC2500_WriteCommand
  7071                           
  7072                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7073  0603  3034               	movlw	52
  7074  0604  319C  244D  3185   	fcall	_CC2500_WriteCommand
  7075  0607                     l10168:	
  7076                           
  7077                           ;RF_Control_B1.c: 111: }
  7078                           ;RF_Control_B1.c: 112: }
  7079                           ;RF_Control_B1.c: 113: }
  7080                           ;RF_Control_B1.c: 114: }
  7081                           ;RF_Control_B1.c: 115: }
  7082                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7083  0607  3001               	movlw	1
  7084  0608  0021               	movlb	1	; select bank1
  7085  0609  07AA               	addwf	(_RF1^(0+128)+10),f
  7086  060A  3000               	movlw	0
  7087  060B  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  7088                           
  7089                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7090  060C  300B               	movlw	11
  7091  060D  022B               	subwf	((_RF1+1)^(0+128)+10),w
  7092  060E  30B9               	movlw	185
  7093  060F  1903               	skipnz
  7094  0610  022A               	subwf	(_RF1^(0+128)+10),w
  7095  0611  1C03               	skipc
  7096  0612  2E1F               	goto	l10182
  7097                           
  7098                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7099  0613  01AA               	clrf	(_RF1^(0+128)+10)
  7100  0614  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7101                           
  7102                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7103  0615  11A0               	bcf	_RF1^(0+128),3
  7104                           
  7105                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7106  0616  10A0               	bcf	_RF1^(0+128),1
  7107                           
  7108                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7109  0617  3036               	movlw	54
  7110  0618  319C  244D  3185   	fcall	_CC2500_WriteCommand
  7111                           
  7112                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7113  061B  303A               	movlw	58
  7114  061C  319C  244D  3185   	fcall	_CC2500_WriteCommand
  7115  061F                     l10182:	
  7116                           
  7117                           ;RF_Control_B1.c: 125: }
  7118                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7119  061F  0021               	movlb	1	; select bank1
  7120  0620  1F21               	btfss	(_RF1^(0+128)+1),6
  7121  0621  0008               	return
  7122                           
  7123                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7124  0622  1321               	bcf	(_RF1^(0+128)+1),6
  7125                           
  7126                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7127  0623  319B  2339         	fcall	_CC2500_PowerOnInitial
  7128                           
  7129                           ;RF_Control_B1.c: 130: }
  7130                           ;RF_Control_B1.c: 132: } else {
  7131  0625  0008               	return
  7132  0626                     l2146:	
  7133                           
  7134                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7135  0626  1C2E               	btfss	_myMain^(0+128),0
  7136  0627  0008               	return
  7137                           
  7138                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7139  0628  1420               	bsf	_RF1^(0+128),0
  7140  0629  0008               	return
  7141  062A                     __end_of_setRF_Main:	
  7142                           
  7143                           	psect	text25
  7144  08C8                     __ptext25:	
  7145 ;; *************** function _getRxData *****************
  7146 ;; Defined at:
  7147 ;;		line 227 in file "../src/RF_Control_B1.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;		None
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  error           1    4[BANK1 ] unsigned char 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;		None               void
  7154 ;; Registers used:
  7155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7162 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7163 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;Total ram usage:        2 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:   10
  7168 ;; This function calls:
  7169 ;;		_getMain_All_Error_Status
  7170 ;;		_setControl_Lights_Table
  7171 ;;		_setLog_Code
  7172 ;;		_setTxData
  7173 ;; This function is called by:
  7174 ;;		_setRF_Main
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           
  7179                           ;psect for function _getRxData
  7180  08C8                     _getRxData:	
  7181                           
  7182                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7183                           
  7184                           ;incstack = 0
  7185                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7186  08C8  0023               	movlb	3	; select bank3
  7187  08C9  0820               	movf	_RF_Data^(0+384),w
  7188  08CA  3AAA               	xorlw	170
  7189  08CB  1D03               	skipz
  7190  08CC  28DE               	goto	l9930
  7191  08CD  0821               	movf	(_RF_Data^(0+384)+1),w
  7192  08CE  3A01               	xorlw	1
  7193  08CF  1D03               	skipz
  7194  08D0  28DE               	goto	l9930
  7195                           
  7196                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7197  08D1  3055               	movlw	85
  7198  08D2  0021               	movlb	1	; select bank1
  7199  08D3  00E8               	movwf	??_getRxData^(0+128)
  7200  08D4  086D               	movf	_product^(0+128),w
  7201  08D5  3E02               	addlw	2
  7202  08D6  0086               	movwf	6
  7203  08D7  3002               	movlw	2	; select bank4/5
  7204  08D8  0087               	movwf	7
  7205  08D9  0868               	movf	??_getRxData^(0+128),w
  7206  08DA  0081               	movwf	1
  7207                           
  7208                           ;RF_Control_B1.c: 231: setTxData();
  7209  08DB  318F  2745         	fcall	_setTxData
  7210                           
  7211                           ;RF_Control_B1.c: 235: } else {
  7212  08DD  0008               	return
  7213  08DE                     l9930:	
  7214                           
  7215                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7216  08DE  3000               	movlw	0
  7217  08DF  319F  27CD  3188   	fcall	_getMain_All_Error_Status
  7218  08E2  0021               	movlb	1	; select bank1
  7219  08E3  00E8               	movwf	??_getRxData^(0+128)
  7220  08E4  0868               	movf	??_getRxData^(0+128),w
  7221  08E5  00E9               	movwf	getRxData@error^(0+128)
  7222                           
  7223                           ;RF_Control_B1.c: 237: if (error == 0) {
  7224  08E6  08E9               	movf	getRxData@error^(0+128),f
  7225  08E7  1D03               	skipz
  7226  08E8  2938               	goto	l2191
  7227                           
  7228                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7229  08E9  1F20               	btfss	_RF1^(0+128),6
  7230  08EA  28F6               	goto	l9942
  7231                           
  7232                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7233  08EB  0023               	movlb	3	; select bank3
  7234  08EC  08A0               	movf	_RF_Data^(0+384),f
  7235  08ED  1D03               	skipz
  7236  08EE  0008               	return
  7237  08EF  0821               	movf	(_RF_Data^(0+384)+1),w
  7238  08F0  3A64               	xorlw	100
  7239  08F1  1D03               	skipz
  7240  08F2  0008               	return
  7241                           
  7242                           ;RF_Control_B1.c: 241: setLog_Code();
  7243  08F3  3190  2013         	fcall	_setLog_Code
  7244                           
  7245                           ;RF_Control_B1.c: 242: }
  7246                           ;RF_Control_B1.c: 243: } else {
  7247  08F5  0008               	return
  7248  08F6                     l9942:	
  7249                           
  7250                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7251  08F6  0023               	movlb	3	; select bank3
  7252  08F7  0834               	movf	(_RF_Data^(0+384)+20),w
  7253  08F8  3AD2               	xorlw	210
  7254  08F9  1903               	skipnz
  7255  08FA  28FF               	goto	l9946
  7256  08FB  0834               	movf	(_RF_Data^(0+384)+20),w
  7257  08FC  3A0A               	xorlw	10
  7258  08FD  1D03               	skipz
  7259  08FE  0008               	return
  7260  08FF                     l9946:	
  7261                           
  7262                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7263  08FF  08A0               	movf	_RF_Data^(0+384),f
  7264  0900  1D03               	skipz
  7265  0901  0008               	return
  7266  0902  0821               	movf	(_RF_Data^(0+384)+1),w
  7267  0903  3A02               	xorlw	2
  7268  0904  1D03               	skipz
  7269  0905  0008               	return
  7270                           
  7271                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7272  0906  082C               	movf	(_RF_Data^(0+384)+12),w
  7273  0907  3AFF               	xorlw	255
  7274  0908  1D03               	skipz
  7275  0909  2914               	goto	l9958
  7276  090A  082D               	movf	(_RF_Data^(0+384)+13),w
  7277  090B  3AFF               	xorlw	255
  7278  090C  1D03               	skipz
  7279  090D  2914               	goto	l9958
  7280  090E  082E               	movf	(_RF_Data^(0+384)+14),w
  7281  090F  3AFF               	xorlw	255
  7282  0910  1D03               	skipz
  7283  0911  2914               	goto	l9958
  7284                           
  7285                           ;RF_Control_B1.c: 249: __nop();
  7286  0912  0000               	nop
  7287                           
  7288                           ;RF_Control_B1.c: 250: } else {
  7289  0913  0008               	return
  7290  0914                     l9958:	
  7291                           
  7292                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7293  0914  0021               	movlb	1	; select bank1
  7294  0915  086D               	movf	_product^(0+128),w
  7295  0916  3E0C               	addlw	12
  7296  0917  0086               	movwf	6
  7297  0918  3002               	movlw	2	; select bank4/5
  7298  0919  0087               	movwf	7
  7299  091A  0023               	movlb	3	; select bank3
  7300  091B  082C               	movf	(_RF_Data^(0+384)+12),w
  7301  091C  0601               	xorwf	1,w
  7302  091D  1D03               	skipz
  7303  091E  0008               	return
  7304  091F  0021               	movlb	1	; select bank1
  7305  0920  086D               	movf	_product^(0+128),w
  7306  0921  3E0D               	addlw	13
  7307  0922  0086               	movwf	6
  7308  0923  3002               	movlw	2	; select bank4/5
  7309  0924  0087               	movwf	7
  7310  0925  0023               	movlb	3	; select bank3
  7311  0926  082D               	movf	(_RF_Data^(0+384)+13),w
  7312  0927  0601               	xorwf	1,w
  7313  0928  1D03               	skipz
  7314  0929  0008               	return
  7315  092A  0021               	movlb	1	; select bank1
  7316  092B  086D               	movf	_product^(0+128),w
  7317  092C  3E0E               	addlw	14
  7318  092D  0086               	movwf	6
  7319  092E  3002               	movlw	2	; select bank4/5
  7320  092F  0087               	movwf	7
  7321  0930  0023               	movlb	3	; select bank3
  7322  0931  082E               	movf	(_RF_Data^(0+384)+14),w
  7323  0932  0601               	xorwf	1,w
  7324  0933  1D03               	skipz
  7325  0934  0008               	return
  7326                           
  7327                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7328  0935  318C  24AB         	fcall	_setControl_Lights_Table
  7329                           
  7330                           ;RF_Control_B1.c: 253: }
  7331                           ;RF_Control_B1.c: 254: }
  7332                           ;RF_Control_B1.c: 256: }
  7333                           ;RF_Control_B1.c: 267: }
  7334                           ;RF_Control_B1.c: 268: }
  7335                           ;RF_Control_B1.c: 269: } else {
  7336  0937  0008               	return
  7337  0938                     l2191:	
  7338                           
  7339                           ;RF_Control_B1.c: 270: __nop();
  7340  0938  0000               	nop
  7341  0939  0008               	return
  7342  093A                     __end_of_getRxData:	
  7343                           
  7344                           	psect	text26
  7345  1013                     __ptext26:	
  7346 ;; *************** function _setLog_Code *****************
  7347 ;; Defined at:
  7348 ;;		line 276 in file "../src/RF_Control_B1.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;		None
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;		None
  7353 ;; Return value:  Size  Location     Type
  7354 ;;		None               void
  7355 ;; Registers used:
  7356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;Total ram usage:        1 bytes
  7367 ;; Hardware stack levels used:    1
  7368 ;; Hardware stack levels required when called:    7
  7369 ;; This function calls:
  7370 ;;		_setBuz
  7371 ;;		_setMemory_LoopSave
  7372 ;;		_setMemory_Modify
  7373 ;;		_setProductData
  7374 ;; This function is called by:
  7375 ;;		_getRxData
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           
  7380                           ;psect for function _setLog_Code
  7381  1013                     _setLog_Code:	
  7382                           
  7383                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7384                           
  7385                           ;incstack = 0
  7386                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7387  1013  0021               	movlb	1	; select bank1
  7388  1014  1320               	bcf	_RF1^(0+128),6
  7389                           
  7390                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7391  1015  0023               	movlb	3	; select bank3
  7392  1016  082C               	movf	(_RF_Data^(0+384)+12),w
  7393  1017  0020               	movlb	0	; select bank0
  7394  1018  00E6               	movwf	??_setLog_Code
  7395  1019  0866               	movf	??_setLog_Code,w
  7396  101A  00E3               	movwf	setProductData@value
  7397  101B  300C               	movlw	12
  7398  101C  3199  2173  3190   	fcall	_setProductData
  7399                           
  7400                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7401  101F  0023               	movlb	3	; select bank3
  7402  1020  082D               	movf	(_RF_Data^(0+384)+13),w
  7403  1021  0020               	movlb	0	; select bank0
  7404  1022  00E6               	movwf	??_setLog_Code
  7405  1023  0866               	movf	??_setLog_Code,w
  7406  1024  00E3               	movwf	setProductData@value
  7407  1025  300D               	movlw	13
  7408  1026  3199  2173  3190   	fcall	_setProductData
  7409                           
  7410                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7411  1029  0023               	movlb	3	; select bank3
  7412  102A  082E               	movf	(_RF_Data^(0+384)+14),w
  7413  102B  0020               	movlb	0	; select bank0
  7414  102C  00E6               	movwf	??_setLog_Code
  7415  102D  0866               	movf	??_setLog_Code,w
  7416  102E  00E3               	movwf	setProductData@value
  7417  102F  300E               	movlw	14
  7418  1030  3199  2173  3190   	fcall	_setProductData
  7419                           
  7420                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7421  1033  3064               	movlw	100
  7422  1034  0020               	movlb	0	; select bank0
  7423  1035  00AA               	movwf	setBuz@time
  7424  1036  3000               	movlw	0
  7425  1037  00AB               	movwf	setBuz@time+1
  7426  1038  3001               	movlw	1
  7427  1039  3188  2000  3190   	fcall	_setBuz
  7428                           
  7429                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7430  103C  0021               	movlb	1	; select bank1
  7431  103D  1EAE               	btfss	_myMain^(0+128),5
  7432  103E  2843               	goto	l2206
  7433                           
  7434                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7435  103F  3001               	movlw	1
  7436  1040  319A  22E9  3190   	fcall	_setMemory_LoopSave
  7437  1043                     l2206:	
  7438                           
  7439                           ;RF_Control_B1.c: 284: }
  7440                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7441  1043  3001               	movlw	1
  7442  1044  319A  22B0         	fcall	_setMemory_Modify
  7443  1046  0008               	return
  7444  1047                     __end_of_setLog_Code:	
  7445                           
  7446                           	psect	text27
  7447  1AE9                     __ptext27:	
  7448 ;; *************** function _setMemory_LoopSave *****************
  7449 ;; Defined at:
  7450 ;;		line 1087 in file "../src/MCU_B1.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;  command         1    wreg     unsigned char 
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;  command         1    2[BANK0 ] unsigned char 
  7455 ;; Return value:  Size  Location     Type
  7456 ;;		None               void
  7457 ;; Registers used:
  7458 ;;		wreg, status,2, status,0
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;Total ram usage:        2 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; Hardware stack levels required when called:    5
  7471 ;; This function calls:
  7472 ;;		Nothing
  7473 ;; This function is called by:
  7474 ;;		_setLog_Code
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           
  7479                           ;psect for function _setMemory_LoopSave
  7480  1AE9                     _setMemory_LoopSave:	
  7481                           
  7482                           ;incstack = 0
  7483                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7484                           ;setMemory_LoopSave@command stored from wreg
  7485  1AE9  0020               	movlb	0	; select bank0
  7486  1AEA  00A2               	movwf	setMemory_LoopSave@command
  7487                           
  7488                           ;MCU_B1.c: 1088: Memory.LoopSave = command == 1 ? 1 : 0;
  7489  1AEB  0822               	movf	setMemory_LoopSave@command,w
  7490  1AEC  3A01               	xorlw	1
  7491  1AED  3000               	movlw	0
  7492  1AEE  1903               	skipnz
  7493  1AEF  3001               	movlw	1
  7494  1AF0  00A1               	movwf	??_setMemory_LoopSave
  7495  1AF1  0DA1               	rlf	??_setMemory_LoopSave,f
  7496  1AF2  0DA1               	rlf	??_setMemory_LoopSave,f
  7497  1AF3  0024               	movlb	4	; select bank4
  7498  1AF4  0844               	movf	(_Memory^(0+512)+36),w
  7499  1AF5  0020               	movlb	0	; select bank0
  7500  1AF6  0621               	xorwf	??_setMemory_LoopSave,w
  7501  1AF7  39FB               	andlw	-5
  7502  1AF8  0621               	xorwf	??_setMemory_LoopSave,w
  7503  1AF9  0024               	movlb	4	; select bank4
  7504  1AFA  00C4               	movwf	(_Memory^(0+512)+36)
  7505  1AFB  0008               	return
  7506  1AFC                     __end_of_setMemory_LoopSave:	
  7507                           
  7508                           	psect	text28
  7509  0CAB                     __ptext28:	
  7510 ;; *************** function _setControl_Lights_Table *****************
  7511 ;; Defined at:
  7512 ;;		line 289 in file "../src/RF_Control_B1.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;		None
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;		None
  7517 ;; Return value:  Size  Location     Type
  7518 ;;		None               void
  7519 ;; Registers used:
  7520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;Total ram usage:        0 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:    9
  7533 ;; This function calls:
  7534 ;;		_getDimmerLights_Status
  7535 ;;		_getMain_All_LightsStatus
  7536 ;;		_setCmd_Status
  7537 ;;		_setDimmerLights_SwOff
  7538 ;;		_setDimmerLights_SwOn
  7539 ;;		_setProductData
  7540 ;;		_setRFSW_AdjControl
  7541 ;;		_setRFSW_Control
  7542 ;;		_setTxData
  7543 ;; This function is called by:
  7544 ;;		_getRxData
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           
  7549                           ;psect for function _setControl_Lights_Table
  7550  0CAB                     _setControl_Lights_Table:	
  7551                           
  7552                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7553                           
  7554                           ;incstack = 0
  7555                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7556  0CAB  2D24               	goto	l9846
  7557  0CAC                     l9822:	
  7558                           ;RF_Control_B1.c: 292: case 0x00:
  7559                           
  7560                           
  7561                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7562  0CAC  319A  22D6  318C   	fcall	_getMain_All_LightsStatus
  7563  0CAF  3A01               	xorlw	1
  7564  0CB0  1D03               	skipz
  7565  0CB1  2CD7               	goto	l9832
  7566                           
  7567                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7568  0CB2  3001               	movlw	1
  7569  0CB3  3199  21EF  318C   	fcall	_getDimmerLights_Status
  7570  0CB6  3A01               	xorlw	1
  7571  0CB7  1D03               	skipz
  7572  0CB8  2CC1               	goto	l2213
  7573                           
  7574                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7575  0CB9  3001               	movlw	1
  7576  0CBA  3194  2404  318C   	fcall	_setDimmerLights_SwOn
  7577                           
  7578                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7579  0CBD  3001               	movlw	1
  7580  0CBE  3190  207E  318C   	fcall	_setDimmerLights_SwOff
  7581  0CC1                     l2213:	
  7582                           
  7583                           ;RF_Control_B1.c: 299: }
  7584                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7585  0CC1  3002               	movlw	2
  7586  0CC2  3199  21EF  318C   	fcall	_getDimmerLights_Status
  7587  0CC5  3A01               	xorlw	1
  7588  0CC6  1D03               	skipz
  7589  0CC7  2CD0               	goto	l9830
  7590                           
  7591                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7592  0CC8  3002               	movlw	2
  7593  0CC9  3194  2404  318C   	fcall	_setDimmerLights_SwOn
  7594                           
  7595                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7596  0CCC  3002               	movlw	2
  7597  0CCD  3190  207E  318C   	fcall	_setDimmerLights_SwOff
  7598  0CD0                     l9830:	
  7599                           
  7600                           ;RF_Control_B1.c: 305: }
  7601                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7602  0CD0  0020               	movlb	0	; select bank0
  7603  0CD1  01A1               	clrf	setCmd_Status@cmd
  7604  0CD2  0AA1               	incf	setCmd_Status@cmd,f
  7605  0CD3  3001               	movlw	1
  7606  0CD4  319C  2401         	fcall	_setCmd_Status
  7607                           
  7608                           ;RF_Control_B1.c: 315: } else {
  7609  0CD6  0008               	return
  7610  0CD7                     l9832:	
  7611                           
  7612                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7613  0CD7  0020               	movlb	0	; select bank0
  7614  0CD8  01E3               	clrf	setProductData@value
  7615  0CD9  3009               	movlw	9
  7616  0CDA  3199  2173  318C   	fcall	_setProductData
  7617                           
  7618                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7619  0CDD  0020               	movlb	0	; select bank0
  7620  0CDE  01E3               	clrf	setProductData@value
  7621  0CDF  300B               	movlw	11
  7622  0CE0  3199  2173  318C   	fcall	_setProductData
  7623                           
  7624                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7625  0CE3  0020               	movlb	0	; select bank0
  7626  0CE4  01E3               	clrf	setProductData@value
  7627  0CE5  300F               	movlw	15
  7628  0CE6  3199  2173  318C   	fcall	_setProductData
  7629                           
  7630                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7631  0CE9  0020               	movlb	0	; select bank0
  7632  0CEA  01E3               	clrf	setProductData@value
  7633  0CEB  3011               	movlw	17
  7634  0CEC  3199  2173  318C   	fcall	_setProductData
  7635                           
  7636                           ;RF_Control_B1.c: 320: setTxData();
  7637  0CEF  318F  2745         	fcall	_setTxData
  7638                           
  7639                           ;RF_Control_B1.c: 321: }
  7640                           ;RF_Control_B1.c: 322: break;
  7641  0CF1  0008               	return
  7642  0CF2                     l9834:	
  7643                           ;RF_Control_B1.c: 324: case 0x20:
  7644                           
  7645                           
  7646                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7647  0CF2  0020               	movlb	0	; select bank0
  7648  0CF3  01E3               	clrf	setProductData@value
  7649  0CF4  3009               	movlw	9
  7650  0CF5  3199  2173  318C   	fcall	_setProductData
  7651                           
  7652                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7653  0CF8  0020               	movlb	0	; select bank0
  7654  0CF9  01E3               	clrf	setProductData@value
  7655  0CFA  300B               	movlw	11
  7656  0CFB  3199  2173  318C   	fcall	_setProductData
  7657                           
  7658                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7659  0CFE  0021               	movlb	1	; select bank1
  7660  0CFF  086D               	movf	_product^(0+128),w
  7661  0D00  0086               	movwf	6
  7662  0D01  3002               	movlw	2	; select bank4/5
  7663  0D02  0087               	movwf	7
  7664  0D03  3002               	movlw	2	; select bank4/5
  7665  0D04  3F4F               	moviw [15]fsr1
  7666  0D05  0020               	movlb	0	; select bank0
  7667  0D06  00E3               	movwf	setProductData@value
  7668  0D07  300F               	movlw	15
  7669  0D08  3199  2173  318C   	fcall	_setProductData
  7670                           
  7671                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7672  0D0B  0020               	movlb	0	; select bank0
  7673  0D0C  01E3               	clrf	setProductData@value
  7674  0D0D  3011               	movlw	17
  7675  0D0E  3199  2173  318C   	fcall	_setProductData
  7676                           
  7677                           ;RF_Control_B1.c: 329: setTxData();
  7678  0D11  318F  2745         	fcall	_setTxData
  7679                           
  7680                           ;RF_Control_B1.c: 330: break;
  7681  0D13  0008               	return
  7682  0D14                     l9836:	
  7683                           ;RF_Control_B1.c: 333: case 0x01:
  7684                           
  7685                           
  7686                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7687  0D14  3001               	movlw	1
  7688  0D15  3192  2275         	fcall	_setRFSW_Control
  7689                           
  7690                           ;RF_Control_B1.c: 335: break;
  7691  0D17  0008               	return
  7692  0D18                     l9838:	
  7693                           ;RF_Control_B1.c: 339: case 0x11:
  7694                           
  7695                           
  7696                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7697  0D18  3001               	movlw	1
  7698  0D19  318A  2292         	fcall	_setRFSW_AdjControl
  7699                           
  7700                           ;RF_Control_B1.c: 341: break;
  7701  0D1B  0008               	return
  7702  0D1C                     l9840:	
  7703                           ;RF_Control_B1.c: 346: case 0x02:
  7704                           
  7705                           
  7706                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7707  0D1C  3002               	movlw	2
  7708  0D1D  3192  2275         	fcall	_setRFSW_Control
  7709                           
  7710                           ;RF_Control_B1.c: 348: break;
  7711  0D1F  0008               	return
  7712  0D20                     l9842:	
  7713                           ;RF_Control_B1.c: 351: case 0x21:
  7714                           
  7715                           
  7716                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7717  0D20  3002               	movlw	2
  7718  0D21  318A  2292         	fcall	_setRFSW_AdjControl
  7719                           
  7720                           ;RF_Control_B1.c: 370: }
  7721                           
  7722                           ;RF_Control_B1.c: 353: break;
  7723  0D23  0008               	return
  7724  0D24                     l9846:	
  7725  0D24  0023               	movlb	3	; select bank3
  7726  0D25  082F               	movf	(_RF_Data^(0+384)+15),w
  7727                           
  7728                           ; Switch size 1, requested type "space"
  7729                           ; Number of cases is 6, Range of values is 0 to 33
  7730                           ; switch strategies available:
  7731                           ; Name         Instructions Cycles
  7732                           ; simple_byte           19    10 (average)
  7733                           ; direct_byte           74     6 (fixed)
  7734                           ; jumptable            260     6 (fixed)
  7735                           ;	Chosen strategy is simple_byte
  7736  0D26  3A00               	xorlw	0	; case 0
  7737  0D27  1903               	skipnz
  7738  0D28  2CAC               	goto	l9822
  7739  0D29  3A01               	xorlw	1	; case 1
  7740  0D2A  1903               	skipnz
  7741  0D2B  2D14               	goto	l9836
  7742  0D2C  3A03               	xorlw	3	; case 2
  7743  0D2D  1903               	skipnz
  7744  0D2E  2D1C               	goto	l9840
  7745  0D2F  3A13               	xorlw	19	; case 17
  7746  0D30  1903               	skipnz
  7747  0D31  2D18               	goto	l9838
  7748  0D32  3A31               	xorlw	49	; case 32
  7749  0D33  1903               	skipnz
  7750  0D34  2CF2               	goto	l9834
  7751  0D35  3A01               	xorlw	1	; case 33
  7752  0D36  1903               	skipnz
  7753  0D37  2D20               	goto	l9842
  7754  0D38  2D39               	goto	l2222
  7755  0D39                     l2222:	
  7756  0D39  0008               	return
  7757  0D3A                     __end_of_setControl_Lights_Table:	
  7758                           
  7759                           	psect	text29
  7760  1275                     __ptext29:	
  7761 ;; *************** function _setRFSW_Control *****************
  7762 ;; Defined at:
  7763 ;;		line 378 in file "../src/RF_Control_B1.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  sw              1    wreg     unsigned char 
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;  sw              1    2[BANK1 ] unsigned char 
  7768 ;;  status          1    1[BANK1 ] unsigned char 
  7769 ;; Return value:  Size  Location     Type
  7770 ;;		None               void
  7771 ;; Registers used:
  7772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;Total ram usage:        3 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    8
  7785 ;; This function calls:
  7786 ;;		_getDimmerLights_Status
  7787 ;;		_setBuz
  7788 ;;		_setDelayOff_GO
  7789 ;;		_setDimmerLights_SwOff
  7790 ;;		_setDimmerLights_SwOn
  7791 ;;		_setRF_DimmerLights
  7792 ;;		_setTxData
  7793 ;; This function is called by:
  7794 ;;		_setControl_Lights_Table
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           
  7799                           ;psect for function _setRFSW_Control
  7800  1275                     _setRFSW_Control:	
  7801                           
  7802                           ;incstack = 0
  7803                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7804                           ;setRFSW_Control@sw stored from wreg
  7805  1275  0021               	movlb	1	; select bank1
  7806  1276  00E7               	movwf	setRFSW_Control@sw^(0+128)
  7807                           
  7808                           ;RF_Control_B1.c: 379: char status = 0;
  7809  1277  01E6               	clrf	setRFSW_Control@status^(0+128)
  7810                           
  7811                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7812  1278  0023               	movlb	3	; select bank3
  7813  1279  0830               	movf	(_RF_Data^(0+384)+16),w
  7814  127A  3A80               	xorlw	128
  7815  127B  1D03               	skipz
  7816  127C  2AAB               	goto	l9712
  7817                           
  7818                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7819  127D  0020               	movlb	0	; select bank0
  7820  127E  01E6               	clrf	setDelayOff_GO@command
  7821  127F  0AE6               	incf	setDelayOff_GO@command,f
  7822  1280  0023               	movlb	3	; select bank3
  7823  1281  0831               	movf	(_RF_Data^(0+384)+17),w
  7824  1282  0021               	movlb	1	; select bank1
  7825  1283  00E5               	movwf	??_setRFSW_Control^(0+128)
  7826  1284  0865               	movf	??_setRFSW_Control^(0+128),w
  7827  1285  0020               	movlb	0	; select bank0
  7828  1286  00E7               	movwf	setDelayOff_GO@value
  7829  1287  0021               	movlb	1	; select bank1
  7830  1288  0867               	movf	setRFSW_Control@sw^(0+128),w
  7831  1289  318C  241F  3192   	fcall	_setDelayOff_GO
  7832                           
  7833                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7834  128C  0021               	movlb	1	; select bank1
  7835  128D  0867               	movf	setRFSW_Control@sw^(0+128),w
  7836  128E  3199  21EF  3192   	fcall	_getDimmerLights_Status
  7837  1291  3A01               	xorlw	1
  7838  1292  1D03               	skipz
  7839  1293  2AAB               	goto	l9712
  7840                           
  7841                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7842  1294  3064               	movlw	100
  7843  1295  0020               	movlb	0	; select bank0
  7844  1296  00AA               	movwf	setBuz@time
  7845  1297  3000               	movlw	0
  7846  1298  00AB               	movwf	setBuz@time+1
  7847  1299  3001               	movlw	1
  7848  129A  3188  2000  3192   	fcall	_setBuz
  7849                           
  7850                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7851  129D  0020               	movlb	0	; select bank0
  7852  129E  01E6               	clrf	setRF_DimmerLights@on
  7853  129F  0AE6               	incf	setRF_DimmerLights@on,f
  7854  12A0  0021               	movlb	1	; select bank1
  7855  12A1  0867               	movf	setRFSW_Control@sw^(0+128),w
  7856  12A2  3195  25E9  3192   	fcall	_setRF_DimmerLights
  7857                           
  7858                           ;RF_Control_B1.c: 386: setTxData();
  7859  12A5  318F  2745  3192   	fcall	_setTxData
  7860                           
  7861                           ;RF_Control_B1.c: 387: status = 1;
  7862  12A8  0021               	movlb	1	; select bank1
  7863  12A9  01E6               	clrf	setRFSW_Control@status^(0+128)
  7864  12AA  0AE6               	incf	setRFSW_Control@status^(0+128),f
  7865  12AB                     l9712:	
  7866                           
  7867                           ;RF_Control_B1.c: 388: }
  7868                           ;RF_Control_B1.c: 389: }
  7869                           ;RF_Control_B1.c: 391: if (status == 0) {
  7870  12AB  0021               	movlb	1	; select bank1
  7871  12AC  08E6               	movf	setRFSW_Control@status^(0+128),f
  7872  12AD  1D03               	skipz
  7873  12AE  0008               	return
  7874                           
  7875                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7876  12AF  0867               	movf	setRFSW_Control@sw^(0+128),w
  7877  12B0  3194  2404  3192   	fcall	_setDimmerLights_SwOn
  7878                           
  7879                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7880  12B3  0021               	movlb	1	; select bank1
  7881  12B4  0867               	movf	setRFSW_Control@sw^(0+128),w
  7882  12B5  3190  207E         	fcall	_setDimmerLights_SwOff
  7883  12B7  0008               	return
  7884  12B8                     __end_of_setRFSW_Control:	
  7885                           
  7886                           	psect	text30
  7887  0A92                     __ptext30:	
  7888 ;; *************** function _setRFSW_AdjControl *****************
  7889 ;; Defined at:
  7890 ;;		line 400 in file "../src/RF_Control_B1.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  sw              1    wreg     unsigned char 
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  sw              1   73[BANK0 ] unsigned char 
  7895 ;;  status          1   72[BANK0 ] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;		None               void
  7898 ;; Registers used:
  7899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;Total ram usage:        4 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    8
  7912 ;; This function calls:
  7913 ;;		_getDimmerLights_PercentToValue
  7914 ;;		_getDimmerLights_Status
  7915 ;;		_setDimmerIntr_Dimming_RF
  7916 ;;		_setDimmerIntr_MaxmumValue
  7917 ;;		_setDimmerLights_DimmingRun
  7918 ;;		_setDimmerLights_SwOff
  7919 ;;		_setDimmerLights_SwOn
  7920 ;;		_setMemory_Modify
  7921 ;;		_setProductData
  7922 ;;		_setTxData
  7923 ;; This function is called by:
  7924 ;;		_setControl_Lights_Table
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           
  7929                           ;psect for function _setRFSW_AdjControl
  7930  0A92                     _setRFSW_AdjControl:	
  7931                           
  7932                           ;incstack = 0
  7933                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7934                           ;setRFSW_AdjControl@sw stored from wreg
  7935  0A92  0020               	movlb	0	; select bank0
  7936  0A93  00E9               	movwf	setRFSW_AdjControl@sw
  7937                           
  7938                           ;RF_Control_B1.c: 401: char status = 0;
  7939  0A94  01E8               	clrf	setRFSW_AdjControl@status
  7940                           
  7941                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7942  0A95  0869               	movf	setRFSW_AdjControl@sw,w
  7943  0A96  3199  21EF  318A   	fcall	_getDimmerLights_Status
  7944  0A99  0020               	movlb	0	; select bank0
  7945  0A9A  00E6               	movwf	??_setRFSW_AdjControl
  7946  0A9B  0866               	movf	??_setRFSW_AdjControl,w
  7947  0A9C  00E8               	movwf	setRFSW_AdjControl@status
  7948                           
  7949                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7950  0A9D  3065               	movlw	101
  7951  0A9E  0023               	movlb	3	; select bank3
  7952  0A9F  0229               	subwf	(_RF_Data^(0+384)+9),w
  7953  0AA0  1C03               	skipc
  7954  0AA1  2AA9               	goto	l9724
  7955                           
  7956                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7957  0AA2  3064               	movlw	100
  7958  0AA3  0020               	movlb	0	; select bank0
  7959  0AA4  00E6               	movwf	??_setRFSW_AdjControl
  7960  0AA5  0866               	movf	??_setRFSW_AdjControl,w
  7961  0AA6  0023               	movlb	3	; select bank3
  7962  0AA7  00A9               	movwf	(_RF_Data^(0+384)+9)
  7963                           
  7964                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7965  0AA8  2AAE               	goto	l9728
  7966  0AA9                     l9724:	
  7967  0AA9  08A9               	movf	(_RF_Data^(0+384)+9),f
  7968  0AAA  1D03               	skipz
  7969  0AAB  2AAE               	goto	l9728
  7970                           
  7971                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7972  0AAC  01A9               	clrf	(_RF_Data^(0+384)+9)
  7973  0AAD  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7974  0AAE                     l9728:	
  7975                           
  7976                           ;RF_Control_B1.c: 409: }
  7977                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7978  0AAE  0829               	movf	(_RF_Data^(0+384)+9),w
  7979  0AAF  0020               	movlb	0	; select bank0
  7980  0AB0  00E6               	movwf	??_setRFSW_AdjControl
  7981  0AB1  0866               	movf	??_setRFSW_AdjControl,w
  7982  0AB2  00E3               	movwf	setProductData@value
  7983  0AB3  3009               	movlw	9
  7984  0AB4  3199  2173  318A   	fcall	_setProductData
  7985                           
  7986                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7987  0AB7  0020               	movlb	0	; select bank0
  7988  0AB8  0869               	movf	setRFSW_AdjControl@sw,w
  7989  0AB9  00E6               	movwf	??_setRFSW_AdjControl
  7990  0ABA  0866               	movf	??_setRFSW_AdjControl,w
  7991  0ABB  00E3               	movwf	setProductData@value
  7992  0ABC  300B               	movlw	11
  7993  0ABD  3199  2173  318A   	fcall	_setProductData
  7994                           
  7995                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7996  0AC0  0020               	movlb	0	; select bank0
  7997  0AC1  0869               	movf	setRFSW_AdjControl@sw,w
  7998  0AC2  3E1A               	addlw	26
  7999  0AC3  0021               	movlb	1	; select bank1
  8000  0AC4  076D               	addwf	_product^(0+128),w
  8001  0AC5  0020               	movlb	0	; select bank0
  8002  0AC6  00E6               	movwf	??_setRFSW_AdjControl
  8003  0AC7  0866               	movf	??_setRFSW_AdjControl,w
  8004  0AC8  0086               	movwf	6
  8005  0AC9  3002               	movlw	2	; select bank4/5
  8006  0ACA  0087               	movwf	7
  8007  0ACB  0801               	movf	1,w
  8008  0ACC  00E7               	movwf	??_setRFSW_AdjControl+1
  8009  0ACD  0867               	movf	??_setRFSW_AdjControl+1,w
  8010  0ACE  00E3               	movwf	setProductData@value
  8011  0ACF  3011               	movlw	17
  8012  0AD0  3199  2173  318A   	fcall	_setProductData
  8013                           
  8014                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  8015  0AD3  0023               	movlb	3	; select bank3
  8016  0AD4  0829               	movf	(_RF_Data^(0+384)+9),w
  8017  0AD5  0020               	movlb	0	; select bank0
  8018  0AD6  00E6               	movwf	??_setRFSW_AdjControl
  8019  0AD7  0866               	movf	??_setRFSW_AdjControl,w
  8020  0AD8  00E3               	movwf	setProductData@value
  8021  0AD9  0869               	movf	setRFSW_AdjControl@sw,w
  8022  0ADA  3E14               	addlw	20
  8023  0ADB  3199  2173  318A   	fcall	_setProductData
  8024                           
  8025                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  8026  0ADE  3001               	movlw	1
  8027  0ADF  319A  22B0  318A   	fcall	_setMemory_Modify
  8028                           
  8029                           ;RF_Control_B1.c: 425: if (status == 1) {
  8030  0AE2  0020               	movlb	0	; select bank0
  8031  0AE3  0868               	movf	setRFSW_AdjControl@status,w
  8032  0AE4  3A01               	xorlw	1
  8033  0AE5  1D03               	skipz
  8034  0AE6  2AFE               	goto	l9738
  8035                           
  8036                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8037  0AE7  0023               	movlb	3	; select bank3
  8038  0AE8  0829               	movf	(_RF_Data^(0+384)+9),w
  8039  0AE9  3195  251F  318A   	fcall	_getDimmerLights_PercentToValue
  8040  0AEC  0020               	movlb	0	; select bank0
  8041  0AED  00E6               	movwf	??_setRFSW_AdjControl
  8042  0AEE  0866               	movf	??_setRFSW_AdjControl,w
  8043  0AEF  00E3               	movwf	setDimmerIntr_MaxmumValue@value
  8044  0AF0  0869               	movf	setRFSW_AdjControl@sw,w
  8045  0AF1  319B  23BC  318A   	fcall	_setDimmerIntr_MaxmumValue
  8046                           
  8047                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  8048  0AF4  0020               	movlb	0	; select bank0
  8049  0AF5  01A1               	clrf	setDimmerIntr_Dimming_RF@command
  8050  0AF6  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
  8051  0AF7  0869               	movf	setRFSW_AdjControl@sw,w
  8052  0AF8  319F  276F  318A   	fcall	_setDimmerIntr_Dimming_RF
  8053                           
  8054                           ;RF_Control_B1.c: 428: setTxData();
  8055  0AFB  318F  2745         	fcall	_setTxData
  8056                           
  8057                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  8058  0AFD  0008               	return
  8059  0AFE                     l9738:	
  8060  0AFE  0020               	movlb	0	; select bank0
  8061  0AFF  08E8               	movf	setRFSW_AdjControl@status,f
  8062  0B00  1D03               	skipz
  8063  0B01  0008               	return
  8064                           
  8065                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  8066  0B02  01A3               	clrf	setDimmerLights_DimmingRun@command
  8067  0B03  0AA3               	incf	setDimmerLights_DimmingRun@command,f
  8068  0B04  0869               	movf	setRFSW_AdjControl@sw,w
  8069  0B05  319C  2482  318A   	fcall	_setDimmerLights_DimmingRun
  8070                           
  8071                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  8072  0B08  0020               	movlb	0	; select bank0
  8073  0B09  0869               	movf	setRFSW_AdjControl@sw,w
  8074  0B0A  3194  2404  318A   	fcall	_setDimmerLights_SwOn
  8075                           
  8076                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  8077  0B0D  0020               	movlb	0	; select bank0
  8078  0B0E  0869               	movf	setRFSW_AdjControl@sw,w
  8079  0B0F  3190  207E         	fcall	_setDimmerLights_SwOff
  8080  0B11  0008               	return
  8081  0B12                     __end_of_setRFSW_AdjControl:	
  8082                           
  8083                           	psect	text31
  8084  1C82                     __ptext31:	
  8085 ;; *************** function _setDimmerLights_DimmingRun *****************
  8086 ;; Defined at:
  8087 ;;		line 1065 in file "../src/Dimmer_B1.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;  lights          1    wreg     unsigned char 
  8090 ;;  command         1    3[BANK0 ] unsigned char 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;  lights          1    5[BANK0 ] unsigned char 
  8093 ;; Return value:  Size  Location     Type
  8094 ;;		None               void
  8095 ;; Registers used:
  8096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8102 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;Total ram usage:        3 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:    6
  8109 ;; This function calls:
  8110 ;;		_DimmerLights_SelectPointer
  8111 ;; This function is called by:
  8112 ;;		_setRFSW_AdjControl
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           
  8117                           ;psect for function _setDimmerLights_DimmingRun
  8118  1C82                     _setDimmerLights_DimmingRun:	
  8119                           
  8120                           ;incstack = 0
  8121                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8122                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8123  1C82  0020               	movlb	0	; select bank0
  8124  1C83  00A5               	movwf	setDimmerLights_DimmingRun@lights
  8125                           
  8126                           ;Dimmer_B1.c: 1066: DimmerLights_SelectPointer(lights);
  8127  1C84  0825               	movf	setDimmerLights_DimmingRun@lights,w
  8128  1C85  319B  23A5         	fcall	_DimmerLights_SelectPointer
  8129                           
  8130                           ;Dimmer_B1.c: 1067: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8131  1C87  0020               	movlb	0	; select bank0
  8132  1C88  0823               	movf	setDimmerLights_DimmingRun@command,w
  8133  1C89  3A01               	xorlw	1
  8134  1C8A  3000               	movlw	0
  8135  1C8B  1903               	skipnz
  8136  1C8C  3001               	movlw	1
  8137  1C8D  00A4               	movwf	??_setDimmerLights_DimmingRun
  8138  1C8E  0021               	movlb	1	; select bank1
  8139  1C8F  0A55               	incf	_DimmerLights^(0+128),w
  8140  1C90  0086               	movwf	6
  8141  1C91  3001               	movlw	1	; select bank2/3
  8142  1C92  0087               	movwf	7
  8143  1C93  0020               	movlb	0	; select bank0
  8144  1C94  0EA4               	swapf	??_setDimmerLights_DimmingRun,f
  8145  1C95  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8146  1C96  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8147  1C97  0801               	movf	1,w
  8148  1C98  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8149  1C99  39BF               	andlw	-65
  8150  1C9A  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8151  1C9B  0081               	movwf	1
  8152  1C9C  0008               	return
  8153  1C9D                     __end_of_setDimmerLights_DimmingRun:	
  8154                           
  8155                           	psect	text32
  8156  1A33                     __ptext32:	
  8157 ;; *************** function _getRF_KeyStatus *****************
  8158 ;; Defined at:
  8159 ;;		line 166 in file "../src/RF_Control_B1.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;		None
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  key             1    2[BANK0 ] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      unsigned char 
  8166 ;; Registers used:
  8167 ;;		wreg, status,2
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;Total ram usage:        3 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    5
  8180 ;; This function calls:
  8181 ;;		Nothing
  8182 ;; This function is called by:
  8183 ;;		_setRF_Main
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           
  8188                           ;psect for function _getRF_KeyStatus
  8189  1A33                     _getRF_KeyStatus:	
  8190                           
  8191                           ;RF_Control_B1.c: 167: char key = 0;
  8192                           
  8193                           ;incstack = 0
  8194                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8195  1A33  0020               	movlb	0	; select bank0
  8196  1A34  01A2               	clrf	getRF_KeyStatus@key
  8197                           
  8198                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8199  1A35  01A3               	clrf	_getRF_KeyStatus$5098
  8200  1A36  0AA3               	incf	_getRF_KeyStatus$5098,f
  8201  1A37  1F0C               	btfss	12,6	;volatile
  8202  1A38  1A0C               	btfsc	12,4	;volatile
  8203  1A39  2A3E               	goto	l7674
  8204  1A3A  1C0C               	btfss	12,0	;volatile
  8205  1A3B  188D               	btfsc	13,1	;volatile
  8206  1A3C  2A3E               	goto	l7674
  8207  1A3D  01A3               	clrf	_getRF_KeyStatus$5098
  8208  1A3E                     l7674:	
  8209  1A3E  0823               	movf	_getRF_KeyStatus$5098,w
  8210  1A3F  00A1               	movwf	??_getRF_KeyStatus
  8211  1A40  0821               	movf	??_getRF_KeyStatus,w
  8212  1A41  00A2               	movwf	getRF_KeyStatus@key
  8213                           
  8214                           ;RF_Control_B1.c: 179: return key;
  8215  1A42  0822               	movf	getRF_KeyStatus@key,w
  8216  1A43  0008               	return
  8217  1A44                     __end_of_getRF_KeyStatus:	
  8218                           
  8219                           	psect	text33
  8220  1A22                     __ptext33:	
  8221 ;; *************** function _getBuz_GO *****************
  8222 ;; Defined at:
  8223 ;;		line 82 in file "../src/Buzzer_B1.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;		None
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  i               2    5[BANK0 ] int 
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  2    1[BANK0 ] int 
  8230 ;; Registers used:
  8231 ;;		wreg, status,2, status,0
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8237 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;Total ram usage:        6 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:    5
  8244 ;; This function calls:
  8245 ;;		Nothing
  8246 ;; This function is called by:
  8247 ;;		_setRF_Main
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           
  8252                           ;psect for function _getBuz_GO
  8253  1A22                     _getBuz_GO:	
  8254                           
  8255                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8256                           
  8257                           ;incstack = 0
  8258                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8259  1A22  0022               	movlb	2	; select bank2
  8260  1A23  0C20               	rrf	_Buz1^(0+256),w
  8261  1A24  3901               	andlw	1
  8262  1A25  0020               	movlb	0	; select bank0
  8263  1A26  00A3               	movwf	??_getBuz_GO
  8264  1A27  01A4               	clrf	??_getBuz_GO+1
  8265  1A28  0823               	movf	??_getBuz_GO,w
  8266  1A29  00A5               	movwf	getBuz_GO@i
  8267  1A2A  0824               	movf	??_getBuz_GO+1,w
  8268  1A2B  00A6               	movwf	getBuz_GO@i+1
  8269                           
  8270                           ;Buzzer_B1.c: 84: return i;
  8271  1A2C  0826               	movf	getBuz_GO@i+1,w
  8272  1A2D  01A2               	clrf	?_getBuz_GO+1
  8273  1A2E  07A2               	addwf	?_getBuz_GO+1,f
  8274  1A2F  0825               	movf	getBuz_GO@i,w
  8275  1A30  01A1               	clrf	?_getBuz_GO
  8276  1A31  07A1               	addwf	?_getBuz_GO,f
  8277  1A32  0008               	return
  8278  1A33                     __end_of_getBuz_GO:	
  8279                           
  8280                           	psect	text34
  8281  19E0                     __ptext34:	
  8282 ;; *************** function _RF_RxDisable *****************
  8283 ;; Defined at:
  8284 ;;		line 154 in file "../src/RF_Control_B1.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;		None
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;		None
  8289 ;; Return value:  Size  Location     Type
  8290 ;;		None               void
  8291 ;; Registers used:
  8292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8293 ;; Tracked objects:
  8294 ;;		On entry : 0/0
  8295 ;;		On exit  : 0/0
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;Total ram usage:        0 bytes
  8303 ;; Hardware stack levels used:    1
  8304 ;; Hardware stack levels required when called:    7
  8305 ;; This function calls:
  8306 ;;		_CC2500_WriteCommand
  8307 ;; This function is called by:
  8308 ;;		_setRF_Main
  8309 ;; This function uses a non-reentrant model
  8310 ;;
  8311                           
  8312                           
  8313                           ;psect for function _RF_RxDisable
  8314  19E0                     _RF_RxDisable:	
  8315                           
  8316                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8317                           
  8318                           ;incstack = 0
  8319                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8320  19E0  0021               	movlb	1	; select bank1
  8321  19E1  18A0               	btfsc	_RF1^(0+128),1
  8322  19E2  29E5               	goto	l2176
  8323  19E3  1DA0               	btfss	_RF1^(0+128),3
  8324  19E4  0008               	return
  8325  19E5                     l2176:	
  8326                           
  8327                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8328  19E5  11A0               	bcf	_RF1^(0+128),3
  8329                           
  8330                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8331  19E6  10A0               	bcf	_RF1^(0+128),1
  8332                           
  8333                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8334  19E7  3036               	movlw	54
  8335  19E8  319C  244D  3199   	fcall	_CC2500_WriteCommand
  8336                           
  8337                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8338  19EB  303A               	movlw	58
  8339  19EC  319C  244D         	fcall	_CC2500_WriteCommand
  8340  19EE  0008               	return
  8341  19EF                     __end_of_RF_RxDisable:	
  8342                           
  8343                           	psect	text35
  8344  16B6                     __ptext35:	
  8345 ;; *************** function _CC2500_TxData *****************
  8346 ;; Defined at:
  8347 ;;		line 32 in file "../src/CC2500_B1.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;  loop_e          1    6[BANK0 ] unsigned char 
  8352 ;; Return value:  Size  Location     Type
  8353 ;;		None               void
  8354 ;; Registers used:
  8355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;Total ram usage:        2 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    7
  8368 ;; This function calls:
  8369 ;;		_CC2500_WriteByte
  8370 ;;		_CC2500_WriteCommand
  8371 ;;		_RF_Timeout_Counter
  8372 ;;		_setRF_TimeoutCleared
  8373 ;; This function is called by:
  8374 ;;		_setRF_Main
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           
  8379                           ;psect for function _CC2500_TxData
  8380  16B6                     _CC2500_TxData:	
  8381                           
  8382                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8383                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8384                           
  8385                           ;incstack = 0
  8386                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8387  16B6  3036               	movlw	54
  8388  16B7  319C  244D  3196   	fcall	_CC2500_WriteCommand
  8389                           
  8390                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8391  16BA  303B               	movlw	59
  8392  16BB  319C  244D  3196   	fcall	_CC2500_WriteCommand
  8393                           
  8394                           ;CC2500_B1.c: 38: RC4 = 0;
  8395  16BE  0020               	movlb	0	; select bank0
  8396  16BF  120E               	bcf	14,4	;volatile
  8397                           
  8398                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8399  16C0  307F               	movlw	127
  8400  16C1  00A5               	movwf	??_CC2500_TxData
  8401  16C2  0825               	movf	??_CC2500_TxData,w
  8402  16C3  0021               	movlb	1	; select bank1
  8403  16C4  00D7               	movwf	_SPI0Buffer^(0+128)
  8404                           
  8405                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8406  16C5  2EC9               	goto	l7354
  8407  16C6                     l7352:	
  8408                           
  8409                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8410  16C6  319B  2324  3196   	fcall	_RF_Timeout_Counter
  8411  16C9                     l7354:	
  8412  16C9  0020               	movlb	0	; select bank0
  8413  16CA  1D0E               	btfss	14,2	;volatile
  8414  16CB  2ECF               	goto	l7358
  8415  16CC  0021               	movlb	1	; select bank1
  8416  16CD  1F21               	btfss	(_RF1^(0+128)+1),6
  8417  16CE  2EC6               	goto	l7352
  8418  16CF                     l7358:	
  8419                           
  8420                           ;CC2500_B1.c: 42: };
  8421                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8422  16CF  3198  20C3  3196   	fcall	_setRF_TimeoutCleared
  8423                           
  8424                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8425  16D2  319C  241A  3196   	fcall	_CC2500_WriteByte
  8426                           
  8427                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8428  16D5  0021               	movlb	1	; select bank1
  8429  16D6  0859               	movf	_Tx_Length^(0+128),w
  8430  16D7  0020               	movlb	0	; select bank0
  8431  16D8  00A5               	movwf	??_CC2500_TxData
  8432  16D9  0825               	movf	??_CC2500_TxData,w
  8433  16DA  0021               	movlb	1	; select bank1
  8434  16DB  00D7               	movwf	_SPI0Buffer^(0+128)
  8435                           
  8436                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8437  16DC  319C  241A  3196   	fcall	_CC2500_WriteByte
  8438                           
  8439                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8440  16DF  0020               	movlb	0	; select bank0
  8441  16E0  01A6               	clrf	CC2500_TxData@loop_e
  8442  16E1                     l7372:	
  8443  16E1  0021               	movlb	1	; select bank1
  8444  16E2  0859               	movf	_Tx_Length^(0+128),w
  8445  16E3  0020               	movlb	0	; select bank0
  8446  16E4  0226               	subwf	CC2500_TxData@loop_e,w
  8447  16E5  1803               	btfsc	3,0
  8448  16E6  2EFA               	goto	l259
  8449                           
  8450                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8451  16E7  0826               	movf	CC2500_TxData@loop_e,w
  8452  16E8  3EA0               	addlw	_RF_Data& (0+255)
  8453  16E9  0086               	movwf	6
  8454  16EA  3001               	movlw	1	; select bank3/4
  8455  16EB  0087               	movwf	7
  8456  16EC  0801               	movf	1,w
  8457  16ED  00A5               	movwf	??_CC2500_TxData
  8458  16EE  0825               	movf	??_CC2500_TxData,w
  8459  16EF  0021               	movlb	1	; select bank1
  8460  16F0  00D7               	movwf	_SPI0Buffer^(0+128)
  8461                           
  8462                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8463  16F1  319C  241A  3196   	fcall	_CC2500_WriteByte
  8464  16F4  3001               	movlw	1
  8465  16F5  0020               	movlb	0	; select bank0
  8466  16F6  00A5               	movwf	??_CC2500_TxData
  8467  16F7  0825               	movf	??_CC2500_TxData,w
  8468  16F8  07A6               	addwf	CC2500_TxData@loop_e,f
  8469  16F9  2EE1               	goto	l7372
  8470  16FA                     l259:	
  8471                           
  8472                           ;CC2500_B1.c: 51: }
  8473                           ;CC2500_B1.c: 52: RC4 = 1;
  8474  16FA  160E               	bsf	14,4	;volatile
  8475                           
  8476                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8477  16FB  3035               	movlw	53
  8478  16FC  319C  244D  3196   	fcall	_CC2500_WriteCommand
  8479                           
  8480                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8481  16FF  2F03               	goto	l7378
  8482  1700                     l7376:	
  8483                           
  8484                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8485  1700  319B  2324  3196   	fcall	_RF_Timeout_Counter
  8486  1703                     l7378:	
  8487  1703  0020               	movlb	0	; select bank0
  8488  1704  180D               	btfsc	13,0	;volatile
  8489  1705  2F09               	goto	l7382
  8490  1706  0021               	movlb	1	; select bank1
  8491  1707  1F21               	btfss	(_RF1^(0+128)+1),6
  8492  1708  2F00               	goto	l7376
  8493  1709                     l7382:	
  8494                           
  8495                           ;CC2500_B1.c: 56: };
  8496                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8497  1709  3198  20C3  3196   	fcall	_setRF_TimeoutCleared
  8498                           
  8499                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8500  170C  2F10               	goto	l7386
  8501  170D                     l7384:	
  8502                           
  8503                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8504  170D  319B  2324  3196   	fcall	_RF_Timeout_Counter
  8505  1710                     l7386:	
  8506  1710  0020               	movlb	0	; select bank0
  8507  1711  1C0D               	btfss	13,0	;volatile
  8508  1712  2F16               	goto	l7390
  8509  1713  0021               	movlb	1	; select bank1
  8510  1714  1F21               	btfss	(_RF1^(0+128)+1),6
  8511  1715  2F0D               	goto	l7384
  8512  1716                     l7390:	
  8513                           
  8514                           ;CC2500_B1.c: 61: };
  8515                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8516  1716  3198  20C3  3196   	fcall	_setRF_TimeoutCleared
  8517                           
  8518                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8519  1719  3036               	movlw	54
  8520  171A  319C  244D  3196   	fcall	_CC2500_WriteCommand
  8521                           
  8522                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8523  171D  303B               	movlw	59
  8524  171E  319C  244D         	fcall	_CC2500_WriteCommand
  8525                           
  8526                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8527  1720  0020               	movlb	0	; select bank0
  8528  1721  14EE               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8529  1722  0008               	return
  8530  1723                     __end_of_CC2500_TxData:	
  8531                           
  8532                           	psect	text36
  8533  1723                     __ptext36:	
  8534 ;; *************** function _CC2500_RxData *****************
  8535 ;; Defined at:
  8536 ;;		line 73 in file "../src/CC2500_B1.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;		None
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  loop_f          1    6[BANK0 ] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;		None               void
  8543 ;; Registers used:
  8544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;Total ram usage:        2 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    7
  8557 ;; This function calls:
  8558 ;;		_CC2500_ReadByte
  8559 ;;		_CC2500_ReadStatus
  8560 ;;		_CC2500_WriteByte
  8561 ;;		_CC2500_WriteCommand
  8562 ;;		_RF_Timeout_Counter
  8563 ;;		_setRF_TimeoutCleared
  8564 ;; This function is called by:
  8565 ;;		_setRF_Main
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           
  8570                           ;psect for function _CC2500_RxData
  8571  1723                     _CC2500_RxData:	
  8572                           
  8573                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8574                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8575                           
  8576                           ;incstack = 0
  8577                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8578  1723  0020               	movlb	0	; select bank0
  8579  1724  180D               	btfsc	13,0	;volatile
  8580  1725  0008               	return
  8581                           
  8582                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8583  1726  303B               	movlw	59
  8584  1727  319E  2678  3197   	fcall	_CC2500_ReadStatus
  8585                           
  8586                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8587  172A  0021               	movlb	1	; select bank1
  8588  172B  085A               	movf	_s_data^(0+128),w
  8589  172C  1903               	btfsc	3,2
  8590  172D  0008               	return
  8591                           
  8592                           ;CC2500_B1.c: 90: RC4 = 0;
  8593  172E  0020               	movlb	0	; select bank0
  8594  172F  120E               	bcf	14,4	;volatile
  8595                           
  8596                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8597  1730  30FF               	movlw	255
  8598  1731  00A5               	movwf	??_CC2500_RxData
  8599  1732  0825               	movf	??_CC2500_RxData,w
  8600  1733  0021               	movlb	1	; select bank1
  8601  1734  00D7               	movwf	_SPI0Buffer^(0+128)
  8602                           
  8603                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8604  1735  2F39               	goto	l7410
  8605  1736                     l7408:	
  8606                           
  8607                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8608  1736  319B  2324  3197   	fcall	_RF_Timeout_Counter
  8609  1739                     l7410:	
  8610  1739  0020               	movlb	0	; select bank0
  8611  173A  1D0E               	btfss	14,2	;volatile
  8612  173B  2F3F               	goto	l7414
  8613  173C  0021               	movlb	1	; select bank1
  8614  173D  1F21               	btfss	(_RF1^(0+128)+1),6
  8615  173E  2F36               	goto	l7408
  8616  173F                     l7414:	
  8617                           
  8618                           ;CC2500_B1.c: 95: };
  8619                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8620  173F  3198  20C3  3197   	fcall	_setRF_TimeoutCleared
  8621                           
  8622                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8623  1742  319C  241A  3197   	fcall	_CC2500_WriteByte
  8624                           
  8625                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8626  1745  319C  24D6  3197   	fcall	_CC2500_ReadByte
  8627                           
  8628                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8629  1748  0021               	movlb	1	; select bank1
  8630  1749  0857               	movf	_SPI0Buffer^(0+128),w
  8631  174A  0020               	movlb	0	; select bank0
  8632  174B  00A5               	movwf	??_CC2500_RxData
  8633  174C  0825               	movf	??_CC2500_RxData,w
  8634  174D  0022               	movlb	2	; select bank2
  8635  174E  00BC               	movwf	_Rx_Length^(0+256)
  8636                           
  8637                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8638  174F  0020               	movlb	0	; select bank0
  8639  1750  01A6               	clrf	CC2500_RxData@loop_f
  8640  1751                     l7430:	
  8641  1751  0022               	movlb	2	; select bank2
  8642  1752  083C               	movf	_Rx_Length^(0+256),w
  8643  1753  0020               	movlb	0	; select bank0
  8644  1754  0226               	subwf	CC2500_RxData@loop_f,w
  8645  1755  1803               	btfsc	3,0
  8646  1756  2F6A               	goto	l7432
  8647                           
  8648                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8649  1757  319C  24D6  3197   	fcall	_CC2500_ReadByte
  8650                           
  8651                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8652  175A  0021               	movlb	1	; select bank1
  8653  175B  0857               	movf	_SPI0Buffer^(0+128),w
  8654  175C  0020               	movlb	0	; select bank0
  8655  175D  00A5               	movwf	??_CC2500_RxData
  8656  175E  0826               	movf	CC2500_RxData@loop_f,w
  8657  175F  3EA0               	addlw	_RF_Data& (0+255)
  8658  1760  0086               	movwf	6
  8659  1761  3001               	movlw	1	; select bank3/4
  8660  1762  0087               	movwf	7
  8661  1763  0825               	movf	??_CC2500_RxData,w
  8662  1764  0081               	movwf	1
  8663  1765  3001               	movlw	1
  8664  1766  00A5               	movwf	??_CC2500_RxData
  8665  1767  0825               	movf	??_CC2500_RxData,w
  8666  1768  07A6               	addwf	CC2500_RxData@loop_f,f
  8667  1769  2F51               	goto	l7430
  8668  176A                     l7432:	
  8669                           
  8670                           ;CC2500_B1.c: 104: }
  8671                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8672  176A  319C  24D6  3197   	fcall	_CC2500_ReadByte
  8673                           
  8674                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8675  176D  0021               	movlb	1	; select bank1
  8676  176E  0857               	movf	_SPI0Buffer^(0+128),w
  8677  176F  0020               	movlb	0	; select bank0
  8678  1770  00A5               	movwf	??_CC2500_RxData
  8679  1771  0825               	movf	??_CC2500_RxData,w
  8680  1772  0022               	movlb	2	; select bank2
  8681  1773  00BB               	movwf	_RSSI^(0+256)
  8682                           
  8683                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8684  1774  319C  24D6  3197   	fcall	_CC2500_ReadByte
  8685                           
  8686                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8687  1777  0021               	movlb	1	; select bank1
  8688  1778  0857               	movf	_SPI0Buffer^(0+128),w
  8689  1779  0020               	movlb	0	; select bank0
  8690  177A  00A5               	movwf	??_CC2500_RxData
  8691  177B  0825               	movf	??_CC2500_RxData,w
  8692  177C  0022               	movlb	2	; select bank2
  8693  177D  00B8               	movwf	_CRC^(0+256)
  8694                           
  8695                           ;CC2500_B1.c: 109: RC4 = 1;
  8696  177E  0020               	movlb	0	; select bank0
  8697  177F  160E               	bsf	14,4	;volatile
  8698                           
  8699                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8700  1780  0022               	movlb	2	; select bank2
  8701  1781  1FB8               	btfss	_CRC^(0+256),7
  8702  1782  2F85               	goto	l283
  8703                           
  8704                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8705  1783  0020               	movlb	0	; select bank0
  8706  1784  146E               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8707  1785                     l283:	
  8708                           
  8709                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8710  1785  0021               	movlb	1	; select bank1
  8711  1786  11A0               	bcf	_RF1^(0+128),3
  8712                           
  8713                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8714  1787  14A0               	bsf	_RF1^(0+128),1
  8715                           
  8716                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8717  1788  3036               	movlw	54
  8718  1789  319C  244D  3197   	fcall	_CC2500_WriteCommand
  8719                           
  8720                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8721  178C  303A               	movlw	58
  8722  178D  319C  244D         	fcall	_CC2500_WriteCommand
  8723  178F  0021               	movlb	1	; select bank1
  8724  1790  0008               	return
  8725  1791                     __end_of_CC2500_RxData:	
  8726                           
  8727                           	psect	text37
  8728  1E78                     __ptext37:	
  8729 ;; *************** function _CC2500_ReadStatus *****************
  8730 ;; Defined at:
  8731 ;;		line 308 in file "../src/CC2500_B1.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  status_addr     1    wreg     unsigned char 
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;  status_addr     1    4[BANK0 ] unsigned char 
  8736 ;; Return value:  Size  Location     Type
  8737 ;;		None               void
  8738 ;; Registers used:
  8739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;Total ram usage:        2 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    6
  8752 ;; This function calls:
  8753 ;;		_CC2500_ReadByte
  8754 ;;		_CC2500_WriteByte
  8755 ;;		_RF_Timeout_Counter
  8756 ;;		_setRF_TimeoutCleared
  8757 ;; This function is called by:
  8758 ;;		_CC2500_RxData
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           
  8763                           ;psect for function _CC2500_ReadStatus
  8764  1E78                     _CC2500_ReadStatus:	
  8765                           
  8766                           ;incstack = 0
  8767                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8768                           ;CC2500_ReadStatus@status_addr stored from wreg
  8769  1E78  0020               	movlb	0	; select bank0
  8770  1E79  00A4               	movwf	CC2500_ReadStatus@status_addr
  8771                           
  8772                           ;CC2500_B1.c: 309: RC4 = 0;
  8773  1E7A  120E               	bcf	14,4	;volatile
  8774                           
  8775                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8776  1E7B  0824               	movf	CC2500_ReadStatus@status_addr,w
  8777  1E7C  3EC0               	addlw	192
  8778  1E7D  00A3               	movwf	??_CC2500_ReadStatus
  8779  1E7E  0823               	movf	??_CC2500_ReadStatus,w
  8780  1E7F  0021               	movlb	1	; select bank1
  8781  1E80  00D7               	movwf	_SPI0Buffer^(0+128)
  8782                           
  8783                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8784  1E81  2E85               	goto	l7024
  8785  1E82                     l7022:	
  8786                           
  8787                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8788  1E82  319B  2324  319E   	fcall	_RF_Timeout_Counter
  8789  1E85                     l7024:	
  8790  1E85  0020               	movlb	0	; select bank0
  8791  1E86  1D0E               	btfss	14,2	;volatile
  8792  1E87  2E8B               	goto	l7028
  8793  1E88  0021               	movlb	1	; select bank1
  8794  1E89  1F21               	btfss	(_RF1^(0+128)+1),6
  8795  1E8A  2E82               	goto	l7022
  8796  1E8B                     l7028:	
  8797                           
  8798                           ;CC2500_B1.c: 314: };
  8799                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8800  1E8B  3198  20C3  319E   	fcall	_setRF_TimeoutCleared
  8801                           
  8802                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8803  1E8E  319C  241A  319E   	fcall	_CC2500_WriteByte
  8804                           
  8805                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8806  1E91  319C  24D6         	fcall	_CC2500_ReadByte
  8807                           
  8808                           ;CC2500_B1.c: 319: RC4 = 1;
  8809  1E93  0020               	movlb	0	; select bank0
  8810  1E94  160E               	bsf	14,4	;volatile
  8811                           
  8812                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8813  1E95  0021               	movlb	1	; select bank1
  8814  1E96  0857               	movf	_SPI0Buffer^(0+128),w
  8815  1E97  0020               	movlb	0	; select bank0
  8816  1E98  00A3               	movwf	??_CC2500_ReadStatus
  8817  1E99  0823               	movf	??_CC2500_ReadStatus,w
  8818  1E9A  0021               	movlb	1	; select bank1
  8819  1E9B  00DA               	movwf	_s_data^(0+128)
  8820  1E9C  0008               	return
  8821  1E9D                     __end_of_CC2500_ReadStatus:	
  8822                           
  8823                           	psect	text38
  8824  1CD6                     __ptext38:	
  8825 ;; *************** function _CC2500_ReadByte *****************
  8826 ;; Defined at:
  8827 ;;		line 242 in file "../src/CC2500_B1.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;		None
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;  loop_b          1    2[BANK0 ] unsigned char 
  8832 ;; Return value:  Size  Location     Type
  8833 ;;		None               void
  8834 ;; Registers used:
  8835 ;;		wreg, status,2, status,0
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;Total ram usage:        2 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    5
  8848 ;; This function calls:
  8849 ;;		Nothing
  8850 ;; This function is called by:
  8851 ;;		_CC2500_RxData
  8852 ;;		_CC2500_ReadStatus
  8853 ;;		_CC2500_ReadREG
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           
  8858                           ;psect for function _CC2500_ReadByte
  8859  1CD6                     _CC2500_ReadByte:	
  8860                           
  8861                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8862                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8863                           
  8864                           ;incstack = 0
  8865                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8866  1CD6  0020               	movlb	0	; select bank0
  8867  1CD7  01A2               	clrf	CC2500_ReadByte@loop_b
  8868  1CD8                     L3:	
  8869  1CD8  3008               	movlw	8
  8870  1CD9  0222               	subwf	CC2500_ReadByte@loop_b,w
  8871  1CDA  1803               	btfsc	3,0
  8872  1CDB  0008               	return
  8873                           
  8874                           ;CC2500_B1.c: 245: RC1 = 1;
  8875  1CDC  148E               	bsf	14,1	;volatile
  8876                           
  8877                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8878  1CDD  1003               	clrc
  8879  1CDE  0021               	movlb	1	; select bank1
  8880  1CDF  0DD7               	rlf	_SPI0Buffer^(0+128),f
  8881                           
  8882                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8883  1CE0  0020               	movlb	0	; select bank0
  8884  1CE1  1D0E               	btfss	14,2	;volatile
  8885  1CE2  2CE6               	goto	l6908
  8886                           
  8887                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8888  1CE3  0021               	movlb	1	; select bank1
  8889  1CE4  1457               	bsf	_SPI0Buffer^(0+128),0
  8890  1CE5  2CEC               	goto	l6910
  8891  1CE6                     l6908:	
  8892                           
  8893                           ;CC2500_B1.c: 249: else
  8894                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8895  1CE6  30FE               	movlw	254
  8896  1CE7  0020               	movlb	0	; select bank0
  8897  1CE8  00A1               	movwf	??_CC2500_ReadByte
  8898  1CE9  0821               	movf	??_CC2500_ReadByte,w
  8899  1CEA  0021               	movlb	1	; select bank1
  8900  1CEB  05D7               	andwf	_SPI0Buffer^(0+128),f
  8901  1CEC                     l6910:	
  8902                           
  8903                           ;CC2500_B1.c: 251: RC1 = 0;
  8904  1CEC  0020               	movlb	0	; select bank0
  8905  1CED  108E               	bcf	14,1	;volatile
  8906  1CEE  3001               	movlw	1
  8907  1CEF  00A1               	movwf	??_CC2500_ReadByte
  8908  1CF0  0821               	movf	??_CC2500_ReadByte,w
  8909  1CF1  07A2               	addwf	CC2500_ReadByte@loop_b,f
  8910  1CF2  2CD8               	goto	L3
  8911  1CF3                     __end_of_CC2500_ReadByte:	
  8912                           
  8913                           	psect	text39
  8914  1B39                     __ptext39:	
  8915 ;; *************** function _CC2500_PowerOnInitial *****************
  8916 ;; Defined at:
  8917 ;;		line 126 in file "../src/CC2500_B1.c"
  8918 ;; Parameters:    Size  Location     Type
  8919 ;;		None
  8920 ;; Auto vars:     Size  Location     Type
  8921 ;;		None
  8922 ;; Return value:  Size  Location     Type
  8923 ;;		None               void
  8924 ;; Registers used:
  8925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8926 ;; Tracked objects:
  8927 ;;		On entry : 0/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;Total ram usage:        0 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; Hardware stack levels required when called:    8
  8938 ;; This function calls:
  8939 ;;		_CC2500_ClearRXFIFO
  8940 ;;		_CC2500_ClearTXFIFO
  8941 ;;		_CC2500_FrequencyCabr
  8942 ;;		_CC2500_InitPATable
  8943 ;;		_CC2500_InitSetREG
  8944 ;;		_CC2500_PowerRST
  8945 ;;		_CC2500_SIDLEMode
  8946 ;; This function is called by:
  8947 ;;		_setRF_Main
  8948 ;;		_main
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           
  8953                           ;psect for function _CC2500_PowerOnInitial
  8954  1B39                     _CC2500_PowerOnInitial:	
  8955                           
  8956                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8957                           
  8958                           ;incstack = 0
  8959                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8960  1B39  3187  27BB  319B   	fcall	_CC2500_PowerRST
  8961                           
  8962                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8963  1B3C  319E  26EB  319B   	fcall	_CC2500_InitSetREG
  8964                           
  8965                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8966  1B3F  319D  2511  319B   	fcall	_CC2500_InitPATable
  8967                           
  8968                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8969  1B42  3198  20CB  319B   	fcall	_CC2500_ClearTXFIFO
  8970                           
  8971                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8972  1B45  3198  20C7  319B   	fcall	_CC2500_ClearRXFIFO
  8973                           
  8974                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8975  1B48  3199  21C7  319B   	fcall	_CC2500_FrequencyCabr
  8976                           
  8977                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8978  1B4B  3198  20CF         	fcall	_CC2500_SIDLEMode
  8979  1B4D  0008               	return
  8980  1B4E                     __end_of_CC2500_PowerOnInitial:	
  8981                           
  8982                           	psect	text40
  8983  18CF                     __ptext40:	
  8984 ;; *************** function _CC2500_SIDLEMode *****************
  8985 ;; Defined at:
  8986 ;;		line 216 in file "../src/CC2500_B1.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;		None               void
  8993 ;; Registers used:
  8994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;Total ram usage:        0 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    7
  9007 ;; This function calls:
  9008 ;;		_CC2500_WriteCommand
  9009 ;; This function is called by:
  9010 ;;		_CC2500_PowerOnInitial
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           
  9015                           ;psect for function _CC2500_SIDLEMode
  9016  18CF                     _CC2500_SIDLEMode:	
  9017                           
  9018                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9019                           
  9020                           ;incstack = 0
  9021                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9022  18CF  3036               	movlw	54
  9023  18D0  319C  244D         	fcall	_CC2500_WriteCommand
  9024  18D2  0008               	return
  9025  18D3                     __end_of_CC2500_SIDLEMode:	
  9026                           
  9027                           	psect	text41
  9028  07BB                     __ptext41:	
  9029 ;; *************** function _CC2500_PowerRST *****************
  9030 ;; Defined at:
  9031 ;;		line 139 in file "../src/CC2500_B1.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;		None
  9034 ;; Auto vars:     Size  Location     Type
  9035 ;;		None
  9036 ;; Return value:  Size  Location     Type
  9037 ;;		None               void
  9038 ;; Registers used:
  9039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9040 ;; Tracked objects:
  9041 ;;		On entry : 0/0
  9042 ;;		On exit  : 0/0
  9043 ;;		Unchanged: 0/0
  9044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;Total ram usage:        1 bytes
  9050 ;; Hardware stack levels used:    1
  9051 ;; Hardware stack levels required when called:    6
  9052 ;; This function calls:
  9053 ;;		_CC2500_WriteByte
  9054 ;;		_DelayTime_1us
  9055 ;;		_RF_Timeout_Counter
  9056 ;;		_setRF_TimeoutCleared
  9057 ;; This function is called by:
  9058 ;;		_CC2500_PowerOnInitial
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function _CC2500_PowerRST
  9064  07BB                     _CC2500_PowerRST:	
  9065                           
  9066                           ;CC2500_B1.c: 140: RC1 = 0;
  9067                           
  9068                           ;incstack = 0
  9069                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9070  07BB  0020               	movlb	0	; select bank0
  9071  07BC  108E               	bcf	14,1	;volatile
  9072                           
  9073                           ;CC2500_B1.c: 141: RC0 = 0;
  9074  07BD  100E               	bcf	14,0	;volatile
  9075                           
  9076                           ;CC2500_B1.c: 142: RC4 = 1;
  9077  07BE  160E               	bsf	14,4	;volatile
  9078                           
  9079                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9080  07BF  300A               	movlw	10
  9081  07C0  00A1               	movwf	DelayTime_1us@count
  9082  07C1  3000               	movlw	0
  9083  07C2  00A2               	movwf	DelayTime_1us@count+1
  9084  07C3  319E  269D  3187   	fcall	_DelayTime_1us
  9085                           
  9086                           ;CC2500_B1.c: 144: RC4 = 0;
  9087  07C6  0020               	movlb	0	; select bank0
  9088  07C7  120E               	bcf	14,4	;volatile
  9089                           
  9090                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9091  07C8  300A               	movlw	10
  9092  07C9  00A1               	movwf	DelayTime_1us@count
  9093  07CA  3000               	movlw	0
  9094  07CB  00A2               	movwf	DelayTime_1us@count+1
  9095  07CC  319E  269D  3187   	fcall	_DelayTime_1us
  9096                           
  9097                           ;CC2500_B1.c: 146: RC4 = 1;
  9098  07CF  0020               	movlb	0	; select bank0
  9099  07D0  160E               	bsf	14,4	;volatile
  9100                           
  9101                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9102  07D1  3028               	movlw	40
  9103  07D2  00A1               	movwf	DelayTime_1us@count
  9104  07D3  3000               	movlw	0
  9105  07D4  00A2               	movwf	DelayTime_1us@count+1
  9106  07D5  319E  269D  3187   	fcall	_DelayTime_1us
  9107                           
  9108                           ;CC2500_B1.c: 148: RC4 = 0;
  9109  07D8  0020               	movlb	0	; select bank0
  9110  07D9  120E               	bcf	14,4	;volatile
  9111                           
  9112                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9113  07DA  3030               	movlw	48
  9114  07DB  00A7               	movwf	??_CC2500_PowerRST
  9115  07DC  0827               	movf	??_CC2500_PowerRST,w
  9116  07DD  0021               	movlb	1	; select bank1
  9117  07DE  00D7               	movwf	_SPI0Buffer^(0+128)
  9118                           
  9119                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9120  07DF  2FE3               	goto	l7052
  9121  07E0                     l7050:	
  9122                           
  9123                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9124  07E0  319B  2324  3187   	fcall	_RF_Timeout_Counter
  9125  07E3                     l7052:	
  9126  07E3  0020               	movlb	0	; select bank0
  9127  07E4  1D0E               	btfss	14,2	;volatile
  9128  07E5  2FE9               	goto	l7056
  9129  07E6  0021               	movlb	1	; select bank1
  9130  07E7  1F21               	btfss	(_RF1^(0+128)+1),6
  9131  07E8  2FE0               	goto	l7050
  9132  07E9                     l7056:	
  9133                           
  9134                           ;CC2500_B1.c: 152: };
  9135                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9136  07E9  3198  20C3  3187   	fcall	_setRF_TimeoutCleared
  9137                           
  9138                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9139  07EC  319C  241A  3187   	fcall	_CC2500_WriteByte
  9140                           
  9141                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9142  07EF  2FF3               	goto	l7062
  9143  07F0                     l7060:	
  9144                           
  9145                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9146  07F0  319B  2324  3187   	fcall	_RF_Timeout_Counter
  9147  07F3                     l7062:	
  9148  07F3  0020               	movlb	0	; select bank0
  9149  07F4  1D0E               	btfss	14,2	;volatile
  9150  07F5  2FF9               	goto	l7066
  9151  07F6  0021               	movlb	1	; select bank1
  9152  07F7  1F21               	btfss	(_RF1^(0+128)+1),6
  9153  07F8  2FF0               	goto	l7060
  9154  07F9                     l7066:	
  9155                           
  9156                           ;CC2500_B1.c: 157: };
  9157                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9158  07F9  3198  20C3         	fcall	_setRF_TimeoutCleared
  9159                           
  9160                           ;CC2500_B1.c: 159: RC0 = 0;
  9161  07FB  0020               	movlb	0	; select bank0
  9162  07FC  100E               	bcf	14,0	;volatile
  9163                           
  9164                           ;CC2500_B1.c: 160: RC4 = 1;
  9165  07FD  160E               	bsf	14,4	;volatile
  9166  07FE  0008               	return
  9167  07FF                     __end_of_CC2500_PowerRST:	
  9168                           
  9169                           	psect	text42
  9170  1EEB                     __ptext42:	
  9171 ;; *************** function _CC2500_InitSetREG *****************
  9172 ;; Defined at:
  9173 ;;		line 166 in file "../src/CC2500_B1.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;  loop_c          1    9[BANK0 ] unsigned char 
  9178 ;;  temp2           1    8[BANK0 ] unsigned char 
  9179 ;;  temp1           1    7[BANK0 ] unsigned char 
  9180 ;; Return value:  Size  Location     Type
  9181 ;;		None               void
  9182 ;; Registers used:
  9183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9184 ;; Tracked objects:
  9185 ;;		On entry : 0/0
  9186 ;;		On exit  : 0/0
  9187 ;;		Unchanged: 0/0
  9188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;Total ram usage:        4 bytes
  9194 ;; Hardware stack levels used:    1
  9195 ;; Hardware stack levels required when called:    7
  9196 ;; This function calls:
  9197 ;;		_CC2500_WriteREG
  9198 ;; This function is called by:
  9199 ;;		_CC2500_PowerOnInitial
  9200 ;; This function uses a non-reentrant model
  9201 ;;
  9202                           
  9203                           
  9204                           ;psect for function _CC2500_InitSetREG
  9205  1EEB                     _CC2500_InitSetREG:	
  9206                           
  9207                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9208                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9209                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9210                           
  9211                           ;incstack = 0
  9212                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9213  1EEB  0020               	movlb	0	; select bank0
  9214  1EEC  01A9               	clrf	CC2500_InitSetREG@loop_c
  9215  1EED                     L4:	
  9216  1EED  302F               	movlw	47
  9217  1EEE  0229               	subwf	CC2500_InitSetREG@loop_c,w
  9218  1EEF  1803               	btfsc	3,0
  9219  1EF0  0008               	return
  9220                           
  9221                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9222  1EF1  0829               	movf	CC2500_InitSetREG@loop_c,w
  9223  1EF2  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9224  1EF3  0084               	movwf	4
  9225  1EF4  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9226  1EF5  1803               	skipnc
  9227  1EF6  3E01               	addlw	1
  9228  1EF7  0085               	movwf	5
  9229  1EF8  0800               	movf	0,w	;code access
  9230  1EF9  00A6               	movwf	??_CC2500_InitSetREG
  9231  1EFA  0826               	movf	??_CC2500_InitSetREG,w
  9232  1EFB  00A7               	movwf	CC2500_InitSetREG@temp1
  9233                           
  9234                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9235  1EFC  0829               	movf	CC2500_InitSetREG@loop_c,w
  9236  1EFD  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9237  1EFE  0084               	movwf	4
  9238  1EFF  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9239  1F00  1803               	skipnc
  9240  1F01  3E01               	addlw	1
  9241  1F02  0085               	movwf	5
  9242  1F03  0800               	movf	0,w	;code access
  9243  1F04  00A6               	movwf	??_CC2500_InitSetREG
  9244  1F05  0826               	movf	??_CC2500_InitSetREG,w
  9245  1F06  00A8               	movwf	CC2500_InitSetREG@temp2
  9246                           
  9247                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9248  1F07  0828               	movf	CC2500_InitSetREG@temp2,w
  9249  1F08  00A6               	movwf	??_CC2500_InitSetREG
  9250  1F09  0826               	movf	??_CC2500_InitSetREG,w
  9251  1F0A  00A3               	movwf	CC2500_WriteREG@value
  9252  1F0B  0827               	movf	CC2500_InitSetREG@temp1,w
  9253  1F0C  319E  2655  319E   	fcall	_CC2500_WriteREG
  9254  1F0F  3001               	movlw	1
  9255  1F10  0020               	movlb	0	; select bank0
  9256  1F11  00A6               	movwf	??_CC2500_InitSetREG
  9257  1F12  0826               	movf	??_CC2500_InitSetREG,w
  9258  1F13  07A9               	addwf	CC2500_InitSetREG@loop_c,f
  9259  1F14  2EED               	goto	L4
  9260  1F15                     __end_of_CC2500_InitSetREG:	
  9261                           
  9262                           	psect	text43
  9263  1D11                     __ptext43:	
  9264 ;; *************** function _CC2500_InitPATable *****************
  9265 ;; Defined at:
  9266 ;;		line 181 in file "../src/CC2500_B1.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  loop_d          1    8[BANK0 ] unsigned char 
  9271 ;;  temp            1    7[BANK0 ] unsigned char 
  9272 ;; Return value:  Size  Location     Type
  9273 ;;		None               void
  9274 ;; Registers used:
  9275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;Total ram usage:        3 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    7
  9288 ;; This function calls:
  9289 ;;		_CC2500_WriteREG
  9290 ;; This function is called by:
  9291 ;;		_CC2500_PowerOnInitial
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295                           
  9296                           ;psect for function _CC2500_InitPATable
  9297  1D11                     _CC2500_InitPATable:	
  9298                           
  9299                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9300                           ;CC2500_B1.c: 183: unsigned char temp;
  9301                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9302                           
  9303                           ;incstack = 0
  9304                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9305  1D11  0020               	movlb	0	; select bank0
  9306  1D12  01A8               	clrf	CC2500_InitPATable@loop_d
  9307  1D13                     L5:	
  9308  1D13  3008               	movlw	8
  9309  1D14  0228               	subwf	CC2500_InitPATable@loop_d,w
  9310  1D15  1803               	btfsc	3,0
  9311  1D16  0008               	return
  9312                           
  9313                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9314  1D17  0828               	movf	CC2500_InitPATable@loop_d,w
  9315  1D18  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9316  1D19  0084               	movwf	4
  9317  1D1A  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9318  1D1B  1803               	skipnc
  9319  1D1C  3E01               	addlw	1
  9320  1D1D  0085               	movwf	5
  9321  1D1E  0800               	movf	0,w	;code access
  9322  1D1F  00A6               	movwf	??_CC2500_InitPATable
  9323  1D20  0826               	movf	??_CC2500_InitPATable,w
  9324  1D21  00A7               	movwf	CC2500_InitPATable@temp
  9325                           
  9326                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9327  1D22  0827               	movf	CC2500_InitPATable@temp,w
  9328  1D23  00A6               	movwf	??_CC2500_InitPATable
  9329  1D24  0826               	movf	??_CC2500_InitPATable,w
  9330  1D25  00A3               	movwf	CC2500_WriteREG@value
  9331  1D26  303E               	movlw	62
  9332  1D27  319E  2655  319D   	fcall	_CC2500_WriteREG
  9333  1D2A  3001               	movlw	1
  9334  1D2B  0020               	movlb	0	; select bank0
  9335  1D2C  00A6               	movwf	??_CC2500_InitPATable
  9336  1D2D  0826               	movf	??_CC2500_InitPATable,w
  9337  1D2E  07A8               	addwf	CC2500_InitPATable@loop_d,f
  9338  1D2F  2D13               	goto	L5
  9339  1D30                     __end_of_CC2500_InitPATable:	
  9340                           
  9341                           	psect	text44
  9342  1E55                     __ptext44:	
  9343 ;; *************** function _CC2500_WriteREG *****************
  9344 ;; Defined at:
  9345 ;;		line 258 in file "../src/CC2500_B1.c"
  9346 ;; Parameters:    Size  Location     Type
  9347 ;;  w_addr          1    wreg     unsigned char 
  9348 ;;  value           1    3[BANK0 ] unsigned char 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  w_addr          1    5[BANK0 ] unsigned char 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;		None               void
  9353 ;; Registers used:
  9354 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9360 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;Total ram usage:        3 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    6
  9367 ;; This function calls:
  9368 ;;		_CC2500_WriteByte
  9369 ;;		_RF_Timeout_Counter
  9370 ;;		_setRF_TimeoutCleared
  9371 ;; This function is called by:
  9372 ;;		_CC2500_InitSetREG
  9373 ;;		_CC2500_InitPATable
  9374 ;; This function uses a non-reentrant model
  9375 ;;
  9376                           
  9377                           
  9378                           ;psect for function _CC2500_WriteREG
  9379  1E55                     _CC2500_WriteREG:	
  9380                           
  9381                           ;incstack = 0
  9382                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9383                           ;CC2500_WriteREG@w_addr stored from wreg
  9384  1E55  0020               	movlb	0	; select bank0
  9385  1E56  00A5               	movwf	CC2500_WriteREG@w_addr
  9386                           
  9387                           ;CC2500_B1.c: 259: RC4 = 0;
  9388  1E57  120E               	bcf	14,4	;volatile
  9389                           
  9390                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9391  1E58  0825               	movf	CC2500_WriteREG@w_addr,w
  9392  1E59  00A4               	movwf	??_CC2500_WriteREG
  9393  1E5A  0824               	movf	??_CC2500_WriteREG,w
  9394  1E5B  0021               	movlb	1	; select bank1
  9395  1E5C  00D7               	movwf	_SPI0Buffer^(0+128)
  9396                           
  9397                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9398  1E5D  2E61               	goto	l6932
  9399  1E5E                     l6930:	
  9400                           
  9401                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9402  1E5E  319B  2324  319E   	fcall	_RF_Timeout_Counter
  9403  1E61                     l6932:	
  9404  1E61  0020               	movlb	0	; select bank0
  9405  1E62  1D0E               	btfss	14,2	;volatile
  9406  1E63  2E67               	goto	l6936
  9407  1E64  0021               	movlb	1	; select bank1
  9408  1E65  1F21               	btfss	(_RF1^(0+128)+1),6
  9409  1E66  2E5E               	goto	l6930
  9410  1E67                     l6936:	
  9411                           
  9412                           ;CC2500_B1.c: 263: };
  9413                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9414  1E67  3198  20C3  319E   	fcall	_setRF_TimeoutCleared
  9415                           
  9416                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9417  1E6A  319C  241A  319E   	fcall	_CC2500_WriteByte
  9418                           
  9419                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9420  1E6D  0020               	movlb	0	; select bank0
  9421  1E6E  0823               	movf	CC2500_WriteREG@value,w
  9422  1E6F  00A4               	movwf	??_CC2500_WriteREG
  9423  1E70  0824               	movf	??_CC2500_WriteREG,w
  9424  1E71  0021               	movlb	1	; select bank1
  9425  1E72  00D7               	movwf	_SPI0Buffer^(0+128)
  9426                           
  9427                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9428  1E73  319C  241A         	fcall	_CC2500_WriteByte
  9429                           
  9430                           ;CC2500_B1.c: 269: RC4 = 1;
  9431  1E75  0020               	movlb	0	; select bank0
  9432  1E76  160E               	bsf	14,4	;volatile
  9433  1E77  0008               	return
  9434  1E78                     __end_of_CC2500_WriteREG:	
  9435                           
  9436                           	psect	text45
  9437  19C7                     __ptext45:	
  9438 ;; *************** function _CC2500_FrequencyCabr *****************
  9439 ;; Defined at:
  9440 ;;		line 208 in file "../src/CC2500_B1.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;		None
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;		None
  9445 ;; Return value:  Size  Location     Type
  9446 ;;		None               void
  9447 ;; Registers used:
  9448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;Total ram usage:        0 bytes
  9459 ;; Hardware stack levels used:    1
  9460 ;; Hardware stack levels required when called:    7
  9461 ;; This function calls:
  9462 ;;		_CC2500_WriteCommand
  9463 ;;		_DelayTime_1us
  9464 ;; This function is called by:
  9465 ;;		_CC2500_PowerOnInitial
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           
  9470                           ;psect for function _CC2500_FrequencyCabr
  9471  19C7                     _CC2500_FrequencyCabr:	
  9472                           
  9473                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9474                           
  9475                           ;incstack = 0
  9476                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9477  19C7  3033               	movlw	51
  9478  19C8  319C  244D  3199   	fcall	_CC2500_WriteCommand
  9479                           
  9480                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9481  19CB  30E8               	movlw	232
  9482  19CC  0020               	movlb	0	; select bank0
  9483  19CD  00A1               	movwf	DelayTime_1us@count
  9484  19CE  3003               	movlw	3
  9485  19CF  00A2               	movwf	DelayTime_1us@count+1
  9486  19D0  319E  269D         	fcall	_DelayTime_1us
  9487  19D2  0008               	return
  9488  19D3                     __end_of_CC2500_FrequencyCabr:	
  9489                           
  9490                           	psect	text46
  9491  1E9D                     __ptext46:	
  9492 ;; *************** function _DelayTime_1us *****************
  9493 ;; Defined at:
  9494 ;;		line 327 in file "../src/CC2500_B1.c"
  9495 ;; Parameters:    Size  Location     Type
  9496 ;;  count           2    1[BANK0 ] int 
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;  j               2    5[BANK0 ] unsigned int 
  9499 ;;  i               2    3[BANK0 ] unsigned int 
  9500 ;; Return value:  Size  Location     Type
  9501 ;;		None               void
  9502 ;; Registers used:
  9503 ;;		wreg, status,2
  9504 ;; Tracked objects:
  9505 ;;		On entry : 0/0
  9506 ;;		On exit  : 0/0
  9507 ;;		Unchanged: 0/0
  9508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9509 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;Total ram usage:        6 bytes
  9514 ;; Hardware stack levels used:    1
  9515 ;; Hardware stack levels required when called:    5
  9516 ;; This function calls:
  9517 ;;		Nothing
  9518 ;; This function is called by:
  9519 ;;		_CC2500_PowerRST
  9520 ;;		_CC2500_FrequencyCabr
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           
  9525                           ;psect for function _DelayTime_1us
  9526  1E9D                     _DelayTime_1us:	
  9527                           
  9528                           ;CC2500_B1.c: 328: unsigned int i, j;
  9529                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9530                           
  9531                           ;incstack = 0
  9532                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9533  1E9D  3001               	movlw	1
  9534  1E9E  0020               	movlb	0	; select bank0
  9535  1E9F  00A3               	movwf	DelayTime_1us@i
  9536  1EA0  3000               	movlw	0
  9537  1EA1  00A4               	movwf	DelayTime_1us@i+1
  9538  1EA2                     l371:	
  9539  1EA2  0822               	movf	DelayTime_1us@count+1,w
  9540  1EA3  0224               	subwf	DelayTime_1us@i+1,w
  9541  1EA4  1D03               	skipz
  9542  1EA5  2EA8               	goto	u6325
  9543  1EA6  0821               	movf	DelayTime_1us@count,w
  9544  1EA7  0223               	subwf	DelayTime_1us@i,w
  9545  1EA8                     u6325:	
  9546  1EA8  1803               	btfsc	3,0
  9547  1EA9  0008               	return
  9548                           
  9549                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9550  1EAA  01A5               	clrf	DelayTime_1us@j
  9551  1EAB  01A6               	clrf	DelayTime_1us@j+1
  9552  1EAC  3000               	movlw	0
  9553  1EAD  0226               	subwf	DelayTime_1us@j+1,w
  9554  1EAE  3002               	movlw	2
  9555  1EAF  1903               	skipnz
  9556  1EB0  0225               	subwf	DelayTime_1us@j,w
  9557  1EB1  1803               	btfsc	3,0
  9558  1EB2  2EBE               	goto	l6924
  9559  1EB3                     l6922:	
  9560  1EB3  3001               	movlw	1
  9561  1EB4  07A5               	addwf	DelayTime_1us@j,f
  9562  1EB5  3000               	movlw	0
  9563  1EB6  3DA6               	addwfc	DelayTime_1us@j+1,f
  9564  1EB7  3000               	movlw	0
  9565  1EB8  0226               	subwf	DelayTime_1us@j+1,w
  9566  1EB9  3002               	movlw	2
  9567  1EBA  1903               	skipnz
  9568  1EBB  0225               	subwf	DelayTime_1us@j,w
  9569  1EBC  1C03               	skipc
  9570  1EBD  2EB3               	goto	l6922
  9571  1EBE                     l6924:	
  9572  1EBE  3001               	movlw	1
  9573  1EBF  07A3               	addwf	DelayTime_1us@i,f
  9574  1EC0  3000               	movlw	0
  9575  1EC1  3DA4               	addwfc	DelayTime_1us@i+1,f
  9576  1EC2  2EA2               	goto	l371
  9577  1EC3                     __end_of_DelayTime_1us:	
  9578                           
  9579                           	psect	text47
  9580  18CB                     __ptext47:	
  9581 ;; *************** function _CC2500_ClearTXFIFO *****************
  9582 ;; Defined at:
  9583 ;;		line 194 in file "../src/CC2500_B1.c"
  9584 ;; Parameters:    Size  Location     Type
  9585 ;;		None
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;		None
  9588 ;; Return value:  Size  Location     Type
  9589 ;;		None               void
  9590 ;; Registers used:
  9591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9592 ;; Tracked objects:
  9593 ;;		On entry : 0/0
  9594 ;;		On exit  : 0/0
  9595 ;;		Unchanged: 0/0
  9596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;Total ram usage:        0 bytes
  9602 ;; Hardware stack levels used:    1
  9603 ;; Hardware stack levels required when called:    7
  9604 ;; This function calls:
  9605 ;;		_CC2500_WriteCommand
  9606 ;; This function is called by:
  9607 ;;		_CC2500_PowerOnInitial
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           
  9612                           ;psect for function _CC2500_ClearTXFIFO
  9613  18CB                     _CC2500_ClearTXFIFO:	
  9614                           
  9615                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9616                           
  9617                           ;incstack = 0
  9618                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9619  18CB  303B               	movlw	59
  9620  18CC  319C  244D         	fcall	_CC2500_WriteCommand
  9621  18CE  0008               	return
  9622  18CF                     __end_of_CC2500_ClearTXFIFO:	
  9623                           
  9624                           	psect	text48
  9625  18C7                     __ptext48:	
  9626 ;; *************** function _CC2500_ClearRXFIFO *****************
  9627 ;; Defined at:
  9628 ;;		line 201 in file "../src/CC2500_B1.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;		None
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;		None
  9633 ;; Return value:  Size  Location     Type
  9634 ;;		None               void
  9635 ;; Registers used:
  9636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9637 ;; Tracked objects:
  9638 ;;		On entry : 0/0
  9639 ;;		On exit  : 0/0
  9640 ;;		Unchanged: 0/0
  9641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;Total ram usage:        0 bytes
  9647 ;; Hardware stack levels used:    1
  9648 ;; Hardware stack levels required when called:    7
  9649 ;; This function calls:
  9650 ;;		_CC2500_WriteCommand
  9651 ;; This function is called by:
  9652 ;;		_CC2500_PowerOnInitial
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           
  9657                           ;psect for function _CC2500_ClearRXFIFO
  9658  18C7                     _CC2500_ClearRXFIFO:	
  9659                           
  9660                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9661                           
  9662                           ;incstack = 0
  9663                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9664  18C7  303A               	movlw	58
  9665  18C8  319C  244D         	fcall	_CC2500_WriteCommand
  9666  18CA  0008               	return
  9667  18CB                     __end_of_CC2500_ClearRXFIFO:	
  9668                           
  9669                           	psect	text49
  9670  1C4D                     __ptext49:	
  9671 ;; *************** function _CC2500_WriteCommand *****************
  9672 ;; Defined at:
  9673 ;;		line 292 in file "../src/CC2500_B1.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;  command         1    wreg     unsigned char 
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;  command         1    4[BANK0 ] unsigned char 
  9678 ;; Return value:  Size  Location     Type
  9679 ;;		None               void
  9680 ;; Registers used:
  9681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;Total ram usage:        2 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    6
  9694 ;; This function calls:
  9695 ;;		_CC2500_WriteByte
  9696 ;;		_RF_Timeout_Counter
  9697 ;;		_setRF_TimeoutCleared
  9698 ;; This function is called by:
  9699 ;;		_CC2500_TxData
  9700 ;;		_CC2500_RxData
  9701 ;;		_CC2500_ClearTXFIFO
  9702 ;;		_CC2500_ClearRXFIFO
  9703 ;;		_CC2500_FrequencyCabr
  9704 ;;		_CC2500_SIDLEMode
  9705 ;;		_setRF_Main
  9706 ;;		_RF_RxDisable
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           
  9711                           ;psect for function _CC2500_WriteCommand
  9712  1C4D                     _CC2500_WriteCommand:	
  9713                           
  9714                           ;incstack = 0
  9715                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9716                           ;CC2500_WriteCommand@command stored from wreg
  9717  1C4D  0020               	movlb	0	; select bank0
  9718  1C4E  00A4               	movwf	CC2500_WriteCommand@command
  9719                           
  9720                           ;CC2500_B1.c: 293: RC4 = 0;
  9721  1C4F  120E               	bcf	14,4	;volatile
  9722                           
  9723                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9724  1C50  0824               	movf	CC2500_WriteCommand@command,w
  9725  1C51  00A3               	movwf	??_CC2500_WriteCommand
  9726  1C52  0823               	movf	??_CC2500_WriteCommand,w
  9727  1C53  0021               	movlb	1	; select bank1
  9728  1C54  00D7               	movwf	_SPI0Buffer^(0+128)
  9729                           
  9730                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9731  1C55  2C59               	goto	l6886
  9732  1C56                     l6884:	
  9733                           
  9734                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9735  1C56  319B  2324  319C   	fcall	_RF_Timeout_Counter
  9736  1C59                     l6886:	
  9737  1C59  0020               	movlb	0	; select bank0
  9738  1C5A  1D0E               	btfss	14,2	;volatile
  9739  1C5B  2C5F               	goto	l6890
  9740  1C5C  0021               	movlb	1	; select bank1
  9741  1C5D  1F21               	btfss	(_RF1^(0+128)+1),6
  9742  1C5E  2C56               	goto	l6884
  9743  1C5F                     l6890:	
  9744                           
  9745                           ;CC2500_B1.c: 298: };
  9746                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9747  1C5F  3198  20C3  319C   	fcall	_setRF_TimeoutCleared
  9748                           
  9749                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9750  1C62  319C  241A         	fcall	_CC2500_WriteByte
  9751                           
  9752                           ;CC2500_B1.c: 302: RC4 = 1;
  9753  1C64  0020               	movlb	0	; select bank0
  9754  1C65  160E               	bsf	14,4	;volatile
  9755  1C66  0008               	return
  9756  1C67                     __end_of_CC2500_WriteCommand:	
  9757                           
  9758                           	psect	text50
  9759  18C3                     __ptext50:	
  9760 ;; *************** function _setRF_TimeoutCleared *****************
  9761 ;; Defined at:
  9762 ;;		line 149 in file "../src/RF_Control_B1.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;		None
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;		None
  9767 ;; Return value:  Size  Location     Type
  9768 ;;		None               void
  9769 ;; Registers used:
  9770 ;;		status,2
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;Total ram usage:        0 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:    5
  9783 ;; This function calls:
  9784 ;;		Nothing
  9785 ;; This function is called by:
  9786 ;;		_CC2500_TxData
  9787 ;;		_CC2500_RxData
  9788 ;;		_CC2500_PowerRST
  9789 ;;		_CC2500_WriteREG
  9790 ;;		_CC2500_WriteCommand
  9791 ;;		_CC2500_ReadStatus
  9792 ;;		_CC2500_ReadREG
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           
  9797                           ;psect for function _setRF_TimeoutCleared
  9798  18C3                     _setRF_TimeoutCleared:	
  9799                           
  9800                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9801                           
  9802                           ;incstack = 0
  9803                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9804  18C3  0021               	movlb	1	; select bank1
  9805  18C4  01AC               	clrf	(_RF1^(0+128)+12)
  9806  18C5  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9807  18C6  0008               	return
  9808  18C7                     __end_of_setRF_TimeoutCleared:	
  9809                           
  9810                           	psect	text51
  9811  1B24                     __ptext51:	
  9812 ;; *************** function _RF_Timeout_Counter *****************
  9813 ;; Defined at:
  9814 ;;		line 141 in file "../src/RF_Control_B1.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;		None
  9817 ;; Auto vars:     Size  Location     Type
  9818 ;;		None
  9819 ;; Return value:  Size  Location     Type
  9820 ;;		None               void
  9821 ;; Registers used:
  9822 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9823 ;; Tracked objects:
  9824 ;;		On entry : 0/0
  9825 ;;		On exit  : 0/0
  9826 ;;		Unchanged: 0/0
  9827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;Total ram usage:        0 bytes
  9833 ;; Hardware stack levels used:    1
  9834 ;; Hardware stack levels required when called:    5
  9835 ;; This function calls:
  9836 ;;		Nothing
  9837 ;; This function is called by:
  9838 ;;		_CC2500_TxData
  9839 ;;		_CC2500_RxData
  9840 ;;		_CC2500_PowerRST
  9841 ;;		_CC2500_WriteREG
  9842 ;;		_CC2500_WriteCommand
  9843 ;;		_CC2500_ReadStatus
  9844 ;;		_CC2500_ReadREG
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848                           
  9849                           ;psect for function _RF_Timeout_Counter
  9850  1B24                     _RF_Timeout_Counter:	
  9851                           
  9852                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9853                           
  9854                           ;incstack = 0
  9855                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9856  1B24  3001               	movlw	1
  9857  1B25  0021               	movlb	1	; select bank1
  9858  1B26  07AC               	addwf	(_RF1^(0+128)+12),f
  9859  1B27  3000               	movlw	0
  9860  1B28  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9861                           
  9862                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9863  1B29  300C               	movlw	12
  9864  1B2A  3EA0               	addlw	_RF1& (0+255)
  9865  1B2B  0086               	movwf	6
  9866  1B2C  0187               	clrf	7
  9867  1B2D  3F40               	moviw [0]fsr1
  9868  1B2E  3AA8               	xorlw	168
  9869  1B2F  1D03               	skipz
  9870  1B30  2B33               	goto	u5965
  9871  1B31  3F41               	moviw [1]fsr1
  9872  1B32  3A61               	xorlw	97
  9873  1B33                     u5965:	
  9874  1B33  1D03               	skipz
  9875  1B34  0008               	return
  9876                           
  9877                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9878  1B35  01AC               	clrf	(_RF1^(0+128)+12)
  9879  1B36  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9880                           
  9881                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9882  1B37  1721               	bsf	(_RF1^(0+128)+1),6
  9883  1B38  0008               	return
  9884  1B39                     __end_of_RF_Timeout_Counter:	
  9885                           
  9886                           	psect	text52
  9887  1C1A                     __ptext52:	
  9888 ;; *************** function _CC2500_WriteByte *****************
  9889 ;; Defined at:
  9890 ;;		line 226 in file "../src/CC2500_B1.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;		None
  9893 ;; Auto vars:     Size  Location     Type
  9894 ;;  loop_a          1    2[BANK0 ] unsigned char 
  9895 ;; Return value:  Size  Location     Type
  9896 ;;		None               void
  9897 ;; Registers used:
  9898 ;;		wreg, status,2, status,0
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 0/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;Total ram usage:        2 bytes
  9909 ;; Hardware stack levels used:    1
  9910 ;; Hardware stack levels required when called:    5
  9911 ;; This function calls:
  9912 ;;		Nothing
  9913 ;; This function is called by:
  9914 ;;		_CC2500_TxData
  9915 ;;		_CC2500_RxData
  9916 ;;		_CC2500_PowerRST
  9917 ;;		_CC2500_WriteREG
  9918 ;;		_CC2500_WriteCommand
  9919 ;;		_CC2500_ReadStatus
  9920 ;;		_CC2500_ReadREG
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923                           
  9924                           
  9925                           ;psect for function _CC2500_WriteByte
  9926  1C1A                     _CC2500_WriteByte:	
  9927                           
  9928                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9929                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9930                           
  9931                           ;incstack = 0
  9932                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9933  1C1A  0020               	movlb	0	; select bank0
  9934  1C1B  01A2               	clrf	CC2500_WriteByte@loop_a
  9935  1C1C                     L6:	
  9936  1C1C  3008               	movlw	8
  9937  1C1D  0222               	subwf	CC2500_WriteByte@loop_a,w
  9938  1C1E  1803               	btfsc	3,0
  9939  1C1F  0008               	return
  9940                           
  9941                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9942  1C20  0021               	movlb	1	; select bank1
  9943  1C21  1FD7               	btfss	_SPI0Buffer^(0+128),7
  9944  1C22  2C26               	goto	l327
  9945                           
  9946                           ;CC2500_B1.c: 230: RC0 = 1;
  9947  1C23  0020               	movlb	0	; select bank0
  9948  1C24  140E               	bsf	14,0	;volatile
  9949  1C25  2C28               	goto	l328
  9950  1C26                     l327:	
  9951                           
  9952                           ;CC2500_B1.c: 231: else
  9953                           ;CC2500_B1.c: 232: RC0 = 0;
  9954  1C26  0020               	movlb	0	; select bank0
  9955  1C27  100E               	bcf	14,0	;volatile
  9956  1C28                     l328:	
  9957                           
  9958                           ;CC2500_B1.c: 233: RC1 = 1;
  9959  1C28  148E               	bsf	14,1	;volatile
  9960                           
  9961                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9962  1C29  1003               	clrc
  9963  1C2A  0021               	movlb	1	; select bank1
  9964  1C2B  0DD7               	rlf	_SPI0Buffer^(0+128),f
  9965                           
  9966                           ;CC2500_B1.c: 235: RC1 = 0;
  9967  1C2C  0020               	movlb	0	; select bank0
  9968  1C2D  108E               	bcf	14,1	;volatile
  9969  1C2E  3001               	movlw	1
  9970  1C2F  00A1               	movwf	??_CC2500_WriteByte
  9971  1C30  0821               	movf	??_CC2500_WriteByte,w
  9972  1C31  07A2               	addwf	CC2500_WriteByte@loop_a,f
  9973  1C32  2C1C               	goto	L6
  9974  1C33                     __end_of_CC2500_WriteByte:	
  9975                           
  9976                           	psect	text53
  9977  18B3                     __ptext53:	
  9978 ;; *************** function _RF_Initialization *****************
  9979 ;; Defined at:
  9980 ;;		line 9 in file "../src/RF_Control_B1.c"
  9981 ;; Parameters:    Size  Location     Type
  9982 ;;		None
  9983 ;; Auto vars:     Size  Location     Type
  9984 ;;		None
  9985 ;; Return value:  Size  Location     Type
  9986 ;;		None               void
  9987 ;; Registers used:
  9988 ;;		wreg, status,2, status,0, pclath, cstack
  9989 ;; Tracked objects:
  9990 ;;		On entry : 0/0
  9991 ;;		On exit  : 0/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;Total ram usage:        0 bytes
  9999 ;; Hardware stack levels used:    1
 10000 ;; Hardware stack levels required when called:    6
 10001 ;; This function calls:
 10002 ;;		_setRF_Initialization
 10003 ;; This function is called by:
 10004 ;;		_main
 10005 ;; This function uses a non-reentrant model
 10006 ;;
 10007                           
 10008                           
 10009                           ;psect for function _RF_Initialization
 10010  18B3                     _RF_Initialization:	
 10011                           
 10012                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10013                           
 10014                           ;incstack = 0
 10015                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10016  18B3  3199  2151         	fcall	_setRF_Initialization
 10017  18B5  0008               	return
 10018  18B6                     __end_of_RF_Initialization:	
 10019                           
 10020                           	psect	text54
 10021  1951                     __ptext54:	
 10022 ;; *************** function _setRF_Initialization *****************
 10023 ;; Defined at:
 10024 ;;		line 17 in file "../src/RF_Control_B1.c"
 10025 ;; Parameters:    Size  Location     Type
 10026 ;;		None
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;		None
 10029 ;; Return value:  Size  Location     Type
 10030 ;;		None               void
 10031 ;; Registers used:
 10032 ;;		wreg
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;Total ram usage:        1 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:    5
 10045 ;; This function calls:
 10046 ;;		Nothing
 10047 ;; This function is called by:
 10048 ;;		_RF_Initialization
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           
 10053                           ;psect for function _setRF_Initialization
 10054  1951                     _setRF_Initialization:	
 10055                           
 10056                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10057                           
 10058                           ;incstack = 0
 10059                           ; Regs used in _setRF_Initialization: [wreg]
 10060  1951  3015               	movlw	21
 10061  1952  0020               	movlb	0	; select bank0
 10062  1953  00A1               	movwf	??_setRF_Initialization
 10063  1954  0821               	movf	??_setRF_Initialization,w
 10064  1955  0021               	movlb	1	; select bank1
 10065  1956  00D9               	movwf	_Tx_Length^(0+128)
 10066                           
 10067                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10068  1957  30C8               	movlw	200
 10069  1958  00A7               	movwf	(_RF1^(0+128)+7)
 10070  1959  3000               	movlw	0
 10071  195A  00A8               	movwf	(_RF1^(0+128)+8)
 10072  195B  0008               	return
 10073  195C                     __end_of_setRF_Initialization:	
 10074                           
 10075                           	psect	text55
 10076  1A8C                     __ptext55:	
 10077 ;; *************** function _Mcu_Initialization *****************
 10078 ;; Defined at:
 10079 ;;		line 30 in file "../src/MCU_B1.c"
 10080 ;; Parameters:    Size  Location     Type
 10081 ;;		None
 10082 ;; Auto vars:     Size  Location     Type
 10083 ;;		None
 10084 ;; Return value:  Size  Location     Type
 10085 ;;		None               void
 10086 ;; Registers used:
 10087 ;;		wreg, status,2, status,0, pclath, cstack
 10088 ;; Tracked objects:
 10089 ;;		On entry : 0/0
 10090 ;;		On exit  : 0/0
 10091 ;;		Unchanged: 0/0
 10092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;Total ram usage:        0 bytes
 10098 ;; Hardware stack levels used:    1
 10099 ;; Hardware stack levels required when called:    6
 10100 ;; This function calls:
 10101 ;;		_ADC_Set
 10102 ;;		_Fosc_Set
 10103 ;;		_IOC_Set
 10104 ;;		_IO_Set
 10105 ;;		_TMR1_Set
 10106 ;;		_WDT_Set
 10107 ;; This function is called by:
 10108 ;;		_main
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           
 10113                           ;psect for function _Mcu_Initialization
 10114  1A8C                     _Mcu_Initialization:	
 10115                           
 10116                           ;MCU_B1.c: 32: Fosc_Set();
 10117                           
 10118                           ;incstack = 0
 10119                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10120  1A8C  3198  20BF  319A   	fcall	_Fosc_Set
 10121                           
 10122                           ;MCU_B1.c: 34: IO_Set();
 10123  1A8F  319C  2467  319A   	fcall	_IO_Set
 10124                           
 10125                           ;MCU_B1.c: 36: ;;
 10126                           ;MCU_B1.c: 38: TMR1_Set();
 10127  1A92  3199  21AF  319A   	fcall	_TMR1_Set
 10128                           
 10129                           ;MCU_B1.c: 40: ADC_Set();
 10130  1A95  3198  20EA  319A   	fcall	_ADC_Set
 10131                           
 10132                           ;MCU_B1.c: 42: ;;
 10133                           ;MCU_B1.c: 44: ;;
 10134                           ;MCU_B1.c: 46: IOC_Set();
 10135  1A98  3199  2146  319A   	fcall	_IOC_Set
 10136                           
 10137                           ;MCU_B1.c: 48: ;;
 10138                           ;MCU_B1.c: 50: ;;
 10139                           ;MCU_B1.c: 52: WDT_Set();
 10140  1A9B  3199  21BB         	fcall	_WDT_Set
 10141  1A9D  0008               	return
 10142  1A9E                     __end_of_Mcu_Initialization:	
 10143                           
 10144                           	psect	text56
 10145  19BB                     __ptext56:	
 10146 ;; *************** function _WDT_Set *****************
 10147 ;; Defined at:
 10148 ;;		line 1100 in file "../src/MCU_B1.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;		None
 10151 ;; Auto vars:     Size  Location     Type
 10152 ;;		None
 10153 ;; Return value:  Size  Location     Type
 10154 ;;		None               void
 10155 ;; Registers used:
 10156 ;;		wreg
 10157 ;; Tracked objects:
 10158 ;;		On entry : 0/0
 10159 ;;		On exit  : 0/0
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;Total ram usage:        1 bytes
 10167 ;; Hardware stack levels used:    1
 10168 ;; Hardware stack levels required when called:    5
 10169 ;; This function calls:
 10170 ;;		Nothing
 10171 ;; This function is called by:
 10172 ;;		_Mcu_Initialization
 10173 ;; This function uses a non-reentrant model
 10174 ;;
 10175                           
 10176                           
 10177                           ;psect for function _WDT_Set
 10178  19BB                     _WDT_Set:	
 10179                           
 10180                           ;MCU_B1.c: 1107: WDTCON = 0b00010111;;
 10181                           
 10182                           ;incstack = 0
 10183                           ; Regs used in _WDT_Set: [wreg]
 10184  19BB  3017               	movlw	23
 10185  19BC  0021               	movlb	1	; select bank1
 10186  19BD  0097               	movwf	23	;volatile
 10187                           
 10188                           ;MCU_B1.c: 1109: WDT.Enable = 1;
 10189  19BE  0022               	movlb	2	; select bank2
 10190  19BF  1436               	bsf	_WDT^(0+256),0
 10191                           
 10192                           ;MCU_B1.c: 1110: WDT.Timer = 10;
 10193  19C0  300A               	movlw	10
 10194  19C1  0020               	movlb	0	; select bank0
 10195  19C2  00A1               	movwf	??_WDT_Set
 10196  19C3  0821               	movf	??_WDT_Set,w
 10197  19C4  0022               	movlb	2	; select bank2
 10198  19C5  00B7               	movwf	(_WDT^(0+256)+1)
 10199  19C6  0008               	return
 10200  19C7                     __end_of_WDT_Set:	
 10201                           
 10202                           	psect	text57
 10203  19AF                     __ptext57:	
 10204 ;; *************** function _TMR1_Set *****************
 10205 ;; Defined at:
 10206 ;;		line 226 in file "../src/MCU_B1.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;		None
 10209 ;; Auto vars:     Size  Location     Type
 10210 ;;		None
 10211 ;; Return value:  Size  Location     Type
 10212 ;;		None               void
 10213 ;; Registers used:
 10214 ;;		wreg
 10215 ;; Tracked objects:
 10216 ;;		On entry : 0/0
 10217 ;;		On exit  : 0/0
 10218 ;;		Unchanged: 0/0
 10219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;Total ram usage:        0 bytes
 10225 ;; Hardware stack levels used:    1
 10226 ;; Hardware stack levels required when called:    5
 10227 ;; This function calls:
 10228 ;;		Nothing
 10229 ;; This function is called by:
 10230 ;;		_Mcu_Initialization
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           
 10235                           ;psect for function _TMR1_Set
 10236  19AF                     _TMR1_Set:	
 10237                           
 10238                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10239                           
 10240                           ;incstack = 0
 10241                           ; Regs used in _TMR1_Set: [wreg]
 10242  19AF  3041               	movlw	65
 10243  19B0  0020               	movlb	0	; select bank0
 10244  19B1  0098               	movwf	24	;volatile
 10245                           
 10246                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10247  19B2  30FA               	movlw	250
 10248  19B3  0097               	movwf	23	;volatile
 10249                           
 10250                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10251  19B4  3038               	movlw	56
 10252  19B5  0096               	movwf	22	;volatile
 10253                           
 10254                           ;MCU_B1.c: 230: TMR1IE = 1;
 10255  19B6  0021               	movlb	1	; select bank1
 10256  19B7  1411               	bsf	17,0	;volatile
 10257                           
 10258                           ;MCU_B1.c: 231: PEIE = 1;
 10259  19B8  170B               	bsf	11,6	;volatile
 10260                           
 10261                           ;MCU_B1.c: 232: GIE = 1;
 10262  19B9  178B               	bsf	11,7	;volatile
 10263  19BA  0008               	return
 10264  19BB                     __end_of_TMR1_Set:	
 10265                           
 10266                           	psect	text58
 10267  1C67                     __ptext58:	
 10268 ;; *************** function _IO_Set *****************
 10269 ;; Defined at:
 10270 ;;		line 60 in file "../src/MCU_B1.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;		None
 10273 ;; Auto vars:     Size  Location     Type
 10274 ;;		None
 10275 ;; Return value:  Size  Location     Type
 10276 ;;		None               void
 10277 ;; Registers used:
 10278 ;;		wreg, status,2
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;Total ram usage:        0 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; Hardware stack levels required when called:    5
 10291 ;; This function calls:
 10292 ;;		Nothing
 10293 ;; This function is called by:
 10294 ;;		_Mcu_Initialization
 10295 ;; This function uses a non-reentrant model
 10296 ;;
 10297                           
 10298                           
 10299                           ;psect for function _IO_Set
 10300  1C67                     _IO_Set:	
 10301                           
 10302                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10303                           
 10304                           ;incstack = 0
 10305                           ; Regs used in _IO_Set: [wreg+status,2]
 10306  1C67  3077               	movlw	119
 10307  1C68  0021               	movlb	1	; select bank1
 10308  1C69  008C               	movwf	12	;volatile
 10309                           
 10310                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10311  1C6A  3007               	movlw	7
 10312  1C6B  008D               	movwf	13	;volatile
 10313                           
 10314                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10315  1C6C  300C               	movlw	12
 10316  1C6D  008E               	movwf	14	;volatile
 10317                           
 10318                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10319  1C6E  0022               	movlb	2	; select bank2
 10320  1C6F  018C               	clrf	12	;volatile
 10321                           
 10322                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10323  1C70  3002               	movlw	2
 10324  1C71  008D               	movwf	13	;volatile
 10325                           
 10326                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10327  1C72  018E               	clrf	14	;volatile
 10328                           
 10329                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10330  1C73  3022               	movlw	34
 10331  1C74  0023               	movlb	3	; select bank3
 10332  1C75  008C               	movwf	12	;volatile
 10333                           
 10334                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10335  1C76  018D               	clrf	13	;volatile
 10336                           
 10337                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10338  1C77  018E               	clrf	14	;volatile
 10339                           
 10340                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10341  1C78  3077               	movlw	119
 10342  1C79  0020               	movlb	0	; select bank0
 10343  1C7A  008C               	movwf	12	;volatile
 10344                           
 10345                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10346  1C7B  3007               	movlw	7
 10347  1C7C  008D               	movwf	13	;volatile
 10348                           
 10349                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10350  1C7D  300C               	movlw	12
 10351  1C7E  008E               	movwf	14	;volatile
 10352                           
 10353                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10354  1C7F  0024               	movlb	4	; select bank4
 10355  1C80  018D               	clrf	13	;volatile
 10356  1C81  0008               	return
 10357  1C82                     __end_of_IO_Set:	
 10358                           
 10359                           	psect	text59
 10360  1946                     __ptext59:	
 10361 ;; *************** function _IOC_Set *****************
 10362 ;; Defined at:
 10363 ;;		line 379 in file "../src/MCU_B1.c"
 10364 ;; Parameters:    Size  Location     Type
 10365 ;;		None
 10366 ;; Auto vars:     Size  Location     Type
 10367 ;;		None
 10368 ;; Return value:  Size  Location     Type
 10369 ;;		None               void
 10370 ;; Registers used:
 10371 ;;		wreg, status,2
 10372 ;; Tracked objects:
 10373 ;;		On entry : 0/0
 10374 ;;		On exit  : 0/0
 10375 ;;		Unchanged: 0/0
 10376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;Total ram usage:        0 bytes
 10382 ;; Hardware stack levels used:    1
 10383 ;; Hardware stack levels required when called:    5
 10384 ;; This function calls:
 10385 ;;		Nothing
 10386 ;; This function is called by:
 10387 ;;		_Mcu_Initialization
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391                           
 10392                           ;psect for function _IOC_Set
 10393  1946                     _IOC_Set:	
 10394                           
 10395                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10396                           
 10397                           ;incstack = 0
 10398                           ; Regs used in _IOC_Set: [wreg+status,2]
 10399  1946  3004               	movlw	4
 10400  1947  0027               	movlb	7	; select bank7
 10401  1948  0094               	movwf	20	;volatile
 10402                           
 10403                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10404  1949  3004               	movlw	4
 10405  194A  0095               	movwf	21	;volatile
 10406                           
 10407                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10408  194B  0196               	clrf	22	;volatile
 10409                           
 10410                           ;MCU_B1.c: 386: IOCIE = 1;
 10411  194C  158B               	bsf	11,3	;volatile
 10412                           
 10413                           ;MCU_B1.c: 387: IOCIF = 0;
 10414  194D  100B               	bcf	11,0	;volatile
 10415                           
 10416                           ;MCU_B1.c: 388: PEIE = 1;
 10417  194E  170B               	bsf	11,6	;volatile
 10418                           
 10419                           ;MCU_B1.c: 389: GIE = 1;
 10420  194F  178B               	bsf	11,7	;volatile
 10421  1950  0008               	return
 10422  1951                     __end_of_IOC_Set:	
 10423                           
 10424                           	psect	text60
 10425  18BF                     __ptext60:	
 10426 ;; *************** function _Fosc_Set *****************
 10427 ;; Defined at:
 10428 ;;		line 56 in file "../src/MCU_B1.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;		None
 10431 ;; Auto vars:     Size  Location     Type
 10432 ;;		None
 10433 ;; Return value:  Size  Location     Type
 10434 ;;		None               void
 10435 ;; Registers used:
 10436 ;;		wreg
 10437 ;; Tracked objects:
 10438 ;;		On entry : 0/0
 10439 ;;		On exit  : 0/0
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;Total ram usage:        0 bytes
 10447 ;; Hardware stack levels used:    1
 10448 ;; Hardware stack levels required when called:    5
 10449 ;; This function calls:
 10450 ;;		Nothing
 10451 ;; This function is called by:
 10452 ;;		_Mcu_Initialization
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           
 10457                           ;psect for function _Fosc_Set
 10458  18BF                     _Fosc_Set:	
 10459                           
 10460                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10461                           
 10462                           ;incstack = 0
 10463                           ; Regs used in _Fosc_Set: [wreg]
 10464  18BF  3078               	movlw	120
 10465  18C0  0021               	movlb	1	; select bank1
 10466  18C1  0099               	movwf	25	;volatile
 10467  18C2  0008               	return
 10468  18C3                     __end_of_Fosc_Set:	
 10469                           
 10470                           	psect	text61
 10471  18EA                     __ptext61:	
 10472 ;; *************** function _ADC_Set *****************
 10473 ;; Defined at:
 10474 ;;		line 425 in file "../src/MCU_B1.c"
 10475 ;; Parameters:    Size  Location     Type
 10476 ;;		None
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;		None
 10479 ;; Return value:  Size  Location     Type
 10480 ;;		None               void
 10481 ;; Registers used:
 10482 ;;		wreg
 10483 ;; Tracked objects:
 10484 ;;		On entry : 0/0
 10485 ;;		On exit  : 0/0
 10486 ;;		Unchanged: 0/0
 10487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;Total ram usage:        0 bytes
 10493 ;; Hardware stack levels used:    1
 10494 ;; Hardware stack levels required when called:    5
 10495 ;; This function calls:
 10496 ;;		Nothing
 10497 ;; This function is called by:
 10498 ;;		_Mcu_Initialization
 10499 ;; This function uses a non-reentrant model
 10500 ;;
 10501                           
 10502                           
 10503                           ;psect for function _ADC_Set
 10504  18EA                     _ADC_Set:	
 10505                           
 10506                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10507                           
 10508                           ;incstack = 0
 10509                           ; Regs used in _ADC_Set: [wreg]
 10510  18EA  30F3               	movlw	243
 10511  18EB  0021               	movlb	1	; select bank1
 10512  18EC  009E               	movwf	30	;volatile
 10513                           
 10514                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10515  18ED  30C1               	movlw	193
 10516  18EE  0022               	movlb	2	; select bank2
 10517  18EF  0097               	movwf	23	;volatile
 10518  18F0  0008               	return
 10519  18F1                     __end_of_ADC_Set:	
 10520                           
 10521                           	psect	text62
 10522  0052                     __ptext62:	
 10523 ;; *************** function _Load_Main *****************
 10524 ;; Defined at:
 10525 ;;		line 39 in file "../src/OverLoad_B1.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;		None
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;  i               2   17[BANK0 ] int 
 10530 ;;  LightsCount     1   16[BANK0 ] unsigned char 
 10531 ;;  Load_RunStat    1   15[BANK0 ] unsigned char 
 10532 ;;  ErrorCountVa    1   14[BANK0 ] unsigned char 
 10533 ;;  error           1   11[BANK0 ] unsigned char 
 10534 ;; Return value:  Size  Location     Type
 10535 ;;		None               void
 10536 ;; Registers used:
 10537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;Total ram usage:       10 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    6
 10550 ;; This function calls:
 10551 ;;		___lwdiv
 10552 ;;		___wmul
 10553 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10554 ;;		_getDimmer_LoadGO
 10555 ;;		_getDimmer_Load_Status
 10556 ;;		_getMain_All_Error_Status
 10557 ;;		_getMain_All_LightsStatus
 10558 ;;		_getMain_Lights_Count
 10559 ;;		_setLoad_AH_AL_Restore
 10560 ;; This function is called by:
 10561 ;;		_main
 10562 ;; This function uses a non-reentrant model
 10563 ;;
 10564                           
 10565                           
 10566                           ;psect for function _Load_Main
 10567  0052                     _Load_Main:	
 10568                           
 10569                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10570                           
 10571                           ;incstack = 0
 10572                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10573  0052  3000               	movlw	0
 10574  0053  319F  27CD  3180   	fcall	_getMain_All_Error_Status
 10575  0056  0020               	movlb	0	; select bank0
 10576  0057  00A9               	movwf	??_Load_Main
 10577  0058  0829               	movf	??_Load_Main,w
 10578  0059  00AB               	movwf	Load_Main@error
 10579                           
 10580                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10581  005A  01AF               	clrf	Load_Main@Load_RunStatus
 10582  005B  01AE               	clrf	Load_Main@ErrorCountValue
 10583  005C  01B0               	clrf	Load_Main@LightsCount
 10584                           
 10585                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10586  005D  0022               	movlb	2	; select bank2
 10587  005E  1C40               	btfss	_Load^(0+256),0
 10588  005F  29FE               	goto	l1604
 10589                           
 10590                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10591  0060  319A  22D6  3180   	fcall	_getMain_All_LightsStatus
 10592  0063  3800               	iorlw	0
 10593  0064  1D03               	skipz
 10594  0065  2868               	goto	l10344
 10595                           
 10596                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10597  0066  0022               	movlb	2	; select bank2
 10598  0067  2889               	goto	l10362
 10599  0068                     l10344:	
 10600                           ;OverLoad_B1.c: 46: } else {
 10601                           
 10602                           
 10603                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10604  0068  0020               	movlb	0	; select bank0
 10605  0069  08AB               	movf	Load_Main@error,f
 10606  006A  1D03               	skipz
 10607  006B  2886               	goto	l1607
 10608  006C  319D  25F0  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10609  006F  3800               	iorlw	0
 10610  0070  1D03               	skipz
 10611  0071  2886               	goto	l1607
 10612                           
 10613                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10614  0072  0022               	movlb	2	; select bank2
 10615  0073  14C0               	bsf	_Load^(0+256),1
 10616                           
 10617                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10618  0074  3199  2109  3180   	fcall	_getDimmer_LoadGO
 10619  0077  3A01               	xorlw	1
 10620  0078  1D03               	skipz
 10621  0079  2881               	goto	l1608
 10622                           
 10623                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10624  007A  0022               	movlb	2	; select bank2
 10625  007B  1DC0               	btfss	_Load^(0+256),3
 10626  007C  1BC0               	btfsc	_Load^(0+256),7
 10627  007D  288A               	goto	l1606
 10628                           
 10629                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10630  007E  15C0               	bsf	_Load^(0+256),3
 10631                           
 10632                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10633  007F  01E5               	clrf	(_Load^(0+256)+37)
 10634                           
 10635                           ;OverLoad_B1.c: 56: }
 10636                           ;OverLoad_B1.c: 57: } else {
 10637  0080  288A               	goto	l1606
 10638  0081                     l1608:	
 10639                           
 10640                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10641  0081  0022               	movlb	2	; select bank2
 10642  0082  1FC0               	btfss	_Load^(0+256),7
 10643  0083  288A               	goto	l1606
 10644                           
 10645                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10646  0084  13C0               	bcf	_Load^(0+256),7
 10647                           
 10648                           ;OverLoad_B1.c: 60: }
 10649                           ;OverLoad_B1.c: 61: }
 10650                           ;OverLoad_B1.c: 62: } else {
 10651  0085  288A               	goto	l1606
 10652  0086                     l1607:	
 10653                           
 10654                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10655  0086  0022               	movlb	2	; select bank2
 10656  0087  1CC0               	btfss	_Load^(0+256),1
 10657  0088  288A               	goto	l1606
 10658  0089                     l10362:	
 10659                           
 10660                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10661  0089  10C0               	bcf	_Load^(0+256),1
 10662  008A                     l1606:	
 10663                           
 10664                           ;OverLoad_B1.c: 65: }
 10665                           ;OverLoad_B1.c: 66: }
 10666                           ;OverLoad_B1.c: 88: }
 10667                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10668  008A  1CC0               	btfss	_Load^(0+256),1
 10669  008B  29DA               	goto	l1614
 10670                           
 10671                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10672  008C  1540               	bsf	_Load^(0+256),2
 10673                           
 10674                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10675  008D  1E40               	btfss	_Load^(0+256),4
 10676  008E  29D8               	goto	l1615
 10677                           
 10678                           ;OverLoad_B1.c: 95: Load.Time++;
 10679  008F  3001               	movlw	1
 10680  0090  07C1               	addwf	(_Load^(0+256)+1),f
 10681  0091  3000               	movlw	0
 10682  0092  3DC2               	addwfc	((_Load+1)^(0+256)+1),f
 10683                           
 10684                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10685  0093  3000               	movlw	0
 10686  0094  0242               	subwf	((_Load+1)^(0+256)+1),w
 10687  0095  3002               	movlw	2
 10688  0096  1903               	skipnz
 10689  0097  0241               	subwf	(_Load^(0+256)+1),w
 10690  0098  1C03               	skipc
 10691  0099  0008               	return
 10692                           
 10693                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10694  009A  01C1               	clrf	(_Load^(0+256)+1)
 10695  009B  01C2               	clrf	((_Load+1)^(0+256)+1)
 10696                           
 10697                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10698  009C  1240               	bcf	_Load^(0+256),4
 10699                           
 10700                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10701  009D  3001               	movlw	1
 10702  009E  0020               	movlb	0	; select bank0
 10703  009F  00B1               	movwf	Load_Main@i
 10704  00A0  3000               	movlw	0
 10705  00A1  00B2               	movwf	Load_Main@i+1
 10706  00A2  0832               	movf	Load_Main@i+1,w
 10707  00A3  3A80               	xorlw	128
 10708  00A4  00A9               	movwf	??_Load_Main
 10709  00A5  3080               	movlw	128
 10710  00A6  0229               	subwf	??_Load_Main,w
 10711  00A7  1D03               	skipz
 10712  00A8  28AB               	goto	u12515
 10713  00A9  3004               	movlw	4
 10714  00AA  0231               	subwf	Load_Main@i,w
 10715  00AB                     u12515:	
 10716  00AB  1803               	btfsc	3,0
 10717  00AC  28DF               	goto	l10384
 10718  00AD                     l10378:	
 10719                           
 10720                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10721  00AD  0020               	movlb	0	; select bank0
 10722  00AE  3531               	lslf	Load_Main@i,w
 10723  00AF  3E4B               	addlw	(_Load+11)& (0+255)
 10724  00B0  0086               	movwf	6
 10725  00B1  3001               	movlw	1	; select bank2/3
 10726  00B2  0087               	movwf	7
 10727  00B3  3F40               	moviw [0]fsr1
 10728  00B4  00A9               	movwf	??_Load_Main
 10729  00B5  3F41               	moviw [1]fsr1
 10730  00B6  00AA               	movwf	??_Load_Main+1
 10731  00B7  0829               	movf	??_Load_Main,w
 10732  00B8  0022               	movlb	2	; select bank2
 10733  00B9  07C5               	addwf	(_Load^(0+256)+5),f
 10734  00BA  0020               	movlb	0	; select bank0
 10735  00BB  082A               	movf	??_Load_Main+1,w
 10736  00BC  0022               	movlb	2	; select bank2
 10737  00BD  3DC6               	addwfc	((_Load+1)^(0+256)+5),f
 10738                           
 10739                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10740  00BE  0020               	movlb	0	; select bank0
 10741  00BF  3531               	lslf	Load_Main@i,w
 10742  00C0  3E55               	addlw	(_Load+21)& (0+255)
 10743  00C1  0086               	movwf	6
 10744  00C2  3001               	movlw	1	; select bank2/3
 10745  00C3  0087               	movwf	7
 10746  00C4  3F40               	moviw [0]fsr1
 10747  00C5  00A9               	movwf	??_Load_Main
 10748  00C6  3F41               	moviw [1]fsr1
 10749  00C7  00AA               	movwf	??_Load_Main+1
 10750  00C8  0829               	movf	??_Load_Main,w
 10751  00C9  0022               	movlb	2	; select bank2
 10752  00CA  07C7               	addwf	(_Load^(0+256)+7),f
 10753  00CB  0020               	movlb	0	; select bank0
 10754  00CC  082A               	movf	??_Load_Main+1,w
 10755  00CD  0022               	movlb	2	; select bank2
 10756  00CE  3DC8               	addwfc	((_Load+1)^(0+256)+7),f
 10757  00CF  3001               	movlw	1
 10758  00D0  0020               	movlb	0	; select bank0
 10759  00D1  07B1               	addwf	Load_Main@i,f
 10760  00D2  3000               	movlw	0
 10761  00D3  3DB2               	addwfc	Load_Main@i+1,f
 10762  00D4  0832               	movf	Load_Main@i+1,w
 10763  00D5  3A80               	xorlw	128
 10764  00D6  00A9               	movwf	??_Load_Main
 10765  00D7  3080               	movlw	128
 10766  00D8  0229               	subwf	??_Load_Main,w
 10767  00D9  1D03               	skipz
 10768  00DA  28DD               	goto	u12525
 10769  00DB  3004               	movlw	4
 10770  00DC  0231               	subwf	Load_Main@i,w
 10771  00DD                     u12525:	
 10772  00DD  1C03               	skipc
 10773  00DE  28AD               	goto	l10378
 10774  00DF                     l10384:	
 10775                           
 10776                           ;OverLoad_B1.c: 103: }
 10777                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10778  00DF  3003               	movlw	3
 10779  00E0  0020               	movlb	0	; select bank0
 10780  00E1  00A1               	movwf	___lwdiv@divisor
 10781  00E2  3000               	movlw	0
 10782  00E3  00A2               	movwf	___lwdiv@divisor+1
 10783  00E4  0022               	movlb	2	; select bank2
 10784  00E5  0846               	movf	((_Load+1)^(0+256)+5),w
 10785  00E6  0020               	movlb	0	; select bank0
 10786  00E7  01A4               	clrf	___lwdiv@dividend+1
 10787  00E8  07A4               	addwf	___lwdiv@dividend+1,f
 10788  00E9  0022               	movlb	2	; select bank2
 10789  00EA  0845               	movf	(_Load^(0+256)+5),w
 10790  00EB  0020               	movlb	0	; select bank0
 10791  00EC  01A3               	clrf	___lwdiv@dividend
 10792  00ED  07A3               	addwf	___lwdiv@dividend,f
 10793  00EE  3190  2047  3180   	fcall	___lwdiv
 10794  00F1  0020               	movlb	0	; select bank0
 10795  00F2  0822               	movf	?___lwdiv+1,w
 10796  00F3  0022               	movlb	2	; select bank2
 10797  00F4  01C6               	clrf	((_Load+1)^(0+256)+5)
 10798  00F5  07C6               	addwf	((_Load+1)^(0+256)+5),f
 10799  00F6  0020               	movlb	0	; select bank0
 10800  00F7  0821               	movf	?___lwdiv,w
 10801  00F8  0022               	movlb	2	; select bank2
 10802  00F9  01C5               	clrf	(_Load^(0+256)+5)
 10803  00FA  07C5               	addwf	(_Load^(0+256)+5),f
 10804                           
 10805                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10806  00FB  3003               	movlw	3
 10807  00FC  0020               	movlb	0	; select bank0
 10808  00FD  00A1               	movwf	___lwdiv@divisor
 10809  00FE  3000               	movlw	0
 10810  00FF  00A2               	movwf	___lwdiv@divisor+1
 10811  0100  0022               	movlb	2	; select bank2
 10812  0101  0848               	movf	((_Load+1)^(0+256)+7),w
 10813  0102  0020               	movlb	0	; select bank0
 10814  0103  01A4               	clrf	___lwdiv@dividend+1
 10815  0104  07A4               	addwf	___lwdiv@dividend+1,f
 10816  0105  0022               	movlb	2	; select bank2
 10817  0106  0847               	movf	(_Load^(0+256)+7),w
 10818  0107  0020               	movlb	0	; select bank0
 10819  0108  01A3               	clrf	___lwdiv@dividend
 10820  0109  07A3               	addwf	___lwdiv@dividend,f
 10821  010A  3190  2047  3180   	fcall	___lwdiv
 10822  010D  0020               	movlb	0	; select bank0
 10823  010E  0822               	movf	?___lwdiv+1,w
 10824  010F  0022               	movlb	2	; select bank2
 10825  0110  01C8               	clrf	((_Load+1)^(0+256)+7)
 10826  0111  07C8               	addwf	((_Load+1)^(0+256)+7),f
 10827  0112  0020               	movlb	0	; select bank0
 10828  0113  0821               	movf	?___lwdiv,w
 10829  0114  0022               	movlb	2	; select bank2
 10830  0115  01C7               	clrf	(_Load^(0+256)+7)
 10831  0116  07C7               	addwf	(_Load^(0+256)+7),f
 10832                           
 10833                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10834  0117  319C  249D  3180   	fcall	_setLoad_AH_AL_Restore
 10835                           
 10836                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10837  011A  0022               	movlb	2	; select bank2
 10838  011B  0848               	movf	((_Load+1)^(0+256)+7),w
 10839  011C  0246               	subwf	((_Load+1)^(0+256)+5),w
 10840  011D  1D03               	skipz
 10841  011E  2921               	goto	u12535
 10842  011F  0847               	movf	(_Load^(0+256)+7),w
 10843  0120  0245               	subwf	(_Load^(0+256)+5),w
 10844  0121                     u12535:	
 10845  0121  1C03               	skipc
 10846  0122  0008               	return
 10847                           
 10848                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10849  0123  3005               	movlw	5
 10850  0124  3E40               	addlw	_Load& (0+255)
 10851  0125  0086               	movwf	6
 10852  0126  3001               	movlw	1	; select bank2/3
 10853  0127  0087               	movwf	7
 10854  0128  0947               	comf	(_Load^(0+256)+7),w
 10855  0129  0020               	movlb	0	; select bank0
 10856  012A  00A9               	movwf	??_Load_Main
 10857  012B  0022               	movlb	2	; select bank2
 10858  012C  0948               	comf	((_Load+1)^(0+256)+7),w
 10859  012D  0020               	movlb	0	; select bank0
 10860  012E  00AA               	movwf	??_Load_Main+1
 10861  012F  0AA9               	incf	??_Load_Main,f
 10862  0130  1903               	skipnz
 10863  0131  0AAA               	incf	??_Load_Main+1,f
 10864  0132  3F40               	moviw [0]fsr1
 10865  0133  0729               	addwf	??_Load_Main,w
 10866  0134  0022               	movlb	2	; select bank2
 10867  0135  00DF               	movwf	(_Load^(0+256)+31)
 10868  0136  3F41               	moviw [1]fsr1
 10869  0137  0020               	movlb	0	; select bank0
 10870  0138  3D2A               	addwfc	??_Load_Main+1,w
 10871  0139  0022               	movlb	2	; select bank2
 10872  013A  00E0               	movwf	(_Load^(0+256)+32)
 10873                           
 10874                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10875  013B  01C5               	clrf	(_Load^(0+256)+5)
 10876  013C  01C6               	clrf	((_Load+1)^(0+256)+5)
 10877                           
 10878                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10879  013D  01C7               	clrf	(_Load^(0+256)+7)
 10880  013E  01C8               	clrf	((_Load+1)^(0+256)+7)
 10881                           
 10882                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10883  013F  1DC0               	btfss	_Load^(0+256),3
 10884  0140  299A               	goto	l10424
 10885                           
 10886                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10887  0141  3002               	movlw	2
 10888  0142  0265               	subwf	(_Load^(0+256)+37),w
 10889  0143  1803               	skipnc
 10890  0144  299A               	goto	l10424
 10891                           
 10892                           ;OverLoad_B1.c: 115: Load.Count++;
 10893  0145  3001               	movlw	1
 10894  0146  0020               	movlb	0	; select bank0
 10895  0147  00A9               	movwf	??_Load_Main
 10896  0148  0829               	movf	??_Load_Main,w
 10897  0149  0022               	movlb	2	; select bank2
 10898  014A  07E5               	addwf	(_Load^(0+256)+37),f
 10899                           
 10900                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10901  014B  3199  2111  3180   	fcall	_getDimmer_Load_Status
 10902  014E  0020               	movlb	0	; select bank0
 10903  014F  00A9               	movwf	??_Load_Main
 10904  0150  0829               	movf	??_Load_Main,w
 10905  0151  00AF               	movwf	Load_Main@Load_RunStatus
 10906                           
 10907                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10908  0152  319A  227A  3180   	fcall	_getMain_Lights_Count
 10909  0155  0020               	movlb	0	; select bank0
 10910  0156  00A9               	movwf	??_Load_Main
 10911  0157  0829               	movf	??_Load_Main,w
 10912  0158  00B0               	movwf	Load_Main@LightsCount
 10913                           
 10914                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10915  0159  0022               	movlb	2	; select bank2
 10916  015A  0865               	movf	(_Load^(0+256)+37),w
 10917  015B  3A01               	xorlw	1
 10918  015C  1D03               	skipz
 10919  015D  2962               	goto	l10410
 10920                           
 10921                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*80);
 10922  015E  3040               	movlw	64
 10923  015F  00E3               	movwf	(_Load^(0+256)+35)
 10924  0160  3006               	movlw	6
 10925  0161  296F               	goto	L7
 10926  0162                     l10410:	
 10927                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10928                           
 10929  0162  0865               	movf	(_Load^(0+256)+37),w
 10930  0163  3A02               	xorlw	2
 10931  0164  1D03               	skipz
 10932  0165  299A               	goto	l10424
 10933                           
 10934                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10935  0166  0020               	movlb	0	; select bank0
 10936  0167  0830               	movf	Load_Main@LightsCount,w
 10937  0168  3A01               	xorlw	1
 10938  0169  1D03               	skipz
 10939  016A  2971               	goto	l10416
 10940                           
 10941                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.1*80);
 10942  016B  3058               	movlw	88
 10943  016C  0022               	movlb	2	; select bank2
 10944  016D  00E3               	movwf	(_Load^(0+256)+35)
 10945  016E  3000               	movlw	0
 10946  016F                     L7:	
 10947  016F  00E4               	movwf	(_Load^(0+256)+36)
 10948                           
 10949                           ;OverLoad_B1.c: 130: } else {
 10950  0170  299A               	goto	l10424
 10951  0171                     l10416:	
 10952                           
 10953                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10954  0171  0020               	movlb	0	; select bank0
 10955  0172  08AF               	movf	Load_Main@Load_RunStatus,f
 10956  0173  1D03               	skipz
 10957  0174  298E               	goto	l10420
 10958                           
 10959                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.1*80) * LightsCount;
 10960  0175  0830               	movf	Load_Main@LightsCount,w
 10961  0176  00A9               	movwf	??_Load_Main
 10962  0177  01AA               	clrf	??_Load_Main+1
 10963  0178  0829               	movf	??_Load_Main,w
 10964  0179  00A1               	movwf	___wmul@multiplier
 10965  017A  082A               	movf	??_Load_Main+1,w
 10966  017B  00A2               	movwf	___wmul@multiplier+1
 10967  017C  3058               	movlw	88
 10968  017D  00A3               	movwf	___wmul@multiplicand
 10969  017E  3000               	movlw	0
 10970  017F  00A4               	movwf	___wmul@multiplicand+1
 10971  0180  319C  24F3  3180   	fcall	___wmul
 10972  0183  0020               	movlb	0	; select bank0
 10973  0184  0822               	movf	?___wmul+1,w
 10974  0185  0022               	movlb	2	; select bank2
 10975  0186  01E4               	clrf	((_Load+1)^(0+256)+35)
 10976  0187  07E4               	addwf	((_Load+1)^(0+256)+35),f
 10977  0188  0020               	movlb	0	; select bank0
 10978  0189  0821               	movf	?___wmul,w
 10979  018A  0022               	movlb	2	; select bank2
 10980  018B  01E3               	clrf	(_Load^(0+256)+35)
 10981  018C  07E3               	addwf	(_Load^(0+256)+35),f
 10982                           
 10983                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10984  018D  299A               	goto	l10424
 10985  018E                     l10420:	
 10986  018E  0020               	movlb	0	; select bank0
 10987  018F  082F               	movf	Load_Main@Load_RunStatus,w
 10988  0190  3A01               	xorlw	1
 10989  0191  1D03               	skipz
 10990  0192  299A               	goto	l10424
 10991                           
 10992                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.1*80) + Load.TotalLoad;
 10993  0193  0022               	movlb	2	; select bank2
 10994  0194  0849               	movf	(_Load^(0+256)+9),w
 10995  0195  3E58               	addlw	88
 10996  0196  00E3               	movwf	(_Load^(0+256)+35)
 10997  0197  3000               	movlw	0
 10998  0198  3D4A               	addwfc	((_Load+1)^(0+256)+9),w
 10999  0199  00E4               	movwf	((_Load+1)^(0+256)+35)
 11000  019A                     l10424:	
 11001                           
 11002                           ;OverLoad_B1.c: 135: }
 11003                           ;OverLoad_B1.c: 136: }
 11004                           ;OverLoad_B1.c: 137: }
 11005                           ;OverLoad_B1.c: 138: }
 11006                           ;OverLoad_B1.c: 139: }
 11007                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 11008  019A  0022               	movlb	2	; select bank2
 11009  019B  0864               	movf	((_Load+1)^(0+256)+35),w
 11010  019C  0260               	subwf	((_Load+1)^(0+256)+31),w
 11011  019D  1D03               	skipz
 11012  019E  29A1               	goto	u12615
 11013  019F  0863               	movf	(_Load^(0+256)+35),w
 11014  01A0  025F               	subwf	(_Load^(0+256)+31),w
 11015  01A1                     u12615:	
 11016  01A1  1C03               	skipc
 11017  01A2  29C0               	goto	l10440
 11018                           
 11019                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11020  01A3  0020               	movlb	0	; select bank0
 11021  01A4  0830               	movf	Load_Main@LightsCount,w
 11022  01A5  3A01               	xorlw	1
 11023  01A6  1903               	skipnz
 11024  01A7  29AA               	goto	l10430
 11025  01A8  3003               	movlw	3
 11026  01A9  29AB               	goto	L8
 11027  01AA                     l10430:	
 11028  01AA  3002               	movlw	2
 11029  01AB                     L8:	
 11030  01AB  00AC               	movwf	_Load_Main$3679
 11031  01AC  3000               	movlw	0
 11032  01AD  00AD               	movwf	_Load_Main$3679+1
 11033  01AE  082C               	movf	_Load_Main$3679,w
 11034  01AF  00A9               	movwf	??_Load_Main
 11035  01B0  0829               	movf	??_Load_Main,w
 11036  01B1  00AE               	movwf	Load_Main@ErrorCountValue
 11037                           
 11038                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 11039  01B2  3001               	movlw	1
 11040  01B3  00A9               	movwf	??_Load_Main
 11041  01B4  0829               	movf	??_Load_Main,w
 11042  01B5  0022               	movlb	2	; select bank2
 11043  01B6  07E6               	addwf	(_Load^(0+256)+38),f
 11044                           
 11045                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 11046  01B7  0866               	movf	(_Load^(0+256)+38),w
 11047  01B8  0020               	movlb	0	; select bank0
 11048  01B9  022E               	subwf	Load_Main@ErrorCountValue,w
 11049  01BA  1803               	skipnc
 11050  01BB  0008               	return
 11051                           
 11052                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 11053  01BC  0022               	movlb	2	; select bank2
 11054  01BD  01E6               	clrf	(_Load^(0+256)+38)
 11055                           
 11056                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 11057  01BE  16C0               	bsf	_Load^(0+256),5
 11058                           
 11059                           ;OverLoad_B1.c: 168: }
 11060                           ;OverLoad_B1.c: 169: } else {
 11061  01BF  0008               	return
 11062  01C0                     l10440:	
 11063                           
 11064                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 11065  01C0  01E6               	clrf	(_Load^(0+256)+38)
 11066                           
 11067                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 11068  01C1  1DC0               	btfss	_Load^(0+256),3
 11069  01C2  0008               	return
 11070                           
 11071                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 11072  01C3  3001               	movlw	1
 11073  01C4  0020               	movlb	0	; select bank0
 11074  01C5  00A9               	movwf	??_Load_Main
 11075  01C6  0829               	movf	??_Load_Main,w
 11076  01C7  0022               	movlb	2	; select bank2
 11077  01C8  07E7               	addwf	(_Load^(0+256)+39),f
 11078                           
 11079                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 11080  01C9  3003               	movlw	3
 11081  01CA  0267               	subwf	(_Load^(0+256)+39),w
 11082  01CB  1C03               	skipc
 11083  01CC  0008               	return
 11084                           
 11085                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 11086  01CD  01E7               	clrf	(_Load^(0+256)+39)
 11087                           
 11088                           ;OverLoad_B1.c: 175: Load.OK = 1;
 11089  01CE  17C0               	bsf	_Load^(0+256),7
 11090                           
 11091                           ;OverLoad_B1.c: 176: Load.Run = 0;
 11092  01CF  11C0               	bcf	_Load^(0+256),3
 11093                           
 11094                           ;OverLoad_B1.c: 177: Load.Count = 0;
 11095  01D0  01E5               	clrf	(_Load^(0+256)+37)
 11096                           
 11097                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 11098  01D1  0860               	movf	((_Load+1)^(0+256)+31),w
 11099  01D2  01CA               	clrf	((_Load+1)^(0+256)+9)
 11100  01D3  07CA               	addwf	((_Load+1)^(0+256)+9),f
 11101  01D4  085F               	movf	(_Load^(0+256)+31),w
 11102  01D5  01C9               	clrf	(_Load^(0+256)+9)
 11103  01D6  07C9               	addwf	(_Load^(0+256)+9),f
 11104                           
 11105                           ;OverLoad_B1.c: 182: }
 11106                           ;OverLoad_B1.c: 183: }
 11107                           ;OverLoad_B1.c: 206: }
 11108                           ;OverLoad_B1.c: 207: }
 11109                           ;OverLoad_B1.c: 208: }
 11110                           ;OverLoad_B1.c: 209: } else {
 11111  01D7  0008               	return
 11112  01D8                     l1615:	
 11113                           
 11114                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 11115  01D8  1640               	bsf	_Load^(0+256),4
 11116                           
 11117                           ;OverLoad_B1.c: 211: }
 11118                           ;OverLoad_B1.c: 212: } else {
 11119  01D9  0008               	return
 11120  01DA                     l1614:	
 11121                           
 11122                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 11123  01DA  1D40               	btfss	_Load^(0+256),2
 11124  01DB  29ED               	goto	l10476
 11125                           
 11126                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11127  01DC  1140               	bcf	_Load^(0+256),2
 11128                           
 11129                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11130  01DD  1240               	bcf	_Load^(0+256),4
 11131                           
 11132                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11133  01DE  01C1               	clrf	(_Load^(0+256)+1)
 11134  01DF  01C2               	clrf	((_Load+1)^(0+256)+1)
 11135                           
 11136                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11137  01E0  319C  249D  3180   	fcall	_setLoad_AH_AL_Restore
 11138                           
 11139                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11140  01E3  0022               	movlb	2	; select bank2
 11141  01E4  01E6               	clrf	(_Load^(0+256)+38)
 11142                           
 11143                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11144  01E5  01E7               	clrf	(_Load^(0+256)+39)
 11145                           
 11146                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11147  01E6  01C5               	clrf	(_Load^(0+256)+5)
 11148  01E7  01C6               	clrf	((_Load+1)^(0+256)+5)
 11149                           
 11150                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11151  01E8  01C7               	clrf	(_Load^(0+256)+7)
 11152  01E9  01C8               	clrf	((_Load+1)^(0+256)+7)
 11153                           
 11154                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11155  01EA  11C0               	bcf	_Load^(0+256),3
 11156                           
 11157                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11158  01EB  01E5               	clrf	(_Load^(0+256)+37)
 11159                           
 11160                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11161  01EC  13C0               	bcf	_Load^(0+256),7
 11162  01ED                     l10476:	
 11163                           
 11164                           ;OverLoad_B1.c: 255: }
 11165                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11166  01ED  1EC0               	btfss	_Load^(0+256),5
 11167  01EE  0008               	return
 11168                           
 11169                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11170  01EF  3001               	movlw	1
 11171  01F0  07C3               	addwf	(_Load^(0+256)+3),f
 11172  01F1  3000               	movlw	0
 11173  01F2  3DC4               	addwfc	((_Load+1)^(0+256)+3),f
 11174                           
 11175                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11176  01F3  3001               	movlw	1
 11177  01F4  0244               	subwf	((_Load+1)^(0+256)+3),w
 11178  01F5  30F4               	movlw	244
 11179  01F6  1903               	skipnz
 11180  01F7  0243               	subwf	(_Load^(0+256)+3),w
 11181  01F8  1C03               	skipc
 11182  01F9  0008               	return
 11183                           
 11184                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11185  01FA  01C3               	clrf	(_Load^(0+256)+3)
 11186  01FB  01C4               	clrf	((_Load+1)^(0+256)+3)
 11187                           
 11188                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11189  01FC  12C0               	bcf	_Load^(0+256),5
 11190                           
 11191                           ;OverLoad_B1.c: 261: }
 11192                           ;OverLoad_B1.c: 262: }
 11193                           ;OverLoad_B1.c: 263: }
 11194                           ;OverLoad_B1.c: 264: } else {
 11195  01FD  0008               	return
 11196  01FE                     l1604:	
 11197                           
 11198                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11199  01FE  0021               	movlb	1	; select bank1
 11200  01FF  1C2E               	btfss	_myMain^(0+128),0
 11201  0200  0008               	return
 11202                           
 11203                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11204  0201  0022               	movlb	2	; select bank2
 11205  0202  1440               	bsf	_Load^(0+256),0
 11206  0203  0008               	return
 11207  0204                     __end_of_Load_Main:	
 11208                           
 11209                           	psect	text63
 11210  1A7A                     __ptext63:	
 11211 ;; *************** function _getMain_Lights_Count *****************
 11212 ;; Defined at:
 11213 ;;		line 459 in file "../src/main_B1.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;		None
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;  status2         1    3[BANK0 ] unsigned char 
 11218 ;;  status1         1    2[BANK0 ] unsigned char 
 11219 ;;  count           1    1[BANK0 ] unsigned char 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  1    wreg      unsigned char 
 11222 ;; Registers used:
 11223 ;;		wreg, status,2, status,0
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;Total ram usage:        3 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    5
 11236 ;; This function calls:
 11237 ;;		Nothing
 11238 ;; This function is called by:
 11239 ;;		_Load_Main
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           
 11244                           ;psect for function _getMain_Lights_Count
 11245  1A7A                     _getMain_Lights_Count:	
 11246                           
 11247                           ;main_B1.c: 460: char count = 0;
 11248                           
 11249                           ;incstack = 0
 11250                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11251  1A7A  0020               	movlb	0	; select bank0
 11252  1A7B  01A1               	clrf	getMain_Lights_Count@count
 11253                           
 11254                           ;main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11255  1A7C  3000               	movlw	0
 11256  1A7D  0021               	movlb	1	; select bank1
 11257  1A7E  19BB               	btfsc	_DimmerIntr1^(0+128),3
 11258  1A7F  3001               	movlw	1
 11259  1A80  0020               	movlb	0	; select bank0
 11260  1A81  00A2               	movwf	getMain_Lights_Count@status1
 11261                           
 11262                           ;main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11263  1A82  3000               	movlw	0
 11264  1A83  0021               	movlb	1	; select bank1
 11265  1A84  19C7               	btfsc	_DimmerIntr2^(0+128),3
 11266  1A85  3001               	movlw	1
 11267  1A86  0020               	movlb	0	; select bank0
 11268  1A87  00A3               	movwf	getMain_Lights_Count@status2
 11269                           
 11270                           ;main_B1.c: 490: return count = (status1 + status2);
 11271  1A88  0822               	movf	getMain_Lights_Count@status1,w
 11272  1A89  0723               	addwf	getMain_Lights_Count@status2,w
 11273  1A8A  00A1               	movwf	getMain_Lights_Count@count
 11274  1A8B  0008               	return
 11275  1A8C                     __end_of_getMain_Lights_Count:	
 11276                           
 11277                           	psect	text64
 11278  1911                     __ptext64:	
 11279 ;; *************** function _getDimmer_Load_Status *****************
 11280 ;; Defined at:
 11281 ;;		line 1137 in file "../src/Dimmer_B1.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;		None
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;  status          1    1[BANK0 ] unsigned char 
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  1    wreg      unsigned char 
 11288 ;; Registers used:
 11289 ;;		wreg, status,2
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;Total ram usage:        1 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    5
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		_Load_Main
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           
 11310                           ;psect for function _getDimmer_Load_Status
 11311  1911                     _getDimmer_Load_Status:	
 11312                           
 11313                           ;Dimmer_B1.c: 1138: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11314                           
 11315                           ;incstack = 0
 11316                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11317  1911  3000               	movlw	0
 11318  1912  0022               	movlb	2	; select bank2
 11319  1913  192C               	btfsc	_Dimmer^(0+256),2
 11320  1914  3001               	movlw	1
 11321  1915  0020               	movlb	0	; select bank0
 11322  1916  00A1               	movwf	getDimmer_Load_Status@status
 11323                           
 11324                           ;Dimmer_B1.c: 1139: return status;
 11325  1917  0821               	movf	getDimmer_Load_Status@status,w
 11326  1918  0008               	return
 11327  1919                     __end_of_getDimmer_Load_Status:	
 11328                           
 11329                           	psect	text65
 11330  1909                     __ptext65:	
 11331 ;; *************** function _getDimmer_LoadGO *****************
 11332 ;; Defined at:
 11333 ;;		line 1131 in file "../src/Dimmer_B1.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;		None
 11336 ;; Auto vars:     Size  Location     Type
 11337 ;;  loadgo          1    1[BANK0 ] unsigned char 
 11338 ;; Return value:  Size  Location     Type
 11339 ;;                  1    wreg      unsigned char 
 11340 ;; Registers used:
 11341 ;;		wreg, status,2
 11342 ;; Tracked objects:
 11343 ;;		On entry : 0/0
 11344 ;;		On exit  : 0/0
 11345 ;;		Unchanged: 0/0
 11346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11350 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11351 ;;Total ram usage:        1 bytes
 11352 ;; Hardware stack levels used:    1
 11353 ;; Hardware stack levels required when called:    5
 11354 ;; This function calls:
 11355 ;;		Nothing
 11356 ;; This function is called by:
 11357 ;;		_Load_Main
 11358 ;; This function uses a non-reentrant model
 11359 ;;
 11360                           
 11361                           
 11362                           ;psect for function _getDimmer_LoadGO
 11363  1909                     _getDimmer_LoadGO:	
 11364                           
 11365                           ;Dimmer_B1.c: 1132: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11366                           
 11367                           ;incstack = 0
 11368                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11369  1909  3000               	movlw	0
 11370  190A  0022               	movlb	2	; select bank2
 11371  190B  18AC               	btfsc	_Dimmer^(0+256),1
 11372  190C  3001               	movlw	1
 11373  190D  0020               	movlb	0	; select bank0
 11374  190E  00A1               	movwf	getDimmer_LoadGO@loadgo
 11375                           
 11376                           ;Dimmer_B1.c: 1133: return loadgo;
 11377  190F  0821               	movf	getDimmer_LoadGO@loadgo,w
 11378  1910  0008               	return
 11379  1911                     __end_of_getDimmer_LoadGO:	
 11380                           
 11381                           	psect	text66
 11382  1DF0                     __ptext66:	
 11383 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11384 ;; Defined at:
 11385 ;;		line 277 in file "../src/Dimmer_B1.c"
 11386 ;; Parameters:    Size  Location     Type
 11387 ;;		None
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;  status          1    4[BANK0 ] unsigned char 
 11390 ;; Return value:  Size  Location     Type
 11391 ;;                  1    wreg      unsigned char 
 11392 ;; Registers used:
 11393 ;;		wreg, status,2, status,0
 11394 ;; Tracked objects:
 11395 ;;		On entry : 0/0
 11396 ;;		On exit  : 0/0
 11397 ;;		Unchanged: 0/0
 11398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11400 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;Total ram usage:        4 bytes
 11404 ;; Hardware stack levels used:    1
 11405 ;; Hardware stack levels required when called:    5
 11406 ;; This function calls:
 11407 ;;		Nothing
 11408 ;; This function is called by:
 11409 ;;		_Load_Main
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413                           
 11414                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11415  1DF0                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11416                           
 11417                           ;Dimmer_B1.c: 278: char status = 0;
 11418                           
 11419                           ;incstack = 0
 11420                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11421  1DF0  0020               	movlb	0	; select bank0
 11422  1DF1  01A4               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11423                           
 11424                           ;Dimmer_B1.c: 285: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11425  1DF2  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2286
 11426  1DF3  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2286,f
 11427  1DF4  0021               	movlb	1	; select bank1
 11428  1DF5  1E3B               	btfss	_DimmerIntr1^(0+128),4
 11429  1DF6  1A47               	btfsc	_DimmerIntr2^(0+128),4
 11430  1DF7  2DFA               	goto	l7850
 11431  1DF8  0020               	movlb	0	; select bank0
 11432  1DF9  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2286
 11433  1DFA                     l7850:	
 11434  1DFA  0020               	movlb	0	; select bank0
 11435  1DFB  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2286,w
 11436  1DFC  00A1               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11437  1DFD  0821               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11438  1DFE  00A4               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11439                           
 11440                           ;Dimmer_B1.c: 293: if (status == 0) {
 11441  1DFF  08A4               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11442  1E00  1D03               	skipz
 11443  1E01  2E0F               	goto	l7862
 11444                           
 11445                           ;Dimmer_B1.c: 299: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11446  1E02  01A3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2287
 11447  1E03  0AA3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2287,f
 11448  1E04  0021               	movlb	1	; select bank1
 11449  1E05  1F3B               	btfss	_DimmerIntr1^(0+128),6
 11450  1E06  1B47               	btfsc	_DimmerIntr2^(0+128),6
 11451  1E07  2E0A               	goto	l7860
 11452  1E08  0020               	movlb	0	; select bank0
 11453  1E09  01A3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2287
 11454  1E0A                     l7860:	
 11455  1E0A  0020               	movlb	0	; select bank0
 11456  1E0B  0823               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2287,w
 11457  1E0C  00A1               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11458  1E0D  0821               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11459  1E0E  00A4               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11460  1E0F                     l7862:	
 11461                           
 11462                           ;Dimmer_B1.c: 305: }
 11463                           ;Dimmer_B1.c: 307: return status;
 11464  1E0F  0824               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11465  1E10  0008               	return
 11466  1E11                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11467                           
 11468                           	psect	text67
 11469  1CF3                     __ptext67:	
 11470 ;; *************** function ___wmul *****************
 11471 ;; Defined at:
 11472 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;  multiplier      2    1[BANK0 ] unsigned int 
 11475 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;  product         2    5[BANK0 ] unsigned int 
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  2    1[BANK0 ] unsigned int 
 11480 ;; Registers used:
 11481 ;;		wreg, status,2, status,0
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11487 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;Total ram usage:        6 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; Hardware stack levels required when called:    5
 11494 ;; This function calls:
 11495 ;;		Nothing
 11496 ;; This function is called by:
 11497 ;;		_Load_Main
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           
 11502                           ;psect for function ___wmul
 11503  1CF3                     ___wmul:	
 11504                           
 11505                           ;incstack = 0
 11506                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11507  1CF3  0020               	movlb	0	; select bank0
 11508  1CF4  01A5               	clrf	___wmul@product
 11509  1CF5  01A6               	clrf	___wmul@product+1
 11510  1CF6                     l8528:	
 11511  1CF6  1C21               	btfss	___wmul@multiplier,0
 11512  1CF7  2CFC               	goto	l3017
 11513  1CF8  0823               	movf	___wmul@multiplicand,w
 11514  1CF9  07A5               	addwf	___wmul@product,f
 11515  1CFA  0824               	movf	___wmul@multiplicand+1,w
 11516  1CFB  3DA6               	addwfc	___wmul@product+1,f
 11517  1CFC                     l3017:	
 11518  1CFC  3001               	movlw	1
 11519  1CFD                     u9085:	
 11520  1CFD  35A3               	lslf	___wmul@multiplicand,f
 11521  1CFE  0DA4               	rlf	___wmul@multiplicand+1,f
 11522  1CFF  0B89               	decfsz	9,f
 11523  1D00  2CFD               	goto	u9085
 11524  1D01  3001               	movlw	1
 11525  1D02                     u9095:	
 11526  1D02  36A2               	lsrf	___wmul@multiplier+1,f
 11527  1D03  0CA1               	rrf	___wmul@multiplier,f
 11528  1D04  0B89               	decfsz	9,f
 11529  1D05  2D02               	goto	u9095
 11530  1D06  0822               	movf	___wmul@multiplier+1,w
 11531  1D07  0421               	iorwf	___wmul@multiplier,w
 11532  1D08  1D03               	skipz
 11533  1D09  2CF6               	goto	l8528
 11534  1D0A  0826               	movf	___wmul@product+1,w
 11535  1D0B  01A2               	clrf	?___wmul+1
 11536  1D0C  07A2               	addwf	?___wmul+1,f
 11537  1D0D  0825               	movf	___wmul@product,w
 11538  1D0E  01A1               	clrf	?___wmul
 11539  1D0F  07A1               	addwf	?___wmul,f
 11540  1D10  0008               	return
 11541  1D11                     __end_of___wmul:	
 11542                           
 11543                           	psect	text68
 11544  1047                     __ptext68:	
 11545 ;; *************** function ___lwdiv *****************
 11546 ;; Defined at:
 11547 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;  divisor         2    1[BANK0 ] unsigned int 
 11550 ;;  dividend        2    3[BANK0 ] unsigned int 
 11551 ;; Auto vars:     Size  Location     Type
 11552 ;;  quotient        2    6[BANK0 ] unsigned int 
 11553 ;;  counter         1    8[BANK0 ] unsigned char 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  2    1[BANK0 ] unsigned int 
 11556 ;; Registers used:
 11557 ;;		wreg, status,2, status,0
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11563 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11566 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;Total ram usage:        8 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    5
 11570 ;; This function calls:
 11571 ;;		Nothing
 11572 ;; This function is called by:
 11573 ;;		_Load_Main
 11574 ;;		_setRF_Main
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           
 11579                           ;psect for function ___lwdiv
 11580  1047                     ___lwdiv:	
 11581                           
 11582                           ;incstack = 0
 11583                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11584  1047  0020               	movlb	0	; select bank0
 11585  1048  01A6               	clrf	___lwdiv@quotient
 11586  1049  01A7               	clrf	___lwdiv@quotient+1
 11587  104A  0822               	movf	___lwdiv@divisor+1,w
 11588  104B  0421               	iorwf	___lwdiv@divisor,w
 11589  104C  1903               	skipnz
 11590  104D  2877               	goto	l7786
 11591  104E  01A8               	clrf	___lwdiv@counter
 11592  104F  0AA8               	incf	___lwdiv@counter,f
 11593  1050                     l7774:	
 11594  1050  1BA2               	btfsc	___lwdiv@divisor+1,7
 11595  1051  285C               	goto	l7776
 11596  1052  3001               	movlw	1
 11597  1053                     u7635:	
 11598  1053  35A1               	lslf	___lwdiv@divisor,f
 11599  1054  0DA2               	rlf	___lwdiv@divisor+1,f
 11600  1055  0B89               	decfsz	9,f
 11601  1056  2853               	goto	u7635
 11602  1057  3001               	movlw	1
 11603  1058  00A5               	movwf	??___lwdiv
 11604  1059  0825               	movf	??___lwdiv,w
 11605  105A  07A8               	addwf	___lwdiv@counter,f
 11606  105B  2850               	goto	l7774
 11607  105C                     l7776:	
 11608  105C  3001               	movlw	1
 11609  105D                     u7655:	
 11610  105D  35A6               	lslf	___lwdiv@quotient,f
 11611  105E  0DA7               	rlf	___lwdiv@quotient+1,f
 11612  105F  0B89               	decfsz	9,f
 11613  1060  285D               	goto	u7655
 11614  1061  0822               	movf	___lwdiv@divisor+1,w
 11615  1062  0224               	subwf	___lwdiv@dividend+1,w
 11616  1063  1D03               	skipz
 11617  1064  2867               	goto	u7665
 11618  1065  0821               	movf	___lwdiv@divisor,w
 11619  1066  0223               	subwf	___lwdiv@dividend,w
 11620  1067                     u7665:	
 11621  1067  1C03               	skipc
 11622  1068  286E               	goto	l7782
 11623  1069  0821               	movf	___lwdiv@divisor,w
 11624  106A  02A3               	subwf	___lwdiv@dividend,f
 11625  106B  0822               	movf	___lwdiv@divisor+1,w
 11626  106C  3BA4               	subwfb	___lwdiv@dividend+1,f
 11627  106D  1426               	bsf	___lwdiv@quotient,0
 11628  106E                     l7782:	
 11629  106E  3001               	movlw	1
 11630  106F                     u7675:	
 11631  106F  36A2               	lsrf	___lwdiv@divisor+1,f
 11632  1070  0CA1               	rrf	___lwdiv@divisor,f
 11633  1071  0B89               	decfsz	9,f
 11634  1072  286F               	goto	u7675
 11635  1073  3001               	movlw	1
 11636  1074  02A8               	subwf	___lwdiv@counter,f
 11637  1075  1D03               	btfss	3,2
 11638  1076  285C               	goto	l7776
 11639  1077                     l7786:	
 11640  1077  0827               	movf	___lwdiv@quotient+1,w
 11641  1078  01A2               	clrf	?___lwdiv+1
 11642  1079  07A2               	addwf	?___lwdiv+1,f
 11643  107A  0826               	movf	___lwdiv@quotient,w
 11644  107B  01A1               	clrf	?___lwdiv
 11645  107C  07A1               	addwf	?___lwdiv,f
 11646  107D  0008               	return
 11647  107E                     __end_of___lwdiv:	
 11648                           
 11649                           	psect	text69
 11650  18B0                     __ptext69:	
 11651 ;; *************** function _Load_Initialization *****************
 11652 ;; Defined at:
 11653 ;;		line 9 in file "../src/OverLoad_B1.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;		None
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;		None
 11658 ;; Return value:  Size  Location     Type
 11659 ;;		None               void
 11660 ;; Registers used:
 11661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;Total ram usage:        0 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    6
 11674 ;; This function calls:
 11675 ;;		_setLoad_AH_AL_Restore
 11676 ;; This function is called by:
 11677 ;;		_main
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           
 11682                           ;psect for function _Load_Initialization
 11683  18B0                     _Load_Initialization:	
 11684                           
 11685                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11686                           
 11687                           ;incstack = 0
 11688                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11689  18B0  319C  249D         	fcall	_setLoad_AH_AL_Restore
 11690  18B2  0008               	return
 11691  18B3                     __end_of_Load_Initialization:	
 11692                           
 11693                           	psect	text70
 11694  1C9D                     __ptext70:	
 11695 ;; *************** function _setLoad_AH_AL_Restore *****************
 11696 ;; Defined at:
 11697 ;;		line 292 in file "../src/OverLoad_B1.c"
 11698 ;; Parameters:    Size  Location     Type
 11699 ;;		None
 11700 ;; Auto vars:     Size  Location     Type
 11701 ;;  i               1    2[BANK0 ] unsigned char 
 11702 ;; Return value:  Size  Location     Type
 11703 ;;		None               void
 11704 ;; Registers used:
 11705 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11706 ;; Tracked objects:
 11707 ;;		On entry : 0/0
 11708 ;;		On exit  : 0/0
 11709 ;;		Unchanged: 0/0
 11710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11715 ;;Total ram usage:        2 bytes
 11716 ;; Hardware stack levels used:    1
 11717 ;; Hardware stack levels required when called:    5
 11718 ;; This function calls:
 11719 ;;		Nothing
 11720 ;; This function is called by:
 11721 ;;		_Load_Initialization
 11722 ;;		_Load_Main
 11723 ;; This function uses a non-reentrant model
 11724 ;;
 11725                           
 11726                           
 11727                           ;psect for function _setLoad_AH_AL_Restore
 11728  1C9D                     _setLoad_AH_AL_Restore:	
 11729                           
 11730                           ;OverLoad_B1.c: 293: char i;
 11731                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11732                           
 11733                           ;incstack = 0
 11734                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11735  1C9D  0020               	movlb	0	; select bank0
 11736  1C9E  01A2               	clrf	setLoad_AH_AL_Restore@i
 11737  1C9F                     L9:	
 11738  1C9F  3005               	movlw	5
 11739  1CA0  0222               	subwf	setLoad_AH_AL_Restore@i,w
 11740  1CA1  1803               	btfsc	3,0
 11741  1CA2  0008               	return
 11742                           
 11743                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11744  1CA3  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11745  1CA4  3E4B               	addlw	(_Load+11)& (0+255)
 11746  1CA5  0086               	movwf	6
 11747  1CA6  3001               	movlw	1	; select bank2/3
 11748  1CA7  0087               	movwf	7
 11749  1CA8  3000               	movlw	0
 11750  1CA9  3FC0               	movwi [0]fsr1
 11751  1CAA  3FC1               	movwi [1]fsr1
 11752                           
 11753                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11754  1CAB  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11755  1CAC  3E55               	addlw	(_Load+21)& (0+255)
 11756  1CAD  0086               	movwf	6
 11757  1CAE  3001               	movlw	1	; select bank2/3
 11758  1CAF  0087               	movwf	7
 11759  1CB0  30FF               	movlw	255
 11760  1CB1  3FC0               	movwi [0]fsr1
 11761  1CB2  30FF               	movlw	255
 11762  1CB3  3FC1               	movwi [1]fsr1
 11763  1CB4  3001               	movlw	1
 11764  1CB5  00A1               	movwf	??_setLoad_AH_AL_Restore
 11765  1CB6  0821               	movf	??_setLoad_AH_AL_Restore,w
 11766  1CB7  07A2               	addwf	setLoad_AH_AL_Restore@i,f
 11767  1CB8  2C9F               	goto	L9
 11768  1CB9                     __end_of_setLoad_AH_AL_Restore:	
 11769                           
 11770                           	psect	text71
 11771  19A3                     __ptext71:	
 11772 ;; *************** function _LED_Main *****************
 11773 ;; Defined at:
 11774 ;;		line 47 in file "../src/LED_B1.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;		None
 11777 ;; Auto vars:     Size  Location     Type
 11778 ;;		None
 11779 ;; Return value:  Size  Location     Type
 11780 ;;		None               void
 11781 ;; Registers used:
 11782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11783 ;; Tracked objects:
 11784 ;;		On entry : 0/0
 11785 ;;		On exit  : 0/0
 11786 ;;		Unchanged: 0/0
 11787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;Total ram usage:        0 bytes
 11793 ;; Hardware stack levels used:    1
 11794 ;; Hardware stack levels required when called:    7
 11795 ;; This function calls:
 11796 ;;		_setLED_Main
 11797 ;; This function is called by:
 11798 ;;		_main
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802                           
 11803                           ;psect for function _LED_Main
 11804  19A3                     _LED_Main:	
 11805                           
 11806                           ;LED_B1.c: 58: setLED_Main(1);
 11807                           
 11808                           ;incstack = 0
 11809                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11810  19A3  3001               	movlw	1
 11811  19A4  3192  2234  3199   	fcall	_setLED_Main
 11812                           
 11813                           ;LED_B1.c: 61: setLED_Main(2);
 11814  19A7  3002               	movlw	2
 11815  19A8  3192  2234  3199   	fcall	_setLED_Main
 11816                           
 11817                           ;LED_B1.c: 67: setLED_Main(99);
 11818  19AB  3063               	movlw	99
 11819  19AC  3192  2234         	fcall	_setLED_Main
 11820  19AE  0008               	return
 11821  19AF                     __end_of_LED_Main:	
 11822                           
 11823                           	psect	text72
 11824  1234                     __ptext72:	
 11825 ;; *************** function _setLED_Main *****************
 11826 ;; Defined at:
 11827 ;;		line 229 in file "../src/LED_B1.c"
 11828 ;; Parameters:    Size  Location     Type
 11829 ;;  led             1    wreg     unsigned char 
 11830 ;; Auto vars:     Size  Location     Type
 11831 ;;  led             1    5[BANK0 ] unsigned char 
 11832 ;; Return value:  Size  Location     Type
 11833 ;;		None               void
 11834 ;; Registers used:
 11835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11836 ;; Tracked objects:
 11837 ;;		On entry : 0/0
 11838 ;;		On exit  : 0/0
 11839 ;;		Unchanged: 0/0
 11840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;Total ram usage:        3 bytes
 11846 ;; Hardware stack levels used:    1
 11847 ;; Hardware stack levels required when called:    6
 11848 ;; This function calls:
 11849 ;;		_LedPointSelect
 11850 ;; This function is called by:
 11851 ;;		_LED_Main
 11852 ;; This function uses a non-reentrant model
 11853 ;;
 11854                           
 11855                           
 11856                           ;psect for function _setLED_Main
 11857  1234                     _setLED_Main:	
 11858                           
 11859                           ;incstack = 0
 11860                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11861                           ;setLED_Main@led stored from wreg
 11862  1234  0020               	movlb	0	; select bank0
 11863  1235  00A5               	movwf	setLED_Main@led
 11864                           
 11865                           ;LED_B1.c: 230: LedPointSelect(led);
 11866  1236  0825               	movf	setLED_Main@led,w
 11867  1237  319D  254F  3192   	fcall	_LedPointSelect
 11868                           
 11869                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11870  123A  0021               	movlb	1	; select bank1
 11871  123B  0856               	movf	_LED^(0+128),w
 11872  123C  0086               	movwf	6
 11873  123D  3001               	movlw	1	; select bank2/3
 11874  123E  0087               	movwf	7
 11875  123F  1C81               	btfss	1,1
 11876  1240  0008               	return
 11877                           
 11878                           ;LED_B1.c: 232: LED->Time++;
 11879  1241  0A56               	incf	_LED^(0+128),w
 11880  1242  0086               	movwf	6
 11881  1243  3001               	movlw	1	; select bank2/3
 11882  1244  0087               	movwf	7
 11883  1245  3001               	movlw	1
 11884  1246  0781               	addwf	1,f
 11885  1247  3141               	addfsr 1,1
 11886  1248  1803               	skipnc
 11887  1249  0A81               	incf	1,f
 11888                           
 11889                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11890  124A  0A56               	incf	_LED^(0+128),w
 11891  124B  0086               	movwf	6
 11892  124C  3001               	movlw	1	; select bank2/3
 11893  124D  0087               	movwf	7
 11894  124E  3F40               	moviw [0]fsr1
 11895  124F  0020               	movlb	0	; select bank0
 11896  1250  00A3               	movwf	??_setLED_Main
 11897  1251  3F41               	moviw [1]fsr1
 11898  1252  00A4               	movwf	??_setLED_Main+1
 11899  1253  3000               	movlw	0
 11900  1254  0224               	subwf	??_setLED_Main+1,w
 11901  1255  3019               	movlw	25
 11902  1256  1903               	skipnz
 11903  1257  0223               	subwf	??_setLED_Main,w
 11904  1258  1C03               	skipc
 11905  1259  0008               	return
 11906                           
 11907                           ;LED_B1.c: 234: LED->Time = 0;
 11908  125A  0021               	movlb	1	; select bank1
 11909  125B  0A56               	incf	_LED^(0+128),w
 11910  125C  0086               	movwf	6
 11911  125D  3001               	movlw	1	; select bank2/3
 11912  125E  0087               	movwf	7
 11913  125F  3000               	movlw	0
 11914  1260  3FC0               	movwi [0]fsr1
 11915  1261  3FC1               	movwi [1]fsr1
 11916                           
 11917                           ;LED_B1.c: 237: if (led == 1) {
 11918  1262  0020               	movlb	0	; select bank0
 11919  1263  0825               	movf	setLED_Main@led,w
 11920  1264  3A01               	xorlw	1
 11921                           
 11922                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
 11923  1265  3008               	movlw	8
 11924  1266  1903               	btfsc	3,2
 11925  1267  068C               	xorwf	12,f
 11926                           
 11927                           ;LED_B1.c: 239: }
 11928                           ;LED_B1.c: 242: if (led == 2) {
 11929  1268  0825               	movf	setLED_Main@led,w
 11930  1269  3A02               	xorlw	2
 11931  126A  1D03               	skipz
 11932  126B  2A6E               	goto	l1166
 11933                           
 11934                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
 11935  126C  3080               	movlw	128
 11936  126D  068E               	xorwf	14,f
 11937  126E                     l1166:	
 11938                           
 11939                           ;LED_B1.c: 244: }
 11940                           ;LED_B1.c: 252: if (led == 99) {
 11941  126E  0825               	movf	setLED_Main@led,w
 11942  126F  3A63               	xorlw	99
 11943  1270  1D03               	skipz
 11944  1271  0008               	return
 11945                           
 11946                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11947  1272  3020               	movlw	32
 11948  1273  068D               	xorwf	13,f
 11949  1274  0008               	return
 11950  1275                     __end_of_setLED_Main:	
 11951                           
 11952                           	psect	text73
 11953  1997                     __ptext73:	
 11954 ;; *************** function _LED_Initialization *****************
 11955 ;; Defined at:
 11956 ;;		line 31 in file "../src/LED_B1.c"
 11957 ;; Parameters:    Size  Location     Type
 11958 ;;		None
 11959 ;; Auto vars:     Size  Location     Type
 11960 ;;		None
 11961 ;; Return value:  Size  Location     Type
 11962 ;;		None               void
 11963 ;; Registers used:
 11964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11965 ;; Tracked objects:
 11966 ;;		On entry : 0/0
 11967 ;;		On exit  : 0/0
 11968 ;;		Unchanged: 0/0
 11969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;Total ram usage:        0 bytes
 11975 ;; Hardware stack levels used:    1
 11976 ;; Hardware stack levels required when called:    8
 11977 ;; This function calls:
 11978 ;;		_setLED_Initialization
 11979 ;; This function is called by:
 11980 ;;		_main
 11981 ;; This function uses a non-reentrant model
 11982 ;;
 11983                           
 11984                           
 11985                           ;psect for function _LED_Initialization
 11986  1997                     _LED_Initialization:	
 11987                           
 11988                           ;LED_B1.c: 33: setLED_Initialization(1);
 11989                           
 11990                           ;incstack = 0
 11991                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11992  1997  3001               	movlw	1
 11993  1998  319A  2268  3199   	fcall	_setLED_Initialization
 11994                           
 11995                           ;LED_B1.c: 36: setLED_Initialization(2);
 11996  199B  3002               	movlw	2
 11997  199C  319A  2268  3199   	fcall	_setLED_Initialization
 11998                           
 11999                           ;LED_B1.c: 42: setLED_Initialization(99);
 12000  199F  3063               	movlw	99
 12001  19A0  319A  2268         	fcall	_setLED_Initialization
 12002  19A2  0008               	return
 12003  19A3                     __end_of_LED_Initialization:	
 12004                           
 12005                           	psect	text74
 12006  1A68                     __ptext74:	
 12007 ;; *************** function _setLED_Initialization *****************
 12008 ;; Defined at:
 12009 ;;		line 74 in file "../src/LED_B1.c"
 12010 ;; Parameters:    Size  Location     Type
 12011 ;;  led             1    wreg     unsigned char 
 12012 ;; Auto vars:     Size  Location     Type
 12013 ;;  led             1    5[BANK0 ] unsigned char 
 12014 ;; Return value:  Size  Location     Type
 12015 ;;		None               void
 12016 ;; Registers used:
 12017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12018 ;; Tracked objects:
 12019 ;;		On entry : 0/0
 12020 ;;		On exit  : 0/0
 12021 ;;		Unchanged: 0/0
 12022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;Total ram usage:        1 bytes
 12028 ;; Hardware stack levels used:    1
 12029 ;; Hardware stack levels required when called:    7
 12030 ;; This function calls:
 12031 ;;		_LedPointSelect
 12032 ;;		_setLED
 12033 ;; This function is called by:
 12034 ;;		_LED_Initialization
 12035 ;; This function uses a non-reentrant model
 12036 ;;
 12037                           
 12038                           
 12039                           ;psect for function _setLED_Initialization
 12040  1A68                     _setLED_Initialization:	
 12041                           
 12042                           ;incstack = 0
 12043                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12044                           ;setLED_Initialization@led stored from wreg
 12045  1A68  0020               	movlb	0	; select bank0
 12046  1A69  00A5               	movwf	setLED_Initialization@led
 12047                           
 12048                           ;LED_B1.c: 75: LedPointSelect(led);
 12049  1A6A  0825               	movf	setLED_Initialization@led,w
 12050  1A6B  319D  254F  319A   	fcall	_LedPointSelect
 12051                           
 12052                           ;LED_B1.c: 76: LED->Enable = 1;
 12053  1A6E  0021               	movlb	1	; select bank1
 12054  1A6F  0856               	movf	_LED^(0+128),w
 12055  1A70  0086               	movwf	6
 12056  1A71  3001               	movlw	1	; select bank2/3
 12057  1A72  0087               	movwf	7
 12058  1A73  1401               	bsf	1,0
 12059                           
 12060                           ;LED_B1.c: 77: setLED(led, 0);
 12061  1A74  0020               	movlb	0	; select bank0
 12062  1A75  01A3               	clrf	setLED@command
 12063  1A76  0825               	movf	setLED_Initialization@led,w
 12064  1A77  3193  2302         	fcall	_setLED
 12065  1A79  0008               	return
 12066  1A7A                     __end_of_setLED_Initialization:	
 12067                           
 12068                           	psect	text75
 12069  11F3                     __ptext75:	
 12070 ;; *************** function _Flash_Memory_Main *****************
 12071 ;; Defined at:
 12072 ;;		line 974 in file "../src/MCU_B1.c"
 12073 ;; Parameters:    Size  Location     Type
 12074 ;;		None
 12075 ;; Auto vars:     Size  Location     Type
 12076 ;;  key_Status      1    8[BANK0 ] unsigned char 
 12077 ;; Return value:  Size  Location     Type
 12078 ;;		None               void
 12079 ;; Registers used:
 12080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12081 ;; Tracked objects:
 12082 ;;		On entry : 0/0
 12083 ;;		On exit  : 0/0
 12084 ;;		Unchanged: 0/0
 12085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12087 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12089 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12090 ;;Total ram usage:        3 bytes
 12091 ;; Hardware stack levels used:    1
 12092 ;; Hardware stack levels required when called:    8
 12093 ;; This function calls:
 12094 ;;		_Flash_Memory_Modify
 12095 ;;		_getAll_Sw_KeyStatus
 12096 ;;		_getMain_All_LightsStatus
 12097 ;; This function is called by:
 12098 ;;		_main
 12099 ;; This function uses a non-reentrant model
 12100 ;;
 12101                           
 12102                           
 12103                           ;psect for function _Flash_Memory_Main
 12104  11F3                     _Flash_Memory_Main:	
 12105                           
 12106                           ;MCU_B1.c: 975: char key_Status = 0;
 12107                           
 12108                           ;incstack = 0
 12109                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12110  11F3  0020               	movlb	0	; select bank0
 12111  11F4  01A8               	clrf	Flash_Memory_Main@key_Status
 12112                           
 12113                           ;MCU_B1.c: 977: key_Status = getAll_Sw_KeyStatus();
 12114  11F5  319A  2211  3191   	fcall	_getAll_Sw_KeyStatus
 12115  11F8  0020               	movlb	0	; select bank0
 12116  11F9  00A7               	movwf	??_Flash_Memory_Main
 12117  11FA  0827               	movf	??_Flash_Memory_Main,w
 12118  11FB  00A8               	movwf	Flash_Memory_Main@key_Status
 12119                           
 12120                           ;MCU_B1.c: 979: if (Memory.Modify == 1) {
 12121  11FC  0024               	movlb	4	; select bank4
 12122  11FD  1C44               	btfss	(_Memory^(0+512)+36),0
 12123  11FE  0008               	return
 12124                           
 12125                           ;MCU_B1.c: 980: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12126  11FF  0020               	movlb	0	; select bank0
 12127  1200  01A9               	clrf	_Flash_Memory_Main$3300
 12128  1201  319A  22D6  3191   	fcall	_getMain_All_LightsStatus
 12129  1204  3800               	iorlw	0
 12130  1205  1D03               	skipz
 12131  1206  2A0D               	goto	l10308
 12132  1207  0020               	movlb	0	; select bank0
 12133  1208  08A8               	movf	Flash_Memory_Main@key_Status,f
 12134  1209  1D03               	skipz
 12135  120A  2A0D               	goto	l10308
 12136  120B  01A9               	clrf	_Flash_Memory_Main$3300
 12137  120C  0AA9               	incf	_Flash_Memory_Main$3300,f
 12138  120D                     l10308:	
 12139  120D  0020               	movlb	0	; select bank0
 12140  120E  0829               	movf	_Flash_Memory_Main$3300,w
 12141  120F  0024               	movlb	4	; select bank4
 12142  1210  10C4               	bcf	(_Memory^(0+512)+36),1
 12143  1211  1D03               	skipz
 12144  1212  14C4               	bsf	(_Memory^(0+512)+36),1
 12145                           
 12146                           ;MCU_B1.c: 981: if (Memory.GO == 1) {
 12147  1213  1CC4               	btfss	(_Memory^(0+512)+36),1
 12148  1214  2A2E               	goto	l1440
 12149                           
 12150                           ;MCU_B1.c: 982: Memory.Runtime = 1;
 12151  1215  15C4               	bsf	(_Memory^(0+512)+36),3
 12152                           
 12153                           ;MCU_B1.c: 983: Memory.Time++;
 12154  1216  3001               	movlw	1
 12155  1217  07C2               	addwf	(_Memory^(0+512)+34),f
 12156  1218  3000               	movlw	0
 12157  1219  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12158                           
 12159                           ;MCU_B1.c: 984: if (Memory.Time == (200 / 20)) {
 12160  121A  3022               	movlw	34
 12161  121B  3E20               	addlw	_Memory& (0+255)
 12162  121C  0086               	movwf	6
 12163  121D  3002               	movlw	2	; select bank4/5
 12164  121E  0087               	movwf	7
 12165  121F  3F40               	moviw [0]fsr1
 12166  1220  3A0A               	xorlw	10
 12167  1221  1D03               	skipz
 12168  1222  2A25               	goto	u12375
 12169  1223  3F41               	moviw [1]fsr1
 12170  1224  3A00               	xorlw	0
 12171  1225                     u12375:	
 12172  1225  1D03               	skipz
 12173  1226  0008               	return
 12174                           
 12175                           ;MCU_B1.c: 985: Memory.Time = 0;
 12176  1227  01C2               	clrf	(_Memory^(0+512)+34)
 12177  1228  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12178                           
 12179                           ;MCU_B1.c: 986: Memory.Modify = 0;
 12180  1229  1044               	bcf	(_Memory^(0+512)+36),0
 12181                           
 12182                           ;MCU_B1.c: 987: Memory.GO = 0;
 12183  122A  10C4               	bcf	(_Memory^(0+512)+36),1
 12184                           
 12185                           ;MCU_B1.c: 988: Flash_Memory_Modify();
 12186  122B  318B  2312         	fcall	_Flash_Memory_Modify
 12187                           
 12188                           ;MCU_B1.c: 989: }
 12189                           ;MCU_B1.c: 990: } else {
 12190  122D  0008               	return
 12191  122E                     l1440:	
 12192                           
 12193                           ;MCU_B1.c: 991: if (Memory.Runtime == 1) {
 12194  122E  1DC4               	btfss	(_Memory^(0+512)+36),3
 12195  122F  0008               	return
 12196                           
 12197                           ;MCU_B1.c: 992: Memory.Runtime = 0;
 12198  1230  11C4               	bcf	(_Memory^(0+512)+36),3
 12199                           
 12200                           ;MCU_B1.c: 993: Memory.Time = 0;
 12201  1231  01C2               	clrf	(_Memory^(0+512)+34)
 12202  1232  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12203  1233  0008               	return
 12204  1234                     __end_of_Flash_Memory_Main:	
 12205                           
 12206                           	psect	text76
 12207  1A11                     __ptext76:	
 12208 ;; *************** function _getAll_Sw_KeyStatus *****************
 12209 ;; Defined at:
 12210 ;;		line 278 in file "../src/Switch_B1.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;		None
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;  status          1    2[BANK0 ] unsigned char 
 12215 ;; Return value:  Size  Location     Type
 12216 ;;                  1    wreg      unsigned char 
 12217 ;; Registers used:
 12218 ;;		wreg, status,2
 12219 ;; Tracked objects:
 12220 ;;		On entry : 0/0
 12221 ;;		On exit  : 0/0
 12222 ;;		Unchanged: 0/0
 12223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;Total ram usage:        3 bytes
 12229 ;; Hardware stack levels used:    1
 12230 ;; Hardware stack levels required when called:    5
 12231 ;; This function calls:
 12232 ;;		Nothing
 12233 ;; This function is called by:
 12234 ;;		_Flash_Memory_Main
 12235 ;; This function uses a non-reentrant model
 12236 ;;
 12237                           
 12238                           
 12239                           ;psect for function _getAll_Sw_KeyStatus
 12240  1A11                     _getAll_Sw_KeyStatus:	
 12241                           
 12242                           ;Switch_B1.c: 279: char status = 0;
 12243                           
 12244                           ;incstack = 0
 12245                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12246  1A11  0020               	movlb	0	; select bank0
 12247  1A12  01A2               	clrf	getAll_Sw_KeyStatus@status
 12248                           
 12249                           ;Switch_B1.c: 293: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1 ? 1 : 0;
 12250  1A13  01A3               	clrf	_getAll_Sw_KeyStatus$6155
 12251  1A14  0AA3               	incf	_getAll_Sw_KeyStatus$6155,f
 12252  1A15  1F0C               	btfss	12,6	;volatile
 12253  1A16  1A0C               	btfsc	12,4	;volatile
 12254  1A17  2A1C               	goto	l8212
 12255  1A18  1C0C               	btfss	12,0	;volatile
 12256  1A19  188D               	btfsc	13,1	;volatile
 12257  1A1A  2A1C               	goto	l8212
 12258  1A1B  01A3               	clrf	_getAll_Sw_KeyStatus$6155
 12259  1A1C                     l8212:	
 12260  1A1C  0823               	movf	_getAll_Sw_KeyStatus$6155,w
 12261  1A1D  00A1               	movwf	??_getAll_Sw_KeyStatus
 12262  1A1E  0821               	movf	??_getAll_Sw_KeyStatus,w
 12263  1A1F  00A2               	movwf	getAll_Sw_KeyStatus@status
 12264                           
 12265                           ;Switch_B1.c: 306: return status;
 12266  1A20  0822               	movf	getAll_Sw_KeyStatus@status,w
 12267  1A21  0008               	return
 12268  1A22                     __end_of_getAll_Sw_KeyStatus:	
 12269                           
 12270                           	psect	text77
 12271  0B12                     __ptext77:	
 12272 ;; *************** function _Flash_Memory_Modify *****************
 12273 ;; Defined at:
 12274 ;;		line 1051 in file "../src/MCU_B1.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;		None
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;  i               1    6[BANK0 ] unsigned char 
 12279 ;; Return value:  Size  Location     Type
 12280 ;;		None               void
 12281 ;; Registers used:
 12282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12283 ;; Tracked objects:
 12284 ;;		On entry : 0/0
 12285 ;;		On exit  : 0/0
 12286 ;;		Unchanged: 0/0
 12287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;Total ram usage:        2 bytes
 12293 ;; Hardware stack levels used:    1
 12294 ;; Hardware stack levels required when called:    7
 12295 ;; This function calls:
 12296 ;;		_Flash_Memory_Erasing
 12297 ;;		_Flash_Memory_Read
 12298 ;;		_Flash_Memory_Write
 12299 ;;		_setMemory_Data
 12300 ;; This function is called by:
 12301 ;;		_Flash_Memory_Main
 12302 ;; This function uses a non-reentrant model
 12303 ;;
 12304                           
 12305                           
 12306                           ;psect for function _Flash_Memory_Modify
 12307  0B12                     _Flash_Memory_Modify:	
 12308                           
 12309                           ;MCU_B1.c: 1052: char i = 0;
 12310                           
 12311                           ;incstack = 0
 12312                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12313  0B12  0020               	movlb	0	; select bank0
 12314  0B13  01A6               	clrf	Flash_Memory_Modify@i
 12315                           
 12316                           ;MCU_B1.c: 1053: for (i = 0; i < 32; i++) {
 12317  0B14  01A6               	clrf	Flash_Memory_Modify@i
 12318  0B15  3020               	movlw	32
 12319  0B16  0226               	subwf	Flash_Memory_Modify@i,w
 12320  0B17  1803               	btfsc	3,0
 12321  0B18  2B2E               	goto	l8230
 12322  0B19                     l8224:	
 12323                           
 12324                           ;MCU_B1.c: 1054: Memory.Data[i] = Flash_Memory_Read(i);
 12325  0B19  0826               	movf	Flash_Memory_Modify@i,w
 12326  0B1A  319C  2433  318B   	fcall	_Flash_Memory_Read
 12327  0B1D  0020               	movlb	0	; select bank0
 12328  0B1E  00A5               	movwf	??_Flash_Memory_Modify
 12329  0B1F  0826               	movf	Flash_Memory_Modify@i,w
 12330  0B20  3E20               	addlw	_Memory& (0+255)
 12331  0B21  0086               	movwf	6
 12332  0B22  3002               	movlw	2	; select bank4/5
 12333  0B23  0087               	movwf	7
 12334  0B24  0825               	movf	??_Flash_Memory_Modify,w
 12335  0B25  0081               	movwf	1
 12336  0B26  3001               	movlw	1
 12337  0B27  00A5               	movwf	??_Flash_Memory_Modify
 12338  0B28  0825               	movf	??_Flash_Memory_Modify,w
 12339  0B29  07A6               	addwf	Flash_Memory_Modify@i,f
 12340  0B2A  3020               	movlw	32
 12341  0B2B  0226               	subwf	Flash_Memory_Modify@i,w
 12342  0B2C  1C03               	skipc
 12343  0B2D  2B19               	goto	l8224
 12344  0B2E                     l8230:	
 12345                           
 12346                           ;MCU_B1.c: 1055: }
 12347                           ;MCU_B1.c: 1056: setMemory_Data(0, product->Data[12]);
 12348  0B2E  0021               	movlb	1	; select bank1
 12349  0B2F  086D               	movf	_product^(0+128),w
 12350  0B30  0086               	movwf	6
 12351  0B31  3002               	movlw	2	; select bank4/5
 12352  0B32  0087               	movwf	7
 12353  0B33  3002               	movlw	2	; select bank4/5
 12354  0B34  3F4C               	moviw [12]fsr1
 12355  0B35  0020               	movlb	0	; select bank0
 12356  0B36  00A1               	movwf	setMemory_Data@data
 12357  0B37  3000               	movlw	0
 12358  0B38  3199  217F  318B   	fcall	_setMemory_Data
 12359                           
 12360                           ;MCU_B1.c: 1057: setMemory_Data(1, product->Data[13]);
 12361  0B3B  0021               	movlb	1	; select bank1
 12362  0B3C  086D               	movf	_product^(0+128),w
 12363  0B3D  0086               	movwf	6
 12364  0B3E  3002               	movlw	2	; select bank4/5
 12365  0B3F  0087               	movwf	7
 12366  0B40  3002               	movlw	2	; select bank4/5
 12367  0B41  3F4D               	moviw [13]fsr1
 12368  0B42  0020               	movlb	0	; select bank0
 12369  0B43  00A1               	movwf	setMemory_Data@data
 12370  0B44  3001               	movlw	1
 12371  0B45  3199  217F  318B   	fcall	_setMemory_Data
 12372                           
 12373                           ;MCU_B1.c: 1058: setMemory_Data(2, product->Data[14]);
 12374  0B48  0021               	movlb	1	; select bank1
 12375  0B49  086D               	movf	_product^(0+128),w
 12376  0B4A  0086               	movwf	6
 12377  0B4B  3002               	movlw	2	; select bank4/5
 12378  0B4C  0087               	movwf	7
 12379  0B4D  3002               	movlw	2	; select bank4/5
 12380  0B4E  3F4E               	moviw [14]fsr1
 12381  0B4F  0020               	movlb	0	; select bank0
 12382  0B50  00A1               	movwf	setMemory_Data@data
 12383  0B51  3002               	movlw	2
 12384  0B52  3199  217F  318B   	fcall	_setMemory_Data
 12385                           
 12386                           ;MCU_B1.c: 1060: setMemory_Data(3, product->Data[21]);
 12387  0B55  0021               	movlb	1	; select bank1
 12388  0B56  086D               	movf	_product^(0+128),w
 12389  0B57  0086               	movwf	6
 12390  0B58  3002               	movlw	2	; select bank4/5
 12391  0B59  0087               	movwf	7
 12392  0B5A  3002               	movlw	2	; select bank4/5
 12393  0B5B  3F55               	moviw [21]fsr1
 12394  0B5C  0020               	movlb	0	; select bank0
 12395  0B5D  00A1               	movwf	setMemory_Data@data
 12396  0B5E  3003               	movlw	3
 12397  0B5F  3199  217F  318B   	fcall	_setMemory_Data
 12398                           
 12399                           ;MCU_B1.c: 1061: setMemory_Data(4, product->Data[22]);
 12400  0B62  0021               	movlb	1	; select bank1
 12401  0B63  086D               	movf	_product^(0+128),w
 12402  0B64  0086               	movwf	6
 12403  0B65  3002               	movlw	2	; select bank4/5
 12404  0B66  0087               	movwf	7
 12405  0B67  3002               	movlw	2	; select bank4/5
 12406  0B68  3F56               	moviw [22]fsr1
 12407  0B69  0020               	movlb	0	; select bank0
 12408  0B6A  00A1               	movwf	setMemory_Data@data
 12409  0B6B  3004               	movlw	4
 12410  0B6C  3199  217F  318B   	fcall	_setMemory_Data
 12411                           
 12412                           ;MCU_B1.c: 1062: setMemory_Data(5, product->Data[23]);
 12413  0B6F  0021               	movlb	1	; select bank1
 12414  0B70  086D               	movf	_product^(0+128),w
 12415  0B71  0086               	movwf	6
 12416  0B72  3002               	movlw	2	; select bank4/5
 12417  0B73  0087               	movwf	7
 12418  0B74  3002               	movlw	2	; select bank4/5
 12419  0B75  3F57               	moviw [23]fsr1
 12420  0B76  0020               	movlb	0	; select bank0
 12421  0B77  00A1               	movwf	setMemory_Data@data
 12422  0B78  3005               	movlw	5
 12423  0B79  3199  217F  318B   	fcall	_setMemory_Data
 12424                           
 12425                           ;MCU_B1.c: 1063: if (myMain.SaveDimmer == 1) {
 12426  0B7C  0021               	movlb	1	; select bank1
 12427  0B7D  1EB8               	btfss	(_myMain^(0+128)+10),5
 12428  0B7E  2B89               	goto	l8238
 12429                           
 12430                           ;MCU_B1.c: 1064: myMain.SaveDimmer = 0;
 12431  0B7F  12B8               	bcf	(_myMain^(0+128)+10),5
 12432                           
 12433                           ;MCU_B1.c: 1065: setMemory_Data(30, 0xaa);
 12434  0B80  30AA               	movlw	170
 12435  0B81  0020               	movlb	0	; select bank0
 12436  0B82  00A5               	movwf	??_Flash_Memory_Modify
 12437  0B83  0825               	movf	??_Flash_Memory_Modify,w
 12438  0B84  00A1               	movwf	setMemory_Data@data
 12439  0B85  301E               	movlw	30
 12440  0B86  3199  217F  318B   	fcall	_setMemory_Data
 12441  0B89                     l8238:	
 12442                           
 12443                           ;MCU_B1.c: 1066: }
 12444                           ;MCU_B1.c: 1068: if (Memory.LoopSave == 1) {
 12445  0B89  0024               	movlb	4	; select bank4
 12446  0B8A  1D44               	btfss	(_Memory^(0+512)+36),2
 12447  0B8B  2B90               	goto	l1464
 12448                           
 12449                           ;MCU_B1.c: 1069: Memory.LoopSave = 0;
 12450  0B8C  1144               	bcf	(_Memory^(0+512)+36),2
 12451                           
 12452                           ;MCU_B1.c: 1070: myMain.FirstOpen = 0;
 12453  0B8D  0021               	movlb	1	; select bank1
 12454  0B8E  11AE               	bcf	_myMain^(0+128),3
 12455                           
 12456                           ;MCU_B1.c: 1071: myMain.First = 0;
 12457  0B8F  12AE               	bcf	_myMain^(0+128),5
 12458  0B90                     l1464:	
 12459                           
 12460                           ;MCU_B1.c: 1073: }
 12461                           ;MCU_B1.c: 1074: GIE = 0;
 12462  0B90  138B               	bcf	11,7	;volatile
 12463                           
 12464                           ;MCU_B1.c: 1075: Flash_Memory_Erasing();
 12465  0B91  3199  218B  318B   	fcall	_Flash_Memory_Erasing
 12466                           
 12467                           ;MCU_B1.c: 1076: Flash_Memory_Write();
 12468  0B94  319F  279E         	fcall	_Flash_Memory_Write
 12469                           
 12470                           ;MCU_B1.c: 1077: GIE = 1;
 12471  0B96  178B               	bsf	11,7	;volatile
 12472  0B97  0008               	return
 12473  0B98                     __end_of_Flash_Memory_Modify:	
 12474                           
 12475                           	psect	text78
 12476  198B                     __ptext78:	
 12477 ;; *************** function _Flash_Memory_Erasing *****************
 12478 ;; Defined at:
 12479 ;;		line 1040 in file "../src/MCU_B1.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;		None
 12482 ;; Auto vars:     Size  Location     Type
 12483 ;;		None
 12484 ;; Return value:  Size  Location     Type
 12485 ;;		None               void
 12486 ;; Registers used:
 12487 ;;		wreg, status,2, status,0, pclath, cstack
 12488 ;; Tracked objects:
 12489 ;;		On entry : 0/0
 12490 ;;		On exit  : 0/0
 12491 ;;		Unchanged: 0/0
 12492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12497 ;;Total ram usage:        0 bytes
 12498 ;; Hardware stack levels used:    1
 12499 ;; Hardware stack levels required when called:    6
 12500 ;; This function calls:
 12501 ;;		_Flash_Memory_Unlock
 12502 ;; This function is called by:
 12503 ;;		_Flash_Memory_Modify
 12504 ;; This function uses a non-reentrant model
 12505 ;;
 12506                           
 12507                           
 12508                           ;psect for function _Flash_Memory_Erasing
 12509  198B                     _Flash_Memory_Erasing:	
 12510                           
 12511                           ;MCU_B1.c: 1041: CFGS = 0;
 12512                           
 12513                           ;incstack = 0
 12514                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12515  198B  0023               	movlb	3	; select bank3
 12516  198C  1315               	bcf	21,6	;volatile
 12517                           
 12518                           ;MCU_B1.c: 1042: PMADRH = 0x30;
 12519  198D  3030               	movlw	48
 12520  198E  0092               	movwf	18	;volatile
 12521                           
 12522                           ;MCU_B1.c: 1043: PMADRL = 0x00;
 12523  198F  0191               	clrf	17	;volatile
 12524                           
 12525                           ;MCU_B1.c: 1044: FREE = 1;
 12526  1990  1615               	bsf	21,4	;volatile
 12527                           
 12528                           ;MCU_B1.c: 1045: WREN = 1;
 12529  1991  1515               	bsf	21,2	;volatile
 12530                           
 12531                           ;MCU_B1.c: 1046: Flash_Memory_Unlock();
 12532  1992  3199  2132         	fcall	_Flash_Memory_Unlock
 12533                           
 12534                           ;MCU_B1.c: 1047: WREN = 0;
 12535  1994  0023               	movlb	3	; select bank3
 12536  1995  1115               	bcf	21,2	;volatile
 12537  1996  0008               	return
 12538  1997                     __end_of_Flash_Memory_Erasing:	
 12539                           
 12540                           	psect	text79
 12541  062A                     __ptext79:	
 12542 ;; *************** function _Flash_Memory_Initialization *****************
 12543 ;; Defined at:
 12544 ;;		line 930 in file "../src/MCU_B1.c"
 12545 ;; Parameters:    Size  Location     Type
 12546 ;;		None
 12547 ;; Auto vars:     Size  Location     Type
 12548 ;;  value           1    6[BANK0 ] unsigned char 
 12549 ;; Return value:  Size  Location     Type
 12550 ;;		None               void
 12551 ;; Registers used:
 12552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12553 ;; Tracked objects:
 12554 ;;		On entry : 0/0
 12555 ;;		On exit  : 0/0
 12556 ;;		Unchanged: 0/0
 12557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12562 ;;Total ram usage:        2 bytes
 12563 ;; Hardware stack levels used:    1
 12564 ;; Hardware stack levels required when called:    7
 12565 ;; This function calls:
 12566 ;;		_Flash_Memory_Read
 12567 ;;		_Flash_Memory_Write
 12568 ;;		_setMemory_Data
 12569 ;; This function is called by:
 12570 ;;		_main
 12571 ;; This function uses a non-reentrant model
 12572 ;;
 12573                           
 12574                           
 12575                           ;psect for function _Flash_Memory_Initialization
 12576  062A                     _Flash_Memory_Initialization:	
 12577                           
 12578                           ;MCU_B1.c: 931: char value = 0;
 12579                           
 12580                           ;incstack = 0
 12581                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12582  062A  0020               	movlb	0	; select bank0
 12583  062B  01A6               	clrf	Flash_Memory_Initialization@value
 12584                           
 12585                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12586  062C  301F               	movlw	31
 12587  062D  319C  2433  3186   	fcall	_Flash_Memory_Read
 12588  0630  3AAA               	xorlw	170
 12589  0631  1D03               	skipz
 12590  0632  2EAC               	goto	l8624
 12591                           
 12592                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12593  0633  3000               	movlw	0
 12594  0634  319C  2433  3186   	fcall	_Flash_Memory_Read
 12595  0637  0020               	movlb	0	; select bank0
 12596  0638  00A5               	movwf	??_Flash_Memory_Initialization
 12597  0639  0021               	movlb	1	; select bank1
 12598  063A  086D               	movf	_product^(0+128),w
 12599  063B  3E0C               	addlw	12
 12600  063C  0086               	movwf	6
 12601  063D  3002               	movlw	2	; select bank4/5
 12602  063E  0087               	movwf	7
 12603  063F  0020               	movlb	0	; select bank0
 12604  0640  0825               	movf	??_Flash_Memory_Initialization,w
 12605  0641  0081               	movwf	1
 12606                           
 12607                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12608  0642  3001               	movlw	1
 12609  0643  319C  2433  3186   	fcall	_Flash_Memory_Read
 12610  0646  0020               	movlb	0	; select bank0
 12611  0647  00A5               	movwf	??_Flash_Memory_Initialization
 12612  0648  0021               	movlb	1	; select bank1
 12613  0649  086D               	movf	_product^(0+128),w
 12614  064A  3E0D               	addlw	13
 12615  064B  0086               	movwf	6
 12616  064C  3002               	movlw	2	; select bank4/5
 12617  064D  0087               	movwf	7
 12618  064E  0020               	movlb	0	; select bank0
 12619  064F  0825               	movf	??_Flash_Memory_Initialization,w
 12620  0650  0081               	movwf	1
 12621                           
 12622                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12623  0651  3002               	movlw	2
 12624  0652  319C  2433  3186   	fcall	_Flash_Memory_Read
 12625  0655  0020               	movlb	0	; select bank0
 12626  0656  00A5               	movwf	??_Flash_Memory_Initialization
 12627  0657  0021               	movlb	1	; select bank1
 12628  0658  086D               	movf	_product^(0+128),w
 12629  0659  3E0E               	addlw	14
 12630  065A  0086               	movwf	6
 12631  065B  3002               	movlw	2	; select bank4/5
 12632  065C  0087               	movwf	7
 12633  065D  0020               	movlb	0	; select bank0
 12634  065E  0825               	movf	??_Flash_Memory_Initialization,w
 12635  065F  0081               	movwf	1
 12636                           
 12637                           ;MCU_B1.c: 938: product->Data[21] = Flash_Memory_Read(3);
 12638  0660  3003               	movlw	3
 12639  0661  319C  2433  3186   	fcall	_Flash_Memory_Read
 12640  0664  0020               	movlb	0	; select bank0
 12641  0665  00A5               	movwf	??_Flash_Memory_Initialization
 12642  0666  0021               	movlb	1	; select bank1
 12643  0667  086D               	movf	_product^(0+128),w
 12644  0668  3E15               	addlw	21
 12645  0669  0086               	movwf	6
 12646  066A  3002               	movlw	2	; select bank4/5
 12647  066B  0087               	movwf	7
 12648  066C  0020               	movlb	0	; select bank0
 12649  066D  0825               	movf	??_Flash_Memory_Initialization,w
 12650  066E  0081               	movwf	1
 12651                           
 12652                           ;MCU_B1.c: 939: product->Data[22] = Flash_Memory_Read(4);
 12653  066F  3004               	movlw	4
 12654  0670  319C  2433  3186   	fcall	_Flash_Memory_Read
 12655  0673  0020               	movlb	0	; select bank0
 12656  0674  00A5               	movwf	??_Flash_Memory_Initialization
 12657  0675  0021               	movlb	1	; select bank1
 12658  0676  086D               	movf	_product^(0+128),w
 12659  0677  3E16               	addlw	22
 12660  0678  0086               	movwf	6
 12661  0679  3002               	movlw	2	; select bank4/5
 12662  067A  0087               	movwf	7
 12663  067B  0020               	movlb	0	; select bank0
 12664  067C  0825               	movf	??_Flash_Memory_Initialization,w
 12665  067D  0081               	movwf	1
 12666                           
 12667                           ;MCU_B1.c: 940: product->Data[23] = Flash_Memory_Read(5);
 12668  067E  3005               	movlw	5
 12669  067F  319C  2433  3186   	fcall	_Flash_Memory_Read
 12670  0682  0020               	movlb	0	; select bank0
 12671  0683  00A5               	movwf	??_Flash_Memory_Initialization
 12672  0684  0021               	movlb	1	; select bank1
 12673  0685  086D               	movf	_product^(0+128),w
 12674  0686  3E17               	addlw	23
 12675  0687  0086               	movwf	6
 12676  0688  3002               	movlw	2	; select bank4/5
 12677  0689  0087               	movwf	7
 12678  068A  0020               	movlb	0	; select bank0
 12679  068B  0825               	movf	??_Flash_Memory_Initialization,w
 12680  068C  0081               	movwf	1
 12681                           
 12682                           ;MCU_B1.c: 947: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12683  068D  0021               	movlb	1	; select bank1
 12684  068E  086D               	movf	_product^(0+128),w
 12685  068F  3E0C               	addlw	12
 12686  0690  0086               	movwf	6
 12687  0691  3002               	movlw	2	; select bank4/5
 12688  0692  0087               	movwf	7
 12689  0693  0801               	movf	1,w
 12690  0694  3AFF               	xorlw	255
 12691  0695  1D03               	skipz
 12692  0696  0008               	return
 12693  0697  086D               	movf	_product^(0+128),w
 12694  0698  3E0D               	addlw	13
 12695  0699  0086               	movwf	6
 12696  069A  3002               	movlw	2	; select bank4/5
 12697  069B  0087               	movwf	7
 12698  069C  0801               	movf	1,w
 12699  069D  3AFF               	xorlw	255
 12700  069E  1D03               	skipz
 12701  069F  0008               	return
 12702  06A0  086D               	movf	_product^(0+128),w
 12703  06A1  3E0E               	addlw	14
 12704  06A2  0086               	movwf	6
 12705  06A3  3002               	movlw	2	; select bank4/5
 12706  06A4  0087               	movwf	7
 12707  06A5  0801               	movf	1,w
 12708  06A6  3AFF               	xorlw	255
 12709  06A7  1D03               	skipz
 12710  06A8  0008               	return
 12711                           
 12712                           ;MCU_B1.c: 948: myMain.FirstOpen = 1;
 12713  06A9  15AE               	bsf	_myMain^(0+128),3
 12714                           
 12715                           ;MCU_B1.c: 949: myMain.First = 1;
 12716  06AA  16AE               	bsf	_myMain^(0+128),5
 12717                           
 12718                           ;MCU_B1.c: 950: }
 12719                           ;MCU_B1.c: 951: } else {
 12720  06AB  0008               	return
 12721  06AC                     l8624:	
 12722                           
 12723                           ;MCU_B1.c: 953: setMemory_Data(0, 0xff);
 12724  06AC  30FF               	movlw	255
 12725  06AD  0020               	movlb	0	; select bank0
 12726  06AE  00A5               	movwf	??_Flash_Memory_Initialization
 12727  06AF  0825               	movf	??_Flash_Memory_Initialization,w
 12728  06B0  00A1               	movwf	setMemory_Data@data
 12729  06B1  3000               	movlw	0
 12730  06B2  3199  217F  3186   	fcall	_setMemory_Data
 12731                           
 12732                           ;MCU_B1.c: 954: setMemory_Data(1, 0xff);
 12733  06B5  30FF               	movlw	255
 12734  06B6  0020               	movlb	0	; select bank0
 12735  06B7  00A5               	movwf	??_Flash_Memory_Initialization
 12736  06B8  0825               	movf	??_Flash_Memory_Initialization,w
 12737  06B9  00A1               	movwf	setMemory_Data@data
 12738  06BA  3001               	movlw	1
 12739  06BB  3199  217F  3186   	fcall	_setMemory_Data
 12740                           
 12741                           ;MCU_B1.c: 955: setMemory_Data(2, 0xff);
 12742  06BE  30FF               	movlw	255
 12743  06BF  0020               	movlb	0	; select bank0
 12744  06C0  00A5               	movwf	??_Flash_Memory_Initialization
 12745  06C1  0825               	movf	??_Flash_Memory_Initialization,w
 12746  06C2  00A1               	movwf	setMemory_Data@data
 12747  06C3  3002               	movlw	2
 12748  06C4  3199  217F  3186   	fcall	_setMemory_Data
 12749                           
 12750                           ;MCU_B1.c: 956: setMemory_Data(3, 0xff);
 12751  06C7  30FF               	movlw	255
 12752  06C8  0020               	movlb	0	; select bank0
 12753  06C9  00A5               	movwf	??_Flash_Memory_Initialization
 12754  06CA  0825               	movf	??_Flash_Memory_Initialization,w
 12755  06CB  00A1               	movwf	setMemory_Data@data
 12756  06CC  3003               	movlw	3
 12757  06CD  3199  217F  3186   	fcall	_setMemory_Data
 12758                           
 12759                           ;MCU_B1.c: 957: setMemory_Data(4, 0xff);
 12760  06D0  30FF               	movlw	255
 12761  06D1  0020               	movlb	0	; select bank0
 12762  06D2  00A5               	movwf	??_Flash_Memory_Initialization
 12763  06D3  0825               	movf	??_Flash_Memory_Initialization,w
 12764  06D4  00A1               	movwf	setMemory_Data@data
 12765  06D5  3004               	movlw	4
 12766  06D6  3199  217F  3186   	fcall	_setMemory_Data
 12767                           
 12768                           ;MCU_B1.c: 958: setMemory_Data(5, 0xff);
 12769  06D9  30FF               	movlw	255
 12770  06DA  0020               	movlb	0	; select bank0
 12771  06DB  00A5               	movwf	??_Flash_Memory_Initialization
 12772  06DC  0825               	movf	??_Flash_Memory_Initialization,w
 12773  06DD  00A1               	movwf	setMemory_Data@data
 12774  06DE  3005               	movlw	5
 12775  06DF  3199  217F  3186   	fcall	_setMemory_Data
 12776                           
 12777                           ;MCU_B1.c: 959: setMemory_Data(31, 0xaa);
 12778  06E2  30AA               	movlw	170
 12779  06E3  0020               	movlb	0	; select bank0
 12780  06E4  00A5               	movwf	??_Flash_Memory_Initialization
 12781  06E5  0825               	movf	??_Flash_Memory_Initialization,w
 12782  06E6  00A1               	movwf	setMemory_Data@data
 12783  06E7  301F               	movlw	31
 12784  06E8  3199  217F  3186   	fcall	_setMemory_Data
 12785                           
 12786                           ;MCU_B1.c: 964: GIE = 0;
 12787  06EB  138B               	bcf	11,7	;volatile
 12788                           
 12789                           ;MCU_B1.c: 965: Flash_Memory_Write();
 12790  06EC  319F  279E         	fcall	_Flash_Memory_Write
 12791                           
 12792                           ;MCU_B1.c: 966: GIE = 1;
 12793  06EE  178B               	bsf	11,7	;volatile
 12794                           
 12795                           ;MCU_B1.c: 967: myMain.FirstOpen = 1;
 12796  06EF  0021               	movlb	1	; select bank1
 12797  06F0  15AE               	bsf	_myMain^(0+128),3
 12798                           
 12799                           ;MCU_B1.c: 968: myMain.First = 1;
 12800  06F1  16AE               	bsf	_myMain^(0+128),5
 12801                           
 12802                           ;MCU_B1.c: 969: myMain.InitDimmer = 1;
 12803  06F2  1638               	bsf	(_myMain^(0+128)+10),4
 12804  06F3  0008               	return
 12805  06F4                     __end_of_Flash_Memory_Initialization:	
 12806                           
 12807                           	psect	text80
 12808  197F                     __ptext80:	
 12809 ;; *************** function _setMemory_Data *****************
 12810 ;; Defined at:
 12811 ;;		line 1092 in file "../src/MCU_B1.c"
 12812 ;; Parameters:    Size  Location     Type
 12813 ;;  address         1    wreg     unsigned char 
 12814 ;;  data            1    1[BANK0 ] unsigned char 
 12815 ;; Auto vars:     Size  Location     Type
 12816 ;;  address         1    3[BANK0 ] unsigned char 
 12817 ;; Return value:  Size  Location     Type
 12818 ;;		None               void
 12819 ;; Registers used:
 12820 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12821 ;; Tracked objects:
 12822 ;;		On entry : 0/0
 12823 ;;		On exit  : 0/0
 12824 ;;		Unchanged: 0/0
 12825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12826 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;Total ram usage:        3 bytes
 12831 ;; Hardware stack levels used:    1
 12832 ;; Hardware stack levels required when called:    5
 12833 ;; This function calls:
 12834 ;;		Nothing
 12835 ;; This function is called by:
 12836 ;;		_Flash_Memory_Initialization
 12837 ;;		_Flash_Memory_Modify
 12838 ;; This function uses a non-reentrant model
 12839 ;;
 12840                           
 12841                           
 12842                           ;psect for function _setMemory_Data
 12843  197F                     _setMemory_Data:	
 12844                           
 12845                           ;incstack = 0
 12846                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12847                           ;setMemory_Data@address stored from wreg
 12848  197F  0020               	movlb	0	; select bank0
 12849  1980  00A3               	movwf	setMemory_Data@address
 12850                           
 12851                           ;MCU_B1.c: 1093: Memory.Data[address] = data;
 12852  1981  0821               	movf	setMemory_Data@data,w
 12853  1982  00A2               	movwf	??_setMemory_Data
 12854  1983  0823               	movf	setMemory_Data@address,w
 12855  1984  3E20               	addlw	_Memory& (0+255)
 12856  1985  0086               	movwf	6
 12857  1986  3002               	movlw	2	; select bank4/5
 12858  1987  0087               	movwf	7
 12859  1988  0822               	movf	??_setMemory_Data,w
 12860  1989  0081               	movwf	1
 12861  198A  0008               	return
 12862  198B                     __end_of_setMemory_Data:	
 12863                           
 12864                           	psect	text81
 12865  1F9E                     __ptext81:	
 12866 ;; *************** function _Flash_Memory_Write *****************
 12867 ;; Defined at:
 12868 ;;		line 1021 in file "../src/MCU_B1.c"
 12869 ;; Parameters:    Size  Location     Type
 12870 ;;		None
 12871 ;; Auto vars:     Size  Location     Type
 12872 ;;  i               1    2[BANK0 ] unsigned char 
 12873 ;; Return value:  Size  Location     Type
 12874 ;;		None               void
 12875 ;; Registers used:
 12876 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12877 ;; Tracked objects:
 12878 ;;		On entry : 0/0
 12879 ;;		On exit  : 0/0
 12880 ;;		Unchanged: 0/0
 12881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12884 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12886 ;;Total ram usage:        2 bytes
 12887 ;; Hardware stack levels used:    1
 12888 ;; Hardware stack levels required when called:    6
 12889 ;; This function calls:
 12890 ;;		_Flash_Memory_Unlock
 12891 ;; This function is called by:
 12892 ;;		_Flash_Memory_Initialization
 12893 ;;		_Flash_Memory_Modify
 12894 ;; This function uses a non-reentrant model
 12895 ;;
 12896                           
 12897                           
 12898                           ;psect for function _Flash_Memory_Write
 12899  1F9E                     _Flash_Memory_Write:	
 12900                           
 12901                           ;MCU_B1.c: 1022: char i = 0;
 12902                           
 12903                           ;incstack = 0
 12904                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12905  1F9E  0020               	movlb	0	; select bank0
 12906  1F9F  01A2               	clrf	Flash_Memory_Write@i
 12907                           
 12908                           ;MCU_B1.c: 1023: CFGS = 0;
 12909  1FA0  0023               	movlb	3	; select bank3
 12910  1FA1  1315               	bcf	21,6	;volatile
 12911                           
 12912                           ;MCU_B1.c: 1024: PMADRH = 0x30;
 12913  1FA2  3030               	movlw	48
 12914  1FA3  0092               	movwf	18	;volatile
 12915                           
 12916                           ;MCU_B1.c: 1025: PMDATH = 0;
 12917  1FA4  0194               	clrf	20	;volatile
 12918                           
 12919                           ;MCU_B1.c: 1026: FREE = 0;
 12920  1FA5  1215               	bcf	21,4	;volatile
 12921                           
 12922                           ;MCU_B1.c: 1027: LWLO = 1;
 12923  1FA6  1695               	bsf	21,5	;volatile
 12924                           
 12925                           ;MCU_B1.c: 1028: WREN = 1;
 12926  1FA7  1515               	bsf	21,2	;volatile
 12927                           
 12928                           ;MCU_B1.c: 1029: for (i = 0; i < 32; i++) {
 12929  1FA8  0020               	movlb	0	; select bank0
 12930  1FA9  01A2               	clrf	Flash_Memory_Write@i
 12931  1FAA  3020               	movlw	32
 12932  1FAB  0222               	subwf	Flash_Memory_Write@i,w
 12933  1FAC  1803               	btfsc	3,0
 12934  1FAD  2FC6               	goto	l1454
 12935  1FAE                     l7630:	
 12936                           
 12937                           ;MCU_B1.c: 1030: PMADRL = i;
 12938  1FAE  0822               	movf	Flash_Memory_Write@i,w
 12939  1FAF  0023               	movlb	3	; select bank3
 12940  1FB0  0091               	movwf	17	;volatile
 12941                           
 12942                           ;MCU_B1.c: 1031: PMDATL = Memory.Data[i];
 12943  1FB1  0020               	movlb	0	; select bank0
 12944  1FB2  0822               	movf	Flash_Memory_Write@i,w
 12945  1FB3  3E20               	addlw	_Memory& (0+255)
 12946  1FB4  0086               	movwf	6
 12947  1FB5  3002               	movlw	2	; select bank4/5
 12948  1FB6  0087               	movwf	7
 12949  1FB7  0801               	movf	1,w
 12950  1FB8  0023               	movlb	3	; select bank3
 12951  1FB9  0093               	movwf	19	;volatile
 12952                           
 12953                           ;MCU_B1.c: 1032: Flash_Memory_Unlock();
 12954  1FBA  3199  2132  319F   	fcall	_Flash_Memory_Unlock
 12955  1FBD  3001               	movlw	1
 12956  1FBE  0020               	movlb	0	; select bank0
 12957  1FBF  00A1               	movwf	??_Flash_Memory_Write
 12958  1FC0  0821               	movf	??_Flash_Memory_Write,w
 12959  1FC1  07A2               	addwf	Flash_Memory_Write@i,f
 12960  1FC2  3020               	movlw	32
 12961  1FC3  0222               	subwf	Flash_Memory_Write@i,w
 12962  1FC4  1C03               	skipc
 12963  1FC5  2FAE               	goto	l7630
 12964  1FC6                     l1454:	
 12965                           
 12966                           ;MCU_B1.c: 1033: }
 12967                           ;MCU_B1.c: 1034: LWLO = 0;
 12968  1FC6  0023               	movlb	3	; select bank3
 12969  1FC7  1295               	bcf	21,5	;volatile
 12970                           
 12971                           ;MCU_B1.c: 1035: Flash_Memory_Unlock();
 12972  1FC8  3199  2132         	fcall	_Flash_Memory_Unlock
 12973                           
 12974                           ;MCU_B1.c: 1036: WREN = 0;
 12975  1FCA  0023               	movlb	3	; select bank3
 12976  1FCB  1115               	bcf	21,2	;volatile
 12977  1FCC  0008               	return
 12978  1FCD                     __end_of_Flash_Memory_Write:	
 12979                           
 12980                           	psect	text82
 12981  1932                     __ptext82:	
 12982 ;; *************** function _Flash_Memory_Unlock *****************
 12983 ;; Defined at:
 12984 ;;		line 1000 in file "../src/MCU_B1.c"
 12985 ;; Parameters:    Size  Location     Type
 12986 ;;		None
 12987 ;; Auto vars:     Size  Location     Type
 12988 ;;		None
 12989 ;; Return value:  Size  Location     Type
 12990 ;;		None               void
 12991 ;; Registers used:
 12992 ;;		wreg
 12993 ;; Tracked objects:
 12994 ;;		On entry : 0/0
 12995 ;;		On exit  : 0/0
 12996 ;;		Unchanged: 0/0
 12997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13002 ;;Total ram usage:        0 bytes
 13003 ;; Hardware stack levels used:    1
 13004 ;; Hardware stack levels required when called:    5
 13005 ;; This function calls:
 13006 ;;		Nothing
 13007 ;; This function is called by:
 13008 ;;		_Flash_Memory_Write
 13009 ;;		_Flash_Memory_Erasing
 13010 ;; This function uses a non-reentrant model
 13011 ;;
 13012                           
 13013                           
 13014                           ;psect for function _Flash_Memory_Unlock
 13015  1932                     _Flash_Memory_Unlock:	
 13016                           
 13017                           ;MCU_B1.c: 1001: PMCON2 = 0x55;
 13018                           
 13019                           ;incstack = 0
 13020                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13021  1932  3055               	movlw	85
 13022  1933  0023               	movlb	3	; select bank3
 13023  1934  0096               	movwf	22	;volatile
 13024                           
 13025                           ;MCU_B1.c: 1002: PMCON2 = 0xaa;
 13026  1935  30AA               	movlw	170
 13027  1936  0096               	movwf	22	;volatile
 13028                           
 13029                           ;MCU_B1.c: 1003: WR = 1;
 13030  1937  1495               	bsf	21,1	;volatile
 13031                           
 13032                           ;MCU_B1.c: 1004: __nop();
 13033  1938  0000               	nop
 13034                           
 13035                           ;MCU_B1.c: 1005: __nop();
 13036  1939  0000               	nop
 13037  193A  0008               	return
 13038  193B                     __end_of_Flash_Memory_Unlock:	
 13039                           
 13040                           	psect	text83
 13041  1C33                     __ptext83:	
 13042 ;; *************** function _Flash_Memory_Read *****************
 13043 ;; Defined at:
 13044 ;;		line 1009 in file "../src/MCU_B1.c"
 13045 ;; Parameters:    Size  Location     Type
 13046 ;;  address         1    wreg     unsigned char 
 13047 ;; Auto vars:     Size  Location     Type
 13048 ;;  address         1    3[BANK0 ] unsigned char 
 13049 ;;  ret             1    4[BANK0 ] unsigned char 
 13050 ;;  i               1    2[BANK0 ] unsigned char 
 13051 ;; Return value:  Size  Location     Type
 13052 ;;                  1    wreg      unsigned char 
 13053 ;; Registers used:
 13054 ;;		wreg, status,2
 13055 ;; Tracked objects:
 13056 ;;		On entry : 0/0
 13057 ;;		On exit  : 0/0
 13058 ;;		Unchanged: 0/0
 13059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13063 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13064 ;;Total ram usage:        4 bytes
 13065 ;; Hardware stack levels used:    1
 13066 ;; Hardware stack levels required when called:    5
 13067 ;; This function calls:
 13068 ;;		Nothing
 13069 ;; This function is called by:
 13070 ;;		_Flash_Memory_Initialization
 13071 ;;		_Flash_Memory_Modify
 13072 ;; This function uses a non-reentrant model
 13073 ;;
 13074                           
 13075                           
 13076                           ;psect for function _Flash_Memory_Read
 13077  1C33                     _Flash_Memory_Read:	
 13078                           
 13079                           ;incstack = 0
 13080                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13081                           ;Flash_Memory_Read@address stored from wreg
 13082  1C33  0020               	movlb	0	; select bank0
 13083  1C34  00A3               	movwf	Flash_Memory_Read@address
 13084                           
 13085                           ;MCU_B1.c: 1010: char i = 0, ret = 0;
 13086  1C35  01A2               	clrf	Flash_Memory_Read@i
 13087  1C36  01A4               	clrf	Flash_Memory_Read@ret
 13088                           
 13089                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 13090  1C37  3030               	movlw	48
 13091  1C38  0023               	movlb	3	; select bank3
 13092  1C39  0092               	movwf	18	;volatile
 13093                           
 13094                           ;MCU_B1.c: 1012: PMADRL = address;
 13095  1C3A  0020               	movlb	0	; select bank0
 13096  1C3B  0823               	movf	Flash_Memory_Read@address,w
 13097  1C3C  0023               	movlb	3	; select bank3
 13098  1C3D  0091               	movwf	17	;volatile
 13099                           
 13100                           ;MCU_B1.c: 1013: CFGS = 0;
 13101  1C3E  1315               	bcf	21,6	;volatile
 13102                           
 13103                           ;MCU_B1.c: 1014: RD = 1;
 13104  1C3F  1415               	bsf	21,0	;volatile
 13105                           
 13106                           ;MCU_B1.c: 1015: i = PMDATH;
 13107  1C40  0814               	movf	20,w	;volatile
 13108  1C41  0020               	movlb	0	; select bank0
 13109  1C42  00A1               	movwf	??_Flash_Memory_Read
 13110  1C43  0821               	movf	??_Flash_Memory_Read,w
 13111  1C44  00A2               	movwf	Flash_Memory_Read@i
 13112                           
 13113                           ;MCU_B1.c: 1016: ret = PMDATL;
 13114  1C45  0023               	movlb	3	; select bank3
 13115  1C46  0813               	movf	19,w	;volatile
 13116  1C47  0020               	movlb	0	; select bank0
 13117  1C48  00A1               	movwf	??_Flash_Memory_Read
 13118  1C49  0821               	movf	??_Flash_Memory_Read,w
 13119  1C4A  00A4               	movwf	Flash_Memory_Read@ret
 13120                           
 13121                           ;MCU_B1.c: 1017: return ret;
 13122  1C4B  0824               	movf	Flash_Memory_Read@ret,w
 13123  1C4C  0008               	return
 13124  1C4D                     __end_of_Flash_Memory_Read:	
 13125                           
 13126                           	psect	text84
 13127  047E                     __ptext84:	
 13128 ;; *************** function _Exception_Main *****************
 13129 ;; Defined at:
 13130 ;;		line 499 in file "../src/main_B1.c"
 13131 ;; Parameters:    Size  Location     Type
 13132 ;;		None
 13133 ;; Auto vars:     Size  Location     Type
 13134 ;;  i               2   20[BANK0 ] int 
 13135 ;;  i               2   18[BANK0 ] int 
 13136 ;;  lights          1   22[BANK0 ] unsigned char 
 13137 ;;  error           1   17[BANK0 ] unsigned char 
 13138 ;;  count           1   16[BANK0 ] unsigned char 
 13139 ;;  status          1   15[BANK0 ] unsigned char 
 13140 ;; Return value:  Size  Location     Type
 13141 ;;		None               void
 13142 ;; Registers used:
 13143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13144 ;; Tracked objects:
 13145 ;;		On entry : 0/0
 13146 ;;		On exit  : 0/0
 13147 ;;		Unchanged: 0/0
 13148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13150 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13152 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13153 ;;Total ram usage:        9 bytes
 13154 ;; Hardware stack levels used:    1
 13155 ;; Hardware stack levels required when called:    7
 13156 ;; This function calls:
 13157 ;;		_getDimmerLights_Line
 13158 ;;		_getDimmerLights_Status
 13159 ;;		_getMain_All_Error_Status
 13160 ;;		_getMain_All_LightsStatus
 13161 ;;		_setBuz
 13162 ;;		_setDimmerLights_SwOff
 13163 ;;		_setLED
 13164 ;; This function is called by:
 13165 ;;		_main
 13166 ;; This function uses a non-reentrant model
 13167 ;;
 13168                           
 13169                           
 13170                           ;psect for function _Exception_Main
 13171  047E                     _Exception_Main:	
 13172                           
 13173                           ;main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13174                           
 13175                           ;incstack = 0
 13176                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13177  047E  3000               	movlw	0
 13178  047F  319F  27CD  3184   	fcall	_getMain_All_Error_Status
 13179  0482  0020               	movlb	0	; select bank0
 13180  0483  00AE               	movwf	??_Exception_Main
 13181  0484  082E               	movf	??_Exception_Main,w
 13182  0485  00B1               	movwf	Exception_Main@error
 13183                           
 13184                           ;main_B1.c: 501: char lights = 0, count = 2;
 13185  0486  01B6               	clrf	Exception_Main@lights
 13186  0487  3002               	movlw	2
 13187  0488  00AE               	movwf	??_Exception_Main
 13188  0489  082E               	movf	??_Exception_Main,w
 13189  048A  00B0               	movwf	Exception_Main@count
 13190                           
 13191                           ;main_B1.c: 502: char status = 0;
 13192  048B  01AF               	clrf	Exception_Main@status
 13193                           
 13194                           ;main_B1.c: 504: if (myMain.Error_Run == 1) {
 13195  048C  0021               	movlb	1	; select bank1
 13196  048D  1DB8               	btfss	(_myMain^(0+128)+10),3
 13197  048E  2C9E               	goto	l10538
 13198                           
 13199                           ;main_B1.c: 505: if (error == 0) {
 13200  048F  0020               	movlb	0	; select bank0
 13201  0490  08B1               	movf	Exception_Main@error,f
 13202  0491  1D03               	skipz
 13203  0492  0008               	return
 13204                           
 13205                           ;main_B1.c: 506: myMain.Error_Run = 0;
 13206  0493  0021               	movlb	1	; select bank1
 13207  0494  11B8               	bcf	(_myMain^(0+128)+10),3
 13208                           
 13209                           ;main_B1.c: 509: setLED(99, 10);
 13210  0495  300A               	movlw	10
 13211  0496  0020               	movlb	0	; select bank0
 13212  0497  00AE               	movwf	??_Exception_Main
 13213  0498  082E               	movf	??_Exception_Main,w
 13214  0499  00A3               	movwf	setLED@command
 13215  049A  3063               	movlw	99
 13216  049B  3193  2302         	fcall	_setLED
 13217                           
 13218                           ;main_B1.c: 522: }
 13219                           ;main_B1.c: 523: } else {
 13220  049D  0008               	return
 13221  049E                     l10538:	
 13222                           
 13223                           ;main_B1.c: 524: if (error != 0) {
 13224  049E  0020               	movlb	0	; select bank0
 13225  049F  0831               	movf	Exception_Main@error,w
 13226  04A0  1903               	btfsc	3,2
 13227  04A1  0008               	return
 13228                           
 13229                           ;main_B1.c: 525: myMain.Error_Run = 1;
 13230  04A2  0021               	movlb	1	; select bank1
 13231  04A3  15B8               	bsf	(_myMain^(0+128)+10),3
 13232                           
 13233                           ;main_B1.c: 527: setLED(99, 11);
 13234  04A4  300B               	movlw	11
 13235  04A5  0020               	movlb	0	; select bank0
 13236  04A6  00AE               	movwf	??_Exception_Main
 13237  04A7  082E               	movf	??_Exception_Main,w
 13238  04A8  00A3               	movwf	setLED@command
 13239  04A9  3063               	movlw	99
 13240  04AA  3193  2302  3184   	fcall	_setLED
 13241                           
 13242                           ;main_B1.c: 538: switch (error) {
 13243  04AD  2D4A               	goto	l10586
 13244  04AE                     l10544:	
 13245                           ;main_B1.c: 539: case 2:
 13246                           
 13247                           
 13248                           ;main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13249  04AE  319A  22D6  3184   	fcall	_getMain_All_LightsStatus
 13250  04B1  3A01               	xorlw	1
 13251  04B2  1D03               	skipz
 13252  04B3  2CBD               	goto	l10548
 13253                           
 13254                           ;main_B1.c: 547: setBuz(10, 300);
 13255  04B4  302C               	movlw	44
 13256  04B5  0020               	movlb	0	; select bank0
 13257  04B6  00AA               	movwf	setBuz@time
 13258  04B7  3001               	movlw	1
 13259  04B8  00AB               	movwf	setBuz@time+1
 13260  04B9  300A               	movlw	10
 13261  04BA  3188  2000  3184   	fcall	_setBuz
 13262  04BD                     l10548:	
 13263                           
 13264                           ;main_B1.c: 548: }
 13265                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13266  04BD  0020               	movlb	0	; select bank0
 13267  04BE  01B2               	clrf	Exception_Main@i
 13268  04BF  01B3               	clrf	Exception_Main@i+1
 13269  04C0                     l10558:	
 13270  04C0  0833               	movf	Exception_Main@i+1,w
 13271  04C1  3A80               	xorlw	128
 13272  04C2  00AE               	movwf	??_Exception_Main
 13273  04C3  3080               	movlw	128
 13274  04C4  022E               	subwf	??_Exception_Main,w
 13275  04C5  1D03               	skipz
 13276  04C6  2CC9               	goto	u12805
 13277  04C7  0830               	movf	Exception_Main@count,w
 13278  04C8  0232               	subwf	Exception_Main@i,w
 13279  04C9                     u12805:	
 13280  04C9  1803               	btfsc	3,0
 13281  04CA  2CEB               	goto	u12800
 13282                           
 13283                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13284  04CB  0020               	movlb	0	; select bank0
 13285  04CC  0832               	movf	Exception_Main@i,w
 13286  04CD  3E01               	addlw	1
 13287  04CE  3199  21EF  3184   	fcall	_getDimmerLights_Status
 13288  04D1  3A01               	xorlw	1
 13289  04D2  1D03               	skipz
 13290  04D3  2CE5               	goto	l10556
 13291                           
 13292                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13293  04D4  0021               	movlb	1	; select bank1
 13294  04D5  0855               	movf	_DimmerLights^(0+128),w
 13295  04D6  0086               	movwf	6
 13296  04D7  3001               	movlw	1	; select bank2/3
 13297  04D8  0087               	movwf	7
 13298  04D9  1401               	bsf	1,0
 13299                           
 13300                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13301  04DA  0A55               	incf	_DimmerLights^(0+128),w
 13302  04DB  0086               	movwf	6
 13303  04DC  3001               	movlw	1	; select bank2/3
 13304  04DD  0087               	movwf	7
 13305  04DE  1001               	bcf	1,0
 13306                           
 13307                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13308  04DF  0020               	movlb	0	; select bank0
 13309  04E0  0832               	movf	Exception_Main@i,w
 13310  04E1  3E01               	addlw	1
 13311  04E2  3190  207E  3184   	fcall	_setDimmerLights_SwOff
 13312  04E5                     l10556:	
 13313  04E5  3001               	movlw	1
 13314  04E6  0020               	movlb	0	; select bank0
 13315  04E7  07B2               	addwf	Exception_Main@i,f
 13316  04E8  3000               	movlw	0
 13317  04E9  3DB3               	addwfc	Exception_Main@i+1,f
 13318  04EA  2CC0               	goto	l10558
 13319  04EB                     u12800:	
 13320  04EB  0020               	movlb	0	; select bank0
 13321  04EC  0008               	return
 13322  04ED                     l10560:	
 13323                           ;main_B1.c: 561: case 3:
 13324                           
 13325                           ;main_B1.c: 556: }
 13326                           ;main_B1.c: 557: }
 13327                           ;main_B1.c: 560: break;
 13328                           
 13329                           
 13330                           ;main_B1.c: 563: setBuz(5, 300);
 13331  04ED  302C               	movlw	44
 13332  04EE  0020               	movlb	0	; select bank0
 13333  04EF  00AA               	movwf	setBuz@time
 13334  04F0  3001               	movlw	1
 13335  04F1  00AB               	movwf	setBuz@time+1
 13336  04F2  3005               	movlw	5
 13337  04F3  3188  2000  3184   	fcall	_setBuz
 13338                           
 13339                           ;main_B1.c: 564: lights = getDimmerLights_Line();
 13340  04F6  319A  22FC  3184   	fcall	_getDimmerLights_Line
 13341  04F9  0020               	movlb	0	; select bank0
 13342  04FA  00AE               	movwf	??_Exception_Main
 13343  04FB  082E               	movf	??_Exception_Main,w
 13344  04FC  00B6               	movwf	Exception_Main@lights
 13345                           
 13346                           ;main_B1.c: 565: if (lights == 0) {
 13347  04FD  08B6               	movf	Exception_Main@lights,f
 13348  04FE  1D03               	skipz
 13349  04FF  2D2F               	goto	l10578
 13350                           
 13351                           ;main_B1.c: 567: for (int i = 0; i < count; i++) {
 13352  0500  01B4               	clrf	Exception_Main@i_6906
 13353  0501  01B5               	clrf	Exception_Main@i_6906+1
 13354  0502                     l10576:	
 13355  0502  0835               	movf	Exception_Main@i_6906+1,w
 13356  0503  3A80               	xorlw	128
 13357  0504  00AE               	movwf	??_Exception_Main
 13358  0505  3080               	movlw	128
 13359  0506  022E               	subwf	??_Exception_Main,w
 13360  0507  1D03               	skipz
 13361  0508  2D0B               	goto	u12835
 13362  0509  0830               	movf	Exception_Main@count,w
 13363  050A  0234               	subwf	Exception_Main@i_6906,w
 13364  050B                     u12835:	
 13365  050B  1803               	btfsc	3,0
 13366  050C  2D2D               	goto	u12830
 13367                           
 13368                           ;main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13369  050D  0020               	movlb	0	; select bank0
 13370  050E  0834               	movf	Exception_Main@i_6906,w
 13371  050F  3E01               	addlw	1
 13372  0510  3199  21EF  3184   	fcall	_getDimmerLights_Status
 13373  0513  3A01               	xorlw	1
 13374  0514  1D03               	skipz
 13375  0515  2D27               	goto	l10574
 13376                           
 13377                           ;main_B1.c: 570: DimmerLights->SwFlag = 1;
 13378  0516  0021               	movlb	1	; select bank1
 13379  0517  0855               	movf	_DimmerLights^(0+128),w
 13380  0518  0086               	movwf	6
 13381  0519  3001               	movlw	1	; select bank2/3
 13382  051A  0087               	movwf	7
 13383  051B  1401               	bsf	1,0
 13384                           
 13385                           ;main_B1.c: 571: DimmerLights->Status = 0;
 13386  051C  0A55               	incf	_DimmerLights^(0+128),w
 13387  051D  0086               	movwf	6
 13388  051E  3001               	movlw	1	; select bank2/3
 13389  051F  0087               	movwf	7
 13390  0520  1001               	bcf	1,0
 13391                           
 13392                           ;main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13393  0521  0020               	movlb	0	; select bank0
 13394  0522  0834               	movf	Exception_Main@i_6906,w
 13395  0523  3E01               	addlw	1
 13396  0524  3190  207E  3184   	fcall	_setDimmerLights_SwOff
 13397  0527                     l10574:	
 13398  0527  3001               	movlw	1
 13399  0528  0020               	movlb	0	; select bank0
 13400  0529  07B4               	addwf	Exception_Main@i_6906,f
 13401  052A  3000               	movlw	0
 13402  052B  3DB5               	addwfc	Exception_Main@i_6906+1,f
 13403  052C  2D02               	goto	l10576
 13404  052D                     u12830:	
 13405  052D  0020               	movlb	0	; select bank0
 13406  052E  0008               	return
 13407  052F                     l10578:	
 13408                           ;main_B1.c: 573: }
 13409                           ;main_B1.c: 574: }
 13410                           ;main_B1.c: 575: } else {
 13411                           
 13412                           
 13413                           ;main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13414  052F  0020               	movlb	0	; select bank0
 13415  0530  0836               	movf	Exception_Main@lights,w
 13416  0531  3199  21EF  3184   	fcall	_getDimmerLights_Status
 13417  0534  3A01               	xorlw	1
 13418  0535  1903               	btfsc	3,2
 13419  0536  2D39               	goto	l10580
 13420  0537  0020               	movlb	0	; select bank0
 13421  0538  0008               	return
 13422  0539                     l10580:	
 13423                           
 13424                           ;main_B1.c: 579: DimmerLights->SwFlag = 1;
 13425  0539  0021               	movlb	1	; select bank1
 13426  053A  0855               	movf	_DimmerLights^(0+128),w
 13427  053B  0086               	movwf	6
 13428  053C  3001               	movlw	1	; select bank2/3
 13429  053D  0087               	movwf	7
 13430  053E  1401               	bsf	1,0
 13431                           
 13432                           ;main_B1.c: 580: DimmerLights->Status = 0;
 13433  053F  0A55               	incf	_DimmerLights^(0+128),w
 13434  0540  0086               	movwf	6
 13435  0541  3001               	movlw	1	; select bank2/3
 13436  0542  0087               	movwf	7
 13437  0543  1001               	bcf	1,0
 13438                           
 13439                           ;main_B1.c: 581: setDimmerLights_SwOff(lights);
 13440  0544  0020               	movlb	0	; select bank0
 13441  0545  0836               	movf	Exception_Main@lights,w
 13442  0546  3190  207E         	fcall	_setDimmerLights_SwOff
 13443  0548  0020               	movlb	0	; select bank0
 13444  0549  0008               	return
 13445  054A                     l10586:	
 13446                           ;main_B1.c: 586: }
 13447                           
 13448                           ;main_B1.c: 582: }
 13449                           ;main_B1.c: 583: }
 13450                           ;main_B1.c: 585: break;
 13451                           
 13452  054A  0020               	movlb	0	; select bank0
 13453  054B  0831               	movf	Exception_Main@error,w
 13454                           
 13455                           ; Switch size 1, requested type "space"
 13456                           ; Number of cases is 2, Range of values is 2 to 3
 13457                           ; switch strategies available:
 13458                           ; Name         Instructions Cycles
 13459                           ; simple_byte            7     4 (average)
 13460                           ; direct_byte           13     9 (fixed)
 13461                           ; jumptable            263     9 (fixed)
 13462                           ;	Chosen strategy is simple_byte
 13463  054C  3A02               	xorlw	2	; case 2
 13464  054D  1903               	skipnz
 13465  054E  2CAE               	goto	l10544
 13466  054F  3A01               	xorlw	1	; case 3
 13467  0550  1903               	skipnz
 13468  0551  2CED               	goto	l10560
 13469  0552  2D54               	goto	l2912
 13470  0553  0008               	return
 13471  0554                     l2912:	
 13472  0554  0008               	return
 13473  0555                     __end_of_Exception_Main:	
 13474                           
 13475                           	psect	text85
 13476  1AFC                     __ptext85:	
 13477 ;; *************** function _getDimmerLights_Line *****************
 13478 ;; Defined at:
 13479 ;;		line 1031 in file "../src/Dimmer_B1.c"
 13480 ;; Parameters:    Size  Location     Type
 13481 ;;		None
 13482 ;; Auto vars:     Size  Location     Type
 13483 ;;  line            1    2[BANK0 ] unsigned char 
 13484 ;; Return value:  Size  Location     Type
 13485 ;;                  1    wreg      unsigned char 
 13486 ;; Registers used:
 13487 ;;		wreg, status,2
 13488 ;; Tracked objects:
 13489 ;;		On entry : 0/0
 13490 ;;		On exit  : 0/0
 13491 ;;		Unchanged: 0/0
 13492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13496 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13497 ;;Total ram usage:        2 bytes
 13498 ;; Hardware stack levels used:    1
 13499 ;; Hardware stack levels required when called:    5
 13500 ;; This function calls:
 13501 ;;		Nothing
 13502 ;; This function is called by:
 13503 ;;		_Exception_Main
 13504 ;; This function uses a non-reentrant model
 13505 ;;
 13506                           
 13507                           
 13508                           ;psect for function _getDimmerLights_Line
 13509  1AFC                     _getDimmerLights_Line:	
 13510                           
 13511                           ;Dimmer_B1.c: 1032: char line = 0;
 13512                           
 13513                           ;incstack = 0
 13514                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13515  1AFC  0020               	movlb	0	; select bank0
 13516  1AFD  01A2               	clrf	getDimmerLights_Line@line
 13517                           
 13518                           ;Dimmer_B1.c: 1034: if (DimmerLights1.Line == 1) {
 13519  1AFE  0022               	movlb	2	; select bank2
 13520  1AFF  1CE9               	btfss	(_DimmerLights1^(0+256)+1),1
 13521  1B00  2B05               	goto	l917
 13522                           
 13523                           ;Dimmer_B1.c: 1035: line = 1;
 13524  1B01  0020               	movlb	0	; select bank0
 13525  1B02  01A2               	clrf	getDimmerLights_Line@line
 13526  1B03  0AA2               	incf	getDimmerLights_Line@line,f
 13527                           
 13528                           ;Dimmer_B1.c: 1036: }
 13529  1B04  2B0D               	goto	l918
 13530  1B05                     l917:	
 13531                           
 13532                           ;Dimmer_B1.c: 1039: else if (DimmerLights2.Line == 1) {
 13533  1B05  0023               	movlb	3	; select bank3
 13534  1B06  1CD1               	btfss	(_DimmerLights2^(0+384)+1),1
 13535  1B07  2B0D               	goto	l918
 13536                           
 13537                           ;Dimmer_B1.c: 1040: line = 2;
 13538  1B08  3002               	movlw	2
 13539  1B09  0020               	movlb	0	; select bank0
 13540  1B0A  00A1               	movwf	??_getDimmerLights_Line
 13541  1B0B  0821               	movf	??_getDimmerLights_Line,w
 13542  1B0C  00A2               	movwf	getDimmerLights_Line@line
 13543  1B0D                     l918:	
 13544                           
 13545                           ;Dimmer_B1.c: 1041: }
 13546                           ;Dimmer_B1.c: 1048: return line;
 13547  1B0D  0020               	movlb	0	; select bank0
 13548  1B0E  0822               	movf	getDimmerLights_Line@line,w
 13549  1B0F  0008               	return
 13550  1B10                     __end_of_getDimmerLights_Line:	
 13551                           
 13552                           	psect	text86
 13553  1D6F                     __ptext86:	
 13554 ;; *************** function _DimmerLights_Main *****************
 13555 ;; Defined at:
 13556 ;;		line 771 in file "../src/Dimmer_B1.c"
 13557 ;; Parameters:    Size  Location     Type
 13558 ;;		None
 13559 ;; Auto vars:     Size  Location     Type
 13560 ;;		None
 13561 ;; Return value:  Size  Location     Type
 13562 ;;		None               void
 13563 ;; Registers used:
 13564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13565 ;; Tracked objects:
 13566 ;;		On entry : 0/0
 13567 ;;		On exit  : 0/0
 13568 ;;		Unchanged: 0/0
 13569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13574 ;;Total ram usage:        0 bytes
 13575 ;; Hardware stack levels used:    1
 13576 ;; Hardware stack levels required when called:   10
 13577 ;; This function calls:
 13578 ;;		_getLoad_OK
 13579 ;;		_getMain_All_Error_Status
 13580 ;;		_getMain_All_LightsStatus
 13581 ;;		_setDimmerLights_Main
 13582 ;; This function is called by:
 13583 ;;		_main
 13584 ;; This function uses a non-reentrant model
 13585 ;;
 13586                           
 13587                           
 13588                           ;psect for function _DimmerLights_Main
 13589  1D6F                     _DimmerLights_Main:	
 13590                           
 13591                           ;Dimmer_B1.c: 774: if (Dimmer.LoadGO == 1) {
 13592                           
 13593                           ;incstack = 0
 13594                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13595  1D6F  0022               	movlb	2	; select bank2
 13596  1D70  1CAC               	btfss	_Dimmer^(0+256),1
 13597  1D71  2D87               	goto	l10292
 13598                           
 13599                           ;Dimmer_B1.c: 775: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13600  1D72  3199  2101  319D   	fcall	_getLoad_OK
 13601  1D75  3A01               	xorlw	1
 13602  1D76  1903               	skipnz
 13603  1D77  2D85               	goto	l859
 13604  1D78  3000               	movlw	0
 13605  1D79  319F  27CD  319D   	fcall	_getMain_All_Error_Status
 13606  1D7C  3800               	iorlw	0
 13607  1D7D  1D03               	skipz
 13608  1D7E  2D85               	goto	l859
 13609  1D7F  319A  22D6  319D   	fcall	_getMain_All_LightsStatus
 13610  1D82  3800               	iorlw	0
 13611  1D83  1D03               	skipz
 13612  1D84  2D87               	goto	l10292
 13613  1D85                     l859:	
 13614                           
 13615                           ;Dimmer_B1.c: 776: Dimmer.LoadGO = 0;
 13616  1D85  0022               	movlb	2	; select bank2
 13617  1D86  10AC               	bcf	_Dimmer^(0+256),1
 13618  1D87                     l10292:	
 13619                           
 13620                           ;Dimmer_B1.c: 777: }
 13621                           ;Dimmer_B1.c: 778: }
 13622                           ;Dimmer_B1.c: 782: setDimmerLights_Main(1);
 13623  1D87  3001               	movlw	1
 13624  1D88  3196  264E  319D   	fcall	_setDimmerLights_Main
 13625                           
 13626                           ;Dimmer_B1.c: 786: setDimmerLights_Main(2);
 13627  1D8B  3002               	movlw	2
 13628  1D8C  3196  264E         	fcall	_setDimmerLights_Main
 13629  1D8E  0008               	return
 13630  1D8F                     __end_of_DimmerLights_Main:	
 13631                           
 13632                           	psect	text87
 13633  164E                     __ptext87:	
 13634 ;; *************** function _setDimmerLights_Main *****************
 13635 ;; Defined at:
 13636 ;;		line 800 in file "../src/Dimmer_B1.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;  lights          1    wreg     unsigned char 
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;  lights          1    4[BANK1 ] unsigned char 
 13641 ;; Return value:  Size  Location     Type
 13642 ;;		None               void
 13643 ;; Registers used:
 13644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13645 ;; Tracked objects:
 13646 ;;		On entry : 0/0
 13647 ;;		On exit  : 0/0
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;Total ram usage:        1 bytes
 13655 ;; Hardware stack levels used:    1
 13656 ;; Hardware stack levels required when called:    9
 13657 ;; This function calls:
 13658 ;;		_DimmerLights_SelectPointer
 13659 ;;		_getDimmerLights_Allow_Condition
 13660 ;;		_getMain_All_LightsStatus
 13661 ;;		_setDimmerLights_Dimming
 13662 ;;		_setDimmerLights_OnOff
 13663 ;; This function is called by:
 13664 ;;		_DimmerLights_Main
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           
 13669                           ;psect for function _setDimmerLights_Main
 13670  164E                     _setDimmerLights_Main:	
 13671                           
 13672                           ;incstack = 0
 13673                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13674                           ;setDimmerLights_Main@lights stored from wreg
 13675  164E  0021               	movlb	1	; select bank1
 13676  164F  00E9               	movwf	setDimmerLights_Main@lights^(0+128)
 13677                           
 13678                           ;Dimmer_B1.c: 802: DimmerLights_SelectPointer(lights);
 13679  1650  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13680  1651  319B  23A5  3196   	fcall	_DimmerLights_SelectPointer
 13681                           
 13682                           ;Dimmer_B1.c: 803: if (DimmerLights->Trigger == 1) {
 13683  1654  0021               	movlb	1	; select bank1
 13684  1655  0855               	movf	_DimmerLights^(0+128),w
 13685  1656  0086               	movwf	6
 13686  1657  3001               	movlw	1	; select bank2/3
 13687  1658  0087               	movwf	7
 13688  1659  1C81               	btfss	1,1
 13689  165A  2E7A               	goto	l10026
 13690                           
 13691                           ;Dimmer_B1.c: 804: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13692  165B  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13693  165C  3190  20F3  3196   	fcall	_getDimmerLights_Allow_Condition
 13694  165F  3800               	iorlw	0
 13695  1660  1D03               	skipz
 13696  1661  0008               	return
 13697                           
 13698                           ;Dimmer_B1.c: 805: DimmerLights->Trigger = 0;
 13699  1662  0021               	movlb	1	; select bank1
 13700  1663  0855               	movf	_DimmerLights^(0+128),w
 13701  1664  0086               	movwf	6
 13702  1665  3001               	movlw	1	; select bank2/3
 13703  1666  0087               	movwf	7
 13704  1667  1081               	bcf	1,1
 13705                           
 13706                           ;Dimmer_B1.c: 806: if (DimmerLights->Switch == 1) {
 13707  1668  0855               	movf	_DimmerLights^(0+128),w
 13708  1669  0086               	movwf	6
 13709  166A  3001               	movlw	1	; select bank2/3
 13710  166B  0087               	movwf	7
 13711  166C  1D01               	btfss	1,2
 13712  166D  2E74               	goto	l10024
 13713                           
 13714                           ;Dimmer_B1.c: 807: setDimmerLights_OnOff(lights, 1);
 13715  166E  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13716  166F  0AE5               	incf	setDimmerLights_OnOff@command^(0+128),f
 13717  1670  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13718  1671  3186  26F4         	fcall	_setDimmerLights_OnOff
 13719                           
 13720                           ;Dimmer_B1.c: 808: } else {
 13721  1673  0008               	return
 13722  1674                     l10024:	
 13723                           
 13724                           ;Dimmer_B1.c: 809: setDimmerLights_OnOff(lights, 0);
 13725  1674  0021               	movlb	1	; select bank1
 13726  1675  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13727  1676  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13728  1677  3186  26F4         	fcall	_setDimmerLights_OnOff
 13729                           
 13730                           ;Dimmer_B1.c: 810: }
 13731                           ;Dimmer_B1.c: 811: }
 13732                           ;Dimmer_B1.c: 812: } else {
 13733  1679  0008               	return
 13734  167A                     l10026:	
 13735                           
 13736                           ;Dimmer_B1.c: 813: if (getMain_All_LightsStatus() == 1) {
 13737  167A  319A  22D6  3196   	fcall	_getMain_All_LightsStatus
 13738  167D  3A01               	xorlw	1
 13739  167E  1D03               	skipz
 13740  167F  2EA9               	goto	l10038
 13741                           
 13742                           ;Dimmer_B1.c: 814: if (DimmerLights->DimmingTrigger == 1) {
 13743  1680  0021               	movlb	1	; select bank1
 13744  1681  0855               	movf	_DimmerLights^(0+128),w
 13745  1682  0086               	movwf	6
 13746  1683  3001               	movlw	1	; select bank2/3
 13747  1684  0087               	movwf	7
 13748  1685  1E01               	btfss	1,4
 13749  1686  0008               	return
 13750                           
 13751                           ;Dimmer_B1.c: 815: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13752  1687  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13753  1688  3190  20F3  3196   	fcall	_getDimmerLights_Allow_Condition
 13754  168B  3800               	iorlw	0
 13755  168C  1D03               	skipz
 13756  168D  0008               	return
 13757                           
 13758                           ;Dimmer_B1.c: 816: DimmerLights->DimmingTrigger = 0;
 13759  168E  0021               	movlb	1	; select bank1
 13760  168F  0855               	movf	_DimmerLights^(0+128),w
 13761  1690  0086               	movwf	6
 13762  1691  3001               	movlw	1	; select bank2/3
 13763  1692  0087               	movwf	7
 13764  1693  1201               	bcf	1,4
 13765                           
 13766                           ;Dimmer_B1.c: 817: if (DimmerLights->DimmingSwitch == 1) {
 13767  1694  0855               	movf	_DimmerLights^(0+128),w
 13768  1695  0086               	movwf	6
 13769  1696  3001               	movlw	1	; select bank2/3
 13770  1697  0087               	movwf	7
 13771  1698  1E81               	btfss	1,5
 13772  1699  2EA2               	goto	l10036
 13773                           
 13774                           ;Dimmer_B1.c: 818: setDimmerLights_Dimming(lights, 1);
 13775  169A  0020               	movlb	0	; select bank0
 13776  169B  01EB               	clrf	setDimmerLights_Dimming@status
 13777  169C  0AEB               	incf	setDimmerLights_Dimming@status,f
 13778  169D  0021               	movlb	1	; select bank1
 13779  169E  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13780  169F  3194  2460         	fcall	_setDimmerLights_Dimming
 13781                           
 13782                           ;Dimmer_B1.c: 819: } else {
 13783  16A1  0008               	return
 13784  16A2                     l10036:	
 13785                           
 13786                           ;Dimmer_B1.c: 820: setDimmerLights_Dimming(lights, 0);
 13787  16A2  0020               	movlb	0	; select bank0
 13788  16A3  01EB               	clrf	setDimmerLights_Dimming@status
 13789  16A4  0021               	movlb	1	; select bank1
 13790  16A5  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13791  16A6  3194  2460         	fcall	_setDimmerLights_Dimming
 13792                           
 13793                           ;Dimmer_B1.c: 821: }
 13794                           ;Dimmer_B1.c: 822: }
 13795                           ;Dimmer_B1.c: 823: }
 13796                           ;Dimmer_B1.c: 824: } else {
 13797  16A8  0008               	return
 13798  16A9                     l10038:	
 13799                           
 13800                           ;Dimmer_B1.c: 825: if (DimmerLights->DimmingTrigger == 1) {
 13801  16A9  0021               	movlb	1	; select bank1
 13802  16AA  0855               	movf	_DimmerLights^(0+128),w
 13803  16AB  0086               	movwf	6
 13804  16AC  3001               	movlw	1	; select bank2/3
 13805  16AD  0087               	movwf	7
 13806  16AE  1E01               	btfss	1,4
 13807  16AF  0008               	return
 13808                           
 13809                           ;Dimmer_B1.c: 826: DimmerLights->DimmingTrigger = 0;
 13810  16B0  0855               	movf	_DimmerLights^(0+128),w
 13811  16B1  0086               	movwf	6
 13812  16B2  3001               	movlw	1	; select bank2/3
 13813  16B3  0087               	movwf	7
 13814  16B4  1201               	bcf	1,4
 13815  16B5  0008               	return
 13816  16B6                     __end_of_setDimmerLights_Main:	
 13817                           
 13818                           	psect	text88
 13819  06F4                     __ptext88:	
 13820 ;; *************** function _setDimmerLights_OnOff *****************
 13821 ;; Defined at:
 13822 ;;		line 834 in file "../src/Dimmer_B1.c"
 13823 ;; Parameters:    Size  Location     Type
 13824 ;;  lights          1    wreg     unsigned char 
 13825 ;;  command         1    0[BANK1 ] unsigned char 
 13826 ;; Auto vars:     Size  Location     Type
 13827 ;;  lights          1    3[BANK1 ] unsigned char 
 13828 ;; Return value:  Size  Location     Type
 13829 ;;		None               void
 13830 ;; Registers used:
 13831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13832 ;; Tracked objects:
 13833 ;;		On entry : 0/0
 13834 ;;		On exit  : 0/0
 13835 ;;		Unchanged: 0/0
 13836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13837 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;Total ram usage:        4 bytes
 13842 ;; Hardware stack levels used:    1
 13843 ;; Hardware stack levels required when called:    8
 13844 ;; This function calls:
 13845 ;;		_getCmd_Status
 13846 ;;		_getDelayOff_GO
 13847 ;;		_getDimmerLights_PercentToValue
 13848 ;;		_getMain_All_LightsStatus
 13849 ;;		_setCmd_Status
 13850 ;;		_setDelayOff_GO
 13851 ;;		_setDimmerIntr_ControlStatus
 13852 ;;		_setDimmerIntr_DimmingValue
 13853 ;;		_setDimmerIntr_Dimming_RF
 13854 ;;		_setDimmerIntr_MaxmumValue
 13855 ;;		_setDimmerLights_Line
 13856 ;;		_setLED
 13857 ;;		_setProductData
 13858 ;;		_setRF_DimmerLights
 13859 ;;		_setTxData
 13860 ;; This function is called by:
 13861 ;;		_setDimmerLights_Main
 13862 ;; This function uses a non-reentrant model
 13863 ;;
 13864                           
 13865                           
 13866                           ;psect for function _setDimmerLights_OnOff
 13867  06F4                     _setDimmerLights_OnOff:	
 13868                           
 13869                           ;incstack = 0
 13870                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13871                           ;setDimmerLights_OnOff@lights stored from wreg
 13872  06F4  0021               	movlb	1	; select bank1
 13873  06F5  00E8               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13874                           
 13875                           ;Dimmer_B1.c: 836: if (command == 1) {
 13876  06F6  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13877  06F7  3A01               	xorlw	1
 13878  06F8  1D03               	skipz
 13879  06F9  2F53               	goto	l9866
 13880                           
 13881                           ;Dimmer_B1.c: 837: setDimmerIntr_ControlStatus(lights, 1);
 13882  06FA  0020               	movlb	0	; select bank0
 13883  06FB  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13884  06FC  0AA1               	incf	setDimmerIntr_ControlStatus@command,f
 13885  06FD  0021               	movlb	1	; select bank1
 13886  06FE  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13887  06FF  319F  2740  3186   	fcall	_setDimmerIntr_ControlStatus
 13888                           
 13889                           ;Dimmer_B1.c: 840: Dimmer.Load_Status = 1;
 13890  0702  0022               	movlb	2	; select bank2
 13891  0703  152C               	bsf	_Dimmer^(0+256),2
 13892                           
 13893                           ;Dimmer_B1.c: 841: setDimmerLights_Line(lights);
 13894  0704  0021               	movlb	1	; select bank1
 13895  0705  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13896  0706  319C  24B9  3186   	fcall	_setDimmerLights_Line
 13897                           
 13898                           ;Dimmer_B1.c: 847: setLED(lights, 0);
 13899  0709  0020               	movlb	0	; select bank0
 13900  070A  01A3               	clrf	setLED@command
 13901  070B  0021               	movlb	1	; select bank1
 13902  070C  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13903  070D  3193  2302  3186   	fcall	_setLED
 13904                           
 13905                           ;Dimmer_B1.c: 868: if (DimmerLights->DimmingRun == 1) {
 13906  0710  0021               	movlb	1	; select bank1
 13907  0711  0A55               	incf	_DimmerLights^(0+128),w
 13908  0712  0086               	movwf	6
 13909  0713  3001               	movlw	1	; select bank2/3
 13910  0714  0087               	movwf	7
 13911  0715  1F01               	btfss	1,6
 13912  0716  2F3B               	goto	l9864
 13913                           
 13914                           ;Dimmer_B1.c: 869: DimmerLights->DimmingRun = 0;
 13915  0717  0A55               	incf	_DimmerLights^(0+128),w
 13916  0718  0086               	movwf	6
 13917  0719  3001               	movlw	1	; select bank2/3
 13918  071A  0087               	movwf	7
 13919  071B  1301               	bcf	1,6
 13920                           
 13921                           ;Dimmer_B1.c: 870: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13922  071C  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13923  071D  3E14               	addlw	20
 13924  071E  076D               	addwf	_product^(0+128),w
 13925  071F  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13926  0720  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13927  0721  0086               	movwf	6
 13928  0722  3002               	movlw	2	; select bank4/5
 13929  0723  0087               	movwf	7
 13930  0724  0801               	movf	1,w
 13931  0725  3195  251F  3186   	fcall	_getDimmerLights_PercentToValue
 13932  0728  0021               	movlb	1	; select bank1
 13933  0729  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13934  072A  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13935  072B  0020               	movlb	0	; select bank0
 13936  072C  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13937  072D  0021               	movlb	1	; select bank1
 13938  072E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13939  072F  319B  23BC  3186   	fcall	_setDimmerIntr_MaxmumValue
 13940                           
 13941                           ;Dimmer_B1.c: 871: setDimmerIntr_Dimming_RF(lights, 1);
 13942  0732  0020               	movlb	0	; select bank0
 13943  0733  01A1               	clrf	setDimmerIntr_Dimming_RF@command
 13944  0734  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
 13945  0735  0021               	movlb	1	; select bank1
 13946  0736  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13947  0737  319F  276F  3186   	fcall	_setDimmerIntr_Dimming_RF
 13948                           
 13949                           ;Dimmer_B1.c: 872: } else {
 13950  073A  2F8B               	goto	l9884
 13951  073B                     l9864:	
 13952                           
 13953                           ;Dimmer_B1.c: 873: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13954  073B  0021               	movlb	1	; select bank1
 13955  073C  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13956  073D  3E14               	addlw	20
 13957  073E  076D               	addwf	_product^(0+128),w
 13958  073F  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13959  0740  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13960  0741  0086               	movwf	6
 13961  0742  3002               	movlw	2	; select bank4/5
 13962  0743  0087               	movwf	7
 13963  0744  0801               	movf	1,w
 13964  0745  3195  251F  3186   	fcall	_getDimmerLights_PercentToValue
 13965  0748  0021               	movlb	1	; select bank1
 13966  0749  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13967  074A  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13968  074B  0020               	movlb	0	; select bank0
 13969  074C  00E3               	movwf	setDimmerIntr_DimmingValue@value
 13970  074D  0021               	movlb	1	; select bank1
 13971  074E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13972  074F  319B  23D3  3186   	fcall	_setDimmerIntr_DimmingValue
 13973                           
 13974                           ;Dimmer_B1.c: 876: }
 13975                           ;Dimmer_B1.c: 881: } else if (command == 0) {
 13976  0752  2F8B               	goto	l9884
 13977  0753                     l9866:	
 13978  0753  0021               	movlb	1	; select bank1
 13979  0754  08E5               	movf	setDimmerLights_OnOff@command^(0+128),f
 13980  0755  1D03               	skipz
 13981  0756  2F8B               	goto	l9884
 13982                           
 13983                           ;Dimmer_B1.c: 882: setDimmerIntr_ControlStatus(lights, 0);
 13984  0757  0020               	movlb	0	; select bank0
 13985  0758  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13986  0759  0021               	movlb	1	; select bank1
 13987  075A  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13988  075B  319F  2740  3186   	fcall	_setDimmerIntr_ControlStatus
 13989                           
 13990                           ;Dimmer_B1.c: 884: Dimmer.Load_Status = 0;
 13991  075E  0022               	movlb	2	; select bank2
 13992  075F  112C               	bcf	_Dimmer^(0+256),2
 13993                           
 13994                           ;Dimmer_B1.c: 885: setDimmerLights_Line(0);
 13995  0760  3000               	movlw	0
 13996  0761  319C  24B9  3186   	fcall	_setDimmerLights_Line
 13997                           
 13998                           ;Dimmer_B1.c: 889: if (getDelayOff_GO(lights) == 1) {
 13999  0764  0021               	movlb	1	; select bank1
 14000  0765  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14001  0766  319A  2200  3186   	fcall	_getDelayOff_GO
 14002  0769  3A01               	xorlw	1
 14003  076A  1D03               	skipz
 14004  076B  2F74               	goto	l883
 14005                           
 14006                           ;Dimmer_B1.c: 890: setDelayOff_GO(lights, 0, 0);
 14007  076C  0020               	movlb	0	; select bank0
 14008  076D  01E6               	clrf	setDelayOff_GO@command
 14009  076E  01E7               	clrf	setDelayOff_GO@value
 14010  076F  0021               	movlb	1	; select bank1
 14011  0770  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14012  0771  318C  241F  3186   	fcall	_setDelayOff_GO
 14013  0774                     l883:	
 14014                           
 14015                           ;Dimmer_B1.c: 891: }
 14016                           ;Dimmer_B1.c: 896: setLED(lights, 1);
 14017  0774  0020               	movlb	0	; select bank0
 14018  0775  01A3               	clrf	setLED@command
 14019  0776  0AA3               	incf	setLED@command,f
 14020  0777  0021               	movlb	1	; select bank1
 14021  0778  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14022  0779  3193  2302  3186   	fcall	_setLED
 14023                           
 14024                           ;Dimmer_B1.c: 901: if (lights == 1) {
 14025  077C  0021               	movlb	1	; select bank1
 14026  077D  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14027  077E  3A01               	xorlw	1
 14028  077F  1D03               	skipz
 14029  0780  2F84               	goto	l9880
 14030                           
 14031                           ;Dimmer_B1.c: 902: RA7 = 0;
 14032  0781  0020               	movlb	0	; select bank0
 14033  0782  138C               	bcf	12,7	;volatile
 14034                           
 14035                           ;Dimmer_B1.c: 904: }
 14036  0783  2F8B               	goto	l9884
 14037  0784                     l9880:	
 14038                           
 14039                           ;Dimmer_B1.c: 907: else if (lights == 2) {
 14040  0784  0021               	movlb	1	; select bank1
 14041  0785  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14042  0786  3A02               	xorlw	2
 14043  0787  1D03               	skipz
 14044  0788  2F8B               	goto	l9884
 14045                           
 14046                           ;Dimmer_B1.c: 908: RB4 = 0;
 14047  0789  0020               	movlb	0	; select bank0
 14048  078A  120D               	bcf	13,4	;volatile
 14049  078B                     l9884:	
 14050                           
 14051                           ;Dimmer_B1.c: 909: }
 14052                           ;Dimmer_B1.c: 915: }
 14053                           ;Dimmer_B1.c: 918: setRF_DimmerLights(lights, command);
 14054  078B  0021               	movlb	1	; select bank1
 14055  078C  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 14056  078D  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 14057  078E  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 14058  078F  0020               	movlb	0	; select bank0
 14059  0790  00E6               	movwf	setRF_DimmerLights@on
 14060  0791  0021               	movlb	1	; select bank1
 14061  0792  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14062  0793  3195  25E9  3186   	fcall	_setRF_DimmerLights
 14063                           
 14064                           ;Dimmer_B1.c: 920: if (getCmd_Status(1) == 1) {
 14065  0796  3001               	movlw	1
 14066  0797  319A  2244  3186   	fcall	_getCmd_Status
 14067  079A  3A01               	xorlw	1
 14068  079B  1D03               	skipz
 14069  079C  2FB8               	goto	l9898
 14070                           
 14071                           ;Dimmer_B1.c: 921: if (getMain_All_LightsStatus() == 0) {
 14072  079D  319A  22D6  3186   	fcall	_getMain_All_LightsStatus
 14073  07A0  3800               	iorlw	0
 14074  07A1  1D03               	skipz
 14075  07A2  0008               	return
 14076                           
 14077                           ;Dimmer_B1.c: 922: setCmd_Status(1, 0);
 14078  07A3  0020               	movlb	0	; select bank0
 14079  07A4  01A1               	clrf	setCmd_Status@cmd
 14080  07A5  3001               	movlw	1
 14081  07A6  319C  2401  3186   	fcall	_setCmd_Status
 14082                           
 14083                           ;Dimmer_B1.c: 923: setProductData(11, 0);
 14084  07A9  0020               	movlb	0	; select bank0
 14085  07AA  01E3               	clrf	setProductData@value
 14086  07AB  300B               	movlw	11
 14087  07AC  3199  2173  3186   	fcall	_setProductData
 14088                           
 14089                           ;Dimmer_B1.c: 924: setProductData(17, 0);
 14090  07AF  0020               	movlb	0	; select bank0
 14091  07B0  01E3               	clrf	setProductData@value
 14092  07B1  3011               	movlw	17
 14093  07B2  3199  2173  3186   	fcall	_setProductData
 14094                           
 14095                           ;Dimmer_B1.c: 925: setTxData();
 14096  07B5  318F  2745         	fcall	_setTxData
 14097                           
 14098                           ;Dimmer_B1.c: 926: }
 14099                           ;Dimmer_B1.c: 927: } else {
 14100  07B7  0008               	return
 14101  07B8                     l9898:	
 14102                           
 14103                           ;Dimmer_B1.c: 928: setTxData();
 14104  07B8  318F  2745         	fcall	_setTxData
 14105  07BA  0008               	return
 14106  07BB                     __end_of_setDimmerLights_OnOff:	
 14107                           
 14108                           	psect	text89
 14109  1302                     __ptext89:	
 14110 ;; *************** function _setLED *****************
 14111 ;; Defined at:
 14112 ;;		line 81 in file "../src/LED_B1.c"
 14113 ;; Parameters:    Size  Location     Type
 14114 ;;  led             1    wreg     unsigned char 
 14115 ;;  command         1    3[BANK0 ] unsigned char 
 14116 ;; Auto vars:     Size  Location     Type
 14117 ;;  led             1    4[BANK0 ] unsigned char 
 14118 ;; Return value:  Size  Location     Type
 14119 ;;		None               void
 14120 ;; Registers used:
 14121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14122 ;; Tracked objects:
 14123 ;;		On entry : 0/0
 14124 ;;		On exit  : 0/0
 14125 ;;		Unchanged: 0/0
 14126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14127 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14130 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14131 ;;Total ram usage:        2 bytes
 14132 ;; Hardware stack levels used:    1
 14133 ;; Hardware stack levels required when called:    6
 14134 ;; This function calls:
 14135 ;;		_LedPointSelect
 14136 ;; This function is called by:
 14137 ;;		_setDimmerLights_OnOff
 14138 ;;		_setLED_Initialization
 14139 ;;		_setSw_Initialization
 14140 ;;		_Exception_Main
 14141 ;; This function uses a non-reentrant model
 14142 ;;
 14143                           
 14144                           
 14145                           ;psect for function _setLED
 14146  1302                     _setLED:	
 14147                           
 14148                           ;incstack = 0
 14149                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14150                           ;setLED@led stored from wreg
 14151  1302  0020               	movlb	0	; select bank0
 14152  1303  00A4               	movwf	setLED@led
 14153                           
 14154                           ;LED_B1.c: 82: LedPointSelect(led);
 14155  1304  0824               	movf	setLED@led,w
 14156  1305  319D  254F  3193   	fcall	_LedPointSelect
 14157                           
 14158                           ;LED_B1.c: 83: if (command == 0) {
 14159  1308  0020               	movlb	0	; select bank0
 14160  1309  08A3               	movf	setLED@command,f
 14161  130A  1D03               	skipz
 14162  130B  2B19               	goto	l7222
 14163                           
 14164                           ;LED_B1.c: 85: if (led == 1) {
 14165  130C  0824               	movf	setLED@led,w
 14166  130D  3A01               	xorlw	1
 14167  130E  1D03               	skipz
 14168  130F  2B11               	goto	l7214
 14169                           
 14170                           ;LED_B1.c: 89: RA3 = 1;
 14171  1310  158C               	bsf	12,3	;volatile
 14172  1311                     l7214:	
 14173                           
 14174                           ;LED_B1.c: 91: }
 14175                           ;LED_B1.c: 94: if (led == 2) {
 14176  1311  0824               	movf	setLED@led,w
 14177  1312  3A02               	xorlw	2
 14178  1313  1903               	btfsc	3,2
 14179                           
 14180                           ;LED_B1.c: 98: RC7 = 1;
 14181  1314  178E               	bsf	14,7	;volatile
 14182                           
 14183                           ;LED_B1.c: 100: }
 14184                           ;LED_B1.c: 112: if (led == 99) {
 14185  1315  0824               	movf	setLED@led,w
 14186  1316  3A63               	xorlw	99
 14187  1317  1903               	btfsc	3,2
 14188                           
 14189                           ;LED_B1.c: 116: RB5 = 1;
 14190  1318  168D               	bsf	13,5	;volatile
 14191  1319                     l7222:	
 14192                           
 14193                           ;LED_B1.c: 118: }
 14194                           ;LED_B1.c: 120: }
 14195                           ;LED_B1.c: 121: if (command == 1) {
 14196  1319  0823               	movf	setLED@command,w
 14197  131A  3A01               	xorlw	1
 14198  131B  1D03               	skipz
 14199  131C  2B2A               	goto	l7236
 14200                           
 14201                           ;LED_B1.c: 123: if (led == 1) {
 14202  131D  0824               	movf	setLED@led,w
 14203  131E  3A01               	xorlw	1
 14204  131F  1D03               	skipz
 14205  1320  2B22               	goto	l7228
 14206                           
 14207                           ;LED_B1.c: 127: RA3 = 0;
 14208  1321  118C               	bcf	12,3	;volatile
 14209  1322                     l7228:	
 14210                           
 14211                           ;LED_B1.c: 129: }
 14212                           ;LED_B1.c: 132: if (led == 2) {
 14213  1322  0824               	movf	setLED@led,w
 14214  1323  3A02               	xorlw	2
 14215  1324  1903               	btfsc	3,2
 14216                           
 14217                           ;LED_B1.c: 136: RC7 = 0;
 14218  1325  138E               	bcf	14,7	;volatile
 14219                           
 14220                           ;LED_B1.c: 138: }
 14221                           ;LED_B1.c: 150: if (led == 99) {
 14222  1326  0824               	movf	setLED@led,w
 14223  1327  3A63               	xorlw	99
 14224  1328  1903               	btfsc	3,2
 14225                           
 14226                           ;LED_B1.c: 154: RB5 = 0;
 14227  1329  128D               	bcf	13,5	;volatile
 14228  132A                     l7236:	
 14229                           
 14230                           ;LED_B1.c: 156: }
 14231                           ;LED_B1.c: 158: }
 14232                           ;LED_B1.c: 159: if (command == 10) {
 14233  132A  0823               	movf	setLED@command,w
 14234  132B  3A0A               	xorlw	10
 14235  132C  1D03               	skipz
 14236  132D  2B4A               	goto	l7252
 14237                           
 14238                           ;LED_B1.c: 160: LED->GO = 0;
 14239  132E  0021               	movlb	1	; select bank1
 14240  132F  0856               	movf	_LED^(0+128),w
 14241  1330  0086               	movwf	6
 14242  1331  3001               	movlw	1	; select bank2/3
 14243  1332  0087               	movwf	7
 14244  1333  1081               	bcf	1,1
 14245                           
 14246                           ;LED_B1.c: 161: LED->Time = 0;
 14247  1334  0A56               	incf	_LED^(0+128),w
 14248  1335  0086               	movwf	6
 14249  1336  3001               	movlw	1	; select bank2/3
 14250  1337  0087               	movwf	7
 14251  1338  3000               	movlw	0
 14252  1339  3FC0               	movwi [0]fsr1
 14253  133A  3FC1               	movwi [1]fsr1
 14254                           
 14255                           ;LED_B1.c: 163: if (led == 1) {
 14256  133B  0020               	movlb	0	; select bank0
 14257  133C  0824               	movf	setLED@led,w
 14258  133D  3A01               	xorlw	1
 14259  133E  1D03               	skipz
 14260  133F  2B42               	goto	l7244
 14261                           
 14262                           ;LED_B1.c: 167: RA3 = 1;
 14263  1340  158C               	bsf	12,3	;volatile
 14264                           
 14265                           ;LED_B1.c: 169: }
 14266  1341  2B46               	goto	l7248
 14267  1342                     l7244:	
 14268                           
 14269                           ;LED_B1.c: 172: else if (led == 2) {
 14270  1342  0824               	movf	setLED@led,w
 14271  1343  3A02               	xorlw	2
 14272  1344  1903               	btfsc	3,2
 14273                           
 14274                           ;LED_B1.c: 176: RC7 = 1;
 14275  1345  178E               	bsf	14,7	;volatile
 14276  1346                     l7248:	
 14277                           
 14278                           ;LED_B1.c: 178: }
 14279                           ;LED_B1.c: 190: if (led == 99) {
 14280  1346  0824               	movf	setLED@led,w
 14281  1347  3A63               	xorlw	99
 14282  1348  1903               	btfsc	3,2
 14283                           
 14284                           ;LED_B1.c: 194: RB5 = 1;
 14285  1349  168D               	bsf	13,5	;volatile
 14286  134A                     l7252:	
 14287                           
 14288                           ;LED_B1.c: 196: }
 14289                           ;LED_B1.c: 198: }
 14290                           ;LED_B1.c: 199: if (command == 11) {
 14291  134A  0823               	movf	setLED@command,w
 14292  134B  3A0B               	xorlw	11
 14293  134C  1D03               	skipz
 14294  134D  0008               	return
 14295                           
 14296                           ;LED_B1.c: 200: LED->GO = 1;
 14297  134E  0021               	movlb	1	; select bank1
 14298  134F  0856               	movf	_LED^(0+128),w
 14299  1350  0086               	movwf	6
 14300  1351  3001               	movlw	1	; select bank2/3
 14301  1352  0087               	movwf	7
 14302  1353  1481               	bsf	1,1
 14303  1354  0008               	return
 14304  1355                     __end_of_setLED:	
 14305                           
 14306                           	psect	text90
 14307  1D4F                     __ptext90:	
 14308 ;; *************** function _LedPointSelect *****************
 14309 ;; Defined at:
 14310 ;;		line 7 in file "../src/LED_B1.c"
 14311 ;; Parameters:    Size  Location     Type
 14312 ;;  led             1    wreg     unsigned char 
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;  led             1    2[BANK0 ] unsigned char 
 14315 ;; Return value:  Size  Location     Type
 14316 ;;		None               void
 14317 ;; Registers used:
 14318 ;;		wreg
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14327 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14328 ;;Total ram usage:        2 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:    5
 14331 ;; This function calls:
 14332 ;;		Nothing
 14333 ;; This function is called by:
 14334 ;;		_setLED_Initialization
 14335 ;;		_setLED
 14336 ;;		_setLED_Main
 14337 ;; This function uses a non-reentrant model
 14338 ;;
 14339                           
 14340                           
 14341                           ;psect for function _LedPointSelect
 14342  1D4F                     _LedPointSelect:	
 14343                           
 14344                           ;incstack = 0
 14345                           ; Regs used in _LedPointSelect: [wreg]
 14346                           ;LedPointSelect@led stored from wreg
 14347  1D4F  0020               	movlb	0	; select bank0
 14348  1D50  00A2               	movwf	LedPointSelect@led
 14349                           
 14350                           ;LED_B1.c: 9: if (led == 1) {
 14351  1D51  0822               	movf	LedPointSelect@led,w
 14352  1D52  3A01               	xorlw	1
 14353  1D53  1D03               	skipz
 14354  1D54  2D5A               	goto	l1131
 14355                           
 14356                           ;LED_B1.c: 10: LED = &VarLED1;
 14357  1D55  30E6               	movlw	_VarLED1& (0+255)
 14358  1D56  00A1               	movwf	??_LedPointSelect
 14359  1D57  0821               	movf	??_LedPointSelect,w
 14360  1D58  0021               	movlb	1	; select bank1
 14361  1D59  00D6               	movwf	_LED^(0+128)
 14362  1D5A                     l1131:	
 14363                           
 14364                           ;LED_B1.c: 11: }
 14365                           ;LED_B1.c: 14: if (led == 2) {
 14366  1D5A  0020               	movlb	0	; select bank0
 14367  1D5B  0822               	movf	LedPointSelect@led,w
 14368  1D5C  3A02               	xorlw	2
 14369  1D5D  1D03               	skipz
 14370  1D5E  2D64               	goto	l1132
 14371                           
 14372                           ;LED_B1.c: 15: LED = &VarLED2;
 14373  1D5F  30EA               	movlw	_VarLED2& (0+255)
 14374  1D60  00A1               	movwf	??_LedPointSelect
 14375  1D61  0821               	movf	??_LedPointSelect,w
 14376  1D62  0021               	movlb	1	; select bank1
 14377  1D63  00D6               	movwf	_LED^(0+128)
 14378  1D64                     l1132:	
 14379                           
 14380                           ;LED_B1.c: 16: }
 14381                           ;LED_B1.c: 24: if (led == 99) {
 14382  1D64  0020               	movlb	0	; select bank0
 14383  1D65  0822               	movf	LedPointSelect@led,w
 14384  1D66  3A63               	xorlw	99
 14385  1D67  1D03               	skipz
 14386  1D68  0008               	return
 14387                           
 14388                           ;LED_B1.c: 25: LED = &VarErrLED;
 14389  1D69  30E2               	movlw	_VarErrLED& (0+255)
 14390  1D6A  00A1               	movwf	??_LedPointSelect
 14391  1D6B  0821               	movf	??_LedPointSelect,w
 14392  1D6C  0021               	movlb	1	; select bank1
 14393  1D6D  00D6               	movwf	_LED^(0+128)
 14394  1D6E  0008               	return
 14395  1D6F                     __end_of_LedPointSelect:	
 14396                           
 14397                           	psect	text91
 14398  1F6F                     __ptext91:	
 14399 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14400 ;; Defined at:
 14401 ;;		line 219 in file "../src/Dimmer_B1.c"
 14402 ;; Parameters:    Size  Location     Type
 14403 ;;  lights          1    wreg     unsigned char 
 14404 ;;  command         1    1[BANK0 ] unsigned char 
 14405 ;; Auto vars:     Size  Location     Type
 14406 ;;  lights          1    3[BANK0 ] unsigned char 
 14407 ;; Return value:  Size  Location     Type
 14408 ;;		None               void
 14409 ;; Registers used:
 14410 ;;		wreg, status,2, status,0
 14411 ;; Tracked objects:
 14412 ;;		On entry : 0/0
 14413 ;;		On exit  : 0/0
 14414 ;;		Unchanged: 0/0
 14415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14416 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14419 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14420 ;;Total ram usage:        3 bytes
 14421 ;; Hardware stack levels used:    1
 14422 ;; Hardware stack levels required when called:    5
 14423 ;; This function calls:
 14424 ;;		Nothing
 14425 ;; This function is called by:
 14426 ;;		_setDimmerLights_OnOff
 14427 ;;		_setRFSW_AdjControl
 14428 ;; This function uses a non-reentrant model
 14429 ;;
 14430                           
 14431                           
 14432                           ;psect for function _setDimmerIntr_Dimming_RF
 14433  1F6F                     _setDimmerIntr_Dimming_RF:	
 14434                           
 14435                           ;incstack = 0
 14436                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14437                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14438  1F6F  0020               	movlb	0	; select bank0
 14439  1F70  00A3               	movwf	setDimmerIntr_Dimming_RF@lights
 14440                           
 14441                           ;Dimmer_B1.c: 221: if (lights == 1) {
 14442  1F71  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14443  1F72  3A01               	xorlw	1
 14444  1F73  1D03               	skipz
 14445  1F74  2F87               	goto	l6810
 14446                           
 14447                           ;Dimmer_B1.c: 222: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14448  1F75  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14449  1F76  3A01               	xorlw	1
 14450  1F77  3000               	movlw	0
 14451  1F78  1903               	skipnz
 14452  1F79  3001               	movlw	1
 14453  1F7A  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14454  1F7B  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14455  1F7C  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14456  1F7D  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14457  1F7E  0021               	movlb	1	; select bank1
 14458  1F7F  083B               	movf	_DimmerIntr1^(0+128),w
 14459  1F80  0020               	movlb	0	; select bank0
 14460  1F81  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14461  1F82  39BF               	andlw	-65
 14462  1F83  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14463  1F84  0021               	movlb	1	; select bank1
 14464  1F85  00BB               	movwf	_DimmerIntr1^(0+128)
 14465                           
 14466                           ;Dimmer_B1.c: 223: }
 14467  1F86  0008               	return
 14468  1F87                     l6810:	
 14469                           
 14470                           ;Dimmer_B1.c: 226: else if (lights == 2) {
 14471  1F87  0020               	movlb	0	; select bank0
 14472  1F88  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14473  1F89  3A02               	xorlw	2
 14474  1F8A  1D03               	skipz
 14475  1F8B  0008               	return
 14476                           
 14477                           ;Dimmer_B1.c: 227: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14478  1F8C  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14479  1F8D  3A01               	xorlw	1
 14480  1F8E  3000               	movlw	0
 14481  1F8F  1903               	skipnz
 14482  1F90  3001               	movlw	1
 14483  1F91  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14484  1F92  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14485  1F93  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14486  1F94  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14487  1F95  0021               	movlb	1	; select bank1
 14488  1F96  0847               	movf	_DimmerIntr2^(0+128),w
 14489  1F97  0020               	movlb	0	; select bank0
 14490  1F98  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14491  1F99  39BF               	andlw	-65
 14492  1F9A  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14493  1F9B  0021               	movlb	1	; select bank1
 14494  1F9C  00C7               	movwf	_DimmerIntr2^(0+128)
 14495  1F9D  0008               	return
 14496  1F9E                     __end_of_setDimmerIntr_Dimming_RF:	
 14497                           
 14498                           	psect	text92
 14499  1BD3                     __ptext92:	
 14500 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14501 ;; Defined at:
 14502 ;;		line 84 in file "../src/Dimmer_B1.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;  lights          1    wreg     unsigned char 
 14505 ;;  value           1   67[BANK0 ] unsigned char 
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;  lights          1   69[BANK0 ] unsigned char 
 14508 ;; Return value:  Size  Location     Type
 14509 ;;		None               void
 14510 ;; Registers used:
 14511 ;;		wreg
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14517 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14521 ;;Total ram usage:        3 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; Hardware stack levels required when called:    5
 14524 ;; This function calls:
 14525 ;;		Nothing
 14526 ;; This function is called by:
 14527 ;;		_setDimmerLights_OnOff
 14528 ;; This function uses a non-reentrant model
 14529 ;;
 14530                           
 14531                           
 14532                           ;psect for function _setDimmerIntr_DimmingValue
 14533  1BD3                     _setDimmerIntr_DimmingValue:	
 14534                           
 14535                           ;incstack = 0
 14536                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14537                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14538  1BD3  0020               	movlb	0	; select bank0
 14539  1BD4  00E5               	movwf	setDimmerIntr_DimmingValue@lights
 14540                           
 14541                           ;Dimmer_B1.c: 86: if (lights == 1) {
 14542  1BD5  0865               	movf	setDimmerIntr_DimmingValue@lights,w
 14543  1BD6  3A01               	xorlw	1
 14544  1BD7  1D03               	skipz
 14545  1BD8  2BDF               	goto	l7138
 14546                           
 14547                           ;Dimmer_B1.c: 87: DimmerIntr1.DimmingValue = value;
 14548  1BD9  0863               	movf	setDimmerIntr_DimmingValue@value,w
 14549  1BDA  00E4               	movwf	??_setDimmerIntr_DimmingValue
 14550  1BDB  0864               	movf	??_setDimmerIntr_DimmingValue,w
 14551  1BDC  0021               	movlb	1	; select bank1
 14552  1BDD  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 14553                           
 14554                           ;Dimmer_B1.c: 88: }
 14555  1BDE  0008               	return
 14556  1BDF                     l7138:	
 14557                           
 14558                           ;Dimmer_B1.c: 91: else if (lights == 2) {
 14559  1BDF  0020               	movlb	0	; select bank0
 14560  1BE0  0865               	movf	setDimmerIntr_DimmingValue@lights,w
 14561  1BE1  3A02               	xorlw	2
 14562  1BE2  1D03               	skipz
 14563  1BE3  0008               	return
 14564                           
 14565                           ;Dimmer_B1.c: 92: DimmerIntr2.DimmingValue = value;
 14566  1BE4  0863               	movf	setDimmerIntr_DimmingValue@value,w
 14567  1BE5  00E4               	movwf	??_setDimmerIntr_DimmingValue
 14568  1BE6  0864               	movf	??_setDimmerIntr_DimmingValue,w
 14569  1BE7  0021               	movlb	1	; select bank1
 14570  1BE8  00CC               	movwf	(_DimmerIntr2^(0+128)+5)
 14571  1BE9  0008               	return
 14572  1BEA                     __end_of_setDimmerIntr_DimmingValue:	
 14573                           
 14574                           	psect	text93
 14575  1F40                     __ptext93:	
 14576 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14577 ;; Defined at:
 14578 ;;		line 66 in file "../src/Dimmer_B1.c"
 14579 ;; Parameters:    Size  Location     Type
 14580 ;;  lights          1    wreg     unsigned char 
 14581 ;;  command         1    1[BANK0 ] unsigned char 
 14582 ;; Auto vars:     Size  Location     Type
 14583 ;;  lights          1    3[BANK0 ] unsigned char 
 14584 ;; Return value:  Size  Location     Type
 14585 ;;		None               void
 14586 ;; Registers used:
 14587 ;;		wreg, status,2, status,0
 14588 ;; Tracked objects:
 14589 ;;		On entry : 0/0
 14590 ;;		On exit  : 0/0
 14591 ;;		Unchanged: 0/0
 14592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14593 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14596 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14597 ;;Total ram usage:        3 bytes
 14598 ;; Hardware stack levels used:    1
 14599 ;; Hardware stack levels required when called:    5
 14600 ;; This function calls:
 14601 ;;		Nothing
 14602 ;; This function is called by:
 14603 ;;		_setDimmerLights_OnOff
 14604 ;; This function uses a non-reentrant model
 14605 ;;
 14606                           
 14607                           
 14608                           ;psect for function _setDimmerIntr_ControlStatus
 14609  1F40                     _setDimmerIntr_ControlStatus:	
 14610                           
 14611                           ;incstack = 0
 14612                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14613                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14614  1F40  0020               	movlb	0	; select bank0
 14615  1F41  00A3               	movwf	setDimmerIntr_ControlStatus@lights
 14616                           
 14617                           ;Dimmer_B1.c: 68: if (lights == 1) {
 14618  1F42  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14619  1F43  3A01               	xorlw	1
 14620  1F44  1D03               	skipz
 14621  1F45  2F58               	goto	l7130
 14622                           
 14623                           ;Dimmer_B1.c: 69: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14624  1F46  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14625  1F47  3A01               	xorlw	1
 14626  1F48  3000               	movlw	0
 14627  1F49  1903               	skipnz
 14628  1F4A  3001               	movlw	1
 14629  1F4B  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14630  1F4C  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14631  1F4D  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14632  1F4E  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14633  1F4F  0021               	movlb	1	; select bank1
 14634  1F50  083B               	movf	_DimmerIntr1^(0+128),w
 14635  1F51  0020               	movlb	0	; select bank0
 14636  1F52  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14637  1F53  39F7               	andlw	-9
 14638  1F54  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14639  1F55  0021               	movlb	1	; select bank1
 14640  1F56  00BB               	movwf	_DimmerIntr1^(0+128)
 14641                           
 14642                           ;Dimmer_B1.c: 70: }
 14643  1F57  0008               	return
 14644  1F58                     l7130:	
 14645                           
 14646                           ;Dimmer_B1.c: 73: else if (lights == 2) {
 14647  1F58  0020               	movlb	0	; select bank0
 14648  1F59  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14649  1F5A  3A02               	xorlw	2
 14650  1F5B  1D03               	skipz
 14651  1F5C  0008               	return
 14652                           
 14653                           ;Dimmer_B1.c: 74: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14654  1F5D  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14655  1F5E  3A01               	xorlw	1
 14656  1F5F  3000               	movlw	0
 14657  1F60  1903               	skipnz
 14658  1F61  3001               	movlw	1
 14659  1F62  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14660  1F63  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14661  1F64  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14662  1F65  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14663  1F66  0021               	movlb	1	; select bank1
 14664  1F67  0847               	movf	_DimmerIntr2^(0+128),w
 14665  1F68  0020               	movlb	0	; select bank0
 14666  1F69  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14667  1F6A  39F7               	andlw	-9
 14668  1F6B  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14669  1F6C  0021               	movlb	1	; select bank1
 14670  1F6D  00C7               	movwf	_DimmerIntr2^(0+128)
 14671  1F6E  0008               	return
 14672  1F6F                     __end_of_setDimmerIntr_ControlStatus:	
 14673                           
 14674                           	psect	text94
 14675  0C1F                     __ptext94:	
 14676 ;; *************** function _setDelayOff_GO *****************
 14677 ;; Defined at:
 14678 ;;		line 87 in file "../src/DelayOff_B1.c"
 14679 ;; Parameters:    Size  Location     Type
 14680 ;;  sw              1    wreg     unsigned char 
 14681 ;;  command         1   70[BANK0 ] unsigned char 
 14682 ;;  value           1   71[BANK0 ] unsigned char 
 14683 ;; Auto vars:     Size  Location     Type
 14684 ;;  sw              1   77[BANK0 ] unsigned char 
 14685 ;;  k               1   76[BANK0 ] unsigned char 
 14686 ;;  j               1   75[BANK0 ] unsigned char 
 14687 ;;  i               1   74[BANK0 ] unsigned char 
 14688 ;; Return value:  Size  Location     Type
 14689 ;;		None               void
 14690 ;; Registers used:
 14691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14692 ;; Tracked objects:
 14693 ;;		On entry : 0/0
 14694 ;;		On exit  : 0/0
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14697 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14698 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;Total ram usage:        8 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; Hardware stack levels required when called:    6
 14704 ;; This function calls:
 14705 ;;		_DelayOffPointSelect
 14706 ;;		___bmul
 14707 ;;		_setProductData
 14708 ;; This function is called by:
 14709 ;;		_setDimmerLights_OnOff
 14710 ;;		_setRFSW_Control
 14711 ;; This function uses a non-reentrant model
 14712 ;;
 14713                           
 14714                           
 14715                           ;psect for function _setDelayOff_GO
 14716  0C1F                     _setDelayOff_GO:	
 14717                           
 14718                           ;incstack = 0
 14719                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14720                           ;setDelayOff_GO@sw stored from wreg
 14721  0C1F  0020               	movlb	0	; select bank0
 14722  0C20  00ED               	movwf	setDelayOff_GO@sw
 14723                           
 14724                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14725  0C21  086D               	movf	setDelayOff_GO@sw,w
 14726  0C22  319B  238E  318C   	fcall	_DelayOffPointSelect
 14727                           
 14728                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14729  0C25  0020               	movlb	0	; select bank0
 14730  0C26  0866               	movf	setDelayOff_GO@command,w
 14731  0C27  3A01               	xorlw	1
 14732  0C28  3000               	movlw	0
 14733  0C29  1903               	skipnz
 14734  0C2A  3001               	movlw	1
 14735  0C2B  00E8               	movwf	??_setDelayOff_GO
 14736  0C2C  0021               	movlb	1	; select bank1
 14737  0C2D  0854               	movf	_DelayOff^(0+128),w
 14738  0C2E  0086               	movwf	6
 14739  0C2F  3001               	movlw	1	; select bank2/3
 14740  0C30  0087               	movwf	7
 14741  0C31  0020               	movlb	0	; select bank0
 14742  0C32  0DE8               	rlf	??_setDelayOff_GO,f
 14743  0C33  0801               	movf	1,w
 14744  0C34  0668               	xorwf	??_setDelayOff_GO,w
 14745  0C35  39FD               	andlw	-3
 14746  0C36  0668               	xorwf	??_setDelayOff_GO,w
 14747  0C37  0081               	movwf	1
 14748                           
 14749                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14750  0C38  0021               	movlb	1	; select bank1
 14751  0C39  0854               	movf	_DelayOff^(0+128),w
 14752  0C3A  3E02               	addlw	2
 14753  0C3B  0086               	movwf	6
 14754  0C3C  3001               	movlw	1	; select bank2/3
 14755  0C3D  0087               	movwf	7
 14756  0C3E  3000               	movlw	0
 14757  0C3F  3FC0               	movwi [0]fsr1
 14758  0C40  3FC1               	movwi [1]fsr1
 14759                           
 14760                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14761  0C41  0854               	movf	_DelayOff^(0+128),w
 14762  0C42  3E04               	addlw	4
 14763  0C43  0086               	movwf	6
 14764  0C44  3001               	movlw	1	; select bank2/3
 14765  0C45  0087               	movwf	7
 14766  0C46  0181               	clrf	1
 14767                           
 14768                           ;DelayOff_B1.c: 94: if (command == 1) {
 14769  0C47  0020               	movlb	0	; select bank0
 14770  0C48  0866               	movf	setDelayOff_GO@command,w
 14771  0C49  3A01               	xorlw	1
 14772  0C4A  1D03               	skipz
 14773  0C4B  2CA1               	goto	l9600
 14774                           
 14775                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14776  0C4C  3005               	movlw	5
 14777  0C4D  00E8               	movwf	??_setDelayOff_GO
 14778  0C4E  0868               	movf	??_setDelayOff_GO,w
 14779  0C4F  00EA               	movwf	setDelayOff_GO@i
 14780  0C50  01EB               	clrf	setDelayOff_GO@j
 14781  0C51  01EC               	clrf	setDelayOff_GO@k
 14782                           
 14783                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14784  0C52  300F               	movlw	15
 14785  0C53  0567               	andwf	setDelayOff_GO@value,w
 14786  0C54  00E8               	movwf	??_setDelayOff_GO
 14787  0C55  0868               	movf	??_setDelayOff_GO,w
 14788  0C56  3A05               	xorlw	5
 14789  0C57  1903               	skipnz
 14790  0C58  2C5D               	goto	l9586
 14791  0C59  0867               	movf	setDelayOff_GO@value,w
 14792  0C5A  390F               	andlw	15
 14793  0C5B  1D03               	btfss	3,2
 14794  0C5C  2C8D               	goto	l9596
 14795  0C5D                     l9586:	
 14796  0C5D  3031               	movlw	49
 14797  0C5E  0267               	subwf	setDelayOff_GO@value,w
 14798  0C5F  1803               	skipnc
 14799  0C60  2C8D               	goto	l9596
 14800                           
 14801                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14802  0C61  0867               	movf	setDelayOff_GO@value,w
 14803  0C62  390F               	andlw	15
 14804  0C63  00E8               	movwf	??_setDelayOff_GO
 14805  0C64  0868               	movf	??_setDelayOff_GO,w
 14806  0C65  00EB               	movwf	setDelayOff_GO@j
 14807                           
 14808                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14809  0C66  0867               	movf	setDelayOff_GO@value,w
 14810  0C67  00E8               	movwf	??_setDelayOff_GO
 14811  0C68  3004               	movlw	4
 14812  0C69                     u11125:	
 14813  0C69  36E8               	lsrf	??_setDelayOff_GO,f
 14814  0C6A  0B89               	decfsz	9,f
 14815  0C6B  2C69               	goto	u11125
 14816  0C6C  0868               	movf	??_setDelayOff_GO,w
 14817  0C6D  390F               	andlw	15
 14818  0C6E  00E9               	movwf	??_setDelayOff_GO+1
 14819  0C6F  0869               	movf	??_setDelayOff_GO+1,w
 14820  0C70  00EC               	movwf	setDelayOff_GO@k
 14821                           
 14822                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14823  0C71  300A               	movlw	10
 14824  0C72  00E8               	movwf	??_setDelayOff_GO
 14825  0C73  0868               	movf	??_setDelayOff_GO,w
 14826  0C74  00A1               	movwf	___bmul@multiplicand
 14827  0C75  086C               	movf	setDelayOff_GO@k,w
 14828  0C76  319A  2256  318C   	fcall	___bmul
 14829  0C79  0020               	movlb	0	; select bank0
 14830  0C7A  076B               	addwf	setDelayOff_GO@j,w
 14831  0C7B  00E9               	movwf	??_setDelayOff_GO+1
 14832  0C7C  0021               	movlb	1	; select bank1
 14833  0C7D  0A54               	incf	_DelayOff^(0+128),w
 14834  0C7E  0086               	movwf	6
 14835  0C7F  3001               	movlw	1	; select bank2/3
 14836  0C80  0087               	movwf	7
 14837  0C81  0020               	movlb	0	; select bank0
 14838  0C82  0869               	movf	??_setDelayOff_GO+1,w
 14839  0C83  0081               	movwf	1
 14840                           
 14841                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14842  0C84  0867               	movf	setDelayOff_GO@value,w
 14843  0C85  00E8               	movwf	??_setDelayOff_GO
 14844  0C86  0868               	movf	??_setDelayOff_GO,w
 14845  0C87  00E3               	movwf	setProductData@value
 14846  0C88  086D               	movf	setDelayOff_GO@sw,w
 14847  0C89  3E1A               	addlw	26
 14848  0C8A  3199  2173         	fcall	_setProductData
 14849                           
 14850                           ;DelayOff_B1.c: 103: } else {
 14851  0C8C  0008               	return
 14852  0C8D                     l9596:	
 14853                           
 14854                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14855  0C8D  3005               	movlw	5
 14856  0C8E  0020               	movlb	0	; select bank0
 14857  0C8F  00E8               	movwf	??_setDelayOff_GO
 14858  0C90  0021               	movlb	1	; select bank1
 14859  0C91  0A54               	incf	_DelayOff^(0+128),w
 14860  0C92  0086               	movwf	6
 14861  0C93  3001               	movlw	1	; select bank2/3
 14862  0C94  0087               	movwf	7
 14863  0C95  0020               	movlb	0	; select bank0
 14864  0C96  0868               	movf	??_setDelayOff_GO,w
 14865  0C97  0081               	movwf	1
 14866                           
 14867                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14868  0C98  3005               	movlw	5
 14869  0C99  00E8               	movwf	??_setDelayOff_GO
 14870  0C9A  0868               	movf	??_setDelayOff_GO,w
 14871  0C9B  00E3               	movwf	setProductData@value
 14872  0C9C  086D               	movf	setDelayOff_GO@sw,w
 14873  0C9D  3E1A               	addlw	26
 14874  0C9E  3199  2173         	fcall	_setProductData
 14875                           
 14876                           ;DelayOff_B1.c: 106: }
 14877                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14878  0CA0  0008               	return
 14879  0CA1                     l9600:	
 14880  0CA1  0020               	movlb	0	; select bank0
 14881  0CA2  08E6               	movf	setDelayOff_GO@command,f
 14882  0CA3  1D03               	skipz
 14883  0CA4  0008               	return
 14884                           
 14885                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14886  0CA5  01E3               	clrf	setProductData@value
 14887  0CA6  086D               	movf	setDelayOff_GO@sw,w
 14888  0CA7  3E1A               	addlw	26
 14889  0CA8  3199  2173         	fcall	_setProductData
 14890  0CAA  0008               	return
 14891  0CAB                     __end_of_setDelayOff_GO:	
 14892                           
 14893                           	psect	text95
 14894  1A56                     __ptext95:	
 14895 ;; *************** function ___bmul *****************
 14896 ;; Defined at:
 14897 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14898 ;; Parameters:    Size  Location     Type
 14899 ;;  multiplier      1    wreg     unsigned char 
 14900 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 14901 ;; Auto vars:     Size  Location     Type
 14902 ;;  multiplier      1    4[BANK0 ] unsigned char 
 14903 ;;  product         1    3[BANK0 ] unsigned char 
 14904 ;; Return value:  Size  Location     Type
 14905 ;;                  1    wreg      unsigned char 
 14906 ;; Registers used:
 14907 ;;		wreg, status,2, status,0
 14908 ;; Tracked objects:
 14909 ;;		On entry : 0/0
 14910 ;;		On exit  : 0/0
 14911 ;;		Unchanged: 0/0
 14912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14913 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14914 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14915 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;Total ram usage:        4 bytes
 14918 ;; Hardware stack levels used:    1
 14919 ;; Hardware stack levels required when called:    5
 14920 ;; This function calls:
 14921 ;;		Nothing
 14922 ;; This function is called by:
 14923 ;;		_setDelayOff_GO
 14924 ;;		_DelayTimejudge
 14925 ;; This function uses a non-reentrant model
 14926 ;;
 14927                           
 14928                           
 14929                           ;psect for function ___bmul
 14930  1A56                     ___bmul:	
 14931                           
 14932                           ;incstack = 0
 14933                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14934                           ;___bmul@multiplier stored from wreg
 14935  1A56  0020               	movlb	0	; select bank0
 14936  1A57  00A4               	movwf	___bmul@multiplier
 14937  1A58  01A3               	clrf	___bmul@product
 14938  1A59                     l6424:	
 14939  1A59  1C24               	btfss	___bmul@multiplier,0
 14940  1A5A  2A5F               	goto	l6428
 14941  1A5B  0821               	movf	___bmul@multiplicand,w
 14942  1A5C  00A2               	movwf	??___bmul
 14943  1A5D  0822               	movf	??___bmul,w
 14944  1A5E  07A3               	addwf	___bmul@product,f
 14945  1A5F                     l6428:	
 14946  1A5F  1003               	clrc
 14947  1A60  0DA1               	rlf	___bmul@multiplicand,f
 14948  1A61  1003               	clrc
 14949  1A62  0CA4               	rrf	___bmul@multiplier,f
 14950  1A63  08A4               	movf	___bmul@multiplier,f
 14951  1A64  1D03               	skipz
 14952  1A65  2A59               	goto	l6424
 14953  1A66  0823               	movf	___bmul@product,w
 14954  1A67  0008               	return
 14955  1A68                     __end_of___bmul:	
 14956                           
 14957                           	psect	text96
 14958  1C01                     __ptext96:	
 14959 ;; *************** function _setCmd_Status *****************
 14960 ;; Defined at:
 14961 ;;		line 651 in file "../src/main_B1.c"
 14962 ;; Parameters:    Size  Location     Type
 14963 ;;  number          1    wreg     unsigned char 
 14964 ;;  cmd             1    1[BANK0 ] unsigned char 
 14965 ;; Auto vars:     Size  Location     Type
 14966 ;;  number          1    3[BANK0 ] unsigned char 
 14967 ;; Return value:  Size  Location     Type
 14968 ;;		None               void
 14969 ;; Registers used:
 14970 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14971 ;; Tracked objects:
 14972 ;;		On entry : 0/0
 14973 ;;		On exit  : 0/0
 14974 ;;		Unchanged: 0/0
 14975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14976 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;Total ram usage:        3 bytes
 14981 ;; Hardware stack levels used:    1
 14982 ;; Hardware stack levels required when called:    5
 14983 ;; This function calls:
 14984 ;;		Nothing
 14985 ;; This function is called by:
 14986 ;;		_setDimmerLights_OnOff
 14987 ;;		_setControl_Lights_Table
 14988 ;; This function uses a non-reentrant model
 14989 ;;
 14990                           
 14991                           
 14992                           ;psect for function _setCmd_Status
 14993  1C01                     _setCmd_Status:	
 14994                           
 14995                           ;incstack = 0
 14996                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14997                           ;setCmd_Status@number stored from wreg
 14998  1C01  0020               	movlb	0	; select bank0
 14999  1C02  00A3               	movwf	setCmd_Status@number
 15000                           
 15001                           ;main_B1.c: 652: switch (number) {
 15002  1C03  2C13               	goto	l6962
 15003  1C04                     l6958:	
 15004                           ;main_B1.c: 653: case 1:
 15005                           
 15006                           
 15007                           ;main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15008  1C04  0821               	movf	setCmd_Status@cmd,w
 15009  1C05  3A01               	xorlw	1
 15010  1C06  3000               	movlw	0
 15011  1C07  1903               	skipnz
 15012  1C08  3001               	movlw	1
 15013  1C09  00A2               	movwf	??_setCmd_Status
 15014  1C0A  0021               	movlb	1	; select bank1
 15015  1C0B  0853               	movf	_Cmd^(0+128),w
 15016  1C0C  0020               	movlb	0	; select bank0
 15017  1C0D  0622               	xorwf	??_setCmd_Status,w
 15018  1C0E  39FE               	andlw	-2
 15019  1C0F  0622               	xorwf	??_setCmd_Status,w
 15020  1C10  0021               	movlb	1	; select bank1
 15021  1C11  00D3               	movwf	_Cmd^(0+128)
 15022                           
 15023                           ;main_B1.c: 656: }
 15024                           
 15025                           ;main_B1.c: 655: break;
 15026  1C12  0008               	return
 15027  1C13                     l6962:	
 15028  1C13  0020               	movlb	0	; select bank0
 15029  1C14  0823               	movf	setCmd_Status@number,w
 15030                           
 15031                           ; Switch size 1, requested type "space"
 15032                           ; Number of cases is 1, Range of values is 1 to 1
 15033                           ; switch strategies available:
 15034                           ; Name         Instructions Cycles
 15035                           ; simple_byte            4     3 (average)
 15036                           ; direct_byte           11     9 (fixed)
 15037                           ; jumptable            263     9 (fixed)
 15038                           ;	Chosen strategy is simple_byte
 15039  1C15  3A01               	xorlw	1	; case 1
 15040  1C16  1903               	skipnz
 15041  1C17  2C04               	goto	l6958
 15042  1C18  2C19               	goto	l2921
 15043  1C19                     l2921:	
 15044  1C19  0008               	return
 15045  1C1A                     __end_of_setCmd_Status:	
 15046                           
 15047                           	psect	text97
 15048  1AD6                     __ptext97:	
 15049 ;; *************** function _getMain_All_LightsStatus *****************
 15050 ;; Defined at:
 15051 ;;		line 373 in file "../src/main_B1.c"
 15052 ;; Parameters:    Size  Location     Type
 15053 ;;		None
 15054 ;; Auto vars:     Size  Location     Type
 15055 ;;  status          1    1[BANK0 ] unsigned char 
 15056 ;; Return value:  Size  Location     Type
 15057 ;;                  1    wreg      unsigned char 
 15058 ;; Registers used:
 15059 ;;		wreg, status,2, status,0
 15060 ;; Tracked objects:
 15061 ;;		On entry : 0/0
 15062 ;;		On exit  : 0/0
 15063 ;;		Unchanged: 0/0
 15064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15069 ;;Total ram usage:        1 bytes
 15070 ;; Hardware stack levels used:    1
 15071 ;; Hardware stack levels required when called:    5
 15072 ;; This function calls:
 15073 ;;		Nothing
 15074 ;; This function is called by:
 15075 ;;		_DimmerLights_Main
 15076 ;;		_setDimmerLights_Main
 15077 ;;		_setDimmerLights_OnOff
 15078 ;;		_Flash_Memory_Main
 15079 ;;		_Load_Main
 15080 ;;		_setTemp_Main
 15081 ;;		_setControl_Lights_Table
 15082 ;;		_Exception_Main
 15083 ;; This function uses a non-reentrant model
 15084 ;;
 15085                           
 15086                           
 15087                           ;psect for function _getMain_All_LightsStatus
 15088  1AD6                     _getMain_All_LightsStatus:	
 15089                           
 15090                           ;main_B1.c: 374: char status = 0;
 15091                           
 15092                           ;incstack = 0
 15093                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15094  1AD6  0020               	movlb	0	; select bank0
 15095  1AD7  01A1               	clrf	getMain_All_LightsStatus@status
 15096                           
 15097                           ;main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15098  1AD8  3000               	movlw	0
 15099  1AD9  0022               	movlb	2	; select bank2
 15100  1ADA  1869               	btfsc	(_DimmerLights1^(0+256)+1),0
 15101  1ADB  3001               	movlw	1
 15102  1ADC  0020               	movlb	0	; select bank0
 15103  1ADD  00A1               	movwf	getMain_All_LightsStatus@status
 15104                           
 15105                           ;main_B1.c: 394: if (status == 0) {
 15106  1ADE  08A1               	movf	getMain_All_LightsStatus@status,f
 15107  1ADF  1D03               	skipz
 15108  1AE0  2AE7               	goto	l9694
 15109                           
 15110                           ;main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15111  1AE1  3000               	movlw	0
 15112  1AE2  0023               	movlb	3	; select bank3
 15113  1AE3  1851               	btfsc	(_DimmerLights2^(0+384)+1),0
 15114  1AE4  3001               	movlw	1
 15115  1AE5  0020               	movlb	0	; select bank0
 15116  1AE6  00A1               	movwf	getMain_All_LightsStatus@status
 15117  1AE7                     l9694:	
 15118                           
 15119                           ;main_B1.c: 396: }
 15120                           ;main_B1.c: 420: return status;
 15121  1AE7  0821               	movf	getMain_All_LightsStatus@status,w
 15122  1AE8  0008               	return
 15123  1AE9                     __end_of_getMain_All_LightsStatus:	
 15124                           
 15125                           	psect	text98
 15126  1A00                     __ptext98:	
 15127 ;; *************** function _getDelayOff_GO *****************
 15128 ;; Defined at:
 15129 ;;		line 114 in file "../src/DelayOff_B1.c"
 15130 ;; Parameters:    Size  Location     Type
 15131 ;;  sw              1    wreg     unsigned char 
 15132 ;; Auto vars:     Size  Location     Type
 15133 ;;  sw              1    3[BANK0 ] unsigned char 
 15134 ;;  go              1    4[BANK0 ] unsigned char 
 15135 ;; Return value:  Size  Location     Type
 15136 ;;                  1    wreg      unsigned char 
 15137 ;; Registers used:
 15138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15139 ;; Tracked objects:
 15140 ;;		On entry : 0/0
 15141 ;;		On exit  : 0/0
 15142 ;;		Unchanged: 0/0
 15143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;Total ram usage:        2 bytes
 15149 ;; Hardware stack levels used:    1
 15150 ;; Hardware stack levels required when called:    6
 15151 ;; This function calls:
 15152 ;;		_DelayOffPointSelect
 15153 ;; This function is called by:
 15154 ;;		_setDimmerLights_OnOff
 15155 ;; This function uses a non-reentrant model
 15156 ;;
 15157                           
 15158                           
 15159                           ;psect for function _getDelayOff_GO
 15160  1A00                     _getDelayOff_GO:	
 15161                           
 15162                           ;incstack = 0
 15163                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15164                           ;getDelayOff_GO@sw stored from wreg
 15165  1A00  0020               	movlb	0	; select bank0
 15166  1A01  00A3               	movwf	getDelayOff_GO@sw
 15167                           
 15168                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15169  1A02  0823               	movf	getDelayOff_GO@sw,w
 15170  1A03  319B  238E         	fcall	_DelayOffPointSelect
 15171                           
 15172                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15173  1A05  0021               	movlb	1	; select bank1
 15174  1A06  0854               	movf	_DelayOff^(0+128),w
 15175  1A07  0086               	movwf	6
 15176  1A08  3001               	movlw	1	; select bank2/3
 15177  1A09  0087               	movwf	7
 15178  1A0A  3000               	movlw	0
 15179  1A0B  1881               	btfsc	1,1
 15180  1A0C  3001               	movlw	1
 15181  1A0D  0020               	movlb	0	; select bank0
 15182  1A0E  00A4               	movwf	getDelayOff_GO@go
 15183                           
 15184                           ;DelayOff_B1.c: 117: return go;
 15185  1A0F  0824               	movf	getDelayOff_GO@go,w
 15186  1A10  0008               	return
 15187  1A11                     __end_of_getDelayOff_GO:	
 15188                           
 15189                           	psect	text99
 15190  1A44                     __ptext99:	
 15191 ;; *************** function _getCmd_Status *****************
 15192 ;; Defined at:
 15193 ;;		line 659 in file "../src/main_B1.c"
 15194 ;; Parameters:    Size  Location     Type
 15195 ;;  number          1    wreg     unsigned char 
 15196 ;; Auto vars:     Size  Location     Type
 15197 ;;  number          1    1[BANK0 ] unsigned char 
 15198 ;;  cmd             1    2[BANK0 ] unsigned char 
 15199 ;; Return value:  Size  Location     Type
 15200 ;;                  1    wreg      unsigned char 
 15201 ;; Registers used:
 15202 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15211 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;Total ram usage:        2 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    5
 15215 ;; This function calls:
 15216 ;;		Nothing
 15217 ;; This function is called by:
 15218 ;;		_setDimmerLights_OnOff
 15219 ;; This function uses a non-reentrant model
 15220 ;;
 15221                           
 15222                           
 15223                           ;psect for function _getCmd_Status
 15224  1A44                     _getCmd_Status:	
 15225                           
 15226                           ;incstack = 0
 15227                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15228                           ;getCmd_Status@number stored from wreg
 15229  1A44  0020               	movlb	0	; select bank0
 15230  1A45  00A1               	movwf	getCmd_Status@number
 15231                           
 15232                           ;main_B1.c: 660: char cmd = 0;
 15233  1A46  01A2               	clrf	getCmd_Status@cmd
 15234                           
 15235                           ;main_B1.c: 661: switch (number) {
 15236  1A47  2A4F               	goto	l7262
 15237  1A48                     l7258:	
 15238                           ;main_B1.c: 662: case 1:
 15239                           
 15240                           
 15241                           ;main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15242  1A48  3000               	movlw	0
 15243  1A49  0021               	movlb	1	; select bank1
 15244  1A4A  1853               	btfsc	_Cmd^(0+128),0
 15245  1A4B  3001               	movlw	1
 15246  1A4C  0020               	movlb	0	; select bank0
 15247  1A4D  00A2               	movwf	getCmd_Status@cmd
 15248                           
 15249                           ;main_B1.c: 665: }
 15250                           
 15251                           ;main_B1.c: 664: break;
 15252  1A4E  2A54               	goto	l7264
 15253  1A4F                     l7262:	
 15254  1A4F  0821               	movf	getCmd_Status@number,w
 15255                           
 15256                           ; Switch size 1, requested type "space"
 15257                           ; Number of cases is 1, Range of values is 1 to 1
 15258                           ; switch strategies available:
 15259                           ; Name         Instructions Cycles
 15260                           ; simple_byte            4     3 (average)
 15261                           ; direct_byte           11     9 (fixed)
 15262                           ; jumptable            263     9 (fixed)
 15263                           ;	Chosen strategy is simple_byte
 15264  1A50  3A01               	xorlw	1	; case 1
 15265  1A51  1903               	skipnz
 15266  1A52  2A48               	goto	l7258
 15267  1A53  2A54               	goto	l7264
 15268  1A54                     l7264:	
 15269                           
 15270                           ;main_B1.c: 666: return cmd;
 15271  1A54  0822               	movf	getCmd_Status@cmd,w
 15272  1A55  0008               	return
 15273  1A56                     __end_of_getCmd_Status:	
 15274                           
 15275                           	psect	text100
 15276  1460                     __ptext100:	
 15277 ;; *************** function _setDimmerLights_Dimming *****************
 15278 ;; Defined at:
 15279 ;;		line 934 in file "../src/Dimmer_B1.c"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;  lights          1    wreg     unsigned char 
 15282 ;;  status          1   75[BANK0 ] unsigned char 
 15283 ;; Auto vars:     Size  Location     Type
 15284 ;;  lights          1    1[BANK1 ] unsigned char 
 15285 ;;  value           1    0[BANK1 ] unsigned char 
 15286 ;; Return value:  Size  Location     Type
 15287 ;;		None               void
 15288 ;; Registers used:
 15289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15290 ;; Tracked objects:
 15291 ;;		On entry : 0/0
 15292 ;;		On exit  : 0/0
 15293 ;;		Unchanged: 0/0
 15294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15295 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;Total ram usage:        4 bytes
 15300 ;; Hardware stack levels used:    1
 15301 ;; Hardware stack levels required when called:    8
 15302 ;; This function calls:
 15303 ;;		_getDimmerIntr_DimmingValue
 15304 ;;		_getDimmerLights_ValueToPercent
 15305 ;;		_setBuz
 15306 ;;		_setDimmerIntr_Dimming_Sw
 15307 ;;		_setDimmerIntr_MaxmumValue
 15308 ;;		_setDimmerLights_Line
 15309 ;;		_setMemory_Modify
 15310 ;;		_setProductData
 15311 ;;		_setRF_DimmerLights
 15312 ;;		_setRF_TransceiveGO
 15313 ;;		_setTxData
 15314 ;; This function is called by:
 15315 ;;		_setDimmerLights_Main
 15316 ;; This function uses a non-reentrant model
 15317 ;;
 15318                           
 15319                           
 15320                           ;psect for function _setDimmerLights_Dimming
 15321  1460                     _setDimmerLights_Dimming:	
 15322                           
 15323                           ;incstack = 0
 15324                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15325                           ;setDimmerLights_Dimming@lights stored from wreg
 15326  1460  0021               	movlb	1	; select bank1
 15327  1461  00E6               	movwf	setDimmerLights_Dimming@lights^(0+128)
 15328                           
 15329                           ;Dimmer_B1.c: 935: if (status == 1) {
 15330  1462  0020               	movlb	0	; select bank0
 15331  1463  086B               	movf	setDimmerLights_Dimming@status,w
 15332  1464  3A01               	xorlw	1
 15333  1465  1D03               	skipz
 15334  1466  2C7B               	goto	l9904
 15335                           
 15336                           ;Dimmer_B1.c: 936: setDimmerIntr_Dimming_Sw(lights, 1);
 15337  1467  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15338  1468  0AA1               	incf	setDimmerIntr_Dimming_Sw@command,f
 15339  1469  0021               	movlb	1	; select bank1
 15340  146A  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15341  146B  319F  2715  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15342                           
 15343                           ;Dimmer_B1.c: 939: setRF_TransceiveGO(0);
 15344  146E  3000               	movlw	0
 15345  146F  319A  22C3  3194   	fcall	_setRF_TransceiveGO
 15346                           
 15347                           ;Dimmer_B1.c: 941: setBuz(1, 100);
 15348  1472  3064               	movlw	100
 15349  1473  0020               	movlb	0	; select bank0
 15350  1474  00AA               	movwf	setBuz@time
 15351  1475  3000               	movlw	0
 15352  1476  00AB               	movwf	setBuz@time+1
 15353  1477  3001               	movlw	1
 15354  1478  3188  2000         	fcall	_setBuz
 15355                           
 15356                           ;Dimmer_B1.c: 942: } else if (status == 0) {
 15357  147A  0008               	return
 15358  147B                     l9904:	
 15359  147B  0020               	movlb	0	; select bank0
 15360  147C  08EB               	movf	setDimmerLights_Dimming@status,f
 15361  147D  1D03               	skipz
 15362  147E  0008               	return
 15363                           
 15364                           ;Dimmer_B1.c: 943: setDimmerIntr_Dimming_Sw(lights, 0);
 15365  147F  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15366  1480  0021               	movlb	1	; select bank1
 15367  1481  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15368  1482  319F  2715  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15369                           
 15370                           ;Dimmer_B1.c: 946: Dimmer.Load_Status = 0;
 15371  1485  0022               	movlb	2	; select bank2
 15372  1486  112C               	bcf	_Dimmer^(0+256),2
 15373                           
 15374                           ;Dimmer_B1.c: 947: setDimmerLights_Line(lights);
 15375  1487  0021               	movlb	1	; select bank1
 15376  1488  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15377  1489  319C  24B9  3194   	fcall	_setDimmerLights_Line
 15378                           
 15379                           ;Dimmer_B1.c: 949: char value = getDimmerIntr_DimmingValue(lights);
 15380  148C  0021               	movlb	1	; select bank1
 15381  148D  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15382  148E  319B  2378  3194   	fcall	_getDimmerIntr_DimmingValue
 15383  1491  0020               	movlb	0	; select bank0
 15384  1492  00EC               	movwf	??_setDimmerLights_Dimming
 15385  1493  086C               	movf	??_setDimmerLights_Dimming,w
 15386  1494  0021               	movlb	1	; select bank1
 15387  1495  00E5               	movwf	setDimmerLights_Dimming@value^(0+128)
 15388                           
 15389                           ;Dimmer_B1.c: 950: setDimmerIntr_MaxmumValue(lights, value);
 15390  1496  0865               	movf	setDimmerLights_Dimming@value^(0+128),w
 15391  1497  0020               	movlb	0	; select bank0
 15392  1498  00EC               	movwf	??_setDimmerLights_Dimming
 15393  1499  086C               	movf	??_setDimmerLights_Dimming,w
 15394  149A  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 15395  149B  0021               	movlb	1	; select bank1
 15396  149C  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15397  149D  319B  23BC  3194   	fcall	_setDimmerIntr_MaxmumValue
 15398                           
 15399                           ;Dimmer_B1.c: 951: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15400  14A0  0021               	movlb	1	; select bank1
 15401  14A1  0865               	movf	setDimmerLights_Dimming@value^(0+128),w
 15402  14A2  3195  2584  3194   	fcall	_getDimmerLights_ValueToPercent
 15403  14A5  0020               	movlb	0	; select bank0
 15404  14A6  00EC               	movwf	??_setDimmerLights_Dimming
 15405  14A7  086C               	movf	??_setDimmerLights_Dimming,w
 15406  14A8  00E3               	movwf	setProductData@value
 15407  14A9  0021               	movlb	1	; select bank1
 15408  14AA  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15409  14AB  3E14               	addlw	20
 15410  14AC  3199  2173  3194   	fcall	_setProductData
 15411                           
 15412                           ;Dimmer_B1.c: 958: setMemory_Modify(1);
 15413  14AF  3001               	movlw	1
 15414  14B0  319A  22B0  3194   	fcall	_setMemory_Modify
 15415                           
 15416                           ;Dimmer_B1.c: 962: setRF_DimmerLights(lights, 1);
 15417  14B3  0020               	movlb	0	; select bank0
 15418  14B4  01E6               	clrf	setRF_DimmerLights@on
 15419  14B5  0AE6               	incf	setRF_DimmerLights@on,f
 15420  14B6  0021               	movlb	1	; select bank1
 15421  14B7  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15422  14B8  3195  25E9  3194   	fcall	_setRF_DimmerLights
 15423                           
 15424                           ;Dimmer_B1.c: 963: setTxData();
 15425  14BB  318F  2745         	fcall	_setTxData
 15426  14BD  0008               	return
 15427  14BE                     __end_of_setDimmerLights_Dimming:	
 15428                           
 15429                           	psect	text101
 15430  0F45                     __ptext101:	
 15431 ;; *************** function _setTxData *****************
 15432 ;; Defined at:
 15433 ;;		line 183 in file "../src/RF_Control_B1.c"
 15434 ;; Parameters:    Size  Location     Type
 15435 ;;		None
 15436 ;; Auto vars:     Size  Location     Type
 15437 ;;  i               1    0        unsigned char 
 15438 ;; Return value:  Size  Location     Type
 15439 ;;		None               void
 15440 ;; Registers used:
 15441 ;;		wreg, fsr1l, fsr1h, status,2
 15442 ;; Tracked objects:
 15443 ;;		On entry : 0/0
 15444 ;;		On exit  : 0/0
 15445 ;;		Unchanged: 0/0
 15446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15451 ;;Total ram usage:        1 bytes
 15452 ;; Hardware stack levels used:    1
 15453 ;; Hardware stack levels required when called:    5
 15454 ;; This function calls:
 15455 ;;		Nothing
 15456 ;; This function is called by:
 15457 ;;		_setDimmerLights_OnOff
 15458 ;;		_setDimmerLights_Dimming
 15459 ;;		_getRxData
 15460 ;;		_setControl_Lights_Table
 15461 ;;		_setRFSW_Control
 15462 ;;		_setRFSW_AdjControl
 15463 ;; This function uses a non-reentrant model
 15464 ;;
 15465                           
 15466                           
 15467                           ;psect for function _setTxData
 15468  0F45                     _setTxData:	
 15469                           
 15470                           ;RF_Control_B1.c: 184: char i;
 15471                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15472                           
 15473                           ;incstack = 0
 15474                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15475  0F45  0021               	movlb	1	; select bank1
 15476  0F46  1C20               	btfss	_RF1^(0+128),0
 15477  0F47  0008               	return
 15478                           
 15479                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15480  0F48  1520               	bsf	_RF1^(0+128),2
 15481                           
 15482                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15483  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15484  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15485                           
 15486                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15487  0F4B  3063               	movlw	99
 15488  0F4C  0020               	movlb	0	; select bank0
 15489  0F4D  00A1               	movwf	??_setTxData
 15490  0F4E  0821               	movf	??_setTxData,w
 15491  0F4F  0023               	movlb	3	; select bank3
 15492  0F50  00A0               	movwf	_RF_Data^(0+384)
 15493                           
 15494                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15495  0F51  3002               	movlw	2
 15496  0F52  0020               	movlb	0	; select bank0
 15497  0F53  00A1               	movwf	??_setTxData
 15498  0F54  0821               	movf	??_setTxData,w
 15499  0F55  0023               	movlb	3	; select bank3
 15500  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15501                           
 15502                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15503  0F57  0021               	movlb	1	; select bank1
 15504  0F58  086D               	movf	_product^(0+128),w
 15505  0F59  0086               	movwf	6
 15506  0F5A  3002               	movlw	2	; select bank4/5
 15507  0F5B  0087               	movwf	7
 15508  0F5C  3002               	movlw	2	; select bank4/5
 15509  0F5D  3F42               	moviw [2]fsr1
 15510  0F5E  0023               	movlb	3	; select bank3
 15511  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15512                           
 15513                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15514  0F60  0021               	movlb	1	; select bank1
 15515  0F61  086D               	movf	_product^(0+128),w
 15516  0F62  0086               	movwf	6
 15517  0F63  3002               	movlw	2	; select bank4/5
 15518  0F64  0087               	movwf	7
 15519  0F65  3002               	movlw	2	; select bank4/5
 15520  0F66  3F43               	moviw [3]fsr1
 15521  0F67  0023               	movlb	3	; select bank3
 15522  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15523                           
 15524                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15525  0F69  0021               	movlb	1	; select bank1
 15526  0F6A  086D               	movf	_product^(0+128),w
 15527  0F6B  0086               	movwf	6
 15528  0F6C  3002               	movlw	2	; select bank4/5
 15529  0F6D  0087               	movwf	7
 15530  0F6E  3002               	movlw	2	; select bank4/5
 15531  0F6F  3F44               	moviw [4]fsr1
 15532  0F70  0023               	movlb	3	; select bank3
 15533  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15534                           
 15535                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15536  0F72  0021               	movlb	1	; select bank1
 15537  0F73  086D               	movf	_product^(0+128),w
 15538  0F74  0086               	movwf	6
 15539  0F75  3002               	movlw	2	; select bank4/5
 15540  0F76  0087               	movwf	7
 15541  0F77  3002               	movlw	2	; select bank4/5
 15542  0F78  3F45               	moviw [5]fsr1
 15543  0F79  0023               	movlb	3	; select bank3
 15544  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15545                           
 15546                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15547  0F7B  0021               	movlb	1	; select bank1
 15548  0F7C  086D               	movf	_product^(0+128),w
 15549  0F7D  0086               	movwf	6
 15550  0F7E  3002               	movlw	2	; select bank4/5
 15551  0F7F  0087               	movwf	7
 15552  0F80  3002               	movlw	2	; select bank4/5
 15553  0F81  3F46               	moviw [6]fsr1
 15554  0F82  0023               	movlb	3	; select bank3
 15555  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15556                           
 15557                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15558  0F84  0021               	movlb	1	; select bank1
 15559  0F85  086D               	movf	_product^(0+128),w
 15560  0F86  0086               	movwf	6
 15561  0F87  3002               	movlw	2	; select bank4/5
 15562  0F88  0087               	movwf	7
 15563  0F89  3002               	movlw	2	; select bank4/5
 15564  0F8A  3F47               	moviw [7]fsr1
 15565  0F8B  0023               	movlb	3	; select bank3
 15566  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15567                           
 15568                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15569  0F8D  0021               	movlb	1	; select bank1
 15570  0F8E  086D               	movf	_product^(0+128),w
 15571  0F8F  0086               	movwf	6
 15572  0F90  3002               	movlw	2	; select bank4/5
 15573  0F91  0087               	movwf	7
 15574  0F92  3002               	movlw	2	; select bank4/5
 15575  0F93  3F48               	moviw [8]fsr1
 15576  0F94  0023               	movlb	3	; select bank3
 15577  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15578                           
 15579                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15580  0F96  0021               	movlb	1	; select bank1
 15581  0F97  086D               	movf	_product^(0+128),w
 15582  0F98  0086               	movwf	6
 15583  0F99  3002               	movlw	2	; select bank4/5
 15584  0F9A  0087               	movwf	7
 15585  0F9B  3002               	movlw	2	; select bank4/5
 15586  0F9C  3F49               	moviw [9]fsr1
 15587  0F9D  0023               	movlb	3	; select bank3
 15588  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15589                           
 15590                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15591  0F9F  0021               	movlb	1	; select bank1
 15592  0FA0  086D               	movf	_product^(0+128),w
 15593  0FA1  0086               	movwf	6
 15594  0FA2  3002               	movlw	2	; select bank4/5
 15595  0FA3  0087               	movwf	7
 15596  0FA4  3002               	movlw	2	; select bank4/5
 15597  0FA5  3F4A               	moviw [10]fsr1
 15598  0FA6  0023               	movlb	3	; select bank3
 15599  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15600                           
 15601                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15602  0FA8  0021               	movlb	1	; select bank1
 15603  0FA9  086D               	movf	_product^(0+128),w
 15604  0FAA  0086               	movwf	6
 15605  0FAB  3002               	movlw	2	; select bank4/5
 15606  0FAC  0087               	movwf	7
 15607  0FAD  3002               	movlw	2	; select bank4/5
 15608  0FAE  3F4B               	moviw [11]fsr1
 15609  0FAF  0023               	movlb	3	; select bank3
 15610  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15611                           
 15612                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15613  0FB1  0021               	movlb	1	; select bank1
 15614  0FB2  086D               	movf	_product^(0+128),w
 15615  0FB3  0086               	movwf	6
 15616  0FB4  3002               	movlw	2	; select bank4/5
 15617  0FB5  0087               	movwf	7
 15618  0FB6  3002               	movlw	2	; select bank4/5
 15619  0FB7  3F4C               	moviw [12]fsr1
 15620  0FB8  0023               	movlb	3	; select bank3
 15621  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15622                           
 15623                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15624  0FBA  0021               	movlb	1	; select bank1
 15625  0FBB  086D               	movf	_product^(0+128),w
 15626  0FBC  0086               	movwf	6
 15627  0FBD  3002               	movlw	2	; select bank4/5
 15628  0FBE  0087               	movwf	7
 15629  0FBF  3002               	movlw	2	; select bank4/5
 15630  0FC0  3F4D               	moviw [13]fsr1
 15631  0FC1  0023               	movlb	3	; select bank3
 15632  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15633                           
 15634                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15635  0FC3  0021               	movlb	1	; select bank1
 15636  0FC4  086D               	movf	_product^(0+128),w
 15637  0FC5  0086               	movwf	6
 15638  0FC6  3002               	movlw	2	; select bank4/5
 15639  0FC7  0087               	movwf	7
 15640  0FC8  3002               	movlw	2	; select bank4/5
 15641  0FC9  3F4E               	moviw [14]fsr1
 15642  0FCA  0023               	movlb	3	; select bank3
 15643  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15644                           
 15645                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15646  0FCC  0021               	movlb	1	; select bank1
 15647  0FCD  086D               	movf	_product^(0+128),w
 15648  0FCE  0086               	movwf	6
 15649  0FCF  3002               	movlw	2	; select bank4/5
 15650  0FD0  0087               	movwf	7
 15651  0FD1  3002               	movlw	2	; select bank4/5
 15652  0FD2  3F4F               	moviw [15]fsr1
 15653  0FD3  0023               	movlb	3	; select bank3
 15654  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15655                           
 15656                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15657  0FD5  0021               	movlb	1	; select bank1
 15658  0FD6  086D               	movf	_product^(0+128),w
 15659  0FD7  0086               	movwf	6
 15660  0FD8  3002               	movlw	2	; select bank4/5
 15661  0FD9  0087               	movwf	7
 15662  0FDA  3002               	movlw	2	; select bank4/5
 15663  0FDB  3F50               	moviw [16]fsr1
 15664  0FDC  0023               	movlb	3	; select bank3
 15665  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15666                           
 15667                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15668  0FDE  0021               	movlb	1	; select bank1
 15669  0FDF  086D               	movf	_product^(0+128),w
 15670  0FE0  0086               	movwf	6
 15671  0FE1  3002               	movlw	2	; select bank4/5
 15672  0FE2  0087               	movwf	7
 15673  0FE3  3002               	movlw	2	; select bank4/5
 15674  0FE4  3F51               	moviw [17]fsr1
 15675  0FE5  0023               	movlb	3	; select bank3
 15676  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15677                           
 15678                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15679  0FE7  0021               	movlb	1	; select bank1
 15680  0FE8  086D               	movf	_product^(0+128),w
 15681  0FE9  0086               	movwf	6
 15682  0FEA  3002               	movlw	2	; select bank4/5
 15683  0FEB  0087               	movwf	7
 15684  0FEC  3002               	movlw	2	; select bank4/5
 15685  0FED  3F52               	moviw [18]fsr1
 15686  0FEE  0023               	movlb	3	; select bank3
 15687  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15688                           
 15689                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15690  0FF0  0021               	movlb	1	; select bank1
 15691  0FF1  086D               	movf	_product^(0+128),w
 15692  0FF2  0086               	movwf	6
 15693  0FF3  3002               	movlw	2	; select bank4/5
 15694  0FF4  0087               	movwf	7
 15695  0FF5  3002               	movlw	2	; select bank4/5
 15696  0FF6  3F53               	moviw [19]fsr1
 15697  0FF7  0023               	movlb	3	; select bank3
 15698  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15699                           
 15700                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15701  0FF9  30D2               	movlw	210
 15702  0FFA  0020               	movlb	0	; select bank0
 15703  0FFB  00A1               	movwf	??_setTxData
 15704  0FFC  0821               	movf	??_setTxData,w
 15705  0FFD  0023               	movlb	3	; select bank3
 15706  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15707  0FFF  0008               	return
 15708  1000                     __end_of_setTxData:	
 15709                           
 15710                           	psect	text102
 15711  1AC3                     __ptext102:	
 15712 ;; *************** function _setRF_TransceiveGO *****************
 15713 ;; Defined at:
 15714 ;;		line 470 in file "../src/RF_Control_B1.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  command         1    wreg     unsigned char 
 15717 ;; Auto vars:     Size  Location     Type
 15718 ;;  command         1    2[BANK0 ] unsigned char 
 15719 ;; Return value:  Size  Location     Type
 15720 ;;		None               void
 15721 ;; Registers used:
 15722 ;;		wreg, status,2, status,0
 15723 ;; Tracked objects:
 15724 ;;		On entry : 0/0
 15725 ;;		On exit  : 0/0
 15726 ;;		Unchanged: 0/0
 15727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;Total ram usage:        2 bytes
 15733 ;; Hardware stack levels used:    1
 15734 ;; Hardware stack levels required when called:    5
 15735 ;; This function calls:
 15736 ;;		Nothing
 15737 ;; This function is called by:
 15738 ;;		_setDimmerLights_Dimming
 15739 ;; This function uses a non-reentrant model
 15740 ;;
 15741                           
 15742                           
 15743                           ;psect for function _setRF_TransceiveGO
 15744  1AC3                     _setRF_TransceiveGO:	
 15745                           
 15746                           ;incstack = 0
 15747                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15748                           ;setRF_TransceiveGO@command stored from wreg
 15749  1AC3  0020               	movlb	0	; select bank0
 15750  1AC4  00A2               	movwf	setRF_TransceiveGO@command
 15751                           
 15752                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15753  1AC5  0822               	movf	setRF_TransceiveGO@command,w
 15754  1AC6  3A01               	xorlw	1
 15755  1AC7  3000               	movlw	0
 15756  1AC8  1903               	skipnz
 15757  1AC9  3001               	movlw	1
 15758  1ACA  00A1               	movwf	??_setRF_TransceiveGO
 15759  1ACB  0DA1               	rlf	??_setRF_TransceiveGO,f
 15760  1ACC  0DA1               	rlf	??_setRF_TransceiveGO,f
 15761  1ACD  0021               	movlb	1	; select bank1
 15762  1ACE  0820               	movf	_RF1^(0+128),w
 15763  1ACF  0020               	movlb	0	; select bank0
 15764  1AD0  0621               	xorwf	??_setRF_TransceiveGO,w
 15765  1AD1  39FB               	andlw	-5
 15766  1AD2  0621               	xorwf	??_setRF_TransceiveGO,w
 15767  1AD3  0021               	movlb	1	; select bank1
 15768  1AD4  00A0               	movwf	_RF1^(0+128)
 15769  1AD5  0008               	return
 15770  1AD6                     __end_of_setRF_TransceiveGO:	
 15771                           
 15772                           	psect	text103
 15773  15E9                     __ptext103:	
 15774 ;; *************** function _setRF_DimmerLights *****************
 15775 ;; Defined at:
 15776 ;;		line 455 in file "../src/RF_Control_B1.c"
 15777 ;; Parameters:    Size  Location     Type
 15778 ;;  lights          1    wreg     unsigned char 
 15779 ;;  on              1   70[BANK0 ] unsigned char 
 15780 ;; Auto vars:     Size  Location     Type
 15781 ;;  lights          1   74[BANK0 ] unsigned char 
 15782 ;;  status          1   73[BANK0 ] unsigned char 
 15783 ;; Return value:  Size  Location     Type
 15784 ;;		None               void
 15785 ;; Registers used:
 15786 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15787 ;; Tracked objects:
 15788 ;;		On entry : 0/0
 15789 ;;		On exit  : 0/0
 15790 ;;		Unchanged: 0/0
 15791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15792 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;Total ram usage:        5 bytes
 15797 ;; Hardware stack levels used:    1
 15798 ;; Hardware stack levels required when called:    6
 15799 ;; This function calls:
 15800 ;;		_setProductData
 15801 ;; This function is called by:
 15802 ;;		_setDimmerLights_OnOff
 15803 ;;		_setDimmerLights_Dimming
 15804 ;;		_setRFSW_Control
 15805 ;; This function uses a non-reentrant model
 15806 ;;
 15807                           
 15808                           
 15809                           ;psect for function _setRF_DimmerLights
 15810  15E9                     _setRF_DimmerLights:	
 15811                           
 15812                           ;incstack = 0
 15813                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15814                           ;setRF_DimmerLights@lights stored from wreg
 15815  15E9  0020               	movlb	0	; select bank0
 15816  15EA  00EA               	movwf	setRF_DimmerLights@lights
 15817                           
 15818                           ;RF_Control_B1.c: 456: char status = 1;
 15819  15EB  01E9               	clrf	setRF_DimmerLights@status
 15820  15EC  0AE9               	incf	setRF_DimmerLights@status,f
 15821                           
 15822                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15823  15ED  086A               	movf	setRF_DimmerLights@lights,w
 15824  15EE  3EFF               	addlw	-1
 15825  15EF  0A89               	incf	9,f
 15826  15F0  2DF3               	goto	u11160
 15827  15F1                     u11165:	
 15828  15F1  1003               	clrc
 15829  15F2  0DE9               	rlf	setRF_DimmerLights@status,f
 15830  15F3                     u11160:	
 15831  15F3  3EFF               	addlw	-1
 15832  15F4  1D03               	skipz
 15833  15F5  2DF1               	goto	u11165
 15834                           
 15835                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15836  15F6  086A               	movf	setRF_DimmerLights@lights,w
 15837  15F7  00E7               	movwf	??_setRF_DimmerLights
 15838  15F8  0867               	movf	??_setRF_DimmerLights,w
 15839  15F9  00E3               	movwf	setProductData@value
 15840  15FA  300B               	movlw	11
 15841  15FB  3199  2173  3195   	fcall	_setProductData
 15842                           
 15843                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15844  15FE  0020               	movlb	0	; select bank0
 15845  15FF  086A               	movf	setRF_DimmerLights@lights,w
 15846  1600  3E1A               	addlw	26
 15847  1601  0021               	movlb	1	; select bank1
 15848  1602  076D               	addwf	_product^(0+128),w
 15849  1603  0020               	movlb	0	; select bank0
 15850  1604  00E7               	movwf	??_setRF_DimmerLights
 15851  1605  0867               	movf	??_setRF_DimmerLights,w
 15852  1606  0086               	movwf	6
 15853  1607  3002               	movlw	2	; select bank4/5
 15854  1608  0087               	movwf	7
 15855  1609  0801               	movf	1,w
 15856  160A  00E8               	movwf	??_setRF_DimmerLights+1
 15857  160B  0868               	movf	??_setRF_DimmerLights+1,w
 15858  160C  00E3               	movwf	setProductData@value
 15859  160D  3011               	movlw	17
 15860  160E  3199  2173  3195   	fcall	_setProductData
 15861                           
 15862                           ;RF_Control_B1.c: 460: if (on == 1) {
 15863  1611  0020               	movlb	0	; select bank0
 15864  1612  0866               	movf	setRF_DimmerLights@on,w
 15865  1613  3A01               	xorlw	1
 15866  1614  1D03               	skipz
 15867  1615  2E38               	goto	l9636
 15868                           
 15869                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15870  1616  086A               	movf	setRF_DimmerLights@lights,w
 15871  1617  3E14               	addlw	20
 15872  1618  0021               	movlb	1	; select bank1
 15873  1619  076D               	addwf	_product^(0+128),w
 15874  161A  0020               	movlb	0	; select bank0
 15875  161B  00E7               	movwf	??_setRF_DimmerLights
 15876  161C  0867               	movf	??_setRF_DimmerLights,w
 15877  161D  0086               	movwf	6
 15878  161E  3002               	movlw	2	; select bank4/5
 15879  161F  0087               	movwf	7
 15880  1620  0801               	movf	1,w
 15881  1621  00E8               	movwf	??_setRF_DimmerLights+1
 15882  1622  0868               	movf	??_setRF_DimmerLights+1,w
 15883  1623  00E3               	movwf	setProductData@value
 15884  1624  3009               	movlw	9
 15885  1625  3199  2173  3195   	fcall	_setProductData
 15886                           
 15887                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15888  1628  0021               	movlb	1	; select bank1
 15889  1629  086D               	movf	_product^(0+128),w
 15890  162A  3E0F               	addlw	15
 15891  162B  0086               	movwf	6
 15892  162C  3002               	movlw	2	; select bank4/5
 15893  162D  0087               	movwf	7
 15894  162E  0801               	movf	1,w
 15895  162F  0020               	movlb	0	; select bank0
 15896  1630  0469               	iorwf	setRF_DimmerLights@status,w
 15897  1631  00E7               	movwf	??_setRF_DimmerLights
 15898  1632  0867               	movf	??_setRF_DimmerLights,w
 15899  1633  00E3               	movwf	setProductData@value
 15900  1634  300F               	movlw	15
 15901  1635  3199  2173         	fcall	_setProductData
 15902                           
 15903                           ;RF_Control_B1.c: 463: } else {
 15904  1637  0008               	return
 15905  1638                     l9636:	
 15906                           
 15907                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15908  1638  0020               	movlb	0	; select bank0
 15909  1639  01E3               	clrf	setProductData@value
 15910  163A  3009               	movlw	9
 15911  163B  3199  2173  3195   	fcall	_setProductData
 15912                           
 15913                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15914  163E  0021               	movlb	1	; select bank1
 15915  163F  086D               	movf	_product^(0+128),w
 15916  1640  3E0F               	addlw	15
 15917  1641  0086               	movwf	6
 15918  1642  3002               	movlw	2	; select bank4/5
 15919  1643  0087               	movwf	7
 15920  1644  0020               	movlb	0	; select bank0
 15921  1645  0969               	comf	setRF_DimmerLights@status,w
 15922  1646  0501               	andwf	1,w
 15923  1647  00E7               	movwf	??_setRF_DimmerLights
 15924  1648  0867               	movf	??_setRF_DimmerLights,w
 15925  1649  00E3               	movwf	setProductData@value
 15926  164A  300F               	movlw	15
 15927  164B  3199  2173         	fcall	_setProductData
 15928  164D  0008               	return
 15929  164E                     __end_of_setRF_DimmerLights:	
 15930                           
 15931                           	psect	text104
 15932  1CB9                     __ptext104:	
 15933 ;; *************** function _setDimmerLights_Line *****************
 15934 ;; Defined at:
 15935 ;;		line 1008 in file "../src/Dimmer_B1.c"
 15936 ;; Parameters:    Size  Location     Type
 15937 ;;  lights          1    wreg     unsigned char 
 15938 ;; Auto vars:     Size  Location     Type
 15939 ;;  lights          1    1[BANK0 ] unsigned char 
 15940 ;; Return value:  Size  Location     Type
 15941 ;;		None               void
 15942 ;; Registers used:
 15943 ;;		wreg
 15944 ;; Tracked objects:
 15945 ;;		On entry : 0/0
 15946 ;;		On exit  : 0/0
 15947 ;;		Unchanged: 0/0
 15948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15953 ;;Total ram usage:        1 bytes
 15954 ;; Hardware stack levels used:    1
 15955 ;; Hardware stack levels required when called:    5
 15956 ;; This function calls:
 15957 ;;		Nothing
 15958 ;; This function is called by:
 15959 ;;		_setDimmerLights_OnOff
 15960 ;;		_setDimmerLights_Dimming
 15961 ;; This function uses a non-reentrant model
 15962 ;;
 15963                           
 15964                           
 15965                           ;psect for function _setDimmerLights_Line
 15966  1CB9                     _setDimmerLights_Line:	
 15967                           
 15968                           ;incstack = 0
 15969                           ; Regs used in _setDimmerLights_Line: [wreg]
 15970                           ;setDimmerLights_Line@lights stored from wreg
 15971  1CB9  0020               	movlb	0	; select bank0
 15972  1CBA  00A1               	movwf	setDimmerLights_Line@lights
 15973                           
 15974                           ;Dimmer_B1.c: 1009: Dimmer.LoadGO = 1;
 15975  1CBB  0022               	movlb	2	; select bank2
 15976  1CBC  14AC               	bsf	_Dimmer^(0+256),1
 15977                           
 15978                           ;Dimmer_B1.c: 1011: DimmerLights1.Line = 0;
 15979  1CBD  10E9               	bcf	(_DimmerLights1^(0+256)+1),1
 15980                           
 15981                           ;Dimmer_B1.c: 1012: if (lights == 1 && lights != 0) {
 15982  1CBE  0020               	movlb	0	; select bank0
 15983  1CBF  0821               	movf	setDimmerLights_Line@lights,w
 15984  1CC0  3A01               	xorlw	1
 15985  1CC1  1D03               	skipz
 15986  1CC2  2CC8               	goto	l912
 15987  1CC3  0821               	movf	setDimmerLights_Line@lights,w
 15988  1CC4  1903               	btfsc	3,2
 15989  1CC5  2CC8               	goto	l912
 15990                           
 15991                           ;Dimmer_B1.c: 1013: DimmerLights1.Line = 1;
 15992  1CC6  0022               	movlb	2	; select bank2
 15993  1CC7  14E9               	bsf	(_DimmerLights1^(0+256)+1),1
 15994  1CC8                     l912:	
 15995                           
 15996                           ;Dimmer_B1.c: 1014: }
 15997                           ;Dimmer_B1.c: 1017: DimmerLights2.Line = 0;
 15998  1CC8  0023               	movlb	3	; select bank3
 15999  1CC9  10D1               	bcf	(_DimmerLights2^(0+384)+1),1
 16000                           
 16001                           ;Dimmer_B1.c: 1018: if (lights == 2 && lights != 0) {
 16002  1CCA  0020               	movlb	0	; select bank0
 16003  1CCB  0821               	movf	setDimmerLights_Line@lights,w
 16004  1CCC  3A02               	xorlw	2
 16005  1CCD  1D03               	skipz
 16006  1CCE  0008               	return
 16007  1CCF  0821               	movf	setDimmerLights_Line@lights,w
 16008  1CD0  1903               	btfsc	3,2
 16009  1CD1  0008               	return
 16010                           
 16011                           ;Dimmer_B1.c: 1019: DimmerLights2.Line = 1;
 16012  1CD2  0023               	movlb	3	; select bank3
 16013  1CD3  14D1               	bsf	(_DimmerLights2^(0+384)+1),1
 16014  1CD4  0020               	movlb	0	; select bank0
 16015  1CD5  0008               	return
 16016  1CD6                     __end_of_setDimmerLights_Line:	
 16017                           
 16018                           	psect	text105
 16019  1BBC                     __ptext105:	
 16020 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16021 ;; Defined at:
 16022 ;;		line 124 in file "../src/Dimmer_B1.c"
 16023 ;; Parameters:    Size  Location     Type
 16024 ;;  lights          1    wreg     unsigned char 
 16025 ;;  value           1   67[BANK0 ] unsigned char 
 16026 ;; Auto vars:     Size  Location     Type
 16027 ;;  lights          1   69[BANK0 ] unsigned char 
 16028 ;; Return value:  Size  Location     Type
 16029 ;;		None               void
 16030 ;; Registers used:
 16031 ;;		wreg
 16032 ;; Tracked objects:
 16033 ;;		On entry : 0/0
 16034 ;;		On exit  : 0/0
 16035 ;;		Unchanged: 0/0
 16036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16037 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;Total ram usage:        3 bytes
 16042 ;; Hardware stack levels used:    1
 16043 ;; Hardware stack levels required when called:    5
 16044 ;; This function calls:
 16045 ;;		Nothing
 16046 ;; This function is called by:
 16047 ;;		_setDimmerLights_OnOff
 16048 ;;		_setDimmerLights_Dimming
 16049 ;;		_setRFSW_AdjControl
 16050 ;; This function uses a non-reentrant model
 16051 ;;
 16052                           
 16053                           
 16054                           ;psect for function _setDimmerIntr_MaxmumValue
 16055  1BBC                     _setDimmerIntr_MaxmumValue:	
 16056                           
 16057                           ;incstack = 0
 16058                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16059                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16060  1BBC  0020               	movlb	0	; select bank0
 16061  1BBD  00E5               	movwf	setDimmerIntr_MaxmumValue@lights
 16062                           
 16063                           ;Dimmer_B1.c: 126: if (lights == 1) {
 16064  1BBE  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 16065  1BBF  3A01               	xorlw	1
 16066  1BC0  1D03               	skipz
 16067  1BC1  2BC8               	goto	l9620
 16068                           
 16069                           ;Dimmer_B1.c: 127: DimmerIntr1.MaxmumValue = value;
 16070  1BC2  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 16071  1BC3  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 16072  1BC4  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 16073  1BC5  0021               	movlb	1	; select bank1
 16074  1BC6  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16075                           
 16076                           ;Dimmer_B1.c: 128: }
 16077  1BC7  0008               	return
 16078  1BC8                     l9620:	
 16079                           
 16080                           ;Dimmer_B1.c: 131: else if (lights == 2) {
 16081  1BC8  0020               	movlb	0	; select bank0
 16082  1BC9  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 16083  1BCA  3A02               	xorlw	2
 16084  1BCB  1D03               	skipz
 16085  1BCC  0008               	return
 16086                           
 16087                           ;Dimmer_B1.c: 132: DimmerIntr2.MaxmumValue = value;
 16088  1BCD  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 16089  1BCE  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 16090  1BCF  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 16091  1BD0  0021               	movlb	1	; select bank1
 16092  1BD1  00CD               	movwf	(_DimmerIntr2^(0+128)+6)
 16093  1BD2  0008               	return
 16094  1BD3                     __end_of_setDimmerIntr_MaxmumValue:	
 16095                           
 16096                           	psect	text106
 16097  1F15                     __ptext106:	
 16098 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16099 ;; Defined at:
 16100 ;;		line 201 in file "../src/Dimmer_B1.c"
 16101 ;; Parameters:    Size  Location     Type
 16102 ;;  lights          1    wreg     unsigned char 
 16103 ;;  command         1    1[BANK0 ] unsigned char 
 16104 ;; Auto vars:     Size  Location     Type
 16105 ;;  lights          1    3[BANK0 ] unsigned char 
 16106 ;; Return value:  Size  Location     Type
 16107 ;;		None               void
 16108 ;; Registers used:
 16109 ;;		wreg, status,2, status,0
 16110 ;; Tracked objects:
 16111 ;;		On entry : 0/0
 16112 ;;		On exit  : 0/0
 16113 ;;		Unchanged: 0/0
 16114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16115 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16118 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16119 ;;Total ram usage:        3 bytes
 16120 ;; Hardware stack levels used:    1
 16121 ;; Hardware stack levels required when called:    5
 16122 ;; This function calls:
 16123 ;;		Nothing
 16124 ;; This function is called by:
 16125 ;;		_setDimmerLights_Dimming
 16126 ;; This function uses a non-reentrant model
 16127 ;;
 16128                           
 16129                           
 16130                           ;psect for function _setDimmerIntr_Dimming_Sw
 16131  1F15                     _setDimmerIntr_Dimming_Sw:	
 16132                           
 16133                           ;incstack = 0
 16134                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16135                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16136  1F15  0020               	movlb	0	; select bank0
 16137  1F16  00A3               	movwf	setDimmerIntr_Dimming_Sw@lights
 16138                           
 16139                           ;Dimmer_B1.c: 203: if (lights == 1) {
 16140  1F17  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16141  1F18  3A01               	xorlw	1
 16142  1F19  1D03               	skipz
 16143  1F1A  2F2B               	goto	l9766
 16144                           
 16145                           ;Dimmer_B1.c: 204: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16146  1F1B  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16147  1F1C  3A01               	xorlw	1
 16148  1F1D  3000               	movlw	0
 16149  1F1E  1903               	skipnz
 16150  1F1F  3001               	movlw	1
 16151  1F20  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16152  1F21  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16153  1F22  0021               	movlb	1	; select bank1
 16154  1F23  083B               	movf	_DimmerIntr1^(0+128),w
 16155  1F24  0020               	movlb	0	; select bank0
 16156  1F25  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16157  1F26  39EF               	andlw	-17
 16158  1F27  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16159  1F28  0021               	movlb	1	; select bank1
 16160  1F29  00BB               	movwf	_DimmerIntr1^(0+128)
 16161                           
 16162                           ;Dimmer_B1.c: 205: }
 16163  1F2A  0008               	return
 16164  1F2B                     l9766:	
 16165                           
 16166                           ;Dimmer_B1.c: 208: else if (lights == 2) {
 16167  1F2B  0020               	movlb	0	; select bank0
 16168  1F2C  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16169  1F2D  3A02               	xorlw	2
 16170  1F2E  1D03               	skipz
 16171  1F2F  0008               	return
 16172                           
 16173                           ;Dimmer_B1.c: 209: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16174  1F30  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16175  1F31  3A01               	xorlw	1
 16176  1F32  3000               	movlw	0
 16177  1F33  1903               	skipnz
 16178  1F34  3001               	movlw	1
 16179  1F35  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16180  1F36  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16181  1F37  0021               	movlb	1	; select bank1
 16182  1F38  0847               	movf	_DimmerIntr2^(0+128),w
 16183  1F39  0020               	movlb	0	; select bank0
 16184  1F3A  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16185  1F3B  39EF               	andlw	-17
 16186  1F3C  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16187  1F3D  0021               	movlb	1	; select bank1
 16188  1F3E  00C7               	movwf	_DimmerIntr2^(0+128)
 16189  1F3F  0008               	return
 16190  1F40                     __end_of_setDimmerIntr_Dimming_Sw:	
 16191                           
 16192                           	psect	text107
 16193  1B78                     __ptext107:	
 16194 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16195 ;; Defined at:
 16196 ;;		line 102 in file "../src/Dimmer_B1.c"
 16197 ;; Parameters:    Size  Location     Type
 16198 ;;  lights          1    wreg     unsigned char 
 16199 ;; Auto vars:     Size  Location     Type
 16200 ;;  lights          1    3[BANK0 ] unsigned char 
 16201 ;;  value           1    2[BANK0 ] unsigned char 
 16202 ;; Return value:  Size  Location     Type
 16203 ;;                  1    wreg      unsigned char 
 16204 ;; Registers used:
 16205 ;;		wreg, status,2
 16206 ;; Tracked objects:
 16207 ;;		On entry : 0/0
 16208 ;;		On exit  : 0/0
 16209 ;;		Unchanged: 0/0
 16210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16215 ;;Total ram usage:        3 bytes
 16216 ;; Hardware stack levels used:    1
 16217 ;; Hardware stack levels required when called:    5
 16218 ;; This function calls:
 16219 ;;		Nothing
 16220 ;; This function is called by:
 16221 ;;		_setDimmerLights_Dimming
 16222 ;; This function uses a non-reentrant model
 16223 ;;
 16224                           
 16225                           
 16226                           ;psect for function _getDimmerIntr_DimmingValue
 16227  1B78                     _getDimmerIntr_DimmingValue:	
 16228                           
 16229                           ;incstack = 0
 16230                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16231                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16232  1B78  0020               	movlb	0	; select bank0
 16233  1B79  00A3               	movwf	getDimmerIntr_DimmingValue@lights
 16234                           
 16235                           ;Dimmer_B1.c: 103: char value = 0;
 16236  1B7A  01A2               	clrf	getDimmerIntr_DimmingValue@value
 16237                           
 16238                           ;Dimmer_B1.c: 105: if (lights == 1) {
 16239  1B7B  0823               	movf	getDimmerIntr_DimmingValue@lights,w
 16240  1B7C  3A01               	xorlw	1
 16241  1B7D  1D03               	skipz
 16242  1B7E  2B82               	goto	l9756
 16243                           
 16244                           ;Dimmer_B1.c: 106: value = DimmerIntr1.DimmingValue;
 16245  1B7F  0021               	movlb	1	; select bank1
 16246  1B80  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 16247  1B81  2B88               	goto	L10
 16248  1B82                     l9756:	
 16249                           ;Dimmer_B1.c: 107: }
 16250                           
 16251                           
 16252                           ;Dimmer_B1.c: 110: else if (lights == 2) {
 16253  1B82  0823               	movf	getDimmerIntr_DimmingValue@lights,w
 16254  1B83  3A02               	xorlw	2
 16255  1B84  1D03               	skipz
 16256  1B85  2B8C               	goto	l759
 16257                           
 16258                           ;Dimmer_B1.c: 111: value = DimmerIntr2.DimmingValue;
 16259  1B86  0021               	movlb	1	; select bank1
 16260  1B87  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 16261  1B88                     L10:	
 16262  1B88  0020               	movlb	0	; select bank0
 16263  1B89  00A1               	movwf	??_getDimmerIntr_DimmingValue
 16264  1B8A  0821               	movf	??_getDimmerIntr_DimmingValue,w
 16265  1B8B  00A2               	movwf	getDimmerIntr_DimmingValue@value
 16266  1B8C                     l759:	
 16267                           
 16268                           ;Dimmer_B1.c: 112: }
 16269                           ;Dimmer_B1.c: 119: return value;
 16270  1B8C  0822               	movf	getDimmerIntr_DimmingValue@value,w
 16271  1B8D  0008               	return
 16272  1B8E                     __end_of_getDimmerIntr_DimmingValue:	
 16273                           
 16274                           	psect	text108
 16275  10F3                     __ptext108:	
 16276 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16277 ;; Defined at:
 16278 ;;		line 969 in file "../src/Dimmer_B1.c"
 16279 ;; Parameters:    Size  Location     Type
 16280 ;;  lights          1    wreg     unsigned char 
 16281 ;; Auto vars:     Size  Location     Type
 16282 ;;  lights          1    6[BANK0 ] unsigned char 
 16283 ;;  allow           1    7[BANK0 ] unsigned char 
 16284 ;; Return value:  Size  Location     Type
 16285 ;;                  1    wreg      unsigned char 
 16286 ;; Registers used:
 16287 ;;		wreg, status,2, status,0, pclath, cstack
 16288 ;; Tracked objects:
 16289 ;;		On entry : 0/0
 16290 ;;		On exit  : 0/0
 16291 ;;		Unchanged: 0/0
 16292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;Total ram usage:        6 bytes
 16298 ;; Hardware stack levels used:    1
 16299 ;; Hardware stack levels required when called:    6
 16300 ;; This function calls:
 16301 ;;		_getLoad_OK
 16302 ;; This function is called by:
 16303 ;;		_setDimmerLights_Main
 16304 ;; This function uses a non-reentrant model
 16305 ;;
 16306                           
 16307                           
 16308                           ;psect for function _getDimmerLights_Allow_Condition
 16309  10F3                     _getDimmerLights_Allow_Condition:	
 16310                           
 16311                           ;incstack = 0
 16312                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16313                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16314  10F3  0020               	movlb	0	; select bank0
 16315  10F4  00A6               	movwf	getDimmerLights_Allow_Condition@lights
 16316                           
 16317                           ;Dimmer_B1.c: 970: char allow = 0;
 16318  10F5  01A7               	clrf	getDimmerLights_Allow_Condition@allow
 16319                           
 16320                           ;Dimmer_B1.c: 976: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16321  10F6  01A3               	clrf	_getDimmerLights_Allow_Condition$2393
 16322  10F7  0AA3               	incf	_getDimmerLights_Allow_Condition$2393,f
 16323  10F8  3199  2101  3190   	fcall	_getLoad_OK
 16324  10FB  3800               	iorlw	0
 16325  10FC  1D03               	skipz
 16326  10FD  2903               	goto	l7470
 16327  10FE  0022               	movlb	2	; select bank2
 16328  10FF  18AC               	btfsc	_Dimmer^(0+256),1
 16329  1100  2903               	goto	l7470
 16330  1101  0020               	movlb	0	; select bank0
 16331  1102  01A3               	clrf	_getDimmerLights_Allow_Condition$2393
 16332  1103                     l7470:	
 16333  1103  0020               	movlb	0	; select bank0
 16334  1104  0823               	movf	_getDimmerLights_Allow_Condition$2393,w
 16335  1105  00A2               	movwf	??_getDimmerLights_Allow_Condition
 16336  1106  0822               	movf	??_getDimmerLights_Allow_Condition,w
 16337  1107  00A7               	movwf	getDimmerLights_Allow_Condition@allow
 16338                           
 16339                           ;Dimmer_B1.c: 980: if (allow == 0) {
 16340  1108  08A7               	movf	getDimmerLights_Allow_Condition@allow,f
 16341  1109  1D03               	skipz
 16342  110A  292F               	goto	l7494
 16343                           
 16344                           ;Dimmer_B1.c: 981: if (lights == 1) {
 16345  110B  0826               	movf	getDimmerLights_Allow_Condition@lights,w
 16346  110C  3A01               	xorlw	1
 16347  110D  1D03               	skipz
 16348  110E  291C               	goto	l7484
 16349                           
 16350                           ;Dimmer_B1.c: 982: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16351  110F  01A4               	clrf	_getDimmerLights_Allow_Condition$2394
 16352  1110  0AA4               	incf	_getDimmerLights_Allow_Condition$2394,f
 16353  1111  0023               	movlb	3	; select bank3
 16354  1112  1A50               	btfsc	_DimmerLights2^(0+384),4
 16355  1113  2919               	goto	l7482
 16356  1114  0021               	movlb	1	; select bank1
 16357  1115  1A47               	btfsc	_DimmerIntr2^(0+128),4
 16358  1116  2919               	goto	l7482
 16359  1117  0020               	movlb	0	; select bank0
 16360  1118  01A4               	clrf	_getDimmerLights_Allow_Condition$2394
 16361  1119                     l7482:	
 16362  1119  0020               	movlb	0	; select bank0
 16363  111A  0824               	movf	_getDimmerLights_Allow_Condition$2394,w
 16364  111B  292C               	goto	L11
 16365  111C                     l7484:	
 16366                           ;Dimmer_B1.c: 983: } else if (lights == 2) {
 16367                           
 16368  111C  0826               	movf	getDimmerLights_Allow_Condition@lights,w
 16369  111D  3A02               	xorlw	2
 16370  111E  1D03               	skipz
 16371  111F  292F               	goto	l7494
 16372                           
 16373                           ;Dimmer_B1.c: 984: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16374  1120  01A5               	clrf	_getDimmerLights_Allow_Condition$2395
 16375  1121  0AA5               	incf	_getDimmerLights_Allow_Condition$2395,f
 16376  1122  0022               	movlb	2	; select bank2
 16377  1123  1A68               	btfsc	_DimmerLights1^(0+256),4
 16378  1124  292A               	goto	l7492
 16379  1125  0021               	movlb	1	; select bank1
 16380  1126  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 16381  1127  292A               	goto	l7492
 16382  1128  0020               	movlb	0	; select bank0
 16383  1129  01A5               	clrf	_getDimmerLights_Allow_Condition$2395
 16384  112A                     l7492:	
 16385  112A  0020               	movlb	0	; select bank0
 16386  112B  0825               	movf	_getDimmerLights_Allow_Condition$2395,w
 16387  112C                     L11:	
 16388  112C  00A2               	movwf	??_getDimmerLights_Allow_Condition
 16389  112D  0822               	movf	??_getDimmerLights_Allow_Condition,w
 16390  112E  00A7               	movwf	getDimmerLights_Allow_Condition@allow
 16391  112F                     l7494:	
 16392                           
 16393                           ;Dimmer_B1.c: 985: }
 16394                           ;Dimmer_B1.c: 986: }
 16395                           ;Dimmer_B1.c: 1003: return allow;
 16396  112F  0827               	movf	getDimmerLights_Allow_Condition@allow,w
 16397  1130  0008               	return
 16398  1131                     __end_of_getDimmerLights_Allow_Condition:	
 16399                           
 16400                           	psect	text109
 16401  1901                     __ptext109:	
 16402 ;; *************** function _getLoad_OK *****************
 16403 ;; Defined at:
 16404 ;;		line 272 in file "../src/OverLoad_B1.c"
 16405 ;; Parameters:    Size  Location     Type
 16406 ;;		None
 16407 ;; Auto vars:     Size  Location     Type
 16408 ;;  ok              1    1[BANK0 ] unsigned char 
 16409 ;; Return value:  Size  Location     Type
 16410 ;;                  1    wreg      unsigned char 
 16411 ;; Registers used:
 16412 ;;		wreg, status,2
 16413 ;; Tracked objects:
 16414 ;;		On entry : 0/0
 16415 ;;		On exit  : 0/0
 16416 ;;		Unchanged: 0/0
 16417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;Total ram usage:        1 bytes
 16423 ;; Hardware stack levels used:    1
 16424 ;; Hardware stack levels required when called:    5
 16425 ;; This function calls:
 16426 ;;		Nothing
 16427 ;; This function is called by:
 16428 ;;		_DimmerLights_Main
 16429 ;;		_getDimmerLights_Allow_Condition
 16430 ;; This function uses a non-reentrant model
 16431 ;;
 16432                           
 16433                           
 16434                           ;psect for function _getLoad_OK
 16435  1901                     _getLoad_OK:	
 16436                           
 16437                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 16438                           
 16439                           ;incstack = 0
 16440                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16441  1901  3000               	movlw	0
 16442  1902  0022               	movlb	2	; select bank2
 16443  1903  1BC0               	btfsc	_Load^(0+256),7
 16444  1904  3001               	movlw	1
 16445  1905  0020               	movlb	0	; select bank0
 16446  1906  00A1               	movwf	getLoad_OK@ok
 16447                           
 16448                           ;OverLoad_B1.c: 274: return ok;
 16449  1907  0821               	movf	getLoad_OK@ok,w
 16450  1908  0008               	return
 16451  1909                     __end_of_getLoad_OK:	
 16452                           
 16453                           	psect	text110
 16454  1FCD                     __ptext110:	
 16455 ;; *************** function _getMain_All_Error_Status *****************
 16456 ;; Defined at:
 16457 ;;		line 424 in file "../src/main_B1.c"
 16458 ;; Parameters:    Size  Location     Type
 16459 ;;  command         1    wreg     unsigned char 
 16460 ;; Auto vars:     Size  Location     Type
 16461 ;;  command         1    6[BANK0 ] unsigned char 
 16462 ;;  status          1    7[BANK0 ] unsigned char 
 16463 ;; Return value:  Size  Location     Type
 16464 ;;                  1    wreg      unsigned char 
 16465 ;; Registers used:
 16466 ;;		wreg, status,2, status,0
 16467 ;; Tracked objects:
 16468 ;;		On entry : 0/0
 16469 ;;		On exit  : 0/0
 16470 ;;		Unchanged: 0/0
 16471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16473 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16475 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16476 ;;Total ram usage:        7 bytes
 16477 ;; Hardware stack levels used:    1
 16478 ;; Hardware stack levels required when called:    5
 16479 ;; This function calls:
 16480 ;;		Nothing
 16481 ;; This function is called by:
 16482 ;;		_DimmerLights_Main
 16483 ;;		_Load_Main
 16484 ;;		_setTemp_Main
 16485 ;;		_getRxData
 16486 ;;		_setSw_Main
 16487 ;;		_Exception_Main
 16488 ;; This function uses a non-reentrant model
 16489 ;;
 16490                           
 16491                           
 16492                           ;psect for function _getMain_All_Error_Status
 16493  1FCD                     _getMain_All_Error_Status:	
 16494                           
 16495                           ;incstack = 0
 16496                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16497                           ;getMain_All_Error_Status@command stored from wreg
 16498  1FCD  0020               	movlb	0	; select bank0
 16499  1FCE  00A6               	movwf	getMain_All_Error_Status@command
 16500                           
 16501                           ;main_B1.c: 425: char status = 0;
 16502  1FCF  01A7               	clrf	getMain_All_Error_Status@status
 16503                           
 16504                           ;main_B1.c: 436: if (status == 0 && command != 2) {
 16505  1FD0  08A7               	movf	getMain_All_Error_Status@status,f
 16506  1FD1  1D03               	skipz
 16507  1FD2  2FE7               	goto	l9782
 16508  1FD3  0826               	movf	getMain_All_Error_Status@command,w
 16509  1FD4  3A02               	xorlw	2
 16510  1FD5  1903               	skipnz
 16511  1FD6  2FE7               	goto	l9782
 16512                           
 16513                           ;main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16514  1FD7  0021               	movlb	1	; select bank1
 16515  1FD8  18DB               	btfsc	_Temp^(0+128),1
 16516  1FD9  2FDE               	goto	l9780
 16517  1FDA  0020               	movlb	0	; select bank0
 16518  1FDB  01A2               	clrf	_getMain_All_Error_Status$6893
 16519  1FDC  01A3               	clrf	_getMain_All_Error_Status$6893+1
 16520  1FDD  2FE3               	goto	l2880
 16521  1FDE                     l9780:	
 16522  1FDE  3002               	movlw	2
 16523  1FDF  0020               	movlb	0	; select bank0
 16524  1FE0  00A2               	movwf	_getMain_All_Error_Status$6893
 16525  1FE1  3000               	movlw	0
 16526  1FE2  00A3               	movwf	_getMain_All_Error_Status$6893+1
 16527  1FE3                     l2880:	
 16528  1FE3  0822               	movf	_getMain_All_Error_Status$6893,w
 16529  1FE4  00A1               	movwf	??_getMain_All_Error_Status
 16530  1FE5  0821               	movf	??_getMain_All_Error_Status,w
 16531  1FE6  00A7               	movwf	getMain_All_Error_Status@status
 16532  1FE7                     l9782:	
 16533                           
 16534                           ;main_B1.c: 438: }
 16535                           ;main_B1.c: 443: if (status == 0 && command != 3) {
 16536  1FE7  08A7               	movf	getMain_All_Error_Status@status,f
 16537  1FE8  1D03               	skipz
 16538  1FE9  2FFE               	goto	l2881
 16539  1FEA  0826               	movf	getMain_All_Error_Status@command,w
 16540  1FEB  3A03               	xorlw	3
 16541  1FEC  1903               	skipnz
 16542  1FED  2FFE               	goto	l2881
 16543                           
 16544                           ;main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16545  1FEE  0022               	movlb	2	; select bank2
 16546  1FEF  1AC0               	btfsc	_Load^(0+256),5
 16547  1FF0  2FF5               	goto	l9790
 16548  1FF1  0020               	movlb	0	; select bank0
 16549  1FF2  01A4               	clrf	_getMain_All_Error_Status$6894
 16550  1FF3  01A5               	clrf	_getMain_All_Error_Status$6894+1
 16551  1FF4  2FFA               	goto	l2885
 16552  1FF5                     l9790:	
 16553  1FF5  3003               	movlw	3
 16554  1FF6  0020               	movlb	0	; select bank0
 16555  1FF7  00A4               	movwf	_getMain_All_Error_Status$6894
 16556  1FF8  3000               	movlw	0
 16557  1FF9  00A5               	movwf	_getMain_All_Error_Status$6894+1
 16558  1FFA                     l2885:	
 16559  1FFA  0824               	movf	_getMain_All_Error_Status$6894,w
 16560  1FFB  00A1               	movwf	??_getMain_All_Error_Status
 16561  1FFC  0821               	movf	??_getMain_All_Error_Status,w
 16562  1FFD  00A7               	movwf	getMain_All_Error_Status@status
 16563  1FFE                     l2881:	
 16564                           
 16565                           ;main_B1.c: 445: }
 16566                           ;main_B1.c: 455: return status;
 16567  1FFE  0827               	movf	getMain_All_Error_Status@status,w
 16568  1FFF  0008               	return
 16569  2000                     __end_of_getMain_All_Error_Status:	
 16570                           
 16571                           	psect	text111
 16572  193B                     __ptext111:	
 16573 ;; *************** function _DimmerLights_Initialization *****************
 16574 ;; Defined at:
 16575 ;;		line 632 in file "../src/Dimmer_B1.c"
 16576 ;; Parameters:    Size  Location     Type
 16577 ;;		None
 16578 ;; Auto vars:     Size  Location     Type
 16579 ;;		None
 16580 ;; Return value:  Size  Location     Type
 16581 ;;		None               void
 16582 ;; Registers used:
 16583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16584 ;; Tracked objects:
 16585 ;;		On entry : 0/0
 16586 ;;		On exit  : 0/0
 16587 ;;		Unchanged: 0/0
 16588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16593 ;;Total ram usage:        0 bytes
 16594 ;; Hardware stack levels used:    1
 16595 ;; Hardware stack levels required when called:    9
 16596 ;; This function calls:
 16597 ;;		_DimmerIntr_Initialization
 16598 ;;		_setDimmerLights_Initialization
 16599 ;; This function is called by:
 16600 ;;		_main
 16601 ;; This function uses a non-reentrant model
 16602 ;;
 16603                           
 16604                           
 16605                           ;psect for function _DimmerLights_Initialization
 16606  193B                     _DimmerLights_Initialization:	
 16607                           
 16608                           ;Dimmer_B1.c: 634: setDimmerLights_Initialization(1);
 16609                           
 16610                           ;incstack = 0
 16611                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16612  193B  3001               	movlw	1
 16613  193C  3198  20AC  3199   	fcall	_setDimmerLights_Initialization
 16614                           
 16615                           ;Dimmer_B1.c: 638: setDimmerLights_Initialization(2);
 16616  193F  3002               	movlw	2
 16617  1940  3198  20AC  3199   	fcall	_setDimmerLights_Initialization
 16618                           
 16619                           ;Dimmer_B1.c: 644: DimmerIntr_Initialization();
 16620  1943  3188  2059         	fcall	_DimmerIntr_Initialization
 16621  1945  0008               	return
 16622  1946                     __end_of_DimmerLights_Initialization:	
 16623                           
 16624                           	psect	text112
 16625  18AC                     __ptext112:	
 16626 ;; *************** function _setDimmerLights_Initialization *****************
 16627 ;; Defined at:
 16628 ;;		line 648 in file "../src/Dimmer_B1.c"
 16629 ;; Parameters:    Size  Location     Type
 16630 ;;  lights          1    wreg     unsigned char 
 16631 ;; Auto vars:     Size  Location     Type
 16632 ;;  lights          1    0[COMMON] unsigned char 
 16633 ;; Return value:  Size  Location     Type
 16634 ;;		None               void
 16635 ;; Registers used:
 16636 ;;		wreg
 16637 ;; Tracked objects:
 16638 ;;		On entry : 0/0
 16639 ;;		On exit  : 0/0
 16640 ;;		Unchanged: 0/0
 16641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16646 ;;Total ram usage:        0 bytes
 16647 ;; Hardware stack levels used:    1
 16648 ;; Hardware stack levels required when called:    5
 16649 ;; This function calls:
 16650 ;;		Nothing
 16651 ;; This function is called by:
 16652 ;;		_DimmerLights_Initialization
 16653 ;; This function uses a non-reentrant model
 16654 ;;
 16655                           
 16656                           
 16657                           ;psect for function _setDimmerLights_Initialization
 16658  18AC                     _setDimmerLights_Initialization:	
 16659                           
 16660                           ;incstack = 0
 16661                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16662  18AC  0008               	return
 16663  18AD                     __end_of_setDimmerLights_Initialization:	
 16664                           
 16665                           	psect	text113
 16666  0859                     __ptext113:	
 16667 ;; *************** function _DimmerIntr_Initialization *****************
 16668 ;; Defined at:
 16669 ;;		line 7 in file "../src/Dimmer_B1.c"
 16670 ;; Parameters:    Size  Location     Type
 16671 ;;		None
 16672 ;; Auto vars:     Size  Location     Type
 16673 ;;		None
 16674 ;; Return value:  Size  Location     Type
 16675 ;;		None               void
 16676 ;; Registers used:
 16677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16678 ;; Tracked objects:
 16679 ;;		On entry : 0/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16687 ;;Total ram usage:        1 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; Hardware stack levels required when called:    8
 16690 ;; This function calls:
 16691 ;;		_getDimmerLights_PercentToValue
 16692 ;;		_getDimmerLights_ValueToPercent
 16693 ;;		_setMemory_Modify
 16694 ;; This function is called by:
 16695 ;;		_DimmerLights_Initialization
 16696 ;; This function uses a non-reentrant model
 16697 ;;
 16698                           
 16699                           
 16700                           ;psect for function _DimmerIntr_Initialization
 16701  0859                     _DimmerIntr_Initialization:	
 16702                           
 16703                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16704                           
 16705                           ;incstack = 0
 16706                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16707  0859  3007               	movlw	7
 16708  085A  0020               	movlb	0	; select bank0
 16709  085B  00E3               	movwf	??_DimmerIntr_Initialization
 16710  085C  0863               	movf	??_DimmerIntr_Initialization,w
 16711  085D  0021               	movlb	1	; select bank1
 16712  085E  00BF               	movwf	(_DimmerIntr1^(0+128)+4)
 16713                           
 16714                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(55*0.7));
 16715  085F  3026               	movlw	38
 16716  0860  0020               	movlb	0	; select bank0
 16717  0861  00E3               	movwf	??_DimmerIntr_Initialization
 16718  0862  0863               	movf	??_DimmerIntr_Initialization,w
 16719  0863  0021               	movlb	1	; select bank1
 16720  0864  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16721                           
 16722                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.7));
 16723  0865  3007               	movlw	7
 16724  0866  0020               	movlb	0	; select bank0
 16725  0867  00E3               	movwf	??_DimmerIntr_Initialization
 16726  0868  0863               	movf	??_DimmerIntr_Initialization,w
 16727  0869  0021               	movlb	1	; select bank1
 16728  086A  00C2               	movwf	(_DimmerIntr1^(0+128)+7)
 16729                           
 16730                           ;Dimmer_B1.c: 15: if (myMain.InitDimmer == 1) {
 16731  086B  1E38               	btfss	(_myMain^(0+128)+10),4
 16732  086C  287D               	goto	l9994
 16733                           
 16734                           ;Dimmer_B1.c: 16: product->Data[21] = getDimmerLights_ValueToPercent(((char)(55*0.7)));
 16735  086D  3026               	movlw	38
 16736  086E  3195  2584  3188   	fcall	_getDimmerLights_ValueToPercent
 16737  0871  0020               	movlb	0	; select bank0
 16738  0872  00E3               	movwf	??_DimmerIntr_Initialization
 16739  0873  0021               	movlb	1	; select bank1
 16740  0874  086D               	movf	_product^(0+128),w
 16741  0875  3E15               	addlw	21
 16742  0876  0086               	movwf	6
 16743  0877  3002               	movlw	2	; select bank4/5
 16744  0878  0087               	movwf	7
 16745  0879  0020               	movlb	0	; select bank0
 16746  087A  0863               	movf	??_DimmerIntr_Initialization,w
 16747  087B  0081               	movwf	1
 16748                           
 16749                           ;Dimmer_B1.c: 17: } else {
 16750  087C  288C               	goto	l9996
 16751  087D                     l9994:	
 16752                           
 16753                           ;Dimmer_B1.c: 18: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16754  087D  0021               	movlb	1	; select bank1
 16755  087E  086D               	movf	_product^(0+128),w
 16756  087F  3E15               	addlw	21
 16757  0880  0086               	movwf	6
 16758  0881  3002               	movlw	2	; select bank4/5
 16759  0882  0087               	movwf	7
 16760  0883  0801               	movf	1,w
 16761  0884  3195  251F  3188   	fcall	_getDimmerLights_PercentToValue
 16762  0887  0020               	movlb	0	; select bank0
 16763  0888  00E3               	movwf	??_DimmerIntr_Initialization
 16764  0889  0863               	movf	??_DimmerIntr_Initialization,w
 16765  088A  0021               	movlb	1	; select bank1
 16766  088B  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 16767  088C                     l9996:	
 16768                           
 16769                           ;Dimmer_B1.c: 19: }
 16770                           ;Dimmer_B1.c: 29: DimmerIntr2.TuneTimeValue = 7;
 16771  088C  3007               	movlw	7
 16772  088D  0020               	movlb	0	; select bank0
 16773  088E  00E3               	movwf	??_DimmerIntr_Initialization
 16774  088F  0863               	movf	??_DimmerIntr_Initialization,w
 16775  0890  0021               	movlb	1	; select bank1
 16776  0891  00CB               	movwf	(_DimmerIntr2^(0+128)+4)
 16777                           
 16778                           ;Dimmer_B1.c: 30: DimmerIntr2.MaxmumValue = ((char)(55*0.7));
 16779  0892  3026               	movlw	38
 16780  0893  0020               	movlb	0	; select bank0
 16781  0894  00E3               	movwf	??_DimmerIntr_Initialization
 16782  0895  0863               	movf	??_DimmerIntr_Initialization,w
 16783  0896  0021               	movlb	1	; select bank1
 16784  0897  00CD               	movwf	(_DimmerIntr2^(0+128)+6)
 16785                           
 16786                           ;Dimmer_B1.c: 31: DimmerIntr2.MinimumValue = ((char)(10*0.7));
 16787  0898  3007               	movlw	7
 16788  0899  0020               	movlb	0	; select bank0
 16789  089A  00E3               	movwf	??_DimmerIntr_Initialization
 16790  089B  0863               	movf	??_DimmerIntr_Initialization,w
 16791  089C  0021               	movlb	1	; select bank1
 16792  089D  00CE               	movwf	(_DimmerIntr2^(0+128)+7)
 16793                           
 16794                           ;Dimmer_B1.c: 33: if (myMain.InitDimmer == 1) {
 16795  089E  1E38               	btfss	(_myMain^(0+128)+10),4
 16796  089F  28B0               	goto	l10006
 16797                           
 16798                           ;Dimmer_B1.c: 34: product->Data[22] = getDimmerLights_ValueToPercent(((char)(55*0.7)));
 16799  08A0  3026               	movlw	38
 16800  08A1  3195  2584  3188   	fcall	_getDimmerLights_ValueToPercent
 16801  08A4  0020               	movlb	0	; select bank0
 16802  08A5  00E3               	movwf	??_DimmerIntr_Initialization
 16803  08A6  0021               	movlb	1	; select bank1
 16804  08A7  086D               	movf	_product^(0+128),w
 16805  08A8  3E16               	addlw	22
 16806  08A9  0086               	movwf	6
 16807  08AA  3002               	movlw	2	; select bank4/5
 16808  08AB  0087               	movwf	7
 16809  08AC  0020               	movlb	0	; select bank0
 16810  08AD  0863               	movf	??_DimmerIntr_Initialization,w
 16811  08AE  0081               	movwf	1
 16812                           
 16813                           ;Dimmer_B1.c: 35: } else {
 16814  08AF  28BF               	goto	l10008
 16815  08B0                     l10006:	
 16816                           
 16817                           ;Dimmer_B1.c: 36: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 16818  08B0  0021               	movlb	1	; select bank1
 16819  08B1  086D               	movf	_product^(0+128),w
 16820  08B2  3E16               	addlw	22
 16821  08B3  0086               	movwf	6
 16822  08B4  3002               	movlw	2	; select bank4/5
 16823  08B5  0087               	movwf	7
 16824  08B6  0801               	movf	1,w
 16825  08B7  3195  251F  3188   	fcall	_getDimmerLights_PercentToValue
 16826  08BA  0020               	movlb	0	; select bank0
 16827  08BB  00E3               	movwf	??_DimmerIntr_Initialization
 16828  08BC  0863               	movf	??_DimmerIntr_Initialization,w
 16829  08BD  0021               	movlb	1	; select bank1
 16830  08BE  00CC               	movwf	(_DimmerIntr2^(0+128)+5)
 16831  08BF                     l10008:	
 16832                           
 16833                           ;Dimmer_B1.c: 37: }
 16834                           ;Dimmer_B1.c: 58: if (myMain.InitDimmer == 1) {
 16835  08BF  0021               	movlb	1	; select bank1
 16836  08C0  1E38               	btfss	(_myMain^(0+128)+10),4
 16837  08C1  0008               	return
 16838                           
 16839                           ;Dimmer_B1.c: 59: myMain.InitDimmer = 0;
 16840  08C2  1238               	bcf	(_myMain^(0+128)+10),4
 16841                           
 16842                           ;Dimmer_B1.c: 60: myMain.SaveDimmer = 1;
 16843  08C3  16B8               	bsf	(_myMain^(0+128)+10),5
 16844                           
 16845                           ;Dimmer_B1.c: 61: setMemory_Modify(1);
 16846  08C4  3001               	movlw	1
 16847  08C5  319A  22B0         	fcall	_setMemory_Modify
 16848  08C7  0008               	return
 16849  08C8                     __end_of_DimmerIntr_Initialization:	
 16850                           
 16851                           	psect	text114
 16852  1AB0                     __ptext114:	
 16853 ;; *************** function _setMemory_Modify *****************
 16854 ;; Defined at:
 16855 ;;		line 1081 in file "../src/MCU_B1.c"
 16856 ;; Parameters:    Size  Location     Type
 16857 ;;  command         1    wreg     unsigned char 
 16858 ;; Auto vars:     Size  Location     Type
 16859 ;;  command         1    2[BANK0 ] unsigned char 
 16860 ;; Return value:  Size  Location     Type
 16861 ;;		None               void
 16862 ;; Registers used:
 16863 ;;		wreg, status,2, status,0
 16864 ;; Tracked objects:
 16865 ;;		On entry : 0/0
 16866 ;;		On exit  : 0/0
 16867 ;;		Unchanged: 0/0
 16868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16873 ;;Total ram usage:        2 bytes
 16874 ;; Hardware stack levels used:    1
 16875 ;; Hardware stack levels required when called:    5
 16876 ;; This function calls:
 16877 ;;		Nothing
 16878 ;; This function is called by:
 16879 ;;		_DimmerIntr_Initialization
 16880 ;;		_setDimmerLights_Dimming
 16881 ;;		_setLog_Code
 16882 ;;		_setRFSW_AdjControl
 16883 ;; This function uses a non-reentrant model
 16884 ;;
 16885                           
 16886                           
 16887                           ;psect for function _setMemory_Modify
 16888  1AB0                     _setMemory_Modify:	
 16889                           
 16890                           ;incstack = 0
 16891                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16892                           ;setMemory_Modify@command stored from wreg
 16893  1AB0  0020               	movlb	0	; select bank0
 16894  1AB1  00A2               	movwf	setMemory_Modify@command
 16895                           
 16896                           ;MCU_B1.c: 1082: Memory.Modify = command == 1 ? 1 : 0;
 16897  1AB2  0822               	movf	setMemory_Modify@command,w
 16898  1AB3  3A01               	xorlw	1
 16899  1AB4  3000               	movlw	0
 16900  1AB5  1903               	skipnz
 16901  1AB6  3001               	movlw	1
 16902  1AB7  00A1               	movwf	??_setMemory_Modify
 16903  1AB8  0024               	movlb	4	; select bank4
 16904  1AB9  0844               	movf	(_Memory^(0+512)+36),w
 16905  1ABA  0020               	movlb	0	; select bank0
 16906  1ABB  0621               	xorwf	??_setMemory_Modify,w
 16907  1ABC  39FE               	andlw	-2
 16908  1ABD  0621               	xorwf	??_setMemory_Modify,w
 16909  1ABE  0024               	movlb	4	; select bank4
 16910  1ABF  00C4               	movwf	(_Memory^(0+512)+36)
 16911                           
 16912                           ;MCU_B1.c: 1083: Memory.Time = 0;
 16913  1AC0  01C2               	clrf	(_Memory^(0+512)+34)
 16914  1AC1  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16915  1AC2  0008               	return
 16916  1AC3                     __end_of_setMemory_Modify:	
 16917                           
 16918                           	psect	text115
 16919  1584                     __ptext115:	
 16920 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16921 ;; Defined at:
 16922 ;;		line 1108 in file "../src/Dimmer_B1.c"
 16923 ;; Parameters:    Size  Location     Type
 16924 ;;  value           1    wreg     unsigned char 
 16925 ;; Auto vars:     Size  Location     Type
 16926 ;;  value           1   63[BANK0 ] unsigned char 
 16927 ;;  i               3   64[BANK0 ] float 
 16928 ;; Return value:  Size  Location     Type
 16929 ;;                  1    wreg      unsigned char 
 16930 ;; Registers used:
 16931 ;;		wreg, status,2, status,0, pclath, cstack
 16932 ;; Tracked objects:
 16933 ;;		On entry : 0/0
 16934 ;;		On exit  : 0/0
 16935 ;;		Unchanged: 0/0
 16936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16939 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;Total ram usage:        6 bytes
 16942 ;; Hardware stack levels used:    1
 16943 ;; Hardware stack levels required when called:    7
 16944 ;; This function calls:
 16945 ;;		___awtoft
 16946 ;;		___ftadd
 16947 ;;		___ftdiv
 16948 ;;		___ftneg
 16949 ;;		___fttol
 16950 ;; This function is called by:
 16951 ;;		_DimmerIntr_Initialization
 16952 ;;		_setDimmerLights_Dimming
 16953 ;; This function uses a non-reentrant model
 16954 ;;
 16955                           
 16956                           
 16957                           ;psect for function _getDimmerLights_ValueToPercent
 16958  1584                     _getDimmerLights_ValueToPercent:	
 16959                           
 16960                           ;incstack = 0
 16961                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16962                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16963  1584  0020               	movlb	0	; select bank0
 16964  1585  00DF               	movwf	getDimmerLights_ValueToPercent@value
 16965                           
 16966                           ;Dimmer_B1.c: 1116: float i = ((char)(55*0.7)) - ((char)(10*0.7));
 16967  1586  3000               	movlw	0
 16968  1587  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16969  1588  30F8               	movlw	248
 16970  1589  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16971  158A  3041               	movlw	65
 16972  158B  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16973                           
 16974                           ;Dimmer_B1.c: 1117: i /= 100;
 16975  158C  3000               	movlw	0
 16976  158D  00AF               	movwf	___ftdiv@f2
 16977  158E  30C8               	movlw	200
 16978  158F  00B0               	movwf	___ftdiv@f2+1
 16979  1590  3042               	movlw	66
 16980  1591  00B1               	movwf	___ftdiv@f2+2
 16981  1592  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16982  1593  00B2               	movwf	___ftdiv@f1
 16983  1594  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16984  1595  00B3               	movwf	___ftdiv@f1+1
 16985  1596  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16986  1597  00B4               	movwf	___ftdiv@f1+2
 16987  1598  318D  253A  3195   	fcall	___ftdiv
 16988  159B  0020               	movlb	0	; select bank0
 16989  159C  082F               	movf	?___ftdiv,w
 16990  159D  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16991  159E  0830               	movf	?___ftdiv+1,w
 16992  159F  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16993  15A0  0831               	movf	?___ftdiv+2,w
 16994  15A1  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16995                           
 16996                           ;Dimmer_B1.c: 1119: return (char) (100 - ((((char)(55*0.7)) - value) / i));
 16997  15A2  085F               	movf	getDimmerLights_ValueToPercent@value,w
 16998  15A3  00DD               	movwf	??_getDimmerLights_ValueToPercent
 16999  15A4  01DE               	clrf	??_getDimmerLights_ValueToPercent+1
 17000  15A5  09DD               	comf	??_getDimmerLights_ValueToPercent,f
 17001  15A6  09DE               	comf	??_getDimmerLights_ValueToPercent+1,f
 17002  15A7  0ADD               	incf	??_getDimmerLights_ValueToPercent,f
 17003  15A8  1903               	skipnz
 17004  15A9  0ADE               	incf	??_getDimmerLights_ValueToPercent+1,f
 17005  15AA  085D               	movf	??_getDimmerLights_ValueToPercent,w
 17006  15AB  3E26               	addlw	38
 17007  15AC  00A9               	movwf	___awtoft@c
 17008  15AD  3000               	movlw	0
 17009  15AE  3D5E               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17010  15AF  00AA               	movwf	___awtoft@c+1
 17011  15B0  319E  2633  3195   	fcall	___awtoft
 17012  15B3  0020               	movlb	0	; select bank0
 17013  15B4  0829               	movf	?___awtoft,w
 17014  15B5  00B2               	movwf	___ftdiv@f1
 17015  15B6  082A               	movf	?___awtoft+1,w
 17016  15B7  00B3               	movwf	___ftdiv@f1+1
 17017  15B8  082B               	movf	?___awtoft+2,w
 17018  15B9  00B4               	movwf	___ftdiv@f1+2
 17019  15BA  0860               	movf	getDimmerLights_ValueToPercent@i,w
 17020  15BB  00AF               	movwf	___ftdiv@f2
 17021  15BC  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 17022  15BD  00B0               	movwf	___ftdiv@f2+1
 17023  15BE  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 17024  15BF  00B1               	movwf	___ftdiv@f2+2
 17025  15C0  318D  253A  3195   	fcall	___ftdiv
 17026  15C3  0020               	movlb	0	; select bank0
 17027  15C4  082F               	movf	?___ftdiv,w
 17028  15C5  00BF               	movwf	___ftneg@f1
 17029  15C6  0830               	movf	?___ftdiv+1,w
 17030  15C7  00C0               	movwf	___ftneg@f1+1
 17031  15C8  0831               	movf	?___ftdiv+2,w
 17032  15C9  00C1               	movwf	___ftneg@f1+2
 17033  15CA  3199  2129  3195   	fcall	___ftneg
 17034  15CD  0020               	movlb	0	; select bank0
 17035  15CE  083F               	movf	?___ftneg,w
 17036  15CF  00C5               	movwf	___ftadd@f2
 17037  15D0  0840               	movf	?___ftneg+1,w
 17038  15D1  00C6               	movwf	___ftadd@f2+1
 17039  15D2  0841               	movf	?___ftneg+2,w
 17040  15D3  00C7               	movwf	___ftadd@f2+2
 17041  15D4  3000               	movlw	0
 17042  15D5  00C2               	movwf	___ftadd@f1
 17043  15D6  30C8               	movlw	200
 17044  15D7  00C3               	movwf	___ftadd@f1+1
 17045  15D8  3042               	movlw	66
 17046  15D9  00C4               	movwf	___ftadd@f1+2
 17047  15DA  3183  2388  3195   	fcall	___ftadd
 17048  15DD  0020               	movlb	0	; select bank0
 17049  15DE  0842               	movf	?___ftadd,w
 17050  15DF  00CF               	movwf	___fttol@f1
 17051  15E0  0843               	movf	?___ftadd+1,w
 17052  15E1  00D0               	movwf	___fttol@f1+1
 17053  15E2  0844               	movf	?___ftadd+2,w
 17054  15E3  00D1               	movwf	___fttol@f1+2
 17055  15E4  318B  2398         	fcall	___fttol
 17056  15E6  0020               	movlb	0	; select bank0
 17057  15E7  084F               	movf	?___fttol,w
 17058  15E8  0008               	return
 17059  15E9                     __end_of_getDimmerLights_ValueToPercent:	
 17060                           
 17061                           	psect	text116
 17062  151F                     __ptext116:	
 17063 ;; *************** function _getDimmerLights_PercentToValue *****************
 17064 ;; Defined at:
 17065 ;;		line 1092 in file "../src/Dimmer_B1.c"
 17066 ;; Parameters:    Size  Location     Type
 17067 ;;  value           1    wreg     unsigned char 
 17068 ;; Auto vars:     Size  Location     Type
 17069 ;;  value           1   63[BANK0 ] unsigned char 
 17070 ;;  i               3   64[BANK0 ] float 
 17071 ;; Return value:  Size  Location     Type
 17072 ;;                  1    wreg      unsigned char 
 17073 ;; Registers used:
 17074 ;;		wreg, status,2, status,0, pclath, cstack
 17075 ;; Tracked objects:
 17076 ;;		On entry : 0/0
 17077 ;;		On exit  : 0/0
 17078 ;;		Unchanged: 0/0
 17079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17083 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17084 ;;Total ram usage:        6 bytes
 17085 ;; Hardware stack levels used:    1
 17086 ;; Hardware stack levels required when called:    7
 17087 ;; This function calls:
 17088 ;;		___awtoft
 17089 ;;		___ftadd
 17090 ;;		___ftdiv
 17091 ;;		___ftmul
 17092 ;;		___ftneg
 17093 ;;		___fttol
 17094 ;; This function is called by:
 17095 ;;		_DimmerIntr_Initialization
 17096 ;;		_setDimmerLights_OnOff
 17097 ;;		_setRFSW_AdjControl
 17098 ;; This function uses a non-reentrant model
 17099 ;;
 17100                           
 17101                           
 17102                           ;psect for function _getDimmerLights_PercentToValue
 17103  151F                     _getDimmerLights_PercentToValue:	
 17104                           
 17105                           ;incstack = 0
 17106                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 17107                           ;getDimmerLights_PercentToValue@value stored from wreg
 17108  151F  0020               	movlb	0	; select bank0
 17109  1520  00DF               	movwf	getDimmerLights_PercentToValue@value
 17110                           
 17111                           ;Dimmer_B1.c: 1100: float i = ((char)(55*0.7)) - ((char)(10*0.7));
 17112  1521  3000               	movlw	0
 17113  1522  00E0               	movwf	getDimmerLights_PercentToValue@i
 17114  1523  30F8               	movlw	248
 17115  1524  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 17116  1525  3041               	movlw	65
 17117  1526  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 17118                           
 17119                           ;Dimmer_B1.c: 1101: i /= 100;
 17120  1527  3000               	movlw	0
 17121  1528  00AF               	movwf	___ftdiv@f2
 17122  1529  30C8               	movlw	200
 17123  152A  00B0               	movwf	___ftdiv@f2+1
 17124  152B  3042               	movlw	66
 17125  152C  00B1               	movwf	___ftdiv@f2+2
 17126  152D  0860               	movf	getDimmerLights_PercentToValue@i,w
 17127  152E  00B2               	movwf	___ftdiv@f1
 17128  152F  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 17129  1530  00B3               	movwf	___ftdiv@f1+1
 17130  1531  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 17131  1532  00B4               	movwf	___ftdiv@f1+2
 17132  1533  318D  253A  3195   	fcall	___ftdiv
 17133  1536  0020               	movlb	0	; select bank0
 17134  1537  082F               	movf	?___ftdiv,w
 17135  1538  00E0               	movwf	getDimmerLights_PercentToValue@i
 17136  1539  0830               	movf	?___ftdiv+1,w
 17137  153A  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 17138  153B  0831               	movf	?___ftdiv+2,w
 17139  153C  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 17140                           
 17141                           ;Dimmer_B1.c: 1103: return (char) (((char)(55*0.7)) - ((100 - value) * i));
 17142  153D  085F               	movf	getDimmerLights_PercentToValue@value,w
 17143  153E  00DD               	movwf	??_getDimmerLights_PercentToValue
 17144  153F  01DE               	clrf	??_getDimmerLights_PercentToValue+1
 17145  1540  09DD               	comf	??_getDimmerLights_PercentToValue,f
 17146  1541  09DE               	comf	??_getDimmerLights_PercentToValue+1,f
 17147  1542  0ADD               	incf	??_getDimmerLights_PercentToValue,f
 17148  1543  1903               	skipnz
 17149  1544  0ADE               	incf	??_getDimmerLights_PercentToValue+1,f
 17150  1545  085D               	movf	??_getDimmerLights_PercentToValue,w
 17151  1546  3E64               	addlw	100
 17152  1547  00A9               	movwf	___awtoft@c
 17153  1548  3000               	movlw	0
 17154  1549  3D5E               	addwfc	??_getDimmerLights_PercentToValue+1,w
 17155  154A  00AA               	movwf	___awtoft@c+1
 17156  154B  319E  2633  3195   	fcall	___awtoft
 17157  154E  0020               	movlb	0	; select bank0
 17158  154F  0829               	movf	?___awtoft,w
 17159  1550  00B2               	movwf	___ftmul@f2
 17160  1551  082A               	movf	?___awtoft+1,w
 17161  1552  00B3               	movwf	___ftmul@f2+1
 17162  1553  082B               	movf	?___awtoft+2,w
 17163  1554  00B4               	movwf	___ftmul@f2+2
 17164  1555  0860               	movf	getDimmerLights_PercentToValue@i,w
 17165  1556  00AF               	movwf	___ftmul@f1
 17166  1557  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 17167  1558  00B0               	movwf	___ftmul@f1+1
 17168  1559  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 17169  155A  00B1               	movwf	___ftmul@f1+2
 17170  155B  318E  2691  3195   	fcall	___ftmul
 17171  155E  0020               	movlb	0	; select bank0
 17172  155F  082F               	movf	?___ftmul,w
 17173  1560  00BF               	movwf	___ftneg@f1
 17174  1561  0830               	movf	?___ftmul+1,w
 17175  1562  00C0               	movwf	___ftneg@f1+1
 17176  1563  0831               	movf	?___ftmul+2,w
 17177  1564  00C1               	movwf	___ftneg@f1+2
 17178  1565  3199  2129  3195   	fcall	___ftneg
 17179  1568  0020               	movlb	0	; select bank0
 17180  1569  083F               	movf	?___ftneg,w
 17181  156A  00C5               	movwf	___ftadd@f2
 17182  156B  0840               	movf	?___ftneg+1,w
 17183  156C  00C6               	movwf	___ftadd@f2+1
 17184  156D  0841               	movf	?___ftneg+2,w
 17185  156E  00C7               	movwf	___ftadd@f2+2
 17186  156F  3000               	movlw	0
 17187  1570  00C2               	movwf	___ftadd@f1
 17188  1571  3018               	movlw	24
 17189  1572  00C3               	movwf	___ftadd@f1+1
 17190  1573  3042               	movlw	66
 17191  1574  00C4               	movwf	___ftadd@f1+2
 17192  1575  3183  2388  3195   	fcall	___ftadd
 17193  1578  0020               	movlb	0	; select bank0
 17194  1579  0842               	movf	?___ftadd,w
 17195  157A  00CF               	movwf	___fttol@f1
 17196  157B  0843               	movf	?___ftadd+1,w
 17197  157C  00D0               	movwf	___fttol@f1+1
 17198  157D  0844               	movf	?___ftadd+2,w
 17199  157E  00D1               	movwf	___fttol@f1+2
 17200  157F  318B  2398         	fcall	___fttol
 17201  1581  0020               	movlb	0	; select bank0
 17202  1582  084F               	movf	?___fttol,w
 17203  1583  0008               	return
 17204  1584                     __end_of_getDimmerLights_PercentToValue:	
 17205                           
 17206                           	psect	text117
 17207  0B98                     __ptext117:	
 17208 ;; *************** function ___fttol *****************
 17209 ;; Defined at:
 17210 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17211 ;; Parameters:    Size  Location     Type
 17212 ;;  f1              3   47[BANK0 ] float 
 17213 ;; Auto vars:     Size  Location     Type
 17214 ;;  lval            4   56[BANK0 ] unsigned long 
 17215 ;;  exp1            1   60[BANK0 ] unsigned char 
 17216 ;;  sign1           1   55[BANK0 ] unsigned char 
 17217 ;; Return value:  Size  Location     Type
 17218 ;;                  4   47[BANK0 ] long 
 17219 ;; Registers used:
 17220 ;;		wreg, status,2, status,0
 17221 ;; Tracked objects:
 17222 ;;		On entry : 0/0
 17223 ;;		On exit  : 0/0
 17224 ;;		Unchanged: 0/0
 17225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17227 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;Total ram usage:       14 bytes
 17231 ;; Hardware stack levels used:    1
 17232 ;; Hardware stack levels required when called:    5
 17233 ;; This function calls:
 17234 ;;		Nothing
 17235 ;; This function is called by:
 17236 ;;		_getDimmerLights_PercentToValue
 17237 ;;		_getDimmerLights_ValueToPercent
 17238 ;; This function uses a non-reentrant model
 17239 ;;
 17240                           
 17241                           
 17242                           ;psect for function ___fttol
 17243  0B98                     ___fttol:	
 17244                           
 17245                           ;incstack = 0
 17246                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17247  0B98  0020               	movlb	0	; select bank0
 17248  0B99  084F               	movf	___fttol@f1,w
 17249  0B9A  00D3               	movwf	??___fttol
 17250  0B9B  0850               	movf	___fttol@f1+1,w
 17251  0B9C  00D4               	movwf	??___fttol+1
 17252  0B9D  0851               	movf	___fttol@f1+2,w
 17253  0B9E  00D5               	movwf	??___fttol+2
 17254  0B9F  1003               	clrc
 17255  0BA0  0D54               	rlf	??___fttol+1,w
 17256  0BA1  0D55               	rlf	??___fttol+2,w
 17257  0BA2  00D6               	movwf	??___fttol+3
 17258  0BA3  0856               	movf	??___fttol+3,w
 17259  0BA4  00DC               	movwf	___fttol@exp1
 17260  0BA5  08DC               	movf	___fttol@exp1,f
 17261  0BA6  1D03               	skipz
 17262  0BA7  2BB1               	goto	l9492
 17263  0BA8  3000               	movlw	0
 17264  0BA9  00D2               	movwf	?___fttol+3
 17265  0BAA  3000               	movlw	0
 17266  0BAB  00D1               	movwf	?___fttol+2
 17267  0BAC  3000               	movlw	0
 17268  0BAD  00D0               	movwf	?___fttol+1
 17269  0BAE  3000               	movlw	0
 17270  0BAF  00CF               	movwf	?___fttol
 17271  0BB0  0008               	return
 17272  0BB1                     l9492:	
 17273  0BB1  084F               	movf	___fttol@f1,w
 17274  0BB2  00D3               	movwf	??___fttol
 17275  0BB3  0850               	movf	___fttol@f1+1,w
 17276  0BB4  00D4               	movwf	??___fttol+1
 17277  0BB5  0851               	movf	___fttol@f1+2,w
 17278  0BB6  00D5               	movwf	??___fttol+2
 17279  0BB7  3017               	movlw	23
 17280  0BB8                     u10905:	
 17281  0BB8  36D5               	lsrf	??___fttol+2,f
 17282  0BB9  0CD4               	rrf	??___fttol+1,f
 17283  0BBA  0CD3               	rrf	??___fttol,f
 17284  0BBB  0B89               	decfsz	9,f
 17285  0BBC  2BB8               	goto	u10905
 17286  0BBD  0853               	movf	??___fttol,w
 17287  0BBE  00D6               	movwf	??___fttol+3
 17288  0BBF  0856               	movf	??___fttol+3,w
 17289  0BC0  00D7               	movwf	___fttol@sign1
 17290  0BC1  17D0               	bsf	___fttol@f1+1,7
 17291  0BC2  30FF               	movlw	255
 17292  0BC3  05CF               	andwf	___fttol@f1,f
 17293  0BC4  30FF               	movlw	255
 17294  0BC5  05D0               	andwf	___fttol@f1+1,f
 17295  0BC6  3000               	movlw	0
 17296  0BC7  05D1               	andwf	___fttol@f1+2,f
 17297  0BC8  084F               	movf	___fttol@f1,w
 17298  0BC9  00D8               	movwf	___fttol@lval
 17299  0BCA  0850               	movf	___fttol@f1+1,w
 17300  0BCB  00D9               	movwf	___fttol@lval+1
 17301  0BCC  0851               	movf	___fttol@f1+2,w
 17302  0BCD  00DA               	movwf	___fttol@lval+2
 17303  0BCE  01DB               	clrf	___fttol@lval+3
 17304  0BCF  308E               	movlw	142
 17305  0BD0  02DC               	subwf	___fttol@exp1,f
 17306  0BD1  1FDC               	btfss	___fttol@exp1,7
 17307  0BD2  2BEF               	goto	l9512
 17308  0BD3  085C               	movf	___fttol@exp1,w
 17309  0BD4  3A80               	xorlw	128
 17310  0BD5  3E8F               	addlw	143
 17311  0BD6  1803               	skipnc
 17312  0BD7  2BE1               	goto	l9510
 17313  0BD8  3000               	movlw	0
 17314  0BD9  00D2               	movwf	?___fttol+3
 17315  0BDA  3000               	movlw	0
 17316  0BDB  00D1               	movwf	?___fttol+2
 17317  0BDC  3000               	movlw	0
 17318  0BDD  00D0               	movwf	?___fttol+1
 17319  0BDE  3000               	movlw	0
 17320  0BDF  00CF               	movwf	?___fttol
 17321  0BE0  0008               	return
 17322  0BE1                     l9510:	
 17323  0BE1  3001               	movlw	1
 17324  0BE2                     u10935:	
 17325  0BE2  36DB               	lsrf	___fttol@lval+3,f
 17326  0BE3  0CDA               	rrf	___fttol@lval+2,f
 17327  0BE4  0CD9               	rrf	___fttol@lval+1,f
 17328  0BE5  0CD8               	rrf	___fttol@lval,f
 17329  0BE6  0B89               	decfsz	9,f
 17330  0BE7  2BE2               	goto	u10935
 17331  0BE8  3001               	movlw	1
 17332  0BE9  00D3               	movwf	??___fttol
 17333  0BEA  0853               	movf	??___fttol,w
 17334  0BEB  07DC               	addwf	___fttol@exp1,f
 17335  0BEC  1903               	btfsc	3,2
 17336  0BED  2C08               	goto	l9522
 17337  0BEE  2BE1               	goto	l9510
 17338  0BEF                     l9512:	
 17339  0BEF  3018               	movlw	24
 17340  0BF0  025C               	subwf	___fttol@exp1,w
 17341  0BF1  1C03               	skipc
 17342  0BF2  2C05               	goto	l9520
 17343  0BF3  3000               	movlw	0
 17344  0BF4  00D2               	movwf	?___fttol+3
 17345  0BF5  3000               	movlw	0
 17346  0BF6  00D1               	movwf	?___fttol+2
 17347  0BF7  3000               	movlw	0
 17348  0BF8  00D0               	movwf	?___fttol+1
 17349  0BF9  3000               	movlw	0
 17350  0BFA  00CF               	movwf	?___fttol
 17351  0BFB  0008               	return
 17352  0BFC                     l9518:	
 17353  0BFC  3001               	movlw	1
 17354  0BFD                     u10965:	
 17355  0BFD  35D8               	lslf	___fttol@lval,f
 17356  0BFE  0DD9               	rlf	___fttol@lval+1,f
 17357  0BFF  0DDA               	rlf	___fttol@lval+2,f
 17358  0C00  0DDB               	rlf	___fttol@lval+3,f
 17359  0C01  0B89               	decfsz	9,f
 17360  0C02  2BFD               	goto	u10965
 17361  0C03  3001               	movlw	1
 17362  0C04  02DC               	subwf	___fttol@exp1,f
 17363  0C05                     l9520:	
 17364  0C05  08DC               	movf	___fttol@exp1,f
 17365  0C06  1D03               	skipz
 17366  0C07  2BFC               	goto	l9518
 17367  0C08                     l9522:	
 17368  0C08  0857               	movf	___fttol@sign1,w
 17369  0C09  1903               	btfsc	3,2
 17370  0C0A  2C16               	goto	l9526
 17371  0C0B  09D8               	comf	___fttol@lval,f
 17372  0C0C  09D9               	comf	___fttol@lval+1,f
 17373  0C0D  09DA               	comf	___fttol@lval+2,f
 17374  0C0E  09DB               	comf	___fttol@lval+3,f
 17375  0C0F  0AD8               	incf	___fttol@lval,f
 17376  0C10  1903               	skipnz
 17377  0C11  0AD9               	incf	___fttol@lval+1,f
 17378  0C12  1903               	skipnz
 17379  0C13  0ADA               	incf	___fttol@lval+2,f
 17380  0C14  1903               	skipnz
 17381  0C15  0ADB               	incf	___fttol@lval+3,f
 17382  0C16                     l9526:	
 17383  0C16  085B               	movf	___fttol@lval+3,w
 17384  0C17  00D2               	movwf	?___fttol+3
 17385  0C18  085A               	movf	___fttol@lval+2,w
 17386  0C19  00D1               	movwf	?___fttol+2
 17387  0C1A  0859               	movf	___fttol@lval+1,w
 17388  0C1B  00D0               	movwf	?___fttol+1
 17389  0C1C  0858               	movf	___fttol@lval,w
 17390  0C1D  00CF               	movwf	?___fttol
 17391  0C1E  0008               	return
 17392  0C1F                     __end_of___fttol:	
 17393                           
 17394                           	psect	text118
 17395  1929                     __ptext118:	
 17396 ;; *************** function ___ftneg *****************
 17397 ;; Defined at:
 17398 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17399 ;; Parameters:    Size  Location     Type
 17400 ;;  f1              3   31[BANK0 ] float 
 17401 ;; Auto vars:     Size  Location     Type
 17402 ;;		None
 17403 ;; Return value:  Size  Location     Type
 17404 ;;                  3   31[BANK0 ] float 
 17405 ;; Registers used:
 17406 ;;		wreg
 17407 ;; Tracked objects:
 17408 ;;		On entry : 0/0
 17409 ;;		On exit  : 0/0
 17410 ;;		Unchanged: 0/0
 17411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17412 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17416 ;;Total ram usage:        3 bytes
 17417 ;; Hardware stack levels used:    1
 17418 ;; Hardware stack levels required when called:    5
 17419 ;; This function calls:
 17420 ;;		Nothing
 17421 ;; This function is called by:
 17422 ;;		_getDimmerLights_PercentToValue
 17423 ;;		_getDimmerLights_ValueToPercent
 17424 ;; This function uses a non-reentrant model
 17425 ;;
 17426                           
 17427                           
 17428                           ;psect for function ___ftneg
 17429  1929                     ___ftneg:	
 17430                           
 17431                           ;incstack = 0
 17432                           ; Regs used in ___ftneg: [wreg]
 17433  1929  0020               	movlb	0	; select bank0
 17434  192A  0841               	movf	___ftneg@f1+2,w
 17435  192B  0440               	iorwf	___ftneg@f1+1,w
 17436  192C  043F               	iorwf	___ftneg@f1,w
 17437  192D  1903               	skipnz
 17438  192E  0008               	return
 17439  192F  3080               	movlw	128
 17440  1930  06C1               	xorwf	___ftneg@f1+2,f
 17441  1931  0008               	return
 17442  1932                     __end_of___ftneg:	
 17443                           
 17444                           	psect	text119
 17445  0E91                     __ptext119:	
 17446 ;; *************** function ___ftmul *****************
 17447 ;; Defined at:
 17448 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17449 ;; Parameters:    Size  Location     Type
 17450 ;;  f1              3   15[BANK0 ] float 
 17451 ;;  f2              3   18[BANK0 ] float 
 17452 ;; Auto vars:     Size  Location     Type
 17453 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
 17454 ;;  sign            1   30[BANK0 ] unsigned char 
 17455 ;;  cntr            1   29[BANK0 ] unsigned char 
 17456 ;;  exp             1   25[BANK0 ] unsigned char 
 17457 ;; Return value:  Size  Location     Type
 17458 ;;                  3   15[BANK0 ] float 
 17459 ;; Registers used:
 17460 ;;		wreg, status,2, status,0, pclath, cstack
 17461 ;; Tracked objects:
 17462 ;;		On entry : 0/0
 17463 ;;		On exit  : 0/0
 17464 ;;		Unchanged: 0/0
 17465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17466 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17467 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17468 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17469 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17470 ;;Total ram usage:       16 bytes
 17471 ;; Hardware stack levels used:    1
 17472 ;; Hardware stack levels required when called:    6
 17473 ;; This function calls:
 17474 ;;		___ftpack
 17475 ;; This function is called by:
 17476 ;;		_getDimmerLights_PercentToValue
 17477 ;; This function uses a non-reentrant model
 17478 ;;
 17479                           
 17480                           
 17481                           ;psect for function ___ftmul
 17482  0E91                     ___ftmul:	
 17483                           
 17484                           ;incstack = 0
 17485                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17486  0E91  0020               	movlb	0	; select bank0
 17487  0E92  082F               	movf	___ftmul@f1,w
 17488  0E93  00B5               	movwf	??___ftmul
 17489  0E94  0830               	movf	___ftmul@f1+1,w
 17490  0E95  00B6               	movwf	??___ftmul+1
 17491  0E96  0831               	movf	___ftmul@f1+2,w
 17492  0E97  00B7               	movwf	??___ftmul+2
 17493  0E98  1003               	clrc
 17494  0E99  0D36               	rlf	??___ftmul+1,w
 17495  0E9A  0D37               	rlf	??___ftmul+2,w
 17496  0E9B  00B8               	movwf	??___ftmul+3
 17497  0E9C  0838               	movf	??___ftmul+3,w
 17498  0E9D  00B9               	movwf	___ftmul@exp
 17499  0E9E  08B9               	movf	___ftmul@exp,f
 17500  0E9F  1D03               	skipz
 17501  0EA0  2EA8               	goto	l9434
 17502  0EA1  3000               	movlw	0
 17503  0EA2  00AF               	movwf	?___ftmul
 17504  0EA3  3000               	movlw	0
 17505  0EA4  00B0               	movwf	?___ftmul+1
 17506  0EA5  3000               	movlw	0
 17507  0EA6  00B1               	movwf	?___ftmul+2
 17508  0EA7  0008               	return
 17509  0EA8                     l9434:	
 17510  0EA8  0832               	movf	___ftmul@f2,w
 17511  0EA9  00B5               	movwf	??___ftmul
 17512  0EAA  0833               	movf	___ftmul@f2+1,w
 17513  0EAB  00B6               	movwf	??___ftmul+1
 17514  0EAC  0834               	movf	___ftmul@f2+2,w
 17515  0EAD  00B7               	movwf	??___ftmul+2
 17516  0EAE  1003               	clrc
 17517  0EAF  0D36               	rlf	??___ftmul+1,w
 17518  0EB0  0D37               	rlf	??___ftmul+2,w
 17519  0EB1  00B8               	movwf	??___ftmul+3
 17520  0EB2  0838               	movf	??___ftmul+3,w
 17521  0EB3  00BE               	movwf	___ftmul@sign
 17522  0EB4  08BE               	movf	___ftmul@sign,f
 17523  0EB5  1D03               	skipz
 17524  0EB6  2EBE               	goto	l9440
 17525  0EB7  3000               	movlw	0
 17526  0EB8  00AF               	movwf	?___ftmul
 17527  0EB9  3000               	movlw	0
 17528  0EBA  00B0               	movwf	?___ftmul+1
 17529  0EBB  3000               	movlw	0
 17530  0EBC  00B1               	movwf	?___ftmul+2
 17531  0EBD  0008               	return
 17532  0EBE                     l9440:	
 17533  0EBE  083E               	movf	___ftmul@sign,w
 17534  0EBF  3E7B               	addlw	123
 17535  0EC0  00B5               	movwf	??___ftmul
 17536  0EC1  0835               	movf	??___ftmul,w
 17537  0EC2  07B9               	addwf	___ftmul@exp,f
 17538  0EC3  082F               	movf	___ftmul@f1,w
 17539  0EC4  00B5               	movwf	??___ftmul
 17540  0EC5  0830               	movf	___ftmul@f1+1,w
 17541  0EC6  00B6               	movwf	??___ftmul+1
 17542  0EC7  0831               	movf	___ftmul@f1+2,w
 17543  0EC8  00B7               	movwf	??___ftmul+2
 17544  0EC9  3010               	movlw	16
 17545  0ECA                     u10785:	
 17546  0ECA  36B7               	lsrf	??___ftmul+2,f
 17547  0ECB  0CB6               	rrf	??___ftmul+1,f
 17548  0ECC  0CB5               	rrf	??___ftmul,f
 17549  0ECD  0B89               	decfsz	9,f
 17550  0ECE  2ECA               	goto	u10785
 17551  0ECF  0835               	movf	??___ftmul,w
 17552  0ED0  00B8               	movwf	??___ftmul+3
 17553  0ED1  0838               	movf	??___ftmul+3,w
 17554  0ED2  00BE               	movwf	___ftmul@sign
 17555  0ED3  0832               	movf	___ftmul@f2,w
 17556  0ED4  00B5               	movwf	??___ftmul
 17557  0ED5  0833               	movf	___ftmul@f2+1,w
 17558  0ED6  00B6               	movwf	??___ftmul+1
 17559  0ED7  0834               	movf	___ftmul@f2+2,w
 17560  0ED8  00B7               	movwf	??___ftmul+2
 17561  0ED9  3010               	movlw	16
 17562  0EDA                     u10795:	
 17563  0EDA  36B7               	lsrf	??___ftmul+2,f
 17564  0EDB  0CB6               	rrf	??___ftmul+1,f
 17565  0EDC  0CB5               	rrf	??___ftmul,f
 17566  0EDD  0B89               	decfsz	9,f
 17567  0EDE  2EDA               	goto	u10795
 17568  0EDF  0835               	movf	??___ftmul,w
 17569  0EE0  00B8               	movwf	??___ftmul+3
 17570  0EE1  0838               	movf	??___ftmul+3,w
 17571  0EE2  06BE               	xorwf	___ftmul@sign,f
 17572  0EE3  3080               	movlw	128
 17573  0EE4  00B5               	movwf	??___ftmul
 17574  0EE5  0835               	movf	??___ftmul,w
 17575  0EE6  05BE               	andwf	___ftmul@sign,f
 17576  0EE7  17B0               	bsf	___ftmul@f1+1,7
 17577  0EE8  17B3               	bsf	___ftmul@f2+1,7
 17578  0EE9  30FF               	movlw	255
 17579  0EEA  05B2               	andwf	___ftmul@f2,f
 17580  0EEB  30FF               	movlw	255
 17581  0EEC  05B3               	andwf	___ftmul@f2+1,f
 17582  0EED  3000               	movlw	0
 17583  0EEE  05B4               	andwf	___ftmul@f2+2,f
 17584  0EEF  3000               	movlw	0
 17585  0EF0  00BA               	movwf	___ftmul@f3_as_product
 17586  0EF1  3000               	movlw	0
 17587  0EF2  00BB               	movwf	___ftmul@f3_as_product+1
 17588  0EF3  3000               	movlw	0
 17589  0EF4  00BC               	movwf	___ftmul@f3_as_product+2
 17590  0EF5  3007               	movlw	7
 17591  0EF6  00B5               	movwf	??___ftmul
 17592  0EF7  0835               	movf	??___ftmul,w
 17593  0EF8  00BD               	movwf	___ftmul@cntr
 17594  0EF9                     l9452:	
 17595  0EF9  1C2F               	btfss	___ftmul@f1,0
 17596  0EFA  2F01               	goto	l9456
 17597  0EFB  0832               	movf	___ftmul@f2,w
 17598  0EFC  07BA               	addwf	___ftmul@f3_as_product,f
 17599  0EFD  0833               	movf	___ftmul@f2+1,w
 17600  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 17601  0EFF  0834               	movf	___ftmul@f2+2,w
 17602  0F00  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 17603  0F01                     l9456:	
 17604  0F01  3001               	movlw	1
 17605  0F02                     u10815:	
 17606  0F02  36B1               	lsrf	___ftmul@f1+2,f
 17607  0F03  0CB0               	rrf	___ftmul@f1+1,f
 17608  0F04  0CAF               	rrf	___ftmul@f1,f
 17609  0F05  0B89               	decfsz	9,f
 17610  0F06  2F02               	goto	u10815
 17611  0F07  3001               	movlw	1
 17612  0F08                     u10825:	
 17613  0F08  35B2               	lslf	___ftmul@f2,f
 17614  0F09  0DB3               	rlf	___ftmul@f2+1,f
 17615  0F0A  0DB4               	rlf	___ftmul@f2+2,f
 17616  0F0B  0B89               	decfsz	9,f
 17617  0F0C  2F08               	goto	u10825
 17618  0F0D  3001               	movlw	1
 17619  0F0E  02BD               	subwf	___ftmul@cntr,f
 17620  0F0F  1D03               	btfss	3,2
 17621  0F10  2EF9               	goto	l9452
 17622  0F11  3009               	movlw	9
 17623  0F12  00B5               	movwf	??___ftmul
 17624  0F13  0835               	movf	??___ftmul,w
 17625  0F14  00BD               	movwf	___ftmul@cntr
 17626  0F15                     l9464:	
 17627  0F15  1C2F               	btfss	___ftmul@f1,0
 17628  0F16  2F1D               	goto	l9468
 17629  0F17  0832               	movf	___ftmul@f2,w
 17630  0F18  07BA               	addwf	___ftmul@f3_as_product,f
 17631  0F19  0833               	movf	___ftmul@f2+1,w
 17632  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 17633  0F1B  0834               	movf	___ftmul@f2+2,w
 17634  0F1C  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 17635  0F1D                     l9468:	
 17636  0F1D  3001               	movlw	1
 17637  0F1E                     u10855:	
 17638  0F1E  36B1               	lsrf	___ftmul@f1+2,f
 17639  0F1F  0CB0               	rrf	___ftmul@f1+1,f
 17640  0F20  0CAF               	rrf	___ftmul@f1,f
 17641  0F21  0B89               	decfsz	9,f
 17642  0F22  2F1E               	goto	u10855
 17643  0F23  3001               	movlw	1
 17644  0F24                     u10865:	
 17645  0F24  36BC               	lsrf	___ftmul@f3_as_product+2,f
 17646  0F25  0CBB               	rrf	___ftmul@f3_as_product+1,f
 17647  0F26  0CBA               	rrf	___ftmul@f3_as_product,f
 17648  0F27  0B89               	decfsz	9,f
 17649  0F28  2F24               	goto	u10865
 17650  0F29  3001               	movlw	1
 17651  0F2A  02BD               	subwf	___ftmul@cntr,f
 17652  0F2B  1D03               	btfss	3,2
 17653  0F2C  2F15               	goto	l9464
 17654  0F2D  083A               	movf	___ftmul@f3_as_product,w
 17655  0F2E  00A1               	movwf	___ftpack@arg
 17656  0F2F  083B               	movf	___ftmul@f3_as_product+1,w
 17657  0F30  00A2               	movwf	___ftpack@arg+1
 17658  0F31  083C               	movf	___ftmul@f3_as_product+2,w
 17659  0F32  00A3               	movwf	___ftpack@arg+2
 17660  0F33  0839               	movf	___ftmul@exp,w
 17661  0F34  00B5               	movwf	??___ftmul
 17662  0F35  0835               	movf	??___ftmul,w
 17663  0F36  00A4               	movwf	___ftpack@exp
 17664  0F37  083E               	movf	___ftmul@sign,w
 17665  0F38  00B6               	movwf	??___ftmul+1
 17666  0F39  0836               	movf	??___ftmul+1,w
 17667  0F3A  00A5               	movwf	___ftpack@sign
 17668  0F3B  3194  24BE         	fcall	___ftpack
 17669  0F3D  0020               	movlb	0	; select bank0
 17670  0F3E  0821               	movf	?___ftpack,w
 17671  0F3F  00AF               	movwf	?___ftmul
 17672  0F40  0822               	movf	?___ftpack+1,w
 17673  0F41  00B0               	movwf	?___ftmul+1
 17674  0F42  0823               	movf	?___ftpack+2,w
 17675  0F43  00B1               	movwf	?___ftmul+2
 17676  0F44  0008               	return
 17677  0F45                     __end_of___ftmul:	
 17678                           
 17679                           	psect	text120
 17680  0D3A                     __ptext120:	
 17681 ;; *************** function ___ftdiv *****************
 17682 ;; Defined at:
 17683 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17684 ;; Parameters:    Size  Location     Type
 17685 ;;  f2              3   15[BANK0 ] float 
 17686 ;;  f1              3   18[BANK0 ] float 
 17687 ;; Auto vars:     Size  Location     Type
 17688 ;;  f3              3   26[BANK0 ] float 
 17689 ;;  sign            1   30[BANK0 ] unsigned char 
 17690 ;;  exp             1   29[BANK0 ] unsigned char 
 17691 ;;  cntr            1   25[BANK0 ] unsigned char 
 17692 ;; Return value:  Size  Location     Type
 17693 ;;                  3   15[BANK0 ] float 
 17694 ;; Registers used:
 17695 ;;		wreg, status,2, status,0, pclath, cstack
 17696 ;; Tracked objects:
 17697 ;;		On entry : 0/0
 17698 ;;		On exit  : 0/0
 17699 ;;		Unchanged: 0/0
 17700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17701 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17702 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17703 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17704 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17705 ;;Total ram usage:       16 bytes
 17706 ;; Hardware stack levels used:    1
 17707 ;; Hardware stack levels required when called:    6
 17708 ;; This function calls:
 17709 ;;		___ftpack
 17710 ;; This function is called by:
 17711 ;;		_getDimmerLights_PercentToValue
 17712 ;;		_getDimmerLights_ValueToPercent
 17713 ;; This function uses a non-reentrant model
 17714 ;;
 17715                           
 17716                           
 17717                           ;psect for function ___ftdiv
 17718  0D3A                     ___ftdiv:	
 17719                           
 17720                           ;incstack = 0
 17721                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17722  0D3A  0020               	movlb	0	; select bank0
 17723  0D3B  0832               	movf	___ftdiv@f1,w
 17724  0D3C  00B5               	movwf	??___ftdiv
 17725  0D3D  0833               	movf	___ftdiv@f1+1,w
 17726  0D3E  00B6               	movwf	??___ftdiv+1
 17727  0D3F  0834               	movf	___ftdiv@f1+2,w
 17728  0D40  00B7               	movwf	??___ftdiv+2
 17729  0D41  1003               	clrc
 17730  0D42  0D36               	rlf	??___ftdiv+1,w
 17731  0D43  0D37               	rlf	??___ftdiv+2,w
 17732  0D44  00B8               	movwf	??___ftdiv+3
 17733  0D45  0838               	movf	??___ftdiv+3,w
 17734  0D46  00BD               	movwf	___ftdiv@exp
 17735  0D47  08BD               	movf	___ftdiv@exp,f
 17736  0D48  1D03               	skipz
 17737  0D49  2D51               	goto	l9392
 17738  0D4A  3000               	movlw	0
 17739  0D4B  00AF               	movwf	?___ftdiv
 17740  0D4C  3000               	movlw	0
 17741  0D4D  00B0               	movwf	?___ftdiv+1
 17742  0D4E  3000               	movlw	0
 17743  0D4F  00B1               	movwf	?___ftdiv+2
 17744  0D50  0008               	return
 17745  0D51                     l9392:	
 17746  0D51  082F               	movf	___ftdiv@f2,w
 17747  0D52  00B5               	movwf	??___ftdiv
 17748  0D53  0830               	movf	___ftdiv@f2+1,w
 17749  0D54  00B6               	movwf	??___ftdiv+1
 17750  0D55  0831               	movf	___ftdiv@f2+2,w
 17751  0D56  00B7               	movwf	??___ftdiv+2
 17752  0D57  1003               	clrc
 17753  0D58  0D36               	rlf	??___ftdiv+1,w
 17754  0D59  0D37               	rlf	??___ftdiv+2,w
 17755  0D5A  00B8               	movwf	??___ftdiv+3
 17756  0D5B  0838               	movf	??___ftdiv+3,w
 17757  0D5C  00BE               	movwf	___ftdiv@sign
 17758  0D5D  08BE               	movf	___ftdiv@sign,f
 17759  0D5E  1D03               	skipz
 17760  0D5F  2D67               	goto	l9398
 17761  0D60  3000               	movlw	0
 17762  0D61  00AF               	movwf	?___ftdiv
 17763  0D62  3000               	movlw	0
 17764  0D63  00B0               	movwf	?___ftdiv+1
 17765  0D64  3000               	movlw	0
 17766  0D65  00B1               	movwf	?___ftdiv+2
 17767  0D66  0008               	return
 17768  0D67                     l9398:	
 17769  0D67  3000               	movlw	0
 17770  0D68  00BA               	movwf	___ftdiv@f3
 17771  0D69  3000               	movlw	0
 17772  0D6A  00BB               	movwf	___ftdiv@f3+1
 17773  0D6B  3000               	movlw	0
 17774  0D6C  00BC               	movwf	___ftdiv@f3+2
 17775  0D6D  3089               	movlw	137
 17776  0D6E  073E               	addwf	___ftdiv@sign,w
 17777  0D6F  00B5               	movwf	??___ftdiv
 17778  0D70  0835               	movf	??___ftdiv,w
 17779  0D71  02BD               	subwf	___ftdiv@exp,f
 17780  0D72  0832               	movf	___ftdiv@f1,w
 17781  0D73  00B5               	movwf	??___ftdiv
 17782  0D74  0833               	movf	___ftdiv@f1+1,w
 17783  0D75  00B6               	movwf	??___ftdiv+1
 17784  0D76  0834               	movf	___ftdiv@f1+2,w
 17785  0D77  00B7               	movwf	??___ftdiv+2
 17786  0D78  3010               	movlw	16
 17787  0D79                     u10705:	
 17788  0D79  36B7               	lsrf	??___ftdiv+2,f
 17789  0D7A  0CB6               	rrf	??___ftdiv+1,f
 17790  0D7B  0CB5               	rrf	??___ftdiv,f
 17791  0D7C  0B89               	decfsz	9,f
 17792  0D7D  2D79               	goto	u10705
 17793  0D7E  0835               	movf	??___ftdiv,w
 17794  0D7F  00B8               	movwf	??___ftdiv+3
 17795  0D80  0838               	movf	??___ftdiv+3,w
 17796  0D81  00BE               	movwf	___ftdiv@sign
 17797  0D82  082F               	movf	___ftdiv@f2,w
 17798  0D83  00B5               	movwf	??___ftdiv
 17799  0D84  0830               	movf	___ftdiv@f2+1,w
 17800  0D85  00B6               	movwf	??___ftdiv+1
 17801  0D86  0831               	movf	___ftdiv@f2+2,w
 17802  0D87  00B7               	movwf	??___ftdiv+2
 17803  0D88  3010               	movlw	16
 17804  0D89                     u10715:	
 17805  0D89  36B7               	lsrf	??___ftdiv+2,f
 17806  0D8A  0CB6               	rrf	??___ftdiv+1,f
 17807  0D8B  0CB5               	rrf	??___ftdiv,f
 17808  0D8C  0B89               	decfsz	9,f
 17809  0D8D  2D89               	goto	u10715
 17810  0D8E  0835               	movf	??___ftdiv,w
 17811  0D8F  00B8               	movwf	??___ftdiv+3
 17812  0D90  0838               	movf	??___ftdiv+3,w
 17813  0D91  06BE               	xorwf	___ftdiv@sign,f
 17814  0D92  3080               	movlw	128
 17815  0D93  00B5               	movwf	??___ftdiv
 17816  0D94  0835               	movf	??___ftdiv,w
 17817  0D95  05BE               	andwf	___ftdiv@sign,f
 17818  0D96  17B3               	bsf	___ftdiv@f1+1,7
 17819  0D97  30FF               	movlw	255
 17820  0D98  05B2               	andwf	___ftdiv@f1,f
 17821  0D99  30FF               	movlw	255
 17822  0D9A  05B3               	andwf	___ftdiv@f1+1,f
 17823  0D9B  3000               	movlw	0
 17824  0D9C  05B4               	andwf	___ftdiv@f1+2,f
 17825  0D9D  17B0               	bsf	___ftdiv@f2+1,7
 17826  0D9E  30FF               	movlw	255
 17827  0D9F  05AF               	andwf	___ftdiv@f2,f
 17828  0DA0  30FF               	movlw	255
 17829  0DA1  05B0               	andwf	___ftdiv@f2+1,f
 17830  0DA2  3000               	movlw	0
 17831  0DA3  05B1               	andwf	___ftdiv@f2+2,f
 17832  0DA4  3018               	movlw	24
 17833  0DA5  00B5               	movwf	??___ftdiv
 17834  0DA6  0835               	movf	??___ftdiv,w
 17835  0DA7  00B9               	movwf	___ftdiv@cntr
 17836  0DA8                     l9412:	
 17837  0DA8  3001               	movlw	1
 17838  0DA9                     u10725:	
 17839  0DA9  35BA               	lslf	___ftdiv@f3,f
 17840  0DAA  0DBB               	rlf	___ftdiv@f3+1,f
 17841  0DAB  0DBC               	rlf	___ftdiv@f3+2,f
 17842  0DAC  0B89               	decfsz	9,f
 17843  0DAD  2DA9               	goto	u10725
 17844  0DAE  0831               	movf	___ftdiv@f2+2,w
 17845  0DAF  0234               	subwf	___ftdiv@f1+2,w
 17846  0DB0  1D03               	skipz
 17847  0DB1  2DB8               	goto	u10735
 17848  0DB2  0830               	movf	___ftdiv@f2+1,w
 17849  0DB3  0233               	subwf	___ftdiv@f1+1,w
 17850  0DB4  1D03               	skipz
 17851  0DB5  2DB8               	goto	u10735
 17852  0DB6  082F               	movf	___ftdiv@f2,w
 17853  0DB7  0232               	subwf	___ftdiv@f1,w
 17854  0DB8                     u10735:	
 17855  0DB8  1C03               	skipc
 17856  0DB9  2DC1               	goto	l9420
 17857  0DBA  082F               	movf	___ftdiv@f2,w
 17858  0DBB  02B2               	subwf	___ftdiv@f1,f
 17859  0DBC  0830               	movf	___ftdiv@f2+1,w
 17860  0DBD  3BB3               	subwfb	___ftdiv@f1+1,f
 17861  0DBE  0831               	movf	___ftdiv@f2+2,w
 17862  0DBF  3BB4               	subwfb	___ftdiv@f1+2,f
 17863  0DC0  143A               	bsf	___ftdiv@f3,0
 17864  0DC1                     l9420:	
 17865  0DC1  3001               	movlw	1
 17866  0DC2                     u10745:	
 17867  0DC2  35B2               	lslf	___ftdiv@f1,f
 17868  0DC3  0DB3               	rlf	___ftdiv@f1+1,f
 17869  0DC4  0DB4               	rlf	___ftdiv@f1+2,f
 17870  0DC5  0B89               	decfsz	9,f
 17871  0DC6  2DC2               	goto	u10745
 17872  0DC7  3001               	movlw	1
 17873  0DC8  02B9               	subwf	___ftdiv@cntr,f
 17874  0DC9  1D03               	btfss	3,2
 17875  0DCA  2DA8               	goto	l9412
 17876  0DCB  083A               	movf	___ftdiv@f3,w
 17877  0DCC  00A1               	movwf	___ftpack@arg
 17878  0DCD  083B               	movf	___ftdiv@f3+1,w
 17879  0DCE  00A2               	movwf	___ftpack@arg+1
 17880  0DCF  083C               	movf	___ftdiv@f3+2,w
 17881  0DD0  00A3               	movwf	___ftpack@arg+2
 17882  0DD1  083D               	movf	___ftdiv@exp,w
 17883  0DD2  00B5               	movwf	??___ftdiv
 17884  0DD3  0835               	movf	??___ftdiv,w
 17885  0DD4  00A4               	movwf	___ftpack@exp
 17886  0DD5  083E               	movf	___ftdiv@sign,w
 17887  0DD6  00B6               	movwf	??___ftdiv+1
 17888  0DD7  0836               	movf	??___ftdiv+1,w
 17889  0DD8  00A5               	movwf	___ftpack@sign
 17890  0DD9  3194  24BE         	fcall	___ftpack
 17891  0DDB  0020               	movlb	0	; select bank0
 17892  0DDC  0821               	movf	?___ftpack,w
 17893  0DDD  00AF               	movwf	?___ftdiv
 17894  0DDE  0822               	movf	?___ftpack+1,w
 17895  0DDF  00B0               	movwf	?___ftdiv+1
 17896  0DE0  0823               	movf	?___ftpack+2,w
 17897  0DE1  00B1               	movwf	?___ftdiv+2
 17898  0DE2  0008               	return
 17899  0DE3                     __end_of___ftdiv:	
 17900                           
 17901                           	psect	text121
 17902  0388                     __ptext121:	
 17903 ;; *************** function ___ftadd *****************
 17904 ;; Defined at:
 17905 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17906 ;; Parameters:    Size  Location     Type
 17907 ;;  f1              3   34[BANK0 ] float 
 17908 ;;  f2              3   37[BANK0 ] float 
 17909 ;; Auto vars:     Size  Location     Type
 17910 ;;  exp1            1   46[BANK0 ] unsigned char 
 17911 ;;  exp2            1   45[BANK0 ] unsigned char 
 17912 ;;  sign            1   44[BANK0 ] unsigned char 
 17913 ;; Return value:  Size  Location     Type
 17914 ;;                  3   34[BANK0 ] float 
 17915 ;; Registers used:
 17916 ;;		wreg, status,2, status,0, pclath, cstack
 17917 ;; Tracked objects:
 17918 ;;		On entry : 0/0
 17919 ;;		On exit  : 0/0
 17920 ;;		Unchanged: 0/0
 17921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17922 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17924 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17925 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17926 ;;Total ram usage:       13 bytes
 17927 ;; Hardware stack levels used:    1
 17928 ;; Hardware stack levels required when called:    6
 17929 ;; This function calls:
 17930 ;;		___ftpack
 17931 ;; This function is called by:
 17932 ;;		_getDimmerLights_PercentToValue
 17933 ;;		_getDimmerLights_ValueToPercent
 17934 ;; This function uses a non-reentrant model
 17935 ;;
 17936                           
 17937                           
 17938                           ;psect for function ___ftadd
 17939  0388                     ___ftadd:	
 17940                           
 17941                           ;incstack = 0
 17942                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17943  0388  0020               	movlb	0	; select bank0
 17944  0389  0842               	movf	___ftadd@f1,w
 17945  038A  00C8               	movwf	??___ftadd
 17946  038B  0843               	movf	___ftadd@f1+1,w
 17947  038C  00C9               	movwf	??___ftadd+1
 17948  038D  0844               	movf	___ftadd@f1+2,w
 17949  038E  00CA               	movwf	??___ftadd+2
 17950  038F  1003               	clrc
 17951  0390  0D49               	rlf	??___ftadd+1,w
 17952  0391  0D4A               	rlf	??___ftadd+2,w
 17953  0392  00CB               	movwf	??___ftadd+3
 17954  0393  084B               	movf	??___ftadd+3,w
 17955  0394  00CE               	movwf	___ftadd@exp1
 17956  0395  0845               	movf	___ftadd@f2,w
 17957  0396  00C8               	movwf	??___ftadd
 17958  0397  0846               	movf	___ftadd@f2+1,w
 17959  0398  00C9               	movwf	??___ftadd+1
 17960  0399  0847               	movf	___ftadd@f2+2,w
 17961  039A  00CA               	movwf	??___ftadd+2
 17962  039B  1003               	clrc
 17963  039C  0D49               	rlf	??___ftadd+1,w
 17964  039D  0D4A               	rlf	??___ftadd+2,w
 17965  039E  00CB               	movwf	??___ftadd+3
 17966  039F  084B               	movf	??___ftadd+3,w
 17967  03A0  00CD               	movwf	___ftadd@exp2
 17968  03A1  084E               	movf	___ftadd@exp1,w
 17969  03A2  1903               	btfsc	3,2
 17970  03A3  2BB0               	goto	l9322
 17971  03A4  084D               	movf	___ftadd@exp2,w
 17972  03A5  024E               	subwf	___ftadd@exp1,w
 17973  03A6  1803               	skipnc
 17974  03A7  2BB7               	goto	l9326
 17975  03A8  034E               	decf	___ftadd@exp1,w
 17976  03A9  3AFF               	xorlw	255
 17977  03AA  074D               	addwf	___ftadd@exp2,w
 17978  03AB  00C8               	movwf	??___ftadd
 17979  03AC  3019               	movlw	25
 17980  03AD  0248               	subwf	??___ftadd,w
 17981  03AE  1C03               	skipc
 17982  03AF  2BB7               	goto	l9326
 17983  03B0                     l9322:	
 17984  03B0  0845               	movf	___ftadd@f2,w
 17985  03B1  00C2               	movwf	?___ftadd
 17986  03B2  0846               	movf	___ftadd@f2+1,w
 17987  03B3  00C3               	movwf	?___ftadd+1
 17988  03B4  0847               	movf	___ftadd@f2+2,w
 17989  03B5  00C4               	movwf	?___ftadd+2
 17990  03B6  0008               	return
 17991  03B7                     l9326:	
 17992  03B7  084D               	movf	___ftadd@exp2,w
 17993  03B8  1903               	btfsc	3,2
 17994  03B9  0008               	return
 17995  03BA  084E               	movf	___ftadd@exp1,w
 17996  03BB  024D               	subwf	___ftadd@exp2,w
 17997  03BC  1803               	skipnc
 17998  03BD  2BC6               	goto	l9332
 17999  03BE  034D               	decf	___ftadd@exp2,w
 18000  03BF  3AFF               	xorlw	255
 18001  03C0  074E               	addwf	___ftadd@exp1,w
 18002  03C1  00C8               	movwf	??___ftadd
 18003  03C2  3019               	movlw	25
 18004  03C3  0248               	subwf	??___ftadd,w
 18005  03C4  1803               	btfsc	3,0
 18006  03C5  0008               	return
 18007  03C6                     l9332:	
 18008  03C6  3006               	movlw	6
 18009  03C7  00C8               	movwf	??___ftadd
 18010  03C8  0848               	movf	??___ftadd,w
 18011  03C9  00CC               	movwf	___ftadd@sign
 18012  03CA  1BC4               	btfsc	___ftadd@f1+2,7
 18013  03CB  17CC               	bsf	___ftadd@sign,7
 18014  03CC  1BC7               	btfsc	___ftadd@f2+2,7
 18015  03CD  174C               	bsf	___ftadd@sign,6
 18016  03CE  17C3               	bsf	___ftadd@f1+1,7
 18017  03CF  30FF               	movlw	255
 18018  03D0  05C2               	andwf	___ftadd@f1,f
 18019  03D1  30FF               	movlw	255
 18020  03D2  05C3               	andwf	___ftadd@f1+1,f
 18021  03D3  3000               	movlw	0
 18022  03D4  05C4               	andwf	___ftadd@f1+2,f
 18023  03D5  17C6               	bsf	___ftadd@f2+1,7
 18024  03D6  30FF               	movlw	255
 18025  03D7  05C5               	andwf	___ftadd@f2,f
 18026  03D8  30FF               	movlw	255
 18027  03D9  05C6               	andwf	___ftadd@f2+1,f
 18028  03DA  3000               	movlw	0
 18029  03DB  05C7               	andwf	___ftadd@f2+2,f
 18030  03DC  084D               	movf	___ftadd@exp2,w
 18031  03DD  024E               	subwf	___ftadd@exp1,w
 18032  03DE  1803               	skipnc
 18033  03DF  2C02               	goto	l9354
 18034  03E0                     l9344:	
 18035  03E0  3001               	movlw	1
 18036  03E1                     u10545:	
 18037  03E1  35C5               	lslf	___ftadd@f2,f
 18038  03E2  0DC6               	rlf	___ftadd@f2+1,f
 18039  03E3  0DC7               	rlf	___ftadd@f2+2,f
 18040  03E4  0B89               	decfsz	9,f
 18041  03E5  2BE1               	goto	u10545
 18042  03E6  3001               	movlw	1
 18043  03E7  02CD               	subwf	___ftadd@exp2,f
 18044  03E8  084D               	movf	___ftadd@exp2,w
 18045  03E9  064E               	xorwf	___ftadd@exp1,w
 18046  03EA  1903               	skipnz
 18047  03EB  2BFD               	goto	l9352
 18048  03EC  3001               	movlw	1
 18049  03ED  02CC               	subwf	___ftadd@sign,f
 18050  03EE  084C               	movf	___ftadd@sign,w
 18051  03EF  3907               	andlw	7
 18052  03F0  1903               	btfsc	3,2
 18053  03F1  2BFD               	goto	l9352
 18054  03F2  2BE0               	goto	l9344
 18055  03F3                     l9350:	
 18056  03F3  3001               	movlw	1
 18057  03F4                     u10575:	
 18058  03F4  36C4               	lsrf	___ftadd@f1+2,f
 18059  03F5  0CC3               	rrf	___ftadd@f1+1,f
 18060  03F6  0CC2               	rrf	___ftadd@f1,f
 18061  03F7  0B89               	decfsz	9,f
 18062  03F8  2BF4               	goto	u10575
 18063  03F9  3001               	movlw	1
 18064  03FA  00C8               	movwf	??___ftadd
 18065  03FB  0848               	movf	??___ftadd,w
 18066  03FC  07CE               	addwf	___ftadd@exp1,f
 18067  03FD                     l9352:	
 18068  03FD  084E               	movf	___ftadd@exp1,w
 18069  03FE  064D               	xorwf	___ftadd@exp2,w
 18070  03FF  1903               	btfsc	3,2
 18071  0400  2C27               	goto	l3207
 18072  0401  2BF3               	goto	l9350
 18073  0402                     l9354:	
 18074  0402  084E               	movf	___ftadd@exp1,w
 18075  0403  024D               	subwf	___ftadd@exp2,w
 18076  0404  1803               	skipnc
 18077  0405  2C27               	goto	l3207
 18078  0406                     l9356:	
 18079  0406  3001               	movlw	1
 18080  0407                     u10605:	
 18081  0407  35C2               	lslf	___ftadd@f1,f
 18082  0408  0DC3               	rlf	___ftadd@f1+1,f
 18083  0409  0DC4               	rlf	___ftadd@f1+2,f
 18084  040A  0B89               	decfsz	9,f
 18085  040B  2C07               	goto	u10605
 18086  040C  3001               	movlw	1
 18087  040D  02CE               	subwf	___ftadd@exp1,f
 18088  040E  084D               	movf	___ftadd@exp2,w
 18089  040F  064E               	xorwf	___ftadd@exp1,w
 18090  0410  1903               	skipnz
 18091  0411  2C23               	goto	l9364
 18092  0412  3001               	movlw	1
 18093  0413  02CC               	subwf	___ftadd@sign,f
 18094  0414  084C               	movf	___ftadd@sign,w
 18095  0415  3907               	andlw	7
 18096  0416  1903               	btfsc	3,2
 18097  0417  2C23               	goto	l9364
 18098  0418  2C06               	goto	l9356
 18099  0419                     l9362:	
 18100  0419  3001               	movlw	1
 18101  041A                     u10635:	
 18102  041A  36C7               	lsrf	___ftadd@f2+2,f
 18103  041B  0CC6               	rrf	___ftadd@f2+1,f
 18104  041C  0CC5               	rrf	___ftadd@f2,f
 18105  041D  0B89               	decfsz	9,f
 18106  041E  2C1A               	goto	u10635
 18107  041F  3001               	movlw	1
 18108  0420  00C8               	movwf	??___ftadd
 18109  0421  0848               	movf	??___ftadd,w
 18110  0422  07CD               	addwf	___ftadd@exp2,f
 18111  0423                     l9364:	
 18112  0423  084E               	movf	___ftadd@exp1,w
 18113  0424  064D               	xorwf	___ftadd@exp2,w
 18114  0425  1D03               	skipz
 18115  0426  2C19               	goto	l9362
 18116  0427                     l3207:	
 18117  0427  1FCC               	btfss	___ftadd@sign,7
 18118  0428  2C39               	goto	l9368
 18119  0429  30FF               	movlw	255
 18120  042A  06C2               	xorwf	___ftadd@f1,f
 18121  042B  30FF               	movlw	255
 18122  042C  06C3               	xorwf	___ftadd@f1+1,f
 18123  042D  30FF               	movlw	255
 18124  042E  06C4               	xorwf	___ftadd@f1+2,f
 18125  042F  3001               	movlw	1
 18126  0430  07C2               	addwf	___ftadd@f1,f
 18127  0431  3000               	movlw	0
 18128  0432  1803               	skipnc
 18129  0433  3001               	movlw	1
 18130  0434  07C3               	addwf	___ftadd@f1+1,f
 18131  0435  3000               	movlw	0
 18132  0436  1803               	skipnc
 18133  0437  3001               	movlw	1
 18134  0438  07C4               	addwf	___ftadd@f1+2,f
 18135  0439                     l9368:	
 18136  0439  1F4C               	btfss	___ftadd@sign,6
 18137  043A  2C4B               	goto	l9372
 18138  043B  30FF               	movlw	255
 18139  043C  06C5               	xorwf	___ftadd@f2,f
 18140  043D  30FF               	movlw	255
 18141  043E  06C6               	xorwf	___ftadd@f2+1,f
 18142  043F  30FF               	movlw	255
 18143  0440  06C7               	xorwf	___ftadd@f2+2,f
 18144  0441  3001               	movlw	1
 18145  0442  07C5               	addwf	___ftadd@f2,f
 18146  0443  3000               	movlw	0
 18147  0444  1803               	skipnc
 18148  0445  3001               	movlw	1
 18149  0446  07C6               	addwf	___ftadd@f2+1,f
 18150  0447  3000               	movlw	0
 18151  0448  1803               	skipnc
 18152  0449  3001               	movlw	1
 18153  044A  07C7               	addwf	___ftadd@f2+2,f
 18154  044B                     l9372:	
 18155  044B  01CC               	clrf	___ftadd@sign
 18156  044C  0842               	movf	___ftadd@f1,w
 18157  044D  07C5               	addwf	___ftadd@f2,f
 18158  044E  0843               	movf	___ftadd@f1+1,w
 18159  044F  3DC6               	addwfc	___ftadd@f2+1,f
 18160  0450  0844               	movf	___ftadd@f1+2,w
 18161  0451  3DC7               	addwfc	___ftadd@f2+2,f
 18162  0452  1FC7               	btfss	___ftadd@f2+2,7
 18163  0453  2C66               	goto	l9382
 18164  0454  30FF               	movlw	255
 18165  0455  06C5               	xorwf	___ftadd@f2,f
 18166  0456  30FF               	movlw	255
 18167  0457  06C6               	xorwf	___ftadd@f2+1,f
 18168  0458  30FF               	movlw	255
 18169  0459  06C7               	xorwf	___ftadd@f2+2,f
 18170  045A  3001               	movlw	1
 18171  045B  07C5               	addwf	___ftadd@f2,f
 18172  045C  3000               	movlw	0
 18173  045D  1803               	skipnc
 18174  045E  3001               	movlw	1
 18175  045F  07C6               	addwf	___ftadd@f2+1,f
 18176  0460  3000               	movlw	0
 18177  0461  1803               	skipnc
 18178  0462  3001               	movlw	1
 18179  0463  07C7               	addwf	___ftadd@f2+2,f
 18180  0464  01CC               	clrf	___ftadd@sign
 18181  0465  0ACC               	incf	___ftadd@sign,f
 18182  0466                     l9382:	
 18183  0466  0845               	movf	___ftadd@f2,w
 18184  0467  00A1               	movwf	___ftpack@arg
 18185  0468  0846               	movf	___ftadd@f2+1,w
 18186  0469  00A2               	movwf	___ftpack@arg+1
 18187  046A  0847               	movf	___ftadd@f2+2,w
 18188  046B  00A3               	movwf	___ftpack@arg+2
 18189  046C  084E               	movf	___ftadd@exp1,w
 18190  046D  00C8               	movwf	??___ftadd
 18191  046E  0848               	movf	??___ftadd,w
 18192  046F  00A4               	movwf	___ftpack@exp
 18193  0470  084C               	movf	___ftadd@sign,w
 18194  0471  00C9               	movwf	??___ftadd+1
 18195  0472  0849               	movf	??___ftadd+1,w
 18196  0473  00A5               	movwf	___ftpack@sign
 18197  0474  3194  24BE         	fcall	___ftpack
 18198  0476  0020               	movlb	0	; select bank0
 18199  0477  0821               	movf	?___ftpack,w
 18200  0478  00C2               	movwf	?___ftadd
 18201  0479  0822               	movf	?___ftpack+1,w
 18202  047A  00C3               	movwf	?___ftadd+1
 18203  047B  0823               	movf	?___ftpack+2,w
 18204  047C  00C4               	movwf	?___ftadd+2
 18205  047D  0008               	return
 18206  047E                     __end_of___ftadd:	
 18207                           
 18208                           	psect	text122
 18209  1E33                     __ptext122:	
 18210 ;; *************** function ___awtoft *****************
 18211 ;; Defined at:
 18212 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18213 ;; Parameters:    Size  Location     Type
 18214 ;;  c               2    9[BANK0 ] int 
 18215 ;; Auto vars:     Size  Location     Type
 18216 ;;  sign            1   14[BANK0 ] unsigned char 
 18217 ;; Return value:  Size  Location     Type
 18218 ;;                  3    9[BANK0 ] float 
 18219 ;; Registers used:
 18220 ;;		wreg, status,2, status,0, pclath, cstack
 18221 ;; Tracked objects:
 18222 ;;		On entry : 0/0
 18223 ;;		On exit  : 0/0
 18224 ;;		Unchanged: 0/0
 18225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18226 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18228 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;Total ram usage:        6 bytes
 18231 ;; Hardware stack levels used:    1
 18232 ;; Hardware stack levels required when called:    6
 18233 ;; This function calls:
 18234 ;;		___ftpack
 18235 ;; This function is called by:
 18236 ;;		_getDimmerLights_PercentToValue
 18237 ;;		_getDimmerLights_ValueToPercent
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           
 18242                           ;psect for function ___awtoft
 18243  1E33                     ___awtoft:	
 18244                           
 18245                           ;incstack = 0
 18246                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18247  1E33  0020               	movlb	0	; select bank0
 18248  1E34  01AE               	clrf	___awtoft@sign
 18249  1E35  1FAA               	btfss	___awtoft@c+1,7
 18250  1E36  2E3E               	goto	l9310
 18251  1E37  09A9               	comf	___awtoft@c,f
 18252  1E38  09AA               	comf	___awtoft@c+1,f
 18253  1E39  0AA9               	incf	___awtoft@c,f
 18254  1E3A  1903               	skipnz
 18255  1E3B  0AAA               	incf	___awtoft@c+1,f
 18256  1E3C  01AE               	clrf	___awtoft@sign
 18257  1E3D  0AAE               	incf	___awtoft@sign,f
 18258  1E3E                     l9310:	
 18259  1E3E  0829               	movf	___awtoft@c,w
 18260  1E3F  00A1               	movwf	___ftpack@arg
 18261  1E40  082A               	movf	___awtoft@c+1,w
 18262  1E41  00A2               	movwf	___ftpack@arg+1
 18263  1E42  01A3               	clrf	___ftpack@arg+2
 18264  1E43  308E               	movlw	142
 18265  1E44  00AC               	movwf	??___awtoft
 18266  1E45  082C               	movf	??___awtoft,w
 18267  1E46  00A4               	movwf	___ftpack@exp
 18268  1E47  082E               	movf	___awtoft@sign,w
 18269  1E48  00AD               	movwf	??___awtoft+1
 18270  1E49  082D               	movf	??___awtoft+1,w
 18271  1E4A  00A5               	movwf	___ftpack@sign
 18272  1E4B  3194  24BE         	fcall	___ftpack
 18273  1E4D  0020               	movlb	0	; select bank0
 18274  1E4E  0821               	movf	?___ftpack,w
 18275  1E4F  00A9               	movwf	?___awtoft
 18276  1E50  0822               	movf	?___ftpack+1,w
 18277  1E51  00AA               	movwf	?___awtoft+1
 18278  1E52  0823               	movf	?___ftpack+2,w
 18279  1E53  00AB               	movwf	?___awtoft+2
 18280  1E54  0008               	return
 18281  1E55                     __end_of___awtoft:	
 18282                           
 18283                           	psect	text123
 18284  14BE                     __ptext123:	
 18285 ;; *************** function ___ftpack *****************
 18286 ;; Defined at:
 18287 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18288 ;; Parameters:    Size  Location     Type
 18289 ;;  arg             3    1[BANK0 ] unsigned um
 18290 ;;  exp             1    4[BANK0 ] unsigned char 
 18291 ;;  sign            1    5[BANK0 ] unsigned char 
 18292 ;; Auto vars:     Size  Location     Type
 18293 ;;		None
 18294 ;; Return value:  Size  Location     Type
 18295 ;;                  3    1[BANK0 ] float 
 18296 ;; Registers used:
 18297 ;;		wreg, status,2, status,0
 18298 ;; Tracked objects:
 18299 ;;		On entry : 0/0
 18300 ;;		On exit  : 0/0
 18301 ;;		Unchanged: 0/0
 18302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18303 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18306 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18307 ;;Total ram usage:        8 bytes
 18308 ;; Hardware stack levels used:    1
 18309 ;; Hardware stack levels required when called:    5
 18310 ;; This function calls:
 18311 ;;		Nothing
 18312 ;; This function is called by:
 18313 ;;		___awtoft
 18314 ;;		___ftadd
 18315 ;;		___ftdiv
 18316 ;;		___ftmul
 18317 ;; This function uses a non-reentrant model
 18318 ;;
 18319                           
 18320                           
 18321                           ;psect for function ___ftpack
 18322  14BE                     ___ftpack:	
 18323                           
 18324                           ;incstack = 0
 18325                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18326  14BE  0020               	movlb	0	; select bank0
 18327  14BF  0824               	movf	___ftpack@exp,w
 18328  14C0  1903               	btfsc	3,2
 18329  14C1  2CC7               	goto	l9202
 18330  14C2  0823               	movf	___ftpack@arg+2,w
 18331  14C3  0422               	iorwf	___ftpack@arg+1,w
 18332  14C4  0421               	iorwf	___ftpack@arg,w
 18333  14C5  1D03               	skipz
 18334  14C6  2CD8               	goto	l9208
 18335  14C7                     l9202:	
 18336  14C7  3000               	movlw	0
 18337  14C8  00A1               	movwf	?___ftpack
 18338  14C9  3000               	movlw	0
 18339  14CA  00A2               	movwf	?___ftpack+1
 18340  14CB  3000               	movlw	0
 18341  14CC  00A3               	movwf	?___ftpack+2
 18342  14CD  0008               	return
 18343  14CE                     l9206:	
 18344  14CE  3001               	movlw	1
 18345  14CF  00A6               	movwf	??___ftpack
 18346  14D0  0826               	movf	??___ftpack,w
 18347  14D1  07A4               	addwf	___ftpack@exp,f
 18348  14D2  3001               	movlw	1
 18349  14D3                     u10215:	
 18350  14D3  36A3               	lsrf	___ftpack@arg+2,f
 18351  14D4  0CA2               	rrf	___ftpack@arg+1,f
 18352  14D5  0CA1               	rrf	___ftpack@arg,f
 18353  14D6  0B89               	decfsz	9,f
 18354  14D7  2CD3               	goto	u10215
 18355  14D8                     l9208:	
 18356  14D8  30FE               	movlw	254
 18357  14D9  0523               	andwf	___ftpack@arg+2,w
 18358  14DA  1903               	btfsc	3,2
 18359  14DB  2CF1               	goto	l3178
 18360  14DC  2CCE               	goto	l9206
 18361  14DD                     l9210:	
 18362  14DD  3001               	movlw	1
 18363  14DE  00A6               	movwf	??___ftpack
 18364  14DF  0826               	movf	??___ftpack,w
 18365  14E0  07A4               	addwf	___ftpack@exp,f
 18366  14E1  3001               	movlw	1
 18367  14E2  07A1               	addwf	___ftpack@arg,f
 18368  14E3  3000               	movlw	0
 18369  14E4  1803               	skipnc
 18370  14E5  3001               	movlw	1
 18371  14E6  07A2               	addwf	___ftpack@arg+1,f
 18372  14E7  3000               	movlw	0
 18373  14E8  1803               	skipnc
 18374  14E9  3001               	movlw	1
 18375  14EA  07A3               	addwf	___ftpack@arg+2,f
 18376  14EB  3001               	movlw	1
 18377  14EC                     u10235:	
 18378  14EC  36A3               	lsrf	___ftpack@arg+2,f
 18379  14ED  0CA2               	rrf	___ftpack@arg+1,f
 18380  14EE  0CA1               	rrf	___ftpack@arg,f
 18381  14EF  0B89               	decfsz	9,f
 18382  14F0  2CEC               	goto	u10235
 18383  14F1                     l3178:	
 18384  14F1  30FF               	movlw	255
 18385  14F2  0523               	andwf	___ftpack@arg+2,w
 18386  14F3  1903               	btfsc	3,2
 18387  14F4  2CFE               	goto	l9218
 18388  14F5  2CDD               	goto	l9210
 18389  14F6                     l9216:	
 18390  14F6  3001               	movlw	1
 18391  14F7  02A4               	subwf	___ftpack@exp,f
 18392  14F8  3001               	movlw	1
 18393  14F9                     u10255:	
 18394  14F9  35A1               	lslf	___ftpack@arg,f
 18395  14FA  0DA2               	rlf	___ftpack@arg+1,f
 18396  14FB  0DA3               	rlf	___ftpack@arg+2,f
 18397  14FC  0B89               	decfsz	9,f
 18398  14FD  2CF9               	goto	u10255
 18399  14FE                     l9218:	
 18400  14FE  1FA2               	btfss	___ftpack@arg+1,7
 18401  14FF  2CF6               	goto	l9216
 18402  1500  1824               	btfsc	___ftpack@exp,0
 18403  1501  2D08               	goto	l3184
 18404  1502  30FF               	movlw	255
 18405  1503  05A1               	andwf	___ftpack@arg,f
 18406  1504  307F               	movlw	127
 18407  1505  05A2               	andwf	___ftpack@arg+1,f
 18408  1506  30FF               	movlw	255
 18409  1507  05A3               	andwf	___ftpack@arg+2,f
 18410  1508                     l3184:	
 18411  1508  1003               	clrc
 18412  1509  0CA4               	rrf	___ftpack@exp,f
 18413  150A  0824               	movf	___ftpack@exp,w
 18414  150B  00A6               	movwf	??___ftpack
 18415  150C  01A7               	clrf	??___ftpack+1
 18416  150D  01A8               	clrf	??___ftpack+2
 18417  150E  3010               	movlw	16
 18418  150F                     u10285:	
 18419  150F  35A6               	lslf	??___ftpack,f
 18420  1510  0DA7               	rlf	??___ftpack+1,f
 18421  1511  0DA8               	rlf	??___ftpack+2,f
 18422  1512  0B89               	decfsz	9,f
 18423  1513  2D0F               	goto	u10285
 18424  1514  0826               	movf	??___ftpack,w
 18425  1515  04A1               	iorwf	___ftpack@arg,f
 18426  1516  0827               	movf	??___ftpack+1,w
 18427  1517  04A2               	iorwf	___ftpack@arg+1,f
 18428  1518  0828               	movf	??___ftpack+2,w
 18429  1519  04A3               	iorwf	___ftpack@arg+2,f
 18430  151A  0825               	movf	___ftpack@sign,w
 18431  151B  1903               	btfsc	3,2
 18432  151C  0008               	return
 18433  151D  17A3               	bsf	___ftpack@arg+2,7
 18434  151E  0008               	return
 18435  151F                     __end_of___ftpack:	
 18436                           
 18437                           	psect	text124
 18438  18F9                     __ptext124:	
 18439 ;; *************** function _DelayOff_Main *****************
 18440 ;; Defined at:
 18441 ;;		line 41 in file "../src/DelayOff_B1.c"
 18442 ;; Parameters:    Size  Location     Type
 18443 ;;		None
 18444 ;; Auto vars:     Size  Location     Type
 18445 ;;		None
 18446 ;; Return value:  Size  Location     Type
 18447 ;;		None               void
 18448 ;; Registers used:
 18449 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18450 ;; Tracked objects:
 18451 ;;		On entry : 0/0
 18452 ;;		On exit  : 0/0
 18453 ;;		Unchanged: 0/0
 18454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18459 ;;Total ram usage:        0 bytes
 18460 ;; Hardware stack levels used:    1
 18461 ;; Hardware stack levels required when called:    9
 18462 ;; This function calls:
 18463 ;;		_DlyOff_Main
 18464 ;; This function is called by:
 18465 ;;		_main
 18466 ;; This function uses a non-reentrant model
 18467 ;;
 18468                           
 18469                           
 18470                           ;psect for function _DelayOff_Main
 18471  18F9                     _DelayOff_Main:	
 18472                           
 18473                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18474                           
 18475                           ;incstack = 0
 18476                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18477  18F9  3001               	movlw	1
 18478  18FA  3197  2791  3198   	fcall	_DlyOff_Main
 18479                           
 18480                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 18481  18FD  3002               	movlw	2
 18482  18FE  3197  2791         	fcall	_DlyOff_Main
 18483  1900  0008               	return
 18484  1901                     __end_of_DelayOff_Main:	
 18485                           
 18486                           	psect	text125
 18487  1791                     __ptext125:	
 18488 ;; *************** function _DlyOff_Main *****************
 18489 ;; Defined at:
 18490 ;;		line 61 in file "../src/DelayOff_B1.c"
 18491 ;; Parameters:    Size  Location     Type
 18492 ;;  sw              1    wreg     unsigned char 
 18493 ;; Auto vars:     Size  Location     Type
 18494 ;;  sw              1   72[BANK0 ] unsigned char 
 18495 ;; Return value:  Size  Location     Type
 18496 ;;		None               void
 18497 ;; Registers used:
 18498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18499 ;; Tracked objects:
 18500 ;;		On entry : 0/0
 18501 ;;		On exit  : 0/0
 18502 ;;		Unchanged: 0/0
 18503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18507 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18508 ;;Total ram usage:        3 bytes
 18509 ;; Hardware stack levels used:    1
 18510 ;; Hardware stack levels required when called:    8
 18511 ;; This function calls:
 18512 ;;		_DelayOffPointSelect
 18513 ;;		_getDimmerLights_Status
 18514 ;;		_setDimmerLights_SwOff
 18515 ;;		_setDimmerLights_SwOn
 18516 ;;		_setProductData
 18517 ;; This function is called by:
 18518 ;;		_DelayOff_Main
 18519 ;; This function uses a non-reentrant model
 18520 ;;
 18521                           
 18522                           
 18523                           ;psect for function _DlyOff_Main
 18524  1791                     _DlyOff_Main:	
 18525                           
 18526                           ;incstack = 0
 18527                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18528                           ;DlyOff_Main@sw stored from wreg
 18529  1791  0020               	movlb	0	; select bank0
 18530  1792  00E8               	movwf	DlyOff_Main@sw
 18531                           
 18532                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18533  1793  0868               	movf	DlyOff_Main@sw,w
 18534  1794  319B  238E  3197   	fcall	_DelayOffPointSelect
 18535                           
 18536                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18537  1797  0021               	movlb	1	; select bank1
 18538  1798  0854               	movf	_DelayOff^(0+128),w
 18539  1799  0086               	movwf	6
 18540  179A  3001               	movlw	1	; select bank2/3
 18541  179B  0087               	movwf	7
 18542  179C  1C81               	btfss	1,1
 18543  179D  0008               	return
 18544                           
 18545                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18546  179E  0854               	movf	_DelayOff^(0+128),w
 18547  179F  3E02               	addlw	2
 18548  17A0  0086               	movwf	6
 18549  17A1  3001               	movlw	1	; select bank2/3
 18550  17A2  0087               	movwf	7
 18551  17A3  3001               	movlw	1
 18552  17A4  0781               	addwf	1,f
 18553  17A5  3141               	addfsr 1,1
 18554  17A6  1803               	skipnc
 18555  17A7  0A81               	incf	1,f
 18556                           
 18557                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18558  17A8  0854               	movf	_DelayOff^(0+128),w
 18559  17A9  3E02               	addlw	2
 18560  17AA  0086               	movwf	6
 18561  17AB  3001               	movlw	1	; select bank2/3
 18562  17AC  0087               	movwf	7
 18563  17AD  3F40               	moviw [0]fsr1
 18564  17AE  0020               	movlb	0	; select bank0
 18565  17AF  00E6               	movwf	??_DlyOff_Main
 18566  17B0  3F41               	moviw [1]fsr1
 18567  17B1  00E7               	movwf	??_DlyOff_Main+1
 18568  17B2  300B               	movlw	11
 18569  17B3  0267               	subwf	??_DlyOff_Main+1,w
 18570  17B4  30B8               	movlw	184
 18571  17B5  1903               	skipnz
 18572  17B6  0266               	subwf	??_DlyOff_Main,w
 18573  17B7  1C03               	skipc
 18574  17B8  0008               	return
 18575                           
 18576                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18577  17B9  0021               	movlb	1	; select bank1
 18578  17BA  0854               	movf	_DelayOff^(0+128),w
 18579  17BB  3E02               	addlw	2
 18580  17BC  0086               	movwf	6
 18581  17BD  3001               	movlw	1	; select bank2/3
 18582  17BE  0087               	movwf	7
 18583  17BF  3000               	movlw	0
 18584  17C0  3FC0               	movwi [0]fsr1
 18585  17C1  3FC1               	movwi [1]fsr1
 18586                           
 18587                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18588  17C2  3001               	movlw	1
 18589  17C3  0020               	movlb	0	; select bank0
 18590  17C4  00E6               	movwf	??_DlyOff_Main
 18591  17C5  0021               	movlb	1	; select bank1
 18592  17C6  0854               	movf	_DelayOff^(0+128),w
 18593  17C7  3E04               	addlw	4
 18594  17C8  0086               	movwf	6
 18595  17C9  3001               	movlw	1	; select bank2/3
 18596  17CA  0087               	movwf	7
 18597  17CB  0020               	movlb	0	; select bank0
 18598  17CC  0866               	movf	??_DlyOff_Main,w
 18599  17CD  0781               	addwf	1,f
 18600                           
 18601                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18602  17CE  0021               	movlb	1	; select bank1
 18603  17CF  0854               	movf	_DelayOff^(0+128),w
 18604  17D0  3E04               	addlw	4
 18605  17D1  0086               	movwf	6
 18606  17D2  3001               	movlw	1	; select bank2/3
 18607  17D3  0087               	movwf	7
 18608  17D4  0A54               	incf	_DelayOff^(0+128),w
 18609  17D5  0084               	movwf	4
 18610  17D6  3001               	movlw	1	; select bank2/3
 18611  17D7  0085               	movwf	5
 18612  17D8  0800               	movf	0,w
 18613  17D9  0201               	subwf	1,w
 18614  17DA  1C03               	skipc
 18615  17DB  0008               	return
 18616                           
 18617                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18618  17DC  0854               	movf	_DelayOff^(0+128),w
 18619  17DD  3E04               	addlw	4
 18620  17DE  0086               	movwf	6
 18621  17DF  3001               	movlw	1	; select bank2/3
 18622  17E0  0087               	movwf	7
 18623  17E1  0181               	clrf	1
 18624                           
 18625                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18626  17E2  0854               	movf	_DelayOff^(0+128),w
 18627  17E3  0086               	movwf	6
 18628  17E4  3001               	movlw	1	; select bank2/3
 18629  17E5  0087               	movwf	7
 18630  17E6  1081               	bcf	1,1
 18631                           
 18632                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18633  17E7  0020               	movlb	0	; select bank0
 18634  17E8  0868               	movf	DlyOff_Main@sw,w
 18635  17E9  3199  21EF  3197   	fcall	_getDimmerLights_Status
 18636  17EC  3A01               	xorlw	1
 18637  17ED  1D03               	skipz
 18638  17EE  2FF9               	goto	l581
 18639                           
 18640                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18641  17EF  0020               	movlb	0	; select bank0
 18642  17F0  0868               	movf	DlyOff_Main@sw,w
 18643  17F1  3194  2404  3197   	fcall	_setDimmerLights_SwOn
 18644                           
 18645                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18646  17F4  0020               	movlb	0	; select bank0
 18647  17F5  0868               	movf	DlyOff_Main@sw,w
 18648  17F6  3190  207E  3197   	fcall	_setDimmerLights_SwOff
 18649  17F9                     l581:	
 18650                           
 18651                           ;DelayOff_B1.c: 78: }
 18652                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18653  17F9  0020               	movlb	0	; select bank0
 18654  17FA  01E3               	clrf	setProductData@value
 18655  17FB  0868               	movf	DlyOff_Main@sw,w
 18656  17FC  3E1A               	addlw	26
 18657  17FD  3199  2173         	fcall	_setProductData
 18658  17FF  0008               	return
 18659  1800                     __end_of_DlyOff_Main:	
 18660                           
 18661                           	psect	text126
 18662  1973                     __ptext126:	
 18663 ;; *************** function _setProductData *****************
 18664 ;; Defined at:
 18665 ;;		line 645 in file "../src/main_B1.c"
 18666 ;; Parameters:    Size  Location     Type
 18667 ;;  address         1    wreg     unsigned char 
 18668 ;;  value           1   67[BANK0 ] unsigned char 
 18669 ;; Auto vars:     Size  Location     Type
 18670 ;;  address         1   69[BANK0 ] unsigned char 
 18671 ;; Return value:  Size  Location     Type
 18672 ;;		None               void
 18673 ;; Registers used:
 18674 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18675 ;; Tracked objects:
 18676 ;;		On entry : 0/0
 18677 ;;		On exit  : 0/0
 18678 ;;		Unchanged: 0/0
 18679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18680 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18683 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18684 ;;Total ram usage:        3 bytes
 18685 ;; Hardware stack levels used:    1
 18686 ;; Hardware stack levels required when called:    5
 18687 ;; This function calls:
 18688 ;;		Nothing
 18689 ;; This function is called by:
 18690 ;;		_DlyOff_Main
 18691 ;;		_setDelayOff_GO
 18692 ;;		_setDimmerLights_OnOff
 18693 ;;		_setDimmerLights_Dimming
 18694 ;;		_setTemp_Main
 18695 ;;		_setLog_Code
 18696 ;;		_setControl_Lights_Table
 18697 ;;		_setRFSW_AdjControl
 18698 ;;		_setRF_DimmerLights
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           
 18703                           ;psect for function _setProductData
 18704  1973                     _setProductData:	
 18705                           
 18706                           ;incstack = 0
 18707                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18708                           ;setProductData@address stored from wreg
 18709  1973  0020               	movlb	0	; select bank0
 18710  1974  00E5               	movwf	setProductData@address
 18711                           
 18712                           ;main_B1.c: 646: _product.Data[address] = value;
 18713  1975  0863               	movf	setProductData@value,w
 18714  1976  00E4               	movwf	??_setProductData
 18715  1977  0865               	movf	setProductData@address,w
 18716  1978  3E45               	addlw	__product& (0+255)
 18717  1979  0086               	movwf	6
 18718  197A  3002               	movlw	2	; select bank4/5
 18719  197B  0087               	movwf	7
 18720  197C  0864               	movf	??_setProductData,w
 18721  197D  0081               	movwf	1
 18722  197E  0008               	return
 18723  197F                     __end_of_setProductData:	
 18724                           
 18725                           	psect	text127
 18726  1404                     __ptext127:	
 18727 ;; *************** function _setDimmerLights_SwOn *****************
 18728 ;; Defined at:
 18729 ;;		line 688 in file "../src/Dimmer_B1.c"
 18730 ;; Parameters:    Size  Location     Type
 18731 ;;  sw              1    wreg     unsigned char 
 18732 ;; Auto vars:     Size  Location     Type
 18733 ;;  sw              1   18[BANK0 ] unsigned char 
 18734 ;;  idle            1   17[BANK0 ] unsigned char 
 18735 ;; Return value:  Size  Location     Type
 18736 ;;		None               void
 18737 ;; Registers used:
 18738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18739 ;; Tracked objects:
 18740 ;;		On entry : 0/0
 18741 ;;		On exit  : 0/0
 18742 ;;		Unchanged: 0/0
 18743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18745 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18747 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18748 ;;Total ram usage:        5 bytes
 18749 ;; Hardware stack levels used:    1
 18750 ;; Hardware stack levels required when called:    7
 18751 ;; This function calls:
 18752 ;;		_DimmerLights_SelectPointer
 18753 ;;		_setBuz
 18754 ;; This function is called by:
 18755 ;;		_DlyOff_Main
 18756 ;;		_setControl_Lights_Table
 18757 ;;		_setRFSW_Control
 18758 ;;		_setRFSW_AdjControl
 18759 ;;		_setSw_Main
 18760 ;; This function uses a non-reentrant model
 18761 ;;
 18762                           
 18763                           
 18764                           ;psect for function _setDimmerLights_SwOn
 18765  1404                     _setDimmerLights_SwOn:	
 18766                           
 18767                           ;incstack = 0
 18768                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18769                           ;setDimmerLights_SwOn@sw stored from wreg
 18770  1404  0020               	movlb	0	; select bank0
 18771  1405  00B2               	movwf	setDimmerLights_SwOn@sw
 18772                           
 18773                           ;Dimmer_B1.c: 689: char idle = 0;
 18774  1406  01B1               	clrf	setDimmerLights_SwOn@idle
 18775                           
 18776                           ;Dimmer_B1.c: 691: if (idle == 0) {
 18777  1407  08B1               	movf	setDimmerLights_SwOn@idle,f
 18778  1408  1D03               	skipz
 18779  1409  2C2E               	goto	l9554
 18780                           
 18781                           ;Dimmer_B1.c: 692: if (sw == 1) {
 18782  140A  0832               	movf	setDimmerLights_SwOn@sw,w
 18783  140B  3A01               	xorlw	1
 18784  140C  1D03               	skipz
 18785  140D  2C1B               	goto	l9544
 18786                           
 18787                           ;Dimmer_B1.c: 693: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18788  140E  01AF               	clrf	_setDimmerLights_SwOn$2332
 18789  140F  0AAF               	incf	_setDimmerLights_SwOn$2332,f
 18790  1410  0023               	movlb	3	; select bank3
 18791  1411  1A50               	btfsc	_DimmerLights2^(0+384),4
 18792  1412  2C18               	goto	l9542
 18793  1413  0021               	movlb	1	; select bank1
 18794  1414  1A47               	btfsc	_DimmerIntr2^(0+128),4
 18795  1415  2C18               	goto	l9542
 18796  1416  0020               	movlb	0	; select bank0
 18797  1417  01AF               	clrf	_setDimmerLights_SwOn$2332
 18798  1418                     l9542:	
 18799  1418  0020               	movlb	0	; select bank0
 18800  1419  082F               	movf	_setDimmerLights_SwOn$2332,w
 18801  141A  2C2B               	goto	L12
 18802  141B                     l9544:	
 18803                           ;Dimmer_B1.c: 694: } else if (sw == 2) {
 18804                           
 18805  141B  0832               	movf	setDimmerLights_SwOn@sw,w
 18806  141C  3A02               	xorlw	2
 18807  141D  1D03               	skipz
 18808  141E  2C2E               	goto	l9554
 18809                           
 18810                           ;Dimmer_B1.c: 695: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18811  141F  01B0               	clrf	_setDimmerLights_SwOn$2341
 18812  1420  0AB0               	incf	_setDimmerLights_SwOn$2341,f
 18813  1421  0022               	movlb	2	; select bank2
 18814  1422  1A68               	btfsc	_DimmerLights1^(0+256),4
 18815  1423  2C29               	goto	l9552
 18816  1424  0021               	movlb	1	; select bank1
 18817  1425  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 18818  1426  2C29               	goto	l9552
 18819  1427  0020               	movlb	0	; select bank0
 18820  1428  01B0               	clrf	_setDimmerLights_SwOn$2341
 18821  1429                     l9552:	
 18822  1429  0020               	movlb	0	; select bank0
 18823  142A  0830               	movf	_setDimmerLights_SwOn$2341,w
 18824  142B                     L12:	
 18825  142B  00AE               	movwf	??_setDimmerLights_SwOn
 18826  142C  082E               	movf	??_setDimmerLights_SwOn,w
 18827  142D  00B1               	movwf	setDimmerLights_SwOn@idle
 18828  142E                     l9554:	
 18829                           
 18830                           ;Dimmer_B1.c: 696: }
 18831                           ;Dimmer_B1.c: 697: }
 18832                           ;Dimmer_B1.c: 714: DimmerLights_SelectPointer(sw);
 18833  142E  0832               	movf	setDimmerLights_SwOn@sw,w
 18834  142F  319B  23A5  3194   	fcall	_DimmerLights_SelectPointer
 18835                           
 18836                           ;Dimmer_B1.c: 715: if (idle == 0) {
 18837  1432  0020               	movlb	0	; select bank0
 18838  1433  08B1               	movf	setDimmerLights_SwOn@idle,f
 18839  1434  1D03               	skipz
 18840  1435  0008               	return
 18841                           
 18842                           ;Dimmer_B1.c: 716: DimmerLights->SwFlag = 1;
 18843  1436  0021               	movlb	1	; select bank1
 18844  1437  0855               	movf	_DimmerLights^(0+128),w
 18845  1438  0086               	movwf	6
 18846  1439  3001               	movlw	1	; select bank2/3
 18847  143A  0087               	movwf	7
 18848  143B  1401               	bsf	1,0
 18849                           
 18850                           ;Dimmer_B1.c: 717: if (DimmerLights->Status == 0) {
 18851  143C  0A55               	incf	_DimmerLights^(0+128),w
 18852  143D  0086               	movwf	6
 18853  143E  3001               	movlw	1	; select bank2/3
 18854  143F  0087               	movwf	7
 18855  1440  1801               	btfsc	1,0
 18856  1441  2C52               	goto	l9562
 18857                           
 18858                           ;Dimmer_B1.c: 718: DimmerLights->Status = 1;
 18859  1442  0A55               	incf	_DimmerLights^(0+128),w
 18860  1443  0086               	movwf	6
 18861  1444  3001               	movlw	1	; select bank2/3
 18862  1445  0087               	movwf	7
 18863  1446  1401               	bsf	1,0
 18864                           
 18865                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = 1;
 18866  1447  0855               	movf	_DimmerLights^(0+128),w
 18867  1448  0086               	movwf	6
 18868  1449  3001               	movlw	1	; select bank2/3
 18869  144A  0087               	movwf	7
 18870  144B  1481               	bsf	1,1
 18871                           
 18872                           ;Dimmer_B1.c: 720: DimmerLights->Switch = 1;
 18873  144C  0855               	movf	_DimmerLights^(0+128),w
 18874  144D  0086               	movwf	6
 18875  144E  3001               	movlw	1	; select bank2/3
 18876  144F  0087               	movwf	7
 18877  1450  1501               	bsf	1,2
 18878                           
 18879                           ;Dimmer_B1.c: 721: } else {
 18880  1451  2C57               	goto	l9564
 18881  1452                     l9562:	
 18882                           
 18883                           ;Dimmer_B1.c: 722: DimmerLights->Status = 0;
 18884  1452  0A55               	incf	_DimmerLights^(0+128),w
 18885  1453  0086               	movwf	6
 18886  1454  3001               	movlw	1	; select bank2/3
 18887  1455  0087               	movwf	7
 18888  1456  1001               	bcf	1,0
 18889  1457                     l9564:	
 18890                           
 18891                           ;Dimmer_B1.c: 723: }
 18892                           ;Dimmer_B1.c: 724: setBuz(1, 100);
 18893  1457  3064               	movlw	100
 18894  1458  0020               	movlb	0	; select bank0
 18895  1459  00AA               	movwf	setBuz@time
 18896  145A  3000               	movlw	0
 18897  145B  00AB               	movwf	setBuz@time+1
 18898  145C  3001               	movlw	1
 18899  145D  3188  2000         	fcall	_setBuz
 18900  145F  0008               	return
 18901  1460                     __end_of_setDimmerLights_SwOn:	
 18902                           
 18903                           	psect	text128
 18904  0800                     __ptext128:	
 18905 ;; *************** function _setBuz *****************
 18906 ;; Defined at:
 18907 ;;		line 22 in file "../src/Buzzer_B1.c"
 18908 ;; Parameters:    Size  Location     Type
 18909 ;;  count           1    wreg     unsigned char 
 18910 ;;  time            2   10[BANK0 ] int 
 18911 ;; Auto vars:     Size  Location     Type
 18912 ;;  count           1   13[BANK0 ] unsigned char 
 18913 ;; Return value:  Size  Location     Type
 18914 ;;		None               void
 18915 ;; Registers used:
 18916 ;;		wreg, status,2, status,0, pclath, cstack
 18917 ;; Tracked objects:
 18918 ;;		On entry : 0/0
 18919 ;;		On exit  : 0/0
 18920 ;;		Unchanged: 0/0
 18921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18922 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18925 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18926 ;;Total ram usage:        4 bytes
 18927 ;; Hardware stack levels used:    1
 18928 ;; Hardware stack levels required when called:    6
 18929 ;; This function calls:
 18930 ;;		___awdiv
 18931 ;; This function is called by:
 18932 ;;		_setDimmerLights_SwOn
 18933 ;;		_setDimmerLights_Dimming
 18934 ;;		_setTemp_Main
 18935 ;;		_setLog_Code
 18936 ;;		_setRFSW_Control
 18937 ;;		_setSw_Main
 18938 ;;		_my_MainTimer
 18939 ;;		_Exception_Main
 18940 ;; This function uses a non-reentrant model
 18941 ;;
 18942                           
 18943                           
 18944                           ;psect for function _setBuz
 18945  0800                     _setBuz:	
 18946                           
 18947                           ;incstack = 0
 18948                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18949                           ;setBuz@count stored from wreg
 18950  0800  0020               	movlb	0	; select bank0
 18951  0801  00AD               	movwf	setBuz@count
 18952                           
 18953                           ;Buzzer_B1.c: 23: time /= 20;
 18954  0802  3014               	movlw	20
 18955  0803  00A1               	movwf	___awdiv@divisor
 18956  0804  3000               	movlw	0
 18957  0805  00A2               	movwf	___awdiv@divisor+1
 18958  0806  082B               	movf	setBuz@time+1,w
 18959  0807  01A4               	clrf	___awdiv@dividend+1
 18960  0808  07A4               	addwf	___awdiv@dividend+1,f
 18961  0809  082A               	movf	setBuz@time,w
 18962  080A  01A3               	clrf	___awdiv@dividend
 18963  080B  07A3               	addwf	___awdiv@dividend,f
 18964  080C  3193  2355  3188   	fcall	___awdiv
 18965  080F  0020               	movlb	0	; select bank0
 18966  0810  0822               	movf	?___awdiv+1,w
 18967  0811  01AB               	clrf	setBuz@time+1
 18968  0812  07AB               	addwf	setBuz@time+1,f
 18969  0813  0821               	movf	?___awdiv,w
 18970  0814  01AA               	clrf	setBuz@time
 18971  0815  07AA               	addwf	setBuz@time,f
 18972                           
 18973                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18974  0816  0022               	movlb	2	; select bank2
 18975  0817  1C20               	btfss	_Buz1^(0+256),0
 18976  0818  0008               	return
 18977                           
 18978                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18979  0819  18A0               	btfsc	_Buz1^(0+256),1
 18980  081A  2831               	goto	l98
 18981                           
 18982                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18983  081B  14A0               	bsf	_Buz1^(0+256),1
 18984                           
 18985                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18986  081C  01A1               	clrf	(_Buz1^(0+256)+1)
 18987  081D  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18988                           
 18989                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18990  081E  0020               	movlb	0	; select bank0
 18991  081F  082D               	movf	setBuz@count,w
 18992  0820  00AC               	movwf	??_setBuz
 18993  0821  082C               	movf	??_setBuz,w
 18994  0822  0022               	movlb	2	; select bank2
 18995  0823  00A3               	movwf	(_Buz1^(0+256)+3)
 18996                           
 18997                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18998  0824  0020               	movlb	0	; select bank0
 18999  0825  082B               	movf	setBuz@time+1,w
 19000  0826  0022               	movlb	2	; select bank2
 19001  0827  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19002  0828  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19003  0829  0020               	movlb	0	; select bank0
 19004  082A  082A               	movf	setBuz@time,w
 19005  082B  0022               	movlb	2	; select bank2
 19006  082C  01A6               	clrf	(_Buz1^(0+256)+6)
 19007  082D  07A6               	addwf	(_Buz1^(0+256)+6),f
 19008                           
 19009                           ;Buzzer_B1.c: 30: RB3 = 1;
 19010  082E  0020               	movlb	0	; select bank0
 19011  082F  158D               	bsf	13,3	;volatile
 19012                           
 19013                           ;Buzzer_B1.c: 31: } else {
 19014  0830  0008               	return
 19015  0831                     l98:	
 19016                           
 19017                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 19018  0831  19A0               	btfsc	_Buz1^(0+256),3
 19019  0832  2845               	goto	l100
 19020                           
 19021                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 19022  0833  15A0               	bsf	_Buz1^(0+256),3
 19023                           
 19024                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 19025  0834  0020               	movlb	0	; select bank0
 19026  0835  082D               	movf	setBuz@count,w
 19027  0836  00AC               	movwf	??_setBuz
 19028  0837  082C               	movf	??_setBuz,w
 19029  0838  0022               	movlb	2	; select bank2
 19030  0839  00A4               	movwf	(_Buz1^(0+256)+4)
 19031                           
 19032                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 19033  083A  0020               	movlb	0	; select bank0
 19034  083B  082B               	movf	setBuz@time+1,w
 19035  083C  0022               	movlb	2	; select bank2
 19036  083D  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 19037  083E  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 19038  083F  0020               	movlb	0	; select bank0
 19039  0840  082A               	movf	setBuz@time,w
 19040  0841  0022               	movlb	2	; select bank2
 19041  0842  01A8               	clrf	(_Buz1^(0+256)+8)
 19042  0843  07A8               	addwf	(_Buz1^(0+256)+8),f
 19043                           
 19044                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 19045  0844  0008               	return
 19046  0845                     l100:	
 19047  0845  1A20               	btfsc	_Buz1^(0+256),4
 19048  0846  0008               	return
 19049                           
 19050                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 19051  0847  1620               	bsf	_Buz1^(0+256),4
 19052                           
 19053                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 19054  0848  0020               	movlb	0	; select bank0
 19055  0849  082D               	movf	setBuz@count,w
 19056  084A  00AC               	movwf	??_setBuz
 19057  084B  082C               	movf	??_setBuz,w
 19058  084C  0022               	movlb	2	; select bank2
 19059  084D  00A5               	movwf	(_Buz1^(0+256)+5)
 19060                           
 19061                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 19062  084E  0020               	movlb	0	; select bank0
 19063  084F  082B               	movf	setBuz@time+1,w
 19064  0850  0022               	movlb	2	; select bank2
 19065  0851  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 19066  0852  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 19067  0853  0020               	movlb	0	; select bank0
 19068  0854  082A               	movf	setBuz@time,w
 19069  0855  0022               	movlb	2	; select bank2
 19070  0856  01AA               	clrf	(_Buz1^(0+256)+10)
 19071  0857  07AA               	addwf	(_Buz1^(0+256)+10),f
 19072  0858  0008               	return
 19073  0859                     __end_of_setBuz:	
 19074                           
 19075                           	psect	text129
 19076  1355                     __ptext129:	
 19077 ;; *************** function ___awdiv *****************
 19078 ;; Defined at:
 19079 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19080 ;; Parameters:    Size  Location     Type
 19081 ;;  divisor         2    1[BANK0 ] int 
 19082 ;;  dividend        2    3[BANK0 ] int 
 19083 ;; Auto vars:     Size  Location     Type
 19084 ;;  quotient        2    8[BANK0 ] int 
 19085 ;;  sign            1    7[BANK0 ] unsigned char 
 19086 ;;  counter         1    6[BANK0 ] unsigned char 
 19087 ;; Return value:  Size  Location     Type
 19088 ;;                  2    1[BANK0 ] int 
 19089 ;; Registers used:
 19090 ;;		wreg, status,2, status,0
 19091 ;; Tracked objects:
 19092 ;;		On entry : 0/0
 19093 ;;		On exit  : 0/0
 19094 ;;		Unchanged: 0/0
 19095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19097 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19099 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19100 ;;Total ram usage:        9 bytes
 19101 ;; Hardware stack levels used:    1
 19102 ;; Hardware stack levels required when called:    5
 19103 ;; This function calls:
 19104 ;;		Nothing
 19105 ;; This function is called by:
 19106 ;;		_setBuz
 19107 ;; This function uses a non-reentrant model
 19108 ;;
 19109                           
 19110                           
 19111                           ;psect for function ___awdiv
 19112  1355                     ___awdiv:	
 19113                           
 19114                           ;incstack = 0
 19115                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19116  1355  0020               	movlb	0	; select bank0
 19117  1356  01A7               	clrf	___awdiv@sign
 19118  1357  1FA2               	btfss	___awdiv@divisor+1,7
 19119  1358  2B60               	goto	l9236
 19120  1359  09A1               	comf	___awdiv@divisor,f
 19121  135A  09A2               	comf	___awdiv@divisor+1,f
 19122  135B  0AA1               	incf	___awdiv@divisor,f
 19123  135C  1903               	skipnz
 19124  135D  0AA2               	incf	___awdiv@divisor+1,f
 19125  135E  01A7               	clrf	___awdiv@sign
 19126  135F  0AA7               	incf	___awdiv@sign,f
 19127  1360                     l9236:	
 19128  1360  1FA4               	btfss	___awdiv@dividend+1,7
 19129  1361  2B6B               	goto	l9242
 19130  1362  09A3               	comf	___awdiv@dividend,f
 19131  1363  09A4               	comf	___awdiv@dividend+1,f
 19132  1364  0AA3               	incf	___awdiv@dividend,f
 19133  1365  1903               	skipnz
 19134  1366  0AA4               	incf	___awdiv@dividend+1,f
 19135  1367  3001               	movlw	1
 19136  1368  00A5               	movwf	??___awdiv
 19137  1369  0825               	movf	??___awdiv,w
 19138  136A  06A7               	xorwf	___awdiv@sign,f
 19139  136B                     l9242:	
 19140  136B  01A8               	clrf	___awdiv@quotient
 19141  136C  01A9               	clrf	___awdiv@quotient+1
 19142  136D  0822               	movf	___awdiv@divisor+1,w
 19143  136E  0421               	iorwf	___awdiv@divisor,w
 19144  136F  1903               	skipnz
 19145  1370  2B9A               	goto	l9264
 19146  1371  01A6               	clrf	___awdiv@counter
 19147  1372  0AA6               	incf	___awdiv@counter,f
 19148  1373                     l9252:	
 19149  1373  1BA2               	btfsc	___awdiv@divisor+1,7
 19150  1374  2B7F               	goto	l9254
 19151  1375  3001               	movlw	1
 19152  1376                     u10335:	
 19153  1376  35A1               	lslf	___awdiv@divisor,f
 19154  1377  0DA2               	rlf	___awdiv@divisor+1,f
 19155  1378  0B89               	decfsz	9,f
 19156  1379  2B76               	goto	u10335
 19157  137A  3001               	movlw	1
 19158  137B  00A5               	movwf	??___awdiv
 19159  137C  0825               	movf	??___awdiv,w
 19160  137D  07A6               	addwf	___awdiv@counter,f
 19161  137E  2B73               	goto	l9252
 19162  137F                     l9254:	
 19163  137F  3001               	movlw	1
 19164  1380                     u10355:	
 19165  1380  35A8               	lslf	___awdiv@quotient,f
 19166  1381  0DA9               	rlf	___awdiv@quotient+1,f
 19167  1382  0B89               	decfsz	9,f
 19168  1383  2B80               	goto	u10355
 19169  1384  0822               	movf	___awdiv@divisor+1,w
 19170  1385  0224               	subwf	___awdiv@dividend+1,w
 19171  1386  1D03               	skipz
 19172  1387  2B8A               	goto	u10365
 19173  1388  0821               	movf	___awdiv@divisor,w
 19174  1389  0223               	subwf	___awdiv@dividend,w
 19175  138A                     u10365:	
 19176  138A  1C03               	skipc
 19177  138B  2B91               	goto	l9260
 19178  138C  0821               	movf	___awdiv@divisor,w
 19179  138D  02A3               	subwf	___awdiv@dividend,f
 19180  138E  0822               	movf	___awdiv@divisor+1,w
 19181  138F  3BA4               	subwfb	___awdiv@dividend+1,f
 19182  1390  1428               	bsf	___awdiv@quotient,0
 19183  1391                     l9260:	
 19184  1391  3001               	movlw	1
 19185  1392                     u10375:	
 19186  1392  36A2               	lsrf	___awdiv@divisor+1,f
 19187  1393  0CA1               	rrf	___awdiv@divisor,f
 19188  1394  0B89               	decfsz	9,f
 19189  1395  2B92               	goto	u10375
 19190  1396  3001               	movlw	1
 19191  1397  02A6               	subwf	___awdiv@counter,f
 19192  1398  1D03               	btfss	3,2
 19193  1399  2B7F               	goto	l9254
 19194  139A                     l9264:	
 19195  139A  0827               	movf	___awdiv@sign,w
 19196  139B  1903               	btfsc	3,2
 19197  139C  2BA2               	goto	l9268
 19198  139D  09A8               	comf	___awdiv@quotient,f
 19199  139E  09A9               	comf	___awdiv@quotient+1,f
 19200  139F  0AA8               	incf	___awdiv@quotient,f
 19201  13A0  1903               	skipnz
 19202  13A1  0AA9               	incf	___awdiv@quotient+1,f
 19203  13A2                     l9268:	
 19204  13A2  0829               	movf	___awdiv@quotient+1,w
 19205  13A3  01A2               	clrf	?___awdiv+1
 19206  13A4  07A2               	addwf	?___awdiv+1,f
 19207  13A5  0828               	movf	___awdiv@quotient,w
 19208  13A6  01A1               	clrf	?___awdiv
 19209  13A7  07A1               	addwf	?___awdiv,f
 19210  13A8  0008               	return
 19211  13A9                     __end_of___awdiv:	
 19212                           
 19213                           	psect	text130
 19214  107E                     __ptext130:	
 19215 ;; *************** function _setDimmerLights_SwOff *****************
 19216 ;; Defined at:
 19217 ;;		line 729 in file "../src/Dimmer_B1.c"
 19218 ;; Parameters:    Size  Location     Type
 19219 ;;  sw              1    wreg     unsigned char 
 19220 ;; Auto vars:     Size  Location     Type
 19221 ;;  sw              1    3[BANK0 ] unsigned char 
 19222 ;; Return value:  Size  Location     Type
 19223 ;;		None               void
 19224 ;; Registers used:
 19225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19226 ;; Tracked objects:
 19227 ;;		On entry : 0/0
 19228 ;;		On exit  : 0/0
 19229 ;;		Unchanged: 0/0
 19230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19234 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19235 ;;Total ram usage:        1 bytes
 19236 ;; Hardware stack levels used:    1
 19237 ;; Hardware stack levels required when called:    6
 19238 ;; This function calls:
 19239 ;;		_DimmerLights_SelectPointer
 19240 ;; This function is called by:
 19241 ;;		_DlyOff_Main
 19242 ;;		_setControl_Lights_Table
 19243 ;;		_setRFSW_Control
 19244 ;;		_setRFSW_AdjControl
 19245 ;;		_setSw_Main
 19246 ;;		_Exception_Main
 19247 ;; This function uses a non-reentrant model
 19248 ;;
 19249                           
 19250                           
 19251                           ;psect for function _setDimmerLights_SwOff
 19252  107E                     _setDimmerLights_SwOff:	
 19253                           
 19254                           ;incstack = 0
 19255                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19256                           ;setDimmerLights_SwOff@sw stored from wreg
 19257  107E  0020               	movlb	0	; select bank0
 19258  107F  00A3               	movwf	setDimmerLights_SwOff@sw
 19259                           
 19260                           ;Dimmer_B1.c: 730: DimmerLights_SelectPointer(sw);
 19261  1080  0823               	movf	setDimmerLights_SwOff@sw,w
 19262  1081  319B  23A5  3190   	fcall	_DimmerLights_SelectPointer
 19263                           
 19264                           ;Dimmer_B1.c: 732: if (DimmerLights->SwFlag == 1) {
 19265  1084  0021               	movlb	1	; select bank1
 19266  1085  0855               	movf	_DimmerLights^(0+128),w
 19267  1086  0086               	movwf	6
 19268  1087  3001               	movlw	1	; select bank2/3
 19269  1088  0087               	movwf	7
 19270  1089  1C01               	btfss	1,0
 19271  108A  0008               	return
 19272                           
 19273                           ;Dimmer_B1.c: 733: DimmerLights->SwFlag = 0;
 19274  108B  0855               	movf	_DimmerLights^(0+128),w
 19275  108C  0086               	movwf	6
 19276  108D  3001               	movlw	1	; select bank2/3
 19277  108E  0087               	movwf	7
 19278  108F  1001               	bcf	1,0
 19279                           
 19280                           ;Dimmer_B1.c: 734: if (DimmerLights->Status == 1) {
 19281  1090  0A55               	incf	_DimmerLights^(0+128),w
 19282  1091  0086               	movwf	6
 19283  1092  3001               	movlw	1	; select bank2/3
 19284  1093  0087               	movwf	7
 19285  1094  1C01               	btfss	1,0
 19286  1095  28AC               	goto	l6746
 19287                           
 19288                           ;Dimmer_B1.c: 735: if (DimmerLights->DimmingSwFlag == 1) {
 19289  1096  0855               	movf	_DimmerLights^(0+128),w
 19290  1097  0086               	movwf	6
 19291  1098  3001               	movlw	1	; select bank2/3
 19292  1099  0087               	movwf	7
 19293  109A  1D81               	btfss	1,3
 19294  109B  0008               	return
 19295                           
 19296                           ;Dimmer_B1.c: 736: DimmerLights->DimmingSwFlag = 0;
 19297  109C  0855               	movf	_DimmerLights^(0+128),w
 19298  109D  0086               	movwf	6
 19299  109E  3001               	movlw	1	; select bank2/3
 19300  109F  0087               	movwf	7
 19301  10A0  1181               	bcf	1,3
 19302                           
 19303                           ;Dimmer_B1.c: 738: DimmerLights->DimmingTrigger = 1;
 19304  10A1  0855               	movf	_DimmerLights^(0+128),w
 19305  10A2  0086               	movwf	6
 19306  10A3  3001               	movlw	1	; select bank2/3
 19307  10A4  0087               	movwf	7
 19308  10A5  1601               	bsf	1,4
 19309                           
 19310                           ;Dimmer_B1.c: 739: DimmerLights->DimmingSwitch = 0;
 19311  10A6  0855               	movf	_DimmerLights^(0+128),w
 19312  10A7  0086               	movwf	6
 19313  10A8  3001               	movlw	1	; select bank2/3
 19314  10A9  0087               	movwf	7
 19315  10AA  1281               	bcf	1,5
 19316                           
 19317                           ;Dimmer_B1.c: 740: }
 19318                           ;Dimmer_B1.c: 741: } else {
 19319  10AB  0008               	return
 19320  10AC                     l6746:	
 19321                           
 19322                           ;Dimmer_B1.c: 743: DimmerLights->Trigger = 1;
 19323  10AC  0855               	movf	_DimmerLights^(0+128),w
 19324  10AD  0086               	movwf	6
 19325  10AE  3001               	movlw	1	; select bank2/3
 19326  10AF  0087               	movwf	7
 19327  10B0  1481               	bsf	1,1
 19328                           
 19329                           ;Dimmer_B1.c: 744: DimmerLights->Switch = 0;
 19330  10B1  0855               	movf	_DimmerLights^(0+128),w
 19331  10B2  0086               	movwf	6
 19332  10B3  3001               	movlw	1	; select bank2/3
 19333  10B4  0087               	movwf	7
 19334  10B5  1101               	bcf	1,2
 19335  10B6  0008               	return
 19336  10B7                     __end_of_setDimmerLights_SwOff:	
 19337                           
 19338                           	psect	text131
 19339  19EF                     __ptext131:	
 19340 ;; *************** function _getDimmerLights_Status *****************
 19341 ;; Defined at:
 19342 ;;		line 1059 in file "../src/Dimmer_B1.c"
 19343 ;; Parameters:    Size  Location     Type
 19344 ;;  lights          1    wreg     unsigned char 
 19345 ;; Auto vars:     Size  Location     Type
 19346 ;;  lights          1    3[BANK0 ] unsigned char 
 19347 ;;  status          1    4[BANK0 ] unsigned char 
 19348 ;; Return value:  Size  Location     Type
 19349 ;;                  1    wreg      unsigned char 
 19350 ;; Registers used:
 19351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19352 ;; Tracked objects:
 19353 ;;		On entry : 0/0
 19354 ;;		On exit  : 0/0
 19355 ;;		Unchanged: 0/0
 19356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19358 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19361 ;;Total ram usage:        2 bytes
 19362 ;; Hardware stack levels used:    1
 19363 ;; Hardware stack levels required when called:    6
 19364 ;; This function calls:
 19365 ;;		_DimmerLights_SelectPointer
 19366 ;; This function is called by:
 19367 ;;		_DlyOff_Main
 19368 ;;		_setControl_Lights_Table
 19369 ;;		_setRFSW_Control
 19370 ;;		_setRFSW_AdjControl
 19371 ;;		_Exception_Main
 19372 ;; This function uses a non-reentrant model
 19373 ;;
 19374                           
 19375                           
 19376                           ;psect for function _getDimmerLights_Status
 19377  19EF                     _getDimmerLights_Status:	
 19378                           
 19379                           ;incstack = 0
 19380                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19381                           ;getDimmerLights_Status@lights stored from wreg
 19382  19EF  0020               	movlb	0	; select bank0
 19383  19F0  00A3               	movwf	getDimmerLights_Status@lights
 19384                           
 19385                           ;Dimmer_B1.c: 1060: DimmerLights_SelectPointer(lights);
 19386  19F1  0823               	movf	getDimmerLights_Status@lights,w
 19387  19F2  319B  23A5         	fcall	_DimmerLights_SelectPointer
 19388                           
 19389                           ;Dimmer_B1.c: 1061: char status = DimmerLights->Status == 1 ? 1 : 0;
 19390  19F4  0021               	movlb	1	; select bank1
 19391  19F5  0A55               	incf	_DimmerLights^(0+128),w
 19392  19F6  0086               	movwf	6
 19393  19F7  3001               	movlw	1	; select bank2/3
 19394  19F8  0087               	movwf	7
 19395  19F9  3000               	movlw	0
 19396  19FA  1801               	btfsc	1,0
 19397  19FB  3001               	movlw	1
 19398  19FC  0020               	movlb	0	; select bank0
 19399  19FD  00A4               	movwf	getDimmerLights_Status@status
 19400                           
 19401                           ;Dimmer_B1.c: 1062: return status;
 19402  19FE  0824               	movf	getDimmerLights_Status@status,w
 19403  19FF  0008               	return
 19404  1A00                     __end_of_getDimmerLights_Status:	
 19405                           
 19406                           	psect	text132
 19407  1BA5                     __ptext132:	
 19408 ;; *************** function _DimmerLights_SelectPointer *****************
 19409 ;; Defined at:
 19410 ;;		line 611 in file "../src/Dimmer_B1.c"
 19411 ;; Parameters:    Size  Location     Type
 19412 ;;  lights          1    wreg     unsigned char 
 19413 ;; Auto vars:     Size  Location     Type
 19414 ;;  lights          1    2[BANK0 ] unsigned char 
 19415 ;; Return value:  Size  Location     Type
 19416 ;;		None               void
 19417 ;; Registers used:
 19418 ;;		wreg
 19419 ;; Tracked objects:
 19420 ;;		On entry : 0/0
 19421 ;;		On exit  : 0/0
 19422 ;;		Unchanged: 0/0
 19423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19427 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19428 ;;Total ram usage:        2 bytes
 19429 ;; Hardware stack levels used:    1
 19430 ;; Hardware stack levels required when called:    5
 19431 ;; This function calls:
 19432 ;;		Nothing
 19433 ;; This function is called by:
 19434 ;;		_setDimmerLights_SwOn
 19435 ;;		_setDimmerLights_SwOff
 19436 ;;		_setDimmerLights_DimmingOn
 19437 ;;		_setDimmerLights_Main
 19438 ;;		_getDimmerLights_Status
 19439 ;;		_setDimmerLights_DimmingRun
 19440 ;;		_setDimmerLights_Status
 19441 ;; This function uses a non-reentrant model
 19442 ;;
 19443                           
 19444                           
 19445                           ;psect for function _DimmerLights_SelectPointer
 19446  1BA5                     _DimmerLights_SelectPointer:	
 19447                           
 19448                           ;incstack = 0
 19449                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19450                           ;DimmerLights_SelectPointer@lights stored from wreg
 19451  1BA5  0020               	movlb	0	; select bank0
 19452  1BA6  00A2               	movwf	DimmerLights_SelectPointer@lights
 19453                           
 19454                           ;Dimmer_B1.c: 613: if (lights == 1) {
 19455  1BA7  0822               	movf	DimmerLights_SelectPointer@lights,w
 19456  1BA8  3A01               	xorlw	1
 19457  1BA9  1D03               	skipz
 19458  1BAA  2BB1               	goto	l6418
 19459                           
 19460                           ;Dimmer_B1.c: 614: DimmerLights = &DimmerLights1;
 19461  1BAB  3068               	movlw	_DimmerLights1& (0+255)
 19462  1BAC  00A1               	movwf	??_DimmerLights_SelectPointer
 19463  1BAD  0821               	movf	??_DimmerLights_SelectPointer,w
 19464  1BAE  0021               	movlb	1	; select bank1
 19465  1BAF  00D5               	movwf	_DimmerLights^(0+128)
 19466                           
 19467                           ;Dimmer_B1.c: 615: }
 19468  1BB0  0008               	return
 19469  1BB1                     l6418:	
 19470                           
 19471                           ;Dimmer_B1.c: 618: else if (lights == 2) {
 19472  1BB1  0020               	movlb	0	; select bank0
 19473  1BB2  0822               	movf	DimmerLights_SelectPointer@lights,w
 19474  1BB3  3A02               	xorlw	2
 19475  1BB4  1D03               	skipz
 19476  1BB5  0008               	return
 19477                           
 19478                           ;Dimmer_B1.c: 619: DimmerLights = &DimmerLights2;
 19479  1BB6  30D0               	movlw	_DimmerLights2& (0+255)
 19480  1BB7  00A1               	movwf	??_DimmerLights_SelectPointer
 19481  1BB8  0821               	movf	??_DimmerLights_SelectPointer,w
 19482  1BB9  0021               	movlb	1	; select bank1
 19483  1BBA  00D5               	movwf	_DimmerLights^(0+128)
 19484  1BBB  0008               	return
 19485  1BBC                     __end_of_DimmerLights_SelectPointer:	
 19486                           
 19487                           	psect	text133
 19488  18F1                     __ptext133:	
 19489 ;; *************** function _DelayOff_Initialization *****************
 19490 ;; Defined at:
 19491 ;;		line 26 in file "../src/DelayOff_B1.c"
 19492 ;; Parameters:    Size  Location     Type
 19493 ;;		None
 19494 ;; Auto vars:     Size  Location     Type
 19495 ;;		None
 19496 ;; Return value:  Size  Location     Type
 19497 ;;		None               void
 19498 ;; Registers used:
 19499 ;;		wreg, status,2, status,0, pclath, cstack
 19500 ;; Tracked objects:
 19501 ;;		On entry : 0/0
 19502 ;;		On exit  : 0/0
 19503 ;;		Unchanged: 0/0
 19504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19509 ;;Total ram usage:        0 bytes
 19510 ;; Hardware stack levels used:    1
 19511 ;; Hardware stack levels required when called:    7
 19512 ;; This function calls:
 19513 ;;		_DlyOff_Initialization
 19514 ;; This function is called by:
 19515 ;;		_main
 19516 ;; This function uses a non-reentrant model
 19517 ;;
 19518                           
 19519                           
 19520                           ;psect for function _DelayOff_Initialization
 19521  18F1                     _DelayOff_Initialization:	
 19522                           
 19523                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19524                           
 19525                           ;incstack = 0
 19526                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19527  18F1  3001               	movlw	1
 19528  18F2  3198  20D8  3198   	fcall	_DlyOff_Initialization
 19529                           
 19530                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 19531  18F5  3002               	movlw	2
 19532  18F6  3198  20D8         	fcall	_DlyOff_Initialization
 19533  18F8  0008               	return
 19534  18F9                     __end_of_DelayOff_Initialization:	
 19535                           
 19536                           	psect	text134
 19537  18D8                     __ptext134:	
 19538 ;; *************** function _DlyOff_Initialization *****************
 19539 ;; Defined at:
 19540 ;;		line 56 in file "../src/DelayOff_B1.c"
 19541 ;; Parameters:    Size  Location     Type
 19542 ;;  sw              1    wreg     unsigned char 
 19543 ;; Auto vars:     Size  Location     Type
 19544 ;;  sw              1    3[BANK0 ] unsigned char 
 19545 ;; Return value:  Size  Location     Type
 19546 ;;		None               void
 19547 ;; Registers used:
 19548 ;;		wreg, status,2, status,0, pclath, cstack
 19549 ;; Tracked objects:
 19550 ;;		On entry : 0/0
 19551 ;;		On exit  : 0/0
 19552 ;;		Unchanged: 0/0
 19553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19558 ;;Total ram usage:        1 bytes
 19559 ;; Hardware stack levels used:    1
 19560 ;; Hardware stack levels required when called:    6
 19561 ;; This function calls:
 19562 ;;		_DelayOffPointSelect
 19563 ;; This function is called by:
 19564 ;;		_DelayOff_Initialization
 19565 ;; This function uses a non-reentrant model
 19566 ;;
 19567                           
 19568                           
 19569                           ;psect for function _DlyOff_Initialization
 19570  18D8                     _DlyOff_Initialization:	
 19571                           
 19572                           ;incstack = 0
 19573                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19574                           ;DlyOff_Initialization@sw stored from wreg
 19575  18D8  0020               	movlb	0	; select bank0
 19576  18D9  00A3               	movwf	DlyOff_Initialization@sw
 19577                           
 19578                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19579  18DA  0823               	movf	DlyOff_Initialization@sw,w
 19580  18DB  319B  238E         	fcall	_DelayOffPointSelect
 19581  18DD  0008               	return
 19582  18DE                     __end_of_DlyOff_Initialization:	
 19583                           
 19584                           	psect	text135
 19585  1B8E                     __ptext135:	
 19586 ;; *************** function _DelayOffPointSelect *****************
 19587 ;; Defined at:
 19588 ;;		line 7 in file "../src/DelayOff_B1.c"
 19589 ;; Parameters:    Size  Location     Type
 19590 ;;  sw              1    wreg     unsigned char 
 19591 ;; Auto vars:     Size  Location     Type
 19592 ;;  sw              1    2[BANK0 ] unsigned char 
 19593 ;; Return value:  Size  Location     Type
 19594 ;;		None               void
 19595 ;; Registers used:
 19596 ;;		wreg
 19597 ;; Tracked objects:
 19598 ;;		On entry : 0/0
 19599 ;;		On exit  : 0/0
 19600 ;;		Unchanged: 0/0
 19601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19606 ;;Total ram usage:        2 bytes
 19607 ;; Hardware stack levels used:    1
 19608 ;; Hardware stack levels required when called:    5
 19609 ;; This function calls:
 19610 ;;		Nothing
 19611 ;; This function is called by:
 19612 ;;		_DlyOff_Initialization
 19613 ;;		_DlyOff_Main
 19614 ;;		_setDelayOff_GO
 19615 ;;		_getDelayOff_GO
 19616 ;; This function uses a non-reentrant model
 19617 ;;
 19618                           
 19619                           
 19620                           ;psect for function _DelayOffPointSelect
 19621  1B8E                     _DelayOffPointSelect:	
 19622                           
 19623                           ;incstack = 0
 19624                           ; Regs used in _DelayOffPointSelect: [wreg]
 19625                           ;DelayOffPointSelect@sw stored from wreg
 19626  1B8E  0020               	movlb	0	; select bank0
 19627  1B8F  00A2               	movwf	DelayOffPointSelect@sw
 19628                           
 19629                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19630  1B90  0822               	movf	DelayOffPointSelect@sw,w
 19631  1B91  3A01               	xorlw	1
 19632  1B92  1D03               	skipz
 19633  1B93  2B9A               	goto	l6408
 19634                           
 19635                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19636  1B94  30D8               	movlw	_DlySw1& (0+255)
 19637  1B95  00A1               	movwf	??_DelayOffPointSelect
 19638  1B96  0821               	movf	??_DelayOffPointSelect,w
 19639  1B97  0021               	movlb	1	; select bank1
 19640  1B98  00D4               	movwf	_DelayOff^(0+128)
 19641                           
 19642                           ;DelayOff_B1.c: 11: }
 19643  1B99  0008               	return
 19644  1B9A                     l6408:	
 19645                           
 19646                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19647  1B9A  0020               	movlb	0	; select bank0
 19648  1B9B  0822               	movf	DelayOffPointSelect@sw,w
 19649  1B9C  3A02               	xorlw	2
 19650  1B9D  1D03               	skipz
 19651  1B9E  0008               	return
 19652                           
 19653                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19654  1B9F  30DD               	movlw	_DlySw2& (0+255)
 19655  1BA0  00A1               	movwf	??_DelayOffPointSelect
 19656  1BA1  0821               	movf	??_DelayOffPointSelect,w
 19657  1BA2  0021               	movlb	1	; select bank1
 19658  1BA3  00D4               	movwf	_DelayOff^(0+128)
 19659  1BA4  0008               	return
 19660  1BA5                     __end_of_DelayOffPointSelect:	
 19661                           
 19662                           	psect	text136
 19663  12B8                     __ptext136:	
 19664 ;; *************** function _Buzzer_Main *****************
 19665 ;; Defined at:
 19666 ;;		line 46 in file "../src/Buzzer_B1.c"
 19667 ;; Parameters:    Size  Location     Type
 19668 ;;		None
 19669 ;; Auto vars:     Size  Location     Type
 19670 ;;		None
 19671 ;; Return value:  Size  Location     Type
 19672 ;;		None               void
 19673 ;; Registers used:
 19674 ;;		wreg, status,2, status,0
 19675 ;; Tracked objects:
 19676 ;;		On entry : 0/0
 19677 ;;		On exit  : 0/0
 19678 ;;		Unchanged: 0/0
 19679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19683 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19684 ;;Total ram usage:        1 bytes
 19685 ;; Hardware stack levels used:    1
 19686 ;; Hardware stack levels required when called:    5
 19687 ;; This function calls:
 19688 ;;		Nothing
 19689 ;; This function is called by:
 19690 ;;		_main
 19691 ;; This function uses a non-reentrant model
 19692 ;;
 19693                           
 19694                           
 19695                           ;psect for function _Buzzer_Main
 19696  12B8                     _Buzzer_Main:	
 19697                           
 19698                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19699                           
 19700                           ;incstack = 0
 19701                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19702  12B8  0022               	movlb	2	; select bank2
 19703  12B9  1CA0               	btfss	_Buz1^(0+256),1
 19704  12BA  0008               	return
 19705                           
 19706                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19707  12BB  3001               	movlw	1
 19708  12BC  07A1               	addwf	(_Buz1^(0+256)+1),f
 19709  12BD  3000               	movlw	0
 19710  12BE  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19711                           
 19712                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19713  12BF  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19714  12C0  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19715  12C1  1D03               	skipz
 19716  12C2  2AC5               	goto	u9125
 19717  12C3  0826               	movf	(_Buz1^(0+256)+6),w
 19718  12C4  0221               	subwf	(_Buz1^(0+256)+1),w
 19719  12C5                     u9125:	
 19720  12C5  1C03               	skipc
 19721  12C6  0008               	return
 19722                           
 19723                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19724  12C7  01A1               	clrf	(_Buz1^(0+256)+1)
 19725  12C8  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19726                           
 19727                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19728  12C9  12A0               	bcf	_Buz1^(0+256),5
 19729  12CA  0020               	movlb	0	; select bank0
 19730  12CB  1D8D               	btfss	13,3	;volatile
 19731  12CC  2ACF               	goto	l8548
 19732  12CD  0022               	movlb	2	; select bank2
 19733  12CE  16A0               	bsf	_Buz1^(0+256),5
 19734  12CF                     l8548:	
 19735                           
 19736                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19737  12CF  0022               	movlb	2	; select bank2
 19738  12D0  1AA0               	btfsc	_Buz1^(0+256),5
 19739  12D1  2AFB               	goto	l108
 19740                           
 19741                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19742  12D2  08A3               	movf	(_Buz1^(0+256)+3),f
 19743  12D3  1D03               	skipz
 19744  12D4  2AF7               	goto	l109
 19745                           
 19746                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19747  12D5  1DA0               	btfss	_Buz1^(0+256),3
 19748  12D6  2AE5               	goto	l110
 19749                           
 19750                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19751  12D7  11A0               	bcf	_Buz1^(0+256),3
 19752                           
 19753                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19754  12D8  0824               	movf	(_Buz1^(0+256)+4),w
 19755  12D9  0020               	movlb	0	; select bank0
 19756  12DA  00A1               	movwf	??_Buzzer_Main
 19757  12DB  0821               	movf	??_Buzzer_Main,w
 19758  12DC  0022               	movlb	2	; select bank2
 19759  12DD  00A3               	movwf	(_Buz1^(0+256)+3)
 19760                           
 19761                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19762  12DE  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19763  12DF  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19764  12E0  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19765  12E1  0828               	movf	(_Buz1^(0+256)+8),w
 19766  12E2  01A6               	clrf	(_Buz1^(0+256)+6)
 19767  12E3  07A6               	addwf	(_Buz1^(0+256)+6),f
 19768                           
 19769                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19770  12E4  0008               	return
 19771  12E5                     l110:	
 19772  12E5  1E20               	btfss	_Buz1^(0+256),4
 19773  12E6  2AF5               	goto	l112
 19774                           
 19775                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19776  12E7  1220               	bcf	_Buz1^(0+256),4
 19777                           
 19778                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19779  12E8  0825               	movf	(_Buz1^(0+256)+5),w
 19780  12E9  0020               	movlb	0	; select bank0
 19781  12EA  00A1               	movwf	??_Buzzer_Main
 19782  12EB  0821               	movf	??_Buzzer_Main,w
 19783  12EC  0022               	movlb	2	; select bank2
 19784  12ED  00A3               	movwf	(_Buz1^(0+256)+3)
 19785                           
 19786                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19787  12EE  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19788  12EF  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19789  12F0  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19790  12F1  082A               	movf	(_Buz1^(0+256)+10),w
 19791  12F2  01A6               	clrf	(_Buz1^(0+256)+6)
 19792  12F3  07A6               	addwf	(_Buz1^(0+256)+6),f
 19793                           
 19794                           ;Buzzer_B1.c: 62: } else {
 19795  12F4  0008               	return
 19796  12F5                     l112:	
 19797                           
 19798                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19799  12F5  10A0               	bcf	_Buz1^(0+256),1
 19800                           
 19801                           ;Buzzer_B1.c: 64: }
 19802                           ;Buzzer_B1.c: 65: } else {
 19803  12F6  0008               	return
 19804  12F7                     l109:	
 19805                           
 19806                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19807  12F7  16A0               	bsf	_Buz1^(0+256),5
 19808                           
 19809                           ;Buzzer_B1.c: 68: RB3 = 1;
 19810  12F8  0020               	movlb	0	; select bank0
 19811  12F9  158D               	bsf	13,3	;volatile
 19812                           
 19813                           ;Buzzer_B1.c: 69: }
 19814                           ;Buzzer_B1.c: 70: } else {
 19815  12FA  0008               	return
 19816  12FB                     l108:	
 19817                           
 19818                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19819  12FB  12A0               	bcf	_Buz1^(0+256),5
 19820                           
 19821                           ;Buzzer_B1.c: 73: RB3 = 0;
 19822  12FC  0020               	movlb	0	; select bank0
 19823  12FD  118D               	bcf	13,3	;volatile
 19824                           
 19825                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19826  12FE  3001               	movlw	1
 19827  12FF  0022               	movlb	2	; select bank2
 19828  1300  02A3               	subwf	(_Buz1^(0+256)+3),f
 19829  1301  0008               	return
 19830  1302                     __end_of_Buzzer_Main:	
 19831                           
 19832                           	psect	text137
 19833  18AD                     __ptext137:	
 19834 ;; *************** function _Buzzer_Initialization *****************
 19835 ;; Defined at:
 19836 ;;		line 11 in file "../src/Buzzer_B1.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;		None
 19839 ;; Auto vars:     Size  Location     Type
 19840 ;;		None
 19841 ;; Return value:  Size  Location     Type
 19842 ;;		None               void
 19843 ;; Registers used:
 19844 ;;		None
 19845 ;; Tracked objects:
 19846 ;;		On entry : 0/0
 19847 ;;		On exit  : 0/0
 19848 ;;		Unchanged: 0/0
 19849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19854 ;;Total ram usage:        0 bytes
 19855 ;; Hardware stack levels used:    1
 19856 ;; Hardware stack levels required when called:    5
 19857 ;; This function calls:
 19858 ;;		Nothing
 19859 ;; This function is called by:
 19860 ;;		_main
 19861 ;; This function uses a non-reentrant model
 19862 ;;
 19863                           
 19864                           
 19865                           ;psect for function _Buzzer_Initialization
 19866  18AD                     _Buzzer_Initialization:	
 19867                           
 19868                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19869                           
 19870                           ;incstack = 0
 19871                           ; Regs used in _Buzzer_Initialization: []
 19872  18AD  0022               	movlb	2	; select bank2
 19873  18AE  1420               	bsf	_Buz1^(0+256),0
 19874  18AF  0008               	return
 19875  18B0                     __end_of_Buzzer_Initialization:	
 19876                           
 19877                           	psect	intentry
 19878  0004                     __pintentry:	
 19879 ;; *************** function _ISR *****************
 19880 ;; Defined at:
 19881 ;;		line 116 in file "../src/MCU_B1.c"
 19882 ;; Parameters:    Size  Location     Type
 19883 ;;		None
 19884 ;; Auto vars:     Size  Location     Type
 19885 ;;		None
 19886 ;; Return value:  Size  Location     Type
 19887 ;;		None               void
 19888 ;; Registers used:
 19889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19890 ;; Tracked objects:
 19891 ;;		On entry : 0/0
 19892 ;;		On exit  : 0/0
 19893 ;;		Unchanged: 0/0
 19894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19898 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19899 ;;Total ram usage:        1 bytes
 19900 ;; Hardware stack levels used:    1
 19901 ;; Hardware stack levels required when called:    4
 19902 ;; This function calls:
 19903 ;;		_IOC_ISR
 19904 ;;		_TMR1_ISR
 19905 ;; This function is called by:
 19906 ;;		Interrupt level 1
 19907 ;; This function uses a non-reentrant model
 19908 ;;
 19909                           
 19910  0004                     _ISR:	
 19911                           
 19912                           ;incstack = 0
 19913                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19914  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19915  0005  3180               	pagesel	$
 19916  0006  0020               	movlb	0	; select bank0
 19917  0007  087F               	movf	127,w
 19918  0008  00A0               	movwf	??_ISR
 19919                           
 19920                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19921  0009  0021               	movlb	1	; select bank1
 19922  000A  1C11               	btfss	17,0	;volatile
 19923  000B  2813               	goto	i1l1400
 19924  000C  0020               	movlb	0	; select bank0
 19925  000D  1C11               	btfss	17,0	;volatile
 19926  000E  2813               	goto	i1l1400
 19927                           
 19928                           ;MCU_B1.c: 126: TMR1_ISR();
 19929  000F  319E  2611  3180   	fcall	_TMR1_ISR
 19930                           
 19931                           ;MCU_B1.c: 127: }
 19932  0012  281B               	goto	i1l1403
 19933  0013                     i1l1400:	
 19934                           
 19935                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19936  0013  198B               	btfsc	11,3	;volatile
 19937  0014  1C0B               	btfss	11,0	;volatile
 19938  0015  281B               	goto	i1l1403
 19939  0016  0027               	movlb	7	; select bank7
 19940  0017  1D16               	btfss	22,2	;volatile
 19941  0018  281B               	goto	i1l1403
 19942                           
 19943                           ;MCU_B1.c: 139: IOC_ISR();
 19944  0019  3199  2167         	fcall	_IOC_ISR
 19945  001B                     i1l1403:	
 19946                           ;MCU_B1.c: 140: }
 19947                           ;MCU_B1.c: 148: return;
 19948                           
 19949  001B  0020               	movlb	0	; select bank0
 19950  001C  0820               	movf	??_ISR,w
 19951  001D  00FF               	movwf	127
 19952  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19953  001F  0009               	retfie
 19954  0020                     __end_of_ISR:	
 19955                           
 19956                           	psect	text139
 19957  1E11                     __ptext139:	
 19958 ;; *************** function _TMR1_ISR *****************
 19959 ;; Defined at:
 19960 ;;		line 236 in file "../src/MCU_B1.c"
 19961 ;; Parameters:    Size  Location     Type
 19962 ;;		None
 19963 ;; Auto vars:     Size  Location     Type
 19964 ;;		None
 19965 ;; Return value:  Size  Location     Type
 19966 ;;		None               void
 19967 ;; Registers used:
 19968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19969 ;; Tracked objects:
 19970 ;;		On entry : 0/0
 19971 ;;		On exit  : 0/0
 19972 ;;		Unchanged: 0/0
 19973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19978 ;;Total ram usage:        0 bytes
 19979 ;; Hardware stack levels used:    1
 19980 ;; Hardware stack levels required when called:    1
 19981 ;; This function calls:
 19982 ;;		_DimmerLights_TMR_1
 19983 ;;		_DimmerLights_TMR_2
 19984 ;; This function is called by:
 19985 ;;		_ISR
 19986 ;; This function uses a non-reentrant model
 19987 ;;
 19988                           
 19989                           
 19990                           ;psect for function _TMR1_ISR
 19991  1E11                     _TMR1_ISR:	
 19992                           
 19993                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19994                           
 19995                           ;incstack = 0
 19996                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19997  1E11  30FA               	movlw	250
 19998  1E12  0020               	movlb	0	; select bank0
 19999  1E13  0097               	movwf	23	;volatile
 20000                           
 20001                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 20002  1E14  3038               	movlw	56
 20003  1E15  0096               	movwf	22	;volatile
 20004                           
 20005                           ;MCU_B1.c: 240: TMR1IF = 0;
 20006  1E16  1011               	bcf	17,0	;volatile
 20007                           
 20008                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 20009  1E17  3189  21AC  319E   	fcall	_DimmerLights_TMR_1
 20010                           
 20011                           ;MCU_B1.c: 262: DimmerLights_TMR_2();
 20012  1E1A  318A  221F  319E   	fcall	_DimmerLights_TMR_2
 20013                           
 20014                           ;MCU_B1.c: 271: Timer1.Count++;
 20015  1E1D  3001               	movlw	1
 20016  1E1E  0022               	movlb	2	; select bank2
 20017  1E1F  07B2               	addwf	(_Timer1^(0+256)+1),f
 20018  1E20  3000               	movlw	0
 20019  1E21  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 20020                           
 20021                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 20022  1E22  3001               	movlw	1
 20023  1E23  3E31               	addlw	_Timer1& (0+255)
 20024  1E24  0086               	movwf	6
 20025  1E25  3001               	movlw	1	; select bank2/3
 20026  1E26  0087               	movwf	7
 20027  1E27  3F40               	moviw [0]fsr1
 20028  1E28  3AC8               	xorlw	200
 20029  1E29  1D03               	skipz
 20030  1E2A  2E2D               	goto	u922_25
 20031  1E2B  3F41               	moviw [1]fsr1
 20032  1E2C  3A00               	xorlw	0
 20033  1E2D                     u922_25:	
 20034  1E2D  1D03               	skipz
 20035  1E2E  0008               	return
 20036                           
 20037                           ;MCU_B1.c: 273: Timer1.Count = 0;
 20038  1E2F  01B2               	clrf	(_Timer1^(0+256)+1)
 20039  1E30  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 20040                           
 20041                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 20042  1E31  1431               	bsf	_Timer1^(0+256),0
 20043  1E32  0008               	return
 20044  1E33                     __end_of_TMR1_ISR:	
 20045                           
 20046                           	psect	text140
 20047  0A1F                     __ptext140:	
 20048 ;; *************** function _DimmerLights_TMR_2 *****************
 20049 ;; Defined at:
 20050 ;;		line 1544 in file "../src/Dimmer_B1.c"
 20051 ;; Parameters:    Size  Location     Type
 20052 ;;		None
 20053 ;; Auto vars:     Size  Location     Type
 20054 ;;		None
 20055 ;; Return value:  Size  Location     Type
 20056 ;;		None               void
 20057 ;; Registers used:
 20058 ;;		wreg, status,2, status,0
 20059 ;; Tracked objects:
 20060 ;;		On entry : 0/0
 20061 ;;		On exit  : 0/0
 20062 ;;		Unchanged: 0/0
 20063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20067 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20068 ;;Total ram usage:        1 bytes
 20069 ;; Hardware stack levels used:    1
 20070 ;; This function calls:
 20071 ;;		Nothing
 20072 ;; This function is called by:
 20073 ;;		_TMR1_ISR
 20074 ;; This function uses a non-reentrant model
 20075 ;;
 20076                           
 20077                           
 20078                           ;psect for function _DimmerLights_TMR_2
 20079  0A1F                     _DimmerLights_TMR_2:	
 20080                           
 20081                           ;Dimmer_B1.c: 1546: if (DimmerIntr2.Start == 1) {
 20082                           
 20083                           ;incstack = 0
 20084                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 20085  0A1F  0021               	movlb	1	; select bank1
 20086  0A20  1D47               	btfss	_DimmerIntr2^(0+128),2
 20087  0A21  2A4C               	goto	i1l994
 20088                           
 20089                           ;Dimmer_B1.c: 1547: DimmerIntr2.Count++;
 20090  0A22  3001               	movlw	1
 20091  0A23  00F0               	movwf	??_DimmerLights_TMR_2
 20092  0A24  0870               	movf	??_DimmerLights_TMR_2,w
 20093  0A25  07C9               	addwf	(_DimmerIntr2^(0+128)+2),f
 20094                           
 20095                           ;Dimmer_B1.c: 1548: if (DimmerIntr2.Count >= 70) {
 20096  0A26  3046               	movlw	70
 20097  0A27  0249               	subwf	(_DimmerIntr2^(0+128)+2),w
 20098  0A28  1C03               	skipc
 20099  0A29  2A2C               	goto	i1l8024
 20100                           
 20101                           ;Dimmer_B1.c: 1549: DimmerIntr2.Count = 0;
 20102  0A2A  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20103                           
 20104                           ;Dimmer_B1.c: 1550: DimmerIntr2.Start = 0;
 20105  0A2B  1147               	bcf	_DimmerIntr2^(0+128),2
 20106  0A2C                     i1l8024:	
 20107                           
 20108                           ;Dimmer_B1.c: 1551: }
 20109                           ;Dimmer_B1.c: 1555: if (DimmerIntr2.Count == DimmerIntr2.TuneValue) {
 20110  0A2C  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20111  0A2D  064F               	xorwf	(_DimmerIntr2^(0+128)+8),w
 20112  0A2E  1903               	btfsc	3,2
 20113                           
 20114                           ;Dimmer_B1.c: 1558: if (DimmerIntr2.ControlStatus == 1) {
 20115  0A2F  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20116  0A30  2A33               	goto	i1l8030
 20117                           
 20118                           ;Dimmer_B1.c: 1559: RB4 = 1;
 20119  0A31  0020               	movlb	0	; select bank0
 20120  0A32  160D               	bsf	13,4	;volatile
 20121  0A33                     i1l8030:	
 20122                           
 20123                           ;Dimmer_B1.c: 1561: }
 20124                           ;Dimmer_B1.c: 1562: }
 20125                           ;Dimmer_B1.c: 1566: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 20126  0A33  0021               	movlb	1	; select bank1
 20127  0A34  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20128  0A35  0650               	xorwf	(_DimmerIntr2^(0+128)+9),w
 20129  0A36  1903               	btfsc	3,2
 20130                           
 20131                           ;Dimmer_B1.c: 1569: if (DimmerIntr2.ControlStatus == 1) {
 20132  0A37  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20133  0A38  2A3B               	goto	i1l8036
 20134                           
 20135                           ;Dimmer_B1.c: 1570: RB4 = 0;
 20136  0A39  0020               	movlb	0	; select bank0
 20137  0A3A  120D               	bcf	13,4	;volatile
 20138  0A3B                     i1l8036:	
 20139                           
 20140                           ;Dimmer_B1.c: 1571: }
 20141                           ;Dimmer_B1.c: 1572: }
 20142                           ;Dimmer_B1.c: 1576: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 20143  0A3B  0021               	movlb	1	; select bank1
 20144  0A3C  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20145  0A3D  0651               	xorwf	(_DimmerIntr2^(0+128)+10),w
 20146  0A3E  1903               	btfsc	3,2
 20147                           
 20148                           ;Dimmer_B1.c: 1579: if (DimmerIntr2.ControlStatus == 1) {
 20149  0A3F  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20150  0A40  2A43               	goto	i1l8042
 20151                           
 20152                           ;Dimmer_B1.c: 1580: RB4 = 1;
 20153  0A41  0020               	movlb	0	; select bank0
 20154  0A42  160D               	bsf	13,4	;volatile
 20155  0A43                     i1l8042:	
 20156                           
 20157                           ;Dimmer_B1.c: 1581: }
 20158                           ;Dimmer_B1.c: 1582: }
 20159                           ;Dimmer_B1.c: 1599: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 20160  0A43  0021               	movlb	1	; select bank1
 20161  0A44  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20162  0A45  0652               	xorwf	(_DimmerIntr2^(0+128)+11),w
 20163  0A46  1903               	btfsc	3,2
 20164                           
 20165                           ;Dimmer_B1.c: 1601: if (DimmerIntr2.ControlStatus == 1) {
 20166  0A47  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20167  0A48  2A59               	goto	i1l8058
 20168                           
 20169                           ;Dimmer_B1.c: 1602: RB4 = 0;
 20170  0A49  0020               	movlb	0	; select bank0
 20171  0A4A  120D               	bcf	13,4	;volatile
 20172                           
 20173                           ;Dimmer_B1.c: 1603: }
 20174                           ;Dimmer_B1.c: 1604: }
 20175                           ;Dimmer_B1.c: 1617: } else {
 20176  0A4B  2A59               	goto	i1l8058
 20177  0A4C                     i1l994:	
 20178                           
 20179                           ;Dimmer_B1.c: 1618: if (DimmerIntr2.GO == 1) {
 20180  0A4C  1C47               	btfss	_DimmerIntr2^(0+128),0
 20181  0A4D  2A59               	goto	i1l8058
 20182                           
 20183                           ;Dimmer_B1.c: 1619: DimmerIntr2.Count++;
 20184  0A4E  3001               	movlw	1
 20185  0A4F  00F0               	movwf	??_DimmerLights_TMR_2
 20186  0A50  0870               	movf	??_DimmerLights_TMR_2,w
 20187  0A51  07C9               	addwf	(_DimmerIntr2^(0+128)+2),f
 20188                           
 20189                           ;Dimmer_B1.c: 1620: if (DimmerIntr2.Count == 2) {
 20190  0A52  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20191  0A53  3A02               	xorlw	2
 20192  0A54  1D03               	skipz
 20193  0A55  2A59               	goto	i1l8058
 20194                           
 20195                           ;Dimmer_B1.c: 1621: DimmerIntr2.Count = 0;
 20196  0A56  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20197                           
 20198                           ;Dimmer_B1.c: 1622: DimmerIntr2.Start = 1;
 20199  0A57  1547               	bsf	_DimmerIntr2^(0+128),2
 20200                           
 20201                           ;Dimmer_B1.c: 1623: DimmerIntr2.GO = 0;
 20202  0A58  1047               	bcf	_DimmerIntr2^(0+128),0
 20203  0A59                     i1l8058:	
 20204                           
 20205                           ;Dimmer_B1.c: 1624: }
 20206                           ;Dimmer_B1.c: 1625: }
 20207                           ;Dimmer_B1.c: 1626: }
 20208                           ;Dimmer_B1.c: 1629: if (DimmerIntr2.Tune == 1) {
 20209  0A59  0021               	movlb	1	; select bank1
 20210  0A5A  1CC7               	btfss	_DimmerIntr2^(0+128),1
 20211  0A5B  0008               	return
 20212                           
 20213                           ;Dimmer_B1.c: 1630: DimmerIntr2.Tune = 0;
 20214  0A5C  10C7               	bcf	_DimmerIntr2^(0+128),1
 20215                           
 20216                           ;Dimmer_B1.c: 1631: DimmerIntr2.TuneTime++;
 20217  0A5D  3001               	movlw	1
 20218  0A5E  00F0               	movwf	??_DimmerLights_TMR_2
 20219  0A5F  0870               	movf	??_DimmerLights_TMR_2,w
 20220  0A60  07CA               	addwf	(_DimmerIntr2^(0+128)+3),f
 20221                           
 20222                           ;Dimmer_B1.c: 1632: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 20223  0A61  084B               	movf	(_DimmerIntr2^(0+128)+4),w
 20224  0A62  024A               	subwf	(_DimmerIntr2^(0+128)+3),w
 20225  0A63  1C03               	skipc
 20226  0A64  0008               	return
 20227                           
 20228                           ;Dimmer_B1.c: 1633: DimmerIntr2.TuneTime = 0;
 20229  0A65  01CA               	clrf	(_DimmerIntr2^(0+128)+3)
 20230                           
 20231                           ;Dimmer_B1.c: 1634: if (DimmerIntr2.Dimming_Sw == 1) {
 20232  0A66  1E47               	btfss	_DimmerIntr2^(0+128),4
 20233  0A67  2A7E               	goto	i1l1009
 20234                           
 20235                           ;Dimmer_B1.c: 1635: if (DimmerIntr2.Dimming_Status == 0) {
 20236  0A68  1AC7               	btfsc	_DimmerIntr2^(0+128),5
 20237  0A69  2A75               	goto	i1l8076
 20238                           
 20239                           ;Dimmer_B1.c: 1636: if (DimmerIntr2.DimmingValue < ((char)(55*0.7))) {
 20240  0A6A  3026               	movlw	38
 20241  0A6B  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20242  0A6C  1803               	skipnc
 20243  0A6D  2A73               	goto	i1l1011
 20244                           
 20245                           ;Dimmer_B1.c: 1637: DimmerIntr2.DimmingValue++;
 20246  0A6E  3001               	movlw	1
 20247  0A6F  00F0               	movwf	??_DimmerLights_TMR_2
 20248  0A70  0870               	movf	??_DimmerLights_TMR_2,w
 20249  0A71  07CC               	addwf	(_DimmerIntr2^(0+128)+5),f
 20250                           
 20251                           ;Dimmer_B1.c: 1638: } else {
 20252  0A72  0008               	return
 20253  0A73                     i1l1011:	
 20254                           
 20255                           ;Dimmer_B1.c: 1639: DimmerIntr2.Dimming_Status = 1;
 20256  0A73  16C7               	bsf	_DimmerIntr2^(0+128),5
 20257                           
 20258                           ;Dimmer_B1.c: 1640: }
 20259                           ;Dimmer_B1.c: 1641: } else {
 20260  0A74  0008               	return
 20261  0A75                     i1l8076:	
 20262                           
 20263                           ;Dimmer_B1.c: 1642: if (DimmerIntr2.DimmingValue > ((char)(10*0.7))) {
 20264  0A75  3008               	movlw	8
 20265  0A76  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20266  0A77  1C03               	skipc
 20267  0A78  2A7C               	goto	i1l1014
 20268                           
 20269                           ;Dimmer_B1.c: 1643: DimmerIntr2.DimmingValue--;
 20270  0A79  3001               	movlw	1
 20271  0A7A  02CC               	subwf	(_DimmerIntr2^(0+128)+5),f
 20272                           
 20273                           ;Dimmer_B1.c: 1644: } else {
 20274  0A7B  0008               	return
 20275  0A7C                     i1l1014:	
 20276                           
 20277                           ;Dimmer_B1.c: 1645: DimmerIntr2.Dimming_Status = 0;
 20278  0A7C  12C7               	bcf	_DimmerIntr2^(0+128),5
 20279                           
 20280                           ;Dimmer_B1.c: 1646: }
 20281                           ;Dimmer_B1.c: 1647: }
 20282                           ;Dimmer_B1.c: 1648: } else if (DimmerIntr2.Dimming_RF == 1) {
 20283  0A7D  0008               	return
 20284  0A7E                     i1l1009:	
 20285  0A7E  1F47               	btfss	_DimmerIntr2^(0+128),6
 20286  0A7F  0008               	return
 20287                           
 20288                           ;Dimmer_B1.c: 1649: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 20289  0A80  084D               	movf	(_DimmerIntr2^(0+128)+6),w
 20290  0A81  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20291  0A82  1803               	skipnc
 20292  0A83  2A89               	goto	i1l8084
 20293                           
 20294                           ;Dimmer_B1.c: 1650: DimmerIntr2.DimmingValue++;
 20295  0A84  3001               	movlw	1
 20296  0A85  00F0               	movwf	??_DimmerLights_TMR_2
 20297  0A86  0870               	movf	??_DimmerLights_TMR_2,w
 20298  0A87  07CC               	addwf	(_DimmerIntr2^(0+128)+5),f
 20299                           
 20300                           ;Dimmer_B1.c: 1651: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 20301  0A88  0008               	return
 20302  0A89                     i1l8084:	
 20303  0A89  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 20304  0A8A  024D               	subwf	(_DimmerIntr2^(0+128)+6),w
 20305  0A8B  1803               	skipnc
 20306  0A8C  2A90               	goto	i1l1020
 20307                           
 20308                           ;Dimmer_B1.c: 1652: DimmerIntr2.DimmingValue--;
 20309  0A8D  3001               	movlw	1
 20310  0A8E  02CC               	subwf	(_DimmerIntr2^(0+128)+5),f
 20311                           
 20312                           ;Dimmer_B1.c: 1653: } else {
 20313  0A8F  0008               	return
 20314  0A90                     i1l1020:	
 20315                           
 20316                           ;Dimmer_B1.c: 1654: DimmerIntr2.Dimming_RF = 0;
 20317  0A90  1347               	bcf	_DimmerIntr2^(0+128),6
 20318  0A91  0008               	return
 20319  0A92                     __end_of_DimmerLights_TMR_2:	
 20320                           
 20321                           	psect	text141
 20322  09AC                     __ptext141:	
 20323 ;; *************** function _DimmerLights_TMR_1 *****************
 20324 ;; Defined at:
 20325 ;;		line 1366 in file "../src/Dimmer_B1.c"
 20326 ;; Parameters:    Size  Location     Type
 20327 ;;		None
 20328 ;; Auto vars:     Size  Location     Type
 20329 ;;		None
 20330 ;; Return value:  Size  Location     Type
 20331 ;;		None               void
 20332 ;; Registers used:
 20333 ;;		wreg, status,2, status,0
 20334 ;; Tracked objects:
 20335 ;;		On entry : 0/0
 20336 ;;		On exit  : 0/0
 20337 ;;		Unchanged: 0/0
 20338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20341 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20342 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20343 ;;Total ram usage:        1 bytes
 20344 ;; Hardware stack levels used:    1
 20345 ;; This function calls:
 20346 ;;		Nothing
 20347 ;; This function is called by:
 20348 ;;		_TMR1_ISR
 20349 ;; This function uses a non-reentrant model
 20350 ;;
 20351                           
 20352                           
 20353                           ;psect for function _DimmerLights_TMR_1
 20354  09AC                     _DimmerLights_TMR_1:	
 20355                           
 20356                           ;Dimmer_B1.c: 1368: if (DimmerIntr1.Start == 1) {
 20357                           
 20358                           ;incstack = 0
 20359                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20360  09AC  0021               	movlb	1	; select bank1
 20361  09AD  1D3B               	btfss	_DimmerIntr1^(0+128),2
 20362  09AE  29D9               	goto	i1l955
 20363                           
 20364                           ;Dimmer_B1.c: 1369: DimmerIntr1.Count++;
 20365  09AF  3001               	movlw	1
 20366  09B0  00F0               	movwf	??_DimmerLights_TMR_1
 20367  09B1  0870               	movf	??_DimmerLights_TMR_1,w
 20368  09B2  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 20369                           
 20370                           ;Dimmer_B1.c: 1370: if (DimmerIntr1.Count >= 70) {
 20371  09B3  3046               	movlw	70
 20372  09B4  023D               	subwf	(_DimmerIntr1^(0+128)+2),w
 20373  09B5  1C03               	skipc
 20374  09B6  29B9               	goto	i1l7926
 20375                           
 20376                           ;Dimmer_B1.c: 1371: DimmerIntr1.Count = 0;
 20377  09B7  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20378                           
 20379                           ;Dimmer_B1.c: 1372: DimmerIntr1.Start = 0;
 20380  09B8  113B               	bcf	_DimmerIntr1^(0+128),2
 20381  09B9                     i1l7926:	
 20382                           
 20383                           ;Dimmer_B1.c: 1373: }
 20384                           ;Dimmer_B1.c: 1377: if (DimmerIntr1.Count == DimmerIntr1.TuneValue) {
 20385  09B9  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20386  09BA  0643               	xorwf	(_DimmerIntr1^(0+128)+8),w
 20387  09BB  1903               	btfsc	3,2
 20388                           
 20389                           ;Dimmer_B1.c: 1380: if (DimmerIntr1.ControlStatus == 1) {
 20390  09BC  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20391  09BD  29C0               	goto	i1l7932
 20392                           
 20393                           ;Dimmer_B1.c: 1381: RA7 = 1;
 20394  09BE  0020               	movlb	0	; select bank0
 20395  09BF  178C               	bsf	12,7	;volatile
 20396  09C0                     i1l7932:	
 20397                           
 20398                           ;Dimmer_B1.c: 1383: }
 20399                           ;Dimmer_B1.c: 1384: }
 20400                           ;Dimmer_B1.c: 1388: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20401  09C0  0021               	movlb	1	; select bank1
 20402  09C1  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20403  09C2  0644               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20404  09C3  1903               	btfsc	3,2
 20405                           
 20406                           ;Dimmer_B1.c: 1391: if (DimmerIntr1.ControlStatus == 1) {
 20407  09C4  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20408  09C5  29C8               	goto	i1l7938
 20409                           
 20410                           ;Dimmer_B1.c: 1392: RA7 = 0;
 20411  09C6  0020               	movlb	0	; select bank0
 20412  09C7  138C               	bcf	12,7	;volatile
 20413  09C8                     i1l7938:	
 20414                           
 20415                           ;Dimmer_B1.c: 1394: }
 20416                           ;Dimmer_B1.c: 1395: }
 20417                           ;Dimmer_B1.c: 1399: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20418  09C8  0021               	movlb	1	; select bank1
 20419  09C9  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20420  09CA  0645               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20421  09CB  1903               	btfsc	3,2
 20422                           
 20423                           ;Dimmer_B1.c: 1402: if (DimmerIntr1.ControlStatus == 1) {
 20424  09CC  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20425  09CD  29D0               	goto	i1l7944
 20426                           
 20427                           ;Dimmer_B1.c: 1403: RA7 = 1;
 20428  09CE  0020               	movlb	0	; select bank0
 20429  09CF  178C               	bsf	12,7	;volatile
 20430  09D0                     i1l7944:	
 20431                           
 20432                           ;Dimmer_B1.c: 1405: }
 20433                           ;Dimmer_B1.c: 1406: }
 20434                           ;Dimmer_B1.c: 1423: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20435  09D0  0021               	movlb	1	; select bank1
 20436  09D1  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20437  09D2  0646               	xorwf	(_DimmerIntr1^(0+128)+11),w
 20438  09D3  1903               	btfsc	3,2
 20439                           
 20440                           ;Dimmer_B1.c: 1425: if (DimmerIntr1.ControlStatus == 1) {
 20441  09D4  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20442  09D5  29E6               	goto	i1l7960
 20443                           
 20444                           ;Dimmer_B1.c: 1426: RA7 = 0;
 20445  09D6  0020               	movlb	0	; select bank0
 20446  09D7  138C               	bcf	12,7	;volatile
 20447                           
 20448                           ;Dimmer_B1.c: 1428: }
 20449                           ;Dimmer_B1.c: 1429: }
 20450                           ;Dimmer_B1.c: 1432: } else {
 20451  09D8  29E6               	goto	i1l7960
 20452  09D9                     i1l955:	
 20453                           
 20454                           ;Dimmer_B1.c: 1433: if (DimmerIntr1.GO == 1) {
 20455  09D9  1C3B               	btfss	_DimmerIntr1^(0+128),0
 20456  09DA  29E6               	goto	i1l7960
 20457                           
 20458                           ;Dimmer_B1.c: 1434: DimmerIntr1.Count++;
 20459  09DB  3001               	movlw	1
 20460  09DC  00F0               	movwf	??_DimmerLights_TMR_1
 20461  09DD  0870               	movf	??_DimmerLights_TMR_1,w
 20462  09DE  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 20463                           
 20464                           ;Dimmer_B1.c: 1435: if (DimmerIntr1.Count == 2) {
 20465  09DF  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20466  09E0  3A02               	xorlw	2
 20467  09E1  1D03               	skipz
 20468  09E2  29E6               	goto	i1l7960
 20469                           
 20470                           ;Dimmer_B1.c: 1436: DimmerIntr1.Count = 0;
 20471  09E3  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20472                           
 20473                           ;Dimmer_B1.c: 1437: DimmerIntr1.Start = 1;
 20474  09E4  153B               	bsf	_DimmerIntr1^(0+128),2
 20475                           
 20476                           ;Dimmer_B1.c: 1438: DimmerIntr1.GO = 0;
 20477  09E5  103B               	bcf	_DimmerIntr1^(0+128),0
 20478  09E6                     i1l7960:	
 20479                           
 20480                           ;Dimmer_B1.c: 1439: }
 20481                           ;Dimmer_B1.c: 1440: }
 20482                           ;Dimmer_B1.c: 1441: }
 20483                           ;Dimmer_B1.c: 1443: if (DimmerIntr1.Tune == 1) {
 20484  09E6  0021               	movlb	1	; select bank1
 20485  09E7  1CBB               	btfss	_DimmerIntr1^(0+128),1
 20486  09E8  0008               	return
 20487                           
 20488                           ;Dimmer_B1.c: 1444: DimmerIntr1.Tune = 0;
 20489  09E9  10BB               	bcf	_DimmerIntr1^(0+128),1
 20490                           
 20491                           ;Dimmer_B1.c: 1445: DimmerIntr1.TuneTime++;
 20492  09EA  3001               	movlw	1
 20493  09EB  00F0               	movwf	??_DimmerLights_TMR_1
 20494  09EC  0870               	movf	??_DimmerLights_TMR_1,w
 20495  09ED  07BE               	addwf	(_DimmerIntr1^(0+128)+3),f
 20496                           
 20497                           ;Dimmer_B1.c: 1446: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20498  09EE  083F               	movf	(_DimmerIntr1^(0+128)+4),w
 20499  09EF  023E               	subwf	(_DimmerIntr1^(0+128)+3),w
 20500  09F0  1C03               	skipc
 20501  09F1  0008               	return
 20502                           
 20503                           ;Dimmer_B1.c: 1447: DimmerIntr1.TuneTime = 0;
 20504  09F2  01BE               	clrf	(_DimmerIntr1^(0+128)+3)
 20505                           
 20506                           ;Dimmer_B1.c: 1448: if (DimmerIntr1.Dimming_Sw == 1) {
 20507  09F3  1E3B               	btfss	_DimmerIntr1^(0+128),4
 20508  09F4  2A0B               	goto	i1l970
 20509                           
 20510                           ;Dimmer_B1.c: 1449: if (DimmerIntr1.Dimming_Status == 0) {
 20511  09F5  1ABB               	btfsc	_DimmerIntr1^(0+128),5
 20512  09F6  2A02               	goto	i1l7978
 20513                           
 20514                           ;Dimmer_B1.c: 1450: if (DimmerIntr1.DimmingValue < ((char)(55*0.7))) {
 20515  09F7  3026               	movlw	38
 20516  09F8  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20517  09F9  1803               	skipnc
 20518  09FA  2A00               	goto	i1l972
 20519                           
 20520                           ;Dimmer_B1.c: 1451: DimmerIntr1.DimmingValue++;
 20521  09FB  3001               	movlw	1
 20522  09FC  00F0               	movwf	??_DimmerLights_TMR_1
 20523  09FD  0870               	movf	??_DimmerLights_TMR_1,w
 20524  09FE  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 20525                           
 20526                           ;Dimmer_B1.c: 1452: } else {
 20527  09FF  0008               	return
 20528  0A00                     i1l972:	
 20529                           
 20530                           ;Dimmer_B1.c: 1453: DimmerIntr1.Dimming_Status = 1;
 20531  0A00  16BB               	bsf	_DimmerIntr1^(0+128),5
 20532                           
 20533                           ;Dimmer_B1.c: 1454: }
 20534                           ;Dimmer_B1.c: 1455: } else {
 20535  0A01  0008               	return
 20536  0A02                     i1l7978:	
 20537                           
 20538                           ;Dimmer_B1.c: 1456: if (DimmerIntr1.DimmingValue > ((char)(10*0.7))) {
 20539  0A02  3008               	movlw	8
 20540  0A03  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20541  0A04  1C03               	skipc
 20542  0A05  2A09               	goto	i1l975
 20543                           
 20544                           ;Dimmer_B1.c: 1457: DimmerIntr1.DimmingValue--;
 20545  0A06  3001               	movlw	1
 20546  0A07  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 20547                           
 20548                           ;Dimmer_B1.c: 1458: } else {
 20549  0A08  0008               	return
 20550  0A09                     i1l975:	
 20551                           
 20552                           ;Dimmer_B1.c: 1459: DimmerIntr1.Dimming_Status = 0;
 20553  0A09  12BB               	bcf	_DimmerIntr1^(0+128),5
 20554                           
 20555                           ;Dimmer_B1.c: 1460: }
 20556                           ;Dimmer_B1.c: 1461: }
 20557                           ;Dimmer_B1.c: 1462: } else if (DimmerIntr1.Dimming_RF == 1) {
 20558  0A0A  0008               	return
 20559  0A0B                     i1l970:	
 20560  0A0B  1F3B               	btfss	_DimmerIntr1^(0+128),6
 20561  0A0C  0008               	return
 20562                           
 20563                           ;Dimmer_B1.c: 1463: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20564  0A0D  0841               	movf	(_DimmerIntr1^(0+128)+6),w
 20565  0A0E  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20566  0A0F  1803               	skipnc
 20567  0A10  2A16               	goto	i1l7986
 20568                           
 20569                           ;Dimmer_B1.c: 1464: DimmerIntr1.DimmingValue++;
 20570  0A11  3001               	movlw	1
 20571  0A12  00F0               	movwf	??_DimmerLights_TMR_1
 20572  0A13  0870               	movf	??_DimmerLights_TMR_1,w
 20573  0A14  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 20574                           
 20575                           ;Dimmer_B1.c: 1465: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20576  0A15  0008               	return
 20577  0A16                     i1l7986:	
 20578  0A16  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 20579  0A17  0241               	subwf	(_DimmerIntr1^(0+128)+6),w
 20580  0A18  1803               	skipnc
 20581  0A19  2A1D               	goto	i1l981
 20582                           
 20583                           ;Dimmer_B1.c: 1466: DimmerIntr1.DimmingValue--;
 20584  0A1A  3001               	movlw	1
 20585  0A1B  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 20586                           
 20587                           ;Dimmer_B1.c: 1467: } else {
 20588  0A1C  0008               	return
 20589  0A1D                     i1l981:	
 20590                           
 20591                           ;Dimmer_B1.c: 1468: DimmerIntr1.Dimming_RF = 0;
 20592  0A1D  133B               	bcf	_DimmerIntr1^(0+128),6
 20593  0A1E  0008               	return
 20594  0A1F                     __end_of_DimmerLights_TMR_1:	
 20595                           
 20596                           	psect	text142
 20597  1967                     __ptext142:	
 20598 ;; *************** function _IOC_ISR *****************
 20599 ;; Defined at:
 20600 ;;		line 394 in file "../src/MCU_B1.c"
 20601 ;; Parameters:    Size  Location     Type
 20602 ;;		None
 20603 ;; Auto vars:     Size  Location     Type
 20604 ;;		None
 20605 ;; Return value:  Size  Location     Type
 20606 ;;		None               void
 20607 ;; Registers used:
 20608 ;;		wreg, status,2, status,0, pclath, cstack
 20609 ;; Tracked objects:
 20610 ;;		On entry : 0/0
 20611 ;;		On exit  : 0/0
 20612 ;;		Unchanged: 0/0
 20613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20618 ;;Total ram usage:        0 bytes
 20619 ;; Hardware stack levels used:    1
 20620 ;; Hardware stack levels required when called:    3
 20621 ;; This function calls:
 20622 ;;		_DimmerLights_IOC_1
 20623 ;;		_DimmerLights_IOC_2
 20624 ;; This function is called by:
 20625 ;;		_ISR
 20626 ;; This function uses a non-reentrant model
 20627 ;;
 20628                           
 20629                           
 20630                           ;psect for function _IOC_ISR
 20631  1967                     _IOC_ISR:	
 20632                           
 20633                           ;MCU_B1.c: 395: IOCBF2 = 0;
 20634                           
 20635                           ;incstack = 0
 20636                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20637  1967  0027               	movlb	7	; select bank7
 20638  1968  1116               	bcf	22,2	;volatile
 20639                           
 20640                           ;MCU_B1.c: 396: IOCIF = 0;
 20641  1969  100B               	bcf	11,0	;volatile
 20642                           
 20643                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 20644  196A  0021               	movlb	1	; select bank1
 20645  196B  1C2E               	btfss	_myMain^(0+128),0
 20646  196C  0008               	return
 20647                           
 20648                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 20649  196D  3191  2171  3199   	fcall	_DimmerLights_IOC_1
 20650                           
 20651                           ;MCU_B1.c: 409: DimmerLights_IOC_2();
 20652  1970  3191  21B2         	fcall	_DimmerLights_IOC_2
 20653  1972  0008               	return
 20654  1973                     __end_of_IOC_ISR:	
 20655                           
 20656                           	psect	text143
 20657  11B2                     __ptext143:	
 20658 ;; *************** function _DimmerLights_IOC_2 *****************
 20659 ;; Defined at:
 20660 ;;		line 1661 in file "../src/Dimmer_B1.c"
 20661 ;; Parameters:    Size  Location     Type
 20662 ;;		None
 20663 ;; Auto vars:     Size  Location     Type
 20664 ;;  dimming         1   13[COMMON] unsigned char 
 20665 ;;  count           1   12[COMMON] unsigned char 
 20666 ;; Return value:  Size  Location     Type
 20667 ;;		None               void
 20668 ;; Registers used:
 20669 ;;		wreg, status,2, status,0, pclath, cstack
 20670 ;; Tracked objects:
 20671 ;;		On entry : 0/0
 20672 ;;		On exit  : 0/0
 20673 ;;		Unchanged: 0/0
 20674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20678 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20679 ;;Total ram usage:        4 bytes
 20680 ;; Hardware stack levels used:    1
 20681 ;; Hardware stack levels required when called:    2
 20682 ;; This function calls:
 20683 ;;		_Division
 20684 ;; This function is called by:
 20685 ;;		_IOC_ISR
 20686 ;; This function uses a non-reentrant model
 20687 ;;
 20688                           
 20689                           
 20690                           ;psect for function _DimmerLights_IOC_2
 20691  11B2                     _DimmerLights_IOC_2:	
 20692                           
 20693                           ;Dimmer_B1.c: 1676: if (DimmerIntr2.Start == 0) {
 20694                           
 20695                           ;incstack = 0
 20696                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 20697  11B2  0021               	movlb	1	; select bank1
 20698  11B3  1947               	btfsc	_DimmerIntr2^(0+128),2
 20699  11B4  0008               	return
 20700                           
 20701                           ;Dimmer_B1.c: 1677: if (RB2 != DimmerIntr2.Status) {
 20702  11B5  0E48               	swapf	(_DimmerIntr2^(0+128)+1),w
 20703  11B6  0C89               	rrf	9,f
 20704  11B7  3901               	andlw	1
 20705  11B8  00FA               	movwf	??_DimmerLights_IOC_2
 20706  11B9  3000               	movlw	0
 20707  11BA  0020               	movlb	0	; select bank0
 20708  11BB  190D               	btfsc	13,2	;volatile
 20709  11BC  3001               	movlw	1
 20710  11BD  067A               	xorwf	??_DimmerLights_IOC_2,w
 20711  11BE  1903               	skipnz
 20712  11BF  0008               	return
 20713                           
 20714                           ;Dimmer_B1.c: 1679: DimmerIntr2.Count = 0;
 20715  11C0  0021               	movlb	1	; select bank1
 20716  11C1  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20717                           
 20718                           ;Dimmer_B1.c: 1680: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 20719  11C2  1E47               	btfss	_DimmerIntr2^(0+128),4
 20720  11C3  1B47               	btfsc	_DimmerIntr2^(0+128),6
 20721                           
 20722                           ;Dimmer_B1.c: 1681: DimmerIntr2.Tune = 1;
 20723  11C4  14C7               	bsf	_DimmerIntr2^(0+128),1
 20724                           
 20725                           ;Dimmer_B1.c: 1682: }
 20726                           ;Dimmer_B1.c: 1683: DimmerIntr2.GO = 1;
 20727  11C5  1447               	bsf	_DimmerIntr2^(0+128),0
 20728                           
 20729                           ;Dimmer_B1.c: 1684: char count = 70;
 20730  11C6  3046               	movlw	70
 20731  11C7  00FA               	movwf	??_DimmerLights_IOC_2
 20732  11C8  087A               	movf	??_DimmerLights_IOC_2,w
 20733  11C9  00FC               	movwf	DimmerLights_IOC_2@count
 20734                           
 20735                           ;Dimmer_B1.c: 1685: char dimming = Division(DimmerIntr2.DimmingValue, 2);
 20736  11CA  3002               	movlw	2
 20737  11CB  00FA               	movwf	??_DimmerLights_IOC_2
 20738  11CC  087A               	movf	??_DimmerLights_IOC_2,w
 20739  11CD  00F5               	movwf	Division@num
 20740  11CE  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 20741  11CF  3199  21D3  3191   	fcall	_Division
 20742  11D2  00FB               	movwf	??_DimmerLights_IOC_2+1
 20743  11D3  087B               	movf	??_DimmerLights_IOC_2+1,w
 20744  11D4  00FD               	movwf	DimmerLights_IOC_2@dimming
 20745                           
 20746                           ;Dimmer_B1.c: 1686: DimmerIntr2.TuneValue = 2;
 20747  11D5  3002               	movlw	2
 20748  11D6  00FA               	movwf	??_DimmerLights_IOC_2
 20749  11D7  087A               	movf	??_DimmerLights_IOC_2,w
 20750  11D8  0021               	movlb	1	; select bank1
 20751  11D9  00CF               	movwf	(_DimmerIntr2^(0+128)+8)
 20752                           
 20753                           ;Dimmer_B1.c: 1687: DimmerIntr2.TuneValue2 = 2 + dimming;
 20754  11DA  087D               	movf	DimmerLights_IOC_2@dimming,w
 20755  11DB  3E02               	addlw	2
 20756  11DC  00FA               	movwf	??_DimmerLights_IOC_2
 20757  11DD  087A               	movf	??_DimmerLights_IOC_2,w
 20758  11DE  00D0               	movwf	(_DimmerIntr2^(0+128)+9)
 20759                           
 20760                           ;Dimmer_B1.c: 1688: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + ((count - (2 + 2))
      +                           - DimmerIntr2.DimmingValue);
 20761  11DF  034C               	decf	(_DimmerIntr2^(0+128)+5),w
 20762  11E0  3AFF               	xorlw	255
 20763  11E1  0750               	addwf	(_DimmerIntr2^(0+128)+9),w
 20764  11E2  077C               	addwf	DimmerLights_IOC_2@count,w
 20765  11E3  3EFC               	addlw	252
 20766  11E4  00FA               	movwf	??_DimmerLights_IOC_2
 20767  11E5  087A               	movf	??_DimmerLights_IOC_2,w
 20768  11E6  00D1               	movwf	(_DimmerIntr2^(0+128)+10)
 20769                           
 20770                           ;Dimmer_B1.c: 1689: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + dimming;
 20771  11E7  0851               	movf	(_DimmerIntr2^(0+128)+10),w
 20772  11E8  077D               	addwf	DimmerLights_IOC_2@dimming,w
 20773  11E9  00FA               	movwf	??_DimmerLights_IOC_2
 20774  11EA  087A               	movf	??_DimmerLights_IOC_2,w
 20775  11EB  00D2               	movwf	(_DimmerIntr2^(0+128)+11)
 20776                           
 20777                           ;Dimmer_B1.c: 1699: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 20778  11EC  12C8               	bcf	(_DimmerIntr2^(0+128)+1),5
 20779  11ED  0020               	movlb	0	; select bank0
 20780  11EE  1D0D               	btfss	13,2	;volatile
 20781  11EF  0008               	return
 20782  11F0  0021               	movlb	1	; select bank1
 20783  11F1  16C8               	bsf	(_DimmerIntr2^(0+128)+1),5
 20784  11F2  0008               	return
 20785  11F3                     __end_of_DimmerLights_IOC_2:	
 20786                           
 20787                           	psect	text144
 20788  1171                     __ptext144:	
 20789 ;; *************** function _DimmerLights_IOC_1 *****************
 20790 ;; Defined at:
 20791 ;;		line 1475 in file "../src/Dimmer_B1.c"
 20792 ;; Parameters:    Size  Location     Type
 20793 ;;		None
 20794 ;; Auto vars:     Size  Location     Type
 20795 ;;  dimming         1   13[COMMON] unsigned char 
 20796 ;;  count           1   12[COMMON] unsigned char 
 20797 ;; Return value:  Size  Location     Type
 20798 ;;		None               void
 20799 ;; Registers used:
 20800 ;;		wreg, status,2, status,0, pclath, cstack
 20801 ;; Tracked objects:
 20802 ;;		On entry : 0/0
 20803 ;;		On exit  : 0/0
 20804 ;;		Unchanged: 0/0
 20805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20807 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20808 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20809 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20810 ;;Total ram usage:        4 bytes
 20811 ;; Hardware stack levels used:    1
 20812 ;; Hardware stack levels required when called:    2
 20813 ;; This function calls:
 20814 ;;		_Division
 20815 ;; This function is called by:
 20816 ;;		_IOC_ISR
 20817 ;; This function uses a non-reentrant model
 20818 ;;
 20819                           
 20820                           
 20821                           ;psect for function _DimmerLights_IOC_1
 20822  1171                     _DimmerLights_IOC_1:	
 20823                           
 20824                           ;Dimmer_B1.c: 1489: if (DimmerIntr1.Start == 0) {
 20825                           
 20826                           ;incstack = 0
 20827                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20828  1171  0021               	movlb	1	; select bank1
 20829  1172  193B               	btfsc	_DimmerIntr1^(0+128),2
 20830  1173  0008               	return
 20831                           
 20832                           ;Dimmer_B1.c: 1490: if (RB2 != DimmerIntr1.Status) {
 20833  1174  0E3C               	swapf	(_DimmerIntr1^(0+128)+1),w
 20834  1175  0C89               	rrf	9,f
 20835  1176  3901               	andlw	1
 20836  1177  00FA               	movwf	??_DimmerLights_IOC_1
 20837  1178  3000               	movlw	0
 20838  1179  0020               	movlb	0	; select bank0
 20839  117A  190D               	btfsc	13,2	;volatile
 20840  117B  3001               	movlw	1
 20841  117C  067A               	xorwf	??_DimmerLights_IOC_1,w
 20842  117D  1903               	skipnz
 20843  117E  0008               	return
 20844                           
 20845                           ;Dimmer_B1.c: 1492: DimmerIntr1.Count = 0;
 20846  117F  0021               	movlb	1	; select bank1
 20847  1180  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20848                           
 20849                           ;Dimmer_B1.c: 1493: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20850  1181  1E3B               	btfss	_DimmerIntr1^(0+128),4
 20851  1182  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 20852                           
 20853                           ;Dimmer_B1.c: 1494: DimmerIntr1.Tune = 1;
 20854  1183  14BB               	bsf	_DimmerIntr1^(0+128),1
 20855                           
 20856                           ;Dimmer_B1.c: 1495: }
 20857                           ;Dimmer_B1.c: 1496: DimmerIntr1.GO = 1;
 20858  1184  143B               	bsf	_DimmerIntr1^(0+128),0
 20859                           
 20860                           ;Dimmer_B1.c: 1497: char count = 70;
 20861  1185  3046               	movlw	70
 20862  1186  00FA               	movwf	??_DimmerLights_IOC_1
 20863  1187  087A               	movf	??_DimmerLights_IOC_1,w
 20864  1188  00FC               	movwf	DimmerLights_IOC_1@count
 20865                           
 20866                           ;Dimmer_B1.c: 1498: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 20867  1189  3002               	movlw	2
 20868  118A  00FA               	movwf	??_DimmerLights_IOC_1
 20869  118B  087A               	movf	??_DimmerLights_IOC_1,w
 20870  118C  00F5               	movwf	Division@num
 20871  118D  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 20872  118E  3199  21D3  3191   	fcall	_Division
 20873  1191  00FB               	movwf	??_DimmerLights_IOC_1+1
 20874  1192  087B               	movf	??_DimmerLights_IOC_1+1,w
 20875  1193  00FD               	movwf	DimmerLights_IOC_1@dimming
 20876                           
 20877                           ;Dimmer_B1.c: 1499: DimmerIntr1.TuneValue = 2;
 20878  1194  3002               	movlw	2
 20879  1195  00FA               	movwf	??_DimmerLights_IOC_1
 20880  1196  087A               	movf	??_DimmerLights_IOC_1,w
 20881  1197  0021               	movlb	1	; select bank1
 20882  1198  00C3               	movwf	(_DimmerIntr1^(0+128)+8)
 20883                           
 20884                           ;Dimmer_B1.c: 1500: DimmerIntr1.TuneValue2 = 2 + dimming;
 20885  1199  087D               	movf	DimmerLights_IOC_1@dimming,w
 20886  119A  3E02               	addlw	2
 20887  119B  00FA               	movwf	??_DimmerLights_IOC_1
 20888  119C  087A               	movf	??_DimmerLights_IOC_1,w
 20889  119D  00C4               	movwf	(_DimmerIntr1^(0+128)+9)
 20890                           
 20891                           ;Dimmer_B1.c: 1501: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + ((count - (2 + 2))
      +                           - DimmerIntr1.DimmingValue);
 20892  119E  0340               	decf	(_DimmerIntr1^(0+128)+5),w
 20893  119F  3AFF               	xorlw	255
 20894  11A0  0744               	addwf	(_DimmerIntr1^(0+128)+9),w
 20895  11A1  077C               	addwf	DimmerLights_IOC_1@count,w
 20896  11A2  3EFC               	addlw	252
 20897  11A3  00FA               	movwf	??_DimmerLights_IOC_1
 20898  11A4  087A               	movf	??_DimmerLights_IOC_1,w
 20899  11A5  00C5               	movwf	(_DimmerIntr1^(0+128)+10)
 20900                           
 20901                           ;Dimmer_B1.c: 1502: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 20902  11A6  0845               	movf	(_DimmerIntr1^(0+128)+10),w
 20903  11A7  077D               	addwf	DimmerLights_IOC_1@dimming,w
 20904  11A8  00FA               	movwf	??_DimmerLights_IOC_1
 20905  11A9  087A               	movf	??_DimmerLights_IOC_1,w
 20906  11AA  00C6               	movwf	(_DimmerIntr1^(0+128)+11)
 20907                           
 20908                           ;Dimmer_B1.c: 1511: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20909  11AB  12BC               	bcf	(_DimmerIntr1^(0+128)+1),5
 20910  11AC  0020               	movlb	0	; select bank0
 20911  11AD  1D0D               	btfss	13,2	;volatile
 20912  11AE  0008               	return
 20913  11AF  0021               	movlb	1	; select bank1
 20914  11B0  16BC               	bsf	(_DimmerIntr1^(0+128)+1),5
 20915  11B1  0008               	return
 20916  11B2                     __end_of_DimmerLights_IOC_1:	
 20917                           
 20918                           	psect	text145
 20919  19D3                     __ptext145:	
 20920 ;; *************** function _Division *****************
 20921 ;; Defined at:
 20922 ;;		line 1361 in file "../src/Dimmer_B1.c"
 20923 ;; Parameters:    Size  Location     Type
 20924 ;;  value           1    wreg     unsigned char 
 20925 ;;  num             1    5[COMMON] unsigned char 
 20926 ;; Auto vars:     Size  Location     Type
 20927 ;;  value           1    8[COMMON] unsigned char 
 20928 ;;  result          1    9[COMMON] unsigned char 
 20929 ;; Return value:  Size  Location     Type
 20930 ;;                  1    wreg      unsigned char 
 20931 ;; Registers used:
 20932 ;;		wreg, status,2, status,0, pclath, cstack
 20933 ;; Tracked objects:
 20934 ;;		On entry : 0/0
 20935 ;;		On exit  : 0/0
 20936 ;;		Unchanged: 0/0
 20937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20938 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20940 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20941 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20942 ;;Total ram usage:        5 bytes
 20943 ;; Hardware stack levels used:    1
 20944 ;; Hardware stack levels required when called:    1
 20945 ;; This function calls:
 20946 ;;		___lbdiv
 20947 ;; This function is called by:
 20948 ;;		_DimmerLights_IOC_1
 20949 ;;		_DimmerLights_IOC_2
 20950 ;; This function uses a non-reentrant model
 20951 ;;
 20952                           
 20953                           
 20954                           ;psect for function _Division
 20955  19D3                     _Division:	
 20956                           
 20957                           ;incstack = 0
 20958                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 20959                           ;Division@value stored from wreg
 20960  19D3  00F8               	movwf	Division@value
 20961                           
 20962                           ;Dimmer_B1.c: 1362: char result = (char) (value / num);
 20963  19D4  0875               	movf	Division@num,w
 20964  19D5  00F6               	movwf	??_Division
 20965  19D6  0876               	movf	??_Division,w
 20966  19D7  00F0               	movwf	___lbdiv@divisor
 20967  19D8  0878               	movf	Division@value,w
 20968  19D9  319D  25CF         	fcall	___lbdiv
 20969  19DB  00F7               	movwf	??_Division+1
 20970  19DC  0877               	movf	??_Division+1,w
 20971  19DD  00F9               	movwf	Division@result
 20972                           
 20973                           ;Dimmer_B1.c: 1363: return result;
 20974  19DE  0879               	movf	Division@result,w
 20975  19DF  0008               	return
 20976  19E0                     __end_of_Division:	
 20977                           
 20978                           	psect	text146
 20979  1DCF                     __ptext146:	
 20980 ;; *************** function ___lbdiv *****************
 20981 ;; Defined at:
 20982 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20983 ;; Parameters:    Size  Location     Type
 20984 ;;  dividend        1    wreg     unsigned char 
 20985 ;;  divisor         1    0[COMMON] unsigned char 
 20986 ;; Auto vars:     Size  Location     Type
 20987 ;;  dividend        1    2[COMMON] unsigned char 
 20988 ;;  quotient        1    4[COMMON] unsigned char 
 20989 ;;  counter         1    3[COMMON] unsigned char 
 20990 ;; Return value:  Size  Location     Type
 20991 ;;                  1    wreg      unsigned char 
 20992 ;; Registers used:
 20993 ;;		wreg, status,2, status,0
 20994 ;; Tracked objects:
 20995 ;;		On entry : 0/0
 20996 ;;		On exit  : 0/0
 20997 ;;		Unchanged: 0/0
 20998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20999 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21000 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21002 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21003 ;;Total ram usage:        5 bytes
 21004 ;; Hardware stack levels used:    1
 21005 ;; This function calls:
 21006 ;;		Nothing
 21007 ;; This function is called by:
 21008 ;;		_Division
 21009 ;; This function uses a non-reentrant model
 21010 ;;
 21011                           
 21012                           
 21013                           ;psect for function ___lbdiv
 21014  1DCF                     ___lbdiv:	
 21015                           
 21016                           ;incstack = 0
 21017                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 21018                           ;___lbdiv@dividend stored from wreg
 21019  1DCF  00F2               	movwf	___lbdiv@dividend
 21020  1DD0  01F4               	clrf	___lbdiv@quotient
 21021  1DD1  0870               	movf	___lbdiv@divisor,w
 21022  1DD2  1903               	btfsc	3,2
 21023  1DD3  2DEE               	goto	i1l7338
 21024  1DD4  01F3               	clrf	___lbdiv@counter
 21025  1DD5  0AF3               	incf	___lbdiv@counter,f
 21026  1DD6                     i1l7326:	
 21027  1DD6  1BF0               	btfsc	___lbdiv@divisor,7
 21028  1DD7  2DDF               	goto	i1l7328
 21029  1DD8  1003               	clrc
 21030  1DD9  0DF0               	rlf	___lbdiv@divisor,f
 21031  1DDA  3001               	movlw	1
 21032  1DDB  00F1               	movwf	??___lbdiv
 21033  1DDC  0871               	movf	??___lbdiv,w
 21034  1DDD  07F3               	addwf	___lbdiv@counter,f
 21035  1DDE  2DD6               	goto	i1l7326
 21036  1DDF                     i1l7328:	
 21037  1DDF  1003               	clrc
 21038  1DE0  0DF4               	rlf	___lbdiv@quotient,f
 21039  1DE1  0870               	movf	___lbdiv@divisor,w
 21040  1DE2  0272               	subwf	___lbdiv@dividend,w
 21041  1DE3  1C03               	skipc
 21042  1DE4  2DE9               	goto	L13
 21043  1DE5  0870               	movf	___lbdiv@divisor,w
 21044  1DE6  02F2               	subwf	___lbdiv@dividend,f
 21045  1DE7  1474               	bsf	___lbdiv@quotient,0
 21046  1DE8  1003               	clrc
 21047  1DE9                     L13:	
 21048  1DE9  0CF0               	rrf	___lbdiv@divisor,f
 21049  1DEA  3001               	movlw	1
 21050  1DEB  02F3               	subwf	___lbdiv@counter,f
 21051  1DEC  1D03               	btfss	3,2
 21052  1DED  2DDF               	goto	i1l7328
 21053  1DEE                     i1l7338:	
 21054  1DEE  0874               	movf	___lbdiv@quotient,w
 21055  1DEF  0008               	return
 21056  1DF0                     __end_of___lbdiv:	
 21057  007E                     btemp	set	126	;btemp
 21058  007E                     pic14e$flags	set	126
 21059  007E                     wtemp	set	126
 21060  007E                     wtemp0	set	126
 21061  0080                     wtemp1	set	128
 21062  0082                     wtemp2	set	130
 21063  0084                     wtemp3	set	132
 21064  0086                     wtemp4	set	134
 21065  0088                     wtemp5	set	136
 21066  007F                     wtemp6	set	127
 21067  007E                     ttemp	set	126
 21068  007E                     ttemp0	set	126
 21069  0081                     ttemp1	set	129
 21070  0084                     ttemp2	set	132
 21071  0087                     ttemp3	set	135
 21072  007F                     ttemp4	set	127
 21073  007E                     ltemp	set	126
 21074  007E                     ltemp0	set	126
 21075  0082                     ltemp1	set	130
 21076  0086                     ltemp2	set	134
 21077  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         264
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      8      78
    BANK2            80      0      80
    BANK3            80      0      78
    BANK4            80      4      73
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK3[8]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->_Division
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  174342
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             14 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              5 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              5 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              1 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              1 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5538
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5538
                                             70 BANK0      1     1      0
                                              0 BANK1      8     8      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4608
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4608
                                             19 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              1 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              5 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   51934
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   51934
                                              5 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   48215
                                              3 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5044
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   42899
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12356
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   24822
                                             70 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              3 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              5 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              5 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              3 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              7 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              6 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              6 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              3 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              3 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2315
                                              9 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              3 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              5 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1713
                                              7 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              5 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              5 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              1 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3667
                                             14 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   58083
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   57751
                                              4 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   32799
                                              0 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              3 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                             67 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4392
                                             70 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      71
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              3 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   24433
                                             75 BANK0      2     1      1
                                              0 BANK1      2     2      0
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3717
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0     124
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     436
                                             67 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     332
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0     102
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              2 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              1 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   32285
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   32285
                                             67 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             47 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             31 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             34 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5627
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5627
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3182
                                             67 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    2091
                                             14 BANK0      5     5      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                             10 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              3 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              3 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0    1128
                                              0 BANK0      1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0    1128
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  4     4      0     564
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  4     4      0     564
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     496
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
     _DimmerLights_IOC_2
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      49      13       91.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     192      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     192      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Feb 06 16:45:44 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1C1A  
                          ___bmul@product 0023                 getMain_Lights_Count@count 0021  
                                      l98 0831                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1E78                                        _WR 0CA9  
                            ___awdiv@sign 0027                                        _Sw 00D8  
                          setTemp_Main@AD 00EB                       ___wmul@multiplicand 0023  
                    _getDimmerLights_Line 1AFC                    __end_of_setDelayOff_GO 0CAB  
                            ___ftadd@exp1 004E                              ___ftadd@exp2 004D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 164E  
                    _setDimmerLights_Line 1CB9                              ___ftadd@sign 004C  
                                     l100 0845                                       l110 12E5  
                                     l112 12F5                                       l108 12FB  
                                     l109 12F7                      _setDimmerLights_SwOn 1404  
                                     l327 1C26                                       l328 1C28  
                                     l371 1EA2                                       l283 1785  
                                     l259 16FA                                       l581 17F9  
                                     l912 1CC8                                       l917 1B05  
                                     l918 1B0D                                       l759 1B8C  
                                     l883 0774                                       l859 1D85  
                                     _GIE 005F                                       _CRC 0138  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00D6                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00D3              getDimmerLights_Status@lights 0023  
                                     _Sw1 01BE                                       _Sw2 01C7  
              ??_setDimmerIntr_Dimming_RF 0022                ??_setDimmerIntr_Dimming_Sw 0022  
         setDimmerIntr_Dimming_RF@command 0021                  __end_of_CC2500_WriteByte 1C33  
                   _Buzzer_Initialization 18AD                           __end_of_ADC_Set 18F1  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0024       __end_of_setDimmerIntr_ControlStatus 1F6F  
             _setDimmerIntr_ControlStatus 1F40                         ??_getSw_KeyStatus 0021  
                                    ?_ISR 0070                              ___ftdiv@cntr 0039  
                         __end_of_IOC_ISR 1973                     _setDimmerLights_OnOff 06F4  
        setDimmerLights_DimmingRun@lights 0025                                Load_Main@i 0031  
                            ___ftdiv@sign 003E                                      l1131 1D5A  
                                    l1132 1D64                                      l2213 0CC1  
                                    l1166 126E                                      l2222 0D39  
                                    l2206 1043                                      l2150 0575  
                                    l2151 05C6                                      l1440 122E  
                                    l3017 1CFC                                      l2146 0626  
                                    l1604 01FE                                      l1454 1FC6  
                                    l1614 01DA                                      l1606 008A  
                                    l3207 0427                                      l1615 01D8  
                                    l1607 0086                                      l2191 0938  
                                    l1464 0B90                                      l1608 0081  
                                    l2176 19E5                           __end_of_IOC_Set 1951  
                                    l2543 1B6A                                      l3184 1508  
                                    l3178 14F1                                      l2565 0380  
                                    l2567 024C                                      l2912 0554  
                                    l1784 0E02                                      l2921 1C19  
                                    l1778 0E8D                                      l1789 0E85  
                          _Load_Main$3679 002C                                      l7022 1E82  
                                    l2880 1FE3                                      l7024 1E85  
                                    l2856 10F1                                      l2881 1FFE  
                                    l7130 1F58                                      l7050 07E0  
                                    l7060 07F0                                      l7052 07E3  
                                    l7028 1E8B                                      l2885 1FFA  
                                    l7214 1311                                      l7222 1319  
                                    l7062 07F3                                      l6408 1B9A  
                                    l6424 1A59                                      l7056 07E9  
                                    l6418 1BB1                                      l7138 1BDF  
                                    l7066 07F9                                      l7410 1739  
                                    l6428 1A5F                                      l7244 1342  
                                    l7252 134A                                      l7228 1322  
                                    l7236 132A                                      l8212 1A1C  
                   _setDimmerLights_SwOff 107E                                      l7262 1A4F  
                                    l8230 0B2E                                      l7430 1751  
                                    l7414 173F                                      l7264 1A54  
                                    l7248 1346                                      l8224 0B19  
                                    l7432 176A                                      l7408 1736  
                                    l7352 16C6                                      l9210 14DD  
                                    l9202 14C7                                      l7258 1A48  
                                    l6810 1F87                                      l7354 16C9  
                                    l7372 16E1                                      l9206 14CE  
                                    l9310 1E3E                                      l7470 1103  
                                    l7630 1FAE                                      l8238 0B89  
                                    l6910 1CEC                                      l7390 1716  
                                    l7382 1709                                      l7358 16CF  
                                    l8430 1B6F                                      l9216 14F6  
                                    l9208 14D8                                      l7384 170D  
                                    l7376 1700                                      l8192 1DA2  
                                    l6746 10AC                                      l9242 136B  
                                    l9218 14FE                                      l9322 03B0  
                                    l7482 1119                                      l6922 1EB3  
                                    l6930 1E5E                                      l7386 1710  
                                    l7378 1703                                      l8434 1B75  
                                    l8186 1D9A                                      l9260 1391  
                                    l9252 1373                                      l9236 1360  
                                    l9332 03C6                                      l9420 0DC1  
                                    l9412 0DA8                                      l7492 112A  
                                    l7484 111C                                      l6924 1EBE  
                                    l6932 1E61                                      l6908 1CE6  
                                    l8188 1D9D                                      l9254 137F  
                                    l9350 03F3                                      l9326 03B7  
                                    l9510 0BE1                                      l7494 112F  
                                    l7734 1BF6                                      l7750 1D3F  
                                    l8702 0978                                      l9264 139A  
                                    l9352 03FD                                      l9344 03E0  
                                    l9440 0EBE                                      l9520 0C05  
                                    l9512 0BEF                                      l9600 0CA1  
                                    l8624 06AC                                      l8528 1CF6  
                                    l6936 1E67                                      l7760 1D4D  
                                    l9362 0419                                      l9354 0402  
                                    l9434 0EA8                                      l9522 0C08  
                                    l6962 1C13                                      l7850 1DFA  
                                    l6890 1C5F                                      l7674 1A3E  
                                    l8722 09A7                                      l8706 0980  
                                    l8548 12CF                                      l9268 13A2  
                                    l9372 044B                                      l9364 0423  
                                    l9356 0406                                      l9452 0EF9  
                                    l9620 1BC8                                      l7860 1E0A  
                                    l6884 1C56                                      l7748 1D3D  
                   _myMain_Initialization 1000                                      l9542 1418  
                                    l9382 0466                                      l9526 0C16  
                                    l9518 0BFC                                      l6958 1C04  
                                    l7782 106E                                      l7774 1050  
                                    l7862 1E0F                                      l6886 1C59  
                                    l7758 1D49                                      l9552 1429  
                                    l9544 141B                                      l9368 0439  
                                    l9392 0D51                                      l9464 0F15  
                                    l9456 0F01                                      l7776 105C  
                                    l9712 12AB                                      l9562 1452  
                                    l9554 142E                                      l7786 1077  
                                    l9564 1457                                      l9468 0F1D  
                                    l9492 0BB1                                      l9636 1638  
                                    l9724 0AA9                                      l9398 0D67  
                                    l9830 0CD0                                      l9822 0CAC  
                                    l8694 0959                                      l9904 147B  
                                    l9728 0AAE                                      l9840 0D1C  
                                    l9832 0CD7                                      _CFGS 0CAE  
                                    l9586 0C5D                                      l9738 0AFE  
                                    l9842 0D20                                      l9834 0CF2  
                                    l9930 08DE                                      l9780 1FDE  
                                    l9756 1B82                                      l9596 0C8D  
                                    l9836 0D14                                      l9790 1FF5  
                                    l9782 1FE7                                      l9766 1F2B  
                                    l9694 1AE7                                      l9838 0D18  
                                    l9846 0D24                                      l9942 08F6  
                                    l9880 0784                                      l9864 073B  
                                    l8896 1161                              __CFG_WDTE$ON 0000  
                                    l9866 0753                                      l9946 08FF  
                                    l9884 078B                                      l9958 0914  
                                    l9994 087D                                      l9898 07B8  
                                    l9996 088C                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u6325 1EA8                                      u9125 12C5  
                                    u7295 1B5D                                      u7635 1053  
                                    u9085 1CFD                                      u5965 1B33  
                                    u7655 105D                                      u9095 1D02  
                                    u7665 1067                                      u7675 106F  
                                    u9435 0997                                      u9385 0968  
                                    _LWLO 0CAD                                      u9795 1155  
                                    _RSSI 013B                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1C9D  
              _setDimmerLights_DimmingRun 1C82                                      _Buz1 0120  
                                    _Load 0140                                      _Temp 00DB  
                                    _main 13A9                              ___ftpack@arg 0021  
                     __end_of_DlyOff_Main 1800                           __end_of_RF_Main 18B9  
                            ___ftpack@exp 0024                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 19C7                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0B12                         ___bmul@multiplier 0024  
                            ___ftmul@cntr 003D                              ___ftmul@sign 003E  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2393 0023  
    _getDimmerLights_Allow_Condition$2394 0024      _getDimmerLights_Allow_Condition$2395 0025  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0020  
                            ___fttol@exp1 005C                              ___fttol@lval 0058  
       setDimmerLights_DimmingRun@command 0023   __end_of_getDimmerLights_Allow_Condition 1131  
__size_of_getDimmerLights_Allow_Condition 003E         ??_getDimmerLights_Allow_Condition 0022  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 10F3  
                  _getDimmerLights_Status 19EF                        ??_getDimmer_LoadGO 0021  
                        __end_of_LED_Main 19AF                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 0139                                     l10006 08B0  
                                   l10008 08BF                                     l10024 1674  
                                   l10200 0236                                     l10104 0E71  
                                   l10026 167A                                     l10106 0E72  
                                   l10036 16A2                                     l10140 05C1  
                                   l10038 16A9                                     l10062 0E13  
                                   l10240 02F4                                     l10216 027F  
                                   l10056 0E04                                     l10064 0E16  
                                   l10410 0162                                     l10154 05D5  
                                   l10226 02B4                                     l10250 0328  
                                   l10308 120D                                     l10420 018E  
                                   l10092 0E5A                                     l10430 01AA  
                                   l10182 061F                                     l10094 0E5C  
                                   l10440 01C0                                     l10416 0171  
                                   l10424 019A                                     l10344 0068  
                                   l10168 0607                                     l10362 0089  
                                   l10506 10D1                                     l10292 1D87  
                                   l10612 13D8                                     l10560 04ED  
                                   l10544 04AE                                     l10384 00DF  
                                   l10608 13CD                                     l10538 049E  
                                   l10378 00AD                                     l10580 0539  
                                   l10556 04E5                                     l10548 04BD  
                                   l10476 01ED                                     l10574 0527  
                                   l10558 04C0                     ?_setDimmerLights_Main 0070  
                                   l10576 0502                                     l10578 052F  
                                   l10586 054A                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0265                           __end_of___awdiv 13A9  
                         __end_of___lbdiv 1DF0                           __end_of___ftadd 047E  
                         __end_of___ftdiv 0DE3                           __end_of___ftneg 1932  
                                   u10215 14D3                                     u10235 14EC  
                         __end_of___ftmul 0F45                                     u11125 0C69  
                                   u10335 1376                                     u10255 14F9  
                                   u11160 15F3                                     u10355 1380  
                         ___awdiv@divisor 0021                                     u10365 138A  
                                   u10285 150F                                     u10605 0407  
                                   u11165 15F1                                     u10375 1392  
                                   _T1CON 0018                                     u10545 03E1  
                                   u10705 0D79                                     u12065 0599  
                                   u10635 041A                                     u10715 0D89  
                                   u10725 0DA9                           __end_of___fttol 0C1F  
                                   u10575 03F4                                     u10735 0DB8  
                                   u10815 0F02                                     u12095 05F6  
                                   u10745 0DC2                                     u10825 0F08  
                                   u10905 0BB8                                     u12515 00AB  
                                   u12525 00DD                                     u10855 0F1E  
                                   u10935 0BE2                                     u12375 1225  
                                   u12615 01A1                                     u12535 0121  
                                   u12800 04EB                                     u10865 0F24  
                                   u10785 0ECA                                     u10795 0EDA  
                                   u10965 0BFD                                     u12805 04C9  
                                   u12830 052D                                     u12735 10E9  
                                   u12835 050B                                     u11955 0E42  
                                   _IOCBF 0396                                     u11975 0E62  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 107E                                     i1l970 0A0B  
                                   i1l955 09D9                                     i1l972 0A00  
                                   i1l981 0A1D                                     i1l975 0A09  
                                   i1l994 0A4C                           ___awdiv@counter 0026  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0022  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1B63  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 15E9  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1584  
                                   _Light 013A                          __end_of_TMR1_ISR 1E33  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 19BB                                     _getAD 1D8F  
                           ___awtoft@sign 002E                             ___ftpack@sign 0025  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0021  
                        __end_of_WDT_Main 1AB0               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0026                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1A8C                        Flash_Memory_Read@i 0022  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1A7A                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                       _getAll_Sw_KeyStatus 1A11  
                      _setRF_DimmerLights 15E9                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 00E5               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0021               ??_setDimmerLights_DimmingOn 0023  
                      ??_CC2500_SIDLEMode 0025                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 19E0                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 1404                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 18C3            getMain_All_LightsStatus@status 0021  
                      ??_setMemory_Modify 0021              setDimmerLights_OnOff@command 00E5  
                          _Exception_Main 047E                          ?_CC2500_WriteREG 0023  
                               ??_ADC_Set 0021                      _setSw_Initialization 1919  
                                  ??_main 006E                             ___fttol@sign1 0057  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0063              ??_DimmerLights_SelectPointer 0021  
                 _setControl_Lights_Table 0CAB                            _setMemory_Data 197F  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0023  
                              _Receive_OK 0370        setDimmerIntr_ControlStatus@command 0021  
                 _setDimmerLights_Dimming 1460                                 ??_IOC_ISR 007E  
                               ??_IOC_Set 0021                               _DimmerIntr1 00BB  
                             _DimmerIntr2 00C7                  _getMain_All_LightsStatus 1AD6  
                __size_of_setRFSW_Control 0043                        _RF_Timeout_Counter 1B24  
                 ??_Switch_Initialization 0026                    ?_setDimmerLights_OnOff 00E5  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0021  
                       ??_getRF_KeyStatus 0021                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 1791                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006E                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0023  
                   _getDimmer_Load_Status 1911                                 ??_WDT_Set 0021  
                        __end_of___awtoft 1E55                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 151F                  _getMain_All_Error_Status 1FCD  
                                  _IOCBF2 1CB2                                    i1l1011 0A73  
                                  i1l1020 0A90                                    i1l1014 0A7C  
                                  i1l1009 0A7E                                    i1l1400 0013  
                                  i1l1403 001B                                    i1l8030 0A33  
                                  i1l8024 0A2C                                    i1l8042 0A43  
                                  i1l8036 0A3B                                    i1l7326 1DD6  
                                  i1l7328 1DDF                                    i1l7338 1DEE  
                                  i1l8058 0A59                                    i1l8084 0A89  
                                  i1l8076 0A75                                    i1l7932 09C0  
                                  i1l7926 09B9                                    i1l7960 09E6  
                                  i1l7944 09D0                                    i1l7938 09C8  
                                  i1l7986 0A16                                    i1l7978 0A02  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0027  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B2  
                                  u922_25 1E2D                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1C67  
                                  _WDTCON 0097                        DelayTime_1us@count 0021  
                    Exception_Main@i_6906 0034            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0064             __end_of_CC2500_PowerOnInitial 1B4E  
                                  _Dimmer 012C                                    _DlySw1 01D8  
                                  _DlySw2 01DD             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1A56                __end_of_Mcu_Initialization 1A9E  
                     __end_of_Buzzer_Main 1302                                    _Memory 0220  
                                  _Timer1 0131                                    ___bmul 1A56  
                  __end_of_Exception_Main 0555                      Exception_Main@lights 0036  
                                  ___wmul 1CF3                                 ??___awdiv 0025  
                               ??___lbdiv 0071                                 ??___ftadd 0048  
            __size_of_DelayOffPointSelect 0017                                 ??___ftdiv 0035  
                               ??___ftneg 0042                                 ??___ftmul 0035  
                               ??___fttol 0053              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0021                                 ??___lwdiv 0025  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0021  
                                  _r_data 013F                      Exception_Main@status 002F  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E11  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0021          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1DF0                                    _s_data 00DA  
                  ??_setDimmerLights_SwOn 002E                                    _setLED 1302  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0021  
                  __end_of_setMemory_Data 198B                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0028                                    _setBuz 0800  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 0030  
             __end_of_Load_Initialization 18B3          ??_setDimmerLights_Initialization 0021  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0021  
        __end_of_setDimmerIntr_Dimming_RF 1F9E          __end_of_setDimmerIntr_Dimming_Sw 1F40  
                   ___ftmul@f3_as_product 003A                 _setDimmerLights_DimmingOn 1EC3  
                Flash_Memory_Read@address 0023                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1AFC               getMain_Lights_Count@status1 0022  
             getMain_Lights_Count@status2 0023               __size_of_DimmerLights_IOC_1 0041  
             __size_of_DimmerLights_IOC_2 0041                     __end_of_SwPointSelect 1C01  
             __size_of_DimmerLights_TMR_1 0073               __size_of_DimmerLights_TMR_2 0073  
            __size_of_Flash_Memory_Modify 0086                   __size_of_LedPointSelect 0020  
         setDimmerIntr_Dimming_Sw@command 0021                        setTemp_Main@TempGO 00E6  
                        ___lbdiv@dividend 0072                       Flash_Memory_Write@i 0022  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1B63  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0026  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004E  
         setDimmerIntr_DimmingValue@value 0063           getDimmerIntr_DimmingValue@value 0022  
                               ?_LED_Main 0070                                ___ftadd@f1 0042  
                              ___ftadd@f2 0045                      _getRF_KeyStatus$5098 0023  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2332 002F  
               _setDimmerLights_SwOn$2341 0030                                ___ftdiv@f1 0032  
                              ___ftdiv@f2 002F                                ___ftdiv@f3 003A  
                              ___ftneg@f1 003F                                ___awtoft@c 0029  
                     ___bmul@multiplicand 0021              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002F                                ___ftmul@f2 0032  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004F  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1DAF                             __end_of_getAD 1DAF  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0022                 setMemory_LoopSave@command 0022  
                      _LED_Initialization 1997                           _getSw_KeyStatus 1D30  
               ??_setControl_Lights_Table 006E                        getRF_KeyStatus@key 0022  
                         ?_setMemory_Data 0021          ??_getDimmerLights_PercentToValue 005D  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006C  
           ??_Flash_Memory_Initialization 0025                          ___lbdiv@quotient 0074  
                    _getMain_Lights_Count 1A7A                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 0204         setDimmerIntr_ControlStatus@lights 0023  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1BBC  
              __end_of_set_TimeoutCleared 18D8           setDimmerIntr_MaxmumValue@lights 0065  
                      __size_of_getRxData 0072                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1973  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0024                       _Temp_Initialization 18B9  
                      ??_CC2500_WriteByte 0021                                 ?_Division 0075  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 12B8  
                       ??_setRFSW_Control 00E5               ?_setDimmerLights_DimmingRun 0023  
                       __end_of_Temp_Main 18BF                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002E                                ??_LED_Main 0026  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 18F1  
                           ??_Switch_Main 0036                            DelayTime_1us@i 0023  
                          DelayTime_1us@j 0025                      ??_LED_Initialization 0026  
                            _DimmerLights 00D5                         LedPointSelect@led 0022  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0024                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0014                               setBuz@count 002D  
                 ?_getDimmerLights_Status 0070                                __pmaintext 13A9  
                          _getDelayOff_GO 1A00                       _CC2500_WriteCommand 1C4D  
                    ?_Temp_Initialization 0070                                   ?___bmul 0021  
                        ??_setDelayOff_GO 0068         __end_of_DimmerIntr_Initialization 08C8  
           ??_DimmerLights_Initialization 0064                                   ?___wmul 0021  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 093A                                ??_TMR1_Set 0021  
                              __pintentry 0004                    ??_setSw_Initialization 0025  
                              _getLoad_OK 1901                        __size_of_setTxData 00BB  
                                 ?_setLED 0023                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 18EA  
                                 ?_setBuz 002A                                 ?___awtoft 0029  
                               ?___ftpack 0021                                _getTemp_AD 1131  
      __end_of_DimmerLights_SelectPointer 1BBC                _DimmerLights_SelectPointer 1BA5  
                              ??_WDT_Main 0021              __end_of_setRF_Initialization 195C  
                      _setRFSW_AdjControl 0A92                    __end_of_setProductData 197F  
           setDimmerLights_Dimming@lights 00E6                                   _IOC_ISR 1967  
                                 _IOC_Set 1946                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006B     getDimmerLights_Allow_Condition@lights 0026  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11F3  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1C33  
                  __size_of_CC2500_RxData 006E                    __size_of_CC2500_TxData 006D  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 18B6                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0076  
                                 _WDT_Set 19BB           __end_of_setControl_Lights_Table 0D3A  
                         setRF_Main@error 00EB                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0021                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 14BE                   ??_setLoad_AH_AL_Restore 0021  
                     getCmd_Status@number 0021              __end_of_CC2500_FrequencyCabr 19D3  
                         __size_of_IO_Set 001B                       setCmd_Status@number 0023  
       __size_of_setDimmerIntr_Dimming_RF 002F         __size_of_setDimmerIntr_Dimming_Sw 002B  
                       __end_of_getBuz_GO 1A33                 ?_setDimmerIntr_Dimming_RF 0021  
                     ??_Flash_Memory_Main 0027                 ?_setDimmerIntr_Dimming_Sw 0021  
                     ??_Flash_Memory_Read 0021                    __end_of_getDelayOff_GO 1A11  
                                 _VarLED1 01E6                                   _VarLED2 01EA  
          __end_of_getDimmerLights_Status 1A00                         __end_of_getRxData 093A  
                 __end_of_getSw_KeyStatus 1D4F                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0021                      ??_setRFSW_AdjControl 0066  
                          ??_setTemp_Main 0066                           __size_of___bmul 0012  
                     setProductData@value 0063                                   ___awdiv 1355  
                                 ___lbdiv 1DCF                                   ___ftadd 0388  
                                 ___ftdiv 0D3A                                   ___ftneg 1929  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0B98                       __end_of_Switch_Main 1967  
                                 ___lwdiv 1047                ??_getMain_All_LightsStatus 0021  
                 ??_Buzzer_Initialization 0021                           _getRF_KeyStatus 1A33  
                              ??___awtoft 002C                                ??___ftpack 0026  
                         __size_of_setLED 0053                      setRFSW_AdjControl@sw 0069  
                         __size_of_setBuz 0059                                   __ptext1 10B7  
                                 __ptext2 1000                                   __ptext3 1131  
                                 __ptext4 093A                                   __ptext5 1D8F  
                                 __ptext6 1A9E                                   __ptext7 0002  
                                 __ptext8 18BC                                   __ptext9 0DE3  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0021                   ??_setDimmerLights_OnOff 00E6  
                         ?_setProductData 0063                 __end_of_Flash_Memory_Main 1234  
               __end_of_Flash_Memory_Read 1C4D                   ??_setDimmerLights_SwOff 0023  
                              _setRF_Main 0555                   ??_myMain_Initialization 0021  
                           _DelayOff_Main 18F9                         _DimmerLights_Main 1D6F  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0023  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 18DE  
              __end_of_CC2500_ClearRXFIFO 18CB                  ??_setTemp_Initialization 0021  
              __end_of_CC2500_ClearTXFIFO 18CF                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00ED  
                          _LedPointSelect 1D4F                 getAll_Sw_KeyStatus@status 0022  
                         getTemp_AD@ADRES 0027                       _DelayOffPointSelect 1B8E  
                                 clrloop0 18E5            __size_of_Switch_Initialization 0008  
           __end_of_Switch_Initialization 1929                      end_of_initialization 004E  
               ??_DelayOff_Initialization 0024                         _CC2500_InitSetREG 1EEB  
                           _DelayTime_1us 1E9D                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 1FCD        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 18DE                __end_of_setRF_TransceiveGO 1AD6  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006E  
                    Flash_Memory_Read@ret 0024                                   initloop 18DF  
                              _setSw_Main 0204                     CC2500_ReadByte@loop_b 0022  
                  setDimmerLights_SwOn@sw 0032                         _CC2500_ReadStatus 1E78  
                    Flash_Memory_Modify@i 0026                     _setLED_Initialization 1A68  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0025  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 1723                             _CC2500_TxData 16B6  
                     ??_CC2500_InitSetREG 0026             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 0B12  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0021                              __pstringtext 1800  
                           _setCmd_Status 1C01                       _Flash_Memory_Unlock 1932  
                     ??_CC2500_ReadStatus 0023                   CC2500_InitSetREG@loop_c 0029  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0025                   setTemp_Main@DangerValue 00E9  
                  setSw_Initialization@sw 0025                 __end_of_DimmerLights_Main 1D8F  
                      _Mcu_Initialization 1A8C                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 18C7                      __end_of_my_MainTimer 10F3  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1D6F                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002E          setDimmerIntr_DimmingValue@lights 0065  
        getDimmerIntr_DimmingValue@lights 0023                 __end_of_CC2500_InitSetREG 1F15  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065                            ?_DelayTime_1us 0021  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 1E9D                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0023           getMain_All_Error_Status@command 0026  
                             ___ftdiv@exp 003D         __end_of_setDimmerLights_DimmingOn 1EEB  
                        ??_Exception_Main 002E                            __end_of_IO_Set 1C82  
                    _setRF_Initialization 1951                        _setMemory_LoopSave 1AE9  
                             _Switch_Main 195C                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1A44  
                        ??_setMemory_Data 0022                               ___ftmul@exp 0039  
                   _CC2500_PowerOnInitial 1B39               ??_DimmerIntr_Initialization 0063  
                    ??_Mcu_Initialization 0022               __end_of_getAll_Sw_KeyStatus 1A22  
                   ??_DelayOffPointSelect 0021                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0021                 DimmerLights_IOC_1@dimming 007D  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1A68  
     __size_of_getDimmerIntr_DimmingValue 0016                 DimmerLights_IOC_2@dimming 007D  
                    setRF_DimmerLights@on 0066                            __end_of___wmul 1D11  
                       getSw_KeyStatus@sw 0025               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0022             __size_of_getDimmerLights_Line 0014  
        DimmerLights_SelectPointer@lights 0022                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0068                            __end_of_setLED 1355  
                           __pbitbssBANK0 0370             __size_of_setDimmerLights_Line 001D  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 0859  
              __end_of_DimmerLights_IOC_1 11B2                __end_of_DimmerLights_IOC_2 11F3  
                    _CC2500_FrequencyCabr 19C7                   ??_getDimmer_Load_Status 0021  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1275  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 0A1F  
              __end_of_DimmerLights_TMR_2 0A92                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0052  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1909                     ??_Flash_Memory_Modify 0025  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0021  
              __end_of_CC2500_InitPATable 1D30           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0021                     ??_Flash_Memory_Unlock 0021  
                    __end_of_setTemp_Main 0E91                            ??_RF_RxDisable 0025  
  __end_of_getDimmerLights_PercentToValue 1584   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 151F                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 005F  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 18D3  
       __end_of_setDimmerIntr_MaxmumValue 1BD3                                  ??_IO_Set 0021  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 01E2  
                       __size_of_Division 000D                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0040                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 18BC  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0021  
                               _Rx_Length 013C                     setProductData@address 0065  
                     Exception_Main@count 0030                       Exception_Main@error 0031  
                                ??___bmul 0022                                  ??___wmul 0025  
                  __size_of_SwPointSelect 0017          __end_of_getMain_All_LightsStatus 1AE9  
                               _Tx_Length 00D9                               __pdataBANK4 0245  
                                ??_setLED 0024                                  ?_ADC_Set 0070  
                                ??_setBuz 002C                           ??_DelayOff_Main 0069  
                       ??_CC2500_ReadByte 0021               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 2000                          _CC2500_SIDLEMode 18CF  
              __size_of_DimmerLights_Main 0020                        setMemory_Data@data 0021  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0023  
                           ??_setLED_Main 0023                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002F  
                               ___latbits 0003                          _setMemory_Modify 1AB0  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E5                 setRF_TransceiveGO@command 0022  
                           __pcstackBANK4 0265                      ??_set_TimeoutCleared 0021  
               _DimmerIntr_Initialization 0859                           ??_DelayTime_1us 0023  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0068  
                       ??_CC2500_PowerRST 0027                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0022  
                            ??_TouchPower 0021                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0063  
             setDimmerLights_DimmingOn@sw 0023                         ??_CC2500_WriteREG 0024  
                           ??_setRF_Learn 0021                             _DimmerLights1 0168  
                           _DimmerLights2 01D0                     CC2500_WriteREG@w_addr 0025  
                   setDelayOff_GO@command 0066            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0025             __end_of_setLoad_AH_AL_Restore 1CB9  
                setRFSW_AdjControl@status 0068                           ??_CC2500_TxData 0025  
                               __pnvBANK1 00ED                            getRxData@error 00E9  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 18C3  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0032  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0023                     DelayOffPointSelect@sw 0022  
                           _getCmd_Status 1A44                                setBuz@time 002A  
                         ??_setCmd_Status 0022                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002B                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1A22                  ?_setDimmerLights_Dimming 006B  
     __end_of_Flash_Memory_Initialization 06F4               _Flash_Memory_Initialization 062A  
                                ?___awdiv 0021                                 __ptext100 1460  
                               __ptext101 0F45                                  ?___lbdiv 0070  
                               __ptext110 1FCD                                 __ptext102 1AC3  
                               __ptext111 193B                                 __ptext103 15E9  
                               __ptext120 0D3A                                 __ptext112 18AC  
                               __ptext104 1CB9                                 __ptext121 0388  
                               __ptext113 0859                                 __ptext105 1BBC  
                               __ptext130 107E                                 __ptext122 1E33  
                               __ptext114 1AB0                                 __ptext106 1F15  
                               __ptext131 19EF                                 __ptext123 14BE  
                               __ptext115 1584                                 __ptext107 1B78  
                               __ptext140 0A1F                                 __ptext132 1BA5  
                               __ptext124 18F9                                 __ptext116 151F  
                               __ptext108 10F3                                 __ptext141 09AC  
                               __ptext133 18F1                                 __ptext125 1791  
                               __ptext117 0B98                                 __ptext109 1901  
                                ?___ftadd 0042                                 __ptext142 1967  
                               __ptext134 18D8                                 __ptext126 1973  
                               __ptext118 1929                                 __ptext143 11B2  
                               __ptext135 1B8E                                 __ptext127 1404  
                               __ptext119 0E91                                 __ptext144 1171  
                               __ptext136 12B8                                 __ptext128 0800  
                               __ptext145 19D3                                 __ptext137 18AD  
                               __ptext129 1355                                 __ptext146 1DCF  
                               __ptext139 1E11                                 _getRxData 08C8  
                                ?___ftdiv 002F                                  ?___ftneg 003F  
                                ?___ftmul 002F                                  ?___fttol 004F  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0021  
                 __end_of_setRFSW_Control 12B8                          ??_setProductData 0064  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 18B0                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0022                        __end_of_TouchPower 1B78  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0024  
      __end_of_getDimmerIntr_DimmingValue 1B8E              ??_setDimmerIntr_DimmingValue 0064  
              _getDimmerIntr_DimmingValue 1B78                    CC2500_WriteByte@loop_a 0022  
          __size_of_setDimmerLights_OnOff 00C7                                 _r_address 013E  
           __end_of_setDimmerLights_OnOff 07BB            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 10B7  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1013  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                           _SwPointSelect 1BEA                       __end_of_setLED_Main 1275  
                        ??_getDelayOff_GO 0023                    ??_setRF_Initialization 0021  
             __end_of_Temp_Initialization 18BC                         _CC2500_rfSettings 182F  
                          ___wmul@product 0025                                  _LED_Main 19A3  
                         SwPointSelect@sw 0022                                 clear_ram0 18E4  
                CC2500_InitPATable@loop_d 0028                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 10B7                                 _setTxData 0F45  
                  _Flash_Memory_Main$3300 0029       __end_of_DimmerLights_Initialization 1946  
             _DimmerLights_Initialization 193B                        _CC2500_ClearRXFIFO 18C7  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 18CB  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1B24                         ??_Timeout_Counter 0021  
                              ?_getBuz_GO 0021                  setRF_DimmerLights@status 0069  
    __size_of_setDimmerIntr_ControlStatus 002F               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 0017                        _Flash_Memory_Write 1F9E  
                              ?_getRxData 0070                              ??_getLoad_AD 0025  
                                _TMR1_ISR 1E11                    CC2500_InitSetREG@temp1 0027  
                  CC2500_InitSetREG@temp2 0028                              ??_getLoad_OK 0021  
                                _TMR1_Set 19AF                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1AC3  
                                _RF_Count 0134                      __end_of_RF_RxDisable 19EF  
                            ??_getTemp_AD 0025               __end_of_CC2500_WriteCommand 1C67  
                  ??_CC2500_FrequencyCabr 0027                                  _WDT_Main 1A9E  
                 DlyOff_Initialization@sw 0023                     getSw_KeyStatus@status 0024  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0021  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00AE  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00D4                              setSw_Main@sw 0035  
                             ??_Load_Main 0029                          __size_of_IOC_ISR 000C  
          getMain_All_Error_Status@status 0027                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1997                            ?_SwPointSelect 0070  
                             getAD@adcon0 0024                               getAD@adcon1 0021  
                          setLED_Main@led 0025                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 1047                     _DlyOff_Initialization 18D8  
       __size_of_getMain_All_LightsStatus 0013                      ??_CC2500_ClearRXFIFO 0025  
                                _Division 19D3                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0025                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1F6F  
             setDimmerLights_OnOff@lights 00E8                  _setDimmerIntr_Dimming_Sw 1F15  
                                _Fosc_Set 18BF                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 00E6                        __end_of_getLoad_AD 09AC  
                      __end_of_getLoad_OK 1909                     _Switch_Initialization 1921  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0021  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 1171                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1C1A  
                       getLoad_AD@channel 0027       __size_of_DimmerLights_SelectPointer 0017  
                    ??_setRF_TransceiveGO 0021                                  _SwDetect 013D  
                             ??_Temp_Main 0067                          getCmd_Status@cmd 0022  
                        setCmd_Status@cmd 0021                         setRFSW_Control@sw 00E7  
           _getMain_All_Error_Status$6893 0022             _getMain_All_Error_Status$6894 0024  
                __end_of_getDimmer_LoadGO 1911                       _Load_Initialization 18B0  
        ??_getDimmerLights_ValueToPercent 005D           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0024                              _setTemp_Main 0DE3  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0031  
                                ___awtoft 1E33                          ??_LedPointSelect 0021  
                                ___ftpack 14BE             __size_of_getMain_Lights_Count 0012  
                  getDimmer_LoadGO@loadgo 0021                         getTemp_AD@channel 0026  
                            ??_setRF_Main 00EA                      CC2500_WriteREG@value 0023  
                             _setLED_Main 1234                __end_of_setRF_DimmerLights 164E  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0024                          getDelayOff_GO@sw 0023  
           __end_of_getDimmer_Load_Status 1919                          setDelayOff_GO@sw 006D  
                         ___lwdiv@divisor 0021                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0028                                  __ptext10 18B9  
                                __ptext11 07FF                                  __ptext20 1B4E  
                                __ptext12 195C                                  __ptext21 1921  
                                __ptext13 0204                                  __ptext30 0A92  
                                __ptext22 1919                                  __ptext14 1B10  
                                __ptext31 1C82                                  __ptext23 18B6  
                                __ptext15 1EC3                                  __ptext40 18CF  
                                __ptext32 1A33                                  __ptext24 0555  
                                __ptext16 1D30                                  __ptext41 07BB  
                                __ptext33 1A22                                  __ptext25 08C8  
                                __ptext17 1BEA                                  __ptext50 18C3  
                                __ptext42 1EEB                                  __ptext34 19E0  
                                __ptext26 1013                                  __ptext18 1B63  
                                __ptext51 1B24                                  __ptext43 1D11  
                                __ptext35 16B6                                  __ptext27 1AE9  
                                __ptext19 18D3                                  __ptext60 18BF  
                                __ptext52 1C1A                                  __ptext44 1E55  
                                __ptext36 1723                                  __ptext28 0CAB  
                                __ptext61 18EA                                  __ptext53 18B3  
                                __ptext45 19C7                                  __ptext37 1E78  
                                __ptext29 1275                                  __ptext70 1C9D  
                                __ptext62 0052                                  __ptext54 1951  
                                __ptext46 1E9D                                  __ptext38 1CD6  
                                __ptext71 19A3                                  __ptext63 1A7A  
                                __ptext55 1A8C                                  __ptext47 18CB  
                                __ptext39 1B39                                  __ptext80 197F  
                                __ptext72 1234                                  __ptext64 1911  
                                __ptext56 19BB                                  __ptext48 18C7  
                                __ptext81 1F9E                                  __ptext73 1997  
                                __ptext65 1909                                  __ptext57 19AF  
                                __ptext49 1C4D                                  __ptext90 1D4F  
                                __ptext82 1932                                  __ptext74 1A68  
                                __ptext66 1DF0                                  __ptext58 1C67  
                                __ptext91 1F6F                                  __ptext83 1C33  
                                __ptext75 11F3                                  __ptext67 1CF3  
                                __ptext59 1946                                  __ptext92 1BD3  
                                __ptext84 047E                                  __ptext76 1A11  
                                __ptext68 1047                                  __ptext93 1F40  
                                __ptext85 1AFC                                  __ptext77 0B12  
                                __ptext69 18B0                                  __ptext94 0C1F  
                                __ptext86 1D6F                                  __ptext78 198B  
                                __ptext95 1A56                                  __ptext87 164E  
                                __ptext79 062A                                  __ptext96 1C01  
                                __ptext88 06F4                                  __ptext97 1AD6  
                                __ptext89 1302                                  __ptext98 1A00  
                                __ptext99 1A44                                  __product 0245  
                 ??_setLED_Initialization 0025                  ??_getDimmerLights_Status 0023  
            __end_of_getDimmerLights_Line 1B10              __end_of_setDimmerLights_Main 16B6  
            __end_of_setDimmerLights_Line 1CD6                        _DimmerLights_IOC_1 1171  
                      _DimmerLights_IOC_2 11B2              __end_of_setDimmerLights_SwOn 1460  
                            ??_setSw_Main 0033                    ??_setRF_TimeoutCleared 0021  
            ??_setDimmerLights_DimmingRun 0024                             setLED@command 0023  
                           __size_of_main 005B                               _setRF_Learn 1B10  
      __size_of_DimmerIntr_Initialization 006F                           ??_getCmd_Status 0021  
                      _DimmerLights_TMR_1 09AC                        _DimmerLights_TMR_2 0A1F  
                __end_of_CC2500_SIDLEMode 18D3                setDimmerLights_Main@lights 00E9  
             __end_of_DelayOffPointSelect 1BA5                CC2500_WriteCommand@command 0024  
                         _CC2500_ReadByte 1CD6                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1D11                  __end_of_setMemory_Modify 1AC3  
    _getAll_DimmerIntr_Dimming_Sw_RF$2286 0022      _getAll_DimmerIntr_Dimming_Sw_RF$2287 0023  
                     ?_DimmerLights_IOC_1 0070                       ?_DimmerLights_IOC_2 0070  
                      __end_of_setRF_Main 062A                               ??_getBuz_GO 0023  
                     ?_DimmerLights_TMR_1 0070                       ?_DimmerLights_TMR_2 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00E8                              getLoad_OK@ok 0021  
              __end_of_RF_Timeout_Counter 1B39               Flash_Memory_Main@key_Status 0028  
                _getAll_Sw_KeyStatus$6155 0023                                  main@argc 0265  
                                main@argv 0267                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6151 0022                      _getSw_KeyStatus$6152 0023  
     getDimmerLights_ValueToPercent@value 005F                           _CC2500_PowerRST 07BB  
                __size_of_getSw_KeyStatus 001F              setDimmerLights_Dimming@value 00E5  
      __end_of_setDimmerIntr_DimmingValue 1BEA                _setDimmerIntr_DimmingValue 1BD3  
             __end_of_Flash_Memory_Modify 0B98              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 1013               __end_of_Flash_Memory_Unlock 193B  
                         ??_SwPointSelect 0021                           _CC2500_WriteREG 1E55  
                      __end_of_setSw_Main 0388                     ??_Load_Initialization 0023  
                    ??_DimmerLights_IOC_1 007A                      ??_DimmerLights_IOC_2 007A  
         getDimmerLights_PercentToValue@i 0060       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 0371                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                      ??_DimmerLights_TMR_2 0070  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0021                setDimmerLights_Line@lights 0021  
                 setDimmerLights_SwOff@sw 0023               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0026  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 006A  
                         setDelayOff_GO@j 006B                           setDelayOff_GO@k 006C  
                 ??_CC2500_PowerOnInitial 002A                     setTemp_Main@SafeValue 00E7  
  __end_of_setDimmerLights_Initialization 18AD   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 18AC                ?_setDimmerIntr_MaxmumValue 0063  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0021  
                  CC2500_InitPATable@temp 0027                           getLoad_AD@ADRES 002A  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 18B3  
                             getLoad_AD@i 002C                               getLoad_AD@j 0029  
                             getLoad_AD@k 0028                      _Flash_Memory_Erasing 198B  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D7  
                 __size_of_Exception_Main 00D7                             Division@value 0078  
         __end_of_DelayOff_Initialization 18F9                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1901                       ??_RF_Initialization 0022  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C1F  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 008F  
        __size_of_setDimmerLights_Dimming 005E               getDimmer_Load_Status@status 0021  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0066                     setMemory_Data@address 0023  
                   __end_of_DelayTime_1us 1EC3                   __end_of_CC2500_ReadByte 1CF3  
            __end_of_setSw_Initialization 1921                           _Timeout_Counter 1B4E  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 0060  
                            _RF_RxDisable 19E0          Flash_Memory_Initialization@value 0026  
              __end_of_LED_Initialization 19A3            __end_of_setTemp_Initialization 0800  
                             Division@num 0075                   setMemory_Modify@command 0022  
                 DimmerLights_IOC_1@count 007C                   DimmerLights_IOC_2@count 007C  
               __end_of_RF_Initialization 18B6                     __end_of_CC2500_RxData 1791  
                   __end_of_CC2500_TxData 1723                     _setLoad_AH_AL_Restore 1C9D  
                 __end_of_CC2500_PowerRST 07FF  
