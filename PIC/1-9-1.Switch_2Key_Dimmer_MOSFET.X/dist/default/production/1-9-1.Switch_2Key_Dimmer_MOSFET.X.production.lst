

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Feb 03 14:27:46 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943  0000                     	;# 
  1944  0001                     	;# 
  1945  0002                     	;# 
  1946  0003                     	;# 
  1947  0004                     	;# 
  1948  0005                     	;# 
  1949  0006                     	;# 
  1950  0007                     	;# 
  1951  0008                     	;# 
  1952  0009                     	;# 
  1953  000A                     	;# 
  1954  000B                     	;# 
  1955  000C                     	;# 
  1956  000D                     	;# 
  1957  000E                     	;# 
  1958  0010                     	;# 
  1959  0011                     	;# 
  1960  0012                     	;# 
  1961  0015                     	;# 
  1962  0016                     	;# 
  1963  0016                     	;# 
  1964  0017                     	;# 
  1965  0018                     	;# 
  1966  0019                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001C                     	;# 
  1970  008C                     	;# 
  1971  008D                     	;# 
  1972  008E                     	;# 
  1973  0090                     	;# 
  1974  0091                     	;# 
  1975  0092                     	;# 
  1976  0095                     	;# 
  1977  0096                     	;# 
  1978  0097                     	;# 
  1979  0099                     	;# 
  1980  009A                     	;# 
  1981  009B                     	;# 
  1982  009B                     	;# 
  1983  009C                     	;# 
  1984  009D                     	;# 
  1985  009E                     	;# 
  1986  010C                     	;# 
  1987  010D                     	;# 
  1988  010E                     	;# 
  1989  0116                     	;# 
  1990  0117                     	;# 
  1991  011D                     	;# 
  1992  018C                     	;# 
  1993  018D                     	;# 
  1994  018E                     	;# 
  1995  0191                     	;# 
  1996  0191                     	;# 
  1997  0192                     	;# 
  1998  0193                     	;# 
  1999  0193                     	;# 
  2000  0194                     	;# 
  2001  0195                     	;# 
  2002  0196                     	;# 
  2003  0197                     	;# 
  2004  0199                     	;# 
  2005  019A                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019C                     	;# 
  2011  019C                     	;# 
  2012  019D                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  020D                     	;# 
  2016  0210                     	;# 
  2017  0211                     	;# 
  2018  0211                     	;# 
  2019  0212                     	;# 
  2020  0212                     	;# 
  2021  0213                     	;# 
  2022  0213                     	;# 
  2023  0214                     	;# 
  2024  0214                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0216                     	;# 
  2029  0216                     	;# 
  2030  0217                     	;# 
  2031  0217                     	;# 
  2032  0291                     	;# 
  2033  0291                     	;# 
  2034  0292                     	;# 
  2035  0293                     	;# 
  2036  0298                     	;# 
  2037  0298                     	;# 
  2038  0299                     	;# 
  2039  029A                     	;# 
  2040  0394                     	;# 
  2041  0395                     	;# 
  2042  0396                     	;# 
  2043  0FE4                     	;# 
  2044  0FE5                     	;# 
  2045  0FE6                     	;# 
  2046  0FE7                     	;# 
  2047  0FE8                     	;# 
  2048  0FE9                     	;# 
  2049  0FEA                     	;# 
  2050  0FEB                     	;# 
  2051  0FED                     	;# 
  2052  0FEE                     	;# 
  2053  0FEF                     	;# 
  2054  0000                     	;# 
  2055  0001                     	;# 
  2056  0002                     	;# 
  2057  0003                     	;# 
  2058  0004                     	;# 
  2059  0005                     	;# 
  2060  0006                     	;# 
  2061  0007                     	;# 
  2062  0008                     	;# 
  2063  0009                     	;# 
  2064  000A                     	;# 
  2065  000B                     	;# 
  2066  000C                     	;# 
  2067  000D                     	;# 
  2068  000E                     	;# 
  2069  0010                     	;# 
  2070  0011                     	;# 
  2071  0012                     	;# 
  2072  0015                     	;# 
  2073  0016                     	;# 
  2074  0016                     	;# 
  2075  0017                     	;# 
  2076  0018                     	;# 
  2077  0019                     	;# 
  2078  001A                     	;# 
  2079  001B                     	;# 
  2080  001C                     	;# 
  2081  008C                     	;# 
  2082  008D                     	;# 
  2083  008E                     	;# 
  2084  0090                     	;# 
  2085  0091                     	;# 
  2086  0092                     	;# 
  2087  0095                     	;# 
  2088  0096                     	;# 
  2089  0097                     	;# 
  2090  0099                     	;# 
  2091  009A                     	;# 
  2092  009B                     	;# 
  2093  009B                     	;# 
  2094  009C                     	;# 
  2095  009D                     	;# 
  2096  009E                     	;# 
  2097  010C                     	;# 
  2098  010D                     	;# 
  2099  010E                     	;# 
  2100  0116                     	;# 
  2101  0117                     	;# 
  2102  011D                     	;# 
  2103  018C                     	;# 
  2104  018D                     	;# 
  2105  018E                     	;# 
  2106  0191                     	;# 
  2107  0191                     	;# 
  2108  0192                     	;# 
  2109  0193                     	;# 
  2110  0193                     	;# 
  2111  0194                     	;# 
  2112  0195                     	;# 
  2113  0196                     	;# 
  2114  0197                     	;# 
  2115  0199                     	;# 
  2116  019A                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019C                     	;# 
  2122  019C                     	;# 
  2123  019D                     	;# 
  2124  019E                     	;# 
  2125  019F                     	;# 
  2126  020D                     	;# 
  2127  0210                     	;# 
  2128  0211                     	;# 
  2129  0211                     	;# 
  2130  0212                     	;# 
  2131  0212                     	;# 
  2132  0213                     	;# 
  2133  0213                     	;# 
  2134  0214                     	;# 
  2135  0214                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0216                     	;# 
  2140  0216                     	;# 
  2141  0217                     	;# 
  2142  0217                     	;# 
  2143  0291                     	;# 
  2144  0291                     	;# 
  2145  0292                     	;# 
  2146  0293                     	;# 
  2147  0298                     	;# 
  2148  0298                     	;# 
  2149  0299                     	;# 
  2150  029A                     	;# 
  2151  0394                     	;# 
  2152  0395                     	;# 
  2153  0396                     	;# 
  2154  0FE4                     	;# 
  2155  0FE5                     	;# 
  2156  0FE6                     	;# 
  2157  0FE7                     	;# 
  2158  0FE8                     	;# 
  2159  0FE9                     	;# 
  2160  0FEA                     	;# 
  2161  0FEB                     	;# 
  2162  0FED                     	;# 
  2163  0FEE                     	;# 
  2164  0FEF                     	;# 
  2165                           
  2166                           	psect	idataBANK4
  2167  1DEA                     __pidataBANK4:	
  2168                           
  2169                           ;initializer for __product
  2170  1DEA  3463               	retlw	99
  2171  1DEB  3402               	retlw	2
  2172  1DEC  3400               	retlw	0
  2173  1DED  3400               	retlw	0
  2174  1DEE  3400               	retlw	0
  2175  1DEF  3400               	retlw	0
  2176  1DF0  3400               	retlw	0
  2177  1DF1  3400               	retlw	0
  2178  1DF2  3400               	retlw	0
  2179  1DF3  3400               	retlw	0
  2180  1DF4  3400               	retlw	0
  2181  1DF5  3400               	retlw	0
  2182  1DF6  34FF               	retlw	255
  2183  1DF7  34FF               	retlw	255
  2184  1DF8  34FF               	retlw	255
  2185  1DF9  3400               	retlw	0
  2186  1DFA  3400               	retlw	0
  2187  1DFB  3400               	retlw	0
  2188  1DFC  3400               	retlw	0
  2189  1DFD  3400               	retlw	0
  2190  1DFE  3400               	retlw	0
  2191  1DFF  3400               	retlw	0
  2192  1E00  3400               	retlw	0
  2193  1E01  3400               	retlw	0
  2194  1E02  3400               	retlw	0
  2195  1E03  3400               	retlw	0
  2196  1E04  3400               	retlw	0
  2197  1E05  3400               	retlw	0
  2198  1E06  3400               	retlw	0
  2199  1E07  3400               	retlw	0
  2200  1E08  3400               	retlw	0
  2201  1E09  3400               	retlw	0
  2202                           
  2203                           	psect	stringtext
  2204  1800                     __pstringtext:	
  2205  1800                     _CC2500_registers_address:	
  2206  1800  3403               	retlw	3
  2207  1801  3416               	retlw	22
  2208  1802  3417               	retlw	23
  2209  1803  341E               	retlw	30
  2210  1804  341F               	retlw	31
  2211  1805  3420               	retlw	32
  2212  1806  342A               	retlw	42
  2213  1807  342B               	retlw	43
  2214  1808  340B               	retlw	11
  2215  1809  340C               	retlw	12
  2216  180A  340D               	retlw	13
  2217  180B  340E               	retlw	14
  2218  180C  340F               	retlw	15
  2219  180D  3410               	retlw	16
  2220  180E  3411               	retlw	17
  2221  180F  3412               	retlw	18
  2222  1810  3413               	retlw	19
  2223  1811  3414               	retlw	20
  2224  1812  340A               	retlw	10
  2225  1813  3415               	retlw	21
  2226  1814  3421               	retlw	33
  2227  1815  3422               	retlw	34
  2228  1816  3418               	retlw	24
  2229  1817  3419               	retlw	25
  2230  1818  341A               	retlw	26
  2231  1819  341B               	retlw	27
  2232  181A  341C               	retlw	28
  2233  181B  341D               	retlw	29
  2234  181C  3423               	retlw	35
  2235  181D  3424               	retlw	36
  2236  181E  3425               	retlw	37
  2237  181F  3426               	retlw	38
  2238  1820  3429               	retlw	41
  2239  1821  342C               	retlw	44
  2240  1822  342D               	retlw	45
  2241  1823  342E               	retlw	46
  2242  1824  3400               	retlw	0
  2243  1825  3401               	retlw	1
  2244  1826  3402               	retlw	2
  2245  1827  3407               	retlw	7
  2246  1828  3408               	retlw	8
  2247  1829  3409               	retlw	9
  2248  182A  3406               	retlw	6
  2249  182B  3404               	retlw	4
  2250  182C  3405               	retlw	5
  2251  182D  3427               	retlw	39
  2252  182E  3428               	retlw	40
  2253  182F                     __end_of_CC2500_registers_address:	
  2254  182F                     _CC2500_rfSettings:	
  2255  182F  3407               	retlw	7
  2256  1830  3407               	retlw	7
  2257  1831  3430               	retlw	48
  2258  1832  3487               	retlw	135
  2259  1833  346B               	retlw	107
  2260  1834  34F8               	retlw	248
  2261  1835  347F               	retlw	127
  2262  1836  343F               	retlw	63
  2263  1837  3409               	retlw	9
  2264  1838  3400               	retlw	0
  2265  1839  345C               	retlw	92
  2266  183A  34A7               	retlw	167
  2267  183B  3462               	retlw	98
  2268  183C  3486               	retlw	134
  2269  183D  3483               	retlw	131
  2270  183E  3403               	retlw	3
  2271  183F  3422               	retlw	34
  2272  1840  34F8               	retlw	248
  2273  1841  3400               	retlw	0
  2274  1842  3444               	retlw	68
  2275  1843  34B6               	retlw	182
  2276  1844  3410               	retlw	16
  2277  1845  3418               	retlw	24
  2278  1846  341D               	retlw	29
  2279  1847  341C               	retlw	28
  2280  1848  34C7               	retlw	199
  2281  1849  3400               	retlw	0
  2282  184A  34B2               	retlw	178
  2283  184B  34EA               	retlw	234
  2284  184C  340A               	retlw	10
  2285  184D  3400               	retlw	0
  2286  184E  3411               	retlw	17
  2287  184F  3459               	retlw	89
  2288  1850  3488               	retlw	136
  2289  1851  3431               	retlw	49
  2290  1852  340B               	retlw	11
  2291  1853  342F               	retlw	47
  2292  1854  342E               	retlw	46
  2293  1855  3406               	retlw	6
  2294  1856  3404               	retlw	4
  2295  1857  3405               	retlw	5
  2296  1858  3400               	retlw	0
  2297  1859  3430               	retlw	48
  2298  185A  34D3               	retlw	211
  2299  185B  3491               	retlw	145
  2300  185C  3441               	retlw	65
  2301  185D  3400               	retlw	0
  2302  185E                     __end_of_CC2500_rfSettings:	
  2303  185E                     _CC2500_patable_vaule:	
  2304  185E  34FE               	retlw	254
  2305  185F  34FE               	retlw	254
  2306  1860  34FE               	retlw	254
  2307  1861  34FE               	retlw	254
  2308  1862  34FE               	retlw	254
  2309  1863  34FE               	retlw	254
  2310  1864  34FE               	retlw	254
  2311  1865  34FE               	retlw	254
  2312  1866                     __end_of_CC2500_patable_vaule:	
  2313                           
  2314                           	psect	nvBANK1
  2315  00ED                     __pnvBANK1:	
  2316  00ED                     _product:	
  2317  00ED                     	ds	1
  2318  000C                     _PORTA	set	12
  2319  000D                     _PORTB	set	13
  2320  000E                     _PORTC	set	14
  2321  0018                     _T1CON	set	24
  2322  0017                     _TMR1H	set	23
  2323  0016                     _TMR1L	set	22
  2324  005F                     _GIE	set	95
  2325  005B                     _IOCIE	set	91
  2326  0058                     _IOCIF	set	88
  2327  005E                     _PEIE	set	94
  2328  0060                     _RA0	set	96
  2329  0063                     _RA3	set	99
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006A                     _RB2	set	106
  2336  006B                     _RB3	set	107
  2337  006C                     _RB4	set	108
  2338  006D                     _RB5	set	109
  2339  0070                     _RC0	set	112
  2340  0071                     _RC1	set	113
  2341  0072                     _RC2	set	114
  2342  0074                     _RC4	set	116
  2343  0075                     _RC5	set	117
  2344  0077                     _RC7	set	119
  2345  0088                     _TMR1IF	set	136
  2346  009D                     _ADCON0	set	157
  2347  009E                     _ADCON1	set	158
  2348  009C                     _ADRESH	set	156
  2349  009B                     _ADRESL	set	155
  2350  0099                     _OSCCON	set	153
  2351  008C                     _TRISA	set	140
  2352  008D                     _TRISB	set	141
  2353  008E                     _TRISC	set	142
  2354  0097                     _WDTCON	set	151
  2355  04E9                     _GO_nDONE	set	1257
  2356  0488                     _TMR1IE	set	1160
  2357  0117                     _FVRCON	set	279
  2358  010C                     _LATA	set	268
  2359  010D                     _LATB	set	269
  2360  010E                     _LATC	set	270
  2361  018C                     _ANSELA	set	396
  2362  018D                     _ANSELB	set	397
  2363  018E                     _ANSELC	set	398
  2364  0192                     _PMADRH	set	402
  2365  0191                     _PMADRL	set	401
  2366  0196                     _PMCON2	set	406
  2367  0194                     _PMDATH	set	404
  2368  0193                     _PMDATL	set	403
  2369  0CAE                     _CFGS	set	3246
  2370  0CAC                     _FREE	set	3244
  2371  0CAD                     _LWLO	set	3245
  2372  0CA8                     _RD	set	3240
  2373  0CA9                     _WR	set	3241
  2374  0CAA                     _WREN	set	3242
  2375  020D                     _WPUB	set	525
  2376  0396                     _IOCBF	set	918
  2377  0395                     _IOCBN	set	917
  2378  0394                     _IOCBP	set	916
  2379  1CB2                     _IOCBF2	set	7346
  2380                           
  2381                           ; #config settings
  2382  0000                     
  2383                           	psect	cinit
  2384  0022                     start_initialization:	
  2385  0022                     __initialization:	
  2386                           
  2387                           ; Clear objects allocated to BITBANK0
  2388  0022  01EE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BANK1
  2391  0023  30A0               	movlw	low __pbssBANK1
  2392  0024  0084               	movwf	4
  2393  0025  3000               	movlw	high __pbssBANK1
  2394  0026  0085               	movwf	5
  2395  0027  3045               	movlw	69
  2396  0028  3199  2162  3180   	fcall	clear_ram0
  2397                           
  2398                           ; Clear objects allocated to BANK2
  2399  002B  3020               	movlw	low __pbssBANK2
  2400  002C  0084               	movwf	4
  2401  002D  3001               	movlw	high __pbssBANK2
  2402  002E  0085               	movwf	5
  2403  002F  3050               	movlw	80
  2404  0030  3199  2162  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Clear objects allocated to BANK3
  2407  0033  30A0               	movlw	low __pbssBANK3
  2408  0034  0084               	movwf	4
  2409  0035  3001               	movlw	high __pbssBANK3
  2410  0036  0085               	movwf	5
  2411  0037  304E               	movlw	78
  2412  0038  3199  2162  3180   	fcall	clear_ram0
  2413                           
  2414                           ; Clear objects allocated to BANK4
  2415  003B  3020               	movlw	low __pbssBANK4
  2416  003C  0084               	movwf	4
  2417  003D  3002               	movlw	high __pbssBANK4
  2418  003E  0085               	movwf	5
  2419  003F  3025               	movlw	37
  2420  0040  3199  2162  3180   	fcall	clear_ram0
  2421                           
  2422                           ; Initialize objects allocated to BANK4
  2423  0043  30EA               	movlw	low __pidataBANK4
  2424  0044  0084               	movwf	4
  2425  0045  309D               	movlw	(high __pidataBANK4)| (0+128)
  2426  0046  0085               	movwf	5
  2427  0047  3045               	movlw	low __pdataBANK4
  2428  0048  0086               	movwf	6
  2429  0049  3002               	movlw	high __pdataBANK4
  2430  004A  0087               	movwf	7
  2431  004B  3020               	movlw	32
  2432  004C  3199  215C         	fcall	init_ram
  2433  004E                     end_of_initialization:	
  2434                           ;End of C runtime variable initialization code
  2435                           
  2436  004E                     __end_of__initialization:	
  2437  004E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2438  004F  0020               	movlb	0
  2439  0050  3195  2D51         	ljmp	_main	;jump to C main() function
  2440                           
  2441                           	psect	bitbssBANK0
  2442  0370                     __pbitbssBANK0:	
  2443  0370                     _Receive_OK:	
  2444  0370                     	ds	1
  2445  0371                     _Transceive_OK:	
  2446  0371                     	ds	1
  2447                           
  2448                           	psect	bssBANK1
  2449  00A0                     __pbssBANK1:	
  2450  00A0                     _RF1:	
  2451  00A0                     	ds	14
  2452  00AE                     _DimmerIntr1:	
  2453  00AE                     	ds	12
  2454  00BA                     _DimmerIntr2:	
  2455  00BA                     	ds	12
  2456  00C6                     _Timer1:	
  2457  00C6                     	ds	3
  2458  00C9                     _WDT:	
  2459  00C9                     	ds	2
  2460  00CB                     _CRC:	
  2461  00CB                     	ds	1
  2462  00CC                     _Cmd:	
  2463  00CC                     	ds	1
  2464  00CD                     _DelayOff:	
  2465  00CD                     	ds	1
  2466  00CE                     _DimmerIntr:	
  2467  00CE                     	ds	1
  2468  00CF                     _DimmerLights:	
  2469  00CF                     	ds	1
  2470  00D0                     _LED:	
  2471  00D0                     	ds	1
  2472  00D1                     _Light:	
  2473  00D1                     	ds	1
  2474  00D2                     _RSSI:	
  2475  00D2                     	ds	1
  2476  00D3                     _Rx_Length:	
  2477  00D3                     	ds	1
  2478  00D4                     _SPI0Buffer:	
  2479  00D4                     	ds	1
  2480  00D5                     _Sw:	
  2481  00D5                     	ds	1
  2482  00D6                     _SwDetect:	
  2483  00D6                     	ds	1
  2484  00D7                     _Tx_Length:	
  2485  00D7                     	ds	1
  2486  00D8                     _r_address:	
  2487  00D8                     	ds	1
  2488  00D9                     _r_data:	
  2489  00D9                     	ds	1
  2490  00DA                     _s_data:	
  2491  00DA                     	ds	1
  2492  00DB                     _Temp:	
  2493  00DB                     	ds	10
  2494                           
  2495                           	psect	bssBANK2
  2496  0120                     __pbssBANK2:	
  2497  0120                     _myMain:	
  2498  0120                     	ds	13
  2499  012D                     _Buz1:	
  2500  012D                     	ds	12
  2501  0139                     _Dimmer:	
  2502  0139                     	ds	5
  2503  013E                     _RF_Count:	
  2504  013E                     	ds	2
  2505  0140                     _Load:	
  2506  0140                     	ds	40
  2507  0168                     _DimmerLights1:	
  2508  0168                     	ds	8
  2509                           
  2510                           	psect	bssBANK3
  2511  01A0                     __pbssBANK3:	
  2512  01A0                     _RF_Data:	
  2513  01A0                     	ds	30
  2514  01BE                     _Sw1:	
  2515  01BE                     	ds	9
  2516  01C7                     _Sw2:	
  2517  01C7                     	ds	9
  2518  01D0                     _DimmerLights2:	
  2519  01D0                     	ds	8
  2520  01D8                     _DlySw1:	
  2521  01D8                     	ds	5
  2522  01DD                     _DlySw2:	
  2523  01DD                     	ds	5
  2524  01E2                     _VarErrLED:	
  2525  01E2                     	ds	4
  2526  01E6                     _VarLED1:	
  2527  01E6                     	ds	4
  2528  01EA                     _VarLED2:	
  2529  01EA                     	ds	4
  2530                           
  2531                           	psect	bssBANK4
  2532  0220                     __pbssBANK4:	
  2533  0220                     _Memory:	
  2534  0220                     	ds	37
  2535                           
  2536                           	psect	dataBANK4
  2537  0245                     __pdataBANK4:	
  2538  0245                     __product:	
  2539  0245                     	ds	32
  2540                           
  2541                           	psect	clrtext
  2542  1962                     clear_ram0:	
  2543                           ;	Called with FSR0 containing the base address, and
  2544                           ;	WREG with the size to clear
  2545                           
  2546  1962  0064               	clrwdt	;clear the watchdog before getting into this loop
  2547  1963                     clrloop0:	
  2548  1963  0180               	clrf	0	;clear RAM location pointed to by FSR
  2549  1964  3101               	addfsr 0,1
  2550  1965  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2551  1966  2963               	goto	clrloop0	;have we reached the end yet?
  2552  1967  3400               	retlw	0	;all done for this memory range, return
  2553                           
  2554                           	psect	inittext
  2555  195C                     init_ram:	
  2556  195C  00FE               	movwf	126
  2557  195D                     initloop:	
  2558  195D  0012               	moviw fsr0++
  2559  195E  001E               	movwi fsr1++
  2560  195F  0BFE               	decfsz	126,f
  2561  1960  295D               	goto	initloop
  2562  1961  3400               	retlw	0
  2563                           
  2564                           	psect	cstackBANK4
  2565  0265                     __pcstackBANK4:	
  2566  0265                     ?_main:	
  2567  0265                     main@argc:	
  2568                           ; 2 bytes @ 0x0
  2569                           
  2570                           
  2571                           ; 2 bytes @ 0x0
  2572  0265                     	ds	2
  2573  0267                     main@argv:	
  2574                           
  2575                           ; 2 bytes @ 0x2
  2576  0267                     	ds	2
  2577                           
  2578                           	psect	cstackBANK1
  2579  00E5                     __pcstackBANK1:	
  2580  00E5                     ?_setDimmerLights_OnOff:	
  2581  00E5                     ??_setRFSW_Control:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  00E5                     setDimmerLights_OnOff@command:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  00E5                     setTemp_Main@error:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590                           
  2591                           ; 1 bytes @ 0x0
  2592  00E5                     	ds	1
  2593  00E6                     ??_setDimmerLights_OnOff:	
  2594  00E6                     setTemp_Main@TempGO:	
  2595                           ; 0 bytes @ 0x1
  2596                           
  2597  00E6                     setRFSW_Control@status:	
  2598                           ; 1 bytes @ 0x1
  2599                           
  2600                           
  2601                           ; 1 bytes @ 0x1
  2602  00E6                     	ds	1
  2603  00E7                     setRFSW_Control@sw:	
  2604  00E7                     setTemp_Main@SafeValue:	
  2605                           ; 1 bytes @ 0x2
  2606                           
  2607                           
  2608                           ; 2 bytes @ 0x2
  2609  00E7                     	ds	1
  2610  00E8                     ??_getRxData:	
  2611  00E8                     setDimmerLights_OnOff@lights:	
  2612                           ; 0 bytes @ 0x3
  2613                           
  2614                           
  2615                           ; 1 bytes @ 0x3
  2616  00E8                     	ds	1
  2617  00E9                     setDimmerLights_Main@lights:	
  2618  00E9                     getRxData@error:	
  2619                           ; 1 bytes @ 0x4
  2620                           
  2621  00E9                     setTemp_Main@DangerValue:	
  2622                           ; 1 bytes @ 0x4
  2623                           
  2624                           
  2625                           ; 2 bytes @ 0x4
  2626  00E9                     	ds	1
  2627  00EA                     ??_setRF_Main:	
  2628                           
  2629                           ; 0 bytes @ 0x5
  2630  00EA                     	ds	1
  2631  00EB                     setRF_Main@error:	
  2632  00EB                     setTemp_Main@AD:	
  2633                           ; 1 bytes @ 0x6
  2634                           
  2635                           
  2636                           ; 2 bytes @ 0x6
  2637  00EB                     	ds	2
  2638                           
  2639                           	psect	cstackCOMMON
  2640  0070                     __pcstackCOMMON:	
  2641  0070                     ?_CC2500_WriteCommand:	
  2642  0070                     ?_RF_Timeout_Counter:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setRF_TimeoutCleared:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_CC2500_WriteByte:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_CC2500_ReadStatus:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_CC2500_ReadByte:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_CC2500_PowerRST:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_CC2500_InitSetREG:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_CC2500_InitPATable:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_CC2500_ClearTXFIFO:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_CC2500_ClearRXFIFO:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_CC2500_FrequencyCabr:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_CC2500_SIDLEMode:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_DlyOff_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_DlyOff_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setDimmerLights_SwOn:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setDimmerLights_SwOff:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_setDimmerLights_Initialization:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_setDimmerLights_Main:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setDimmerLights_Line:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_setTxData:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_setRF_TransceiveGO:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setLED_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setLED_Main:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Fosc_Set:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_IO_Set:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_TMR1_Set:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_ADC_Set:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_IOC_Set:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_WDT_Set:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_TMR1_ISR:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_IOC_ISR:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Timeout_Counter:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_set_TimeoutCleared:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_Flash_Memory_Write:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Flash_Memory_Modify:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_WDT_Clearing:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_setLoad_AH_AL_Restore:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_setTemp_Initialization:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setTemp_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setRF_Initialization:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setRF_Main:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_RF_RxDisable:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_getRxData:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setLog_Code:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setControl_Lights_Table:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setRFSW_Control:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_setRFSW_AdjControl:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_setSw_Initialization:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_setSw_Main:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_myMain_Initialization:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_my_MainTimer:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_Exception_Main:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_Buzzer_Initialization:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_Buzzer_Main:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_CC2500_TxData:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_CC2500_RxData:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_CC2500_PowerOnInitial:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DelayOffPointSelect:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_DelayOff_Initialization:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_DelayOff_Main:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_DimmerIntr_Initialization:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_DimmerLights_SelectPointer:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_DimmerLights_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_setDimmerLights_DimmingOn:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_DimmerLights_Main:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_DimmerLights_TMR_1:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ??_DimmerLights_TMR_1:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_DimmerLights_IOC_1:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_DimmerLights_TMR_2:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ??_DimmerLights_TMR_2:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_DimmerLights_IOC_2:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_LedPointSelect:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_LED_Initialization:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_LED_Main:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_Mcu_Initialization:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_ISR:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_Flash_Memory_Initialization:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_Flash_Memory_Main:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_Flash_Memory_Unlock:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_Flash_Memory_Erasing:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_setMemory_Modify:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_setMemory_LoopSave:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_WDT_Main:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_Load_Initialization:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_getLoad_AD:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0070                     ?_Load_Main:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0070                     ?_Temp_Initialization:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0070                     ?_getTemp_AD:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0070                     ?_Temp_Main:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0070                     ?_RF_Initialization:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0070                     ?_RF_Main:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0070                     ?_setRF_Learn:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0070                     ?_TouchPower:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0070                     ?_SwPointSelect:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0070                     ?_Switch_Initialization:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0070                     ?_Switch_Main:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0070                     ?_getDimmerLights_Status:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0070                     ?_getLoad_OK:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_getMain_All_Error_Status:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_getMain_All_LightsStatus:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_getDimmerLights_Allow_Condition:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_getDimmerLights_PercentToValue:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_getDimmerLights_ValueToPercent:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_getCmd_Status:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_Flash_Memory_Read:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_getMain_Lights_Count:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_getRF_KeyStatus:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_getSw_KeyStatus:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_getDelayOff_GO:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_getDimmerIntr_DimmingValue:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ?_getDimmerLights_Line:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     ?_getDimmer_LoadGO:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0070                     ?_getDimmer_Load_Status:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0070                     ?___lbdiv:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0070                     setDimmerLights_Initialization@lights:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0070                     ___lbdiv@divisor:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993                           
  2994                           ; 1 bytes @ 0x0
  2995  0070                     	ds	1
  2996  0071                     ??___lbdiv:	
  2997  0071                     DimmerLights_TMR_1@count:	
  2998                           ; 0 bytes @ 0x1
  2999                           
  3000  0071                     DimmerLights_TMR_2@count:	
  3001                           ; 1 bytes @ 0x1
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0x1
  3005  0071                     	ds	1
  3006  0072                     ??_TMR1_ISR:	
  3007  0072                     ___lbdiv@dividend:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010                           
  3011                           ; 1 bytes @ 0x2
  3012  0072                     	ds	1
  3013  0073                     ___lbdiv@counter:	
  3014                           
  3015                           ; 1 bytes @ 0x3
  3016  0073                     	ds	1
  3017  0074                     ___lbdiv@quotient:	
  3018                           
  3019                           ; 1 bytes @ 0x4
  3020  0074                     	ds	1
  3021  0075                     ?_Division:	
  3022  0075                     Division@num:	
  3023                           ; 1 bytes @ 0x5
  3024                           
  3025                           
  3026                           ; 1 bytes @ 0x5
  3027  0075                     	ds	1
  3028  0076                     ??_Division:	
  3029                           
  3030                           ; 0 bytes @ 0x6
  3031  0076                     	ds	2
  3032  0078                     Division@value:	
  3033                           
  3034                           ; 1 bytes @ 0x8
  3035  0078                     	ds	1
  3036  0079                     Division@result:	
  3037                           
  3038                           ; 1 bytes @ 0x9
  3039  0079                     	ds	1
  3040  007A                     ??_DimmerLights_IOC_1:	
  3041  007A                     ??_DimmerLights_IOC_2:	
  3042                           ; 0 bytes @ 0xA
  3043                           
  3044                           
  3045                           ; 0 bytes @ 0xA
  3046  007A                     	ds	2
  3047  007C                     DimmerLights_IOC_1@count:	
  3048  007C                     DimmerLights_IOC_2@count:	
  3049                           ; 1 bytes @ 0xC
  3050                           
  3051                           
  3052                           ; 1 bytes @ 0xC
  3053  007C                     	ds	1
  3054  007D                     DimmerLights_IOC_1@dimming:	
  3055  007D                     DimmerLights_IOC_2@dimming:	
  3056                           ; 1 bytes @ 0xD
  3057                           
  3058                           
  3059                           ; 1 bytes @ 0xD
  3060  007D                     	ds	1
  3061  007E                     ??_IOC_ISR:	
  3062                           
  3063                           	psect	cstackBANK0
  3064  0020                     __pcstackBANK0:	
  3065                           ; 0 bytes @ 0xE
  3066                           
  3067  0020                     ??_ISR:	
  3068                           
  3069                           ; 0 bytes @ 0x0
  3070  0020                     	ds	1
  3071  0021                     ??_RF_Timeout_Counter:	
  3072  0021                     ??_setRF_TimeoutCleared:	
  3073                           ; 0 bytes @ 0x1
  3074                           
  3075  0021                     ??_CC2500_WriteByte:	
  3076                           ; 0 bytes @ 0x1
  3077                           
  3078  0021                     ??_CC2500_ReadByte:	
  3079                           ; 0 bytes @ 0x1
  3080                           
  3081  0021                     ?_DelayTime_1us:	
  3082                           ; 0 bytes @ 0x1
  3083                           
  3084  0021                     ??_setDimmerLights_Initialization:	
  3085                           ; 0 bytes @ 0x1
  3086                           
  3087  0021                     ??_getLoad_OK:	
  3088                           ; 0 bytes @ 0x1
  3089                           
  3090  0021                     ??_getMain_All_Error_Status:	
  3091                           ; 0 bytes @ 0x1
  3092                           
  3093  0021                     ??_getMain_All_LightsStatus:	
  3094                           ; 0 bytes @ 0x1
  3095                           
  3096  0021                     ??_setDimmerLights_Line:	
  3097                           ; 0 bytes @ 0x1
  3098                           
  3099  0021                     ??_getCmd_Status:	
  3100                           ; 0 bytes @ 0x1
  3101                           
  3102  0021                     ?_setCmd_Status:	
  3103                           ; 0 bytes @ 0x1
  3104                           
  3105  0021                     ??_setTxData:	
  3106                           ; 0 bytes @ 0x1
  3107                           
  3108  0021                     ??_setRF_TransceiveGO:	
  3109                           ; 0 bytes @ 0x1
  3110                           
  3111  0021                     ??_Fosc_Set:	
  3112                           ; 0 bytes @ 0x1
  3113                           
  3114  0021                     ??_IO_Set:	
  3115                           ; 0 bytes @ 0x1
  3116                           
  3117  0021                     ??_TMR1_Set:	
  3118                           ; 0 bytes @ 0x1
  3119                           
  3120  0021                     ??_ADC_Set:	
  3121                           ; 0 bytes @ 0x1
  3122                           
  3123  0021                     ??_IOC_Set:	
  3124                           ; 0 bytes @ 0x1
  3125                           
  3126  0021                     ??_WDT_Set:	
  3127                           ; 0 bytes @ 0x1
  3128                           
  3129  0021                     ??_Timeout_Counter:	
  3130                           ; 0 bytes @ 0x1
  3131                           
  3132  0021                     ??_set_TimeoutCleared:	
  3133                           ; 0 bytes @ 0x1
  3134                           
  3135  0021                     ??_Flash_Memory_Read:	
  3136                           ; 0 bytes @ 0x1
  3137                           
  3138  0021                     ?_setMemory_Data:	
  3139                           ; 0 bytes @ 0x1
  3140                           
  3141  0021                     ??_Flash_Memory_Write:	
  3142                           ; 0 bytes @ 0x1
  3143                           
  3144  0021                     ??_WDT_Clearing:	
  3145                           ; 0 bytes @ 0x1
  3146                           
  3147  0021                     ??_setLoad_AH_AL_Restore:	
  3148                           ; 0 bytes @ 0x1
  3149                           
  3150  0021                     ??_getMain_Lights_Count:	
  3151                           ; 0 bytes @ 0x1
  3152                           
  3153  0021                     ??_setTemp_Initialization:	
  3154                           ; 0 bytes @ 0x1
  3155                           
  3156  0021                     ??_setRF_Initialization:	
  3157                           ; 0 bytes @ 0x1
  3158                           
  3159  0021                     ??_getRF_KeyStatus:	
  3160                           ; 0 bytes @ 0x1
  3161                           
  3162  0021                     ??_getSw_KeyStatus:	
  3163                           ; 0 bytes @ 0x1
  3164                           
  3165  0021                     ??_myMain_Initialization:	
  3166                           ; 0 bytes @ 0x1
  3167                           
  3168  0021                     ??_Buzzer_Initialization:	
  3169                           ; 0 bytes @ 0x1
  3170                           
  3171  0021                     ??_Buzzer_Main:	
  3172                           ; 0 bytes @ 0x1
  3173                           
  3174  0021                     ??_DelayOffPointSelect:	
  3175                           ; 0 bytes @ 0x1
  3176                           
  3177  0021                     ??_DimmerIntr_Initialization:	
  3178                           ; 0 bytes @ 0x1
  3179                           
  3180  0021                     ?_setDimmerIntr_ControlStatus:	
  3181                           ; 0 bytes @ 0x1
  3182                           
  3183  0021                     ?_setDimmerIntr_DimmingValue:	
  3184                           ; 0 bytes @ 0x1
  3185                           
  3186  0021                     ??_getDimmerIntr_DimmingValue:	
  3187                           ; 0 bytes @ 0x1
  3188                           
  3189  0021                     ?_setDimmerIntr_Dimming_Sw:	
  3190                           ; 0 bytes @ 0x1
  3191                           
  3192  0021                     ?_setDimmerIntr_Dimming_RF:	
  3193                           ; 0 bytes @ 0x1
  3194                           
  3195  0021                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3196                           ; 0 bytes @ 0x1
  3197                           
  3198  0021                     ??_DimmerLights_SelectPointer:	
  3199                           ; 0 bytes @ 0x1
  3200                           
  3201  0021                     ??_getDimmerLights_Line:	
  3202                           ; 0 bytes @ 0x1
  3203                           
  3204  0021                     ??_getDimmer_LoadGO:	
  3205                           ; 0 bytes @ 0x1
  3206                           
  3207  0021                     ??_getDimmer_Load_Status:	
  3208                           ; 0 bytes @ 0x1
  3209                           
  3210  0021                     ??_LedPointSelect:	
  3211                           ; 0 bytes @ 0x1
  3212                           
  3213  0021                     ??_Flash_Memory_Unlock:	
  3214                           ; 0 bytes @ 0x1
  3215                           
  3216  0021                     ??_Flash_Memory_Erasing:	
  3217                           ; 0 bytes @ 0x1
  3218                           
  3219  0021                     ??_setMemory_Modify:	
  3220                           ; 0 bytes @ 0x1
  3221                           
  3222  0021                     ??_setMemory_LoopSave:	
  3223                           ; 0 bytes @ 0x1
  3224                           
  3225  0021                     ??_WDT_Main:	
  3226                           ; 0 bytes @ 0x1
  3227                           
  3228  0021                     ??_Temp_Initialization:	
  3229                           ; 0 bytes @ 0x1
  3230                           
  3231  0021                     ??_setRF_Learn:	
  3232                           ; 0 bytes @ 0x1
  3233                           
  3234  0021                     ??_TouchPower:	
  3235                           ; 0 bytes @ 0x1
  3236                           
  3237  0021                     ??_SwPointSelect:	
  3238                           ; 0 bytes @ 0x1
  3239                           
  3240  0021                     ?___bmul:	
  3241                           ; 0 bytes @ 0x1
  3242                           
  3243  0021                     ?_getBuz_GO:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246  0021                     ?_getAD:	
  3247                           ; 2 bytes @ 0x1
  3248                           
  3249  0021                     ?___wmul:	
  3250                           ; 2 bytes @ 0x1
  3251                           
  3252  0021                     ?___awdiv:	
  3253                           ; 2 bytes @ 0x1
  3254                           
  3255  0021                     ?___lwdiv:	
  3256                           ; 2 bytes @ 0x1
  3257                           
  3258  0021                     ?___ftpack:	
  3259                           ; 2 bytes @ 0x1
  3260                           
  3261  0021                     setDimmerIntr_ControlStatus@command:	
  3262                           ; 3 bytes @ 0x1
  3263                           
  3264  0021                     setDimmerIntr_DimmingValue@value:	
  3265                           ; 1 bytes @ 0x1
  3266                           
  3267  0021                     setDimmerIntr_Dimming_Sw@command:	
  3268                           ; 1 bytes @ 0x1
  3269                           
  3270  0021                     setDimmerIntr_Dimming_RF@command:	
  3271                           ; 1 bytes @ 0x1
  3272                           
  3273  0021                     setDimmerLights_Line@lights:	
  3274                           ; 1 bytes @ 0x1
  3275                           
  3276  0021                     getDimmer_LoadGO@loadgo:	
  3277                           ; 1 bytes @ 0x1
  3278                           
  3279  0021                     getDimmer_Load_Status@status:	
  3280                           ; 1 bytes @ 0x1
  3281                           
  3282  0021                     getAD@adcon1:	
  3283                           ; 1 bytes @ 0x1
  3284                           
  3285  0021                     setMemory_Data@data:	
  3286                           ; 1 bytes @ 0x1
  3287                           
  3288  0021                     getLoad_OK@ok:	
  3289                           ; 1 bytes @ 0x1
  3290                           
  3291  0021                     getMain_All_LightsStatus@status:	
  3292                           ; 1 bytes @ 0x1
  3293                           
  3294  0021                     getMain_Lights_Count@count:	
  3295                           ; 1 bytes @ 0x1
  3296                           
  3297  0021                     setCmd_Status@cmd:	
  3298                           ; 1 bytes @ 0x1
  3299                           
  3300  0021                     getCmd_Status@number:	
  3301                           ; 1 bytes @ 0x1
  3302                           
  3303  0021                     ___bmul@multiplicand:	
  3304                           ; 1 bytes @ 0x1
  3305                           
  3306  0021                     DelayTime_1us@count:	
  3307                           ; 1 bytes @ 0x1
  3308                           
  3309  0021                     ___wmul@multiplier:	
  3310                           ; 2 bytes @ 0x1
  3311                           
  3312  0021                     ___awdiv@divisor:	
  3313                           ; 2 bytes @ 0x1
  3314                           
  3315  0021                     ___lwdiv@divisor:	
  3316                           ; 2 bytes @ 0x1
  3317                           
  3318  0021                     ___ftpack@arg:	
  3319                           ; 2 bytes @ 0x1
  3320                           
  3321                           
  3322                           ; 3 bytes @ 0x1
  3323  0021                     	ds	1
  3324  0022                     ??_getDimmerLights_Allow_Condition:	
  3325  0022                     ??_setCmd_Status:	
  3326                           ; 0 bytes @ 0x2
  3327                           
  3328  0022                     ??_setMemory_Data:	
  3329                           ; 0 bytes @ 0x2
  3330                           
  3331  0022                     ??_setDimmerIntr_ControlStatus:	
  3332                           ; 0 bytes @ 0x2
  3333                           
  3334  0022                     ??_setDimmerIntr_DimmingValue:	
  3335                           ; 0 bytes @ 0x2
  3336                           
  3337  0022                     ??_setDimmerIntr_Dimming_Sw:	
  3338                           ; 0 bytes @ 0x2
  3339                           
  3340  0022                     ??_setDimmerIntr_Dimming_RF:	
  3341                           ; 0 bytes @ 0x2
  3342                           
  3343  0022                     ??_DimmerLights_Initialization:	
  3344                           ; 0 bytes @ 0x2
  3345                           
  3346  0022                     ??_Mcu_Initialization:	
  3347                           ; 0 bytes @ 0x2
  3348                           
  3349  0022                     ??_RF_Initialization:	
  3350                           ; 0 bytes @ 0x2
  3351                           
  3352  0022                     ??___bmul:	
  3353                           ; 0 bytes @ 0x2
  3354                           
  3355  0022                     CC2500_WriteByte@loop_a:	
  3356                           ; 0 bytes @ 0x2
  3357                           
  3358  0022                     CC2500_ReadByte@loop_b:	
  3359                           ; 1 bytes @ 0x2
  3360                           
  3361  0022                     DelayOffPointSelect@sw:	
  3362                           ; 1 bytes @ 0x2
  3363                           
  3364  0022                     getDimmerIntr_DimmingValue@value:	
  3365                           ; 1 bytes @ 0x2
  3366                           
  3367  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2268:	
  3368                           ; 1 bytes @ 0x2
  3369                           
  3370  0022                     DimmerLights_SelectPointer@lights:	
  3371                           ; 1 bytes @ 0x2
  3372                           
  3373  0022                     getDimmerLights_Line@line:	
  3374                           ; 1 bytes @ 0x2
  3375                           
  3376  0022                     LedPointSelect@led:	
  3377                           ; 1 bytes @ 0x2
  3378                           
  3379  0022                     Flash_Memory_Read@i:	
  3380                           ; 1 bytes @ 0x2
  3381                           
  3382  0022                     Flash_Memory_Write@i:	
  3383                           ; 1 bytes @ 0x2
  3384                           
  3385  0022                     setMemory_Modify@command:	
  3386                           ; 1 bytes @ 0x2
  3387                           
  3388  0022                     setMemory_LoopSave@command:	
  3389                           ; 1 bytes @ 0x2
  3390                           
  3391  0022                     setLoad_AH_AL_Restore@i:	
  3392                           ; 1 bytes @ 0x2
  3393                           
  3394  0022                     setRF_Learn@command:	
  3395                           ; 1 bytes @ 0x2
  3396                           
  3397  0022                     getRF_KeyStatus@key:	
  3398                           ; 1 bytes @ 0x2
  3399                           
  3400  0022                     setRF_TransceiveGO@command:	
  3401                           ; 1 bytes @ 0x2
  3402                           
  3403  0022                     SwPointSelect@sw:	
  3404                           ; 1 bytes @ 0x2
  3405                           
  3406  0022                     _getSw_KeyStatus$6111:	
  3407                           ; 1 bytes @ 0x2
  3408                           
  3409  0022                     getMain_Lights_Count@status1:	
  3410                           ; 1 bytes @ 0x2
  3411                           
  3412  0022                     getCmd_Status@cmd:	
  3413                           ; 1 bytes @ 0x2
  3414                           
  3415  0022                     _getMain_All_Error_Status$6846:	
  3416                           ; 1 bytes @ 0x2
  3417                           
  3418                           
  3419                           ; 2 bytes @ 0x2
  3420  0022                     	ds	1
  3421  0023                     ??_CC2500_WriteCommand:	
  3422  0023                     ??_CC2500_ReadStatus:	
  3423                           ; 0 bytes @ 0x3
  3424                           
  3425  0023                     ??_DelayTime_1us:	
  3426                           ; 0 bytes @ 0x3
  3427                           
  3428  0023                     ?_CC2500_WriteREG:	
  3429                           ; 0 bytes @ 0x3
  3430                           
  3431  0023                     ??_DlyOff_Initialization:	
  3432                           ; 0 bytes @ 0x3
  3433                           
  3434  0023                     ??_getDimmerLights_Status:	
  3435                           ; 0 bytes @ 0x3
  3436                           
  3437  0023                     ??_setDimmerLights_SwOff:	
  3438                           ; 0 bytes @ 0x3
  3439                           
  3440  0023                     ?_setLED:	
  3441                           ; 0 bytes @ 0x3
  3442                           
  3443  0023                     ??_setLED_Main:	
  3444                           ; 0 bytes @ 0x3
  3445                           
  3446  0023                     ??_getBuz_GO:	
  3447                           ; 0 bytes @ 0x3
  3448                           
  3449  0023                     ??_getDelayOff_GO:	
  3450                           ; 0 bytes @ 0x3
  3451                           
  3452  0023                     ??_setDimmerLights_DimmingOn:	
  3453                           ; 0 bytes @ 0x3
  3454                           
  3455  0023                     ?_setDimmerLights_DimmingRun:	
  3456                           ; 0 bytes @ 0x3
  3457                           
  3458  0023                     ??_Load_Initialization:	
  3459                           ; 0 bytes @ 0x3
  3460                           
  3461  0023                     CC2500_WriteREG@value:	
  3462                           ; 0 bytes @ 0x3
  3463                           
  3464  0023                     DlyOff_Initialization@sw:	
  3465                           ; 1 bytes @ 0x3
  3466                           
  3467  0023                     getDelayOff_GO@sw:	
  3468                           ; 1 bytes @ 0x3
  3469                           
  3470  0023                     setDimmerIntr_ControlStatus@lights:	
  3471                           ; 1 bytes @ 0x3
  3472                           
  3473  0023                     setDimmerIntr_DimmingValue@lights:	
  3474                           ; 1 bytes @ 0x3
  3475                           
  3476  0023                     getDimmerIntr_DimmingValue@lights:	
  3477                           ; 1 bytes @ 0x3
  3478                           
  3479  0023                     setDimmerIntr_Dimming_Sw@lights:	
  3480                           ; 1 bytes @ 0x3
  3481                           
  3482  0023                     setDimmerIntr_Dimming_RF@lights:	
  3483                           ; 1 bytes @ 0x3
  3484                           
  3485  0023                     _getAll_DimmerIntr_Dimming_Sw_RF$2269:	
  3486                           ; 1 bytes @ 0x3
  3487                           
  3488  0023                     setDimmerLights_SwOff@sw:	
  3489                           ; 1 bytes @ 0x3
  3490                           
  3491  0023                     setDimmerLights_DimmingOn@sw:	
  3492                           ; 1 bytes @ 0x3
  3493                           
  3494  0023                     _getDimmerLights_Allow_Condition$2375:	
  3495                           ; 1 bytes @ 0x3
  3496                           
  3497  0023                     getDimmerLights_Status@lights:	
  3498                           ; 1 bytes @ 0x3
  3499                           
  3500  0023                     setDimmerLights_DimmingRun@command:	
  3501                           ; 1 bytes @ 0x3
  3502                           
  3503  0023                     setLED@command:	
  3504                           ; 1 bytes @ 0x3
  3505                           
  3506  0023                     Flash_Memory_Read@address:	
  3507                           ; 1 bytes @ 0x3
  3508                           
  3509  0023                     setMemory_Data@address:	
  3510                           ; 1 bytes @ 0x3
  3511                           
  3512  0023                     _getRF_KeyStatus$5063:	
  3513                           ; 1 bytes @ 0x3
  3514                           
  3515  0023                     _getSw_KeyStatus$6112:	
  3516                           ; 1 bytes @ 0x3
  3517                           
  3518  0023                     getMain_Lights_Count@status2:	
  3519                           ; 1 bytes @ 0x3
  3520                           
  3521  0023                     setCmd_Status@number:	
  3522                           ; 1 bytes @ 0x3
  3523                           
  3524  0023                     ___bmul@product:	
  3525                           ; 1 bytes @ 0x3
  3526                           
  3527  0023                     DelayTime_1us@i:	
  3528                           ; 1 bytes @ 0x3
  3529                           
  3530  0023                     ___wmul@multiplicand:	
  3531                           ; 2 bytes @ 0x3
  3532                           
  3533  0023                     ___awdiv@dividend:	
  3534                           ; 2 bytes @ 0x3
  3535                           
  3536  0023                     ___lwdiv@dividend:	
  3537                           ; 2 bytes @ 0x3
  3538                           
  3539                           
  3540                           ; 2 bytes @ 0x3
  3541  0023                     	ds	1
  3542  0024                     ??_CC2500_WriteREG:	
  3543  0024                     ??_setLED:	
  3544                           ; 0 bytes @ 0x4
  3545                           
  3546  0024                     ??_DelayOff_Initialization:	
  3547                           ; 0 bytes @ 0x4
  3548                           
  3549  0024                     ??_setDimmerLights_DimmingRun:	
  3550                           ; 0 bytes @ 0x4
  3551                           
  3552  0024                     ??_getAD:	
  3553                           ; 0 bytes @ 0x4
  3554                           
  3555  0024                     CC2500_WriteCommand@command:	
  3556                           ; 0 bytes @ 0x4
  3557                           
  3558  0024                     CC2500_ReadStatus@status_addr:	
  3559                           ; 1 bytes @ 0x4
  3560                           
  3561  0024                     getDelayOff_GO@go:	
  3562                           ; 1 bytes @ 0x4
  3563                           
  3564  0024                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3565                           ; 1 bytes @ 0x4
  3566                           
  3567  0024                     _getDimmerLights_Allow_Condition$2376:	
  3568                           ; 1 bytes @ 0x4
  3569                           
  3570  0024                     getDimmerLights_Status@status:	
  3571                           ; 1 bytes @ 0x4
  3572                           
  3573  0024                     setLED@led:	
  3574                           ; 1 bytes @ 0x4
  3575                           
  3576  0024                     getAD@adcon0:	
  3577                           ; 1 bytes @ 0x4
  3578                           
  3579  0024                     Flash_Memory_Read@ret:	
  3580                           ; 1 bytes @ 0x4
  3581                           
  3582  0024                     getSw_KeyStatus@status:	
  3583                           ; 1 bytes @ 0x4
  3584                           
  3585  0024                     ___bmul@multiplier:	
  3586                           ; 1 bytes @ 0x4
  3587                           
  3588  0024                     ___ftpack@exp:	
  3589                           ; 1 bytes @ 0x4
  3590                           
  3591  0024                     _getMain_All_Error_Status$6847:	
  3592                           ; 1 bytes @ 0x4
  3593                           
  3594                           
  3595                           ; 2 bytes @ 0x4
  3596  0024                     	ds	1
  3597  0025                     ??_CC2500_ClearTXFIFO:	
  3598  0025                     ??_CC2500_ClearRXFIFO:	
  3599                           ; 0 bytes @ 0x5
  3600                           
  3601  0025                     ??_CC2500_SIDLEMode:	
  3602                           ; 0 bytes @ 0x5
  3603                           
  3604  0025                     ??_setLED_Initialization:	
  3605                           ; 0 bytes @ 0x5
  3606                           
  3607  0025                     ??_Flash_Memory_Modify:	
  3608                           ; 0 bytes @ 0x5
  3609                           
  3610  0025                     ??_RF_RxDisable:	
  3611                           ; 0 bytes @ 0x5
  3612                           
  3613  0025                     ??_setSw_Initialization:	
  3614                           ; 0 bytes @ 0x5
  3615                           
  3616  0025                     ??_CC2500_TxData:	
  3617                           ; 0 bytes @ 0x5
  3618                           
  3619  0025                     ??_CC2500_RxData:	
  3620                           ; 0 bytes @ 0x5
  3621                           
  3622  0025                     ??_getLoad_AD:	
  3623                           ; 0 bytes @ 0x5
  3624                           
  3625  0025                     ??_getTemp_AD:	
  3626                           ; 0 bytes @ 0x5
  3627                           
  3628  0025                     ??___wmul:	
  3629                           ; 0 bytes @ 0x5
  3630                           
  3631  0025                     ??___awdiv:	
  3632                           ; 0 bytes @ 0x5
  3633                           
  3634  0025                     ??___lwdiv:	
  3635                           ; 0 bytes @ 0x5
  3636                           
  3637  0025                     CC2500_WriteREG@w_addr:	
  3638                           ; 0 bytes @ 0x5
  3639                           
  3640  0025                     _getDimmerLights_Allow_Condition$2377:	
  3641                           ; 1 bytes @ 0x5
  3642                           
  3643  0025                     setDimmerLights_DimmingRun@lights:	
  3644                           ; 1 bytes @ 0x5
  3645                           
  3646  0025                     setLED_Initialization@led:	
  3647                           ; 1 bytes @ 0x5
  3648                           
  3649  0025                     setLED_Main@led:	
  3650                           ; 1 bytes @ 0x5
  3651                           
  3652  0025                     setSw_Initialization@sw:	
  3653                           ; 1 bytes @ 0x5
  3654                           
  3655  0025                     getSw_KeyStatus@sw:	
  3656                           ; 1 bytes @ 0x5
  3657                           
  3658  0025                     ___ftpack@sign:	
  3659                           ; 1 bytes @ 0x5
  3660                           
  3661  0025                     getBuz_GO@i:	
  3662                           ; 1 bytes @ 0x5
  3663                           
  3664  0025                     DelayTime_1us@j:	
  3665                           ; 2 bytes @ 0x5
  3666                           
  3667  0025                     ___wmul@product:	
  3668                           ; 2 bytes @ 0x5
  3669                           
  3670                           
  3671                           ; 2 bytes @ 0x5
  3672  0025                     	ds	1
  3673  0026                     ??_CC2500_InitSetREG:	
  3674  0026                     ??_CC2500_InitPATable:	
  3675                           ; 0 bytes @ 0x6
  3676                           
  3677  0026                     ??___ftpack:	
  3678                           ; 0 bytes @ 0x6
  3679                           
  3680  0026                     ??_LED_Initialization:	
  3681                           ; 0 bytes @ 0x6
  3682                           
  3683  0026                     ??_LED_Main:	
  3684                           ; 0 bytes @ 0x6
  3685                           
  3686  0026                     ??_Switch_Initialization:	
  3687                           ; 0 bytes @ 0x6
  3688                           
  3689  0026                     CC2500_TxData@loop_e:	
  3690                           ; 0 bytes @ 0x6
  3691                           
  3692  0026                     CC2500_RxData@loop_f:	
  3693                           ; 1 bytes @ 0x6
  3694                           
  3695  0026                     getDimmerLights_Allow_Condition@lights:	
  3696                           ; 1 bytes @ 0x6
  3697                           
  3698  0026                     Flash_Memory_Modify@i:	
  3699                           ; 1 bytes @ 0x6
  3700                           
  3701  0026                     getTemp_AD@channel:	
  3702                           ; 1 bytes @ 0x6
  3703                           
  3704  0026                     getMain_All_Error_Status@command:	
  3705                           ; 1 bytes @ 0x6
  3706                           
  3707  0026                     ___awdiv@counter:	
  3708                           ; 1 bytes @ 0x6
  3709                           
  3710  0026                     ___lwdiv@quotient:	
  3711                           ; 1 bytes @ 0x6
  3712                           
  3713                           
  3714                           ; 2 bytes @ 0x6
  3715  0026                     	ds	1
  3716  0027                     ??_CC2500_PowerRST:	
  3717  0027                     ??_CC2500_FrequencyCabr:	
  3718                           ; 0 bytes @ 0x7
  3719                           
  3720  0027                     ??_Flash_Memory_Main:	
  3721                           ; 0 bytes @ 0x7
  3722                           
  3723  0027                     CC2500_InitSetREG@temp1:	
  3724                           ; 0 bytes @ 0x7
  3725                           
  3726  0027                     CC2500_InitPATable@temp:	
  3727                           ; 1 bytes @ 0x7
  3728                           
  3729  0027                     getDimmerLights_Allow_Condition@allow:	
  3730                           ; 1 bytes @ 0x7
  3731                           
  3732  0027                     getLoad_AD@channel:	
  3733                           ; 1 bytes @ 0x7
  3734                           
  3735  0027                     getMain_All_Error_Status@status:	
  3736                           ; 1 bytes @ 0x7
  3737                           
  3738  0027                     ___awdiv@sign:	
  3739                           ; 1 bytes @ 0x7
  3740                           
  3741  0027                     getTemp_AD@ADRES:	
  3742                           ; 1 bytes @ 0x7
  3743                           
  3744                           
  3745                           ; 2 bytes @ 0x7
  3746  0027                     	ds	1
  3747  0028                     CC2500_InitSetREG@temp2:	
  3748  0028                     CC2500_InitPATable@loop_d:	
  3749                           ; 1 bytes @ 0x8
  3750                           
  3751  0028                     getLoad_AD@k:	
  3752                           ; 1 bytes @ 0x8
  3753                           
  3754  0028                     ___lwdiv@counter:	
  3755                           ; 1 bytes @ 0x8
  3756                           
  3757  0028                     ___awdiv@quotient:	
  3758                           ; 1 bytes @ 0x8
  3759                           
  3760                           
  3761                           ; 2 bytes @ 0x8
  3762  0028                     	ds	1
  3763  0029                     ??_Load_Main:	
  3764  0029                     ?___awtoft:	
  3765                           ; 0 bytes @ 0x9
  3766                           
  3767  0029                     CC2500_InitSetREG@loop_c:	
  3768                           ; 3 bytes @ 0x9
  3769                           
  3770  0029                     getLoad_AD@j:	
  3771                           ; 1 bytes @ 0x9
  3772                           
  3773  0029                     ___awtoft@c:	
  3774                           ; 1 bytes @ 0x9
  3775                           
  3776                           
  3777                           ; 2 bytes @ 0x9
  3778  0029                     	ds	1
  3779  002A                     ?_setBuz:	
  3780  002A                     ??_CC2500_PowerOnInitial:	
  3781                           ; 0 bytes @ 0xA
  3782                           
  3783  002A                     setBuz@time:	
  3784                           ; 0 bytes @ 0xA
  3785                           
  3786  002A                     getLoad_AD@ADRES:	
  3787                           ; 2 bytes @ 0xA
  3788                           
  3789                           
  3790                           ; 2 bytes @ 0xA
  3791  002A                     	ds	1
  3792  002B                     Load_Main@error:	
  3793                           
  3794                           ; 1 bytes @ 0xB
  3795  002B                     	ds	1
  3796  002C                     ??_setBuz:	
  3797  002C                     ??___awtoft:	
  3798                           ; 0 bytes @ 0xC
  3799                           
  3800  002C                     getLoad_AD@i:	
  3801                           ; 0 bytes @ 0xC
  3802                           
  3803  002C                     _Load_Main$3652:	
  3804                           ; 1 bytes @ 0xC
  3805                           
  3806                           
  3807                           ; 2 bytes @ 0xC
  3808  002C                     	ds	1
  3809  002D                     setBuz@count:	
  3810                           
  3811                           ; 1 bytes @ 0xD
  3812  002D                     	ds	1
  3813  002E                     ??_setDimmerLights_SwOn:	
  3814  002E                     ??_my_MainTimer:	
  3815                           ; 0 bytes @ 0xE
  3816                           
  3817  002E                     ??_Exception_Main:	
  3818                           ; 0 bytes @ 0xE
  3819                           
  3820  002E                     Load_Main@ErrorCountValue:	
  3821                           ; 0 bytes @ 0xE
  3822                           
  3823  002E                     ___awtoft@sign:	
  3824                           ; 1 bytes @ 0xE
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0xE
  3828  002E                     	ds	1
  3829  002F                     ?___ftdiv:	
  3830  002F                     ?___ftmul:	
  3831                           ; 3 bytes @ 0xF
  3832                           
  3833  002F                     _setDimmerLights_SwOn$2314:	
  3834                           ; 3 bytes @ 0xF
  3835                           
  3836  002F                     Load_Main@Load_RunStatus:	
  3837                           ; 1 bytes @ 0xF
  3838                           
  3839  002F                     Exception_Main@status:	
  3840                           ; 1 bytes @ 0xF
  3841                           
  3842  002F                     ___ftdiv@f2:	
  3843                           ; 1 bytes @ 0xF
  3844                           
  3845  002F                     ___ftmul@f1:	
  3846                           ; 3 bytes @ 0xF
  3847                           
  3848                           
  3849                           ; 3 bytes @ 0xF
  3850  002F                     	ds	1
  3851  0030                     _setDimmerLights_SwOn$2323:	
  3852  0030                     Load_Main@LightsCount:	
  3853                           ; 1 bytes @ 0x10
  3854                           
  3855  0030                     Exception_Main@count:	
  3856                           ; 1 bytes @ 0x10
  3857                           
  3858                           
  3859                           ; 1 bytes @ 0x10
  3860  0030                     	ds	1
  3861  0031                     setDimmerLights_SwOn@idle:	
  3862  0031                     Exception_Main@error:	
  3863                           ; 1 bytes @ 0x11
  3864                           
  3865  0031                     Load_Main@i:	
  3866                           ; 1 bytes @ 0x11
  3867                           
  3868                           
  3869                           ; 2 bytes @ 0x11
  3870  0031                     	ds	1
  3871  0032                     setDimmerLights_SwOn@sw:	
  3872  0032                     Exception_Main@i:	
  3873                           ; 1 bytes @ 0x12
  3874                           
  3875  0032                     ___ftdiv@f1:	
  3876                           ; 2 bytes @ 0x12
  3877                           
  3878  0032                     ___ftmul@f2:	
  3879                           ; 3 bytes @ 0x12
  3880                           
  3881                           
  3882                           ; 3 bytes @ 0x12
  3883  0032                     	ds	1
  3884  0033                     ??_setSw_Main:	
  3885                           
  3886                           ; 0 bytes @ 0x13
  3887  0033                     	ds	1
  3888  0034                     Exception_Main@i_6859:	
  3889                           
  3890                           ; 2 bytes @ 0x14
  3891  0034                     	ds	1
  3892  0035                     ??___ftdiv:	
  3893  0035                     ??___ftmul:	
  3894                           ; 0 bytes @ 0x15
  3895                           
  3896  0035                     setSw_Main@sw:	
  3897                           ; 0 bytes @ 0x15
  3898                           
  3899                           
  3900                           ; 1 bytes @ 0x15
  3901  0035                     	ds	1
  3902  0036                     ??_Switch_Main:	
  3903  0036                     Exception_Main@lights:	
  3904                           ; 0 bytes @ 0x16
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x16
  3908  0036                     	ds	3
  3909  0039                     ___ftdiv@cntr:	
  3910  0039                     ___ftmul@exp:	
  3911                           ; 1 bytes @ 0x19
  3912                           
  3913                           
  3914                           ; 1 bytes @ 0x19
  3915  0039                     	ds	1
  3916  003A                     ___ftdiv@f3:	
  3917  003A                     ___ftmul@f3_as_product:	
  3918                           ; 3 bytes @ 0x1A
  3919                           
  3920                           
  3921                           ; 3 bytes @ 0x1A
  3922  003A                     	ds	3
  3923  003D                     ___ftdiv@exp:	
  3924  003D                     ___ftmul@cntr:	
  3925                           ; 1 bytes @ 0x1D
  3926                           
  3927                           
  3928                           ; 1 bytes @ 0x1D
  3929  003D                     	ds	1
  3930  003E                     ___ftdiv@sign:	
  3931  003E                     ___ftmul@sign:	
  3932                           ; 1 bytes @ 0x1E
  3933                           
  3934                           
  3935                           ; 1 bytes @ 0x1E
  3936  003E                     	ds	1
  3937  003F                     ?___ftneg:	
  3938  003F                     ___ftneg@f1:	
  3939                           ; 3 bytes @ 0x1F
  3940                           
  3941                           
  3942                           ; 3 bytes @ 0x1F
  3943  003F                     	ds	3
  3944  0042                     ??___ftneg:	
  3945  0042                     ?___ftadd:	
  3946                           ; 0 bytes @ 0x22
  3947                           
  3948  0042                     ___ftadd@f1:	
  3949                           ; 3 bytes @ 0x22
  3950                           
  3951                           
  3952                           ; 3 bytes @ 0x22
  3953  0042                     	ds	3
  3954  0045                     ___ftadd@f2:	
  3955                           
  3956                           ; 3 bytes @ 0x25
  3957  0045                     	ds	3
  3958  0048                     ??___ftadd:	
  3959                           
  3960                           ; 0 bytes @ 0x28
  3961  0048                     	ds	4
  3962  004C                     ___ftadd@sign:	
  3963                           
  3964                           ; 1 bytes @ 0x2C
  3965  004C                     	ds	1
  3966  004D                     ___ftadd@exp2:	
  3967                           
  3968                           ; 1 bytes @ 0x2D
  3969  004D                     	ds	1
  3970  004E                     ___ftadd@exp1:	
  3971                           
  3972                           ; 1 bytes @ 0x2E
  3973  004E                     	ds	1
  3974  004F                     ?___fttol:	
  3975  004F                     ___fttol@f1:	
  3976                           ; 4 bytes @ 0x2F
  3977                           
  3978                           
  3979                           ; 3 bytes @ 0x2F
  3980  004F                     	ds	4
  3981  0053                     ??___fttol:	
  3982                           
  3983                           ; 0 bytes @ 0x33
  3984  0053                     	ds	4
  3985  0057                     ___fttol@sign1:	
  3986                           
  3987                           ; 1 bytes @ 0x37
  3988  0057                     	ds	1
  3989  0058                     ___fttol@lval:	
  3990                           
  3991                           ; 4 bytes @ 0x38
  3992  0058                     	ds	4
  3993  005C                     ___fttol@exp1:	
  3994                           
  3995                           ; 1 bytes @ 0x3C
  3996  005C                     	ds	1
  3997  005D                     ??_getDimmerLights_PercentToValue:	
  3998  005D                     ??_getDimmerLights_ValueToPercent:	
  3999                           ; 0 bytes @ 0x3D
  4000                           
  4001                           
  4002                           ; 0 bytes @ 0x3D
  4003  005D                     	ds	2
  4004  005F                     getDimmerLights_PercentToValue@value:	
  4005  005F                     getDimmerLights_ValueToPercent@value:	
  4006                           ; 1 bytes @ 0x3F
  4007                           
  4008                           
  4009                           ; 1 bytes @ 0x3F
  4010  005F                     	ds	1
  4011  0060                     getDimmerLights_PercentToValue@i:	
  4012  0060                     getDimmerLights_ValueToPercent@i:	
  4013                           ; 3 bytes @ 0x40
  4014                           
  4015                           
  4016                           ; 3 bytes @ 0x40
  4017  0060                     	ds	3
  4018  0063                     ?_setProductData:	
  4019  0063                     ?_setDimmerIntr_MaxmumValue:	
  4020                           ; 0 bytes @ 0x43
  4021                           
  4022  0063                     ??_Flash_Memory_Initialization:	
  4023                           ; 0 bytes @ 0x43
  4024                           
  4025  0063                     setDimmerIntr_MaxmumValue@value:	
  4026                           ; 0 bytes @ 0x43
  4027                           
  4028  0063                     setProductData@value:	
  4029                           ; 1 bytes @ 0x43
  4030                           
  4031                           
  4032                           ; 1 bytes @ 0x43
  4033  0063                     	ds	1
  4034  0064                     ??_setProductData:	
  4035  0064                     ??_setDimmerIntr_MaxmumValue:	
  4036                           ; 0 bytes @ 0x44
  4037                           
  4038  0064                     Flash_Memory_Initialization@i:	
  4039                           ; 0 bytes @ 0x44
  4040                           
  4041                           
  4042                           ; 1 bytes @ 0x44
  4043  0064                     	ds	1
  4044  0065                     setDimmerIntr_MaxmumValue@lights:	
  4045  0065                     setProductData@address:	
  4046                           ; 1 bytes @ 0x45
  4047                           
  4048                           
  4049                           ; 1 bytes @ 0x45
  4050  0065                     	ds	1
  4051  0066                     ??_DlyOff_Main:	
  4052  0066                     ?_setRF_DimmerLights:	
  4053                           ; 0 bytes @ 0x46
  4054                           
  4055  0066                     ??_setTemp_Main:	
  4056                           ; 0 bytes @ 0x46
  4057                           
  4058  0066                     ??_setLog_Code:	
  4059                           ; 0 bytes @ 0x46
  4060                           
  4061  0066                     ??_setRFSW_AdjControl:	
  4062                           ; 0 bytes @ 0x46
  4063                           
  4064  0066                     ?_setDelayOff_GO:	
  4065                           ; 0 bytes @ 0x46
  4066                           
  4067  0066                     setDelayOff_GO@command:	
  4068                           ; 0 bytes @ 0x46
  4069                           
  4070  0066                     setRF_DimmerLights@on:	
  4071                           ; 1 bytes @ 0x46
  4072                           
  4073                           
  4074                           ; 1 bytes @ 0x46
  4075  0066                     	ds	1
  4076  0067                     ??_setRF_DimmerLights:	
  4077  0067                     ??_Temp_Main:	
  4078                           ; 0 bytes @ 0x47
  4079                           
  4080  0067                     setDelayOff_GO@value:	
  4081                           ; 0 bytes @ 0x47
  4082                           
  4083                           
  4084                           ; 1 bytes @ 0x47
  4085  0067                     	ds	1
  4086  0068                     ??_setDelayOff_GO:	
  4087  0068                     DlyOff_Main@sw:	
  4088                           ; 0 bytes @ 0x48
  4089                           
  4090  0068                     setRFSW_AdjControl@status:	
  4091                           ; 1 bytes @ 0x48
  4092                           
  4093                           
  4094                           ; 1 bytes @ 0x48
  4095  0068                     	ds	1
  4096  0069                     ??_DelayOff_Main:	
  4097  0069                     setRFSW_AdjControl@sw:	
  4098                           ; 0 bytes @ 0x49
  4099                           
  4100  0069                     setRF_DimmerLights@status:	
  4101                           ; 1 bytes @ 0x49
  4102                           
  4103                           
  4104                           ; 1 bytes @ 0x49
  4105  0069                     	ds	1
  4106  006A                     setDelayOff_GO@i:	
  4107  006A                     setRF_DimmerLights@lights:	
  4108                           ; 1 bytes @ 0x4A
  4109                           
  4110                           
  4111                           ; 1 bytes @ 0x4A
  4112  006A                     	ds	1
  4113  006B                     ?_setDimmerLights_Dimming:	
  4114  006B                     setDelayOff_GO@j:	
  4115                           ; 0 bytes @ 0x4B
  4116                           
  4117  006B                     setDimmerLights_Dimming@status:	
  4118                           ; 1 bytes @ 0x4B
  4119                           
  4120                           
  4121                           ; 1 bytes @ 0x4B
  4122  006B                     	ds	1
  4123  006C                     ??_setDimmerLights_Dimming:	
  4124  006C                     setDelayOff_GO@k:	
  4125                           ; 0 bytes @ 0x4C
  4126                           
  4127                           
  4128                           ; 1 bytes @ 0x4C
  4129  006C                     	ds	1
  4130  006D                     setDelayOff_GO@sw:	
  4131  006D                     setDimmerLights_Dimming@lights:	
  4132                           ; 1 bytes @ 0x4D
  4133                           
  4134                           
  4135                           ; 1 bytes @ 0x4D
  4136  006D                     	ds	1
  4137  006E                     ??_setDimmerLights_Main:	
  4138  006E                     ??_setControl_Lights_Table:	
  4139                           ; 0 bytes @ 0x4E
  4140                           
  4141  006E                     ??_DimmerLights_Main:	
  4142                           ; 0 bytes @ 0x4E
  4143                           
  4144  006E                     ??_RF_Main:	
  4145                           ; 0 bytes @ 0x4E
  4146                           
  4147  006E                     ??_main:	
  4148                           ; 0 bytes @ 0x4E
  4149                           
  4150                           
  4151                           	psect	maintext
  4152  1551                     __pmaintext:	
  4153                           ; 0 bytes @ 0x4E
  4154 ;;
  4155 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4156 ;;
  4157 ;; *************** function _main *****************
  4158 ;; Defined at:
  4159 ;;		line 7 in file "../src/main_B1.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  argc            2    0[BANK4 ] int 
  4162 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  2    0[BANK4 ] int 
  4167 ;; Registers used:
  4168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 17F/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4174 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4178 ;;Total ram usage:        4 bytes
  4179 ;; Hardware stack levels required when called:   13
  4180 ;; This function calls:
  4181 ;;		_Buzzer_Initialization
  4182 ;;		_Buzzer_Main
  4183 ;;		_CC2500_PowerOnInitial
  4184 ;;		_DelayOff_Initialization
  4185 ;;		_DelayOff_Main
  4186 ;;		_DimmerLights_Initialization
  4187 ;;		_DimmerLights_Main
  4188 ;;		_Exception_Main
  4189 ;;		_Flash_Memory_Initialization
  4190 ;;		_Flash_Memory_Main
  4191 ;;		_LED_Initialization
  4192 ;;		_LED_Main
  4193 ;;		_Load_Initialization
  4194 ;;		_Load_Main
  4195 ;;		_Mcu_Initialization
  4196 ;;		_RF_Initialization
  4197 ;;		_RF_Main
  4198 ;;		_Switch_Initialization
  4199 ;;		_Switch_Main
  4200 ;;		_Temp_Initialization
  4201 ;;		_Temp_Main
  4202 ;;		_WDT_Main
  4203 ;;		_getLoad_AD
  4204 ;;		_getTemp_AD
  4205 ;;		_myMain_Initialization
  4206 ;;		_my_MainTimer
  4207 ;; This function is called by:
  4208 ;;		Startup code after reset
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           
  4213                           ;psect for function _main
  4214  1551                     _main:	
  4215                           
  4216                           ;main_B1.c: 8: myMain_Initialization();
  4217                           
  4218                           ;incstack = 0
  4219                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4220  1551  319B  2359  3195   	fcall	_myMain_Initialization
  4221                           
  4222                           ;main_B1.c: 9: Mcu_Initialization();
  4223  1554  319A  22E9  3195   	fcall	_Mcu_Initialization
  4224                           
  4225                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4226  1557  3184  247E  3195   	fcall	_Flash_Memory_Initialization
  4227                           
  4228                           ;main_B1.c: 11: LED_Initialization();
  4229  155A  319A  2220  3195   	fcall	_LED_Initialization
  4230                           
  4231                           ;main_B1.c: 12: Buzzer_Initialization();
  4232  155D  3199  212B  3195   	fcall	_Buzzer_Initialization
  4233                           
  4234                           ;main_B1.c: 14: ;;
  4235                           ;main_B1.c: 15: Temp_Initialization();
  4236  1560  3199  2137  3195   	fcall	_Temp_Initialization
  4237                           
  4238                           ;main_B1.c: 16: Load_Initialization();
  4239  1563  3199  212E  3195   	fcall	_Load_Initialization
  4240                           
  4241                           ;main_B1.c: 17: ;;
  4242                           ;main_B1.c: 18: DelayOff_Initialization();
  4243  1566  3199  216F  3195   	fcall	_DelayOff_Initialization
  4244                           
  4245                           ;main_B1.c: 20: DimmerLights_Initialization();
  4246  1569  3199  21B9  3195   	fcall	_DimmerLights_Initialization
  4247                           
  4248                           ;main_B1.c: 21: ;;
  4249                           ;main_B1.c: 22: ;;
  4250                           ;main_B1.c: 23: ;;
  4251                           ;main_B1.c: 24: Switch_Initialization();
  4252  156C  3199  219F  3195   	fcall	_Switch_Initialization
  4253                           
  4254                           ;main_B1.c: 25: RF_Initialization();
  4255  156F  3199  2131  3195   	fcall	_RF_Initialization
  4256                           
  4257                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4258  1572  319B  23A9  3195   	fcall	_CC2500_PowerOnInitial
  4259  1575                     l10057:	
  4260                           ;main_B1.c: 27: ;;
  4261                           ;main_B1.c: 28: ;;
  4262                           ;main_B1.c: 30: while (1) {
  4263                           
  4264                           
  4265                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4266  1575  0022               	movlb	2	; select bank2
  4267  1576  1C20               	btfss	_myMain^(0+256),0
  4268  1577  2D80               	goto	l10061
  4269                           
  4270                           ;main_B1.c: 38: getLoad_AD(0x05);
  4271  1578  3005               	movlw	5
  4272  1579  318A  22A4  3195   	fcall	_getLoad_AD
  4273                           
  4274                           ;main_B1.c: 42: getTemp_AD(0x09);
  4275  157C  3009               	movlw	9
  4276  157D  3192  225C  3195   	fcall	_getTemp_AD
  4277  1580                     l10061:	
  4278                           
  4279                           ;main_B1.c: 57: }
  4280                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4281  1580  0021               	movlb	1	; select bank1
  4282  1581  1C46               	btfss	_Timer1^(0+128),0
  4283  1582  2D75               	goto	l10057
  4284                           
  4285                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4286  1583  1046               	bcf	_Timer1^(0+128),0
  4287                           
  4288                           ;main_B1.c: 96: my_MainTimer();
  4289  1584  3191  21E1  3195   	fcall	_my_MainTimer
  4290                           
  4291                           ;main_B1.c: 97: WDT_Main();
  4292  1587  319A  22FB  3195   	fcall	_WDT_Main
  4293                           
  4294                           ;main_B1.c: 98: ;;
  4295                           ;main_B1.c: 99: ;;
  4296                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4297  158A  0022               	movlb	2	; select bank2
  4298  158B  1C20               	btfss	_myMain^(0+256),0
  4299  158C  2D75               	goto	l10057
  4300                           
  4301                           ;main_B1.c: 101: Flash_Memory_Main();
  4302  158D  3190  20C1  3195   	fcall	_Flash_Memory_Main
  4303                           
  4304                           ;main_B1.c: 103: LED_Main();
  4305  1590  319A  222C  3195   	fcall	_LED_Main
  4306                           
  4307                           ;main_B1.c: 104: Buzzer_Main();
  4308  1593  3193  2364  3195   	fcall	_Buzzer_Main
  4309                           
  4310                           ;main_B1.c: 106: ;;
  4311                           ;main_B1.c: 107: Temp_Main();
  4312  1596  3199  213A  3195   	fcall	_Temp_Main
  4313                           
  4314                           ;main_B1.c: 108: Load_Main();
  4315  1599  3180  2052  3195   	fcall	_Load_Main
  4316                           
  4317                           ;main_B1.c: 109: ;;
  4318                           ;main_B1.c: 111: ;;
  4319                           ;main_B1.c: 112: DimmerLights_Main();
  4320  159C  319D  25CA  3195   	fcall	_DimmerLights_Main
  4321                           
  4322                           ;main_B1.c: 113: Switch_Main();
  4323  159F  3199  21E5  3195   	fcall	_Switch_Main
  4324                           
  4325                           ;main_B1.c: 114: ;;
  4326                           ;main_B1.c: 115: ;;
  4327                           ;main_B1.c: 117: RF_Main();
  4328  15A2  3199  2134  3195   	fcall	_RF_Main
  4329                           
  4330                           ;main_B1.c: 118: DelayOff_Main();
  4331  15A5  3199  2177  3195   	fcall	_DelayOff_Main
  4332                           
  4333                           ;main_B1.c: 119: ;;
  4334                           ;main_B1.c: 120: ;;
  4335                           ;main_B1.c: 121: Exception_Main();
  4336  15A8  3186  2644  3195   	fcall	_Exception_Main
  4337  15AB  2D75               	goto	l10057
  4338  15AC                     __end_of_main:	
  4339                           ;main_B1.c: 128: }
  4340                           ;main_B1.c: 129: }
  4341                           ;main_B1.c: 163: }
  4342                           ;main_B1.c: 164: return (0);
  4343                           ;	Return value of _main is never used
  4344                           
  4345                           
  4346                           	psect	text1
  4347  11E1                     __ptext1:	
  4348 ;; *************** function _my_MainTimer *****************
  4349 ;; Defined at:
  4350 ;;		line 185 in file "../src/main_B1.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;		None
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;		None
  4355 ;; Return value:  Size  Location     Type
  4356 ;;		None               void
  4357 ;; Registers used:
  4358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;Total ram usage:        1 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    7
  4371 ;; This function calls:
  4372 ;;		_setBuz
  4373 ;; This function is called by:
  4374 ;;		_main
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           
  4379                           ;psect for function _my_MainTimer
  4380  11E1                     _my_MainTimer:	
  4381                           
  4382                           ;main_B1.c: 187: if (myMain.PowerON == 0) {
  4383                           
  4384                           ;incstack = 0
  4385                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4386  11E1  0022               	movlb	2	; select bank2
  4387  11E2  1820               	btfsc	_myMain^(0+256),0
  4388  11E3  29FB               	goto	l9955
  4389                           
  4390                           ;main_B1.c: 188: myMain.PowerCount++;
  4391  11E4  3001               	movlw	1
  4392  11E5  0020               	movlb	0	; select bank0
  4393  11E6  00AE               	movwf	??_my_MainTimer
  4394  11E7  082E               	movf	??_my_MainTimer,w
  4395  11E8  0022               	movlb	2	; select bank2
  4396  11E9  07A1               	addwf	(_myMain^(0+256)+1),f
  4397                           
  4398                           ;main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4399  11EA  0821               	movf	(_myMain^(0+256)+1),w
  4400  11EB  3A4B               	xorlw	75
  4401  11EC  1D03               	skipz
  4402  11ED  0008               	return
  4403                           
  4404                           ;main_B1.c: 190: myMain.PowerCount = 0;
  4405  11EE  01A1               	clrf	(_myMain^(0+256)+1)
  4406                           
  4407                           ;main_B1.c: 191: myMain.PowerON = 1;
  4408  11EF  1420               	bsf	_myMain^(0+256),0
  4409                           
  4410                           ;main_B1.c: 196: setBuz(3, 50);
  4411  11F0  3032               	movlw	50
  4412  11F1  0020               	movlb	0	; select bank0
  4413  11F2  00AA               	movwf	setBuz@time
  4414  11F3  3000               	movlw	0
  4415  11F4  00AB               	movwf	setBuz@time+1
  4416  11F5  3003               	movlw	3
  4417  11F6  3194  24F8         	fcall	_setBuz
  4418                           
  4419                           ;main_B1.c: 197: myMain.SelfTest = 1;
  4420  11F8  0022               	movlb	2	; select bank2
  4421  11F9  1620               	bsf	_myMain^(0+256),4
  4422                           
  4423                           ;main_B1.c: 206: }
  4424                           ;main_B1.c: 207: } else {
  4425  11FA  0008               	return
  4426  11FB                     l9955:	
  4427                           
  4428                           ;main_B1.c: 208: myMain.PowerCount++;
  4429  11FB  3001               	movlw	1
  4430  11FC  0020               	movlb	0	; select bank0
  4431  11FD  00AE               	movwf	??_my_MainTimer
  4432  11FE  082E               	movf	??_my_MainTimer,w
  4433  11FF  0022               	movlb	2	; select bank2
  4434  1200  07A1               	addwf	(_myMain^(0+256)+1),f
  4435                           
  4436                           ;main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4437  1201  0821               	movf	(_myMain^(0+256)+1),w
  4438  1202  3A32               	xorlw	50
  4439  1203  1903               	btfsc	3,2
  4440                           
  4441                           ;main_B1.c: 210: myMain.PowerCount = 0;
  4442  1204  01A1               	clrf	(_myMain^(0+256)+1)
  4443                           
  4444                           ;main_B1.c: 226: }
  4445                           ;main_B1.c: 228: myMain.Count1++;
  4446  1205  3001               	movlw	1
  4447  1206  07A4               	addwf	(_myMain^(0+256)+4),f
  4448  1207  3000               	movlw	0
  4449  1208  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4450                           
  4451                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4452  1209  3004               	movlw	4
  4453  120A  3E20               	addlw	_myMain& (0+255)
  4454  120B  0086               	movwf	6
  4455  120C  3001               	movlw	1	; select bank2/3
  4456  120D  0087               	movwf	7
  4457  120E  3F40               	moviw [0]fsr1
  4458  120F  3A32               	xorlw	50
  4459  1210  1D03               	skipz
  4460  1211  2A14               	goto	u11635
  4461  1212  3F41               	moviw [1]fsr1
  4462  1213  3A00               	xorlw	0
  4463  1214                     u11635:	
  4464  1214  1D03               	skipz
  4465  1215  0008               	return
  4466                           
  4467                           ;main_B1.c: 230: myMain.Count1 = 0;
  4468  1216  01A4               	clrf	(_myMain^(0+256)+4)
  4469  1217  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4470                           
  4471                           ;main_B1.c: 242: if (myMain.Flag) {
  4472  1218  1CA0               	btfss	_myMain^(0+256),1
  4473  1219  2A1C               	goto	l2835
  4474                           
  4475                           ;main_B1.c: 243: myMain.Flag = 0;
  4476  121A  10A0               	bcf	_myMain^(0+256),1
  4477                           
  4478                           ;main_B1.c: 252: } else {
  4479  121B  0008               	return
  4480  121C                     l2835:	
  4481                           
  4482                           ;main_B1.c: 253: myMain.Flag = 1;
  4483  121C  14A0               	bsf	_myMain^(0+256),1
  4484  121D  0008               	return
  4485  121E                     __end_of_my_MainTimer:	
  4486                           
  4487                           	psect	text2
  4488  1B59                     __ptext2:	
  4489 ;; *************** function _myMain_Initialization *****************
  4490 ;; Defined at:
  4491 ;;		line 170 in file "../src/main_B1.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;		None               void
  4498 ;; Registers used:
  4499 ;;		wreg, fsr1l, fsr1h
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;Total ram usage:        1 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    5
  4512 ;; This function calls:
  4513 ;;		Nothing
  4514 ;; This function is called by:
  4515 ;;		_main
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           
  4520                           ;psect for function _myMain_Initialization
  4521  1B59                     _myMain_Initialization:	
  4522                           
  4523                           ;main_B1.c: 173: product = &_product;
  4524                           
  4525                           ;incstack = 0
  4526                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4527  1B59  3045               	movlw	__product& (0+255)
  4528  1B5A  0020               	movlb	0	; select bank0
  4529  1B5B  00A1               	movwf	??_myMain_Initialization
  4530  1B5C  0821               	movf	??_myMain_Initialization,w
  4531  1B5D  0021               	movlb	1	; select bank1
  4532  1B5E  00ED               	movwf	_product^(0+128)
  4533                           
  4534                           ;main_B1.c: 174: product->Data[20] = 210;
  4535  1B5F  30D2               	movlw	210
  4536  1B60  0020               	movlb	0	; select bank0
  4537  1B61  00A1               	movwf	??_myMain_Initialization
  4538  1B62  0021               	movlb	1	; select bank1
  4539  1B63  086D               	movf	_product^(0+128),w
  4540  1B64  3E14               	addlw	20
  4541  1B65  0086               	movwf	6
  4542  1B66  3002               	movlw	2	; select bank4/5
  4543  1B67  0087               	movwf	7
  4544  1B68  0020               	movlb	0	; select bank0
  4545  1B69  0821               	movf	??_myMain_Initialization,w
  4546  1B6A  0081               	movwf	1
  4547  1B6B  0008               	return
  4548  1B6C                     __end_of_myMain_Initialization:	
  4549                           
  4550                           	psect	text3
  4551  125C                     __ptext3:	
  4552 ;; *************** function _getTemp_AD *****************
  4553 ;; Defined at:
  4554 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;  channel         1    wreg     unsigned char 
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;  channel         1    6[BANK0 ] unsigned char 
  4559 ;;  ADRES           2    7[BANK0 ] unsigned int 
  4560 ;; Return value:  Size  Location     Type
  4561 ;;		None               void
  4562 ;; Registers used:
  4563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4572 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;Total ram usage:        4 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    7
  4576 ;; This function calls:
  4577 ;;		_getAD
  4578 ;; This function is called by:
  4579 ;;		_main
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           
  4584                           ;psect for function _getTemp_AD
  4585  125C                     _getTemp_AD:	
  4586                           
  4587                           ;incstack = 0
  4588                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4589                           ;getTemp_AD@channel stored from wreg
  4590  125C  0020               	movlb	0	; select bank0
  4591  125D  00A6               	movwf	getTemp_AD@channel
  4592                           
  4593                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4594  125E  01A7               	clrf	getTemp_AD@ADRES
  4595  125F  01A8               	clrf	getTemp_AD@ADRES+1
  4596                           
  4597                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4598  1260  0021               	movlb	1	; select bank1
  4599  1261  1D5B               	btfss	_Temp^(0+128),2
  4600  1262  2A8C               	goto	l8759
  4601                           
  4602                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4603  1263  30F0               	movlw	240
  4604  1264  0020               	movlb	0	; select bank0
  4605  1265  00A5               	movwf	??_getTemp_AD
  4606  1266  0825               	movf	??_getTemp_AD,w
  4607  1267  00A1               	movwf	getAD@adcon1
  4608  1268  0826               	movf	getTemp_AD@channel,w
  4609  1269  319E  266D  3192   	fcall	_getAD
  4610  126C  0020               	movlb	0	; select bank0
  4611  126D  0822               	movf	?_getAD+1,w
  4612  126E  01A8               	clrf	getTemp_AD@ADRES+1
  4613  126F  07A8               	addwf	getTemp_AD@ADRES+1,f
  4614  1270  0821               	movf	?_getAD,w
  4615  1271  01A7               	clrf	getTemp_AD@ADRES
  4616  1272  07A7               	addwf	getTemp_AD@ADRES,f
  4617                           
  4618                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4619  1273  0828               	movf	getTemp_AD@ADRES+1,w
  4620  1274  0427               	iorwf	getTemp_AD@ADRES,w
  4621  1275  1903               	skipnz
  4622  1276  2A8C               	goto	l8759
  4623                           
  4624                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4625  1277  0828               	movf	getTemp_AD@ADRES+1,w
  4626  1278  0021               	movlb	1	; select bank1
  4627  1279  0264               	subwf	((_Temp+1)^(0+128)+8),w
  4628  127A  1D03               	skipz
  4629  127B  2A80               	goto	u9515
  4630  127C  0020               	movlb	0	; select bank0
  4631  127D  0827               	movf	getTemp_AD@ADRES,w
  4632  127E  0021               	movlb	1	; select bank1
  4633  127F  0263               	subwf	(_Temp^(0+128)+8),w
  4634  1280                     u9515:	
  4635  1280  1803               	skipnc
  4636  1281  2A8C               	goto	l8759
  4637                           
  4638                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4639  1282  0020               	movlb	0	; select bank0
  4640  1283  0828               	movf	getTemp_AD@ADRES+1,w
  4641  1284  0021               	movlb	1	; select bank1
  4642  1285  01E4               	clrf	((_Temp+1)^(0+128)+8)
  4643  1286  07E4               	addwf	((_Temp+1)^(0+128)+8),f
  4644  1287  0020               	movlb	0	; select bank0
  4645  1288  0827               	movf	getTemp_AD@ADRES,w
  4646  1289  0021               	movlb	1	; select bank1
  4647  128A  01E3               	clrf	(_Temp^(0+128)+8)
  4648  128B  07E3               	addwf	(_Temp^(0+128)+8),f
  4649  128C                     l8759:	
  4650                           
  4651                           ;OverTemperature_B1.c: 32: }
  4652                           ;OverTemperature_B1.c: 33: }
  4653                           ;OverTemperature_B1.c: 34: }
  4654                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4655  128C  30F0               	movlw	240
  4656  128D  0020               	movlb	0	; select bank0
  4657  128E  00A5               	movwf	??_getTemp_AD
  4658  128F  0825               	movf	??_getTemp_AD,w
  4659  1290  00A1               	movwf	getAD@adcon1
  4660  1291  0826               	movf	getTemp_AD@channel,w
  4661  1292  319E  266D         	fcall	_getAD
  4662  1294  0020               	movlb	0	; select bank0
  4663  1295  0822               	movf	?_getAD+1,w
  4664  1296  01A8               	clrf	getTemp_AD@ADRES+1
  4665  1297  07A8               	addwf	getTemp_AD@ADRES+1,f
  4666  1298  0821               	movf	?_getAD,w
  4667  1299  01A7               	clrf	getTemp_AD@ADRES
  4668  129A  07A7               	addwf	getTemp_AD@ADRES,f
  4669  129B  0008               	return
  4670  129C                     __end_of_getTemp_AD:	
  4671                           
  4672                           	psect	text4
  4673  0AA4                     __ptext4:	
  4674 ;; *************** function _getLoad_AD *****************
  4675 ;; Defined at:
  4676 ;;		line 15 in file "../src/OverLoad_B1.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  channel         1    wreg     unsigned char 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  channel         1    7[BANK0 ] unsigned char 
  4681 ;;  ADRES           2   10[BANK0 ] unsigned int 
  4682 ;;  i               1   12[BANK0 ] unsigned char 
  4683 ;;  j               1    9[BANK0 ] unsigned char 
  4684 ;;  k               1    8[BANK0 ] unsigned char 
  4685 ;; Return value:  Size  Location     Type
  4686 ;;		None               void
  4687 ;; Registers used:
  4688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4698 ;;Total ram usage:        8 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; Hardware stack levels required when called:    7
  4701 ;; This function calls:
  4702 ;;		_getAD
  4703 ;; This function is called by:
  4704 ;;		_main
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           
  4709                           ;psect for function _getLoad_AD
  4710  0AA4                     _getLoad_AD:	
  4711                           
  4712                           ;incstack = 0
  4713                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4714                           ;getLoad_AD@channel stored from wreg
  4715  0AA4  0020               	movlb	0	; select bank0
  4716  0AA5  00A7               	movwf	getLoad_AD@channel
  4717                           
  4718                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4719  0AA6  01AC               	clrf	getLoad_AD@i
  4720  0AA7  01A9               	clrf	getLoad_AD@j
  4721  0AA8  01A8               	clrf	getLoad_AD@k
  4722                           
  4723                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4724  0AA9  01AA               	clrf	getLoad_AD@ADRES
  4725  0AAA  01AB               	clrf	getLoad_AD@ADRES+1
  4726                           
  4727                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4728  0AAB  0022               	movlb	2	; select bank2
  4729  0AAC  1E40               	btfss	_Load^(0+256),4
  4730  0AAD  0008               	return
  4731                           
  4732                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4733  0AAE  30F3               	movlw	243
  4734  0AAF  0020               	movlb	0	; select bank0
  4735  0AB0  00A5               	movwf	??_getLoad_AD
  4736  0AB1  0825               	movf	??_getLoad_AD,w
  4737  0AB2  00A1               	movwf	getAD@adcon1
  4738  0AB3  0827               	movf	getLoad_AD@channel,w
  4739  0AB4  319E  266D  318A   	fcall	_getAD
  4740  0AB7  0020               	movlb	0	; select bank0
  4741  0AB8  0822               	movf	?_getAD+1,w
  4742  0AB9  01AB               	clrf	getLoad_AD@ADRES+1
  4743  0ABA  07AB               	addwf	getLoad_AD@ADRES+1,f
  4744  0ABB  0821               	movf	?_getAD,w
  4745  0ABC  01AA               	clrf	getLoad_AD@ADRES
  4746  0ABD  07AA               	addwf	getLoad_AD@ADRES,f
  4747                           
  4748                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4749  0ABE  01AC               	clrf	getLoad_AD@i
  4750  0ABF  3004               	movlw	4
  4751  0AC0  022C               	subwf	getLoad_AD@i,w
  4752  0AC1  1803               	btfsc	3,0
  4753  0AC2  2AEA               	goto	l8569
  4754  0AC3                     l8557:	
  4755                           
  4756                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4757  0AC3  352C               	lslf	getLoad_AD@i,w
  4758  0AC4  3E4B               	addlw	(_Load+11)& (0+255)
  4759  0AC5  0086               	movwf	6
  4760  0AC6  3001               	movlw	1	; select bank2/3
  4761  0AC7  0087               	movwf	7
  4762  0AC8  3F40               	moviw [0]fsr1
  4763  0AC9  00A5               	movwf	??_getLoad_AD
  4764  0ACA  3F41               	moviw [1]fsr1
  4765  0ACB  00A6               	movwf	??_getLoad_AD+1
  4766  0ACC  082B               	movf	getLoad_AD@ADRES+1,w
  4767  0ACD  0226               	subwf	??_getLoad_AD+1,w
  4768  0ACE  1D03               	skipz
  4769  0ACF  2AD2               	goto	u9105
  4770  0AD0  082A               	movf	getLoad_AD@ADRES,w
  4771  0AD1  0225               	subwf	??_getLoad_AD,w
  4772  0AD2                     u9105:	
  4773  0AD2  1803               	skipnc
  4774  0AD3  2AE2               	goto	l8565
  4775  0AD4  08A9               	movf	getLoad_AD@j,f
  4776  0AD5  1D03               	skipz
  4777  0AD6  2AE2               	goto	l8565
  4778                           
  4779                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4780  0AD7  352C               	lslf	getLoad_AD@i,w
  4781  0AD8  3E4B               	addlw	(_Load+11)& (0+255)
  4782  0AD9  0086               	movwf	6
  4783  0ADA  3001               	movlw	1	; select bank2/3
  4784  0ADB  0087               	movwf	7
  4785  0ADC  082A               	movf	getLoad_AD@ADRES,w
  4786  0ADD  3FC0               	movwi [0]fsr1
  4787  0ADE  082B               	movf	getLoad_AD@ADRES+1,w
  4788  0ADF  3FC1               	movwi [1]fsr1
  4789                           
  4790                           ;OverLoad_B1.c: 24: j = 1;
  4791  0AE0  01A9               	clrf	getLoad_AD@j
  4792  0AE1  0AA9               	incf	getLoad_AD@j,f
  4793  0AE2                     l8565:	
  4794  0AE2  3001               	movlw	1
  4795  0AE3  00A5               	movwf	??_getLoad_AD
  4796  0AE4  0825               	movf	??_getLoad_AD,w
  4797  0AE5  07AC               	addwf	getLoad_AD@i,f
  4798  0AE6  3004               	movlw	4
  4799  0AE7  022C               	subwf	getLoad_AD@i,w
  4800  0AE8  1C03               	skipc
  4801  0AE9  2AC3               	goto	l8557
  4802  0AEA                     l8569:	
  4803                           
  4804                           ;OverLoad_B1.c: 25: }
  4805                           ;OverLoad_B1.c: 26: }
  4806                           ;OverLoad_B1.c: 27: if (j == 0) {
  4807  0AEA  08A9               	movf	getLoad_AD@j,f
  4808  0AEB  1D03               	skipz
  4809  0AEC  0008               	return
  4810                           
  4811                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4812  0AED  01AC               	clrf	getLoad_AD@i
  4813  0AEE                     L1:	
  4814  0AEE  3004               	movlw	4
  4815  0AEF  022C               	subwf	getLoad_AD@i,w
  4816  0AF0  1803               	btfsc	3,0
  4817  0AF1  0008               	return
  4818                           
  4819                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4820  0AF2  352C               	lslf	getLoad_AD@i,w
  4821  0AF3  3E55               	addlw	(_Load+21)& (0+255)
  4822  0AF4  0086               	movwf	6
  4823  0AF5  3001               	movlw	1	; select bank2/3
  4824  0AF6  0087               	movwf	7
  4825  0AF7  3F40               	moviw [0]fsr1
  4826  0AF8  00A5               	movwf	??_getLoad_AD
  4827  0AF9  3F41               	moviw [1]fsr1
  4828  0AFA  00A6               	movwf	??_getLoad_AD+1
  4829  0AFB  0826               	movf	??_getLoad_AD+1,w
  4830  0AFC  022B               	subwf	getLoad_AD@ADRES+1,w
  4831  0AFD  1D03               	skipz
  4832  0AFE  2B01               	goto	u9155
  4833  0AFF  0825               	movf	??_getLoad_AD,w
  4834  0B00  022A               	subwf	getLoad_AD@ADRES,w
  4835  0B01                     u9155:	
  4836  0B01  1803               	skipnc
  4837  0B02  2B11               	goto	l8585
  4838  0B03  08A8               	movf	getLoad_AD@k,f
  4839  0B04  1D03               	skipz
  4840  0B05  2B11               	goto	l8585
  4841                           
  4842                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4843  0B06  352C               	lslf	getLoad_AD@i,w
  4844  0B07  3E55               	addlw	(_Load+21)& (0+255)
  4845  0B08  0086               	movwf	6
  4846  0B09  3001               	movlw	1	; select bank2/3
  4847  0B0A  0087               	movwf	7
  4848  0B0B  082A               	movf	getLoad_AD@ADRES,w
  4849  0B0C  3FC0               	movwi [0]fsr1
  4850  0B0D  082B               	movf	getLoad_AD@ADRES+1,w
  4851  0B0E  3FC1               	movwi [1]fsr1
  4852                           
  4853                           ;OverLoad_B1.c: 31: k = 1;
  4854  0B0F  01A8               	clrf	getLoad_AD@k
  4855  0B10  0AA8               	incf	getLoad_AD@k,f
  4856  0B11                     l8585:	
  4857  0B11  3001               	movlw	1
  4858  0B12  00A5               	movwf	??_getLoad_AD
  4859  0B13  0825               	movf	??_getLoad_AD,w
  4860  0B14  07AC               	addwf	getLoad_AD@i,f
  4861  0B15  2AEE               	goto	L1
  4862  0B16                     __end_of_getLoad_AD:	
  4863                           
  4864                           	psect	text5
  4865  1E6D                     __ptext5:	
  4866 ;; *************** function _getAD *****************
  4867 ;; Defined at:
  4868 ;;		line 459 in file "../src/MCU_B1.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  adcon0          1    wreg     unsigned char 
  4871 ;;  adcon1          1    1[BANK0 ] unsigned char 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  adcon0          1    4[BANK0 ] unsigned char 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  2    1[BANK0 ] int 
  4876 ;; Registers used:
  4877 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4883 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;Total ram usage:        4 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    6
  4890 ;; This function calls:
  4891 ;;		_Timeout_Counter
  4892 ;;		_set_TimeoutCleared
  4893 ;; This function is called by:
  4894 ;;		_getLoad_AD
  4895 ;;		_getTemp_AD
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function _getAD
  4901  1E6D                     _getAD:	
  4902                           
  4903                           ;incstack = 0
  4904                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4905                           ;getAD@adcon0 stored from wreg
  4906  1E6D  0020               	movlb	0	; select bank0
  4907  1E6E  00A4               	movwf	getAD@adcon0
  4908                           
  4909                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4910  1E6F  0824               	movf	getAD@adcon0,w
  4911  1E70  0021               	movlb	1	; select bank1
  4912  1E71  009D               	movwf	29	;volatile
  4913                           
  4914                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4915  1E72  0020               	movlb	0	; select bank0
  4916  1E73  0821               	movf	getAD@adcon1,w
  4917  1E74  0021               	movlb	1	; select bank1
  4918  1E75  009E               	movwf	30	;volatile
  4919                           
  4920                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4921  1E76  149D               	bsf	29,1	;volatile
  4922                           
  4923                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4924  1E77  2E7B               	goto	l8063
  4925  1E78                     l8061:	
  4926                           
  4927                           ;MCU_B1.c: 464: Timeout_Counter();
  4928  1E78  3188  2000  319E   	fcall	_Timeout_Counter
  4929  1E7B                     l8063:	
  4930  1E7B  0021               	movlb	1	; select bank1
  4931  1E7C  1C9D               	btfss	29,1	;volatile
  4932  1E7D  2E81               	goto	l8067
  4933  1E7E  0022               	movlb	2	; select bank2
  4934  1E7F  1D2A               	btfss	(_myMain^(0+256)+10),2
  4935  1E80  2E78               	goto	l8061
  4936  1E81                     l8067:	
  4937                           
  4938                           ;MCU_B1.c: 465: };
  4939                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4940  1E81  3199  2151         	fcall	_set_TimeoutCleared
  4941                           
  4942                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4943  1E83  0021               	movlb	1	; select bank1
  4944  1E84  081C               	movf	28,w	;volatile
  4945  1E85  0020               	movlb	0	; select bank0
  4946  1E86  01A2               	clrf	?_getAD+1
  4947  1E87  07A2               	addwf	?_getAD+1,f
  4948  1E88  0021               	movlb	1	; select bank1
  4949  1E89  081B               	movf	27,w	;volatile
  4950  1E8A  0020               	movlb	0	; select bank0
  4951  1E8B  01A1               	clrf	?_getAD
  4952  1E8C  07A1               	addwf	?_getAD,f
  4953  1E8D  0008               	return
  4954  1E8E                     __end_of_getAD:	
  4955                           
  4956                           	psect	text6
  4957  1AFB                     __ptext6:	
  4958 ;; *************** function _WDT_Main *****************
  4959 ;; Defined at:
  4960 ;;		line 1103 in file "../src/MCU_B1.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;		None
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;		None
  4965 ;; Return value:  Size  Location     Type
  4966 ;;		None               void
  4967 ;; Registers used:
  4968 ;;		wreg, status,2, status,0, pclath, cstack
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;Total ram usage:        1 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:    6
  4981 ;; This function calls:
  4982 ;;		_WDT_Clearing
  4983 ;; This function is called by:
  4984 ;;		_main
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           
  4989                           ;psect for function _WDT_Main
  4990  1AFB                     _WDT_Main:	
  4991                           
  4992                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  4993                           
  4994                           ;incstack = 0
  4995                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4996  1AFB  0021               	movlb	1	; select bank1
  4997  1AFC  1C49               	btfss	_WDT^(0+128),0
  4998  1AFD  0008               	return
  4999                           
  5000                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  5001  1AFE  3001               	movlw	1
  5002  1AFF  02CA               	subwf	(_WDT^(0+128)+1),f
  5003  1B00  084A               	movf	(_WDT^(0+128)+1),w
  5004  1B01  3AFF               	xorlw	255
  5005  1B02  1903               	skipnz
  5006  1B03  0008               	return
  5007                           
  5008                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  5009  1B04  3064               	movlw	100
  5010  1B05  0020               	movlb	0	; select bank0
  5011  1B06  00A1               	movwf	??_WDT_Main
  5012  1B07  0821               	movf	??_WDT_Main,w
  5013  1B08  0021               	movlb	1	; select bank1
  5014  1B09  00CA               	movwf	(_WDT^(0+128)+1)
  5015                           
  5016                           ;MCU_B1.c: 1107: WDT_Clearing();
  5017  1B0A  3180  2002         	fcall	_WDT_Clearing
  5018  1B0C  0008               	return
  5019  1B0D                     __end_of_WDT_Main:	
  5020                           
  5021                           	psect	text7
  5022  0002                     __ptext7:	
  5023 ;; *************** function _WDT_Clearing *****************
  5024 ;; Defined at:
  5025 ;;		line 1113 in file "../src/MCU_B1.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;		None
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;		None
  5030 ;; Return value:  Size  Location     Type
  5031 ;;		None               void
  5032 ;; Registers used:
  5033 ;;		None
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;Total ram usage:        0 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    5
  5046 ;; This function calls:
  5047 ;;		Nothing
  5048 ;; This function is called by:
  5049 ;;		_WDT_Main
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           
  5054                           ;psect for function _WDT_Clearing
  5055  0002                     _WDT_Clearing:	
  5056                           
  5057                           ;incstack = 0
  5058                           ; Regs used in _WDT_Clearing: []
  5059  0002  0064               	clrwdt	;# 
  5060  0003  0008               	return
  5061  0004                     __end_of_WDT_Clearing:	
  5062                           
  5063                           	psect	text8
  5064  193A                     __ptext8:	
  5065 ;; *************** function _Temp_Main *****************
  5066 ;; Defined at:
  5067 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;		None
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;		None               void
  5074 ;; Registers used:
  5075 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;Total ram usage:        0 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    8
  5088 ;; This function calls:
  5089 ;;		_setTemp_Main
  5090 ;; This function is called by:
  5091 ;;		_main
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           
  5096                           ;psect for function _Temp_Main
  5097  193A                     _Temp_Main:	
  5098                           
  5099                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5103  193A  318D  25E1         	fcall	_setTemp_Main
  5104  193C  0008               	return
  5105  193D                     __end_of_Temp_Main:	
  5106                           
  5107                           	psect	text9
  5108  0DE1                     __ptext9:	
  5109 ;; *************** function _setTemp_Main *****************
  5110 ;; Defined at:
  5111 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;		None
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  AD              2    6[BANK1 ] unsigned int 
  5116 ;;  DangerValue     2    4[BANK1 ] unsigned int 
  5117 ;;  SafeValue       2    2[BANK1 ] unsigned int 
  5118 ;;  TempGO          1    1[BANK1 ] unsigned char 
  5119 ;;  error           1    0[BANK1 ] unsigned char 
  5120 ;; Return value:  Size  Location     Type
  5121 ;;		None               void
  5122 ;; Registers used:
  5123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5130 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5131 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5132 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5133 ;;Total ram usage:        9 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    7
  5136 ;; This function calls:
  5137 ;;		_getMain_All_Error_Status
  5138 ;;		_getMain_All_LightsStatus
  5139 ;;		_setBuz
  5140 ;;		_setProductData
  5141 ;; This function is called by:
  5142 ;;		_Temp_Main
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           
  5147                           ;psect for function _setTemp_Main
  5148  0DE1                     _setTemp_Main:	
  5149                           
  5150                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5151                           
  5152                           ;incstack = 0
  5153                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5154  0DE1  3000               	movlw	0
  5155  0DE2  3190  205A  318D   	fcall	_getMain_All_Error_Status
  5156  0DE5  0020               	movlb	0	; select bank0
  5157  0DE6  00E6               	movwf	??_setTemp_Main
  5158  0DE7  0866               	movf	??_setTemp_Main,w
  5159  0DE8  0021               	movlb	1	; select bank1
  5160  0DE9  00E5               	movwf	setTemp_Main@error^(0+128)
  5161                           
  5162                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5163  0DEA  01E7               	clrf	setTemp_Main@SafeValue^(0+128)
  5164  0DEB  01E8               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5165  0DEC  01E9               	clrf	setTemp_Main@DangerValue^(0+128)
  5166  0DED  01EA               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5167                           
  5168                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5169  0DEE  319B  2320  318D   	fcall	_getMain_All_LightsStatus
  5170  0DF1  0020               	movlb	0	; select bank0
  5171  0DF2  00E6               	movwf	??_setTemp_Main
  5172  0DF3  0866               	movf	??_setTemp_Main,w
  5173  0DF4  0021               	movlb	1	; select bank1
  5174  0DF5  00E6               	movwf	setTemp_Main@TempGO^(0+128)
  5175                           
  5176                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5177  0DF6  1C5B               	btfss	_Temp^(0+128),0
  5178  0DF7  2E8B               	goto	l1762
  5179                           
  5180                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5181  0DF8  195B               	btfsc	_Temp^(0+128),2
  5182  0DF9  2E14               	goto	l9529
  5183                           
  5184                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5185  0DFA  0866               	movf	setTemp_Main@TempGO^(0+128),w
  5186  0DFB  3A01               	xorlw	1
  5187  0DFC  1D03               	skipz
  5188  0DFD  2E00               	goto	l1768
  5189  0DFE  1CDB               	btfss	_Temp^(0+128),1
  5190  0DFF  2E02               	goto	l9521
  5191  0E00                     l1768:	
  5192  0E00  1CDB               	btfss	_Temp^(0+128),1
  5193  0E01  2E11               	goto	l9527
  5194  0E02                     l9521:	
  5195                           
  5196                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5197  0E02  3001               	movlw	1
  5198  0E03  07DC               	addwf	(_Temp^(0+128)+1),f
  5199  0E04  3000               	movlw	0
  5200  0E05  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5201                           
  5202                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5203  0E06  3000               	movlw	0
  5204  0E07  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5205  0E08  30FA               	movlw	250
  5206  0E09  1903               	skipnz
  5207  0E0A  025C               	subwf	(_Temp^(0+128)+1),w
  5208  0E0B  1C03               	skipc
  5209  0E0C  0008               	return
  5210                           
  5211                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5212  0E0D  01DC               	clrf	(_Temp^(0+128)+1)
  5213  0E0E  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5214                           
  5215                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5216  0E0F  155B               	bsf	_Temp^(0+128),2
  5217                           
  5218                           ;OverTemperature_B1.c: 83: }
  5219                           ;OverTemperature_B1.c: 84: } else {
  5220  0E10  0008               	return
  5221  0E11                     l9527:	
  5222                           
  5223                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5224  0E11  01DC               	clrf	(_Temp^(0+128)+1)
  5225  0E12  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5226                           
  5227                           ;OverTemperature_B1.c: 86: }
  5228                           ;OverTemperature_B1.c: 87: } else {
  5229  0E13  0008               	return
  5230  0E14                     l9529:	
  5231                           
  5232                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5233  0E14  3001               	movlw	1
  5234  0E15  07DC               	addwf	(_Temp^(0+128)+1),f
  5235  0E16  3000               	movlw	0
  5236  0E17  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5237                           
  5238                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5239  0E18  3000               	movlw	0
  5240  0E19  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5241  0E1A  3005               	movlw	5
  5242  0E1B  1903               	skipnz
  5243  0E1C  025C               	subwf	(_Temp^(0+128)+1),w
  5244  0E1D  1C03               	skipc
  5245  0E1E  0008               	return
  5246                           
  5247                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5248  0E1F  01DC               	clrf	(_Temp^(0+128)+1)
  5249  0E20  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5250                           
  5251                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5252  0E21  3008               	movlw	8
  5253  0E22  3EDB               	addlw	_Temp& (0+255)
  5254  0E23  0086               	movwf	6
  5255  0E24  0187               	clrf	7
  5256  0E25  0016               	moviw fsr1++
  5257  0E26  0401               	iorwf	1,w
  5258  0E27  1903               	skipnz
  5259  0E28  2E83               	goto	l1773
  5260                           
  5261                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5262  0E29  115B               	bcf	_Temp^(0+128),2
  5263                           
  5264                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5265  0E2A  0864               	movf	((_Temp+1)^(0+128)+8),w
  5266  0E2B  01EC               	clrf	(setTemp_Main@AD+1)^(0+128)
  5267  0E2C  07EC               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5268  0E2D  0863               	movf	(_Temp^(0+128)+8),w
  5269  0E2E  01EB               	clrf	setTemp_Main@AD^(0+128)
  5270  0E2F  07EB               	addwf	setTemp_Main@AD^(0+128),f
  5271                           
  5272                           ;OverTemperature_B1.c: 112: SafeValue = 420;
  5273  0E30  30A4               	movlw	164
  5274  0E31  00E7               	movwf	setTemp_Main@SafeValue^(0+128)
  5275  0E32  3001               	movlw	1
  5276  0E33  00E8               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5277                           
  5278                           ;OverTemperature_B1.c: 113: DangerValue = 370;
  5279  0E34  3072               	movlw	114
  5280  0E35  00E9               	movwf	setTemp_Main@DangerValue^(0+128)
  5281  0E36  3001               	movlw	1
  5282  0E37  00EA               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5283                           
  5284                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5285  0E38  1CDB               	btfss	_Temp^(0+128),1
  5286  0E39  2E5A               	goto	l9559
  5287                           
  5288                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5289  0E3A  0868               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5290  0E3B  026C               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5291  0E3C  1D03               	skipz
  5292  0E3D  2E40               	goto	u10875
  5293  0E3E  0867               	movf	setTemp_Main@SafeValue^(0+128),w
  5294  0E3F  026B               	subwf	setTemp_Main@AD^(0+128),w
  5295  0E40                     u10875:	
  5296  0E40  1C03               	skipc
  5297  0E41  2E58               	goto	l9557
  5298                           
  5299                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5300  0E42  3001               	movlw	1
  5301  0E43  0020               	movlb	0	; select bank0
  5302  0E44  00E6               	movwf	??_setTemp_Main
  5303  0E45  0866               	movf	??_setTemp_Main,w
  5304  0E46  0021               	movlb	1	; select bank1
  5305  0E47  07DE               	addwf	(_Temp^(0+128)+3),f
  5306                           
  5307                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5308  0E48  3003               	movlw	3
  5309  0E49  025E               	subwf	(_Temp^(0+128)+3),w
  5310  0E4A  1C03               	skipc
  5311  0E4B  2E70               	goto	l9571
  5312                           
  5313                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5314  0E4C  01DE               	clrf	(_Temp^(0+128)+3)
  5315                           
  5316                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5317  0E4D  10DB               	bcf	_Temp^(0+128),1
  5318                           
  5319                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5320  0E4E  3064               	movlw	100
  5321  0E4F  0020               	movlb	0	; select bank0
  5322  0E50  00AA               	movwf	setBuz@time
  5323  0E51  3000               	movlw	0
  5324  0E52  00AB               	movwf	setBuz@time+1
  5325  0E53  3002               	movlw	2
  5326  0E54  3194  24F8  318D   	fcall	_setBuz
  5327                           
  5328                           ;OverTemperature_B1.c: 126: }
  5329                           ;OverTemperature_B1.c: 127: } else {
  5330  0E57  2E70               	goto	l9571
  5331  0E58                     l9557:	
  5332                           
  5333                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5334  0E58  0021               	movlb	1	; select bank1
  5335  0E59  2E6F               	goto	l9569
  5336  0E5A                     l9559:	
  5337                           ;OverTemperature_B1.c: 129: }
  5338                           ;OverTemperature_B1.c: 130: } else {
  5339                           
  5340                           
  5341                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5342  0E5A  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5343  0E5B  026A               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5344  0E5C  1D03               	skipz
  5345  0E5D  2E60               	goto	u10895
  5346  0E5E  086B               	movf	setTemp_Main@AD^(0+128),w
  5347  0E5F  0269               	subwf	setTemp_Main@DangerValue^(0+128),w
  5348  0E60                     u10895:	
  5349  0E60  1C03               	skipc
  5350  0E61  2E6F               	goto	l9569
  5351                           
  5352                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5353  0E62  3001               	movlw	1
  5354  0E63  0020               	movlb	0	; select bank0
  5355  0E64  00E6               	movwf	??_setTemp_Main
  5356  0E65  0866               	movf	??_setTemp_Main,w
  5357  0E66  0021               	movlb	1	; select bank1
  5358  0E67  07DE               	addwf	(_Temp^(0+128)+3),f
  5359                           
  5360                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5361  0E68  3003               	movlw	3
  5362  0E69  025E               	subwf	(_Temp^(0+128)+3),w
  5363  0E6A  1C03               	skipc
  5364  0E6B  2E70               	goto	l9571
  5365                           
  5366                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5367  0E6C  01DE               	clrf	(_Temp^(0+128)+3)
  5368                           
  5369                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5370  0E6D  14DB               	bsf	_Temp^(0+128),1
  5371                           
  5372                           ;OverTemperature_B1.c: 136: }
  5373                           ;OverTemperature_B1.c: 137: } else {
  5374  0E6E  2E70               	goto	l9571
  5375  0E6F                     l9569:	
  5376                           
  5377                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5378  0E6F  01DE               	clrf	(_Temp^(0+128)+3)
  5379  0E70                     l9571:	
  5380                           
  5381                           ;OverTemperature_B1.c: 139: }
  5382                           ;OverTemperature_B1.c: 140: }
  5383                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5384  0E70  0021               	movlb	1	; select bank1
  5385  0E71  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5386  0E72  0020               	movlb	0	; select bank0
  5387  0E73  00E6               	movwf	??_setTemp_Main
  5388  0E74  0866               	movf	??_setTemp_Main,w
  5389  0E75  00E3               	movwf	setProductData@value
  5390  0E76  3018               	movlw	24
  5391  0E77  3199  21FC  318D   	fcall	_setProductData
  5392                           
  5393                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5394  0E7A  0021               	movlb	1	; select bank1
  5395  0E7B  086B               	movf	setTemp_Main@AD^(0+128),w
  5396  0E7C  0020               	movlb	0	; select bank0
  5397  0E7D  00E6               	movwf	??_setTemp_Main
  5398  0E7E  0866               	movf	??_setTemp_Main,w
  5399  0E7F  00E3               	movwf	setProductData@value
  5400  0E80  3019               	movlw	25
  5401  0E81  3199  21FC         	fcall	_setProductData
  5402  0E83                     l1773:	
  5403                           
  5404                           ;OverTemperature_B1.c: 158: }
  5405                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5406  0E83  0021               	movlb	1	; select bank1
  5407  0E84  01DF               	clrf	(_Temp^(0+128)+4)
  5408  0E85  01E0               	clrf	((_Temp+1)^(0+128)+4)
  5409                           
  5410                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5411  0E86  01E1               	clrf	(_Temp^(0+128)+6)
  5412  0E87  01E2               	clrf	((_Temp+1)^(0+128)+6)
  5413                           
  5414                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5415  0E88  01E3               	clrf	(_Temp^(0+128)+8)
  5416  0E89  01E4               	clrf	((_Temp+1)^(0+128)+8)
  5417                           
  5418                           ;OverTemperature_B1.c: 162: }
  5419                           ;OverTemperature_B1.c: 163: }
  5420                           ;OverTemperature_B1.c: 166: } else {
  5421  0E8A  0008               	return
  5422  0E8B                     l1762:	
  5423                           
  5424                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5425  0E8B  0022               	movlb	2	; select bank2
  5426  0E8C  1C20               	btfss	_myMain^(0+256),0
  5427  0E8D  0008               	return
  5428                           
  5429                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5430  0E8E  0021               	movlb	1	; select bank1
  5431  0E8F  145B               	bsf	_Temp^(0+128),0
  5432  0E90  0008               	return
  5433  0E91                     __end_of_setTemp_Main:	
  5434                           
  5435                           	psect	text10
  5436  1937                     __ptext10:	
  5437 ;; *************** function _Temp_Initialization *****************
  5438 ;; Defined at:
  5439 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;		None
  5444 ;; Return value:  Size  Location     Type
  5445 ;;		None               void
  5446 ;; Registers used:
  5447 ;;		status,2, status,0, pclath, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;Total ram usage:        0 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    6
  5460 ;; This function calls:
  5461 ;;		_setTemp_Initialization
  5462 ;; This function is called by:
  5463 ;;		_main
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           
  5468                           ;psect for function _Temp_Initialization
  5469  1937                     _Temp_Initialization:	
  5470                           
  5471                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5472                           
  5473                           ;incstack = 0
  5474                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5475  1937  3187  27FF         	fcall	_setTemp_Initialization
  5476  1939  0008               	return
  5477  193A                     __end_of_Temp_Initialization:	
  5478                           
  5479                           	psect	text11
  5480  07FF                     __ptext11:	
  5481 ;; *************** function _setTemp_Initialization *****************
  5482 ;; Defined at:
  5483 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;		None
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;		None               void
  5490 ;; Registers used:
  5491 ;;		None
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;Total ram usage:        0 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    5
  5504 ;; This function calls:
  5505 ;;		Nothing
  5506 ;; This function is called by:
  5507 ;;		_Temp_Initialization
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _setTemp_Initialization
  5513  07FF                     _setTemp_Initialization:	
  5514                           
  5515                           ;incstack = 0
  5516                           ; Regs used in _setTemp_Initialization: []
  5517  07FF  0008               	return
  5518  0800                     __end_of_setTemp_Initialization:	
  5519                           
  5520                           	psect	text12
  5521  19E5                     __ptext12:	
  5522 ;; *************** function _Switch_Main *****************
  5523 ;; Defined at:
  5524 ;;		line 76 in file "../src/Switch_B1.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;		None
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;		None
  5529 ;; Return value:  Size  Location     Type
  5530 ;;		None               void
  5531 ;; Registers used:
  5532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;Total ram usage:        0 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    9
  5545 ;; This function calls:
  5546 ;;		_TouchPower
  5547 ;;		_setSw_Main
  5548 ;; This function is called by:
  5549 ;;		_main
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           
  5554                           ;psect for function _Switch_Main
  5555  19E5                     _Switch_Main:	
  5556                           
  5557                           ;Switch_B1.c: 79: setSw_Main(1);
  5558                           
  5559                           ;incstack = 0
  5560                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5561  19E5  3001               	movlw	1
  5562  19E6  3182  2202  3199   	fcall	_setSw_Main
  5563                           
  5564                           ;Switch_B1.c: 83: setSw_Main(2);
  5565  19E9  3002               	movlw	2
  5566  19EA  3182  2202  3199   	fcall	_setSw_Main
  5567                           
  5568                           ;Switch_B1.c: 91: TouchPower();
  5569  19ED  319B  23BE         	fcall	_TouchPower
  5570  19EF  0008               	return
  5571  19F0                     __end_of_Switch_Main:	
  5572                           
  5573                           	psect	text13
  5574  0202                     __ptext13:	
  5575 ;; *************** function _setSw_Main *****************
  5576 ;; Defined at:
  5577 ;;		line 117 in file "../src/Switch_B1.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  sw              1    wreg     unsigned char 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  sw              1   21[BANK0 ] unsigned char 
  5582 ;; Return value:  Size  Location     Type
  5583 ;;		None               void
  5584 ;; Registers used:
  5585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;Total ram usage:        3 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    8
  5598 ;; This function calls:
  5599 ;;		_SwPointSelect
  5600 ;;		_getMain_All_Error_Status
  5601 ;;		_getSw_KeyStatus
  5602 ;;		_setBuz
  5603 ;;		_setDimmerLights_DimmingOn
  5604 ;;		_setDimmerLights_SwOff
  5605 ;;		_setDimmerLights_SwOn
  5606 ;;		_setRF_Learn
  5607 ;; This function is called by:
  5608 ;;		_Switch_Main
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           
  5613                           ;psect for function _setSw_Main
  5614  0202                     _setSw_Main:	
  5615                           
  5616                           ;incstack = 0
  5617                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5618                           ;setSw_Main@sw stored from wreg
  5619  0202  0020               	movlb	0	; select bank0
  5620  0203  00B5               	movwf	setSw_Main@sw
  5621                           
  5622                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5623  0204  0835               	movf	setSw_Main@sw,w
  5624  0205  319C  2445  3182   	fcall	_SwPointSelect
  5625                           
  5626                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5627  0208  0021               	movlb	1	; select bank1
  5628  0209  0855               	movf	_Sw^(0+128),w
  5629  020A  0086               	movwf	6
  5630  020B  3001               	movlw	1	; select bank2/3
  5631  020C  0087               	movwf	7
  5632  020D  1C01               	btfss	1,0
  5633  020E  2B7E               	goto	l2549
  5634                           
  5635                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5636  020F  3000               	movlw	0
  5637  0210  3190  205A  3182   	fcall	_getMain_All_Error_Status
  5638  0213  3800               	iorlw	0
  5639  0214  1D03               	skipz
  5640  0215  2A34               	goto	l9665
  5641                           
  5642                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5643  0216  0021               	movlb	1	; select bank1
  5644  0217  0A55               	incf	_Sw^(0+128),w
  5645  0218  0086               	movwf	6
  5646  0219  3001               	movlw	1	; select bank2/3
  5647  021A  0087               	movwf	7
  5648  021B  1081               	bcf	1,1
  5649                           
  5650                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5651  021C  0020               	movlb	0	; select bank0
  5652  021D  0835               	movf	setSw_Main@sw,w
  5653  021E  319D  258B  3182   	fcall	_getSw_KeyStatus
  5654  0221  3A01               	xorlw	1
  5655  0222  3000               	movlw	0
  5656  0223  1903               	skipnz
  5657  0224  3001               	movlw	1
  5658  0225  0020               	movlb	0	; select bank0
  5659  0226  00B3               	movwf	??_setSw_Main
  5660  0227  0021               	movlb	1	; select bank1
  5661  0228  0855               	movf	_Sw^(0+128),w
  5662  0229  0086               	movwf	6
  5663  022A  3001               	movlw	1	; select bank2/3
  5664  022B  0087               	movwf	7
  5665  022C  0020               	movlb	0	; select bank0
  5666  022D  0DB3               	rlf	??_setSw_Main,f
  5667  022E  0801               	movf	1,w
  5668  022F  0633               	xorwf	??_setSw_Main,w
  5669  0230  39FD               	andlw	-3
  5670  0231  0633               	xorwf	??_setSw_Main,w
  5671  0232  0081               	movwf	1
  5672                           
  5673                           ;Switch_B1.c: 124: } else {
  5674  0233  2A4A               	goto	l2551
  5675  0234                     l9665:	
  5676                           
  5677                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5678  0234  0021               	movlb	1	; select bank1
  5679  0235  0A55               	incf	_Sw^(0+128),w
  5680  0236  0086               	movwf	6
  5681  0237  3001               	movlw	1	; select bank2/3
  5682  0238  0087               	movwf	7
  5683  0239  1881               	btfsc	1,1
  5684  023A  2A4A               	goto	l2551
  5685                           
  5686                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5687  023B  0A55               	incf	_Sw^(0+128),w
  5688  023C  0086               	movwf	6
  5689  023D  3001               	movlw	1	; select bank2/3
  5690  023E  0087               	movwf	7
  5691  023F  1481               	bsf	1,1
  5692                           
  5693                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5694  0240  0855               	movf	_Sw^(0+128),w
  5695  0241  0086               	movwf	6
  5696  0242  3001               	movlw	1	; select bank2/3
  5697  0243  0087               	movwf	7
  5698  0244  1081               	bcf	1,1
  5699                           
  5700                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5701  0245  0855               	movf	_Sw^(0+128),w
  5702  0246  0086               	movwf	6
  5703  0247  3001               	movlw	1	; select bank2/3
  5704  0248  0087               	movwf	7
  5705  0249  1501               	bsf	1,2
  5706  024A                     l2551:	
  5707                           
  5708                           ;Switch_B1.c: 130: }
  5709                           ;Switch_B1.c: 131: }
  5710                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5711  024A  0021               	movlb	1	; select bank1
  5712  024B  0855               	movf	_Sw^(0+128),w
  5713  024C  0086               	movwf	6
  5714  024D  3001               	movlw	1	; select bank2/3
  5715  024E  0087               	movwf	7
  5716  024F  1C81               	btfss	1,1
  5717  0250  2B26               	goto	l9715
  5718                           
  5719                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5720  0251  0855               	movf	_Sw^(0+128),w
  5721  0252  0086               	movwf	6
  5722  0253  3001               	movlw	1	; select bank2/3
  5723  0254  0087               	movwf	7
  5724  0255  1901               	btfsc	1,2
  5725  0256  2A7D               	goto	l9681
  5726                           
  5727                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5728  0257  3001               	movlw	1
  5729  0258  0020               	movlb	0	; select bank0
  5730  0259  00B3               	movwf	??_setSw_Main
  5731  025A  0021               	movlb	1	; select bank1
  5732  025B  0855               	movf	_Sw^(0+128),w
  5733  025C  3E02               	addlw	2
  5734  025D  0086               	movwf	6
  5735  025E  3001               	movlw	1	; select bank2/3
  5736  025F  0087               	movwf	7
  5737  0260  0020               	movlb	0	; select bank0
  5738  0261  0833               	movf	??_setSw_Main,w
  5739  0262  0781               	addwf	1,f
  5740                           
  5741                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5742  0263  0021               	movlb	1	; select bank1
  5743  0264  0855               	movf	_Sw^(0+128),w
  5744  0265  3E02               	addlw	2
  5745  0266  0086               	movwf	6
  5746  0267  3001               	movlw	1	; select bank2/3
  5747  0268  0087               	movwf	7
  5748  0269  3003               	movlw	3
  5749  026A  0201               	subwf	1,w
  5750  026B  1C03               	skipc
  5751  026C  0008               	return
  5752                           
  5753                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5754  026D  0855               	movf	_Sw^(0+128),w
  5755  026E  3E02               	addlw	2
  5756  026F  0086               	movwf	6
  5757  0270  3001               	movlw	1	; select bank2/3
  5758  0271  0087               	movwf	7
  5759  0272  0181               	clrf	1
  5760                           
  5761                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5762  0273  0855               	movf	_Sw^(0+128),w
  5763  0274  0086               	movwf	6
  5764  0275  3001               	movlw	1	; select bank2/3
  5765  0276  0087               	movwf	7
  5766  0277  1501               	bsf	1,2
  5767                           
  5768                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5769  0278  0020               	movlb	0	; select bank0
  5770  0279  0835               	movf	setSw_Main@sw,w
  5771  027A  3195  25AC         	fcall	_setDimmerLights_SwOn
  5772                           
  5773                           ;Switch_B1.c: 146: }
  5774                           ;Switch_B1.c: 147: } else {
  5775  027C  0008               	return
  5776  027D                     l9681:	
  5777                           
  5778                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5779  027D  0021               	movlb	1	; select bank1
  5780  027E  0855               	movf	_Sw^(0+128),w
  5781  027F  0086               	movwf	6
  5782  0280  3001               	movlw	1	; select bank2/3
  5783  0281  0087               	movwf	7
  5784  0282  1981               	btfsc	1,3
  5785  0283  2AB2               	goto	l9691
  5786                           
  5787                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5788  0284  0855               	movf	_Sw^(0+128),w
  5789  0285  3E03               	addlw	3
  5790  0286  0086               	movwf	6
  5791  0287  3001               	movlw	1	; select bank2/3
  5792  0288  0087               	movwf	7
  5793  0289  3001               	movlw	1
  5794  028A  0781               	addwf	1,f
  5795  028B  3141               	addfsr 1,1
  5796  028C  1803               	skipnc
  5797  028D  0A81               	incf	1,f
  5798                           
  5799                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5800  028E  0855               	movf	_Sw^(0+128),w
  5801  028F  3E03               	addlw	3
  5802  0290  0086               	movwf	6
  5803  0291  3001               	movlw	1	; select bank2/3
  5804  0292  0087               	movwf	7
  5805  0293  3F40               	moviw [0]fsr1
  5806  0294  0020               	movlb	0	; select bank0
  5807  0295  00B3               	movwf	??_setSw_Main
  5808  0296  3F41               	moviw [1]fsr1
  5809  0297  00B4               	movwf	??_setSw_Main+1
  5810  0298  3000               	movlw	0
  5811  0299  0234               	subwf	??_setSw_Main+1,w
  5812  029A  304B               	movlw	75
  5813  029B  1903               	skipnz
  5814  029C  0233               	subwf	??_setSw_Main,w
  5815  029D  1C03               	skipc
  5816  029E  0008               	return
  5817                           
  5818                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5819  029F  0021               	movlb	1	; select bank1
  5820  02A0  0855               	movf	_Sw^(0+128),w
  5821  02A1  3E03               	addlw	3
  5822  02A2  0086               	movwf	6
  5823  02A3  3001               	movlw	1	; select bank2/3
  5824  02A4  0087               	movwf	7
  5825  02A5  3000               	movlw	0
  5826  02A6  3FC0               	movwi [0]fsr1
  5827  02A7  3FC1               	movwi [1]fsr1
  5828                           
  5829                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5830  02A8  0855               	movf	_Sw^(0+128),w
  5831  02A9  0086               	movwf	6
  5832  02AA  3001               	movlw	1	; select bank2/3
  5833  02AB  0087               	movwf	7
  5834  02AC  1581               	bsf	1,3
  5835                           
  5836                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5837  02AD  0020               	movlb	0	; select bank0
  5838  02AE  0835               	movf	setSw_Main@sw,w
  5839  02AF  3190  2001         	fcall	_setDimmerLights_DimmingOn
  5840                           
  5841                           ;Switch_B1.c: 161: }
  5842                           ;Switch_B1.c: 162: } else {
  5843  02B1  0008               	return
  5844  02B2                     l9691:	
  5845                           
  5846                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5847  02B2  0021               	movlb	1	; select bank1
  5848  02B3  0855               	movf	_Sw^(0+128),w
  5849  02B4  0086               	movwf	6
  5850  02B5  3001               	movlw	1	; select bank2/3
  5851  02B6  0087               	movwf	7
  5852  02B7  1A01               	btfsc	1,4
  5853  02B8  2AF2               	goto	l9705
  5854                           
  5855                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5856  02B9  0855               	movf	_Sw^(0+128),w
  5857  02BA  3E05               	addlw	5
  5858  02BB  0086               	movwf	6
  5859  02BC  3001               	movlw	1	; select bank2/3
  5860  02BD  0087               	movwf	7
  5861  02BE  3001               	movlw	1
  5862  02BF  0781               	addwf	1,f
  5863  02C0  3141               	addfsr 1,1
  5864  02C1  1803               	skipnc
  5865  02C2  0A81               	incf	1,f
  5866                           
  5867                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5868  02C3  0855               	movf	_Sw^(0+128),w
  5869  02C4  3E05               	addlw	5
  5870  02C5  0086               	movwf	6
  5871  02C6  3001               	movlw	1	; select bank2/3
  5872  02C7  0087               	movwf	7
  5873  02C8  3F40               	moviw [0]fsr1
  5874  02C9  0020               	movlb	0	; select bank0
  5875  02CA  00B3               	movwf	??_setSw_Main
  5876  02CB  3F41               	moviw [1]fsr1
  5877  02CC  00B4               	movwf	??_setSw_Main+1
  5878  02CD  3000               	movlw	0
  5879  02CE  0234               	subwf	??_setSw_Main+1,w
  5880  02CF  304B               	movlw	75
  5881  02D0  1903               	skipnz
  5882  02D1  0233               	subwf	??_setSw_Main,w
  5883  02D2  1C03               	skipc
  5884  02D3  0008               	return
  5885                           
  5886                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5887  02D4  0021               	movlb	1	; select bank1
  5888  02D5  0855               	movf	_Sw^(0+128),w
  5889  02D6  3E05               	addlw	5
  5890  02D7  0086               	movwf	6
  5891  02D8  3001               	movlw	1	; select bank2/3
  5892  02D9  0087               	movwf	7
  5893  02DA  3000               	movlw	0
  5894  02DB  3FC0               	movwi [0]fsr1
  5895  02DC  3FC1               	movwi [1]fsr1
  5896                           
  5897                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5898  02DD  0855               	movf	_Sw^(0+128),w
  5899  02DE  0086               	movwf	6
  5900  02DF  3001               	movlw	1	; select bank2/3
  5901  02E0  0087               	movwf	7
  5902  02E1  1601               	bsf	1,4
  5903                           
  5904                           ;Switch_B1.c: 171: setRF_Learn(1);
  5905  02E2  3001               	movlw	1
  5906  02E3  319B  2380  3182   	fcall	_setRF_Learn
  5907                           
  5908                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5909  02E6  0022               	movlb	2	; select bank2
  5910  02E7  1EA0               	btfss	_myMain^(0+256),5
  5911  02E8  0008               	return
  5912                           
  5913                           ;Switch_B1.c: 173: setBuz(2, 100);
  5914  02E9  3064               	movlw	100
  5915  02EA  0020               	movlb	0	; select bank0
  5916  02EB  00AA               	movwf	setBuz@time
  5917  02EC  3000               	movlw	0
  5918  02ED  00AB               	movwf	setBuz@time+1
  5919  02EE  3002               	movlw	2
  5920  02EF  3194  24F8         	fcall	_setBuz
  5921                           
  5922                           ;Switch_B1.c: 174: }
  5923                           ;Switch_B1.c: 178: }
  5924                           ;Switch_B1.c: 179: } else {
  5925  02F1  0008               	return
  5926  02F2                     l9705:	
  5927                           
  5928                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5929  02F2  0021               	movlb	1	; select bank1
  5930  02F3  0855               	movf	_Sw^(0+128),w
  5931  02F4  0086               	movwf	6
  5932  02F5  3001               	movlw	1	; select bank2/3
  5933  02F6  0087               	movwf	7
  5934  02F7  1A81               	btfsc	1,5
  5935  02F8  0008               	return
  5936                           
  5937                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5938  02F9  0855               	movf	_Sw^(0+128),w
  5939  02FA  3E07               	addlw	7
  5940  02FB  0086               	movwf	6
  5941  02FC  3001               	movlw	1	; select bank2/3
  5942  02FD  0087               	movwf	7
  5943  02FE  3001               	movlw	1
  5944  02FF  0781               	addwf	1,f
  5945  0300  3141               	addfsr 1,1
  5946  0301  1803               	skipnc
  5947  0302  0A81               	incf	1,f
  5948                           
  5949                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5950  0303  0855               	movf	_Sw^(0+128),w
  5951  0304  3E07               	addlw	7
  5952  0305  0086               	movwf	6
  5953  0306  3001               	movlw	1	; select bank2/3
  5954  0307  0087               	movwf	7
  5955  0308  3F40               	moviw [0]fsr1
  5956  0309  0020               	movlb	0	; select bank0
  5957  030A  00B3               	movwf	??_setSw_Main
  5958  030B  3F41               	moviw [1]fsr1
  5959  030C  00B4               	movwf	??_setSw_Main+1
  5960  030D  3000               	movlw	0
  5961  030E  0234               	subwf	??_setSw_Main+1,w
  5962  030F  3096               	movlw	150
  5963  0310  1903               	skipnz
  5964  0311  0233               	subwf	??_setSw_Main,w
  5965  0312  1C03               	skipc
  5966  0313  0008               	return
  5967                           
  5968                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5969  0314  0021               	movlb	1	; select bank1
  5970  0315  0855               	movf	_Sw^(0+128),w
  5971  0316  3E07               	addlw	7
  5972  0317  0086               	movwf	6
  5973  0318  3001               	movlw	1	; select bank2/3
  5974  0319  0087               	movwf	7
  5975  031A  3000               	movlw	0
  5976  031B  3FC0               	movwi [0]fsr1
  5977  031C  3FC1               	movwi [1]fsr1
  5978                           
  5979                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5980  031D  0855               	movf	_Sw^(0+128),w
  5981  031E  0086               	movwf	6
  5982  031F  3001               	movlw	1	; select bank2/3
  5983  0320  0087               	movwf	7
  5984  0321  1681               	bsf	1,5
  5985                           
  5986                           ;Switch_B1.c: 187: setRF_Learn(0);
  5987  0322  3000               	movlw	0
  5988  0323  319B  2380         	fcall	_setRF_Learn
  5989                           
  5990                           ;Switch_B1.c: 190: }
  5991                           ;Switch_B1.c: 191: }
  5992                           ;Switch_B1.c: 192: }
  5993                           ;Switch_B1.c: 194: }
  5994                           ;Switch_B1.c: 195: }
  5995                           ;Switch_B1.c: 196: } else {
  5996  0325  0008               	return
  5997  0326                     l9715:	
  5998                           
  5999                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  6000  0326  0021               	movlb	1	; select bank1
  6001  0327  0855               	movf	_Sw^(0+128),w
  6002  0328  0086               	movwf	6
  6003  0329  3001               	movlw	1	; select bank2/3
  6004  032A  0087               	movwf	7
  6005  032B  1D01               	btfss	1,2
  6006  032C  0008               	return
  6007                           
  6008                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  6009  032D  3001               	movlw	1
  6010  032E  0020               	movlb	0	; select bank0
  6011  032F  00B3               	movwf	??_setSw_Main
  6012  0330  0021               	movlb	1	; select bank1
  6013  0331  0855               	movf	_Sw^(0+128),w
  6014  0332  3E02               	addlw	2
  6015  0333  0086               	movwf	6
  6016  0334  3001               	movlw	1	; select bank2/3
  6017  0335  0087               	movwf	7
  6018  0336  0020               	movlb	0	; select bank0
  6019  0337  0833               	movf	??_setSw_Main,w
  6020  0338  0781               	addwf	1,f
  6021                           
  6022                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6023  0339  0021               	movlb	1	; select bank1
  6024  033A  0855               	movf	_Sw^(0+128),w
  6025  033B  3E02               	addlw	2
  6026  033C  0086               	movwf	6
  6027  033D  3001               	movlw	1	; select bank2/3
  6028  033E  0087               	movwf	7
  6029  033F  3003               	movlw	3
  6030  0340  0201               	subwf	1,w
  6031  0341  1C03               	skipc
  6032  0342  0008               	return
  6033                           
  6034                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6035  0343  0855               	movf	_Sw^(0+128),w
  6036  0344  3E02               	addlw	2
  6037  0345  0086               	movwf	6
  6038  0346  3001               	movlw	1	; select bank2/3
  6039  0347  0087               	movwf	7
  6040  0348  0181               	clrf	1
  6041                           
  6042                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6043  0349  0855               	movf	_Sw^(0+128),w
  6044  034A  0086               	movwf	6
  6045  034B  3001               	movlw	1	; select bank2/3
  6046  034C  0087               	movwf	7
  6047  034D  1101               	bcf	1,2
  6048                           
  6049                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6050  034E  0855               	movf	_Sw^(0+128),w
  6051  034F  3E03               	addlw	3
  6052  0350  0086               	movwf	6
  6053  0351  3001               	movlw	1	; select bank2/3
  6054  0352  0087               	movwf	7
  6055  0353  3000               	movlw	0
  6056  0354  3FC0               	movwi [0]fsr1
  6057  0355  3FC1               	movwi [1]fsr1
  6058                           
  6059                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6060  0356  0855               	movf	_Sw^(0+128),w
  6061  0357  0086               	movwf	6
  6062  0358  3001               	movlw	1	; select bank2/3
  6063  0359  0087               	movwf	7
  6064  035A  1181               	bcf	1,3
  6065                           
  6066                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6067  035B  0855               	movf	_Sw^(0+128),w
  6068  035C  0086               	movwf	6
  6069  035D  3001               	movlw	1	; select bank2/3
  6070  035E  0087               	movwf	7
  6071  035F  1201               	bcf	1,4
  6072                           
  6073                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6074  0360  0855               	movf	_Sw^(0+128),w
  6075  0361  0086               	movwf	6
  6076  0362  3001               	movlw	1	; select bank2/3
  6077  0363  0087               	movwf	7
  6078  0364  1281               	bcf	1,5
  6079                           
  6080                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6081  0365  0855               	movf	_Sw^(0+128),w
  6082  0366  3E05               	addlw	5
  6083  0367  0086               	movwf	6
  6084  0368  3001               	movlw	1	; select bank2/3
  6085  0369  0087               	movwf	7
  6086  036A  3000               	movlw	0
  6087  036B  3FC0               	movwi [0]fsr1
  6088  036C  3FC1               	movwi [1]fsr1
  6089                           
  6090                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6091  036D  0855               	movf	_Sw^(0+128),w
  6092  036E  3E07               	addlw	7
  6093  036F  0086               	movwf	6
  6094  0370  3001               	movlw	1	; select bank2/3
  6095  0371  0087               	movwf	7
  6096  0372  3000               	movlw	0
  6097  0373  3FC0               	movwi [0]fsr1
  6098  0374  3FC1               	movwi [1]fsr1
  6099                           
  6100                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6101  0375  0020               	movlb	0	; select bank0
  6102  0376  0835               	movf	setSw_Main@sw,w
  6103  0377  3191  212E  3182   	fcall	_setDimmerLights_SwOff
  6104                           
  6105                           ;Switch_B1.c: 219: setRF_Learn(0);
  6106  037A  3000               	movlw	0
  6107  037B  319B  2380         	fcall	_setRF_Learn
  6108                           
  6109                           ;Switch_B1.c: 221: }
  6110                           ;Switch_B1.c: 222: }
  6111                           ;Switch_B1.c: 223: }
  6112                           ;Switch_B1.c: 224: } else {
  6113  037D  0008               	return
  6114  037E                     l2549:	
  6115                           
  6116                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6117  037E  0022               	movlb	2	; select bank2
  6118  037F  1C20               	btfss	_myMain^(0+256),0
  6119  0380  0008               	return
  6120                           
  6121                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6122  0381  0021               	movlb	1	; select bank1
  6123  0382  0855               	movf	_Sw^(0+128),w
  6124  0383  0086               	movwf	6
  6125  0384  3001               	movlw	1	; select bank2/3
  6126  0385  0087               	movwf	7
  6127  0386  1401               	bsf	1,0
  6128  0387  0008               	return
  6129  0388                     __end_of_setSw_Main:	
  6130                           
  6131                           	psect	text14
  6132  1B80                     __ptext14:	
  6133 ;; *************** function _setRF_Learn *****************
  6134 ;; Defined at:
  6135 ;;		line 33 in file "../src/RF_Control_B1.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;  command         1    wreg     unsigned char 
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;  command         1    2[BANK0 ] unsigned char 
  6140 ;; Return value:  Size  Location     Type
  6141 ;;		None               void
  6142 ;; Registers used:
  6143 ;;		wreg, status,2, status,0
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;Total ram usage:        2 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; Hardware stack levels required when called:    5
  6156 ;; This function calls:
  6157 ;;		Nothing
  6158 ;; This function is called by:
  6159 ;;		_setSw_Main
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           
  6164                           ;psect for function _setRF_Learn
  6165  1B80                     _setRF_Learn:	
  6166                           
  6167                           ;incstack = 0
  6168                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6169                           ;setRF_Learn@command stored from wreg
  6170  1B80  0020               	movlb	0	; select bank0
  6171  1B81  00A2               	movwf	setRF_Learn@command
  6172                           
  6173                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6174  1B82  0822               	movf	setRF_Learn@command,w
  6175  1B83  3A01               	xorlw	1
  6176  1B84  3000               	movlw	0
  6177  1B85  1903               	skipnz
  6178  1B86  3001               	movlw	1
  6179  1B87  00A1               	movwf	??_setRF_Learn
  6180  1B88  0EA1               	swapf	??_setRF_Learn,f
  6181  1B89  0DA1               	rlf	??_setRF_Learn,f
  6182  1B8A  0DA1               	rlf	??_setRF_Learn,f
  6183  1B8B  0021               	movlb	1	; select bank1
  6184  1B8C  0820               	movf	_RF1^(0+128),w
  6185  1B8D  0020               	movlb	0	; select bank0
  6186  1B8E  0621               	xorwf	??_setRF_Learn,w
  6187  1B8F  39BF               	andlw	-65
  6188  1B90  0621               	xorwf	??_setRF_Learn,w
  6189  1B91  0021               	movlb	1	; select bank1
  6190  1B92  00A0               	movwf	_RF1^(0+128)
  6191  1B93  0008               	return
  6192  1B94                     __end_of_setRF_Learn:	
  6193                           
  6194                           	psect	text15
  6195  1001                     __ptext15:	
  6196 ;; *************** function _setDimmerLights_DimmingOn *****************
  6197 ;; Defined at:
  6198 ;;		line 715 in file "../src/Dimmer_B1.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;  sw              1    wreg     unsigned char 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  sw              1    3[BANK0 ] unsigned char 
  6203 ;; Return value:  Size  Location     Type
  6204 ;;		None               void
  6205 ;; Registers used:
  6206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;Total ram usage:        1 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:    6
  6219 ;; This function calls:
  6220 ;;		_DimmerLights_SelectPointer
  6221 ;; This function is called by:
  6222 ;;		_setSw_Main
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           
  6227                           ;psect for function _setDimmerLights_DimmingOn
  6228  1001                     _setDimmerLights_DimmingOn:	
  6229                           
  6230                           ;incstack = 0
  6231                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6232                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6233  1001  0020               	movlb	0	; select bank0
  6234  1002  00A3               	movwf	setDimmerLights_DimmingOn@sw
  6235                           
  6236                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6237  1003  0823               	movf	setDimmerLights_DimmingOn@sw,w
  6238  1004  319C  2400  3190   	fcall	_DimmerLights_SelectPointer
  6239                           
  6240                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6241  1007  0021               	movlb	1	; select bank1
  6242  1008  084F               	movf	_DimmerLights^(0+128),w
  6243  1009  0086               	movwf	6
  6244  100A  3001               	movlw	1	; select bank2/3
  6245  100B  0087               	movwf	7
  6246  100C  1881               	btfsc	1,1
  6247  100D  0008               	return
  6248                           
  6249                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6250  100E  084F               	movf	_DimmerLights^(0+128),w
  6251  100F  0086               	movwf	6
  6252  1010  3001               	movlw	1	; select bank2/3
  6253  1011  0087               	movwf	7
  6254  1012  1C01               	btfss	1,0
  6255  1013  0008               	return
  6256                           
  6257                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6258  1014  0A4F               	incf	_DimmerLights^(0+128),w
  6259  1015  0086               	movwf	6
  6260  1016  3001               	movlw	1	; select bank2/3
  6261  1017  0087               	movwf	7
  6262  1018  1401               	bsf	1,0
  6263                           
  6264                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6265  1019  084F               	movf	_DimmerLights^(0+128),w
  6266  101A  0086               	movwf	6
  6267  101B  3001               	movlw	1	; select bank2/3
  6268  101C  0087               	movwf	7
  6269  101D  1581               	bsf	1,3
  6270                           
  6271                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6272  101E  084F               	movf	_DimmerLights^(0+128),w
  6273  101F  0086               	movwf	6
  6274  1020  3001               	movlw	1	; select bank2/3
  6275  1021  0087               	movwf	7
  6276  1022  1601               	bsf	1,4
  6277                           
  6278                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6279  1023  084F               	movf	_DimmerLights^(0+128),w
  6280  1024  0086               	movwf	6
  6281  1025  3001               	movlw	1	; select bank2/3
  6282  1026  0087               	movwf	7
  6283  1027  1681               	bsf	1,5
  6284  1028  0008               	return
  6285  1029                     __end_of_setDimmerLights_DimmingOn:	
  6286                           
  6287                           	psect	text16
  6288  1D8B                     __ptext16:	
  6289 ;; *************** function _getSw_KeyStatus *****************
  6290 ;; Defined at:
  6291 ;;		line 237 in file "../src/Switch_B1.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;  sw              1    wreg     unsigned char 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  sw              1    5[BANK0 ] unsigned char 
  6296 ;;  status          1    4[BANK0 ] unsigned char 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  1    wreg      unsigned char 
  6299 ;; Registers used:
  6300 ;;		wreg, status,2
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;Total ram usage:        5 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    5
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_setSw_Main
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           
  6321                           ;psect for function _getSw_KeyStatus
  6322  1D8B                     _getSw_KeyStatus:	
  6323                           
  6324                           ;incstack = 0
  6325                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6326                           ;getSw_KeyStatus@sw stored from wreg
  6327  1D8B  0020               	movlb	0	; select bank0
  6328  1D8C  00A5               	movwf	getSw_KeyStatus@sw
  6329                           
  6330                           ;Switch_B1.c: 238: char status = 0;
  6331  1D8D  01A4               	clrf	getSw_KeyStatus@status
  6332                           
  6333                           ;Switch_B1.c: 258: if (sw == 1) {
  6334  1D8E  0825               	movf	getSw_KeyStatus@sw,w
  6335  1D8F  3A01               	xorlw	1
  6336  1D90  1D03               	skipz
  6337  1D91  2D9A               	goto	l7669
  6338                           
  6339                           ;Switch_B1.c: 259: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6340  1D92  01A2               	clrf	_getSw_KeyStatus$6111
  6341  1D93  0AA2               	incf	_getSw_KeyStatus$6111,f
  6342  1D94  1F0C               	btfss	12,6	;volatile
  6343  1D95  1A0C               	btfsc	12,4	;volatile
  6344  1D96  2D98               	goto	l7667
  6345  1D97  01A2               	clrf	_getSw_KeyStatus$6111
  6346  1D98                     l7667:	
  6347  1D98  0822               	movf	_getSw_KeyStatus$6111,w
  6348  1D99  2DA5               	goto	L2
  6349  1D9A                     l7669:	
  6350                           ;Switch_B1.c: 260: } else if (sw == 2) {
  6351                           
  6352  1D9A  0825               	movf	getSw_KeyStatus@sw,w
  6353  1D9B  3A02               	xorlw	2
  6354  1D9C  1D03               	skipz
  6355  1D9D  2DA8               	goto	l7679
  6356                           
  6357                           ;Switch_B1.c: 261: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6358  1D9E  01A3               	clrf	_getSw_KeyStatus$6112
  6359  1D9F  0AA3               	incf	_getSw_KeyStatus$6112,f
  6360  1DA0  1C0C               	btfss	12,0	;volatile
  6361  1DA1  188D               	btfsc	13,1	;volatile
  6362  1DA2  2DA4               	goto	l7677
  6363  1DA3  01A3               	clrf	_getSw_KeyStatus$6112
  6364  1DA4                     l7677:	
  6365  1DA4  0823               	movf	_getSw_KeyStatus$6112,w
  6366  1DA5                     L2:	
  6367  1DA5  00A1               	movwf	??_getSw_KeyStatus
  6368  1DA6  0821               	movf	??_getSw_KeyStatus,w
  6369  1DA7  00A4               	movwf	getSw_KeyStatus@status
  6370  1DA8                     l7679:	
  6371                           
  6372                           ;Switch_B1.c: 262: }
  6373                           ;Switch_B1.c: 275: return status;
  6374  1DA8  0824               	movf	getSw_KeyStatus@status,w
  6375  1DA9  0008               	return
  6376  1DAA                     __end_of_getSw_KeyStatus:	
  6377                           
  6378                           	psect	text17
  6379  1C45                     __ptext17:	
  6380 ;; *************** function _SwPointSelect *****************
  6381 ;; Defined at:
  6382 ;;		line 25 in file "../src/Switch_B1.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  sw              1    wreg     unsigned char 
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  sw              1    2[BANK0 ] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;		None               void
  6389 ;; Registers used:
  6390 ;;		wreg
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;Total ram usage:        2 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    5
  6403 ;; This function calls:
  6404 ;;		Nothing
  6405 ;; This function is called by:
  6406 ;;		_setSw_Main
  6407 ;; This function uses a non-reentrant model
  6408 ;;
  6409                           
  6410                           
  6411                           ;psect for function _SwPointSelect
  6412  1C45                     _SwPointSelect:	
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in _SwPointSelect: [wreg]
  6416                           ;SwPointSelect@sw stored from wreg
  6417  1C45  0020               	movlb	0	; select bank0
  6418  1C46  00A2               	movwf	SwPointSelect@sw
  6419                           
  6420                           ;Switch_B1.c: 28: if (sw == 1) {
  6421  1C47  0822               	movf	SwPointSelect@sw,w
  6422  1C48  3A01               	xorlw	1
  6423  1C49  1D03               	skipz
  6424  1C4A  2C51               	goto	l7653
  6425                           
  6426                           ;Switch_B1.c: 29: Sw = &Sw1;
  6427  1C4B  30BE               	movlw	_Sw1& (0+255)
  6428  1C4C  00A1               	movwf	??_SwPointSelect
  6429  1C4D  0821               	movf	??_SwPointSelect,w
  6430  1C4E  0021               	movlb	1	; select bank1
  6431  1C4F  00D5               	movwf	_Sw^(0+128)
  6432                           
  6433                           ;Switch_B1.c: 30: }
  6434  1C50  0008               	return
  6435  1C51                     l7653:	
  6436                           
  6437                           ;Switch_B1.c: 33: else if (sw == 2) {
  6438  1C51  0020               	movlb	0	; select bank0
  6439  1C52  0822               	movf	SwPointSelect@sw,w
  6440  1C53  3A02               	xorlw	2
  6441  1C54  1D03               	skipz
  6442  1C55  0008               	return
  6443                           
  6444                           ;Switch_B1.c: 34: Sw = &Sw2;
  6445  1C56  30C7               	movlw	_Sw2& (0+255)
  6446  1C57  00A1               	movwf	??_SwPointSelect
  6447  1C58  0821               	movf	??_SwPointSelect,w
  6448  1C59  0021               	movlb	1	; select bank1
  6449  1C5A  00D5               	movwf	_Sw^(0+128)
  6450  1C5B  0008               	return
  6451  1C5C                     __end_of_SwPointSelect:	
  6452                           
  6453                           	psect	text18
  6454  1BBE                     __ptext18:	
  6455 ;; *************** function _TouchPower *****************
  6456 ;; Defined at:
  6457 ;;		line 10 in file "../src/Switch_B1.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;		None               void
  6464 ;; Registers used:
  6465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    6
  6478 ;; This function calls:
  6479 ;;		_Timeout_Counter
  6480 ;;		_set_TimeoutCleared
  6481 ;; This function is called by:
  6482 ;;		_Switch_Main
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           
  6487                           ;psect for function _TouchPower
  6488  1BBE                     _TouchPower:	
  6489                           
  6490                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6491                           
  6492                           ;incstack = 0
  6493                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6494  1BBE  0022               	movlb	2	; select bank2
  6495  1BBF  1C20               	btfss	_myMain^(0+256),0
  6496  1BC0  0008               	return
  6497                           
  6498                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6499  1BC1  0020               	movlb	0	; select bank0
  6500  1BC2  1A8E               	btfsc	14,5	;volatile
  6501  1BC3  0008               	return
  6502  1BC4  2BCA               	goto	l8279
  6503  1BC5                     l2527:	
  6504                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6505                           
  6506                           
  6507                           ;Switch_B1.c: 14: RC5 = 1;
  6508  1BC5  0020               	movlb	0	; select bank0
  6509  1BC6  168E               	bsf	14,5	;volatile
  6510                           
  6511                           ;Switch_B1.c: 15: Timeout_Counter();
  6512  1BC7  3188  2000  319B   	fcall	_Timeout_Counter
  6513  1BCA                     l8279:	
  6514  1BCA  0020               	movlb	0	; select bank0
  6515  1BCB  1A8E               	btfsc	14,5	;volatile
  6516  1BCC  2BD0               	goto	l8283
  6517  1BCD  0022               	movlb	2	; select bank2
  6518  1BCE  1D2A               	btfss	(_myMain^(0+256)+10),2
  6519  1BCF  2BC5               	goto	l2527
  6520  1BD0                     l8283:	
  6521                           
  6522                           ;Switch_B1.c: 16: }
  6523                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6524  1BD0  3199  2151         	fcall	_set_TimeoutCleared
  6525  1BD2  0008               	return
  6526  1BD3                     __end_of_TouchPower:	
  6527                           
  6528                           	psect	text19
  6529  1951                     __ptext19:	
  6530 ;; *************** function _set_TimeoutCleared *****************
  6531 ;; Defined at:
  6532 ;;		line 281 in file "../src/main_B1.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;		None
  6537 ;; Return value:  Size  Location     Type
  6538 ;;		None               void
  6539 ;; Registers used:
  6540 ;;		status,2
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;Total ram usage:        0 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    5
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_getAD
  6557 ;;		_TouchPower
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           
  6562                           ;psect for function _set_TimeoutCleared
  6563  1951                     _set_TimeoutCleared:	
  6564                           
  6565                           ;main_B1.c: 282: myMain.Timeout = 0;
  6566                           
  6567                           ;incstack = 0
  6568                           ; Regs used in _set_TimeoutCleared: [status,2]
  6569  1951  0022               	movlb	2	; select bank2
  6570  1952  112A               	bcf	(_myMain^(0+256)+10),2
  6571                           
  6572                           ;main_B1.c: 283: myMain.Timeout_Counter = 0;
  6573  1953  01AB               	clrf	(_myMain^(0+256)+11)
  6574  1954  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6575  1955  0008               	return
  6576  1956                     __end_of_set_TimeoutCleared:	
  6577                           
  6578                           	psect	text20
  6579  0800                     __ptext20:	
  6580 ;; *************** function _Timeout_Counter *****************
  6581 ;; Defined at:
  6582 ;;		line 272 in file "../src/main_B1.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;		None
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;		None
  6587 ;; Return value:  Size  Location     Type
  6588 ;;		None               void
  6589 ;; Registers used:
  6590 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;Total ram usage:        0 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    5
  6603 ;; This function calls:
  6604 ;;		Nothing
  6605 ;; This function is called by:
  6606 ;;		_getAD
  6607 ;;		_TouchPower
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           
  6612                           ;psect for function _Timeout_Counter
  6613  0800                     _Timeout_Counter:	
  6614                           
  6615                           ;main_B1.c: 273: myMain.Timeout_Counter++;
  6616                           
  6617                           ;incstack = 0
  6618                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6619  0800  3001               	movlw	1
  6620  0801  0022               	movlb	2	; select bank2
  6621  0802  07AB               	addwf	(_myMain^(0+256)+11),f
  6622  0803  3000               	movlw	0
  6623  0804  3DAC               	addwfc	((_myMain+1)^(0+256)+11),f
  6624                           
  6625                           ;main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6626  0805  300B               	movlw	11
  6627  0806  3E20               	addlw	_myMain& (0+255)
  6628  0807  0086               	movwf	6
  6629  0808  3001               	movlw	1	; select bank2/3
  6630  0809  0087               	movwf	7
  6631  080A  3F40               	moviw [0]fsr1
  6632  080B  3AA8               	xorlw	168
  6633  080C  1D03               	skipz
  6634  080D  2810               	goto	u7155
  6635  080E  3F41               	moviw [1]fsr1
  6636  080F  3A61               	xorlw	97
  6637  0810                     u7155:	
  6638  0810  1D03               	skipz
  6639  0811  0008               	return
  6640                           
  6641                           ;main_B1.c: 275: myMain.Timeout_Counter = 0;
  6642  0812  01AB               	clrf	(_myMain^(0+256)+11)
  6643  0813  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6644                           
  6645                           ;main_B1.c: 276: myMain.Timeout = 1;
  6646  0814  152A               	bsf	(_myMain^(0+256)+10),2
  6647  0815  0008               	return
  6648  0816                     __end_of_Timeout_Counter:	
  6649                           
  6650                           	psect	text21
  6651  199F                     __ptext21:	
  6652 ;; *************** function _Switch_Initialization *****************
  6653 ;; Defined at:
  6654 ;;		line 46 in file "../src/Switch_B1.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;		None               void
  6661 ;; Registers used:
  6662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;Total ram usage:        0 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    8
  6675 ;; This function calls:
  6676 ;;		_setSw_Initialization
  6677 ;; This function is called by:
  6678 ;;		_main
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _Switch_Initialization
  6684  199F                     _Switch_Initialization:	
  6685                           
  6686                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6690  199F  3001               	movlw	1
  6691  19A0  3199  2197  3199   	fcall	_setSw_Initialization
  6692                           
  6693                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6694  19A3  3002               	movlw	2
  6695  19A4  3199  2197         	fcall	_setSw_Initialization
  6696  19A6  0008               	return
  6697  19A7                     __end_of_Switch_Initialization:	
  6698                           
  6699                           	psect	text22
  6700  1997                     __ptext22:	
  6701 ;; *************** function _setSw_Initialization *****************
  6702 ;; Defined at:
  6703 ;;		line 66 in file "../src/Switch_B1.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;  sw              1    wreg     unsigned char 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  sw              1    5[BANK0 ] unsigned char 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;		None               void
  6710 ;; Registers used:
  6711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6720 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6721 ;;Total ram usage:        1 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:    7
  6724 ;; This function calls:
  6725 ;;		_setLED
  6726 ;; This function is called by:
  6727 ;;		_Switch_Initialization
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           
  6732                           ;psect for function _setSw_Initialization
  6733  1997                     _setSw_Initialization:	
  6734                           
  6735                           ;incstack = 0
  6736                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6737                           ;setSw_Initialization@sw stored from wreg
  6738  1997  0020               	movlb	0	; select bank0
  6739  1998  00A5               	movwf	setSw_Initialization@sw
  6740                           
  6741                           ;Switch_B1.c: 68: setLED(sw, 1);
  6742  1999  01A3               	clrf	setLED@command
  6743  199A  0AA3               	incf	setLED@command,f
  6744  199B  0825               	movf	setSw_Initialization@sw,w
  6745  199C  3194  2451         	fcall	_setLED
  6746  199E  0008               	return
  6747  199F                     __end_of_setSw_Initialization:	
  6748                           
  6749                           	psect	text23
  6750  1934                     __ptext23:	
  6751 ;; *************** function _RF_Main *****************
  6752 ;; Defined at:
  6753 ;;		line 26 in file "../src/RF_Control_B1.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;		None               void
  6760 ;; Registers used:
  6761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:   12
  6774 ;; This function calls:
  6775 ;;		_setRF_Main
  6776 ;; This function is called by:
  6777 ;;		_main
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           
  6782                           ;psect for function _RF_Main
  6783  1934                     _RF_Main:	
  6784                           
  6785                           ;RF_Control_B1.c: 28: setRF_Main();
  6786                           
  6787                           ;incstack = 0
  6788                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6789  1934  3185  256D         	fcall	_setRF_Main
  6790  1936  0008               	return
  6791  1937                     __end_of_RF_Main:	
  6792                           
  6793                           	psect	text24
  6794  056D                     __ptext24:	
  6795 ;; *************** function _setRF_Main *****************
  6796 ;; Defined at:
  6797 ;;		line 53 in file "../src/RF_Control_B1.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  error           1    6[BANK1 ] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;		None               void
  6804 ;; Registers used:
  6805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;Total ram usage:        2 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:   11
  6818 ;; This function calls:
  6819 ;;		_CC2500_PowerOnInitial
  6820 ;;		_CC2500_RxData
  6821 ;;		_CC2500_TxData
  6822 ;;		_CC2500_WriteCommand
  6823 ;;		_RF_RxDisable
  6824 ;;		___lwdiv
  6825 ;;		_getBuz_GO
  6826 ;;		_getRF_KeyStatus
  6827 ;;		_getRxData
  6828 ;; This function is called by:
  6829 ;;		_RF_Main
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function _setRF_Main
  6835  056D                     _setRF_Main:	
  6836                           
  6837                           ;RF_Control_B1.c: 54: char error = 0;
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6841  056D  0021               	movlb	1	; select bank1
  6842  056E  01EB               	clrf	setRF_Main@error^(0+128)
  6843                           
  6844                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6845  056F  1C20               	btfss	_RF1^(0+128),0
  6846  0570  2E3E               	goto	l2130
  6847                           
  6848                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6849  0571  319A  227F  3185   	fcall	_getBuz_GO
  6850  0574  0020               	movlb	0	; select bank0
  6851  0575  0822               	movf	?_getBuz_GO+1,w
  6852  0576  0421               	iorwf	?_getBuz_GO,w
  6853  0577  1D03               	skipz
  6854  0578  2E1F               	goto	l9633
  6855                           
  6856                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6857  0579  319A  2290  3185   	fcall	_getRF_KeyStatus
  6858  057C  3A01               	xorlw	1
  6859  057D  3000               	movlw	0
  6860  057E  1903               	skipnz
  6861  057F  3001               	movlw	1
  6862  0580  0021               	movlb	1	; select bank1
  6863  0581  00EA               	movwf	??_setRF_Main^(0+128)
  6864  0582  0CEA               	rrf	??_setRF_Main^(0+128),f
  6865  0583  0CEA               	rrf	??_setRF_Main^(0+128),f
  6866  0584  0820               	movf	_RF1^(0+128),w
  6867  0585  066A               	xorwf	??_setRF_Main^(0+128),w
  6868  0586  397F               	andlw	-129
  6869  0587  066A               	xorwf	??_setRF_Main^(0+128),w
  6870  0588  00A0               	movwf	_RF1^(0+128)
  6871                           
  6872                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6873  0589  1FA0               	btfss	_RF1^(0+128),7
  6874  058A  2D8D               	goto	l2134
  6875  058B  1F20               	btfss	_RF1^(0+128),6
  6876  058C  2E1F               	goto	l9633
  6877  058D                     l2134:	
  6878                           
  6879                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6880  058D  1D20               	btfss	_RF1^(0+128),2
  6881  058E  2DDE               	goto	l2135
  6882                           
  6883                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6884  058F  1B20               	btfsc	_RF1^(0+128),6
  6885  0590  2DD9               	goto	l9605
  6886                           
  6887                           ;RF_Control_B1.c: 68: RF1.Count++;
  6888  0591  3001               	movlw	1
  6889  0592  07A2               	addwf	(_RF1^(0+128)+2),f
  6890  0593  3000               	movlw	0
  6891  0594  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6892                           
  6893                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6894  0595  3014               	movlw	20
  6895  0596  0020               	movlb	0	; select bank0
  6896  0597  00A1               	movwf	___lwdiv@divisor
  6897  0598  3000               	movlw	0
  6898  0599  00A2               	movwf	___lwdiv@divisor+1
  6899  059A  0021               	movlb	1	; select bank1
  6900  059B  0828               	movf	((_RF1+1)^(0+128)+7),w
  6901  059C  0020               	movlb	0	; select bank0
  6902  059D  01A4               	clrf	___lwdiv@dividend+1
  6903  059E  07A4               	addwf	___lwdiv@dividend+1,f
  6904  059F  0021               	movlb	1	; select bank1
  6905  05A0  0827               	movf	(_RF1^(0+128)+7),w
  6906  05A1  0020               	movlb	0	; select bank0
  6907  05A2  01A3               	clrf	___lwdiv@dividend
  6908  05A3  07A3               	addwf	___lwdiv@dividend,f
  6909  05A4  3190  20F7  3185   	fcall	___lwdiv
  6910  05A7  0020               	movlb	0	; select bank0
  6911  05A8  0822               	movf	?___lwdiv+1,w
  6912  05A9  0021               	movlb	1	; select bank1
  6913  05AA  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6914  05AB  1D03               	skipz
  6915  05AC  2DB1               	goto	u10985
  6916  05AD  0020               	movlb	0	; select bank0
  6917  05AE  0821               	movf	?___lwdiv,w
  6918  05AF  0021               	movlb	1	; select bank1
  6919  05B0  0222               	subwf	(_RF1^(0+128)+2),w
  6920  05B1                     u10985:	
  6921  05B1  1C03               	skipc
  6922  05B2  2E1F               	goto	l9633
  6923                           
  6924                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6925  05B3  3014               	movlw	20
  6926  05B4  0020               	movlb	0	; select bank0
  6927  05B5  00A1               	movwf	___lwdiv@divisor
  6928  05B6  3000               	movlw	0
  6929  05B7  00A2               	movwf	___lwdiv@divisor+1
  6930  05B8  0021               	movlb	1	; select bank1
  6931  05B9  0828               	movf	((_RF1+1)^(0+128)+7),w
  6932  05BA  0020               	movlb	0	; select bank0
  6933  05BB  01A4               	clrf	___lwdiv@dividend+1
  6934  05BC  07A4               	addwf	___lwdiv@dividend+1,f
  6935  05BD  0021               	movlb	1	; select bank1
  6936  05BE  0827               	movf	(_RF1^(0+128)+7),w
  6937  05BF  0020               	movlb	0	; select bank0
  6938  05C0  01A3               	clrf	___lwdiv@dividend
  6939  05C1  07A3               	addwf	___lwdiv@dividend,f
  6940  05C2  3190  20F7  3185   	fcall	___lwdiv
  6941  05C5  0020               	movlb	0	; select bank0
  6942  05C6  0822               	movf	?___lwdiv+1,w
  6943  05C7  0021               	movlb	1	; select bank1
  6944  05C8  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6945  05C9  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6946  05CA  0020               	movlb	0	; select bank0
  6947  05CB  0821               	movf	?___lwdiv,w
  6948  05CC  0021               	movlb	1	; select bank1
  6949  05CD  01A2               	clrf	(_RF1^(0+128)+2)
  6950  05CE  07A2               	addwf	(_RF1^(0+128)+2),f
  6951                           
  6952                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6953  05CF  1120               	bcf	_RF1^(0+128),2
  6954                           
  6955                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6956  05D0  01AA               	clrf	(_RF1^(0+128)+10)
  6957  05D1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6958                           
  6959                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6960  05D2  3187  27F0  3185   	fcall	_RF_RxDisable
  6961                           
  6962                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6963  05D5  3188  20E8  3185   	fcall	_CC2500_TxData
  6964                           
  6965                           ;RF_Control_B1.c: 77: }
  6966                           ;RF_Control_B1.c: 78: } else {
  6967  05D8  2E1F               	goto	l9633
  6968  05D9                     l9605:	
  6969                           
  6970                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6971  05D9  0021               	movlb	1	; select bank1
  6972  05DA  01A2               	clrf	(_RF1^(0+128)+2)
  6973  05DB  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6974                           
  6975                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6976  05DC  1120               	bcf	_RF1^(0+128),2
  6977                           
  6978                           ;RF_Control_B1.c: 81: }
  6979                           ;RF_Control_B1.c: 82: } else {
  6980  05DD  2E1F               	goto	l9633
  6981  05DE                     l2135:	
  6982                           
  6983                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6984  05DE  1DA0               	btfss	_RF1^(0+128),3
  6985  05DF  2DED               	goto	l9619
  6986                           
  6987                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6988  05E0  3189  2155  3185   	fcall	_CC2500_RxData
  6989                           
  6990                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6991  05E3  0021               	movlb	1	; select bank1
  6992  05E4  1CA0               	btfss	_RF1^(0+128),1
  6993  05E5  2E1F               	goto	l9633
  6994                           
  6995                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6996  05E6  10A0               	bcf	_RF1^(0+128),1
  6997                           
  6998                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6999  05E7  01AA               	clrf	(_RF1^(0+128)+10)
  7000  05E8  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7001                           
  7002                           ;RF_Control_B1.c: 97: getRxData();
  7003  05E9  318A  2232  3185   	fcall	_getRxData
  7004                           
  7005                           ;RF_Control_B1.c: 100: }
  7006                           ;RF_Control_B1.c: 101: } else {
  7007  05EC  2E1F               	goto	l9633
  7008  05ED                     l9619:	
  7009                           
  7010                           ;RF_Control_B1.c: 102: RF1.Count++;
  7011  05ED  3001               	movlw	1
  7012  05EE  0021               	movlb	1	; select bank1
  7013  05EF  07A2               	addwf	(_RF1^(0+128)+2),f
  7014  05F0  3000               	movlw	0
  7015  05F1  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  7016                           
  7017                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7018  05F2  3014               	movlw	20
  7019  05F3  0020               	movlb	0	; select bank0
  7020  05F4  00A1               	movwf	___lwdiv@divisor
  7021  05F5  3000               	movlw	0
  7022  05F6  00A2               	movwf	___lwdiv@divisor+1
  7023  05F7  0021               	movlb	1	; select bank1
  7024  05F8  0828               	movf	((_RF1+1)^(0+128)+7),w
  7025  05F9  0020               	movlb	0	; select bank0
  7026  05FA  01A4               	clrf	___lwdiv@dividend+1
  7027  05FB  07A4               	addwf	___lwdiv@dividend+1,f
  7028  05FC  0021               	movlb	1	; select bank1
  7029  05FD  0827               	movf	(_RF1^(0+128)+7),w
  7030  05FE  0020               	movlb	0	; select bank0
  7031  05FF  01A3               	clrf	___lwdiv@dividend
  7032  0600  07A3               	addwf	___lwdiv@dividend,f
  7033  0601  3190  20F7  3185   	fcall	___lwdiv
  7034  0604  0020               	movlb	0	; select bank0
  7035  0605  0822               	movf	?___lwdiv+1,w
  7036  0606  0021               	movlb	1	; select bank1
  7037  0607  0223               	subwf	((_RF1+1)^(0+128)+2),w
  7038  0608  1D03               	skipz
  7039  0609  2E0E               	goto	u11015
  7040  060A  0020               	movlb	0	; select bank0
  7041  060B  0821               	movf	?___lwdiv,w
  7042  060C  0021               	movlb	1	; select bank1
  7043  060D  0222               	subwf	(_RF1^(0+128)+2),w
  7044  060E                     u11015:	
  7045  060E  1C03               	skipc
  7046  060F  2E1F               	goto	l9633
  7047                           
  7048                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7049  0610  01A2               	clrf	(_RF1^(0+128)+2)
  7050  0611  01A3               	clrf	((_RF1+1)^(0+128)+2)
  7051                           
  7052                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7053  0612  15A0               	bsf	_RF1^(0+128),3
  7054                           
  7055                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7056  0613  3036               	movlw	54
  7057  0614  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7058                           
  7059                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7060  0617  303A               	movlw	58
  7061  0618  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7062                           
  7063                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7064  061B  3034               	movlw	52
  7065  061C  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7066  061F                     l9633:	
  7067                           
  7068                           ;RF_Control_B1.c: 111: }
  7069                           ;RF_Control_B1.c: 112: }
  7070                           ;RF_Control_B1.c: 113: }
  7071                           ;RF_Control_B1.c: 114: }
  7072                           ;RF_Control_B1.c: 115: }
  7073                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7074  061F  3001               	movlw	1
  7075  0620  0021               	movlb	1	; select bank1
  7076  0621  07AA               	addwf	(_RF1^(0+128)+10),f
  7077  0622  3000               	movlw	0
  7078  0623  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  7079                           
  7080                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7081  0624  300B               	movlw	11
  7082  0625  022B               	subwf	((_RF1+1)^(0+128)+10),w
  7083  0626  30B9               	movlw	185
  7084  0627  1903               	skipnz
  7085  0628  022A               	subwf	(_RF1^(0+128)+10),w
  7086  0629  1C03               	skipc
  7087  062A  2E37               	goto	l9647
  7088                           
  7089                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7090  062B  01AA               	clrf	(_RF1^(0+128)+10)
  7091  062C  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7092                           
  7093                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7094  062D  11A0               	bcf	_RF1^(0+128),3
  7095                           
  7096                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7097  062E  10A0               	bcf	_RF1^(0+128),1
  7098                           
  7099                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7100  062F  3036               	movlw	54
  7101  0630  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7102                           
  7103                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7104  0633  303A               	movlw	58
  7105  0634  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7106  0637                     l9647:	
  7107                           
  7108                           ;RF_Control_B1.c: 125: }
  7109                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7110  0637  0021               	movlb	1	; select bank1
  7111  0638  1F21               	btfss	(_RF1^(0+128)+1),6
  7112  0639  0008               	return
  7113                           
  7114                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7115  063A  1321               	bcf	(_RF1^(0+128)+1),6
  7116                           
  7117                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7118  063B  319B  23A9         	fcall	_CC2500_PowerOnInitial
  7119                           
  7120                           ;RF_Control_B1.c: 130: }
  7121                           ;RF_Control_B1.c: 132: } else {
  7122  063D  0008               	return
  7123  063E                     l2130:	
  7124                           
  7125                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7126  063E  0022               	movlb	2	; select bank2
  7127  063F  1C20               	btfss	_myMain^(0+256),0
  7128  0640  0008               	return
  7129                           
  7130                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7131  0641  0021               	movlb	1	; select bank1
  7132  0642  1420               	bsf	_RF1^(0+128),0
  7133  0643  0008               	return
  7134  0644                     __end_of_setRF_Main:	
  7135                           
  7136                           	psect	text25
  7137  0A32                     __ptext25:	
  7138 ;; *************** function _getRxData *****************
  7139 ;; Defined at:
  7140 ;;		line 227 in file "../src/RF_Control_B1.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;		None
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  error           1    4[BANK1 ] unsigned char 
  7145 ;; Return value:  Size  Location     Type
  7146 ;;		None               void
  7147 ;; Registers used:
  7148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;Total ram usage:        2 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:   10
  7161 ;; This function calls:
  7162 ;;		_getMain_All_Error_Status
  7163 ;;		_setControl_Lights_Table
  7164 ;;		_setLog_Code
  7165 ;;		_setTxData
  7166 ;; This function is called by:
  7167 ;;		_setRF_Main
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           
  7172                           ;psect for function _getRxData
  7173  0A32                     _getRxData:	
  7174                           
  7175                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7176                           
  7177                           ;incstack = 0
  7178                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7179  0A32  0023               	movlb	3	; select bank3
  7180  0A33  0820               	movf	_RF_Data^(0+384),w
  7181  0A34  3AAA               	xorlw	170
  7182  0A35  1D03               	skipz
  7183  0A36  2A48               	goto	l9421
  7184  0A37  0821               	movf	(_RF_Data^(0+384)+1),w
  7185  0A38  3A01               	xorlw	1
  7186  0A39  1D03               	skipz
  7187  0A3A  2A48               	goto	l9421
  7188                           
  7189                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7190  0A3B  3055               	movlw	85
  7191  0A3C  0021               	movlb	1	; select bank1
  7192  0A3D  00E8               	movwf	??_getRxData^(0+128)
  7193  0A3E  086D               	movf	_product^(0+128),w
  7194  0A3F  3E02               	addlw	2
  7195  0A40  0086               	movwf	6
  7196  0A41  3002               	movlw	2	; select bank4/5
  7197  0A42  0087               	movwf	7
  7198  0A43  0868               	movf	??_getRxData^(0+128),w
  7199  0A44  0081               	movwf	1
  7200                           
  7201                           ;RF_Control_B1.c: 231: setTxData();
  7202  0A45  318F  2745         	fcall	_setTxData
  7203                           
  7204                           ;RF_Control_B1.c: 235: } else {
  7205  0A47  0008               	return
  7206  0A48                     l9421:	
  7207                           
  7208                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7209  0A48  3000               	movlw	0
  7210  0A49  3190  205A  318A   	fcall	_getMain_All_Error_Status
  7211  0A4C  0021               	movlb	1	; select bank1
  7212  0A4D  00E8               	movwf	??_getRxData^(0+128)
  7213  0A4E  0868               	movf	??_getRxData^(0+128),w
  7214  0A4F  00E9               	movwf	getRxData@error^(0+128)
  7215                           
  7216                           ;RF_Control_B1.c: 237: if (error == 0) {
  7217  0A50  08E9               	movf	getRxData@error^(0+128),f
  7218  0A51  1D03               	skipz
  7219  0A52  2AA2               	goto	l2175
  7220                           
  7221                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7222  0A53  1F20               	btfss	_RF1^(0+128),6
  7223  0A54  2A60               	goto	l9433
  7224                           
  7225                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7226  0A55  0023               	movlb	3	; select bank3
  7227  0A56  08A0               	movf	_RF_Data^(0+384),f
  7228  0A57  1D03               	skipz
  7229  0A58  0008               	return
  7230  0A59  0821               	movf	(_RF_Data^(0+384)+1),w
  7231  0A5A  3A64               	xorlw	100
  7232  0A5B  1D03               	skipz
  7233  0A5C  0008               	return
  7234                           
  7235                           ;RF_Control_B1.c: 241: setLog_Code();
  7236  0A5D  3190  208D         	fcall	_setLog_Code
  7237                           
  7238                           ;RF_Control_B1.c: 242: }
  7239                           ;RF_Control_B1.c: 243: } else {
  7240  0A5F  0008               	return
  7241  0A60                     l9433:	
  7242                           
  7243                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7244  0A60  0023               	movlb	3	; select bank3
  7245  0A61  0834               	movf	(_RF_Data^(0+384)+20),w
  7246  0A62  3AD2               	xorlw	210
  7247  0A63  1903               	skipnz
  7248  0A64  2A69               	goto	l9437
  7249  0A65  0834               	movf	(_RF_Data^(0+384)+20),w
  7250  0A66  3A0A               	xorlw	10
  7251  0A67  1D03               	skipz
  7252  0A68  0008               	return
  7253  0A69                     l9437:	
  7254                           
  7255                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7256  0A69  08A0               	movf	_RF_Data^(0+384),f
  7257  0A6A  1D03               	skipz
  7258  0A6B  0008               	return
  7259  0A6C  0821               	movf	(_RF_Data^(0+384)+1),w
  7260  0A6D  3A02               	xorlw	2
  7261  0A6E  1D03               	skipz
  7262  0A6F  0008               	return
  7263                           
  7264                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7265  0A70  082C               	movf	(_RF_Data^(0+384)+12),w
  7266  0A71  3AFF               	xorlw	255
  7267  0A72  1D03               	skipz
  7268  0A73  2A7E               	goto	l9449
  7269  0A74  082D               	movf	(_RF_Data^(0+384)+13),w
  7270  0A75  3AFF               	xorlw	255
  7271  0A76  1D03               	skipz
  7272  0A77  2A7E               	goto	l9449
  7273  0A78  082E               	movf	(_RF_Data^(0+384)+14),w
  7274  0A79  3AFF               	xorlw	255
  7275  0A7A  1D03               	skipz
  7276  0A7B  2A7E               	goto	l9449
  7277                           
  7278                           ;RF_Control_B1.c: 249: __nop();
  7279  0A7C  0000               	nop
  7280                           
  7281                           ;RF_Control_B1.c: 250: } else {
  7282  0A7D  0008               	return
  7283  0A7E                     l9449:	
  7284                           
  7285                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7286  0A7E  0021               	movlb	1	; select bank1
  7287  0A7F  086D               	movf	_product^(0+128),w
  7288  0A80  3E0C               	addlw	12
  7289  0A81  0086               	movwf	6
  7290  0A82  3002               	movlw	2	; select bank4/5
  7291  0A83  0087               	movwf	7
  7292  0A84  0023               	movlb	3	; select bank3
  7293  0A85  082C               	movf	(_RF_Data^(0+384)+12),w
  7294  0A86  0601               	xorwf	1,w
  7295  0A87  1D03               	skipz
  7296  0A88  0008               	return
  7297  0A89  0021               	movlb	1	; select bank1
  7298  0A8A  086D               	movf	_product^(0+128),w
  7299  0A8B  3E0D               	addlw	13
  7300  0A8C  0086               	movwf	6
  7301  0A8D  3002               	movlw	2	; select bank4/5
  7302  0A8E  0087               	movwf	7
  7303  0A8F  0023               	movlb	3	; select bank3
  7304  0A90  082D               	movf	(_RF_Data^(0+384)+13),w
  7305  0A91  0601               	xorwf	1,w
  7306  0A92  1D03               	skipz
  7307  0A93  0008               	return
  7308  0A94  0021               	movlb	1	; select bank1
  7309  0A95  086D               	movf	_product^(0+128),w
  7310  0A96  3E0E               	addlw	14
  7311  0A97  0086               	movwf	6
  7312  0A98  3002               	movlw	2	; select bank4/5
  7313  0A99  0087               	movwf	7
  7314  0A9A  0023               	movlb	3	; select bank3
  7315  0A9B  082E               	movf	(_RF_Data^(0+384)+14),w
  7316  0A9C  0601               	xorwf	1,w
  7317  0A9D  1D03               	skipz
  7318  0A9E  0008               	return
  7319                           
  7320                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7321  0A9F  318C  24A9         	fcall	_setControl_Lights_Table
  7322                           
  7323                           ;RF_Control_B1.c: 253: }
  7324                           ;RF_Control_B1.c: 254: }
  7325                           ;RF_Control_B1.c: 256: }
  7326                           ;RF_Control_B1.c: 267: }
  7327                           ;RF_Control_B1.c: 268: }
  7328                           ;RF_Control_B1.c: 269: } else {
  7329  0AA1  0008               	return
  7330  0AA2                     l2175:	
  7331                           
  7332                           ;RF_Control_B1.c: 270: __nop();
  7333  0AA2  0000               	nop
  7334  0AA3  0008               	return
  7335  0AA4                     __end_of_getRxData:	
  7336                           
  7337                           	psect	text26
  7338  108D                     __ptext26:	
  7339 ;; *************** function _setLog_Code *****************
  7340 ;; Defined at:
  7341 ;;		line 276 in file "../src/RF_Control_B1.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;		None
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;		None
  7346 ;; Return value:  Size  Location     Type
  7347 ;;		None               void
  7348 ;; Registers used:
  7349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;Total ram usage:        1 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:    7
  7362 ;; This function calls:
  7363 ;;		_setBuz
  7364 ;;		_setMemory_LoopSave
  7365 ;;		_setMemory_Modify
  7366 ;;		_setProductData
  7367 ;; This function is called by:
  7368 ;;		_getRxData
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           
  7373                           ;psect for function _setLog_Code
  7374  108D                     _setLog_Code:	
  7375                           
  7376                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7377                           
  7378                           ;incstack = 0
  7379                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7380  108D  0021               	movlb	1	; select bank1
  7381  108E  1320               	bcf	_RF1^(0+128),6
  7382                           
  7383                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7384  108F  0023               	movlb	3	; select bank3
  7385  1090  082C               	movf	(_RF_Data^(0+384)+12),w
  7386  1091  0020               	movlb	0	; select bank0
  7387  1092  00E6               	movwf	??_setLog_Code
  7388  1093  0866               	movf	??_setLog_Code,w
  7389  1094  00E3               	movwf	setProductData@value
  7390  1095  300C               	movlw	12
  7391  1096  3199  21FC  3190   	fcall	_setProductData
  7392                           
  7393                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7394  1099  0023               	movlb	3	; select bank3
  7395  109A  082D               	movf	(_RF_Data^(0+384)+13),w
  7396  109B  0020               	movlb	0	; select bank0
  7397  109C  00E6               	movwf	??_setLog_Code
  7398  109D  0866               	movf	??_setLog_Code,w
  7399  109E  00E3               	movwf	setProductData@value
  7400  109F  300D               	movlw	13
  7401  10A0  3199  21FC  3190   	fcall	_setProductData
  7402                           
  7403                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7404  10A3  0023               	movlb	3	; select bank3
  7405  10A4  082E               	movf	(_RF_Data^(0+384)+14),w
  7406  10A5  0020               	movlb	0	; select bank0
  7407  10A6  00E6               	movwf	??_setLog_Code
  7408  10A7  0866               	movf	??_setLog_Code,w
  7409  10A8  00E3               	movwf	setProductData@value
  7410  10A9  300E               	movlw	14
  7411  10AA  3199  21FC  3190   	fcall	_setProductData
  7412                           
  7413                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7414  10AD  3064               	movlw	100
  7415  10AE  0020               	movlb	0	; select bank0
  7416  10AF  00AA               	movwf	setBuz@time
  7417  10B0  3000               	movlw	0
  7418  10B1  00AB               	movwf	setBuz@time+1
  7419  10B2  3001               	movlw	1
  7420  10B3  3194  24F8  3190   	fcall	_setBuz
  7421                           
  7422                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7423  10B6  0022               	movlb	2	; select bank2
  7424  10B7  1EA0               	btfss	_myMain^(0+256),5
  7425  10B8  28BD               	goto	l2190
  7426                           
  7427                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7428  10B9  3001               	movlw	1
  7429  10BA  319B  2346  3190   	fcall	_setMemory_LoopSave
  7430  10BD                     l2190:	
  7431                           
  7432                           ;RF_Control_B1.c: 284: }
  7433                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7434  10BD  3001               	movlw	1
  7435  10BE  319B  2333         	fcall	_setMemory_Modify
  7436  10C0  0008               	return
  7437  10C1                     __end_of_setLog_Code:	
  7438                           
  7439                           	psect	text27
  7440  1B46                     __ptext27:	
  7441 ;; *************** function _setMemory_LoopSave *****************
  7442 ;; Defined at:
  7443 ;;		line 1076 in file "../src/MCU_B1.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;  command         1    wreg     unsigned char 
  7446 ;; Auto vars:     Size  Location     Type
  7447 ;;  command         1    2[BANK0 ] unsigned char 
  7448 ;; Return value:  Size  Location     Type
  7449 ;;		None               void
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7461 ;;Total ram usage:        2 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    5
  7464 ;; This function calls:
  7465 ;;		Nothing
  7466 ;; This function is called by:
  7467 ;;		_setLog_Code
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           
  7472                           ;psect for function _setMemory_LoopSave
  7473  1B46                     _setMemory_LoopSave:	
  7474                           
  7475                           ;incstack = 0
  7476                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7477                           ;setMemory_LoopSave@command stored from wreg
  7478  1B46  0020               	movlb	0	; select bank0
  7479  1B47  00A2               	movwf	setMemory_LoopSave@command
  7480                           
  7481                           ;MCU_B1.c: 1077: Memory.LoopSave = command == 1 ? 1 : 0;
  7482  1B48  0822               	movf	setMemory_LoopSave@command,w
  7483  1B49  3A01               	xorlw	1
  7484  1B4A  3000               	movlw	0
  7485  1B4B  1903               	skipnz
  7486  1B4C  3001               	movlw	1
  7487  1B4D  00A1               	movwf	??_setMemory_LoopSave
  7488  1B4E  0DA1               	rlf	??_setMemory_LoopSave,f
  7489  1B4F  0DA1               	rlf	??_setMemory_LoopSave,f
  7490  1B50  0024               	movlb	4	; select bank4
  7491  1B51  0844               	movf	(_Memory^(0+512)+36),w
  7492  1B52  0020               	movlb	0	; select bank0
  7493  1B53  0621               	xorwf	??_setMemory_LoopSave,w
  7494  1B54  39FB               	andlw	-5
  7495  1B55  0621               	xorwf	??_setMemory_LoopSave,w
  7496  1B56  0024               	movlb	4	; select bank4
  7497  1B57  00C4               	movwf	(_Memory^(0+512)+36)
  7498  1B58  0008               	return
  7499  1B59                     __end_of_setMemory_LoopSave:	
  7500                           
  7501                           	psect	text28
  7502  0CA9                     __ptext28:	
  7503 ;; *************** function _setControl_Lights_Table *****************
  7504 ;; Defined at:
  7505 ;;		line 289 in file "../src/RF_Control_B1.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;		None
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;		None
  7510 ;; Return value:  Size  Location     Type
  7511 ;;		None               void
  7512 ;; Registers used:
  7513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;Total ram usage:        0 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    9
  7526 ;; This function calls:
  7527 ;;		_getDimmerLights_Status
  7528 ;;		_getMain_All_LightsStatus
  7529 ;;		_setCmd_Status
  7530 ;;		_setDimmerLights_SwOff
  7531 ;;		_setDimmerLights_SwOn
  7532 ;;		_setProductData
  7533 ;;		_setRFSW_AdjControl
  7534 ;;		_setRFSW_Control
  7535 ;;		_setTxData
  7536 ;; This function is called by:
  7537 ;;		_getRxData
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           
  7542                           ;psect for function _setControl_Lights_Table
  7543  0CA9                     _setControl_Lights_Table:	
  7544                           
  7545                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7546                           
  7547                           ;incstack = 0
  7548                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7549  0CA9  2D22               	goto	l9339
  7550  0CAA                     l9315:	
  7551                           ;RF_Control_B1.c: 292: case 0x00:
  7552                           
  7553                           
  7554                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7555  0CAA  319B  2320  318C   	fcall	_getMain_All_LightsStatus
  7556  0CAD  3A01               	xorlw	1
  7557  0CAE  1D03               	skipz
  7558  0CAF  2CD5               	goto	l9325
  7559                           
  7560                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7561  0CB0  3001               	movlw	1
  7562  0CB1  319A  225D  318C   	fcall	_getDimmerLights_Status
  7563  0CB4  3A01               	xorlw	1
  7564  0CB5  1D03               	skipz
  7565  0CB6  2CBF               	goto	l2197
  7566                           
  7567                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7568  0CB7  3001               	movlw	1
  7569  0CB8  3195  25AC  318C   	fcall	_setDimmerLights_SwOn
  7570                           
  7571                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7572  0CBB  3001               	movlw	1
  7573  0CBC  3191  212E  318C   	fcall	_setDimmerLights_SwOff
  7574  0CBF                     l2197:	
  7575                           
  7576                           ;RF_Control_B1.c: 299: }
  7577                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7578  0CBF  3002               	movlw	2
  7579  0CC0  319A  225D  318C   	fcall	_getDimmerLights_Status
  7580  0CC3  3A01               	xorlw	1
  7581  0CC4  1D03               	skipz
  7582  0CC5  2CCE               	goto	l9323
  7583                           
  7584                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7585  0CC6  3002               	movlw	2
  7586  0CC7  3195  25AC  318C   	fcall	_setDimmerLights_SwOn
  7587                           
  7588                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7589  0CCA  3002               	movlw	2
  7590  0CCB  3191  212E  318C   	fcall	_setDimmerLights_SwOff
  7591  0CCE                     l9323:	
  7592                           
  7593                           ;RF_Control_B1.c: 305: }
  7594                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7595  0CCE  0020               	movlb	0	; select bank0
  7596  0CCF  01A1               	clrf	setCmd_Status@cmd
  7597  0CD0  0AA1               	incf	setCmd_Status@cmd,f
  7598  0CD1  3001               	movlw	1
  7599  0CD2  319C  245C         	fcall	_setCmd_Status
  7600                           
  7601                           ;RF_Control_B1.c: 315: } else {
  7602  0CD4  0008               	return
  7603  0CD5                     l9325:	
  7604                           
  7605                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7606  0CD5  0020               	movlb	0	; select bank0
  7607  0CD6  01E3               	clrf	setProductData@value
  7608  0CD7  3009               	movlw	9
  7609  0CD8  3199  21FC  318C   	fcall	_setProductData
  7610                           
  7611                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7612  0CDB  0020               	movlb	0	; select bank0
  7613  0CDC  01E3               	clrf	setProductData@value
  7614  0CDD  300B               	movlw	11
  7615  0CDE  3199  21FC  318C   	fcall	_setProductData
  7616                           
  7617                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7618  0CE1  0020               	movlb	0	; select bank0
  7619  0CE2  01E3               	clrf	setProductData@value
  7620  0CE3  300F               	movlw	15
  7621  0CE4  3199  21FC  318C   	fcall	_setProductData
  7622                           
  7623                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7624  0CE7  0020               	movlb	0	; select bank0
  7625  0CE8  01E3               	clrf	setProductData@value
  7626  0CE9  3011               	movlw	17
  7627  0CEA  3199  21FC  318C   	fcall	_setProductData
  7628                           
  7629                           ;RF_Control_B1.c: 320: setTxData();
  7630  0CED  318F  2745         	fcall	_setTxData
  7631                           
  7632                           ;RF_Control_B1.c: 321: }
  7633                           ;RF_Control_B1.c: 322: break;
  7634  0CEF  0008               	return
  7635  0CF0                     l9327:	
  7636                           ;RF_Control_B1.c: 324: case 0x20:
  7637                           
  7638                           
  7639                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7640  0CF0  0020               	movlb	0	; select bank0
  7641  0CF1  01E3               	clrf	setProductData@value
  7642  0CF2  3009               	movlw	9
  7643  0CF3  3199  21FC  318C   	fcall	_setProductData
  7644                           
  7645                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7646  0CF6  0020               	movlb	0	; select bank0
  7647  0CF7  01E3               	clrf	setProductData@value
  7648  0CF8  300B               	movlw	11
  7649  0CF9  3199  21FC  318C   	fcall	_setProductData
  7650                           
  7651                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7652  0CFC  0021               	movlb	1	; select bank1
  7653  0CFD  086D               	movf	_product^(0+128),w
  7654  0CFE  0086               	movwf	6
  7655  0CFF  3002               	movlw	2	; select bank4/5
  7656  0D00  0087               	movwf	7
  7657  0D01  3002               	movlw	2	; select bank4/5
  7658  0D02  3F4F               	moviw [15]fsr1
  7659  0D03  0020               	movlb	0	; select bank0
  7660  0D04  00E3               	movwf	setProductData@value
  7661  0D05  300F               	movlw	15
  7662  0D06  3199  21FC  318C   	fcall	_setProductData
  7663                           
  7664                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7665  0D09  0020               	movlb	0	; select bank0
  7666  0D0A  01E3               	clrf	setProductData@value
  7667  0D0B  3011               	movlw	17
  7668  0D0C  3199  21FC  318C   	fcall	_setProductData
  7669                           
  7670                           ;RF_Control_B1.c: 329: setTxData();
  7671  0D0F  318F  2745         	fcall	_setTxData
  7672                           
  7673                           ;RF_Control_B1.c: 330: break;
  7674  0D11  0008               	return
  7675  0D12                     l9329:	
  7676                           ;RF_Control_B1.c: 333: case 0x01:
  7677                           
  7678                           
  7679                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7680  0D12  3001               	movlw	1
  7681  0D13  3192  22DD         	fcall	_setRFSW_Control
  7682                           
  7683                           ;RF_Control_B1.c: 335: break;
  7684  0D15  0008               	return
  7685  0D16                     l9331:	
  7686                           ;RF_Control_B1.c: 339: case 0x11:
  7687                           
  7688                           
  7689                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7690  0D16  3001               	movlw	1
  7691  0D17  318B  2316         	fcall	_setRFSW_AdjControl
  7692                           
  7693                           ;RF_Control_B1.c: 341: break;
  7694  0D19  0008               	return
  7695  0D1A                     l9333:	
  7696                           ;RF_Control_B1.c: 346: case 0x02:
  7697                           
  7698                           
  7699                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7700  0D1A  3002               	movlw	2
  7701  0D1B  3192  22DD         	fcall	_setRFSW_Control
  7702                           
  7703                           ;RF_Control_B1.c: 348: break;
  7704  0D1D  0008               	return
  7705  0D1E                     l9335:	
  7706                           ;RF_Control_B1.c: 351: case 0x21:
  7707                           
  7708                           
  7709                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7710  0D1E  3002               	movlw	2
  7711  0D1F  318B  2316         	fcall	_setRFSW_AdjControl
  7712                           
  7713                           ;RF_Control_B1.c: 370: }
  7714                           
  7715                           ;RF_Control_B1.c: 353: break;
  7716  0D21  0008               	return
  7717  0D22                     l9339:	
  7718  0D22  0023               	movlb	3	; select bank3
  7719  0D23  082F               	movf	(_RF_Data^(0+384)+15),w
  7720                           
  7721                           ; Switch size 1, requested type "space"
  7722                           ; Number of cases is 6, Range of values is 0 to 33
  7723                           ; switch strategies available:
  7724                           ; Name         Instructions Cycles
  7725                           ; simple_byte           19    10 (average)
  7726                           ; direct_byte           74     6 (fixed)
  7727                           ; jumptable            260     6 (fixed)
  7728                           ;	Chosen strategy is simple_byte
  7729  0D24  3A00               	xorlw	0	; case 0
  7730  0D25  1903               	skipnz
  7731  0D26  2CAA               	goto	l9315
  7732  0D27  3A01               	xorlw	1	; case 1
  7733  0D28  1903               	skipnz
  7734  0D29  2D12               	goto	l9329
  7735  0D2A  3A03               	xorlw	3	; case 2
  7736  0D2B  1903               	skipnz
  7737  0D2C  2D1A               	goto	l9333
  7738  0D2D  3A13               	xorlw	19	; case 17
  7739  0D2E  1903               	skipnz
  7740  0D2F  2D16               	goto	l9331
  7741  0D30  3A31               	xorlw	49	; case 32
  7742  0D31  1903               	skipnz
  7743  0D32  2CF0               	goto	l9327
  7744  0D33  3A01               	xorlw	1	; case 33
  7745  0D34  1903               	skipnz
  7746  0D35  2D1E               	goto	l9335
  7747  0D36  2D37               	goto	l2206
  7748  0D37                     l2206:	
  7749  0D37  0008               	return
  7750  0D38                     __end_of_setControl_Lights_Table:	
  7751                           
  7752                           	psect	text29
  7753  12DD                     __ptext29:	
  7754 ;; *************** function _setRFSW_Control *****************
  7755 ;; Defined at:
  7756 ;;		line 378 in file "../src/RF_Control_B1.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  sw              1    wreg     unsigned char 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  sw              1    2[BANK1 ] unsigned char 
  7761 ;;  status          1    1[BANK1 ] unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;		None               void
  7764 ;; Registers used:
  7765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;Total ram usage:        3 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    8
  7778 ;; This function calls:
  7779 ;;		_getDimmerLights_Status
  7780 ;;		_setBuz
  7781 ;;		_setDelayOff_GO
  7782 ;;		_setDimmerLights_SwOff
  7783 ;;		_setDimmerLights_SwOn
  7784 ;;		_setRF_DimmerLights
  7785 ;;		_setTxData
  7786 ;; This function is called by:
  7787 ;;		_setControl_Lights_Table
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           
  7792                           ;psect for function _setRFSW_Control
  7793  12DD                     _setRFSW_Control:	
  7794                           
  7795                           ;incstack = 0
  7796                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7797                           ;setRFSW_Control@sw stored from wreg
  7798  12DD  0021               	movlb	1	; select bank1
  7799  12DE  00E7               	movwf	setRFSW_Control@sw^(0+128)
  7800                           
  7801                           ;RF_Control_B1.c: 379: char status = 0;
  7802  12DF  01E6               	clrf	setRFSW_Control@status^(0+128)
  7803                           
  7804                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7805  12E0  0023               	movlb	3	; select bank3
  7806  12E1  0830               	movf	(_RF_Data^(0+384)+16),w
  7807  12E2  3A80               	xorlw	128
  7808  12E3  1D03               	skipz
  7809  12E4  2B13               	goto	l9249
  7810                           
  7811                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7812  12E5  0020               	movlb	0	; select bank0
  7813  12E6  01E6               	clrf	setDelayOff_GO@command
  7814  12E7  0AE6               	incf	setDelayOff_GO@command,f
  7815  12E8  0023               	movlb	3	; select bank3
  7816  12E9  0831               	movf	(_RF_Data^(0+384)+17),w
  7817  12EA  0021               	movlb	1	; select bank1
  7818  12EB  00E5               	movwf	??_setRFSW_Control^(0+128)
  7819  12EC  0865               	movf	??_setRFSW_Control^(0+128),w
  7820  12ED  0020               	movlb	0	; select bank0
  7821  12EE  00E7               	movwf	setDelayOff_GO@value
  7822  12EF  0021               	movlb	1	; select bank1
  7823  12F0  0867               	movf	setRFSW_Control@sw^(0+128),w
  7824  12F1  318C  241D  3192   	fcall	_setDelayOff_GO
  7825                           
  7826                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7827  12F4  0021               	movlb	1	; select bank1
  7828  12F5  0867               	movf	setRFSW_Control@sw^(0+128),w
  7829  12F6  319A  225D  3192   	fcall	_getDimmerLights_Status
  7830  12F9  3A01               	xorlw	1
  7831  12FA  1D03               	skipz
  7832  12FB  2B13               	goto	l9249
  7833                           
  7834                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7835  12FC  3064               	movlw	100
  7836  12FD  0020               	movlb	0	; select bank0
  7837  12FE  00AA               	movwf	setBuz@time
  7838  12FF  3000               	movlw	0
  7839  1300  00AB               	movwf	setBuz@time+1
  7840  1301  3001               	movlw	1
  7841  1302  3194  24F8  3192   	fcall	_setBuz
  7842                           
  7843                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7844  1305  0020               	movlb	0	; select bank0
  7845  1306  01E6               	clrf	setRF_DimmerLights@on
  7846  1307  0AE6               	incf	setRF_DimmerLights@on,f
  7847  1308  0021               	movlb	1	; select bank1
  7848  1309  0867               	movf	setRFSW_Control@sw^(0+128),w
  7849  130A  3196  26CE  3192   	fcall	_setRF_DimmerLights
  7850                           
  7851                           ;RF_Control_B1.c: 386: setTxData();
  7852  130D  318F  2745  3192   	fcall	_setTxData
  7853                           
  7854                           ;RF_Control_B1.c: 387: status = 1;
  7855  1310  0021               	movlb	1	; select bank1
  7856  1311  01E6               	clrf	setRFSW_Control@status^(0+128)
  7857  1312  0AE6               	incf	setRFSW_Control@status^(0+128),f
  7858  1313                     l9249:	
  7859                           
  7860                           ;RF_Control_B1.c: 388: }
  7861                           ;RF_Control_B1.c: 389: }
  7862                           ;RF_Control_B1.c: 391: if (status == 0) {
  7863  1313  0021               	movlb	1	; select bank1
  7864  1314  08E6               	movf	setRFSW_Control@status^(0+128),f
  7865  1315  1D03               	skipz
  7866  1316  0008               	return
  7867                           
  7868                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7869  1317  0867               	movf	setRFSW_Control@sw^(0+128),w
  7870  1318  3195  25AC  3192   	fcall	_setDimmerLights_SwOn
  7871                           
  7872                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7873  131B  0021               	movlb	1	; select bank1
  7874  131C  0867               	movf	setRFSW_Control@sw^(0+128),w
  7875  131D  3191  212E         	fcall	_setDimmerLights_SwOff
  7876  131F  0008               	return
  7877  1320                     __end_of_setRFSW_Control:	
  7878                           
  7879                           	psect	text30
  7880  0B16                     __ptext30:	
  7881 ;; *************** function _setRFSW_AdjControl *****************
  7882 ;; Defined at:
  7883 ;;		line 400 in file "../src/RF_Control_B1.c"
  7884 ;; Parameters:    Size  Location     Type
  7885 ;;  sw              1    wreg     unsigned char 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  sw              1   73[BANK0 ] unsigned char 
  7888 ;;  status          1   72[BANK0 ] unsigned char 
  7889 ;; Return value:  Size  Location     Type
  7890 ;;		None               void
  7891 ;; Registers used:
  7892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;Total ram usage:        4 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    8
  7905 ;; This function calls:
  7906 ;;		_getDimmerLights_PercentToValue
  7907 ;;		_getDimmerLights_Status
  7908 ;;		_setDimmerIntr_Dimming_RF
  7909 ;;		_setDimmerIntr_MaxmumValue
  7910 ;;		_setDimmerLights_DimmingRun
  7911 ;;		_setDimmerLights_SwOff
  7912 ;;		_setDimmerLights_SwOn
  7913 ;;		_setMemory_Modify
  7914 ;;		_setProductData
  7915 ;;		_setTxData
  7916 ;; This function is called by:
  7917 ;;		_setControl_Lights_Table
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           
  7922                           ;psect for function _setRFSW_AdjControl
  7923  0B16                     _setRFSW_AdjControl:	
  7924                           
  7925                           ;incstack = 0
  7926                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7927                           ;setRFSW_AdjControl@sw stored from wreg
  7928  0B16  0020               	movlb	0	; select bank0
  7929  0B17  00E9               	movwf	setRFSW_AdjControl@sw
  7930                           
  7931                           ;RF_Control_B1.c: 401: char status = 0;
  7932  0B18  01E8               	clrf	setRFSW_AdjControl@status
  7933                           
  7934                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7935  0B19  0869               	movf	setRFSW_AdjControl@sw,w
  7936  0B1A  319A  225D  318B   	fcall	_getDimmerLights_Status
  7937  0B1D  0020               	movlb	0	; select bank0
  7938  0B1E  00E6               	movwf	??_setRFSW_AdjControl
  7939  0B1F  0866               	movf	??_setRFSW_AdjControl,w
  7940  0B20  00E8               	movwf	setRFSW_AdjControl@status
  7941                           
  7942                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7943  0B21  3065               	movlw	101
  7944  0B22  0023               	movlb	3	; select bank3
  7945  0B23  0229               	subwf	(_RF_Data^(0+384)+9),w
  7946  0B24  1C03               	skipc
  7947  0B25  2B2D               	goto	l9261
  7948                           
  7949                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7950  0B26  3064               	movlw	100
  7951  0B27  0020               	movlb	0	; select bank0
  7952  0B28  00E6               	movwf	??_setRFSW_AdjControl
  7953  0B29  0866               	movf	??_setRFSW_AdjControl,w
  7954  0B2A  0023               	movlb	3	; select bank3
  7955  0B2B  00A9               	movwf	(_RF_Data^(0+384)+9)
  7956                           
  7957                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7958  0B2C  2B32               	goto	l9265
  7959  0B2D                     l9261:	
  7960  0B2D  08A9               	movf	(_RF_Data^(0+384)+9),f
  7961  0B2E  1D03               	skipz
  7962  0B2F  2B32               	goto	l9265
  7963                           
  7964                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7965  0B30  01A9               	clrf	(_RF_Data^(0+384)+9)
  7966  0B31  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7967  0B32                     l9265:	
  7968                           
  7969                           ;RF_Control_B1.c: 409: }
  7970                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7971  0B32  0829               	movf	(_RF_Data^(0+384)+9),w
  7972  0B33  0020               	movlb	0	; select bank0
  7973  0B34  00E6               	movwf	??_setRFSW_AdjControl
  7974  0B35  0866               	movf	??_setRFSW_AdjControl,w
  7975  0B36  00E3               	movwf	setProductData@value
  7976  0B37  3009               	movlw	9
  7977  0B38  3199  21FC  318B   	fcall	_setProductData
  7978                           
  7979                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7980  0B3B  0020               	movlb	0	; select bank0
  7981  0B3C  0869               	movf	setRFSW_AdjControl@sw,w
  7982  0B3D  00E6               	movwf	??_setRFSW_AdjControl
  7983  0B3E  0866               	movf	??_setRFSW_AdjControl,w
  7984  0B3F  00E3               	movwf	setProductData@value
  7985  0B40  300B               	movlw	11
  7986  0B41  3199  21FC  318B   	fcall	_setProductData
  7987                           
  7988                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7989  0B44  0020               	movlb	0	; select bank0
  7990  0B45  0869               	movf	setRFSW_AdjControl@sw,w
  7991  0B46  3E1A               	addlw	26
  7992  0B47  0021               	movlb	1	; select bank1
  7993  0B48  076D               	addwf	_product^(0+128),w
  7994  0B49  0020               	movlb	0	; select bank0
  7995  0B4A  00E6               	movwf	??_setRFSW_AdjControl
  7996  0B4B  0866               	movf	??_setRFSW_AdjControl,w
  7997  0B4C  0086               	movwf	6
  7998  0B4D  3002               	movlw	2	; select bank4/5
  7999  0B4E  0087               	movwf	7
  8000  0B4F  0801               	movf	1,w
  8001  0B50  00E7               	movwf	??_setRFSW_AdjControl+1
  8002  0B51  0867               	movf	??_setRFSW_AdjControl+1,w
  8003  0B52  00E3               	movwf	setProductData@value
  8004  0B53  3011               	movlw	17
  8005  0B54  3199  21FC  318B   	fcall	_setProductData
  8006                           
  8007                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  8008  0B57  0023               	movlb	3	; select bank3
  8009  0B58  0829               	movf	(_RF_Data^(0+384)+9),w
  8010  0B59  0020               	movlb	0	; select bank0
  8011  0B5A  00E6               	movwf	??_setRFSW_AdjControl
  8012  0B5B  0866               	movf	??_setRFSW_AdjControl,w
  8013  0B5C  00E3               	movwf	setProductData@value
  8014  0B5D  0869               	movf	setRFSW_AdjControl@sw,w
  8015  0B5E  3E14               	addlw	20
  8016  0B5F  3199  21FC  318B   	fcall	_setProductData
  8017                           
  8018                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  8019  0B62  3001               	movlw	1
  8020  0B63  319B  2333  318B   	fcall	_setMemory_Modify
  8021                           
  8022                           ;RF_Control_B1.c: 416: if (status == 1) {
  8023  0B66  0020               	movlb	0	; select bank0
  8024  0B67  0868               	movf	setRFSW_AdjControl@status,w
  8025  0B68  3A01               	xorlw	1
  8026  0B69  1D03               	skipz
  8027  0B6A  2B82               	goto	l9275
  8028                           
  8029                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8030  0B6B  0023               	movlb	3	; select bank3
  8031  0B6C  0829               	movf	(_RF_Data^(0+384)+9),w
  8032  0B6D  3197  2733  318B   	fcall	_getDimmerLights_PercentToValue
  8033  0B70  0020               	movlb	0	; select bank0
  8034  0B71  00E6               	movwf	??_setRFSW_AdjControl
  8035  0B72  0866               	movf	??_setRFSW_AdjControl,w
  8036  0B73  00E3               	movwf	setDimmerIntr_MaxmumValue@value
  8037  0B74  0869               	movf	setRFSW_AdjControl@sw,w
  8038  0B75  319C  2417  318B   	fcall	_setDimmerIntr_MaxmumValue
  8039                           
  8040                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  8041  0B78  0020               	movlb	0	; select bank0
  8042  0B79  01A1               	clrf	setDimmerIntr_Dimming_RF@command
  8043  0B7A  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
  8044  0B7B  0869               	movf	setRFSW_AdjControl@sw,w
  8045  0B7C  319F  27A2  318B   	fcall	_setDimmerIntr_Dimming_RF
  8046                           
  8047                           ;RF_Control_B1.c: 419: setTxData();
  8048  0B7F  318F  2745         	fcall	_setTxData
  8049                           
  8050                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  8051  0B81  0008               	return
  8052  0B82                     l9275:	
  8053  0B82  0020               	movlb	0	; select bank0
  8054  0B83  08E8               	movf	setRFSW_AdjControl@status,f
  8055  0B84  1D03               	skipz
  8056  0B85  0008               	return
  8057                           
  8058                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  8059  0B86  01A3               	clrf	setDimmerLights_DimmingRun@command
  8060  0B87  0AA3               	incf	setDimmerLights_DimmingRun@command,f
  8061  0B88  0869               	movf	setRFSW_AdjControl@sw,w
  8062  0B89  319C  24DD  318B   	fcall	_setDimmerLights_DimmingRun
  8063                           
  8064                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  8065  0B8C  0020               	movlb	0	; select bank0
  8066  0B8D  0869               	movf	setRFSW_AdjControl@sw,w
  8067  0B8E  3195  25AC  318B   	fcall	_setDimmerLights_SwOn
  8068                           
  8069                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  8070  0B91  0020               	movlb	0	; select bank0
  8071  0B92  0869               	movf	setRFSW_AdjControl@sw,w
  8072  0B93  3191  212E         	fcall	_setDimmerLights_SwOff
  8073  0B95  0008               	return
  8074  0B96                     __end_of_setRFSW_AdjControl:	
  8075                           
  8076                           	psect	text31
  8077  1B33                     __ptext31:	
  8078 ;; *************** function _setMemory_Modify *****************
  8079 ;; Defined at:
  8080 ;;		line 1070 in file "../src/MCU_B1.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  command         1    wreg     unsigned char 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  command         1    2[BANK0 ] unsigned char 
  8085 ;; Return value:  Size  Location     Type
  8086 ;;		None               void
  8087 ;; Registers used:
  8088 ;;		wreg, status,2, status,0
  8089 ;; Tracked objects:
  8090 ;;		On entry : 0/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;Total ram usage:        2 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; Hardware stack levels required when called:    5
  8101 ;; This function calls:
  8102 ;;		Nothing
  8103 ;; This function is called by:
  8104 ;;		_setLog_Code
  8105 ;;		_setRFSW_AdjControl
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           
  8110                           ;psect for function _setMemory_Modify
  8111  1B33                     _setMemory_Modify:	
  8112                           
  8113                           ;incstack = 0
  8114                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8115                           ;setMemory_Modify@command stored from wreg
  8116  1B33  0020               	movlb	0	; select bank0
  8117  1B34  00A2               	movwf	setMemory_Modify@command
  8118                           
  8119                           ;MCU_B1.c: 1071: Memory.Modify = command == 1 ? 1 : 0;
  8120  1B35  0822               	movf	setMemory_Modify@command,w
  8121  1B36  3A01               	xorlw	1
  8122  1B37  3000               	movlw	0
  8123  1B38  1903               	skipnz
  8124  1B39  3001               	movlw	1
  8125  1B3A  00A1               	movwf	??_setMemory_Modify
  8126  1B3B  0024               	movlb	4	; select bank4
  8127  1B3C  0844               	movf	(_Memory^(0+512)+36),w
  8128  1B3D  0020               	movlb	0	; select bank0
  8129  1B3E  0621               	xorwf	??_setMemory_Modify,w
  8130  1B3F  39FE               	andlw	-2
  8131  1B40  0621               	xorwf	??_setMemory_Modify,w
  8132  1B41  0024               	movlb	4	; select bank4
  8133  1B42  00C4               	movwf	(_Memory^(0+512)+36)
  8134                           
  8135                           ;MCU_B1.c: 1072: Memory.Time = 0;
  8136  1B43  01C2               	clrf	(_Memory^(0+512)+34)
  8137  1B44  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8138  1B45  0008               	return
  8139  1B46                     __end_of_setMemory_Modify:	
  8140                           
  8141                           	psect	text32
  8142  1CDD                     __ptext32:	
  8143 ;; *************** function _setDimmerLights_DimmingRun *****************
  8144 ;; Defined at:
  8145 ;;		line 1012 in file "../src/Dimmer_B1.c"
  8146 ;; Parameters:    Size  Location     Type
  8147 ;;  lights          1    wreg     unsigned char 
  8148 ;;  command         1    3[BANK0 ] unsigned char 
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;  lights          1    5[BANK0 ] unsigned char 
  8151 ;; Return value:  Size  Location     Type
  8152 ;;		None               void
  8153 ;; Registers used:
  8154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8160 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;Total ram usage:        3 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:    6
  8167 ;; This function calls:
  8168 ;;		_DimmerLights_SelectPointer
  8169 ;; This function is called by:
  8170 ;;		_setRFSW_AdjControl
  8171 ;; This function uses a non-reentrant model
  8172 ;;
  8173                           
  8174                           
  8175                           ;psect for function _setDimmerLights_DimmingRun
  8176  1CDD                     _setDimmerLights_DimmingRun:	
  8177                           
  8178                           ;incstack = 0
  8179                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8180                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8181  1CDD  0020               	movlb	0	; select bank0
  8182  1CDE  00A5               	movwf	setDimmerLights_DimmingRun@lights
  8183                           
  8184                           ;Dimmer_B1.c: 1013: DimmerLights_SelectPointer(lights);
  8185  1CDF  0825               	movf	setDimmerLights_DimmingRun@lights,w
  8186  1CE0  319C  2400         	fcall	_DimmerLights_SelectPointer
  8187                           
  8188                           ;Dimmer_B1.c: 1014: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8189  1CE2  0020               	movlb	0	; select bank0
  8190  1CE3  0823               	movf	setDimmerLights_DimmingRun@command,w
  8191  1CE4  3A01               	xorlw	1
  8192  1CE5  3000               	movlw	0
  8193  1CE6  1903               	skipnz
  8194  1CE7  3001               	movlw	1
  8195  1CE8  00A4               	movwf	??_setDimmerLights_DimmingRun
  8196  1CE9  0021               	movlb	1	; select bank1
  8197  1CEA  0A4F               	incf	_DimmerLights^(0+128),w
  8198  1CEB  0086               	movwf	6
  8199  1CEC  3001               	movlw	1	; select bank2/3
  8200  1CED  0087               	movwf	7
  8201  1CEE  0020               	movlb	0	; select bank0
  8202  1CEF  0EA4               	swapf	??_setDimmerLights_DimmingRun,f
  8203  1CF0  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8204  1CF1  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8205  1CF2  0801               	movf	1,w
  8206  1CF3  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8207  1CF4  39BF               	andlw	-65
  8208  1CF5  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8209  1CF6  0081               	movwf	1
  8210  1CF7  0008               	return
  8211  1CF8                     __end_of_setDimmerLights_DimmingRun:	
  8212                           
  8213                           	psect	text33
  8214  1A90                     __ptext33:	
  8215 ;; *************** function _getRF_KeyStatus *****************
  8216 ;; Defined at:
  8217 ;;		line 166 in file "../src/RF_Control_B1.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;		None
  8220 ;; Auto vars:     Size  Location     Type
  8221 ;;  key             1    2[BANK0 ] unsigned char 
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  1    wreg      unsigned char 
  8224 ;; Registers used:
  8225 ;;		wreg, status,2
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;Total ram usage:        3 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; Hardware stack levels required when called:    5
  8238 ;; This function calls:
  8239 ;;		Nothing
  8240 ;; This function is called by:
  8241 ;;		_setRF_Main
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           
  8246                           ;psect for function _getRF_KeyStatus
  8247  1A90                     _getRF_KeyStatus:	
  8248                           
  8249                           ;RF_Control_B1.c: 167: char key = 0;
  8250                           
  8251                           ;incstack = 0
  8252                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8253  1A90  0020               	movlb	0	; select bank0
  8254  1A91  01A2               	clrf	getRF_KeyStatus@key
  8255                           
  8256                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8257  1A92  01A3               	clrf	_getRF_KeyStatus$5063
  8258  1A93  0AA3               	incf	_getRF_KeyStatus$5063,f
  8259  1A94  1F0C               	btfss	12,6	;volatile
  8260  1A95  1A0C               	btfsc	12,4	;volatile
  8261  1A96  2A9B               	goto	l7593
  8262  1A97  1C0C               	btfss	12,0	;volatile
  8263  1A98  188D               	btfsc	13,1	;volatile
  8264  1A99  2A9B               	goto	l7593
  8265  1A9A  01A3               	clrf	_getRF_KeyStatus$5063
  8266  1A9B                     l7593:	
  8267  1A9B  0823               	movf	_getRF_KeyStatus$5063,w
  8268  1A9C  00A1               	movwf	??_getRF_KeyStatus
  8269  1A9D  0821               	movf	??_getRF_KeyStatus,w
  8270  1A9E  00A2               	movwf	getRF_KeyStatus@key
  8271                           
  8272                           ;RF_Control_B1.c: 179: return key;
  8273  1A9F  0822               	movf	getRF_KeyStatus@key,w
  8274  1AA0  0008               	return
  8275  1AA1                     __end_of_getRF_KeyStatus:	
  8276                           
  8277                           	psect	text34
  8278  1A7F                     __ptext34:	
  8279 ;; *************** function _getBuz_GO *****************
  8280 ;; Defined at:
  8281 ;;		line 82 in file "../src/Buzzer_B1.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;		None
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  i               2    5[BANK0 ] int 
  8286 ;; Return value:  Size  Location     Type
  8287 ;;                  2    1[BANK0 ] int 
  8288 ;; Registers used:
  8289 ;;		wreg, status,2, status,0
  8290 ;; Tracked objects:
  8291 ;;		On entry : 0/0
  8292 ;;		On exit  : 0/0
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8295 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;Total ram usage:        6 bytes
  8300 ;; Hardware stack levels used:    1
  8301 ;; Hardware stack levels required when called:    5
  8302 ;; This function calls:
  8303 ;;		Nothing
  8304 ;; This function is called by:
  8305 ;;		_setRF_Main
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           
  8310                           ;psect for function _getBuz_GO
  8311  1A7F                     _getBuz_GO:	
  8312                           
  8313                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8314                           
  8315                           ;incstack = 0
  8316                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8317  1A7F  0022               	movlb	2	; select bank2
  8318  1A80  0C2D               	rrf	_Buz1^(0+256),w
  8319  1A81  3901               	andlw	1
  8320  1A82  0020               	movlb	0	; select bank0
  8321  1A83  00A3               	movwf	??_getBuz_GO
  8322  1A84  01A4               	clrf	??_getBuz_GO+1
  8323  1A85  0823               	movf	??_getBuz_GO,w
  8324  1A86  00A5               	movwf	getBuz_GO@i
  8325  1A87  0824               	movf	??_getBuz_GO+1,w
  8326  1A88  00A6               	movwf	getBuz_GO@i+1
  8327                           
  8328                           ;Buzzer_B1.c: 84: return i;
  8329  1A89  0826               	movf	getBuz_GO@i+1,w
  8330  1A8A  01A2               	clrf	?_getBuz_GO+1
  8331  1A8B  07A2               	addwf	?_getBuz_GO+1,f
  8332  1A8C  0825               	movf	getBuz_GO@i,w
  8333  1A8D  01A1               	clrf	?_getBuz_GO
  8334  1A8E  07A1               	addwf	?_getBuz_GO,f
  8335  1A8F  0008               	return
  8336  1A90                     __end_of_getBuz_GO:	
  8337                           
  8338                           	psect	text35
  8339  07F0                     __ptext35:	
  8340 ;; *************** function _RF_RxDisable *****************
  8341 ;; Defined at:
  8342 ;;		line 154 in file "../src/RF_Control_B1.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;		None
  8345 ;; Auto vars:     Size  Location     Type
  8346 ;;		None
  8347 ;; Return value:  Size  Location     Type
  8348 ;;		None               void
  8349 ;; Registers used:
  8350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8360 ;;Total ram usage:        0 bytes
  8361 ;; Hardware stack levels used:    1
  8362 ;; Hardware stack levels required when called:    7
  8363 ;; This function calls:
  8364 ;;		_CC2500_WriteCommand
  8365 ;; This function is called by:
  8366 ;;		_setRF_Main
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           
  8371                           ;psect for function _RF_RxDisable
  8372  07F0                     _RF_RxDisable:	
  8373                           
  8374                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8375                           
  8376                           ;incstack = 0
  8377                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8378  07F0  0021               	movlb	1	; select bank1
  8379  07F1  18A0               	btfsc	_RF1^(0+128),1
  8380  07F2  2FF5               	goto	l2160
  8381  07F3  1DA0               	btfss	_RF1^(0+128),3
  8382  07F4  0008               	return
  8383  07F5                     l2160:	
  8384                           
  8385                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8386  07F5  11A0               	bcf	_RF1^(0+128),3
  8387                           
  8388                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8389  07F6  10A0               	bcf	_RF1^(0+128),1
  8390                           
  8391                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8392  07F7  3036               	movlw	54
  8393  07F8  319C  24A8  3187   	fcall	_CC2500_WriteCommand
  8394                           
  8395                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8396  07FB  303A               	movlw	58
  8397  07FC  319C  24A8         	fcall	_CC2500_WriteCommand
  8398  07FE  0008               	return
  8399  07FF                     __end_of_RF_RxDisable:	
  8400                           
  8401                           	psect	text36
  8402  08E8                     __ptext36:	
  8403 ;; *************** function _CC2500_TxData *****************
  8404 ;; Defined at:
  8405 ;;		line 32 in file "../src/CC2500_B1.c"
  8406 ;; Parameters:    Size  Location     Type
  8407 ;;		None
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;  loop_e          1    6[BANK0 ] unsigned char 
  8410 ;; Return value:  Size  Location     Type
  8411 ;;		None               void
  8412 ;; Registers used:
  8413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8414 ;; Tracked objects:
  8415 ;;		On entry : 0/0
  8416 ;;		On exit  : 0/0
  8417 ;;		Unchanged: 0/0
  8418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8423 ;;Total ram usage:        2 bytes
  8424 ;; Hardware stack levels used:    1
  8425 ;; Hardware stack levels required when called:    7
  8426 ;; This function calls:
  8427 ;;		_CC2500_WriteByte
  8428 ;;		_CC2500_WriteCommand
  8429 ;;		_RF_Timeout_Counter
  8430 ;;		_setRF_TimeoutCleared
  8431 ;; This function is called by:
  8432 ;;		_setRF_Main
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           
  8437                           ;psect for function _CC2500_TxData
  8438  08E8                     _CC2500_TxData:	
  8439                           
  8440                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8441                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8442                           
  8443                           ;incstack = 0
  8444                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8445  08E8  3036               	movlw	54
  8446  08E9  319C  24A8  3188   	fcall	_CC2500_WriteCommand
  8447                           
  8448                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8449  08EC  303B               	movlw	59
  8450  08ED  319C  24A8  3188   	fcall	_CC2500_WriteCommand
  8451                           
  8452                           ;CC2500_B1.c: 38: RC4 = 0;
  8453  08F0  0020               	movlb	0	; select bank0
  8454  08F1  120E               	bcf	14,4	;volatile
  8455                           
  8456                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8457  08F2  307F               	movlw	127
  8458  08F3  00A5               	movwf	??_CC2500_TxData
  8459  08F4  0825               	movf	??_CC2500_TxData,w
  8460  08F5  0021               	movlb	1	; select bank1
  8461  08F6  00D4               	movwf	_SPI0Buffer^(0+128)
  8462                           
  8463                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8464  08F7  28FB               	goto	l7275
  8465  08F8                     l7273:	
  8466                           
  8467                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8468  08F8  319B  2394  3188   	fcall	_RF_Timeout_Counter
  8469  08FB                     l7275:	
  8470  08FB  0020               	movlb	0	; select bank0
  8471  08FC  1D0E               	btfss	14,2	;volatile
  8472  08FD  2901               	goto	l7279
  8473  08FE  0021               	movlb	1	; select bank1
  8474  08FF  1F21               	btfss	(_RF1^(0+128)+1),6
  8475  0900  28F8               	goto	l7273
  8476  0901                     l7279:	
  8477                           
  8478                           ;CC2500_B1.c: 42: };
  8479                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8480  0901  3199  2141  3188   	fcall	_setRF_TimeoutCleared
  8481                           
  8482                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8483  0904  319C  2475  3188   	fcall	_CC2500_WriteByte
  8484                           
  8485                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8486  0907  0021               	movlb	1	; select bank1
  8487  0908  0857               	movf	_Tx_Length^(0+128),w
  8488  0909  0020               	movlb	0	; select bank0
  8489  090A  00A5               	movwf	??_CC2500_TxData
  8490  090B  0825               	movf	??_CC2500_TxData,w
  8491  090C  0021               	movlb	1	; select bank1
  8492  090D  00D4               	movwf	_SPI0Buffer^(0+128)
  8493                           
  8494                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8495  090E  319C  2475  3188   	fcall	_CC2500_WriteByte
  8496                           
  8497                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8498  0911  0020               	movlb	0	; select bank0
  8499  0912  01A6               	clrf	CC2500_TxData@loop_e
  8500  0913                     l7293:	
  8501  0913  0021               	movlb	1	; select bank1
  8502  0914  0857               	movf	_Tx_Length^(0+128),w
  8503  0915  0020               	movlb	0	; select bank0
  8504  0916  0226               	subwf	CC2500_TxData@loop_e,w
  8505  0917  1803               	btfsc	3,0
  8506  0918  292C               	goto	l259
  8507                           
  8508                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8509  0919  0826               	movf	CC2500_TxData@loop_e,w
  8510  091A  3EA0               	addlw	_RF_Data& (0+255)
  8511  091B  0086               	movwf	6
  8512  091C  3001               	movlw	1	; select bank3/4
  8513  091D  0087               	movwf	7
  8514  091E  0801               	movf	1,w
  8515  091F  00A5               	movwf	??_CC2500_TxData
  8516  0920  0825               	movf	??_CC2500_TxData,w
  8517  0921  0021               	movlb	1	; select bank1
  8518  0922  00D4               	movwf	_SPI0Buffer^(0+128)
  8519                           
  8520                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8521  0923  319C  2475  3188   	fcall	_CC2500_WriteByte
  8522  0926  3001               	movlw	1
  8523  0927  0020               	movlb	0	; select bank0
  8524  0928  00A5               	movwf	??_CC2500_TxData
  8525  0929  0825               	movf	??_CC2500_TxData,w
  8526  092A  07A6               	addwf	CC2500_TxData@loop_e,f
  8527  092B  2913               	goto	l7293
  8528  092C                     l259:	
  8529                           
  8530                           ;CC2500_B1.c: 51: }
  8531                           ;CC2500_B1.c: 52: RC4 = 1;
  8532  092C  160E               	bsf	14,4	;volatile
  8533                           
  8534                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8535  092D  3035               	movlw	53
  8536  092E  319C  24A8  3188   	fcall	_CC2500_WriteCommand
  8537                           
  8538                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8539  0931  2935               	goto	l7299
  8540  0932                     l7297:	
  8541                           
  8542                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8543  0932  319B  2394  3188   	fcall	_RF_Timeout_Counter
  8544  0935                     l7299:	
  8545  0935  0020               	movlb	0	; select bank0
  8546  0936  180D               	btfsc	13,0	;volatile
  8547  0937  293B               	goto	l7303
  8548  0938  0021               	movlb	1	; select bank1
  8549  0939  1F21               	btfss	(_RF1^(0+128)+1),6
  8550  093A  2932               	goto	l7297
  8551  093B                     l7303:	
  8552                           
  8553                           ;CC2500_B1.c: 56: };
  8554                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8555  093B  3199  2141  3188   	fcall	_setRF_TimeoutCleared
  8556                           
  8557                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8558  093E  2942               	goto	l7307
  8559  093F                     l7305:	
  8560                           
  8561                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8562  093F  319B  2394  3188   	fcall	_RF_Timeout_Counter
  8563  0942                     l7307:	
  8564  0942  0020               	movlb	0	; select bank0
  8565  0943  1C0D               	btfss	13,0	;volatile
  8566  0944  2948               	goto	l7311
  8567  0945  0021               	movlb	1	; select bank1
  8568  0946  1F21               	btfss	(_RF1^(0+128)+1),6
  8569  0947  293F               	goto	l7305
  8570  0948                     l7311:	
  8571                           
  8572                           ;CC2500_B1.c: 61: };
  8573                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8574  0948  3199  2141  3188   	fcall	_setRF_TimeoutCleared
  8575                           
  8576                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8577  094B  3036               	movlw	54
  8578  094C  319C  24A8  3188   	fcall	_CC2500_WriteCommand
  8579                           
  8580                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8581  094F  303B               	movlw	59
  8582  0950  319C  24A8         	fcall	_CC2500_WriteCommand
  8583                           
  8584                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8585  0952  0020               	movlb	0	; select bank0
  8586  0953  14EE               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8587  0954  0008               	return
  8588  0955                     __end_of_CC2500_TxData:	
  8589                           
  8590                           	psect	text37
  8591  0955                     __ptext37:	
  8592 ;; *************** function _CC2500_RxData *****************
  8593 ;; Defined at:
  8594 ;;		line 73 in file "../src/CC2500_B1.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;		None
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  loop_f          1    6[BANK0 ] unsigned char 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;		None               void
  8601 ;; Registers used:
  8602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;Total ram usage:        2 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    7
  8615 ;; This function calls:
  8616 ;;		_CC2500_ReadByte
  8617 ;;		_CC2500_ReadStatus
  8618 ;;		_CC2500_WriteByte
  8619 ;;		_CC2500_WriteCommand
  8620 ;;		_RF_Timeout_Counter
  8621 ;;		_setRF_TimeoutCleared
  8622 ;; This function is called by:
  8623 ;;		_setRF_Main
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           
  8628                           ;psect for function _CC2500_RxData
  8629  0955                     _CC2500_RxData:	
  8630                           
  8631                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8632                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8636  0955  0020               	movlb	0	; select bank0
  8637  0956  180D               	btfsc	13,0	;volatile
  8638  0957  0008               	return
  8639                           
  8640                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8641  0958  303B               	movlw	59
  8642  0959  319E  26D3  3189   	fcall	_CC2500_ReadStatus
  8643                           
  8644                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8645  095C  0021               	movlb	1	; select bank1
  8646  095D  085A               	movf	_s_data^(0+128),w
  8647  095E  1903               	btfsc	3,2
  8648  095F  0008               	return
  8649                           
  8650                           ;CC2500_B1.c: 90: RC4 = 0;
  8651  0960  0020               	movlb	0	; select bank0
  8652  0961  120E               	bcf	14,4	;volatile
  8653                           
  8654                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8655  0962  30FF               	movlw	255
  8656  0963  00A5               	movwf	??_CC2500_RxData
  8657  0964  0825               	movf	??_CC2500_RxData,w
  8658  0965  0021               	movlb	1	; select bank1
  8659  0966  00D4               	movwf	_SPI0Buffer^(0+128)
  8660                           
  8661                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8662  0967  296B               	goto	l7331
  8663  0968                     l7329:	
  8664                           
  8665                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8666  0968  319B  2394  3189   	fcall	_RF_Timeout_Counter
  8667  096B                     l7331:	
  8668  096B  0020               	movlb	0	; select bank0
  8669  096C  1D0E               	btfss	14,2	;volatile
  8670  096D  2971               	goto	l7335
  8671  096E  0021               	movlb	1	; select bank1
  8672  096F  1F21               	btfss	(_RF1^(0+128)+1),6
  8673  0970  2968               	goto	l7329
  8674  0971                     l7335:	
  8675                           
  8676                           ;CC2500_B1.c: 95: };
  8677                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8678  0971  3199  2141  3189   	fcall	_setRF_TimeoutCleared
  8679                           
  8680                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8681  0974  319C  2475  3189   	fcall	_CC2500_WriteByte
  8682                           
  8683                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8684  0977  319D  2531  3189   	fcall	_CC2500_ReadByte
  8685                           
  8686                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8687  097A  0021               	movlb	1	; select bank1
  8688  097B  0854               	movf	_SPI0Buffer^(0+128),w
  8689  097C  0020               	movlb	0	; select bank0
  8690  097D  00A5               	movwf	??_CC2500_RxData
  8691  097E  0825               	movf	??_CC2500_RxData,w
  8692  097F  0021               	movlb	1	; select bank1
  8693  0980  00D3               	movwf	_Rx_Length^(0+128)
  8694                           
  8695                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8696  0981  0020               	movlb	0	; select bank0
  8697  0982  01A6               	clrf	CC2500_RxData@loop_f
  8698  0983                     l7351:	
  8699  0983  0021               	movlb	1	; select bank1
  8700  0984  0853               	movf	_Rx_Length^(0+128),w
  8701  0985  0020               	movlb	0	; select bank0
  8702  0986  0226               	subwf	CC2500_RxData@loop_f,w
  8703  0987  1803               	btfsc	3,0
  8704  0988  299C               	goto	l7353
  8705                           
  8706                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8707  0989  319D  2531  3189   	fcall	_CC2500_ReadByte
  8708                           
  8709                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8710  098C  0021               	movlb	1	; select bank1
  8711  098D  0854               	movf	_SPI0Buffer^(0+128),w
  8712  098E  0020               	movlb	0	; select bank0
  8713  098F  00A5               	movwf	??_CC2500_RxData
  8714  0990  0826               	movf	CC2500_RxData@loop_f,w
  8715  0991  3EA0               	addlw	_RF_Data& (0+255)
  8716  0992  0086               	movwf	6
  8717  0993  3001               	movlw	1	; select bank3/4
  8718  0994  0087               	movwf	7
  8719  0995  0825               	movf	??_CC2500_RxData,w
  8720  0996  0081               	movwf	1
  8721  0997  3001               	movlw	1
  8722  0998  00A5               	movwf	??_CC2500_RxData
  8723  0999  0825               	movf	??_CC2500_RxData,w
  8724  099A  07A6               	addwf	CC2500_RxData@loop_f,f
  8725  099B  2983               	goto	l7351
  8726  099C                     l7353:	
  8727                           
  8728                           ;CC2500_B1.c: 104: }
  8729                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8730  099C  319D  2531  3189   	fcall	_CC2500_ReadByte
  8731                           
  8732                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8733  099F  0021               	movlb	1	; select bank1
  8734  09A0  0854               	movf	_SPI0Buffer^(0+128),w
  8735  09A1  0020               	movlb	0	; select bank0
  8736  09A2  00A5               	movwf	??_CC2500_RxData
  8737  09A3  0825               	movf	??_CC2500_RxData,w
  8738  09A4  0021               	movlb	1	; select bank1
  8739  09A5  00D2               	movwf	_RSSI^(0+128)
  8740                           
  8741                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8742  09A6  319D  2531  3189   	fcall	_CC2500_ReadByte
  8743                           
  8744                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8745  09A9  0021               	movlb	1	; select bank1
  8746  09AA  0854               	movf	_SPI0Buffer^(0+128),w
  8747  09AB  0020               	movlb	0	; select bank0
  8748  09AC  00A5               	movwf	??_CC2500_RxData
  8749  09AD  0825               	movf	??_CC2500_RxData,w
  8750  09AE  0021               	movlb	1	; select bank1
  8751  09AF  00CB               	movwf	_CRC^(0+128)
  8752                           
  8753                           ;CC2500_B1.c: 109: RC4 = 1;
  8754  09B0  0020               	movlb	0	; select bank0
  8755  09B1  160E               	bsf	14,4	;volatile
  8756                           
  8757                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8758  09B2  0021               	movlb	1	; select bank1
  8759  09B3  1FCB               	btfss	_CRC^(0+128),7
  8760  09B4  29B7               	goto	l283
  8761                           
  8762                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8763  09B5  0020               	movlb	0	; select bank0
  8764  09B6  146E               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8765  09B7                     l283:	
  8766                           
  8767                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8768  09B7  0021               	movlb	1	; select bank1
  8769  09B8  11A0               	bcf	_RF1^(0+128),3
  8770                           
  8771                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8772  09B9  14A0               	bsf	_RF1^(0+128),1
  8773                           
  8774                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8775  09BA  3036               	movlw	54
  8776  09BB  319C  24A8  3189   	fcall	_CC2500_WriteCommand
  8777                           
  8778                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8779  09BE  303A               	movlw	58
  8780  09BF  319C  24A8         	fcall	_CC2500_WriteCommand
  8781  09C1  0021               	movlb	1	; select bank1
  8782  09C2  0008               	return
  8783  09C3                     __end_of_CC2500_RxData:	
  8784                           
  8785                           	psect	text38
  8786  1ED3                     __ptext38:	
  8787 ;; *************** function _CC2500_ReadStatus *****************
  8788 ;; Defined at:
  8789 ;;		line 308 in file "../src/CC2500_B1.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;  status_addr     1    wreg     unsigned char 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  status_addr     1    4[BANK0 ] unsigned char 
  8794 ;; Return value:  Size  Location     Type
  8795 ;;		None               void
  8796 ;; Registers used:
  8797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;Total ram usage:        2 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    6
  8810 ;; This function calls:
  8811 ;;		_CC2500_ReadByte
  8812 ;;		_CC2500_WriteByte
  8813 ;;		_RF_Timeout_Counter
  8814 ;;		_setRF_TimeoutCleared
  8815 ;; This function is called by:
  8816 ;;		_CC2500_RxData
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           
  8821                           ;psect for function _CC2500_ReadStatus
  8822  1ED3                     _CC2500_ReadStatus:	
  8823                           
  8824                           ;incstack = 0
  8825                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8826                           ;CC2500_ReadStatus@status_addr stored from wreg
  8827  1ED3  0020               	movlb	0	; select bank0
  8828  1ED4  00A4               	movwf	CC2500_ReadStatus@status_addr
  8829                           
  8830                           ;CC2500_B1.c: 309: RC4 = 0;
  8831  1ED5  120E               	bcf	14,4	;volatile
  8832                           
  8833                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8834  1ED6  0824               	movf	CC2500_ReadStatus@status_addr,w
  8835  1ED7  3EC0               	addlw	192
  8836  1ED8  00A3               	movwf	??_CC2500_ReadStatus
  8837  1ED9  0823               	movf	??_CC2500_ReadStatus,w
  8838  1EDA  0021               	movlb	1	; select bank1
  8839  1EDB  00D4               	movwf	_SPI0Buffer^(0+128)
  8840                           
  8841                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8842  1EDC  2EE0               	goto	l6945
  8843  1EDD                     l6943:	
  8844                           
  8845                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8846  1EDD  319B  2394  319E   	fcall	_RF_Timeout_Counter
  8847  1EE0                     l6945:	
  8848  1EE0  0020               	movlb	0	; select bank0
  8849  1EE1  1D0E               	btfss	14,2	;volatile
  8850  1EE2  2EE6               	goto	l6949
  8851  1EE3  0021               	movlb	1	; select bank1
  8852  1EE4  1F21               	btfss	(_RF1^(0+128)+1),6
  8853  1EE5  2EDD               	goto	l6943
  8854  1EE6                     l6949:	
  8855                           
  8856                           ;CC2500_B1.c: 314: };
  8857                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8858  1EE6  3199  2141  319E   	fcall	_setRF_TimeoutCleared
  8859                           
  8860                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8861  1EE9  319C  2475  319E   	fcall	_CC2500_WriteByte
  8862                           
  8863                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8864  1EEC  319D  2531         	fcall	_CC2500_ReadByte
  8865                           
  8866                           ;CC2500_B1.c: 319: RC4 = 1;
  8867  1EEE  0020               	movlb	0	; select bank0
  8868  1EEF  160E               	bsf	14,4	;volatile
  8869                           
  8870                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8871  1EF0  0021               	movlb	1	; select bank1
  8872  1EF1  0854               	movf	_SPI0Buffer^(0+128),w
  8873  1EF2  0020               	movlb	0	; select bank0
  8874  1EF3  00A3               	movwf	??_CC2500_ReadStatus
  8875  1EF4  0823               	movf	??_CC2500_ReadStatus,w
  8876  1EF5  0021               	movlb	1	; select bank1
  8877  1EF6  00DA               	movwf	_s_data^(0+128)
  8878  1EF7  0008               	return
  8879  1EF8                     __end_of_CC2500_ReadStatus:	
  8880                           
  8881                           	psect	text39
  8882  1D31                     __ptext39:	
  8883 ;; *************** function _CC2500_ReadByte *****************
  8884 ;; Defined at:
  8885 ;;		line 242 in file "../src/CC2500_B1.c"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;		None
  8888 ;; Auto vars:     Size  Location     Type
  8889 ;;  loop_b          1    2[BANK0 ] unsigned char 
  8890 ;; Return value:  Size  Location     Type
  8891 ;;		None               void
  8892 ;; Registers used:
  8893 ;;		wreg, status,2, status,0
  8894 ;; Tracked objects:
  8895 ;;		On entry : 0/0
  8896 ;;		On exit  : 0/0
  8897 ;;		Unchanged: 0/0
  8898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;Total ram usage:        2 bytes
  8904 ;; Hardware stack levels used:    1
  8905 ;; Hardware stack levels required when called:    5
  8906 ;; This function calls:
  8907 ;;		Nothing
  8908 ;; This function is called by:
  8909 ;;		_CC2500_RxData
  8910 ;;		_CC2500_ReadStatus
  8911 ;;		_CC2500_ReadREG
  8912 ;; This function uses a non-reentrant model
  8913 ;;
  8914                           
  8915                           
  8916                           ;psect for function _CC2500_ReadByte
  8917  1D31                     _CC2500_ReadByte:	
  8918                           
  8919                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8920                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8921                           
  8922                           ;incstack = 0
  8923                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8924  1D31  0020               	movlb	0	; select bank0
  8925  1D32  01A2               	clrf	CC2500_ReadByte@loop_b
  8926  1D33                     L3:	
  8927  1D33  3008               	movlw	8
  8928  1D34  0222               	subwf	CC2500_ReadByte@loop_b,w
  8929  1D35  1803               	btfsc	3,0
  8930  1D36  0008               	return
  8931                           
  8932                           ;CC2500_B1.c: 245: RC1 = 1;
  8933  1D37  148E               	bsf	14,1	;volatile
  8934                           
  8935                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8936  1D38  1003               	clrc
  8937  1D39  0021               	movlb	1	; select bank1
  8938  1D3A  0DD4               	rlf	_SPI0Buffer^(0+128),f
  8939                           
  8940                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8941  1D3B  0020               	movlb	0	; select bank0
  8942  1D3C  1D0E               	btfss	14,2	;volatile
  8943  1D3D  2D41               	goto	l6829
  8944                           
  8945                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8946  1D3E  0021               	movlb	1	; select bank1
  8947  1D3F  1454               	bsf	_SPI0Buffer^(0+128),0
  8948  1D40  2D47               	goto	l6831
  8949  1D41                     l6829:	
  8950                           
  8951                           ;CC2500_B1.c: 249: else
  8952                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8953  1D41  30FE               	movlw	254
  8954  1D42  0020               	movlb	0	; select bank0
  8955  1D43  00A1               	movwf	??_CC2500_ReadByte
  8956  1D44  0821               	movf	??_CC2500_ReadByte,w
  8957  1D45  0021               	movlb	1	; select bank1
  8958  1D46  05D4               	andwf	_SPI0Buffer^(0+128),f
  8959  1D47                     l6831:	
  8960                           
  8961                           ;CC2500_B1.c: 251: RC1 = 0;
  8962  1D47  0020               	movlb	0	; select bank0
  8963  1D48  108E               	bcf	14,1	;volatile
  8964  1D49  3001               	movlw	1
  8965  1D4A  00A1               	movwf	??_CC2500_ReadByte
  8966  1D4B  0821               	movf	??_CC2500_ReadByte,w
  8967  1D4C  07A2               	addwf	CC2500_ReadByte@loop_b,f
  8968  1D4D  2D33               	goto	L3
  8969  1D4E                     __end_of_CC2500_ReadByte:	
  8970                           
  8971                           	psect	text40
  8972  1BA9                     __ptext40:	
  8973 ;; *************** function _CC2500_PowerOnInitial *****************
  8974 ;; Defined at:
  8975 ;;		line 126 in file "../src/CC2500_B1.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;		None
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;		None
  8980 ;; Return value:  Size  Location     Type
  8981 ;;		None               void
  8982 ;; Registers used:
  8983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;Total ram usage:        0 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    8
  8996 ;; This function calls:
  8997 ;;		_CC2500_ClearRXFIFO
  8998 ;;		_CC2500_ClearTXFIFO
  8999 ;;		_CC2500_FrequencyCabr
  9000 ;;		_CC2500_InitPATable
  9001 ;;		_CC2500_InitSetREG
  9002 ;;		_CC2500_PowerRST
  9003 ;;		_CC2500_SIDLEMode
  9004 ;; This function is called by:
  9005 ;;		_setRF_Main
  9006 ;;		_main
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           
  9011                           ;psect for function _CC2500_PowerOnInitial
  9012  1BA9                     _CC2500_PowerOnInitial:	
  9013                           
  9014                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9015                           
  9016                           ;incstack = 0
  9017                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9018  1BA9  3193  2320  319B   	fcall	_CC2500_PowerRST
  9019                           
  9020                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9021  1BAC  319F  271E  319B   	fcall	_CC2500_InitSetREG
  9022                           
  9023                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9024  1BAF  319D  256C  319B   	fcall	_CC2500_InitPATable
  9025                           
  9026                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9027  1BB2  3199  2149  319B   	fcall	_CC2500_ClearTXFIFO
  9028                           
  9029                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9030  1BB5  3199  2145  319B   	fcall	_CC2500_ClearRXFIFO
  9031                           
  9032                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9033  1BB8  319A  2244  319B   	fcall	_CC2500_FrequencyCabr
  9034                           
  9035                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9036  1BBB  3199  214D         	fcall	_CC2500_SIDLEMode
  9037  1BBD  0008               	return
  9038  1BBE                     __end_of_CC2500_PowerOnInitial:	
  9039                           
  9040                           	psect	text41
  9041  194D                     __ptext41:	
  9042 ;; *************** function _CC2500_SIDLEMode *****************
  9043 ;; Defined at:
  9044 ;;		line 216 in file "../src/CC2500_B1.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;		None
  9049 ;; Return value:  Size  Location     Type
  9050 ;;		None               void
  9051 ;; Registers used:
  9052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;Total ram usage:        0 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    7
  9065 ;; This function calls:
  9066 ;;		_CC2500_WriteCommand
  9067 ;; This function is called by:
  9068 ;;		_CC2500_PowerOnInitial
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           
  9073                           ;psect for function _CC2500_SIDLEMode
  9074  194D                     _CC2500_SIDLEMode:	
  9075                           
  9076                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9080  194D  3036               	movlw	54
  9081  194E  319C  24A8         	fcall	_CC2500_WriteCommand
  9082  1950  0008               	return
  9083  1951                     __end_of_CC2500_SIDLEMode:	
  9084                           
  9085                           	psect	text42
  9086  1320                     __ptext42:	
  9087 ;; *************** function _CC2500_PowerRST *****************
  9088 ;; Defined at:
  9089 ;;		line 139 in file "../src/CC2500_B1.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;		None
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;		None
  9094 ;; Return value:  Size  Location     Type
  9095 ;;		None               void
  9096 ;; Registers used:
  9097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;Total ram usage:        1 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    6
  9110 ;; This function calls:
  9111 ;;		_CC2500_WriteByte
  9112 ;;		_DelayTime_1us
  9113 ;;		_RF_Timeout_Counter
  9114 ;;		_setRF_TimeoutCleared
  9115 ;; This function is called by:
  9116 ;;		_CC2500_PowerOnInitial
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           
  9121                           ;psect for function _CC2500_PowerRST
  9122  1320                     _CC2500_PowerRST:	
  9123                           
  9124                           ;CC2500_B1.c: 140: RC1 = 0;
  9125                           
  9126                           ;incstack = 0
  9127                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9128  1320  0020               	movlb	0	; select bank0
  9129  1321  108E               	bcf	14,1	;volatile
  9130                           
  9131                           ;CC2500_B1.c: 141: RC0 = 0;
  9132  1322  100E               	bcf	14,0	;volatile
  9133                           
  9134                           ;CC2500_B1.c: 142: RC4 = 1;
  9135  1323  160E               	bsf	14,4	;volatile
  9136                           
  9137                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9138  1324  300A               	movlw	10
  9139  1325  00A1               	movwf	DelayTime_1us@count
  9140  1326  3000               	movlw	0
  9141  1327  00A2               	movwf	DelayTime_1us@count+1
  9142  1328  319E  26F8  3193   	fcall	_DelayTime_1us
  9143                           
  9144                           ;CC2500_B1.c: 144: RC4 = 0;
  9145  132B  0020               	movlb	0	; select bank0
  9146  132C  120E               	bcf	14,4	;volatile
  9147                           
  9148                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9149  132D  300A               	movlw	10
  9150  132E  00A1               	movwf	DelayTime_1us@count
  9151  132F  3000               	movlw	0
  9152  1330  00A2               	movwf	DelayTime_1us@count+1
  9153  1331  319E  26F8  3193   	fcall	_DelayTime_1us
  9154                           
  9155                           ;CC2500_B1.c: 146: RC4 = 1;
  9156  1334  0020               	movlb	0	; select bank0
  9157  1335  160E               	bsf	14,4	;volatile
  9158                           
  9159                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9160  1336  3028               	movlw	40
  9161  1337  00A1               	movwf	DelayTime_1us@count
  9162  1338  3000               	movlw	0
  9163  1339  00A2               	movwf	DelayTime_1us@count+1
  9164  133A  319E  26F8  3193   	fcall	_DelayTime_1us
  9165                           
  9166                           ;CC2500_B1.c: 148: RC4 = 0;
  9167  133D  0020               	movlb	0	; select bank0
  9168  133E  120E               	bcf	14,4	;volatile
  9169                           
  9170                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9171  133F  3030               	movlw	48
  9172  1340  00A7               	movwf	??_CC2500_PowerRST
  9173  1341  0827               	movf	??_CC2500_PowerRST,w
  9174  1342  0021               	movlb	1	; select bank1
  9175  1343  00D4               	movwf	_SPI0Buffer^(0+128)
  9176                           
  9177                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9178  1344  2B48               	goto	l6973
  9179  1345                     l6971:	
  9180                           
  9181                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9182  1345  319B  2394  3193   	fcall	_RF_Timeout_Counter
  9183  1348                     l6973:	
  9184  1348  0020               	movlb	0	; select bank0
  9185  1349  1D0E               	btfss	14,2	;volatile
  9186  134A  2B4E               	goto	l6977
  9187  134B  0021               	movlb	1	; select bank1
  9188  134C  1F21               	btfss	(_RF1^(0+128)+1),6
  9189  134D  2B45               	goto	l6971
  9190  134E                     l6977:	
  9191                           
  9192                           ;CC2500_B1.c: 152: };
  9193                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9194  134E  3199  2141  3193   	fcall	_setRF_TimeoutCleared
  9195                           
  9196                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9197  1351  319C  2475  3193   	fcall	_CC2500_WriteByte
  9198                           
  9199                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9200  1354  2B58               	goto	l6983
  9201  1355                     l6981:	
  9202                           
  9203                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9204  1355  319B  2394  3193   	fcall	_RF_Timeout_Counter
  9205  1358                     l6983:	
  9206  1358  0020               	movlb	0	; select bank0
  9207  1359  1D0E               	btfss	14,2	;volatile
  9208  135A  2B5E               	goto	l6987
  9209  135B  0021               	movlb	1	; select bank1
  9210  135C  1F21               	btfss	(_RF1^(0+128)+1),6
  9211  135D  2B55               	goto	l6981
  9212  135E                     l6987:	
  9213                           
  9214                           ;CC2500_B1.c: 157: };
  9215                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9216  135E  3199  2141         	fcall	_setRF_TimeoutCleared
  9217                           
  9218                           ;CC2500_B1.c: 159: RC0 = 0;
  9219  1360  0020               	movlb	0	; select bank0
  9220  1361  100E               	bcf	14,0	;volatile
  9221                           
  9222                           ;CC2500_B1.c: 160: RC4 = 1;
  9223  1362  160E               	bsf	14,4	;volatile
  9224  1363  0008               	return
  9225  1364                     __end_of_CC2500_PowerRST:	
  9226                           
  9227                           	psect	text43
  9228  1F1E                     __ptext43:	
  9229 ;; *************** function _CC2500_InitSetREG *****************
  9230 ;; Defined at:
  9231 ;;		line 166 in file "../src/CC2500_B1.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;		None
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;  loop_c          1    9[BANK0 ] unsigned char 
  9236 ;;  temp2           1    8[BANK0 ] unsigned char 
  9237 ;;  temp1           1    7[BANK0 ] unsigned char 
  9238 ;; Return value:  Size  Location     Type
  9239 ;;		None               void
  9240 ;; Registers used:
  9241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;Total ram usage:        4 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    7
  9254 ;; This function calls:
  9255 ;;		_CC2500_WriteREG
  9256 ;; This function is called by:
  9257 ;;		_CC2500_PowerOnInitial
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           
  9262                           ;psect for function _CC2500_InitSetREG
  9263  1F1E                     _CC2500_InitSetREG:	
  9264                           
  9265                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9266                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9267                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9268                           
  9269                           ;incstack = 0
  9270                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9271  1F1E  0020               	movlb	0	; select bank0
  9272  1F1F  01A9               	clrf	CC2500_InitSetREG@loop_c
  9273  1F20                     L4:	
  9274  1F20  302F               	movlw	47
  9275  1F21  0229               	subwf	CC2500_InitSetREG@loop_c,w
  9276  1F22  1803               	btfsc	3,0
  9277  1F23  0008               	return
  9278                           
  9279                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9280  1F24  0829               	movf	CC2500_InitSetREG@loop_c,w
  9281  1F25  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9282  1F26  0084               	movwf	4
  9283  1F27  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9284  1F28  1803               	skipnc
  9285  1F29  3E01               	addlw	1
  9286  1F2A  0085               	movwf	5
  9287  1F2B  0800               	movf	0,w	;code access
  9288  1F2C  00A6               	movwf	??_CC2500_InitSetREG
  9289  1F2D  0826               	movf	??_CC2500_InitSetREG,w
  9290  1F2E  00A7               	movwf	CC2500_InitSetREG@temp1
  9291                           
  9292                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9293  1F2F  0829               	movf	CC2500_InitSetREG@loop_c,w
  9294  1F30  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9295  1F31  0084               	movwf	4
  9296  1F32  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9297  1F33  1803               	skipnc
  9298  1F34  3E01               	addlw	1
  9299  1F35  0085               	movwf	5
  9300  1F36  0800               	movf	0,w	;code access
  9301  1F37  00A6               	movwf	??_CC2500_InitSetREG
  9302  1F38  0826               	movf	??_CC2500_InitSetREG,w
  9303  1F39  00A8               	movwf	CC2500_InitSetREG@temp2
  9304                           
  9305                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9306  1F3A  0828               	movf	CC2500_InitSetREG@temp2,w
  9307  1F3B  00A6               	movwf	??_CC2500_InitSetREG
  9308  1F3C  0826               	movf	??_CC2500_InitSetREG,w
  9309  1F3D  00A3               	movwf	CC2500_WriteREG@value
  9310  1F3E  0827               	movf	CC2500_InitSetREG@temp1,w
  9311  1F3F  319E  26B0  319F   	fcall	_CC2500_WriteREG
  9312  1F42  3001               	movlw	1
  9313  1F43  0020               	movlb	0	; select bank0
  9314  1F44  00A6               	movwf	??_CC2500_InitSetREG
  9315  1F45  0826               	movf	??_CC2500_InitSetREG,w
  9316  1F46  07A9               	addwf	CC2500_InitSetREG@loop_c,f
  9317  1F47  2F20               	goto	L4
  9318  1F48                     __end_of_CC2500_InitSetREG:	
  9319                           
  9320                           	psect	text44
  9321  1D6C                     __ptext44:	
  9322 ;; *************** function _CC2500_InitPATable *****************
  9323 ;; Defined at:
  9324 ;;		line 181 in file "../src/CC2500_B1.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;		None
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;  loop_d          1    8[BANK0 ] unsigned char 
  9329 ;;  temp            1    7[BANK0 ] unsigned char 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;		None               void
  9332 ;; Registers used:
  9333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        3 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    7
  9346 ;; This function calls:
  9347 ;;		_CC2500_WriteREG
  9348 ;; This function is called by:
  9349 ;;		_CC2500_PowerOnInitial
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _CC2500_InitPATable
  9355  1D6C                     _CC2500_InitPATable:	
  9356                           
  9357                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9358                           ;CC2500_B1.c: 183: unsigned char temp;
  9359                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9360                           
  9361                           ;incstack = 0
  9362                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9363  1D6C  0020               	movlb	0	; select bank0
  9364  1D6D  01A8               	clrf	CC2500_InitPATable@loop_d
  9365  1D6E                     L5:	
  9366  1D6E  3008               	movlw	8
  9367  1D6F  0228               	subwf	CC2500_InitPATable@loop_d,w
  9368  1D70  1803               	btfsc	3,0
  9369  1D71  0008               	return
  9370                           
  9371                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9372  1D72  0828               	movf	CC2500_InitPATable@loop_d,w
  9373  1D73  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9374  1D74  0084               	movwf	4
  9375  1D75  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9376  1D76  1803               	skipnc
  9377  1D77  3E01               	addlw	1
  9378  1D78  0085               	movwf	5
  9379  1D79  0800               	movf	0,w	;code access
  9380  1D7A  00A6               	movwf	??_CC2500_InitPATable
  9381  1D7B  0826               	movf	??_CC2500_InitPATable,w
  9382  1D7C  00A7               	movwf	CC2500_InitPATable@temp
  9383                           
  9384                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9385  1D7D  0827               	movf	CC2500_InitPATable@temp,w
  9386  1D7E  00A6               	movwf	??_CC2500_InitPATable
  9387  1D7F  0826               	movf	??_CC2500_InitPATable,w
  9388  1D80  00A3               	movwf	CC2500_WriteREG@value
  9389  1D81  303E               	movlw	62
  9390  1D82  319E  26B0  319D   	fcall	_CC2500_WriteREG
  9391  1D85  3001               	movlw	1
  9392  1D86  0020               	movlb	0	; select bank0
  9393  1D87  00A6               	movwf	??_CC2500_InitPATable
  9394  1D88  0826               	movf	??_CC2500_InitPATable,w
  9395  1D89  07A8               	addwf	CC2500_InitPATable@loop_d,f
  9396  1D8A  2D6E               	goto	L5
  9397  1D8B                     __end_of_CC2500_InitPATable:	
  9398                           
  9399                           	psect	text45
  9400  1EB0                     __ptext45:	
  9401 ;; *************** function _CC2500_WriteREG *****************
  9402 ;; Defined at:
  9403 ;;		line 258 in file "../src/CC2500_B1.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;  w_addr          1    wreg     unsigned char 
  9406 ;;  value           1    3[BANK0 ] unsigned char 
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;  w_addr          1    5[BANK0 ] unsigned char 
  9409 ;; Return value:  Size  Location     Type
  9410 ;;		None               void
  9411 ;; Registers used:
  9412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9418 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;Total ram usage:        3 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    6
  9425 ;; This function calls:
  9426 ;;		_CC2500_WriteByte
  9427 ;;		_RF_Timeout_Counter
  9428 ;;		_setRF_TimeoutCleared
  9429 ;; This function is called by:
  9430 ;;		_CC2500_InitSetREG
  9431 ;;		_CC2500_InitPATable
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           
  9436                           ;psect for function _CC2500_WriteREG
  9437  1EB0                     _CC2500_WriteREG:	
  9438                           
  9439                           ;incstack = 0
  9440                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9441                           ;CC2500_WriteREG@w_addr stored from wreg
  9442  1EB0  0020               	movlb	0	; select bank0
  9443  1EB1  00A5               	movwf	CC2500_WriteREG@w_addr
  9444                           
  9445                           ;CC2500_B1.c: 259: RC4 = 0;
  9446  1EB2  120E               	bcf	14,4	;volatile
  9447                           
  9448                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9449  1EB3  0825               	movf	CC2500_WriteREG@w_addr,w
  9450  1EB4  00A4               	movwf	??_CC2500_WriteREG
  9451  1EB5  0824               	movf	??_CC2500_WriteREG,w
  9452  1EB6  0021               	movlb	1	; select bank1
  9453  1EB7  00D4               	movwf	_SPI0Buffer^(0+128)
  9454                           
  9455                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9456  1EB8  2EBC               	goto	l6853
  9457  1EB9                     l6851:	
  9458                           
  9459                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9460  1EB9  319B  2394  319E   	fcall	_RF_Timeout_Counter
  9461  1EBC                     l6853:	
  9462  1EBC  0020               	movlb	0	; select bank0
  9463  1EBD  1D0E               	btfss	14,2	;volatile
  9464  1EBE  2EC2               	goto	l6857
  9465  1EBF  0021               	movlb	1	; select bank1
  9466  1EC0  1F21               	btfss	(_RF1^(0+128)+1),6
  9467  1EC1  2EB9               	goto	l6851
  9468  1EC2                     l6857:	
  9469                           
  9470                           ;CC2500_B1.c: 263: };
  9471                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9472  1EC2  3199  2141  319E   	fcall	_setRF_TimeoutCleared
  9473                           
  9474                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9475  1EC5  319C  2475  319E   	fcall	_CC2500_WriteByte
  9476                           
  9477                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9478  1EC8  0020               	movlb	0	; select bank0
  9479  1EC9  0823               	movf	CC2500_WriteREG@value,w
  9480  1ECA  00A4               	movwf	??_CC2500_WriteREG
  9481  1ECB  0824               	movf	??_CC2500_WriteREG,w
  9482  1ECC  0021               	movlb	1	; select bank1
  9483  1ECD  00D4               	movwf	_SPI0Buffer^(0+128)
  9484                           
  9485                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9486  1ECE  319C  2475         	fcall	_CC2500_WriteByte
  9487                           
  9488                           ;CC2500_B1.c: 269: RC4 = 1;
  9489  1ED0  0020               	movlb	0	; select bank0
  9490  1ED1  160E               	bsf	14,4	;volatile
  9491  1ED2  0008               	return
  9492  1ED3                     __end_of_CC2500_WriteREG:	
  9493                           
  9494                           	psect	text46
  9495  1A44                     __ptext46:	
  9496 ;; *************** function _CC2500_FrequencyCabr *****************
  9497 ;; Defined at:
  9498 ;;		line 208 in file "../src/CC2500_B1.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;		None
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;		None
  9503 ;; Return value:  Size  Location     Type
  9504 ;;		None               void
  9505 ;; Registers used:
  9506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;Total ram usage:        0 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    7
  9519 ;; This function calls:
  9520 ;;		_CC2500_WriteCommand
  9521 ;;		_DelayTime_1us
  9522 ;; This function is called by:
  9523 ;;		_CC2500_PowerOnInitial
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           
  9528                           ;psect for function _CC2500_FrequencyCabr
  9529  1A44                     _CC2500_FrequencyCabr:	
  9530                           
  9531                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9532                           
  9533                           ;incstack = 0
  9534                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9535  1A44  3033               	movlw	51
  9536  1A45  319C  24A8  319A   	fcall	_CC2500_WriteCommand
  9537                           
  9538                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9539  1A48  30E8               	movlw	232
  9540  1A49  0020               	movlb	0	; select bank0
  9541  1A4A  00A1               	movwf	DelayTime_1us@count
  9542  1A4B  3003               	movlw	3
  9543  1A4C  00A2               	movwf	DelayTime_1us@count+1
  9544  1A4D  319E  26F8         	fcall	_DelayTime_1us
  9545  1A4F  0008               	return
  9546  1A50                     __end_of_CC2500_FrequencyCabr:	
  9547                           
  9548                           	psect	text47
  9549  1EF8                     __ptext47:	
  9550 ;; *************** function _DelayTime_1us *****************
  9551 ;; Defined at:
  9552 ;;		line 327 in file "../src/CC2500_B1.c"
  9553 ;; Parameters:    Size  Location     Type
  9554 ;;  count           2    1[BANK0 ] int 
  9555 ;; Auto vars:     Size  Location     Type
  9556 ;;  j               2    5[BANK0 ] unsigned int 
  9557 ;;  i               2    3[BANK0 ] unsigned int 
  9558 ;; Return value:  Size  Location     Type
  9559 ;;		None               void
  9560 ;; Registers used:
  9561 ;;		wreg, status,2
  9562 ;; Tracked objects:
  9563 ;;		On entry : 0/0
  9564 ;;		On exit  : 0/0
  9565 ;;		Unchanged: 0/0
  9566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9567 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;Total ram usage:        6 bytes
  9572 ;; Hardware stack levels used:    1
  9573 ;; Hardware stack levels required when called:    5
  9574 ;; This function calls:
  9575 ;;		Nothing
  9576 ;; This function is called by:
  9577 ;;		_CC2500_PowerRST
  9578 ;;		_CC2500_FrequencyCabr
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           
  9583                           ;psect for function _DelayTime_1us
  9584  1EF8                     _DelayTime_1us:	
  9585                           
  9586                           ;CC2500_B1.c: 328: unsigned int i, j;
  9587                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9588                           
  9589                           ;incstack = 0
  9590                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9591  1EF8  3001               	movlw	1
  9592  1EF9  0020               	movlb	0	; select bank0
  9593  1EFA  00A3               	movwf	DelayTime_1us@i
  9594  1EFB  3000               	movlw	0
  9595  1EFC  00A4               	movwf	DelayTime_1us@i+1
  9596  1EFD                     l371:	
  9597  1EFD  0822               	movf	DelayTime_1us@count+1,w
  9598  1EFE  0224               	subwf	DelayTime_1us@i+1,w
  9599  1EFF  1D03               	skipz
  9600  1F00  2F03               	goto	u6185
  9601  1F01  0821               	movf	DelayTime_1us@count,w
  9602  1F02  0223               	subwf	DelayTime_1us@i,w
  9603  1F03                     u6185:	
  9604  1F03  1803               	btfsc	3,0
  9605  1F04  0008               	return
  9606                           
  9607                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9608  1F05  01A5               	clrf	DelayTime_1us@j
  9609  1F06  01A6               	clrf	DelayTime_1us@j+1
  9610  1F07  3000               	movlw	0
  9611  1F08  0226               	subwf	DelayTime_1us@j+1,w
  9612  1F09  3002               	movlw	2
  9613  1F0A  1903               	skipnz
  9614  1F0B  0225               	subwf	DelayTime_1us@j,w
  9615  1F0C  1803               	btfsc	3,0
  9616  1F0D  2F19               	goto	l6845
  9617  1F0E                     l6843:	
  9618  1F0E  3001               	movlw	1
  9619  1F0F  07A5               	addwf	DelayTime_1us@j,f
  9620  1F10  3000               	movlw	0
  9621  1F11  3DA6               	addwfc	DelayTime_1us@j+1,f
  9622  1F12  3000               	movlw	0
  9623  1F13  0226               	subwf	DelayTime_1us@j+1,w
  9624  1F14  3002               	movlw	2
  9625  1F15  1903               	skipnz
  9626  1F16  0225               	subwf	DelayTime_1us@j,w
  9627  1F17  1C03               	skipc
  9628  1F18  2F0E               	goto	l6843
  9629  1F19                     l6845:	
  9630  1F19  3001               	movlw	1
  9631  1F1A  07A3               	addwf	DelayTime_1us@i,f
  9632  1F1B  3000               	movlw	0
  9633  1F1C  3DA4               	addwfc	DelayTime_1us@i+1,f
  9634  1F1D  2EFD               	goto	l371
  9635  1F1E                     __end_of_DelayTime_1us:	
  9636                           
  9637                           	psect	text48
  9638  1949                     __ptext48:	
  9639 ;; *************** function _CC2500_ClearTXFIFO *****************
  9640 ;; Defined at:
  9641 ;;		line 194 in file "../src/CC2500_B1.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;		None
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;		None
  9646 ;; Return value:  Size  Location     Type
  9647 ;;		None               void
  9648 ;; Registers used:
  9649 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9650 ;; Tracked objects:
  9651 ;;		On entry : 0/0
  9652 ;;		On exit  : 0/0
  9653 ;;		Unchanged: 0/0
  9654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;Total ram usage:        0 bytes
  9660 ;; Hardware stack levels used:    1
  9661 ;; Hardware stack levels required when called:    7
  9662 ;; This function calls:
  9663 ;;		_CC2500_WriteCommand
  9664 ;; This function is called by:
  9665 ;;		_CC2500_PowerOnInitial
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           
  9670                           ;psect for function _CC2500_ClearTXFIFO
  9671  1949                     _CC2500_ClearTXFIFO:	
  9672                           
  9673                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9674                           
  9675                           ;incstack = 0
  9676                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9677  1949  303B               	movlw	59
  9678  194A  319C  24A8         	fcall	_CC2500_WriteCommand
  9679  194C  0008               	return
  9680  194D                     __end_of_CC2500_ClearTXFIFO:	
  9681                           
  9682                           	psect	text49
  9683  1945                     __ptext49:	
  9684 ;; *************** function _CC2500_ClearRXFIFO *****************
  9685 ;; Defined at:
  9686 ;;		line 201 in file "../src/CC2500_B1.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;		None
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;		None
  9691 ;; Return value:  Size  Location     Type
  9692 ;;		None               void
  9693 ;; Registers used:
  9694 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9695 ;; Tracked objects:
  9696 ;;		On entry : 0/0
  9697 ;;		On exit  : 0/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;Total ram usage:        0 bytes
  9705 ;; Hardware stack levels used:    1
  9706 ;; Hardware stack levels required when called:    7
  9707 ;; This function calls:
  9708 ;;		_CC2500_WriteCommand
  9709 ;; This function is called by:
  9710 ;;		_CC2500_PowerOnInitial
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           
  9715                           ;psect for function _CC2500_ClearRXFIFO
  9716  1945                     _CC2500_ClearRXFIFO:	
  9717                           
  9718                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9722  1945  303A               	movlw	58
  9723  1946  319C  24A8         	fcall	_CC2500_WriteCommand
  9724  1948  0008               	return
  9725  1949                     __end_of_CC2500_ClearRXFIFO:	
  9726                           
  9727                           	psect	text50
  9728  1CA8                     __ptext50:	
  9729 ;; *************** function _CC2500_WriteCommand *****************
  9730 ;; Defined at:
  9731 ;;		line 292 in file "../src/CC2500_B1.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;  command         1    wreg     unsigned char 
  9734 ;; Auto vars:     Size  Location     Type
  9735 ;;  command         1    4[BANK0 ] unsigned char 
  9736 ;; Return value:  Size  Location     Type
  9737 ;;		None               void
  9738 ;; Registers used:
  9739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9740 ;; Tracked objects:
  9741 ;;		On entry : 0/0
  9742 ;;		On exit  : 0/0
  9743 ;;		Unchanged: 0/0
  9744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;Total ram usage:        2 bytes
  9750 ;; Hardware stack levels used:    1
  9751 ;; Hardware stack levels required when called:    6
  9752 ;; This function calls:
  9753 ;;		_CC2500_WriteByte
  9754 ;;		_RF_Timeout_Counter
  9755 ;;		_setRF_TimeoutCleared
  9756 ;; This function is called by:
  9757 ;;		_CC2500_TxData
  9758 ;;		_CC2500_RxData
  9759 ;;		_CC2500_ClearTXFIFO
  9760 ;;		_CC2500_ClearRXFIFO
  9761 ;;		_CC2500_FrequencyCabr
  9762 ;;		_CC2500_SIDLEMode
  9763 ;;		_setRF_Main
  9764 ;;		_RF_RxDisable
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           
  9769                           ;psect for function _CC2500_WriteCommand
  9770  1CA8                     _CC2500_WriteCommand:	
  9771                           
  9772                           ;incstack = 0
  9773                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9774                           ;CC2500_WriteCommand@command stored from wreg
  9775  1CA8  0020               	movlb	0	; select bank0
  9776  1CA9  00A4               	movwf	CC2500_WriteCommand@command
  9777                           
  9778                           ;CC2500_B1.c: 293: RC4 = 0;
  9779  1CAA  120E               	bcf	14,4	;volatile
  9780                           
  9781                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9782  1CAB  0824               	movf	CC2500_WriteCommand@command,w
  9783  1CAC  00A3               	movwf	??_CC2500_WriteCommand
  9784  1CAD  0823               	movf	??_CC2500_WriteCommand,w
  9785  1CAE  0021               	movlb	1	; select bank1
  9786  1CAF  00D4               	movwf	_SPI0Buffer^(0+128)
  9787                           
  9788                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9789  1CB0  2CB4               	goto	l6807
  9790  1CB1                     l6805:	
  9791                           
  9792                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9793  1CB1  319B  2394  319C   	fcall	_RF_Timeout_Counter
  9794  1CB4                     l6807:	
  9795  1CB4  0020               	movlb	0	; select bank0
  9796  1CB5  1D0E               	btfss	14,2	;volatile
  9797  1CB6  2CBA               	goto	l6811
  9798  1CB7  0021               	movlb	1	; select bank1
  9799  1CB8  1F21               	btfss	(_RF1^(0+128)+1),6
  9800  1CB9  2CB1               	goto	l6805
  9801  1CBA                     l6811:	
  9802                           
  9803                           ;CC2500_B1.c: 298: };
  9804                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9805  1CBA  3199  2141  319C   	fcall	_setRF_TimeoutCleared
  9806                           
  9807                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9808  1CBD  319C  2475         	fcall	_CC2500_WriteByte
  9809                           
  9810                           ;CC2500_B1.c: 302: RC4 = 1;
  9811  1CBF  0020               	movlb	0	; select bank0
  9812  1CC0  160E               	bsf	14,4	;volatile
  9813  1CC1  0008               	return
  9814  1CC2                     __end_of_CC2500_WriteCommand:	
  9815                           
  9816                           	psect	text51
  9817  1941                     __ptext51:	
  9818 ;; *************** function _setRF_TimeoutCleared *****************
  9819 ;; Defined at:
  9820 ;;		line 149 in file "../src/RF_Control_B1.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;		None
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;		None
  9825 ;; Return value:  Size  Location     Type
  9826 ;;		None               void
  9827 ;; Registers used:
  9828 ;;		status,2
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;Total ram usage:        0 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    5
  9841 ;; This function calls:
  9842 ;;		Nothing
  9843 ;; This function is called by:
  9844 ;;		_CC2500_TxData
  9845 ;;		_CC2500_RxData
  9846 ;;		_CC2500_PowerRST
  9847 ;;		_CC2500_WriteREG
  9848 ;;		_CC2500_WriteCommand
  9849 ;;		_CC2500_ReadStatus
  9850 ;;		_CC2500_ReadREG
  9851 ;; This function uses a non-reentrant model
  9852 ;;
  9853                           
  9854                           
  9855                           ;psect for function _setRF_TimeoutCleared
  9856  1941                     _setRF_TimeoutCleared:	
  9857                           
  9858                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9859                           
  9860                           ;incstack = 0
  9861                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9862  1941  0021               	movlb	1	; select bank1
  9863  1942  01AC               	clrf	(_RF1^(0+128)+12)
  9864  1943  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9865  1944  0008               	return
  9866  1945                     __end_of_setRF_TimeoutCleared:	
  9867                           
  9868                           	psect	text52
  9869  1B94                     __ptext52:	
  9870 ;; *************** function _RF_Timeout_Counter *****************
  9871 ;; Defined at:
  9872 ;;		line 141 in file "../src/RF_Control_B1.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;		None
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;		None
  9877 ;; Return value:  Size  Location     Type
  9878 ;;		None               void
  9879 ;; Registers used:
  9880 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9881 ;; Tracked objects:
  9882 ;;		On entry : 0/0
  9883 ;;		On exit  : 0/0
  9884 ;;		Unchanged: 0/0
  9885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;Total ram usage:        0 bytes
  9891 ;; Hardware stack levels used:    1
  9892 ;; Hardware stack levels required when called:    5
  9893 ;; This function calls:
  9894 ;;		Nothing
  9895 ;; This function is called by:
  9896 ;;		_CC2500_TxData
  9897 ;;		_CC2500_RxData
  9898 ;;		_CC2500_PowerRST
  9899 ;;		_CC2500_WriteREG
  9900 ;;		_CC2500_WriteCommand
  9901 ;;		_CC2500_ReadStatus
  9902 ;;		_CC2500_ReadREG
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           
  9907                           ;psect for function _RF_Timeout_Counter
  9908  1B94                     _RF_Timeout_Counter:	
  9909                           
  9910                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9911                           
  9912                           ;incstack = 0
  9913                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9914  1B94  3001               	movlw	1
  9915  1B95  0021               	movlb	1	; select bank1
  9916  1B96  07AC               	addwf	(_RF1^(0+128)+12),f
  9917  1B97  3000               	movlw	0
  9918  1B98  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9919                           
  9920                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9921  1B99  300C               	movlw	12
  9922  1B9A  3EA0               	addlw	_RF1& (0+255)
  9923  1B9B  0086               	movwf	6
  9924  1B9C  0187               	clrf	7
  9925  1B9D  3F40               	moviw [0]fsr1
  9926  1B9E  3AA8               	xorlw	168
  9927  1B9F  1D03               	skipz
  9928  1BA0  2BA3               	goto	u5825
  9929  1BA1  3F41               	moviw [1]fsr1
  9930  1BA2  3A61               	xorlw	97
  9931  1BA3                     u5825:	
  9932  1BA3  1D03               	skipz
  9933  1BA4  0008               	return
  9934                           
  9935                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9936  1BA5  01AC               	clrf	(_RF1^(0+128)+12)
  9937  1BA6  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9938                           
  9939                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9940  1BA7  1721               	bsf	(_RF1^(0+128)+1),6
  9941  1BA8  0008               	return
  9942  1BA9                     __end_of_RF_Timeout_Counter:	
  9943                           
  9944                           	psect	text53
  9945  1C75                     __ptext53:	
  9946 ;; *************** function _CC2500_WriteByte *****************
  9947 ;; Defined at:
  9948 ;;		line 226 in file "../src/CC2500_B1.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;		None
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;  loop_a          1    2[BANK0 ] unsigned char 
  9953 ;; Return value:  Size  Location     Type
  9954 ;;		None               void
  9955 ;; Registers used:
  9956 ;;		wreg, status,2, status,0
  9957 ;; Tracked objects:
  9958 ;;		On entry : 0/0
  9959 ;;		On exit  : 0/0
  9960 ;;		Unchanged: 0/0
  9961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;Total ram usage:        2 bytes
  9967 ;; Hardware stack levels used:    1
  9968 ;; Hardware stack levels required when called:    5
  9969 ;; This function calls:
  9970 ;;		Nothing
  9971 ;; This function is called by:
  9972 ;;		_CC2500_TxData
  9973 ;;		_CC2500_RxData
  9974 ;;		_CC2500_PowerRST
  9975 ;;		_CC2500_WriteREG
  9976 ;;		_CC2500_WriteCommand
  9977 ;;		_CC2500_ReadStatus
  9978 ;;		_CC2500_ReadREG
  9979 ;; This function uses a non-reentrant model
  9980 ;;
  9981                           
  9982                           
  9983                           ;psect for function _CC2500_WriteByte
  9984  1C75                     _CC2500_WriteByte:	
  9985                           
  9986                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9987                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9988                           
  9989                           ;incstack = 0
  9990                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9991  1C75  0020               	movlb	0	; select bank0
  9992  1C76  01A2               	clrf	CC2500_WriteByte@loop_a
  9993  1C77                     L6:	
  9994  1C77  3008               	movlw	8
  9995  1C78  0222               	subwf	CC2500_WriteByte@loop_a,w
  9996  1C79  1803               	btfsc	3,0
  9997  1C7A  0008               	return
  9998                           
  9999                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10000  1C7B  0021               	movlb	1	; select bank1
 10001  1C7C  1FD4               	btfss	_SPI0Buffer^(0+128),7
 10002  1C7D  2C81               	goto	l327
 10003                           
 10004                           ;CC2500_B1.c: 230: RC0 = 1;
 10005  1C7E  0020               	movlb	0	; select bank0
 10006  1C7F  140E               	bsf	14,0	;volatile
 10007  1C80  2C83               	goto	l328
 10008  1C81                     l327:	
 10009                           
 10010                           ;CC2500_B1.c: 231: else
 10011                           ;CC2500_B1.c: 232: RC0 = 0;
 10012  1C81  0020               	movlb	0	; select bank0
 10013  1C82  100E               	bcf	14,0	;volatile
 10014  1C83                     l328:	
 10015                           
 10016                           ;CC2500_B1.c: 233: RC1 = 1;
 10017  1C83  148E               	bsf	14,1	;volatile
 10018                           
 10019                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10020  1C84  1003               	clrc
 10021  1C85  0021               	movlb	1	; select bank1
 10022  1C86  0DD4               	rlf	_SPI0Buffer^(0+128),f
 10023                           
 10024                           ;CC2500_B1.c: 235: RC1 = 0;
 10025  1C87  0020               	movlb	0	; select bank0
 10026  1C88  108E               	bcf	14,1	;volatile
 10027  1C89  3001               	movlw	1
 10028  1C8A  00A1               	movwf	??_CC2500_WriteByte
 10029  1C8B  0821               	movf	??_CC2500_WriteByte,w
 10030  1C8C  07A2               	addwf	CC2500_WriteByte@loop_a,f
 10031  1C8D  2C77               	goto	L6
 10032  1C8E                     __end_of_CC2500_WriteByte:	
 10033                           
 10034                           	psect	text54
 10035  1931                     __ptext54:	
 10036 ;; *************** function _RF_Initialization *****************
 10037 ;; Defined at:
 10038 ;;		line 9 in file "../src/RF_Control_B1.c"
 10039 ;; Parameters:    Size  Location     Type
 10040 ;;		None
 10041 ;; Auto vars:     Size  Location     Type
 10042 ;;		None
 10043 ;; Return value:  Size  Location     Type
 10044 ;;		None               void
 10045 ;; Registers used:
 10046 ;;		wreg, status,2, status,0, pclath, cstack
 10047 ;; Tracked objects:
 10048 ;;		On entry : 0/0
 10049 ;;		On exit  : 0/0
 10050 ;;		Unchanged: 0/0
 10051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;Total ram usage:        0 bytes
 10057 ;; Hardware stack levels used:    1
 10058 ;; Hardware stack levels required when called:    6
 10059 ;; This function calls:
 10060 ;;		_setRF_Initialization
 10061 ;; This function is called by:
 10062 ;;		_main
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           
 10067                           ;psect for function _RF_Initialization
 10068  1931                     _RF_Initialization:	
 10069                           
 10070                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10071                           
 10072                           ;incstack = 0
 10073                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10074  1931  3199  21DA         	fcall	_setRF_Initialization
 10075  1933  0008               	return
 10076  1934                     __end_of_RF_Initialization:	
 10077                           
 10078                           	psect	text55
 10079  19DA                     __ptext55:	
 10080 ;; *************** function _setRF_Initialization *****************
 10081 ;; Defined at:
 10082 ;;		line 17 in file "../src/RF_Control_B1.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;		None
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;		None
 10087 ;; Return value:  Size  Location     Type
 10088 ;;		None               void
 10089 ;; Registers used:
 10090 ;;		wreg
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;Total ram usage:        1 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:    5
 10103 ;; This function calls:
 10104 ;;		Nothing
 10105 ;; This function is called by:
 10106 ;;		_RF_Initialization
 10107 ;; This function uses a non-reentrant model
 10108 ;;
 10109                           
 10110                           
 10111                           ;psect for function _setRF_Initialization
 10112  19DA                     _setRF_Initialization:	
 10113                           
 10114                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10115                           
 10116                           ;incstack = 0
 10117                           ; Regs used in _setRF_Initialization: [wreg]
 10118  19DA  3015               	movlw	21
 10119  19DB  0020               	movlb	0	; select bank0
 10120  19DC  00A1               	movwf	??_setRF_Initialization
 10121  19DD  0821               	movf	??_setRF_Initialization,w
 10122  19DE  0021               	movlb	1	; select bank1
 10123  19DF  00D7               	movwf	_Tx_Length^(0+128)
 10124                           
 10125                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10126  19E0  30C8               	movlw	200
 10127  19E1  00A7               	movwf	(_RF1^(0+128)+7)
 10128  19E2  3000               	movlw	0
 10129  19E3  00A8               	movwf	(_RF1^(0+128)+8)
 10130  19E4  0008               	return
 10131  19E5                     __end_of_setRF_Initialization:	
 10132                           
 10133                           	psect	text56
 10134  1AE9                     __ptext56:	
 10135 ;; *************** function _Mcu_Initialization *****************
 10136 ;; Defined at:
 10137 ;;		line 30 in file "../src/MCU_B1.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;		None
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;		None
 10142 ;; Return value:  Size  Location     Type
 10143 ;;		None               void
 10144 ;; Registers used:
 10145 ;;		wreg, status,2, status,0, pclath, cstack
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;Total ram usage:        0 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    6
 10158 ;; This function calls:
 10159 ;;		_ADC_Set
 10160 ;;		_Fosc_Set
 10161 ;;		_IOC_Set
 10162 ;;		_IO_Set
 10163 ;;		_TMR1_Set
 10164 ;;		_WDT_Set
 10165 ;; This function is called by:
 10166 ;;		_main
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           
 10171                           ;psect for function _Mcu_Initialization
 10172  1AE9                     _Mcu_Initialization:	
 10173                           
 10174                           ;MCU_B1.c: 32: Fosc_Set();
 10175                           
 10176                           ;incstack = 0
 10177                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10178  1AE9  3199  213D  319A   	fcall	_Fosc_Set
 10179                           
 10180                           ;MCU_B1.c: 34: IO_Set();
 10181  1AEC  319C  24C2  319A   	fcall	_IO_Set
 10182                           
 10183                           ;MCU_B1.c: 36: ;;
 10184                           ;MCU_B1.c: 38: TMR1_Set();
 10185  1AEF  319A  2238  319A   	fcall	_TMR1_Set
 10186                           
 10187                           ;MCU_B1.c: 40: ADC_Set();
 10188  1AF2  3199  2168  319A   	fcall	_ADC_Set
 10189                           
 10190                           ;MCU_B1.c: 42: ;;
 10191                           ;MCU_B1.c: 44: ;;
 10192                           ;MCU_B1.c: 46: IOC_Set();
 10193  1AF5  3199  21C4  319A   	fcall	_IOC_Set
 10194                           
 10195                           ;MCU_B1.c: 48: ;;
 10196                           ;MCU_B1.c: 50: ;;
 10197                           ;MCU_B1.c: 52: WDT_Set();
 10198  1AF8  3199  21CF         	fcall	_WDT_Set
 10199  1AFA  0008               	return
 10200  1AFB                     __end_of_Mcu_Initialization:	
 10201                           
 10202                           	psect	text57
 10203  19CF                     __ptext57:	
 10204 ;; *************** function _WDT_Set *****************
 10205 ;; Defined at:
 10206 ;;		line 1089 in file "../src/MCU_B1.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;		None
 10209 ;; Auto vars:     Size  Location     Type
 10210 ;;		None
 10211 ;; Return value:  Size  Location     Type
 10212 ;;		None               void
 10213 ;; Registers used:
 10214 ;;		wreg
 10215 ;; Tracked objects:
 10216 ;;		On entry : 0/0
 10217 ;;		On exit  : 0/0
 10218 ;;		Unchanged: 0/0
 10219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;Total ram usage:        1 bytes
 10225 ;; Hardware stack levels used:    1
 10226 ;; Hardware stack levels required when called:    5
 10227 ;; This function calls:
 10228 ;;		Nothing
 10229 ;; This function is called by:
 10230 ;;		_Mcu_Initialization
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           
 10235                           ;psect for function _WDT_Set
 10236  19CF                     _WDT_Set:	
 10237                           
 10238                           ;MCU_B1.c: 1096: WDTCON = 0b00010111;;
 10239                           
 10240                           ;incstack = 0
 10241                           ; Regs used in _WDT_Set: [wreg]
 10242  19CF  3017               	movlw	23
 10243  19D0  0021               	movlb	1	; select bank1
 10244  19D1  0097               	movwf	23	;volatile
 10245                           
 10246                           ;MCU_B1.c: 1098: WDT.Enable = 1;
 10247  19D2  1449               	bsf	_WDT^(0+128),0
 10248                           
 10249                           ;MCU_B1.c: 1099: WDT.Timer = 10;
 10250  19D3  300A               	movlw	10
 10251  19D4  0020               	movlb	0	; select bank0
 10252  19D5  00A1               	movwf	??_WDT_Set
 10253  19D6  0821               	movf	??_WDT_Set,w
 10254  19D7  0021               	movlb	1	; select bank1
 10255  19D8  00CA               	movwf	(_WDT^(0+128)+1)
 10256  19D9  0008               	return
 10257  19DA                     __end_of_WDT_Set:	
 10258                           
 10259                           	psect	text58
 10260  1A38                     __ptext58:	
 10261 ;; *************** function _TMR1_Set *****************
 10262 ;; Defined at:
 10263 ;;		line 226 in file "../src/MCU_B1.c"
 10264 ;; Parameters:    Size  Location     Type
 10265 ;;		None
 10266 ;; Auto vars:     Size  Location     Type
 10267 ;;		None
 10268 ;; Return value:  Size  Location     Type
 10269 ;;		None               void
 10270 ;; Registers used:
 10271 ;;		wreg
 10272 ;; Tracked objects:
 10273 ;;		On entry : 0/0
 10274 ;;		On exit  : 0/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;Total ram usage:        0 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:    5
 10284 ;; This function calls:
 10285 ;;		Nothing
 10286 ;; This function is called by:
 10287 ;;		_Mcu_Initialization
 10288 ;; This function uses a non-reentrant model
 10289 ;;
 10290                           
 10291                           
 10292                           ;psect for function _TMR1_Set
 10293  1A38                     _TMR1_Set:	
 10294                           
 10295                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10296                           
 10297                           ;incstack = 0
 10298                           ; Regs used in _TMR1_Set: [wreg]
 10299  1A38  3041               	movlw	65
 10300  1A39  0020               	movlb	0	; select bank0
 10301  1A3A  0098               	movwf	24	;volatile
 10302                           
 10303                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10304  1A3B  30FA               	movlw	250
 10305  1A3C  0097               	movwf	23	;volatile
 10306                           
 10307                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10308  1A3D  3038               	movlw	56
 10309  1A3E  0096               	movwf	22	;volatile
 10310                           
 10311                           ;MCU_B1.c: 230: TMR1IE = 1;
 10312  1A3F  0021               	movlb	1	; select bank1
 10313  1A40  1411               	bsf	17,0	;volatile
 10314                           
 10315                           ;MCU_B1.c: 231: PEIE = 1;
 10316  1A41  170B               	bsf	11,6	;volatile
 10317                           
 10318                           ;MCU_B1.c: 232: GIE = 1;
 10319  1A42  178B               	bsf	11,7	;volatile
 10320  1A43  0008               	return
 10321  1A44                     __end_of_TMR1_Set:	
 10322                           
 10323                           	psect	text59
 10324  1CC2                     __ptext59:	
 10325 ;; *************** function _IO_Set *****************
 10326 ;; Defined at:
 10327 ;;		line 60 in file "../src/MCU_B1.c"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;		None
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;		None
 10332 ;; Return value:  Size  Location     Type
 10333 ;;		None               void
 10334 ;; Registers used:
 10335 ;;		wreg, status,2
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;Total ram usage:        0 bytes
 10346 ;; Hardware stack levels used:    1
 10347 ;; Hardware stack levels required when called:    5
 10348 ;; This function calls:
 10349 ;;		Nothing
 10350 ;; This function is called by:
 10351 ;;		_Mcu_Initialization
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           
 10356                           ;psect for function _IO_Set
 10357  1CC2                     _IO_Set:	
 10358                           
 10359                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10360                           
 10361                           ;incstack = 0
 10362                           ; Regs used in _IO_Set: [wreg+status,2]
 10363  1CC2  3077               	movlw	119
 10364  1CC3  0021               	movlb	1	; select bank1
 10365  1CC4  008C               	movwf	12	;volatile
 10366                           
 10367                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10368  1CC5  3007               	movlw	7
 10369  1CC6  008D               	movwf	13	;volatile
 10370                           
 10371                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10372  1CC7  300C               	movlw	12
 10373  1CC8  008E               	movwf	14	;volatile
 10374                           
 10375                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10376  1CC9  0022               	movlb	2	; select bank2
 10377  1CCA  018C               	clrf	12	;volatile
 10378                           
 10379                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10380  1CCB  3002               	movlw	2
 10381  1CCC  008D               	movwf	13	;volatile
 10382                           
 10383                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10384  1CCD  018E               	clrf	14	;volatile
 10385                           
 10386                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10387  1CCE  3022               	movlw	34
 10388  1CCF  0023               	movlb	3	; select bank3
 10389  1CD0  008C               	movwf	12	;volatile
 10390                           
 10391                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10392  1CD1  018D               	clrf	13	;volatile
 10393                           
 10394                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10395  1CD2  018E               	clrf	14	;volatile
 10396                           
 10397                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10398  1CD3  3077               	movlw	119
 10399  1CD4  0020               	movlb	0	; select bank0
 10400  1CD5  008C               	movwf	12	;volatile
 10401                           
 10402                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10403  1CD6  3007               	movlw	7
 10404  1CD7  008D               	movwf	13	;volatile
 10405                           
 10406                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10407  1CD8  300C               	movlw	12
 10408  1CD9  008E               	movwf	14	;volatile
 10409                           
 10410                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10411  1CDA  0024               	movlb	4	; select bank4
 10412  1CDB  018D               	clrf	13	;volatile
 10413  1CDC  0008               	return
 10414  1CDD                     __end_of_IO_Set:	
 10415                           
 10416                           	psect	text60
 10417  19C4                     __ptext60:	
 10418 ;; *************** function _IOC_Set *****************
 10419 ;; Defined at:
 10420 ;;		line 379 in file "../src/MCU_B1.c"
 10421 ;; Parameters:    Size  Location     Type
 10422 ;;		None
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;		None
 10425 ;; Return value:  Size  Location     Type
 10426 ;;		None               void
 10427 ;; Registers used:
 10428 ;;		wreg, status,2
 10429 ;; Tracked objects:
 10430 ;;		On entry : 0/0
 10431 ;;		On exit  : 0/0
 10432 ;;		Unchanged: 0/0
 10433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;Total ram usage:        0 bytes
 10439 ;; Hardware stack levels used:    1
 10440 ;; Hardware stack levels required when called:    5
 10441 ;; This function calls:
 10442 ;;		Nothing
 10443 ;; This function is called by:
 10444 ;;		_Mcu_Initialization
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           
 10449                           ;psect for function _IOC_Set
 10450  19C4                     _IOC_Set:	
 10451                           
 10452                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10453                           
 10454                           ;incstack = 0
 10455                           ; Regs used in _IOC_Set: [wreg+status,2]
 10456  19C4  3004               	movlw	4
 10457  19C5  0027               	movlb	7	; select bank7
 10458  19C6  0094               	movwf	20	;volatile
 10459                           
 10460                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10461  19C7  3004               	movlw	4
 10462  19C8  0095               	movwf	21	;volatile
 10463                           
 10464                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10465  19C9  0196               	clrf	22	;volatile
 10466                           
 10467                           ;MCU_B1.c: 386: IOCIE = 1;
 10468  19CA  158B               	bsf	11,3	;volatile
 10469                           
 10470                           ;MCU_B1.c: 387: IOCIF = 0;
 10471  19CB  100B               	bcf	11,0	;volatile
 10472                           
 10473                           ;MCU_B1.c: 388: PEIE = 1;
 10474  19CC  170B               	bsf	11,6	;volatile
 10475                           
 10476                           ;MCU_B1.c: 389: GIE = 1;
 10477  19CD  178B               	bsf	11,7	;volatile
 10478  19CE  0008               	return
 10479  19CF                     __end_of_IOC_Set:	
 10480                           
 10481                           	psect	text61
 10482  193D                     __ptext61:	
 10483 ;; *************** function _Fosc_Set *****************
 10484 ;; Defined at:
 10485 ;;		line 56 in file "../src/MCU_B1.c"
 10486 ;; Parameters:    Size  Location     Type
 10487 ;;		None
 10488 ;; Auto vars:     Size  Location     Type
 10489 ;;		None
 10490 ;; Return value:  Size  Location     Type
 10491 ;;		None               void
 10492 ;; Registers used:
 10493 ;;		wreg
 10494 ;; Tracked objects:
 10495 ;;		On entry : 0/0
 10496 ;;		On exit  : 0/0
 10497 ;;		Unchanged: 0/0
 10498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;Total ram usage:        0 bytes
 10504 ;; Hardware stack levels used:    1
 10505 ;; Hardware stack levels required when called:    5
 10506 ;; This function calls:
 10507 ;;		Nothing
 10508 ;; This function is called by:
 10509 ;;		_Mcu_Initialization
 10510 ;; This function uses a non-reentrant model
 10511 ;;
 10512                           
 10513                           
 10514                           ;psect for function _Fosc_Set
 10515  193D                     _Fosc_Set:	
 10516                           
 10517                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10518                           
 10519                           ;incstack = 0
 10520                           ; Regs used in _Fosc_Set: [wreg]
 10521  193D  3078               	movlw	120
 10522  193E  0021               	movlb	1	; select bank1
 10523  193F  0099               	movwf	25	;volatile
 10524  1940  0008               	return
 10525  1941                     __end_of_Fosc_Set:	
 10526                           
 10527                           	psect	text62
 10528  1968                     __ptext62:	
 10529 ;; *************** function _ADC_Set *****************
 10530 ;; Defined at:
 10531 ;;		line 425 in file "../src/MCU_B1.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;		None
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;		None
 10536 ;; Return value:  Size  Location     Type
 10537 ;;		None               void
 10538 ;; Registers used:
 10539 ;;		wreg
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;Total ram usage:        0 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; Hardware stack levels required when called:    5
 10552 ;; This function calls:
 10553 ;;		Nothing
 10554 ;; This function is called by:
 10555 ;;		_Mcu_Initialization
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           
 10560                           ;psect for function _ADC_Set
 10561  1968                     _ADC_Set:	
 10562                           
 10563                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10564                           
 10565                           ;incstack = 0
 10566                           ; Regs used in _ADC_Set: [wreg]
 10567  1968  30F3               	movlw	243
 10568  1969  0021               	movlb	1	; select bank1
 10569  196A  009E               	movwf	30	;volatile
 10570                           
 10571                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10572  196B  30C1               	movlw	193
 10573  196C  0022               	movlb	2	; select bank2
 10574  196D  0097               	movwf	23	;volatile
 10575  196E  0008               	return
 10576  196F                     __end_of_ADC_Set:	
 10577                           
 10578                           	psect	text63
 10579  0052                     __ptext63:	
 10580 ;; *************** function _Load_Main *****************
 10581 ;; Defined at:
 10582 ;;		line 39 in file "../src/OverLoad_B1.c"
 10583 ;; Parameters:    Size  Location     Type
 10584 ;;		None
 10585 ;; Auto vars:     Size  Location     Type
 10586 ;;  i               2   17[BANK0 ] int 
 10587 ;;  LightsCount     1   16[BANK0 ] unsigned char 
 10588 ;;  Load_RunStat    1   15[BANK0 ] unsigned char 
 10589 ;;  ErrorCountVa    1   14[BANK0 ] unsigned char 
 10590 ;;  error           1   11[BANK0 ] unsigned char 
 10591 ;; Return value:  Size  Location     Type
 10592 ;;		None               void
 10593 ;; Registers used:
 10594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;Total ram usage:       10 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    6
 10607 ;; This function calls:
 10608 ;;		___lwdiv
 10609 ;;		___wmul
 10610 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10611 ;;		_getDimmer_LoadGO
 10612 ;;		_getDimmer_Load_Status
 10613 ;;		_getMain_All_Error_Status
 10614 ;;		_getMain_All_LightsStatus
 10615 ;;		_getMain_Lights_Count
 10616 ;;		_setLoad_AH_AL_Restore
 10617 ;; This function is called by:
 10618 ;;		_main
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           
 10623                           ;psect for function _Load_Main
 10624  0052                     _Load_Main:	
 10625                           
 10626                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10627                           
 10628                           ;incstack = 0
 10629                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10630  0052  3000               	movlw	0
 10631  0053  3190  205A  3180   	fcall	_getMain_All_Error_Status
 10632  0056  0020               	movlb	0	; select bank0
 10633  0057  00A9               	movwf	??_Load_Main
 10634  0058  0829               	movf	??_Load_Main,w
 10635  0059  00AB               	movwf	Load_Main@error
 10636                           
 10637                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10638  005A  01AF               	clrf	Load_Main@Load_RunStatus
 10639  005B  01AE               	clrf	Load_Main@ErrorCountValue
 10640  005C  01B0               	clrf	Load_Main@LightsCount
 10641                           
 10642                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10643  005D  0022               	movlb	2	; select bank2
 10644  005E  1C40               	btfss	_Load^(0+256),0
 10645  005F  29FE               	goto	l1588
 10646                           
 10647                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10648  0060  319B  2320  3180   	fcall	_getMain_All_LightsStatus
 10649  0063  3800               	iorlw	0
 10650  0064  1D03               	skipz
 10651  0065  2868               	goto	l9793
 10652                           
 10653                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10654  0066  0022               	movlb	2	; select bank2
 10655  0067  2889               	goto	l9811
 10656  0068                     l9793:	
 10657                           ;OverLoad_B1.c: 46: } else {
 10658                           
 10659                           
 10660                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10661  0068  0020               	movlb	0	; select bank0
 10662  0069  08AB               	movf	Load_Main@error,f
 10663  006A  1D03               	skipz
 10664  006B  2886               	goto	l1591
 10665  006C  319E  264C  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10666  006F  3800               	iorlw	0
 10667  0070  1D03               	skipz
 10668  0071  2886               	goto	l1591
 10669                           
 10670                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10671  0072  0022               	movlb	2	; select bank2
 10672  0073  14C0               	bsf	_Load^(0+256),1
 10673                           
 10674                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10675  0074  3199  2187  3180   	fcall	_getDimmer_LoadGO
 10676  0077  3A01               	xorlw	1
 10677  0078  1D03               	skipz
 10678  0079  2881               	goto	l1592
 10679                           
 10680                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10681  007A  0022               	movlb	2	; select bank2
 10682  007B  1DC0               	btfss	_Load^(0+256),3
 10683  007C  1BC0               	btfsc	_Load^(0+256),7
 10684  007D  288A               	goto	l1590
 10685                           
 10686                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10687  007E  15C0               	bsf	_Load^(0+256),3
 10688                           
 10689                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10690  007F  01E5               	clrf	(_Load^(0+256)+37)
 10691                           
 10692                           ;OverLoad_B1.c: 56: }
 10693                           ;OverLoad_B1.c: 57: } else {
 10694  0080  288A               	goto	l1590
 10695  0081                     l1592:	
 10696                           
 10697                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10698  0081  0022               	movlb	2	; select bank2
 10699  0082  1FC0               	btfss	_Load^(0+256),7
 10700  0083  288A               	goto	l1590
 10701                           
 10702                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10703  0084  13C0               	bcf	_Load^(0+256),7
 10704                           
 10705                           ;OverLoad_B1.c: 60: }
 10706                           ;OverLoad_B1.c: 61: }
 10707                           ;OverLoad_B1.c: 62: } else {
 10708  0085  288A               	goto	l1590
 10709  0086                     l1591:	
 10710                           
 10711                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10712  0086  0022               	movlb	2	; select bank2
 10713  0087  1CC0               	btfss	_Load^(0+256),1
 10714  0088  288A               	goto	l1590
 10715  0089                     l9811:	
 10716                           
 10717                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10718  0089  10C0               	bcf	_Load^(0+256),1
 10719  008A                     l1590:	
 10720                           
 10721                           ;OverLoad_B1.c: 65: }
 10722                           ;OverLoad_B1.c: 66: }
 10723                           ;OverLoad_B1.c: 88: }
 10724                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10725  008A  1CC0               	btfss	_Load^(0+256),1
 10726  008B  29DA               	goto	l1598
 10727                           
 10728                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10729  008C  1540               	bsf	_Load^(0+256),2
 10730                           
 10731                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10732  008D  1E40               	btfss	_Load^(0+256),4
 10733  008E  29D8               	goto	l1599
 10734                           
 10735                           ;OverLoad_B1.c: 95: Load.Time++;
 10736  008F  3001               	movlw	1
 10737  0090  07C1               	addwf	(_Load^(0+256)+1),f
 10738  0091  3000               	movlw	0
 10739  0092  3DC2               	addwfc	((_Load+1)^(0+256)+1),f
 10740                           
 10741                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10742  0093  3000               	movlw	0
 10743  0094  0242               	subwf	((_Load+1)^(0+256)+1),w
 10744  0095  3002               	movlw	2
 10745  0096  1903               	skipnz
 10746  0097  0241               	subwf	(_Load^(0+256)+1),w
 10747  0098  1C03               	skipc
 10748  0099  0008               	return
 10749                           
 10750                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10751  009A  01C1               	clrf	(_Load^(0+256)+1)
 10752  009B  01C2               	clrf	((_Load+1)^(0+256)+1)
 10753                           
 10754                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10755  009C  1240               	bcf	_Load^(0+256),4
 10756                           
 10757                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10758  009D  3001               	movlw	1
 10759  009E  0020               	movlb	0	; select bank0
 10760  009F  00B1               	movwf	Load_Main@i
 10761  00A0  3000               	movlw	0
 10762  00A1  00B2               	movwf	Load_Main@i+1
 10763  00A2  0832               	movf	Load_Main@i+1,w
 10764  00A3  3A80               	xorlw	128
 10765  00A4  00A9               	movwf	??_Load_Main
 10766  00A5  3080               	movlw	128
 10767  00A6  0229               	subwf	??_Load_Main,w
 10768  00A7  1D03               	skipz
 10769  00A8  28AB               	goto	u11415
 10770  00A9  3004               	movlw	4
 10771  00AA  0231               	subwf	Load_Main@i,w
 10772  00AB                     u11415:	
 10773  00AB  1803               	btfsc	3,0
 10774  00AC  28DF               	goto	l9833
 10775  00AD                     l9827:	
 10776                           
 10777                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10778  00AD  0020               	movlb	0	; select bank0
 10779  00AE  3531               	lslf	Load_Main@i,w
 10780  00AF  3E4B               	addlw	(_Load+11)& (0+255)
 10781  00B0  0086               	movwf	6
 10782  00B1  3001               	movlw	1	; select bank2/3
 10783  00B2  0087               	movwf	7
 10784  00B3  3F40               	moviw [0]fsr1
 10785  00B4  00A9               	movwf	??_Load_Main
 10786  00B5  3F41               	moviw [1]fsr1
 10787  00B6  00AA               	movwf	??_Load_Main+1
 10788  00B7  0829               	movf	??_Load_Main,w
 10789  00B8  0022               	movlb	2	; select bank2
 10790  00B9  07C5               	addwf	(_Load^(0+256)+5),f
 10791  00BA  0020               	movlb	0	; select bank0
 10792  00BB  082A               	movf	??_Load_Main+1,w
 10793  00BC  0022               	movlb	2	; select bank2
 10794  00BD  3DC6               	addwfc	((_Load+1)^(0+256)+5),f
 10795                           
 10796                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10797  00BE  0020               	movlb	0	; select bank0
 10798  00BF  3531               	lslf	Load_Main@i,w
 10799  00C0  3E55               	addlw	(_Load+21)& (0+255)
 10800  00C1  0086               	movwf	6
 10801  00C2  3001               	movlw	1	; select bank2/3
 10802  00C3  0087               	movwf	7
 10803  00C4  3F40               	moviw [0]fsr1
 10804  00C5  00A9               	movwf	??_Load_Main
 10805  00C6  3F41               	moviw [1]fsr1
 10806  00C7  00AA               	movwf	??_Load_Main+1
 10807  00C8  0829               	movf	??_Load_Main,w
 10808  00C9  0022               	movlb	2	; select bank2
 10809  00CA  07C7               	addwf	(_Load^(0+256)+7),f
 10810  00CB  0020               	movlb	0	; select bank0
 10811  00CC  082A               	movf	??_Load_Main+1,w
 10812  00CD  0022               	movlb	2	; select bank2
 10813  00CE  3DC8               	addwfc	((_Load+1)^(0+256)+7),f
 10814  00CF  3001               	movlw	1
 10815  00D0  0020               	movlb	0	; select bank0
 10816  00D1  07B1               	addwf	Load_Main@i,f
 10817  00D2  3000               	movlw	0
 10818  00D3  3DB2               	addwfc	Load_Main@i+1,f
 10819  00D4  0832               	movf	Load_Main@i+1,w
 10820  00D5  3A80               	xorlw	128
 10821  00D6  00A9               	movwf	??_Load_Main
 10822  00D7  3080               	movlw	128
 10823  00D8  0229               	subwf	??_Load_Main,w
 10824  00D9  1D03               	skipz
 10825  00DA  28DD               	goto	u11425
 10826  00DB  3004               	movlw	4
 10827  00DC  0231               	subwf	Load_Main@i,w
 10828  00DD                     u11425:	
 10829  00DD  1C03               	skipc
 10830  00DE  28AD               	goto	l9827
 10831  00DF                     l9833:	
 10832                           
 10833                           ;OverLoad_B1.c: 103: }
 10834                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10835  00DF  3003               	movlw	3
 10836  00E0  0020               	movlb	0	; select bank0
 10837  00E1  00A1               	movwf	___lwdiv@divisor
 10838  00E2  3000               	movlw	0
 10839  00E3  00A2               	movwf	___lwdiv@divisor+1
 10840  00E4  0022               	movlb	2	; select bank2
 10841  00E5  0846               	movf	((_Load+1)^(0+256)+5),w
 10842  00E6  0020               	movlb	0	; select bank0
 10843  00E7  01A4               	clrf	___lwdiv@dividend+1
 10844  00E8  07A4               	addwf	___lwdiv@dividend+1,f
 10845  00E9  0022               	movlb	2	; select bank2
 10846  00EA  0845               	movf	(_Load^(0+256)+5),w
 10847  00EB  0020               	movlb	0	; select bank0
 10848  00EC  01A3               	clrf	___lwdiv@dividend
 10849  00ED  07A3               	addwf	___lwdiv@dividend,f
 10850  00EE  3190  20F7  3180   	fcall	___lwdiv
 10851  00F1  0020               	movlb	0	; select bank0
 10852  00F2  0822               	movf	?___lwdiv+1,w
 10853  00F3  0022               	movlb	2	; select bank2
 10854  00F4  01C6               	clrf	((_Load+1)^(0+256)+5)
 10855  00F5  07C6               	addwf	((_Load+1)^(0+256)+5),f
 10856  00F6  0020               	movlb	0	; select bank0
 10857  00F7  0821               	movf	?___lwdiv,w
 10858  00F8  0022               	movlb	2	; select bank2
 10859  00F9  01C5               	clrf	(_Load^(0+256)+5)
 10860  00FA  07C5               	addwf	(_Load^(0+256)+5),f
 10861                           
 10862                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10863  00FB  3003               	movlw	3
 10864  00FC  0020               	movlb	0	; select bank0
 10865  00FD  00A1               	movwf	___lwdiv@divisor
 10866  00FE  3000               	movlw	0
 10867  00FF  00A2               	movwf	___lwdiv@divisor+1
 10868  0100  0022               	movlb	2	; select bank2
 10869  0101  0848               	movf	((_Load+1)^(0+256)+7),w
 10870  0102  0020               	movlb	0	; select bank0
 10871  0103  01A4               	clrf	___lwdiv@dividend+1
 10872  0104  07A4               	addwf	___lwdiv@dividend+1,f
 10873  0105  0022               	movlb	2	; select bank2
 10874  0106  0847               	movf	(_Load^(0+256)+7),w
 10875  0107  0020               	movlb	0	; select bank0
 10876  0108  01A3               	clrf	___lwdiv@dividend
 10877  0109  07A3               	addwf	___lwdiv@dividend,f
 10878  010A  3190  20F7  3180   	fcall	___lwdiv
 10879  010D  0020               	movlb	0	; select bank0
 10880  010E  0822               	movf	?___lwdiv+1,w
 10881  010F  0022               	movlb	2	; select bank2
 10882  0110  01C8               	clrf	((_Load+1)^(0+256)+7)
 10883  0111  07C8               	addwf	((_Load+1)^(0+256)+7),f
 10884  0112  0020               	movlb	0	; select bank0
 10885  0113  0821               	movf	?___lwdiv,w
 10886  0114  0022               	movlb	2	; select bank2
 10887  0115  01C7               	clrf	(_Load^(0+256)+7)
 10888  0116  07C7               	addwf	(_Load^(0+256)+7),f
 10889                           
 10890                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10891  0117  319C  24F8  3180   	fcall	_setLoad_AH_AL_Restore
 10892                           
 10893                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10894  011A  0022               	movlb	2	; select bank2
 10895  011B  0848               	movf	((_Load+1)^(0+256)+7),w
 10896  011C  0246               	subwf	((_Load+1)^(0+256)+5),w
 10897  011D  1D03               	skipz
 10898  011E  2921               	goto	u11435
 10899  011F  0847               	movf	(_Load^(0+256)+7),w
 10900  0120  0245               	subwf	(_Load^(0+256)+5),w
 10901  0121                     u11435:	
 10902  0121  1C03               	skipc
 10903  0122  0008               	return
 10904                           
 10905                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10906  0123  3005               	movlw	5
 10907  0124  3E40               	addlw	_Load& (0+255)
 10908  0125  0086               	movwf	6
 10909  0126  3001               	movlw	1	; select bank2/3
 10910  0127  0087               	movwf	7
 10911  0128  0947               	comf	(_Load^(0+256)+7),w
 10912  0129  0020               	movlb	0	; select bank0
 10913  012A  00A9               	movwf	??_Load_Main
 10914  012B  0022               	movlb	2	; select bank2
 10915  012C  0948               	comf	((_Load+1)^(0+256)+7),w
 10916  012D  0020               	movlb	0	; select bank0
 10917  012E  00AA               	movwf	??_Load_Main+1
 10918  012F  0AA9               	incf	??_Load_Main,f
 10919  0130  1903               	skipnz
 10920  0131  0AAA               	incf	??_Load_Main+1,f
 10921  0132  3F40               	moviw [0]fsr1
 10922  0133  0729               	addwf	??_Load_Main,w
 10923  0134  0022               	movlb	2	; select bank2
 10924  0135  00DF               	movwf	(_Load^(0+256)+31)
 10925  0136  3F41               	moviw [1]fsr1
 10926  0137  0020               	movlb	0	; select bank0
 10927  0138  3D2A               	addwfc	??_Load_Main+1,w
 10928  0139  0022               	movlb	2	; select bank2
 10929  013A  00E0               	movwf	(_Load^(0+256)+32)
 10930                           
 10931                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10932  013B  01C5               	clrf	(_Load^(0+256)+5)
 10933  013C  01C6               	clrf	((_Load+1)^(0+256)+5)
 10934                           
 10935                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10936  013D  01C7               	clrf	(_Load^(0+256)+7)
 10937  013E  01C8               	clrf	((_Load+1)^(0+256)+7)
 10938                           
 10939                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10940  013F  1DC0               	btfss	_Load^(0+256),3
 10941  0140  299A               	goto	l9873
 10942                           
 10943                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10944  0141  3002               	movlw	2
 10945  0142  0265               	subwf	(_Load^(0+256)+37),w
 10946  0143  1803               	skipnc
 10947  0144  299A               	goto	l9873
 10948                           
 10949                           ;OverLoad_B1.c: 115: Load.Count++;
 10950  0145  3001               	movlw	1
 10951  0146  0020               	movlb	0	; select bank0
 10952  0147  00A9               	movwf	??_Load_Main
 10953  0148  0829               	movf	??_Load_Main,w
 10954  0149  0022               	movlb	2	; select bank2
 10955  014A  07E5               	addwf	(_Load^(0+256)+37),f
 10956                           
 10957                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10958  014B  3199  218F  3180   	fcall	_getDimmer_Load_Status
 10959  014E  0020               	movlb	0	; select bank0
 10960  014F  00A9               	movwf	??_Load_Main
 10961  0150  0829               	movf	??_Load_Main,w
 10962  0151  00AF               	movwf	Load_Main@Load_RunStatus
 10963                           
 10964                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10965  0152  319A  22D7  3180   	fcall	_getMain_Lights_Count
 10966  0155  0020               	movlb	0	; select bank0
 10967  0156  00A9               	movwf	??_Load_Main
 10968  0157  0829               	movf	??_Load_Main,w
 10969  0158  00B0               	movwf	Load_Main@LightsCount
 10970                           
 10971                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10972  0159  0022               	movlb	2	; select bank2
 10973  015A  0865               	movf	(_Load^(0+256)+37),w
 10974  015B  3A01               	xorlw	1
 10975  015C  1D03               	skipz
 10976  015D  2962               	goto	l9859
 10977                           
 10978                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*80);
 10979  015E  3040               	movlw	64
 10980  015F  00E3               	movwf	(_Load^(0+256)+35)
 10981  0160  3006               	movlw	6
 10982  0161  296F               	goto	L7
 10983  0162                     l9859:	
 10984                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10985                           
 10986  0162  0865               	movf	(_Load^(0+256)+37),w
 10987  0163  3A02               	xorlw	2
 10988  0164  1D03               	skipz
 10989  0165  299A               	goto	l9873
 10990                           
 10991                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10992  0166  0020               	movlb	0	; select bank0
 10993  0167  0830               	movf	Load_Main@LightsCount,w
 10994  0168  3A01               	xorlw	1
 10995  0169  1D03               	skipz
 10996  016A  2971               	goto	l9865
 10997                           
 10998                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.1*80);
 10999  016B  3058               	movlw	88
 11000  016C  0022               	movlb	2	; select bank2
 11001  016D  00E3               	movwf	(_Load^(0+256)+35)
 11002  016E  3000               	movlw	0
 11003  016F                     L7:	
 11004  016F  00E4               	movwf	(_Load^(0+256)+36)
 11005                           
 11006                           ;OverLoad_B1.c: 130: } else {
 11007  0170  299A               	goto	l9873
 11008  0171                     l9865:	
 11009                           
 11010                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 11011  0171  0020               	movlb	0	; select bank0
 11012  0172  08AF               	movf	Load_Main@Load_RunStatus,f
 11013  0173  1D03               	skipz
 11014  0174  298E               	goto	l9869
 11015                           
 11016                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.1*80) * LightsCount;
 11017  0175  0830               	movf	Load_Main@LightsCount,w
 11018  0176  00A9               	movwf	??_Load_Main
 11019  0177  01AA               	clrf	??_Load_Main+1
 11020  0178  0829               	movf	??_Load_Main,w
 11021  0179  00A1               	movwf	___wmul@multiplier
 11022  017A  082A               	movf	??_Load_Main+1,w
 11023  017B  00A2               	movwf	___wmul@multiplier+1
 11024  017C  3058               	movlw	88
 11025  017D  00A3               	movwf	___wmul@multiplicand
 11026  017E  3000               	movlw	0
 11027  017F  00A4               	movwf	___wmul@multiplicand+1
 11028  0180  319D  254E  3180   	fcall	___wmul
 11029  0183  0020               	movlb	0	; select bank0
 11030  0184  0822               	movf	?___wmul+1,w
 11031  0185  0022               	movlb	2	; select bank2
 11032  0186  01E4               	clrf	((_Load+1)^(0+256)+35)
 11033  0187  07E4               	addwf	((_Load+1)^(0+256)+35),f
 11034  0188  0020               	movlb	0	; select bank0
 11035  0189  0821               	movf	?___wmul,w
 11036  018A  0022               	movlb	2	; select bank2
 11037  018B  01E3               	clrf	(_Load^(0+256)+35)
 11038  018C  07E3               	addwf	(_Load^(0+256)+35),f
 11039                           
 11040                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 11041  018D  299A               	goto	l9873
 11042  018E                     l9869:	
 11043  018E  0020               	movlb	0	; select bank0
 11044  018F  082F               	movf	Load_Main@Load_RunStatus,w
 11045  0190  3A01               	xorlw	1
 11046  0191  1D03               	skipz
 11047  0192  299A               	goto	l9873
 11048                           
 11049                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.1*80) + Load.TotalLoad;
 11050  0193  0022               	movlb	2	; select bank2
 11051  0194  0849               	movf	(_Load^(0+256)+9),w
 11052  0195  3E58               	addlw	88
 11053  0196  00E3               	movwf	(_Load^(0+256)+35)
 11054  0197  3000               	movlw	0
 11055  0198  3D4A               	addwfc	((_Load+1)^(0+256)+9),w
 11056  0199  00E4               	movwf	((_Load+1)^(0+256)+35)
 11057  019A                     l9873:	
 11058                           
 11059                           ;OverLoad_B1.c: 135: }
 11060                           ;OverLoad_B1.c: 136: }
 11061                           ;OverLoad_B1.c: 137: }
 11062                           ;OverLoad_B1.c: 138: }
 11063                           ;OverLoad_B1.c: 139: }
 11064                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 11065  019A  0022               	movlb	2	; select bank2
 11066  019B  0864               	movf	((_Load+1)^(0+256)+35),w
 11067  019C  0260               	subwf	((_Load+1)^(0+256)+31),w
 11068  019D  1D03               	skipz
 11069  019E  29A1               	goto	u11515
 11070  019F  0863               	movf	(_Load^(0+256)+35),w
 11071  01A0  025F               	subwf	(_Load^(0+256)+31),w
 11072  01A1                     u11515:	
 11073  01A1  1C03               	skipc
 11074  01A2  29C0               	goto	l9889
 11075                           
 11076                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11077  01A3  0020               	movlb	0	; select bank0
 11078  01A4  0830               	movf	Load_Main@LightsCount,w
 11079  01A5  3A01               	xorlw	1
 11080  01A6  1903               	skipnz
 11081  01A7  29AA               	goto	l9879
 11082  01A8  3003               	movlw	3
 11083  01A9  29AB               	goto	L8
 11084  01AA                     l9879:	
 11085  01AA  3002               	movlw	2
 11086  01AB                     L8:	
 11087  01AB  00AC               	movwf	_Load_Main$3652
 11088  01AC  3000               	movlw	0
 11089  01AD  00AD               	movwf	_Load_Main$3652+1
 11090  01AE  082C               	movf	_Load_Main$3652,w
 11091  01AF  00A9               	movwf	??_Load_Main
 11092  01B0  0829               	movf	??_Load_Main,w
 11093  01B1  00AE               	movwf	Load_Main@ErrorCountValue
 11094                           
 11095                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 11096  01B2  3001               	movlw	1
 11097  01B3  00A9               	movwf	??_Load_Main
 11098  01B4  0829               	movf	??_Load_Main,w
 11099  01B5  0022               	movlb	2	; select bank2
 11100  01B6  07E6               	addwf	(_Load^(0+256)+38),f
 11101                           
 11102                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 11103  01B7  0866               	movf	(_Load^(0+256)+38),w
 11104  01B8  0020               	movlb	0	; select bank0
 11105  01B9  022E               	subwf	Load_Main@ErrorCountValue,w
 11106  01BA  1803               	skipnc
 11107  01BB  0008               	return
 11108                           
 11109                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 11110  01BC  0022               	movlb	2	; select bank2
 11111  01BD  01E6               	clrf	(_Load^(0+256)+38)
 11112                           
 11113                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 11114  01BE  16C0               	bsf	_Load^(0+256),5
 11115                           
 11116                           ;OverLoad_B1.c: 168: }
 11117                           ;OverLoad_B1.c: 169: } else {
 11118  01BF  0008               	return
 11119  01C0                     l9889:	
 11120                           
 11121                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 11122  01C0  01E6               	clrf	(_Load^(0+256)+38)
 11123                           
 11124                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 11125  01C1  1DC0               	btfss	_Load^(0+256),3
 11126  01C2  0008               	return
 11127                           
 11128                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 11129  01C3  3001               	movlw	1
 11130  01C4  0020               	movlb	0	; select bank0
 11131  01C5  00A9               	movwf	??_Load_Main
 11132  01C6  0829               	movf	??_Load_Main,w
 11133  01C7  0022               	movlb	2	; select bank2
 11134  01C8  07E7               	addwf	(_Load^(0+256)+39),f
 11135                           
 11136                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 11137  01C9  3003               	movlw	3
 11138  01CA  0267               	subwf	(_Load^(0+256)+39),w
 11139  01CB  1C03               	skipc
 11140  01CC  0008               	return
 11141                           
 11142                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 11143  01CD  01E7               	clrf	(_Load^(0+256)+39)
 11144                           
 11145                           ;OverLoad_B1.c: 175: Load.OK = 1;
 11146  01CE  17C0               	bsf	_Load^(0+256),7
 11147                           
 11148                           ;OverLoad_B1.c: 176: Load.Run = 0;
 11149  01CF  11C0               	bcf	_Load^(0+256),3
 11150                           
 11151                           ;OverLoad_B1.c: 177: Load.Count = 0;
 11152  01D0  01E5               	clrf	(_Load^(0+256)+37)
 11153                           
 11154                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 11155  01D1  0860               	movf	((_Load+1)^(0+256)+31),w
 11156  01D2  01CA               	clrf	((_Load+1)^(0+256)+9)
 11157  01D3  07CA               	addwf	((_Load+1)^(0+256)+9),f
 11158  01D4  085F               	movf	(_Load^(0+256)+31),w
 11159  01D5  01C9               	clrf	(_Load^(0+256)+9)
 11160  01D6  07C9               	addwf	(_Load^(0+256)+9),f
 11161                           
 11162                           ;OverLoad_B1.c: 182: }
 11163                           ;OverLoad_B1.c: 183: }
 11164                           ;OverLoad_B1.c: 206: }
 11165                           ;OverLoad_B1.c: 207: }
 11166                           ;OverLoad_B1.c: 208: }
 11167                           ;OverLoad_B1.c: 209: } else {
 11168  01D7  0008               	return
 11169  01D8                     l1599:	
 11170                           
 11171                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 11172  01D8  1640               	bsf	_Load^(0+256),4
 11173                           
 11174                           ;OverLoad_B1.c: 211: }
 11175                           ;OverLoad_B1.c: 212: } else {
 11176  01D9  0008               	return
 11177  01DA                     l1598:	
 11178                           
 11179                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 11180  01DA  1D40               	btfss	_Load^(0+256),2
 11181  01DB  29ED               	goto	l9925
 11182                           
 11183                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11184  01DC  1140               	bcf	_Load^(0+256),2
 11185                           
 11186                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11187  01DD  1240               	bcf	_Load^(0+256),4
 11188                           
 11189                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11190  01DE  01C1               	clrf	(_Load^(0+256)+1)
 11191  01DF  01C2               	clrf	((_Load+1)^(0+256)+1)
 11192                           
 11193                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11194  01E0  319C  24F8  3180   	fcall	_setLoad_AH_AL_Restore
 11195                           
 11196                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11197  01E3  0022               	movlb	2	; select bank2
 11198  01E4  01E6               	clrf	(_Load^(0+256)+38)
 11199                           
 11200                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11201  01E5  01E7               	clrf	(_Load^(0+256)+39)
 11202                           
 11203                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11204  01E6  01C5               	clrf	(_Load^(0+256)+5)
 11205  01E7  01C6               	clrf	((_Load+1)^(0+256)+5)
 11206                           
 11207                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11208  01E8  01C7               	clrf	(_Load^(0+256)+7)
 11209  01E9  01C8               	clrf	((_Load+1)^(0+256)+7)
 11210                           
 11211                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11212  01EA  11C0               	bcf	_Load^(0+256),3
 11213                           
 11214                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11215  01EB  01E5               	clrf	(_Load^(0+256)+37)
 11216                           
 11217                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11218  01EC  13C0               	bcf	_Load^(0+256),7
 11219  01ED                     l9925:	
 11220                           
 11221                           ;OverLoad_B1.c: 255: }
 11222                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11223  01ED  1EC0               	btfss	_Load^(0+256),5
 11224  01EE  0008               	return
 11225                           
 11226                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11227  01EF  3001               	movlw	1
 11228  01F0  07C3               	addwf	(_Load^(0+256)+3),f
 11229  01F1  3000               	movlw	0
 11230  01F2  3DC4               	addwfc	((_Load+1)^(0+256)+3),f
 11231                           
 11232                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11233  01F3  3001               	movlw	1
 11234  01F4  0244               	subwf	((_Load+1)^(0+256)+3),w
 11235  01F5  30F4               	movlw	244
 11236  01F6  1903               	skipnz
 11237  01F7  0243               	subwf	(_Load^(0+256)+3),w
 11238  01F8  1C03               	skipc
 11239  01F9  0008               	return
 11240                           
 11241                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11242  01FA  01C3               	clrf	(_Load^(0+256)+3)
 11243  01FB  01C4               	clrf	((_Load+1)^(0+256)+3)
 11244                           
 11245                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11246  01FC  12C0               	bcf	_Load^(0+256),5
 11247                           
 11248                           ;OverLoad_B1.c: 261: }
 11249                           ;OverLoad_B1.c: 262: }
 11250                           ;OverLoad_B1.c: 263: }
 11251                           ;OverLoad_B1.c: 264: } else {
 11252  01FD  0008               	return
 11253  01FE                     l1588:	
 11254                           
 11255                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11256  01FE  1C20               	btfss	_myMain^(0+256),0
 11257  01FF  0008               	return
 11258                           
 11259                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11260  0200  1440               	bsf	_Load^(0+256),0
 11261  0201  0008               	return
 11262  0202                     __end_of_Load_Main:	
 11263                           
 11264                           	psect	text64
 11265  1AD7                     __ptext64:	
 11266 ;; *************** function _getMain_Lights_Count *****************
 11267 ;; Defined at:
 11268 ;;		line 459 in file "../src/main_B1.c"
 11269 ;; Parameters:    Size  Location     Type
 11270 ;;		None
 11271 ;; Auto vars:     Size  Location     Type
 11272 ;;  status2         1    3[BANK0 ] unsigned char 
 11273 ;;  status1         1    2[BANK0 ] unsigned char 
 11274 ;;  count           1    1[BANK0 ] unsigned char 
 11275 ;; Return value:  Size  Location     Type
 11276 ;;                  1    wreg      unsigned char 
 11277 ;; Registers used:
 11278 ;;		wreg, status,2, status,0
 11279 ;; Tracked objects:
 11280 ;;		On entry : 0/0
 11281 ;;		On exit  : 0/0
 11282 ;;		Unchanged: 0/0
 11283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;Total ram usage:        3 bytes
 11289 ;; Hardware stack levels used:    1
 11290 ;; Hardware stack levels required when called:    5
 11291 ;; This function calls:
 11292 ;;		Nothing
 11293 ;; This function is called by:
 11294 ;;		_Load_Main
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           
 11299                           ;psect for function _getMain_Lights_Count
 11300  1AD7                     _getMain_Lights_Count:	
 11301                           
 11302                           ;main_B1.c: 460: char count = 0;
 11303                           
 11304                           ;incstack = 0
 11305                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11306  1AD7  0020               	movlb	0	; select bank0
 11307  1AD8  01A1               	clrf	getMain_Lights_Count@count
 11308                           
 11309                           ;main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11310  1AD9  3000               	movlw	0
 11311  1ADA  0021               	movlb	1	; select bank1
 11312  1ADB  19AE               	btfsc	_DimmerIntr1^(0+128),3
 11313  1ADC  3001               	movlw	1
 11314  1ADD  0020               	movlb	0	; select bank0
 11315  1ADE  00A2               	movwf	getMain_Lights_Count@status1
 11316                           
 11317                           ;main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11318  1ADF  3000               	movlw	0
 11319  1AE0  0021               	movlb	1	; select bank1
 11320  1AE1  19BA               	btfsc	_DimmerIntr2^(0+128),3
 11321  1AE2  3001               	movlw	1
 11322  1AE3  0020               	movlb	0	; select bank0
 11323  1AE4  00A3               	movwf	getMain_Lights_Count@status2
 11324                           
 11325                           ;main_B1.c: 490: return count = (status1 + status2);
 11326  1AE5  0822               	movf	getMain_Lights_Count@status1,w
 11327  1AE6  0723               	addwf	getMain_Lights_Count@status2,w
 11328  1AE7  00A1               	movwf	getMain_Lights_Count@count
 11329  1AE8  0008               	return
 11330  1AE9                     __end_of_getMain_Lights_Count:	
 11331                           
 11332                           	psect	text65
 11333  198F                     __ptext65:	
 11334 ;; *************** function _getDimmer_Load_Status *****************
 11335 ;; Defined at:
 11336 ;;		line 1084 in file "../src/Dimmer_B1.c"
 11337 ;; Parameters:    Size  Location     Type
 11338 ;;		None
 11339 ;; Auto vars:     Size  Location     Type
 11340 ;;  status          1    1[BANK0 ] unsigned char 
 11341 ;; Return value:  Size  Location     Type
 11342 ;;                  1    wreg      unsigned char 
 11343 ;; Registers used:
 11344 ;;		wreg, status,2
 11345 ;; Tracked objects:
 11346 ;;		On entry : 0/0
 11347 ;;		On exit  : 0/0
 11348 ;;		Unchanged: 0/0
 11349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11353 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11354 ;;Total ram usage:        1 bytes
 11355 ;; Hardware stack levels used:    1
 11356 ;; Hardware stack levels required when called:    5
 11357 ;; This function calls:
 11358 ;;		Nothing
 11359 ;; This function is called by:
 11360 ;;		_Load_Main
 11361 ;; This function uses a non-reentrant model
 11362 ;;
 11363                           
 11364                           
 11365                           ;psect for function _getDimmer_Load_Status
 11366  198F                     _getDimmer_Load_Status:	
 11367                           
 11368                           ;Dimmer_B1.c: 1085: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11369                           
 11370                           ;incstack = 0
 11371                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11372  198F  3000               	movlw	0
 11373  1990  0022               	movlb	2	; select bank2
 11374  1991  1939               	btfsc	_Dimmer^(0+256),2
 11375  1992  3001               	movlw	1
 11376  1993  0020               	movlb	0	; select bank0
 11377  1994  00A1               	movwf	getDimmer_Load_Status@status
 11378                           
 11379                           ;Dimmer_B1.c: 1086: return status;
 11380  1995  0821               	movf	getDimmer_Load_Status@status,w
 11381  1996  0008               	return
 11382  1997                     __end_of_getDimmer_Load_Status:	
 11383                           
 11384                           	psect	text66
 11385  1987                     __ptext66:	
 11386 ;; *************** function _getDimmer_LoadGO *****************
 11387 ;; Defined at:
 11388 ;;		line 1078 in file "../src/Dimmer_B1.c"
 11389 ;; Parameters:    Size  Location     Type
 11390 ;;		None
 11391 ;; Auto vars:     Size  Location     Type
 11392 ;;  loadgo          1    1[BANK0 ] unsigned char 
 11393 ;; Return value:  Size  Location     Type
 11394 ;;                  1    wreg      unsigned char 
 11395 ;; Registers used:
 11396 ;;		wreg, status,2
 11397 ;; Tracked objects:
 11398 ;;		On entry : 0/0
 11399 ;;		On exit  : 0/0
 11400 ;;		Unchanged: 0/0
 11401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;Total ram usage:        1 bytes
 11407 ;; Hardware stack levels used:    1
 11408 ;; Hardware stack levels required when called:    5
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		_Load_Main
 11413 ;; This function uses a non-reentrant model
 11414 ;;
 11415                           
 11416                           
 11417                           ;psect for function _getDimmer_LoadGO
 11418  1987                     _getDimmer_LoadGO:	
 11419                           
 11420                           ;Dimmer_B1.c: 1079: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11421                           
 11422                           ;incstack = 0
 11423                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11424  1987  3000               	movlw	0
 11425  1988  0022               	movlb	2	; select bank2
 11426  1989  18B9               	btfsc	_Dimmer^(0+256),1
 11427  198A  3001               	movlw	1
 11428  198B  0020               	movlb	0	; select bank0
 11429  198C  00A1               	movwf	getDimmer_LoadGO@loadgo
 11430                           
 11431                           ;Dimmer_B1.c: 1080: return loadgo;
 11432  198D  0821               	movf	getDimmer_LoadGO@loadgo,w
 11433  198E  0008               	return
 11434  198F                     __end_of_getDimmer_LoadGO:	
 11435                           
 11436                           	psect	text67
 11437  1E4C                     __ptext67:	
 11438 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11439 ;; Defined at:
 11440 ;;		line 242 in file "../src/Dimmer_B1.c"
 11441 ;; Parameters:    Size  Location     Type
 11442 ;;		None
 11443 ;; Auto vars:     Size  Location     Type
 11444 ;;  status          1    4[BANK0 ] unsigned char 
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  1    wreg      unsigned char 
 11447 ;; Registers used:
 11448 ;;		wreg, status,2, status,0
 11449 ;; Tracked objects:
 11450 ;;		On entry : 0/0
 11451 ;;		On exit  : 0/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;Total ram usage:        4 bytes
 11459 ;; Hardware stack levels used:    1
 11460 ;; Hardware stack levels required when called:    5
 11461 ;; This function calls:
 11462 ;;		Nothing
 11463 ;; This function is called by:
 11464 ;;		_Load_Main
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           
 11469                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11470  1E4C                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11471                           
 11472                           ;Dimmer_B1.c: 243: char status = 0;
 11473                           
 11474                           ;incstack = 0
 11475                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11476  1E4C  0020               	movlb	0	; select bank0
 11477  1E4D  01A4               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11478                           
 11479                           ;Dimmer_B1.c: 250: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11480  1E4E  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2268
 11481  1E4F  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2268,f
 11482  1E50  0021               	movlb	1	; select bank1
 11483  1E51  1E2E               	btfss	_DimmerIntr1^(0+128),4
 11484  1E52  1A3A               	btfsc	_DimmerIntr2^(0+128),4
 11485  1E53  2E56               	goto	l7745
 11486  1E54  0020               	movlb	0	; select bank0
 11487  1E55  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2268
 11488  1E56                     l7745:	
 11489  1E56  0020               	movlb	0	; select bank0
 11490  1E57  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2268,w
 11491  1E58  00A1               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11492  1E59  0821               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11493  1E5A  00A4               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11494                           
 11495                           ;Dimmer_B1.c: 258: if (status == 0) {
 11496  1E5B  08A4               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11497  1E5C  1D03               	skipz
 11498  1E5D  2E6B               	goto	l7757
 11499                           
 11500                           ;Dimmer_B1.c: 264: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11501  1E5E  01A3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2269
 11502  1E5F  0AA3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2269,f
 11503  1E60  0021               	movlb	1	; select bank1
 11504  1E61  1F2E               	btfss	_DimmerIntr1^(0+128),6
 11505  1E62  1B3A               	btfsc	_DimmerIntr2^(0+128),6
 11506  1E63  2E66               	goto	l7755
 11507  1E64  0020               	movlb	0	; select bank0
 11508  1E65  01A3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2269
 11509  1E66                     l7755:	
 11510  1E66  0020               	movlb	0	; select bank0
 11511  1E67  0823               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2269,w
 11512  1E68  00A1               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11513  1E69  0821               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11514  1E6A  00A4               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11515  1E6B                     l7757:	
 11516                           
 11517                           ;Dimmer_B1.c: 270: }
 11518                           ;Dimmer_B1.c: 272: return status;
 11519  1E6B  0824               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11520  1E6C  0008               	return
 11521  1E6D                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11522                           
 11523                           	psect	text68
 11524  1D4E                     __ptext68:	
 11525 ;; *************** function ___wmul *****************
 11526 ;; Defined at:
 11527 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11528 ;; Parameters:    Size  Location     Type
 11529 ;;  multiplier      2    1[BANK0 ] unsigned int 
 11530 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;  product         2    5[BANK0 ] unsigned int 
 11533 ;; Return value:  Size  Location     Type
 11534 ;;                  2    1[BANK0 ] unsigned int 
 11535 ;; Registers used:
 11536 ;;		wreg, status,2, status,0
 11537 ;; Tracked objects:
 11538 ;;		On entry : 0/0
 11539 ;;		On exit  : 0/0
 11540 ;;		Unchanged: 0/0
 11541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11542 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;Total ram usage:        6 bytes
 11547 ;; Hardware stack levels used:    1
 11548 ;; Hardware stack levels required when called:    5
 11549 ;; This function calls:
 11550 ;;		Nothing
 11551 ;; This function is called by:
 11552 ;;		_Load_Main
 11553 ;; This function uses a non-reentrant model
 11554 ;;
 11555                           
 11556                           
 11557                           ;psect for function ___wmul
 11558  1D4E                     ___wmul:	
 11559                           
 11560                           ;incstack = 0
 11561                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11562  1D4E  0020               	movlb	0	; select bank0
 11563  1D4F  01A5               	clrf	___wmul@product
 11564  1D50  01A6               	clrf	___wmul@product+1
 11565  1D51                     l8377:	
 11566  1D51  1C21               	btfss	___wmul@multiplier,0
 11567  1D52  2D57               	goto	l2996
 11568  1D53  0823               	movf	___wmul@multiplicand,w
 11569  1D54  07A5               	addwf	___wmul@product,f
 11570  1D55  0824               	movf	___wmul@multiplicand+1,w
 11571  1D56  3DA6               	addwfc	___wmul@product+1,f
 11572  1D57                     l2996:	
 11573  1D57  3001               	movlw	1
 11574  1D58                     u8825:	
 11575  1D58  35A3               	lslf	___wmul@multiplicand,f
 11576  1D59  0DA4               	rlf	___wmul@multiplicand+1,f
 11577  1D5A  0B89               	decfsz	9,f
 11578  1D5B  2D58               	goto	u8825
 11579  1D5C  3001               	movlw	1
 11580  1D5D                     u8835:	
 11581  1D5D  36A2               	lsrf	___wmul@multiplier+1,f
 11582  1D5E  0CA1               	rrf	___wmul@multiplier,f
 11583  1D5F  0B89               	decfsz	9,f
 11584  1D60  2D5D               	goto	u8835
 11585  1D61  0822               	movf	___wmul@multiplier+1,w
 11586  1D62  0421               	iorwf	___wmul@multiplier,w
 11587  1D63  1D03               	skipz
 11588  1D64  2D51               	goto	l8377
 11589  1D65  0826               	movf	___wmul@product+1,w
 11590  1D66  01A2               	clrf	?___wmul+1
 11591  1D67  07A2               	addwf	?___wmul+1,f
 11592  1D68  0825               	movf	___wmul@product,w
 11593  1D69  01A1               	clrf	?___wmul
 11594  1D6A  07A1               	addwf	?___wmul,f
 11595  1D6B  0008               	return
 11596  1D6C                     __end_of___wmul:	
 11597                           
 11598                           	psect	text69
 11599  10F7                     __ptext69:	
 11600 ;; *************** function ___lwdiv *****************
 11601 ;; Defined at:
 11602 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;  divisor         2    1[BANK0 ] unsigned int 
 11605 ;;  dividend        2    3[BANK0 ] unsigned int 
 11606 ;; Auto vars:     Size  Location     Type
 11607 ;;  quotient        2    6[BANK0 ] unsigned int 
 11608 ;;  counter         1    8[BANK0 ] unsigned char 
 11609 ;; Return value:  Size  Location     Type
 11610 ;;                  2    1[BANK0 ] unsigned int 
 11611 ;; Registers used:
 11612 ;;		wreg, status,2, status,0
 11613 ;; Tracked objects:
 11614 ;;		On entry : 0/0
 11615 ;;		On exit  : 0/0
 11616 ;;		Unchanged: 0/0
 11617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11618 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;Total ram usage:        8 bytes
 11623 ;; Hardware stack levels used:    1
 11624 ;; Hardware stack levels required when called:    5
 11625 ;; This function calls:
 11626 ;;		Nothing
 11627 ;; This function is called by:
 11628 ;;		_Load_Main
 11629 ;;		_setRF_Main
 11630 ;; This function uses a non-reentrant model
 11631 ;;
 11632                           
 11633                           
 11634                           ;psect for function ___lwdiv
 11635  10F7                     ___lwdiv:	
 11636                           
 11637                           ;incstack = 0
 11638                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11639  10F7  0020               	movlb	0	; select bank0
 11640  10F8  01A6               	clrf	___lwdiv@quotient
 11641  10F9  01A7               	clrf	___lwdiv@quotient+1
 11642  10FA  0822               	movf	___lwdiv@divisor+1,w
 11643  10FB  0421               	iorwf	___lwdiv@divisor,w
 11644  10FC  1903               	skipnz
 11645  10FD  2927               	goto	l7705
 11646  10FE  01A8               	clrf	___lwdiv@counter
 11647  10FF  0AA8               	incf	___lwdiv@counter,f
 11648  1100                     l7693:	
 11649  1100  1BA2               	btfsc	___lwdiv@divisor+1,7
 11650  1101  290C               	goto	l7695
 11651  1102  3001               	movlw	1
 11652  1103                     u7495:	
 11653  1103  35A1               	lslf	___lwdiv@divisor,f
 11654  1104  0DA2               	rlf	___lwdiv@divisor+1,f
 11655  1105  0B89               	decfsz	9,f
 11656  1106  2903               	goto	u7495
 11657  1107  3001               	movlw	1
 11658  1108  00A5               	movwf	??___lwdiv
 11659  1109  0825               	movf	??___lwdiv,w
 11660  110A  07A8               	addwf	___lwdiv@counter,f
 11661  110B  2900               	goto	l7693
 11662  110C                     l7695:	
 11663  110C  3001               	movlw	1
 11664  110D                     u7515:	
 11665  110D  35A6               	lslf	___lwdiv@quotient,f
 11666  110E  0DA7               	rlf	___lwdiv@quotient+1,f
 11667  110F  0B89               	decfsz	9,f
 11668  1110  290D               	goto	u7515
 11669  1111  0822               	movf	___lwdiv@divisor+1,w
 11670  1112  0224               	subwf	___lwdiv@dividend+1,w
 11671  1113  1D03               	skipz
 11672  1114  2917               	goto	u7525
 11673  1115  0821               	movf	___lwdiv@divisor,w
 11674  1116  0223               	subwf	___lwdiv@dividend,w
 11675  1117                     u7525:	
 11676  1117  1C03               	skipc
 11677  1118  291E               	goto	l7701
 11678  1119  0821               	movf	___lwdiv@divisor,w
 11679  111A  02A3               	subwf	___lwdiv@dividend,f
 11680  111B  0822               	movf	___lwdiv@divisor+1,w
 11681  111C  3BA4               	subwfb	___lwdiv@dividend+1,f
 11682  111D  1426               	bsf	___lwdiv@quotient,0
 11683  111E                     l7701:	
 11684  111E  3001               	movlw	1
 11685  111F                     u7535:	
 11686  111F  36A2               	lsrf	___lwdiv@divisor+1,f
 11687  1120  0CA1               	rrf	___lwdiv@divisor,f
 11688  1121  0B89               	decfsz	9,f
 11689  1122  291F               	goto	u7535
 11690  1123  3001               	movlw	1
 11691  1124  02A8               	subwf	___lwdiv@counter,f
 11692  1125  1D03               	btfss	3,2
 11693  1126  290C               	goto	l7695
 11694  1127                     l7705:	
 11695  1127  0827               	movf	___lwdiv@quotient+1,w
 11696  1128  01A2               	clrf	?___lwdiv+1
 11697  1129  07A2               	addwf	?___lwdiv+1,f
 11698  112A  0826               	movf	___lwdiv@quotient,w
 11699  112B  01A1               	clrf	?___lwdiv
 11700  112C  07A1               	addwf	?___lwdiv,f
 11701  112D  0008               	return
 11702  112E                     __end_of___lwdiv:	
 11703                           
 11704                           	psect	text70
 11705  192E                     __ptext70:	
 11706 ;; *************** function _Load_Initialization *****************
 11707 ;; Defined at:
 11708 ;;		line 9 in file "../src/OverLoad_B1.c"
 11709 ;; Parameters:    Size  Location     Type
 11710 ;;		None
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;		None
 11713 ;; Return value:  Size  Location     Type
 11714 ;;		None               void
 11715 ;; Registers used:
 11716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11717 ;; Tracked objects:
 11718 ;;		On entry : 0/0
 11719 ;;		On exit  : 0/0
 11720 ;;		Unchanged: 0/0
 11721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;Total ram usage:        0 bytes
 11727 ;; Hardware stack levels used:    1
 11728 ;; Hardware stack levels required when called:    6
 11729 ;; This function calls:
 11730 ;;		_setLoad_AH_AL_Restore
 11731 ;; This function is called by:
 11732 ;;		_main
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736                           
 11737                           ;psect for function _Load_Initialization
 11738  192E                     _Load_Initialization:	
 11739                           
 11740                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11741                           
 11742                           ;incstack = 0
 11743                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11744  192E  319C  24F8         	fcall	_setLoad_AH_AL_Restore
 11745  1930  0008               	return
 11746  1931                     __end_of_Load_Initialization:	
 11747                           
 11748                           	psect	text71
 11749  1CF8                     __ptext71:	
 11750 ;; *************** function _setLoad_AH_AL_Restore *****************
 11751 ;; Defined at:
 11752 ;;		line 292 in file "../src/OverLoad_B1.c"
 11753 ;; Parameters:    Size  Location     Type
 11754 ;;		None
 11755 ;; Auto vars:     Size  Location     Type
 11756 ;;  i               1    2[BANK0 ] unsigned char 
 11757 ;; Return value:  Size  Location     Type
 11758 ;;		None               void
 11759 ;; Registers used:
 11760 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : 0/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;Total ram usage:        2 bytes
 11771 ;; Hardware stack levels used:    1
 11772 ;; Hardware stack levels required when called:    5
 11773 ;; This function calls:
 11774 ;;		Nothing
 11775 ;; This function is called by:
 11776 ;;		_Load_Initialization
 11777 ;;		_Load_Main
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           
 11782                           ;psect for function _setLoad_AH_AL_Restore
 11783  1CF8                     _setLoad_AH_AL_Restore:	
 11784                           
 11785                           ;OverLoad_B1.c: 293: char i;
 11786                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11787                           
 11788                           ;incstack = 0
 11789                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11790  1CF8  0020               	movlb	0	; select bank0
 11791  1CF9  01A2               	clrf	setLoad_AH_AL_Restore@i
 11792  1CFA                     L9:	
 11793  1CFA  3005               	movlw	5
 11794  1CFB  0222               	subwf	setLoad_AH_AL_Restore@i,w
 11795  1CFC  1803               	btfsc	3,0
 11796  1CFD  0008               	return
 11797                           
 11798                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11799  1CFE  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11800  1CFF  3E4B               	addlw	(_Load+11)& (0+255)
 11801  1D00  0086               	movwf	6
 11802  1D01  3001               	movlw	1	; select bank2/3
 11803  1D02  0087               	movwf	7
 11804  1D03  3000               	movlw	0
 11805  1D04  3FC0               	movwi [0]fsr1
 11806  1D05  3FC1               	movwi [1]fsr1
 11807                           
 11808                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11809  1D06  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11810  1D07  3E55               	addlw	(_Load+21)& (0+255)
 11811  1D08  0086               	movwf	6
 11812  1D09  3001               	movlw	1	; select bank2/3
 11813  1D0A  0087               	movwf	7
 11814  1D0B  30FF               	movlw	255
 11815  1D0C  3FC0               	movwi [0]fsr1
 11816  1D0D  30FF               	movlw	255
 11817  1D0E  3FC1               	movwi [1]fsr1
 11818  1D0F  3001               	movlw	1
 11819  1D10  00A1               	movwf	??_setLoad_AH_AL_Restore
 11820  1D11  0821               	movf	??_setLoad_AH_AL_Restore,w
 11821  1D12  07A2               	addwf	setLoad_AH_AL_Restore@i,f
 11822  1D13  2CFA               	goto	L9
 11823  1D14                     __end_of_setLoad_AH_AL_Restore:	
 11824                           
 11825                           	psect	text72
 11826  1A2C                     __ptext72:	
 11827 ;; *************** function _LED_Main *****************
 11828 ;; Defined at:
 11829 ;;		line 47 in file "../src/LED_B1.c"
 11830 ;; Parameters:    Size  Location     Type
 11831 ;;		None
 11832 ;; Auto vars:     Size  Location     Type
 11833 ;;		None
 11834 ;; Return value:  Size  Location     Type
 11835 ;;		None               void
 11836 ;; Registers used:
 11837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11838 ;; Tracked objects:
 11839 ;;		On entry : 0/0
 11840 ;;		On exit  : 0/0
 11841 ;;		Unchanged: 0/0
 11842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;Total ram usage:        0 bytes
 11848 ;; Hardware stack levels used:    1
 11849 ;; Hardware stack levels required when called:    7
 11850 ;; This function calls:
 11851 ;;		_setLED_Main
 11852 ;; This function is called by:
 11853 ;;		_main
 11854 ;; This function uses a non-reentrant model
 11855 ;;
 11856                           
 11857                           
 11858                           ;psect for function _LED_Main
 11859  1A2C                     _LED_Main:	
 11860                           
 11861                           ;LED_B1.c: 58: setLED_Main(1);
 11862                           
 11863                           ;incstack = 0
 11864                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11865  1A2C  3001               	movlw	1
 11866  1A2D  3192  229C  319A   	fcall	_setLED_Main
 11867                           
 11868                           ;LED_B1.c: 61: setLED_Main(2);
 11869  1A30  3002               	movlw	2
 11870  1A31  3192  229C  319A   	fcall	_setLED_Main
 11871                           
 11872                           ;LED_B1.c: 67: setLED_Main(99);
 11873  1A34  3063               	movlw	99
 11874  1A35  3192  229C         	fcall	_setLED_Main
 11875  1A37  0008               	return
 11876  1A38                     __end_of_LED_Main:	
 11877                           
 11878                           	psect	text73
 11879  129C                     __ptext73:	
 11880 ;; *************** function _setLED_Main *****************
 11881 ;; Defined at:
 11882 ;;		line 229 in file "../src/LED_B1.c"
 11883 ;; Parameters:    Size  Location     Type
 11884 ;;  led             1    wreg     unsigned char 
 11885 ;; Auto vars:     Size  Location     Type
 11886 ;;  led             1    5[BANK0 ] unsigned char 
 11887 ;; Return value:  Size  Location     Type
 11888 ;;		None               void
 11889 ;; Registers used:
 11890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11891 ;; Tracked objects:
 11892 ;;		On entry : 0/0
 11893 ;;		On exit  : 0/0
 11894 ;;		Unchanged: 0/0
 11895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11898 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;Total ram usage:        3 bytes
 11901 ;; Hardware stack levels used:    1
 11902 ;; Hardware stack levels required when called:    6
 11903 ;; This function calls:
 11904 ;;		_LedPointSelect
 11905 ;; This function is called by:
 11906 ;;		_LED_Main
 11907 ;; This function uses a non-reentrant model
 11908 ;;
 11909                           
 11910                           
 11911                           ;psect for function _setLED_Main
 11912  129C                     _setLED_Main:	
 11913                           
 11914                           ;incstack = 0
 11915                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11916                           ;setLED_Main@led stored from wreg
 11917  129C  0020               	movlb	0	; select bank0
 11918  129D  00A5               	movwf	setLED_Main@led
 11919                           
 11920                           ;LED_B1.c: 230: LedPointSelect(led);
 11921  129E  0825               	movf	setLED_Main@led,w
 11922  129F  319D  25AA  3192   	fcall	_LedPointSelect
 11923                           
 11924                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11925  12A2  0021               	movlb	1	; select bank1
 11926  12A3  0850               	movf	_LED^(0+128),w
 11927  12A4  0086               	movwf	6
 11928  12A5  3001               	movlw	1	; select bank2/3
 11929  12A6  0087               	movwf	7
 11930  12A7  1C81               	btfss	1,1
 11931  12A8  0008               	return
 11932                           
 11933                           ;LED_B1.c: 232: LED->Time++;
 11934  12A9  0A50               	incf	_LED^(0+128),w
 11935  12AA  0086               	movwf	6
 11936  12AB  3001               	movlw	1	; select bank2/3
 11937  12AC  0087               	movwf	7
 11938  12AD  3001               	movlw	1
 11939  12AE  0781               	addwf	1,f
 11940  12AF  3141               	addfsr 1,1
 11941  12B0  1803               	skipnc
 11942  12B1  0A81               	incf	1,f
 11943                           
 11944                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11945  12B2  0A50               	incf	_LED^(0+128),w
 11946  12B3  0086               	movwf	6
 11947  12B4  3001               	movlw	1	; select bank2/3
 11948  12B5  0087               	movwf	7
 11949  12B6  3F40               	moviw [0]fsr1
 11950  12B7  0020               	movlb	0	; select bank0
 11951  12B8  00A3               	movwf	??_setLED_Main
 11952  12B9  3F41               	moviw [1]fsr1
 11953  12BA  00A4               	movwf	??_setLED_Main+1
 11954  12BB  3000               	movlw	0
 11955  12BC  0224               	subwf	??_setLED_Main+1,w
 11956  12BD  3019               	movlw	25
 11957  12BE  1903               	skipnz
 11958  12BF  0223               	subwf	??_setLED_Main,w
 11959  12C0  1C03               	skipc
 11960  12C1  0008               	return
 11961                           
 11962                           ;LED_B1.c: 234: LED->Time = 0;
 11963  12C2  0021               	movlb	1	; select bank1
 11964  12C3  0A50               	incf	_LED^(0+128),w
 11965  12C4  0086               	movwf	6
 11966  12C5  3001               	movlw	1	; select bank2/3
 11967  12C6  0087               	movwf	7
 11968  12C7  3000               	movlw	0
 11969  12C8  3FC0               	movwi [0]fsr1
 11970  12C9  3FC1               	movwi [1]fsr1
 11971                           
 11972                           ;LED_B1.c: 237: if (led == 1) {
 11973  12CA  0020               	movlb	0	; select bank0
 11974  12CB  0825               	movf	setLED_Main@led,w
 11975  12CC  3A01               	xorlw	1
 11976                           
 11977                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
 11978  12CD  3008               	movlw	8
 11979  12CE  1903               	btfsc	3,2
 11980  12CF  068C               	xorwf	12,f
 11981                           
 11982                           ;LED_B1.c: 239: }
 11983                           ;LED_B1.c: 242: if (led == 2) {
 11984  12D0  0825               	movf	setLED_Main@led,w
 11985  12D1  3A02               	xorlw	2
 11986  12D2  1D03               	skipz
 11987  12D3  2AD6               	goto	l1153
 11988                           
 11989                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
 11990  12D4  3080               	movlw	128
 11991  12D5  068E               	xorwf	14,f
 11992  12D6                     l1153:	
 11993                           
 11994                           ;LED_B1.c: 244: }
 11995                           ;LED_B1.c: 252: if (led == 99) {
 11996  12D6  0825               	movf	setLED_Main@led,w
 11997  12D7  3A63               	xorlw	99
 11998  12D8  1D03               	skipz
 11999  12D9  0008               	return
 12000                           
 12001                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12002  12DA  3020               	movlw	32
 12003  12DB  068D               	xorwf	13,f
 12004  12DC  0008               	return
 12005  12DD                     __end_of_setLED_Main:	
 12006                           
 12007                           	psect	text74
 12008  1A20                     __ptext74:	
 12009 ;; *************** function _LED_Initialization *****************
 12010 ;; Defined at:
 12011 ;;		line 31 in file "../src/LED_B1.c"
 12012 ;; Parameters:    Size  Location     Type
 12013 ;;		None
 12014 ;; Auto vars:     Size  Location     Type
 12015 ;;		None
 12016 ;; Return value:  Size  Location     Type
 12017 ;;		None               void
 12018 ;; Registers used:
 12019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12020 ;; Tracked objects:
 12021 ;;		On entry : 0/0
 12022 ;;		On exit  : 0/0
 12023 ;;		Unchanged: 0/0
 12024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12029 ;;Total ram usage:        0 bytes
 12030 ;; Hardware stack levels used:    1
 12031 ;; Hardware stack levels required when called:    8
 12032 ;; This function calls:
 12033 ;;		_setLED_Initialization
 12034 ;; This function is called by:
 12035 ;;		_main
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           
 12040                           ;psect for function _LED_Initialization
 12041  1A20                     _LED_Initialization:	
 12042                           
 12043                           ;LED_B1.c: 33: setLED_Initialization(1);
 12044                           
 12045                           ;incstack = 0
 12046                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12047  1A20  3001               	movlw	1
 12048  1A21  319A  22C5  319A   	fcall	_setLED_Initialization
 12049                           
 12050                           ;LED_B1.c: 36: setLED_Initialization(2);
 12051  1A24  3002               	movlw	2
 12052  1A25  319A  22C5  319A   	fcall	_setLED_Initialization
 12053                           
 12054                           ;LED_B1.c: 42: setLED_Initialization(99);
 12055  1A28  3063               	movlw	99
 12056  1A29  319A  22C5         	fcall	_setLED_Initialization
 12057  1A2B  0008               	return
 12058  1A2C                     __end_of_LED_Initialization:	
 12059                           
 12060                           	psect	text75
 12061  1AC5                     __ptext75:	
 12062 ;; *************** function _setLED_Initialization *****************
 12063 ;; Defined at:
 12064 ;;		line 74 in file "../src/LED_B1.c"
 12065 ;; Parameters:    Size  Location     Type
 12066 ;;  led             1    wreg     unsigned char 
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;  led             1    5[BANK0 ] unsigned char 
 12069 ;; Return value:  Size  Location     Type
 12070 ;;		None               void
 12071 ;; Registers used:
 12072 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12073 ;; Tracked objects:
 12074 ;;		On entry : 0/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12082 ;;Total ram usage:        1 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:    7
 12085 ;; This function calls:
 12086 ;;		_LedPointSelect
 12087 ;;		_setLED
 12088 ;; This function is called by:
 12089 ;;		_LED_Initialization
 12090 ;; This function uses a non-reentrant model
 12091 ;;
 12092                           
 12093                           
 12094                           ;psect for function _setLED_Initialization
 12095  1AC5                     _setLED_Initialization:	
 12096                           
 12097                           ;incstack = 0
 12098                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12099                           ;setLED_Initialization@led stored from wreg
 12100  1AC5  0020               	movlb	0	; select bank0
 12101  1AC6  00A5               	movwf	setLED_Initialization@led
 12102                           
 12103                           ;LED_B1.c: 75: LedPointSelect(led);
 12104  1AC7  0825               	movf	setLED_Initialization@led,w
 12105  1AC8  319D  25AA  319A   	fcall	_LedPointSelect
 12106                           
 12107                           ;LED_B1.c: 76: LED->Enable = 1;
 12108  1ACB  0021               	movlb	1	; select bank1
 12109  1ACC  0850               	movf	_LED^(0+128),w
 12110  1ACD  0086               	movwf	6
 12111  1ACE  3001               	movlw	1	; select bank2/3
 12112  1ACF  0087               	movwf	7
 12113  1AD0  1401               	bsf	1,0
 12114                           
 12115                           ;LED_B1.c: 77: setLED(led, 0);
 12116  1AD1  0020               	movlb	0	; select bank0
 12117  1AD2  01A3               	clrf	setLED@command
 12118  1AD3  0825               	movf	setLED_Initialization@led,w
 12119  1AD4  3194  2451         	fcall	_setLED
 12120  1AD6  0008               	return
 12121  1AD7                     __end_of_setLED_Initialization:	
 12122                           
 12123                           	psect	text76
 12124  10C1                     __ptext76:	
 12125 ;; *************** function _Flash_Memory_Main *****************
 12126 ;; Defined at:
 12127 ;;		line 971 in file "../src/MCU_B1.c"
 12128 ;; Parameters:    Size  Location     Type
 12129 ;;		None
 12130 ;; Auto vars:     Size  Location     Type
 12131 ;;		None
 12132 ;; Return value:  Size  Location     Type
 12133 ;;		None               void
 12134 ;; Registers used:
 12135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12136 ;; Tracked objects:
 12137 ;;		On entry : 0/0
 12138 ;;		On exit  : 0/0
 12139 ;;		Unchanged: 0/0
 12140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;Total ram usage:        1 bytes
 12146 ;; Hardware stack levels used:    1
 12147 ;; Hardware stack levels required when called:    8
 12148 ;; This function calls:
 12149 ;;		_Flash_Memory_Modify
 12150 ;;		_getMain_All_LightsStatus
 12151 ;; This function is called by:
 12152 ;;		_main
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           
 12157                           ;psect for function _Flash_Memory_Main
 12158  10C1                     _Flash_Memory_Main:	
 12159                           
 12160                           ;MCU_B1.c: 972: if (Memory.Modify == 1) {
 12161                           
 12162                           ;incstack = 0
 12163                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12164  10C1  0024               	movlb	4	; select bank4
 12165  10C2  1C44               	btfss	(_Memory^(0+512)+36),0
 12166  10C3  0008               	return
 12167                           
 12168                           ;MCU_B1.c: 973: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 12169  10C4  319B  2320  3190   	fcall	_getMain_All_LightsStatus
 12170  10C7  3A00               	xorlw	0
 12171  10C8  3000               	movlw	0
 12172  10C9  1903               	skipnz
 12173  10CA  3001               	movlw	1
 12174  10CB  0020               	movlb	0	; select bank0
 12175  10CC  00A7               	movwf	??_Flash_Memory_Main
 12176  10CD  0DA7               	rlf	??_Flash_Memory_Main,f
 12177  10CE  0024               	movlb	4	; select bank4
 12178  10CF  0844               	movf	(_Memory^(0+512)+36),w
 12179  10D0  0020               	movlb	0	; select bank0
 12180  10D1  0627               	xorwf	??_Flash_Memory_Main,w
 12181  10D2  39FD               	andlw	-3
 12182  10D3  0627               	xorwf	??_Flash_Memory_Main,w
 12183  10D4  0024               	movlb	4	; select bank4
 12184  10D5  00C4               	movwf	(_Memory^(0+512)+36)
 12185                           
 12186                           ;MCU_B1.c: 974: if (Memory.GO == 1) {
 12187  10D6  1CC4               	btfss	(_Memory^(0+512)+36),1
 12188  10D7  28F1               	goto	l1425
 12189                           
 12190                           ;MCU_B1.c: 975: Memory.Runtime = 1;
 12191  10D8  15C4               	bsf	(_Memory^(0+512)+36),3
 12192                           
 12193                           ;MCU_B1.c: 976: Memory.Time++;
 12194  10D9  3001               	movlw	1
 12195  10DA  07C2               	addwf	(_Memory^(0+512)+34),f
 12196  10DB  3000               	movlw	0
 12197  10DC  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12198                           
 12199                           ;MCU_B1.c: 977: if (Memory.Time == (200 / 20)) {
 12200  10DD  3022               	movlw	34
 12201  10DE  3E20               	addlw	_Memory& (0+255)
 12202  10DF  0086               	movwf	6
 12203  10E0  3002               	movlw	2	; select bank4/5
 12204  10E1  0087               	movwf	7
 12205  10E2  3F40               	moviw [0]fsr1
 12206  10E3  3A0A               	xorlw	10
 12207  10E4  1D03               	skipz
 12208  10E5  28E8               	goto	u11275
 12209  10E6  3F41               	moviw [1]fsr1
 12210  10E7  3A00               	xorlw	0
 12211  10E8                     u11275:	
 12212  10E8  1D03               	skipz
 12213  10E9  0008               	return
 12214                           
 12215                           ;MCU_B1.c: 978: Memory.Time = 0;
 12216  10EA  01C2               	clrf	(_Memory^(0+512)+34)
 12217  10EB  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12218                           
 12219                           ;MCU_B1.c: 979: Memory.Modify = 0;
 12220  10EC  1044               	bcf	(_Memory^(0+512)+36),0
 12221                           
 12222                           ;MCU_B1.c: 980: Memory.GO = 0;
 12223  10ED  10C4               	bcf	(_Memory^(0+512)+36),1
 12224                           
 12225                           ;MCU_B1.c: 981: Flash_Memory_Modify();
 12226  10EE  3193  23FF         	fcall	_Flash_Memory_Modify
 12227                           
 12228                           ;MCU_B1.c: 982: }
 12229                           ;MCU_B1.c: 983: } else {
 12230  10F0  0008               	return
 12231  10F1                     l1425:	
 12232                           
 12233                           ;MCU_B1.c: 984: if (Memory.Runtime == 1) {
 12234  10F1  1DC4               	btfss	(_Memory^(0+512)+36),3
 12235  10F2  0008               	return
 12236                           
 12237                           ;MCU_B1.c: 985: Memory.Runtime = 0;
 12238  10F3  11C4               	bcf	(_Memory^(0+512)+36),3
 12239                           
 12240                           ;MCU_B1.c: 986: Memory.Time = 0;
 12241  10F4  01C2               	clrf	(_Memory^(0+512)+34)
 12242  10F5  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12243  10F6  0008               	return
 12244  10F7                     __end_of_Flash_Memory_Main:	
 12245                           
 12246                           	psect	text77
 12247  13FF                     __ptext77:	
 12248 ;; *************** function _Flash_Memory_Modify *****************
 12249 ;; Defined at:
 12250 ;;		line 1044 in file "../src/MCU_B1.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;		None
 12253 ;; Auto vars:     Size  Location     Type
 12254 ;;  i               1    6[BANK0 ] unsigned char 
 12255 ;; Return value:  Size  Location     Type
 12256 ;;		None               void
 12257 ;; Registers used:
 12258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12259 ;; Tracked objects:
 12260 ;;		On entry : 0/0
 12261 ;;		On exit  : 0/0
 12262 ;;		Unchanged: 0/0
 12263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;Total ram usage:        2 bytes
 12269 ;; Hardware stack levels used:    1
 12270 ;; Hardware stack levels required when called:    7
 12271 ;; This function calls:
 12272 ;;		_Flash_Memory_Erasing
 12273 ;;		_Flash_Memory_Read
 12274 ;;		_Flash_Memory_Write
 12275 ;;		_setMemory_Data
 12276 ;; This function is called by:
 12277 ;;		_Flash_Memory_Main
 12278 ;; This function uses a non-reentrant model
 12279 ;;
 12280                           
 12281                           
 12282                           ;psect for function _Flash_Memory_Modify
 12283  13FF                     _Flash_Memory_Modify:	
 12284                           
 12285                           ;MCU_B1.c: 1045: char i = 0;
 12286                           
 12287                           ;incstack = 0
 12288                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12289  13FF  0020               	movlb	0	; select bank0
 12290  1400  01A6               	clrf	Flash_Memory_Modify@i
 12291                           
 12292                           ;MCU_B1.c: 1046: for (i = 0; i < 32; i++) {
 12293  1401  01A6               	clrf	Flash_Memory_Modify@i
 12294  1402  3020               	movlw	32
 12295  1403  0226               	subwf	Flash_Memory_Modify@i,w
 12296  1404  1803               	btfsc	3,0
 12297  1405  2C1B               	goto	l8085
 12298  1406                     l8079:	
 12299                           
 12300                           ;MCU_B1.c: 1047: Memory.Data[i] = Flash_Memory_Read(i);
 12301  1406  0826               	movf	Flash_Memory_Modify@i,w
 12302  1407  319C  248E  3193   	fcall	_Flash_Memory_Read
 12303  140A  0020               	movlb	0	; select bank0
 12304  140B  00A5               	movwf	??_Flash_Memory_Modify
 12305  140C  0826               	movf	Flash_Memory_Modify@i,w
 12306  140D  3E20               	addlw	_Memory& (0+255)
 12307  140E  0086               	movwf	6
 12308  140F  3002               	movlw	2	; select bank4/5
 12309  1410  0087               	movwf	7
 12310  1411  0825               	movf	??_Flash_Memory_Modify,w
 12311  1412  0081               	movwf	1
 12312  1413  3001               	movlw	1
 12313  1414  00A5               	movwf	??_Flash_Memory_Modify
 12314  1415  0825               	movf	??_Flash_Memory_Modify,w
 12315  1416  07A6               	addwf	Flash_Memory_Modify@i,f
 12316  1417  3020               	movlw	32
 12317  1418  0226               	subwf	Flash_Memory_Modify@i,w
 12318  1419  1C03               	skipc
 12319  141A  2C06               	goto	l8079
 12320  141B                     l8085:	
 12321                           
 12322                           ;MCU_B1.c: 1048: }
 12323                           ;MCU_B1.c: 1049: setMemory_Data(0, product->Data[12]);
 12324  141B  0021               	movlb	1	; select bank1
 12325  141C  086D               	movf	_product^(0+128),w
 12326  141D  0086               	movwf	6
 12327  141E  3002               	movlw	2	; select bank4/5
 12328  141F  0087               	movwf	7
 12329  1420  3002               	movlw	2	; select bank4/5
 12330  1421  3F4C               	moviw [12]fsr1
 12331  1422  0020               	movlb	0	; select bank0
 12332  1423  00A1               	movwf	setMemory_Data@data
 12333  1424  3000               	movlw	0
 12334  1425  319A  2208  3193   	fcall	_setMemory_Data
 12335                           
 12336                           ;MCU_B1.c: 1050: setMemory_Data(1, product->Data[13]);
 12337  1428  0021               	movlb	1	; select bank1
 12338  1429  086D               	movf	_product^(0+128),w
 12339  142A  0086               	movwf	6
 12340  142B  3002               	movlw	2	; select bank4/5
 12341  142C  0087               	movwf	7
 12342  142D  3002               	movlw	2	; select bank4/5
 12343  142E  3F4D               	moviw [13]fsr1
 12344  142F  0020               	movlb	0	; select bank0
 12345  1430  00A1               	movwf	setMemory_Data@data
 12346  1431  3001               	movlw	1
 12347  1432  319A  2208  3193   	fcall	_setMemory_Data
 12348                           
 12349                           ;MCU_B1.c: 1051: setMemory_Data(2, product->Data[14]);
 12350  1435  0021               	movlb	1	; select bank1
 12351  1436  086D               	movf	_product^(0+128),w
 12352  1437  0086               	movwf	6
 12353  1438  3002               	movlw	2	; select bank4/5
 12354  1439  0087               	movwf	7
 12355  143A  3002               	movlw	2	; select bank4/5
 12356  143B  3F4E               	moviw [14]fsr1
 12357  143C  0020               	movlb	0	; select bank0
 12358  143D  00A1               	movwf	setMemory_Data@data
 12359  143E  3002               	movlw	2
 12360  143F  319A  2208  3193   	fcall	_setMemory_Data
 12361                           
 12362                           ;MCU_B1.c: 1057: if (Memory.LoopSave == 1) {
 12363  1442  0024               	movlb	4	; select bank4
 12364  1443  1D44               	btfss	(_Memory^(0+512)+36),2
 12365  1444  2C49               	goto	l1448
 12366                           
 12367                           ;MCU_B1.c: 1058: Memory.LoopSave = 0;
 12368  1445  1144               	bcf	(_Memory^(0+512)+36),2
 12369                           
 12370                           ;MCU_B1.c: 1059: myMain.FirstOpen = 0;
 12371  1446  0022               	movlb	2	; select bank2
 12372  1447  11A0               	bcf	_myMain^(0+256),3
 12373                           
 12374                           ;MCU_B1.c: 1060: myMain.First = 0;
 12375  1448  12A0               	bcf	_myMain^(0+256),5
 12376  1449                     l1448:	
 12377                           
 12378                           ;MCU_B1.c: 1062: }
 12379                           ;MCU_B1.c: 1063: GIE = 0;
 12380  1449  138B               	bcf	11,7	;volatile
 12381                           
 12382                           ;MCU_B1.c: 1064: Flash_Memory_Erasing();
 12383  144A  319A  2214  3193   	fcall	_Flash_Memory_Erasing
 12384                           
 12385                           ;MCU_B1.c: 1065: Flash_Memory_Write();
 12386  144D  319F  27D1         	fcall	_Flash_Memory_Write
 12387                           
 12388                           ;MCU_B1.c: 1066: GIE = 1;
 12389  144F  178B               	bsf	11,7	;volatile
 12390  1450  0008               	return
 12391  1451                     __end_of_Flash_Memory_Modify:	
 12392                           
 12393                           	psect	text78
 12394  1A14                     __ptext78:	
 12395 ;; *************** function _Flash_Memory_Erasing *****************
 12396 ;; Defined at:
 12397 ;;		line 1033 in file "../src/MCU_B1.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;		None
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;		None
 12402 ;; Return value:  Size  Location     Type
 12403 ;;		None               void
 12404 ;; Registers used:
 12405 ;;		wreg, status,2, status,0, pclath, cstack
 12406 ;; Tracked objects:
 12407 ;;		On entry : 0/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;Total ram usage:        0 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; Hardware stack levels required when called:    6
 12418 ;; This function calls:
 12419 ;;		_Flash_Memory_Unlock
 12420 ;; This function is called by:
 12421 ;;		_Flash_Memory_Modify
 12422 ;; This function uses a non-reentrant model
 12423 ;;
 12424                           
 12425                           
 12426                           ;psect for function _Flash_Memory_Erasing
 12427  1A14                     _Flash_Memory_Erasing:	
 12428                           
 12429                           ;MCU_B1.c: 1034: CFGS = 0;
 12430                           
 12431                           ;incstack = 0
 12432                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12433  1A14  0023               	movlb	3	; select bank3
 12434  1A15  1315               	bcf	21,6	;volatile
 12435                           
 12436                           ;MCU_B1.c: 1035: PMADRH = 0x30;
 12437  1A16  3030               	movlw	48
 12438  1A17  0092               	movwf	18	;volatile
 12439                           
 12440                           ;MCU_B1.c: 1036: PMADRL = 0x00;
 12441  1A18  0191               	clrf	17	;volatile
 12442                           
 12443                           ;MCU_B1.c: 1037: FREE = 1;
 12444  1A19  1615               	bsf	21,4	;volatile
 12445                           
 12446                           ;MCU_B1.c: 1038: WREN = 1;
 12447  1A1A  1515               	bsf	21,2	;volatile
 12448                           
 12449                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 12450  1A1B  3199  21B0         	fcall	_Flash_Memory_Unlock
 12451                           
 12452                           ;MCU_B1.c: 1040: WREN = 0;
 12453  1A1D  0023               	movlb	3	; select bank3
 12454  1A1E  1115               	bcf	21,2	;volatile
 12455  1A1F  0008               	return
 12456  1A20                     __end_of_Flash_Memory_Erasing:	
 12457                           
 12458                           	psect	text79
 12459  047E                     __ptext79:	
 12460 ;; *************** function _Flash_Memory_Initialization *****************
 12461 ;; Defined at:
 12462 ;;		line 930 in file "../src/MCU_B1.c"
 12463 ;; Parameters:    Size  Location     Type
 12464 ;;		None
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;  i               1   68[BANK0 ] unsigned char 
 12467 ;; Return value:  Size  Location     Type
 12468 ;;		None               void
 12469 ;; Registers used:
 12470 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12480 ;;Total ram usage:        2 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:    8
 12483 ;; This function calls:
 12484 ;;		_Flash_Memory_Read
 12485 ;;		_Flash_Memory_Write
 12486 ;;		_getDimmerLights_ValueToPercent
 12487 ;;		_setMemory_Data
 12488 ;; This function is called by:
 12489 ;;		_main
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           
 12494                           ;psect for function _Flash_Memory_Initialization
 12495  047E                     _Flash_Memory_Initialization:	
 12496                           
 12497                           ;MCU_B1.c: 931: char i = 0;
 12498                           
 12499                           ;incstack = 0
 12500                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12501  047E  0020               	movlb	0	; select bank0
 12502  047F  01E4               	clrf	Flash_Memory_Initialization@i
 12503                           
 12504                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12505  0480  301F               	movlw	31
 12506  0481  319C  248E  3184   	fcall	_Flash_Memory_Read
 12507  0484  3AAA               	xorlw	170
 12508  0485  1D03               	skipz
 12509  0486  2CFD               	goto	l8479
 12510                           
 12511                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12512  0487  3000               	movlw	0
 12513  0488  319C  248E  3184   	fcall	_Flash_Memory_Read
 12514  048B  0020               	movlb	0	; select bank0
 12515  048C  00E3               	movwf	??_Flash_Memory_Initialization
 12516  048D  0021               	movlb	1	; select bank1
 12517  048E  086D               	movf	_product^(0+128),w
 12518  048F  3E0C               	addlw	12
 12519  0490  0086               	movwf	6
 12520  0491  3002               	movlw	2	; select bank4/5
 12521  0492  0087               	movwf	7
 12522  0493  0020               	movlb	0	; select bank0
 12523  0494  0863               	movf	??_Flash_Memory_Initialization,w
 12524  0495  0081               	movwf	1
 12525                           
 12526                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12527  0496  3001               	movlw	1
 12528  0497  319C  248E  3184   	fcall	_Flash_Memory_Read
 12529  049A  0020               	movlb	0	; select bank0
 12530  049B  00E3               	movwf	??_Flash_Memory_Initialization
 12531  049C  0021               	movlb	1	; select bank1
 12532  049D  086D               	movf	_product^(0+128),w
 12533  049E  3E0D               	addlw	13
 12534  049F  0086               	movwf	6
 12535  04A0  3002               	movlw	2	; select bank4/5
 12536  04A1  0087               	movwf	7
 12537  04A2  0020               	movlb	0	; select bank0
 12538  04A3  0863               	movf	??_Flash_Memory_Initialization,w
 12539  04A4  0081               	movwf	1
 12540                           
 12541                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12542  04A5  3002               	movlw	2
 12543  04A6  319C  248E  3184   	fcall	_Flash_Memory_Read
 12544  04A9  0020               	movlb	0	; select bank0
 12545  04AA  00E3               	movwf	??_Flash_Memory_Initialization
 12546  04AB  0021               	movlb	1	; select bank1
 12547  04AC  086D               	movf	_product^(0+128),w
 12548  04AD  3E0E               	addlw	14
 12549  04AE  0086               	movwf	6
 12550  04AF  3002               	movlw	2	; select bank4/5
 12551  04B0  0087               	movwf	7
 12552  04B1  0020               	movlb	0	; select bank0
 12553  04B2  0863               	movf	??_Flash_Memory_Initialization,w
 12554  04B3  0081               	movwf	1
 12555                           
 12556                           ;MCU_B1.c: 941: i = getDimmerLights_ValueToPercent(((char)(60*0.65)));
 12557  04B4  3027               	movlw	39
 12558  04B5  3196  2669  3184   	fcall	_getDimmerLights_ValueToPercent
 12559  04B8  0020               	movlb	0	; select bank0
 12560  04B9  00E3               	movwf	??_Flash_Memory_Initialization
 12561  04BA  0863               	movf	??_Flash_Memory_Initialization,w
 12562  04BB  00E4               	movwf	Flash_Memory_Initialization@i
 12563                           
 12564                           ;MCU_B1.c: 942: product->Data[21] = i;
 12565  04BC  0864               	movf	Flash_Memory_Initialization@i,w
 12566  04BD  00E3               	movwf	??_Flash_Memory_Initialization
 12567  04BE  0021               	movlb	1	; select bank1
 12568  04BF  086D               	movf	_product^(0+128),w
 12569  04C0  3E15               	addlw	21
 12570  04C1  0086               	movwf	6
 12571  04C2  3002               	movlw	2	; select bank4/5
 12572  04C3  0087               	movwf	7
 12573  04C4  0020               	movlb	0	; select bank0
 12574  04C5  0863               	movf	??_Flash_Memory_Initialization,w
 12575  04C6  0081               	movwf	1
 12576                           
 12577                           ;MCU_B1.c: 943: product->Data[22] = i;
 12578  04C7  0864               	movf	Flash_Memory_Initialization@i,w
 12579  04C8  00E3               	movwf	??_Flash_Memory_Initialization
 12580  04C9  0021               	movlb	1	; select bank1
 12581  04CA  086D               	movf	_product^(0+128),w
 12582  04CB  3E16               	addlw	22
 12583  04CC  0086               	movwf	6
 12584  04CD  3002               	movlw	2	; select bank4/5
 12585  04CE  0087               	movwf	7
 12586  04CF  0020               	movlb	0	; select bank0
 12587  04D0  0863               	movf	??_Flash_Memory_Initialization,w
 12588  04D1  0081               	movwf	1
 12589                           
 12590                           ;MCU_B1.c: 944: product->Data[23] = i;
 12591  04D2  0864               	movf	Flash_Memory_Initialization@i,w
 12592  04D3  00E3               	movwf	??_Flash_Memory_Initialization
 12593  04D4  0021               	movlb	1	; select bank1
 12594  04D5  086D               	movf	_product^(0+128),w
 12595  04D6  3E17               	addlw	23
 12596  04D7  0086               	movwf	6
 12597  04D8  3002               	movlw	2	; select bank4/5
 12598  04D9  0087               	movwf	7
 12599  04DA  0020               	movlb	0	; select bank0
 12600  04DB  0863               	movf	??_Flash_Memory_Initialization,w
 12601  04DC  0081               	movwf	1
 12602                           
 12603                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12604  04DD  0021               	movlb	1	; select bank1
 12605  04DE  086D               	movf	_product^(0+128),w
 12606  04DF  3E0C               	addlw	12
 12607  04E0  0086               	movwf	6
 12608  04E1  3002               	movlw	2	; select bank4/5
 12609  04E2  0087               	movwf	7
 12610  04E3  0801               	movf	1,w
 12611  04E4  3AFF               	xorlw	255
 12612  04E5  1D03               	skipz
 12613  04E6  0008               	return
 12614  04E7  086D               	movf	_product^(0+128),w
 12615  04E8  3E0D               	addlw	13
 12616  04E9  0086               	movwf	6
 12617  04EA  3002               	movlw	2	; select bank4/5
 12618  04EB  0087               	movwf	7
 12619  04EC  0801               	movf	1,w
 12620  04ED  3AFF               	xorlw	255
 12621  04EE  1D03               	skipz
 12622  04EF  0008               	return
 12623  04F0  086D               	movf	_product^(0+128),w
 12624  04F1  3E0E               	addlw	14
 12625  04F2  0086               	movwf	6
 12626  04F3  3002               	movlw	2	; select bank4/5
 12627  04F4  0087               	movwf	7
 12628  04F5  0801               	movf	1,w
 12629  04F6  3AFF               	xorlw	255
 12630  04F7  1D03               	skipz
 12631  04F8  0008               	return
 12632                           
 12633                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12634  04F9  0022               	movlb	2	; select bank2
 12635  04FA  15A0               	bsf	_myMain^(0+256),3
 12636                           
 12637                           ;MCU_B1.c: 948: myMain.First = 1;
 12638  04FB  16A0               	bsf	_myMain^(0+256),5
 12639                           
 12640                           ;MCU_B1.c: 949: }
 12641                           ;MCU_B1.c: 950: } else {
 12642  04FC  0008               	return
 12643  04FD                     l8479:	
 12644                           
 12645                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(60*0.65)));
 12646  04FD  3027               	movlw	39
 12647  04FE  3196  2669  3184   	fcall	_getDimmerLights_ValueToPercent
 12648  0501  0020               	movlb	0	; select bank0
 12649  0502  00E3               	movwf	??_Flash_Memory_Initialization
 12650  0503  0863               	movf	??_Flash_Memory_Initialization,w
 12651  0504  00E4               	movwf	Flash_Memory_Initialization@i
 12652                           
 12653                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12654  0505  30FF               	movlw	255
 12655  0506  00E3               	movwf	??_Flash_Memory_Initialization
 12656  0507  0863               	movf	??_Flash_Memory_Initialization,w
 12657  0508  00A1               	movwf	setMemory_Data@data
 12658  0509  3000               	movlw	0
 12659  050A  319A  2208  3184   	fcall	_setMemory_Data
 12660                           
 12661                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12662  050D  30FF               	movlw	255
 12663  050E  0020               	movlb	0	; select bank0
 12664  050F  00E3               	movwf	??_Flash_Memory_Initialization
 12665  0510  0863               	movf	??_Flash_Memory_Initialization,w
 12666  0511  00A1               	movwf	setMemory_Data@data
 12667  0512  3001               	movlw	1
 12668  0513  319A  2208  3184   	fcall	_setMemory_Data
 12669                           
 12670                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12671  0516  30FF               	movlw	255
 12672  0517  0020               	movlb	0	; select bank0
 12673  0518  00E3               	movwf	??_Flash_Memory_Initialization
 12674  0519  0863               	movf	??_Flash_Memory_Initialization,w
 12675  051A  00A1               	movwf	setMemory_Data@data
 12676  051B  3002               	movlw	2
 12677  051C  319A  2208  3184   	fcall	_setMemory_Data
 12678                           
 12679                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12680  051F  30FF               	movlw	255
 12681  0520  0020               	movlb	0	; select bank0
 12682  0521  00E3               	movwf	??_Flash_Memory_Initialization
 12683  0522  0863               	movf	??_Flash_Memory_Initialization,w
 12684  0523  00A1               	movwf	setMemory_Data@data
 12685  0524  3003               	movlw	3
 12686  0525  319A  2208  3184   	fcall	_setMemory_Data
 12687                           
 12688                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12689  0528  30FF               	movlw	255
 12690  0529  0020               	movlb	0	; select bank0
 12691  052A  00E3               	movwf	??_Flash_Memory_Initialization
 12692  052B  0863               	movf	??_Flash_Memory_Initialization,w
 12693  052C  00A1               	movwf	setMemory_Data@data
 12694  052D  3004               	movlw	4
 12695  052E  319A  2208  3184   	fcall	_setMemory_Data
 12696                           
 12697                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12698  0531  30FF               	movlw	255
 12699  0532  0020               	movlb	0	; select bank0
 12700  0533  00E3               	movwf	??_Flash_Memory_Initialization
 12701  0534  0863               	movf	??_Flash_Memory_Initialization,w
 12702  0535  00A1               	movwf	setMemory_Data@data
 12703  0536  3005               	movlw	5
 12704  0537  319A  2208  3184   	fcall	_setMemory_Data
 12705                           
 12706                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12707  053A  30AA               	movlw	170
 12708  053B  0020               	movlb	0	; select bank0
 12709  053C  00E3               	movwf	??_Flash_Memory_Initialization
 12710  053D  0863               	movf	??_Flash_Memory_Initialization,w
 12711  053E  00A1               	movwf	setMemory_Data@data
 12712  053F  301F               	movlw	31
 12713  0540  319A  2208  3184   	fcall	_setMemory_Data
 12714                           
 12715                           ;MCU_B1.c: 959: product->Data[21] = i;
 12716  0543  0020               	movlb	0	; select bank0
 12717  0544  0864               	movf	Flash_Memory_Initialization@i,w
 12718  0545  00E3               	movwf	??_Flash_Memory_Initialization
 12719  0546  0021               	movlb	1	; select bank1
 12720  0547  086D               	movf	_product^(0+128),w
 12721  0548  3E15               	addlw	21
 12722  0549  0086               	movwf	6
 12723  054A  3002               	movlw	2	; select bank4/5
 12724  054B  0087               	movwf	7
 12725  054C  0020               	movlb	0	; select bank0
 12726  054D  0863               	movf	??_Flash_Memory_Initialization,w
 12727  054E  0081               	movwf	1
 12728                           
 12729                           ;MCU_B1.c: 960: product->Data[22] = i;
 12730  054F  0864               	movf	Flash_Memory_Initialization@i,w
 12731  0550  00E3               	movwf	??_Flash_Memory_Initialization
 12732  0551  0021               	movlb	1	; select bank1
 12733  0552  086D               	movf	_product^(0+128),w
 12734  0553  3E16               	addlw	22
 12735  0554  0086               	movwf	6
 12736  0555  3002               	movlw	2	; select bank4/5
 12737  0556  0087               	movwf	7
 12738  0557  0020               	movlb	0	; select bank0
 12739  0558  0863               	movf	??_Flash_Memory_Initialization,w
 12740  0559  0081               	movwf	1
 12741                           
 12742                           ;MCU_B1.c: 961: product->Data[23] = i;
 12743  055A  0864               	movf	Flash_Memory_Initialization@i,w
 12744  055B  00E3               	movwf	??_Flash_Memory_Initialization
 12745  055C  0021               	movlb	1	; select bank1
 12746  055D  086D               	movf	_product^(0+128),w
 12747  055E  3E17               	addlw	23
 12748  055F  0086               	movwf	6
 12749  0560  3002               	movlw	2	; select bank4/5
 12750  0561  0087               	movwf	7
 12751  0562  0020               	movlb	0	; select bank0
 12752  0563  0863               	movf	??_Flash_Memory_Initialization,w
 12753  0564  0081               	movwf	1
 12754                           
 12755                           ;MCU_B1.c: 962: GIE = 0;
 12756  0565  138B               	bcf	11,7	;volatile
 12757                           
 12758                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12759  0566  319F  27D1         	fcall	_Flash_Memory_Write
 12760                           
 12761                           ;MCU_B1.c: 964: GIE = 1;
 12762  0568  178B               	bsf	11,7	;volatile
 12763                           
 12764                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12765  0569  0022               	movlb	2	; select bank2
 12766  056A  15A0               	bsf	_myMain^(0+256),3
 12767                           
 12768                           ;MCU_B1.c: 966: myMain.First = 1;
 12769  056B  16A0               	bsf	_myMain^(0+256),5
 12770  056C  0008               	return
 12771  056D                     __end_of_Flash_Memory_Initialization:	
 12772                           
 12773                           	psect	text80
 12774  1A08                     __ptext80:	
 12775 ;; *************** function _setMemory_Data *****************
 12776 ;; Defined at:
 12777 ;;		line 1081 in file "../src/MCU_B1.c"
 12778 ;; Parameters:    Size  Location     Type
 12779 ;;  address         1    wreg     unsigned char 
 12780 ;;  data            1    1[BANK0 ] unsigned char 
 12781 ;; Auto vars:     Size  Location     Type
 12782 ;;  address         1    3[BANK0 ] unsigned char 
 12783 ;; Return value:  Size  Location     Type
 12784 ;;		None               void
 12785 ;; Registers used:
 12786 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12787 ;; Tracked objects:
 12788 ;;		On entry : 0/0
 12789 ;;		On exit  : 0/0
 12790 ;;		Unchanged: 0/0
 12791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12792 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12795 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12796 ;;Total ram usage:        3 bytes
 12797 ;; Hardware stack levels used:    1
 12798 ;; Hardware stack levels required when called:    5
 12799 ;; This function calls:
 12800 ;;		Nothing
 12801 ;; This function is called by:
 12802 ;;		_Flash_Memory_Initialization
 12803 ;;		_Flash_Memory_Modify
 12804 ;; This function uses a non-reentrant model
 12805 ;;
 12806                           
 12807                           
 12808                           ;psect for function _setMemory_Data
 12809  1A08                     _setMemory_Data:	
 12810                           
 12811                           ;incstack = 0
 12812                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12813                           ;setMemory_Data@address stored from wreg
 12814  1A08  0020               	movlb	0	; select bank0
 12815  1A09  00A3               	movwf	setMemory_Data@address
 12816                           
 12817                           ;MCU_B1.c: 1082: Memory.Data[address] = data;
 12818  1A0A  0821               	movf	setMemory_Data@data,w
 12819  1A0B  00A2               	movwf	??_setMemory_Data
 12820  1A0C  0823               	movf	setMemory_Data@address,w
 12821  1A0D  3E20               	addlw	_Memory& (0+255)
 12822  1A0E  0086               	movwf	6
 12823  1A0F  3002               	movlw	2	; select bank4/5
 12824  1A10  0087               	movwf	7
 12825  1A11  0822               	movf	??_setMemory_Data,w
 12826  1A12  0081               	movwf	1
 12827  1A13  0008               	return
 12828  1A14                     __end_of_setMemory_Data:	
 12829                           
 12830                           	psect	text81
 12831  1FD1                     __ptext81:	
 12832 ;; *************** function _Flash_Memory_Write *****************
 12833 ;; Defined at:
 12834 ;;		line 1014 in file "../src/MCU_B1.c"
 12835 ;; Parameters:    Size  Location     Type
 12836 ;;		None
 12837 ;; Auto vars:     Size  Location     Type
 12838 ;;  i               1    2[BANK0 ] unsigned char 
 12839 ;; Return value:  Size  Location     Type
 12840 ;;		None               void
 12841 ;; Registers used:
 12842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12843 ;; Tracked objects:
 12844 ;;		On entry : 0/0
 12845 ;;		On exit  : 0/0
 12846 ;;		Unchanged: 0/0
 12847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12852 ;;Total ram usage:        2 bytes
 12853 ;; Hardware stack levels used:    1
 12854 ;; Hardware stack levels required when called:    6
 12855 ;; This function calls:
 12856 ;;		_Flash_Memory_Unlock
 12857 ;; This function is called by:
 12858 ;;		_Flash_Memory_Initialization
 12859 ;;		_Flash_Memory_Modify
 12860 ;; This function uses a non-reentrant model
 12861 ;;
 12862                           
 12863                           
 12864                           ;psect for function _Flash_Memory_Write
 12865  1FD1                     _Flash_Memory_Write:	
 12866                           
 12867                           ;MCU_B1.c: 1015: char i = 0;
 12868                           
 12869                           ;incstack = 0
 12870                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12871  1FD1  0020               	movlb	0	; select bank0
 12872  1FD2  01A2               	clrf	Flash_Memory_Write@i
 12873                           
 12874                           ;MCU_B1.c: 1016: CFGS = 0;
 12875  1FD3  0023               	movlb	3	; select bank3
 12876  1FD4  1315               	bcf	21,6	;volatile
 12877                           
 12878                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 12879  1FD5  3030               	movlw	48
 12880  1FD6  0092               	movwf	18	;volatile
 12881                           
 12882                           ;MCU_B1.c: 1018: PMDATH = 0;
 12883  1FD7  0194               	clrf	20	;volatile
 12884                           
 12885                           ;MCU_B1.c: 1019: FREE = 0;
 12886  1FD8  1215               	bcf	21,4	;volatile
 12887                           
 12888                           ;MCU_B1.c: 1020: LWLO = 1;
 12889  1FD9  1695               	bsf	21,5	;volatile
 12890                           
 12891                           ;MCU_B1.c: 1021: WREN = 1;
 12892  1FDA  1515               	bsf	21,2	;volatile
 12893                           
 12894                           ;MCU_B1.c: 1022: for (i = 0; i < 32; i++) {
 12895  1FDB  0020               	movlb	0	; select bank0
 12896  1FDC  01A2               	clrf	Flash_Memory_Write@i
 12897  1FDD  3020               	movlw	32
 12898  1FDE  0222               	subwf	Flash_Memory_Write@i,w
 12899  1FDF  1803               	btfsc	3,0
 12900  1FE0  2FF9               	goto	l1439
 12901  1FE1                     l7549:	
 12902                           
 12903                           ;MCU_B1.c: 1023: PMADRL = i;
 12904  1FE1  0822               	movf	Flash_Memory_Write@i,w
 12905  1FE2  0023               	movlb	3	; select bank3
 12906  1FE3  0091               	movwf	17	;volatile
 12907                           
 12908                           ;MCU_B1.c: 1024: PMDATL = Memory.Data[i];
 12909  1FE4  0020               	movlb	0	; select bank0
 12910  1FE5  0822               	movf	Flash_Memory_Write@i,w
 12911  1FE6  3E20               	addlw	_Memory& (0+255)
 12912  1FE7  0086               	movwf	6
 12913  1FE8  3002               	movlw	2	; select bank4/5
 12914  1FE9  0087               	movwf	7
 12915  1FEA  0801               	movf	1,w
 12916  1FEB  0023               	movlb	3	; select bank3
 12917  1FEC  0093               	movwf	19	;volatile
 12918                           
 12919                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 12920  1FED  3199  21B0  319F   	fcall	_Flash_Memory_Unlock
 12921  1FF0  3001               	movlw	1
 12922  1FF1  0020               	movlb	0	; select bank0
 12923  1FF2  00A1               	movwf	??_Flash_Memory_Write
 12924  1FF3  0821               	movf	??_Flash_Memory_Write,w
 12925  1FF4  07A2               	addwf	Flash_Memory_Write@i,f
 12926  1FF5  3020               	movlw	32
 12927  1FF6  0222               	subwf	Flash_Memory_Write@i,w
 12928  1FF7  1C03               	skipc
 12929  1FF8  2FE1               	goto	l7549
 12930  1FF9                     l1439:	
 12931                           
 12932                           ;MCU_B1.c: 1026: }
 12933                           ;MCU_B1.c: 1027: LWLO = 0;
 12934  1FF9  0023               	movlb	3	; select bank3
 12935  1FFA  1295               	bcf	21,5	;volatile
 12936                           
 12937                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12938  1FFB  3199  21B0         	fcall	_Flash_Memory_Unlock
 12939                           
 12940                           ;MCU_B1.c: 1029: WREN = 0;
 12941  1FFD  0023               	movlb	3	; select bank3
 12942  1FFE  1115               	bcf	21,2	;volatile
 12943  1FFF  0008               	return
 12944  2000                     __end_of_Flash_Memory_Write:	
 12945                           
 12946                           	psect	text82
 12947  19B0                     __ptext82:	
 12948 ;; *************** function _Flash_Memory_Unlock *****************
 12949 ;; Defined at:
 12950 ;;		line 993 in file "../src/MCU_B1.c"
 12951 ;; Parameters:    Size  Location     Type
 12952 ;;		None
 12953 ;; Auto vars:     Size  Location     Type
 12954 ;;		None
 12955 ;; Return value:  Size  Location     Type
 12956 ;;		None               void
 12957 ;; Registers used:
 12958 ;;		wreg
 12959 ;; Tracked objects:
 12960 ;;		On entry : 0/0
 12961 ;;		On exit  : 0/0
 12962 ;;		Unchanged: 0/0
 12963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;Total ram usage:        0 bytes
 12969 ;; Hardware stack levels used:    1
 12970 ;; Hardware stack levels required when called:    5
 12971 ;; This function calls:
 12972 ;;		Nothing
 12973 ;; This function is called by:
 12974 ;;		_Flash_Memory_Write
 12975 ;;		_Flash_Memory_Erasing
 12976 ;; This function uses a non-reentrant model
 12977 ;;
 12978                           
 12979                           
 12980                           ;psect for function _Flash_Memory_Unlock
 12981  19B0                     _Flash_Memory_Unlock:	
 12982                           
 12983                           ;MCU_B1.c: 994: PMCON2 = 0x55;
 12984                           
 12985                           ;incstack = 0
 12986                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12987  19B0  3055               	movlw	85
 12988  19B1  0023               	movlb	3	; select bank3
 12989  19B2  0096               	movwf	22	;volatile
 12990                           
 12991                           ;MCU_B1.c: 995: PMCON2 = 0xaa;
 12992  19B3  30AA               	movlw	170
 12993  19B4  0096               	movwf	22	;volatile
 12994                           
 12995                           ;MCU_B1.c: 996: WR = 1;
 12996  19B5  1495               	bsf	21,1	;volatile
 12997                           
 12998                           ;MCU_B1.c: 997: __nop();
 12999  19B6  0000               	nop
 13000                           
 13001                           ;MCU_B1.c: 998: __nop();
 13002  19B7  0000               	nop
 13003  19B8  0008               	return
 13004  19B9                     __end_of_Flash_Memory_Unlock:	
 13005                           
 13006                           	psect	text83
 13007  1C8E                     __ptext83:	
 13008 ;; *************** function _Flash_Memory_Read *****************
 13009 ;; Defined at:
 13010 ;;		line 1002 in file "../src/MCU_B1.c"
 13011 ;; Parameters:    Size  Location     Type
 13012 ;;  address         1    wreg     unsigned char 
 13013 ;; Auto vars:     Size  Location     Type
 13014 ;;  address         1    3[BANK0 ] unsigned char 
 13015 ;;  ret             1    4[BANK0 ] unsigned char 
 13016 ;;  i               1    2[BANK0 ] unsigned char 
 13017 ;; Return value:  Size  Location     Type
 13018 ;;                  1    wreg      unsigned char 
 13019 ;; Registers used:
 13020 ;;		wreg, status,2
 13021 ;; Tracked objects:
 13022 ;;		On entry : 0/0
 13023 ;;		On exit  : 0/0
 13024 ;;		Unchanged: 0/0
 13025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;Total ram usage:        4 bytes
 13031 ;; Hardware stack levels used:    1
 13032 ;; Hardware stack levels required when called:    5
 13033 ;; This function calls:
 13034 ;;		Nothing
 13035 ;; This function is called by:
 13036 ;;		_Flash_Memory_Initialization
 13037 ;;		_Flash_Memory_Modify
 13038 ;; This function uses a non-reentrant model
 13039 ;;
 13040                           
 13041                           
 13042                           ;psect for function _Flash_Memory_Read
 13043  1C8E                     _Flash_Memory_Read:	
 13044                           
 13045                           ;incstack = 0
 13046                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13047                           ;Flash_Memory_Read@address stored from wreg
 13048  1C8E  0020               	movlb	0	; select bank0
 13049  1C8F  00A3               	movwf	Flash_Memory_Read@address
 13050                           
 13051                           ;MCU_B1.c: 1003: char i = 0, ret = 0;
 13052  1C90  01A2               	clrf	Flash_Memory_Read@i
 13053  1C91  01A4               	clrf	Flash_Memory_Read@ret
 13054                           
 13055                           ;MCU_B1.c: 1004: PMADRH = 0x30;
 13056  1C92  3030               	movlw	48
 13057  1C93  0023               	movlb	3	; select bank3
 13058  1C94  0092               	movwf	18	;volatile
 13059                           
 13060                           ;MCU_B1.c: 1005: PMADRL = address;
 13061  1C95  0020               	movlb	0	; select bank0
 13062  1C96  0823               	movf	Flash_Memory_Read@address,w
 13063  1C97  0023               	movlb	3	; select bank3
 13064  1C98  0091               	movwf	17	;volatile
 13065                           
 13066                           ;MCU_B1.c: 1006: CFGS = 0;
 13067  1C99  1315               	bcf	21,6	;volatile
 13068                           
 13069                           ;MCU_B1.c: 1007: RD = 1;
 13070  1C9A  1415               	bsf	21,0	;volatile
 13071                           
 13072                           ;MCU_B1.c: 1008: i = PMDATH;
 13073  1C9B  0814               	movf	20,w	;volatile
 13074  1C9C  0020               	movlb	0	; select bank0
 13075  1C9D  00A1               	movwf	??_Flash_Memory_Read
 13076  1C9E  0821               	movf	??_Flash_Memory_Read,w
 13077  1C9F  00A2               	movwf	Flash_Memory_Read@i
 13078                           
 13079                           ;MCU_B1.c: 1009: ret = PMDATL;
 13080  1CA0  0023               	movlb	3	; select bank3
 13081  1CA1  0813               	movf	19,w	;volatile
 13082  1CA2  0020               	movlb	0	; select bank0
 13083  1CA3  00A1               	movwf	??_Flash_Memory_Read
 13084  1CA4  0821               	movf	??_Flash_Memory_Read,w
 13085  1CA5  00A4               	movwf	Flash_Memory_Read@ret
 13086                           
 13087                           ;MCU_B1.c: 1010: return ret;
 13088  1CA6  0824               	movf	Flash_Memory_Read@ret,w
 13089  1CA7  0008               	return
 13090  1CA8                     __end_of_Flash_Memory_Read:	
 13091                           
 13092                           	psect	text84
 13093  0644                     __ptext84:	
 13094 ;; *************** function _Exception_Main *****************
 13095 ;; Defined at:
 13096 ;;		line 499 in file "../src/main_B1.c"
 13097 ;; Parameters:    Size  Location     Type
 13098 ;;		None
 13099 ;; Auto vars:     Size  Location     Type
 13100 ;;  i               2   20[BANK0 ] int 
 13101 ;;  i               2   18[BANK0 ] int 
 13102 ;;  lights          1   22[BANK0 ] unsigned char 
 13103 ;;  error           1   17[BANK0 ] unsigned char 
 13104 ;;  count           1   16[BANK0 ] unsigned char 
 13105 ;;  status          1   15[BANK0 ] unsigned char 
 13106 ;; Return value:  Size  Location     Type
 13107 ;;		None               void
 13108 ;; Registers used:
 13109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13110 ;; Tracked objects:
 13111 ;;		On entry : 0/0
 13112 ;;		On exit  : 0/0
 13113 ;;		Unchanged: 0/0
 13114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;Total ram usage:        9 bytes
 13120 ;; Hardware stack levels used:    1
 13121 ;; Hardware stack levels required when called:    7
 13122 ;; This function calls:
 13123 ;;		_getDimmerLights_Line
 13124 ;;		_getDimmerLights_Status
 13125 ;;		_getMain_All_Error_Status
 13126 ;;		_getMain_All_LightsStatus
 13127 ;;		_setBuz
 13128 ;;		_setDimmerLights_SwOff
 13129 ;;		_setLED
 13130 ;; This function is called by:
 13131 ;;		_main
 13132 ;; This function uses a non-reentrant model
 13133 ;;
 13134                           
 13135                           
 13136                           ;psect for function _Exception_Main
 13137  0644                     _Exception_Main:	
 13138                           
 13139                           ;main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13140                           
 13141                           ;incstack = 0
 13142                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13143  0644  3000               	movlw	0
 13144  0645  3190  205A  3186   	fcall	_getMain_All_Error_Status
 13145  0648  0020               	movlb	0	; select bank0
 13146  0649  00AE               	movwf	??_Exception_Main
 13147  064A  082E               	movf	??_Exception_Main,w
 13148  064B  00B1               	movwf	Exception_Main@error
 13149                           
 13150                           ;main_B1.c: 501: char lights = 0, count = 2;
 13151  064C  01B6               	clrf	Exception_Main@lights
 13152  064D  3002               	movlw	2
 13153  064E  00AE               	movwf	??_Exception_Main
 13154  064F  082E               	movf	??_Exception_Main,w
 13155  0650  00B0               	movwf	Exception_Main@count
 13156                           
 13157                           ;main_B1.c: 502: char status = 0;
 13158  0651  01AF               	clrf	Exception_Main@status
 13159                           
 13160                           ;main_B1.c: 504: if (myMain.Error_Run == 1) {
 13161  0652  0022               	movlb	2	; select bank2
 13162  0653  1DAA               	btfss	(_myMain^(0+256)+10),3
 13163  0654  2E64               	goto	l9987
 13164                           
 13165                           ;main_B1.c: 505: if (error == 0) {
 13166  0655  0020               	movlb	0	; select bank0
 13167  0656  08B1               	movf	Exception_Main@error,f
 13168  0657  1D03               	skipz
 13169  0658  0008               	return
 13170                           
 13171                           ;main_B1.c: 506: myMain.Error_Run = 0;
 13172  0659  0022               	movlb	2	; select bank2
 13173  065A  11AA               	bcf	(_myMain^(0+256)+10),3
 13174                           
 13175                           ;main_B1.c: 509: setLED(99, 10);
 13176  065B  300A               	movlw	10
 13177  065C  0020               	movlb	0	; select bank0
 13178  065D  00AE               	movwf	??_Exception_Main
 13179  065E  082E               	movf	??_Exception_Main,w
 13180  065F  00A3               	movwf	setLED@command
 13181  0660  3063               	movlw	99
 13182  0661  3194  2451         	fcall	_setLED
 13183                           
 13184                           ;main_B1.c: 522: }
 13185                           ;main_B1.c: 523: } else {
 13186  0663  0008               	return
 13187  0664                     l9987:	
 13188                           
 13189                           ;main_B1.c: 524: if (error != 0) {
 13190  0664  0020               	movlb	0	; select bank0
 13191  0665  0831               	movf	Exception_Main@error,w
 13192  0666  1903               	btfsc	3,2
 13193  0667  0008               	return
 13194                           
 13195                           ;main_B1.c: 525: myMain.Error_Run = 1;
 13196  0668  0022               	movlb	2	; select bank2
 13197  0669  15AA               	bsf	(_myMain^(0+256)+10),3
 13198                           
 13199                           ;main_B1.c: 527: setLED(99, 11);
 13200  066A  300B               	movlw	11
 13201  066B  0020               	movlb	0	; select bank0
 13202  066C  00AE               	movwf	??_Exception_Main
 13203  066D  082E               	movf	??_Exception_Main,w
 13204  066E  00A3               	movwf	setLED@command
 13205  066F  3063               	movlw	99
 13206  0670  3194  2451  3186   	fcall	_setLED
 13207                           
 13208                           ;main_B1.c: 538: switch (error) {
 13209  0673  2F10               	goto	l10035
 13210  0674                     l9993:	
 13211                           ;main_B1.c: 539: case 2:
 13212                           
 13213                           
 13214                           ;main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13215  0674  319B  2320  3186   	fcall	_getMain_All_LightsStatus
 13216  0677  3A01               	xorlw	1
 13217  0678  1D03               	skipz
 13218  0679  2E83               	goto	l9997
 13219                           
 13220                           ;main_B1.c: 547: setBuz(10, 300);
 13221  067A  302C               	movlw	44
 13222  067B  0020               	movlb	0	; select bank0
 13223  067C  00AA               	movwf	setBuz@time
 13224  067D  3001               	movlw	1
 13225  067E  00AB               	movwf	setBuz@time+1
 13226  067F  300A               	movlw	10
 13227  0680  3194  24F8  3186   	fcall	_setBuz
 13228  0683                     l9997:	
 13229                           
 13230                           ;main_B1.c: 548: }
 13231                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13232  0683  0020               	movlb	0	; select bank0
 13233  0684  01B2               	clrf	Exception_Main@i
 13234  0685  01B3               	clrf	Exception_Main@i+1
 13235  0686                     l10007:	
 13236  0686  0833               	movf	Exception_Main@i+1,w
 13237  0687  3A80               	xorlw	128
 13238  0688  00AE               	movwf	??_Exception_Main
 13239  0689  3080               	movlw	128
 13240  068A  022E               	subwf	??_Exception_Main,w
 13241  068B  1D03               	skipz
 13242  068C  2E8F               	goto	u11705
 13243  068D  0830               	movf	Exception_Main@count,w
 13244  068E  0232               	subwf	Exception_Main@i,w
 13245  068F                     u11705:	
 13246  068F  1803               	btfsc	3,0
 13247  0690  2EB1               	goto	u11700
 13248                           
 13249                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13250  0691  0020               	movlb	0	; select bank0
 13251  0692  0832               	movf	Exception_Main@i,w
 13252  0693  3E01               	addlw	1
 13253  0694  319A  225D  3186   	fcall	_getDimmerLights_Status
 13254  0697  3A01               	xorlw	1
 13255  0698  1D03               	skipz
 13256  0699  2EAB               	goto	l10005
 13257                           
 13258                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13259  069A  0021               	movlb	1	; select bank1
 13260  069B  084F               	movf	_DimmerLights^(0+128),w
 13261  069C  0086               	movwf	6
 13262  069D  3001               	movlw	1	; select bank2/3
 13263  069E  0087               	movwf	7
 13264  069F  1401               	bsf	1,0
 13265                           
 13266                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13267  06A0  0A4F               	incf	_DimmerLights^(0+128),w
 13268  06A1  0086               	movwf	6
 13269  06A2  3001               	movlw	1	; select bank2/3
 13270  06A3  0087               	movwf	7
 13271  06A4  1001               	bcf	1,0
 13272                           
 13273                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13274  06A5  0020               	movlb	0	; select bank0
 13275  06A6  0832               	movf	Exception_Main@i,w
 13276  06A7  3E01               	addlw	1
 13277  06A8  3191  212E  3186   	fcall	_setDimmerLights_SwOff
 13278  06AB                     l10005:	
 13279  06AB  3001               	movlw	1
 13280  06AC  0020               	movlb	0	; select bank0
 13281  06AD  07B2               	addwf	Exception_Main@i,f
 13282  06AE  3000               	movlw	0
 13283  06AF  3DB3               	addwfc	Exception_Main@i+1,f
 13284  06B0  2E86               	goto	l10007
 13285  06B1                     u11700:	
 13286  06B1  0020               	movlb	0	; select bank0
 13287  06B2  0008               	return
 13288  06B3                     l10009:	
 13289                           ;main_B1.c: 561: case 3:
 13290                           
 13291                           ;main_B1.c: 556: }
 13292                           ;main_B1.c: 557: }
 13293                           ;main_B1.c: 560: break;
 13294                           
 13295                           
 13296                           ;main_B1.c: 563: setBuz(5, 300);
 13297  06B3  302C               	movlw	44
 13298  06B4  0020               	movlb	0	; select bank0
 13299  06B5  00AA               	movwf	setBuz@time
 13300  06B6  3001               	movlw	1
 13301  06B7  00AB               	movwf	setBuz@time+1
 13302  06B8  3005               	movlw	5
 13303  06B9  3194  24F8  3186   	fcall	_setBuz
 13304                           
 13305                           ;main_B1.c: 564: lights = getDimmerLights_Line();
 13306  06BC  319B  236C  3186   	fcall	_getDimmerLights_Line
 13307  06BF  0020               	movlb	0	; select bank0
 13308  06C0  00AE               	movwf	??_Exception_Main
 13309  06C1  082E               	movf	??_Exception_Main,w
 13310  06C2  00B6               	movwf	Exception_Main@lights
 13311                           
 13312                           ;main_B1.c: 565: if (lights == 0) {
 13313  06C3  08B6               	movf	Exception_Main@lights,f
 13314  06C4  1D03               	skipz
 13315  06C5  2EF5               	goto	l10027
 13316                           
 13317                           ;main_B1.c: 567: for (int i = 0; i < count; i++) {
 13318  06C6  01B4               	clrf	Exception_Main@i_6859
 13319  06C7  01B5               	clrf	Exception_Main@i_6859+1
 13320  06C8                     l10025:	
 13321  06C8  0835               	movf	Exception_Main@i_6859+1,w
 13322  06C9  3A80               	xorlw	128
 13323  06CA  00AE               	movwf	??_Exception_Main
 13324  06CB  3080               	movlw	128
 13325  06CC  022E               	subwf	??_Exception_Main,w
 13326  06CD  1D03               	skipz
 13327  06CE  2ED1               	goto	u11735
 13328  06CF  0830               	movf	Exception_Main@count,w
 13329  06D0  0234               	subwf	Exception_Main@i_6859,w
 13330  06D1                     u11735:	
 13331  06D1  1803               	btfsc	3,0
 13332  06D2  2EF3               	goto	u11730
 13333                           
 13334                           ;main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13335  06D3  0020               	movlb	0	; select bank0
 13336  06D4  0834               	movf	Exception_Main@i_6859,w
 13337  06D5  3E01               	addlw	1
 13338  06D6  319A  225D  3186   	fcall	_getDimmerLights_Status
 13339  06D9  3A01               	xorlw	1
 13340  06DA  1D03               	skipz
 13341  06DB  2EED               	goto	l10023
 13342                           
 13343                           ;main_B1.c: 570: DimmerLights->SwFlag = 1;
 13344  06DC  0021               	movlb	1	; select bank1
 13345  06DD  084F               	movf	_DimmerLights^(0+128),w
 13346  06DE  0086               	movwf	6
 13347  06DF  3001               	movlw	1	; select bank2/3
 13348  06E0  0087               	movwf	7
 13349  06E1  1401               	bsf	1,0
 13350                           
 13351                           ;main_B1.c: 571: DimmerLights->Status = 0;
 13352  06E2  0A4F               	incf	_DimmerLights^(0+128),w
 13353  06E3  0086               	movwf	6
 13354  06E4  3001               	movlw	1	; select bank2/3
 13355  06E5  0087               	movwf	7
 13356  06E6  1001               	bcf	1,0
 13357                           
 13358                           ;main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13359  06E7  0020               	movlb	0	; select bank0
 13360  06E8  0834               	movf	Exception_Main@i_6859,w
 13361  06E9  3E01               	addlw	1
 13362  06EA  3191  212E  3186   	fcall	_setDimmerLights_SwOff
 13363  06ED                     l10023:	
 13364  06ED  3001               	movlw	1
 13365  06EE  0020               	movlb	0	; select bank0
 13366  06EF  07B4               	addwf	Exception_Main@i_6859,f
 13367  06F0  3000               	movlw	0
 13368  06F1  3DB5               	addwfc	Exception_Main@i_6859+1,f
 13369  06F2  2EC8               	goto	l10025
 13370  06F3                     u11730:	
 13371  06F3  0020               	movlb	0	; select bank0
 13372  06F4  0008               	return
 13373  06F5                     l10027:	
 13374                           ;main_B1.c: 573: }
 13375                           ;main_B1.c: 574: }
 13376                           ;main_B1.c: 575: } else {
 13377                           
 13378                           
 13379                           ;main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13380  06F5  0020               	movlb	0	; select bank0
 13381  06F6  0836               	movf	Exception_Main@lights,w
 13382  06F7  319A  225D  3186   	fcall	_getDimmerLights_Status
 13383  06FA  3A01               	xorlw	1
 13384  06FB  1903               	btfsc	3,2
 13385  06FC  2EFF               	goto	l10029
 13386  06FD  0020               	movlb	0	; select bank0
 13387  06FE  0008               	return
 13388  06FF                     l10029:	
 13389                           
 13390                           ;main_B1.c: 579: DimmerLights->SwFlag = 1;
 13391  06FF  0021               	movlb	1	; select bank1
 13392  0700  084F               	movf	_DimmerLights^(0+128),w
 13393  0701  0086               	movwf	6
 13394  0702  3001               	movlw	1	; select bank2/3
 13395  0703  0087               	movwf	7
 13396  0704  1401               	bsf	1,0
 13397                           
 13398                           ;main_B1.c: 580: DimmerLights->Status = 0;
 13399  0705  0A4F               	incf	_DimmerLights^(0+128),w
 13400  0706  0086               	movwf	6
 13401  0707  3001               	movlw	1	; select bank2/3
 13402  0708  0087               	movwf	7
 13403  0709  1001               	bcf	1,0
 13404                           
 13405                           ;main_B1.c: 581: setDimmerLights_SwOff(lights);
 13406  070A  0020               	movlb	0	; select bank0
 13407  070B  0836               	movf	Exception_Main@lights,w
 13408  070C  3191  212E         	fcall	_setDimmerLights_SwOff
 13409  070E  0020               	movlb	0	; select bank0
 13410  070F  0008               	return
 13411  0710                     l10035:	
 13412                           ;main_B1.c: 586: }
 13413                           
 13414                           ;main_B1.c: 582: }
 13415                           ;main_B1.c: 583: }
 13416                           ;main_B1.c: 585: break;
 13417                           
 13418  0710  0020               	movlb	0	; select bank0
 13419  0711  0831               	movf	Exception_Main@error,w
 13420                           
 13421                           ; Switch size 1, requested type "space"
 13422                           ; Number of cases is 2, Range of values is 2 to 3
 13423                           ; switch strategies available:
 13424                           ; Name         Instructions Cycles
 13425                           ; simple_byte            7     4 (average)
 13426                           ; direct_byte           13     9 (fixed)
 13427                           ; jumptable            263     9 (fixed)
 13428                           ;	Chosen strategy is simple_byte
 13429  0712  3A02               	xorlw	2	; case 2
 13430  0713  1903               	skipnz
 13431  0714  2E74               	goto	l9993
 13432  0715  3A01               	xorlw	1	; case 3
 13433  0716  1903               	skipnz
 13434  0717  2EB3               	goto	l10009
 13435  0718  2F1A               	goto	l2891
 13436  0719  0008               	return
 13437  071A                     l2891:	
 13438  071A  0008               	return
 13439  071B                     __end_of_Exception_Main:	
 13440                           
 13441                           	psect	text85
 13442  1B6C                     __ptext85:	
 13443 ;; *************** function _getDimmerLights_Line *****************
 13444 ;; Defined at:
 13445 ;;		line 978 in file "../src/Dimmer_B1.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;  line            1    2[BANK0 ] unsigned char 
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  1    wreg      unsigned char 
 13452 ;; Registers used:
 13453 ;;		wreg, status,2
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;Total ram usage:        2 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    5
 13466 ;; This function calls:
 13467 ;;		Nothing
 13468 ;; This function is called by:
 13469 ;;		_Exception_Main
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           
 13474                           ;psect for function _getDimmerLights_Line
 13475  1B6C                     _getDimmerLights_Line:	
 13476                           
 13477                           ;Dimmer_B1.c: 979: char line = 0;
 13478                           
 13479                           ;incstack = 0
 13480                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13481  1B6C  0020               	movlb	0	; select bank0
 13482  1B6D  01A2               	clrf	getDimmerLights_Line@line
 13483                           
 13484                           ;Dimmer_B1.c: 981: if (DimmerLights1.Line == 1) {
 13485  1B6E  0022               	movlb	2	; select bank2
 13486  1B6F  1CE9               	btfss	(_DimmerLights1^(0+256)+1),1
 13487  1B70  2B75               	goto	l910
 13488                           
 13489                           ;Dimmer_B1.c: 982: line = 1;
 13490  1B71  0020               	movlb	0	; select bank0
 13491  1B72  01A2               	clrf	getDimmerLights_Line@line
 13492  1B73  0AA2               	incf	getDimmerLights_Line@line,f
 13493                           
 13494                           ;Dimmer_B1.c: 983: }
 13495  1B74  2B7D               	goto	l911
 13496  1B75                     l910:	
 13497                           
 13498                           ;Dimmer_B1.c: 986: else if (DimmerLights2.Line == 1) {
 13499  1B75  0023               	movlb	3	; select bank3
 13500  1B76  1CD1               	btfss	(_DimmerLights2^(0+384)+1),1
 13501  1B77  2B7D               	goto	l911
 13502                           
 13503                           ;Dimmer_B1.c: 987: line = 2;
 13504  1B78  3002               	movlw	2
 13505  1B79  0020               	movlb	0	; select bank0
 13506  1B7A  00A1               	movwf	??_getDimmerLights_Line
 13507  1B7B  0821               	movf	??_getDimmerLights_Line,w
 13508  1B7C  00A2               	movwf	getDimmerLights_Line@line
 13509  1B7D                     l911:	
 13510                           
 13511                           ;Dimmer_B1.c: 988: }
 13512                           ;Dimmer_B1.c: 995: return line;
 13513  1B7D  0020               	movlb	0	; select bank0
 13514  1B7E  0822               	movf	getDimmerLights_Line@line,w
 13515  1B7F  0008               	return
 13516  1B80                     __end_of_getDimmerLights_Line:	
 13517                           
 13518                           	psect	text86
 13519  1DCA                     __ptext86:	
 13520 ;; *************** function _DimmerLights_Main *****************
 13521 ;; Defined at:
 13522 ;;		line 736 in file "../src/Dimmer_B1.c"
 13523 ;; Parameters:    Size  Location     Type
 13524 ;;		None
 13525 ;; Auto vars:     Size  Location     Type
 13526 ;;		None
 13527 ;; Return value:  Size  Location     Type
 13528 ;;		None               void
 13529 ;; Registers used:
 13530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13531 ;; Tracked objects:
 13532 ;;		On entry : 0/0
 13533 ;;		On exit  : 0/0
 13534 ;;		Unchanged: 0/0
 13535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13540 ;;Total ram usage:        0 bytes
 13541 ;; Hardware stack levels used:    1
 13542 ;; Hardware stack levels required when called:   10
 13543 ;; This function calls:
 13544 ;;		_getLoad_OK
 13545 ;;		_getMain_All_Error_Status
 13546 ;;		_getMain_All_LightsStatus
 13547 ;;		_setDimmerLights_Main
 13548 ;; This function is called by:
 13549 ;;		_main
 13550 ;; This function uses a non-reentrant model
 13551 ;;
 13552                           
 13553                           
 13554                           ;psect for function _DimmerLights_Main
 13555  1DCA                     _DimmerLights_Main:	
 13556                           
 13557                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13558                           
 13559                           ;incstack = 0
 13560                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13561  1DCA  0022               	movlb	2	; select bank2
 13562  1DCB  1CB9               	btfss	_Dimmer^(0+256),1
 13563  1DCC  2DE2               	goto	l9753
 13564                           
 13565                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13566  1DCD  3199  217F  319D   	fcall	_getLoad_OK
 13567  1DD0  3A01               	xorlw	1
 13568  1DD1  1903               	skipnz
 13569  1DD2  2DE0               	goto	l852
 13570  1DD3  3000               	movlw	0
 13571  1DD4  3190  205A  319D   	fcall	_getMain_All_Error_Status
 13572  1DD7  3800               	iorlw	0
 13573  1DD8  1D03               	skipz
 13574  1DD9  2DE0               	goto	l852
 13575  1DDA  319B  2320  319D   	fcall	_getMain_All_LightsStatus
 13576  1DDD  3800               	iorlw	0
 13577  1DDE  1D03               	skipz
 13578  1DDF  2DE2               	goto	l9753
 13579  1DE0                     l852:	
 13580                           
 13581                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13582  1DE0  0022               	movlb	2	; select bank2
 13583  1DE1  10B9               	bcf	_Dimmer^(0+256),1
 13584  1DE2                     l9753:	
 13585                           
 13586                           ;Dimmer_B1.c: 742: }
 13587                           ;Dimmer_B1.c: 743: }
 13588                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13589  1DE2  3001               	movlw	1
 13590  1DE3  3197  2798  319D   	fcall	_setDimmerLights_Main
 13591                           
 13592                           ;Dimmer_B1.c: 751: setDimmerLights_Main(2);
 13593  1DE6  3002               	movlw	2
 13594  1DE7  3197  2798         	fcall	_setDimmerLights_Main
 13595  1DE9  0008               	return
 13596  1DEA                     __end_of_DimmerLights_Main:	
 13597                           
 13598                           	psect	text87
 13599  1798                     __ptext87:	
 13600 ;; *************** function _setDimmerLights_Main *****************
 13601 ;; Defined at:
 13602 ;;		line 765 in file "../src/Dimmer_B1.c"
 13603 ;; Parameters:    Size  Location     Type
 13604 ;;  lights          1    wreg     unsigned char 
 13605 ;; Auto vars:     Size  Location     Type
 13606 ;;  lights          1    4[BANK1 ] unsigned char 
 13607 ;; Return value:  Size  Location     Type
 13608 ;;		None               void
 13609 ;; Registers used:
 13610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13611 ;; Tracked objects:
 13612 ;;		On entry : 0/0
 13613 ;;		On exit  : 0/0
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;Total ram usage:        1 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; Hardware stack levels required when called:    9
 13623 ;; This function calls:
 13624 ;;		_DimmerLights_SelectPointer
 13625 ;;		_getDimmerLights_Allow_Condition
 13626 ;;		_getMain_All_LightsStatus
 13627 ;;		_setDimmerLights_Dimming
 13628 ;;		_setDimmerLights_OnOff
 13629 ;; This function is called by:
 13630 ;;		_DimmerLights_Main
 13631 ;; This function uses a non-reentrant model
 13632 ;;
 13633                           
 13634                           
 13635                           ;psect for function _setDimmerLights_Main
 13636  1798                     _setDimmerLights_Main:	
 13637                           
 13638                           ;incstack = 0
 13639                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13640                           ;setDimmerLights_Main@lights stored from wreg
 13641  1798  0021               	movlb	1	; select bank1
 13642  1799  00E9               	movwf	setDimmerLights_Main@lights^(0+128)
 13643                           
 13644                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13645  179A  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13646  179B  319C  2400  3197   	fcall	_DimmerLights_SelectPointer
 13647                           
 13648                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13649  179E  0021               	movlb	1	; select bank1
 13650  179F  084F               	movf	_DimmerLights^(0+128),w
 13651  17A0  0086               	movwf	6
 13652  17A1  3001               	movlw	1	; select bank2/3
 13653  17A2  0087               	movwf	7
 13654  17A3  1C81               	btfss	1,1
 13655  17A4  2FC4               	goto	l9491
 13656                           
 13657                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13658  17A5  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13659  17A6  3192  221E  3197   	fcall	_getDimmerLights_Allow_Condition
 13660  17A9  3800               	iorlw	0
 13661  17AA  1D03               	skipz
 13662  17AB  0008               	return
 13663                           
 13664                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13665  17AC  0021               	movlb	1	; select bank1
 13666  17AD  084F               	movf	_DimmerLights^(0+128),w
 13667  17AE  0086               	movwf	6
 13668  17AF  3001               	movlw	1	; select bank2/3
 13669  17B0  0087               	movwf	7
 13670  17B1  1081               	bcf	1,1
 13671                           
 13672                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13673  17B2  084F               	movf	_DimmerLights^(0+128),w
 13674  17B3  0086               	movwf	6
 13675  17B4  3001               	movlw	1	; select bank2/3
 13676  17B5  0087               	movwf	7
 13677  17B6  1D01               	btfss	1,2
 13678  17B7  2FBE               	goto	l9489
 13679                           
 13680                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13681  17B8  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13682  17B9  0AE5               	incf	setDimmerLights_OnOff@command^(0+128),f
 13683  17BA  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13684  17BB  3187  271B         	fcall	_setDimmerLights_OnOff
 13685                           
 13686                           ;Dimmer_B1.c: 773: } else {
 13687  17BD  0008               	return
 13688  17BE                     l9489:	
 13689                           
 13690                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13691  17BE  0021               	movlb	1	; select bank1
 13692  17BF  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13693  17C0  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13694  17C1  3187  271B         	fcall	_setDimmerLights_OnOff
 13695                           
 13696                           ;Dimmer_B1.c: 775: }
 13697                           ;Dimmer_B1.c: 776: }
 13698                           ;Dimmer_B1.c: 777: } else {
 13699  17C3  0008               	return
 13700  17C4                     l9491:	
 13701                           
 13702                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13703  17C4  319B  2320  3197   	fcall	_getMain_All_LightsStatus
 13704  17C7  3A01               	xorlw	1
 13705  17C8  1D03               	skipz
 13706  17C9  2FF3               	goto	l9503
 13707                           
 13708                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13709  17CA  0021               	movlb	1	; select bank1
 13710  17CB  084F               	movf	_DimmerLights^(0+128),w
 13711  17CC  0086               	movwf	6
 13712  17CD  3001               	movlw	1	; select bank2/3
 13713  17CE  0087               	movwf	7
 13714  17CF  1E01               	btfss	1,4
 13715  17D0  0008               	return
 13716                           
 13717                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13718  17D1  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13719  17D2  3192  221E  3197   	fcall	_getDimmerLights_Allow_Condition
 13720  17D5  3800               	iorlw	0
 13721  17D6  1D03               	skipz
 13722  17D7  0008               	return
 13723                           
 13724                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13725  17D8  0021               	movlb	1	; select bank1
 13726  17D9  084F               	movf	_DimmerLights^(0+128),w
 13727  17DA  0086               	movwf	6
 13728  17DB  3001               	movlw	1	; select bank2/3
 13729  17DC  0087               	movwf	7
 13730  17DD  1201               	bcf	1,4
 13731                           
 13732                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13733  17DE  084F               	movf	_DimmerLights^(0+128),w
 13734  17DF  0086               	movwf	6
 13735  17E0  3001               	movlw	1	; select bank2/3
 13736  17E1  0087               	movwf	7
 13737  17E2  1E81               	btfss	1,5
 13738  17E3  2FEC               	goto	l9501
 13739                           
 13740                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13741  17E4  0020               	movlb	0	; select bank0
 13742  17E5  01EB               	clrf	setDimmerLights_Dimming@status
 13743  17E6  0AEB               	incf	setDimmerLights_Dimming@status,f
 13744  17E7  0021               	movlb	1	; select bank1
 13745  17E8  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13746  17E9  3193  23AE         	fcall	_setDimmerLights_Dimming
 13747                           
 13748                           ;Dimmer_B1.c: 784: } else {
 13749  17EB  0008               	return
 13750  17EC                     l9501:	
 13751                           
 13752                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13753  17EC  0020               	movlb	0	; select bank0
 13754  17ED  01EB               	clrf	setDimmerLights_Dimming@status
 13755  17EE  0021               	movlb	1	; select bank1
 13756  17EF  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13757  17F0  3193  23AE         	fcall	_setDimmerLights_Dimming
 13758                           
 13759                           ;Dimmer_B1.c: 786: }
 13760                           ;Dimmer_B1.c: 787: }
 13761                           ;Dimmer_B1.c: 788: }
 13762                           ;Dimmer_B1.c: 789: } else {
 13763  17F2  0008               	return
 13764  17F3                     l9503:	
 13765                           
 13766                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13767  17F3  0021               	movlb	1	; select bank1
 13768  17F4  084F               	movf	_DimmerLights^(0+128),w
 13769  17F5  0086               	movwf	6
 13770  17F6  3001               	movlw	1	; select bank2/3
 13771  17F7  0087               	movwf	7
 13772  17F8  1E01               	btfss	1,4
 13773  17F9  0008               	return
 13774                           
 13775                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13776  17FA  084F               	movf	_DimmerLights^(0+128),w
 13777  17FB  0086               	movwf	6
 13778  17FC  3001               	movlw	1	; select bank2/3
 13779  17FD  0087               	movwf	7
 13780  17FE  1201               	bcf	1,4
 13781  17FF  0008               	return
 13782  1800                     __end_of_setDimmerLights_Main:	
 13783                           
 13784                           	psect	text88
 13785  071B                     __ptext88:	
 13786 ;; *************** function _setDimmerLights_OnOff *****************
 13787 ;; Defined at:
 13788 ;;		line 799 in file "../src/Dimmer_B1.c"
 13789 ;; Parameters:    Size  Location     Type
 13790 ;;  lights          1    wreg     unsigned char 
 13791 ;;  command         1    0[BANK1 ] unsigned char 
 13792 ;; Auto vars:     Size  Location     Type
 13793 ;;  lights          1    3[BANK1 ] unsigned char 
 13794 ;; Return value:  Size  Location     Type
 13795 ;;		None               void
 13796 ;; Registers used:
 13797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13798 ;; Tracked objects:
 13799 ;;		On entry : 0/0
 13800 ;;		On exit  : 0/0
 13801 ;;		Unchanged: 0/0
 13802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13803 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13805 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13806 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13807 ;;Total ram usage:        4 bytes
 13808 ;; Hardware stack levels used:    1
 13809 ;; Hardware stack levels required when called:    8
 13810 ;; This function calls:
 13811 ;;		_getCmd_Status
 13812 ;;		_getDelayOff_GO
 13813 ;;		_getDimmerLights_PercentToValue
 13814 ;;		_getDimmerLights_ValueToPercent
 13815 ;;		_getMain_All_LightsStatus
 13816 ;;		_setCmd_Status
 13817 ;;		_setDelayOff_GO
 13818 ;;		_setDimmerIntr_ControlStatus
 13819 ;;		_setDimmerIntr_DimmingValue
 13820 ;;		_setDimmerIntr_Dimming_RF
 13821 ;;		_setDimmerIntr_MaxmumValue
 13822 ;;		_setDimmerLights_Line
 13823 ;;		_setLED
 13824 ;;		_setProductData
 13825 ;;		_setRF_DimmerLights
 13826 ;;		_setTxData
 13827 ;; This function is called by:
 13828 ;;		_setDimmerLights_Main
 13829 ;; This function uses a non-reentrant model
 13830 ;;
 13831                           
 13832                           
 13833                           ;psect for function _setDimmerLights_OnOff
 13834  071B                     _setDimmerLights_OnOff:	
 13835                           
 13836                           ;incstack = 0
 13837                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13838                           ;setDimmerLights_OnOff@lights stored from wreg
 13839  071B  0021               	movlb	1	; select bank1
 13840  071C  00E8               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13841                           
 13842                           ;Dimmer_B1.c: 801: if (command == 1) {
 13843  071D  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13844  071E  3A01               	xorlw	1
 13845  071F  1D03               	skipz
 13846  0720  2F88               	goto	l9363
 13847                           
 13848                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13849  0721  0020               	movlb	0	; select bank0
 13850  0722  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13851  0723  0AA1               	incf	setDimmerIntr_ControlStatus@command,f
 13852  0724  0021               	movlb	1	; select bank1
 13853  0725  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13854  0726  319F  2773  3187   	fcall	_setDimmerIntr_ControlStatus
 13855                           
 13856                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13857  0729  0022               	movlb	2	; select bank2
 13858  072A  1539               	bsf	_Dimmer^(0+256),2
 13859                           
 13860                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13861  072B  0021               	movlb	1	; select bank1
 13862  072C  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13863  072D  319D  2514  3187   	fcall	_setDimmerLights_Line
 13864                           
 13865                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13866  0730  0020               	movlb	0	; select bank0
 13867  0731  01A3               	clrf	setLED@command
 13868  0732  0021               	movlb	1	; select bank1
 13869  0733  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13870  0734  3194  2451  3187   	fcall	_setLED
 13871                           
 13872                           ;Dimmer_B1.c: 818: setDimmerIntr_DimmingValue(lights, ((char)(60*0.65)));
 13873  0737  3027               	movlw	39
 13874  0738  0021               	movlb	1	; select bank1
 13875  0739  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13876  073A  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13877  073B  0020               	movlb	0	; select bank0
 13878  073C  00A1               	movwf	setDimmerIntr_DimmingValue@value
 13879  073D  0021               	movlb	1	; select bank1
 13880  073E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13881  073F  319C  242E  3187   	fcall	_setDimmerIntr_DimmingValue
 13882                           
 13883                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingRun == 1) {
 13884  0742  0021               	movlb	1	; select bank1
 13885  0743  0A4F               	incf	_DimmerLights^(0+128),w
 13886  0744  0086               	movwf	6
 13887  0745  3001               	movlw	1	; select bank2/3
 13888  0746  0087               	movwf	7
 13889  0747  1F01               	btfss	1,6
 13890  0748  2F6D               	goto	l9359
 13891                           
 13892                           ;Dimmer_B1.c: 821: DimmerLights->DimmingRun = 0;
 13893  0749  0A4F               	incf	_DimmerLights^(0+128),w
 13894  074A  0086               	movwf	6
 13895  074B  3001               	movlw	1	; select bank2/3
 13896  074C  0087               	movwf	7
 13897  074D  1301               	bcf	1,6
 13898                           
 13899                           ;Dimmer_B1.c: 822: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13900  074E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13901  074F  3E14               	addlw	20
 13902  0750  076D               	addwf	_product^(0+128),w
 13903  0751  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13904  0752  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13905  0753  0086               	movwf	6
 13906  0754  3002               	movlw	2	; select bank4/5
 13907  0755  0087               	movwf	7
 13908  0756  0801               	movf	1,w
 13909  0757  3197  2733  3187   	fcall	_getDimmerLights_PercentToValue
 13910  075A  0021               	movlb	1	; select bank1
 13911  075B  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13912  075C  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13913  075D  0020               	movlb	0	; select bank0
 13914  075E  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13915  075F  0021               	movlb	1	; select bank1
 13916  0760  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13917  0761  319C  2417  3187   	fcall	_setDimmerIntr_MaxmumValue
 13918                           
 13919                           ;Dimmer_B1.c: 823: setDimmerIntr_Dimming_RF(lights, 1);
 13920  0764  0020               	movlb	0	; select bank0
 13921  0765  01A1               	clrf	setDimmerIntr_Dimming_RF@command
 13922  0766  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
 13923  0767  0021               	movlb	1	; select bank1
 13924  0768  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13925  0769  319F  27A2  3187   	fcall	_setDimmerIntr_Dimming_RF
 13926                           
 13927                           ;Dimmer_B1.c: 824: } else {
 13928  076C  2FC0               	goto	l9381
 13929  076D                     l9359:	
 13930                           
 13931                           ;Dimmer_B1.c: 825: setDimmerIntr_MaxmumValue(lights, ((char)(60*0.65)));
 13932  076D  3027               	movlw	39
 13933  076E  0021               	movlb	1	; select bank1
 13934  076F  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13935  0770  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13936  0771  0020               	movlb	0	; select bank0
 13937  0772  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13938  0773  0021               	movlb	1	; select bank1
 13939  0774  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13940  0775  319C  2417  3187   	fcall	_setDimmerIntr_MaxmumValue
 13941                           
 13942                           ;Dimmer_B1.c: 826: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          60*0.65))));
 13943  0778  3027               	movlw	39
 13944  0779  3196  2669  3187   	fcall	_getDimmerLights_ValueToPercent
 13945  077C  0021               	movlb	1	; select bank1
 13946  077D  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13947  077E  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13948  077F  0020               	movlb	0	; select bank0
 13949  0780  00E3               	movwf	setProductData@value
 13950  0781  0021               	movlb	1	; select bank1
 13951  0782  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13952  0783  3E14               	addlw	20
 13953  0784  3199  21FC  3187   	fcall	_setProductData
 13954                           
 13955                           ;Dimmer_B1.c: 827: }
 13956                           ;Dimmer_B1.c: 830: } else if (command == 0) {
 13957  0787  2FC0               	goto	l9381
 13958  0788                     l9363:	
 13959  0788  0021               	movlb	1	; select bank1
 13960  0789  08E5               	movf	setDimmerLights_OnOff@command^(0+128),f
 13961  078A  1D03               	skipz
 13962  078B  2FC0               	goto	l9381
 13963                           
 13964                           ;Dimmer_B1.c: 831: setDimmerIntr_ControlStatus(lights, 0);
 13965  078C  0020               	movlb	0	; select bank0
 13966  078D  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13967  078E  0021               	movlb	1	; select bank1
 13968  078F  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13969  0790  319F  2773  3187   	fcall	_setDimmerIntr_ControlStatus
 13970                           
 13971                           ;Dimmer_B1.c: 833: Dimmer.Load_Status = 0;
 13972  0793  0022               	movlb	2	; select bank2
 13973  0794  1139               	bcf	_Dimmer^(0+256),2
 13974                           
 13975                           ;Dimmer_B1.c: 834: setDimmerLights_Line(0);
 13976  0795  3000               	movlw	0
 13977  0796  319D  2514  3187   	fcall	_setDimmerLights_Line
 13978                           
 13979                           ;Dimmer_B1.c: 838: if (getDelayOff_GO(lights) == 1) {
 13980  0799  0021               	movlb	1	; select bank1
 13981  079A  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13982  079B  319A  226E  3187   	fcall	_getDelayOff_GO
 13983  079E  3A01               	xorlw	1
 13984  079F  1D03               	skipz
 13985  07A0  2FA9               	goto	l876
 13986                           
 13987                           ;Dimmer_B1.c: 839: setDelayOff_GO(lights, 0, 0);
 13988  07A1  0020               	movlb	0	; select bank0
 13989  07A2  01E6               	clrf	setDelayOff_GO@command
 13990  07A3  01E7               	clrf	setDelayOff_GO@value
 13991  07A4  0021               	movlb	1	; select bank1
 13992  07A5  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13993  07A6  318C  241D  3187   	fcall	_setDelayOff_GO
 13994  07A9                     l876:	
 13995                           
 13996                           ;Dimmer_B1.c: 840: }
 13997                           ;Dimmer_B1.c: 845: setLED(lights, 1);
 13998  07A9  0020               	movlb	0	; select bank0
 13999  07AA  01A3               	clrf	setLED@command
 14000  07AB  0AA3               	incf	setLED@command,f
 14001  07AC  0021               	movlb	1	; select bank1
 14002  07AD  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14003  07AE  3194  2451  3187   	fcall	_setLED
 14004                           
 14005                           ;Dimmer_B1.c: 850: if (lights == 1) {
 14006  07B1  0021               	movlb	1	; select bank1
 14007  07B2  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14008  07B3  3A01               	xorlw	1
 14009  07B4  1D03               	skipz
 14010  07B5  2FB9               	goto	l9377
 14011                           
 14012                           ;Dimmer_B1.c: 851: RA7 = 0;
 14013  07B6  0020               	movlb	0	; select bank0
 14014  07B7  138C               	bcf	12,7	;volatile
 14015                           
 14016                           ;Dimmer_B1.c: 853: }
 14017  07B8  2FC0               	goto	l9381
 14018  07B9                     l9377:	
 14019                           
 14020                           ;Dimmer_B1.c: 856: else if (lights == 2) {
 14021  07B9  0021               	movlb	1	; select bank1
 14022  07BA  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14023  07BB  3A02               	xorlw	2
 14024  07BC  1D03               	skipz
 14025  07BD  2FC0               	goto	l9381
 14026                           
 14027                           ;Dimmer_B1.c: 857: RB4 = 0;
 14028  07BE  0020               	movlb	0	; select bank0
 14029  07BF  120D               	bcf	13,4	;volatile
 14030  07C0                     l9381:	
 14031                           
 14032                           ;Dimmer_B1.c: 858: }
 14033                           ;Dimmer_B1.c: 864: }
 14034                           ;Dimmer_B1.c: 867: setRF_DimmerLights(lights, command);
 14035  07C0  0021               	movlb	1	; select bank1
 14036  07C1  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 14037  07C2  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 14038  07C3  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 14039  07C4  0020               	movlb	0	; select bank0
 14040  07C5  00E6               	movwf	setRF_DimmerLights@on
 14041  07C6  0021               	movlb	1	; select bank1
 14042  07C7  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14043  07C8  3196  26CE  3187   	fcall	_setRF_DimmerLights
 14044                           
 14045                           ;Dimmer_B1.c: 869: if (getCmd_Status(1) == 1) {
 14046  07CB  3001               	movlw	1
 14047  07CC  319A  22A1  3187   	fcall	_getCmd_Status
 14048  07CF  3A01               	xorlw	1
 14049  07D0  1D03               	skipz
 14050  07D1  2FED               	goto	l9395
 14051                           
 14052                           ;Dimmer_B1.c: 870: if (getMain_All_LightsStatus() == 0) {
 14053  07D2  319B  2320  3187   	fcall	_getMain_All_LightsStatus
 14054  07D5  3800               	iorlw	0
 14055  07D6  1D03               	skipz
 14056  07D7  0008               	return
 14057                           
 14058                           ;Dimmer_B1.c: 871: setCmd_Status(1, 0);
 14059  07D8  0020               	movlb	0	; select bank0
 14060  07D9  01A1               	clrf	setCmd_Status@cmd
 14061  07DA  3001               	movlw	1
 14062  07DB  319C  245C  3187   	fcall	_setCmd_Status
 14063                           
 14064                           ;Dimmer_B1.c: 872: setProductData(11, 0);
 14065  07DE  0020               	movlb	0	; select bank0
 14066  07DF  01E3               	clrf	setProductData@value
 14067  07E0  300B               	movlw	11
 14068  07E1  3199  21FC  3187   	fcall	_setProductData
 14069                           
 14070                           ;Dimmer_B1.c: 873: setProductData(17, 0);
 14071  07E4  0020               	movlb	0	; select bank0
 14072  07E5  01E3               	clrf	setProductData@value
 14073  07E6  3011               	movlw	17
 14074  07E7  3199  21FC  3187   	fcall	_setProductData
 14075                           
 14076                           ;Dimmer_B1.c: 874: setTxData();
 14077  07EA  318F  2745         	fcall	_setTxData
 14078                           
 14079                           ;Dimmer_B1.c: 875: }
 14080                           ;Dimmer_B1.c: 876: } else {
 14081  07EC  0008               	return
 14082  07ED                     l9395:	
 14083                           
 14084                           ;Dimmer_B1.c: 877: setTxData();
 14085  07ED  318F  2745         	fcall	_setTxData
 14086  07EF  0008               	return
 14087  07F0                     __end_of_setDimmerLights_OnOff:	
 14088                           
 14089                           	psect	text89
 14090  1451                     __ptext89:	
 14091 ;; *************** function _setLED *****************
 14092 ;; Defined at:
 14093 ;;		line 81 in file "../src/LED_B1.c"
 14094 ;; Parameters:    Size  Location     Type
 14095 ;;  led             1    wreg     unsigned char 
 14096 ;;  command         1    3[BANK0 ] unsigned char 
 14097 ;; Auto vars:     Size  Location     Type
 14098 ;;  led             1    4[BANK0 ] unsigned char 
 14099 ;; Return value:  Size  Location     Type
 14100 ;;		None               void
 14101 ;; Registers used:
 14102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14103 ;; Tracked objects:
 14104 ;;		On entry : 0/0
 14105 ;;		On exit  : 0/0
 14106 ;;		Unchanged: 0/0
 14107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14108 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14111 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14112 ;;Total ram usage:        2 bytes
 14113 ;; Hardware stack levels used:    1
 14114 ;; Hardware stack levels required when called:    6
 14115 ;; This function calls:
 14116 ;;		_LedPointSelect
 14117 ;; This function is called by:
 14118 ;;		_setDimmerLights_OnOff
 14119 ;;		_setLED_Initialization
 14120 ;;		_setSw_Initialization
 14121 ;;		_Exception_Main
 14122 ;; This function uses a non-reentrant model
 14123 ;;
 14124                           
 14125                           
 14126                           ;psect for function _setLED
 14127  1451                     _setLED:	
 14128                           
 14129                           ;incstack = 0
 14130                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14131                           ;setLED@led stored from wreg
 14132  1451  0020               	movlb	0	; select bank0
 14133  1452  00A4               	movwf	setLED@led
 14134                           
 14135                           ;LED_B1.c: 82: LedPointSelect(led);
 14136  1453  0824               	movf	setLED@led,w
 14137  1454  319D  25AA  3194   	fcall	_LedPointSelect
 14138                           
 14139                           ;LED_B1.c: 83: if (command == 0) {
 14140  1457  0020               	movlb	0	; select bank0
 14141  1458  08A3               	movf	setLED@command,f
 14142  1459  1D03               	skipz
 14143  145A  2C68               	goto	l7135
 14144                           
 14145                           ;LED_B1.c: 85: if (led == 1) {
 14146  145B  0824               	movf	setLED@led,w
 14147  145C  3A01               	xorlw	1
 14148  145D  1D03               	skipz
 14149  145E  2C60               	goto	l7127
 14150                           
 14151                           ;LED_B1.c: 89: RA3 = 1;
 14152  145F  158C               	bsf	12,3	;volatile
 14153  1460                     l7127:	
 14154                           
 14155                           ;LED_B1.c: 91: }
 14156                           ;LED_B1.c: 94: if (led == 2) {
 14157  1460  0824               	movf	setLED@led,w
 14158  1461  3A02               	xorlw	2
 14159  1462  1903               	btfsc	3,2
 14160                           
 14161                           ;LED_B1.c: 98: RC7 = 1;
 14162  1463  178E               	bsf	14,7	;volatile
 14163                           
 14164                           ;LED_B1.c: 100: }
 14165                           ;LED_B1.c: 112: if (led == 99) {
 14166  1464  0824               	movf	setLED@led,w
 14167  1465  3A63               	xorlw	99
 14168  1466  1903               	btfsc	3,2
 14169                           
 14170                           ;LED_B1.c: 116: RB5 = 1;
 14171  1467  168D               	bsf	13,5	;volatile
 14172  1468                     l7135:	
 14173                           
 14174                           ;LED_B1.c: 118: }
 14175                           ;LED_B1.c: 120: }
 14176                           ;LED_B1.c: 121: if (command == 1) {
 14177  1468  0823               	movf	setLED@command,w
 14178  1469  3A01               	xorlw	1
 14179  146A  1D03               	skipz
 14180  146B  2C79               	goto	l7149
 14181                           
 14182                           ;LED_B1.c: 123: if (led == 1) {
 14183  146C  0824               	movf	setLED@led,w
 14184  146D  3A01               	xorlw	1
 14185  146E  1D03               	skipz
 14186  146F  2C71               	goto	l7141
 14187                           
 14188                           ;LED_B1.c: 127: RA3 = 0;
 14189  1470  118C               	bcf	12,3	;volatile
 14190  1471                     l7141:	
 14191                           
 14192                           ;LED_B1.c: 129: }
 14193                           ;LED_B1.c: 132: if (led == 2) {
 14194  1471  0824               	movf	setLED@led,w
 14195  1472  3A02               	xorlw	2
 14196  1473  1903               	btfsc	3,2
 14197                           
 14198                           ;LED_B1.c: 136: RC7 = 0;
 14199  1474  138E               	bcf	14,7	;volatile
 14200                           
 14201                           ;LED_B1.c: 138: }
 14202                           ;LED_B1.c: 150: if (led == 99) {
 14203  1475  0824               	movf	setLED@led,w
 14204  1476  3A63               	xorlw	99
 14205  1477  1903               	btfsc	3,2
 14206                           
 14207                           ;LED_B1.c: 154: RB5 = 0;
 14208  1478  128D               	bcf	13,5	;volatile
 14209  1479                     l7149:	
 14210                           
 14211                           ;LED_B1.c: 156: }
 14212                           ;LED_B1.c: 158: }
 14213                           ;LED_B1.c: 159: if (command == 10) {
 14214  1479  0823               	movf	setLED@command,w
 14215  147A  3A0A               	xorlw	10
 14216  147B  1D03               	skipz
 14217  147C  2C99               	goto	l7165
 14218                           
 14219                           ;LED_B1.c: 160: LED->GO = 0;
 14220  147D  0021               	movlb	1	; select bank1
 14221  147E  0850               	movf	_LED^(0+128),w
 14222  147F  0086               	movwf	6
 14223  1480  3001               	movlw	1	; select bank2/3
 14224  1481  0087               	movwf	7
 14225  1482  1081               	bcf	1,1
 14226                           
 14227                           ;LED_B1.c: 161: LED->Time = 0;
 14228  1483  0A50               	incf	_LED^(0+128),w
 14229  1484  0086               	movwf	6
 14230  1485  3001               	movlw	1	; select bank2/3
 14231  1486  0087               	movwf	7
 14232  1487  3000               	movlw	0
 14233  1488  3FC0               	movwi [0]fsr1
 14234  1489  3FC1               	movwi [1]fsr1
 14235                           
 14236                           ;LED_B1.c: 163: if (led == 1) {
 14237  148A  0020               	movlb	0	; select bank0
 14238  148B  0824               	movf	setLED@led,w
 14239  148C  3A01               	xorlw	1
 14240  148D  1D03               	skipz
 14241  148E  2C91               	goto	l7157
 14242                           
 14243                           ;LED_B1.c: 167: RA3 = 1;
 14244  148F  158C               	bsf	12,3	;volatile
 14245                           
 14246                           ;LED_B1.c: 169: }
 14247  1490  2C95               	goto	l7161
 14248  1491                     l7157:	
 14249                           
 14250                           ;LED_B1.c: 172: else if (led == 2) {
 14251  1491  0824               	movf	setLED@led,w
 14252  1492  3A02               	xorlw	2
 14253  1493  1903               	btfsc	3,2
 14254                           
 14255                           ;LED_B1.c: 176: RC7 = 1;
 14256  1494  178E               	bsf	14,7	;volatile
 14257  1495                     l7161:	
 14258                           
 14259                           ;LED_B1.c: 178: }
 14260                           ;LED_B1.c: 190: if (led == 99) {
 14261  1495  0824               	movf	setLED@led,w
 14262  1496  3A63               	xorlw	99
 14263  1497  1903               	btfsc	3,2
 14264                           
 14265                           ;LED_B1.c: 194: RB5 = 1;
 14266  1498  168D               	bsf	13,5	;volatile
 14267  1499                     l7165:	
 14268                           
 14269                           ;LED_B1.c: 196: }
 14270                           ;LED_B1.c: 198: }
 14271                           ;LED_B1.c: 199: if (command == 11) {
 14272  1499  0823               	movf	setLED@command,w
 14273  149A  3A0B               	xorlw	11
 14274  149B  1D03               	skipz
 14275  149C  0008               	return
 14276                           
 14277                           ;LED_B1.c: 200: LED->GO = 1;
 14278  149D  0021               	movlb	1	; select bank1
 14279  149E  0850               	movf	_LED^(0+128),w
 14280  149F  0086               	movwf	6
 14281  14A0  3001               	movlw	1	; select bank2/3
 14282  14A1  0087               	movwf	7
 14283  14A2  1481               	bsf	1,1
 14284  14A3  0008               	return
 14285  14A4                     __end_of_setLED:	
 14286                           
 14287                           	psect	text90
 14288  1DAA                     __ptext90:	
 14289 ;; *************** function _LedPointSelect *****************
 14290 ;; Defined at:
 14291 ;;		line 7 in file "../src/LED_B1.c"
 14292 ;; Parameters:    Size  Location     Type
 14293 ;;  led             1    wreg     unsigned char 
 14294 ;; Auto vars:     Size  Location     Type
 14295 ;;  led             1    2[BANK0 ] unsigned char 
 14296 ;; Return value:  Size  Location     Type
 14297 ;;		None               void
 14298 ;; Registers used:
 14299 ;;		wreg
 14300 ;; Tracked objects:
 14301 ;;		On entry : 0/0
 14302 ;;		On exit  : 0/0
 14303 ;;		Unchanged: 0/0
 14304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14309 ;;Total ram usage:        2 bytes
 14310 ;; Hardware stack levels used:    1
 14311 ;; Hardware stack levels required when called:    5
 14312 ;; This function calls:
 14313 ;;		Nothing
 14314 ;; This function is called by:
 14315 ;;		_setLED_Initialization
 14316 ;;		_setLED
 14317 ;;		_setLED_Main
 14318 ;; This function uses a non-reentrant model
 14319 ;;
 14320                           
 14321                           
 14322                           ;psect for function _LedPointSelect
 14323  1DAA                     _LedPointSelect:	
 14324                           
 14325                           ;incstack = 0
 14326                           ; Regs used in _LedPointSelect: [wreg]
 14327                           ;LedPointSelect@led stored from wreg
 14328  1DAA  0020               	movlb	0	; select bank0
 14329  1DAB  00A2               	movwf	LedPointSelect@led
 14330                           
 14331                           ;LED_B1.c: 9: if (led == 1) {
 14332  1DAC  0822               	movf	LedPointSelect@led,w
 14333  1DAD  3A01               	xorlw	1
 14334  1DAE  1D03               	skipz
 14335  1DAF  2DB5               	goto	l1118
 14336                           
 14337                           ;LED_B1.c: 10: LED = &VarLED1;
 14338  1DB0  30E6               	movlw	_VarLED1& (0+255)
 14339  1DB1  00A1               	movwf	??_LedPointSelect
 14340  1DB2  0821               	movf	??_LedPointSelect,w
 14341  1DB3  0021               	movlb	1	; select bank1
 14342  1DB4  00D0               	movwf	_LED^(0+128)
 14343  1DB5                     l1118:	
 14344                           
 14345                           ;LED_B1.c: 11: }
 14346                           ;LED_B1.c: 14: if (led == 2) {
 14347  1DB5  0020               	movlb	0	; select bank0
 14348  1DB6  0822               	movf	LedPointSelect@led,w
 14349  1DB7  3A02               	xorlw	2
 14350  1DB8  1D03               	skipz
 14351  1DB9  2DBF               	goto	l1119
 14352                           
 14353                           ;LED_B1.c: 15: LED = &VarLED2;
 14354  1DBA  30EA               	movlw	_VarLED2& (0+255)
 14355  1DBB  00A1               	movwf	??_LedPointSelect
 14356  1DBC  0821               	movf	??_LedPointSelect,w
 14357  1DBD  0021               	movlb	1	; select bank1
 14358  1DBE  00D0               	movwf	_LED^(0+128)
 14359  1DBF                     l1119:	
 14360                           
 14361                           ;LED_B1.c: 16: }
 14362                           ;LED_B1.c: 24: if (led == 99) {
 14363  1DBF  0020               	movlb	0	; select bank0
 14364  1DC0  0822               	movf	LedPointSelect@led,w
 14365  1DC1  3A63               	xorlw	99
 14366  1DC2  1D03               	skipz
 14367  1DC3  0008               	return
 14368                           
 14369                           ;LED_B1.c: 25: LED = &VarErrLED;
 14370  1DC4  30E2               	movlw	_VarErrLED& (0+255)
 14371  1DC5  00A1               	movwf	??_LedPointSelect
 14372  1DC6  0821               	movf	??_LedPointSelect,w
 14373  1DC7  0021               	movlb	1	; select bank1
 14374  1DC8  00D0               	movwf	_LED^(0+128)
 14375  1DC9  0008               	return
 14376  1DCA                     __end_of_LedPointSelect:	
 14377                           
 14378                           	psect	text91
 14379  1FA2                     __ptext91:	
 14380 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14381 ;; Defined at:
 14382 ;;		line 184 in file "../src/Dimmer_B1.c"
 14383 ;; Parameters:    Size  Location     Type
 14384 ;;  lights          1    wreg     unsigned char 
 14385 ;;  command         1    1[BANK0 ] unsigned char 
 14386 ;; Auto vars:     Size  Location     Type
 14387 ;;  lights          1    3[BANK0 ] unsigned char 
 14388 ;; Return value:  Size  Location     Type
 14389 ;;		None               void
 14390 ;; Registers used:
 14391 ;;		wreg, status,2, status,0
 14392 ;; Tracked objects:
 14393 ;;		On entry : 0/0
 14394 ;;		On exit  : 0/0
 14395 ;;		Unchanged: 0/0
 14396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14397 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14400 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14401 ;;Total ram usage:        3 bytes
 14402 ;; Hardware stack levels used:    1
 14403 ;; Hardware stack levels required when called:    5
 14404 ;; This function calls:
 14405 ;;		Nothing
 14406 ;; This function is called by:
 14407 ;;		_setDimmerLights_OnOff
 14408 ;;		_setRFSW_AdjControl
 14409 ;; This function uses a non-reentrant model
 14410 ;;
 14411                           
 14412                           
 14413                           ;psect for function _setDimmerIntr_Dimming_RF
 14414  1FA2                     _setDimmerIntr_Dimming_RF:	
 14415                           
 14416                           ;incstack = 0
 14417                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14418                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14419  1FA2  0020               	movlb	0	; select bank0
 14420  1FA3  00A3               	movwf	setDimmerIntr_Dimming_RF@lights
 14421                           
 14422                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14423  1FA4  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14424  1FA5  3A01               	xorlw	1
 14425  1FA6  1D03               	skipz
 14426  1FA7  2FBA               	goto	l6719
 14427                           
 14428                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14429  1FA8  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14430  1FA9  3A01               	xorlw	1
 14431  1FAA  3000               	movlw	0
 14432  1FAB  1903               	skipnz
 14433  1FAC  3001               	movlw	1
 14434  1FAD  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14435  1FAE  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14436  1FAF  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14437  1FB0  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14438  1FB1  0021               	movlb	1	; select bank1
 14439  1FB2  082E               	movf	_DimmerIntr1^(0+128),w
 14440  1FB3  0020               	movlb	0	; select bank0
 14441  1FB4  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14442  1FB5  39BF               	andlw	-65
 14443  1FB6  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14444  1FB7  0021               	movlb	1	; select bank1
 14445  1FB8  00AE               	movwf	_DimmerIntr1^(0+128)
 14446                           
 14447                           ;Dimmer_B1.c: 188: }
 14448  1FB9  0008               	return
 14449  1FBA                     l6719:	
 14450                           
 14451                           ;Dimmer_B1.c: 191: else if (lights == 2) {
 14452  1FBA  0020               	movlb	0	; select bank0
 14453  1FBB  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14454  1FBC  3A02               	xorlw	2
 14455  1FBD  1D03               	skipz
 14456  1FBE  0008               	return
 14457                           
 14458                           ;Dimmer_B1.c: 192: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14459  1FBF  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14460  1FC0  3A01               	xorlw	1
 14461  1FC1  3000               	movlw	0
 14462  1FC2  1903               	skipnz
 14463  1FC3  3001               	movlw	1
 14464  1FC4  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14465  1FC5  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14466  1FC6  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14467  1FC7  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14468  1FC8  0021               	movlb	1	; select bank1
 14469  1FC9  083A               	movf	_DimmerIntr2^(0+128),w
 14470  1FCA  0020               	movlb	0	; select bank0
 14471  1FCB  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14472  1FCC  39BF               	andlw	-65
 14473  1FCD  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14474  1FCE  0021               	movlb	1	; select bank1
 14475  1FCF  00BA               	movwf	_DimmerIntr2^(0+128)
 14476  1FD0  0008               	return
 14477  1FD1                     __end_of_setDimmerIntr_Dimming_RF:	
 14478                           
 14479                           	psect	text92
 14480  1C2E                     __ptext92:	
 14481 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14482 ;; Defined at:
 14483 ;;		line 49 in file "../src/Dimmer_B1.c"
 14484 ;; Parameters:    Size  Location     Type
 14485 ;;  lights          1    wreg     unsigned char 
 14486 ;;  value           1    1[BANK0 ] unsigned char 
 14487 ;; Auto vars:     Size  Location     Type
 14488 ;;  lights          1    3[BANK0 ] unsigned char 
 14489 ;; Return value:  Size  Location     Type
 14490 ;;		None               void
 14491 ;; Registers used:
 14492 ;;		wreg
 14493 ;; Tracked objects:
 14494 ;;		On entry : 0/0
 14495 ;;		On exit  : 0/0
 14496 ;;		Unchanged: 0/0
 14497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14498 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14501 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;Total ram usage:        3 bytes
 14503 ;; Hardware stack levels used:    1
 14504 ;; Hardware stack levels required when called:    5
 14505 ;; This function calls:
 14506 ;;		Nothing
 14507 ;; This function is called by:
 14508 ;;		_setDimmerLights_OnOff
 14509 ;; This function uses a non-reentrant model
 14510 ;;
 14511                           
 14512                           
 14513                           ;psect for function _setDimmerIntr_DimmingValue
 14514  1C2E                     _setDimmerIntr_DimmingValue:	
 14515                           
 14516                           ;incstack = 0
 14517                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14518                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14519  1C2E  0020               	movlb	0	; select bank0
 14520  1C2F  00A3               	movwf	setDimmerIntr_DimmingValue@lights
 14521                           
 14522                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14523  1C30  0823               	movf	setDimmerIntr_DimmingValue@lights,w
 14524  1C31  3A01               	xorlw	1
 14525  1C32  1D03               	skipz
 14526  1C33  2C3A               	goto	l7051
 14527                           
 14528                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14529  1C34  0821               	movf	setDimmerIntr_DimmingValue@value,w
 14530  1C35  00A2               	movwf	??_setDimmerIntr_DimmingValue
 14531  1C36  0822               	movf	??_setDimmerIntr_DimmingValue,w
 14532  1C37  0021               	movlb	1	; select bank1
 14533  1C38  00B3               	movwf	(_DimmerIntr1^(0+128)+5)
 14534                           
 14535                           ;Dimmer_B1.c: 53: }
 14536  1C39  0008               	return
 14537  1C3A                     l7051:	
 14538                           
 14539                           ;Dimmer_B1.c: 56: else if (lights == 2) {
 14540  1C3A  0020               	movlb	0	; select bank0
 14541  1C3B  0823               	movf	setDimmerIntr_DimmingValue@lights,w
 14542  1C3C  3A02               	xorlw	2
 14543  1C3D  1D03               	skipz
 14544  1C3E  0008               	return
 14545                           
 14546                           ;Dimmer_B1.c: 57: DimmerIntr2.DimmingValue = value;
 14547  1C3F  0821               	movf	setDimmerIntr_DimmingValue@value,w
 14548  1C40  00A2               	movwf	??_setDimmerIntr_DimmingValue
 14549  1C41  0822               	movf	??_setDimmerIntr_DimmingValue,w
 14550  1C42  0021               	movlb	1	; select bank1
 14551  1C43  00BF               	movwf	(_DimmerIntr2^(0+128)+5)
 14552  1C44  0008               	return
 14553  1C45                     __end_of_setDimmerIntr_DimmingValue:	
 14554                           
 14555                           	psect	text93
 14556  1F73                     __ptext93:	
 14557 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14558 ;; Defined at:
 14559 ;;		line 31 in file "../src/Dimmer_B1.c"
 14560 ;; Parameters:    Size  Location     Type
 14561 ;;  lights          1    wreg     unsigned char 
 14562 ;;  command         1    1[BANK0 ] unsigned char 
 14563 ;; Auto vars:     Size  Location     Type
 14564 ;;  lights          1    3[BANK0 ] unsigned char 
 14565 ;; Return value:  Size  Location     Type
 14566 ;;		None               void
 14567 ;; Registers used:
 14568 ;;		wreg, status,2, status,0
 14569 ;; Tracked objects:
 14570 ;;		On entry : 0/0
 14571 ;;		On exit  : 0/0
 14572 ;;		Unchanged: 0/0
 14573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14574 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;Total ram usage:        3 bytes
 14579 ;; Hardware stack levels used:    1
 14580 ;; Hardware stack levels required when called:    5
 14581 ;; This function calls:
 14582 ;;		Nothing
 14583 ;; This function is called by:
 14584 ;;		_setDimmerLights_OnOff
 14585 ;; This function uses a non-reentrant model
 14586 ;;
 14587                           
 14588                           
 14589                           ;psect for function _setDimmerIntr_ControlStatus
 14590  1F73                     _setDimmerIntr_ControlStatus:	
 14591                           
 14592                           ;incstack = 0
 14593                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14594                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14595  1F73  0020               	movlb	0	; select bank0
 14596  1F74  00A3               	movwf	setDimmerIntr_ControlStatus@lights
 14597                           
 14598                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14599  1F75  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14600  1F76  3A01               	xorlw	1
 14601  1F77  1D03               	skipz
 14602  1F78  2F8B               	goto	l7043
 14603                           
 14604                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14605  1F79  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14606  1F7A  3A01               	xorlw	1
 14607  1F7B  3000               	movlw	0
 14608  1F7C  1903               	skipnz
 14609  1F7D  3001               	movlw	1
 14610  1F7E  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14611  1F7F  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14612  1F80  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14613  1F81  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14614  1F82  0021               	movlb	1	; select bank1
 14615  1F83  082E               	movf	_DimmerIntr1^(0+128),w
 14616  1F84  0020               	movlb	0	; select bank0
 14617  1F85  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14618  1F86  39F7               	andlw	-9
 14619  1F87  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14620  1F88  0021               	movlb	1	; select bank1
 14621  1F89  00AE               	movwf	_DimmerIntr1^(0+128)
 14622                           
 14623                           ;Dimmer_B1.c: 35: }
 14624  1F8A  0008               	return
 14625  1F8B                     l7043:	
 14626                           
 14627                           ;Dimmer_B1.c: 38: else if (lights == 2) {
 14628  1F8B  0020               	movlb	0	; select bank0
 14629  1F8C  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14630  1F8D  3A02               	xorlw	2
 14631  1F8E  1D03               	skipz
 14632  1F8F  0008               	return
 14633                           
 14634                           ;Dimmer_B1.c: 39: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14635  1F90  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14636  1F91  3A01               	xorlw	1
 14637  1F92  3000               	movlw	0
 14638  1F93  1903               	skipnz
 14639  1F94  3001               	movlw	1
 14640  1F95  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14641  1F96  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14642  1F97  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14643  1F98  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14644  1F99  0021               	movlb	1	; select bank1
 14645  1F9A  083A               	movf	_DimmerIntr2^(0+128),w
 14646  1F9B  0020               	movlb	0	; select bank0
 14647  1F9C  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14648  1F9D  39F7               	andlw	-9
 14649  1F9E  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14650  1F9F  0021               	movlb	1	; select bank1
 14651  1FA0  00BA               	movwf	_DimmerIntr2^(0+128)
 14652  1FA1  0008               	return
 14653  1FA2                     __end_of_setDimmerIntr_ControlStatus:	
 14654                           
 14655                           	psect	text94
 14656  0C1D                     __ptext94:	
 14657 ;; *************** function _setDelayOff_GO *****************
 14658 ;; Defined at:
 14659 ;;		line 87 in file "../src/DelayOff_B1.c"
 14660 ;; Parameters:    Size  Location     Type
 14661 ;;  sw              1    wreg     unsigned char 
 14662 ;;  command         1   70[BANK0 ] unsigned char 
 14663 ;;  value           1   71[BANK0 ] unsigned char 
 14664 ;; Auto vars:     Size  Location     Type
 14665 ;;  sw              1   77[BANK0 ] unsigned char 
 14666 ;;  k               1   76[BANK0 ] unsigned char 
 14667 ;;  j               1   75[BANK0 ] unsigned char 
 14668 ;;  i               1   74[BANK0 ] unsigned char 
 14669 ;; Return value:  Size  Location     Type
 14670 ;;		None               void
 14671 ;; Registers used:
 14672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14673 ;; Tracked objects:
 14674 ;;		On entry : 0/0
 14675 ;;		On exit  : 0/0
 14676 ;;		Unchanged: 0/0
 14677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14678 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14682 ;;Total ram usage:        8 bytes
 14683 ;; Hardware stack levels used:    1
 14684 ;; Hardware stack levels required when called:    6
 14685 ;; This function calls:
 14686 ;;		_DelayOffPointSelect
 14687 ;;		___bmul
 14688 ;;		_setProductData
 14689 ;; This function is called by:
 14690 ;;		_setDimmerLights_OnOff
 14691 ;;		_setRFSW_Control
 14692 ;; This function uses a non-reentrant model
 14693 ;;
 14694                           
 14695                           
 14696                           ;psect for function _setDelayOff_GO
 14697  0C1D                     _setDelayOff_GO:	
 14698                           
 14699                           ;incstack = 0
 14700                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14701                           ;setDelayOff_GO@sw stored from wreg
 14702  0C1D  0020               	movlb	0	; select bank0
 14703  0C1E  00ED               	movwf	setDelayOff_GO@sw
 14704                           
 14705                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14706  0C1F  086D               	movf	setDelayOff_GO@sw,w
 14707  0C20  319B  23E9  318C   	fcall	_DelayOffPointSelect
 14708                           
 14709                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14710  0C23  0020               	movlb	0	; select bank0
 14711  0C24  0866               	movf	setDelayOff_GO@command,w
 14712  0C25  3A01               	xorlw	1
 14713  0C26  3000               	movlw	0
 14714  0C27  1903               	skipnz
 14715  0C28  3001               	movlw	1
 14716  0C29  00E8               	movwf	??_setDelayOff_GO
 14717  0C2A  0021               	movlb	1	; select bank1
 14718  0C2B  084D               	movf	_DelayOff^(0+128),w
 14719  0C2C  0086               	movwf	6
 14720  0C2D  3001               	movlw	1	; select bank2/3
 14721  0C2E  0087               	movwf	7
 14722  0C2F  0020               	movlb	0	; select bank0
 14723  0C30  0DE8               	rlf	??_setDelayOff_GO,f
 14724  0C31  0801               	movf	1,w
 14725  0C32  0668               	xorwf	??_setDelayOff_GO,w
 14726  0C33  39FD               	andlw	-3
 14727  0C34  0668               	xorwf	??_setDelayOff_GO,w
 14728  0C35  0081               	movwf	1
 14729                           
 14730                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14731  0C36  0021               	movlb	1	; select bank1
 14732  0C37  084D               	movf	_DelayOff^(0+128),w
 14733  0C38  3E02               	addlw	2
 14734  0C39  0086               	movwf	6
 14735  0C3A  3001               	movlw	1	; select bank2/3
 14736  0C3B  0087               	movwf	7
 14737  0C3C  3000               	movlw	0
 14738  0C3D  3FC0               	movwi [0]fsr1
 14739  0C3E  3FC1               	movwi [1]fsr1
 14740                           
 14741                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14742  0C3F  084D               	movf	_DelayOff^(0+128),w
 14743  0C40  3E04               	addlw	4
 14744  0C41  0086               	movwf	6
 14745  0C42  3001               	movlw	1	; select bank2/3
 14746  0C43  0087               	movwf	7
 14747  0C44  0181               	clrf	1
 14748                           
 14749                           ;DelayOff_B1.c: 94: if (command == 1) {
 14750  0C45  0020               	movlb	0	; select bank0
 14751  0C46  0866               	movf	setDelayOff_GO@command,w
 14752  0C47  3A01               	xorlw	1
 14753  0C48  1D03               	skipz
 14754  0C49  2C9F               	goto	l9205
 14755                           
 14756                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14757  0C4A  3005               	movlw	5
 14758  0C4B  00E8               	movwf	??_setDelayOff_GO
 14759  0C4C  0868               	movf	??_setDelayOff_GO,w
 14760  0C4D  00EA               	movwf	setDelayOff_GO@i
 14761  0C4E  01EB               	clrf	setDelayOff_GO@j
 14762  0C4F  01EC               	clrf	setDelayOff_GO@k
 14763                           
 14764                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14765  0C50  300F               	movlw	15
 14766  0C51  0567               	andwf	setDelayOff_GO@value,w
 14767  0C52  00E8               	movwf	??_setDelayOff_GO
 14768  0C53  0868               	movf	??_setDelayOff_GO,w
 14769  0C54  3A05               	xorlw	5
 14770  0C55  1903               	skipnz
 14771  0C56  2C5B               	goto	l9191
 14772  0C57  0867               	movf	setDelayOff_GO@value,w
 14773  0C58  390F               	andlw	15
 14774  0C59  1D03               	btfss	3,2
 14775  0C5A  2C8B               	goto	l9201
 14776  0C5B                     l9191:	
 14777  0C5B  3031               	movlw	49
 14778  0C5C  0267               	subwf	setDelayOff_GO@value,w
 14779  0C5D  1803               	skipnc
 14780  0C5E  2C8B               	goto	l9201
 14781                           
 14782                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14783  0C5F  0867               	movf	setDelayOff_GO@value,w
 14784  0C60  390F               	andlw	15
 14785  0C61  00E8               	movwf	??_setDelayOff_GO
 14786  0C62  0868               	movf	??_setDelayOff_GO,w
 14787  0C63  00EB               	movwf	setDelayOff_GO@j
 14788                           
 14789                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14790  0C64  0867               	movf	setDelayOff_GO@value,w
 14791  0C65  00E8               	movwf	??_setDelayOff_GO
 14792  0C66  3004               	movlw	4
 14793  0C67                     u10185:	
 14794  0C67  36E8               	lsrf	??_setDelayOff_GO,f
 14795  0C68  0B89               	decfsz	9,f
 14796  0C69  2C67               	goto	u10185
 14797  0C6A  0868               	movf	??_setDelayOff_GO,w
 14798  0C6B  390F               	andlw	15
 14799  0C6C  00E9               	movwf	??_setDelayOff_GO+1
 14800  0C6D  0869               	movf	??_setDelayOff_GO+1,w
 14801  0C6E  00EC               	movwf	setDelayOff_GO@k
 14802                           
 14803                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14804  0C6F  300A               	movlw	10
 14805  0C70  00E8               	movwf	??_setDelayOff_GO
 14806  0C71  0868               	movf	??_setDelayOff_GO,w
 14807  0C72  00A1               	movwf	___bmul@multiplicand
 14808  0C73  086C               	movf	setDelayOff_GO@k,w
 14809  0C74  319A  22B3  318C   	fcall	___bmul
 14810  0C77  0020               	movlb	0	; select bank0
 14811  0C78  076B               	addwf	setDelayOff_GO@j,w
 14812  0C79  00E9               	movwf	??_setDelayOff_GO+1
 14813  0C7A  0021               	movlb	1	; select bank1
 14814  0C7B  0A4D               	incf	_DelayOff^(0+128),w
 14815  0C7C  0086               	movwf	6
 14816  0C7D  3001               	movlw	1	; select bank2/3
 14817  0C7E  0087               	movwf	7
 14818  0C7F  0020               	movlb	0	; select bank0
 14819  0C80  0869               	movf	??_setDelayOff_GO+1,w
 14820  0C81  0081               	movwf	1
 14821                           
 14822                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14823  0C82  0867               	movf	setDelayOff_GO@value,w
 14824  0C83  00E8               	movwf	??_setDelayOff_GO
 14825  0C84  0868               	movf	??_setDelayOff_GO,w
 14826  0C85  00E3               	movwf	setProductData@value
 14827  0C86  086D               	movf	setDelayOff_GO@sw,w
 14828  0C87  3E1A               	addlw	26
 14829  0C88  3199  21FC         	fcall	_setProductData
 14830                           
 14831                           ;DelayOff_B1.c: 103: } else {
 14832  0C8A  0008               	return
 14833  0C8B                     l9201:	
 14834                           
 14835                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14836  0C8B  3005               	movlw	5
 14837  0C8C  0020               	movlb	0	; select bank0
 14838  0C8D  00E8               	movwf	??_setDelayOff_GO
 14839  0C8E  0021               	movlb	1	; select bank1
 14840  0C8F  0A4D               	incf	_DelayOff^(0+128),w
 14841  0C90  0086               	movwf	6
 14842  0C91  3001               	movlw	1	; select bank2/3
 14843  0C92  0087               	movwf	7
 14844  0C93  0020               	movlb	0	; select bank0
 14845  0C94  0868               	movf	??_setDelayOff_GO,w
 14846  0C95  0081               	movwf	1
 14847                           
 14848                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14849  0C96  3005               	movlw	5
 14850  0C97  00E8               	movwf	??_setDelayOff_GO
 14851  0C98  0868               	movf	??_setDelayOff_GO,w
 14852  0C99  00E3               	movwf	setProductData@value
 14853  0C9A  086D               	movf	setDelayOff_GO@sw,w
 14854  0C9B  3E1A               	addlw	26
 14855  0C9C  3199  21FC         	fcall	_setProductData
 14856                           
 14857                           ;DelayOff_B1.c: 106: }
 14858                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14859  0C9E  0008               	return
 14860  0C9F                     l9205:	
 14861  0C9F  0020               	movlb	0	; select bank0
 14862  0CA0  08E6               	movf	setDelayOff_GO@command,f
 14863  0CA1  1D03               	skipz
 14864  0CA2  0008               	return
 14865                           
 14866                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14867  0CA3  01E3               	clrf	setProductData@value
 14868  0CA4  086D               	movf	setDelayOff_GO@sw,w
 14869  0CA5  3E1A               	addlw	26
 14870  0CA6  3199  21FC         	fcall	_setProductData
 14871  0CA8  0008               	return
 14872  0CA9                     __end_of_setDelayOff_GO:	
 14873                           
 14874                           	psect	text95
 14875  1AB3                     __ptext95:	
 14876 ;; *************** function ___bmul *****************
 14877 ;; Defined at:
 14878 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14879 ;; Parameters:    Size  Location     Type
 14880 ;;  multiplier      1    wreg     unsigned char 
 14881 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 14882 ;; Auto vars:     Size  Location     Type
 14883 ;;  multiplier      1    4[BANK0 ] unsigned char 
 14884 ;;  product         1    3[BANK0 ] unsigned char 
 14885 ;; Return value:  Size  Location     Type
 14886 ;;                  1    wreg      unsigned char 
 14887 ;; Registers used:
 14888 ;;		wreg, status,2, status,0
 14889 ;; Tracked objects:
 14890 ;;		On entry : 0/0
 14891 ;;		On exit  : 0/0
 14892 ;;		Unchanged: 0/0
 14893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14894 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14895 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14897 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14898 ;;Total ram usage:        4 bytes
 14899 ;; Hardware stack levels used:    1
 14900 ;; Hardware stack levels required when called:    5
 14901 ;; This function calls:
 14902 ;;		Nothing
 14903 ;; This function is called by:
 14904 ;;		_setDelayOff_GO
 14905 ;;		_DelayTimejudge
 14906 ;; This function uses a non-reentrant model
 14907 ;;
 14908                           
 14909                           
 14910                           ;psect for function ___bmul
 14911  1AB3                     ___bmul:	
 14912                           
 14913                           ;incstack = 0
 14914                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14915                           ;___bmul@multiplier stored from wreg
 14916  1AB3  0020               	movlb	0	; select bank0
 14917  1AB4  00A4               	movwf	___bmul@multiplier
 14918  1AB5  01A3               	clrf	___bmul@product
 14919  1AB6                     l6345:	
 14920  1AB6  1C24               	btfss	___bmul@multiplier,0
 14921  1AB7  2ABC               	goto	l6349
 14922  1AB8  0821               	movf	___bmul@multiplicand,w
 14923  1AB9  00A2               	movwf	??___bmul
 14924  1ABA  0822               	movf	??___bmul,w
 14925  1ABB  07A3               	addwf	___bmul@product,f
 14926  1ABC                     l6349:	
 14927  1ABC  1003               	clrc
 14928  1ABD  0DA1               	rlf	___bmul@multiplicand,f
 14929  1ABE  1003               	clrc
 14930  1ABF  0CA4               	rrf	___bmul@multiplier,f
 14931  1AC0  08A4               	movf	___bmul@multiplier,f
 14932  1AC1  1D03               	skipz
 14933  1AC2  2AB6               	goto	l6345
 14934  1AC3  0823               	movf	___bmul@product,w
 14935  1AC4  0008               	return
 14936  1AC5                     __end_of___bmul:	
 14937                           
 14938                           	psect	text96
 14939  1C5C                     __ptext96:	
 14940 ;; *************** function _setCmd_Status *****************
 14941 ;; Defined at:
 14942 ;;		line 651 in file "../src/main_B1.c"
 14943 ;; Parameters:    Size  Location     Type
 14944 ;;  number          1    wreg     unsigned char 
 14945 ;;  cmd             1    1[BANK0 ] unsigned char 
 14946 ;; Auto vars:     Size  Location     Type
 14947 ;;  number          1    3[BANK0 ] unsigned char 
 14948 ;; Return value:  Size  Location     Type
 14949 ;;		None               void
 14950 ;; Registers used:
 14951 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14952 ;; Tracked objects:
 14953 ;;		On entry : 0/0
 14954 ;;		On exit  : 0/0
 14955 ;;		Unchanged: 0/0
 14956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14957 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14960 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14961 ;;Total ram usage:        3 bytes
 14962 ;; Hardware stack levels used:    1
 14963 ;; Hardware stack levels required when called:    5
 14964 ;; This function calls:
 14965 ;;		Nothing
 14966 ;; This function is called by:
 14967 ;;		_setDimmerLights_OnOff
 14968 ;;		_setControl_Lights_Table
 14969 ;; This function uses a non-reentrant model
 14970 ;;
 14971                           
 14972                           
 14973                           ;psect for function _setCmd_Status
 14974  1C5C                     _setCmd_Status:	
 14975                           
 14976                           ;incstack = 0
 14977                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14978                           ;setCmd_Status@number stored from wreg
 14979  1C5C  0020               	movlb	0	; select bank0
 14980  1C5D  00A3               	movwf	setCmd_Status@number
 14981                           
 14982                           ;main_B1.c: 652: switch (number) {
 14983  1C5E  2C6E               	goto	l6883
 14984  1C5F                     l6879:	
 14985                           ;main_B1.c: 653: case 1:
 14986                           
 14987                           
 14988                           ;main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14989  1C5F  0821               	movf	setCmd_Status@cmd,w
 14990  1C60  3A01               	xorlw	1
 14991  1C61  3000               	movlw	0
 14992  1C62  1903               	skipnz
 14993  1C63  3001               	movlw	1
 14994  1C64  00A2               	movwf	??_setCmd_Status
 14995  1C65  0021               	movlb	1	; select bank1
 14996  1C66  084C               	movf	_Cmd^(0+128),w
 14997  1C67  0020               	movlb	0	; select bank0
 14998  1C68  0622               	xorwf	??_setCmd_Status,w
 14999  1C69  39FE               	andlw	-2
 15000  1C6A  0622               	xorwf	??_setCmd_Status,w
 15001  1C6B  0021               	movlb	1	; select bank1
 15002  1C6C  00CC               	movwf	_Cmd^(0+128)
 15003                           
 15004                           ;main_B1.c: 656: }
 15005                           
 15006                           ;main_B1.c: 655: break;
 15007  1C6D  0008               	return
 15008  1C6E                     l6883:	
 15009  1C6E  0020               	movlb	0	; select bank0
 15010  1C6F  0823               	movf	setCmd_Status@number,w
 15011                           
 15012                           ; Switch size 1, requested type "space"
 15013                           ; Number of cases is 1, Range of values is 1 to 1
 15014                           ; switch strategies available:
 15015                           ; Name         Instructions Cycles
 15016                           ; simple_byte            4     3 (average)
 15017                           ; direct_byte           11     9 (fixed)
 15018                           ; jumptable            263     9 (fixed)
 15019                           ;	Chosen strategy is simple_byte
 15020  1C70  3A01               	xorlw	1	; case 1
 15021  1C71  1903               	skipnz
 15022  1C72  2C5F               	goto	l6879
 15023  1C73  2C74               	goto	l2900
 15024  1C74                     l2900:	
 15025  1C74  0008               	return
 15026  1C75                     __end_of_setCmd_Status:	
 15027                           
 15028                           	psect	text97
 15029  1B20                     __ptext97:	
 15030 ;; *************** function _getMain_All_LightsStatus *****************
 15031 ;; Defined at:
 15032 ;;		line 373 in file "../src/main_B1.c"
 15033 ;; Parameters:    Size  Location     Type
 15034 ;;		None
 15035 ;; Auto vars:     Size  Location     Type
 15036 ;;  status          1    1[BANK0 ] unsigned char 
 15037 ;; Return value:  Size  Location     Type
 15038 ;;                  1    wreg      unsigned char 
 15039 ;; Registers used:
 15040 ;;		wreg, status,2, status,0
 15041 ;; Tracked objects:
 15042 ;;		On entry : 0/0
 15043 ;;		On exit  : 0/0
 15044 ;;		Unchanged: 0/0
 15045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15049 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15050 ;;Total ram usage:        1 bytes
 15051 ;; Hardware stack levels used:    1
 15052 ;; Hardware stack levels required when called:    5
 15053 ;; This function calls:
 15054 ;;		Nothing
 15055 ;; This function is called by:
 15056 ;;		_DimmerLights_Main
 15057 ;;		_setDimmerLights_Main
 15058 ;;		_setDimmerLights_OnOff
 15059 ;;		_Flash_Memory_Main
 15060 ;;		_Load_Main
 15061 ;;		_setTemp_Main
 15062 ;;		_setControl_Lights_Table
 15063 ;;		_Exception_Main
 15064 ;; This function uses a non-reentrant model
 15065 ;;
 15066                           
 15067                           
 15068                           ;psect for function _getMain_All_LightsStatus
 15069  1B20                     _getMain_All_LightsStatus:	
 15070                           
 15071                           ;main_B1.c: 374: char status = 0;
 15072                           
 15073                           ;incstack = 0
 15074                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15075  1B20  0020               	movlb	0	; select bank0
 15076  1B21  01A1               	clrf	getMain_All_LightsStatus@status
 15077                           
 15078                           ;main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15079  1B22  3000               	movlw	0
 15080  1B23  0022               	movlb	2	; select bank2
 15081  1B24  1869               	btfsc	(_DimmerLights1^(0+256)+1),0
 15082  1B25  3001               	movlw	1
 15083  1B26  0020               	movlb	0	; select bank0
 15084  1B27  00A1               	movwf	getMain_All_LightsStatus@status
 15085                           
 15086                           ;main_B1.c: 394: if (status == 0) {
 15087  1B28  08A1               	movf	getMain_All_LightsStatus@status,f
 15088  1B29  1D03               	skipz
 15089  1B2A  2B31               	goto	l9231
 15090                           
 15091                           ;main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15092  1B2B  3000               	movlw	0
 15093  1B2C  0023               	movlb	3	; select bank3
 15094  1B2D  1851               	btfsc	(_DimmerLights2^(0+384)+1),0
 15095  1B2E  3001               	movlw	1
 15096  1B2F  0020               	movlb	0	; select bank0
 15097  1B30  00A1               	movwf	getMain_All_LightsStatus@status
 15098  1B31                     l9231:	
 15099                           
 15100                           ;main_B1.c: 396: }
 15101                           ;main_B1.c: 420: return status;
 15102  1B31  0821               	movf	getMain_All_LightsStatus@status,w
 15103  1B32  0008               	return
 15104  1B33                     __end_of_getMain_All_LightsStatus:	
 15105                           
 15106                           	psect	text98
 15107  1733                     __ptext98:	
 15108 ;; *************** function _getDimmerLights_PercentToValue *****************
 15109 ;; Defined at:
 15110 ;;		line 1039 in file "../src/Dimmer_B1.c"
 15111 ;; Parameters:    Size  Location     Type
 15112 ;;  value           1    wreg     unsigned char 
 15113 ;; Auto vars:     Size  Location     Type
 15114 ;;  value           1   63[BANK0 ] unsigned char 
 15115 ;;  i               3   64[BANK0 ] float 
 15116 ;; Return value:  Size  Location     Type
 15117 ;;                  1    wreg      unsigned char 
 15118 ;; Registers used:
 15119 ;;		wreg, status,2, status,0, pclath, cstack
 15120 ;; Tracked objects:
 15121 ;;		On entry : 0/0
 15122 ;;		On exit  : 0/0
 15123 ;;		Unchanged: 0/0
 15124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;Total ram usage:        6 bytes
 15130 ;; Hardware stack levels used:    1
 15131 ;; Hardware stack levels required when called:    7
 15132 ;; This function calls:
 15133 ;;		___awtoft
 15134 ;;		___ftadd
 15135 ;;		___ftdiv
 15136 ;;		___ftmul
 15137 ;;		___ftneg
 15138 ;;		___fttol
 15139 ;; This function is called by:
 15140 ;;		_setDimmerLights_OnOff
 15141 ;;		_setRFSW_AdjControl
 15142 ;; This function uses a non-reentrant model
 15143 ;;
 15144                           
 15145                           
 15146                           ;psect for function _getDimmerLights_PercentToValue
 15147  1733                     _getDimmerLights_PercentToValue:	
 15148                           
 15149                           ;incstack = 0
 15150                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 15151                           ;getDimmerLights_PercentToValue@value stored from wreg
 15152  1733  0020               	movlb	0	; select bank0
 15153  1734  00DF               	movwf	getDimmerLights_PercentToValue@value
 15154                           
 15155                           ;Dimmer_B1.c: 1047: float i = ((char)(60*0.65)) - ((char)(10*0.65));
 15156  1735  3000               	movlw	0
 15157  1736  00E0               	movwf	getDimmerLights_PercentToValue@i
 15158  1737  3004               	movlw	4
 15159  1738  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 15160  1739  3042               	movlw	66
 15161  173A  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 15162                           
 15163                           ;Dimmer_B1.c: 1048: i /= 100;
 15164  173B  3000               	movlw	0
 15165  173C  00AF               	movwf	___ftdiv@f2
 15166  173D  30C8               	movlw	200
 15167  173E  00B0               	movwf	___ftdiv@f2+1
 15168  173F  3042               	movlw	66
 15169  1740  00B1               	movwf	___ftdiv@f2+2
 15170  1741  0860               	movf	getDimmerLights_PercentToValue@i,w
 15171  1742  00B2               	movwf	___ftdiv@f1
 15172  1743  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 15173  1744  00B3               	movwf	___ftdiv@f1+1
 15174  1745  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 15175  1746  00B4               	movwf	___ftdiv@f1+2
 15176  1747  318D  2538  3197   	fcall	___ftdiv
 15177  174A  0020               	movlb	0	; select bank0
 15178  174B  082F               	movf	?___ftdiv,w
 15179  174C  00E0               	movwf	getDimmerLights_PercentToValue@i
 15180  174D  0830               	movf	?___ftdiv+1,w
 15181  174E  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 15182  174F  0831               	movf	?___ftdiv+2,w
 15183  1750  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 15184                           
 15185                           ;Dimmer_B1.c: 1050: return (char) (((char)(60*0.65)) - ((100 - value) * i));
 15186  1751  085F               	movf	getDimmerLights_PercentToValue@value,w
 15187  1752  00DD               	movwf	??_getDimmerLights_PercentToValue
 15188  1753  01DE               	clrf	??_getDimmerLights_PercentToValue+1
 15189  1754  09DD               	comf	??_getDimmerLights_PercentToValue,f
 15190  1755  09DE               	comf	??_getDimmerLights_PercentToValue+1,f
 15191  1756  0ADD               	incf	??_getDimmerLights_PercentToValue,f
 15192  1757  1903               	skipnz
 15193  1758  0ADE               	incf	??_getDimmerLights_PercentToValue+1,f
 15194  1759  085D               	movf	??_getDimmerLights_PercentToValue,w
 15195  175A  3E64               	addlw	100
 15196  175B  00A9               	movwf	___awtoft@c
 15197  175C  3000               	movlw	0
 15198  175D  3D5E               	addwfc	??_getDimmerLights_PercentToValue+1,w
 15199  175E  00AA               	movwf	___awtoft@c+1
 15200  175F  319E  268E  3197   	fcall	___awtoft
 15201  1762  0020               	movlb	0	; select bank0
 15202  1763  0829               	movf	?___awtoft,w
 15203  1764  00B2               	movwf	___ftmul@f2
 15204  1765  082A               	movf	?___awtoft+1,w
 15205  1766  00B3               	movwf	___ftmul@f2+1
 15206  1767  082B               	movf	?___awtoft+2,w
 15207  1768  00B4               	movwf	___ftmul@f2+2
 15208  1769  0860               	movf	getDimmerLights_PercentToValue@i,w
 15209  176A  00AF               	movwf	___ftmul@f1
 15210  176B  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 15211  176C  00B0               	movwf	___ftmul@f1+1
 15212  176D  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 15213  176E  00B1               	movwf	___ftmul@f1+2
 15214  176F  318E  2691  3197   	fcall	___ftmul
 15215  1772  0020               	movlb	0	; select bank0
 15216  1773  082F               	movf	?___ftmul,w
 15217  1774  00BF               	movwf	___ftneg@f1
 15218  1775  0830               	movf	?___ftmul+1,w
 15219  1776  00C0               	movwf	___ftneg@f1+1
 15220  1777  0831               	movf	?___ftmul+2,w
 15221  1778  00C1               	movwf	___ftneg@f1+2
 15222  1779  3199  21A7  3197   	fcall	___ftneg
 15223  177C  0020               	movlb	0	; select bank0
 15224  177D  083F               	movf	?___ftneg,w
 15225  177E  00C5               	movwf	___ftadd@f2
 15226  177F  0840               	movf	?___ftneg+1,w
 15227  1780  00C6               	movwf	___ftadd@f2+1
 15228  1781  0841               	movf	?___ftneg+2,w
 15229  1782  00C7               	movwf	___ftadd@f2+2
 15230  1783  3000               	movlw	0
 15231  1784  00C2               	movwf	___ftadd@f1
 15232  1785  301C               	movlw	28
 15233  1786  00C3               	movwf	___ftadd@f1+1
 15234  1787  3042               	movlw	66
 15235  1788  00C4               	movwf	___ftadd@f1+2
 15236  1789  3183  2388  3197   	fcall	___ftadd
 15237  178C  0020               	movlb	0	; select bank0
 15238  178D  0842               	movf	?___ftadd,w
 15239  178E  00CF               	movwf	___fttol@f1
 15240  178F  0843               	movf	?___ftadd+1,w
 15241  1790  00D0               	movwf	___fttol@f1+1
 15242  1791  0844               	movf	?___ftadd+2,w
 15243  1792  00D1               	movwf	___fttol@f1+2
 15244  1793  318B  2396         	fcall	___fttol
 15245  1795  0020               	movlb	0	; select bank0
 15246  1796  084F               	movf	?___fttol,w
 15247  1797  0008               	return
 15248  1798                     __end_of_getDimmerLights_PercentToValue:	
 15249                           
 15250                           	psect	text99
 15251  0E91                     __ptext99:	
 15252 ;; *************** function ___ftmul *****************
 15253 ;; Defined at:
 15254 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 15255 ;; Parameters:    Size  Location     Type
 15256 ;;  f1              3   15[BANK0 ] float 
 15257 ;;  f2              3   18[BANK0 ] float 
 15258 ;; Auto vars:     Size  Location     Type
 15259 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
 15260 ;;  sign            1   30[BANK0 ] unsigned char 
 15261 ;;  cntr            1   29[BANK0 ] unsigned char 
 15262 ;;  exp             1   25[BANK0 ] unsigned char 
 15263 ;; Return value:  Size  Location     Type
 15264 ;;                  3   15[BANK0 ] float 
 15265 ;; Registers used:
 15266 ;;		wreg, status,2, status,0, pclath, cstack
 15267 ;; Tracked objects:
 15268 ;;		On entry : 0/0
 15269 ;;		On exit  : 0/0
 15270 ;;		Unchanged: 0/0
 15271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15272 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;Total ram usage:       16 bytes
 15277 ;; Hardware stack levels used:    1
 15278 ;; Hardware stack levels required when called:    6
 15279 ;; This function calls:
 15280 ;;		___ftpack
 15281 ;; This function is called by:
 15282 ;;		_getDimmerLights_PercentToValue
 15283 ;; This function uses a non-reentrant model
 15284 ;;
 15285                           
 15286                           
 15287                           ;psect for function ___ftmul
 15288  0E91                     ___ftmul:	
 15289                           
 15290                           ;incstack = 0
 15291                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15292  0E91  0020               	movlb	0	; select bank0
 15293  0E92  082F               	movf	___ftmul@f1,w
 15294  0E93  00B5               	movwf	??___ftmul
 15295  0E94  0830               	movf	___ftmul@f1+1,w
 15296  0E95  00B6               	movwf	??___ftmul+1
 15297  0E96  0831               	movf	___ftmul@f1+2,w
 15298  0E97  00B7               	movwf	??___ftmul+2
 15299  0E98  1003               	clrc
 15300  0E99  0D36               	rlf	??___ftmul+1,w
 15301  0E9A  0D37               	rlf	??___ftmul+2,w
 15302  0E9B  00B8               	movwf	??___ftmul+3
 15303  0E9C  0838               	movf	??___ftmul+3,w
 15304  0E9D  00B9               	movwf	___ftmul@exp
 15305  0E9E  08B9               	movf	___ftmul@exp,f
 15306  0E9F  1D03               	skipz
 15307  0EA0  2EA8               	goto	l6491
 15308  0EA1  3000               	movlw	0
 15309  0EA2  00AF               	movwf	?___ftmul
 15310  0EA3  3000               	movlw	0
 15311  0EA4  00B0               	movwf	?___ftmul+1
 15312  0EA5  3000               	movlw	0
 15313  0EA6  00B1               	movwf	?___ftmul+2
 15314  0EA7  0008               	return
 15315  0EA8                     l6491:	
 15316  0EA8  0832               	movf	___ftmul@f2,w
 15317  0EA9  00B5               	movwf	??___ftmul
 15318  0EAA  0833               	movf	___ftmul@f2+1,w
 15319  0EAB  00B6               	movwf	??___ftmul+1
 15320  0EAC  0834               	movf	___ftmul@f2+2,w
 15321  0EAD  00B7               	movwf	??___ftmul+2
 15322  0EAE  1003               	clrc
 15323  0EAF  0D36               	rlf	??___ftmul+1,w
 15324  0EB0  0D37               	rlf	??___ftmul+2,w
 15325  0EB1  00B8               	movwf	??___ftmul+3
 15326  0EB2  0838               	movf	??___ftmul+3,w
 15327  0EB3  00BE               	movwf	___ftmul@sign
 15328  0EB4  08BE               	movf	___ftmul@sign,f
 15329  0EB5  1D03               	skipz
 15330  0EB6  2EBE               	goto	l6497
 15331  0EB7  3000               	movlw	0
 15332  0EB8  00AF               	movwf	?___ftmul
 15333  0EB9  3000               	movlw	0
 15334  0EBA  00B0               	movwf	?___ftmul+1
 15335  0EBB  3000               	movlw	0
 15336  0EBC  00B1               	movwf	?___ftmul+2
 15337  0EBD  0008               	return
 15338  0EBE                     l6497:	
 15339  0EBE  083E               	movf	___ftmul@sign,w
 15340  0EBF  3E7B               	addlw	123
 15341  0EC0  00B5               	movwf	??___ftmul
 15342  0EC1  0835               	movf	??___ftmul,w
 15343  0EC2  07B9               	addwf	___ftmul@exp,f
 15344  0EC3  082F               	movf	___ftmul@f1,w
 15345  0EC4  00B5               	movwf	??___ftmul
 15346  0EC5  0830               	movf	___ftmul@f1+1,w
 15347  0EC6  00B6               	movwf	??___ftmul+1
 15348  0EC7  0831               	movf	___ftmul@f1+2,w
 15349  0EC8  00B7               	movwf	??___ftmul+2
 15350  0EC9  3010               	movlw	16
 15351  0ECA                     u5615:	
 15352  0ECA  36B7               	lsrf	??___ftmul+2,f
 15353  0ECB  0CB6               	rrf	??___ftmul+1,f
 15354  0ECC  0CB5               	rrf	??___ftmul,f
 15355  0ECD  0B89               	decfsz	9,f
 15356  0ECE  2ECA               	goto	u5615
 15357  0ECF  0835               	movf	??___ftmul,w
 15358  0ED0  00B8               	movwf	??___ftmul+3
 15359  0ED1  0838               	movf	??___ftmul+3,w
 15360  0ED2  00BE               	movwf	___ftmul@sign
 15361  0ED3  0832               	movf	___ftmul@f2,w
 15362  0ED4  00B5               	movwf	??___ftmul
 15363  0ED5  0833               	movf	___ftmul@f2+1,w
 15364  0ED6  00B6               	movwf	??___ftmul+1
 15365  0ED7  0834               	movf	___ftmul@f2+2,w
 15366  0ED8  00B7               	movwf	??___ftmul+2
 15367  0ED9  3010               	movlw	16
 15368  0EDA                     u5625:	
 15369  0EDA  36B7               	lsrf	??___ftmul+2,f
 15370  0EDB  0CB6               	rrf	??___ftmul+1,f
 15371  0EDC  0CB5               	rrf	??___ftmul,f
 15372  0EDD  0B89               	decfsz	9,f
 15373  0EDE  2EDA               	goto	u5625
 15374  0EDF  0835               	movf	??___ftmul,w
 15375  0EE0  00B8               	movwf	??___ftmul+3
 15376  0EE1  0838               	movf	??___ftmul+3,w
 15377  0EE2  06BE               	xorwf	___ftmul@sign,f
 15378  0EE3  3080               	movlw	128
 15379  0EE4  00B5               	movwf	??___ftmul
 15380  0EE5  0835               	movf	??___ftmul,w
 15381  0EE6  05BE               	andwf	___ftmul@sign,f
 15382  0EE7  17B0               	bsf	___ftmul@f1+1,7
 15383  0EE8  17B3               	bsf	___ftmul@f2+1,7
 15384  0EE9  30FF               	movlw	255
 15385  0EEA  05B2               	andwf	___ftmul@f2,f
 15386  0EEB  30FF               	movlw	255
 15387  0EEC  05B3               	andwf	___ftmul@f2+1,f
 15388  0EED  3000               	movlw	0
 15389  0EEE  05B4               	andwf	___ftmul@f2+2,f
 15390  0EEF  3000               	movlw	0
 15391  0EF0  00BA               	movwf	___ftmul@f3_as_product
 15392  0EF1  3000               	movlw	0
 15393  0EF2  00BB               	movwf	___ftmul@f3_as_product+1
 15394  0EF3  3000               	movlw	0
 15395  0EF4  00BC               	movwf	___ftmul@f3_as_product+2
 15396  0EF5  3007               	movlw	7
 15397  0EF6  00B5               	movwf	??___ftmul
 15398  0EF7  0835               	movf	??___ftmul,w
 15399  0EF8  00BD               	movwf	___ftmul@cntr
 15400  0EF9                     l6509:	
 15401  0EF9  1C2F               	btfss	___ftmul@f1,0
 15402  0EFA  2F01               	goto	l6513
 15403  0EFB  0832               	movf	___ftmul@f2,w
 15404  0EFC  07BA               	addwf	___ftmul@f3_as_product,f
 15405  0EFD  0833               	movf	___ftmul@f2+1,w
 15406  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 15407  0EFF  0834               	movf	___ftmul@f2+2,w
 15408  0F00  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 15409  0F01                     l6513:	
 15410  0F01  3001               	movlw	1
 15411  0F02                     u5645:	
 15412  0F02  36B1               	lsrf	___ftmul@f1+2,f
 15413  0F03  0CB0               	rrf	___ftmul@f1+1,f
 15414  0F04  0CAF               	rrf	___ftmul@f1,f
 15415  0F05  0B89               	decfsz	9,f
 15416  0F06  2F02               	goto	u5645
 15417  0F07  3001               	movlw	1
 15418  0F08                     u5655:	
 15419  0F08  35B2               	lslf	___ftmul@f2,f
 15420  0F09  0DB3               	rlf	___ftmul@f2+1,f
 15421  0F0A  0DB4               	rlf	___ftmul@f2+2,f
 15422  0F0B  0B89               	decfsz	9,f
 15423  0F0C  2F08               	goto	u5655
 15424  0F0D  3001               	movlw	1
 15425  0F0E  02BD               	subwf	___ftmul@cntr,f
 15426  0F0F  1D03               	btfss	3,2
 15427  0F10  2EF9               	goto	l6509
 15428  0F11  3009               	movlw	9
 15429  0F12  00B5               	movwf	??___ftmul
 15430  0F13  0835               	movf	??___ftmul,w
 15431  0F14  00BD               	movwf	___ftmul@cntr
 15432  0F15                     l6521:	
 15433  0F15  1C2F               	btfss	___ftmul@f1,0
 15434  0F16  2F1D               	goto	l6525
 15435  0F17  0832               	movf	___ftmul@f2,w
 15436  0F18  07BA               	addwf	___ftmul@f3_as_product,f
 15437  0F19  0833               	movf	___ftmul@f2+1,w
 15438  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 15439  0F1B  0834               	movf	___ftmul@f2+2,w
 15440  0F1C  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 15441  0F1D                     l6525:	
 15442  0F1D  3001               	movlw	1
 15443  0F1E                     u5685:	
 15444  0F1E  36B1               	lsrf	___ftmul@f1+2,f
 15445  0F1F  0CB0               	rrf	___ftmul@f1+1,f
 15446  0F20  0CAF               	rrf	___ftmul@f1,f
 15447  0F21  0B89               	decfsz	9,f
 15448  0F22  2F1E               	goto	u5685
 15449  0F23  3001               	movlw	1
 15450  0F24                     u5695:	
 15451  0F24  36BC               	lsrf	___ftmul@f3_as_product+2,f
 15452  0F25  0CBB               	rrf	___ftmul@f3_as_product+1,f
 15453  0F26  0CBA               	rrf	___ftmul@f3_as_product,f
 15454  0F27  0B89               	decfsz	9,f
 15455  0F28  2F24               	goto	u5695
 15456  0F29  3001               	movlw	1
 15457  0F2A  02BD               	subwf	___ftmul@cntr,f
 15458  0F2B  1D03               	btfss	3,2
 15459  0F2C  2F15               	goto	l6521
 15460  0F2D  083A               	movf	___ftmul@f3_as_product,w
 15461  0F2E  00A1               	movwf	___ftpack@arg
 15462  0F2F  083B               	movf	___ftmul@f3_as_product+1,w
 15463  0F30  00A2               	movwf	___ftpack@arg+1
 15464  0F31  083C               	movf	___ftmul@f3_as_product+2,w
 15465  0F32  00A3               	movwf	___ftpack@arg+2
 15466  0F33  0839               	movf	___ftmul@exp,w
 15467  0F34  00B5               	movwf	??___ftmul
 15468  0F35  0835               	movf	??___ftmul,w
 15469  0F36  00A4               	movwf	___ftpack@exp
 15470  0F37  083E               	movf	___ftmul@sign,w
 15471  0F38  00B6               	movwf	??___ftmul+1
 15472  0F39  0836               	movf	??___ftmul+1,w
 15473  0F3A  00A5               	movwf	___ftpack@sign
 15474  0F3B  3196  2608         	fcall	___ftpack
 15475  0F3D  0020               	movlb	0	; select bank0
 15476  0F3E  0821               	movf	?___ftpack,w
 15477  0F3F  00AF               	movwf	?___ftmul
 15478  0F40  0822               	movf	?___ftpack+1,w
 15479  0F41  00B0               	movwf	?___ftmul+1
 15480  0F42  0823               	movf	?___ftpack+2,w
 15481  0F43  00B1               	movwf	?___ftmul+2
 15482  0F44  0008               	return
 15483  0F45                     __end_of___ftmul:	
 15484                           
 15485                           	psect	text100
 15486  1A6E                     __ptext100:	
 15487 ;; *************** function _getDelayOff_GO *****************
 15488 ;; Defined at:
 15489 ;;		line 114 in file "../src/DelayOff_B1.c"
 15490 ;; Parameters:    Size  Location     Type
 15491 ;;  sw              1    wreg     unsigned char 
 15492 ;; Auto vars:     Size  Location     Type
 15493 ;;  sw              1    3[BANK0 ] unsigned char 
 15494 ;;  go              1    4[BANK0 ] unsigned char 
 15495 ;; Return value:  Size  Location     Type
 15496 ;;                  1    wreg      unsigned char 
 15497 ;; Registers used:
 15498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15499 ;; Tracked objects:
 15500 ;;		On entry : 0/0
 15501 ;;		On exit  : 0/0
 15502 ;;		Unchanged: 0/0
 15503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;Total ram usage:        2 bytes
 15509 ;; Hardware stack levels used:    1
 15510 ;; Hardware stack levels required when called:    6
 15511 ;; This function calls:
 15512 ;;		_DelayOffPointSelect
 15513 ;; This function is called by:
 15514 ;;		_setDimmerLights_OnOff
 15515 ;; This function uses a non-reentrant model
 15516 ;;
 15517                           
 15518                           
 15519                           ;psect for function _getDelayOff_GO
 15520  1A6E                     _getDelayOff_GO:	
 15521                           
 15522                           ;incstack = 0
 15523                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15524                           ;getDelayOff_GO@sw stored from wreg
 15525  1A6E  0020               	movlb	0	; select bank0
 15526  1A6F  00A3               	movwf	getDelayOff_GO@sw
 15527                           
 15528                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15529  1A70  0823               	movf	getDelayOff_GO@sw,w
 15530  1A71  319B  23E9         	fcall	_DelayOffPointSelect
 15531                           
 15532                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15533  1A73  0021               	movlb	1	; select bank1
 15534  1A74  084D               	movf	_DelayOff^(0+128),w
 15535  1A75  0086               	movwf	6
 15536  1A76  3001               	movlw	1	; select bank2/3
 15537  1A77  0087               	movwf	7
 15538  1A78  3000               	movlw	0
 15539  1A79  1881               	btfsc	1,1
 15540  1A7A  3001               	movlw	1
 15541  1A7B  0020               	movlb	0	; select bank0
 15542  1A7C  00A4               	movwf	getDelayOff_GO@go
 15543                           
 15544                           ;DelayOff_B1.c: 117: return go;
 15545  1A7D  0824               	movf	getDelayOff_GO@go,w
 15546  1A7E  0008               	return
 15547  1A7F                     __end_of_getDelayOff_GO:	
 15548                           
 15549                           	psect	text101
 15550  1AA1                     __ptext101:	
 15551 ;; *************** function _getCmd_Status *****************
 15552 ;; Defined at:
 15553 ;;		line 659 in file "../src/main_B1.c"
 15554 ;; Parameters:    Size  Location     Type
 15555 ;;  number          1    wreg     unsigned char 
 15556 ;; Auto vars:     Size  Location     Type
 15557 ;;  number          1    1[BANK0 ] unsigned char 
 15558 ;;  cmd             1    2[BANK0 ] unsigned char 
 15559 ;; Return value:  Size  Location     Type
 15560 ;;                  1    wreg      unsigned char 
 15561 ;; Registers used:
 15562 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15563 ;; Tracked objects:
 15564 ;;		On entry : 0/0
 15565 ;;		On exit  : 0/0
 15566 ;;		Unchanged: 0/0
 15567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15569 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15571 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15572 ;;Total ram usage:        2 bytes
 15573 ;; Hardware stack levels used:    1
 15574 ;; Hardware stack levels required when called:    5
 15575 ;; This function calls:
 15576 ;;		Nothing
 15577 ;; This function is called by:
 15578 ;;		_setDimmerLights_OnOff
 15579 ;; This function uses a non-reentrant model
 15580 ;;
 15581                           
 15582                           
 15583                           ;psect for function _getCmd_Status
 15584  1AA1                     _getCmd_Status:	
 15585                           
 15586                           ;incstack = 0
 15587                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15588                           ;getCmd_Status@number stored from wreg
 15589  1AA1  0020               	movlb	0	; select bank0
 15590  1AA2  00A1               	movwf	getCmd_Status@number
 15591                           
 15592                           ;main_B1.c: 660: char cmd = 0;
 15593  1AA3  01A2               	clrf	getCmd_Status@cmd
 15594                           
 15595                           ;main_B1.c: 661: switch (number) {
 15596  1AA4  2AAC               	goto	l7183
 15597  1AA5                     l7179:	
 15598                           ;main_B1.c: 662: case 1:
 15599                           
 15600                           
 15601                           ;main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15602  1AA5  3000               	movlw	0
 15603  1AA6  0021               	movlb	1	; select bank1
 15604  1AA7  184C               	btfsc	_Cmd^(0+128),0
 15605  1AA8  3001               	movlw	1
 15606  1AA9  0020               	movlb	0	; select bank0
 15607  1AAA  00A2               	movwf	getCmd_Status@cmd
 15608                           
 15609                           ;main_B1.c: 665: }
 15610                           
 15611                           ;main_B1.c: 664: break;
 15612  1AAB  2AB1               	goto	l7185
 15613  1AAC                     l7183:	
 15614  1AAC  0821               	movf	getCmd_Status@number,w
 15615                           
 15616                           ; Switch size 1, requested type "space"
 15617                           ; Number of cases is 1, Range of values is 1 to 1
 15618                           ; switch strategies available:
 15619                           ; Name         Instructions Cycles
 15620                           ; simple_byte            4     3 (average)
 15621                           ; direct_byte           11     9 (fixed)
 15622                           ; jumptable            263     9 (fixed)
 15623                           ;	Chosen strategy is simple_byte
 15624  1AAD  3A01               	xorlw	1	; case 1
 15625  1AAE  1903               	skipnz
 15626  1AAF  2AA5               	goto	l7179
 15627  1AB0  2AB1               	goto	l7185
 15628  1AB1                     l7185:	
 15629                           
 15630                           ;main_B1.c: 666: return cmd;
 15631  1AB1  0822               	movf	getCmd_Status@cmd,w
 15632  1AB2  0008               	return
 15633  1AB3                     __end_of_getCmd_Status:	
 15634                           
 15635                           	psect	text102
 15636  13AE                     __ptext102:	
 15637 ;; *************** function _setDimmerLights_Dimming *****************
 15638 ;; Defined at:
 15639 ;;		line 883 in file "../src/Dimmer_B1.c"
 15640 ;; Parameters:    Size  Location     Type
 15641 ;;  lights          1    wreg     unsigned char 
 15642 ;;  status          1   75[BANK0 ] unsigned char 
 15643 ;; Auto vars:     Size  Location     Type
 15644 ;;  lights          1   77[BANK0 ] unsigned char 
 15645 ;; Return value:  Size  Location     Type
 15646 ;;		None               void
 15647 ;; Registers used:
 15648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15649 ;; Tracked objects:
 15650 ;;		On entry : 0/0
 15651 ;;		On exit  : 0/0
 15652 ;;		Unchanged: 0/0
 15653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15654 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15657 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15658 ;;Total ram usage:        3 bytes
 15659 ;; Hardware stack levels used:    1
 15660 ;; Hardware stack levels required when called:    8
 15661 ;; This function calls:
 15662 ;;		_getDimmerIntr_DimmingValue
 15663 ;;		_getDimmerLights_ValueToPercent
 15664 ;;		_setBuz
 15665 ;;		_setDimmerIntr_Dimming_Sw
 15666 ;;		_setDimmerIntr_MaxmumValue
 15667 ;;		_setDimmerLights_Line
 15668 ;;		_setProductData
 15669 ;;		_setRF_DimmerLights
 15670 ;;		_setRF_TransceiveGO
 15671 ;;		_setTxData
 15672 ;; This function is called by:
 15673 ;;		_setDimmerLights_Main
 15674 ;; This function uses a non-reentrant model
 15675 ;;
 15676                           
 15677                           
 15678                           ;psect for function _setDimmerLights_Dimming
 15679  13AE                     _setDimmerLights_Dimming:	
 15680                           
 15681                           ;incstack = 0
 15682                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15683                           ;setDimmerLights_Dimming@lights stored from wreg
 15684  13AE  0020               	movlb	0	; select bank0
 15685  13AF  00ED               	movwf	setDimmerLights_Dimming@lights
 15686                           
 15687                           ;Dimmer_B1.c: 884: if (status == 1) {
 15688  13B0  086B               	movf	setDimmerLights_Dimming@status,w
 15689  13B1  3A01               	xorlw	1
 15690  13B2  1D03               	skipz
 15691  13B3  2BC7               	goto	l9401
 15692                           
 15693                           ;Dimmer_B1.c: 885: setDimmerIntr_Dimming_Sw(lights, 1);
 15694  13B4  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15695  13B5  0AA1               	incf	setDimmerIntr_Dimming_Sw@command,f
 15696  13B6  086D               	movf	setDimmerLights_Dimming@lights,w
 15697  13B7  319F  2748  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15698                           
 15699                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 15700  13BA  3000               	movlw	0
 15701  13BB  319B  230D  3193   	fcall	_setRF_TransceiveGO
 15702                           
 15703                           ;Dimmer_B1.c: 890: setBuz(1, 100);
 15704  13BE  3064               	movlw	100
 15705  13BF  0020               	movlb	0	; select bank0
 15706  13C0  00AA               	movwf	setBuz@time
 15707  13C1  3000               	movlw	0
 15708  13C2  00AB               	movwf	setBuz@time+1
 15709  13C3  3001               	movlw	1
 15710  13C4  3194  24F8         	fcall	_setBuz
 15711                           
 15712                           ;Dimmer_B1.c: 891: } else if (status == 0) {
 15713  13C6  0008               	return
 15714  13C7                     l9401:	
 15715  13C7  0020               	movlb	0	; select bank0
 15716  13C8  08EB               	movf	setDimmerLights_Dimming@status,f
 15717  13C9  1D03               	skipz
 15718  13CA  0008               	return
 15719                           
 15720                           ;Dimmer_B1.c: 892: setDimmerIntr_Dimming_Sw(lights, 0);
 15721  13CB  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15722  13CC  086D               	movf	setDimmerLights_Dimming@lights,w
 15723  13CD  319F  2748  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15724                           
 15725                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 15726  13D0  0022               	movlb	2	; select bank2
 15727  13D1  1139               	bcf	_Dimmer^(0+256),2
 15728                           
 15729                           ;Dimmer_B1.c: 896: setDimmerLights_Line(lights);
 15730  13D2  0020               	movlb	0	; select bank0
 15731  13D3  086D               	movf	setDimmerLights_Dimming@lights,w
 15732  13D4  319D  2514  3193   	fcall	_setDimmerLights_Line
 15733                           
 15734                           ;Dimmer_B1.c: 899: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15735  13D7  0020               	movlb	0	; select bank0
 15736  13D8  086D               	movf	setDimmerLights_Dimming@lights,w
 15737  13D9  319B  23D3  3193   	fcall	_getDimmerIntr_DimmingValue
 15738  13DC  0020               	movlb	0	; select bank0
 15739  13DD  00EC               	movwf	??_setDimmerLights_Dimming
 15740  13DE  086C               	movf	??_setDimmerLights_Dimming,w
 15741  13DF  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 15742  13E0  086D               	movf	setDimmerLights_Dimming@lights,w
 15743  13E1  319C  2417  3193   	fcall	_setDimmerIntr_MaxmumValue
 15744                           
 15745                           ;Dimmer_B1.c: 900: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15746  13E4  0020               	movlb	0	; select bank0
 15747  13E5  086D               	movf	setDimmerLights_Dimming@lights,w
 15748  13E6  319B  23D3  3193   	fcall	_getDimmerIntr_DimmingValue
 15749  13E9  3196  2669  3193   	fcall	_getDimmerLights_ValueToPercent
 15750  13EC  0020               	movlb	0	; select bank0
 15751  13ED  00EC               	movwf	??_setDimmerLights_Dimming
 15752  13EE  086C               	movf	??_setDimmerLights_Dimming,w
 15753  13EF  00E3               	movwf	setProductData@value
 15754  13F0  086D               	movf	setDimmerLights_Dimming@lights,w
 15755  13F1  3E14               	addlw	20
 15756  13F2  3199  21FC  3193   	fcall	_setProductData
 15757                           
 15758                           ;Dimmer_B1.c: 910: setRF_DimmerLights(lights, 1);
 15759  13F5  0020               	movlb	0	; select bank0
 15760  13F6  01E6               	clrf	setRF_DimmerLights@on
 15761  13F7  0AE6               	incf	setRF_DimmerLights@on,f
 15762  13F8  086D               	movf	setDimmerLights_Dimming@lights,w
 15763  13F9  3196  26CE  3193   	fcall	_setRF_DimmerLights
 15764                           
 15765                           ;Dimmer_B1.c: 911: setTxData();
 15766  13FC  318F  2745         	fcall	_setTxData
 15767  13FE  0008               	return
 15768  13FF                     __end_of_setDimmerLights_Dimming:	
 15769                           
 15770                           	psect	text103
 15771  0F45                     __ptext103:	
 15772 ;; *************** function _setTxData *****************
 15773 ;; Defined at:
 15774 ;;		line 183 in file "../src/RF_Control_B1.c"
 15775 ;; Parameters:    Size  Location     Type
 15776 ;;		None
 15777 ;; Auto vars:     Size  Location     Type
 15778 ;;  i               1    0        unsigned char 
 15779 ;; Return value:  Size  Location     Type
 15780 ;;		None               void
 15781 ;; Registers used:
 15782 ;;		wreg, fsr1l, fsr1h, status,2
 15783 ;; Tracked objects:
 15784 ;;		On entry : 0/0
 15785 ;;		On exit  : 0/0
 15786 ;;		Unchanged: 0/0
 15787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15792 ;;Total ram usage:        1 bytes
 15793 ;; Hardware stack levels used:    1
 15794 ;; Hardware stack levels required when called:    5
 15795 ;; This function calls:
 15796 ;;		Nothing
 15797 ;; This function is called by:
 15798 ;;		_setDimmerLights_OnOff
 15799 ;;		_setDimmerLights_Dimming
 15800 ;;		_getRxData
 15801 ;;		_setControl_Lights_Table
 15802 ;;		_setRFSW_Control
 15803 ;;		_setRFSW_AdjControl
 15804 ;; This function uses a non-reentrant model
 15805 ;;
 15806                           
 15807                           
 15808                           ;psect for function _setTxData
 15809  0F45                     _setTxData:	
 15810                           
 15811                           ;RF_Control_B1.c: 184: char i;
 15812                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15813                           
 15814                           ;incstack = 0
 15815                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15816  0F45  0021               	movlb	1	; select bank1
 15817  0F46  1C20               	btfss	_RF1^(0+128),0
 15818  0F47  0008               	return
 15819                           
 15820                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15821  0F48  1520               	bsf	_RF1^(0+128),2
 15822                           
 15823                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15824  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15825  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15826                           
 15827                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15828  0F4B  3063               	movlw	99
 15829  0F4C  0020               	movlb	0	; select bank0
 15830  0F4D  00A1               	movwf	??_setTxData
 15831  0F4E  0821               	movf	??_setTxData,w
 15832  0F4F  0023               	movlb	3	; select bank3
 15833  0F50  00A0               	movwf	_RF_Data^(0+384)
 15834                           
 15835                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15836  0F51  3002               	movlw	2
 15837  0F52  0020               	movlb	0	; select bank0
 15838  0F53  00A1               	movwf	??_setTxData
 15839  0F54  0821               	movf	??_setTxData,w
 15840  0F55  0023               	movlb	3	; select bank3
 15841  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15842                           
 15843                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15844  0F57  0021               	movlb	1	; select bank1
 15845  0F58  086D               	movf	_product^(0+128),w
 15846  0F59  0086               	movwf	6
 15847  0F5A  3002               	movlw	2	; select bank4/5
 15848  0F5B  0087               	movwf	7
 15849  0F5C  3002               	movlw	2	; select bank4/5
 15850  0F5D  3F42               	moviw [2]fsr1
 15851  0F5E  0023               	movlb	3	; select bank3
 15852  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15853                           
 15854                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15855  0F60  0021               	movlb	1	; select bank1
 15856  0F61  086D               	movf	_product^(0+128),w
 15857  0F62  0086               	movwf	6
 15858  0F63  3002               	movlw	2	; select bank4/5
 15859  0F64  0087               	movwf	7
 15860  0F65  3002               	movlw	2	; select bank4/5
 15861  0F66  3F43               	moviw [3]fsr1
 15862  0F67  0023               	movlb	3	; select bank3
 15863  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15864                           
 15865                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15866  0F69  0021               	movlb	1	; select bank1
 15867  0F6A  086D               	movf	_product^(0+128),w
 15868  0F6B  0086               	movwf	6
 15869  0F6C  3002               	movlw	2	; select bank4/5
 15870  0F6D  0087               	movwf	7
 15871  0F6E  3002               	movlw	2	; select bank4/5
 15872  0F6F  3F44               	moviw [4]fsr1
 15873  0F70  0023               	movlb	3	; select bank3
 15874  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15875                           
 15876                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15877  0F72  0021               	movlb	1	; select bank1
 15878  0F73  086D               	movf	_product^(0+128),w
 15879  0F74  0086               	movwf	6
 15880  0F75  3002               	movlw	2	; select bank4/5
 15881  0F76  0087               	movwf	7
 15882  0F77  3002               	movlw	2	; select bank4/5
 15883  0F78  3F45               	moviw [5]fsr1
 15884  0F79  0023               	movlb	3	; select bank3
 15885  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15886                           
 15887                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15888  0F7B  0021               	movlb	1	; select bank1
 15889  0F7C  086D               	movf	_product^(0+128),w
 15890  0F7D  0086               	movwf	6
 15891  0F7E  3002               	movlw	2	; select bank4/5
 15892  0F7F  0087               	movwf	7
 15893  0F80  3002               	movlw	2	; select bank4/5
 15894  0F81  3F46               	moviw [6]fsr1
 15895  0F82  0023               	movlb	3	; select bank3
 15896  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15897                           
 15898                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15899  0F84  0021               	movlb	1	; select bank1
 15900  0F85  086D               	movf	_product^(0+128),w
 15901  0F86  0086               	movwf	6
 15902  0F87  3002               	movlw	2	; select bank4/5
 15903  0F88  0087               	movwf	7
 15904  0F89  3002               	movlw	2	; select bank4/5
 15905  0F8A  3F47               	moviw [7]fsr1
 15906  0F8B  0023               	movlb	3	; select bank3
 15907  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15908                           
 15909                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15910  0F8D  0021               	movlb	1	; select bank1
 15911  0F8E  086D               	movf	_product^(0+128),w
 15912  0F8F  0086               	movwf	6
 15913  0F90  3002               	movlw	2	; select bank4/5
 15914  0F91  0087               	movwf	7
 15915  0F92  3002               	movlw	2	; select bank4/5
 15916  0F93  3F48               	moviw [8]fsr1
 15917  0F94  0023               	movlb	3	; select bank3
 15918  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15919                           
 15920                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15921  0F96  0021               	movlb	1	; select bank1
 15922  0F97  086D               	movf	_product^(0+128),w
 15923  0F98  0086               	movwf	6
 15924  0F99  3002               	movlw	2	; select bank4/5
 15925  0F9A  0087               	movwf	7
 15926  0F9B  3002               	movlw	2	; select bank4/5
 15927  0F9C  3F49               	moviw [9]fsr1
 15928  0F9D  0023               	movlb	3	; select bank3
 15929  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15930                           
 15931                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15932  0F9F  0021               	movlb	1	; select bank1
 15933  0FA0  086D               	movf	_product^(0+128),w
 15934  0FA1  0086               	movwf	6
 15935  0FA2  3002               	movlw	2	; select bank4/5
 15936  0FA3  0087               	movwf	7
 15937  0FA4  3002               	movlw	2	; select bank4/5
 15938  0FA5  3F4A               	moviw [10]fsr1
 15939  0FA6  0023               	movlb	3	; select bank3
 15940  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15941                           
 15942                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15943  0FA8  0021               	movlb	1	; select bank1
 15944  0FA9  086D               	movf	_product^(0+128),w
 15945  0FAA  0086               	movwf	6
 15946  0FAB  3002               	movlw	2	; select bank4/5
 15947  0FAC  0087               	movwf	7
 15948  0FAD  3002               	movlw	2	; select bank4/5
 15949  0FAE  3F4B               	moviw [11]fsr1
 15950  0FAF  0023               	movlb	3	; select bank3
 15951  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15952                           
 15953                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15954  0FB1  0021               	movlb	1	; select bank1
 15955  0FB2  086D               	movf	_product^(0+128),w
 15956  0FB3  0086               	movwf	6
 15957  0FB4  3002               	movlw	2	; select bank4/5
 15958  0FB5  0087               	movwf	7
 15959  0FB6  3002               	movlw	2	; select bank4/5
 15960  0FB7  3F4C               	moviw [12]fsr1
 15961  0FB8  0023               	movlb	3	; select bank3
 15962  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15963                           
 15964                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15965  0FBA  0021               	movlb	1	; select bank1
 15966  0FBB  086D               	movf	_product^(0+128),w
 15967  0FBC  0086               	movwf	6
 15968  0FBD  3002               	movlw	2	; select bank4/5
 15969  0FBE  0087               	movwf	7
 15970  0FBF  3002               	movlw	2	; select bank4/5
 15971  0FC0  3F4D               	moviw [13]fsr1
 15972  0FC1  0023               	movlb	3	; select bank3
 15973  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15974                           
 15975                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15976  0FC3  0021               	movlb	1	; select bank1
 15977  0FC4  086D               	movf	_product^(0+128),w
 15978  0FC5  0086               	movwf	6
 15979  0FC6  3002               	movlw	2	; select bank4/5
 15980  0FC7  0087               	movwf	7
 15981  0FC8  3002               	movlw	2	; select bank4/5
 15982  0FC9  3F4E               	moviw [14]fsr1
 15983  0FCA  0023               	movlb	3	; select bank3
 15984  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15985                           
 15986                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15987  0FCC  0021               	movlb	1	; select bank1
 15988  0FCD  086D               	movf	_product^(0+128),w
 15989  0FCE  0086               	movwf	6
 15990  0FCF  3002               	movlw	2	; select bank4/5
 15991  0FD0  0087               	movwf	7
 15992  0FD1  3002               	movlw	2	; select bank4/5
 15993  0FD2  3F4F               	moviw [15]fsr1
 15994  0FD3  0023               	movlb	3	; select bank3
 15995  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15996                           
 15997                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15998  0FD5  0021               	movlb	1	; select bank1
 15999  0FD6  086D               	movf	_product^(0+128),w
 16000  0FD7  0086               	movwf	6
 16001  0FD8  3002               	movlw	2	; select bank4/5
 16002  0FD9  0087               	movwf	7
 16003  0FDA  3002               	movlw	2	; select bank4/5
 16004  0FDB  3F50               	moviw [16]fsr1
 16005  0FDC  0023               	movlb	3	; select bank3
 16006  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 16007                           
 16008                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 16009  0FDE  0021               	movlb	1	; select bank1
 16010  0FDF  086D               	movf	_product^(0+128),w
 16011  0FE0  0086               	movwf	6
 16012  0FE1  3002               	movlw	2	; select bank4/5
 16013  0FE2  0087               	movwf	7
 16014  0FE3  3002               	movlw	2	; select bank4/5
 16015  0FE4  3F51               	moviw [17]fsr1
 16016  0FE5  0023               	movlb	3	; select bank3
 16017  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 16018                           
 16019                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 16020  0FE7  0021               	movlb	1	; select bank1
 16021  0FE8  086D               	movf	_product^(0+128),w
 16022  0FE9  0086               	movwf	6
 16023  0FEA  3002               	movlw	2	; select bank4/5
 16024  0FEB  0087               	movwf	7
 16025  0FEC  3002               	movlw	2	; select bank4/5
 16026  0FED  3F52               	moviw [18]fsr1
 16027  0FEE  0023               	movlb	3	; select bank3
 16028  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 16029                           
 16030                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 16031  0FF0  0021               	movlb	1	; select bank1
 16032  0FF1  086D               	movf	_product^(0+128),w
 16033  0FF2  0086               	movwf	6
 16034  0FF3  3002               	movlw	2	; select bank4/5
 16035  0FF4  0087               	movwf	7
 16036  0FF5  3002               	movlw	2	; select bank4/5
 16037  0FF6  3F53               	moviw [19]fsr1
 16038  0FF7  0023               	movlb	3	; select bank3
 16039  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 16040                           
 16041                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 16042  0FF9  30D2               	movlw	210
 16043  0FFA  0020               	movlb	0	; select bank0
 16044  0FFB  00A1               	movwf	??_setTxData
 16045  0FFC  0821               	movf	??_setTxData,w
 16046  0FFD  0023               	movlb	3	; select bank3
 16047  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 16048  0FFF  0008               	return
 16049  1000                     __end_of_setTxData:	
 16050                           
 16051                           	psect	text104
 16052  1B0D                     __ptext104:	
 16053 ;; *************** function _setRF_TransceiveGO *****************
 16054 ;; Defined at:
 16055 ;;		line 461 in file "../src/RF_Control_B1.c"
 16056 ;; Parameters:    Size  Location     Type
 16057 ;;  command         1    wreg     unsigned char 
 16058 ;; Auto vars:     Size  Location     Type
 16059 ;;  command         1    2[BANK0 ] unsigned char 
 16060 ;; Return value:  Size  Location     Type
 16061 ;;		None               void
 16062 ;; Registers used:
 16063 ;;		wreg, status,2, status,0
 16064 ;; Tracked objects:
 16065 ;;		On entry : 0/0
 16066 ;;		On exit  : 0/0
 16067 ;;		Unchanged: 0/0
 16068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16072 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16073 ;;Total ram usage:        2 bytes
 16074 ;; Hardware stack levels used:    1
 16075 ;; Hardware stack levels required when called:    5
 16076 ;; This function calls:
 16077 ;;		Nothing
 16078 ;; This function is called by:
 16079 ;;		_setDimmerLights_Dimming
 16080 ;; This function uses a non-reentrant model
 16081 ;;
 16082                           
 16083                           
 16084                           ;psect for function _setRF_TransceiveGO
 16085  1B0D                     _setRF_TransceiveGO:	
 16086                           
 16087                           ;incstack = 0
 16088                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 16089                           ;setRF_TransceiveGO@command stored from wreg
 16090  1B0D  0020               	movlb	0	; select bank0
 16091  1B0E  00A2               	movwf	setRF_TransceiveGO@command
 16092                           
 16093                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 16094  1B0F  0822               	movf	setRF_TransceiveGO@command,w
 16095  1B10  3A01               	xorlw	1
 16096  1B11  3000               	movlw	0
 16097  1B12  1903               	skipnz
 16098  1B13  3001               	movlw	1
 16099  1B14  00A1               	movwf	??_setRF_TransceiveGO
 16100  1B15  0DA1               	rlf	??_setRF_TransceiveGO,f
 16101  1B16  0DA1               	rlf	??_setRF_TransceiveGO,f
 16102  1B17  0021               	movlb	1	; select bank1
 16103  1B18  0820               	movf	_RF1^(0+128),w
 16104  1B19  0020               	movlb	0	; select bank0
 16105  1B1A  0621               	xorwf	??_setRF_TransceiveGO,w
 16106  1B1B  39FB               	andlw	-5
 16107  1B1C  0621               	xorwf	??_setRF_TransceiveGO,w
 16108  1B1D  0021               	movlb	1	; select bank1
 16109  1B1E  00A0               	movwf	_RF1^(0+128)
 16110  1B1F  0008               	return
 16111  1B20                     __end_of_setRF_TransceiveGO:	
 16112                           
 16113                           	psect	text105
 16114  16CE                     __ptext105:	
 16115 ;; *************** function _setRF_DimmerLights *****************
 16116 ;; Defined at:
 16117 ;;		line 446 in file "../src/RF_Control_B1.c"
 16118 ;; Parameters:    Size  Location     Type
 16119 ;;  lights          1    wreg     unsigned char 
 16120 ;;  on              1   70[BANK0 ] unsigned char 
 16121 ;; Auto vars:     Size  Location     Type
 16122 ;;  lights          1   74[BANK0 ] unsigned char 
 16123 ;;  status          1   73[BANK0 ] unsigned char 
 16124 ;; Return value:  Size  Location     Type
 16125 ;;		None               void
 16126 ;; Registers used:
 16127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16128 ;; Tracked objects:
 16129 ;;		On entry : 0/0
 16130 ;;		On exit  : 0/0
 16131 ;;		Unchanged: 0/0
 16132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16133 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16134 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16136 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;Total ram usage:        5 bytes
 16138 ;; Hardware stack levels used:    1
 16139 ;; Hardware stack levels required when called:    6
 16140 ;; This function calls:
 16141 ;;		_setProductData
 16142 ;; This function is called by:
 16143 ;;		_setDimmerLights_OnOff
 16144 ;;		_setDimmerLights_Dimming
 16145 ;;		_setRFSW_Control
 16146 ;; This function uses a non-reentrant model
 16147 ;;
 16148                           
 16149                           
 16150                           ;psect for function _setRF_DimmerLights
 16151  16CE                     _setRF_DimmerLights:	
 16152                           
 16153                           ;incstack = 0
 16154                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16155                           ;setRF_DimmerLights@lights stored from wreg
 16156  16CE  0020               	movlb	0	; select bank0
 16157  16CF  00EA               	movwf	setRF_DimmerLights@lights
 16158                           
 16159                           ;RF_Control_B1.c: 447: char status = 1;
 16160  16D0  01E9               	clrf	setRF_DimmerLights@status
 16161  16D1  0AE9               	incf	setRF_DimmerLights@status,f
 16162                           
 16163                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 16164  16D2  086A               	movf	setRF_DimmerLights@lights,w
 16165  16D3  3EFF               	addlw	-1
 16166  16D4  0A89               	incf	9,f
 16167  16D5  2ED8               	goto	u10200
 16168  16D6                     u10205:	
 16169  16D6  1003               	clrc
 16170  16D7  0DE9               	rlf	setRF_DimmerLights@status,f
 16171  16D8                     u10200:	
 16172  16D8  3EFF               	addlw	-1
 16173  16D9  1D03               	skipz
 16174  16DA  2ED6               	goto	u10205
 16175                           
 16176                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 16177  16DB  086A               	movf	setRF_DimmerLights@lights,w
 16178  16DC  00E7               	movwf	??_setRF_DimmerLights
 16179  16DD  0867               	movf	??_setRF_DimmerLights,w
 16180  16DE  00E3               	movwf	setProductData@value
 16181  16DF  300B               	movlw	11
 16182  16E0  3199  21FC  3196   	fcall	_setProductData
 16183                           
 16184                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 16185  16E3  0020               	movlb	0	; select bank0
 16186  16E4  086A               	movf	setRF_DimmerLights@lights,w
 16187  16E5  3E1A               	addlw	26
 16188  16E6  0021               	movlb	1	; select bank1
 16189  16E7  076D               	addwf	_product^(0+128),w
 16190  16E8  0020               	movlb	0	; select bank0
 16191  16E9  00E7               	movwf	??_setRF_DimmerLights
 16192  16EA  0867               	movf	??_setRF_DimmerLights,w
 16193  16EB  0086               	movwf	6
 16194  16EC  3002               	movlw	2	; select bank4/5
 16195  16ED  0087               	movwf	7
 16196  16EE  0801               	movf	1,w
 16197  16EF  00E8               	movwf	??_setRF_DimmerLights+1
 16198  16F0  0868               	movf	??_setRF_DimmerLights+1,w
 16199  16F1  00E3               	movwf	setProductData@value
 16200  16F2  3011               	movlw	17
 16201  16F3  3199  21FC  3196   	fcall	_setProductData
 16202                           
 16203                           ;RF_Control_B1.c: 451: if (on == 1) {
 16204  16F6  0020               	movlb	0	; select bank0
 16205  16F7  0866               	movf	setRF_DimmerLights@on,w
 16206  16F8  3A01               	xorlw	1
 16207  16F9  1D03               	skipz
 16208  16FA  2F1D               	goto	l9221
 16209                           
 16210                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 16211  16FB  086A               	movf	setRF_DimmerLights@lights,w
 16212  16FC  3E14               	addlw	20
 16213  16FD  0021               	movlb	1	; select bank1
 16214  16FE  076D               	addwf	_product^(0+128),w
 16215  16FF  0020               	movlb	0	; select bank0
 16216  1700  00E7               	movwf	??_setRF_DimmerLights
 16217  1701  0867               	movf	??_setRF_DimmerLights,w
 16218  1702  0086               	movwf	6
 16219  1703  3002               	movlw	2	; select bank4/5
 16220  1704  0087               	movwf	7
 16221  1705  0801               	movf	1,w
 16222  1706  00E8               	movwf	??_setRF_DimmerLights+1
 16223  1707  0868               	movf	??_setRF_DimmerLights+1,w
 16224  1708  00E3               	movwf	setProductData@value
 16225  1709  3009               	movlw	9
 16226  170A  3199  21FC  3196   	fcall	_setProductData
 16227                           
 16228                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 16229  170D  0021               	movlb	1	; select bank1
 16230  170E  086D               	movf	_product^(0+128),w
 16231  170F  3E0F               	addlw	15
 16232  1710  0086               	movwf	6
 16233  1711  3002               	movlw	2	; select bank4/5
 16234  1712  0087               	movwf	7
 16235  1713  0801               	movf	1,w
 16236  1714  0020               	movlb	0	; select bank0
 16237  1715  0469               	iorwf	setRF_DimmerLights@status,w
 16238  1716  00E7               	movwf	??_setRF_DimmerLights
 16239  1717  0867               	movf	??_setRF_DimmerLights,w
 16240  1718  00E3               	movwf	setProductData@value
 16241  1719  300F               	movlw	15
 16242  171A  3199  21FC         	fcall	_setProductData
 16243                           
 16244                           ;RF_Control_B1.c: 454: } else {
 16245  171C  0008               	return
 16246  171D                     l9221:	
 16247                           
 16248                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 16249  171D  0020               	movlb	0	; select bank0
 16250  171E  01E3               	clrf	setProductData@value
 16251  171F  3009               	movlw	9
 16252  1720  3199  21FC  3196   	fcall	_setProductData
 16253                           
 16254                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 16255  1723  0021               	movlb	1	; select bank1
 16256  1724  086D               	movf	_product^(0+128),w
 16257  1725  3E0F               	addlw	15
 16258  1726  0086               	movwf	6
 16259  1727  3002               	movlw	2	; select bank4/5
 16260  1728  0087               	movwf	7
 16261  1729  0020               	movlb	0	; select bank0
 16262  172A  0969               	comf	setRF_DimmerLights@status,w
 16263  172B  0501               	andwf	1,w
 16264  172C  00E7               	movwf	??_setRF_DimmerLights
 16265  172D  0867               	movf	??_setRF_DimmerLights,w
 16266  172E  00E3               	movwf	setProductData@value
 16267  172F  300F               	movlw	15
 16268  1730  3199  21FC         	fcall	_setProductData
 16269  1732  0008               	return
 16270  1733                     __end_of_setRF_DimmerLights:	
 16271                           
 16272                           	psect	text106
 16273  1D14                     __ptext106:	
 16274 ;; *************** function _setDimmerLights_Line *****************
 16275 ;; Defined at:
 16276 ;;		line 955 in file "../src/Dimmer_B1.c"
 16277 ;; Parameters:    Size  Location     Type
 16278 ;;  lights          1    wreg     unsigned char 
 16279 ;; Auto vars:     Size  Location     Type
 16280 ;;  lights          1    1[BANK0 ] unsigned char 
 16281 ;; Return value:  Size  Location     Type
 16282 ;;		None               void
 16283 ;; Registers used:
 16284 ;;		wreg
 16285 ;; Tracked objects:
 16286 ;;		On entry : 0/0
 16287 ;;		On exit  : 0/0
 16288 ;;		Unchanged: 0/0
 16289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;Total ram usage:        1 bytes
 16295 ;; Hardware stack levels used:    1
 16296 ;; Hardware stack levels required when called:    5
 16297 ;; This function calls:
 16298 ;;		Nothing
 16299 ;; This function is called by:
 16300 ;;		_setDimmerLights_OnOff
 16301 ;;		_setDimmerLights_Dimming
 16302 ;; This function uses a non-reentrant model
 16303 ;;
 16304                           
 16305                           
 16306                           ;psect for function _setDimmerLights_Line
 16307  1D14                     _setDimmerLights_Line:	
 16308                           
 16309                           ;incstack = 0
 16310                           ; Regs used in _setDimmerLights_Line: [wreg]
 16311                           ;setDimmerLights_Line@lights stored from wreg
 16312  1D14  0020               	movlb	0	; select bank0
 16313  1D15  00A1               	movwf	setDimmerLights_Line@lights
 16314                           
 16315                           ;Dimmer_B1.c: 956: Dimmer.LoadGO = 1;
 16316  1D16  0022               	movlb	2	; select bank2
 16317  1D17  14B9               	bsf	_Dimmer^(0+256),1
 16318                           
 16319                           ;Dimmer_B1.c: 958: DimmerLights1.Line = 0;
 16320  1D18  10E9               	bcf	(_DimmerLights1^(0+256)+1),1
 16321                           
 16322                           ;Dimmer_B1.c: 959: if (lights == 1 && lights != 0) {
 16323  1D19  0020               	movlb	0	; select bank0
 16324  1D1A  0821               	movf	setDimmerLights_Line@lights,w
 16325  1D1B  3A01               	xorlw	1
 16326  1D1C  1D03               	skipz
 16327  1D1D  2D23               	goto	l905
 16328  1D1E  0821               	movf	setDimmerLights_Line@lights,w
 16329  1D1F  1903               	btfsc	3,2
 16330  1D20  2D23               	goto	l905
 16331                           
 16332                           ;Dimmer_B1.c: 960: DimmerLights1.Line = 1;
 16333  1D21  0022               	movlb	2	; select bank2
 16334  1D22  14E9               	bsf	(_DimmerLights1^(0+256)+1),1
 16335  1D23                     l905:	
 16336                           
 16337                           ;Dimmer_B1.c: 961: }
 16338                           ;Dimmer_B1.c: 964: DimmerLights2.Line = 0;
 16339  1D23  0023               	movlb	3	; select bank3
 16340  1D24  10D1               	bcf	(_DimmerLights2^(0+384)+1),1
 16341                           
 16342                           ;Dimmer_B1.c: 965: if (lights == 2 && lights != 0) {
 16343  1D25  0020               	movlb	0	; select bank0
 16344  1D26  0821               	movf	setDimmerLights_Line@lights,w
 16345  1D27  3A02               	xorlw	2
 16346  1D28  1D03               	skipz
 16347  1D29  0008               	return
 16348  1D2A  0821               	movf	setDimmerLights_Line@lights,w
 16349  1D2B  1903               	btfsc	3,2
 16350  1D2C  0008               	return
 16351                           
 16352                           ;Dimmer_B1.c: 966: DimmerLights2.Line = 1;
 16353  1D2D  0023               	movlb	3	; select bank3
 16354  1D2E  14D1               	bsf	(_DimmerLights2^(0+384)+1),1
 16355  1D2F  0020               	movlb	0	; select bank0
 16356  1D30  0008               	return
 16357  1D31                     __end_of_setDimmerLights_Line:	
 16358                           
 16359                           	psect	text107
 16360  1C17                     __ptext107:	
 16361 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16362 ;; Defined at:
 16363 ;;		line 89 in file "../src/Dimmer_B1.c"
 16364 ;; Parameters:    Size  Location     Type
 16365 ;;  lights          1    wreg     unsigned char 
 16366 ;;  value           1   67[BANK0 ] unsigned char 
 16367 ;; Auto vars:     Size  Location     Type
 16368 ;;  lights          1   69[BANK0 ] unsigned char 
 16369 ;; Return value:  Size  Location     Type
 16370 ;;		None               void
 16371 ;; Registers used:
 16372 ;;		wreg
 16373 ;; Tracked objects:
 16374 ;;		On entry : 0/0
 16375 ;;		On exit  : 0/0
 16376 ;;		Unchanged: 0/0
 16377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16378 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16381 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;Total ram usage:        3 bytes
 16383 ;; Hardware stack levels used:    1
 16384 ;; Hardware stack levels required when called:    5
 16385 ;; This function calls:
 16386 ;;		Nothing
 16387 ;; This function is called by:
 16388 ;;		_setDimmerLights_OnOff
 16389 ;;		_setDimmerLights_Dimming
 16390 ;;		_setRFSW_AdjControl
 16391 ;; This function uses a non-reentrant model
 16392 ;;
 16393                           
 16394                           
 16395                           ;psect for function _setDimmerIntr_MaxmumValue
 16396  1C17                     _setDimmerIntr_MaxmumValue:	
 16397                           
 16398                           ;incstack = 0
 16399                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16400                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16401  1C17  0020               	movlb	0	; select bank0
 16402  1C18  00E5               	movwf	setDimmerIntr_MaxmumValue@lights
 16403                           
 16404                           ;Dimmer_B1.c: 91: if (lights == 1) {
 16405  1C19  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 16406  1C1A  3A01               	xorlw	1
 16407  1C1B  1D03               	skipz
 16408  1C1C  2C23               	goto	l6711
 16409                           
 16410                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 16411  1C1D  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 16412  1C1E  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 16413  1C1F  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 16414  1C20  0021               	movlb	1	; select bank1
 16415  1C21  00B4               	movwf	(_DimmerIntr1^(0+128)+6)
 16416                           
 16417                           ;Dimmer_B1.c: 93: }
 16418  1C22  0008               	return
 16419  1C23                     l6711:	
 16420                           
 16421                           ;Dimmer_B1.c: 96: else if (lights == 2) {
 16422  1C23  0020               	movlb	0	; select bank0
 16423  1C24  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 16424  1C25  3A02               	xorlw	2
 16425  1C26  1D03               	skipz
 16426  1C27  0008               	return
 16427                           
 16428                           ;Dimmer_B1.c: 97: DimmerIntr2.MaxmumValue = value;
 16429  1C28  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 16430  1C29  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 16431  1C2A  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 16432  1C2B  0021               	movlb	1	; select bank1
 16433  1C2C  00C0               	movwf	(_DimmerIntr2^(0+128)+6)
 16434  1C2D  0008               	return
 16435  1C2E                     __end_of_setDimmerIntr_MaxmumValue:	
 16436                           
 16437                           	psect	text108
 16438  1F48                     __ptext108:	
 16439 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16440 ;; Defined at:
 16441 ;;		line 166 in file "../src/Dimmer_B1.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;  lights          1    wreg     unsigned char 
 16444 ;;  command         1    1[BANK0 ] unsigned char 
 16445 ;; Auto vars:     Size  Location     Type
 16446 ;;  lights          1    3[BANK0 ] unsigned char 
 16447 ;; Return value:  Size  Location     Type
 16448 ;;		None               void
 16449 ;; Registers used:
 16450 ;;		wreg, status,2, status,0
 16451 ;; Tracked objects:
 16452 ;;		On entry : 0/0
 16453 ;;		On exit  : 0/0
 16454 ;;		Unchanged: 0/0
 16455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16456 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16460 ;;Total ram usage:        3 bytes
 16461 ;; Hardware stack levels used:    1
 16462 ;; Hardware stack levels required when called:    5
 16463 ;; This function calls:
 16464 ;;		Nothing
 16465 ;; This function is called by:
 16466 ;;		_setDimmerLights_Dimming
 16467 ;; This function uses a non-reentrant model
 16468 ;;
 16469                           
 16470                           
 16471                           ;psect for function _setDimmerIntr_Dimming_Sw
 16472  1F48                     _setDimmerIntr_Dimming_Sw:	
 16473                           
 16474                           ;incstack = 0
 16475                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16476                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16477  1F48  0020               	movlb	0	; select bank0
 16478  1F49  00A3               	movwf	setDimmerIntr_Dimming_Sw@lights
 16479                           
 16480                           ;Dimmer_B1.c: 168: if (lights == 1) {
 16481  1F4A  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16482  1F4B  3A01               	xorlw	1
 16483  1F4C  1D03               	skipz
 16484  1F4D  2F5E               	goto	l7071
 16485                           
 16486                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16487  1F4E  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16488  1F4F  3A01               	xorlw	1
 16489  1F50  3000               	movlw	0
 16490  1F51  1903               	skipnz
 16491  1F52  3001               	movlw	1
 16492  1F53  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16493  1F54  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16494  1F55  0021               	movlb	1	; select bank1
 16495  1F56  082E               	movf	_DimmerIntr1^(0+128),w
 16496  1F57  0020               	movlb	0	; select bank0
 16497  1F58  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16498  1F59  39EF               	andlw	-17
 16499  1F5A  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16500  1F5B  0021               	movlb	1	; select bank1
 16501  1F5C  00AE               	movwf	_DimmerIntr1^(0+128)
 16502                           
 16503                           ;Dimmer_B1.c: 170: }
 16504  1F5D  0008               	return
 16505  1F5E                     l7071:	
 16506                           
 16507                           ;Dimmer_B1.c: 173: else if (lights == 2) {
 16508  1F5E  0020               	movlb	0	; select bank0
 16509  1F5F  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16510  1F60  3A02               	xorlw	2
 16511  1F61  1D03               	skipz
 16512  1F62  0008               	return
 16513                           
 16514                           ;Dimmer_B1.c: 174: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16515  1F63  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16516  1F64  3A01               	xorlw	1
 16517  1F65  3000               	movlw	0
 16518  1F66  1903               	skipnz
 16519  1F67  3001               	movlw	1
 16520  1F68  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16521  1F69  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16522  1F6A  0021               	movlb	1	; select bank1
 16523  1F6B  083A               	movf	_DimmerIntr2^(0+128),w
 16524  1F6C  0020               	movlb	0	; select bank0
 16525  1F6D  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16526  1F6E  39EF               	andlw	-17
 16527  1F6F  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16528  1F70  0021               	movlb	1	; select bank1
 16529  1F71  00BA               	movwf	_DimmerIntr2^(0+128)
 16530  1F72  0008               	return
 16531  1F73                     __end_of_setDimmerIntr_Dimming_Sw:	
 16532                           
 16533                           	psect	text109
 16534  1669                     __ptext109:	
 16535 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16536 ;; Defined at:
 16537 ;;		line 1055 in file "../src/Dimmer_B1.c"
 16538 ;; Parameters:    Size  Location     Type
 16539 ;;  value           1    wreg     unsigned char 
 16540 ;; Auto vars:     Size  Location     Type
 16541 ;;  value           1   63[BANK0 ] unsigned char 
 16542 ;;  i               3   64[BANK0 ] float 
 16543 ;; Return value:  Size  Location     Type
 16544 ;;                  1    wreg      unsigned char 
 16545 ;; Registers used:
 16546 ;;		wreg, status,2, status,0, pclath, cstack
 16547 ;; Tracked objects:
 16548 ;;		On entry : 0/0
 16549 ;;		On exit  : 0/0
 16550 ;;		Unchanged: 0/0
 16551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16556 ;;Total ram usage:        6 bytes
 16557 ;; Hardware stack levels used:    1
 16558 ;; Hardware stack levels required when called:    7
 16559 ;; This function calls:
 16560 ;;		___awtoft
 16561 ;;		___ftadd
 16562 ;;		___ftdiv
 16563 ;;		___ftneg
 16564 ;;		___fttol
 16565 ;; This function is called by:
 16566 ;;		_setDimmerLights_OnOff
 16567 ;;		_setDimmerLights_Dimming
 16568 ;;		_Flash_Memory_Initialization
 16569 ;; This function uses a non-reentrant model
 16570 ;;
 16571                           
 16572                           
 16573                           ;psect for function _getDimmerLights_ValueToPercent
 16574  1669                     _getDimmerLights_ValueToPercent:	
 16575                           
 16576                           ;incstack = 0
 16577                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16578                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16579  1669  0020               	movlb	0	; select bank0
 16580  166A  00DF               	movwf	getDimmerLights_ValueToPercent@value
 16581                           
 16582                           ;Dimmer_B1.c: 1063: float i = ((char)(60*0.65)) - ((char)(10*0.65));
 16583  166B  3000               	movlw	0
 16584  166C  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16585  166D  3004               	movlw	4
 16586  166E  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16587  166F  3042               	movlw	66
 16588  1670  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16589                           
 16590                           ;Dimmer_B1.c: 1064: i /= 100;
 16591  1671  3000               	movlw	0
 16592  1672  00AF               	movwf	___ftdiv@f2
 16593  1673  30C8               	movlw	200
 16594  1674  00B0               	movwf	___ftdiv@f2+1
 16595  1675  3042               	movlw	66
 16596  1676  00B1               	movwf	___ftdiv@f2+2
 16597  1677  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16598  1678  00B2               	movwf	___ftdiv@f1
 16599  1679  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16600  167A  00B3               	movwf	___ftdiv@f1+1
 16601  167B  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16602  167C  00B4               	movwf	___ftdiv@f1+2
 16603  167D  318D  2538  3196   	fcall	___ftdiv
 16604  1680  0020               	movlb	0	; select bank0
 16605  1681  082F               	movf	?___ftdiv,w
 16606  1682  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16607  1683  0830               	movf	?___ftdiv+1,w
 16608  1684  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16609  1685  0831               	movf	?___ftdiv+2,w
 16610  1686  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16611                           
 16612                           ;Dimmer_B1.c: 1066: return (char) (100 - ((((char)(60*0.65)) - value) / i));
 16613  1687  085F               	movf	getDimmerLights_ValueToPercent@value,w
 16614  1688  00DD               	movwf	??_getDimmerLights_ValueToPercent
 16615  1689  01DE               	clrf	??_getDimmerLights_ValueToPercent+1
 16616  168A  09DD               	comf	??_getDimmerLights_ValueToPercent,f
 16617  168B  09DE               	comf	??_getDimmerLights_ValueToPercent+1,f
 16618  168C  0ADD               	incf	??_getDimmerLights_ValueToPercent,f
 16619  168D  1903               	skipnz
 16620  168E  0ADE               	incf	??_getDimmerLights_ValueToPercent+1,f
 16621  168F  085D               	movf	??_getDimmerLights_ValueToPercent,w
 16622  1690  3E27               	addlw	39
 16623  1691  00A9               	movwf	___awtoft@c
 16624  1692  3000               	movlw	0
 16625  1693  3D5E               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16626  1694  00AA               	movwf	___awtoft@c+1
 16627  1695  319E  268E  3196   	fcall	___awtoft
 16628  1698  0020               	movlb	0	; select bank0
 16629  1699  0829               	movf	?___awtoft,w
 16630  169A  00B2               	movwf	___ftdiv@f1
 16631  169B  082A               	movf	?___awtoft+1,w
 16632  169C  00B3               	movwf	___ftdiv@f1+1
 16633  169D  082B               	movf	?___awtoft+2,w
 16634  169E  00B4               	movwf	___ftdiv@f1+2
 16635  169F  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16636  16A0  00AF               	movwf	___ftdiv@f2
 16637  16A1  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16638  16A2  00B0               	movwf	___ftdiv@f2+1
 16639  16A3  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16640  16A4  00B1               	movwf	___ftdiv@f2+2
 16641  16A5  318D  2538  3196   	fcall	___ftdiv
 16642  16A8  0020               	movlb	0	; select bank0
 16643  16A9  082F               	movf	?___ftdiv,w
 16644  16AA  00BF               	movwf	___ftneg@f1
 16645  16AB  0830               	movf	?___ftdiv+1,w
 16646  16AC  00C0               	movwf	___ftneg@f1+1
 16647  16AD  0831               	movf	?___ftdiv+2,w
 16648  16AE  00C1               	movwf	___ftneg@f1+2
 16649  16AF  3199  21A7  3196   	fcall	___ftneg
 16650  16B2  0020               	movlb	0	; select bank0
 16651  16B3  083F               	movf	?___ftneg,w
 16652  16B4  00C5               	movwf	___ftadd@f2
 16653  16B5  0840               	movf	?___ftneg+1,w
 16654  16B6  00C6               	movwf	___ftadd@f2+1
 16655  16B7  0841               	movf	?___ftneg+2,w
 16656  16B8  00C7               	movwf	___ftadd@f2+2
 16657  16B9  3000               	movlw	0
 16658  16BA  00C2               	movwf	___ftadd@f1
 16659  16BB  30C8               	movlw	200
 16660  16BC  00C3               	movwf	___ftadd@f1+1
 16661  16BD  3042               	movlw	66
 16662  16BE  00C4               	movwf	___ftadd@f1+2
 16663  16BF  3183  2388  3196   	fcall	___ftadd
 16664  16C2  0020               	movlb	0	; select bank0
 16665  16C3  0842               	movf	?___ftadd,w
 16666  16C4  00CF               	movwf	___fttol@f1
 16667  16C5  0843               	movf	?___ftadd+1,w
 16668  16C6  00D0               	movwf	___fttol@f1+1
 16669  16C7  0844               	movf	?___ftadd+2,w
 16670  16C8  00D1               	movwf	___fttol@f1+2
 16671  16C9  318B  2396         	fcall	___fttol
 16672  16CB  0020               	movlb	0	; select bank0
 16673  16CC  084F               	movf	?___fttol,w
 16674  16CD  0008               	return
 16675  16CE                     __end_of_getDimmerLights_ValueToPercent:	
 16676                           
 16677                           	psect	text110
 16678  0B96                     __ptext110:	
 16679 ;; *************** function ___fttol *****************
 16680 ;; Defined at:
 16681 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16682 ;; Parameters:    Size  Location     Type
 16683 ;;  f1              3   47[BANK0 ] float 
 16684 ;; Auto vars:     Size  Location     Type
 16685 ;;  lval            4   56[BANK0 ] unsigned long 
 16686 ;;  exp1            1   60[BANK0 ] unsigned char 
 16687 ;;  sign1           1   55[BANK0 ] unsigned char 
 16688 ;; Return value:  Size  Location     Type
 16689 ;;                  4   47[BANK0 ] long 
 16690 ;; Registers used:
 16691 ;;		wreg, status,2, status,0
 16692 ;; Tracked objects:
 16693 ;;		On entry : 0/0
 16694 ;;		On exit  : 0/0
 16695 ;;		Unchanged: 0/0
 16696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16697 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16698 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16699 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16700 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16701 ;;Total ram usage:       14 bytes
 16702 ;; Hardware stack levels used:    1
 16703 ;; Hardware stack levels required when called:    5
 16704 ;; This function calls:
 16705 ;;		Nothing
 16706 ;; This function is called by:
 16707 ;;		_getDimmerLights_PercentToValue
 16708 ;;		_getDimmerLights_ValueToPercent
 16709 ;; This function uses a non-reentrant model
 16710 ;;
 16711                           
 16712                           
 16713                           ;psect for function ___fttol
 16714  0B96                     ___fttol:	
 16715                           
 16716                           ;incstack = 0
 16717                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16718  0B96  0020               	movlb	0	; select bank0
 16719  0B97  084F               	movf	___fttol@f1,w
 16720  0B98  00D3               	movwf	??___fttol
 16721  0B99  0850               	movf	___fttol@f1+1,w
 16722  0B9A  00D4               	movwf	??___fttol+1
 16723  0B9B  0851               	movf	___fttol@f1+2,w
 16724  0B9C  00D5               	movwf	??___fttol+2
 16725  0B9D  1003               	clrc
 16726  0B9E  0D54               	rlf	??___fttol+1,w
 16727  0B9F  0D55               	rlf	??___fttol+2,w
 16728  0BA0  00D6               	movwf	??___fttol+3
 16729  0BA1  0856               	movf	??___fttol+3,w
 16730  0BA2  00DC               	movwf	___fttol@exp1
 16731  0BA3  08DC               	movf	___fttol@exp1,f
 16732  0BA4  1D03               	skipz
 16733  0BA5  2BAF               	goto	l6549
 16734  0BA6  3000               	movlw	0
 16735  0BA7  00D2               	movwf	?___fttol+3
 16736  0BA8  3000               	movlw	0
 16737  0BA9  00D1               	movwf	?___fttol+2
 16738  0BAA  3000               	movlw	0
 16739  0BAB  00D0               	movwf	?___fttol+1
 16740  0BAC  3000               	movlw	0
 16741  0BAD  00CF               	movwf	?___fttol
 16742  0BAE  0008               	return
 16743  0BAF                     l6549:	
 16744  0BAF  084F               	movf	___fttol@f1,w
 16745  0BB0  00D3               	movwf	??___fttol
 16746  0BB1  0850               	movf	___fttol@f1+1,w
 16747  0BB2  00D4               	movwf	??___fttol+1
 16748  0BB3  0851               	movf	___fttol@f1+2,w
 16749  0BB4  00D5               	movwf	??___fttol+2
 16750  0BB5  3017               	movlw	23
 16751  0BB6                     u5735:	
 16752  0BB6  36D5               	lsrf	??___fttol+2,f
 16753  0BB7  0CD4               	rrf	??___fttol+1,f
 16754  0BB8  0CD3               	rrf	??___fttol,f
 16755  0BB9  0B89               	decfsz	9,f
 16756  0BBA  2BB6               	goto	u5735
 16757  0BBB  0853               	movf	??___fttol,w
 16758  0BBC  00D6               	movwf	??___fttol+3
 16759  0BBD  0856               	movf	??___fttol+3,w
 16760  0BBE  00D7               	movwf	___fttol@sign1
 16761  0BBF  17D0               	bsf	___fttol@f1+1,7
 16762  0BC0  30FF               	movlw	255
 16763  0BC1  05CF               	andwf	___fttol@f1,f
 16764  0BC2  30FF               	movlw	255
 16765  0BC3  05D0               	andwf	___fttol@f1+1,f
 16766  0BC4  3000               	movlw	0
 16767  0BC5  05D1               	andwf	___fttol@f1+2,f
 16768  0BC6  084F               	movf	___fttol@f1,w
 16769  0BC7  00D8               	movwf	___fttol@lval
 16770  0BC8  0850               	movf	___fttol@f1+1,w
 16771  0BC9  00D9               	movwf	___fttol@lval+1
 16772  0BCA  0851               	movf	___fttol@f1+2,w
 16773  0BCB  00DA               	movwf	___fttol@lval+2
 16774  0BCC  01DB               	clrf	___fttol@lval+3
 16775  0BCD  308E               	movlw	142
 16776  0BCE  02DC               	subwf	___fttol@exp1,f
 16777  0BCF  1FDC               	btfss	___fttol@exp1,7
 16778  0BD0  2BED               	goto	l6569
 16779  0BD1  085C               	movf	___fttol@exp1,w
 16780  0BD2  3A80               	xorlw	128
 16781  0BD3  3E8F               	addlw	143
 16782  0BD4  1803               	skipnc
 16783  0BD5  2BDF               	goto	l6567
 16784  0BD6  3000               	movlw	0
 16785  0BD7  00D2               	movwf	?___fttol+3
 16786  0BD8  3000               	movlw	0
 16787  0BD9  00D1               	movwf	?___fttol+2
 16788  0BDA  3000               	movlw	0
 16789  0BDB  00D0               	movwf	?___fttol+1
 16790  0BDC  3000               	movlw	0
 16791  0BDD  00CF               	movwf	?___fttol
 16792  0BDE  0008               	return
 16793  0BDF                     l6567:	
 16794  0BDF  3001               	movlw	1
 16795  0BE0                     u5765:	
 16796  0BE0  36DB               	lsrf	___fttol@lval+3,f
 16797  0BE1  0CDA               	rrf	___fttol@lval+2,f
 16798  0BE2  0CD9               	rrf	___fttol@lval+1,f
 16799  0BE3  0CD8               	rrf	___fttol@lval,f
 16800  0BE4  0B89               	decfsz	9,f
 16801  0BE5  2BE0               	goto	u5765
 16802  0BE6  3001               	movlw	1
 16803  0BE7  00D3               	movwf	??___fttol
 16804  0BE8  0853               	movf	??___fttol,w
 16805  0BE9  07DC               	addwf	___fttol@exp1,f
 16806  0BEA  1903               	btfsc	3,2
 16807  0BEB  2C06               	goto	l6579
 16808  0BEC  2BDF               	goto	l6567
 16809  0BED                     l6569:	
 16810  0BED  3018               	movlw	24
 16811  0BEE  025C               	subwf	___fttol@exp1,w
 16812  0BEF  1C03               	skipc
 16813  0BF0  2C03               	goto	l6577
 16814  0BF1  3000               	movlw	0
 16815  0BF2  00D2               	movwf	?___fttol+3
 16816  0BF3  3000               	movlw	0
 16817  0BF4  00D1               	movwf	?___fttol+2
 16818  0BF5  3000               	movlw	0
 16819  0BF6  00D0               	movwf	?___fttol+1
 16820  0BF7  3000               	movlw	0
 16821  0BF8  00CF               	movwf	?___fttol
 16822  0BF9  0008               	return
 16823  0BFA                     l6575:	
 16824  0BFA  3001               	movlw	1
 16825  0BFB                     u5795:	
 16826  0BFB  35D8               	lslf	___fttol@lval,f
 16827  0BFC  0DD9               	rlf	___fttol@lval+1,f
 16828  0BFD  0DDA               	rlf	___fttol@lval+2,f
 16829  0BFE  0DDB               	rlf	___fttol@lval+3,f
 16830  0BFF  0B89               	decfsz	9,f
 16831  0C00  2BFB               	goto	u5795
 16832  0C01  3001               	movlw	1
 16833  0C02  02DC               	subwf	___fttol@exp1,f
 16834  0C03                     l6577:	
 16835  0C03  08DC               	movf	___fttol@exp1,f
 16836  0C04  1D03               	skipz
 16837  0C05  2BFA               	goto	l6575
 16838  0C06                     l6579:	
 16839  0C06  0857               	movf	___fttol@sign1,w
 16840  0C07  1903               	btfsc	3,2
 16841  0C08  2C14               	goto	l6583
 16842  0C09  09D8               	comf	___fttol@lval,f
 16843  0C0A  09D9               	comf	___fttol@lval+1,f
 16844  0C0B  09DA               	comf	___fttol@lval+2,f
 16845  0C0C  09DB               	comf	___fttol@lval+3,f
 16846  0C0D  0AD8               	incf	___fttol@lval,f
 16847  0C0E  1903               	skipnz
 16848  0C0F  0AD9               	incf	___fttol@lval+1,f
 16849  0C10  1903               	skipnz
 16850  0C11  0ADA               	incf	___fttol@lval+2,f
 16851  0C12  1903               	skipnz
 16852  0C13  0ADB               	incf	___fttol@lval+3,f
 16853  0C14                     l6583:	
 16854  0C14  085B               	movf	___fttol@lval+3,w
 16855  0C15  00D2               	movwf	?___fttol+3
 16856  0C16  085A               	movf	___fttol@lval+2,w
 16857  0C17  00D1               	movwf	?___fttol+2
 16858  0C18  0859               	movf	___fttol@lval+1,w
 16859  0C19  00D0               	movwf	?___fttol+1
 16860  0C1A  0858               	movf	___fttol@lval,w
 16861  0C1B  00CF               	movwf	?___fttol
 16862  0C1C  0008               	return
 16863  0C1D                     __end_of___fttol:	
 16864                           
 16865                           	psect	text111
 16866  19A7                     __ptext111:	
 16867 ;; *************** function ___ftneg *****************
 16868 ;; Defined at:
 16869 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16870 ;; Parameters:    Size  Location     Type
 16871 ;;  f1              3   31[BANK0 ] float 
 16872 ;; Auto vars:     Size  Location     Type
 16873 ;;		None
 16874 ;; Return value:  Size  Location     Type
 16875 ;;                  3   31[BANK0 ] float 
 16876 ;; Registers used:
 16877 ;;		wreg
 16878 ;; Tracked objects:
 16879 ;;		On entry : 0/0
 16880 ;;		On exit  : 0/0
 16881 ;;		Unchanged: 0/0
 16882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16883 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16886 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16887 ;;Total ram usage:        3 bytes
 16888 ;; Hardware stack levels used:    1
 16889 ;; Hardware stack levels required when called:    5
 16890 ;; This function calls:
 16891 ;;		Nothing
 16892 ;; This function is called by:
 16893 ;;		_getDimmerLights_PercentToValue
 16894 ;;		_getDimmerLights_ValueToPercent
 16895 ;; This function uses a non-reentrant model
 16896 ;;
 16897                           
 16898                           
 16899                           ;psect for function ___ftneg
 16900  19A7                     ___ftneg:	
 16901                           
 16902                           ;incstack = 0
 16903                           ; Regs used in ___ftneg: [wreg]
 16904  19A7  0020               	movlb	0	; select bank0
 16905  19A8  0841               	movf	___ftneg@f1+2,w
 16906  19A9  0440               	iorwf	___ftneg@f1+1,w
 16907  19AA  043F               	iorwf	___ftneg@f1,w
 16908  19AB  1903               	skipnz
 16909  19AC  0008               	return
 16910  19AD  3080               	movlw	128
 16911  19AE  06C1               	xorwf	___ftneg@f1+2,f
 16912  19AF  0008               	return
 16913  19B0                     __end_of___ftneg:	
 16914                           
 16915                           	psect	text112
 16916  0D38                     __ptext112:	
 16917 ;; *************** function ___ftdiv *****************
 16918 ;; Defined at:
 16919 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16920 ;; Parameters:    Size  Location     Type
 16921 ;;  f2              3   15[BANK0 ] float 
 16922 ;;  f1              3   18[BANK0 ] float 
 16923 ;; Auto vars:     Size  Location     Type
 16924 ;;  f3              3   26[BANK0 ] float 
 16925 ;;  sign            1   30[BANK0 ] unsigned char 
 16926 ;;  exp             1   29[BANK0 ] unsigned char 
 16927 ;;  cntr            1   25[BANK0 ] unsigned char 
 16928 ;; Return value:  Size  Location     Type
 16929 ;;                  3   15[BANK0 ] float 
 16930 ;; Registers used:
 16931 ;;		wreg, status,2, status,0, pclath, cstack
 16932 ;; Tracked objects:
 16933 ;;		On entry : 0/0
 16934 ;;		On exit  : 0/0
 16935 ;;		Unchanged: 0/0
 16936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16937 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16939 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;Total ram usage:       16 bytes
 16942 ;; Hardware stack levels used:    1
 16943 ;; Hardware stack levels required when called:    6
 16944 ;; This function calls:
 16945 ;;		___ftpack
 16946 ;; This function is called by:
 16947 ;;		_getDimmerLights_PercentToValue
 16948 ;;		_getDimmerLights_ValueToPercent
 16949 ;; This function uses a non-reentrant model
 16950 ;;
 16951                           
 16952                           
 16953                           ;psect for function ___ftdiv
 16954  0D38                     ___ftdiv:	
 16955                           
 16956                           ;incstack = 0
 16957                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16958  0D38  0020               	movlb	0	; select bank0
 16959  0D39  0832               	movf	___ftdiv@f1,w
 16960  0D3A  00B5               	movwf	??___ftdiv
 16961  0D3B  0833               	movf	___ftdiv@f1+1,w
 16962  0D3C  00B6               	movwf	??___ftdiv+1
 16963  0D3D  0834               	movf	___ftdiv@f1+2,w
 16964  0D3E  00B7               	movwf	??___ftdiv+2
 16965  0D3F  1003               	clrc
 16966  0D40  0D36               	rlf	??___ftdiv+1,w
 16967  0D41  0D37               	rlf	??___ftdiv+2,w
 16968  0D42  00B8               	movwf	??___ftdiv+3
 16969  0D43  0838               	movf	??___ftdiv+3,w
 16970  0D44  00BD               	movwf	___ftdiv@exp
 16971  0D45  08BD               	movf	___ftdiv@exp,f
 16972  0D46  1D03               	skipz
 16973  0D47  2D4F               	goto	l6449
 16974  0D48  3000               	movlw	0
 16975  0D49  00AF               	movwf	?___ftdiv
 16976  0D4A  3000               	movlw	0
 16977  0D4B  00B0               	movwf	?___ftdiv+1
 16978  0D4C  3000               	movlw	0
 16979  0D4D  00B1               	movwf	?___ftdiv+2
 16980  0D4E  0008               	return
 16981  0D4F                     l6449:	
 16982  0D4F  082F               	movf	___ftdiv@f2,w
 16983  0D50  00B5               	movwf	??___ftdiv
 16984  0D51  0830               	movf	___ftdiv@f2+1,w
 16985  0D52  00B6               	movwf	??___ftdiv+1
 16986  0D53  0831               	movf	___ftdiv@f2+2,w
 16987  0D54  00B7               	movwf	??___ftdiv+2
 16988  0D55  1003               	clrc
 16989  0D56  0D36               	rlf	??___ftdiv+1,w
 16990  0D57  0D37               	rlf	??___ftdiv+2,w
 16991  0D58  00B8               	movwf	??___ftdiv+3
 16992  0D59  0838               	movf	??___ftdiv+3,w
 16993  0D5A  00BE               	movwf	___ftdiv@sign
 16994  0D5B  08BE               	movf	___ftdiv@sign,f
 16995  0D5C  1D03               	skipz
 16996  0D5D  2D65               	goto	l6455
 16997  0D5E  3000               	movlw	0
 16998  0D5F  00AF               	movwf	?___ftdiv
 16999  0D60  3000               	movlw	0
 17000  0D61  00B0               	movwf	?___ftdiv+1
 17001  0D62  3000               	movlw	0
 17002  0D63  00B1               	movwf	?___ftdiv+2
 17003  0D64  0008               	return
 17004  0D65                     l6455:	
 17005  0D65  3000               	movlw	0
 17006  0D66  00BA               	movwf	___ftdiv@f3
 17007  0D67  3000               	movlw	0
 17008  0D68  00BB               	movwf	___ftdiv@f3+1
 17009  0D69  3000               	movlw	0
 17010  0D6A  00BC               	movwf	___ftdiv@f3+2
 17011  0D6B  3089               	movlw	137
 17012  0D6C  073E               	addwf	___ftdiv@sign,w
 17013  0D6D  00B5               	movwf	??___ftdiv
 17014  0D6E  0835               	movf	??___ftdiv,w
 17015  0D6F  02BD               	subwf	___ftdiv@exp,f
 17016  0D70  0832               	movf	___ftdiv@f1,w
 17017  0D71  00B5               	movwf	??___ftdiv
 17018  0D72  0833               	movf	___ftdiv@f1+1,w
 17019  0D73  00B6               	movwf	??___ftdiv+1
 17020  0D74  0834               	movf	___ftdiv@f1+2,w
 17021  0D75  00B7               	movwf	??___ftdiv+2
 17022  0D76  3010               	movlw	16
 17023  0D77                     u5535:	
 17024  0D77  36B7               	lsrf	??___ftdiv+2,f
 17025  0D78  0CB6               	rrf	??___ftdiv+1,f
 17026  0D79  0CB5               	rrf	??___ftdiv,f
 17027  0D7A  0B89               	decfsz	9,f
 17028  0D7B  2D77               	goto	u5535
 17029  0D7C  0835               	movf	??___ftdiv,w
 17030  0D7D  00B8               	movwf	??___ftdiv+3
 17031  0D7E  0838               	movf	??___ftdiv+3,w
 17032  0D7F  00BE               	movwf	___ftdiv@sign
 17033  0D80  082F               	movf	___ftdiv@f2,w
 17034  0D81  00B5               	movwf	??___ftdiv
 17035  0D82  0830               	movf	___ftdiv@f2+1,w
 17036  0D83  00B6               	movwf	??___ftdiv+1
 17037  0D84  0831               	movf	___ftdiv@f2+2,w
 17038  0D85  00B7               	movwf	??___ftdiv+2
 17039  0D86  3010               	movlw	16
 17040  0D87                     u5545:	
 17041  0D87  36B7               	lsrf	??___ftdiv+2,f
 17042  0D88  0CB6               	rrf	??___ftdiv+1,f
 17043  0D89  0CB5               	rrf	??___ftdiv,f
 17044  0D8A  0B89               	decfsz	9,f
 17045  0D8B  2D87               	goto	u5545
 17046  0D8C  0835               	movf	??___ftdiv,w
 17047  0D8D  00B8               	movwf	??___ftdiv+3
 17048  0D8E  0838               	movf	??___ftdiv+3,w
 17049  0D8F  06BE               	xorwf	___ftdiv@sign,f
 17050  0D90  3080               	movlw	128
 17051  0D91  00B5               	movwf	??___ftdiv
 17052  0D92  0835               	movf	??___ftdiv,w
 17053  0D93  05BE               	andwf	___ftdiv@sign,f
 17054  0D94  17B3               	bsf	___ftdiv@f1+1,7
 17055  0D95  30FF               	movlw	255
 17056  0D96  05B2               	andwf	___ftdiv@f1,f
 17057  0D97  30FF               	movlw	255
 17058  0D98  05B3               	andwf	___ftdiv@f1+1,f
 17059  0D99  3000               	movlw	0
 17060  0D9A  05B4               	andwf	___ftdiv@f1+2,f
 17061  0D9B  17B0               	bsf	___ftdiv@f2+1,7
 17062  0D9C  30FF               	movlw	255
 17063  0D9D  05AF               	andwf	___ftdiv@f2,f
 17064  0D9E  30FF               	movlw	255
 17065  0D9F  05B0               	andwf	___ftdiv@f2+1,f
 17066  0DA0  3000               	movlw	0
 17067  0DA1  05B1               	andwf	___ftdiv@f2+2,f
 17068  0DA2  3018               	movlw	24
 17069  0DA3  00B5               	movwf	??___ftdiv
 17070  0DA4  0835               	movf	??___ftdiv,w
 17071  0DA5  00B9               	movwf	___ftdiv@cntr
 17072  0DA6                     l6469:	
 17073  0DA6  3001               	movlw	1
 17074  0DA7                     u5555:	
 17075  0DA7  35BA               	lslf	___ftdiv@f3,f
 17076  0DA8  0DBB               	rlf	___ftdiv@f3+1,f
 17077  0DA9  0DBC               	rlf	___ftdiv@f3+2,f
 17078  0DAA  0B89               	decfsz	9,f
 17079  0DAB  2DA7               	goto	u5555
 17080  0DAC  0831               	movf	___ftdiv@f2+2,w
 17081  0DAD  0234               	subwf	___ftdiv@f1+2,w
 17082  0DAE  1D03               	skipz
 17083  0DAF  2DB6               	goto	u5565
 17084  0DB0  0830               	movf	___ftdiv@f2+1,w
 17085  0DB1  0233               	subwf	___ftdiv@f1+1,w
 17086  0DB2  1D03               	skipz
 17087  0DB3  2DB6               	goto	u5565
 17088  0DB4  082F               	movf	___ftdiv@f2,w
 17089  0DB5  0232               	subwf	___ftdiv@f1,w
 17090  0DB6                     u5565:	
 17091  0DB6  1C03               	skipc
 17092  0DB7  2DBF               	goto	l6477
 17093  0DB8  082F               	movf	___ftdiv@f2,w
 17094  0DB9  02B2               	subwf	___ftdiv@f1,f
 17095  0DBA  0830               	movf	___ftdiv@f2+1,w
 17096  0DBB  3BB3               	subwfb	___ftdiv@f1+1,f
 17097  0DBC  0831               	movf	___ftdiv@f2+2,w
 17098  0DBD  3BB4               	subwfb	___ftdiv@f1+2,f
 17099  0DBE  143A               	bsf	___ftdiv@f3,0
 17100  0DBF                     l6477:	
 17101  0DBF  3001               	movlw	1
 17102  0DC0                     u5575:	
 17103  0DC0  35B2               	lslf	___ftdiv@f1,f
 17104  0DC1  0DB3               	rlf	___ftdiv@f1+1,f
 17105  0DC2  0DB4               	rlf	___ftdiv@f1+2,f
 17106  0DC3  0B89               	decfsz	9,f
 17107  0DC4  2DC0               	goto	u5575
 17108  0DC5  3001               	movlw	1
 17109  0DC6  02B9               	subwf	___ftdiv@cntr,f
 17110  0DC7  1D03               	btfss	3,2
 17111  0DC8  2DA6               	goto	l6469
 17112  0DC9  083A               	movf	___ftdiv@f3,w
 17113  0DCA  00A1               	movwf	___ftpack@arg
 17114  0DCB  083B               	movf	___ftdiv@f3+1,w
 17115  0DCC  00A2               	movwf	___ftpack@arg+1
 17116  0DCD  083C               	movf	___ftdiv@f3+2,w
 17117  0DCE  00A3               	movwf	___ftpack@arg+2
 17118  0DCF  083D               	movf	___ftdiv@exp,w
 17119  0DD0  00B5               	movwf	??___ftdiv
 17120  0DD1  0835               	movf	??___ftdiv,w
 17121  0DD2  00A4               	movwf	___ftpack@exp
 17122  0DD3  083E               	movf	___ftdiv@sign,w
 17123  0DD4  00B6               	movwf	??___ftdiv+1
 17124  0DD5  0836               	movf	??___ftdiv+1,w
 17125  0DD6  00A5               	movwf	___ftpack@sign
 17126  0DD7  3196  2608         	fcall	___ftpack
 17127  0DD9  0020               	movlb	0	; select bank0
 17128  0DDA  0821               	movf	?___ftpack,w
 17129  0DDB  00AF               	movwf	?___ftdiv
 17130  0DDC  0822               	movf	?___ftpack+1,w
 17131  0DDD  00B0               	movwf	?___ftdiv+1
 17132  0DDE  0823               	movf	?___ftpack+2,w
 17133  0DDF  00B1               	movwf	?___ftdiv+2
 17134  0DE0  0008               	return
 17135  0DE1                     __end_of___ftdiv:	
 17136                           
 17137                           	psect	text113
 17138  0388                     __ptext113:	
 17139 ;; *************** function ___ftadd *****************
 17140 ;; Defined at:
 17141 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17142 ;; Parameters:    Size  Location     Type
 17143 ;;  f1              3   34[BANK0 ] float 
 17144 ;;  f2              3   37[BANK0 ] float 
 17145 ;; Auto vars:     Size  Location     Type
 17146 ;;  exp1            1   46[BANK0 ] unsigned char 
 17147 ;;  exp2            1   45[BANK0 ] unsigned char 
 17148 ;;  sign            1   44[BANK0 ] unsigned char 
 17149 ;; Return value:  Size  Location     Type
 17150 ;;                  3   34[BANK0 ] float 
 17151 ;; Registers used:
 17152 ;;		wreg, status,2, status,0, pclath, cstack
 17153 ;; Tracked objects:
 17154 ;;		On entry : 0/0
 17155 ;;		On exit  : 0/0
 17156 ;;		Unchanged: 0/0
 17157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17158 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17162 ;;Total ram usage:       13 bytes
 17163 ;; Hardware stack levels used:    1
 17164 ;; Hardware stack levels required when called:    6
 17165 ;; This function calls:
 17166 ;;		___ftpack
 17167 ;; This function is called by:
 17168 ;;		_getDimmerLights_PercentToValue
 17169 ;;		_getDimmerLights_ValueToPercent
 17170 ;; This function uses a non-reentrant model
 17171 ;;
 17172                           
 17173                           
 17174                           ;psect for function ___ftadd
 17175  0388                     ___ftadd:	
 17176                           
 17177                           ;incstack = 0
 17178                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17179  0388  0020               	movlb	0	; select bank0
 17180  0389  0842               	movf	___ftadd@f1,w
 17181  038A  00C8               	movwf	??___ftadd
 17182  038B  0843               	movf	___ftadd@f1+1,w
 17183  038C  00C9               	movwf	??___ftadd+1
 17184  038D  0844               	movf	___ftadd@f1+2,w
 17185  038E  00CA               	movwf	??___ftadd+2
 17186  038F  1003               	clrc
 17187  0390  0D49               	rlf	??___ftadd+1,w
 17188  0391  0D4A               	rlf	??___ftadd+2,w
 17189  0392  00CB               	movwf	??___ftadd+3
 17190  0393  084B               	movf	??___ftadd+3,w
 17191  0394  00CE               	movwf	___ftadd@exp1
 17192  0395  0845               	movf	___ftadd@f2,w
 17193  0396  00C8               	movwf	??___ftadd
 17194  0397  0846               	movf	___ftadd@f2+1,w
 17195  0398  00C9               	movwf	??___ftadd+1
 17196  0399  0847               	movf	___ftadd@f2+2,w
 17197  039A  00CA               	movwf	??___ftadd+2
 17198  039B  1003               	clrc
 17199  039C  0D49               	rlf	??___ftadd+1,w
 17200  039D  0D4A               	rlf	??___ftadd+2,w
 17201  039E  00CB               	movwf	??___ftadd+3
 17202  039F  084B               	movf	??___ftadd+3,w
 17203  03A0  00CD               	movwf	___ftadd@exp2
 17204  03A1  084E               	movf	___ftadd@exp1,w
 17205  03A2  1903               	btfsc	3,2
 17206  03A3  2BB0               	goto	l6379
 17207  03A4  084D               	movf	___ftadd@exp2,w
 17208  03A5  024E               	subwf	___ftadd@exp1,w
 17209  03A6  1803               	skipnc
 17210  03A7  2BB7               	goto	l6383
 17211  03A8  034E               	decf	___ftadd@exp1,w
 17212  03A9  3AFF               	xorlw	255
 17213  03AA  074D               	addwf	___ftadd@exp2,w
 17214  03AB  00C8               	movwf	??___ftadd
 17215  03AC  3019               	movlw	25
 17216  03AD  0248               	subwf	??___ftadd,w
 17217  03AE  1C03               	skipc
 17218  03AF  2BB7               	goto	l6383
 17219  03B0                     l6379:	
 17220  03B0  0845               	movf	___ftadd@f2,w
 17221  03B1  00C2               	movwf	?___ftadd
 17222  03B2  0846               	movf	___ftadd@f2+1,w
 17223  03B3  00C3               	movwf	?___ftadd+1
 17224  03B4  0847               	movf	___ftadd@f2+2,w
 17225  03B5  00C4               	movwf	?___ftadd+2
 17226  03B6  0008               	return
 17227  03B7                     l6383:	
 17228  03B7  084D               	movf	___ftadd@exp2,w
 17229  03B8  1903               	btfsc	3,2
 17230  03B9  0008               	return
 17231  03BA  084E               	movf	___ftadd@exp1,w
 17232  03BB  024D               	subwf	___ftadd@exp2,w
 17233  03BC  1803               	skipnc
 17234  03BD  2BC6               	goto	l6389
 17235  03BE  034D               	decf	___ftadd@exp2,w
 17236  03BF  3AFF               	xorlw	255
 17237  03C0  074E               	addwf	___ftadd@exp1,w
 17238  03C1  00C8               	movwf	??___ftadd
 17239  03C2  3019               	movlw	25
 17240  03C3  0248               	subwf	??___ftadd,w
 17241  03C4  1803               	btfsc	3,0
 17242  03C5  0008               	return
 17243  03C6                     l6389:	
 17244  03C6  3006               	movlw	6
 17245  03C7  00C8               	movwf	??___ftadd
 17246  03C8  0848               	movf	??___ftadd,w
 17247  03C9  00CC               	movwf	___ftadd@sign
 17248  03CA  1BC4               	btfsc	___ftadd@f1+2,7
 17249  03CB  17CC               	bsf	___ftadd@sign,7
 17250  03CC  1BC7               	btfsc	___ftadd@f2+2,7
 17251  03CD  174C               	bsf	___ftadd@sign,6
 17252  03CE  17C3               	bsf	___ftadd@f1+1,7
 17253  03CF  30FF               	movlw	255
 17254  03D0  05C2               	andwf	___ftadd@f1,f
 17255  03D1  30FF               	movlw	255
 17256  03D2  05C3               	andwf	___ftadd@f1+1,f
 17257  03D3  3000               	movlw	0
 17258  03D4  05C4               	andwf	___ftadd@f1+2,f
 17259  03D5  17C6               	bsf	___ftadd@f2+1,7
 17260  03D6  30FF               	movlw	255
 17261  03D7  05C5               	andwf	___ftadd@f2,f
 17262  03D8  30FF               	movlw	255
 17263  03D9  05C6               	andwf	___ftadd@f2+1,f
 17264  03DA  3000               	movlw	0
 17265  03DB  05C7               	andwf	___ftadd@f2+2,f
 17266  03DC  084D               	movf	___ftadd@exp2,w
 17267  03DD  024E               	subwf	___ftadd@exp1,w
 17268  03DE  1803               	skipnc
 17269  03DF  2C02               	goto	l6411
 17270  03E0                     l6401:	
 17271  03E0  3001               	movlw	1
 17272  03E1                     u5375:	
 17273  03E1  35C5               	lslf	___ftadd@f2,f
 17274  03E2  0DC6               	rlf	___ftadd@f2+1,f
 17275  03E3  0DC7               	rlf	___ftadd@f2+2,f
 17276  03E4  0B89               	decfsz	9,f
 17277  03E5  2BE1               	goto	u5375
 17278  03E6  3001               	movlw	1
 17279  03E7  02CD               	subwf	___ftadd@exp2,f
 17280  03E8  084D               	movf	___ftadd@exp2,w
 17281  03E9  064E               	xorwf	___ftadd@exp1,w
 17282  03EA  1903               	skipnz
 17283  03EB  2BFD               	goto	l6409
 17284  03EC  3001               	movlw	1
 17285  03ED  02CC               	subwf	___ftadd@sign,f
 17286  03EE  084C               	movf	___ftadd@sign,w
 17287  03EF  3907               	andlw	7
 17288  03F0  1903               	btfsc	3,2
 17289  03F1  2BFD               	goto	l6409
 17290  03F2  2BE0               	goto	l6401
 17291  03F3                     l6407:	
 17292  03F3  3001               	movlw	1
 17293  03F4                     u5405:	
 17294  03F4  36C4               	lsrf	___ftadd@f1+2,f
 17295  03F5  0CC3               	rrf	___ftadd@f1+1,f
 17296  03F6  0CC2               	rrf	___ftadd@f1,f
 17297  03F7  0B89               	decfsz	9,f
 17298  03F8  2BF4               	goto	u5405
 17299  03F9  3001               	movlw	1
 17300  03FA  00C8               	movwf	??___ftadd
 17301  03FB  0848               	movf	??___ftadd,w
 17302  03FC  07CE               	addwf	___ftadd@exp1,f
 17303  03FD                     l6409:	
 17304  03FD  084E               	movf	___ftadd@exp1,w
 17305  03FE  064D               	xorwf	___ftadd@exp2,w
 17306  03FF  1903               	btfsc	3,2
 17307  0400  2C27               	goto	l3186
 17308  0401  2BF3               	goto	l6407
 17309  0402                     l6411:	
 17310  0402  084E               	movf	___ftadd@exp1,w
 17311  0403  024D               	subwf	___ftadd@exp2,w
 17312  0404  1803               	skipnc
 17313  0405  2C27               	goto	l3186
 17314  0406                     l6413:	
 17315  0406  3001               	movlw	1
 17316  0407                     u5435:	
 17317  0407  35C2               	lslf	___ftadd@f1,f
 17318  0408  0DC3               	rlf	___ftadd@f1+1,f
 17319  0409  0DC4               	rlf	___ftadd@f1+2,f
 17320  040A  0B89               	decfsz	9,f
 17321  040B  2C07               	goto	u5435
 17322  040C  3001               	movlw	1
 17323  040D  02CE               	subwf	___ftadd@exp1,f
 17324  040E  084D               	movf	___ftadd@exp2,w
 17325  040F  064E               	xorwf	___ftadd@exp1,w
 17326  0410  1903               	skipnz
 17327  0411  2C23               	goto	l6421
 17328  0412  3001               	movlw	1
 17329  0413  02CC               	subwf	___ftadd@sign,f
 17330  0414  084C               	movf	___ftadd@sign,w
 17331  0415  3907               	andlw	7
 17332  0416  1903               	btfsc	3,2
 17333  0417  2C23               	goto	l6421
 17334  0418  2C06               	goto	l6413
 17335  0419                     l6419:	
 17336  0419  3001               	movlw	1
 17337  041A                     u5465:	
 17338  041A  36C7               	lsrf	___ftadd@f2+2,f
 17339  041B  0CC6               	rrf	___ftadd@f2+1,f
 17340  041C  0CC5               	rrf	___ftadd@f2,f
 17341  041D  0B89               	decfsz	9,f
 17342  041E  2C1A               	goto	u5465
 17343  041F  3001               	movlw	1
 17344  0420  00C8               	movwf	??___ftadd
 17345  0421  0848               	movf	??___ftadd,w
 17346  0422  07CD               	addwf	___ftadd@exp2,f
 17347  0423                     l6421:	
 17348  0423  084E               	movf	___ftadd@exp1,w
 17349  0424  064D               	xorwf	___ftadd@exp2,w
 17350  0425  1D03               	skipz
 17351  0426  2C19               	goto	l6419
 17352  0427                     l3186:	
 17353  0427  1FCC               	btfss	___ftadd@sign,7
 17354  0428  2C39               	goto	l6425
 17355  0429  30FF               	movlw	255
 17356  042A  06C2               	xorwf	___ftadd@f1,f
 17357  042B  30FF               	movlw	255
 17358  042C  06C3               	xorwf	___ftadd@f1+1,f
 17359  042D  30FF               	movlw	255
 17360  042E  06C4               	xorwf	___ftadd@f1+2,f
 17361  042F  3001               	movlw	1
 17362  0430  07C2               	addwf	___ftadd@f1,f
 17363  0431  3000               	movlw	0
 17364  0432  1803               	skipnc
 17365  0433  3001               	movlw	1
 17366  0434  07C3               	addwf	___ftadd@f1+1,f
 17367  0435  3000               	movlw	0
 17368  0436  1803               	skipnc
 17369  0437  3001               	movlw	1
 17370  0438  07C4               	addwf	___ftadd@f1+2,f
 17371  0439                     l6425:	
 17372  0439  1F4C               	btfss	___ftadd@sign,6
 17373  043A  2C4B               	goto	l6429
 17374  043B  30FF               	movlw	255
 17375  043C  06C5               	xorwf	___ftadd@f2,f
 17376  043D  30FF               	movlw	255
 17377  043E  06C6               	xorwf	___ftadd@f2+1,f
 17378  043F  30FF               	movlw	255
 17379  0440  06C7               	xorwf	___ftadd@f2+2,f
 17380  0441  3001               	movlw	1
 17381  0442  07C5               	addwf	___ftadd@f2,f
 17382  0443  3000               	movlw	0
 17383  0444  1803               	skipnc
 17384  0445  3001               	movlw	1
 17385  0446  07C6               	addwf	___ftadd@f2+1,f
 17386  0447  3000               	movlw	0
 17387  0448  1803               	skipnc
 17388  0449  3001               	movlw	1
 17389  044A  07C7               	addwf	___ftadd@f2+2,f
 17390  044B                     l6429:	
 17391  044B  01CC               	clrf	___ftadd@sign
 17392  044C  0842               	movf	___ftadd@f1,w
 17393  044D  07C5               	addwf	___ftadd@f2,f
 17394  044E  0843               	movf	___ftadd@f1+1,w
 17395  044F  3DC6               	addwfc	___ftadd@f2+1,f
 17396  0450  0844               	movf	___ftadd@f1+2,w
 17397  0451  3DC7               	addwfc	___ftadd@f2+2,f
 17398  0452  1FC7               	btfss	___ftadd@f2+2,7
 17399  0453  2C66               	goto	l6439
 17400  0454  30FF               	movlw	255
 17401  0455  06C5               	xorwf	___ftadd@f2,f
 17402  0456  30FF               	movlw	255
 17403  0457  06C6               	xorwf	___ftadd@f2+1,f
 17404  0458  30FF               	movlw	255
 17405  0459  06C7               	xorwf	___ftadd@f2+2,f
 17406  045A  3001               	movlw	1
 17407  045B  07C5               	addwf	___ftadd@f2,f
 17408  045C  3000               	movlw	0
 17409  045D  1803               	skipnc
 17410  045E  3001               	movlw	1
 17411  045F  07C6               	addwf	___ftadd@f2+1,f
 17412  0460  3000               	movlw	0
 17413  0461  1803               	skipnc
 17414  0462  3001               	movlw	1
 17415  0463  07C7               	addwf	___ftadd@f2+2,f
 17416  0464  01CC               	clrf	___ftadd@sign
 17417  0465  0ACC               	incf	___ftadd@sign,f
 17418  0466                     l6439:	
 17419  0466  0845               	movf	___ftadd@f2,w
 17420  0467  00A1               	movwf	___ftpack@arg
 17421  0468  0846               	movf	___ftadd@f2+1,w
 17422  0469  00A2               	movwf	___ftpack@arg+1
 17423  046A  0847               	movf	___ftadd@f2+2,w
 17424  046B  00A3               	movwf	___ftpack@arg+2
 17425  046C  084E               	movf	___ftadd@exp1,w
 17426  046D  00C8               	movwf	??___ftadd
 17427  046E  0848               	movf	??___ftadd,w
 17428  046F  00A4               	movwf	___ftpack@exp
 17429  0470  084C               	movf	___ftadd@sign,w
 17430  0471  00C9               	movwf	??___ftadd+1
 17431  0472  0849               	movf	??___ftadd+1,w
 17432  0473  00A5               	movwf	___ftpack@sign
 17433  0474  3196  2608         	fcall	___ftpack
 17434  0476  0020               	movlb	0	; select bank0
 17435  0477  0821               	movf	?___ftpack,w
 17436  0478  00C2               	movwf	?___ftadd
 17437  0479  0822               	movf	?___ftpack+1,w
 17438  047A  00C3               	movwf	?___ftadd+1
 17439  047B  0823               	movf	?___ftpack+2,w
 17440  047C  00C4               	movwf	?___ftadd+2
 17441  047D  0008               	return
 17442  047E                     __end_of___ftadd:	
 17443                           
 17444                           	psect	text114
 17445  1E8E                     __ptext114:	
 17446 ;; *************** function ___awtoft *****************
 17447 ;; Defined at:
 17448 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17449 ;; Parameters:    Size  Location     Type
 17450 ;;  c               2    9[BANK0 ] int 
 17451 ;; Auto vars:     Size  Location     Type
 17452 ;;  sign            1   14[BANK0 ] unsigned char 
 17453 ;; Return value:  Size  Location     Type
 17454 ;;                  3    9[BANK0 ] float 
 17455 ;; Registers used:
 17456 ;;		wreg, status,2, status,0, pclath, cstack
 17457 ;; Tracked objects:
 17458 ;;		On entry : 0/0
 17459 ;;		On exit  : 0/0
 17460 ;;		Unchanged: 0/0
 17461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17462 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17465 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17466 ;;Total ram usage:        6 bytes
 17467 ;; Hardware stack levels used:    1
 17468 ;; Hardware stack levels required when called:    6
 17469 ;; This function calls:
 17470 ;;		___ftpack
 17471 ;; This function is called by:
 17472 ;;		_getDimmerLights_PercentToValue
 17473 ;;		_getDimmerLights_ValueToPercent
 17474 ;; This function uses a non-reentrant model
 17475 ;;
 17476                           
 17477                           
 17478                           ;psect for function ___awtoft
 17479  1E8E                     ___awtoft:	
 17480                           
 17481                           ;incstack = 0
 17482                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17483  1E8E  0020               	movlb	0	; select bank0
 17484  1E8F  01AE               	clrf	___awtoft@sign
 17485  1E90  1FAA               	btfss	___awtoft@c+1,7
 17486  1E91  2E99               	goto	l6367
 17487  1E92  09A9               	comf	___awtoft@c,f
 17488  1E93  09AA               	comf	___awtoft@c+1,f
 17489  1E94  0AA9               	incf	___awtoft@c,f
 17490  1E95  1903               	skipnz
 17491  1E96  0AAA               	incf	___awtoft@c+1,f
 17492  1E97  01AE               	clrf	___awtoft@sign
 17493  1E98  0AAE               	incf	___awtoft@sign,f
 17494  1E99                     l6367:	
 17495  1E99  0829               	movf	___awtoft@c,w
 17496  1E9A  00A1               	movwf	___ftpack@arg
 17497  1E9B  082A               	movf	___awtoft@c+1,w
 17498  1E9C  00A2               	movwf	___ftpack@arg+1
 17499  1E9D  01A3               	clrf	___ftpack@arg+2
 17500  1E9E  308E               	movlw	142
 17501  1E9F  00AC               	movwf	??___awtoft
 17502  1EA0  082C               	movf	??___awtoft,w
 17503  1EA1  00A4               	movwf	___ftpack@exp
 17504  1EA2  082E               	movf	___awtoft@sign,w
 17505  1EA3  00AD               	movwf	??___awtoft+1
 17506  1EA4  082D               	movf	??___awtoft+1,w
 17507  1EA5  00A5               	movwf	___ftpack@sign
 17508  1EA6  3196  2608         	fcall	___ftpack
 17509  1EA8  0020               	movlb	0	; select bank0
 17510  1EA9  0821               	movf	?___ftpack,w
 17511  1EAA  00A9               	movwf	?___awtoft
 17512  1EAB  0822               	movf	?___ftpack+1,w
 17513  1EAC  00AA               	movwf	?___awtoft+1
 17514  1EAD  0823               	movf	?___ftpack+2,w
 17515  1EAE  00AB               	movwf	?___awtoft+2
 17516  1EAF  0008               	return
 17517  1EB0                     __end_of___awtoft:	
 17518                           
 17519                           	psect	text115
 17520  1608                     __ptext115:	
 17521 ;; *************** function ___ftpack *****************
 17522 ;; Defined at:
 17523 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17524 ;; Parameters:    Size  Location     Type
 17525 ;;  arg             3    1[BANK0 ] unsigned um
 17526 ;;  exp             1    4[BANK0 ] unsigned char 
 17527 ;;  sign            1    5[BANK0 ] unsigned char 
 17528 ;; Auto vars:     Size  Location     Type
 17529 ;;		None
 17530 ;; Return value:  Size  Location     Type
 17531 ;;                  3    1[BANK0 ] float 
 17532 ;; Registers used:
 17533 ;;		wreg, status,2, status,0
 17534 ;; Tracked objects:
 17535 ;;		On entry : 0/0
 17536 ;;		On exit  : 0/0
 17537 ;;		Unchanged: 0/0
 17538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17539 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17543 ;;Total ram usage:        8 bytes
 17544 ;; Hardware stack levels used:    1
 17545 ;; Hardware stack levels required when called:    5
 17546 ;; This function calls:
 17547 ;;		Nothing
 17548 ;; This function is called by:
 17549 ;;		___awtoft
 17550 ;;		___ftadd
 17551 ;;		___ftdiv
 17552 ;;		___ftmul
 17553 ;; This function uses a non-reentrant model
 17554 ;;
 17555                           
 17556                           
 17557                           ;psect for function ___ftpack
 17558  1608                     ___ftpack:	
 17559                           
 17560                           ;incstack = 0
 17561                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17562  1608  0020               	movlb	0	; select bank0
 17563  1609  0824               	movf	___ftpack@exp,w
 17564  160A  1903               	btfsc	3,2
 17565  160B  2E11               	goto	l6227
 17566  160C  0823               	movf	___ftpack@arg+2,w
 17567  160D  0422               	iorwf	___ftpack@arg+1,w
 17568  160E  0421               	iorwf	___ftpack@arg,w
 17569  160F  1D03               	skipz
 17570  1610  2E22               	goto	l6233
 17571  1611                     l6227:	
 17572  1611  3000               	movlw	0
 17573  1612  00A1               	movwf	?___ftpack
 17574  1613  3000               	movlw	0
 17575  1614  00A2               	movwf	?___ftpack+1
 17576  1615  3000               	movlw	0
 17577  1616  00A3               	movwf	?___ftpack+2
 17578  1617  0008               	return
 17579  1618                     l6231:	
 17580  1618  3001               	movlw	1
 17581  1619  00A6               	movwf	??___ftpack
 17582  161A  0826               	movf	??___ftpack,w
 17583  161B  07A4               	addwf	___ftpack@exp,f
 17584  161C  3001               	movlw	1
 17585  161D                     u4985:	
 17586  161D  36A3               	lsrf	___ftpack@arg+2,f
 17587  161E  0CA2               	rrf	___ftpack@arg+1,f
 17588  161F  0CA1               	rrf	___ftpack@arg,f
 17589  1620  0B89               	decfsz	9,f
 17590  1621  2E1D               	goto	u4985
 17591  1622                     l6233:	
 17592  1622  30FE               	movlw	254
 17593  1623  0523               	andwf	___ftpack@arg+2,w
 17594  1624  1903               	btfsc	3,2
 17595  1625  2E3B               	goto	l3157
 17596  1626  2E18               	goto	l6231
 17597  1627                     l6235:	
 17598  1627  3001               	movlw	1
 17599  1628  00A6               	movwf	??___ftpack
 17600  1629  0826               	movf	??___ftpack,w
 17601  162A  07A4               	addwf	___ftpack@exp,f
 17602  162B  3001               	movlw	1
 17603  162C  07A1               	addwf	___ftpack@arg,f
 17604  162D  3000               	movlw	0
 17605  162E  1803               	skipnc
 17606  162F  3001               	movlw	1
 17607  1630  07A2               	addwf	___ftpack@arg+1,f
 17608  1631  3000               	movlw	0
 17609  1632  1803               	skipnc
 17610  1633  3001               	movlw	1
 17611  1634  07A3               	addwf	___ftpack@arg+2,f
 17612  1635  3001               	movlw	1
 17613  1636                     u5005:	
 17614  1636  36A3               	lsrf	___ftpack@arg+2,f
 17615  1637  0CA2               	rrf	___ftpack@arg+1,f
 17616  1638  0CA1               	rrf	___ftpack@arg,f
 17617  1639  0B89               	decfsz	9,f
 17618  163A  2E36               	goto	u5005
 17619  163B                     l3157:	
 17620  163B  30FF               	movlw	255
 17621  163C  0523               	andwf	___ftpack@arg+2,w
 17622  163D  1903               	btfsc	3,2
 17623  163E  2E48               	goto	l6243
 17624  163F  2E27               	goto	l6235
 17625  1640                     l6241:	
 17626  1640  3001               	movlw	1
 17627  1641  02A4               	subwf	___ftpack@exp,f
 17628  1642  3001               	movlw	1
 17629  1643                     u5025:	
 17630  1643  35A1               	lslf	___ftpack@arg,f
 17631  1644  0DA2               	rlf	___ftpack@arg+1,f
 17632  1645  0DA3               	rlf	___ftpack@arg+2,f
 17633  1646  0B89               	decfsz	9,f
 17634  1647  2E43               	goto	u5025
 17635  1648                     l6243:	
 17636  1648  1FA2               	btfss	___ftpack@arg+1,7
 17637  1649  2E40               	goto	l6241
 17638  164A  1824               	btfsc	___ftpack@exp,0
 17639  164B  2E52               	goto	l3163
 17640  164C  30FF               	movlw	255
 17641  164D  05A1               	andwf	___ftpack@arg,f
 17642  164E  307F               	movlw	127
 17643  164F  05A2               	andwf	___ftpack@arg+1,f
 17644  1650  30FF               	movlw	255
 17645  1651  05A3               	andwf	___ftpack@arg+2,f
 17646  1652                     l3163:	
 17647  1652  1003               	clrc
 17648  1653  0CA4               	rrf	___ftpack@exp,f
 17649  1654  0824               	movf	___ftpack@exp,w
 17650  1655  00A6               	movwf	??___ftpack
 17651  1656  01A7               	clrf	??___ftpack+1
 17652  1657  01A8               	clrf	??___ftpack+2
 17653  1658  3010               	movlw	16
 17654  1659                     u5055:	
 17655  1659  35A6               	lslf	??___ftpack,f
 17656  165A  0DA7               	rlf	??___ftpack+1,f
 17657  165B  0DA8               	rlf	??___ftpack+2,f
 17658  165C  0B89               	decfsz	9,f
 17659  165D  2E59               	goto	u5055
 17660  165E  0826               	movf	??___ftpack,w
 17661  165F  04A1               	iorwf	___ftpack@arg,f
 17662  1660  0827               	movf	??___ftpack+1,w
 17663  1661  04A2               	iorwf	___ftpack@arg+1,f
 17664  1662  0828               	movf	??___ftpack+2,w
 17665  1663  04A3               	iorwf	___ftpack@arg+2,f
 17666  1664  0825               	movf	___ftpack@sign,w
 17667  1665  1903               	btfsc	3,2
 17668  1666  0008               	return
 17669  1667  17A3               	bsf	___ftpack@arg+2,7
 17670  1668  0008               	return
 17671  1669                     __end_of___ftpack:	
 17672                           
 17673                           	psect	text116
 17674  1BD3                     __ptext116:	
 17675 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17676 ;; Defined at:
 17677 ;;		line 67 in file "../src/Dimmer_B1.c"
 17678 ;; Parameters:    Size  Location     Type
 17679 ;;  lights          1    wreg     unsigned char 
 17680 ;; Auto vars:     Size  Location     Type
 17681 ;;  lights          1    3[BANK0 ] unsigned char 
 17682 ;;  value           1    2[BANK0 ] unsigned char 
 17683 ;; Return value:  Size  Location     Type
 17684 ;;                  1    wreg      unsigned char 
 17685 ;; Registers used:
 17686 ;;		wreg, status,2
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17696 ;;Total ram usage:        3 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; Hardware stack levels required when called:    5
 17699 ;; This function calls:
 17700 ;;		Nothing
 17701 ;; This function is called by:
 17702 ;;		_setDimmerLights_Dimming
 17703 ;; This function uses a non-reentrant model
 17704 ;;
 17705                           
 17706                           
 17707                           ;psect for function _getDimmerIntr_DimmingValue
 17708  1BD3                     _getDimmerIntr_DimmingValue:	
 17709                           
 17710                           ;incstack = 0
 17711                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17712                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17713  1BD3  0020               	movlb	0	; select bank0
 17714  1BD4  00A3               	movwf	getDimmerIntr_DimmingValue@lights
 17715                           
 17716                           ;Dimmer_B1.c: 68: char value = 0;
 17717  1BD5  01A2               	clrf	getDimmerIntr_DimmingValue@value
 17718                           
 17719                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17720  1BD6  0823               	movf	getDimmerIntr_DimmingValue@lights,w
 17721  1BD7  3A01               	xorlw	1
 17722  1BD8  1D03               	skipz
 17723  1BD9  2BDD               	goto	l7061
 17724                           
 17725                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17726  1BDA  0021               	movlb	1	; select bank1
 17727  1BDB  0833               	movf	(_DimmerIntr1^(0+128)+5),w
 17728  1BDC  2BE3               	goto	L10
 17729  1BDD                     l7061:	
 17730                           ;Dimmer_B1.c: 72: }
 17731                           
 17732                           
 17733                           ;Dimmer_B1.c: 75: else if (lights == 2) {
 17734  1BDD  0823               	movf	getDimmerIntr_DimmingValue@lights,w
 17735  1BDE  3A02               	xorlw	2
 17736  1BDF  1D03               	skipz
 17737  1BE0  2BE7               	goto	l752
 17738                           
 17739                           ;Dimmer_B1.c: 76: value = DimmerIntr2.DimmingValue;
 17740  1BE1  0021               	movlb	1	; select bank1
 17741  1BE2  083F               	movf	(_DimmerIntr2^(0+128)+5),w
 17742  1BE3                     L10:	
 17743  1BE3  0020               	movlb	0	; select bank0
 17744  1BE4  00A1               	movwf	??_getDimmerIntr_DimmingValue
 17745  1BE5  0821               	movf	??_getDimmerIntr_DimmingValue,w
 17746  1BE6  00A2               	movwf	getDimmerIntr_DimmingValue@value
 17747  1BE7                     l752:	
 17748                           
 17749                           ;Dimmer_B1.c: 77: }
 17750                           ;Dimmer_B1.c: 84: return value;
 17751  1BE7  0822               	movf	getDimmerIntr_DimmingValue@value,w
 17752  1BE8  0008               	return
 17753  1BE9                     __end_of_getDimmerIntr_DimmingValue:	
 17754                           
 17755                           	psect	text117
 17756  121E                     __ptext117:	
 17757 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17758 ;; Defined at:
 17759 ;;		line 916 in file "../src/Dimmer_B1.c"
 17760 ;; Parameters:    Size  Location     Type
 17761 ;;  lights          1    wreg     unsigned char 
 17762 ;; Auto vars:     Size  Location     Type
 17763 ;;  lights          1    6[BANK0 ] unsigned char 
 17764 ;;  allow           1    7[BANK0 ] unsigned char 
 17765 ;; Return value:  Size  Location     Type
 17766 ;;                  1    wreg      unsigned char 
 17767 ;; Registers used:
 17768 ;;		wreg, status,2, status,0, pclath, cstack
 17769 ;; Tracked objects:
 17770 ;;		On entry : 0/0
 17771 ;;		On exit  : 0/0
 17772 ;;		Unchanged: 0/0
 17773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17777 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17778 ;;Total ram usage:        6 bytes
 17779 ;; Hardware stack levels used:    1
 17780 ;; Hardware stack levels required when called:    6
 17781 ;; This function calls:
 17782 ;;		_getLoad_OK
 17783 ;; This function is called by:
 17784 ;;		_setDimmerLights_Main
 17785 ;; This function uses a non-reentrant model
 17786 ;;
 17787                           
 17788                           
 17789                           ;psect for function _getDimmerLights_Allow_Condition
 17790  121E                     _getDimmerLights_Allow_Condition:	
 17791                           
 17792                           ;incstack = 0
 17793                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 17794                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 17795  121E  0020               	movlb	0	; select bank0
 17796  121F  00A6               	movwf	getDimmerLights_Allow_Condition@lights
 17797                           
 17798                           ;Dimmer_B1.c: 917: char allow = 0;
 17799  1220  01A7               	clrf	getDimmerLights_Allow_Condition@allow
 17800                           
 17801                           ;Dimmer_B1.c: 923: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17802  1221  01A3               	clrf	_getDimmerLights_Allow_Condition$2375
 17803  1222  0AA3               	incf	_getDimmerLights_Allow_Condition$2375,f
 17804  1223  3199  217F  3192   	fcall	_getLoad_OK
 17805  1226  3800               	iorlw	0
 17806  1227  1D03               	skipz
 17807  1228  2A2E               	goto	l7391
 17808  1229  0022               	movlb	2	; select bank2
 17809  122A  18B9               	btfsc	_Dimmer^(0+256),1
 17810  122B  2A2E               	goto	l7391
 17811  122C  0020               	movlb	0	; select bank0
 17812  122D  01A3               	clrf	_getDimmerLights_Allow_Condition$2375
 17813  122E                     l7391:	
 17814  122E  0020               	movlb	0	; select bank0
 17815  122F  0823               	movf	_getDimmerLights_Allow_Condition$2375,w
 17816  1230  00A2               	movwf	??_getDimmerLights_Allow_Condition
 17817  1231  0822               	movf	??_getDimmerLights_Allow_Condition,w
 17818  1232  00A7               	movwf	getDimmerLights_Allow_Condition@allow
 17819                           
 17820                           ;Dimmer_B1.c: 927: if (allow == 0) {
 17821  1233  08A7               	movf	getDimmerLights_Allow_Condition@allow,f
 17822  1234  1D03               	skipz
 17823  1235  2A5A               	goto	l7415
 17824                           
 17825                           ;Dimmer_B1.c: 928: if (lights == 1) {
 17826  1236  0826               	movf	getDimmerLights_Allow_Condition@lights,w
 17827  1237  3A01               	xorlw	1
 17828  1238  1D03               	skipz
 17829  1239  2A47               	goto	l7405
 17830                           
 17831                           ;Dimmer_B1.c: 929: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17832  123A  01A4               	clrf	_getDimmerLights_Allow_Condition$2376
 17833  123B  0AA4               	incf	_getDimmerLights_Allow_Condition$2376,f
 17834  123C  0023               	movlb	3	; select bank3
 17835  123D  1A50               	btfsc	_DimmerLights2^(0+384),4
 17836  123E  2A44               	goto	l7403
 17837  123F  0021               	movlb	1	; select bank1
 17838  1240  1A3A               	btfsc	_DimmerIntr2^(0+128),4
 17839  1241  2A44               	goto	l7403
 17840  1242  0020               	movlb	0	; select bank0
 17841  1243  01A4               	clrf	_getDimmerLights_Allow_Condition$2376
 17842  1244                     l7403:	
 17843  1244  0020               	movlb	0	; select bank0
 17844  1245  0824               	movf	_getDimmerLights_Allow_Condition$2376,w
 17845  1246  2A57               	goto	L11
 17846  1247                     l7405:	
 17847                           ;Dimmer_B1.c: 930: } else if (lights == 2) {
 17848                           
 17849  1247  0826               	movf	getDimmerLights_Allow_Condition@lights,w
 17850  1248  3A02               	xorlw	2
 17851  1249  1D03               	skipz
 17852  124A  2A5A               	goto	l7415
 17853                           
 17854                           ;Dimmer_B1.c: 931: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17855  124B  01A5               	clrf	_getDimmerLights_Allow_Condition$2377
 17856  124C  0AA5               	incf	_getDimmerLights_Allow_Condition$2377,f
 17857  124D  0022               	movlb	2	; select bank2
 17858  124E  1A68               	btfsc	_DimmerLights1^(0+256),4
 17859  124F  2A55               	goto	l7413
 17860  1250  0021               	movlb	1	; select bank1
 17861  1251  1A2E               	btfsc	_DimmerIntr1^(0+128),4
 17862  1252  2A55               	goto	l7413
 17863  1253  0020               	movlb	0	; select bank0
 17864  1254  01A5               	clrf	_getDimmerLights_Allow_Condition$2377
 17865  1255                     l7413:	
 17866  1255  0020               	movlb	0	; select bank0
 17867  1256  0825               	movf	_getDimmerLights_Allow_Condition$2377,w
 17868  1257                     L11:	
 17869  1257  00A2               	movwf	??_getDimmerLights_Allow_Condition
 17870  1258  0822               	movf	??_getDimmerLights_Allow_Condition,w
 17871  1259  00A7               	movwf	getDimmerLights_Allow_Condition@allow
 17872  125A                     l7415:	
 17873                           
 17874                           ;Dimmer_B1.c: 932: }
 17875                           ;Dimmer_B1.c: 933: }
 17876                           ;Dimmer_B1.c: 950: return allow;
 17877  125A  0827               	movf	getDimmerLights_Allow_Condition@allow,w
 17878  125B  0008               	return
 17879  125C                     __end_of_getDimmerLights_Allow_Condition:	
 17880                           
 17881                           	psect	text118
 17882  197F                     __ptext118:	
 17883 ;; *************** function _getLoad_OK *****************
 17884 ;; Defined at:
 17885 ;;		line 272 in file "../src/OverLoad_B1.c"
 17886 ;; Parameters:    Size  Location     Type
 17887 ;;		None
 17888 ;; Auto vars:     Size  Location     Type
 17889 ;;  ok              1    1[BANK0 ] unsigned char 
 17890 ;; Return value:  Size  Location     Type
 17891 ;;                  1    wreg      unsigned char 
 17892 ;; Registers used:
 17893 ;;		wreg, status,2
 17894 ;; Tracked objects:
 17895 ;;		On entry : 0/0
 17896 ;;		On exit  : 0/0
 17897 ;;		Unchanged: 0/0
 17898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;Total ram usage:        1 bytes
 17904 ;; Hardware stack levels used:    1
 17905 ;; Hardware stack levels required when called:    5
 17906 ;; This function calls:
 17907 ;;		Nothing
 17908 ;; This function is called by:
 17909 ;;		_DimmerLights_Main
 17910 ;;		_getDimmerLights_Allow_Condition
 17911 ;; This function uses a non-reentrant model
 17912 ;;
 17913                           
 17914                           
 17915                           ;psect for function _getLoad_OK
 17916  197F                     _getLoad_OK:	
 17917                           
 17918                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17919                           
 17920                           ;incstack = 0
 17921                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17922  197F  3000               	movlw	0
 17923  1980  0022               	movlb	2	; select bank2
 17924  1981  1BC0               	btfsc	_Load^(0+256),7
 17925  1982  3001               	movlw	1
 17926  1983  0020               	movlb	0	; select bank0
 17927  1984  00A1               	movwf	getLoad_OK@ok
 17928                           
 17929                           ;OverLoad_B1.c: 274: return ok;
 17930  1985  0821               	movf	getLoad_OK@ok,w
 17931  1986  0008               	return
 17932  1987                     __end_of_getLoad_OK:	
 17933                           
 17934                           	psect	text119
 17935  105A                     __ptext119:	
 17936 ;; *************** function _getMain_All_Error_Status *****************
 17937 ;; Defined at:
 17938 ;;		line 424 in file "../src/main_B1.c"
 17939 ;; Parameters:    Size  Location     Type
 17940 ;;  command         1    wreg     unsigned char 
 17941 ;; Auto vars:     Size  Location     Type
 17942 ;;  command         1    6[BANK0 ] unsigned char 
 17943 ;;  status          1    7[BANK0 ] unsigned char 
 17944 ;; Return value:  Size  Location     Type
 17945 ;;                  1    wreg      unsigned char 
 17946 ;; Registers used:
 17947 ;;		wreg, status,2, status,0
 17948 ;; Tracked objects:
 17949 ;;		On entry : 0/0
 17950 ;;		On exit  : 0/0
 17951 ;;		Unchanged: 0/0
 17952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17954 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;Total ram usage:        7 bytes
 17958 ;; Hardware stack levels used:    1
 17959 ;; Hardware stack levels required when called:    5
 17960 ;; This function calls:
 17961 ;;		Nothing
 17962 ;; This function is called by:
 17963 ;;		_DimmerLights_Main
 17964 ;;		_Load_Main
 17965 ;;		_setTemp_Main
 17966 ;;		_getRxData
 17967 ;;		_setSw_Main
 17968 ;;		_Exception_Main
 17969 ;; This function uses a non-reentrant model
 17970 ;;
 17971                           
 17972                           
 17973                           ;psect for function _getMain_All_Error_Status
 17974  105A                     _getMain_All_Error_Status:	
 17975                           
 17976                           ;incstack = 0
 17977                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17978                           ;getMain_All_Error_Status@command stored from wreg
 17979  105A  0020               	movlb	0	; select bank0
 17980  105B  00A6               	movwf	getMain_All_Error_Status@command
 17981                           
 17982                           ;main_B1.c: 425: char status = 0;
 17983  105C  01A7               	clrf	getMain_All_Error_Status@status
 17984                           
 17985                           ;main_B1.c: 436: if (status == 0 && command != 2) {
 17986  105D  08A7               	movf	getMain_All_Error_Status@status,f
 17987  105E  1D03               	skipz
 17988  105F  2874               	goto	l9291
 17989  1060  0826               	movf	getMain_All_Error_Status@command,w
 17990  1061  3A02               	xorlw	2
 17991  1062  1903               	skipnz
 17992  1063  2874               	goto	l9291
 17993                           
 17994                           ;main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17995  1064  0021               	movlb	1	; select bank1
 17996  1065  18DB               	btfsc	_Temp^(0+128),1
 17997  1066  286B               	goto	l9289
 17998  1067  0020               	movlb	0	; select bank0
 17999  1068  01A2               	clrf	_getMain_All_Error_Status$6846
 18000  1069  01A3               	clrf	_getMain_All_Error_Status$6846+1
 18001  106A  2870               	goto	l2859
 18002  106B                     l9289:	
 18003  106B  3002               	movlw	2
 18004  106C  0020               	movlb	0	; select bank0
 18005  106D  00A2               	movwf	_getMain_All_Error_Status$6846
 18006  106E  3000               	movlw	0
 18007  106F  00A3               	movwf	_getMain_All_Error_Status$6846+1
 18008  1070                     l2859:	
 18009  1070  0822               	movf	_getMain_All_Error_Status$6846,w
 18010  1071  00A1               	movwf	??_getMain_All_Error_Status
 18011  1072  0821               	movf	??_getMain_All_Error_Status,w
 18012  1073  00A7               	movwf	getMain_All_Error_Status@status
 18013  1074                     l9291:	
 18014                           
 18015                           ;main_B1.c: 438: }
 18016                           ;main_B1.c: 443: if (status == 0 && command != 3) {
 18017  1074  08A7               	movf	getMain_All_Error_Status@status,f
 18018  1075  1D03               	skipz
 18019  1076  288B               	goto	l2860
 18020  1077  0826               	movf	getMain_All_Error_Status@command,w
 18021  1078  3A03               	xorlw	3
 18022  1079  1903               	skipnz
 18023  107A  288B               	goto	l2860
 18024                           
 18025                           ;main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 18026  107B  0022               	movlb	2	; select bank2
 18027  107C  1AC0               	btfsc	_Load^(0+256),5
 18028  107D  2882               	goto	l9299
 18029  107E  0020               	movlb	0	; select bank0
 18030  107F  01A4               	clrf	_getMain_All_Error_Status$6847
 18031  1080  01A5               	clrf	_getMain_All_Error_Status$6847+1
 18032  1081  2887               	goto	l2864
 18033  1082                     l9299:	
 18034  1082  3003               	movlw	3
 18035  1083  0020               	movlb	0	; select bank0
 18036  1084  00A4               	movwf	_getMain_All_Error_Status$6847
 18037  1085  3000               	movlw	0
 18038  1086  00A5               	movwf	_getMain_All_Error_Status$6847+1
 18039  1087                     l2864:	
 18040  1087  0824               	movf	_getMain_All_Error_Status$6847,w
 18041  1088  00A1               	movwf	??_getMain_All_Error_Status
 18042  1089  0821               	movf	??_getMain_All_Error_Status,w
 18043  108A  00A7               	movwf	getMain_All_Error_Status@status
 18044  108B                     l2860:	
 18045                           
 18046                           ;main_B1.c: 445: }
 18047                           ;main_B1.c: 455: return status;
 18048  108B  0827               	movf	getMain_All_Error_Status@status,w
 18049  108C  0008               	return
 18050  108D                     __end_of_getMain_All_Error_Status:	
 18051                           
 18052                           	psect	text120
 18053  19B9                     __ptext120:	
 18054 ;; *************** function _DimmerLights_Initialization *****************
 18055 ;; Defined at:
 18056 ;;		line 597 in file "../src/Dimmer_B1.c"
 18057 ;; Parameters:    Size  Location     Type
 18058 ;;		None
 18059 ;; Auto vars:     Size  Location     Type
 18060 ;;		None
 18061 ;; Return value:  Size  Location     Type
 18062 ;;		None               void
 18063 ;; Registers used:
 18064 ;;		wreg, status,2, status,0, pclath, cstack
 18065 ;; Tracked objects:
 18066 ;;		On entry : 0/0
 18067 ;;		On exit  : 0/0
 18068 ;;		Unchanged: 0/0
 18069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18074 ;;Total ram usage:        0 bytes
 18075 ;; Hardware stack levels used:    1
 18076 ;; Hardware stack levels required when called:    6
 18077 ;; This function calls:
 18078 ;;		_DimmerIntr_Initialization
 18079 ;;		_setDimmerLights_Initialization
 18080 ;; This function is called by:
 18081 ;;		_main
 18082 ;; This function uses a non-reentrant model
 18083 ;;
 18084                           
 18085                           
 18086                           ;psect for function _DimmerLights_Initialization
 18087  19B9                     _DimmerLights_Initialization:	
 18088                           
 18089                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 18090                           
 18091                           ;incstack = 0
 18092                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18093  19B9  3001               	movlw	1
 18094  19BA  3190  2000  3199   	fcall	_setDimmerLights_Initialization
 18095                           
 18096                           ;Dimmer_B1.c: 603: setDimmerLights_Initialization(2);
 18097  19BD  3002               	movlw	2
 18098  19BE  3190  2000  3199   	fcall	_setDimmerLights_Initialization
 18099                           
 18100                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 18101  19C1  3190  2029         	fcall	_DimmerIntr_Initialization
 18102  19C3  0008               	return
 18103  19C4                     __end_of_DimmerLights_Initialization:	
 18104                           
 18105                           	psect	text121
 18106  1000                     __ptext121:	
 18107 ;; *************** function _setDimmerLights_Initialization *****************
 18108 ;; Defined at:
 18109 ;;		line 613 in file "../src/Dimmer_B1.c"
 18110 ;; Parameters:    Size  Location     Type
 18111 ;;  lights          1    wreg     unsigned char 
 18112 ;; Auto vars:     Size  Location     Type
 18113 ;;  lights          1    0[COMMON] unsigned char 
 18114 ;; Return value:  Size  Location     Type
 18115 ;;		None               void
 18116 ;; Registers used:
 18117 ;;		wreg
 18118 ;; Tracked objects:
 18119 ;;		On entry : 0/0
 18120 ;;		On exit  : 0/0
 18121 ;;		Unchanged: 0/0
 18122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18127 ;;Total ram usage:        0 bytes
 18128 ;; Hardware stack levels used:    1
 18129 ;; Hardware stack levels required when called:    5
 18130 ;; This function calls:
 18131 ;;		Nothing
 18132 ;; This function is called by:
 18133 ;;		_DimmerLights_Initialization
 18134 ;; This function uses a non-reentrant model
 18135 ;;
 18136                           
 18137                           
 18138                           ;psect for function _setDimmerLights_Initialization
 18139  1000                     _setDimmerLights_Initialization:	
 18140                           
 18141                           ;incstack = 0
 18142                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 18143  1000  0008               	return
 18144  1001                     __end_of_setDimmerLights_Initialization:	
 18145                           
 18146                           	psect	text122
 18147  1029                     __ptext122:	
 18148 ;; *************** function _DimmerIntr_Initialization *****************
 18149 ;; Defined at:
 18150 ;;		line 7 in file "../src/Dimmer_B1.c"
 18151 ;; Parameters:    Size  Location     Type
 18152 ;;		None
 18153 ;; Auto vars:     Size  Location     Type
 18154 ;;		None
 18155 ;; Return value:  Size  Location     Type
 18156 ;;		None               void
 18157 ;; Registers used:
 18158 ;;		wreg
 18159 ;; Tracked objects:
 18160 ;;		On entry : 0/0
 18161 ;;		On exit  : 0/0
 18162 ;;		Unchanged: 0/0
 18163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18168 ;;Total ram usage:        1 bytes
 18169 ;; Hardware stack levels used:    1
 18170 ;; Hardware stack levels required when called:    5
 18171 ;; This function calls:
 18172 ;;		Nothing
 18173 ;; This function is called by:
 18174 ;;		_DimmerLights_Initialization
 18175 ;; This function uses a non-reentrant model
 18176 ;;
 18177                           
 18178                           
 18179                           ;psect for function _DimmerIntr_Initialization
 18180  1029                     _DimmerIntr_Initialization:	
 18181                           
 18182                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 18183                           
 18184                           ;incstack = 0
 18185                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 18186  1029  3007               	movlw	7
 18187  102A  0020               	movlb	0	; select bank0
 18188  102B  00A1               	movwf	??_DimmerIntr_Initialization
 18189  102C  0821               	movf	??_DimmerIntr_Initialization,w
 18190  102D  0021               	movlb	1	; select bank1
 18191  102E  00B2               	movwf	(_DimmerIntr1^(0+128)+4)
 18192                           
 18193                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(60*0.65));
 18194  102F  3027               	movlw	39
 18195  1030  0020               	movlb	0	; select bank0
 18196  1031  00A1               	movwf	??_DimmerIntr_Initialization
 18197  1032  0821               	movf	??_DimmerIntr_Initialization,w
 18198  1033  0021               	movlb	1	; select bank1
 18199  1034  00B4               	movwf	(_DimmerIntr1^(0+128)+6)
 18200                           
 18201                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.65));
 18202  1035  3006               	movlw	6
 18203  1036  0020               	movlb	0	; select bank0
 18204  1037  00A1               	movwf	??_DimmerIntr_Initialization
 18205  1038  0821               	movf	??_DimmerIntr_Initialization,w
 18206  1039  0021               	movlb	1	; select bank1
 18207  103A  00B5               	movwf	(_DimmerIntr1^(0+128)+7)
 18208                           
 18209                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(60*0.65));
 18210  103B  3027               	movlw	39
 18211  103C  0020               	movlb	0	; select bank0
 18212  103D  00A1               	movwf	??_DimmerIntr_Initialization
 18213  103E  0821               	movf	??_DimmerIntr_Initialization,w
 18214  103F  0021               	movlb	1	; select bank1
 18215  1040  00B3               	movwf	(_DimmerIntr1^(0+128)+5)
 18216                           
 18217                           ;Dimmer_B1.c: 16: DimmerIntr2.TuneTimeValue = 7;
 18218  1041  3007               	movlw	7
 18219  1042  0020               	movlb	0	; select bank0
 18220  1043  00A1               	movwf	??_DimmerIntr_Initialization
 18221  1044  0821               	movf	??_DimmerIntr_Initialization,w
 18222  1045  0021               	movlb	1	; select bank1
 18223  1046  00BE               	movwf	(_DimmerIntr2^(0+128)+4)
 18224                           
 18225                           ;Dimmer_B1.c: 17: DimmerIntr2.MaxmumValue = ((char)(60*0.65));
 18226  1047  3027               	movlw	39
 18227  1048  0020               	movlb	0	; select bank0
 18228  1049  00A1               	movwf	??_DimmerIntr_Initialization
 18229  104A  0821               	movf	??_DimmerIntr_Initialization,w
 18230  104B  0021               	movlb	1	; select bank1
 18231  104C  00C0               	movwf	(_DimmerIntr2^(0+128)+6)
 18232                           
 18233                           ;Dimmer_B1.c: 18: DimmerIntr2.MinimumValue = ((char)(10*0.65));
 18234  104D  3006               	movlw	6
 18235  104E  0020               	movlb	0	; select bank0
 18236  104F  00A1               	movwf	??_DimmerIntr_Initialization
 18237  1050  0821               	movf	??_DimmerIntr_Initialization,w
 18238  1051  0021               	movlb	1	; select bank1
 18239  1052  00C1               	movwf	(_DimmerIntr2^(0+128)+7)
 18240                           
 18241                           ;Dimmer_B1.c: 19: DimmerIntr2.DimmingValue = ((char)(60*0.65));
 18242  1053  3027               	movlw	39
 18243  1054  0020               	movlb	0	; select bank0
 18244  1055  00A1               	movwf	??_DimmerIntr_Initialization
 18245  1056  0821               	movf	??_DimmerIntr_Initialization,w
 18246  1057  0021               	movlb	1	; select bank1
 18247  1058  00BF               	movwf	(_DimmerIntr2^(0+128)+5)
 18248  1059  0008               	return
 18249  105A                     __end_of_DimmerIntr_Initialization:	
 18250                           
 18251                           	psect	text123
 18252  1977                     __ptext123:	
 18253 ;; *************** function _DelayOff_Main *****************
 18254 ;; Defined at:
 18255 ;;		line 41 in file "../src/DelayOff_B1.c"
 18256 ;; Parameters:    Size  Location     Type
 18257 ;;		None
 18258 ;; Auto vars:     Size  Location     Type
 18259 ;;		None
 18260 ;; Return value:  Size  Location     Type
 18261 ;;		None               void
 18262 ;; Registers used:
 18263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18264 ;; Tracked objects:
 18265 ;;		On entry : 0/0
 18266 ;;		On exit  : 0/0
 18267 ;;		Unchanged: 0/0
 18268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18273 ;;Total ram usage:        0 bytes
 18274 ;; Hardware stack levels used:    1
 18275 ;; Hardware stack levels required when called:    9
 18276 ;; This function calls:
 18277 ;;		_DlyOff_Main
 18278 ;; This function is called by:
 18279 ;;		_main
 18280 ;; This function uses a non-reentrant model
 18281 ;;
 18282                           
 18283                           
 18284                           ;psect for function _DelayOff_Main
 18285  1977                     _DelayOff_Main:	
 18286                           
 18287                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18288                           
 18289                           ;incstack = 0
 18290                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18291  1977  3001               	movlw	1
 18292  1978  3189  21C3  3199   	fcall	_DlyOff_Main
 18293                           
 18294                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 18295  197B  3002               	movlw	2
 18296  197C  3189  21C3         	fcall	_DlyOff_Main
 18297  197E  0008               	return
 18298  197F                     __end_of_DelayOff_Main:	
 18299                           
 18300                           	psect	text124
 18301  09C3                     __ptext124:	
 18302 ;; *************** function _DlyOff_Main *****************
 18303 ;; Defined at:
 18304 ;;		line 61 in file "../src/DelayOff_B1.c"
 18305 ;; Parameters:    Size  Location     Type
 18306 ;;  sw              1    wreg     unsigned char 
 18307 ;; Auto vars:     Size  Location     Type
 18308 ;;  sw              1   72[BANK0 ] unsigned char 
 18309 ;; Return value:  Size  Location     Type
 18310 ;;		None               void
 18311 ;; Registers used:
 18312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18313 ;; Tracked objects:
 18314 ;;		On entry : 0/0
 18315 ;;		On exit  : 0/0
 18316 ;;		Unchanged: 0/0
 18317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;Total ram usage:        3 bytes
 18323 ;; Hardware stack levels used:    1
 18324 ;; Hardware stack levels required when called:    8
 18325 ;; This function calls:
 18326 ;;		_DelayOffPointSelect
 18327 ;;		_getDimmerLights_Status
 18328 ;;		_setDimmerLights_SwOff
 18329 ;;		_setDimmerLights_SwOn
 18330 ;;		_setProductData
 18331 ;; This function is called by:
 18332 ;;		_DelayOff_Main
 18333 ;; This function uses a non-reentrant model
 18334 ;;
 18335                           
 18336                           
 18337                           ;psect for function _DlyOff_Main
 18338  09C3                     _DlyOff_Main:	
 18339                           
 18340                           ;incstack = 0
 18341                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18342                           ;DlyOff_Main@sw stored from wreg
 18343  09C3  0020               	movlb	0	; select bank0
 18344  09C4  00E8               	movwf	DlyOff_Main@sw
 18345                           
 18346                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18347  09C5  0868               	movf	DlyOff_Main@sw,w
 18348  09C6  319B  23E9  3189   	fcall	_DelayOffPointSelect
 18349                           
 18350                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18351  09C9  0021               	movlb	1	; select bank1
 18352  09CA  084D               	movf	_DelayOff^(0+128),w
 18353  09CB  0086               	movwf	6
 18354  09CC  3001               	movlw	1	; select bank2/3
 18355  09CD  0087               	movwf	7
 18356  09CE  1C81               	btfss	1,1
 18357  09CF  0008               	return
 18358                           
 18359                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18360  09D0  084D               	movf	_DelayOff^(0+128),w
 18361  09D1  3E02               	addlw	2
 18362  09D2  0086               	movwf	6
 18363  09D3  3001               	movlw	1	; select bank2/3
 18364  09D4  0087               	movwf	7
 18365  09D5  3001               	movlw	1
 18366  09D6  0781               	addwf	1,f
 18367  09D7  3141               	addfsr 1,1
 18368  09D8  1803               	skipnc
 18369  09D9  0A81               	incf	1,f
 18370                           
 18371                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18372  09DA  084D               	movf	_DelayOff^(0+128),w
 18373  09DB  3E02               	addlw	2
 18374  09DC  0086               	movwf	6
 18375  09DD  3001               	movlw	1	; select bank2/3
 18376  09DE  0087               	movwf	7
 18377  09DF  3F40               	moviw [0]fsr1
 18378  09E0  0020               	movlb	0	; select bank0
 18379  09E1  00E6               	movwf	??_DlyOff_Main
 18380  09E2  3F41               	moviw [1]fsr1
 18381  09E3  00E7               	movwf	??_DlyOff_Main+1
 18382  09E4  300B               	movlw	11
 18383  09E5  0267               	subwf	??_DlyOff_Main+1,w
 18384  09E6  30B8               	movlw	184
 18385  09E7  1903               	skipnz
 18386  09E8  0266               	subwf	??_DlyOff_Main,w
 18387  09E9  1C03               	skipc
 18388  09EA  0008               	return
 18389                           
 18390                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18391  09EB  0021               	movlb	1	; select bank1
 18392  09EC  084D               	movf	_DelayOff^(0+128),w
 18393  09ED  3E02               	addlw	2
 18394  09EE  0086               	movwf	6
 18395  09EF  3001               	movlw	1	; select bank2/3
 18396  09F0  0087               	movwf	7
 18397  09F1  3000               	movlw	0
 18398  09F2  3FC0               	movwi [0]fsr1
 18399  09F3  3FC1               	movwi [1]fsr1
 18400                           
 18401                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18402  09F4  3001               	movlw	1
 18403  09F5  0020               	movlb	0	; select bank0
 18404  09F6  00E6               	movwf	??_DlyOff_Main
 18405  09F7  0021               	movlb	1	; select bank1
 18406  09F8  084D               	movf	_DelayOff^(0+128),w
 18407  09F9  3E04               	addlw	4
 18408  09FA  0086               	movwf	6
 18409  09FB  3001               	movlw	1	; select bank2/3
 18410  09FC  0087               	movwf	7
 18411  09FD  0020               	movlb	0	; select bank0
 18412  09FE  0866               	movf	??_DlyOff_Main,w
 18413  09FF  0781               	addwf	1,f
 18414                           
 18415                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18416  0A00  0021               	movlb	1	; select bank1
 18417  0A01  084D               	movf	_DelayOff^(0+128),w
 18418  0A02  3E04               	addlw	4
 18419  0A03  0086               	movwf	6
 18420  0A04  3001               	movlw	1	; select bank2/3
 18421  0A05  0087               	movwf	7
 18422  0A06  0A4D               	incf	_DelayOff^(0+128),w
 18423  0A07  0084               	movwf	4
 18424  0A08  3001               	movlw	1	; select bank2/3
 18425  0A09  0085               	movwf	5
 18426  0A0A  0800               	movf	0,w
 18427  0A0B  0201               	subwf	1,w
 18428  0A0C  1C03               	skipc
 18429  0A0D  0008               	return
 18430                           
 18431                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18432  0A0E  084D               	movf	_DelayOff^(0+128),w
 18433  0A0F  3E04               	addlw	4
 18434  0A10  0086               	movwf	6
 18435  0A11  3001               	movlw	1	; select bank2/3
 18436  0A12  0087               	movwf	7
 18437  0A13  0181               	clrf	1
 18438                           
 18439                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18440  0A14  084D               	movf	_DelayOff^(0+128),w
 18441  0A15  0086               	movwf	6
 18442  0A16  3001               	movlw	1	; select bank2/3
 18443  0A17  0087               	movwf	7
 18444  0A18  1081               	bcf	1,1
 18445                           
 18446                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18447  0A19  0020               	movlb	0	; select bank0
 18448  0A1A  0868               	movf	DlyOff_Main@sw,w
 18449  0A1B  319A  225D  3189   	fcall	_getDimmerLights_Status
 18450  0A1E  3A01               	xorlw	1
 18451  0A1F  1D03               	skipz
 18452  0A20  2A2B               	goto	l581
 18453                           
 18454                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18455  0A21  0020               	movlb	0	; select bank0
 18456  0A22  0868               	movf	DlyOff_Main@sw,w
 18457  0A23  3195  25AC  3189   	fcall	_setDimmerLights_SwOn
 18458                           
 18459                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18460  0A26  0020               	movlb	0	; select bank0
 18461  0A27  0868               	movf	DlyOff_Main@sw,w
 18462  0A28  3191  212E  3189   	fcall	_setDimmerLights_SwOff
 18463  0A2B                     l581:	
 18464                           
 18465                           ;DelayOff_B1.c: 78: }
 18466                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18467  0A2B  0020               	movlb	0	; select bank0
 18468  0A2C  01E3               	clrf	setProductData@value
 18469  0A2D  0868               	movf	DlyOff_Main@sw,w
 18470  0A2E  3E1A               	addlw	26
 18471  0A2F  3199  21FC         	fcall	_setProductData
 18472  0A31  0008               	return
 18473  0A32                     __end_of_DlyOff_Main:	
 18474                           
 18475                           	psect	text125
 18476  19FC                     __ptext125:	
 18477 ;; *************** function _setProductData *****************
 18478 ;; Defined at:
 18479 ;;		line 645 in file "../src/main_B1.c"
 18480 ;; Parameters:    Size  Location     Type
 18481 ;;  address         1    wreg     unsigned char 
 18482 ;;  value           1   67[BANK0 ] unsigned char 
 18483 ;; Auto vars:     Size  Location     Type
 18484 ;;  address         1   69[BANK0 ] unsigned char 
 18485 ;; Return value:  Size  Location     Type
 18486 ;;		None               void
 18487 ;; Registers used:
 18488 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18489 ;; Tracked objects:
 18490 ;;		On entry : 0/0
 18491 ;;		On exit  : 0/0
 18492 ;;		Unchanged: 0/0
 18493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18494 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18497 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18498 ;;Total ram usage:        3 bytes
 18499 ;; Hardware stack levels used:    1
 18500 ;; Hardware stack levels required when called:    5
 18501 ;; This function calls:
 18502 ;;		Nothing
 18503 ;; This function is called by:
 18504 ;;		_DlyOff_Main
 18505 ;;		_setDelayOff_GO
 18506 ;;		_setDimmerLights_OnOff
 18507 ;;		_setDimmerLights_Dimming
 18508 ;;		_setTemp_Main
 18509 ;;		_setLog_Code
 18510 ;;		_setControl_Lights_Table
 18511 ;;		_setRFSW_AdjControl
 18512 ;;		_setRF_DimmerLights
 18513 ;; This function uses a non-reentrant model
 18514 ;;
 18515                           
 18516                           
 18517                           ;psect for function _setProductData
 18518  19FC                     _setProductData:	
 18519                           
 18520                           ;incstack = 0
 18521                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18522                           ;setProductData@address stored from wreg
 18523  19FC  0020               	movlb	0	; select bank0
 18524  19FD  00E5               	movwf	setProductData@address
 18525                           
 18526                           ;main_B1.c: 646: _product.Data[address] = value;
 18527  19FE  0863               	movf	setProductData@value,w
 18528  19FF  00E4               	movwf	??_setProductData
 18529  1A00  0865               	movf	setProductData@address,w
 18530  1A01  3E45               	addlw	__product& (0+255)
 18531  1A02  0086               	movwf	6
 18532  1A03  3002               	movlw	2	; select bank4/5
 18533  1A04  0087               	movwf	7
 18534  1A05  0864               	movf	??_setProductData,w
 18535  1A06  0081               	movwf	1
 18536  1A07  0008               	return
 18537  1A08                     __end_of_setProductData:	
 18538                           
 18539                           	psect	text126
 18540  15AC                     __ptext126:	
 18541 ;; *************** function _setDimmerLights_SwOn *****************
 18542 ;; Defined at:
 18543 ;;		line 653 in file "../src/Dimmer_B1.c"
 18544 ;; Parameters:    Size  Location     Type
 18545 ;;  sw              1    wreg     unsigned char 
 18546 ;; Auto vars:     Size  Location     Type
 18547 ;;  sw              1   18[BANK0 ] unsigned char 
 18548 ;;  idle            1   17[BANK0 ] unsigned char 
 18549 ;; Return value:  Size  Location     Type
 18550 ;;		None               void
 18551 ;; Registers used:
 18552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18553 ;; Tracked objects:
 18554 ;;		On entry : 0/0
 18555 ;;		On exit  : 0/0
 18556 ;;		Unchanged: 0/0
 18557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18559 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18561 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18562 ;;Total ram usage:        5 bytes
 18563 ;; Hardware stack levels used:    1
 18564 ;; Hardware stack levels required when called:    7
 18565 ;; This function calls:
 18566 ;;		_DimmerLights_SelectPointer
 18567 ;;		_setBuz
 18568 ;; This function is called by:
 18569 ;;		_DlyOff_Main
 18570 ;;		_setControl_Lights_Table
 18571 ;;		_setRFSW_Control
 18572 ;;		_setRFSW_AdjControl
 18573 ;;		_setSw_Main
 18574 ;; This function uses a non-reentrant model
 18575 ;;
 18576                           
 18577                           
 18578                           ;psect for function _setDimmerLights_SwOn
 18579  15AC                     _setDimmerLights_SwOn:	
 18580                           
 18581                           ;incstack = 0
 18582                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18583                           ;setDimmerLights_SwOn@sw stored from wreg
 18584  15AC  0020               	movlb	0	; select bank0
 18585  15AD  00B2               	movwf	setDimmerLights_SwOn@sw
 18586                           
 18587                           ;Dimmer_B1.c: 654: char idle = 0;
 18588  15AE  01B1               	clrf	setDimmerLights_SwOn@idle
 18589                           
 18590                           ;Dimmer_B1.c: 656: if (idle == 0) {
 18591  15AF  08B1               	movf	setDimmerLights_SwOn@idle,f
 18592  15B0  1D03               	skipz
 18593  15B1  2DD6               	goto	l9159
 18594                           
 18595                           ;Dimmer_B1.c: 657: if (sw == 1) {
 18596  15B2  0832               	movf	setDimmerLights_SwOn@sw,w
 18597  15B3  3A01               	xorlw	1
 18598  15B4  1D03               	skipz
 18599  15B5  2DC3               	goto	l9149
 18600                           
 18601                           ;Dimmer_B1.c: 658: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18602  15B6  01AF               	clrf	_setDimmerLights_SwOn$2314
 18603  15B7  0AAF               	incf	_setDimmerLights_SwOn$2314,f
 18604  15B8  0023               	movlb	3	; select bank3
 18605  15B9  1A50               	btfsc	_DimmerLights2^(0+384),4
 18606  15BA  2DC0               	goto	l9147
 18607  15BB  0021               	movlb	1	; select bank1
 18608  15BC  1A3A               	btfsc	_DimmerIntr2^(0+128),4
 18609  15BD  2DC0               	goto	l9147
 18610  15BE  0020               	movlb	0	; select bank0
 18611  15BF  01AF               	clrf	_setDimmerLights_SwOn$2314
 18612  15C0                     l9147:	
 18613  15C0  0020               	movlb	0	; select bank0
 18614  15C1  082F               	movf	_setDimmerLights_SwOn$2314,w
 18615  15C2  2DD3               	goto	L12
 18616  15C3                     l9149:	
 18617                           ;Dimmer_B1.c: 659: } else if (sw == 2) {
 18618                           
 18619  15C3  0832               	movf	setDimmerLights_SwOn@sw,w
 18620  15C4  3A02               	xorlw	2
 18621  15C5  1D03               	skipz
 18622  15C6  2DD6               	goto	l9159
 18623                           
 18624                           ;Dimmer_B1.c: 660: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18625  15C7  01B0               	clrf	_setDimmerLights_SwOn$2323
 18626  15C8  0AB0               	incf	_setDimmerLights_SwOn$2323,f
 18627  15C9  0022               	movlb	2	; select bank2
 18628  15CA  1A68               	btfsc	_DimmerLights1^(0+256),4
 18629  15CB  2DD1               	goto	l9157
 18630  15CC  0021               	movlb	1	; select bank1
 18631  15CD  1A2E               	btfsc	_DimmerIntr1^(0+128),4
 18632  15CE  2DD1               	goto	l9157
 18633  15CF  0020               	movlb	0	; select bank0
 18634  15D0  01B0               	clrf	_setDimmerLights_SwOn$2323
 18635  15D1                     l9157:	
 18636  15D1  0020               	movlb	0	; select bank0
 18637  15D2  0830               	movf	_setDimmerLights_SwOn$2323,w
 18638  15D3                     L12:	
 18639  15D3  00AE               	movwf	??_setDimmerLights_SwOn
 18640  15D4  082E               	movf	??_setDimmerLights_SwOn,w
 18641  15D5  00B1               	movwf	setDimmerLights_SwOn@idle
 18642  15D6                     l9159:	
 18643                           
 18644                           ;Dimmer_B1.c: 661: }
 18645                           ;Dimmer_B1.c: 662: }
 18646                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 18647  15D6  0832               	movf	setDimmerLights_SwOn@sw,w
 18648  15D7  319C  2400  3195   	fcall	_DimmerLights_SelectPointer
 18649                           
 18650                           ;Dimmer_B1.c: 680: if (idle == 0) {
 18651  15DA  0020               	movlb	0	; select bank0
 18652  15DB  08B1               	movf	setDimmerLights_SwOn@idle,f
 18653  15DC  1D03               	skipz
 18654  15DD  0008               	return
 18655                           
 18656                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 18657  15DE  0021               	movlb	1	; select bank1
 18658  15DF  084F               	movf	_DimmerLights^(0+128),w
 18659  15E0  0086               	movwf	6
 18660  15E1  3001               	movlw	1	; select bank2/3
 18661  15E2  0087               	movwf	7
 18662  15E3  1401               	bsf	1,0
 18663                           
 18664                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 18665  15E4  0A4F               	incf	_DimmerLights^(0+128),w
 18666  15E5  0086               	movwf	6
 18667  15E6  3001               	movlw	1	; select bank2/3
 18668  15E7  0087               	movwf	7
 18669  15E8  1801               	btfsc	1,0
 18670  15E9  2DFA               	goto	l9167
 18671                           
 18672                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 18673  15EA  0A4F               	incf	_DimmerLights^(0+128),w
 18674  15EB  0086               	movwf	6
 18675  15EC  3001               	movlw	1	; select bank2/3
 18676  15ED  0087               	movwf	7
 18677  15EE  1401               	bsf	1,0
 18678                           
 18679                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 18680  15EF  084F               	movf	_DimmerLights^(0+128),w
 18681  15F0  0086               	movwf	6
 18682  15F1  3001               	movlw	1	; select bank2/3
 18683  15F2  0087               	movwf	7
 18684  15F3  1481               	bsf	1,1
 18685                           
 18686                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 18687  15F4  084F               	movf	_DimmerLights^(0+128),w
 18688  15F5  0086               	movwf	6
 18689  15F6  3001               	movlw	1	; select bank2/3
 18690  15F7  0087               	movwf	7
 18691  15F8  1501               	bsf	1,2
 18692                           
 18693                           ;Dimmer_B1.c: 686: } else {
 18694  15F9  2DFF               	goto	l9169
 18695  15FA                     l9167:	
 18696                           
 18697                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 18698  15FA  0A4F               	incf	_DimmerLights^(0+128),w
 18699  15FB  0086               	movwf	6
 18700  15FC  3001               	movlw	1	; select bank2/3
 18701  15FD  0087               	movwf	7
 18702  15FE  1001               	bcf	1,0
 18703  15FF                     l9169:	
 18704                           
 18705                           ;Dimmer_B1.c: 688: }
 18706                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 18707  15FF  3064               	movlw	100
 18708  1600  0020               	movlb	0	; select bank0
 18709  1601  00AA               	movwf	setBuz@time
 18710  1602  3000               	movlw	0
 18711  1603  00AB               	movwf	setBuz@time+1
 18712  1604  3001               	movlw	1
 18713  1605  3194  24F8         	fcall	_setBuz
 18714  1607  0008               	return
 18715  1608                     __end_of_setDimmerLights_SwOn:	
 18716                           
 18717                           	psect	text127
 18718  14F8                     __ptext127:	
 18719 ;; *************** function _setBuz *****************
 18720 ;; Defined at:
 18721 ;;		line 22 in file "../src/Buzzer_B1.c"
 18722 ;; Parameters:    Size  Location     Type
 18723 ;;  count           1    wreg     unsigned char 
 18724 ;;  time            2   10[BANK0 ] int 
 18725 ;; Auto vars:     Size  Location     Type
 18726 ;;  count           1   13[BANK0 ] unsigned char 
 18727 ;; Return value:  Size  Location     Type
 18728 ;;		None               void
 18729 ;; Registers used:
 18730 ;;		wreg, status,2, status,0, pclath, cstack
 18731 ;; Tracked objects:
 18732 ;;		On entry : 0/0
 18733 ;;		On exit  : 0/0
 18734 ;;		Unchanged: 0/0
 18735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18736 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18739 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18740 ;;Total ram usage:        4 bytes
 18741 ;; Hardware stack levels used:    1
 18742 ;; Hardware stack levels required when called:    6
 18743 ;; This function calls:
 18744 ;;		___awdiv
 18745 ;; This function is called by:
 18746 ;;		_setDimmerLights_SwOn
 18747 ;;		_setDimmerLights_Dimming
 18748 ;;		_setTemp_Main
 18749 ;;		_setLog_Code
 18750 ;;		_setRFSW_Control
 18751 ;;		_setSw_Main
 18752 ;;		_my_MainTimer
 18753 ;;		_Exception_Main
 18754 ;; This function uses a non-reentrant model
 18755 ;;
 18756                           
 18757                           
 18758                           ;psect for function _setBuz
 18759  14F8                     _setBuz:	
 18760                           
 18761                           ;incstack = 0
 18762                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18763                           ;setBuz@count stored from wreg
 18764  14F8  0020               	movlb	0	; select bank0
 18765  14F9  00AD               	movwf	setBuz@count
 18766                           
 18767                           ;Buzzer_B1.c: 23: time /= 20;
 18768  14FA  3014               	movlw	20
 18769  14FB  00A1               	movwf	___awdiv@divisor
 18770  14FC  3000               	movlw	0
 18771  14FD  00A2               	movwf	___awdiv@divisor+1
 18772  14FE  082B               	movf	setBuz@time+1,w
 18773  14FF  01A4               	clrf	___awdiv@dividend+1
 18774  1500  07A4               	addwf	___awdiv@dividend+1,f
 18775  1501  082A               	movf	setBuz@time,w
 18776  1502  01A3               	clrf	___awdiv@dividend
 18777  1503  07A3               	addwf	___awdiv@dividend,f
 18778  1504  3194  24A4  3194   	fcall	___awdiv
 18779  1507  0020               	movlb	0	; select bank0
 18780  1508  0822               	movf	?___awdiv+1,w
 18781  1509  01AB               	clrf	setBuz@time+1
 18782  150A  07AB               	addwf	setBuz@time+1,f
 18783  150B  0821               	movf	?___awdiv,w
 18784  150C  01AA               	clrf	setBuz@time
 18785  150D  07AA               	addwf	setBuz@time,f
 18786                           
 18787                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18788  150E  0022               	movlb	2	; select bank2
 18789  150F  1C2D               	btfss	_Buz1^(0+256),0
 18790  1510  0008               	return
 18791                           
 18792                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18793  1511  18AD               	btfsc	_Buz1^(0+256),1
 18794  1512  2D29               	goto	l98
 18795                           
 18796                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18797  1513  14AD               	bsf	_Buz1^(0+256),1
 18798                           
 18799                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18800  1514  01AE               	clrf	(_Buz1^(0+256)+1)
 18801  1515  01AF               	clrf	((_Buz1+1)^(0+256)+1)
 18802                           
 18803                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18804  1516  0020               	movlb	0	; select bank0
 18805  1517  082D               	movf	setBuz@count,w
 18806  1518  00AC               	movwf	??_setBuz
 18807  1519  082C               	movf	??_setBuz,w
 18808  151A  0022               	movlb	2	; select bank2
 18809  151B  00B0               	movwf	(_Buz1^(0+256)+3)
 18810                           
 18811                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18812  151C  0020               	movlb	0	; select bank0
 18813  151D  082B               	movf	setBuz@time+1,w
 18814  151E  0022               	movlb	2	; select bank2
 18815  151F  01B4               	clrf	((_Buz1+1)^(0+256)+6)
 18816  1520  07B4               	addwf	((_Buz1+1)^(0+256)+6),f
 18817  1521  0020               	movlb	0	; select bank0
 18818  1522  082A               	movf	setBuz@time,w
 18819  1523  0022               	movlb	2	; select bank2
 18820  1524  01B3               	clrf	(_Buz1^(0+256)+6)
 18821  1525  07B3               	addwf	(_Buz1^(0+256)+6),f
 18822                           
 18823                           ;Buzzer_B1.c: 30: RB3 = 1;
 18824  1526  0020               	movlb	0	; select bank0
 18825  1527  158D               	bsf	13,3	;volatile
 18826                           
 18827                           ;Buzzer_B1.c: 31: } else {
 18828  1528  0008               	return
 18829  1529                     l98:	
 18830                           
 18831                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18832  1529  19AD               	btfsc	_Buz1^(0+256),3
 18833  152A  2D3D               	goto	l100
 18834                           
 18835                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18836  152B  15AD               	bsf	_Buz1^(0+256),3
 18837                           
 18838                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18839  152C  0020               	movlb	0	; select bank0
 18840  152D  082D               	movf	setBuz@count,w
 18841  152E  00AC               	movwf	??_setBuz
 18842  152F  082C               	movf	??_setBuz,w
 18843  1530  0022               	movlb	2	; select bank2
 18844  1531  00B1               	movwf	(_Buz1^(0+256)+4)
 18845                           
 18846                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18847  1532  0020               	movlb	0	; select bank0
 18848  1533  082B               	movf	setBuz@time+1,w
 18849  1534  0022               	movlb	2	; select bank2
 18850  1535  01B6               	clrf	((_Buz1+1)^(0+256)+8)
 18851  1536  07B6               	addwf	((_Buz1+1)^(0+256)+8),f
 18852  1537  0020               	movlb	0	; select bank0
 18853  1538  082A               	movf	setBuz@time,w
 18854  1539  0022               	movlb	2	; select bank2
 18855  153A  01B5               	clrf	(_Buz1^(0+256)+8)
 18856  153B  07B5               	addwf	(_Buz1^(0+256)+8),f
 18857                           
 18858                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18859  153C  0008               	return
 18860  153D                     l100:	
 18861  153D  1A2D               	btfsc	_Buz1^(0+256),4
 18862  153E  0008               	return
 18863                           
 18864                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18865  153F  162D               	bsf	_Buz1^(0+256),4
 18866                           
 18867                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18868  1540  0020               	movlb	0	; select bank0
 18869  1541  082D               	movf	setBuz@count,w
 18870  1542  00AC               	movwf	??_setBuz
 18871  1543  082C               	movf	??_setBuz,w
 18872  1544  0022               	movlb	2	; select bank2
 18873  1545  00B2               	movwf	(_Buz1^(0+256)+5)
 18874                           
 18875                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18876  1546  0020               	movlb	0	; select bank0
 18877  1547  082B               	movf	setBuz@time+1,w
 18878  1548  0022               	movlb	2	; select bank2
 18879  1549  01B8               	clrf	((_Buz1+1)^(0+256)+10)
 18880  154A  07B8               	addwf	((_Buz1+1)^(0+256)+10),f
 18881  154B  0020               	movlb	0	; select bank0
 18882  154C  082A               	movf	setBuz@time,w
 18883  154D  0022               	movlb	2	; select bank2
 18884  154E  01B7               	clrf	(_Buz1^(0+256)+10)
 18885  154F  07B7               	addwf	(_Buz1^(0+256)+10),f
 18886  1550  0008               	return
 18887  1551                     __end_of_setBuz:	
 18888                           
 18889                           	psect	text128
 18890  14A4                     __ptext128:	
 18891 ;; *************** function ___awdiv *****************
 18892 ;; Defined at:
 18893 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18894 ;; Parameters:    Size  Location     Type
 18895 ;;  divisor         2    1[BANK0 ] int 
 18896 ;;  dividend        2    3[BANK0 ] int 
 18897 ;; Auto vars:     Size  Location     Type
 18898 ;;  quotient        2    8[BANK0 ] int 
 18899 ;;  sign            1    7[BANK0 ] unsigned char 
 18900 ;;  counter         1    6[BANK0 ] unsigned char 
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  2    1[BANK0 ] int 
 18903 ;; Registers used:
 18904 ;;		wreg, status,2, status,0
 18905 ;; Tracked objects:
 18906 ;;		On entry : 0/0
 18907 ;;		On exit  : 0/0
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18910 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18911 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18914 ;;Total ram usage:        9 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:    5
 18917 ;; This function calls:
 18918 ;;		Nothing
 18919 ;; This function is called by:
 18920 ;;		_setBuz
 18921 ;; This function uses a non-reentrant model
 18922 ;;
 18923                           
 18924                           
 18925                           ;psect for function ___awdiv
 18926  14A4                     ___awdiv:	
 18927                           
 18928                           ;incstack = 0
 18929                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18930  14A4  0020               	movlb	0	; select bank0
 18931  14A5  01A7               	clrf	___awdiv@sign
 18932  14A6  1FA2               	btfss	___awdiv@divisor+1,7
 18933  14A7  2CAF               	goto	l9069
 18934  14A8  09A1               	comf	___awdiv@divisor,f
 18935  14A9  09A2               	comf	___awdiv@divisor+1,f
 18936  14AA  0AA1               	incf	___awdiv@divisor,f
 18937  14AB  1903               	skipnz
 18938  14AC  0AA2               	incf	___awdiv@divisor+1,f
 18939  14AD  01A7               	clrf	___awdiv@sign
 18940  14AE  0AA7               	incf	___awdiv@sign,f
 18941  14AF                     l9069:	
 18942  14AF  1FA4               	btfss	___awdiv@dividend+1,7
 18943  14B0  2CBA               	goto	l9075
 18944  14B1  09A3               	comf	___awdiv@dividend,f
 18945  14B2  09A4               	comf	___awdiv@dividend+1,f
 18946  14B3  0AA3               	incf	___awdiv@dividend,f
 18947  14B4  1903               	skipnz
 18948  14B5  0AA4               	incf	___awdiv@dividend+1,f
 18949  14B6  3001               	movlw	1
 18950  14B7  00A5               	movwf	??___awdiv
 18951  14B8  0825               	movf	??___awdiv,w
 18952  14B9  06A7               	xorwf	___awdiv@sign,f
 18953  14BA                     l9075:	
 18954  14BA  01A8               	clrf	___awdiv@quotient
 18955  14BB  01A9               	clrf	___awdiv@quotient+1
 18956  14BC  0822               	movf	___awdiv@divisor+1,w
 18957  14BD  0421               	iorwf	___awdiv@divisor,w
 18958  14BE  1903               	skipnz
 18959  14BF  2CE9               	goto	l9097
 18960  14C0  01A6               	clrf	___awdiv@counter
 18961  14C1  0AA6               	incf	___awdiv@counter,f
 18962  14C2                     l9085:	
 18963  14C2  1BA2               	btfsc	___awdiv@divisor+1,7
 18964  14C3  2CCE               	goto	l9087
 18965  14C4  3001               	movlw	1
 18966  14C5                     u9945:	
 18967  14C5  35A1               	lslf	___awdiv@divisor,f
 18968  14C6  0DA2               	rlf	___awdiv@divisor+1,f
 18969  14C7  0B89               	decfsz	9,f
 18970  14C8  2CC5               	goto	u9945
 18971  14C9  3001               	movlw	1
 18972  14CA  00A5               	movwf	??___awdiv
 18973  14CB  0825               	movf	??___awdiv,w
 18974  14CC  07A6               	addwf	___awdiv@counter,f
 18975  14CD  2CC2               	goto	l9085
 18976  14CE                     l9087:	
 18977  14CE  3001               	movlw	1
 18978  14CF                     u9965:	
 18979  14CF  35A8               	lslf	___awdiv@quotient,f
 18980  14D0  0DA9               	rlf	___awdiv@quotient+1,f
 18981  14D1  0B89               	decfsz	9,f
 18982  14D2  2CCF               	goto	u9965
 18983  14D3  0822               	movf	___awdiv@divisor+1,w
 18984  14D4  0224               	subwf	___awdiv@dividend+1,w
 18985  14D5  1D03               	skipz
 18986  14D6  2CD9               	goto	u9975
 18987  14D7  0821               	movf	___awdiv@divisor,w
 18988  14D8  0223               	subwf	___awdiv@dividend,w
 18989  14D9                     u9975:	
 18990  14D9  1C03               	skipc
 18991  14DA  2CE0               	goto	l9093
 18992  14DB  0821               	movf	___awdiv@divisor,w
 18993  14DC  02A3               	subwf	___awdiv@dividend,f
 18994  14DD  0822               	movf	___awdiv@divisor+1,w
 18995  14DE  3BA4               	subwfb	___awdiv@dividend+1,f
 18996  14DF  1428               	bsf	___awdiv@quotient,0
 18997  14E0                     l9093:	
 18998  14E0  3001               	movlw	1
 18999  14E1                     u9985:	
 19000  14E1  36A2               	lsrf	___awdiv@divisor+1,f
 19001  14E2  0CA1               	rrf	___awdiv@divisor,f
 19002  14E3  0B89               	decfsz	9,f
 19003  14E4  2CE1               	goto	u9985
 19004  14E5  3001               	movlw	1
 19005  14E6  02A6               	subwf	___awdiv@counter,f
 19006  14E7  1D03               	btfss	3,2
 19007  14E8  2CCE               	goto	l9087
 19008  14E9                     l9097:	
 19009  14E9  0827               	movf	___awdiv@sign,w
 19010  14EA  1903               	btfsc	3,2
 19011  14EB  2CF1               	goto	l9101
 19012  14EC  09A8               	comf	___awdiv@quotient,f
 19013  14ED  09A9               	comf	___awdiv@quotient+1,f
 19014  14EE  0AA8               	incf	___awdiv@quotient,f
 19015  14EF  1903               	skipnz
 19016  14F0  0AA9               	incf	___awdiv@quotient+1,f
 19017  14F1                     l9101:	
 19018  14F1  0829               	movf	___awdiv@quotient+1,w
 19019  14F2  01A2               	clrf	?___awdiv+1
 19020  14F3  07A2               	addwf	?___awdiv+1,f
 19021  14F4  0828               	movf	___awdiv@quotient,w
 19022  14F5  01A1               	clrf	?___awdiv
 19023  14F6  07A1               	addwf	?___awdiv,f
 19024  14F7  0008               	return
 19025  14F8                     __end_of___awdiv:	
 19026                           
 19027                           	psect	text129
 19028  112E                     __ptext129:	
 19029 ;; *************** function _setDimmerLights_SwOff *****************
 19030 ;; Defined at:
 19031 ;;		line 694 in file "../src/Dimmer_B1.c"
 19032 ;; Parameters:    Size  Location     Type
 19033 ;;  sw              1    wreg     unsigned char 
 19034 ;; Auto vars:     Size  Location     Type
 19035 ;;  sw              1    3[BANK0 ] unsigned char 
 19036 ;; Return value:  Size  Location     Type
 19037 ;;		None               void
 19038 ;; Registers used:
 19039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19040 ;; Tracked objects:
 19041 ;;		On entry : 0/0
 19042 ;;		On exit  : 0/0
 19043 ;;		Unchanged: 0/0
 19044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19048 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19049 ;;Total ram usage:        1 bytes
 19050 ;; Hardware stack levels used:    1
 19051 ;; Hardware stack levels required when called:    6
 19052 ;; This function calls:
 19053 ;;		_DimmerLights_SelectPointer
 19054 ;; This function is called by:
 19055 ;;		_DlyOff_Main
 19056 ;;		_setControl_Lights_Table
 19057 ;;		_setRFSW_Control
 19058 ;;		_setRFSW_AdjControl
 19059 ;;		_setSw_Main
 19060 ;;		_Exception_Main
 19061 ;; This function uses a non-reentrant model
 19062 ;;
 19063                           
 19064                           
 19065                           ;psect for function _setDimmerLights_SwOff
 19066  112E                     _setDimmerLights_SwOff:	
 19067                           
 19068                           ;incstack = 0
 19069                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19070                           ;setDimmerLights_SwOff@sw stored from wreg
 19071  112E  0020               	movlb	0	; select bank0
 19072  112F  00A3               	movwf	setDimmerLights_SwOff@sw
 19073                           
 19074                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 19075  1130  0823               	movf	setDimmerLights_SwOff@sw,w
 19076  1131  319C  2400  3191   	fcall	_DimmerLights_SelectPointer
 19077                           
 19078                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 19079  1134  0021               	movlb	1	; select bank1
 19080  1135  084F               	movf	_DimmerLights^(0+128),w
 19081  1136  0086               	movwf	6
 19082  1137  3001               	movlw	1	; select bank2/3
 19083  1138  0087               	movwf	7
 19084  1139  1C01               	btfss	1,0
 19085  113A  0008               	return
 19086                           
 19087                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 19088  113B  084F               	movf	_DimmerLights^(0+128),w
 19089  113C  0086               	movwf	6
 19090  113D  3001               	movlw	1	; select bank2/3
 19091  113E  0087               	movwf	7
 19092  113F  1001               	bcf	1,0
 19093                           
 19094                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 19095  1140  0A4F               	incf	_DimmerLights^(0+128),w
 19096  1141  0086               	movwf	6
 19097  1142  3001               	movlw	1	; select bank2/3
 19098  1143  0087               	movwf	7
 19099  1144  1C01               	btfss	1,0
 19100  1145  295C               	goto	l6667
 19101                           
 19102                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 19103  1146  084F               	movf	_DimmerLights^(0+128),w
 19104  1147  0086               	movwf	6
 19105  1148  3001               	movlw	1	; select bank2/3
 19106  1149  0087               	movwf	7
 19107  114A  1D81               	btfss	1,3
 19108  114B  0008               	return
 19109                           
 19110                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 19111  114C  084F               	movf	_DimmerLights^(0+128),w
 19112  114D  0086               	movwf	6
 19113  114E  3001               	movlw	1	; select bank2/3
 19114  114F  0087               	movwf	7
 19115  1150  1181               	bcf	1,3
 19116                           
 19117                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 19118  1151  084F               	movf	_DimmerLights^(0+128),w
 19119  1152  0086               	movwf	6
 19120  1153  3001               	movlw	1	; select bank2/3
 19121  1154  0087               	movwf	7
 19122  1155  1601               	bsf	1,4
 19123                           
 19124                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 19125  1156  084F               	movf	_DimmerLights^(0+128),w
 19126  1157  0086               	movwf	6
 19127  1158  3001               	movlw	1	; select bank2/3
 19128  1159  0087               	movwf	7
 19129  115A  1281               	bcf	1,5
 19130                           
 19131                           ;Dimmer_B1.c: 705: }
 19132                           ;Dimmer_B1.c: 706: } else {
 19133  115B  0008               	return
 19134  115C                     l6667:	
 19135                           
 19136                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 19137  115C  084F               	movf	_DimmerLights^(0+128),w
 19138  115D  0086               	movwf	6
 19139  115E  3001               	movlw	1	; select bank2/3
 19140  115F  0087               	movwf	7
 19141  1160  1481               	bsf	1,1
 19142                           
 19143                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 19144  1161  084F               	movf	_DimmerLights^(0+128),w
 19145  1162  0086               	movwf	6
 19146  1163  3001               	movlw	1	; select bank2/3
 19147  1164  0087               	movwf	7
 19148  1165  1101               	bcf	1,2
 19149  1166  0008               	return
 19150  1167                     __end_of_setDimmerLights_SwOff:	
 19151                           
 19152                           	psect	text130
 19153  1A5D                     __ptext130:	
 19154 ;; *************** function _getDimmerLights_Status *****************
 19155 ;; Defined at:
 19156 ;;		line 1006 in file "../src/Dimmer_B1.c"
 19157 ;; Parameters:    Size  Location     Type
 19158 ;;  lights          1    wreg     unsigned char 
 19159 ;; Auto vars:     Size  Location     Type
 19160 ;;  lights          1    3[BANK0 ] unsigned char 
 19161 ;;  status          1    4[BANK0 ] unsigned char 
 19162 ;; Return value:  Size  Location     Type
 19163 ;;                  1    wreg      unsigned char 
 19164 ;; Registers used:
 19165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19166 ;; Tracked objects:
 19167 ;;		On entry : 0/0
 19168 ;;		On exit  : 0/0
 19169 ;;		Unchanged: 0/0
 19170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19172 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19175 ;;Total ram usage:        2 bytes
 19176 ;; Hardware stack levels used:    1
 19177 ;; Hardware stack levels required when called:    6
 19178 ;; This function calls:
 19179 ;;		_DimmerLights_SelectPointer
 19180 ;; This function is called by:
 19181 ;;		_DlyOff_Main
 19182 ;;		_setControl_Lights_Table
 19183 ;;		_setRFSW_Control
 19184 ;;		_setRFSW_AdjControl
 19185 ;;		_Exception_Main
 19186 ;; This function uses a non-reentrant model
 19187 ;;
 19188                           
 19189                           
 19190                           ;psect for function _getDimmerLights_Status
 19191  1A5D                     _getDimmerLights_Status:	
 19192                           
 19193                           ;incstack = 0
 19194                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19195                           ;getDimmerLights_Status@lights stored from wreg
 19196  1A5D  0020               	movlb	0	; select bank0
 19197  1A5E  00A3               	movwf	getDimmerLights_Status@lights
 19198                           
 19199                           ;Dimmer_B1.c: 1007: DimmerLights_SelectPointer(lights);
 19200  1A5F  0823               	movf	getDimmerLights_Status@lights,w
 19201  1A60  319C  2400         	fcall	_DimmerLights_SelectPointer
 19202                           
 19203                           ;Dimmer_B1.c: 1008: char status = DimmerLights->Status == 1 ? 1 : 0;
 19204  1A62  0021               	movlb	1	; select bank1
 19205  1A63  0A4F               	incf	_DimmerLights^(0+128),w
 19206  1A64  0086               	movwf	6
 19207  1A65  3001               	movlw	1	; select bank2/3
 19208  1A66  0087               	movwf	7
 19209  1A67  3000               	movlw	0
 19210  1A68  1801               	btfsc	1,0
 19211  1A69  3001               	movlw	1
 19212  1A6A  0020               	movlb	0	; select bank0
 19213  1A6B  00A4               	movwf	getDimmerLights_Status@status
 19214                           
 19215                           ;Dimmer_B1.c: 1009: return status;
 19216  1A6C  0824               	movf	getDimmerLights_Status@status,w
 19217  1A6D  0008               	return
 19218  1A6E                     __end_of_getDimmerLights_Status:	
 19219                           
 19220                           	psect	text131
 19221  1C00                     __ptext131:	
 19222 ;; *************** function _DimmerLights_SelectPointer *****************
 19223 ;; Defined at:
 19224 ;;		line 576 in file "../src/Dimmer_B1.c"
 19225 ;; Parameters:    Size  Location     Type
 19226 ;;  lights          1    wreg     unsigned char 
 19227 ;; Auto vars:     Size  Location     Type
 19228 ;;  lights          1    2[BANK0 ] unsigned char 
 19229 ;; Return value:  Size  Location     Type
 19230 ;;		None               void
 19231 ;; Registers used:
 19232 ;;		wreg
 19233 ;; Tracked objects:
 19234 ;;		On entry : 0/0
 19235 ;;		On exit  : 0/0
 19236 ;;		Unchanged: 0/0
 19237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19242 ;;Total ram usage:        2 bytes
 19243 ;; Hardware stack levels used:    1
 19244 ;; Hardware stack levels required when called:    5
 19245 ;; This function calls:
 19246 ;;		Nothing
 19247 ;; This function is called by:
 19248 ;;		_setDimmerLights_SwOn
 19249 ;;		_setDimmerLights_SwOff
 19250 ;;		_setDimmerLights_DimmingOn
 19251 ;;		_setDimmerLights_Main
 19252 ;;		_getDimmerLights_Status
 19253 ;;		_setDimmerLights_DimmingRun
 19254 ;;		_setDimmerLights_Status
 19255 ;; This function uses a non-reentrant model
 19256 ;;
 19257                           
 19258                           
 19259                           ;psect for function _DimmerLights_SelectPointer
 19260  1C00                     _DimmerLights_SelectPointer:	
 19261                           
 19262                           ;incstack = 0
 19263                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19264                           ;DimmerLights_SelectPointer@lights stored from wreg
 19265  1C00  0020               	movlb	0	; select bank0
 19266  1C01  00A2               	movwf	DimmerLights_SelectPointer@lights
 19267                           
 19268                           ;Dimmer_B1.c: 578: if (lights == 1) {
 19269  1C02  0822               	movf	DimmerLights_SelectPointer@lights,w
 19270  1C03  3A01               	xorlw	1
 19271  1C04  1D03               	skipz
 19272  1C05  2C0C               	goto	l6339
 19273                           
 19274                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 19275  1C06  3068               	movlw	_DimmerLights1& (0+255)
 19276  1C07  00A1               	movwf	??_DimmerLights_SelectPointer
 19277  1C08  0821               	movf	??_DimmerLights_SelectPointer,w
 19278  1C09  0021               	movlb	1	; select bank1
 19279  1C0A  00CF               	movwf	_DimmerLights^(0+128)
 19280                           
 19281                           ;Dimmer_B1.c: 580: }
 19282  1C0B  0008               	return
 19283  1C0C                     l6339:	
 19284                           
 19285                           ;Dimmer_B1.c: 583: else if (lights == 2) {
 19286  1C0C  0020               	movlb	0	; select bank0
 19287  1C0D  0822               	movf	DimmerLights_SelectPointer@lights,w
 19288  1C0E  3A02               	xorlw	2
 19289  1C0F  1D03               	skipz
 19290  1C10  0008               	return
 19291                           
 19292                           ;Dimmer_B1.c: 584: DimmerLights = &DimmerLights2;
 19293  1C11  30D0               	movlw	_DimmerLights2& (0+255)
 19294  1C12  00A1               	movwf	??_DimmerLights_SelectPointer
 19295  1C13  0821               	movf	??_DimmerLights_SelectPointer,w
 19296  1C14  0021               	movlb	1	; select bank1
 19297  1C15  00CF               	movwf	_DimmerLights^(0+128)
 19298  1C16  0008               	return
 19299  1C17                     __end_of_DimmerLights_SelectPointer:	
 19300                           
 19301                           	psect	text132
 19302  196F                     __ptext132:	
 19303 ;; *************** function _DelayOff_Initialization *****************
 19304 ;; Defined at:
 19305 ;;		line 26 in file "../src/DelayOff_B1.c"
 19306 ;; Parameters:    Size  Location     Type
 19307 ;;		None
 19308 ;; Auto vars:     Size  Location     Type
 19309 ;;		None
 19310 ;; Return value:  Size  Location     Type
 19311 ;;		None               void
 19312 ;; Registers used:
 19313 ;;		wreg, status,2, status,0, pclath, cstack
 19314 ;; Tracked objects:
 19315 ;;		On entry : 0/0
 19316 ;;		On exit  : 0/0
 19317 ;;		Unchanged: 0/0
 19318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19323 ;;Total ram usage:        0 bytes
 19324 ;; Hardware stack levels used:    1
 19325 ;; Hardware stack levels required when called:    7
 19326 ;; This function calls:
 19327 ;;		_DlyOff_Initialization
 19328 ;; This function is called by:
 19329 ;;		_main
 19330 ;; This function uses a non-reentrant model
 19331 ;;
 19332                           
 19333                           
 19334                           ;psect for function _DelayOff_Initialization
 19335  196F                     _DelayOff_Initialization:	
 19336                           
 19337                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19338                           
 19339                           ;incstack = 0
 19340                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19341  196F  3001               	movlw	1
 19342  1970  3199  2156  3199   	fcall	_DlyOff_Initialization
 19343                           
 19344                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 19345  1973  3002               	movlw	2
 19346  1974  3199  2156         	fcall	_DlyOff_Initialization
 19347  1976  0008               	return
 19348  1977                     __end_of_DelayOff_Initialization:	
 19349                           
 19350                           	psect	text133
 19351  1956                     __ptext133:	
 19352 ;; *************** function _DlyOff_Initialization *****************
 19353 ;; Defined at:
 19354 ;;		line 56 in file "../src/DelayOff_B1.c"
 19355 ;; Parameters:    Size  Location     Type
 19356 ;;  sw              1    wreg     unsigned char 
 19357 ;; Auto vars:     Size  Location     Type
 19358 ;;  sw              1    3[BANK0 ] unsigned char 
 19359 ;; Return value:  Size  Location     Type
 19360 ;;		None               void
 19361 ;; Registers used:
 19362 ;;		wreg, status,2, status,0, pclath, cstack
 19363 ;; Tracked objects:
 19364 ;;		On entry : 0/0
 19365 ;;		On exit  : 0/0
 19366 ;;		Unchanged: 0/0
 19367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19371 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19372 ;;Total ram usage:        1 bytes
 19373 ;; Hardware stack levels used:    1
 19374 ;; Hardware stack levels required when called:    6
 19375 ;; This function calls:
 19376 ;;		_DelayOffPointSelect
 19377 ;; This function is called by:
 19378 ;;		_DelayOff_Initialization
 19379 ;; This function uses a non-reentrant model
 19380 ;;
 19381                           
 19382                           
 19383                           ;psect for function _DlyOff_Initialization
 19384  1956                     _DlyOff_Initialization:	
 19385                           
 19386                           ;incstack = 0
 19387                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19388                           ;DlyOff_Initialization@sw stored from wreg
 19389  1956  0020               	movlb	0	; select bank0
 19390  1957  00A3               	movwf	DlyOff_Initialization@sw
 19391                           
 19392                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19393  1958  0823               	movf	DlyOff_Initialization@sw,w
 19394  1959  319B  23E9         	fcall	_DelayOffPointSelect
 19395  195B  0008               	return
 19396  195C                     __end_of_DlyOff_Initialization:	
 19397                           
 19398                           	psect	text134
 19399  1BE9                     __ptext134:	
 19400 ;; *************** function _DelayOffPointSelect *****************
 19401 ;; Defined at:
 19402 ;;		line 7 in file "../src/DelayOff_B1.c"
 19403 ;; Parameters:    Size  Location     Type
 19404 ;;  sw              1    wreg     unsigned char 
 19405 ;; Auto vars:     Size  Location     Type
 19406 ;;  sw              1    2[BANK0 ] unsigned char 
 19407 ;; Return value:  Size  Location     Type
 19408 ;;		None               void
 19409 ;; Registers used:
 19410 ;;		wreg
 19411 ;; Tracked objects:
 19412 ;;		On entry : 0/0
 19413 ;;		On exit  : 0/0
 19414 ;;		Unchanged: 0/0
 19415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19419 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19420 ;;Total ram usage:        2 bytes
 19421 ;; Hardware stack levels used:    1
 19422 ;; Hardware stack levels required when called:    5
 19423 ;; This function calls:
 19424 ;;		Nothing
 19425 ;; This function is called by:
 19426 ;;		_DlyOff_Initialization
 19427 ;;		_DlyOff_Main
 19428 ;;		_setDelayOff_GO
 19429 ;;		_getDelayOff_GO
 19430 ;; This function uses a non-reentrant model
 19431 ;;
 19432                           
 19433                           
 19434                           ;psect for function _DelayOffPointSelect
 19435  1BE9                     _DelayOffPointSelect:	
 19436                           
 19437                           ;incstack = 0
 19438                           ; Regs used in _DelayOffPointSelect: [wreg]
 19439                           ;DelayOffPointSelect@sw stored from wreg
 19440  1BE9  0020               	movlb	0	; select bank0
 19441  1BEA  00A2               	movwf	DelayOffPointSelect@sw
 19442                           
 19443                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19444  1BEB  0822               	movf	DelayOffPointSelect@sw,w
 19445  1BEC  3A01               	xorlw	1
 19446  1BED  1D03               	skipz
 19447  1BEE  2BF5               	goto	l6329
 19448                           
 19449                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19450  1BEF  30D8               	movlw	_DlySw1& (0+255)
 19451  1BF0  00A1               	movwf	??_DelayOffPointSelect
 19452  1BF1  0821               	movf	??_DelayOffPointSelect,w
 19453  1BF2  0021               	movlb	1	; select bank1
 19454  1BF3  00CD               	movwf	_DelayOff^(0+128)
 19455                           
 19456                           ;DelayOff_B1.c: 11: }
 19457  1BF4  0008               	return
 19458  1BF5                     l6329:	
 19459                           
 19460                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19461  1BF5  0020               	movlb	0	; select bank0
 19462  1BF6  0822               	movf	DelayOffPointSelect@sw,w
 19463  1BF7  3A02               	xorlw	2
 19464  1BF8  1D03               	skipz
 19465  1BF9  0008               	return
 19466                           
 19467                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19468  1BFA  30DD               	movlw	_DlySw2& (0+255)
 19469  1BFB  00A1               	movwf	??_DelayOffPointSelect
 19470  1BFC  0821               	movf	??_DelayOffPointSelect,w
 19471  1BFD  0021               	movlb	1	; select bank1
 19472  1BFE  00CD               	movwf	_DelayOff^(0+128)
 19473  1BFF  0008               	return
 19474  1C00                     __end_of_DelayOffPointSelect:	
 19475                           
 19476                           	psect	text135
 19477  1364                     __ptext135:	
 19478 ;; *************** function _Buzzer_Main *****************
 19479 ;; Defined at:
 19480 ;;		line 46 in file "../src/Buzzer_B1.c"
 19481 ;; Parameters:    Size  Location     Type
 19482 ;;		None
 19483 ;; Auto vars:     Size  Location     Type
 19484 ;;		None
 19485 ;; Return value:  Size  Location     Type
 19486 ;;		None               void
 19487 ;; Registers used:
 19488 ;;		wreg, status,2, status,0
 19489 ;; Tracked objects:
 19490 ;;		On entry : 0/0
 19491 ;;		On exit  : 0/0
 19492 ;;		Unchanged: 0/0
 19493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19498 ;;Total ram usage:        1 bytes
 19499 ;; Hardware stack levels used:    1
 19500 ;; Hardware stack levels required when called:    5
 19501 ;; This function calls:
 19502 ;;		Nothing
 19503 ;; This function is called by:
 19504 ;;		_main
 19505 ;; This function uses a non-reentrant model
 19506 ;;
 19507                           
 19508                           
 19509                           ;psect for function _Buzzer_Main
 19510  1364                     _Buzzer_Main:	
 19511                           
 19512                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19513                           
 19514                           ;incstack = 0
 19515                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19516  1364  0022               	movlb	2	; select bank2
 19517  1365  1CAD               	btfss	_Buz1^(0+256),1
 19518  1366  0008               	return
 19519                           
 19520                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19521  1367  3001               	movlw	1
 19522  1368  07AE               	addwf	(_Buz1^(0+256)+1),f
 19523  1369  3000               	movlw	0
 19524  136A  3DAF               	addwfc	((_Buz1+1)^(0+256)+1),f
 19525                           
 19526                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19527  136B  0834               	movf	((_Buz1+1)^(0+256)+6),w
 19528  136C  022F               	subwf	((_Buz1+1)^(0+256)+1),w
 19529  136D  1D03               	skipz
 19530  136E  2B71               	goto	u8865
 19531  136F  0833               	movf	(_Buz1^(0+256)+6),w
 19532  1370  022E               	subwf	(_Buz1^(0+256)+1),w
 19533  1371                     u8865:	
 19534  1371  1C03               	skipc
 19535  1372  0008               	return
 19536                           
 19537                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19538  1373  01AE               	clrf	(_Buz1^(0+256)+1)
 19539  1374  01AF               	clrf	((_Buz1+1)^(0+256)+1)
 19540                           
 19541                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19542  1375  12AD               	bcf	_Buz1^(0+256),5
 19543  1376  0020               	movlb	0	; select bank0
 19544  1377  1D8D               	btfss	13,3	;volatile
 19545  1378  2B7B               	goto	l8397
 19546  1379  0022               	movlb	2	; select bank2
 19547  137A  16AD               	bsf	_Buz1^(0+256),5
 19548  137B                     l8397:	
 19549                           
 19550                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19551  137B  0022               	movlb	2	; select bank2
 19552  137C  1AAD               	btfsc	_Buz1^(0+256),5
 19553  137D  2BA7               	goto	l108
 19554                           
 19555                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19556  137E  08B0               	movf	(_Buz1^(0+256)+3),f
 19557  137F  1D03               	skipz
 19558  1380  2BA3               	goto	l109
 19559                           
 19560                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19561  1381  1DAD               	btfss	_Buz1^(0+256),3
 19562  1382  2B91               	goto	l110
 19563                           
 19564                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19565  1383  11AD               	bcf	_Buz1^(0+256),3
 19566                           
 19567                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19568  1384  0831               	movf	(_Buz1^(0+256)+4),w
 19569  1385  0020               	movlb	0	; select bank0
 19570  1386  00A1               	movwf	??_Buzzer_Main
 19571  1387  0821               	movf	??_Buzzer_Main,w
 19572  1388  0022               	movlb	2	; select bank2
 19573  1389  00B0               	movwf	(_Buz1^(0+256)+3)
 19574                           
 19575                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19576  138A  0836               	movf	((_Buz1+1)^(0+256)+8),w
 19577  138B  01B4               	clrf	((_Buz1+1)^(0+256)+6)
 19578  138C  07B4               	addwf	((_Buz1+1)^(0+256)+6),f
 19579  138D  0835               	movf	(_Buz1^(0+256)+8),w
 19580  138E  01B3               	clrf	(_Buz1^(0+256)+6)
 19581  138F  07B3               	addwf	(_Buz1^(0+256)+6),f
 19582                           
 19583                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19584  1390  0008               	return
 19585  1391                     l110:	
 19586  1391  1E2D               	btfss	_Buz1^(0+256),4
 19587  1392  2BA1               	goto	l112
 19588                           
 19589                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19590  1393  122D               	bcf	_Buz1^(0+256),4
 19591                           
 19592                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19593  1394  0832               	movf	(_Buz1^(0+256)+5),w
 19594  1395  0020               	movlb	0	; select bank0
 19595  1396  00A1               	movwf	??_Buzzer_Main
 19596  1397  0821               	movf	??_Buzzer_Main,w
 19597  1398  0022               	movlb	2	; select bank2
 19598  1399  00B0               	movwf	(_Buz1^(0+256)+3)
 19599                           
 19600                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19601  139A  0838               	movf	((_Buz1+1)^(0+256)+10),w
 19602  139B  01B4               	clrf	((_Buz1+1)^(0+256)+6)
 19603  139C  07B4               	addwf	((_Buz1+1)^(0+256)+6),f
 19604  139D  0837               	movf	(_Buz1^(0+256)+10),w
 19605  139E  01B3               	clrf	(_Buz1^(0+256)+6)
 19606  139F  07B3               	addwf	(_Buz1^(0+256)+6),f
 19607                           
 19608                           ;Buzzer_B1.c: 62: } else {
 19609  13A0  0008               	return
 19610  13A1                     l112:	
 19611                           
 19612                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19613  13A1  10AD               	bcf	_Buz1^(0+256),1
 19614                           
 19615                           ;Buzzer_B1.c: 64: }
 19616                           ;Buzzer_B1.c: 65: } else {
 19617  13A2  0008               	return
 19618  13A3                     l109:	
 19619                           
 19620                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19621  13A3  16AD               	bsf	_Buz1^(0+256),5
 19622                           
 19623                           ;Buzzer_B1.c: 68: RB3 = 1;
 19624  13A4  0020               	movlb	0	; select bank0
 19625  13A5  158D               	bsf	13,3	;volatile
 19626                           
 19627                           ;Buzzer_B1.c: 69: }
 19628                           ;Buzzer_B1.c: 70: } else {
 19629  13A6  0008               	return
 19630  13A7                     l108:	
 19631                           
 19632                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19633  13A7  12AD               	bcf	_Buz1^(0+256),5
 19634                           
 19635                           ;Buzzer_B1.c: 73: RB3 = 0;
 19636  13A8  0020               	movlb	0	; select bank0
 19637  13A9  118D               	bcf	13,3	;volatile
 19638                           
 19639                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19640  13AA  3001               	movlw	1
 19641  13AB  0022               	movlb	2	; select bank2
 19642  13AC  02B0               	subwf	(_Buz1^(0+256)+3),f
 19643  13AD  0008               	return
 19644  13AE                     __end_of_Buzzer_Main:	
 19645                           
 19646                           	psect	text136
 19647  192B                     __ptext136:	
 19648 ;; *************** function _Buzzer_Initialization *****************
 19649 ;; Defined at:
 19650 ;;		line 11 in file "../src/Buzzer_B1.c"
 19651 ;; Parameters:    Size  Location     Type
 19652 ;;		None
 19653 ;; Auto vars:     Size  Location     Type
 19654 ;;		None
 19655 ;; Return value:  Size  Location     Type
 19656 ;;		None               void
 19657 ;; Registers used:
 19658 ;;		None
 19659 ;; Tracked objects:
 19660 ;;		On entry : 0/0
 19661 ;;		On exit  : 0/0
 19662 ;;		Unchanged: 0/0
 19663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19668 ;;Total ram usage:        0 bytes
 19669 ;; Hardware stack levels used:    1
 19670 ;; Hardware stack levels required when called:    5
 19671 ;; This function calls:
 19672 ;;		Nothing
 19673 ;; This function is called by:
 19674 ;;		_main
 19675 ;; This function uses a non-reentrant model
 19676 ;;
 19677                           
 19678                           
 19679                           ;psect for function _Buzzer_Initialization
 19680  192B                     _Buzzer_Initialization:	
 19681                           
 19682                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19683                           
 19684                           ;incstack = 0
 19685                           ; Regs used in _Buzzer_Initialization: []
 19686  192B  0022               	movlb	2	; select bank2
 19687  192C  142D               	bsf	_Buz1^(0+256),0
 19688  192D  0008               	return
 19689  192E                     __end_of_Buzzer_Initialization:	
 19690                           
 19691                           	psect	intentry
 19692  0004                     __pintentry:	
 19693 ;; *************** function _ISR *****************
 19694 ;; Defined at:
 19695 ;;		line 116 in file "../src/MCU_B1.c"
 19696 ;; Parameters:    Size  Location     Type
 19697 ;;		None
 19698 ;; Auto vars:     Size  Location     Type
 19699 ;;		None
 19700 ;; Return value:  Size  Location     Type
 19701 ;;		None               void
 19702 ;; Registers used:
 19703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19704 ;; Tracked objects:
 19705 ;;		On entry : 0/0
 19706 ;;		On exit  : 0/0
 19707 ;;		Unchanged: 0/0
 19708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19712 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19713 ;;Total ram usage:        1 bytes
 19714 ;; Hardware stack levels used:    1
 19715 ;; Hardware stack levels required when called:    4
 19716 ;; This function calls:
 19717 ;;		_IOC_ISR
 19718 ;;		_TMR1_ISR
 19719 ;; This function is called by:
 19720 ;;		Interrupt level 1
 19721 ;; This function uses a non-reentrant model
 19722 ;;
 19723                           
 19724  0004                     _ISR:	
 19725                           
 19726                           ;incstack = 0
 19727                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19728  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19729  0005  3180               	pagesel	$
 19730  0006  0020               	movlb	0	; select bank0
 19731  0007  087F               	movf	127,w
 19732  0008  00A0               	movwf	??_ISR
 19733                           
 19734                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19735  0009  0021               	movlb	1	; select bank1
 19736  000A  1C11               	btfss	17,0	;volatile
 19737  000B  2813               	goto	i1l1387
 19738  000C  0020               	movlb	0	; select bank0
 19739  000D  1C11               	btfss	17,0	;volatile
 19740  000E  2813               	goto	i1l1387
 19741                           
 19742                           ;MCU_B1.c: 126: TMR1_ISR();
 19743  000F  319E  262B  3180   	fcall	_TMR1_ISR
 19744                           
 19745                           ;MCU_B1.c: 127: }
 19746  0012  281B               	goto	i1l1390
 19747  0013                     i1l1387:	
 19748                           
 19749                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19750  0013  198B               	btfsc	11,3	;volatile
 19751  0014  1C0B               	btfss	11,0	;volatile
 19752  0015  281B               	goto	i1l1390
 19753  0016  0027               	movlb	7	; select bank7
 19754  0017  1D16               	btfss	22,2	;volatile
 19755  0018  281B               	goto	i1l1390
 19756                           
 19757                           ;MCU_B1.c: 139: IOC_ISR();
 19758  0019  3199  21F0         	fcall	_IOC_ISR
 19759  001B                     i1l1390:	
 19760                           ;MCU_B1.c: 140: }
 19761                           ;MCU_B1.c: 148: return;
 19762                           
 19763  001B  0020               	movlb	0	; select bank0
 19764  001C  0820               	movf	??_ISR,w
 19765  001D  00FF               	movwf	127
 19766  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19767  001F  0009               	retfie
 19768  0020                     __end_of_ISR:	
 19769                           
 19770                           	psect	text138
 19771  1E2B                     __ptext138:	
 19772 ;; *************** function _TMR1_ISR *****************
 19773 ;; Defined at:
 19774 ;;		line 236 in file "../src/MCU_B1.c"
 19775 ;; Parameters:    Size  Location     Type
 19776 ;;		None
 19777 ;; Auto vars:     Size  Location     Type
 19778 ;;		None
 19779 ;; Return value:  Size  Location     Type
 19780 ;;		None               void
 19781 ;; Registers used:
 19782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19783 ;; Tracked objects:
 19784 ;;		On entry : 0/0
 19785 ;;		On exit  : 0/0
 19786 ;;		Unchanged: 0/0
 19787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19792 ;;Total ram usage:        0 bytes
 19793 ;; Hardware stack levels used:    1
 19794 ;; Hardware stack levels required when called:    1
 19795 ;; This function calls:
 19796 ;;		_DimmerLights_TMR_1
 19797 ;;		_DimmerLights_TMR_2
 19798 ;; This function is called by:
 19799 ;;		_ISR
 19800 ;; This function uses a non-reentrant model
 19801 ;;
 19802                           
 19803                           
 19804                           ;psect for function _TMR1_ISR
 19805  1E2B                     _TMR1_ISR:	
 19806                           
 19807                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19808                           
 19809                           ;incstack = 0
 19810                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19811  1E2B  30FA               	movlw	250
 19812  1E2C  0020               	movlb	0	; select bank0
 19813  1E2D  0097               	movwf	23	;volatile
 19814                           
 19815                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19816  1E2E  3038               	movlw	56
 19817  1E2F  0096               	movwf	22	;volatile
 19818                           
 19819                           ;MCU_B1.c: 240: TMR1IF = 0;
 19820  1E30  1011               	bcf	17,0	;volatile
 19821                           
 19822                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19823  1E31  3188  2016  319E   	fcall	_DimmerLights_TMR_1
 19824                           
 19825                           ;MCU_B1.c: 262: DimmerLights_TMR_2();
 19826  1E34  3188  207F  319E   	fcall	_DimmerLights_TMR_2
 19827                           
 19828                           ;MCU_B1.c: 271: Timer1.Count++;
 19829  1E37  3001               	movlw	1
 19830  1E38  0021               	movlb	1	; select bank1
 19831  1E39  07C7               	addwf	(_Timer1^(0+128)+1),f
 19832  1E3A  3000               	movlw	0
 19833  1E3B  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 19834                           
 19835                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19836  1E3C  3001               	movlw	1
 19837  1E3D  3EC6               	addlw	_Timer1& (0+255)
 19838  1E3E  0086               	movwf	6
 19839  1E3F  0187               	clrf	7
 19840  1E40  3F40               	moviw [0]fsr1
 19841  1E41  3AC8               	xorlw	200
 19842  1E42  1D03               	skipz
 19843  1E43  2E46               	goto	u896_25
 19844  1E44  3F41               	moviw [1]fsr1
 19845  1E45  3A00               	xorlw	0
 19846  1E46                     u896_25:	
 19847  1E46  1D03               	skipz
 19848  1E47  0008               	return
 19849                           
 19850                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19851  1E48  01C7               	clrf	(_Timer1^(0+128)+1)
 19852  1E49  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 19853                           
 19854                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19855  1E4A  1446               	bsf	_Timer1^(0+128),0
 19856  1E4B  0008               	return
 19857  1E4C                     __end_of_TMR1_ISR:	
 19858                           
 19859                           	psect	text139
 19860  087F                     __ptext139:	
 19861 ;; *************** function _DimmerLights_TMR_2 *****************
 19862 ;; Defined at:
 19863 ;;		line 1492 in file "../src/Dimmer_B1.c"
 19864 ;; Parameters:    Size  Location     Type
 19865 ;;		None
 19866 ;; Auto vars:     Size  Location     Type
 19867 ;;  count           1    1[COMMON] unsigned char 
 19868 ;; Return value:  Size  Location     Type
 19869 ;;		None               void
 19870 ;; Registers used:
 19871 ;;		wreg, status,2, status,0
 19872 ;; Tracked objects:
 19873 ;;		On entry : 0/0
 19874 ;;		On exit  : 0/0
 19875 ;;		Unchanged: 0/0
 19876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19880 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19881 ;;Total ram usage:        2 bytes
 19882 ;; Hardware stack levels used:    1
 19883 ;; This function calls:
 19884 ;;		Nothing
 19885 ;; This function is called by:
 19886 ;;		_TMR1_ISR
 19887 ;; This function uses a non-reentrant model
 19888 ;;
 19889                           
 19890                           
 19891                           ;psect for function _DimmerLights_TMR_2
 19892  087F                     _DimmerLights_TMR_2:	
 19893                           
 19894                           ;Dimmer_B1.c: 1493: char count = 65;
 19895                           
 19896                           ;incstack = 0
 19897                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 19898  087F  3041               	movlw	65
 19899  0880  00F0               	movwf	??_DimmerLights_TMR_2
 19900  0881  0870               	movf	??_DimmerLights_TMR_2,w
 19901  0882  00F1               	movwf	DimmerLights_TMR_2@count
 19902                           
 19903                           ;Dimmer_B1.c: 1505: if (DimmerIntr2.Start == 1) {
 19904  0883  0021               	movlb	1	; select bank1
 19905  0884  1D3A               	btfss	_DimmerIntr2^(0+128),2
 19906  0885  2890               	goto	i1l7911
 19907                           
 19908                           ;Dimmer_B1.c: 1506: DimmerIntr2.Count++;
 19909  0886  3001               	movlw	1
 19910  0887  00F0               	movwf	??_DimmerLights_TMR_2
 19911  0888  0870               	movf	??_DimmerLights_TMR_2,w
 19912  0889  07BC               	addwf	(_DimmerIntr2^(0+128)+2),f
 19913                           
 19914                           ;Dimmer_B1.c: 1507: if (DimmerIntr2.Count >= count) {
 19915  088A  0871               	movf	DimmerLights_TMR_2@count,w
 19916  088B  023C               	subwf	(_DimmerIntr2^(0+128)+2),w
 19917  088C  1C03               	skipc
 19918  088D  2890               	goto	i1l7911
 19919                           
 19920                           ;Dimmer_B1.c: 1508: DimmerIntr2.Count = 0;
 19921  088E  01BC               	clrf	(_DimmerIntr2^(0+128)+2)
 19922                           
 19923                           ;Dimmer_B1.c: 1509: DimmerIntr2.Start = 0;
 19924  088F  113A               	bcf	_DimmerIntr2^(0+128),2
 19925  0890                     i1l7911:	
 19926                           
 19927                           ;Dimmer_B1.c: 1510: }
 19928                           ;Dimmer_B1.c: 1511: }
 19929                           ;Dimmer_B1.c: 1515: if (DimmerIntr2.Count == 5) {
 19930  0890  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19931  0891  3A05               	xorlw	5
 19932  0892  1903               	btfsc	3,2
 19933                           
 19934                           ;Dimmer_B1.c: 1518: if (DimmerIntr2.ControlStatus == 1) {
 19935  0893  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19936  0894  2897               	goto	i1l7917
 19937                           
 19938                           ;Dimmer_B1.c: 1519: RB4 = 1;
 19939  0895  0020               	movlb	0	; select bank0
 19940  0896  160D               	bsf	13,4	;volatile
 19941  0897                     i1l7917:	
 19942                           
 19943                           ;Dimmer_B1.c: 1521: }
 19944                           ;Dimmer_B1.c: 1522: }
 19945                           ;Dimmer_B1.c: 1526: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 19946  0897  0021               	movlb	1	; select bank1
 19947  0898  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19948  0899  0643               	xorwf	(_DimmerIntr2^(0+128)+9),w
 19949  089A  1903               	btfsc	3,2
 19950                           
 19951                           ;Dimmer_B1.c: 1529: if (DimmerIntr2.ControlStatus == 1) {
 19952  089B  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19953  089C  289F               	goto	i1l7923
 19954                           
 19955                           ;Dimmer_B1.c: 1530: RB4 = 0;
 19956  089D  0020               	movlb	0	; select bank0
 19957  089E  120D               	bcf	13,4	;volatile
 19958  089F                     i1l7923:	
 19959                           
 19960                           ;Dimmer_B1.c: 1531: }
 19961                           ;Dimmer_B1.c: 1532: }
 19962                           ;Dimmer_B1.c: 1536: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 19963  089F  0021               	movlb	1	; select bank1
 19964  08A0  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19965  08A1  0644               	xorwf	(_DimmerIntr2^(0+128)+10),w
 19966  08A2  1903               	btfsc	3,2
 19967                           
 19968                           ;Dimmer_B1.c: 1539: if (DimmerIntr2.ControlStatus == 1) {
 19969  08A3  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19970  08A4  28A7               	goto	i1l7929
 19971                           
 19972                           ;Dimmer_B1.c: 1540: RB4 = 1;
 19973  08A5  0020               	movlb	0	; select bank0
 19974  08A6  160D               	bsf	13,4	;volatile
 19975  08A7                     i1l7929:	
 19976                           
 19977                           ;Dimmer_B1.c: 1541: }
 19978                           ;Dimmer_B1.c: 1542: }
 19979                           ;Dimmer_B1.c: 1559: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 19980  08A7  0021               	movlb	1	; select bank1
 19981  08A8  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19982  08A9  0645               	xorwf	(_DimmerIntr2^(0+128)+11),w
 19983  08AA  1903               	btfsc	3,2
 19984                           
 19985                           ;Dimmer_B1.c: 1561: if (DimmerIntr2.ControlStatus == 1) {
 19986  08AB  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19987  08AC  28AF               	goto	i1l992
 19988                           
 19989                           ;Dimmer_B1.c: 1562: RB4 = 0;
 19990  08AD  0020               	movlb	0	; select bank0
 19991  08AE  120D               	bcf	13,4	;volatile
 19992  08AF                     i1l992:	
 19993                           
 19994                           ;Dimmer_B1.c: 1563: }
 19995                           ;Dimmer_B1.c: 1564: }
 19996                           ;Dimmer_B1.c: 1577: if (DimmerIntr2.Tune == 1) {
 19997  08AF  0021               	movlb	1	; select bank1
 19998  08B0  1CBA               	btfss	_DimmerIntr2^(0+128),1
 19999  08B1  0008               	return
 20000                           
 20001                           ;Dimmer_B1.c: 1578: DimmerIntr2.Tune = 0;
 20002  08B2  10BA               	bcf	_DimmerIntr2^(0+128),1
 20003                           
 20004                           ;Dimmer_B1.c: 1579: DimmerIntr2.TuneTime++;
 20005  08B3  3001               	movlw	1
 20006  08B4  00F0               	movwf	??_DimmerLights_TMR_2
 20007  08B5  0870               	movf	??_DimmerLights_TMR_2,w
 20008  08B6  07BD               	addwf	(_DimmerIntr2^(0+128)+3),f
 20009                           
 20010                           ;Dimmer_B1.c: 1580: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 20011  08B7  083E               	movf	(_DimmerIntr2^(0+128)+4),w
 20012  08B8  023D               	subwf	(_DimmerIntr2^(0+128)+3),w
 20013  08B9  1C03               	skipc
 20014  08BA  0008               	return
 20015                           
 20016                           ;Dimmer_B1.c: 1581: DimmerIntr2.TuneTime = 0;
 20017  08BB  01BD               	clrf	(_DimmerIntr2^(0+128)+3)
 20018                           
 20019                           ;Dimmer_B1.c: 1582: if (DimmerIntr2.Dimming_Sw == 1) {
 20020  08BC  1E3A               	btfss	_DimmerIntr2^(0+128),4
 20021  08BD  28D4               	goto	i1l996
 20022                           
 20023                           ;Dimmer_B1.c: 1583: if (DimmerIntr2.Dimming_Status == 0) {
 20024  08BE  1ABA               	btfsc	_DimmerIntr2^(0+128),5
 20025  08BF  28CB               	goto	i1l7951
 20026                           
 20027                           ;Dimmer_B1.c: 1584: if (DimmerIntr2.DimmingValue < ((char)(60*0.65))) {
 20028  08C0  3027               	movlw	39
 20029  08C1  023F               	subwf	(_DimmerIntr2^(0+128)+5),w
 20030  08C2  1803               	skipnc
 20031  08C3  28C9               	goto	i1l998
 20032                           
 20033                           ;Dimmer_B1.c: 1585: DimmerIntr2.DimmingValue++;
 20034  08C4  3001               	movlw	1
 20035  08C5  00F0               	movwf	??_DimmerLights_TMR_2
 20036  08C6  0870               	movf	??_DimmerLights_TMR_2,w
 20037  08C7  07BF               	addwf	(_DimmerIntr2^(0+128)+5),f
 20038                           
 20039                           ;Dimmer_B1.c: 1586: } else {
 20040  08C8  0008               	return
 20041  08C9                     i1l998:	
 20042                           
 20043                           ;Dimmer_B1.c: 1587: DimmerIntr2.Dimming_Status = 1;
 20044  08C9  16BA               	bsf	_DimmerIntr2^(0+128),5
 20045                           
 20046                           ;Dimmer_B1.c: 1588: }
 20047                           ;Dimmer_B1.c: 1589: } else {
 20048  08CA  0008               	return
 20049  08CB                     i1l7951:	
 20050                           
 20051                           ;Dimmer_B1.c: 1590: if (DimmerIntr2.DimmingValue > ((char)(10*0.65))) {
 20052  08CB  3007               	movlw	7
 20053  08CC  023F               	subwf	(_DimmerIntr2^(0+128)+5),w
 20054  08CD  1C03               	skipc
 20055  08CE  28D2               	goto	i1l1001
 20056                           
 20057                           ;Dimmer_B1.c: 1591: DimmerIntr2.DimmingValue--;
 20058  08CF  3001               	movlw	1
 20059  08D0  02BF               	subwf	(_DimmerIntr2^(0+128)+5),f
 20060                           
 20061                           ;Dimmer_B1.c: 1592: } else {
 20062  08D1  0008               	return
 20063  08D2                     i1l1001:	
 20064                           
 20065                           ;Dimmer_B1.c: 1593: DimmerIntr2.Dimming_Status = 0;
 20066  08D2  12BA               	bcf	_DimmerIntr2^(0+128),5
 20067                           
 20068                           ;Dimmer_B1.c: 1594: }
 20069                           ;Dimmer_B1.c: 1595: }
 20070                           ;Dimmer_B1.c: 1596: } else if (DimmerIntr2.Dimming_RF == 1) {
 20071  08D3  0008               	return
 20072  08D4                     i1l996:	
 20073  08D4  1F3A               	btfss	_DimmerIntr2^(0+128),6
 20074  08D5  0008               	return
 20075                           
 20076                           ;Dimmer_B1.c: 1597: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 20077  08D6  0840               	movf	(_DimmerIntr2^(0+128)+6),w
 20078  08D7  023F               	subwf	(_DimmerIntr2^(0+128)+5),w
 20079  08D8  1803               	skipnc
 20080  08D9  28DF               	goto	i1l7959
 20081                           
 20082                           ;Dimmer_B1.c: 1598: DimmerIntr2.DimmingValue++;
 20083  08DA  3001               	movlw	1
 20084  08DB  00F0               	movwf	??_DimmerLights_TMR_2
 20085  08DC  0870               	movf	??_DimmerLights_TMR_2,w
 20086  08DD  07BF               	addwf	(_DimmerIntr2^(0+128)+5),f
 20087                           
 20088                           ;Dimmer_B1.c: 1599: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 20089  08DE  0008               	return
 20090  08DF                     i1l7959:	
 20091  08DF  083F               	movf	(_DimmerIntr2^(0+128)+5),w
 20092  08E0  0240               	subwf	(_DimmerIntr2^(0+128)+6),w
 20093  08E1  1803               	skipnc
 20094  08E2  28E6               	goto	i1l1007
 20095                           
 20096                           ;Dimmer_B1.c: 1600: DimmerIntr2.DimmingValue--;
 20097  08E3  3001               	movlw	1
 20098  08E4  02BF               	subwf	(_DimmerIntr2^(0+128)+5),f
 20099                           
 20100                           ;Dimmer_B1.c: 1601: } else {
 20101  08E5  0008               	return
 20102  08E6                     i1l1007:	
 20103                           
 20104                           ;Dimmer_B1.c: 1602: DimmerIntr2.Dimming_RF = 0;
 20105  08E6  133A               	bcf	_DimmerIntr2^(0+128),6
 20106  08E7  0008               	return
 20107  08E8                     __end_of_DimmerLights_TMR_2:	
 20108                           
 20109                           	psect	text140
 20110  0816                     __ptext140:	
 20111 ;; *************** function _DimmerLights_TMR_1 *****************
 20112 ;; Defined at:
 20113 ;;		line 1313 in file "../src/Dimmer_B1.c"
 20114 ;; Parameters:    Size  Location     Type
 20115 ;;		None
 20116 ;; Auto vars:     Size  Location     Type
 20117 ;;  count           1    1[COMMON] unsigned char 
 20118 ;; Return value:  Size  Location     Type
 20119 ;;		None               void
 20120 ;; Registers used:
 20121 ;;		wreg, status,2, status,0
 20122 ;; Tracked objects:
 20123 ;;		On entry : 0/0
 20124 ;;		On exit  : 0/0
 20125 ;;		Unchanged: 0/0
 20126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20128 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20130 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20131 ;;Total ram usage:        2 bytes
 20132 ;; Hardware stack levels used:    1
 20133 ;; This function calls:
 20134 ;;		Nothing
 20135 ;; This function is called by:
 20136 ;;		_TMR1_ISR
 20137 ;; This function uses a non-reentrant model
 20138 ;;
 20139                           
 20140                           
 20141                           ;psect for function _DimmerLights_TMR_1
 20142  0816                     _DimmerLights_TMR_1:	
 20143                           
 20144                           ;Dimmer_B1.c: 1314: char count = 65;
 20145                           
 20146                           ;incstack = 0
 20147                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20148  0816  3041               	movlw	65
 20149  0817  00F0               	movwf	??_DimmerLights_TMR_1
 20150  0818  0870               	movf	??_DimmerLights_TMR_1,w
 20151  0819  00F1               	movwf	DimmerLights_TMR_1@count
 20152                           
 20153                           ;Dimmer_B1.c: 1327: if (DimmerIntr1.Start == 1) {
 20154  081A  0021               	movlb	1	; select bank1
 20155  081B  1D2E               	btfss	_DimmerIntr1^(0+128),2
 20156  081C  2827               	goto	i1l7823
 20157                           
 20158                           ;Dimmer_B1.c: 1328: DimmerIntr1.Count++;
 20159  081D  3001               	movlw	1
 20160  081E  00F0               	movwf	??_DimmerLights_TMR_1
 20161  081F  0870               	movf	??_DimmerLights_TMR_1,w
 20162  0820  07B0               	addwf	(_DimmerIntr1^(0+128)+2),f
 20163                           
 20164                           ;Dimmer_B1.c: 1329: if (DimmerIntr1.Count >= count) {
 20165  0821  0871               	movf	DimmerLights_TMR_1@count,w
 20166  0822  0230               	subwf	(_DimmerIntr1^(0+128)+2),w
 20167  0823  1C03               	skipc
 20168  0824  2827               	goto	i1l7823
 20169                           
 20170                           ;Dimmer_B1.c: 1330: DimmerIntr1.Count = 0;
 20171  0825  01B0               	clrf	(_DimmerIntr1^(0+128)+2)
 20172                           
 20173                           ;Dimmer_B1.c: 1331: DimmerIntr1.Start = 0;
 20174  0826  112E               	bcf	_DimmerIntr1^(0+128),2
 20175  0827                     i1l7823:	
 20176                           
 20177                           ;Dimmer_B1.c: 1333: }
 20178                           ;Dimmer_B1.c: 1334: }
 20179                           ;Dimmer_B1.c: 1338: if (DimmerIntr1.Count == 5) {
 20180  0827  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20181  0828  3A05               	xorlw	5
 20182  0829  1903               	btfsc	3,2
 20183                           
 20184                           ;Dimmer_B1.c: 1341: if (DimmerIntr1.ControlStatus == 1) {
 20185  082A  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20186  082B  282E               	goto	i1l7829
 20187                           
 20188                           ;Dimmer_B1.c: 1342: RA7 = 1;
 20189  082C  0020               	movlb	0	; select bank0
 20190  082D  178C               	bsf	12,7	;volatile
 20191  082E                     i1l7829:	
 20192                           
 20193                           ;Dimmer_B1.c: 1344: }
 20194                           ;Dimmer_B1.c: 1345: }
 20195                           ;Dimmer_B1.c: 1349: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20196  082E  0021               	movlb	1	; select bank1
 20197  082F  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20198  0830  0637               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20199  0831  1903               	btfsc	3,2
 20200                           
 20201                           ;Dimmer_B1.c: 1352: if (DimmerIntr1.ControlStatus == 1) {
 20202  0832  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20203  0833  2836               	goto	i1l7835
 20204                           
 20205                           ;Dimmer_B1.c: 1353: RA7 = 0;
 20206  0834  0020               	movlb	0	; select bank0
 20207  0835  138C               	bcf	12,7	;volatile
 20208  0836                     i1l7835:	
 20209                           
 20210                           ;Dimmer_B1.c: 1355: }
 20211                           ;Dimmer_B1.c: 1356: }
 20212                           ;Dimmer_B1.c: 1360: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20213  0836  0021               	movlb	1	; select bank1
 20214  0837  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20215  0838  0638               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20216  0839  1903               	btfsc	3,2
 20217                           
 20218                           ;Dimmer_B1.c: 1363: if (DimmerIntr1.ControlStatus == 1) {
 20219  083A  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20220  083B  283E               	goto	i1l7841
 20221                           
 20222                           ;Dimmer_B1.c: 1364: RA7 = 1;
 20223  083C  0020               	movlb	0	; select bank0
 20224  083D  178C               	bsf	12,7	;volatile
 20225  083E                     i1l7841:	
 20226                           
 20227                           ;Dimmer_B1.c: 1366: }
 20228                           ;Dimmer_B1.c: 1367: }
 20229                           ;Dimmer_B1.c: 1384: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20230  083E  0021               	movlb	1	; select bank1
 20231  083F  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20232  0840  0639               	xorwf	(_DimmerIntr1^(0+128)+11),w
 20233  0841  1903               	btfsc	3,2
 20234                           
 20235                           ;Dimmer_B1.c: 1386: if (DimmerIntr1.ControlStatus == 1) {
 20236  0842  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20237  0843  2846               	goto	i1l956
 20238                           
 20239                           ;Dimmer_B1.c: 1387: RA7 = 0;
 20240  0844  0020               	movlb	0	; select bank0
 20241  0845  138C               	bcf	12,7	;volatile
 20242  0846                     i1l956:	
 20243                           
 20244                           ;Dimmer_B1.c: 1389: }
 20245                           ;Dimmer_B1.c: 1390: }
 20246                           ;Dimmer_B1.c: 1393: if (DimmerIntr1.Tune == 1) {
 20247  0846  0021               	movlb	1	; select bank1
 20248  0847  1CAE               	btfss	_DimmerIntr1^(0+128),1
 20249  0848  0008               	return
 20250                           
 20251                           ;Dimmer_B1.c: 1394: DimmerIntr1.Tune = 0;
 20252  0849  10AE               	bcf	_DimmerIntr1^(0+128),1
 20253                           
 20254                           ;Dimmer_B1.c: 1395: DimmerIntr1.TuneTime++;
 20255  084A  3001               	movlw	1
 20256  084B  00F0               	movwf	??_DimmerLights_TMR_1
 20257  084C  0870               	movf	??_DimmerLights_TMR_1,w
 20258  084D  07B1               	addwf	(_DimmerIntr1^(0+128)+3),f
 20259                           
 20260                           ;Dimmer_B1.c: 1396: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20261  084E  0832               	movf	(_DimmerIntr1^(0+128)+4),w
 20262  084F  0231               	subwf	(_DimmerIntr1^(0+128)+3),w
 20263  0850  1C03               	skipc
 20264  0851  0008               	return
 20265                           
 20266                           ;Dimmer_B1.c: 1397: DimmerIntr1.TuneTime = 0;
 20267  0852  01B1               	clrf	(_DimmerIntr1^(0+128)+3)
 20268                           
 20269                           ;Dimmer_B1.c: 1398: if (DimmerIntr1.Dimming_Sw == 1) {
 20270  0853  1E2E               	btfss	_DimmerIntr1^(0+128),4
 20271  0854  286B               	goto	i1l960
 20272                           
 20273                           ;Dimmer_B1.c: 1399: if (DimmerIntr1.Dimming_Status == 0) {
 20274  0855  1AAE               	btfsc	_DimmerIntr1^(0+128),5
 20275  0856  2862               	goto	i1l7863
 20276                           
 20277                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.DimmingValue < ((char)(60*0.65))) {
 20278  0857  3027               	movlw	39
 20279  0858  0233               	subwf	(_DimmerIntr1^(0+128)+5),w
 20280  0859  1803               	skipnc
 20281  085A  2860               	goto	i1l962
 20282                           
 20283                           ;Dimmer_B1.c: 1401: DimmerIntr1.DimmingValue++;
 20284  085B  3001               	movlw	1
 20285  085C  00F0               	movwf	??_DimmerLights_TMR_1
 20286  085D  0870               	movf	??_DimmerLights_TMR_1,w
 20287  085E  07B3               	addwf	(_DimmerIntr1^(0+128)+5),f
 20288                           
 20289                           ;Dimmer_B1.c: 1402: } else {
 20290  085F  0008               	return
 20291  0860                     i1l962:	
 20292                           
 20293                           ;Dimmer_B1.c: 1403: DimmerIntr1.Dimming_Status = 1;
 20294  0860  16AE               	bsf	_DimmerIntr1^(0+128),5
 20295                           
 20296                           ;Dimmer_B1.c: 1404: }
 20297                           ;Dimmer_B1.c: 1405: } else {
 20298  0861  0008               	return
 20299  0862                     i1l7863:	
 20300                           
 20301                           ;Dimmer_B1.c: 1406: if (DimmerIntr1.DimmingValue > ((char)(10*0.65))) {
 20302  0862  3007               	movlw	7
 20303  0863  0233               	subwf	(_DimmerIntr1^(0+128)+5),w
 20304  0864  1C03               	skipc
 20305  0865  2869               	goto	i1l965
 20306                           
 20307                           ;Dimmer_B1.c: 1407: DimmerIntr1.DimmingValue--;
 20308  0866  3001               	movlw	1
 20309  0867  02B3               	subwf	(_DimmerIntr1^(0+128)+5),f
 20310                           
 20311                           ;Dimmer_B1.c: 1408: } else {
 20312  0868  0008               	return
 20313  0869                     i1l965:	
 20314                           
 20315                           ;Dimmer_B1.c: 1409: DimmerIntr1.Dimming_Status = 0;
 20316  0869  12AE               	bcf	_DimmerIntr1^(0+128),5
 20317                           
 20318                           ;Dimmer_B1.c: 1410: }
 20319                           ;Dimmer_B1.c: 1411: }
 20320                           ;Dimmer_B1.c: 1412: } else if (DimmerIntr1.Dimming_RF == 1) {
 20321  086A  0008               	return
 20322  086B                     i1l960:	
 20323  086B  1F2E               	btfss	_DimmerIntr1^(0+128),6
 20324  086C  0008               	return
 20325                           
 20326                           ;Dimmer_B1.c: 1413: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20327  086D  0834               	movf	(_DimmerIntr1^(0+128)+6),w
 20328  086E  0233               	subwf	(_DimmerIntr1^(0+128)+5),w
 20329  086F  1803               	skipnc
 20330  0870  2876               	goto	i1l7871
 20331                           
 20332                           ;Dimmer_B1.c: 1414: DimmerIntr1.DimmingValue++;
 20333  0871  3001               	movlw	1
 20334  0872  00F0               	movwf	??_DimmerLights_TMR_1
 20335  0873  0870               	movf	??_DimmerLights_TMR_1,w
 20336  0874  07B3               	addwf	(_DimmerIntr1^(0+128)+5),f
 20337                           
 20338                           ;Dimmer_B1.c: 1415: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20339  0875  0008               	return
 20340  0876                     i1l7871:	
 20341  0876  0833               	movf	(_DimmerIntr1^(0+128)+5),w
 20342  0877  0234               	subwf	(_DimmerIntr1^(0+128)+6),w
 20343  0878  1803               	skipnc
 20344  0879  287D               	goto	i1l971
 20345                           
 20346                           ;Dimmer_B1.c: 1416: DimmerIntr1.DimmingValue--;
 20347  087A  3001               	movlw	1
 20348  087B  02B3               	subwf	(_DimmerIntr1^(0+128)+5),f
 20349                           
 20350                           ;Dimmer_B1.c: 1417: } else {
 20351  087C  0008               	return
 20352  087D                     i1l971:	
 20353                           
 20354                           ;Dimmer_B1.c: 1418: DimmerIntr1.Dimming_RF = 0;
 20355  087D  132E               	bcf	_DimmerIntr1^(0+128),6
 20356  087E  0008               	return
 20357  087F                     __end_of_DimmerLights_TMR_1:	
 20358                           
 20359                           	psect	text141
 20360  19F0                     __ptext141:	
 20361 ;; *************** function _IOC_ISR *****************
 20362 ;; Defined at:
 20363 ;;		line 394 in file "../src/MCU_B1.c"
 20364 ;; Parameters:    Size  Location     Type
 20365 ;;		None
 20366 ;; Auto vars:     Size  Location     Type
 20367 ;;		None
 20368 ;; Return value:  Size  Location     Type
 20369 ;;		None               void
 20370 ;; Registers used:
 20371 ;;		wreg, status,2, status,0, pclath, cstack
 20372 ;; Tracked objects:
 20373 ;;		On entry : 0/0
 20374 ;;		On exit  : 0/0
 20375 ;;		Unchanged: 0/0
 20376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20381 ;;Total ram usage:        0 bytes
 20382 ;; Hardware stack levels used:    1
 20383 ;; Hardware stack levels required when called:    3
 20384 ;; This function calls:
 20385 ;;		_DimmerLights_IOC_1
 20386 ;;		_DimmerLights_IOC_2
 20387 ;; This function is called by:
 20388 ;;		_ISR
 20389 ;; This function uses a non-reentrant model
 20390 ;;
 20391                           
 20392                           
 20393                           ;psect for function _IOC_ISR
 20394  19F0                     _IOC_ISR:	
 20395                           
 20396                           ;MCU_B1.c: 395: IOCBF2 = 0;
 20397                           
 20398                           ;incstack = 0
 20399                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20400  19F0  0027               	movlb	7	; select bank7
 20401  19F1  1116               	bcf	22,2	;volatile
 20402                           
 20403                           ;MCU_B1.c: 396: IOCIF = 0;
 20404  19F2  100B               	bcf	11,0	;volatile
 20405                           
 20406                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 20407  19F3  0022               	movlb	2	; select bank2
 20408  19F4  1C20               	btfss	_myMain^(0+256),0
 20409  19F5  0008               	return
 20410                           
 20411                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 20412  19F6  3191  2167  3199   	fcall	_DimmerLights_IOC_1
 20413                           
 20414                           ;MCU_B1.c: 409: DimmerLights_IOC_2();
 20415  19F9  3191  21A4         	fcall	_DimmerLights_IOC_2
 20416  19FB  0008               	return
 20417  19FC                     __end_of_IOC_ISR:	
 20418                           
 20419                           	psect	text142
 20420  11A4                     __ptext142:	
 20421 ;; *************** function _DimmerLights_IOC_2 *****************
 20422 ;; Defined at:
 20423 ;;		line 1609 in file "../src/Dimmer_B1.c"
 20424 ;; Parameters:    Size  Location     Type
 20425 ;;		None
 20426 ;; Auto vars:     Size  Location     Type
 20427 ;;  dimming         1   13[COMMON] unsigned char 
 20428 ;;  count           1   12[COMMON] unsigned char 
 20429 ;; Return value:  Size  Location     Type
 20430 ;;		None               void
 20431 ;; Registers used:
 20432 ;;		wreg, status,2, status,0, pclath, cstack
 20433 ;; Tracked objects:
 20434 ;;		On entry : 0/0
 20435 ;;		On exit  : 0/0
 20436 ;;		Unchanged: 0/0
 20437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20440 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20441 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20442 ;;Total ram usage:        4 bytes
 20443 ;; Hardware stack levels used:    1
 20444 ;; Hardware stack levels required when called:    2
 20445 ;; This function calls:
 20446 ;;		_Division
 20447 ;; This function is called by:
 20448 ;;		_IOC_ISR
 20449 ;; This function uses a non-reentrant model
 20450 ;;
 20451                           
 20452                           
 20453                           ;psect for function _DimmerLights_IOC_2
 20454  11A4                     _DimmerLights_IOC_2:	
 20455                           
 20456                           ;Dimmer_B1.c: 1625: if (DimmerIntr2.Start == 0) {
 20457                           
 20458                           ;incstack = 0
 20459                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 20460  11A4  0021               	movlb	1	; select bank1
 20461  11A5  193A               	btfsc	_DimmerIntr2^(0+128),2
 20462  11A6  0008               	return
 20463                           
 20464                           ;Dimmer_B1.c: 1626: if (RB2 != DimmerIntr2.Status) {
 20465  11A7  0E3B               	swapf	(_DimmerIntr2^(0+128)+1),w
 20466  11A8  0C89               	rrf	9,f
 20467  11A9  3901               	andlw	1
 20468  11AA  00FA               	movwf	??_DimmerLights_IOC_2
 20469  11AB  3000               	movlw	0
 20470  11AC  0020               	movlb	0	; select bank0
 20471  11AD  190D               	btfsc	13,2	;volatile
 20472  11AE  3001               	movlw	1
 20473  11AF  067A               	xorwf	??_DimmerLights_IOC_2,w
 20474  11B0  1903               	skipnz
 20475  11B1  0008               	return
 20476                           
 20477                           ;Dimmer_B1.c: 1627: DimmerIntr2.Start = 1;
 20478  11B2  0021               	movlb	1	; select bank1
 20479  11B3  153A               	bsf	_DimmerIntr2^(0+128),2
 20480                           
 20481                           ;Dimmer_B1.c: 1628: DimmerIntr2.Count = 0;
 20482  11B4  01BC               	clrf	(_DimmerIntr2^(0+128)+2)
 20483                           
 20484                           ;Dimmer_B1.c: 1629: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 20485  11B5  1E3A               	btfss	_DimmerIntr2^(0+128),4
 20486  11B6  1B3A               	btfsc	_DimmerIntr2^(0+128),6
 20487                           
 20488                           ;Dimmer_B1.c: 1630: DimmerIntr2.Tune = 1;
 20489  11B7  14BA               	bsf	_DimmerIntr2^(0+128),1
 20490                           
 20491                           ;Dimmer_B1.c: 1631: }
 20492                           ;Dimmer_B1.c: 1632: char count = 65;
 20493  11B8  3041               	movlw	65
 20494  11B9  00FA               	movwf	??_DimmerLights_IOC_2
 20495  11BA  087A               	movf	??_DimmerLights_IOC_2,w
 20496  11BB  00FC               	movwf	DimmerLights_IOC_2@count
 20497                           
 20498                           ;Dimmer_B1.c: 1633: char dimming = Division(DimmerIntr2.DimmingValue, 2);
 20499  11BC  3002               	movlw	2
 20500  11BD  00FA               	movwf	??_DimmerLights_IOC_2
 20501  11BE  087A               	movf	??_DimmerLights_IOC_2,w
 20502  11BF  00F5               	movwf	Division@num
 20503  11C0  083F               	movf	(_DimmerIntr2^(0+128)+5),w
 20504  11C1  319A  2250  3191   	fcall	_Division
 20505  11C4  00FB               	movwf	??_DimmerLights_IOC_2+1
 20506  11C5  087B               	movf	??_DimmerLights_IOC_2+1,w
 20507  11C6  00FD               	movwf	DimmerLights_IOC_2@dimming
 20508                           
 20509                           ;Dimmer_B1.c: 1634: DimmerIntr2.TuneValue2 = 5 + dimming;
 20510  11C7  087D               	movf	DimmerLights_IOC_2@dimming,w
 20511  11C8  3E05               	addlw	5
 20512  11C9  00FA               	movwf	??_DimmerLights_IOC_2
 20513  11CA  087A               	movf	??_DimmerLights_IOC_2,w
 20514  11CB  0021               	movlb	1	; select bank1
 20515  11CC  00C3               	movwf	(_DimmerIntr2^(0+128)+9)
 20516                           
 20517                           ;Dimmer_B1.c: 1635: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + ((count - (5 + 5))
      +                           - DimmerIntr2.DimmingValue);
 20518  11CD  033F               	decf	(_DimmerIntr2^(0+128)+5),w
 20519  11CE  3AFF               	xorlw	255
 20520  11CF  0743               	addwf	(_DimmerIntr2^(0+128)+9),w
 20521  11D0  077C               	addwf	DimmerLights_IOC_2@count,w
 20522  11D1  3EF6               	addlw	246
 20523  11D2  00FA               	movwf	??_DimmerLights_IOC_2
 20524  11D3  087A               	movf	??_DimmerLights_IOC_2,w
 20525  11D4  00C4               	movwf	(_DimmerIntr2^(0+128)+10)
 20526                           
 20527                           ;Dimmer_B1.c: 1636: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + dimming;
 20528  11D5  0844               	movf	(_DimmerIntr2^(0+128)+10),w
 20529  11D6  077D               	addwf	DimmerLights_IOC_2@dimming,w
 20530  11D7  00FA               	movwf	??_DimmerLights_IOC_2
 20531  11D8  087A               	movf	??_DimmerLights_IOC_2,w
 20532  11D9  00C5               	movwf	(_DimmerIntr2^(0+128)+11)
 20533                           
 20534                           ;Dimmer_B1.c: 1646: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 20535  11DA  12BB               	bcf	(_DimmerIntr2^(0+128)+1),5
 20536  11DB  0020               	movlb	0	; select bank0
 20537  11DC  1D0D               	btfss	13,2	;volatile
 20538  11DD  0008               	return
 20539  11DE  0021               	movlb	1	; select bank1
 20540  11DF  16BB               	bsf	(_DimmerIntr2^(0+128)+1),5
 20541  11E0  0008               	return
 20542  11E1                     __end_of_DimmerLights_IOC_2:	
 20543                           
 20544                           	psect	text143
 20545  1167                     __ptext143:	
 20546 ;; *************** function _DimmerLights_IOC_1 *****************
 20547 ;; Defined at:
 20548 ;;		line 1425 in file "../src/Dimmer_B1.c"
 20549 ;; Parameters:    Size  Location     Type
 20550 ;;		None
 20551 ;; Auto vars:     Size  Location     Type
 20552 ;;  dimming         1   13[COMMON] unsigned char 
 20553 ;;  count           1   12[COMMON] unsigned char 
 20554 ;; Return value:  Size  Location     Type
 20555 ;;		None               void
 20556 ;; Registers used:
 20557 ;;		wreg, status,2, status,0, pclath, cstack
 20558 ;; Tracked objects:
 20559 ;;		On entry : 0/0
 20560 ;;		On exit  : 0/0
 20561 ;;		Unchanged: 0/0
 20562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20565 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20566 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20567 ;;Total ram usage:        4 bytes
 20568 ;; Hardware stack levels used:    1
 20569 ;; Hardware stack levels required when called:    2
 20570 ;; This function calls:
 20571 ;;		_Division
 20572 ;; This function is called by:
 20573 ;;		_IOC_ISR
 20574 ;; This function uses a non-reentrant model
 20575 ;;
 20576                           
 20577                           
 20578                           ;psect for function _DimmerLights_IOC_1
 20579  1167                     _DimmerLights_IOC_1:	
 20580                           
 20581                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.Start == 0) {
 20582                           
 20583                           ;incstack = 0
 20584                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20585  1167  0021               	movlb	1	; select bank1
 20586  1168  192E               	btfsc	_DimmerIntr1^(0+128),2
 20587  1169  0008               	return
 20588                           
 20589                           ;Dimmer_B1.c: 1440: if (RB2 != DimmerIntr1.Status) {
 20590  116A  0E2F               	swapf	(_DimmerIntr1^(0+128)+1),w
 20591  116B  0C89               	rrf	9,f
 20592  116C  3901               	andlw	1
 20593  116D  00FA               	movwf	??_DimmerLights_IOC_1
 20594  116E  3000               	movlw	0
 20595  116F  0020               	movlb	0	; select bank0
 20596  1170  190D               	btfsc	13,2	;volatile
 20597  1171  3001               	movlw	1
 20598  1172  067A               	xorwf	??_DimmerLights_IOC_1,w
 20599  1173  1903               	skipnz
 20600  1174  0008               	return
 20601                           
 20602                           ;Dimmer_B1.c: 1441: DimmerIntr1.Start = 1;
 20603  1175  0021               	movlb	1	; select bank1
 20604  1176  152E               	bsf	_DimmerIntr1^(0+128),2
 20605                           
 20606                           ;Dimmer_B1.c: 1442: DimmerIntr1.Count = 0;
 20607  1177  01B0               	clrf	(_DimmerIntr1^(0+128)+2)
 20608                           
 20609                           ;Dimmer_B1.c: 1443: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20610  1178  1E2E               	btfss	_DimmerIntr1^(0+128),4
 20611  1179  1B2E               	btfsc	_DimmerIntr1^(0+128),6
 20612                           
 20613                           ;Dimmer_B1.c: 1444: DimmerIntr1.Tune = 1;
 20614  117A  14AE               	bsf	_DimmerIntr1^(0+128),1
 20615                           
 20616                           ;Dimmer_B1.c: 1445: }
 20617                           ;Dimmer_B1.c: 1446: char count = 65;
 20618  117B  3041               	movlw	65
 20619  117C  00FA               	movwf	??_DimmerLights_IOC_1
 20620  117D  087A               	movf	??_DimmerLights_IOC_1,w
 20621  117E  00FC               	movwf	DimmerLights_IOC_1@count
 20622                           
 20623                           ;Dimmer_B1.c: 1447: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 20624  117F  3002               	movlw	2
 20625  1180  00FA               	movwf	??_DimmerLights_IOC_1
 20626  1181  087A               	movf	??_DimmerLights_IOC_1,w
 20627  1182  00F5               	movwf	Division@num
 20628  1183  0833               	movf	(_DimmerIntr1^(0+128)+5),w
 20629  1184  319A  2250  3191   	fcall	_Division
 20630  1187  00FB               	movwf	??_DimmerLights_IOC_1+1
 20631  1188  087B               	movf	??_DimmerLights_IOC_1+1,w
 20632  1189  00FD               	movwf	DimmerLights_IOC_1@dimming
 20633                           
 20634                           ;Dimmer_B1.c: 1448: DimmerIntr1.TuneValue2 = 5 + dimming;
 20635  118A  087D               	movf	DimmerLights_IOC_1@dimming,w
 20636  118B  3E05               	addlw	5
 20637  118C  00FA               	movwf	??_DimmerLights_IOC_1
 20638  118D  087A               	movf	??_DimmerLights_IOC_1,w
 20639  118E  0021               	movlb	1	; select bank1
 20640  118F  00B7               	movwf	(_DimmerIntr1^(0+128)+9)
 20641                           
 20642                           ;Dimmer_B1.c: 1449: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + ((count - (5 + 5))
      +                           - DimmerIntr1.DimmingValue);
 20643  1190  0333               	decf	(_DimmerIntr1^(0+128)+5),w
 20644  1191  3AFF               	xorlw	255
 20645  1192  0737               	addwf	(_DimmerIntr1^(0+128)+9),w
 20646  1193  077C               	addwf	DimmerLights_IOC_1@count,w
 20647  1194  3EF6               	addlw	246
 20648  1195  00FA               	movwf	??_DimmerLights_IOC_1
 20649  1196  087A               	movf	??_DimmerLights_IOC_1,w
 20650  1197  00B8               	movwf	(_DimmerIntr1^(0+128)+10)
 20651                           
 20652                           ;Dimmer_B1.c: 1450: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 20653  1198  0838               	movf	(_DimmerIntr1^(0+128)+10),w
 20654  1199  077D               	addwf	DimmerLights_IOC_1@dimming,w
 20655  119A  00FA               	movwf	??_DimmerLights_IOC_1
 20656  119B  087A               	movf	??_DimmerLights_IOC_1,w
 20657  119C  00B9               	movwf	(_DimmerIntr1^(0+128)+11)
 20658                           
 20659                           ;Dimmer_B1.c: 1459: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20660  119D  12AF               	bcf	(_DimmerIntr1^(0+128)+1),5
 20661  119E  0020               	movlb	0	; select bank0
 20662  119F  1D0D               	btfss	13,2	;volatile
 20663  11A0  0008               	return
 20664  11A1  0021               	movlb	1	; select bank1
 20665  11A2  16AF               	bsf	(_DimmerIntr1^(0+128)+1),5
 20666  11A3  0008               	return
 20667  11A4                     __end_of_DimmerLights_IOC_1:	
 20668                           
 20669                           	psect	text144
 20670  1A50                     __ptext144:	
 20671 ;; *************** function _Division *****************
 20672 ;; Defined at:
 20673 ;;		line 1308 in file "../src/Dimmer_B1.c"
 20674 ;; Parameters:    Size  Location     Type
 20675 ;;  value           1    wreg     unsigned char 
 20676 ;;  num             1    5[COMMON] unsigned char 
 20677 ;; Auto vars:     Size  Location     Type
 20678 ;;  value           1    8[COMMON] unsigned char 
 20679 ;;  result          1    9[COMMON] unsigned char 
 20680 ;; Return value:  Size  Location     Type
 20681 ;;                  1    wreg      unsigned char 
 20682 ;; Registers used:
 20683 ;;		wreg, status,2, status,0, pclath, cstack
 20684 ;; Tracked objects:
 20685 ;;		On entry : 0/0
 20686 ;;		On exit  : 0/0
 20687 ;;		Unchanged: 0/0
 20688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20689 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20691 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20692 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20693 ;;Total ram usage:        5 bytes
 20694 ;; Hardware stack levels used:    1
 20695 ;; Hardware stack levels required when called:    1
 20696 ;; This function calls:
 20697 ;;		___lbdiv
 20698 ;; This function is called by:
 20699 ;;		_DimmerLights_IOC_1
 20700 ;;		_DimmerLights_IOC_2
 20701 ;; This function uses a non-reentrant model
 20702 ;;
 20703                           
 20704                           
 20705                           ;psect for function _Division
 20706  1A50                     _Division:	
 20707                           
 20708                           ;incstack = 0
 20709                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 20710                           ;Division@value stored from wreg
 20711  1A50  00F8               	movwf	Division@value
 20712                           
 20713                           ;Dimmer_B1.c: 1309: char result = (char) (value / num);
 20714  1A51  0875               	movf	Division@num,w
 20715  1A52  00F6               	movwf	??_Division
 20716  1A53  0876               	movf	??_Division,w
 20717  1A54  00F0               	movwf	___lbdiv@divisor
 20718  1A55  0878               	movf	Division@value,w
 20719  1A56  319E  260A         	fcall	___lbdiv
 20720  1A58  00F7               	movwf	??_Division+1
 20721  1A59  0877               	movf	??_Division+1,w
 20722  1A5A  00F9               	movwf	Division@result
 20723                           
 20724                           ;Dimmer_B1.c: 1310: return result;
 20725  1A5B  0879               	movf	Division@result,w
 20726  1A5C  0008               	return
 20727  1A5D                     __end_of_Division:	
 20728                           
 20729                           	psect	text145
 20730  1E0A                     __ptext145:	
 20731 ;; *************** function ___lbdiv *****************
 20732 ;; Defined at:
 20733 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20734 ;; Parameters:    Size  Location     Type
 20735 ;;  dividend        1    wreg     unsigned char 
 20736 ;;  divisor         1    0[COMMON] unsigned char 
 20737 ;; Auto vars:     Size  Location     Type
 20738 ;;  dividend        1    2[COMMON] unsigned char 
 20739 ;;  quotient        1    4[COMMON] unsigned char 
 20740 ;;  counter         1    3[COMMON] unsigned char 
 20741 ;; Return value:  Size  Location     Type
 20742 ;;                  1    wreg      unsigned char 
 20743 ;; Registers used:
 20744 ;;		wreg, status,2, status,0
 20745 ;; Tracked objects:
 20746 ;;		On entry : 0/0
 20747 ;;		On exit  : 0/0
 20748 ;;		Unchanged: 0/0
 20749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20750 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20751 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20752 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20753 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20754 ;;Total ram usage:        5 bytes
 20755 ;; Hardware stack levels used:    1
 20756 ;; This function calls:
 20757 ;;		Nothing
 20758 ;; This function is called by:
 20759 ;;		_Division
 20760 ;; This function uses a non-reentrant model
 20761 ;;
 20762                           
 20763                           
 20764                           ;psect for function ___lbdiv
 20765  1E0A                     ___lbdiv:	
 20766                           
 20767                           ;incstack = 0
 20768                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 20769                           ;___lbdiv@dividend stored from wreg
 20770  1E0A  00F2               	movwf	___lbdiv@dividend
 20771  1E0B  01F4               	clrf	___lbdiv@quotient
 20772  1E0C  0870               	movf	___lbdiv@divisor,w
 20773  1E0D  1903               	btfsc	3,2
 20774  1E0E  2E29               	goto	i1l7259
 20775  1E0F  01F3               	clrf	___lbdiv@counter
 20776  1E10  0AF3               	incf	___lbdiv@counter,f
 20777  1E11                     i1l7247:	
 20778  1E11  1BF0               	btfsc	___lbdiv@divisor,7
 20779  1E12  2E1A               	goto	i1l7249
 20780  1E13  1003               	clrc
 20781  1E14  0DF0               	rlf	___lbdiv@divisor,f
 20782  1E15  3001               	movlw	1
 20783  1E16  00F1               	movwf	??___lbdiv
 20784  1E17  0871               	movf	??___lbdiv,w
 20785  1E18  07F3               	addwf	___lbdiv@counter,f
 20786  1E19  2E11               	goto	i1l7247
 20787  1E1A                     i1l7249:	
 20788  1E1A  1003               	clrc
 20789  1E1B  0DF4               	rlf	___lbdiv@quotient,f
 20790  1E1C  0870               	movf	___lbdiv@divisor,w
 20791  1E1D  0272               	subwf	___lbdiv@dividend,w
 20792  1E1E  1C03               	skipc
 20793  1E1F  2E24               	goto	L13
 20794  1E20  0870               	movf	___lbdiv@divisor,w
 20795  1E21  02F2               	subwf	___lbdiv@dividend,f
 20796  1E22  1474               	bsf	___lbdiv@quotient,0
 20797  1E23  1003               	clrc
 20798  1E24                     L13:	
 20799  1E24  0CF0               	rrf	___lbdiv@divisor,f
 20800  1E25  3001               	movlw	1
 20801  1E26  02F3               	subwf	___lbdiv@counter,f
 20802  1E27  1D03               	btfss	3,2
 20803  1E28  2E1A               	goto	i1l7249
 20804  1E29                     i1l7259:	
 20805  1E29  0874               	movf	___lbdiv@quotient,w
 20806  1E2A  0008               	return
 20807  1E2B                     __end_of___lbdiv:	
 20808  007E                     btemp	set	126	;btemp
 20809  007E                     pic14e$flags	set	126
 20810  007E                     wtemp	set	126
 20811  007E                     wtemp0	set	126
 20812  0080                     wtemp1	set	128
 20813  0082                     wtemp2	set	130
 20814  0084                     wtemp3	set	132
 20815  0086                     wtemp4	set	134
 20816  0088                     wtemp5	set	136
 20817  007F                     wtemp6	set	127
 20818  007E                     ttemp	set	126
 20819  007E                     ttemp0	set	126
 20820  0081                     ttemp1	set	129
 20821  0084                     ttemp2	set	132
 20822  0087                     ttemp3	set	135
 20823  007F                     ttemp4	set	127
 20824  007E                     ltemp	set	126
 20825  007E                     ltemp0	set	126
 20826  0082                     ltemp1	set	130
 20827  0086                     ltemp2	set	134
 20828  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         264
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      8      78
    BANK2            80      0      80
    BANK3            80      0      78
    BANK4            80      4      73
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK3[8]), DimmerLights1(BANK2[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->_Division
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_Dimming
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  157615
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             14 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              5 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              5 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              1 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              1 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5642
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5642
                                             70 BANK0      1     1      0
                                              0 BANK1      8     8      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4608
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4608
                                             19 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              1 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              5 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   49455
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   49455
                                              5 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45736
                                              3 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5139
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40325
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12564
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21936
                                             70 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              3 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              5 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              5 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              3 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              7 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              6 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              6 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              3 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              3 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2315
                                              9 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              3 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              5 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1235
                                              7 BANK0      1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              5 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             67 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              1 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3667
                                             14 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   64841
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   64509
                                              4 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   41896
                                              0 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              3 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4496
                                             70 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      71
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              3 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   22094
                                             75 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3821
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             47 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             31 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             34 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              2 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              1 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5731
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5731
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3286
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    2091
                                             14 BANK0      5     5      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                             10 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              3 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              3 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0    1174
                                              0 BANK0      1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0      46
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0    1128
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  4     4      0     564
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  4     4      0     564
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     496
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
     _DimmerLights_IOC_2
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      49      13       91.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     192      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     192      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Feb 03 14:27:46 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1C75  
                          ___bmul@product 0023                 getMain_Lights_Count@count 0021  
                                      l98 1529                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1ED3                                        _WR 0CA9  
                            ___awdiv@sign 0027                                        _Sw 00D5  
                          setTemp_Main@AD 00EB                       ___wmul@multiplicand 0023  
                    _getDimmerLights_Line 1B6C                    __end_of_setDelayOff_GO 0CA9  
                            ___ftadd@exp1 004E                              ___ftadd@exp2 004D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1798  
                    _setDimmerLights_Line 1D14                              ___ftadd@sign 004C  
                                     l100 153D                                       l110 1391  
                                     l112 13A1                                       l108 13A7  
                                     l109 13A3                      _setDimmerLights_SwOn 15AC  
                                     l327 1C81                                       l328 1C83  
                                     l371 1EFD                                       l283 09B7  
                                     l259 092C                                       l581 0A2B  
                                     l910 1B75                                       l911 1B7D  
                                     l752 1BE7                                       l905 1D23  
                                     l852 1DE0                                       l876 07A9  
                                     _GIE 005F                                       _CRC 00CB  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00D0                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00C9  
                                     _Cmd 00CC              getDimmerLights_Status@lights 0023  
                                     _Sw1 01BE                                       _Sw2 01C7  
              ??_setDimmerIntr_Dimming_RF 0022                ??_setDimmerIntr_Dimming_Sw 0022  
         setDimmerIntr_Dimming_RF@command 0021                  __end_of_CC2500_WriteByte 1C8E  
                   _Buzzer_Initialization 192B                           __end_of_ADC_Set 196F  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0024       __end_of_setDimmerIntr_ControlStatus 1FA2  
             _setDimmerIntr_ControlStatus 1F73                         ??_getSw_KeyStatus 0021  
                                    ?_ISR 0070                              ___ftdiv@cntr 0039  
                         __end_of_IOC_ISR 19FC                     _setDimmerLights_OnOff 071B  
        setDimmerLights_DimmingRun@lights 0025                                Load_Main@i 0031  
                            ___ftdiv@sign 003E                                      l1118 1DB5  
                                    l1119 1DBF                                      l1153 12D6  
                                    l2130 063E                                      l2206 0D37  
                                    l2134 058D                                      l2135 05DE  
                                    l2160 07F5                                      l1425 10F1  
                                    l2190 10BD                                      l1439 1FF9  
                                    l2175 0AA2                                      l1448 1449  
                                    l3163 1652                                      l3157 163B  
                         __end_of_IOC_Set 19CF                                      l2197 0CBF  
                                    l1590 008A                                      l1591 0086  
                                    l2527 1BC5                                      l2551 024A  
                                    l1592 0081                                      l3186 0427  
                                    l1762 0E8B                            _Load_Main$3652 002C  
                                    l2900 1C74                                      l1588 01FE  
                                    l2549 037E                                      l1773 0E83  
                                    l1598 01DA                                      l1599 01D8  
                                    l1768 0E00                                      l2835 121C  
                                    l2860 108B                                      l6231 1618  
                                    l2864 1087                                      l6241 1640  
                                    l6233 1622                                      l6401 03E0  
                                    l2859 1070                                      l6243 1648  
                                    l6235 1627                                      l6227 1611  
                                    l6411 0402                                      l7043 1F8B  
                                    l7051 1C3A                                      l2891 071A  
                                    l7061 1BDD                                      l6421 0423  
                                    l6413 0406                                      l7141 1471  
                                    l6407 03F3                                      l7071 1F5E  
                                    l7127 1460                                      l7135 1468  
                                    l7311 0948                                      l7303 093B  
                                    l6329 1BF5                                      l6425 0439  
                                    l6409 03FD                                      l6521 0F15  
                                    l6513 0F01                                      l6345 1AB6  
                                    l7161 1495                                      l7305 093F  
                                    l6339 1C0C                                      l7403 1244  
                                    l6419 0419                                      l7331 096B  
                                    l7307 0942                                      l2996 1D57  
                   _setDimmerLights_SwOff 112E                                      l9101 14F1  
                                    l7413 1255                                      l7405 1247  
                                    l6429 044B                                      l6525 0F1D  
                                    l6509 0EF9                                      l6349 1ABC  
                                    l7157 1491                                      l7165 1499  
                                    l7149 1479                                      l8061 1E78  
                                    l7415 125A                                      l6367 1E99  
                                    l6439 0466                                      l6383 03B7  
                                    l6455 0D65                                      l6711 1C23  
                                    l7183 1AAC                                      l7351 0983  
                                    l7335 0971                                      l8063 1E7B  
                                    l6449 0D4F                                      l7185 1AB1  
                                    l9201 0C8B                                      l7353 099C  
                                    l7329 0968                                      l7273 08F8  
                                    l6379 03B0                                      l7179 1AA5  
                                    l6491 0EA8                                      l6811 1CBA  
                                    l7275 08FB                                      l8067 1E81  
                                    l6389 03C6                                      l6477 0DBF  
                                    l6469 0DA6                                      l6549 0BAF  
                                    l9221 171D                                      l9205 0C9F  
                                    l8085 141B                                      l7701 111E  
                                    l6805 1CB1                                      l7293 0913  
                                    l7391 122E                                      l6583 0C14  
                                    l6575 0BFA                                      l6567 0BDF  
                                    l9231 1B31                                      l6719 1FBA  
                                    l8079 1406                                      l6807 1CB4  
                                    l6831 1D47                                      l7279 0901  
                                    l6577 0C03                                      l6569 0BED  
                                    l9401 13C7                                      l6497 0EBE  
                                    l7705 1127                                      l7297 0932  
                                    l6667 115C                                      l9075 14BA  
                                    l9147 15C0                                      l6579 0C06  
                                    l6843 1F0E                                      l6851 1EB9  
                                    l7299 0935                                      l9331 0D16  
                                    l9323 0CCE                                      l9315 0CAA  
                                    l8283 1BD0                                      l9093 14E0  
                                    l9085 14C2                                      l9069 14AF  
                                    l9157 15D1                                      l9149 15C3  
                                    l9501 17EC                                      l7549 1FE1  
                                    l6845 1F19                                      l6853 1EBC  
                                    l6829 1D41                                      l9261 0B2D  
                                    l9333 0D1A                                      l9325 0CD5  
                                    l9421 0A48                                      l7653 1C51  
                                    l9087 14CE                                      l9167 15FA  
                                    l9159 15D6                                      l9191 0C5B  
                                    l9503 17F3                                      l6943 1EDD  
                                    l9335 0D1E                                      l9327 0CF0  
                                    l8279 1BCA                                      l9097 14E9  
                                    l9169 15FF                                      l8377 1D51  
                                    l7745 1E56                                      l6857 1EC2  
                                    l6945 1EE0                                      l7593 1A9B  
                                    l9265 0B32                                      l9249 1313  
                                    l9329 0D12                                      l9433 0A60  
                                    l9521 0E02                                      l9291 1074  
                                    l6883 1C6E                                      l9363 0788  
                                    l7755 1E66                                      l6971 1345  
                                    l9275 0B82                                      l9339 0D22  
                                    l7667 1D98                                      l8397 137B  
                                    l9381 07C0                                      l7693 1100  
                                    l7757 1E6B                                      l6981 1355  
                                    l6973 1348                                      l6949 1EE6  
                                    l9437 0A69                                      l9605 05D9  
                                    l7677 1DA4                                      l7669 1D9A  
                                    l8565 0AE2                                      l8557 0AC3  
                   _myMain_Initialization 1B59                                      l6879 1C5F  
                                    l9359 076D                                      l8479 04FD  
                                    l7695 110C                                      l6983 1358  
                                    l7679 1DA8                                      l9527 0E11  
                                    l9289 106B                                      l9377 07B9  
                                    l6977 134E                                      l9449 0A7E  
                                    l9633 061F                                      l9705 02F2  
                                    l9529 0E14                                      l8585 0B11  
                                    l8569 0AEA                                      l9299 1082  
                                    l9395 07ED                                      l9491 17C4  
                                    l9811 0089                                      l6987 135E  
                                    l9619 05ED                                      l9715 0326  
                                    l9571 0E70                                      l9557 0E58  
                                    l9647 0637                                      l9559 0E5A  
                                    l8759 128C                                      l9489 17BE  
                                    l9753 1DE2                                      l9833 00DF  
                                    l9681 027D                                      l9665 0234  
                                    l9569 0E6F                                      _CFGS 0CAE  
                                    l9827 00AD                                      l9691 02B2  
                                    l9925 01ED                              __CFG_WDTE$ON 0000  
                                    l9865 0171                                      l9873 019A  
                                    l9793 0068                                      l9859 0162  
                                    l9955 11FB                                      l9869 018E  
                                    l9879 01AA                                      l9993 0674  
                                    l9889 01C0                                      l9987 0664  
                                    l9997 0683                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5005 1636  
                                    u5025 1643                                      u5055 1659  
                                    _PEIE 005E                                      u5405 03F4  
                                    u5435 0407                                      u5375 03E1  
                                    u5535 0D77                                      u5615 0ECA  
                                    u5465 041A                                      u5545 0D87  
                                    u5625 0EDA                                      u6185 1F03  
                                    u5555 0DA7                                      u7155 0810  
                                    u5565 0DB6                                      u5645 0F02  
                                    u5575 0DC0                                      u5735 0BB6  
                                    u5655 0F08                                      u5825 1BA3  
                                    u9105 0AD2                                      u7515 110D  
                                    u5765 0BE0                                      u5685 0F1E  
                                    u7525 1117                                      u5695 0F24  
                                    u7535 111F                                      u4985 161D  
                                    u5795 0BFB                                      u9155 0B01  
                                    u7495 1103                                      u9515 1280  
                                    u8825 1D58                                      u8835 1D5D  
                                    u8865 1371                                      _LWLO 0CAD  
                                    u9945 14C5                                      u9965 14CF  
                                    u9975 14D9                                      u9985 14E1  
                                    _RSSI 00D2                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1CF8  
              _setDimmerLights_DimmingRun 1CDD                                      _Buz1 012D  
                                    _Load 0140                                      _Temp 00DB  
                                    _main 1551                              ___ftpack@arg 0021  
                     __end_of_DlyOff_Main 0A32                           __end_of_RF_Main 1937  
                            ___ftpack@exp 0024                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 19DA                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0B96                         ___bmul@multiplier 0024  
                            ___ftmul@cntr 003D                              ___ftmul@sign 003E  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2375 0023  
    _getDimmerLights_Allow_Condition$2376 0024      _getDimmerLights_Allow_Condition$2377 0025  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0020  
                            ___fttol@exp1 005C                              ___fttol@lval 0058  
       setDimmerLights_DimmingRun@command 0023   __end_of_getDimmerLights_Allow_Condition 125C  
__size_of_getDimmerLights_Allow_Condition 003E         ??_getDimmerLights_Allow_Condition 0022  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 121E  
                  _getDimmerLights_Status 1A5D                        ??_getDimmer_LoadGO 0021  
                        __end_of_LED_Main 1A38                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CE                                     l10005 06AB  
                                   l10023 06ED                                     l10007 0686  
                                   l10025 06C8                                     l10009 06B3  
                                   l10027 06F5                                     l10035 0710  
                                   l10029 06FF                                     l10061 1580  
                                   l10057 1575                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0265  
                         __end_of___awdiv 14F8                           __end_of___lbdiv 1E2B  
                         __end_of___ftadd 047E                           __end_of___ftdiv 0DE1  
                         __end_of___ftneg 19B0                                     u10200 16D8  
                                   u10205 16D6                                     u11015 060E  
                         __end_of___ftmul 0F45                                     u10185 0C67  
                         ___awdiv@divisor 0021                                     u11415 00AB  
                                   _T1CON 0018                                     u11425 00DD  
                                   u11275 10E8                                     u11515 01A1  
                                   u11435 0121                                     u11700 06B1  
                         __end_of___fttol 0C1D                                     u11705 068F  
                                   u11730 06F3                                     u11635 1214  
                                   u11735 06D1                                     u10875 0E40  
                                   u10895 0E60                                     u10985 05B1  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 112E  
                                   i1l960 086B                                     i1l962 0860  
                                   i1l971 087D                                     i1l956 0846  
                                   i1l965 0869                                     i1l992 08AF  
                                   i1l996 08D4                                     i1l998 08C9  
                         ___awdiv@counter 0026             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0022                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 0816                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 16CE   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 1669                                     _Light 00D1  
                        __end_of_TMR1_ISR 1E4C                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1A44  
                                   _getAD 1E6D                             ___awtoft@sign 002E  
                           ___ftpack@sign 0025               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0021                          __end_of_WDT_Main 1B0D  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0026  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1AE9  
                      Flash_Memory_Read@i 0022                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1AD7  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 16CE                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 00E5               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0021               ??_setDimmerLights_DimmingOn 0023  
                      ??_CC2500_SIDLEMode 0025                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1A5D                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 15AC                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1941            getMain_All_LightsStatus@status 0021  
                      ??_setMemory_Modify 0021              setDimmerLights_OnOff@command 00E5  
                          _Exception_Main 0644                          ?_CC2500_WriteREG 0023  
                               ??_ADC_Set 0021                      _setSw_Initialization 1997  
                                  ??_main 006E                             ___fttol@sign1 0057  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0021  
            ??_DimmerLights_SelectPointer 0021                   _setControl_Lights_Table 0CA9  
                          _setMemory_Data 1A08                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0023                                _Receive_OK 0370  
      setDimmerIntr_ControlStatus@command 0021                   _setDimmerLights_Dimming 13AE  
                               ??_IOC_ISR 007E                                 ??_IOC_Set 0021  
                             _DimmerIntr1 00AE                               _DimmerIntr2 00BA  
                _getMain_All_LightsStatus 1B20                  __size_of_setRFSW_Control 0043  
                      _RF_Timeout_Counter 1B94                   ??_Switch_Initialization 0026  
                  ?_setDimmerLights_OnOff 00E5                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0021                         ??_getRF_KeyStatus 0021  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 09C3  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0023                     _getDimmer_Load_Status 198F  
                               ??_WDT_Set 0021                          __end_of___awtoft 1EB0  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1669  
                _getMain_All_Error_Status 105A                                    _IOCBF2 1CB2  
                                  i1l1001 08D2                                    i1l1007 08E6  
                                  i1l1390 001B                                    i1l1387 0013  
                                  i1l7247 1E11                                    i1l7249 1E1A  
                                  i1l7259 1E29                                    i1l7823 0827  
                                  i1l7911 0890                                    i1l7841 083E  
                                  i1l7835 0836                                    i1l7923 089F  
                                  i1l7829 082E                                    i1l7917 0897  
                                  i1l7871 0876                                    i1l7863 0862  
                                  i1l7951 08CB                                    i1l7929 08A7  
                                  i1l7959 08DF                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0027                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B0                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1CC2  
                                  _WDTCON 0097                                    u896_25 1E46  
                      DelayTime_1us@count 0021                      Exception_Main@i_6859 0034  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0064  
           __end_of_CC2500_PowerOnInitial 1BBE                                    _Dimmer 0139  
                                  _DlySw1 01D8                                    _DlySw2 01DD  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1AB3  
              __end_of_Mcu_Initialization 1AFB                       __end_of_Buzzer_Main 13AE  
                                  _Memory 0220                                    _Timer1 00C6  
                                  ___bmul 1AB3                    __end_of_Exception_Main 071B  
                    Exception_Main@lights 0036                                    ___wmul 1D4E  
                               ??___awdiv 0025                                 ??___lbdiv 0071  
                               ??___ftadd 0048              __size_of_DelayOffPointSelect 0017  
                               ??___ftdiv 0035                                 ??___ftneg 0042  
                               ??___ftmul 0035                                 ??___fttol 0053  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0021  
                               ??___lwdiv 0025                    ??_setDimmerLights_Main 006E  
                  ??_setDimmerLights_Line 0021                                    _r_data 00D9  
                    Exception_Main@status 002F   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E6D  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021         ??_getAll_DimmerIntr_Dimming_Sw_RF 0021  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1E4C  
                                  _s_data 00DA                    ??_setDimmerLights_SwOn 002E  
                                  _setLED 1451                                    _myMain 0120  
                    ??_RF_Timeout_Counter 0021                    __end_of_setMemory_Data 1A14  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0028  
                                  _setBuz 14F8                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0030               __end_of_Load_Initialization 1931  
        ??_setDimmerLights_Initialization 0021           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1FD1                   DimmerLights_TMR_1@count 0071  
        __end_of_setDimmerIntr_Dimming_Sw 1F73                   DimmerLights_TMR_2@count 0071  
                   ___ftmul@f3_as_product 003A                 _setDimmerLights_DimmingOn 1001  
                Flash_Memory_Read@address 0023                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1B59               getMain_Lights_Count@status1 0022  
             getMain_Lights_Count@status2 0023               __size_of_DimmerLights_IOC_1 003D  
             __size_of_DimmerLights_IOC_2 003D                     __end_of_SwPointSelect 1C5C  
             __size_of_DimmerLights_TMR_1 0069               __size_of_DimmerLights_TMR_2 0069  
            __size_of_Flash_Memory_Modify 0052                   __size_of_LedPointSelect 0020  
         setDimmerIntr_Dimming_Sw@command 0021                        setTemp_Main@TempGO 00E6  
                        ___lbdiv@dividend 0072                       Flash_Memory_Write@i 0022  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1BBE  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0026  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004E  
         getDimmerIntr_DimmingValue@value 0022           setDimmerIntr_DimmingValue@value 0021  
                               ?_LED_Main 0070                                ___ftadd@f1 0042  
                              ___ftadd@f2 0045                      _getRF_KeyStatus$5063 0023  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2314 002F  
               _setDimmerLights_SwOn$2323 0030                                ___ftdiv@f1 0032  
                              ___ftdiv@f2 002F                                ___ftdiv@f3 003A  
                              ___ftneg@f1 003F                                ___awtoft@c 0029  
                     ___bmul@multiplicand 0021              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002F                                ___ftmul@f2 0032  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004F  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1DEA                             __end_of_getAD 1E8E  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0022                 setMemory_LoopSave@command 0022  
                      _LED_Initialization 1A20                           _getSw_KeyStatus 1D8B  
               ??_setControl_Lights_Table 006E                        getRF_KeyStatus@key 0022  
                         ?_setMemory_Data 0021          ??_getDimmerLights_PercentToValue 005D  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006C  
           ??_Flash_Memory_Initialization 0063                          ___lbdiv@quotient 0074  
                    _getMain_Lights_Count 1AD7                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 0202         setDimmerIntr_ControlStatus@lights 0023  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1C17  
              __end_of_set_TimeoutCleared 1956           setDimmerIntr_MaxmumValue@lights 0065  
                      __size_of_getRxData 0072                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 19FC  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0024                       _Temp_Initialization 1937  
                      ??_CC2500_WriteByte 0021                                 ?_Division 0075  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1364  
                       ??_setRFSW_Control 00E5               ?_setDimmerLights_DimmingRun 0023  
                       __end_of_Temp_Main 193D                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002E                                ??_LED_Main 0026  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 196F  
                           ??_Switch_Main 0036                            DelayTime_1us@i 0023  
                          DelayTime_1us@j 0025                      ??_LED_Initialization 0026  
                            _DimmerLights 00CF                         LedPointSelect@led 0022  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0024                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0014                               setBuz@count 002D  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1551  
                          _getDelayOff_GO 1A6E                       _CC2500_WriteCommand 1CA8  
                    ?_Temp_Initialization 0070                                   ?___bmul 0021  
                        ??_setDelayOff_GO 0068         __end_of_DimmerIntr_Initialization 105A  
           ??_DimmerLights_Initialization 0022                                   ?___wmul 0021  
                              ??_TMR1_ISR 0072                             ?_setTemp_Main 0070  
                              _getLoad_AD 0AA4                                ??_TMR1_Set 0021  
                              __pintentry 0004                    ??_setSw_Initialization 0025  
                              _getLoad_OK 197F                        __size_of_setTxData 00BB  
                                 ?_setLED 0023                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1968  
                                 ?_setBuz 002A                                 ?___awtoft 0029  
                               ?___ftpack 0021                                _getTemp_AD 125C  
      __end_of_DimmerLights_SelectPointer 1C17                _DimmerLights_SelectPointer 1C00  
                              ??_WDT_Main 0021              __end_of_setRF_Initialization 19E5  
                      _setRFSW_AdjControl 0B16                    __end_of_setProductData 1A08  
           setDimmerLights_Dimming@lights 006D                                   _IOC_ISR 19F0  
                                 _IOC_Set 19C4                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006B     getDimmerLights_Allow_Condition@lights 0026  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 10C1  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1C8E  
                  __size_of_CC2500_RxData 006E                    __size_of_CC2500_TxData 006D  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1934                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0076  
                                 _WDT_Set 19CF           __end_of_setControl_Lights_Table 0D38  
                         setRF_Main@error 00EB                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0021                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 13FF                   ??_setLoad_AH_AL_Restore 0021  
                     getCmd_Status@number 0021              __end_of_CC2500_FrequencyCabr 1A50  
                         __size_of_IO_Set 001B                       setCmd_Status@number 0023  
       __size_of_setDimmerIntr_Dimming_RF 002F         __size_of_setDimmerIntr_Dimming_Sw 002B  
                       __end_of_getBuz_GO 1A90                 ?_setDimmerIntr_Dimming_RF 0021  
                     ??_Flash_Memory_Main 0027                 ?_setDimmerIntr_Dimming_Sw 0021  
                     ??_Flash_Memory_Read 0021                    __end_of_getDelayOff_GO 1A7F  
                                 _VarLED1 01E6                                   _VarLED2 01EA  
          __end_of_getDimmerLights_Status 1A6E                         __end_of_getRxData 0AA4  
                 __end_of_getSw_KeyStatus 1DAA                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0021                      ??_setRFSW_AdjControl 0066  
                          ??_setTemp_Main 0066                           __size_of___bmul 0012  
                     setProductData@value 0063                                   ___awdiv 14A4  
                                 ___lbdiv 1E0A                                   ___ftadd 0388  
                                 ___ftdiv 0D38                                   ___ftneg 19A7  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0B96                       __end_of_Switch_Main 19F0  
                                 ___lwdiv 10F7                ??_getMain_All_LightsStatus 0021  
                 ??_Buzzer_Initialization 0021                           _getRF_KeyStatus 1A90  
                              ??___awtoft 002C                                ??___ftpack 0026  
                         __size_of_setLED 0053                      setRFSW_AdjControl@sw 0069  
                         __size_of_setBuz 0059                                   __ptext1 11E1  
                                 __ptext2 1B59                                   __ptext3 125C  
                                 __ptext4 0AA4                                   __ptext5 1E6D  
                                 __ptext6 1AFB                                   __ptext7 0002  
                                 __ptext8 193A                                   __ptext9 0DE1  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0021                   ??_setDimmerLights_OnOff 00E6  
                         ?_setProductData 0063                 __end_of_Flash_Memory_Main 10F7  
               __end_of_Flash_Memory_Read 1CA8                   ??_setDimmerLights_SwOff 0023  
                              _setRF_Main 056D                   ??_myMain_Initialization 0021  
                           _DelayOff_Main 1977                         _DimmerLights_Main 1DCA  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0023  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 195C  
              __end_of_CC2500_ClearRXFIFO 1949                  ??_setTemp_Initialization 0021  
              __end_of_CC2500_ClearTXFIFO 194D                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00ED  
                          _LedPointSelect 1DAA                           getTemp_AD@ADRES 0027  
                     _DelayOffPointSelect 1BE9                                   clrloop0 1963  
          __size_of_Switch_Initialization 0008             __end_of_Switch_Initialization 19A7  
                    end_of_initialization 004E                 ??_DelayOff_Initialization 0024  
                       _CC2500_InitSetREG 1F1E                             _DelayTime_1us 1EF8  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 2000  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 195C  
              __end_of_setRF_TransceiveGO 1B20                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 006E                      Flash_Memory_Read@ret 0024  
                                 initloop 195D                                _setSw_Main 0202  
                   CC2500_ReadByte@loop_b 0022                    setDimmerLights_SwOn@sw 0032  
                       _CC2500_ReadStatus 1ED3                      Flash_Memory_Modify@i 0026  
                   _setLED_Initialization 1AC5                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0025                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0955  
                           _CC2500_TxData 08E8                       ??_CC2500_InitSetREG 0026  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 13FF                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0021  
                            __pstringtext 1800                             _setCmd_Status 1C5C  
                     _Flash_Memory_Unlock 19B0                       ??_CC2500_ReadStatus 0023  
                 CC2500_InitSetREG@loop_c 0029                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0025  
                 setTemp_Main@DangerValue 00E9                    setSw_Initialization@sw 0025  
               __end_of_DimmerLights_Main 1DEA                        _Mcu_Initialization 1AE9  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1945  
                    __end_of_my_MainTimer 121E                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1DCA  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002E  
        getDimmerIntr_DimmingValue@lights 0023          setDimmerIntr_DimmingValue@lights 0023  
               __end_of_CC2500_InitSetREG 1F48                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0021                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 1EF8  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0023  
         getMain_All_Error_Status@command 0026                               ___ftdiv@exp 003D  
       __end_of_setDimmerLights_DimmingOn 1029                          ??_Exception_Main 002E  
                          __end_of_IO_Set 1CDD                      _setRF_Initialization 19DA  
                      _setMemory_LoopSave 1B46                               _Switch_Main 19E5  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1AA1                          ??_setMemory_Data 0022  
                             ___ftmul@exp 0039                     _CC2500_PowerOnInitial 1BA9  
             ??_DimmerIntr_Initialization 0021                      ??_Mcu_Initialization 0022  
                   ??_DelayOffPointSelect 0021                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0021                 DimmerLights_IOC_1@dimming 007D  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1AC5  
     __size_of_getDimmerIntr_DimmingValue 0016                 DimmerLights_IOC_2@dimming 007D  
                    setRF_DimmerLights@on 0066                            __end_of___wmul 1D6C  
                       getSw_KeyStatus@sw 0025               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0021             __size_of_getDimmerLights_Line 0014  
        DimmerLights_SelectPointer@lights 0022                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0068                            __end_of_setLED 14A4  
                           __pbitbssBANK0 0370             __size_of_setDimmerLights_Line 001D  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 1551  
              __end_of_DimmerLights_IOC_1 11A4                __end_of_DimmerLights_IOC_2 11E1  
                    _CC2500_FrequencyCabr 1A44                   ??_getDimmer_Load_Status 0021  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 12DD  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 087F  
              __end_of_DimmerLights_TMR_2 08E8                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0052  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1987                     ??_Flash_Memory_Modify 0025  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0021  
              __end_of_CC2500_InitPATable 1D8B           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0021                     ??_Flash_Memory_Unlock 0021  
                    __end_of_setTemp_Main 0E91                            ??_RF_RxDisable 0025  
  __end_of_getDimmerLights_PercentToValue 1798   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 1733                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 005F  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1951  
       __end_of_setDimmerIntr_MaxmumValue 1C2E                                  ??_IO_Set 0021  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 01E2  
                       __size_of_Division 000D                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0040                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 193A  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0021  
                               _Rx_Length 00D3                     setProductData@address 0065  
                     Exception_Main@count 0030                       Exception_Main@error 0031  
                                ??___bmul 0022                                  ??___wmul 0025  
                  __size_of_SwPointSelect 0017          __end_of_getMain_All_LightsStatus 1B33  
                               _Tx_Length 00D7                               __pdataBANK4 0245  
                                ??_setLED 0024                                  ?_ADC_Set 0070  
                                ??_setBuz 002C                           ??_DelayOff_Main 0069  
                       ??_CC2500_ReadByte 0021               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 108D                          _CC2500_SIDLEMode 194D  
              __size_of_DimmerLights_Main 0020                        setMemory_Data@data 0021  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0023  
                           ??_setLED_Main 0023                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002F  
                               ___latbits 0003                          _setMemory_Modify 1B33  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E5                 setRF_TransceiveGO@command 0022  
                           __pcstackBANK4 0265                      ??_set_TimeoutCleared 0021  
               _DimmerIntr_Initialization 1029                           ??_DelayTime_1us 0023  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0068  
                       ??_CC2500_PowerRST 0027                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0022  
                            ??_TouchPower 0021                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0063  
             setDimmerLights_DimmingOn@sw 0023                         ??_CC2500_WriteREG 0024  
                           ??_setRF_Learn 0021                             _DimmerLights1 0168  
                           _DimmerLights2 01D0                     CC2500_WriteREG@w_addr 0025  
                   setDelayOff_GO@command 0066            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0025             __end_of_setLoad_AH_AL_Restore 1D14  
                setRFSW_AdjControl@status 0068                           ??_CC2500_TxData 0025  
                               __pnvBANK1 00ED                            getRxData@error 00E9  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1941  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0032  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D7  
                        ___lwdiv@dividend 0023                     DelayOffPointSelect@sw 0022  
                           _getCmd_Status 1AA1                                setBuz@time 002A  
                         ??_setCmd_Status 0022                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002B                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1A7F                  ?_setDimmerLights_Dimming 006B  
     __end_of_Flash_Memory_Initialization 056D               _Flash_Memory_Initialization 047E  
                                ?___awdiv 0021                                 __ptext100 1A6E  
                               __ptext101 1AA1                                  ?___lbdiv 0070  
                               __ptext110 0B96                                 __ptext102 13AE  
                               __ptext111 19A7                                 __ptext103 0F45  
                               __ptext120 19B9                                 __ptext112 0D38  
                               __ptext104 1B0D                                 __ptext121 1000  
                               __ptext113 0388                                 __ptext105 16CE  
                               __ptext130 1A5D                                 __ptext122 1029  
                               __ptext114 1E8E                                 __ptext106 1D14  
                               __ptext131 1C00                                 __ptext123 1977  
                               __ptext115 1608                                 __ptext107 1C17  
                               __ptext140 0816                                 __ptext132 196F  
                               __ptext124 09C3                                 __ptext116 1BD3  
                               __ptext108 1F48                                 __ptext141 19F0  
                               __ptext133 1956                                 __ptext125 19FC  
                               __ptext117 121E                                 __ptext109 1669  
                                ?___ftadd 0042                                 __ptext142 11A4  
                               __ptext134 1BE9                                 __ptext126 15AC  
                               __ptext118 197F                                 __ptext143 1167  
                               __ptext135 1364                                 __ptext127 14F8  
                               __ptext119 105A                                 __ptext144 1A50  
                               __ptext136 192B                                 __ptext128 14A4  
                               __ptext145 1E0A                                 __ptext129 112E  
                               __ptext138 1E2B                                 __ptext139 087F  
                               _getRxData 0A32                                  ?___ftdiv 002F  
                                ?___ftneg 003F                                  ?___ftmul 002F  
                                ?___fttol 004F                     __size_of_my_MainTimer 003D  
                                ?___lwdiv 0021                   __end_of_setRFSW_Control 1320  
                        ??_setProductData 0064             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 192E  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0022  
                      __end_of_TouchPower 1BD3                       __size_of_setSw_Main 0186  
            CC2500_ReadStatus@status_addr 0024        __end_of_getDimmerIntr_DimmingValue 1BE9  
            ??_setDimmerIntr_DimmingValue 0022                _getDimmerIntr_DimmingValue 1BD3  
                  CC2500_WriteByte@loop_a 0022            __size_of_setDimmerLights_OnOff 00D5  
                               _r_address 00D8             __end_of_setDimmerLights_OnOff 07F0  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 1167              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1B6C                            __size_of_getAD 0021  
                        ___lwdiv@quotient 0026                             _SwPointSelect 1C45  
                     __end_of_setLED_Main 12DD                          ??_getDelayOff_GO 0023  
                  ??_setRF_Initialization 0021               __end_of_Temp_Initialization 193A  
                       _CC2500_rfSettings 182F                            ___wmul@product 0025  
                                _LED_Main 1A2C                           SwPointSelect@sw 0022  
                               clear_ram0 1962                  CC2500_InitPATable@loop_d 0028  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 11E1  
                               _setTxData 0F45       __end_of_DimmerLights_Initialization 19C4  
             _DimmerLights_Initialization 19B9                        _CC2500_ClearRXFIFO 1945  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1949  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1B94                         ??_Timeout_Counter 0021  
                              ?_getBuz_GO 0021                  setRF_DimmerLights@status 0069  
    __size_of_setDimmerIntr_ControlStatus 002F               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 0017                        _Flash_Memory_Write 1FD1  
                              ?_getRxData 0070                              ??_getLoad_AD 0025  
                                _TMR1_ISR 1E2B                    CC2500_InitSetREG@temp1 0027  
                  CC2500_InitSetREG@temp2 0028                              ??_getLoad_OK 0021  
                                _TMR1_Set 1A38                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1B0D  
                                _RF_Count 013E                      __end_of_RF_RxDisable 07FF  
                            ??_getTemp_AD 0025               __end_of_CC2500_WriteCommand 1CC2  
                  ??_CC2500_FrequencyCabr 0027                                  _WDT_Main 1AFB  
                 DlyOff_Initialization@sw 0023                     getSw_KeyStatus@status 0024  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0021  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B0  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CD                              setSw_Main@sw 0035  
                             ??_Load_Main 0029                          __size_of_IOC_ISR 000C  
          getMain_All_Error_Status@status 0027                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1A20                            ?_SwPointSelect 0070  
                             getAD@adcon0 0024                               getAD@adcon1 0021  
                          setLED_Main@led 0025                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 10C1                     _DlyOff_Initialization 1956  
       __size_of_getMain_All_LightsStatus 0013                      ??_CC2500_ClearRXFIFO 0025  
                                _Division 1A50                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0025                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1FA2  
             setDimmerLights_OnOff@lights 00E8                  _setDimmerIntr_Dimming_Sw 1F48  
                                _Fosc_Set 193D                          __size_of_WDT_Set 000B  
                   setRFSW_Control@status 00E6                        __end_of_getLoad_AD 0B16  
                      __end_of_getLoad_OK 1987                     _Switch_Initialization 199F  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0021  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 129C                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1C75  
                       getLoad_AD@channel 0027       __size_of_DimmerLights_SelectPointer 0017  
                    ??_setRF_TransceiveGO 0021              Flash_Memory_Initialization@i 0064  
                                _SwDetect 00D6                               ??_Temp_Main 0067  
                        getCmd_Status@cmd 0022                          setCmd_Status@cmd 0021  
                       setRFSW_Control@sw 00E7             _getMain_All_Error_Status$6846 0022  
           _getMain_All_Error_Status$6847 0024                  __end_of_getDimmer_LoadGO 198F  
                     _Load_Initialization 192E          ??_getDimmerLights_ValueToPercent 005D  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0024  
                            _setTemp_Main 0DE1                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 0031                                  ___awtoft 1E8E  
                        ??_LedPointSelect 0021                                  ___ftpack 1608  
           __size_of_getMain_Lights_Count 0012                    getDimmer_LoadGO@loadgo 0021  
                       getTemp_AD@channel 0026                              ??_setRF_Main 00EA  
                    CC2500_WriteREG@value 0023                               _setLED_Main 129C  
              __end_of_setRF_DimmerLights 1733            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0024  
                        getDelayOff_GO@sw 0023             __end_of_getDimmer_Load_Status 1997  
                        setDelayOff_GO@sw 006D                           ___lwdiv@divisor 0021  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0028  
                                __ptext10 1937                                  __ptext11 07FF  
                                __ptext20 0800                                  __ptext12 19E5  
                                __ptext21 199F                                  __ptext13 0202  
                                __ptext30 0B16                                  __ptext22 1997  
                                __ptext14 1B80                                  __ptext31 1B33  
                                __ptext23 1934                                  __ptext15 1001  
                                __ptext40 1BA9                                  __ptext32 1CDD  
                                __ptext24 056D                                  __ptext16 1D8B  
                                __ptext41 194D                                  __ptext33 1A90  
                                __ptext25 0A32                                  __ptext17 1C45  
                                __ptext50 1CA8                                  __ptext42 1320  
                                __ptext34 1A7F                                  __ptext26 108D  
                                __ptext18 1BBE                                  __ptext51 1941  
                                __ptext43 1F1E                                  __ptext35 07F0  
                                __ptext27 1B46                                  __ptext19 1951  
                                __ptext60 19C4                                  __ptext52 1B94  
                                __ptext44 1D6C                                  __ptext36 08E8  
                                __ptext28 0CA9                                  __ptext61 193D  
                                __ptext53 1C75                                  __ptext45 1EB0  
                                __ptext37 0955                                  __ptext29 12DD  
                                __ptext70 192E                                  __ptext62 1968  
                                __ptext54 1931                                  __ptext46 1A44  
                                __ptext38 1ED3                                  __ptext71 1CF8  
                                __ptext63 0052                                  __ptext55 19DA  
                                __ptext47 1EF8                                  __ptext39 1D31  
                                __ptext80 1A08                                  __ptext72 1A2C  
                                __ptext64 1AD7                                  __ptext56 1AE9  
                                __ptext48 1949                                  __ptext81 1FD1  
                                __ptext73 129C                                  __ptext65 198F  
                                __ptext57 19CF                                  __ptext49 1945  
                                __ptext90 1DAA                                  __ptext82 19B0  
                                __ptext74 1A20                                  __ptext66 1987  
                                __ptext58 1A38                                  __ptext91 1FA2  
                                __ptext83 1C8E                                  __ptext75 1AC5  
                                __ptext67 1E4C                                  __ptext59 1CC2  
                                __ptext92 1C2E                                  __ptext84 0644  
                                __ptext76 10C1                                  __ptext68 1D4E  
                                __ptext93 1F73                                  __ptext85 1B6C  
                                __ptext77 13FF                                  __ptext69 10F7  
                                __ptext94 0C1D                                  __ptext86 1DCA  
                                __ptext78 1A14                                  __ptext95 1AB3  
                                __ptext87 1798                                  __ptext79 047E  
                                __ptext96 1C5C                                  __ptext88 071B  
                                __ptext97 1B20                                  __ptext89 1451  
                                __ptext98 1733                                  __ptext99 0E91  
                                __product 0245                   ??_setLED_Initialization 0025  
                ??_getDimmerLights_Status 0023              __end_of_getDimmerLights_Line 1B80  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1D31  
                      _DimmerLights_IOC_1 1167                        _DimmerLights_IOC_2 11A4  
            __end_of_setDimmerLights_SwOn 1608                              ??_setSw_Main 0033  
                  ??_setRF_TimeoutCleared 0021              ??_setDimmerLights_DimmingRun 0024  
                           setLED@command 0023                             __size_of_main 005B  
                             _setRF_Learn 1B80        __size_of_DimmerIntr_Initialization 0031  
                         ??_getCmd_Status 0021                        _DimmerLights_TMR_1 0816  
                      _DimmerLights_TMR_2 087F                  __end_of_CC2500_SIDLEMode 1951  
              setDimmerLights_Main@lights 00E9               __end_of_DelayOffPointSelect 1C00  
              CC2500_WriteCommand@command 0024                           _CC2500_ReadByte 1D31  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1D6C  
                __end_of_setMemory_Modify 1B46      _getAll_DimmerIntr_Dimming_Sw_RF$2268 0022  
    _getAll_DimmerIntr_Dimming_Sw_RF$2269 0023                       ?_DimmerLights_IOC_1 0070  
                     ?_DimmerLights_IOC_2 0070                        __end_of_setRF_Main 0644  
                             ??_getBuz_GO 0023                       ?_DimmerLights_TMR_1 0070  
                     ?_DimmerLights_TMR_2 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00E8  
                            getLoad_OK@ok 0021                __end_of_RF_Timeout_Counter 1BA9  
                                main@argc 0265                                  main@argv 0267  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6111 0022  
                    _getSw_KeyStatus$6112 0023       getDimmerLights_ValueToPercent@value 005F  
                         _CC2500_PowerRST 1320                  __size_of_getSw_KeyStatus 001F  
      __end_of_setDimmerIntr_DimmingValue 1C45                _setDimmerIntr_DimmingValue 1C2E  
             __end_of_Flash_Memory_Modify 1451                               _setLog_Code 108D  
             __end_of_Flash_Memory_Unlock 19B9                           ??_SwPointSelect 0021  
                         _CC2500_WriteREG 1EB0                        __end_of_setSw_Main 0388  
                   ??_Load_Initialization 0023                      ??_DimmerLights_IOC_1 007A  
                    ??_DimmerLights_IOC_2 007A           getDimmerLights_PercentToValue@i 0060  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 0371  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                    ??_DimmerLights_TMR_2 0070                            Division@result 0079  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0021  
              setDimmerLights_Line@lights 0021                   setDimmerLights_SwOff@sw 0023  
             __size_of_setMemory_LoopSave 0013                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0026                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 006A                           setDelayOff_GO@j 006B  
                         setDelayOff_GO@k 006C                   ??_CC2500_PowerOnInitial 002A  
                   setTemp_Main@SafeValue 00E7    __end_of_setDimmerLights_Initialization 1001  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1000  
              ?_setDimmerIntr_MaxmumValue 0063                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0021                    CC2500_InitPATable@temp 0027  
                         getLoad_AD@ADRES 002A                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1931                               getLoad_AD@i 002C  
                             getLoad_AD@j 0029                               getLoad_AD@k 0028  
                    _Flash_Memory_Erasing 1A14                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D4                   __size_of_Exception_Main 00D7  
                           Division@value 0078           __end_of_DelayOff_Initialization 1977  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 197F  
                     ??_RF_Initialization 0022                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0C1D               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 008F          __size_of_setDimmerLights_Dimming 0051  
             getDimmer_Load_Status@status 0021      __size_of_Flash_Memory_Initialization 00EF  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0066  
                   setMemory_Data@address 0023                     __end_of_DelayTime_1us 1F1E  
                 __end_of_CC2500_ReadByte 1D4E              __end_of_setSw_Initialization 199F  
                         _Timeout_Counter 0800           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 0060                              _RF_RxDisable 07F0  
              __end_of_LED_Initialization 1A2C            __end_of_setTemp_Initialization 0800  
                             Division@num 0075                   setMemory_Modify@command 0022  
                 DimmerLights_IOC_1@count 007C                   DimmerLights_IOC_2@count 007C  
               __end_of_RF_Initialization 1934                     __end_of_CC2500_RxData 09C3  
                   __end_of_CC2500_TxData 0955                     _setLoad_AH_AL_Restore 1CF8  
                 __end_of_CC2500_PowerRST 1364  
