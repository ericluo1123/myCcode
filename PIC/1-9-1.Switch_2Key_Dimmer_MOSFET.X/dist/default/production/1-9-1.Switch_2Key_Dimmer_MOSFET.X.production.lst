

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Mar 20 16:20:40 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	intentry,global,class=CODE,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,inline,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   172                           	psect	text152,local,class=CODE,merge=1,inline,delta=2
   173                           	psect	text153,local,class=CODE,merge=1,inline,delta=2
   174                           	psect	text154,local,class=CODE,merge=1,inline,delta=2
   175                           	psect	text155,local,class=CODE,merge=1,delta=2
   176                           	dabs	1,0x7E,2
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  008C                     	;# 
   205  008D                     	;# 
   206  008E                     	;# 
   207  0090                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0099                     	;# 
   214  009A                     	;# 
   215  009B                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  0116                     	;# 
   224  0117                     	;# 
   225  011D                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  018E                     	;# 
   229  0191                     	;# 
   230  0191                     	;# 
   231  0192                     	;# 
   232  0193                     	;# 
   233  0193                     	;# 
   234  0194                     	;# 
   235  0195                     	;# 
   236  0196                     	;# 
   237  0197                     	;# 
   238  0199                     	;# 
   239  019A                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019C                     	;# 
   245  019C                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019F                     	;# 
   249  020D                     	;# 
   250  0210                     	;# 
   251  0211                     	;# 
   252  0211                     	;# 
   253  0212                     	;# 
   254  0212                     	;# 
   255  0213                     	;# 
   256  0213                     	;# 
   257  0214                     	;# 
   258  0214                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0215                     	;# 
   262  0216                     	;# 
   263  0216                     	;# 
   264  0217                     	;# 
   265  0217                     	;# 
   266  0291                     	;# 
   267  0291                     	;# 
   268  0292                     	;# 
   269  0293                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  029A                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  008C                     	;# 
   316  008D                     	;# 
   317  008E                     	;# 
   318  0090                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0095                     	;# 
   322  0096                     	;# 
   323  0097                     	;# 
   324  0099                     	;# 
   325  009A                     	;# 
   326  009B                     	;# 
   327  009B                     	;# 
   328  009C                     	;# 
   329  009D                     	;# 
   330  009E                     	;# 
   331  010C                     	;# 
   332  010D                     	;# 
   333  010E                     	;# 
   334  0116                     	;# 
   335  0117                     	;# 
   336  011D                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  018E                     	;# 
   340  0191                     	;# 
   341  0191                     	;# 
   342  0192                     	;# 
   343  0193                     	;# 
   344  0193                     	;# 
   345  0194                     	;# 
   346  0195                     	;# 
   347  0196                     	;# 
   348  0197                     	;# 
   349  0199                     	;# 
   350  019A                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019B                     	;# 
   354  019B                     	;# 
   355  019C                     	;# 
   356  019C                     	;# 
   357  019D                     	;# 
   358  019E                     	;# 
   359  019F                     	;# 
   360  020D                     	;# 
   361  0210                     	;# 
   362  0211                     	;# 
   363  0211                     	;# 
   364  0212                     	;# 
   365  0212                     	;# 
   366  0213                     	;# 
   367  0213                     	;# 
   368  0214                     	;# 
   369  0214                     	;# 
   370  0215                     	;# 
   371  0215                     	;# 
   372  0215                     	;# 
   373  0216                     	;# 
   374  0216                     	;# 
   375  0217                     	;# 
   376  0217                     	;# 
   377  0291                     	;# 
   378  0291                     	;# 
   379  0292                     	;# 
   380  0293                     	;# 
   381  0298                     	;# 
   382  0298                     	;# 
   383  0299                     	;# 
   384  029A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  0FE4                     	;# 
   389  0FE5                     	;# 
   390  0FE6                     	;# 
   391  0FE7                     	;# 
   392  0FE8                     	;# 
   393  0FE9                     	;# 
   394  0FEA                     	;# 
   395  0FEB                     	;# 
   396  0FED                     	;# 
   397  0FEE                     	;# 
   398  0FEF                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  0010                     	;# 
   415  0011                     	;# 
   416  0012                     	;# 
   417  0015                     	;# 
   418  0016                     	;# 
   419  0016                     	;# 
   420  0017                     	;# 
   421  0018                     	;# 
   422  0019                     	;# 
   423  001A                     	;# 
   424  001B                     	;# 
   425  001C                     	;# 
   426  008C                     	;# 
   427  008D                     	;# 
   428  008E                     	;# 
   429  0090                     	;# 
   430  0091                     	;# 
   431  0092                     	;# 
   432  0095                     	;# 
   433  0096                     	;# 
   434  0097                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  0116                     	;# 
   446  0117                     	;# 
   447  011D                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  018E                     	;# 
   451  0191                     	;# 
   452  0191                     	;# 
   453  0192                     	;# 
   454  0193                     	;# 
   455  0193                     	;# 
   456  0194                     	;# 
   457  0195                     	;# 
   458  0196                     	;# 
   459  0197                     	;# 
   460  0199                     	;# 
   461  019A                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019B                     	;# 
   466  019C                     	;# 
   467  019C                     	;# 
   468  019D                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  020D                     	;# 
   472  0210                     	;# 
   473  0211                     	;# 
   474  0211                     	;# 
   475  0212                     	;# 
   476  0212                     	;# 
   477  0213                     	;# 
   478  0213                     	;# 
   479  0214                     	;# 
   480  0214                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0216                     	;# 
   485  0216                     	;# 
   486  0217                     	;# 
   487  0217                     	;# 
   488  0291                     	;# 
   489  0291                     	;# 
   490  0292                     	;# 
   491  0293                     	;# 
   492  0298                     	;# 
   493  0298                     	;# 
   494  0299                     	;# 
   495  029A                     	;# 
   496  0394                     	;# 
   497  0395                     	;# 
   498  0396                     	;# 
   499  0FE4                     	;# 
   500  0FE5                     	;# 
   501  0FE6                     	;# 
   502  0FE7                     	;# 
   503  0FE8                     	;# 
   504  0FE9                     	;# 
   505  0FEA                     	;# 
   506  0FEB                     	;# 
   507  0FED                     	;# 
   508  0FEE                     	;# 
   509  0FEF                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  0010                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0015                     	;# 
   529  0016                     	;# 
   530  0016                     	;# 
   531  0017                     	;# 
   532  0018                     	;# 
   533  0019                     	;# 
   534  001A                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  008C                     	;# 
   538  008D                     	;# 
   539  008E                     	;# 
   540  0090                     	;# 
   541  0091                     	;# 
   542  0092                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  010C                     	;# 
   554  010D                     	;# 
   555  010E                     	;# 
   556  0116                     	;# 
   557  0117                     	;# 
   558  011D                     	;# 
   559  018C                     	;# 
   560  018D                     	;# 
   561  018E                     	;# 
   562  0191                     	;# 
   563  0191                     	;# 
   564  0192                     	;# 
   565  0193                     	;# 
   566  0193                     	;# 
   567  0194                     	;# 
   568  0195                     	;# 
   569  0196                     	;# 
   570  0197                     	;# 
   571  0199                     	;# 
   572  019A                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019B                     	;# 
   576  019B                     	;# 
   577  019C                     	;# 
   578  019C                     	;# 
   579  019D                     	;# 
   580  019E                     	;# 
   581  019F                     	;# 
   582  020D                     	;# 
   583  0210                     	;# 
   584  0211                     	;# 
   585  0211                     	;# 
   586  0212                     	;# 
   587  0212                     	;# 
   588  0213                     	;# 
   589  0213                     	;# 
   590  0214                     	;# 
   591  0214                     	;# 
   592  0215                     	;# 
   593  0215                     	;# 
   594  0215                     	;# 
   595  0216                     	;# 
   596  0216                     	;# 
   597  0217                     	;# 
   598  0217                     	;# 
   599  0291                     	;# 
   600  0291                     	;# 
   601  0292                     	;# 
   602  0293                     	;# 
   603  0298                     	;# 
   604  0298                     	;# 
   605  0299                     	;# 
   606  029A                     	;# 
   607  0394                     	;# 
   608  0395                     	;# 
   609  0396                     	;# 
   610  0FE4                     	;# 
   611  0FE5                     	;# 
   612  0FE6                     	;# 
   613  0FE7                     	;# 
   614  0FE8                     	;# 
   615  0FE9                     	;# 
   616  0FEA                     	;# 
   617  0FEB                     	;# 
   618  0FED                     	;# 
   619  0FEE                     	;# 
   620  0FEF                     	;# 
   621  0000                     	;# 
   622  0001                     	;# 
   623  0002                     	;# 
   624  0003                     	;# 
   625  0004                     	;# 
   626  0005                     	;# 
   627  0006                     	;# 
   628  0007                     	;# 
   629  0008                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  0010                     	;# 
   637  0011                     	;# 
   638  0012                     	;# 
   639  0015                     	;# 
   640  0016                     	;# 
   641  0016                     	;# 
   642  0017                     	;# 
   643  0018                     	;# 
   644  0019                     	;# 
   645  001A                     	;# 
   646  001B                     	;# 
   647  001C                     	;# 
   648  008C                     	;# 
   649  008D                     	;# 
   650  008E                     	;# 
   651  0090                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0095                     	;# 
   655  0096                     	;# 
   656  0097                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  010C                     	;# 
   665  010D                     	;# 
   666  010E                     	;# 
   667  0116                     	;# 
   668  0117                     	;# 
   669  011D                     	;# 
   670  018C                     	;# 
   671  018D                     	;# 
   672  018E                     	;# 
   673  0191                     	;# 
   674  0191                     	;# 
   675  0192                     	;# 
   676  0193                     	;# 
   677  0193                     	;# 
   678  0194                     	;# 
   679  0195                     	;# 
   680  0196                     	;# 
   681  0197                     	;# 
   682  0199                     	;# 
   683  019A                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020D                     	;# 
   694  0210                     	;# 
   695  0211                     	;# 
   696  0211                     	;# 
   697  0212                     	;# 
   698  0212                     	;# 
   699  0213                     	;# 
   700  0213                     	;# 
   701  0214                     	;# 
   702  0214                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0216                     	;# 
   707  0216                     	;# 
   708  0217                     	;# 
   709  0217                     	;# 
   710  0291                     	;# 
   711  0291                     	;# 
   712  0292                     	;# 
   713  0293                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  0394                     	;# 
   719  0395                     	;# 
   720  0396                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0010                     	;# 
   748  0011                     	;# 
   749  0012                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  008C                     	;# 
   760  008D                     	;# 
   761  008E                     	;# 
   762  0090                     	;# 
   763  0091                     	;# 
   764  0092                     	;# 
   765  0095                     	;# 
   766  0096                     	;# 
   767  0097                     	;# 
   768  0099                     	;# 
   769  009A                     	;# 
   770  009B                     	;# 
   771  009B                     	;# 
   772  009C                     	;# 
   773  009D                     	;# 
   774  009E                     	;# 
   775  010C                     	;# 
   776  010D                     	;# 
   777  010E                     	;# 
   778  0116                     	;# 
   779  0117                     	;# 
   780  011D                     	;# 
   781  018C                     	;# 
   782  018D                     	;# 
   783  018E                     	;# 
   784  0191                     	;# 
   785  0191                     	;# 
   786  0192                     	;# 
   787  0193                     	;# 
   788  0193                     	;# 
   789  0194                     	;# 
   790  0195                     	;# 
   791  0196                     	;# 
   792  0197                     	;# 
   793  0199                     	;# 
   794  019A                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019B                     	;# 
   799  019C                     	;# 
   800  019C                     	;# 
   801  019D                     	;# 
   802  019E                     	;# 
   803  019F                     	;# 
   804  020D                     	;# 
   805  0210                     	;# 
   806  0211                     	;# 
   807  0211                     	;# 
   808  0212                     	;# 
   809  0212                     	;# 
   810  0213                     	;# 
   811  0213                     	;# 
   812  0214                     	;# 
   813  0214                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0215                     	;# 
   817  0216                     	;# 
   818  0216                     	;# 
   819  0217                     	;# 
   820  0217                     	;# 
   821  0291                     	;# 
   822  0291                     	;# 
   823  0292                     	;# 
   824  0293                     	;# 
   825  0298                     	;# 
   826  0298                     	;# 
   827  0299                     	;# 
   828  029A                     	;# 
   829  0394                     	;# 
   830  0395                     	;# 
   831  0396                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000D                     	;# 
   857  000E                     	;# 
   858  0010                     	;# 
   859  0011                     	;# 
   860  0012                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  008C                     	;# 
   871  008D                     	;# 
   872  008E                     	;# 
   873  0090                     	;# 
   874  0091                     	;# 
   875  0092                     	;# 
   876  0095                     	;# 
   877  0096                     	;# 
   878  0097                     	;# 
   879  0099                     	;# 
   880  009A                     	;# 
   881  009B                     	;# 
   882  009B                     	;# 
   883  009C                     	;# 
   884  009D                     	;# 
   885  009E                     	;# 
   886  010C                     	;# 
   887  010D                     	;# 
   888  010E                     	;# 
   889  0116                     	;# 
   890  0117                     	;# 
   891  011D                     	;# 
   892  018C                     	;# 
   893  018D                     	;# 
   894  018E                     	;# 
   895  0191                     	;# 
   896  0191                     	;# 
   897  0192                     	;# 
   898  0193                     	;# 
   899  0193                     	;# 
   900  0194                     	;# 
   901  0195                     	;# 
   902  0196                     	;# 
   903  0197                     	;# 
   904  0199                     	;# 
   905  019A                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019B                     	;# 
   909  019B                     	;# 
   910  019C                     	;# 
   911  019C                     	;# 
   912  019D                     	;# 
   913  019E                     	;# 
   914  019F                     	;# 
   915  020D                     	;# 
   916  0210                     	;# 
   917  0211                     	;# 
   918  0211                     	;# 
   919  0212                     	;# 
   920  0212                     	;# 
   921  0213                     	;# 
   922  0213                     	;# 
   923  0214                     	;# 
   924  0214                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0216                     	;# 
   929  0216                     	;# 
   930  0217                     	;# 
   931  0217                     	;# 
   932  0291                     	;# 
   933  0291                     	;# 
   934  0292                     	;# 
   935  0293                     	;# 
   936  0298                     	;# 
   937  0298                     	;# 
   938  0299                     	;# 
   939  029A                     	;# 
   940  0394                     	;# 
   941  0395                     	;# 
   942  0396                     	;# 
   943  0FE4                     	;# 
   944  0FE5                     	;# 
   945  0FE6                     	;# 
   946  0FE7                     	;# 
   947  0FE8                     	;# 
   948  0FE9                     	;# 
   949  0FEA                     	;# 
   950  0FEB                     	;# 
   951  0FED                     	;# 
   952  0FEE                     	;# 
   953  0FEF                     	;# 
   954  0000                     	;# 
   955  0001                     	;# 
   956  0002                     	;# 
   957  0003                     	;# 
   958  0004                     	;# 
   959  0005                     	;# 
   960  0006                     	;# 
   961  0007                     	;# 
   962  0008                     	;# 
   963  0009                     	;# 
   964  000A                     	;# 
   965  000B                     	;# 
   966  000C                     	;# 
   967  000D                     	;# 
   968  000E                     	;# 
   969  0010                     	;# 
   970  0011                     	;# 
   971  0012                     	;# 
   972  0015                     	;# 
   973  0016                     	;# 
   974  0016                     	;# 
   975  0017                     	;# 
   976  0018                     	;# 
   977  0019                     	;# 
   978  001A                     	;# 
   979  001B                     	;# 
   980  001C                     	;# 
   981  008C                     	;# 
   982  008D                     	;# 
   983  008E                     	;# 
   984  0090                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0095                     	;# 
   988  0096                     	;# 
   989  0097                     	;# 
   990  0099                     	;# 
   991  009A                     	;# 
   992  009B                     	;# 
   993  009B                     	;# 
   994  009C                     	;# 
   995  009D                     	;# 
   996  009E                     	;# 
   997  010C                     	;# 
   998  010D                     	;# 
   999  010E                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  011D                     	;# 
  1003  018C                     	;# 
  1004  018D                     	;# 
  1005  018E                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0197                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019B                     	;# 
  1020  019B                     	;# 
  1021  019C                     	;# 
  1022  019C                     	;# 
  1023  019D                     	;# 
  1024  019E                     	;# 
  1025  019F                     	;# 
  1026  020D                     	;# 
  1027  0210                     	;# 
  1028  0211                     	;# 
  1029  0211                     	;# 
  1030  0212                     	;# 
  1031  0212                     	;# 
  1032  0213                     	;# 
  1033  0213                     	;# 
  1034  0214                     	;# 
  1035  0214                     	;# 
  1036  0215                     	;# 
  1037  0215                     	;# 
  1038  0215                     	;# 
  1039  0216                     	;# 
  1040  0216                     	;# 
  1041  0217                     	;# 
  1042  0217                     	;# 
  1043  0291                     	;# 
  1044  0291                     	;# 
  1045  0292                     	;# 
  1046  0293                     	;# 
  1047  0298                     	;# 
  1048  0298                     	;# 
  1049  0299                     	;# 
  1050  029A                     	;# 
  1051  0394                     	;# 
  1052  0395                     	;# 
  1053  0396                     	;# 
  1054  0FE4                     	;# 
  1055  0FE5                     	;# 
  1056  0FE6                     	;# 
  1057  0FE7                     	;# 
  1058  0FE8                     	;# 
  1059  0FE9                     	;# 
  1060  0FEA                     	;# 
  1061  0FEB                     	;# 
  1062  0FED                     	;# 
  1063  0FEE                     	;# 
  1064  0FEF                     	;# 
  1065  0000                     	;# 
  1066  0001                     	;# 
  1067  0002                     	;# 
  1068  0003                     	;# 
  1069  0004                     	;# 
  1070  0005                     	;# 
  1071  0006                     	;# 
  1072  0007                     	;# 
  1073  0008                     	;# 
  1074  0009                     	;# 
  1075  000A                     	;# 
  1076  000B                     	;# 
  1077  000C                     	;# 
  1078  000D                     	;# 
  1079  000E                     	;# 
  1080  0010                     	;# 
  1081  0011                     	;# 
  1082  0012                     	;# 
  1083  0015                     	;# 
  1084  0016                     	;# 
  1085  0016                     	;# 
  1086  0017                     	;# 
  1087  0018                     	;# 
  1088  0019                     	;# 
  1089  001A                     	;# 
  1090  001B                     	;# 
  1091  001C                     	;# 
  1092  008C                     	;# 
  1093  008D                     	;# 
  1094  008E                     	;# 
  1095  0090                     	;# 
  1096  0091                     	;# 
  1097  0092                     	;# 
  1098  0095                     	;# 
  1099  0096                     	;# 
  1100  0097                     	;# 
  1101  0099                     	;# 
  1102  009A                     	;# 
  1103  009B                     	;# 
  1104  009B                     	;# 
  1105  009C                     	;# 
  1106  009D                     	;# 
  1107  009E                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  0116                     	;# 
  1112  0117                     	;# 
  1113  011D                     	;# 
  1114  018C                     	;# 
  1115  018D                     	;# 
  1116  018E                     	;# 
  1117  0191                     	;# 
  1118  0191                     	;# 
  1119  0192                     	;# 
  1120  0193                     	;# 
  1121  0193                     	;# 
  1122  0194                     	;# 
  1123  0195                     	;# 
  1124  0196                     	;# 
  1125  0197                     	;# 
  1126  0199                     	;# 
  1127  019A                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019B                     	;# 
  1132  019C                     	;# 
  1133  019C                     	;# 
  1134  019D                     	;# 
  1135  019E                     	;# 
  1136  019F                     	;# 
  1137  020D                     	;# 
  1138  0210                     	;# 
  1139  0211                     	;# 
  1140  0211                     	;# 
  1141  0212                     	;# 
  1142  0212                     	;# 
  1143  0213                     	;# 
  1144  0213                     	;# 
  1145  0214                     	;# 
  1146  0214                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0215                     	;# 
  1150  0216                     	;# 
  1151  0216                     	;# 
  1152  0217                     	;# 
  1153  0217                     	;# 
  1154  0291                     	;# 
  1155  0291                     	;# 
  1156  0292                     	;# 
  1157  0293                     	;# 
  1158  0298                     	;# 
  1159  0298                     	;# 
  1160  0299                     	;# 
  1161  029A                     	;# 
  1162  0394                     	;# 
  1163  0395                     	;# 
  1164  0396                     	;# 
  1165  0FE4                     	;# 
  1166  0FE5                     	;# 
  1167  0FE6                     	;# 
  1168  0FE7                     	;# 
  1169  0FE8                     	;# 
  1170  0FE9                     	;# 
  1171  0FEA                     	;# 
  1172  0FEB                     	;# 
  1173  0FED                     	;# 
  1174  0FEE                     	;# 
  1175  0FEF                     	;# 
  1176  0000                     	;# 
  1177  0001                     	;# 
  1178  0002                     	;# 
  1179  0003                     	;# 
  1180  0004                     	;# 
  1181  0005                     	;# 
  1182  0006                     	;# 
  1183  0007                     	;# 
  1184  0008                     	;# 
  1185  0009                     	;# 
  1186  000A                     	;# 
  1187  000B                     	;# 
  1188  000C                     	;# 
  1189  000D                     	;# 
  1190  000E                     	;# 
  1191  0010                     	;# 
  1192  0011                     	;# 
  1193  0012                     	;# 
  1194  0015                     	;# 
  1195  0016                     	;# 
  1196  0016                     	;# 
  1197  0017                     	;# 
  1198  0018                     	;# 
  1199  0019                     	;# 
  1200  001A                     	;# 
  1201  001B                     	;# 
  1202  001C                     	;# 
  1203  008C                     	;# 
  1204  008D                     	;# 
  1205  008E                     	;# 
  1206  0090                     	;# 
  1207  0091                     	;# 
  1208  0092                     	;# 
  1209  0095                     	;# 
  1210  0096                     	;# 
  1211  0097                     	;# 
  1212  0099                     	;# 
  1213  009A                     	;# 
  1214  009B                     	;# 
  1215  009B                     	;# 
  1216  009C                     	;# 
  1217  009D                     	;# 
  1218  009E                     	;# 
  1219  010C                     	;# 
  1220  010D                     	;# 
  1221  010E                     	;# 
  1222  0116                     	;# 
  1223  0117                     	;# 
  1224  011D                     	;# 
  1225  018C                     	;# 
  1226  018D                     	;# 
  1227  018E                     	;# 
  1228  0191                     	;# 
  1229  0191                     	;# 
  1230  0192                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0194                     	;# 
  1234  0195                     	;# 
  1235  0196                     	;# 
  1236  0197                     	;# 
  1237  0199                     	;# 
  1238  019A                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  019C                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019F                     	;# 
  1248  020D                     	;# 
  1249  0210                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0213                     	;# 
  1256  0214                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0291                     	;# 
  1266  0291                     	;# 
  1267  0292                     	;# 
  1268  0293                     	;# 
  1269  0298                     	;# 
  1270  0298                     	;# 
  1271  0299                     	;# 
  1272  029A                     	;# 
  1273  0394                     	;# 
  1274  0395                     	;# 
  1275  0396                     	;# 
  1276  0FE4                     	;# 
  1277  0FE5                     	;# 
  1278  0FE6                     	;# 
  1279  0FE7                     	;# 
  1280  0FE8                     	;# 
  1281  0FE9                     	;# 
  1282  0FEA                     	;# 
  1283  0FEB                     	;# 
  1284  0FED                     	;# 
  1285  0FEE                     	;# 
  1286  0FEF                     	;# 
  1287  0000                     	;# 
  1288  0001                     	;# 
  1289  0002                     	;# 
  1290  0003                     	;# 
  1291  0004                     	;# 
  1292  0005                     	;# 
  1293  0006                     	;# 
  1294  0007                     	;# 
  1295  0008                     	;# 
  1296  0009                     	;# 
  1297  000A                     	;# 
  1298  000B                     	;# 
  1299  000C                     	;# 
  1300  000D                     	;# 
  1301  000E                     	;# 
  1302  0010                     	;# 
  1303  0011                     	;# 
  1304  0012                     	;# 
  1305  0015                     	;# 
  1306  0016                     	;# 
  1307  0016                     	;# 
  1308  0017                     	;# 
  1309  0018                     	;# 
  1310  0019                     	;# 
  1311  001A                     	;# 
  1312  001B                     	;# 
  1313  001C                     	;# 
  1314  008C                     	;# 
  1315  008D                     	;# 
  1316  008E                     	;# 
  1317  0090                     	;# 
  1318  0091                     	;# 
  1319  0092                     	;# 
  1320  0095                     	;# 
  1321  0096                     	;# 
  1322  0097                     	;# 
  1323  0099                     	;# 
  1324  009A                     	;# 
  1325  009B                     	;# 
  1326  009B                     	;# 
  1327  009C                     	;# 
  1328  009D                     	;# 
  1329  009E                     	;# 
  1330  010C                     	;# 
  1331  010D                     	;# 
  1332  010E                     	;# 
  1333  0116                     	;# 
  1334  0117                     	;# 
  1335  011D                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  018E                     	;# 
  1339  0191                     	;# 
  1340  0191                     	;# 
  1341  0192                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0197                     	;# 
  1348  0199                     	;# 
  1349  019A                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019B                     	;# 
  1353  019B                     	;# 
  1354  019C                     	;# 
  1355  019C                     	;# 
  1356  019D                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  020D                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0213                     	;# 
  1367  0214                     	;# 
  1368  0214                     	;# 
  1369  0215                     	;# 
  1370  0215                     	;# 
  1371  0215                     	;# 
  1372  0216                     	;# 
  1373  0216                     	;# 
  1374  0217                     	;# 
  1375  0217                     	;# 
  1376  0291                     	;# 
  1377  0291                     	;# 
  1378  0292                     	;# 
  1379  0293                     	;# 
  1380  0298                     	;# 
  1381  0298                     	;# 
  1382  0299                     	;# 
  1383  029A                     	;# 
  1384  0394                     	;# 
  1385  0395                     	;# 
  1386  0396                     	;# 
  1387  0FE4                     	;# 
  1388  0FE5                     	;# 
  1389  0FE6                     	;# 
  1390  0FE7                     	;# 
  1391  0FE8                     	;# 
  1392  0FE9                     	;# 
  1393  0FEA                     	;# 
  1394  0FEB                     	;# 
  1395  0FED                     	;# 
  1396  0FEE                     	;# 
  1397  0FEF                     	;# 
  1398  0000                     	;# 
  1399  0001                     	;# 
  1400  0002                     	;# 
  1401  0003                     	;# 
  1402  0004                     	;# 
  1403  0005                     	;# 
  1404  0006                     	;# 
  1405  0007                     	;# 
  1406  0008                     	;# 
  1407  0009                     	;# 
  1408  000A                     	;# 
  1409  000B                     	;# 
  1410  000C                     	;# 
  1411  000D                     	;# 
  1412  000E                     	;# 
  1413  0010                     	;# 
  1414  0011                     	;# 
  1415  0012                     	;# 
  1416  0015                     	;# 
  1417  0016                     	;# 
  1418  0016                     	;# 
  1419  0017                     	;# 
  1420  0018                     	;# 
  1421  0019                     	;# 
  1422  001A                     	;# 
  1423  001B                     	;# 
  1424  001C                     	;# 
  1425  008C                     	;# 
  1426  008D                     	;# 
  1427  008E                     	;# 
  1428  0090                     	;# 
  1429  0091                     	;# 
  1430  0092                     	;# 
  1431  0095                     	;# 
  1432  0096                     	;# 
  1433  0097                     	;# 
  1434  0099                     	;# 
  1435  009A                     	;# 
  1436  009B                     	;# 
  1437  009B                     	;# 
  1438  009C                     	;# 
  1439  009D                     	;# 
  1440  009E                     	;# 
  1441  010C                     	;# 
  1442  010D                     	;# 
  1443  010E                     	;# 
  1444  0116                     	;# 
  1445  0117                     	;# 
  1446  011D                     	;# 
  1447  018C                     	;# 
  1448  018D                     	;# 
  1449  018E                     	;# 
  1450  0191                     	;# 
  1451  0191                     	;# 
  1452  0192                     	;# 
  1453  0193                     	;# 
  1454  0193                     	;# 
  1455  0194                     	;# 
  1456  0195                     	;# 
  1457  0196                     	;# 
  1458  0197                     	;# 
  1459  0199                     	;# 
  1460  019A                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019B                     	;# 
  1464  019B                     	;# 
  1465  019C                     	;# 
  1466  019C                     	;# 
  1467  019D                     	;# 
  1468  019E                     	;# 
  1469  019F                     	;# 
  1470  020D                     	;# 
  1471  0210                     	;# 
  1472  0211                     	;# 
  1473  0211                     	;# 
  1474  0212                     	;# 
  1475  0212                     	;# 
  1476  0213                     	;# 
  1477  0213                     	;# 
  1478  0214                     	;# 
  1479  0214                     	;# 
  1480  0215                     	;# 
  1481  0215                     	;# 
  1482  0215                     	;# 
  1483  0216                     	;# 
  1484  0216                     	;# 
  1485  0217                     	;# 
  1486  0217                     	;# 
  1487  0291                     	;# 
  1488  0291                     	;# 
  1489  0292                     	;# 
  1490  0293                     	;# 
  1491  0298                     	;# 
  1492  0298                     	;# 
  1493  0299                     	;# 
  1494  029A                     	;# 
  1495  0394                     	;# 
  1496  0395                     	;# 
  1497  0396                     	;# 
  1498  0FE4                     	;# 
  1499  0FE5                     	;# 
  1500  0FE6                     	;# 
  1501  0FE7                     	;# 
  1502  0FE8                     	;# 
  1503  0FE9                     	;# 
  1504  0FEA                     	;# 
  1505  0FEB                     	;# 
  1506  0FED                     	;# 
  1507  0FEE                     	;# 
  1508  0FEF                     	;# 
  1509  0000                     	;# 
  1510  0001                     	;# 
  1511  0002                     	;# 
  1512  0003                     	;# 
  1513  0004                     	;# 
  1514  0005                     	;# 
  1515  0006                     	;# 
  1516  0007                     	;# 
  1517  0008                     	;# 
  1518  0009                     	;# 
  1519  000A                     	;# 
  1520  000B                     	;# 
  1521  000C                     	;# 
  1522  000D                     	;# 
  1523  000E                     	;# 
  1524  0010                     	;# 
  1525  0011                     	;# 
  1526  0012                     	;# 
  1527  0015                     	;# 
  1528  0016                     	;# 
  1529  0016                     	;# 
  1530  0017                     	;# 
  1531  0018                     	;# 
  1532  0019                     	;# 
  1533  001A                     	;# 
  1534  001B                     	;# 
  1535  001C                     	;# 
  1536  008C                     	;# 
  1537  008D                     	;# 
  1538  008E                     	;# 
  1539  0090                     	;# 
  1540  0091                     	;# 
  1541  0092                     	;# 
  1542  0095                     	;# 
  1543  0096                     	;# 
  1544  0097                     	;# 
  1545  0099                     	;# 
  1546  009A                     	;# 
  1547  009B                     	;# 
  1548  009B                     	;# 
  1549  009C                     	;# 
  1550  009D                     	;# 
  1551  009E                     	;# 
  1552  010C                     	;# 
  1553  010D                     	;# 
  1554  010E                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  011D                     	;# 
  1558  018C                     	;# 
  1559  018D                     	;# 
  1560  018E                     	;# 
  1561  0191                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  0193                     	;# 
  1565  0193                     	;# 
  1566  0194                     	;# 
  1567  0195                     	;# 
  1568  0196                     	;# 
  1569  0197                     	;# 
  1570  0199                     	;# 
  1571  019A                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019C                     	;# 
  1577  019C                     	;# 
  1578  019D                     	;# 
  1579  019E                     	;# 
  1580  019F                     	;# 
  1581  020D                     	;# 
  1582  0210                     	;# 
  1583  0211                     	;# 
  1584  0211                     	;# 
  1585  0212                     	;# 
  1586  0212                     	;# 
  1587  0213                     	;# 
  1588  0213                     	;# 
  1589  0214                     	;# 
  1590  0214                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0216                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0217                     	;# 
  1598  0291                     	;# 
  1599  0291                     	;# 
  1600  0292                     	;# 
  1601  0293                     	;# 
  1602  0298                     	;# 
  1603  0298                     	;# 
  1604  0299                     	;# 
  1605  029A                     	;# 
  1606  0394                     	;# 
  1607  0395                     	;# 
  1608  0396                     	;# 
  1609  0FE4                     	;# 
  1610  0FE5                     	;# 
  1611  0FE6                     	;# 
  1612  0FE7                     	;# 
  1613  0FE8                     	;# 
  1614  0FE9                     	;# 
  1615  0FEA                     	;# 
  1616  0FEB                     	;# 
  1617  0FED                     	;# 
  1618  0FEE                     	;# 
  1619  0FEF                     	;# 
  1620  0000                     	;# 
  1621  0001                     	;# 
  1622  0002                     	;# 
  1623  0003                     	;# 
  1624  0004                     	;# 
  1625  0005                     	;# 
  1626  0006                     	;# 
  1627  0007                     	;# 
  1628  0008                     	;# 
  1629  0009                     	;# 
  1630  000A                     	;# 
  1631  000B                     	;# 
  1632  000C                     	;# 
  1633  000D                     	;# 
  1634  000E                     	;# 
  1635  0010                     	;# 
  1636  0011                     	;# 
  1637  0012                     	;# 
  1638  0015                     	;# 
  1639  0016                     	;# 
  1640  0016                     	;# 
  1641  0017                     	;# 
  1642  0018                     	;# 
  1643  0019                     	;# 
  1644  001A                     	;# 
  1645  001B                     	;# 
  1646  001C                     	;# 
  1647  008C                     	;# 
  1648  008D                     	;# 
  1649  008E                     	;# 
  1650  0090                     	;# 
  1651  0091                     	;# 
  1652  0092                     	;# 
  1653  0095                     	;# 
  1654  0096                     	;# 
  1655  0097                     	;# 
  1656  0099                     	;# 
  1657  009A                     	;# 
  1658  009B                     	;# 
  1659  009B                     	;# 
  1660  009C                     	;# 
  1661  009D                     	;# 
  1662  009E                     	;# 
  1663  010C                     	;# 
  1664  010D                     	;# 
  1665  010E                     	;# 
  1666  0116                     	;# 
  1667  0117                     	;# 
  1668  011D                     	;# 
  1669  018C                     	;# 
  1670  018D                     	;# 
  1671  018E                     	;# 
  1672  0191                     	;# 
  1673  0191                     	;# 
  1674  0192                     	;# 
  1675  0193                     	;# 
  1676  0193                     	;# 
  1677  0194                     	;# 
  1678  0195                     	;# 
  1679  0196                     	;# 
  1680  0197                     	;# 
  1681  0199                     	;# 
  1682  019A                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019B                     	;# 
  1686  019B                     	;# 
  1687  019C                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020D                     	;# 
  1693  0210                     	;# 
  1694  0211                     	;# 
  1695  0211                     	;# 
  1696  0212                     	;# 
  1697  0212                     	;# 
  1698  0213                     	;# 
  1699  0213                     	;# 
  1700  0214                     	;# 
  1701  0214                     	;# 
  1702  0215                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0216                     	;# 
  1706  0216                     	;# 
  1707  0217                     	;# 
  1708  0217                     	;# 
  1709  0291                     	;# 
  1710  0291                     	;# 
  1711  0292                     	;# 
  1712  0293                     	;# 
  1713  0298                     	;# 
  1714  0298                     	;# 
  1715  0299                     	;# 
  1716  029A                     	;# 
  1717  0394                     	;# 
  1718  0395                     	;# 
  1719  0396                     	;# 
  1720  0FE4                     	;# 
  1721  0FE5                     	;# 
  1722  0FE6                     	;# 
  1723  0FE7                     	;# 
  1724  0FE8                     	;# 
  1725  0FE9                     	;# 
  1726  0FEA                     	;# 
  1727  0FEB                     	;# 
  1728  0FED                     	;# 
  1729  0FEE                     	;# 
  1730  0FEF                     	;# 
  1731  0000                     	;# 
  1732  0001                     	;# 
  1733  0002                     	;# 
  1734  0003                     	;# 
  1735  0004                     	;# 
  1736  0005                     	;# 
  1737  0006                     	;# 
  1738  0007                     	;# 
  1739  0008                     	;# 
  1740  0009                     	;# 
  1741  000A                     	;# 
  1742  000B                     	;# 
  1743  000C                     	;# 
  1744  000D                     	;# 
  1745  000E                     	;# 
  1746  0010                     	;# 
  1747  0011                     	;# 
  1748  0012                     	;# 
  1749  0015                     	;# 
  1750  0016                     	;# 
  1751  0016                     	;# 
  1752  0017                     	;# 
  1753  0018                     	;# 
  1754  0019                     	;# 
  1755  001A                     	;# 
  1756  001B                     	;# 
  1757  001C                     	;# 
  1758  008C                     	;# 
  1759  008D                     	;# 
  1760  008E                     	;# 
  1761  0090                     	;# 
  1762  0091                     	;# 
  1763  0092                     	;# 
  1764  0095                     	;# 
  1765  0096                     	;# 
  1766  0097                     	;# 
  1767  0099                     	;# 
  1768  009A                     	;# 
  1769  009B                     	;# 
  1770  009B                     	;# 
  1771  009C                     	;# 
  1772  009D                     	;# 
  1773  009E                     	;# 
  1774  010C                     	;# 
  1775  010D                     	;# 
  1776  010E                     	;# 
  1777  0116                     	;# 
  1778  0117                     	;# 
  1779  011D                     	;# 
  1780  018C                     	;# 
  1781  018D                     	;# 
  1782  018E                     	;# 
  1783  0191                     	;# 
  1784  0191                     	;# 
  1785  0192                     	;# 
  1786  0193                     	;# 
  1787  0193                     	;# 
  1788  0194                     	;# 
  1789  0195                     	;# 
  1790  0196                     	;# 
  1791  0197                     	;# 
  1792  0199                     	;# 
  1793  019A                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019B                     	;# 
  1798  019C                     	;# 
  1799  019C                     	;# 
  1800  019D                     	;# 
  1801  019E                     	;# 
  1802  019F                     	;# 
  1803  020D                     	;# 
  1804  0210                     	;# 
  1805  0211                     	;# 
  1806  0211                     	;# 
  1807  0212                     	;# 
  1808  0212                     	;# 
  1809  0213                     	;# 
  1810  0213                     	;# 
  1811  0214                     	;# 
  1812  0214                     	;# 
  1813  0215                     	;# 
  1814  0215                     	;# 
  1815  0215                     	;# 
  1816  0216                     	;# 
  1817  0216                     	;# 
  1818  0217                     	;# 
  1819  0217                     	;# 
  1820  0291                     	;# 
  1821  0291                     	;# 
  1822  0292                     	;# 
  1823  0293                     	;# 
  1824  0298                     	;# 
  1825  0298                     	;# 
  1826  0299                     	;# 
  1827  029A                     	;# 
  1828  0394                     	;# 
  1829  0395                     	;# 
  1830  0396                     	;# 
  1831  0FE4                     	;# 
  1832  0FE5                     	;# 
  1833  0FE6                     	;# 
  1834  0FE7                     	;# 
  1835  0FE8                     	;# 
  1836  0FE9                     	;# 
  1837  0FEA                     	;# 
  1838  0FEB                     	;# 
  1839  0FED                     	;# 
  1840  0FEE                     	;# 
  1841  0FEF                     	;# 
  1842  0000                     	;# 
  1843  0001                     	;# 
  1844  0002                     	;# 
  1845  0003                     	;# 
  1846  0004                     	;# 
  1847  0005                     	;# 
  1848  0006                     	;# 
  1849  0007                     	;# 
  1850  0008                     	;# 
  1851  0009                     	;# 
  1852  000A                     	;# 
  1853  000B                     	;# 
  1854  000C                     	;# 
  1855  000D                     	;# 
  1856  000E                     	;# 
  1857  0010                     	;# 
  1858  0011                     	;# 
  1859  0012                     	;# 
  1860  0015                     	;# 
  1861  0016                     	;# 
  1862  0016                     	;# 
  1863  0017                     	;# 
  1864  0018                     	;# 
  1865  0019                     	;# 
  1866  001A                     	;# 
  1867  001B                     	;# 
  1868  001C                     	;# 
  1869  008C                     	;# 
  1870  008D                     	;# 
  1871  008E                     	;# 
  1872  0090                     	;# 
  1873  0091                     	;# 
  1874  0092                     	;# 
  1875  0095                     	;# 
  1876  0096                     	;# 
  1877  0097                     	;# 
  1878  0099                     	;# 
  1879  009A                     	;# 
  1880  009B                     	;# 
  1881  009B                     	;# 
  1882  009C                     	;# 
  1883  009D                     	;# 
  1884  009E                     	;# 
  1885  010C                     	;# 
  1886  010D                     	;# 
  1887  010E                     	;# 
  1888  0116                     	;# 
  1889  0117                     	;# 
  1890  011D                     	;# 
  1891  018C                     	;# 
  1892  018D                     	;# 
  1893  018E                     	;# 
  1894  0191                     	;# 
  1895  0191                     	;# 
  1896  0192                     	;# 
  1897  0193                     	;# 
  1898  0193                     	;# 
  1899  0194                     	;# 
  1900  0195                     	;# 
  1901  0196                     	;# 
  1902  0197                     	;# 
  1903  0199                     	;# 
  1904  019A                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019B                     	;# 
  1909  019C                     	;# 
  1910  019C                     	;# 
  1911  019D                     	;# 
  1912  019E                     	;# 
  1913  019F                     	;# 
  1914  020D                     	;# 
  1915  0210                     	;# 
  1916  0211                     	;# 
  1917  0211                     	;# 
  1918  0212                     	;# 
  1919  0212                     	;# 
  1920  0213                     	;# 
  1921  0213                     	;# 
  1922  0214                     	;# 
  1923  0214                     	;# 
  1924  0215                     	;# 
  1925  0215                     	;# 
  1926  0215                     	;# 
  1927  0216                     	;# 
  1928  0216                     	;# 
  1929  0217                     	;# 
  1930  0217                     	;# 
  1931  0291                     	;# 
  1932  0291                     	;# 
  1933  0292                     	;# 
  1934  0293                     	;# 
  1935  0298                     	;# 
  1936  0298                     	;# 
  1937  0299                     	;# 
  1938  029A                     	;# 
  1939  0394                     	;# 
  1940  0395                     	;# 
  1941  0396                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000D                     	;# 
  1967  000E                     	;# 
  1968  0010                     	;# 
  1969  0011                     	;# 
  1970  0012                     	;# 
  1971  0015                     	;# 
  1972  0016                     	;# 
  1973  0016                     	;# 
  1974  0017                     	;# 
  1975  0018                     	;# 
  1976  0019                     	;# 
  1977  001A                     	;# 
  1978  001B                     	;# 
  1979  001C                     	;# 
  1980  008C                     	;# 
  1981  008D                     	;# 
  1982  008E                     	;# 
  1983  0090                     	;# 
  1984  0091                     	;# 
  1985  0092                     	;# 
  1986  0095                     	;# 
  1987  0096                     	;# 
  1988  0097                     	;# 
  1989  0099                     	;# 
  1990  009A                     	;# 
  1991  009B                     	;# 
  1992  009B                     	;# 
  1993  009C                     	;# 
  1994  009D                     	;# 
  1995  009E                     	;# 
  1996  010C                     	;# 
  1997  010D                     	;# 
  1998  010E                     	;# 
  1999  0116                     	;# 
  2000  0117                     	;# 
  2001  011D                     	;# 
  2002  018C                     	;# 
  2003  018D                     	;# 
  2004  018E                     	;# 
  2005  0191                     	;# 
  2006  0191                     	;# 
  2007  0192                     	;# 
  2008  0193                     	;# 
  2009  0193                     	;# 
  2010  0194                     	;# 
  2011  0195                     	;# 
  2012  0196                     	;# 
  2013  0197                     	;# 
  2014  0199                     	;# 
  2015  019A                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019B                     	;# 
  2019  019B                     	;# 
  2020  019C                     	;# 
  2021  019C                     	;# 
  2022  019D                     	;# 
  2023  019E                     	;# 
  2024  019F                     	;# 
  2025  020D                     	;# 
  2026  0210                     	;# 
  2027  0211                     	;# 
  2028  0211                     	;# 
  2029  0212                     	;# 
  2030  0212                     	;# 
  2031  0213                     	;# 
  2032  0213                     	;# 
  2033  0214                     	;# 
  2034  0214                     	;# 
  2035  0215                     	;# 
  2036  0215                     	;# 
  2037  0215                     	;# 
  2038  0216                     	;# 
  2039  0216                     	;# 
  2040  0217                     	;# 
  2041  0217                     	;# 
  2042  0291                     	;# 
  2043  0291                     	;# 
  2044  0292                     	;# 
  2045  0293                     	;# 
  2046  0298                     	;# 
  2047  0298                     	;# 
  2048  0299                     	;# 
  2049  029A                     	;# 
  2050  0394                     	;# 
  2051  0395                     	;# 
  2052  0396                     	;# 
  2053  0FE4                     	;# 
  2054  0FE5                     	;# 
  2055  0FE6                     	;# 
  2056  0FE7                     	;# 
  2057  0FE8                     	;# 
  2058  0FE9                     	;# 
  2059  0FEA                     	;# 
  2060  0FEB                     	;# 
  2061  0FED                     	;# 
  2062  0FEE                     	;# 
  2063  0FEF                     	;# 
  2064  0000                     	;# 
  2065  0001                     	;# 
  2066  0002                     	;# 
  2067  0003                     	;# 
  2068  0004                     	;# 
  2069  0005                     	;# 
  2070  0006                     	;# 
  2071  0007                     	;# 
  2072  0008                     	;# 
  2073  0009                     	;# 
  2074  000A                     	;# 
  2075  000B                     	;# 
  2076  000C                     	;# 
  2077  000D                     	;# 
  2078  000E                     	;# 
  2079  0010                     	;# 
  2080  0011                     	;# 
  2081  0012                     	;# 
  2082  0015                     	;# 
  2083  0016                     	;# 
  2084  0016                     	;# 
  2085  0017                     	;# 
  2086  0018                     	;# 
  2087  0019                     	;# 
  2088  001A                     	;# 
  2089  001B                     	;# 
  2090  001C                     	;# 
  2091  008C                     	;# 
  2092  008D                     	;# 
  2093  008E                     	;# 
  2094  0090                     	;# 
  2095  0091                     	;# 
  2096  0092                     	;# 
  2097  0095                     	;# 
  2098  0096                     	;# 
  2099  0097                     	;# 
  2100  0099                     	;# 
  2101  009A                     	;# 
  2102  009B                     	;# 
  2103  009B                     	;# 
  2104  009C                     	;# 
  2105  009D                     	;# 
  2106  009E                     	;# 
  2107  010C                     	;# 
  2108  010D                     	;# 
  2109  010E                     	;# 
  2110  0116                     	;# 
  2111  0117                     	;# 
  2112  011D                     	;# 
  2113  018C                     	;# 
  2114  018D                     	;# 
  2115  018E                     	;# 
  2116  0191                     	;# 
  2117  0191                     	;# 
  2118  0192                     	;# 
  2119  0193                     	;# 
  2120  0193                     	;# 
  2121  0194                     	;# 
  2122  0195                     	;# 
  2123  0196                     	;# 
  2124  0197                     	;# 
  2125  0199                     	;# 
  2126  019A                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019B                     	;# 
  2130  019B                     	;# 
  2131  019C                     	;# 
  2132  019C                     	;# 
  2133  019D                     	;# 
  2134  019E                     	;# 
  2135  019F                     	;# 
  2136  020D                     	;# 
  2137  0210                     	;# 
  2138  0211                     	;# 
  2139  0211                     	;# 
  2140  0212                     	;# 
  2141  0212                     	;# 
  2142  0213                     	;# 
  2143  0213                     	;# 
  2144  0214                     	;# 
  2145  0214                     	;# 
  2146  0215                     	;# 
  2147  0215                     	;# 
  2148  0215                     	;# 
  2149  0216                     	;# 
  2150  0216                     	;# 
  2151  0217                     	;# 
  2152  0217                     	;# 
  2153  0291                     	;# 
  2154  0291                     	;# 
  2155  0292                     	;# 
  2156  0293                     	;# 
  2157  0298                     	;# 
  2158  0298                     	;# 
  2159  0299                     	;# 
  2160  029A                     	;# 
  2161  0394                     	;# 
  2162  0395                     	;# 
  2163  0396                     	;# 
  2164  0FE4                     	;# 
  2165  0FE5                     	;# 
  2166  0FE6                     	;# 
  2167  0FE7                     	;# 
  2168  0FE8                     	;# 
  2169  0FE9                     	;# 
  2170  0FEA                     	;# 
  2171  0FEB                     	;# 
  2172  0FED                     	;# 
  2173  0FEE                     	;# 
  2174  0FEF                     	;# 
  2175                           
  2176                           	psect	idataBANK4
  2177  1BC8                     __pidataBANK4:	
  2178                           
  2179                           ;initializer for __product
  2180  1BC8  3463               	retlw	99
  2181  1BC9  3402               	retlw	2
  2182  1BCA  3400               	retlw	0
  2183  1BCB  3400               	retlw	0
  2184  1BCC  3400               	retlw	0
  2185  1BCD  3400               	retlw	0
  2186  1BCE  3400               	retlw	0
  2187  1BCF  3400               	retlw	0
  2188  1BD0  3400               	retlw	0
  2189  1BD1  3400               	retlw	0
  2190  1BD2  3400               	retlw	0
  2191  1BD3  3400               	retlw	0
  2192  1BD4  34FF               	retlw	255
  2193  1BD5  34FF               	retlw	255
  2194  1BD6  34FF               	retlw	255
  2195  1BD7  3400               	retlw	0
  2196  1BD8  3400               	retlw	0
  2197  1BD9  3400               	retlw	0
  2198  1BDA  3400               	retlw	0
  2199  1BDB  3400               	retlw	0
  2200  1BDC  3400               	retlw	0
  2201  1BDD  3400               	retlw	0
  2202  1BDE  3400               	retlw	0
  2203  1BDF  3400               	retlw	0
  2204  1BE0  3400               	retlw	0
  2205  1BE1  3400               	retlw	0
  2206  1BE2  3400               	retlw	0
  2207  1BE3  3400               	retlw	0
  2208  1BE4  3400               	retlw	0
  2209  1BE5  3400               	retlw	0
  2210  1BE6  3400               	retlw	0
  2211  1BE7  3400               	retlw	0
  2212                           
  2213                           	psect	stringtext
  2214  1800                     __pstringtext:	
  2215  1800                     _CC2500_registers_address:	
  2216  1800  3403               	retlw	3
  2217  1801  3416               	retlw	22
  2218  1802  3417               	retlw	23
  2219  1803  341E               	retlw	30
  2220  1804  341F               	retlw	31
  2221  1805  3420               	retlw	32
  2222  1806  342A               	retlw	42
  2223  1807  342B               	retlw	43
  2224  1808  340B               	retlw	11
  2225  1809  340C               	retlw	12
  2226  180A  340D               	retlw	13
  2227  180B  340E               	retlw	14
  2228  180C  340F               	retlw	15
  2229  180D  3410               	retlw	16
  2230  180E  3411               	retlw	17
  2231  180F  3412               	retlw	18
  2232  1810  3413               	retlw	19
  2233  1811  3414               	retlw	20
  2234  1812  340A               	retlw	10
  2235  1813  3415               	retlw	21
  2236  1814  3421               	retlw	33
  2237  1815  3422               	retlw	34
  2238  1816  3418               	retlw	24
  2239  1817  3419               	retlw	25
  2240  1818  341A               	retlw	26
  2241  1819  341B               	retlw	27
  2242  181A  341C               	retlw	28
  2243  181B  341D               	retlw	29
  2244  181C  3423               	retlw	35
  2245  181D  3424               	retlw	36
  2246  181E  3425               	retlw	37
  2247  181F  3426               	retlw	38
  2248  1820  3429               	retlw	41
  2249  1821  342C               	retlw	44
  2250  1822  342D               	retlw	45
  2251  1823  342E               	retlw	46
  2252  1824  3400               	retlw	0
  2253  1825  3401               	retlw	1
  2254  1826  3402               	retlw	2
  2255  1827  3407               	retlw	7
  2256  1828  3408               	retlw	8
  2257  1829  3409               	retlw	9
  2258  182A  3406               	retlw	6
  2259  182B  3404               	retlw	4
  2260  182C  3405               	retlw	5
  2261  182D  3427               	retlw	39
  2262  182E  3428               	retlw	40
  2263  182F                     __end_of_CC2500_registers_address:	
  2264  182F                     _CC2500_rfSettings:	
  2265  182F  3407               	retlw	7
  2266  1830  3407               	retlw	7
  2267  1831  3430               	retlw	48
  2268  1832  3487               	retlw	135
  2269  1833  346B               	retlw	107
  2270  1834  34F8               	retlw	248
  2271  1835  347F               	retlw	127
  2272  1836  343F               	retlw	63
  2273  1837  3409               	retlw	9
  2274  1838  3400               	retlw	0
  2275  1839  345C               	retlw	92
  2276  183A  34A7               	retlw	167
  2277  183B  3462               	retlw	98
  2278  183C  3486               	retlw	134
  2279  183D  3483               	retlw	131
  2280  183E  3403               	retlw	3
  2281  183F  3422               	retlw	34
  2282  1840  34F8               	retlw	248
  2283  1841  3400               	retlw	0
  2284  1842  3444               	retlw	68
  2285  1843  34B6               	retlw	182
  2286  1844  3410               	retlw	16
  2287  1845  3418               	retlw	24
  2288  1846  341D               	retlw	29
  2289  1847  341C               	retlw	28
  2290  1848  34C7               	retlw	199
  2291  1849  3400               	retlw	0
  2292  184A  34B2               	retlw	178
  2293  184B  34EA               	retlw	234
  2294  184C  340A               	retlw	10
  2295  184D  3400               	retlw	0
  2296  184E  3411               	retlw	17
  2297  184F  3459               	retlw	89
  2298  1850  3488               	retlw	136
  2299  1851  3431               	retlw	49
  2300  1852  340B               	retlw	11
  2301  1853  342F               	retlw	47
  2302  1854  342E               	retlw	46
  2303  1855  3406               	retlw	6
  2304  1856  3404               	retlw	4
  2305  1857  3405               	retlw	5
  2306  1858  3400               	retlw	0
  2307  1859  3430               	retlw	48
  2308  185A  34D3               	retlw	211
  2309  185B  3491               	retlw	145
  2310  185C  3441               	retlw	65
  2311  185D  3400               	retlw	0
  2312  185E                     __end_of_CC2500_rfSettings:	
  2313  185E                     _CC2500_patable_vaule:	
  2314  185E  34FE               	retlw	254
  2315  185F  34FE               	retlw	254
  2316  1860  34FE               	retlw	254
  2317  1861  34FE               	retlw	254
  2318  1862  34FE               	retlw	254
  2319  1863  34FE               	retlw	254
  2320  1864  34FE               	retlw	254
  2321  1865  34FE               	retlw	254
  2322  1866                     __end_of_CC2500_patable_vaule:	
  2323                           
  2324                           	psect	nvBANK1
  2325  00ED                     __pnvBANK1:	
  2326  00ED                     _product:	
  2327  00ED                     	ds	1
  2328  000C                     _PORTA	set	12
  2329  000D                     _PORTB	set	13
  2330  000E                     _PORTC	set	14
  2331  0018                     _T1CON	set	24
  2332  0017                     _TMR1H	set	23
  2333  0016                     _TMR1L	set	22
  2334  005F                     _GIE	set	95
  2335  005B                     _IOCIE	set	91
  2336  0058                     _IOCIF	set	88
  2337  005E                     _PEIE	set	94
  2338  0060                     _RA0	set	96
  2339  0063                     _RA3	set	99
  2340  0064                     _RA4	set	100
  2341  0066                     _RA6	set	102
  2342  0067                     _RA7	set	103
  2343  0068                     _RB0	set	104
  2344  0069                     _RB1	set	105
  2345  006A                     _RB2	set	106
  2346  006B                     _RB3	set	107
  2347  006C                     _RB4	set	108
  2348  006D                     _RB5	set	109
  2349  0070                     _RC0	set	112
  2350  0071                     _RC1	set	113
  2351  0072                     _RC2	set	114
  2352  0074                     _RC4	set	116
  2353  0075                     _RC5	set	117
  2354  0077                     _RC7	set	119
  2355  0088                     _TMR1IF	set	136
  2356  009D                     _ADCON0	set	157
  2357  009E                     _ADCON1	set	158
  2358  009C                     _ADRESH	set	156
  2359  009B                     _ADRESL	set	155
  2360  0099                     _OSCCON	set	153
  2361  008C                     _TRISA	set	140
  2362  008D                     _TRISB	set	141
  2363  008E                     _TRISC	set	142
  2364  0097                     _WDTCON	set	151
  2365  04E9                     _GO_nDONE	set	1257
  2366  0488                     _TMR1IE	set	1160
  2367  0117                     _FVRCON	set	279
  2368  010C                     _LATA	set	268
  2369  010D                     _LATB	set	269
  2370  010E                     _LATC	set	270
  2371  018C                     _ANSELA	set	396
  2372  018D                     _ANSELB	set	397
  2373  018E                     _ANSELC	set	398
  2374  0192                     _PMADRH	set	402
  2375  0191                     _PMADRL	set	401
  2376  0196                     _PMCON2	set	406
  2377  0194                     _PMDATH	set	404
  2378  0193                     _PMDATL	set	403
  2379  0CAE                     _CFGS	set	3246
  2380  0CAC                     _FREE	set	3244
  2381  0CAD                     _LWLO	set	3245
  2382  0CA8                     _RD	set	3240
  2383  0CA9                     _WR	set	3241
  2384  0CAA                     _WREN	set	3242
  2385  020D                     _WPUB	set	525
  2386  0396                     _IOCBF	set	918
  2387  0395                     _IOCBN	set	917
  2388  0394                     _IOCBP	set	916
  2389  1CB2                     _IOCBF2	set	7346
  2390                           
  2391                           ; #config settings
  2392  0000                     
  2393                           	psect	cinit
  2394  0021                     start_initialization:	
  2395  0021                     __initialization:	
  2396                           
  2397                           ; Clear objects allocated to BITCOMMON
  2398  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2399                           
  2400                           ; Clear objects allocated to BITBANK1
  2401  0022  0021               	movlb	1	; select bank1
  2402  0023  01EE               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2403                           
  2404                           ; Clear objects allocated to BANK1
  2405  0024  30A0               	movlw	low __pbssBANK1
  2406  0025  0084               	movwf	4
  2407  0026  3000               	movlw	high __pbssBANK1
  2408  0027  0085               	movwf	5
  2409  0028  3045               	movlw	69
  2410  0029  31A6  266E  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Clear objects allocated to BANK2
  2413  002C  3020               	movlw	low __pbssBANK2
  2414  002D  0084               	movwf	4
  2415  002E  3001               	movlw	high __pbssBANK2
  2416  002F  0085               	movwf	5
  2417  0030  304E               	movlw	78
  2418  0031  31A6  266E  3180   	fcall	clear_ram0
  2419                           
  2420                           ; Clear objects allocated to BANK3
  2421  0034  30A0               	movlw	low __pbssBANK3
  2422  0035  0084               	movwf	4
  2423  0036  3001               	movlw	high __pbssBANK3
  2424  0037  0085               	movwf	5
  2425  0038  304F               	movlw	79
  2426  0039  31A6  266E  3180   	fcall	clear_ram0
  2427                           
  2428                           ; Clear objects allocated to BANK4
  2429  003C  3020               	movlw	low __pbssBANK4
  2430  003D  0084               	movwf	4
  2431  003E  3002               	movlw	high __pbssBANK4
  2432  003F  0085               	movwf	5
  2433  0040  302E               	movlw	46
  2434  0041  31A6  266E  3180   	fcall	clear_ram0
  2435                           
  2436                           ; Initialize objects allocated to BANK4
  2437  0044  30C8               	movlw	low __pidataBANK4
  2438  0045  0084               	movwf	4
  2439  0046  309B               	movlw	(high __pidataBANK4)| (0+128)
  2440  0047  0085               	movwf	5
  2441  0048  304E               	movlw	low __pdataBANK4
  2442  0049  0086               	movwf	6
  2443  004A  3002               	movlw	high __pdataBANK4
  2444  004B  0087               	movwf	7
  2445  004C  3020               	movlw	32
  2446  004D  31A6  2668         	fcall	init_ram
  2447  004F                     end_of_initialization:	
  2448                           ;End of C runtime variable initialization code
  2449                           
  2450  004F                     __end_of__initialization:	
  2451  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2452  0050  0020               	movlb	0
  2453  0051  3193  2B8E         	ljmp	_main	;jump to C main() function
  2454                           
  2455                           	psect	bitbssCOMMON
  2456  03E8                     __pbitbssCOMMON:	
  2457  03E8                     _Transceive_OK:	
  2458  03E8                     	ds	1
  2459                           
  2460                           	psect	bitbssBANK1
  2461  0770                     __pbitbssBANK1:	
  2462  0770                     _Receive_OK:	
  2463  0770                     	ds	1
  2464                           
  2465                           	psect	bssBANK1
  2466  00A0                     __pbssBANK1:	
  2467  00A0                     _RF1:	
  2468  00A0                     	ds	15
  2469  00AF                     _myMain:	
  2470  00AF                     	ds	13
  2471  00BC                     _DimmerIntr1:	
  2472  00BC                     	ds	12
  2473  00C8                     _DimmerIntr2:	
  2474  00C8                     	ds	12
  2475  00D4                     _Sw:	
  2476  00D4                     	ds	2
  2477  00D6                     _CRC:	
  2478  00D6                     	ds	1
  2479  00D7                     _Cmd:	
  2480  00D7                     	ds	1
  2481  00D8                     _DelayOff:	
  2482  00D8                     	ds	1
  2483  00D9                     _DimmerIntr:	
  2484  00D9                     	ds	1
  2485  00DA                     _DimmerLights:	
  2486  00DA                     	ds	1
  2487  00DB                     _LED:	
  2488  00DB                     	ds	1
  2489  00DC                     _Light:	
  2490  00DC                     	ds	1
  2491  00DD                     _RSSI:	
  2492  00DD                     	ds	1
  2493  00DE                     _Rx_Length:	
  2494  00DE                     	ds	1
  2495  00DF                     _SPI0Buffer:	
  2496  00DF                     	ds	1
  2497  00E0                     _SwDetect:	
  2498  00E0                     	ds	1
  2499  00E1                     _Tx_Length:	
  2500  00E1                     	ds	1
  2501  00E2                     _r_address:	
  2502  00E2                     	ds	1
  2503  00E3                     _r_data:	
  2504  00E3                     	ds	1
  2505  00E4                     _s_data:	
  2506  00E4                     	ds	1
  2507                           
  2508                           	psect	bssBANK2
  2509  0120                     __pbssBANK2:	
  2510  0120                     _Buz1:	
  2511  0120                     	ds	12
  2512  012C                     _Dimmer:	
  2513  012C                     	ds	5
  2514  0131                     _Timer1:	
  2515  0131                     	ds	3
  2516  0134                     _RF_Count:	
  2517  0134                     	ds	2
  2518  0136                     _WDT:	
  2519  0136                     	ds	2
  2520  0138                     _Load:	
  2521  0138                     	ds	40
  2522  0160                     _Temp:	
  2523  0160                     	ds	14
  2524                           
  2525                           	psect	bssBANK3
  2526  01A0                     __pbssBANK3:	
  2527  01A0                     _RF_Data:	
  2528  01A0                     	ds	30
  2529  01BE                     _DimmerLights1:	
  2530  01BE                     	ds	9
  2531  01C7                     _DimmerLights2:	
  2532  01C7                     	ds	9
  2533  01D0                     _Sw1:	
  2534  01D0                     	ds	9
  2535  01D9                     _DlySw1:	
  2536  01D9                     	ds	5
  2537  01DE                     _DlySw2:	
  2538  01DE                     	ds	5
  2539  01E3                     _VarErrLED:	
  2540  01E3                     	ds	4
  2541  01E7                     _VarLED1:	
  2542  01E7                     	ds	4
  2543  01EB                     _VarLED2:	
  2544  01EB                     	ds	4
  2545                           
  2546                           	psect	bssBANK4
  2547  0220                     __pbssBANK4:	
  2548  0220                     _Memory:	
  2549  0220                     	ds	37
  2550  0245                     _Sw2:	
  2551  0245                     	ds	9
  2552                           
  2553                           	psect	dataBANK4
  2554  024E                     __pdataBANK4:	
  2555  024E                     __product:	
  2556  024E                     	ds	32
  2557                           
  2558                           	psect	clrtext
  2559  266E                     clear_ram0:	
  2560                           ;	Called with FSR0 containing the base address, and
  2561                           ;	WREG with the size to clear
  2562                           
  2563  266E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2564  266F                     clrloop0:	
  2565  266F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2566  2670  3101               	addfsr 0,1
  2567  2671  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2568  2672  2E6F               	goto	clrloop0	;have we reached the end yet?
  2569  2673  3400               	retlw	0	;all done for this memory range, return
  2570                           
  2571                           	psect	inittext
  2572  2668                     init_ram:	
  2573  2668  00FE               	movwf	126
  2574  2669                     initloop:	
  2575  2669  0012               	moviw fsr0++
  2576  266A  001E               	movwi fsr1++
  2577  266B  0BFE               	decfsz	126,f
  2578  266C  2E69               	goto	initloop
  2579  266D  3400               	retlw	0
  2580                           
  2581                           	psect	cstackBANK1
  2582  00E5                     __pcstackBANK1:	
  2583  00E5                     ??_getRxData:	
  2584  00E5                     setDimmerLights_OnOff@lights:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587                           
  2588                           ; 1 bytes @ 0x0
  2589  00E5                     	ds	1
  2590  00E6                     setDimmerLights_Main@lights:	
  2591  00E6                     getRxData@error:	
  2592                           ; 1 bytes @ 0x1
  2593                           
  2594                           
  2595                           ; 1 bytes @ 0x1
  2596  00E6                     	ds	1
  2597  00E7                     ??_setRF_Main:	
  2598                           
  2599                           ; 0 bytes @ 0x2
  2600  00E7                     	ds	1
  2601  00E8                     setRF_Main@error:	
  2602                           
  2603                           ; 1 bytes @ 0x3
  2604  00E8                     	ds	1
  2605  00E9                     ?_main:	
  2606  00E9                     main@argc:	
  2607                           ; 2 bytes @ 0x4
  2608                           
  2609                           
  2610                           ; 2 bytes @ 0x4
  2611  00E9                     	ds	2
  2612  00EB                     main@argv:	
  2613                           
  2614                           ; 2 bytes @ 0x6
  2615  00EB                     	ds	2
  2616                           
  2617                           	psect	cstackCOMMON
  2618  0070                     __pcstackCOMMON:	
  2619  0070                     ?_CC2500_WriteCommand:	
  2620  0070                     ?_RF_Timeout_Counter:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setRF_TimeoutCleared:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_WriteByte:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_ReadStatus:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_ReadByte:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_PowerRST:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_InitSetREG:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_InitPATable:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_ClearTXFIFO:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_CC2500_ClearRXFIFO:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_CC2500_FrequencyCabr:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_CC2500_SIDLEMode:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_DlyOff_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_DlyOff_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_SwOn:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerLights_SwOff:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setMemory_Modify:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setDimmerLights_Initialization:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setDimmerLights_Main:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DimmerLights_DimmingFunction:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerLights_TwoPhase_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_DimmerLights_AssignationDimming:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_Line:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setDimmerLights_DimmingClose:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_setTxData:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setRF_TransceiveGO:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_setLED_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_setLED_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Fosc_Set:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_IO_Set:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_TMR1_Set:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_ADC_Set:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_IOC_Set:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_WDT_Set:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_TMR1_ISR:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_IOC_ISR:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_Timeout_Counter:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_set_TimeoutCleared:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Flash_Memory_Write:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Flash_Memory_Modify:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_WDT_Clearing:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setLoad_AH_AL_Restore:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setTemp_Initialization:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setTemp_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setOverTemp_ADV_Restore:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRF_Initialization:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_RF_RxDisable:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_getRxData:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setLog_Code:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setControl_Lights_Table:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRFSW_Control:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRFSW_AdjControl:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRF_AdjControl:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setSw_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setSw_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_myMain_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_my_MainTimer:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_Exception_Main:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_Buzzer_Initialization:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_Buzzer_Main:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_CC2500_TxData:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_CC2500_RxData:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_CC2500_PowerOnInitial:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DelayOffPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DelayOff_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DelayOff_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerIntr_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_SelectPointer:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DimmerLights_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_setDimmerLights_DimmingOn:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_TMR_1:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ??_DimmerLights_TMR_1:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_DimmerLights_IOC_1:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_TMR_2:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ??_DimmerLights_TMR_2:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_DimmerLights_IOC_2:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_LedPointSelect:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LED_Initialization:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_LED_Main:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Mcu_Initialization:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_ISR:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Unlock:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Erasing:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setMemory_LoopSave:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_WDT_Main:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_Load_Initialization:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_getLoad_AD:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_Load_Main:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_Temp_Initialization:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_getTemp_AD:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_Temp_Main:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0070                     ?_RF_Initialization:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0070                     ?_RF_Main:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0070                     ?_setRF_Learn:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0070                     ?_TouchPower:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0070                     ?_SwPointSelect:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0070                     ?_Switch_Initialization:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0070                     ?_Switch_Main:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmerLights_Status:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDimmerLights_ValueToPercent:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmerLights_PercentToValue:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getLoad_OK:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getMain_All_Error_Status:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getMain_All_LightsStatus:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmerLights_Allow_Condition:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getCmd_Status:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_Flash_Memory_Read:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getAll_Sw_KeyStatus:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?_getMain_Lights_Count:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ?_getRF_KeyStatus:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ?_getSw_KeyStatus:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ?_getDelayOff_GO:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ?_getDimmerIntr_DimmingValue:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0070                     ?_getDimmerLights_Line:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0070                     ?_getDimmer_LoadGO:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0070                     ?_getDimmer_Load_Status:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986  0070                     ?i1___lbdiv:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0070                     setDimmerLights_Initialization@lights:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992  0070                     i1___lbdiv@divisor:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995                           
  2996                           ; 1 bytes @ 0x0
  2997  0070                     	ds	1
  2998  0071                     ??_TMR1_ISR:	
  2999  0071                     ??i1___lbdiv:	
  3000                           ; 0 bytes @ 0x1
  3001                           
  3002                           
  3003                           ; 0 bytes @ 0x1
  3004  0071                     	ds	1
  3005  0072                     i1___lbdiv@dividend:	
  3006                           
  3007                           ; 1 bytes @ 0x2
  3008  0072                     	ds	1
  3009  0073                     i1___lbdiv@counter:	
  3010                           
  3011                           ; 1 bytes @ 0x3
  3012  0073                     	ds	1
  3013  0074                     i1___lbdiv@quotient:	
  3014                           
  3015                           ; 1 bytes @ 0x4
  3016  0074                     	ds	1
  3017  0075                     ?i1_Division:	
  3018  0075                     i1Division@num:	
  3019                           ; 1 bytes @ 0x5
  3020                           
  3021                           
  3022                           ; 1 bytes @ 0x5
  3023  0075                     	ds	1
  3024  0076                     ??i1_Division:	
  3025                           
  3026                           ; 0 bytes @ 0x6
  3027  0076                     	ds	2
  3028  0078                     i1Division@value:	
  3029                           
  3030                           ; 1 bytes @ 0x8
  3031  0078                     	ds	1
  3032  0079                     i1Division@result:	
  3033                           
  3034                           ; 1 bytes @ 0x9
  3035  0079                     	ds	1
  3036  007A                     ??_DimmerLights_IOC_1:	
  3037  007A                     ??_DimmerLights_IOC_2:	
  3038                           ; 0 bytes @ 0xA
  3039                           
  3040                           
  3041                           ; 0 bytes @ 0xA
  3042  007A                     	ds	2
  3043  007C                     ??_IOC_ISR:	
  3044  007C                     ??_ISR:	
  3045                           ; 0 bytes @ 0xC
  3046                           
  3047                           
  3048                           ; 0 bytes @ 0xC
  3049  007C                     	ds	1
  3050                           
  3051                           	psect	cstackBANK0
  3052  0020                     __pcstackBANK0:	
  3053  0020                     ??_RF_Timeout_Counter:	
  3054  0020                     ??_setRF_TimeoutCleared:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_CC2500_WriteByte:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_CC2500_ReadByte:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ?_DelayTime_1us:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_setMemory_Modify:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_setDimmerLights_Initialization:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_getLoad_OK:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_getMain_All_Error_Status:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_getMain_All_LightsStatus:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_DimmerLights_DimmingFunction:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_setDimmerLights_Line:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_getCmd_Status:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ?_setCmd_Status:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_setTxData:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_setRF_TransceiveGO:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_Fosc_Set:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_IO_Set:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_TMR1_Set:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_ADC_Set:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_IOC_Set:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_WDT_Set:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_Timeout_Counter:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_set_TimeoutCleared:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_Flash_Memory_Read:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ?_setMemory_Data:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_Flash_Memory_Write:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_getAll_Sw_KeyStatus:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ??_WDT_Clearing:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ??_setLoad_AH_AL_Restore:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ??_getMain_Lights_Count:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ??_setTemp_Initialization:	
  3145                           ; 0 bytes @ 0x0
  3146                           
  3147  0020                     ??_setOverTemp_ADV_Restore:	
  3148                           ; 0 bytes @ 0x0
  3149                           
  3150  0020                     ??_setRF_Initialization:	
  3151                           ; 0 bytes @ 0x0
  3152                           
  3153  0020                     ??_getRF_KeyStatus:	
  3154                           ; 0 bytes @ 0x0
  3155                           
  3156  0020                     ??_getSw_KeyStatus:	
  3157                           ; 0 bytes @ 0x0
  3158                           
  3159  0020                     ??_myMain_Initialization:	
  3160                           ; 0 bytes @ 0x0
  3161                           
  3162  0020                     ??_Buzzer_Initialization:	
  3163                           ; 0 bytes @ 0x0
  3164                           
  3165  0020                     ??_Buzzer_Main:	
  3166                           ; 0 bytes @ 0x0
  3167                           
  3168  0020                     ??_DelayOffPointSelect:	
  3169                           ; 0 bytes @ 0x0
  3170                           
  3171  0020                     ?_setDimmerIntr_ControlStatus:	
  3172                           ; 0 bytes @ 0x0
  3173                           
  3174  0020                     ?_setDimmerIntr_DimmingValue:	
  3175                           ; 0 bytes @ 0x0
  3176                           
  3177  0020                     ??_getDimmerIntr_DimmingValue:	
  3178                           ; 0 bytes @ 0x0
  3179                           
  3180  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3181                           ; 0 bytes @ 0x0
  3182                           
  3183  0020                     ??_getDimmerIntr_Dimming_Sw:	
  3184                           ; 0 bytes @ 0x0
  3185                           
  3186  0020                     ?_setDimmerIntr_Dimming_RF:	
  3187                           ; 0 bytes @ 0x0
  3188                           
  3189  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3190                           ; 0 bytes @ 0x0
  3191                           
  3192  0020                     ??_DimmerLights_SelectPointer:	
  3193                           ; 0 bytes @ 0x0
  3194                           
  3195  0020                     ??_getDimmerLights_Line:	
  3196                           ; 0 bytes @ 0x0
  3197                           
  3198  0020                     ??_getDimmer_LoadGO:	
  3199                           ; 0 bytes @ 0x0
  3200                           
  3201  0020                     ??_getDimmer_Load_Status:	
  3202                           ; 0 bytes @ 0x0
  3203                           
  3204  0020                     ??_LedPointSelect:	
  3205                           ; 0 bytes @ 0x0
  3206                           
  3207  0020                     ??_Flash_Memory_Unlock:	
  3208                           ; 0 bytes @ 0x0
  3209                           
  3210  0020                     ??_Flash_Memory_Erasing:	
  3211                           ; 0 bytes @ 0x0
  3212                           
  3213  0020                     ??_setMemory_LoopSave:	
  3214                           ; 0 bytes @ 0x0
  3215                           
  3216  0020                     ??_WDT_Main:	
  3217                           ; 0 bytes @ 0x0
  3218                           
  3219  0020                     ??_Temp_Initialization:	
  3220                           ; 0 bytes @ 0x0
  3221                           
  3222  0020                     ??_setRF_Learn:	
  3223                           ; 0 bytes @ 0x0
  3224                           
  3225  0020                     ??_TouchPower:	
  3226                           ; 0 bytes @ 0x0
  3227                           
  3228  0020                     ??_SwPointSelect:	
  3229                           ; 0 bytes @ 0x0
  3230                           
  3231  0020                     ?___bmul:	
  3232                           ; 0 bytes @ 0x0
  3233                           
  3234  0020                     ?___lbdiv:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     ?_getBuz_GO:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     ?_getAD:	
  3241                           ; 2 bytes @ 0x0
  3242                           
  3243  0020                     ?___wmul:	
  3244                           ; 2 bytes @ 0x0
  3245                           
  3246  0020                     ?___awdiv:	
  3247                           ; 2 bytes @ 0x0
  3248                           
  3249  0020                     ?___lwdiv:	
  3250                           ; 2 bytes @ 0x0
  3251                           
  3252  0020                     ?___ftpack:	
  3253                           ; 2 bytes @ 0x0
  3254                           
  3255  0020                     setDimmerIntr_ControlStatus@command:	
  3256                           ; 3 bytes @ 0x0
  3257                           
  3258  0020                     setDimmerIntr_DimmingValue@value:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0020                     setDimmerIntr_Dimming_Sw@command:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0020                     getDimmerIntr_Dimming_Sw@status:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0020                     setDimmerIntr_Dimming_RF@command:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0020                     setDimmerLights_Line@lights:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0020                     getDimmer_LoadGO@loadgo:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0020                     getDimmer_Load_Status@status:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0020                     getAD@adcon1:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0020                     setMemory_Data@data:	
  3283                           ; 1 bytes @ 0x0
  3284                           
  3285  0020                     getLoad_OK@ok:	
  3286                           ; 1 bytes @ 0x0
  3287                           
  3288  0020                     SwPointSelect@sw:	
  3289                           ; 1 bytes @ 0x0
  3290                           
  3291  0020                     getMain_All_LightsStatus@status:	
  3292                           ; 1 bytes @ 0x0
  3293                           
  3294  0020                     getMain_Lights_Count@count:	
  3295                           ; 1 bytes @ 0x0
  3296                           
  3297  0020                     setCmd_Status@cmd:	
  3298                           ; 1 bytes @ 0x0
  3299                           
  3300  0020                     getCmd_Status@number:	
  3301                           ; 1 bytes @ 0x0
  3302                           
  3303  0020                     ___bmul@multiplicand:	
  3304                           ; 1 bytes @ 0x0
  3305                           
  3306  0020                     ___lbdiv@divisor:	
  3307                           ; 1 bytes @ 0x0
  3308                           
  3309  0020                     DelayTime_1us@count:	
  3310                           ; 1 bytes @ 0x0
  3311                           
  3312  0020                     ___wmul@multiplier:	
  3313                           ; 2 bytes @ 0x0
  3314                           
  3315  0020                     ___awdiv@divisor:	
  3316                           ; 2 bytes @ 0x0
  3317                           
  3318  0020                     ___lwdiv@divisor:	
  3319                           ; 2 bytes @ 0x0
  3320                           
  3321  0020                     ___ftpack@arg:	
  3322                           ; 2 bytes @ 0x0
  3323                           
  3324                           
  3325                           ; 3 bytes @ 0x0
  3326  0020                     	ds	1
  3327  0021                     ??_getDimmerLights_Allow_Condition:	
  3328  0021                     ??_setCmd_Status:	
  3329                           ; 0 bytes @ 0x1
  3330                           
  3331  0021                     ??_setMemory_Data:	
  3332                           ; 0 bytes @ 0x1
  3333                           
  3334  0021                     ??_setDimmerIntr_ControlStatus:	
  3335                           ; 0 bytes @ 0x1
  3336                           
  3337  0021                     ??_setDimmerIntr_DimmingValue:	
  3338                           ; 0 bytes @ 0x1
  3339                           
  3340  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3341                           ; 0 bytes @ 0x1
  3342                           
  3343  0021                     ??_setDimmerIntr_Dimming_RF:	
  3344                           ; 0 bytes @ 0x1
  3345                           
  3346  0021                     ??_Mcu_Initialization:	
  3347                           ; 0 bytes @ 0x1
  3348                           
  3349  0021                     ??_RF_Initialization:	
  3350                           ; 0 bytes @ 0x1
  3351                           
  3352  0021                     ??___bmul:	
  3353                           ; 0 bytes @ 0x1
  3354                           
  3355  0021                     ??___lbdiv:	
  3356                           ; 0 bytes @ 0x1
  3357                           
  3358  0021                     CC2500_WriteByte@loop_a:	
  3359                           ; 0 bytes @ 0x1
  3360                           
  3361  0021                     CC2500_ReadByte@loop_b:	
  3362                           ; 1 bytes @ 0x1
  3363                           
  3364  0021                     DelayOffPointSelect@sw:	
  3365                           ; 1 bytes @ 0x1
  3366                           
  3367  0021                     getDimmerIntr_DimmingValue@value:	
  3368                           ; 1 bytes @ 0x1
  3369                           
  3370  0021                     getDimmerIntr_Dimming_Sw@lights:	
  3371                           ; 1 bytes @ 0x1
  3372                           
  3373  0021                     _getAll_DimmerIntr_Dimming_Sw_RF$2392:	
  3374                           ; 1 bytes @ 0x1
  3375                           
  3376  0021                     DimmerLights_SelectPointer@lights:	
  3377                           ; 1 bytes @ 0x1
  3378                           
  3379  0021                     getDimmerLights_Line@line:	
  3380                           ; 1 bytes @ 0x1
  3381                           
  3382  0021                     DimmerLights_DimmingFunction@lights:	
  3383                           ; 1 bytes @ 0x1
  3384                           
  3385  0021                     LedPointSelect@led:	
  3386                           ; 1 bytes @ 0x1
  3387                           
  3388  0021                     Flash_Memory_Read@i:	
  3389                           ; 1 bytes @ 0x1
  3390                           
  3391  0021                     Flash_Memory_Write@i:	
  3392                           ; 1 bytes @ 0x1
  3393                           
  3394  0021                     setMemory_Modify@command:	
  3395                           ; 1 bytes @ 0x1
  3396                           
  3397  0021                     setMemory_LoopSave@command:	
  3398                           ; 1 bytes @ 0x1
  3399                           
  3400  0021                     setLoad_AH_AL_Restore@i:	
  3401                           ; 1 bytes @ 0x1
  3402                           
  3403  0021                     setRF_Learn@command:	
  3404                           ; 1 bytes @ 0x1
  3405                           
  3406  0021                     getRF_KeyStatus@key:	
  3407                           ; 1 bytes @ 0x1
  3408                           
  3409  0021                     setRF_TransceiveGO@command:	
  3410                           ; 1 bytes @ 0x1
  3411                           
  3412  0021                     _getSw_KeyStatus$6415:	
  3413                           ; 1 bytes @ 0x1
  3414                           
  3415  0021                     getAll_Sw_KeyStatus@status:	
  3416                           ; 1 bytes @ 0x1
  3417                           
  3418  0021                     getMain_Lights_Count@status1:	
  3419                           ; 1 bytes @ 0x1
  3420                           
  3421  0021                     getCmd_Status@cmd:	
  3422                           ; 1 bytes @ 0x1
  3423                           
  3424  0021                     setOverTemp_ADV_Restore@i:	
  3425                           ; 1 bytes @ 0x1
  3426                           
  3427  0021                     _getMain_All_Error_Status$7181:	
  3428                           ; 2 bytes @ 0x1
  3429                           
  3430                           
  3431                           ; 2 bytes @ 0x1
  3432  0021                     	ds	1
  3433  0022                     ??_CC2500_WriteCommand:	
  3434  0022                     ??_CC2500_ReadStatus:	
  3435                           ; 0 bytes @ 0x2
  3436                           
  3437  0022                     ??_DelayTime_1us:	
  3438                           ; 0 bytes @ 0x2
  3439                           
  3440  0022                     ?_CC2500_WriteREG:	
  3441                           ; 0 bytes @ 0x2
  3442                           
  3443  0022                     ??_DlyOff_Initialization:	
  3444                           ; 0 bytes @ 0x2
  3445                           
  3446  0022                     ??_getDimmerLights_Status:	
  3447                           ; 0 bytes @ 0x2
  3448                           
  3449  0022                     ??_setDimmerLights_SwOff:	
  3450                           ; 0 bytes @ 0x2
  3451                           
  3452  0022                     ?_setLED:	
  3453                           ; 0 bytes @ 0x2
  3454                           
  3455  0022                     ??_setLED_Main:	
  3456                           ; 0 bytes @ 0x2
  3457                           
  3458  0022                     ??_getBuz_GO:	
  3459                           ; 0 bytes @ 0x2
  3460                           
  3461  0022                     ??_getDelayOff_GO:	
  3462                           ; 0 bytes @ 0x2
  3463                           
  3464  0022                     ??_setDimmerLights_DimmingOn:	
  3465                           ; 0 bytes @ 0x2
  3466                           
  3467  0022                     ?_setDimmerLights_DimmingRun:	
  3468                           ; 0 bytes @ 0x2
  3469                           
  3470  0022                     ??_Load_Initialization:	
  3471                           ; 0 bytes @ 0x2
  3472                           
  3473  0022                     CC2500_WriteREG@value:	
  3474                           ; 0 bytes @ 0x2
  3475                           
  3476  0022                     DlyOff_Initialization@sw:	
  3477                           ; 1 bytes @ 0x2
  3478                           
  3479  0022                     getDelayOff_GO@sw:	
  3480                           ; 1 bytes @ 0x2
  3481                           
  3482  0022                     setDimmerIntr_ControlStatus@lights:	
  3483                           ; 1 bytes @ 0x2
  3484                           
  3485  0022                     setDimmerIntr_DimmingValue@lights:	
  3486                           ; 1 bytes @ 0x2
  3487                           
  3488  0022                     getDimmerIntr_DimmingValue@lights:	
  3489                           ; 1 bytes @ 0x2
  3490                           
  3491  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3492                           ; 1 bytes @ 0x2
  3493                           
  3494  0022                     setDimmerIntr_Dimming_RF@lights:	
  3495                           ; 1 bytes @ 0x2
  3496                           
  3497  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2393:	
  3498                           ; 1 bytes @ 0x2
  3499                           
  3500  0022                     setDimmerLights_SwOff@sw:	
  3501                           ; 1 bytes @ 0x2
  3502                           
  3503  0022                     setDimmerLights_DimmingOn@sw:	
  3504                           ; 1 bytes @ 0x2
  3505                           
  3506  0022                     _getDimmerLights_Allow_Condition$2532:	
  3507                           ; 1 bytes @ 0x2
  3508                           
  3509  0022                     getDimmerLights_Status@lights:	
  3510                           ; 1 bytes @ 0x2
  3511                           
  3512  0022                     setDimmerLights_DimmingRun@command:	
  3513                           ; 1 bytes @ 0x2
  3514                           
  3515  0022                     setLED@command:	
  3516                           ; 1 bytes @ 0x2
  3517                           
  3518  0022                     Flash_Memory_Read@address:	
  3519                           ; 1 bytes @ 0x2
  3520                           
  3521  0022                     setMemory_Data@address:	
  3522                           ; 1 bytes @ 0x2
  3523                           
  3524  0022                     _getRF_KeyStatus$5318:	
  3525                           ; 1 bytes @ 0x2
  3526                           
  3527  0022                     _getSw_KeyStatus$6416:	
  3528                           ; 1 bytes @ 0x2
  3529                           
  3530  0022                     _getAll_Sw_KeyStatus$6419:	
  3531                           ; 1 bytes @ 0x2
  3532                           
  3533  0022                     getMain_Lights_Count@status2:	
  3534                           ; 1 bytes @ 0x2
  3535                           
  3536  0022                     setCmd_Status@number:	
  3537                           ; 1 bytes @ 0x2
  3538                           
  3539  0022                     ___bmul@product:	
  3540                           ; 1 bytes @ 0x2
  3541                           
  3542  0022                     ___lbdiv@dividend:	
  3543                           ; 1 bytes @ 0x2
  3544                           
  3545  0022                     DelayTime_1us@i:	
  3546                           ; 1 bytes @ 0x2
  3547                           
  3548  0022                     ___wmul@multiplicand:	
  3549                           ; 2 bytes @ 0x2
  3550                           
  3551  0022                     ___awdiv@dividend:	
  3552                           ; 2 bytes @ 0x2
  3553                           
  3554  0022                     ___lwdiv@dividend:	
  3555                           ; 2 bytes @ 0x2
  3556                           
  3557                           
  3558                           ; 2 bytes @ 0x2
  3559  0022                     	ds	1
  3560  0023                     ??_CC2500_WriteREG:	
  3561  0023                     ??_setLED:	
  3562                           ; 0 bytes @ 0x3
  3563                           
  3564  0023                     ??_setDimmerLights_DimmingClose:	
  3565                           ; 0 bytes @ 0x3
  3566                           
  3567  0023                     ??_DelayOff_Initialization:	
  3568                           ; 0 bytes @ 0x3
  3569                           
  3570  0023                     ??_setDimmerLights_DimmingRun:	
  3571                           ; 0 bytes @ 0x3
  3572                           
  3573  0023                     ??_getAD:	
  3574                           ; 0 bytes @ 0x3
  3575                           
  3576  0023                     CC2500_WriteCommand@command:	
  3577                           ; 0 bytes @ 0x3
  3578                           
  3579  0023                     CC2500_ReadStatus@status_addr:	
  3580                           ; 1 bytes @ 0x3
  3581                           
  3582  0023                     getDelayOff_GO@go:	
  3583                           ; 1 bytes @ 0x3
  3584                           
  3585  0023                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3586                           ; 1 bytes @ 0x3
  3587                           
  3588  0023                     _getDimmerLights_Allow_Condition$2533:	
  3589                           ; 1 bytes @ 0x3
  3590                           
  3591  0023                     getDimmerLights_Status@status:	
  3592                           ; 1 bytes @ 0x3
  3593                           
  3594  0023                     setLED@led:	
  3595                           ; 1 bytes @ 0x3
  3596                           
  3597  0023                     getAD@adcon0:	
  3598                           ; 1 bytes @ 0x3
  3599                           
  3600  0023                     Flash_Memory_Read@ret:	
  3601                           ; 1 bytes @ 0x3
  3602                           
  3603  0023                     getSw_KeyStatus@status:	
  3604                           ; 1 bytes @ 0x3
  3605                           
  3606  0023                     ___bmul@multiplier:	
  3607                           ; 1 bytes @ 0x3
  3608                           
  3609  0023                     ___ftpack@exp:	
  3610                           ; 1 bytes @ 0x3
  3611                           
  3612  0023                     ___lbdiv@counter:	
  3613                           ; 1 bytes @ 0x3
  3614                           
  3615  0023                     _getMain_All_Error_Status$7182:	
  3616                           ; 1 bytes @ 0x3
  3617                           
  3618                           
  3619                           ; 2 bytes @ 0x3
  3620  0023                     	ds	1
  3621  0024                     ??_CC2500_ClearTXFIFO:	
  3622  0024                     ??_CC2500_ClearRXFIFO:	
  3623                           ; 0 bytes @ 0x4
  3624                           
  3625  0024                     ??_CC2500_SIDLEMode:	
  3626                           ; 0 bytes @ 0x4
  3627                           
  3628  0024                     ??_setLED_Initialization:	
  3629                           ; 0 bytes @ 0x4
  3630                           
  3631  0024                     ??_Flash_Memory_Modify:	
  3632                           ; 0 bytes @ 0x4
  3633                           
  3634  0024                     ??_RF_RxDisable:	
  3635                           ; 0 bytes @ 0x4
  3636                           
  3637  0024                     ??_setRF_AdjControl:	
  3638                           ; 0 bytes @ 0x4
  3639                           
  3640  0024                     ??_setSw_Initialization:	
  3641                           ; 0 bytes @ 0x4
  3642                           
  3643  0024                     ??_CC2500_TxData:	
  3644                           ; 0 bytes @ 0x4
  3645                           
  3646  0024                     ??_CC2500_RxData:	
  3647                           ; 0 bytes @ 0x4
  3648                           
  3649  0024                     ??_Flash_Memory_Initialization:	
  3650                           ; 0 bytes @ 0x4
  3651                           
  3652  0024                     ??_getLoad_AD:	
  3653                           ; 0 bytes @ 0x4
  3654                           
  3655  0024                     ??_getTemp_AD:	
  3656                           ; 0 bytes @ 0x4
  3657                           
  3658  0024                     ??___wmul:	
  3659                           ; 0 bytes @ 0x4
  3660                           
  3661  0024                     ??___awdiv:	
  3662                           ; 0 bytes @ 0x4
  3663                           
  3664  0024                     ??___lwdiv:	
  3665                           ; 0 bytes @ 0x4
  3666                           
  3667  0024                     CC2500_WriteREG@w_addr:	
  3668                           ; 0 bytes @ 0x4
  3669                           
  3670  0024                     _getDimmerLights_Allow_Condition$2534:	
  3671                           ; 1 bytes @ 0x4
  3672                           
  3673  0024                     setDimmerLights_DimmingRun@lights:	
  3674                           ; 1 bytes @ 0x4
  3675                           
  3676  0024                     setLED_Initialization@led:	
  3677                           ; 1 bytes @ 0x4
  3678                           
  3679  0024                     setLED_Main@led:	
  3680                           ; 1 bytes @ 0x4
  3681                           
  3682  0024                     setSw_Initialization@sw:	
  3683                           ; 1 bytes @ 0x4
  3684                           
  3685  0024                     getSw_KeyStatus@sw:	
  3686                           ; 1 bytes @ 0x4
  3687                           
  3688  0024                     ___ftpack@sign:	
  3689                           ; 1 bytes @ 0x4
  3690                           
  3691  0024                     ___lbdiv@quotient:	
  3692                           ; 1 bytes @ 0x4
  3693                           
  3694  0024                     getBuz_GO@i:	
  3695                           ; 1 bytes @ 0x4
  3696                           
  3697  0024                     DelayTime_1us@j:	
  3698                           ; 2 bytes @ 0x4
  3699                           
  3700  0024                     ___wmul@product:	
  3701                           ; 2 bytes @ 0x4
  3702                           
  3703                           
  3704                           ; 2 bytes @ 0x4
  3705  0024                     	ds	1
  3706  0025                     ??_CC2500_InitSetREG:	
  3707  0025                     ??_CC2500_InitPATable:	
  3708                           ; 0 bytes @ 0x5
  3709                           
  3710  0025                     ??___ftpack:	
  3711                           ; 0 bytes @ 0x5
  3712                           
  3713  0025                     ??_LED_Initialization:	
  3714                           ; 0 bytes @ 0x5
  3715                           
  3716  0025                     ??_LED_Main:	
  3717                           ; 0 bytes @ 0x5
  3718                           
  3719  0025                     ??_Switch_Initialization:	
  3720                           ; 0 bytes @ 0x5
  3721                           
  3722  0025                     ?_Division:	
  3723                           ; 0 bytes @ 0x5
  3724                           
  3725  0025                     CC2500_TxData@loop_e:	
  3726                           ; 1 bytes @ 0x5
  3727                           
  3728  0025                     CC2500_RxData@loop_f:	
  3729                           ; 1 bytes @ 0x5
  3730                           
  3731  0025                     getDimmerLights_Allow_Condition@lights:	
  3732                           ; 1 bytes @ 0x5
  3733                           
  3734  0025                     Division@num:	
  3735                           ; 1 bytes @ 0x5
  3736                           
  3737  0025                     Flash_Memory_Initialization@value:	
  3738                           ; 1 bytes @ 0x5
  3739                           
  3740  0025                     Flash_Memory_Modify@i:	
  3741                           ; 1 bytes @ 0x5
  3742                           
  3743  0025                     getTemp_AD@channel:	
  3744                           ; 1 bytes @ 0x5
  3745                           
  3746  0025                     setRF_AdjControl@status:	
  3747                           ; 1 bytes @ 0x5
  3748                           
  3749  0025                     getMain_All_Error_Status@command:	
  3750                           ; 1 bytes @ 0x5
  3751                           
  3752  0025                     ___awdiv@counter:	
  3753                           ; 1 bytes @ 0x5
  3754                           
  3755  0025                     ___lwdiv@quotient:	
  3756                           ; 1 bytes @ 0x5
  3757                           
  3758                           
  3759                           ; 2 bytes @ 0x5
  3760  0025                     	ds	1
  3761  0026                     ??_CC2500_PowerRST:	
  3762  0026                     ??_CC2500_FrequencyCabr:	
  3763                           ; 0 bytes @ 0x6
  3764                           
  3765  0026                     ??_Division:	
  3766                           ; 0 bytes @ 0x6
  3767                           
  3768  0026                     ??_Flash_Memory_Main:	
  3769                           ; 0 bytes @ 0x6
  3770                           
  3771  0026                     CC2500_InitSetREG@temp1:	
  3772                           ; 0 bytes @ 0x6
  3773                           
  3774  0026                     CC2500_InitPATable@temp:	
  3775                           ; 1 bytes @ 0x6
  3776                           
  3777  0026                     getDimmerLights_Allow_Condition@allow:	
  3778                           ; 1 bytes @ 0x6
  3779                           
  3780  0026                     getLoad_AD@channel:	
  3781                           ; 1 bytes @ 0x6
  3782                           
  3783  0026                     setRF_AdjControl@dimmingStatus:	
  3784                           ; 1 bytes @ 0x6
  3785                           
  3786  0026                     getMain_All_Error_Status@status:	
  3787                           ; 1 bytes @ 0x6
  3788                           
  3789  0026                     ___awdiv@sign:	
  3790                           ; 1 bytes @ 0x6
  3791                           
  3792  0026                     getTemp_AD@ADRES:	
  3793                           ; 1 bytes @ 0x6
  3794                           
  3795                           
  3796                           ; 2 bytes @ 0x6
  3797  0026                     	ds	1
  3798  0027                     CC2500_InitSetREG@temp2:	
  3799  0027                     CC2500_InitPATable@loop_d:	
  3800                           ; 1 bytes @ 0x7
  3801                           
  3802  0027                     Flash_Memory_Main@key_Status:	
  3803                           ; 1 bytes @ 0x7
  3804                           
  3805  0027                     getLoad_AD@k:	
  3806                           ; 1 bytes @ 0x7
  3807                           
  3808  0027                     setRF_AdjControl@sw:	
  3809                           ; 1 bytes @ 0x7
  3810                           
  3811  0027                     ___lwdiv@counter:	
  3812                           ; 1 bytes @ 0x7
  3813                           
  3814  0027                     ___awdiv@quotient:	
  3815                           ; 1 bytes @ 0x7
  3816                           
  3817                           
  3818                           ; 2 bytes @ 0x7
  3819  0027                     	ds	1
  3820  0028                     ??_Load_Main:	
  3821  0028                     ?___awtoft:	
  3822                           ; 0 bytes @ 0x8
  3823                           
  3824  0028                     CC2500_InitSetREG@loop_c:	
  3825                           ; 3 bytes @ 0x8
  3826                           
  3827  0028                     Division@value:	
  3828                           ; 1 bytes @ 0x8
  3829                           
  3830  0028                     _Flash_Memory_Main$3446:	
  3831                           ; 1 bytes @ 0x8
  3832                           
  3833  0028                     getLoad_AD@j:	
  3834                           ; 1 bytes @ 0x8
  3835                           
  3836  0028                     ___awtoft@c:	
  3837                           ; 1 bytes @ 0x8
  3838                           
  3839                           
  3840                           ; 2 bytes @ 0x8
  3841  0028                     	ds	1
  3842  0029                     ?_setBuz:	
  3843  0029                     ??_CC2500_PowerOnInitial:	
  3844                           ; 0 bytes @ 0x9
  3845                           
  3846  0029                     Division@result:	
  3847                           ; 0 bytes @ 0x9
  3848                           
  3849  0029                     setBuz@time:	
  3850                           ; 1 bytes @ 0x9
  3851                           
  3852  0029                     getLoad_AD@ADRES:	
  3853                           ; 2 bytes @ 0x9
  3854                           
  3855                           
  3856                           ; 2 bytes @ 0x9
  3857  0029                     	ds	1
  3858  002A                     _Load_Main$3837:	
  3859                           
  3860                           ; 2 bytes @ 0xA
  3861  002A                     	ds	1
  3862  002B                     ??_setBuz:	
  3863  002B                     ??___awtoft:	
  3864                           ; 0 bytes @ 0xB
  3865                           
  3866  002B                     getLoad_AD@i:	
  3867                           ; 0 bytes @ 0xB
  3868                           
  3869                           
  3870                           ; 1 bytes @ 0xB
  3871  002B                     	ds	1
  3872  002C                     setBuz@count:	
  3873  002C                     Load_Main@error:	
  3874                           ; 1 bytes @ 0xC
  3875                           
  3876                           
  3877                           ; 1 bytes @ 0xC
  3878  002C                     	ds	1
  3879  002D                     ??_setDimmerLights_SwOn:	
  3880  002D                     ??_my_MainTimer:	
  3881                           ; 0 bytes @ 0xD
  3882                           
  3883  002D                     ??_Exception_Main:	
  3884                           ; 0 bytes @ 0xD
  3885                           
  3886  002D                     Load_Main@ErrorCountValue:	
  3887                           ; 0 bytes @ 0xD
  3888                           
  3889  002D                     ___awtoft@sign:	
  3890                           ; 1 bytes @ 0xD
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0xD
  3894  002D                     	ds	1
  3895  002E                     ?___ftdiv:	
  3896  002E                     ?___ftmul:	
  3897                           ; 3 bytes @ 0xE
  3898                           
  3899  002E                     setDimmerLights_SwOn@dimmingStatus:	
  3900                           ; 3 bytes @ 0xE
  3901                           
  3902  002E                     Load_Main@Load_RunStatus:	
  3903                           ; 1 bytes @ 0xE
  3904                           
  3905  002E                     Exception_Main@status:	
  3906                           ; 1 bytes @ 0xE
  3907                           
  3908  002E                     ___ftdiv@f2:	
  3909                           ; 1 bytes @ 0xE
  3910                           
  3911  002E                     ___ftmul@f1:	
  3912                           ; 3 bytes @ 0xE
  3913                           
  3914                           
  3915                           ; 3 bytes @ 0xE
  3916  002E                     	ds	1
  3917  002F                     _setDimmerLights_SwOn$2446:	
  3918  002F                     Load_Main@LightsCount:	
  3919                           ; 1 bytes @ 0xF
  3920                           
  3921  002F                     Exception_Main@count:	
  3922                           ; 1 bytes @ 0xF
  3923                           
  3924                           
  3925                           ; 1 bytes @ 0xF
  3926  002F                     	ds	1
  3927  0030                     _setDimmerLights_SwOn$2455:	
  3928  0030                     Exception_Main@error:	
  3929                           ; 1 bytes @ 0x10
  3930                           
  3931  0030                     Load_Main@i:	
  3932                           ; 1 bytes @ 0x10
  3933                           
  3934                           
  3935                           ; 2 bytes @ 0x10
  3936  0030                     	ds	1
  3937  0031                     setDimmerLights_SwOn@idle:	
  3938  0031                     Exception_Main@i:	
  3939                           ; 1 bytes @ 0x11
  3940                           
  3941  0031                     ___ftdiv@f1:	
  3942                           ; 2 bytes @ 0x11
  3943                           
  3944  0031                     ___ftmul@f2:	
  3945                           ; 3 bytes @ 0x11
  3946                           
  3947                           
  3948                           ; 3 bytes @ 0x11
  3949  0031                     	ds	1
  3950  0032                     setDimmerLights_SwOn@sw:	
  3951                           
  3952                           ; 1 bytes @ 0x12
  3953  0032                     	ds	1
  3954  0033                     ??_setSw_Main:	
  3955  0033                     Exception_Main@i_7194:	
  3956                           ; 0 bytes @ 0x13
  3957                           
  3958                           
  3959                           ; 2 bytes @ 0x13
  3960  0033                     	ds	1
  3961  0034                     ??___ftdiv:	
  3962  0034                     ??___ftmul:	
  3963                           ; 0 bytes @ 0x14
  3964                           
  3965                           
  3966                           ; 0 bytes @ 0x14
  3967  0034                     	ds	1
  3968  0035                     setSw_Main@sw:	
  3969  0035                     Exception_Main@lights:	
  3970                           ; 1 bytes @ 0x15
  3971                           
  3972                           
  3973                           ; 1 bytes @ 0x15
  3974  0035                     	ds	1
  3975  0036                     ??_Switch_Main:	
  3976                           
  3977                           ; 0 bytes @ 0x16
  3978  0036                     	ds	2
  3979  0038                     ___ftdiv@cntr:	
  3980  0038                     ___ftmul@exp:	
  3981                           ; 1 bytes @ 0x18
  3982                           
  3983                           
  3984                           ; 1 bytes @ 0x18
  3985  0038                     	ds	1
  3986  0039                     ___ftdiv@f3:	
  3987  0039                     ___ftmul@f3_as_product:	
  3988                           ; 3 bytes @ 0x19
  3989                           
  3990                           
  3991                           ; 3 bytes @ 0x19
  3992  0039                     	ds	3
  3993  003C                     ___ftdiv@exp:	
  3994  003C                     ___ftmul@cntr:	
  3995                           ; 1 bytes @ 0x1C
  3996                           
  3997                           
  3998                           ; 1 bytes @ 0x1C
  3999  003C                     	ds	1
  4000  003D                     ___ftdiv@sign:	
  4001  003D                     ___ftmul@sign:	
  4002                           ; 1 bytes @ 0x1D
  4003                           
  4004                           
  4005                           ; 1 bytes @ 0x1D
  4006  003D                     	ds	1
  4007  003E                     ?___ftneg:	
  4008  003E                     ___ftneg@f1:	
  4009                           ; 3 bytes @ 0x1E
  4010                           
  4011                           
  4012                           ; 3 bytes @ 0x1E
  4013  003E                     	ds	3
  4014  0041                     ??___ftneg:	
  4015  0041                     ?___ftadd:	
  4016                           ; 0 bytes @ 0x21
  4017                           
  4018  0041                     ___ftadd@f1:	
  4019                           ; 3 bytes @ 0x21
  4020                           
  4021                           
  4022                           ; 3 bytes @ 0x21
  4023  0041                     	ds	3
  4024  0044                     ___ftadd@f2:	
  4025                           
  4026                           ; 3 bytes @ 0x24
  4027  0044                     	ds	3
  4028  0047                     ??___ftadd:	
  4029                           
  4030                           ; 0 bytes @ 0x27
  4031  0047                     	ds	4
  4032  004B                     ___ftadd@sign:	
  4033                           
  4034                           ; 1 bytes @ 0x2B
  4035  004B                     	ds	1
  4036  004C                     ___ftadd@exp2:	
  4037                           
  4038                           ; 1 bytes @ 0x2C
  4039  004C                     	ds	1
  4040  004D                     ___ftadd@exp1:	
  4041                           
  4042                           ; 1 bytes @ 0x2D
  4043  004D                     	ds	1
  4044  004E                     ?___fttol:	
  4045  004E                     ___fttol@f1:	
  4046                           ; 4 bytes @ 0x2E
  4047                           
  4048                           
  4049                           ; 3 bytes @ 0x2E
  4050  004E                     	ds	4
  4051  0052                     ??___fttol:	
  4052                           
  4053                           ; 0 bytes @ 0x32
  4054  0052                     	ds	4
  4055  0056                     ___fttol@sign1:	
  4056                           
  4057                           ; 1 bytes @ 0x36
  4058  0056                     	ds	1
  4059  0057                     ___fttol@lval:	
  4060                           
  4061                           ; 4 bytes @ 0x37
  4062  0057                     	ds	4
  4063  005B                     ___fttol@exp1:	
  4064                           
  4065                           ; 1 bytes @ 0x3B
  4066  005B                     	ds	1
  4067  005C                     ??_getDimmerLights_ValueToPercent:	
  4068  005C                     ??_getDimmerLights_PercentToValue:	
  4069                           ; 0 bytes @ 0x3C
  4070                           
  4071                           
  4072                           ; 0 bytes @ 0x3C
  4073  005C                     	ds	2
  4074  005E                     getDimmerLights_PercentToValue@value:	
  4075  005E                     getDimmerLights_ValueToPercent@value:	
  4076                           ; 1 bytes @ 0x3E
  4077                           
  4078                           
  4079                           ; 1 bytes @ 0x3E
  4080  005E                     	ds	1
  4081  005F                     getDimmerLights_PercentToValue@i:	
  4082  005F                     getDimmerLights_ValueToPercent@i:	
  4083                           ; 3 bytes @ 0x3F
  4084                           
  4085                           
  4086                           ; 3 bytes @ 0x3F
  4087  005F                     	ds	3
  4088  0062                     ?_setProductData:	
  4089  0062                     ??_DimmerIntr_Initialization:	
  4090                           ; 0 bytes @ 0x42
  4091                           
  4092  0062                     ?_setDimmerIntr_MaxmumValue:	
  4093                           ; 0 bytes @ 0x42
  4094                           
  4095  0062                     setDimmerIntr_MaxmumValue@value:	
  4096                           ; 0 bytes @ 0x42
  4097                           
  4098  0062                     setProductData@value:	
  4099                           ; 1 bytes @ 0x42
  4100                           
  4101                           
  4102                           ; 1 bytes @ 0x42
  4103  0062                     	ds	1
  4104  0063                     ??_setProductData:	
  4105  0063                     ??_setDimmerIntr_MaxmumValue:	
  4106                           ; 0 bytes @ 0x43
  4107                           
  4108                           
  4109                           ; 0 bytes @ 0x43
  4110  0063                     	ds	1
  4111  0064                     ??_DimmerLights_Initialization:	
  4112  0064                     setDimmerIntr_MaxmumValue@lights:	
  4113                           ; 0 bytes @ 0x44
  4114                           
  4115  0064                     setProductData@address:	
  4116                           ; 1 bytes @ 0x44
  4117                           
  4118                           
  4119                           ; 1 bytes @ 0x44
  4120  0064                     	ds	1
  4121  0065                     ??_DlyOff_Main:	
  4122  0065                     ??_DimmerLights_AssignationDimming:	
  4123                           ; 0 bytes @ 0x45
  4124                           
  4125  0065                     ?_setRF_DimmerLights:	
  4126                           ; 0 bytes @ 0x45
  4127                           
  4128  0065                     ??_setTemp_Main:	
  4129                           ; 0 bytes @ 0x45
  4130                           
  4131  0065                     ??_setLog_Code:	
  4132                           ; 0 bytes @ 0x45
  4133                           
  4134  0065                     ??_setRFSW_AdjControl:	
  4135                           ; 0 bytes @ 0x45
  4136                           
  4137  0065                     ?_setDelayOff_GO:	
  4138                           ; 0 bytes @ 0x45
  4139                           
  4140  0065                     setDelayOff_GO@command:	
  4141                           ; 0 bytes @ 0x45
  4142                           
  4143  0065                     setRF_DimmerLights@on:	
  4144                           ; 1 bytes @ 0x45
  4145                           
  4146                           
  4147                           ; 1 bytes @ 0x45
  4148  0065                     	ds	1
  4149  0066                     ??_setRF_DimmerLights:	
  4150  0066                     setDelayOff_GO@value:	
  4151                           ; 0 bytes @ 0x46
  4152                           
  4153                           
  4154                           ; 1 bytes @ 0x46
  4155  0066                     	ds	1
  4156  0067                     ??_setDelayOff_GO:	
  4157  0067                     DlyOff_Main@sw:	
  4158                           ; 0 bytes @ 0x47
  4159                           
  4160  0067                     DimmerLights_AssignationDimming@status:	
  4161                           ; 1 bytes @ 0x47
  4162                           
  4163  0067                     setTemp_Main@error:	
  4164                           ; 1 bytes @ 0x47
  4165                           
  4166  0067                     setRFSW_AdjControl@status:	
  4167                           ; 1 bytes @ 0x47
  4168                           
  4169                           
  4170                           ; 1 bytes @ 0x47
  4171  0067                     	ds	1
  4172  0068                     ??_DelayOff_Main:	
  4173  0068                     DimmerLights_AssignationDimming@sw:	
  4174                           ; 0 bytes @ 0x48
  4175                           
  4176  0068                     setRFSW_AdjControl@sw:	
  4177                           ; 1 bytes @ 0x48
  4178                           
  4179  0068                     setRF_DimmerLights@status:	
  4180                           ; 1 bytes @ 0x48
  4181                           
  4182  0068                     setTemp_Main@SafeValue:	
  4183                           ; 1 bytes @ 0x48
  4184                           
  4185                           
  4186                           ; 2 bytes @ 0x48
  4187  0068                     	ds	1
  4188  0069                     ??_DimmerLights_TwoPhase_Main:	
  4189  0069                     setDelayOff_GO@i:	
  4190                           ; 0 bytes @ 0x49
  4191                           
  4192  0069                     DimmerLights_TwoPhase_Main@lights:	
  4193                           ; 1 bytes @ 0x49
  4194                           
  4195  0069                     setRF_DimmerLights@lights:	
  4196                           ; 1 bytes @ 0x49
  4197                           
  4198                           
  4199                           ; 1 bytes @ 0x49
  4200  0069                     	ds	1
  4201  006A                     ?_setDimmerLights_Dimming:	
  4202  006A                     setDelayOff_GO@j:	
  4203                           ; 0 bytes @ 0x4A
  4204                           
  4205  006A                     setDimmerLights_Dimming@status:	
  4206                           ; 1 bytes @ 0x4A
  4207                           
  4208  006A                     setTemp_Main@DangerValue:	
  4209                           ; 1 bytes @ 0x4A
  4210                           
  4211                           
  4212                           ; 2 bytes @ 0x4A
  4213  006A                     	ds	1
  4214  006B                     ??_setDimmerLights_Dimming:	
  4215  006B                     setDelayOff_GO@k:	
  4216                           ; 0 bytes @ 0x4B
  4217                           
  4218                           
  4219                           ; 1 bytes @ 0x4B
  4220  006B                     	ds	1
  4221  006C                     setDelayOff_GO@sw:	
  4222  006C                     setDimmerLights_Dimming@value:	
  4223                           ; 1 bytes @ 0x4C
  4224                           
  4225  006C                     setTemp_Main@TempGO:	
  4226                           ; 1 bytes @ 0x4C
  4227                           
  4228                           
  4229                           ; 1 bytes @ 0x4C
  4230  006C                     	ds	1
  4231  006D                     ?_setDimmerLights_OnOff:	
  4232  006D                     ??_setRFSW_Control:	
  4233                           ; 0 bytes @ 0x4D
  4234                           
  4235  006D                     setDimmerLights_OnOff@command:	
  4236                           ; 0 bytes @ 0x4D
  4237                           
  4238  006D                     setDimmerLights_Dimming@lights:	
  4239                           ; 1 bytes @ 0x4D
  4240                           
  4241  006D                     setTemp_Main@AD:	
  4242                           ; 1 bytes @ 0x4D
  4243                           
  4244                           
  4245                           ; 2 bytes @ 0x4D
  4246  006D                     	ds	1
  4247  006E                     ??_setDimmerLights_OnOff:	
  4248  006E                     setRFSW_Control@status:	
  4249                           ; 0 bytes @ 0x4E
  4250                           
  4251                           
  4252                           ; 1 bytes @ 0x4E
  4253  006E                     	ds	1
  4254  006F                     ??_Temp_Main:	
  4255  006F                     setRFSW_Control@sw:	
  4256                           ; 0 bytes @ 0x4F
  4257                           
  4258                           
  4259                           ; 1 bytes @ 0x4F
  4260  006F                     	ds	1
  4261  0070                     ??_setDimmerLights_Main:	
  4262  0070                     ??_setControl_Lights_Table:	
  4263                           ; 0 bytes @ 0x50
  4264                           
  4265  0070                     ??_DimmerLights_Main:	
  4266                           ; 0 bytes @ 0x50
  4267                           
  4268  0070                     ??_RF_Main:	
  4269                           ; 0 bytes @ 0x50
  4270                           
  4271  0070                     ??_main:	
  4272                           ; 0 bytes @ 0x50
  4273                           
  4274                           
  4275                           	psect	maintext
  4276  138E                     __pmaintext:	
  4277                           ; 0 bytes @ 0x50
  4278 ;;
  4279 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4280 ;;
  4281 ;; *************** function _main *****************
  4282 ;; Defined at:
  4283 ;;		line 7 in file "../src/main_B1.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  argc            2    4[BANK1 ] int 
  4286 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;		None
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  2    4[BANK1 ] int 
  4291 ;; Registers used:
  4292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 17F/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4298 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;Total ram usage:        4 bytes
  4303 ;; Hardware stack levels required when called:   13
  4304 ;; This function calls:
  4305 ;;		_Buzzer_Initialization
  4306 ;;		_Buzzer_Main
  4307 ;;		_CC2500_PowerOnInitial
  4308 ;;		_DelayOff_Initialization
  4309 ;;		_DelayOff_Main
  4310 ;;		_DimmerLights_Initialization
  4311 ;;		_DimmerLights_Main
  4312 ;;		_Exception_Main
  4313 ;;		_Flash_Memory_Initialization
  4314 ;;		_Flash_Memory_Main
  4315 ;;		_LED_Initialization
  4316 ;;		_LED_Main
  4317 ;;		_Load_Initialization
  4318 ;;		_Load_Main
  4319 ;;		_Mcu_Initialization
  4320 ;;		_RF_Initialization
  4321 ;;		_RF_Main
  4322 ;;		_Switch_Initialization
  4323 ;;		_Switch_Main
  4324 ;;		_Temp_Initialization
  4325 ;;		_Temp_Main
  4326 ;;		_WDT_Main
  4327 ;;		_getLoad_AD
  4328 ;;		_getTemp_AD
  4329 ;;		_myMain_Initialization
  4330 ;;		_my_MainTimer
  4331 ;; This function is called by:
  4332 ;;		Startup code after reset
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           
  4337                           ;psect for function _main
  4338  138E                     _main:	
  4339                           
  4340                           ;main_B1.c: 8: myMain_Initialization();
  4341                           
  4342                           ;incstack = 0
  4343                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4344  138E  3199  211A  3193   	fcall	_myMain_Initialization
  4345                           
  4346                           ;main_B1.c: 9: Mcu_Initialization();
  4347  1391  3198  2097  3193   	fcall	_Mcu_Initialization
  4348                           
  4349                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4350  1394  3187  2705  3193   	fcall	_Flash_Memory_Initialization
  4351                           
  4352                           ;main_B1.c: 11: LED_Initialization();
  4353  1397  31A7  272D  3193   	fcall	_LED_Initialization
  4354                           
  4355                           ;main_B1.c: 12: Buzzer_Initialization();
  4356  139A  31A6  2637  3193   	fcall	_Buzzer_Initialization
  4357                           
  4358                           ;main_B1.c: 14: ;;
  4359                           ;main_B1.c: 15: Temp_Initialization();
  4360  139D  31A6  2643  3193   	fcall	_Temp_Initialization
  4361                           
  4362                           ;main_B1.c: 16: Load_Initialization();
  4363  13A0  31A6  263A  3193   	fcall	_Load_Initialization
  4364                           
  4365                           ;main_B1.c: 17: ;;
  4366                           ;main_B1.c: 18: DelayOff_Initialization();
  4367  13A3  31A6  267B  3193   	fcall	_DelayOff_Initialization
  4368                           
  4369                           ;main_B1.c: 20: DimmerLights_Initialization();
  4370  13A6  31A6  26C5  3193   	fcall	_DimmerLights_Initialization
  4371                           
  4372                           ;main_B1.c: 21: ;;
  4373                           ;main_B1.c: 22: ;;
  4374                           ;main_B1.c: 23: ;;
  4375                           ;main_B1.c: 24: Switch_Initialization();
  4376  13A9  31A6  26AB  3193   	fcall	_Switch_Initialization
  4377                           
  4378                           ;main_B1.c: 25: RF_Initialization();
  4379  13AC  31A6  263D  3193   	fcall	_RF_Initialization
  4380                           
  4381                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4382  13AF  3199  2156  3193   	fcall	_CC2500_PowerOnInitial
  4383  13B2                     l10337:	
  4384                           ;main_B1.c: 27: ;;
  4385                           ;main_B1.c: 28: ;;
  4386                           ;main_B1.c: 30: while (1) {
  4387                           
  4388                           
  4389                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4390  13B2  0021               	movlb	1	; select bank1
  4391  13B3  1C2F               	btfss	_myMain^(0+128),0
  4392  13B4  2BBD               	goto	l10341
  4393                           
  4394                           ;main_B1.c: 38: getLoad_AD(0x05);
  4395  13B5  3005               	movlw	5
  4396  13B6  3197  278E  3193   	fcall	_getLoad_AD
  4397                           
  4398                           ;main_B1.c: 42: getTemp_AD(0x09);
  4399  13B9  3009               	movlw	9
  4400  13BA  318B  2343  3193   	fcall	_getTemp_AD
  4401  13BD                     l10341:	
  4402                           
  4403                           ;main_B1.c: 57: }
  4404                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4405  13BD  0022               	movlb	2	; select bank2
  4406  13BE  1C31               	btfss	_Timer1^(0+256),0
  4407  13BF  2BB2               	goto	l10337
  4408                           
  4409                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4410  13C0  1031               	bcf	_Timer1^(0+256),0
  4411                           
  4412                           ;main_B1.c: 96: my_MainTimer();
  4413  13C1  319F  2787  3193   	fcall	_my_MainTimer
  4414                           
  4415                           ;main_B1.c: 97: WDT_Main();
  4416  13C4  3198  20A9  3193   	fcall	_WDT_Main
  4417                           
  4418                           ;main_B1.c: 98: ;;
  4419                           ;main_B1.c: 99: ;;
  4420                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4421  13C7  0021               	movlb	1	; select bank1
  4422  13C8  1C2F               	btfss	_myMain^(0+128),0
  4423  13C9  2BB2               	goto	l10337
  4424                           
  4425                           ;main_B1.c: 101: Flash_Memory_Main();
  4426  13CA  3190  20D5  3193   	fcall	_Flash_Memory_Main
  4427                           
  4428                           ;main_B1.c: 103: LED_Main();
  4429  13CD  31A7  2739  3193   	fcall	_LED_Main
  4430                           
  4431                           ;main_B1.c: 104: Buzzer_Main();
  4432  13D0  3191  219B  3193   	fcall	_Buzzer_Main
  4433                           
  4434                           ;main_B1.c: 106: ;;
  4435                           ;main_B1.c: 107: Temp_Main();
  4436  13D3  31A6  2646  3193   	fcall	_Temp_Main
  4437                           
  4438                           ;main_B1.c: 108: Load_Main();
  4439  13D6  3180  2053  3193   	fcall	_Load_Main
  4440                           
  4441                           ;main_B1.c: 109: ;;
  4442                           ;main_B1.c: 111: ;;
  4443                           ;main_B1.c: 112: DimmerLights_Main();
  4444  13D9  319E  2608  3193   	fcall	_DimmerLights_Main
  4445                           
  4446                           ;main_B1.c: 113: Switch_Main();
  4447  13DC  31A6  26E6  3193   	fcall	_Switch_Main
  4448                           
  4449                           ;main_B1.c: 114: ;;
  4450                           ;main_B1.c: 115: ;;
  4451                           ;main_B1.c: 117: RF_Main();
  4452  13DF  31A6  2640  3193   	fcall	_RF_Main
  4453                           
  4454                           ;main_B1.c: 118: DelayOff_Main();
  4455  13E2  31A6  2683  3193   	fcall	_DelayOff_Main
  4456                           
  4457                           ;main_B1.c: 119: ;;
  4458                           ;main_B1.c: 120: ;;
  4459                           ;main_B1.c: 121: Exception_Main();
  4460  13E5  3185  2559  3193   	fcall	_Exception_Main
  4461  13E8  2BB2               	goto	l10337
  4462  13E9                     __end_of_main:	
  4463                           ;main_B1.c: 128: }
  4464                           ;main_B1.c: 129: }
  4465                           ;main_B1.c: 163: }
  4466                           ;main_B1.c: 164: return (0);
  4467                           ;	Return value of _main is never used
  4468                           
  4469                           
  4470                           	psect	text1
  4471  1F87                     __ptext1:	
  4472 ;; *************** function _my_MainTimer *****************
  4473 ;; Defined at:
  4474 ;;		line 185 in file "../src/main_B1.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;		None
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;		None
  4479 ;; Return value:  Size  Location     Type
  4480 ;;		None               void
  4481 ;; Registers used:
  4482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;Total ram usage:        1 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    7
  4495 ;; This function calls:
  4496 ;;		_setBuz
  4497 ;; This function is called by:
  4498 ;;		_main
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           
  4503                           ;psect for function _my_MainTimer
  4504  1F87                     _my_MainTimer:	
  4505                           
  4506                           ;main_B1.c: 187: if (myMain.PowerON == 0) {
  4507                           
  4508                           ;incstack = 0
  4509                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4510  1F87  0021               	movlb	1	; select bank1
  4511  1F88  182F               	btfsc	_myMain^(0+128),0
  4512  1F89  2FA1               	goto	l9375
  4513                           
  4514                           ;main_B1.c: 188: myMain.PowerCount++;
  4515  1F8A  3001               	movlw	1
  4516  1F8B  0020               	movlb	0	; select bank0
  4517  1F8C  00AD               	movwf	??_my_MainTimer
  4518  1F8D  082D               	movf	??_my_MainTimer,w
  4519  1F8E  0021               	movlb	1	; select bank1
  4520  1F8F  07B0               	addwf	(_myMain^(0+128)+1),f
  4521                           
  4522                           ;main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4523  1F90  0830               	movf	(_myMain^(0+128)+1),w
  4524  1F91  3A4B               	xorlw	75
  4525  1F92  1D03               	skipz
  4526  1F93  0008               	return
  4527                           
  4528                           ;main_B1.c: 190: myMain.PowerCount = 0;
  4529  1F94  01B0               	clrf	(_myMain^(0+128)+1)
  4530                           
  4531                           ;main_B1.c: 191: myMain.PowerON = 1;
  4532  1F95  142F               	bsf	_myMain^(0+128),0
  4533                           
  4534                           ;main_B1.c: 196: setBuz(3, 50);
  4535  1F96  3032               	movlw	50
  4536  1F97  0020               	movlb	0	; select bank0
  4537  1F98  00A9               	movwf	setBuz@time
  4538  1F99  3000               	movlw	0
  4539  1F9A  00AA               	movwf	setBuz@time+1
  4540  1F9B  3003               	movlw	3
  4541  1F9C  3193  2335         	fcall	_setBuz
  4542                           
  4543                           ;main_B1.c: 197: myMain.SelfTest = 1;
  4544  1F9E  0021               	movlb	1	; select bank1
  4545  1F9F  162F               	bsf	_myMain^(0+128),4
  4546                           
  4547                           ;main_B1.c: 206: }
  4548                           ;main_B1.c: 207: } else {
  4549  1FA0  0008               	return
  4550  1FA1                     l9375:	
  4551                           
  4552                           ;main_B1.c: 208: myMain.PowerCount++;
  4553  1FA1  3001               	movlw	1
  4554  1FA2  0020               	movlb	0	; select bank0
  4555  1FA3  00AD               	movwf	??_my_MainTimer
  4556  1FA4  082D               	movf	??_my_MainTimer,w
  4557  1FA5  0021               	movlb	1	; select bank1
  4558  1FA6  07B0               	addwf	(_myMain^(0+128)+1),f
  4559                           
  4560                           ;main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4561  1FA7  0830               	movf	(_myMain^(0+128)+1),w
  4562  1FA8  3A32               	xorlw	50
  4563  1FA9  1903               	btfsc	3,2
  4564                           
  4565                           ;main_B1.c: 210: myMain.PowerCount = 0;
  4566  1FAA  01B0               	clrf	(_myMain^(0+128)+1)
  4567                           
  4568                           ;main_B1.c: 226: }
  4569                           ;main_B1.c: 228: myMain.Count1++;
  4570  1FAB  3001               	movlw	1
  4571  1FAC  07B3               	addwf	(_myMain^(0+128)+4),f
  4572  1FAD  3000               	movlw	0
  4573  1FAE  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4574                           
  4575                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4576  1FAF  3004               	movlw	4
  4577  1FB0  3EAF               	addlw	_myMain& (0+255)
  4578  1FB1  0086               	movwf	6
  4579  1FB2  0187               	clrf	7
  4580  1FB3  3F40               	moviw [0]fsr1
  4581  1FB4  3A32               	xorlw	50
  4582  1FB5  1D03               	skipz
  4583  1FB6  2FB9               	goto	u10295
  4584  1FB7  3F41               	moviw [1]fsr1
  4585  1FB8  3A00               	xorlw	0
  4586  1FB9                     u10295:	
  4587  1FB9  1D03               	skipz
  4588  1FBA  0008               	return
  4589                           
  4590                           ;main_B1.c: 230: myMain.Count1 = 0;
  4591  1FBB  01B3               	clrf	(_myMain^(0+128)+4)
  4592  1FBC  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4593                           
  4594                           ;main_B1.c: 242: if (myMain.Flag) {
  4595  1FBD  1CAF               	btfss	_myMain^(0+128),1
  4596  1FBE  2FC1               	goto	l2929
  4597                           
  4598                           ;main_B1.c: 243: myMain.Flag = 0;
  4599  1FBF  10AF               	bcf	_myMain^(0+128),1
  4600                           
  4601                           ;main_B1.c: 252: } else {
  4602  1FC0  0008               	return
  4603  1FC1                     l2929:	
  4604                           
  4605                           ;main_B1.c: 253: myMain.Flag = 1;
  4606  1FC1  14AF               	bsf	_myMain^(0+128),1
  4607  1FC2  0008               	return
  4608  1FC3                     __end_of_my_MainTimer:	
  4609                           
  4610                           	psect	text2
  4611  191A                     __ptext2:	
  4612 ;; *************** function _myMain_Initialization *****************
  4613 ;; Defined at:
  4614 ;;		line 170 in file "../src/main_B1.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;		None
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;		None
  4619 ;; Return value:  Size  Location     Type
  4620 ;;		None               void
  4621 ;; Registers used:
  4622 ;;		wreg, fsr1l, fsr1h
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;Total ram usage:        1 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    5
  4635 ;; This function calls:
  4636 ;;		Nothing
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _myMain_Initialization
  4644  191A                     _myMain_Initialization:	
  4645                           
  4646                           ;main_B1.c: 173: product = &_product;
  4647                           
  4648                           ;incstack = 0
  4649                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4650  191A  304E               	movlw	__product& (0+255)
  4651  191B  0020               	movlb	0	; select bank0
  4652  191C  00A0               	movwf	??_myMain_Initialization
  4653  191D  0820               	movf	??_myMain_Initialization,w
  4654  191E  0021               	movlb	1	; select bank1
  4655  191F  00ED               	movwf	_product^(0+128)
  4656                           
  4657                           ;main_B1.c: 174: product->Data[20] = 210;
  4658  1920  30D2               	movlw	210
  4659  1921  0020               	movlb	0	; select bank0
  4660  1922  00A0               	movwf	??_myMain_Initialization
  4661  1923  0021               	movlb	1	; select bank1
  4662  1924  086D               	movf	_product^(0+128),w
  4663  1925  3E14               	addlw	20
  4664  1926  0086               	movwf	6
  4665  1927  3002               	movlw	2	; select bank4/5
  4666  1928  0087               	movwf	7
  4667  1929  0020               	movlb	0	; select bank0
  4668  192A  0820               	movf	??_myMain_Initialization,w
  4669  192B  0081               	movwf	1
  4670  192C  0008               	return
  4671  192D                     __end_of_myMain_Initialization:	
  4672                           
  4673                           	psect	text3
  4674  0B43                     __ptext3:	
  4675 ;; *************** function _getTemp_AD *****************
  4676 ;; Defined at:
  4677 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;  channel         1    wreg     unsigned char 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  channel         1    5[BANK0 ] unsigned char 
  4682 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;		None               void
  4685 ;; Registers used:
  4686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;Total ram usage:        4 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    7
  4699 ;; This function calls:
  4700 ;;		_getAD
  4701 ;; This function is called by:
  4702 ;;		_main
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           
  4707                           ;psect for function _getTemp_AD
  4708  0B43                     _getTemp_AD:	
  4709                           
  4710                           ;incstack = 0
  4711                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4712                           ;getTemp_AD@channel stored from wreg
  4713  0B43  0020               	movlb	0	; select bank0
  4714  0B44  00A5               	movwf	getTemp_AD@channel
  4715                           
  4716                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4717  0B45  01A6               	clrf	getTemp_AD@ADRES
  4718  0B46  01A7               	clrf	getTemp_AD@ADRES+1
  4719                           
  4720                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4721  0B47  0022               	movlb	2	; select bank2
  4722  0B48  1D60               	btfss	_Temp^(0+256),2
  4723  0B49  0008               	return
  4724                           
  4725                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4726  0B4A  30F0               	movlw	240
  4727  0B4B  0020               	movlb	0	; select bank0
  4728  0B4C  00A4               	movwf	??_getTemp_AD
  4729  0B4D  0824               	movf	??_getTemp_AD,w
  4730  0B4E  00A0               	movwf	getAD@adcon1
  4731  0B4F  0825               	movf	getTemp_AD@channel,w
  4732  0B50  319B  23A8  318B   	fcall	_getAD
  4733  0B53  0020               	movlb	0	; select bank0
  4734  0B54  0821               	movf	?_getAD+1,w
  4735  0B55  01A7               	clrf	getTemp_AD@ADRES+1
  4736  0B56  07A7               	addwf	getTemp_AD@ADRES+1,f
  4737  0B57  0820               	movf	?_getAD,w
  4738  0B58  01A6               	clrf	getTemp_AD@ADRES
  4739  0B59  07A6               	addwf	getTemp_AD@ADRES,f
  4740                           
  4741                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4742  0B5A  0827               	movf	getTemp_AD@ADRES+1,w
  4743  0B5B  0426               	iorwf	getTemp_AD@ADRES,w
  4744  0B5C  1903               	skipnz
  4745  0B5D  0008               	return
  4746                           
  4747                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4748  0B5E  0827               	movf	getTemp_AD@ADRES+1,w
  4749  0B5F  0022               	movlb	2	; select bank2
  4750  0B60  0265               	subwf	((_Temp+1)^(0+256)+4),w
  4751  0B61  1D03               	skipz
  4752  0B62  2B67               	goto	u10215
  4753  0B63  0020               	movlb	0	; select bank0
  4754  0B64  0826               	movf	getTemp_AD@ADRES,w
  4755  0B65  0022               	movlb	2	; select bank2
  4756  0B66  0264               	subwf	(_Temp^(0+256)+4),w
  4757  0B67                     u10215:	
  4758  0B67  1803               	skipnc
  4759  0B68  2B74               	goto	l9331
  4760                           
  4761                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4762  0B69  0020               	movlb	0	; select bank0
  4763  0B6A  0827               	movf	getTemp_AD@ADRES+1,w
  4764  0B6B  0022               	movlb	2	; select bank2
  4765  0B6C  01E5               	clrf	((_Temp+1)^(0+256)+4)
  4766  0B6D  07E5               	addwf	((_Temp+1)^(0+256)+4),f
  4767  0B6E  0020               	movlb	0	; select bank0
  4768  0B6F  0826               	movf	getTemp_AD@ADRES,w
  4769  0B70  0022               	movlb	2	; select bank2
  4770  0B71  01E4               	clrf	(_Temp^(0+256)+4)
  4771  0B72  07E4               	addwf	(_Temp^(0+256)+4),f
  4772                           
  4773                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4774  0B73  0008               	return
  4775  0B74                     l9331:	
  4776  0B74  0020               	movlb	0	; select bank0
  4777  0B75  0827               	movf	getTemp_AD@ADRES+1,w
  4778  0B76  0022               	movlb	2	; select bank2
  4779  0B77  0267               	subwf	((_Temp+1)^(0+256)+6),w
  4780  0B78  1D03               	skipz
  4781  0B79  2B7E               	goto	u10225
  4782  0B7A  0020               	movlb	0	; select bank0
  4783  0B7B  0826               	movf	getTemp_AD@ADRES,w
  4784  0B7C  0022               	movlb	2	; select bank2
  4785  0B7D  0266               	subwf	(_Temp^(0+256)+6),w
  4786  0B7E                     u10225:	
  4787  0B7E  1803               	skipnc
  4788  0B7F  2B8B               	goto	l9335
  4789                           
  4790                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4791  0B80  0020               	movlb	0	; select bank0
  4792  0B81  0827               	movf	getTemp_AD@ADRES+1,w
  4793  0B82  0022               	movlb	2	; select bank2
  4794  0B83  01E7               	clrf	((_Temp+1)^(0+256)+6)
  4795  0B84  07E7               	addwf	((_Temp+1)^(0+256)+6),f
  4796  0B85  0020               	movlb	0	; select bank0
  4797  0B86  0826               	movf	getTemp_AD@ADRES,w
  4798  0B87  0022               	movlb	2	; select bank2
  4799  0B88  01E6               	clrf	(_Temp^(0+256)+6)
  4800  0B89  07E6               	addwf	(_Temp^(0+256)+6),f
  4801                           
  4802                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4803  0B8A  0008               	return
  4804  0B8B                     l9335:	
  4805  0B8B  0020               	movlb	0	; select bank0
  4806  0B8C  0827               	movf	getTemp_AD@ADRES+1,w
  4807  0B8D  0022               	movlb	2	; select bank2
  4808  0B8E  0269               	subwf	((_Temp+1)^(0+256)+8),w
  4809  0B8F  1D03               	skipz
  4810  0B90  2B95               	goto	u10235
  4811  0B91  0020               	movlb	0	; select bank0
  4812  0B92  0826               	movf	getTemp_AD@ADRES,w
  4813  0B93  0022               	movlb	2	; select bank2
  4814  0B94  0268               	subwf	(_Temp^(0+256)+8),w
  4815  0B95                     u10235:	
  4816  0B95  1803               	skipnc
  4817  0B96  2BA2               	goto	l9339
  4818                           
  4819                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4820  0B97  0020               	movlb	0	; select bank0
  4821  0B98  0827               	movf	getTemp_AD@ADRES+1,w
  4822  0B99  0022               	movlb	2	; select bank2
  4823  0B9A  01E9               	clrf	((_Temp+1)^(0+256)+8)
  4824  0B9B  07E9               	addwf	((_Temp+1)^(0+256)+8),f
  4825  0B9C  0020               	movlb	0	; select bank0
  4826  0B9D  0826               	movf	getTemp_AD@ADRES,w
  4827  0B9E  0022               	movlb	2	; select bank2
  4828  0B9F  01E8               	clrf	(_Temp^(0+256)+8)
  4829  0BA0  07E8               	addwf	(_Temp^(0+256)+8),f
  4830                           
  4831                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4832  0BA1  0008               	return
  4833  0BA2                     l9339:	
  4834  0BA2  0020               	movlb	0	; select bank0
  4835  0BA3  0827               	movf	getTemp_AD@ADRES+1,w
  4836  0BA4  0022               	movlb	2	; select bank2
  4837  0BA5  026B               	subwf	((_Temp+1)^(0+256)+10),w
  4838  0BA6  1D03               	skipz
  4839  0BA7  2BAC               	goto	u10245
  4840  0BA8  0020               	movlb	0	; select bank0
  4841  0BA9  0826               	movf	getTemp_AD@ADRES,w
  4842  0BAA  0022               	movlb	2	; select bank2
  4843  0BAB  026A               	subwf	(_Temp^(0+256)+10),w
  4844  0BAC                     u10245:	
  4845  0BAC  1803               	skipnc
  4846  0BAD  2BB9               	goto	l9343
  4847                           
  4848                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4849  0BAE  0020               	movlb	0	; select bank0
  4850  0BAF  0827               	movf	getTemp_AD@ADRES+1,w
  4851  0BB0  0022               	movlb	2	; select bank2
  4852  0BB1  01EB               	clrf	((_Temp+1)^(0+256)+10)
  4853  0BB2  07EB               	addwf	((_Temp+1)^(0+256)+10),f
  4854  0BB3  0020               	movlb	0	; select bank0
  4855  0BB4  0826               	movf	getTemp_AD@ADRES,w
  4856  0BB5  0022               	movlb	2	; select bank2
  4857  0BB6  01EA               	clrf	(_Temp^(0+256)+10)
  4858  0BB7  07EA               	addwf	(_Temp^(0+256)+10),f
  4859                           
  4860                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4861  0BB8  0008               	return
  4862  0BB9                     l9343:	
  4863  0BB9  0020               	movlb	0	; select bank0
  4864  0BBA  0827               	movf	getTemp_AD@ADRES+1,w
  4865  0BBB  0022               	movlb	2	; select bank2
  4866  0BBC  026D               	subwf	((_Temp+1)^(0+256)+12),w
  4867  0BBD  1D03               	skipz
  4868  0BBE  2BC3               	goto	u10255
  4869  0BBF  0020               	movlb	0	; select bank0
  4870  0BC0  0826               	movf	getTemp_AD@ADRES,w
  4871  0BC1  0022               	movlb	2	; select bank2
  4872  0BC2  026C               	subwf	(_Temp^(0+256)+12),w
  4873  0BC3                     u10255:	
  4874  0BC3  1803               	skipnc
  4875  0BC4  0008               	return
  4876                           
  4877                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4878  0BC5  0020               	movlb	0	; select bank0
  4879  0BC6  0827               	movf	getTemp_AD@ADRES+1,w
  4880  0BC7  0022               	movlb	2	; select bank2
  4881  0BC8  01ED               	clrf	((_Temp+1)^(0+256)+12)
  4882  0BC9  07ED               	addwf	((_Temp+1)^(0+256)+12),f
  4883  0BCA  0020               	movlb	0	; select bank0
  4884  0BCB  0826               	movf	getTemp_AD@ADRES,w
  4885  0BCC  0022               	movlb	2	; select bank2
  4886  0BCD  01EC               	clrf	(_Temp^(0+256)+12)
  4887  0BCE  07EC               	addwf	(_Temp^(0+256)+12),f
  4888  0BCF  0008               	return
  4889  0BD0                     __end_of_getTemp_AD:	
  4890                           
  4891                           	psect	text4
  4892  178E                     __ptext4:	
  4893 ;; *************** function _getLoad_AD *****************
  4894 ;; Defined at:
  4895 ;;		line 16 in file "../src/OverLoad_B1.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  channel         1    wreg     unsigned char 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  channel         1    6[BANK0 ] unsigned char 
  4900 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4901 ;;  i               1   11[BANK0 ] unsigned char 
  4902 ;;  j               1    8[BANK0 ] unsigned char 
  4903 ;;  k               1    7[BANK0 ] unsigned char 
  4904 ;; Return value:  Size  Location     Type
  4905 ;;		None               void
  4906 ;; Registers used:
  4907 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;Total ram usage:        8 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    7
  4920 ;; This function calls:
  4921 ;;		_getAD
  4922 ;; This function is called by:
  4923 ;;		_main
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           
  4928                           ;psect for function _getLoad_AD
  4929  178E                     _getLoad_AD:	
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4933                           ;getLoad_AD@channel stored from wreg
  4934  178E  0020               	movlb	0	; select bank0
  4935  178F  00A6               	movwf	getLoad_AD@channel
  4936                           
  4937                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4938  1790  01AB               	clrf	getLoad_AD@i
  4939  1791  01A8               	clrf	getLoad_AD@j
  4940  1792  01A7               	clrf	getLoad_AD@k
  4941                           
  4942                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4943  1793  01A9               	clrf	getLoad_AD@ADRES
  4944  1794  01AA               	clrf	getLoad_AD@ADRES+1
  4945                           
  4946                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4947  1795  0022               	movlb	2	; select bank2
  4948  1796  1E38               	btfss	_Load^(0+256),4
  4949  1797  0008               	return
  4950                           
  4951                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4952  1798  30F3               	movlw	243
  4953  1799  0020               	movlb	0	; select bank0
  4954  179A  00A4               	movwf	??_getLoad_AD
  4955  179B  0824               	movf	??_getLoad_AD,w
  4956  179C  00A0               	movwf	getAD@adcon1
  4957  179D  0826               	movf	getLoad_AD@channel,w
  4958  179E  319B  23A8  3197   	fcall	_getAD
  4959  17A1  0020               	movlb	0	; select bank0
  4960  17A2  0821               	movf	?_getAD+1,w
  4961  17A3  01AA               	clrf	getLoad_AD@ADRES+1
  4962  17A4  07AA               	addwf	getLoad_AD@ADRES+1,f
  4963  17A5  0820               	movf	?_getAD,w
  4964  17A6  01A9               	clrf	getLoad_AD@ADRES
  4965  17A7  07A9               	addwf	getLoad_AD@ADRES,f
  4966                           
  4967                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4968  17A8  01AB               	clrf	getLoad_AD@i
  4969  17A9  3004               	movlw	4
  4970  17AA  022B               	subwf	getLoad_AD@i,w
  4971  17AB  1803               	btfsc	3,0
  4972  17AC  2FD4               	goto	l9141
  4973  17AD                     l9129:	
  4974                           
  4975                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4976  17AD  352B               	lslf	getLoad_AD@i,w
  4977  17AE  3E43               	addlw	(_Load+11)& (0+255)
  4978  17AF  0086               	movwf	6
  4979  17B0  3001               	movlw	1	; select bank2/3
  4980  17B1  0087               	movwf	7
  4981  17B2  3F40               	moviw [0]fsr1
  4982  17B3  00A4               	movwf	??_getLoad_AD
  4983  17B4  3F41               	moviw [1]fsr1
  4984  17B5  00A5               	movwf	??_getLoad_AD+1
  4985  17B6  082A               	movf	getLoad_AD@ADRES+1,w
  4986  17B7  0225               	subwf	??_getLoad_AD+1,w
  4987  17B8  1D03               	skipz
  4988  17B9  2FBC               	goto	u9805
  4989  17BA  0829               	movf	getLoad_AD@ADRES,w
  4990  17BB  0224               	subwf	??_getLoad_AD,w
  4991  17BC                     u9805:	
  4992  17BC  1803               	skipnc
  4993  17BD  2FCC               	goto	l9137
  4994  17BE  08A8               	movf	getLoad_AD@j,f
  4995  17BF  1D03               	skipz
  4996  17C0  2FCC               	goto	l9137
  4997                           
  4998                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4999  17C1  352B               	lslf	getLoad_AD@i,w
  5000  17C2  3E43               	addlw	(_Load+11)& (0+255)
  5001  17C3  0086               	movwf	6
  5002  17C4  3001               	movlw	1	; select bank2/3
  5003  17C5  0087               	movwf	7
  5004  17C6  0829               	movf	getLoad_AD@ADRES,w
  5005  17C7  3FC0               	movwi [0]fsr1
  5006  17C8  082A               	movf	getLoad_AD@ADRES+1,w
  5007  17C9  3FC1               	movwi [1]fsr1
  5008                           
  5009                           ;OverLoad_B1.c: 25: j = 1;
  5010  17CA  01A8               	clrf	getLoad_AD@j
  5011  17CB  0AA8               	incf	getLoad_AD@j,f
  5012  17CC                     l9137:	
  5013  17CC  3001               	movlw	1
  5014  17CD  00A4               	movwf	??_getLoad_AD
  5015  17CE  0824               	movf	??_getLoad_AD,w
  5016  17CF  07AB               	addwf	getLoad_AD@i,f
  5017  17D0  3004               	movlw	4
  5018  17D1  022B               	subwf	getLoad_AD@i,w
  5019  17D2  1C03               	skipc
  5020  17D3  2FAD               	goto	l9129
  5021  17D4                     l9141:	
  5022                           
  5023                           ;OverLoad_B1.c: 26: }
  5024                           ;OverLoad_B1.c: 27: }
  5025                           ;OverLoad_B1.c: 28: if (j == 0) {
  5026  17D4  08A8               	movf	getLoad_AD@j,f
  5027  17D5  1D03               	skipz
  5028  17D6  0008               	return
  5029                           
  5030                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  5031  17D7  01AB               	clrf	getLoad_AD@i
  5032  17D8                     L1:	
  5033  17D8  3004               	movlw	4
  5034  17D9  022B               	subwf	getLoad_AD@i,w
  5035  17DA  1803               	btfsc	3,0
  5036  17DB  0008               	return
  5037                           
  5038                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  5039  17DC  352B               	lslf	getLoad_AD@i,w
  5040  17DD  3E4D               	addlw	(_Load+21)& (0+255)
  5041  17DE  0086               	movwf	6
  5042  17DF  3001               	movlw	1	; select bank2/3
  5043  17E0  0087               	movwf	7
  5044  17E1  3F40               	moviw [0]fsr1
  5045  17E2  00A4               	movwf	??_getLoad_AD
  5046  17E3  3F41               	moviw [1]fsr1
  5047  17E4  00A5               	movwf	??_getLoad_AD+1
  5048  17E5  0825               	movf	??_getLoad_AD+1,w
  5049  17E6  022A               	subwf	getLoad_AD@ADRES+1,w
  5050  17E7  1D03               	skipz
  5051  17E8  2FEB               	goto	u9855
  5052  17E9  0824               	movf	??_getLoad_AD,w
  5053  17EA  0229               	subwf	getLoad_AD@ADRES,w
  5054  17EB                     u9855:	
  5055  17EB  1803               	skipnc
  5056  17EC  2FFB               	goto	l9157
  5057  17ED  08A7               	movf	getLoad_AD@k,f
  5058  17EE  1D03               	skipz
  5059  17EF  2FFB               	goto	l9157
  5060                           
  5061                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  5062  17F0  352B               	lslf	getLoad_AD@i,w
  5063  17F1  3E4D               	addlw	(_Load+21)& (0+255)
  5064  17F2  0086               	movwf	6
  5065  17F3  3001               	movlw	1	; select bank2/3
  5066  17F4  0087               	movwf	7
  5067  17F5  0829               	movf	getLoad_AD@ADRES,w
  5068  17F6  3FC0               	movwi [0]fsr1
  5069  17F7  082A               	movf	getLoad_AD@ADRES+1,w
  5070  17F8  3FC1               	movwi [1]fsr1
  5071                           
  5072                           ;OverLoad_B1.c: 32: k = 1;
  5073  17F9  01A7               	clrf	getLoad_AD@k
  5074  17FA  0AA7               	incf	getLoad_AD@k,f
  5075  17FB                     l9157:	
  5076  17FB  3001               	movlw	1
  5077  17FC  00A4               	movwf	??_getLoad_AD
  5078  17FD  0824               	movf	??_getLoad_AD,w
  5079  17FE  07AB               	addwf	getLoad_AD@i,f
  5080  17FF  2FD8               	goto	L1
  5081  1800                     __end_of_getLoad_AD:	
  5082                           
  5083                           	psect	text5
  5084  1BA8                     __ptext5:	
  5085 ;; *************** function _getAD *****************
  5086 ;; Defined at:
  5087 ;;		line 461 in file "../src/MCU_B1.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;  adcon0          1    wreg     unsigned char 
  5090 ;;  adcon1          1    0[BANK0 ] unsigned char 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;  adcon0          1    3[BANK0 ] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  2    0[BANK0 ] int 
  5095 ;; Registers used:
  5096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5102 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;Total ram usage:        4 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    6
  5109 ;; This function calls:
  5110 ;;		_Timeout_Counter
  5111 ;;		_set_TimeoutCleared
  5112 ;; This function is called by:
  5113 ;;		_getLoad_AD
  5114 ;;		_getTemp_AD
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           
  5119                           ;psect for function _getAD
  5120  1BA8                     _getAD:	
  5121                           
  5122                           ;incstack = 0
  5123                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5124                           ;getAD@adcon0 stored from wreg
  5125  1BA8  0020               	movlb	0	; select bank0
  5126  1BA9  00A3               	movwf	getAD@adcon0
  5127                           
  5128                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5129  1BAA  0823               	movf	getAD@adcon0,w
  5130  1BAB  0021               	movlb	1	; select bank1
  5131  1BAC  009D               	movwf	29	;volatile
  5132                           
  5133                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5134  1BAD  0020               	movlb	0	; select bank0
  5135  1BAE  0820               	movf	getAD@adcon1,w
  5136  1BAF  0021               	movlb	1	; select bank1
  5137  1BB0  009E               	movwf	30	;volatile
  5138                           
  5139                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5140  1BB1  149D               	bsf	29,1	;volatile
  5141                           
  5142                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5143  1BB2  2BB6               	goto	l8605
  5144  1BB3                     l8603:	
  5145                           
  5146                           ;MCU_B1.c: 466: Timeout_Counter();
  5147  1BB3  3199  216B  319B   	fcall	_Timeout_Counter
  5148  1BB6                     l8605:	
  5149  1BB6  0021               	movlb	1	; select bank1
  5150  1BB7  1C9D               	btfss	29,1	;volatile
  5151  1BB8  2BBB               	goto	l8609
  5152  1BB9  1D39               	btfss	(_myMain^(0+128)+10),2
  5153  1BBA  2BB3               	goto	l8603
  5154  1BBB                     l8609:	
  5155                           
  5156                           ;MCU_B1.c: 467: };
  5157                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5158  1BBB  31A6  265D         	fcall	_set_TimeoutCleared
  5159                           
  5160                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5161  1BBD  0021               	movlb	1	; select bank1
  5162  1BBE  081C               	movf	28,w	;volatile
  5163  1BBF  0020               	movlb	0	; select bank0
  5164  1BC0  01A1               	clrf	?_getAD+1
  5165  1BC1  07A1               	addwf	?_getAD+1,f
  5166  1BC2  0021               	movlb	1	; select bank1
  5167  1BC3  081B               	movf	27,w	;volatile
  5168  1BC4  0020               	movlb	0	; select bank0
  5169  1BC5  01A0               	clrf	?_getAD
  5170  1BC6  07A0               	addwf	?_getAD,f
  5171  1BC7  0008               	return
  5172  1BC8                     __end_of_getAD:	
  5173                           
  5174                           	psect	text6
  5175  18A9                     __ptext6:	
  5176 ;; *************** function _WDT_Main *****************
  5177 ;; Defined at:
  5178 ;;		line 1116 in file "../src/MCU_B1.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;		None               void
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0, pclath, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;Total ram usage:        1 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    6
  5199 ;; This function calls:
  5200 ;;		_WDT_Clearing
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _WDT_Main
  5208  18A9                     _WDT_Main:	
  5209                           
  5210                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5214  18A9  0022               	movlb	2	; select bank2
  5215  18AA  1C36               	btfss	_WDT^(0+256),0
  5216  18AB  0008               	return
  5217                           
  5218                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5219  18AC  3001               	movlw	1
  5220  18AD  02B7               	subwf	(_WDT^(0+256)+1),f
  5221  18AE  0837               	movf	(_WDT^(0+256)+1),w
  5222  18AF  3AFF               	xorlw	255
  5223  18B0  1903               	skipnz
  5224  18B1  0008               	return
  5225                           
  5226                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5227  18B2  3064               	movlw	100
  5228  18B3  0020               	movlb	0	; select bank0
  5229  18B4  00A0               	movwf	??_WDT_Main
  5230  18B5  0820               	movf	??_WDT_Main,w
  5231  18B6  0022               	movlb	2	; select bank2
  5232  18B7  00B7               	movwf	(_WDT^(0+256)+1)
  5233                           
  5234                           ;MCU_B1.c: 1120: WDT_Clearing();
  5235  18B8  3180  2002         	fcall	_WDT_Clearing
  5236  18BA  0008               	return
  5237  18BB                     __end_of_WDT_Main:	
  5238                           
  5239                           	psect	text7
  5240  0002                     __ptext7:	
  5241 ;; *************** function _WDT_Clearing *****************
  5242 ;; Defined at:
  5243 ;;		line 1126 in file "../src/MCU_B1.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;		None
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;		None               void
  5250 ;; Registers used:
  5251 ;;		None
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;Total ram usage:        0 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    5
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_WDT_Main
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _WDT_Clearing
  5273  0002                     _WDT_Clearing:	
  5274                           
  5275                           ;incstack = 0
  5276                           ; Regs used in _WDT_Clearing: []
  5277  0002  0064               	clrwdt	;# 
  5278  0003  0008               	return
  5279  0004                     __end_of_WDT_Clearing:	
  5280                           
  5281                           	psect	text8
  5282  2646                     __ptext8:	
  5283 ;; *************** function _Temp_Main *****************
  5284 ;; Defined at:
  5285 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;		None
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;		None
  5290 ;; Return value:  Size  Location     Type
  5291 ;;		None               void
  5292 ;; Registers used:
  5293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;Total ram usage:        0 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    8
  5306 ;; This function calls:
  5307 ;;		_setTemp_Main
  5308 ;; This function is called by:
  5309 ;;		_main
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           
  5314                           ;psect for function _Temp_Main
  5315  2646                     _Temp_Main:	
  5316                           
  5317                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5318                           
  5319                           ;incstack = 0
  5320                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5321  2646  3184  2482         	fcall	_setTemp_Main
  5322  2648  0008               	return
  5323  2649                     __end_of_Temp_Main:	
  5324                           
  5325                           	psect	text9
  5326  0482                     __ptext9:	
  5327 ;; *************** function _setTemp_Main *****************
  5328 ;; Defined at:
  5329 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  AD              2   77[BANK0 ] int 
  5334 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5335 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5336 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5337 ;;  error           1   71[BANK0 ] unsigned char 
  5338 ;; Return value:  Size  Location     Type
  5339 ;;		None               void
  5340 ;; Registers used:
  5341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;Total ram usage:       10 bytes
  5352 ;; Hardware stack levels used:    1
  5353 ;; Hardware stack levels required when called:    7
  5354 ;; This function calls:
  5355 ;;		___lwdiv
  5356 ;;		_getMain_All_Error_Status
  5357 ;;		_getMain_All_LightsStatus
  5358 ;;		_setBuz
  5359 ;;		_setOverTemp_ADV_Restore
  5360 ;;		_setProductData
  5361 ;; This function is called by:
  5362 ;;		_Temp_Main
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           
  5367                           ;psect for function _setTemp_Main
  5368  0482                     _setTemp_Main:	
  5369                           
  5370                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5371                           
  5372                           ;incstack = 0
  5373                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5374  0482  3000               	movlw	0
  5375  0483  319E  2638  3184   	fcall	_getMain_All_Error_Status
  5376  0486  0020               	movlb	0	; select bank0
  5377  0487  00E5               	movwf	??_setTemp_Main
  5378  0488  0865               	movf	??_setTemp_Main,w
  5379  0489  00E7               	movwf	setTemp_Main@error
  5380                           
  5381                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5382  048A  01E8               	clrf	setTemp_Main@SafeValue
  5383  048B  01E9               	clrf	setTemp_Main@SafeValue+1
  5384  048C  01EA               	clrf	setTemp_Main@DangerValue
  5385  048D  01EB               	clrf	setTemp_Main@DangerValue+1
  5386                           
  5387                           ;OverTemperature_B1.c: 75: int AD = 0;
  5388  048E  01ED               	clrf	setTemp_Main@AD
  5389  048F  01EE               	clrf	setTemp_Main@AD+1
  5390                           
  5391                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5392  0490  3198  20E1  3184   	fcall	_getMain_All_LightsStatus
  5393  0493  0020               	movlb	0	; select bank0
  5394  0494  00E5               	movwf	??_setTemp_Main
  5395  0495  0865               	movf	??_setTemp_Main,w
  5396  0496  00EC               	movwf	setTemp_Main@TempGO
  5397                           
  5398                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5399  0497  0022               	movlb	2	; select bank2
  5400  0498  1C60               	btfss	_Temp^(0+256),0
  5401  0499  2D53               	goto	l1828
  5402                           
  5403                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5404  049A  1960               	btfsc	_Temp^(0+256),2
  5405  049B  2CB9               	goto	l8715
  5406                           
  5407                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5408  049C  0020               	movlb	0	; select bank0
  5409  049D  086C               	movf	setTemp_Main@TempGO,w
  5410  049E  3A01               	xorlw	1
  5411  049F  1D03               	skipz
  5412  04A0  2CA4               	goto	l1834
  5413  04A1  0022               	movlb	2	; select bank2
  5414  04A2  1CE0               	btfss	_Temp^(0+256),1
  5415  04A3  2CA7               	goto	l8707
  5416  04A4                     l1834:	
  5417  04A4  0022               	movlb	2	; select bank2
  5418  04A5  1CE0               	btfss	_Temp^(0+256),1
  5419  04A6  2CB6               	goto	l8713
  5420  04A7                     l8707:	
  5421                           
  5422                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5423  04A7  3001               	movlw	1
  5424  04A8  07E1               	addwf	(_Temp^(0+256)+1),f
  5425  04A9  3000               	movlw	0
  5426  04AA  3DE2               	addwfc	((_Temp+1)^(0+256)+1),f
  5427                           
  5428                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5429  04AB  3000               	movlw	0
  5430  04AC  0262               	subwf	((_Temp+1)^(0+256)+1),w
  5431  04AD  30FA               	movlw	250
  5432  04AE  1903               	skipnz
  5433  04AF  0261               	subwf	(_Temp^(0+256)+1),w
  5434  04B0  1C03               	skipc
  5435  04B1  0008               	return
  5436                           
  5437                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5438  04B2  01E1               	clrf	(_Temp^(0+256)+1)
  5439  04B3  01E2               	clrf	((_Temp+1)^(0+256)+1)
  5440                           
  5441                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5442  04B4  1560               	bsf	_Temp^(0+256),2
  5443                           
  5444                           ;OverTemperature_B1.c: 92: }
  5445                           ;OverTemperature_B1.c: 93: } else {
  5446  04B5  0008               	return
  5447  04B6                     l8713:	
  5448                           
  5449                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5450  04B6  01E1               	clrf	(_Temp^(0+256)+1)
  5451  04B7  01E2               	clrf	((_Temp+1)^(0+256)+1)
  5452                           
  5453                           ;OverTemperature_B1.c: 95: }
  5454                           ;OverTemperature_B1.c: 96: } else {
  5455  04B8  0008               	return
  5456  04B9                     l8715:	
  5457                           
  5458                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5459  04B9  3001               	movlw	1
  5460  04BA  07E1               	addwf	(_Temp^(0+256)+1),f
  5461  04BB  3000               	movlw	0
  5462  04BC  3DE2               	addwfc	((_Temp+1)^(0+256)+1),f
  5463                           
  5464                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5465  04BD  3000               	movlw	0
  5466  04BE  0262               	subwf	((_Temp+1)^(0+256)+1),w
  5467  04BF  3005               	movlw	5
  5468  04C0  1903               	skipnz
  5469  04C1  0261               	subwf	(_Temp^(0+256)+1),w
  5470  04C2  1C03               	skipc
  5471  04C3  0008               	return
  5472                           
  5473                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5474  04C4  01E1               	clrf	(_Temp^(0+256)+1)
  5475  04C5  01E2               	clrf	((_Temp+1)^(0+256)+1)
  5476                           
  5477                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5478  04C6  3003               	movlw	3
  5479  04C7  0020               	movlb	0	; select bank0
  5480  04C8  00A0               	movwf	___lwdiv@divisor
  5481  04C9  3000               	movlw	0
  5482  04CA  00A1               	movwf	___lwdiv@divisor+1
  5483  04CB  300A               	movlw	10
  5484  04CC  3E60               	addlw	_Temp& (0+255)
  5485  04CD  0086               	movwf	6
  5486  04CE  3001               	movlw	1	; select bank2/3
  5487  04CF  0087               	movwf	7
  5488  04D0  3008               	movlw	8
  5489  04D1  3E60               	addlw	_Temp& (0+255)
  5490  04D2  0084               	movwf	4
  5491  04D3  3001               	movlw	1	; select bank2/3
  5492  04D4  0085               	movwf	5
  5493  04D5  3F00               	moviw [0]fsr0
  5494  04D6  0022               	movlb	2	; select bank2
  5495  04D7  0766               	addwf	(_Temp^(0+256)+6),w
  5496  04D8  0020               	movlb	0	; select bank0
  5497  04D9  00E5               	movwf	??_setTemp_Main
  5498  04DA  3F01               	moviw [1]fsr0
  5499  04DB  0022               	movlb	2	; select bank2
  5500  04DC  3D67               	addwfc	((_Temp+1)^(0+256)+6),w
  5501  04DD  0020               	movlb	0	; select bank0
  5502  04DE  00E6               	movwf	??_setTemp_Main+1
  5503  04DF  3F40               	moviw [0]fsr1
  5504  04E0  0765               	addwf	??_setTemp_Main,w
  5505  04E1  00A2               	movwf	___lwdiv@dividend
  5506  04E2  3F41               	moviw [1]fsr1
  5507  04E3  3D66               	addwfc	??_setTemp_Main+1,w
  5508  04E4  00A3               	movwf	___lwdiv@dividend+1
  5509  04E5  319E  266B  3184   	fcall	___lwdiv
  5510  04E8  0020               	movlb	0	; select bank0
  5511  04E9  0821               	movf	?___lwdiv+1,w
  5512  04EA  01EE               	clrf	setTemp_Main@AD+1
  5513  04EB  07EE               	addwf	setTemp_Main@AD+1,f
  5514  04EC  0820               	movf	?___lwdiv,w
  5515  04ED  01ED               	clrf	setTemp_Main@AD
  5516  04EE  07ED               	addwf	setTemp_Main@AD,f
  5517                           
  5518                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5519  04EF  319A  22D5  3184   	fcall	_setOverTemp_ADV_Restore
  5520                           
  5521                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5522  04F2  0020               	movlb	0	; select bank0
  5523  04F3  086E               	movf	setTemp_Main@AD+1,w
  5524  04F4  3A80               	xorlw	128
  5525  04F5  00E5               	movwf	??_setTemp_Main
  5526  04F6  3080               	movlw	128
  5527  04F7  0265               	subwf	??_setTemp_Main,w
  5528  04F8  1D03               	skipz
  5529  04F9  2CFC               	goto	u9095
  5530  04FA  3001               	movlw	1
  5531  04FB  026D               	subwf	setTemp_Main@AD,w
  5532  04FC                     u9095:	
  5533  04FC  1C03               	skipc
  5534  04FD  0008               	return
  5535                           
  5536                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5537  04FE  0022               	movlb	2	; select bank2
  5538  04FF  1160               	bcf	_Temp^(0+256),2
  5539                           
  5540                           ;OverTemperature_B1.c: 123: SafeValue = 420;
  5541  0500  30A4               	movlw	164
  5542  0501  0020               	movlb	0	; select bank0
  5543  0502  00E8               	movwf	setTemp_Main@SafeValue
  5544  0503  3001               	movlw	1
  5545  0504  00E9               	movwf	setTemp_Main@SafeValue+1
  5546                           
  5547                           ;OverTemperature_B1.c: 124: DangerValue = 365;
  5548  0505  306D               	movlw	109
  5549  0506  00EA               	movwf	setTemp_Main@DangerValue
  5550  0507  3001               	movlw	1
  5551  0508  00EB               	movwf	setTemp_Main@DangerValue+1
  5552                           
  5553                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5554  0509  0022               	movlb	2	; select bank2
  5555  050A  1CE0               	btfss	_Temp^(0+256),1
  5556  050B  2D2A               	goto	l8745
  5557                           
  5558                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5559  050C  0020               	movlb	0	; select bank0
  5560  050D  0869               	movf	setTemp_Main@SafeValue+1,w
  5561  050E  026E               	subwf	setTemp_Main@AD+1,w
  5562  050F  1D03               	skipz
  5563  0510  2D13               	goto	u9115
  5564  0511  0868               	movf	setTemp_Main@SafeValue,w
  5565  0512  026D               	subwf	setTemp_Main@AD,w
  5566  0513                     u9115:	
  5567  0513  1C03               	skipc
  5568  0514  2D3F               	goto	l8755
  5569                           
  5570                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5571  0515  3001               	movlw	1
  5572  0516  00E5               	movwf	??_setTemp_Main
  5573  0517  0865               	movf	??_setTemp_Main,w
  5574  0518  0022               	movlb	2	; select bank2
  5575  0519  07E3               	addwf	(_Temp^(0+256)+3),f
  5576                           
  5577                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5578  051A  3003               	movlw	3
  5579  051B  0263               	subwf	(_Temp^(0+256)+3),w
  5580  051C  1C03               	skipc
  5581  051D  2D41               	goto	l8757
  5582                           
  5583                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5584  051E  01E3               	clrf	(_Temp^(0+256)+3)
  5585                           
  5586                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5587  051F  10E0               	bcf	_Temp^(0+256),1
  5588                           
  5589                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5590  0520  3064               	movlw	100
  5591  0521  0020               	movlb	0	; select bank0
  5592  0522  00A9               	movwf	setBuz@time
  5593  0523  3000               	movlw	0
  5594  0524  00AA               	movwf	setBuz@time+1
  5595  0525  3002               	movlw	2
  5596  0526  3193  2335  3184   	fcall	_setBuz
  5597                           
  5598                           ;OverTemperature_B1.c: 137: }
  5599                           ;OverTemperature_B1.c: 138: } else {
  5600  0529  2D41               	goto	l8757
  5601  052A                     l8745:	
  5602                           ;OverTemperature_B1.c: 140: }
  5603                           ;OverTemperature_B1.c: 141: } else {
  5604                           
  5605                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5606                           
  5607                           
  5608                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5609  052A  0020               	movlb	0	; select bank0
  5610  052B  086E               	movf	setTemp_Main@AD+1,w
  5611  052C  026B               	subwf	setTemp_Main@DangerValue+1,w
  5612  052D  1D03               	skipz
  5613  052E  2D31               	goto	u9135
  5614  052F  086D               	movf	setTemp_Main@AD,w
  5615  0530  026A               	subwf	setTemp_Main@DangerValue,w
  5616  0531                     u9135:	
  5617  0531  1C03               	skipc
  5618  0532  2D3F               	goto	l8755
  5619                           
  5620                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5621  0533  3001               	movlw	1
  5622  0534  00E5               	movwf	??_setTemp_Main
  5623  0535  0865               	movf	??_setTemp_Main,w
  5624  0536  0022               	movlb	2	; select bank2
  5625  0537  07E3               	addwf	(_Temp^(0+256)+3),f
  5626                           
  5627                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5628  0538  3003               	movlw	3
  5629  0539  0263               	subwf	(_Temp^(0+256)+3),w
  5630  053A  1C03               	skipc
  5631  053B  2D41               	goto	l8757
  5632                           
  5633                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5634  053C  01E3               	clrf	(_Temp^(0+256)+3)
  5635                           
  5636                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5637  053D  14E0               	bsf	_Temp^(0+256),1
  5638                           
  5639                           ;OverTemperature_B1.c: 147: }
  5640                           ;OverTemperature_B1.c: 148: } else {
  5641  053E  2D41               	goto	l8757
  5642  053F                     l8755:	
  5643                           
  5644                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5645  053F  0022               	movlb	2	; select bank2
  5646  0540  01E3               	clrf	(_Temp^(0+256)+3)
  5647  0541                     l8757:	
  5648                           
  5649                           ;OverTemperature_B1.c: 150: }
  5650                           ;OverTemperature_B1.c: 151: }
  5651                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5652  0541  0020               	movlb	0	; select bank0
  5653  0542  086E               	movf	setTemp_Main@AD+1,w
  5654  0543  00E5               	movwf	??_setTemp_Main
  5655  0544  0865               	movf	??_setTemp_Main,w
  5656  0545  00E2               	movwf	setProductData@value
  5657  0546  3018               	movlw	24
  5658  0547  31A6  26FD  3184   	fcall	_setProductData
  5659                           
  5660                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5661  054A  0020               	movlb	0	; select bank0
  5662  054B  086D               	movf	setTemp_Main@AD,w
  5663  054C  00E5               	movwf	??_setTemp_Main
  5664  054D  0865               	movf	??_setTemp_Main,w
  5665  054E  00E2               	movwf	setProductData@value
  5666  054F  3019               	movlw	25
  5667  0550  31A6  26FD         	fcall	_setProductData
  5668                           
  5669                           ;OverTemperature_B1.c: 169: }
  5670                           ;OverTemperature_B1.c: 170: }
  5671                           ;OverTemperature_B1.c: 171: }
  5672                           ;OverTemperature_B1.c: 174: } else {
  5673  0552  0008               	return
  5674  0553                     l1828:	
  5675                           
  5676                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5677  0553  0021               	movlb	1	; select bank1
  5678  0554  1C2F               	btfss	_myMain^(0+128),0
  5679  0555  0008               	return
  5680                           
  5681                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5682  0556  0022               	movlb	2	; select bank2
  5683  0557  1460               	bsf	_Temp^(0+256),0
  5684  0558  0008               	return
  5685  0559                     __end_of_setTemp_Main:	
  5686                           
  5687                           	psect	text10
  5688  1AD5                     __ptext10:	
  5689 ;; *************** function _setOverTemp_ADV_Restore *****************
  5690 ;; Defined at:
  5691 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;		None
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;  i               2    1[BANK0 ] int 
  5696 ;; Return value:  Size  Location     Type
  5697 ;;		None               void
  5698 ;; Registers used:
  5699 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;Total ram usage:        3 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; Hardware stack levels required when called:    5
  5712 ;; This function calls:
  5713 ;;		Nothing
  5714 ;; This function is called by:
  5715 ;;		_setTemp_Main
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           
  5720                           ;psect for function _setOverTemp_ADV_Restore
  5721  1AD5                     _setOverTemp_ADV_Restore:	
  5722                           
  5723                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5724                           
  5725                           ;incstack = 0
  5726                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5727  1AD5  0020               	movlb	0	; select bank0
  5728  1AD6  01A1               	clrf	setOverTemp_ADV_Restore@i
  5729  1AD7  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5730  1AD8                     L2:	
  5731  1AD8  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5732  1AD9  3A80               	xorlw	128
  5733  1ADA  00A0               	movwf	??_setOverTemp_ADV_Restore
  5734  1ADB  3080               	movlw	128
  5735  1ADC  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5736  1ADD  1D03               	skipz
  5737  1ADE  2AE1               	goto	u7675
  5738  1ADF  3005               	movlw	5
  5739  1AE0  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5740  1AE1                     u7675:	
  5741  1AE1  1803               	btfsc	3,0
  5742  1AE2  0008               	return
  5743                           
  5744                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5745  1AE3  0020               	movlb	0	; select bank0
  5746  1AE4  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5747  1AE5  3E64               	addlw	(_Temp+4)& (0+255)
  5748  1AE6  0086               	movwf	6
  5749  1AE7  3001               	movlw	1	; select bank2/3
  5750  1AE8  0087               	movwf	7
  5751  1AE9  3000               	movlw	0
  5752  1AEA  3FC0               	movwi [0]fsr1
  5753  1AEB  3FC1               	movwi [1]fsr1
  5754  1AEC  3001               	movlw	1
  5755  1AED  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5756  1AEE  3000               	movlw	0
  5757  1AEF  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5758  1AF0  2AD8               	goto	L2
  5759  1AF1                     __end_of_setOverTemp_ADV_Restore:	
  5760                           
  5761                           	psect	text11
  5762  2643                     __ptext11:	
  5763 ;; *************** function _Temp_Initialization *****************
  5764 ;; Defined at:
  5765 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;		None
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;		None
  5770 ;; Return value:  Size  Location     Type
  5771 ;;		None               void
  5772 ;; Registers used:
  5773 ;;		status,2, status,0, pclath, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5783 ;;Total ram usage:        0 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    6
  5786 ;; This function calls:
  5787 ;;		_setTemp_Initialization
  5788 ;; This function is called by:
  5789 ;;		_main
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           
  5794                           ;psect for function _Temp_Initialization
  5795  2643                     _Temp_Initialization:	
  5796                           
  5797                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5798                           
  5799                           ;incstack = 0
  5800                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5801  2643  31A6  2636         	fcall	_setTemp_Initialization
  5802  2645  0008               	return
  5803  2646                     __end_of_Temp_Initialization:	
  5804                           
  5805                           	psect	text12
  5806  2636                     __ptext12:	
  5807 ;; *************** function _setTemp_Initialization *****************
  5808 ;; Defined at:
  5809 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;		None
  5814 ;; Return value:  Size  Location     Type
  5815 ;;		None               void
  5816 ;; Registers used:
  5817 ;;		None
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5827 ;;Total ram usage:        0 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    5
  5830 ;; This function calls:
  5831 ;;		Nothing
  5832 ;; This function is called by:
  5833 ;;		_Temp_Initialization
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           
  5838                           ;psect for function _setTemp_Initialization
  5839  2636                     _setTemp_Initialization:	
  5840                           
  5841                           ;incstack = 0
  5842                           ; Regs used in _setTemp_Initialization: []
  5843  2636  0008               	return
  5844  2637                     __end_of_setTemp_Initialization:	
  5845                           
  5846                           	psect	text13
  5847  26E6                     __ptext13:	
  5848 ;; *************** function _Switch_Main *****************
  5849 ;; Defined at:
  5850 ;;		line 76 in file "../src/Switch_B1.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;		None
  5855 ;; Return value:  Size  Location     Type
  5856 ;;		None               void
  5857 ;; Registers used:
  5858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;Total ram usage:        0 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    9
  5871 ;; This function calls:
  5872 ;;		_TouchPower
  5873 ;;		_setSw_Main
  5874 ;; This function is called by:
  5875 ;;		_main
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           
  5880                           ;psect for function _Switch_Main
  5881  26E6                     _Switch_Main:	
  5882                           
  5883                           ;Switch_B1.c: 79: setSw_Main(1);
  5884                           
  5885                           ;incstack = 0
  5886                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5887  26E6  3001               	movlw	1
  5888  26E7  3182  2205  31A6   	fcall	_setSw_Main
  5889                           
  5890                           ;Switch_B1.c: 83: setSw_Main(2);
  5891  26EA  3002               	movlw	2
  5892  26EB  3182  2205  31A6   	fcall	_setSw_Main
  5893                           
  5894                           ;Switch_B1.c: 91: TouchPower();
  5895  26EE  3199  2180         	fcall	_TouchPower
  5896  26F0  0008               	return
  5897  26F1                     __end_of_Switch_Main:	
  5898                           
  5899                           	psect	text14
  5900  0205                     __ptext14:	
  5901 ;; *************** function _setSw_Main *****************
  5902 ;; Defined at:
  5903 ;;		line 117 in file "../src/Switch_B1.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  sw              1    wreg     unsigned char 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  sw              1   21[BANK0 ] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;		None               void
  5910 ;; Registers used:
  5911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;Total ram usage:        3 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    8
  5924 ;; This function calls:
  5925 ;;		_SwPointSelect
  5926 ;;		_getMain_All_Error_Status
  5927 ;;		_getSw_KeyStatus
  5928 ;;		_setBuz
  5929 ;;		_setDimmerLights_DimmingOn
  5930 ;;		_setDimmerLights_SwOff
  5931 ;;		_setDimmerLights_SwOn
  5932 ;;		_setRF_Learn
  5933 ;; This function is called by:
  5934 ;;		_Switch_Main
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           
  5939                           ;psect for function _setSw_Main
  5940  0205                     _setSw_Main:	
  5941                           
  5942                           ;incstack = 0
  5943                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5944                           ;setSw_Main@sw stored from wreg
  5945  0205  0020               	movlb	0	; select bank0
  5946  0206  00B5               	movwf	setSw_Main@sw
  5947                           
  5948                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5949  0207  0835               	movf	setSw_Main@sw,w
  5950  0208  319A  2207  3182   	fcall	_SwPointSelect
  5951                           
  5952                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5953  020B  0021               	movlb	1	; select bank1
  5954  020C  0854               	movf	_Sw^(0+128),w
  5955  020D  0086               	movwf	6
  5956  020E  0855               	movf	(_Sw+1)^(0+128),w
  5957  020F  0087               	movwf	7
  5958  0210  1C01               	btfss	1,0
  5959  0211  2B84               	goto	l2638
  5960                           
  5961                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5962  0212  3000               	movlw	0
  5963  0213  319E  2638  3182   	fcall	_getMain_All_Error_Status
  5964  0216  3800               	iorlw	0
  5965  0217  1D03               	skipz
  5966  0218  2A38               	goto	l8869
  5967                           
  5968                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5969  0219  0021               	movlb	1	; select bank1
  5970  021A  0854               	movf	_Sw^(0+128),w
  5971  021B  0086               	movwf	6
  5972  021C  0855               	movf	(_Sw+1)^(0+128),w
  5973  021D  0087               	movwf	7
  5974  021E  3141               	addfsr 1,1
  5975  021F  1081               	bcf	1,1
  5976                           
  5977                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5978  0220  0020               	movlb	0	; select bank0
  5979  0221  0835               	movf	setSw_Main@sw,w
  5980  0222  319B  2369  3182   	fcall	_getSw_KeyStatus
  5981  0225  3A01               	xorlw	1
  5982  0226  3000               	movlw	0
  5983  0227  1903               	skipnz
  5984  0228  3001               	movlw	1
  5985  0229  0020               	movlb	0	; select bank0
  5986  022A  00B3               	movwf	??_setSw_Main
  5987  022B  0021               	movlb	1	; select bank1
  5988  022C  0854               	movf	_Sw^(0+128),w
  5989  022D  0086               	movwf	6
  5990  022E  0855               	movf	(_Sw+1)^(0+128),w
  5991  022F  0087               	movwf	7
  5992  0230  0020               	movlb	0	; select bank0
  5993  0231  0DB3               	rlf	??_setSw_Main,f
  5994  0232  0801               	movf	1,w
  5995  0233  0633               	xorwf	??_setSw_Main,w
  5996  0234  39FD               	andlw	-3
  5997  0235  0633               	xorwf	??_setSw_Main,w
  5998  0236  0081               	movwf	1
  5999                           
  6000                           ;Switch_B1.c: 124: } else {
  6001  0237  2A50               	goto	l2640
  6002  0238                     l8869:	
  6003                           
  6004                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  6005  0238  0021               	movlb	1	; select bank1
  6006  0239  0854               	movf	_Sw^(0+128),w
  6007  023A  0086               	movwf	6
  6008  023B  0855               	movf	(_Sw+1)^(0+128),w
  6009  023C  0087               	movwf	7
  6010  023D  3141               	addfsr 1,1
  6011  023E  1881               	btfsc	1,1
  6012  023F  2A50               	goto	l2640
  6013                           
  6014                           ;Switch_B1.c: 126: Sw->Detect = 1;
  6015  0240  0854               	movf	_Sw^(0+128),w
  6016  0241  0086               	movwf	6
  6017  0242  0855               	movf	(_Sw+1)^(0+128),w
  6018  0243  0087               	movwf	7
  6019  0244  3141               	addfsr 1,1
  6020  0245  1481               	bsf	1,1
  6021                           
  6022                           ;Switch_B1.c: 128: Sw->Touch = 0;
  6023  0246  0854               	movf	_Sw^(0+128),w
  6024  0247  0086               	movwf	6
  6025  0248  0855               	movf	(_Sw+1)^(0+128),w
  6026  0249  0087               	movwf	7
  6027  024A  1081               	bcf	1,1
  6028                           
  6029                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  6030  024B  0854               	movf	_Sw^(0+128),w
  6031  024C  0086               	movwf	6
  6032  024D  0855               	movf	(_Sw+1)^(0+128),w
  6033  024E  0087               	movwf	7
  6034  024F  1501               	bsf	1,2
  6035  0250                     l2640:	
  6036                           
  6037                           ;Switch_B1.c: 130: }
  6038                           ;Switch_B1.c: 131: }
  6039                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  6040  0250  0021               	movlb	1	; select bank1
  6041  0251  0854               	movf	_Sw^(0+128),w
  6042  0252  0086               	movwf	6
  6043  0253  0855               	movf	(_Sw+1)^(0+128),w
  6044  0254  0087               	movwf	7
  6045  0255  1C81               	btfss	1,1
  6046  0256  2B2C               	goto	l8919
  6047                           
  6048                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  6049  0257  0854               	movf	_Sw^(0+128),w
  6050  0258  0086               	movwf	6
  6051  0259  0855               	movf	(_Sw+1)^(0+128),w
  6052  025A  0087               	movwf	7
  6053  025B  1901               	btfsc	1,2
  6054  025C  2A83               	goto	l8885
  6055                           
  6056                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  6057  025D  3001               	movlw	1
  6058  025E  0020               	movlb	0	; select bank0
  6059  025F  00B3               	movwf	??_setSw_Main
  6060  0260  0021               	movlb	1	; select bank1
  6061  0261  0854               	movf	_Sw^(0+128),w
  6062  0262  0086               	movwf	6
  6063  0263  0855               	movf	(_Sw+1)^(0+128),w
  6064  0264  0087               	movwf	7
  6065  0265  3142               	addfsr 1,2
  6066  0266  0020               	movlb	0	; select bank0
  6067  0267  0833               	movf	??_setSw_Main,w
  6068  0268  0781               	addwf	1,f
  6069                           
  6070                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  6071  0269  0021               	movlb	1	; select bank1
  6072  026A  0854               	movf	_Sw^(0+128),w
  6073  026B  0086               	movwf	6
  6074  026C  0855               	movf	(_Sw+1)^(0+128),w
  6075  026D  0087               	movwf	7
  6076  026E  3142               	addfsr 1,2
  6077  026F  3005               	movlw	5
  6078  0270  0201               	subwf	1,w
  6079  0271  1C03               	skipc
  6080  0272  0008               	return
  6081                           
  6082                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  6083  0273  0854               	movf	_Sw^(0+128),w
  6084  0274  0086               	movwf	6
  6085  0275  0855               	movf	(_Sw+1)^(0+128),w
  6086  0276  0087               	movwf	7
  6087  0277  3142               	addfsr 1,2
  6088  0278  0181               	clrf	1
  6089                           
  6090                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  6091  0279  0854               	movf	_Sw^(0+128),w
  6092  027A  0086               	movwf	6
  6093  027B  0855               	movf	(_Sw+1)^(0+128),w
  6094  027C  0087               	movwf	7
  6095  027D  1501               	bsf	1,2
  6096                           
  6097                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  6098  027E  0020               	movlb	0	; select bank0
  6099  027F  0835               	movf	setSw_Main@sw,w
  6100  0280  3188  2034         	fcall	_setDimmerLights_SwOn
  6101                           
  6102                           ;Switch_B1.c: 147: }
  6103                           ;Switch_B1.c: 148: } else {
  6104  0282  0008               	return
  6105  0283                     l8885:	
  6106                           
  6107                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6108  0283  0021               	movlb	1	; select bank1
  6109  0284  0854               	movf	_Sw^(0+128),w
  6110  0285  0086               	movwf	6
  6111  0286  0855               	movf	(_Sw+1)^(0+128),w
  6112  0287  0087               	movwf	7
  6113  0288  1981               	btfsc	1,3
  6114  0289  2AB8               	goto	l8895
  6115                           
  6116                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6117  028A  0854               	movf	_Sw^(0+128),w
  6118  028B  0086               	movwf	6
  6119  028C  0855               	movf	(_Sw+1)^(0+128),w
  6120  028D  0087               	movwf	7
  6121  028E  3143               	addfsr 1,3
  6122  028F  3001               	movlw	1
  6123  0290  0781               	addwf	1,f
  6124  0291  3141               	addfsr 1,1
  6125  0292  1803               	skipnc
  6126  0293  0A81               	incf	1,f
  6127                           
  6128                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6129  0294  0854               	movf	_Sw^(0+128),w
  6130  0295  0086               	movwf	6
  6131  0296  0855               	movf	(_Sw+1)^(0+128),w
  6132  0297  0087               	movwf	7
  6133  0298  3143               	addfsr 1,3
  6134  0299  3F40               	moviw [0]fsr1
  6135  029A  0020               	movlb	0	; select bank0
  6136  029B  00B3               	movwf	??_setSw_Main
  6137  029C  3F41               	moviw [1]fsr1
  6138  029D  00B4               	movwf	??_setSw_Main+1
  6139  029E  3000               	movlw	0
  6140  029F  0234               	subwf	??_setSw_Main+1,w
  6141  02A0  304B               	movlw	75
  6142  02A1  1903               	skipnz
  6143  02A2  0233               	subwf	??_setSw_Main,w
  6144  02A3  1C03               	skipc
  6145  02A4  0008               	return
  6146                           
  6147                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6148  02A5  0021               	movlb	1	; select bank1
  6149  02A6  0854               	movf	_Sw^(0+128),w
  6150  02A7  0086               	movwf	6
  6151  02A8  0855               	movf	(_Sw+1)^(0+128),w
  6152  02A9  0087               	movwf	7
  6153  02AA  3143               	addfsr 1,3
  6154  02AB  3000               	movlw	0
  6155  02AC  3FC0               	movwi [0]fsr1
  6156  02AD  3FC1               	movwi [1]fsr1
  6157                           
  6158                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6159  02AE  0854               	movf	_Sw^(0+128),w
  6160  02AF  0086               	movwf	6
  6161  02B0  0855               	movf	(_Sw+1)^(0+128),w
  6162  02B1  0087               	movwf	7
  6163  02B2  1581               	bsf	1,3
  6164                           
  6165                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6166  02B3  0020               	movlb	0	; select bank0
  6167  02B4  0835               	movf	setSw_Main@sw,w
  6168  02B5  319C  24FE         	fcall	_setDimmerLights_DimmingOn
  6169                           
  6170                           ;Switch_B1.c: 162: }
  6171                           ;Switch_B1.c: 163: } else {
  6172  02B7  0008               	return
  6173  02B8                     l8895:	
  6174                           
  6175                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6176  02B8  0021               	movlb	1	; select bank1
  6177  02B9  0854               	movf	_Sw^(0+128),w
  6178  02BA  0086               	movwf	6
  6179  02BB  0855               	movf	(_Sw+1)^(0+128),w
  6180  02BC  0087               	movwf	7
  6181  02BD  1A01               	btfsc	1,4
  6182  02BE  2AF8               	goto	l8909
  6183                           
  6184                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6185  02BF  0854               	movf	_Sw^(0+128),w
  6186  02C0  0086               	movwf	6
  6187  02C1  0855               	movf	(_Sw+1)^(0+128),w
  6188  02C2  0087               	movwf	7
  6189  02C3  3145               	addfsr 1,5
  6190  02C4  3001               	movlw	1
  6191  02C5  0781               	addwf	1,f
  6192  02C6  3141               	addfsr 1,1
  6193  02C7  1803               	skipnc
  6194  02C8  0A81               	incf	1,f
  6195                           
  6196                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6197  02C9  0854               	movf	_Sw^(0+128),w
  6198  02CA  0086               	movwf	6
  6199  02CB  0855               	movf	(_Sw+1)^(0+128),w
  6200  02CC  0087               	movwf	7
  6201  02CD  3145               	addfsr 1,5
  6202  02CE  3F40               	moviw [0]fsr1
  6203  02CF  0020               	movlb	0	; select bank0
  6204  02D0  00B3               	movwf	??_setSw_Main
  6205  02D1  3F41               	moviw [1]fsr1
  6206  02D2  00B4               	movwf	??_setSw_Main+1
  6207  02D3  3000               	movlw	0
  6208  02D4  0234               	subwf	??_setSw_Main+1,w
  6209  02D5  304B               	movlw	75
  6210  02D6  1903               	skipnz
  6211  02D7  0233               	subwf	??_setSw_Main,w
  6212  02D8  1C03               	skipc
  6213  02D9  0008               	return
  6214                           
  6215                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6216  02DA  0021               	movlb	1	; select bank1
  6217  02DB  0854               	movf	_Sw^(0+128),w
  6218  02DC  0086               	movwf	6
  6219  02DD  0855               	movf	(_Sw+1)^(0+128),w
  6220  02DE  0087               	movwf	7
  6221  02DF  3145               	addfsr 1,5
  6222  02E0  3000               	movlw	0
  6223  02E1  3FC0               	movwi [0]fsr1
  6224  02E2  3FC1               	movwi [1]fsr1
  6225                           
  6226                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6227  02E3  0854               	movf	_Sw^(0+128),w
  6228  02E4  0086               	movwf	6
  6229  02E5  0855               	movf	(_Sw+1)^(0+128),w
  6230  02E6  0087               	movwf	7
  6231  02E7  1601               	bsf	1,4
  6232                           
  6233                           ;Switch_B1.c: 172: setRF_Learn(1);
  6234  02E8  3001               	movlw	1
  6235  02E9  3199  212D  3182   	fcall	_setRF_Learn
  6236                           
  6237                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6238  02EC  0021               	movlb	1	; select bank1
  6239  02ED  1EAF               	btfss	_myMain^(0+128),5
  6240  02EE  0008               	return
  6241                           
  6242                           ;Switch_B1.c: 174: setBuz(2, 100);
  6243  02EF  3064               	movlw	100
  6244  02F0  0020               	movlb	0	; select bank0
  6245  02F1  00A9               	movwf	setBuz@time
  6246  02F2  3000               	movlw	0
  6247  02F3  00AA               	movwf	setBuz@time+1
  6248  02F4  3002               	movlw	2
  6249  02F5  3193  2335         	fcall	_setBuz
  6250                           
  6251                           ;Switch_B1.c: 175: }
  6252                           ;Switch_B1.c: 179: }
  6253                           ;Switch_B1.c: 180: } else {
  6254  02F7  0008               	return
  6255  02F8                     l8909:	
  6256                           
  6257                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6258  02F8  0021               	movlb	1	; select bank1
  6259  02F9  0854               	movf	_Sw^(0+128),w
  6260  02FA  0086               	movwf	6
  6261  02FB  0855               	movf	(_Sw+1)^(0+128),w
  6262  02FC  0087               	movwf	7
  6263  02FD  1A81               	btfsc	1,5
  6264  02FE  0008               	return
  6265                           
  6266                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6267  02FF  0854               	movf	_Sw^(0+128),w
  6268  0300  0086               	movwf	6
  6269  0301  0855               	movf	(_Sw+1)^(0+128),w
  6270  0302  0087               	movwf	7
  6271  0303  3147               	addfsr 1,7
  6272  0304  3001               	movlw	1
  6273  0305  0781               	addwf	1,f
  6274  0306  3141               	addfsr 1,1
  6275  0307  1803               	skipnc
  6276  0308  0A81               	incf	1,f
  6277                           
  6278                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6279  0309  0854               	movf	_Sw^(0+128),w
  6280  030A  0086               	movwf	6
  6281  030B  0855               	movf	(_Sw+1)^(0+128),w
  6282  030C  0087               	movwf	7
  6283  030D  3147               	addfsr 1,7
  6284  030E  3F40               	moviw [0]fsr1
  6285  030F  0020               	movlb	0	; select bank0
  6286  0310  00B3               	movwf	??_setSw_Main
  6287  0311  3F41               	moviw [1]fsr1
  6288  0312  00B4               	movwf	??_setSw_Main+1
  6289  0313  3000               	movlw	0
  6290  0314  0234               	subwf	??_setSw_Main+1,w
  6291  0315  3096               	movlw	150
  6292  0316  1903               	skipnz
  6293  0317  0233               	subwf	??_setSw_Main,w
  6294  0318  1C03               	skipc
  6295  0319  0008               	return
  6296                           
  6297                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6298  031A  0021               	movlb	1	; select bank1
  6299  031B  0854               	movf	_Sw^(0+128),w
  6300  031C  0086               	movwf	6
  6301  031D  0855               	movf	(_Sw+1)^(0+128),w
  6302  031E  0087               	movwf	7
  6303  031F  3147               	addfsr 1,7
  6304  0320  3000               	movlw	0
  6305  0321  3FC0               	movwi [0]fsr1
  6306  0322  3FC1               	movwi [1]fsr1
  6307                           
  6308                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6309  0323  0854               	movf	_Sw^(0+128),w
  6310  0324  0086               	movwf	6
  6311  0325  0855               	movf	(_Sw+1)^(0+128),w
  6312  0326  0087               	movwf	7
  6313  0327  1681               	bsf	1,5
  6314                           
  6315                           ;Switch_B1.c: 188: setRF_Learn(0);
  6316  0328  3000               	movlw	0
  6317  0329  3199  212D         	fcall	_setRF_Learn
  6318                           
  6319                           ;Switch_B1.c: 191: }
  6320                           ;Switch_B1.c: 192: }
  6321                           ;Switch_B1.c: 193: }
  6322                           ;Switch_B1.c: 195: }
  6323                           ;Switch_B1.c: 196: }
  6324                           ;Switch_B1.c: 197: } else {
  6325  032B  0008               	return
  6326  032C                     l8919:	
  6327                           
  6328                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6329  032C  0021               	movlb	1	; select bank1
  6330  032D  0854               	movf	_Sw^(0+128),w
  6331  032E  0086               	movwf	6
  6332  032F  0855               	movf	(_Sw+1)^(0+128),w
  6333  0330  0087               	movwf	7
  6334  0331  1D01               	btfss	1,2
  6335  0332  0008               	return
  6336                           
  6337                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6338  0333  3001               	movlw	1
  6339  0334  0020               	movlb	0	; select bank0
  6340  0335  00B3               	movwf	??_setSw_Main
  6341  0336  0021               	movlb	1	; select bank1
  6342  0337  0854               	movf	_Sw^(0+128),w
  6343  0338  0086               	movwf	6
  6344  0339  0855               	movf	(_Sw+1)^(0+128),w
  6345  033A  0087               	movwf	7
  6346  033B  3142               	addfsr 1,2
  6347  033C  0020               	movlb	0	; select bank0
  6348  033D  0833               	movf	??_setSw_Main,w
  6349  033E  0781               	addwf	1,f
  6350                           
  6351                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  6352  033F  0021               	movlb	1	; select bank1
  6353  0340  0854               	movf	_Sw^(0+128),w
  6354  0341  0086               	movwf	6
  6355  0342  0855               	movf	(_Sw+1)^(0+128),w
  6356  0343  0087               	movwf	7
  6357  0344  3142               	addfsr 1,2
  6358  0345  3005               	movlw	5
  6359  0346  0201               	subwf	1,w
  6360  0347  1C03               	skipc
  6361  0348  0008               	return
  6362                           
  6363                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6364  0349  0854               	movf	_Sw^(0+128),w
  6365  034A  0086               	movwf	6
  6366  034B  0855               	movf	(_Sw+1)^(0+128),w
  6367  034C  0087               	movwf	7
  6368  034D  3142               	addfsr 1,2
  6369  034E  0181               	clrf	1
  6370                           
  6371                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6372  034F  0854               	movf	_Sw^(0+128),w
  6373  0350  0086               	movwf	6
  6374  0351  0855               	movf	(_Sw+1)^(0+128),w
  6375  0352  0087               	movwf	7
  6376  0353  1101               	bcf	1,2
  6377                           
  6378                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6379  0354  0854               	movf	_Sw^(0+128),w
  6380  0355  0086               	movwf	6
  6381  0356  0855               	movf	(_Sw+1)^(0+128),w
  6382  0357  0087               	movwf	7
  6383  0358  3143               	addfsr 1,3
  6384  0359  3000               	movlw	0
  6385  035A  3FC0               	movwi [0]fsr1
  6386  035B  3FC1               	movwi [1]fsr1
  6387                           
  6388                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6389  035C  0854               	movf	_Sw^(0+128),w
  6390  035D  0086               	movwf	6
  6391  035E  0855               	movf	(_Sw+1)^(0+128),w
  6392  035F  0087               	movwf	7
  6393  0360  1181               	bcf	1,3
  6394                           
  6395                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6396  0361  0854               	movf	_Sw^(0+128),w
  6397  0362  0086               	movwf	6
  6398  0363  0855               	movf	(_Sw+1)^(0+128),w
  6399  0364  0087               	movwf	7
  6400  0365  1201               	bcf	1,4
  6401                           
  6402                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6403  0366  0854               	movf	_Sw^(0+128),w
  6404  0367  0086               	movwf	6
  6405  0368  0855               	movf	(_Sw+1)^(0+128),w
  6406  0369  0087               	movwf	7
  6407  036A  1281               	bcf	1,5
  6408                           
  6409                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6410  036B  0854               	movf	_Sw^(0+128),w
  6411  036C  0086               	movwf	6
  6412  036D  0855               	movf	(_Sw+1)^(0+128),w
  6413  036E  0087               	movwf	7
  6414  036F  3145               	addfsr 1,5
  6415  0370  3000               	movlw	0
  6416  0371  3FC0               	movwi [0]fsr1
  6417  0372  3FC1               	movwi [1]fsr1
  6418                           
  6419                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6420  0373  0854               	movf	_Sw^(0+128),w
  6421  0374  0086               	movwf	6
  6422  0375  0855               	movf	(_Sw+1)^(0+128),w
  6423  0376  0087               	movwf	7
  6424  0377  3147               	addfsr 1,7
  6425  0378  3000               	movlw	0
  6426  0379  3FC0               	movwi [0]fsr1
  6427  037A  3FC1               	movwi [1]fsr1
  6428                           
  6429                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6430  037B  0020               	movlb	0	; select bank0
  6431  037C  0835               	movf	setSw_Main@sw,w
  6432  037D  319F  274C  3182   	fcall	_setDimmerLights_SwOff
  6433                           
  6434                           ;Switch_B1.c: 220: setRF_Learn(0);
  6435  0380  3000               	movlw	0
  6436  0381  3199  212D         	fcall	_setRF_Learn
  6437                           
  6438                           ;Switch_B1.c: 222: }
  6439                           ;Switch_B1.c: 223: }
  6440                           ;Switch_B1.c: 224: }
  6441                           ;Switch_B1.c: 225: } else {
  6442  0383  0008               	return
  6443  0384                     l2638:	
  6444                           
  6445                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6446  0384  1C2F               	btfss	_myMain^(0+128),0
  6447  0385  0008               	return
  6448                           
  6449                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6450  0386  0854               	movf	_Sw^(0+128),w
  6451  0387  0086               	movwf	6
  6452  0388  0855               	movf	(_Sw+1)^(0+128),w
  6453  0389  0087               	movwf	7
  6454  038A  1401               	bsf	1,0
  6455  038B  0008               	return
  6456  038C                     __end_of_setSw_Main:	
  6457                           
  6458                           	psect	text15
  6459  192D                     __ptext15:	
  6460 ;; *************** function _setRF_Learn *****************
  6461 ;; Defined at:
  6462 ;;		line 33 in file "../src/RF_Control_B1.c"
  6463 ;; Parameters:    Size  Location     Type
  6464 ;;  command         1    wreg     unsigned char 
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;  command         1    1[BANK0 ] unsigned char 
  6467 ;; Return value:  Size  Location     Type
  6468 ;;		None               void
  6469 ;; Registers used:
  6470 ;;		wreg, status,2, status,0
  6471 ;; Tracked objects:
  6472 ;;		On entry : 0/0
  6473 ;;		On exit  : 0/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;Total ram usage:        2 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; Hardware stack levels required when called:    5
  6483 ;; This function calls:
  6484 ;;		Nothing
  6485 ;; This function is called by:
  6486 ;;		_setSw_Main
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           
  6491                           ;psect for function _setRF_Learn
  6492  192D                     _setRF_Learn:	
  6493                           
  6494                           ;incstack = 0
  6495                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6496                           ;setRF_Learn@command stored from wreg
  6497  192D  0020               	movlb	0	; select bank0
  6498  192E  00A1               	movwf	setRF_Learn@command
  6499                           
  6500                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6501  192F  0821               	movf	setRF_Learn@command,w
  6502  1930  3A01               	xorlw	1
  6503  1931  3000               	movlw	0
  6504  1932  1903               	skipnz
  6505  1933  3001               	movlw	1
  6506  1934  00A0               	movwf	??_setRF_Learn
  6507  1935  0EA0               	swapf	??_setRF_Learn,f
  6508  1936  0DA0               	rlf	??_setRF_Learn,f
  6509  1937  0DA0               	rlf	??_setRF_Learn,f
  6510  1938  0021               	movlb	1	; select bank1
  6511  1939  0820               	movf	_RF1^(0+128),w
  6512  193A  0020               	movlb	0	; select bank0
  6513  193B  0620               	xorwf	??_setRF_Learn,w
  6514  193C  39BF               	andlw	-65
  6515  193D  0620               	xorwf	??_setRF_Learn,w
  6516  193E  0021               	movlb	1	; select bank1
  6517  193F  00A0               	movwf	_RF1^(0+128)
  6518  1940  0008               	return
  6519  1941                     __end_of_setRF_Learn:	
  6520                           
  6521                           	psect	text16
  6522  1CFE                     __ptext16:	
  6523 ;; *************** function _setDimmerLights_DimmingOn *****************
  6524 ;; Defined at:
  6525 ;;		line 816 in file "../src/Dimmer_B1.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;  sw              1    wreg     unsigned char 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  sw              1    2[BANK0 ] unsigned char 
  6530 ;; Return value:  Size  Location     Type
  6531 ;;		None               void
  6532 ;; Registers used:
  6533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6543 ;;Total ram usage:        1 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    6
  6546 ;; This function calls:
  6547 ;;		_DimmerLights_SelectPointer
  6548 ;; This function is called by:
  6549 ;;		_setSw_Main
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           
  6554                           ;psect for function _setDimmerLights_DimmingOn
  6555  1CFE                     _setDimmerLights_DimmingOn:	
  6556                           
  6557                           ;incstack = 0
  6558                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6559                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6560  1CFE  0020               	movlb	0	; select bank0
  6561  1CFF  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6562                           
  6563                           ;Dimmer_B1.c: 822: DimmerLights_SelectPointer(sw);
  6564  1D00  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6565  1D01  3199  21C2  319C   	fcall	_DimmerLights_SelectPointer
  6566                           
  6567                           ;Dimmer_B1.c: 823: if (DimmerLights->Trigger == 0) {
  6568  1D04  0021               	movlb	1	; select bank1
  6569  1D05  085A               	movf	_DimmerLights^(0+128),w
  6570  1D06  0086               	movwf	6
  6571  1D07  3001               	movlw	1	; select bank2/3
  6572  1D08  0087               	movwf	7
  6573  1D09  1881               	btfsc	1,1
  6574  1D0A  0008               	return
  6575                           
  6576                           ;Dimmer_B1.c: 824: if (DimmerLights->SwFlag == 1) {
  6577  1D0B  085A               	movf	_DimmerLights^(0+128),w
  6578  1D0C  0086               	movwf	6
  6579  1D0D  3001               	movlw	1	; select bank2/3
  6580  1D0E  0087               	movwf	7
  6581  1D0F  1C01               	btfss	1,0
  6582  1D10  0008               	return
  6583                           
  6584                           ;Dimmer_B1.c: 825: DimmerLights->Status = 1;
  6585  1D11  0A5A               	incf	_DimmerLights^(0+128),w
  6586  1D12  0086               	movwf	6
  6587  1D13  3001               	movlw	1	; select bank2/3
  6588  1D14  0087               	movwf	7
  6589  1D15  1401               	bsf	1,0
  6590                           
  6591                           ;Dimmer_B1.c: 827: DimmerLights->DimmingSwFlag = 1;
  6592  1D16  085A               	movf	_DimmerLights^(0+128),w
  6593  1D17  0086               	movwf	6
  6594  1D18  3001               	movlw	1	; select bank2/3
  6595  1D19  0087               	movwf	7
  6596  1D1A  1581               	bsf	1,3
  6597                           
  6598                           ;Dimmer_B1.c: 828: DimmerLights->DimmingTrigger = 1;
  6599  1D1B  085A               	movf	_DimmerLights^(0+128),w
  6600  1D1C  0086               	movwf	6
  6601  1D1D  3001               	movlw	1	; select bank2/3
  6602  1D1E  0087               	movwf	7
  6603  1D1F  1601               	bsf	1,4
  6604                           
  6605                           ;Dimmer_B1.c: 829: DimmerLights->DimmingSwitch = 1;
  6606  1D20  085A               	movf	_DimmerLights^(0+128),w
  6607  1D21  0086               	movwf	6
  6608  1D22  3001               	movlw	1	; select bank2/3
  6609  1D23  0087               	movwf	7
  6610  1D24  1681               	bsf	1,5
  6611  1D25  0008               	return
  6612  1D26                     __end_of_setDimmerLights_DimmingOn:	
  6613                           
  6614                           	psect	text17
  6615  1B69                     __ptext17:	
  6616 ;; *************** function _getSw_KeyStatus *****************
  6617 ;; Defined at:
  6618 ;;		line 238 in file "../src/Switch_B1.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  sw              1    wreg     unsigned char 
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;  sw              1    4[BANK0 ] unsigned char 
  6623 ;;  status          1    3[BANK0 ] unsigned char 
  6624 ;; Return value:  Size  Location     Type
  6625 ;;                  1    wreg      unsigned char 
  6626 ;; Registers used:
  6627 ;;		wreg, status,2
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6637 ;;Total ram usage:        5 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; Hardware stack levels required when called:    5
  6640 ;; This function calls:
  6641 ;;		Nothing
  6642 ;; This function is called by:
  6643 ;;		_setSw_Main
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           
  6648                           ;psect for function _getSw_KeyStatus
  6649  1B69                     _getSw_KeyStatus:	
  6650                           
  6651                           ;incstack = 0
  6652                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6653                           ;getSw_KeyStatus@sw stored from wreg
  6654  1B69  0020               	movlb	0	; select bank0
  6655  1B6A  00A4               	movwf	getSw_KeyStatus@sw
  6656                           
  6657                           ;Switch_B1.c: 239: char status = 0;
  6658  1B6B  01A3               	clrf	getSw_KeyStatus@status
  6659                           
  6660                           ;Switch_B1.c: 259: if (sw == 1) {
  6661  1B6C  0824               	movf	getSw_KeyStatus@sw,w
  6662  1B6D  3A01               	xorlw	1
  6663  1B6E  1D03               	skipz
  6664  1B6F  2B78               	goto	l8119
  6665                           
  6666                           ;Switch_B1.c: 260: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6667  1B70  01A1               	clrf	_getSw_KeyStatus$6415
  6668  1B71  0AA1               	incf	_getSw_KeyStatus$6415,f
  6669  1B72  1C0C               	btfss	12,0	;volatile
  6670  1B73  188D               	btfsc	13,1	;volatile
  6671  1B74  2B76               	goto	l8117
  6672  1B75  01A1               	clrf	_getSw_KeyStatus$6415
  6673  1B76                     l8117:	
  6674  1B76  0821               	movf	_getSw_KeyStatus$6415,w
  6675  1B77  2B83               	goto	L3
  6676  1B78                     l8119:	
  6677                           ;Switch_B1.c: 261: } else if (sw == 2) {
  6678                           
  6679  1B78  0824               	movf	getSw_KeyStatus@sw,w
  6680  1B79  3A02               	xorlw	2
  6681  1B7A  1D03               	skipz
  6682  1B7B  2B86               	goto	l8129
  6683                           
  6684                           ;Switch_B1.c: 262: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6685  1B7C  01A2               	clrf	_getSw_KeyStatus$6416
  6686  1B7D  0AA2               	incf	_getSw_KeyStatus$6416,f
  6687  1B7E  1F0C               	btfss	12,6	;volatile
  6688  1B7F  1A0C               	btfsc	12,4	;volatile
  6689  1B80  2B82               	goto	l8127
  6690  1B81  01A2               	clrf	_getSw_KeyStatus$6416
  6691  1B82                     l8127:	
  6692  1B82  0822               	movf	_getSw_KeyStatus$6416,w
  6693  1B83                     L3:	
  6694  1B83  00A0               	movwf	??_getSw_KeyStatus
  6695  1B84  0820               	movf	??_getSw_KeyStatus,w
  6696  1B85  00A3               	movwf	getSw_KeyStatus@status
  6697  1B86                     l8129:	
  6698                           
  6699                           ;Switch_B1.c: 263: }
  6700                           ;Switch_B1.c: 276: return status;
  6701  1B86  0823               	movf	getSw_KeyStatus@status,w
  6702  1B87  0008               	return
  6703  1B88                     __end_of_getSw_KeyStatus:	
  6704                           
  6705                           	psect	text18
  6706  1A07                     __ptext18:	
  6707 ;; *************** function _SwPointSelect *****************
  6708 ;; Defined at:
  6709 ;;		line 25 in file "../src/Switch_B1.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;  sw              1    wreg     unsigned char 
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;  sw              1    0[BANK0 ] unsigned char 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;		None               void
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;Total ram usage:        1 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    5
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		_setSw_Main
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           
  6738                           ;psect for function _SwPointSelect
  6739  1A07                     _SwPointSelect:	
  6740                           
  6741                           ;incstack = 0
  6742                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
  6743                           ;SwPointSelect@sw stored from wreg
  6744  1A07  0020               	movlb	0	; select bank0
  6745  1A08  00A0               	movwf	SwPointSelect@sw
  6746                           
  6747                           ;Switch_B1.c: 28: if (sw == 1) {
  6748  1A09  0820               	movf	SwPointSelect@sw,w
  6749  1A0A  3A01               	xorlw	1
  6750  1A0B  1D03               	skipz
  6751  1A0C  2A13               	goto	l8103
  6752                           
  6753                           ;Switch_B1.c: 29: Sw = &Sw1;
  6754  1A0D  30D0               	movlw	low _Sw1
  6755  1A0E  0021               	movlb	1	; select bank1
  6756  1A0F  00D4               	movwf	_Sw^(0+128)
  6757  1A10  3001               	movlw	high _Sw1
  6758  1A11  00D5               	movwf	(_Sw+1)^(0+128)
  6759                           
  6760                           ;Switch_B1.c: 30: }
  6761  1A12  0008               	return
  6762  1A13                     l8103:	
  6763                           
  6764                           ;Switch_B1.c: 33: else if (sw == 2) {
  6765  1A13  0020               	movlb	0	; select bank0
  6766  1A14  0820               	movf	SwPointSelect@sw,w
  6767  1A15  3A02               	xorlw	2
  6768  1A16  1D03               	skipz
  6769  1A17  0008               	return
  6770                           
  6771                           ;Switch_B1.c: 34: Sw = &Sw2;
  6772  1A18  3045               	movlw	low _Sw2
  6773  1A19  0021               	movlb	1	; select bank1
  6774  1A1A  00D4               	movwf	_Sw^(0+128)
  6775  1A1B  3002               	movlw	high _Sw2
  6776  1A1C  00D5               	movwf	(_Sw+1)^(0+128)
  6777  1A1D  0008               	return
  6778  1A1E                     __end_of_SwPointSelect:	
  6779                           
  6780                           	psect	text19
  6781  1980                     __ptext19:	
  6782 ;; *************** function _TouchPower *****************
  6783 ;; Defined at:
  6784 ;;		line 10 in file "../src/Switch_B1.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;		None
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;		None               void
  6791 ;; Registers used:
  6792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;Total ram usage:        0 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    6
  6805 ;; This function calls:
  6806 ;;		_Timeout_Counter
  6807 ;;		_set_TimeoutCleared
  6808 ;; This function is called by:
  6809 ;;		_Switch_Main
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           
  6814                           ;psect for function _TouchPower
  6815  1980                     _TouchPower:	
  6816                           
  6817                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6818                           
  6819                           ;incstack = 0
  6820                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6821  1980  0021               	movlb	1	; select bank1
  6822  1981  1C2F               	btfss	_myMain^(0+128),0
  6823  1982  0008               	return
  6824                           
  6825                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6826  1983  0020               	movlb	0	; select bank0
  6827  1984  1A8E               	btfsc	14,5	;volatile
  6828  1985  0008               	return
  6829  1986  298C               	goto	l8851
  6830  1987                     l2616:	
  6831                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6832                           
  6833                           
  6834                           ;Switch_B1.c: 14: RC5 = 1;
  6835  1987  0020               	movlb	0	; select bank0
  6836  1988  168E               	bsf	14,5	;volatile
  6837                           
  6838                           ;Switch_B1.c: 15: Timeout_Counter();
  6839  1989  3199  216B  3199   	fcall	_Timeout_Counter
  6840  198C                     l8851:	
  6841  198C  0020               	movlb	0	; select bank0
  6842  198D  1A8E               	btfsc	14,5	;volatile
  6843  198E  2992               	goto	l8855
  6844  198F  0021               	movlb	1	; select bank1
  6845  1990  1D39               	btfss	(_myMain^(0+128)+10),2
  6846  1991  2987               	goto	l2616
  6847  1992                     l8855:	
  6848                           
  6849                           ;Switch_B1.c: 16: }
  6850                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6851  1992  31A6  265D         	fcall	_set_TimeoutCleared
  6852  1994  0008               	return
  6853  1995                     __end_of_TouchPower:	
  6854                           
  6855                           	psect	text20
  6856  265D                     __ptext20:	
  6857 ;; *************** function _set_TimeoutCleared *****************
  6858 ;; Defined at:
  6859 ;;		line 281 in file "../src/main_B1.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;		None
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;		None               void
  6866 ;; Registers used:
  6867 ;;		status,2
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;Total ram usage:        0 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:    5
  6880 ;; This function calls:
  6881 ;;		Nothing
  6882 ;; This function is called by:
  6883 ;;		_getAD
  6884 ;;		_TouchPower
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           
  6889                           ;psect for function _set_TimeoutCleared
  6890  265D                     _set_TimeoutCleared:	
  6891                           
  6892                           ;main_B1.c: 282: myMain.Timeout = 0;
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _set_TimeoutCleared: [status,2]
  6896  265D  0021               	movlb	1	; select bank1
  6897  265E  1139               	bcf	(_myMain^(0+128)+10),2
  6898                           
  6899                           ;main_B1.c: 283: myMain.Timeout_Counter = 0;
  6900  265F  01BA               	clrf	(_myMain^(0+128)+11)
  6901  2660  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6902  2661  0008               	return
  6903  2662                     __end_of_set_TimeoutCleared:	
  6904                           
  6905                           	psect	text21
  6906  196B                     __ptext21:	
  6907 ;; *************** function _Timeout_Counter *****************
  6908 ;; Defined at:
  6909 ;;		line 272 in file "../src/main_B1.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;		None
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;		None
  6914 ;; Return value:  Size  Location     Type
  6915 ;;		None               void
  6916 ;; Registers used:
  6917 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;Total ram usage:        0 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:    5
  6930 ;; This function calls:
  6931 ;;		Nothing
  6932 ;; This function is called by:
  6933 ;;		_getAD
  6934 ;;		_TouchPower
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           
  6939                           ;psect for function _Timeout_Counter
  6940  196B                     _Timeout_Counter:	
  6941                           
  6942                           ;main_B1.c: 273: myMain.Timeout_Counter++;
  6943                           
  6944                           ;incstack = 0
  6945                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6946  196B  3001               	movlw	1
  6947  196C  0021               	movlb	1	; select bank1
  6948  196D  07BA               	addwf	(_myMain^(0+128)+11),f
  6949  196E  3000               	movlw	0
  6950  196F  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6951                           
  6952                           ;main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6953  1970  300B               	movlw	11
  6954  1971  3EAF               	addlw	_myMain& (0+255)
  6955  1972  0086               	movwf	6
  6956  1973  0187               	clrf	7
  6957  1974  3F40               	moviw [0]fsr1
  6958  1975  3AA8               	xorlw	168
  6959  1976  1D03               	skipz
  6960  1977  297A               	goto	u7645
  6961  1978  3F41               	moviw [1]fsr1
  6962  1979  3A61               	xorlw	97
  6963  197A                     u7645:	
  6964  197A  1D03               	skipz
  6965  197B  0008               	return
  6966                           
  6967                           ;main_B1.c: 275: myMain.Timeout_Counter = 0;
  6968  197C  01BA               	clrf	(_myMain^(0+128)+11)
  6969  197D  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6970                           
  6971                           ;main_B1.c: 276: myMain.Timeout = 1;
  6972  197E  1539               	bsf	(_myMain^(0+128)+10),2
  6973  197F  0008               	return
  6974  1980                     __end_of_Timeout_Counter:	
  6975                           
  6976                           	psect	text22
  6977  26AB                     __ptext22:	
  6978 ;; *************** function _Switch_Initialization *****************
  6979 ;; Defined at:
  6980 ;;		line 46 in file "../src/Switch_B1.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;		None
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;		None
  6985 ;; Return value:  Size  Location     Type
  6986 ;;		None               void
  6987 ;; Registers used:
  6988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;Total ram usage:        0 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    8
  7001 ;; This function calls:
  7002 ;;		_setSw_Initialization
  7003 ;; This function is called by:
  7004 ;;		_main
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           
  7009                           ;psect for function _Switch_Initialization
  7010  26AB                     _Switch_Initialization:	
  7011                           
  7012                           ;Switch_B1.c: 52: setSw_Initialization(1);
  7013                           
  7014                           ;incstack = 0
  7015                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7016  26AB  3001               	movlw	1
  7017  26AC  31A6  26A3  31A6   	fcall	_setSw_Initialization
  7018                           
  7019                           ;Switch_B1.c: 56: setSw_Initialization(2);
  7020  26AF  3002               	movlw	2
  7021  26B0  31A6  26A3         	fcall	_setSw_Initialization
  7022  26B2  0008               	return
  7023  26B3                     __end_of_Switch_Initialization:	
  7024                           
  7025                           	psect	text23
  7026  26A3                     __ptext23:	
  7027 ;; *************** function _setSw_Initialization *****************
  7028 ;; Defined at:
  7029 ;;		line 66 in file "../src/Switch_B1.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;  sw              1    wreg     unsigned char 
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;  sw              1    4[BANK0 ] unsigned char 
  7034 ;; Return value:  Size  Location     Type
  7035 ;;		None               void
  7036 ;; Registers used:
  7037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7046 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7047 ;;Total ram usage:        1 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    7
  7050 ;; This function calls:
  7051 ;;		_setLED
  7052 ;; This function is called by:
  7053 ;;		_Switch_Initialization
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           
  7058                           ;psect for function _setSw_Initialization
  7059  26A3                     _setSw_Initialization:	
  7060                           
  7061                           ;incstack = 0
  7062                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7063                           ;setSw_Initialization@sw stored from wreg
  7064  26A3  0020               	movlb	0	; select bank0
  7065  26A4  00A4               	movwf	setSw_Initialization@sw
  7066                           
  7067                           ;Switch_B1.c: 68: setLED(sw, 1);
  7068  26A5  01A2               	clrf	setLED@command
  7069  26A6  0AA2               	incf	setLED@command,f
  7070  26A7  0824               	movf	setSw_Initialization@sw,w
  7071  26A8  3191  21E5         	fcall	_setLED
  7072  26AA  0008               	return
  7073  26AB                     __end_of_setSw_Initialization:	
  7074                           
  7075                           	psect	text24
  7076  2640                     __ptext24:	
  7077 ;; *************** function _RF_Main *****************
  7078 ;; Defined at:
  7079 ;;		line 26 in file "../src/RF_Control_B1.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;		None
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;		None
  7084 ;; Return value:  Size  Location     Type
  7085 ;;		None               void
  7086 ;; Registers used:
  7087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;Total ram usage:        0 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:   12
  7100 ;; This function calls:
  7101 ;;		_setRF_Main
  7102 ;; This function is called by:
  7103 ;;		_main
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           
  7108                           ;psect for function _RF_Main
  7109  2640                     _RF_Main:	
  7110                           
  7111                           ;RF_Control_B1.c: 28: setRF_Main();
  7112                           
  7113                           ;incstack = 0
  7114                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7115  2640  3186  2630         	fcall	_setRF_Main
  7116  2642  0008               	return
  7117  2643                     __end_of_RF_Main:	
  7118                           
  7119                           	psect	text25
  7120  0630                     __ptext25:	
  7121 ;; *************** function _setRF_Main *****************
  7122 ;; Defined at:
  7123 ;;		line 53 in file "../src/RF_Control_B1.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;		None
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;  error           1    3[BANK1 ] unsigned char 
  7128 ;; Return value:  Size  Location     Type
  7129 ;;		None               void
  7130 ;; Registers used:
  7131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;Total ram usage:        2 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:   11
  7144 ;; This function calls:
  7145 ;;		_CC2500_PowerOnInitial
  7146 ;;		_CC2500_RxData
  7147 ;;		_CC2500_TxData
  7148 ;;		_CC2500_WriteCommand
  7149 ;;		_RF_RxDisable
  7150 ;;		___lwdiv
  7151 ;;		_getBuz_GO
  7152 ;;		_getRF_KeyStatus
  7153 ;;		_getRxData
  7154 ;; This function is called by:
  7155 ;;		_RF_Main
  7156 ;; This function uses a non-reentrant model
  7157 ;;
  7158                           
  7159                           
  7160                           ;psect for function _setRF_Main
  7161  0630                     _setRF_Main:	
  7162                           
  7163                           ;RF_Control_B1.c: 54: char error = 0;
  7164                           
  7165                           ;incstack = 0
  7166                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7167  0630  0021               	movlb	1	; select bank1
  7168  0631  01E8               	clrf	setRF_Main@error^(0+128)
  7169                           
  7170                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7171  0632  1C20               	btfss	_RF1^(0+128),0
  7172  0633  2F01               	goto	l2207
  7173                           
  7174                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7175  0634  31A7  27BA  3186   	fcall	_getBuz_GO
  7176  0637  0020               	movlb	0	; select bank0
  7177  0638  0821               	movf	?_getBuz_GO+1,w
  7178  0639  0420               	iorwf	?_getBuz_GO,w
  7179  063A  1D03               	skipz
  7180  063B  2EE2               	goto	l10171
  7181                           
  7182                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7183  063C  31A7  27CB  3186   	fcall	_getRF_KeyStatus
  7184  063F  3A01               	xorlw	1
  7185  0640  3000               	movlw	0
  7186  0641  1903               	skipnz
  7187  0642  3001               	movlw	1
  7188  0643  0021               	movlb	1	; select bank1
  7189  0644  00E7               	movwf	??_setRF_Main^(0+128)
  7190  0645  0CE7               	rrf	??_setRF_Main^(0+128),f
  7191  0646  0CE7               	rrf	??_setRF_Main^(0+128),f
  7192  0647  0820               	movf	_RF1^(0+128),w
  7193  0648  0667               	xorwf	??_setRF_Main^(0+128),w
  7194  0649  397F               	andlw	-129
  7195  064A  0667               	xorwf	??_setRF_Main^(0+128),w
  7196  064B  00A0               	movwf	_RF1^(0+128)
  7197                           
  7198                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7199  064C  1FA0               	btfss	_RF1^(0+128),7
  7200  064D  2E50               	goto	l2211
  7201  064E  1F20               	btfss	_RF1^(0+128),6
  7202  064F  2EE2               	goto	l10171
  7203  0650                     l2211:	
  7204                           
  7205                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7206  0650  1D20               	btfss	_RF1^(0+128),2
  7207  0651  2EA1               	goto	l2212
  7208                           
  7209                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7210  0652  1B20               	btfsc	_RF1^(0+128),6
  7211  0653  2E9C               	goto	l10143
  7212                           
  7213                           ;RF_Control_B1.c: 68: RF1.Count++;
  7214  0654  3001               	movlw	1
  7215  0655  07A3               	addwf	(_RF1^(0+128)+3),f
  7216  0656  3000               	movlw	0
  7217  0657  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7218                           
  7219                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7220  0658  3014               	movlw	20
  7221  0659  0020               	movlb	0	; select bank0
  7222  065A  00A0               	movwf	___lwdiv@divisor
  7223  065B  3000               	movlw	0
  7224  065C  00A1               	movwf	___lwdiv@divisor+1
  7225  065D  0021               	movlb	1	; select bank1
  7226  065E  0829               	movf	((_RF1+1)^(0+128)+8),w
  7227  065F  0020               	movlb	0	; select bank0
  7228  0660  01A3               	clrf	___lwdiv@dividend+1
  7229  0661  07A3               	addwf	___lwdiv@dividend+1,f
  7230  0662  0021               	movlb	1	; select bank1
  7231  0663  0828               	movf	(_RF1^(0+128)+8),w
  7232  0664  0020               	movlb	0	; select bank0
  7233  0665  01A2               	clrf	___lwdiv@dividend
  7234  0666  07A2               	addwf	___lwdiv@dividend,f
  7235  0667  319E  266B  3186   	fcall	___lwdiv
  7236  066A  0020               	movlb	0	; select bank0
  7237  066B  0821               	movf	?___lwdiv+1,w
  7238  066C  0021               	movlb	1	; select bank1
  7239  066D  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7240  066E  1D03               	skipz
  7241  066F  2E74               	goto	u11465
  7242  0670  0020               	movlb	0	; select bank0
  7243  0671  0820               	movf	?___lwdiv,w
  7244  0672  0021               	movlb	1	; select bank1
  7245  0673  0223               	subwf	(_RF1^(0+128)+3),w
  7246  0674                     u11465:	
  7247  0674  1C03               	skipc
  7248  0675  2EE2               	goto	l10171
  7249                           
  7250                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7251  0676  3014               	movlw	20
  7252  0677  0020               	movlb	0	; select bank0
  7253  0678  00A0               	movwf	___lwdiv@divisor
  7254  0679  3000               	movlw	0
  7255  067A  00A1               	movwf	___lwdiv@divisor+1
  7256  067B  0021               	movlb	1	; select bank1
  7257  067C  0829               	movf	((_RF1+1)^(0+128)+8),w
  7258  067D  0020               	movlb	0	; select bank0
  7259  067E  01A3               	clrf	___lwdiv@dividend+1
  7260  067F  07A3               	addwf	___lwdiv@dividend+1,f
  7261  0680  0021               	movlb	1	; select bank1
  7262  0681  0828               	movf	(_RF1^(0+128)+8),w
  7263  0682  0020               	movlb	0	; select bank0
  7264  0683  01A2               	clrf	___lwdiv@dividend
  7265  0684  07A2               	addwf	___lwdiv@dividend,f
  7266  0685  319E  266B  3186   	fcall	___lwdiv
  7267  0688  0020               	movlb	0	; select bank0
  7268  0689  0821               	movf	?___lwdiv+1,w
  7269  068A  0021               	movlb	1	; select bank1
  7270  068B  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7271  068C  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7272  068D  0020               	movlb	0	; select bank0
  7273  068E  0820               	movf	?___lwdiv,w
  7274  068F  0021               	movlb	1	; select bank1
  7275  0690  01A3               	clrf	(_RF1^(0+128)+3)
  7276  0691  07A3               	addwf	(_RF1^(0+128)+3),f
  7277                           
  7278                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7279  0692  1120               	bcf	_RF1^(0+128),2
  7280                           
  7281                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7282  0693  01AB               	clrf	(_RF1^(0+128)+11)
  7283  0694  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7284                           
  7285                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7286  0695  31A7  2778  3186   	fcall	_RF_RxDisable
  7287                           
  7288                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7289  0698  3196  26B3  3186   	fcall	_CC2500_TxData
  7290                           
  7291                           ;RF_Control_B1.c: 77: }
  7292                           ;RF_Control_B1.c: 78: } else {
  7293  069B  2EE2               	goto	l10171
  7294  069C                     l10143:	
  7295                           
  7296                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7297  069C  0021               	movlb	1	; select bank1
  7298  069D  01A3               	clrf	(_RF1^(0+128)+3)
  7299  069E  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7300                           
  7301                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7302  069F  1120               	bcf	_RF1^(0+128),2
  7303                           
  7304                           ;RF_Control_B1.c: 81: }
  7305                           ;RF_Control_B1.c: 82: } else {
  7306  06A0  2EE2               	goto	l10171
  7307  06A1                     l2212:	
  7308                           
  7309                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7310  06A1  1DA0               	btfss	_RF1^(0+128),3
  7311  06A2  2EB0               	goto	l10157
  7312                           
  7313                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7314  06A3  3196  2648  3186   	fcall	_CC2500_RxData
  7315                           
  7316                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7317  06A6  0021               	movlb	1	; select bank1
  7318  06A7  1CA0               	btfss	_RF1^(0+128),1
  7319  06A8  2EE2               	goto	l10171
  7320                           
  7321                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7322  06A9  10A0               	bcf	_RF1^(0+128),1
  7323                           
  7324                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7325  06AA  01AB               	clrf	(_RF1^(0+128)+11)
  7326  06AB  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7327                           
  7328                           ;RF_Control_B1.c: 97: getRxData();
  7329  06AC  3194  244A  3186   	fcall	_getRxData
  7330                           
  7331                           ;RF_Control_B1.c: 100: }
  7332                           ;RF_Control_B1.c: 101: } else {
  7333  06AF  2EE2               	goto	l10171
  7334  06B0                     l10157:	
  7335                           
  7336                           ;RF_Control_B1.c: 102: RF1.Count++;
  7337  06B0  3001               	movlw	1
  7338  06B1  0021               	movlb	1	; select bank1
  7339  06B2  07A3               	addwf	(_RF1^(0+128)+3),f
  7340  06B3  3000               	movlw	0
  7341  06B4  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7342                           
  7343                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7344  06B5  3014               	movlw	20
  7345  06B6  0020               	movlb	0	; select bank0
  7346  06B7  00A0               	movwf	___lwdiv@divisor
  7347  06B8  3000               	movlw	0
  7348  06B9  00A1               	movwf	___lwdiv@divisor+1
  7349  06BA  0021               	movlb	1	; select bank1
  7350  06BB  0829               	movf	((_RF1+1)^(0+128)+8),w
  7351  06BC  0020               	movlb	0	; select bank0
  7352  06BD  01A3               	clrf	___lwdiv@dividend+1
  7353  06BE  07A3               	addwf	___lwdiv@dividend+1,f
  7354  06BF  0021               	movlb	1	; select bank1
  7355  06C0  0828               	movf	(_RF1^(0+128)+8),w
  7356  06C1  0020               	movlb	0	; select bank0
  7357  06C2  01A2               	clrf	___lwdiv@dividend
  7358  06C3  07A2               	addwf	___lwdiv@dividend,f
  7359  06C4  319E  266B  3186   	fcall	___lwdiv
  7360  06C7  0020               	movlb	0	; select bank0
  7361  06C8  0821               	movf	?___lwdiv+1,w
  7362  06C9  0021               	movlb	1	; select bank1
  7363  06CA  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7364  06CB  1D03               	skipz
  7365  06CC  2ED1               	goto	u11495
  7366  06CD  0020               	movlb	0	; select bank0
  7367  06CE  0820               	movf	?___lwdiv,w
  7368  06CF  0021               	movlb	1	; select bank1
  7369  06D0  0223               	subwf	(_RF1^(0+128)+3),w
  7370  06D1                     u11495:	
  7371  06D1  1C03               	skipc
  7372  06D2  2EE2               	goto	l10171
  7373                           
  7374                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7375  06D3  01A3               	clrf	(_RF1^(0+128)+3)
  7376  06D4  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7377                           
  7378                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7379  06D5  15A0               	bsf	_RF1^(0+128),3
  7380                           
  7381                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7382  06D6  3036               	movlw	54
  7383  06D7  3190  2000  3186   	fcall	_CC2500_WriteCommand
  7384                           
  7385                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7386  06DA  303A               	movlw	58
  7387  06DB  3190  2000  3186   	fcall	_CC2500_WriteCommand
  7388                           
  7389                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7390  06DE  3034               	movlw	52
  7391  06DF  3190  2000  3186   	fcall	_CC2500_WriteCommand
  7392  06E2                     l10171:	
  7393                           
  7394                           ;RF_Control_B1.c: 111: }
  7395                           ;RF_Control_B1.c: 112: }
  7396                           ;RF_Control_B1.c: 113: }
  7397                           ;RF_Control_B1.c: 114: }
  7398                           ;RF_Control_B1.c: 115: }
  7399                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7400  06E2  3001               	movlw	1
  7401  06E3  0021               	movlb	1	; select bank1
  7402  06E4  07AB               	addwf	(_RF1^(0+128)+11),f
  7403  06E5  3000               	movlw	0
  7404  06E6  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7405                           
  7406                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7407  06E7  300B               	movlw	11
  7408  06E8  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7409  06E9  30B9               	movlw	185
  7410  06EA  1903               	skipnz
  7411  06EB  022B               	subwf	(_RF1^(0+128)+11),w
  7412  06EC  1C03               	skipc
  7413  06ED  2EFA               	goto	l10185
  7414                           
  7415                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7416  06EE  01AB               	clrf	(_RF1^(0+128)+11)
  7417  06EF  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7418                           
  7419                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7420  06F0  11A0               	bcf	_RF1^(0+128),3
  7421                           
  7422                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7423  06F1  10A0               	bcf	_RF1^(0+128),1
  7424                           
  7425                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7426  06F2  3036               	movlw	54
  7427  06F3  3190  2000  3186   	fcall	_CC2500_WriteCommand
  7428                           
  7429                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7430  06F6  303A               	movlw	58
  7431  06F7  3190  2000  3186   	fcall	_CC2500_WriteCommand
  7432  06FA                     l10185:	
  7433                           
  7434                           ;RF_Control_B1.c: 125: }
  7435                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7436  06FA  0021               	movlb	1	; select bank1
  7437  06FB  1F21               	btfss	(_RF1^(0+128)+1),6
  7438  06FC  0008               	return
  7439                           
  7440                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7441  06FD  1321               	bcf	(_RF1^(0+128)+1),6
  7442                           
  7443                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7444  06FE  3199  2156         	fcall	_CC2500_PowerOnInitial
  7445                           
  7446                           ;RF_Control_B1.c: 130: }
  7447                           ;RF_Control_B1.c: 132: } else {
  7448  0700  0008               	return
  7449  0701                     l2207:	
  7450                           
  7451                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7452  0701  1C2F               	btfss	_myMain^(0+128),0
  7453  0702  0008               	return
  7454                           
  7455                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7456  0703  1420               	bsf	_RF1^(0+128),0
  7457  0704  0008               	return
  7458  0705                     __end_of_setRF_Main:	
  7459                           
  7460                           	psect	text26
  7461  144A                     __ptext26:	
  7462 ;; *************** function _getRxData *****************
  7463 ;; Defined at:
  7464 ;;		line 227 in file "../src/RF_Control_B1.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;		None
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;  error           1    1[BANK1 ] unsigned char 
  7469 ;; Return value:  Size  Location     Type
  7470 ;;		None               void
  7471 ;; Registers used:
  7472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7479 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7480 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7481 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;Total ram usage:        2 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:   10
  7485 ;; This function calls:
  7486 ;;		_getMain_All_Error_Status
  7487 ;;		_setControl_Lights_Table
  7488 ;;		_setLog_Code
  7489 ;;		_setTxData
  7490 ;; This function is called by:
  7491 ;;		_setRF_Main
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           
  7496                           ;psect for function _getRxData
  7497  144A                     _getRxData:	
  7498                           
  7499                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7500                           
  7501                           ;incstack = 0
  7502                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7503  144A  0023               	movlb	3	; select bank3
  7504  144B  0820               	movf	_RF_Data^(0+384),w
  7505  144C  3AAA               	xorlw	170
  7506  144D  1D03               	skipz
  7507  144E  2C60               	goto	l8071
  7508  144F  0821               	movf	(_RF_Data^(0+384)+1),w
  7509  1450  3A01               	xorlw	1
  7510  1451  1D03               	skipz
  7511  1452  2C60               	goto	l8071
  7512                           
  7513                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7514  1453  3055               	movlw	85
  7515  1454  0021               	movlb	1	; select bank1
  7516  1455  00E5               	movwf	??_getRxData^(0+128)
  7517  1456  086D               	movf	_product^(0+128),w
  7518  1457  3E02               	addlw	2
  7519  1458  0086               	movwf	6
  7520  1459  3002               	movlw	2	; select bank4/5
  7521  145A  0087               	movwf	7
  7522  145B  0865               	movf	??_getRxData^(0+128),w
  7523  145C  0081               	movwf	1
  7524                           
  7525                           ;RF_Control_B1.c: 231: setTxData();
  7526  145D  318E  267E         	fcall	_setTxData
  7527                           
  7528                           ;RF_Control_B1.c: 235: } else {
  7529  145F  0008               	return
  7530  1460                     l8071:	
  7531                           
  7532                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7533  1460  3000               	movlw	0
  7534  1461  319E  2638  3194   	fcall	_getMain_All_Error_Status
  7535  1464  0021               	movlb	1	; select bank1
  7536  1465  00E5               	movwf	??_getRxData^(0+128)
  7537  1466  0865               	movf	??_getRxData^(0+128),w
  7538  1467  00E6               	movwf	getRxData@error^(0+128)
  7539                           
  7540                           ;RF_Control_B1.c: 237: if (error == 0) {
  7541  1468  08E6               	movf	getRxData@error^(0+128),f
  7542  1469  1D03               	skipz
  7543  146A  2CAC               	goto	l2252
  7544                           
  7545                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7546  146B  1F20               	btfss	_RF1^(0+128),6
  7547  146C  2C78               	goto	l8083
  7548                           
  7549                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7550  146D  0023               	movlb	3	; select bank3
  7551  146E  08A0               	movf	_RF_Data^(0+384),f
  7552  146F  1D03               	skipz
  7553  1470  0008               	return
  7554  1471  0821               	movf	(_RF_Data^(0+384)+1),w
  7555  1472  3A64               	xorlw	100
  7556  1473  1D03               	skipz
  7557  1474  0008               	return
  7558                           
  7559                           ;RF_Control_B1.c: 241: setLog_Code();
  7560  1475  3188  2000         	fcall	_setLog_Code
  7561                           
  7562                           ;RF_Control_B1.c: 242: }
  7563                           ;RF_Control_B1.c: 243: } else {
  7564  1477  0008               	return
  7565  1478                     l8083:	
  7566                           
  7567                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7568  1478  0023               	movlb	3	; select bank3
  7569  1479  0834               	movf	(_RF_Data^(0+384)+20),w
  7570  147A  3AD2               	xorlw	210
  7571  147B  1903               	skipnz
  7572  147C  2C81               	goto	l8087
  7573  147D  0834               	movf	(_RF_Data^(0+384)+20),w
  7574  147E  3A0A               	xorlw	10
  7575  147F  1D03               	skipz
  7576  1480  0008               	return
  7577  1481                     l8087:	
  7578                           
  7579                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7580  1481  08A0               	movf	_RF_Data^(0+384),f
  7581  1482  1D03               	skipz
  7582  1483  0008               	return
  7583  1484  0821               	movf	(_RF_Data^(0+384)+1),w
  7584  1485  3A02               	xorlw	2
  7585  1486  1D03               	skipz
  7586  1487  0008               	return
  7587                           
  7588                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7589  1488  0021               	movlb	1	; select bank1
  7590  1489  086D               	movf	_product^(0+128),w
  7591  148A  3E0C               	addlw	12
  7592  148B  0086               	movwf	6
  7593  148C  3002               	movlw	2	; select bank4/5
  7594  148D  0087               	movwf	7
  7595  148E  0023               	movlb	3	; select bank3
  7596  148F  082C               	movf	(_RF_Data^(0+384)+12),w
  7597  1490  0601               	xorwf	1,w
  7598  1491  1D03               	skipz
  7599  1492  0008               	return
  7600  1493  0021               	movlb	1	; select bank1
  7601  1494  086D               	movf	_product^(0+128),w
  7602  1495  3E0D               	addlw	13
  7603  1496  0086               	movwf	6
  7604  1497  3002               	movlw	2	; select bank4/5
  7605  1498  0087               	movwf	7
  7606  1499  0023               	movlb	3	; select bank3
  7607  149A  082D               	movf	(_RF_Data^(0+384)+13),w
  7608  149B  0601               	xorwf	1,w
  7609  149C  1D03               	skipz
  7610  149D  0008               	return
  7611  149E  0021               	movlb	1	; select bank1
  7612  149F  086D               	movf	_product^(0+128),w
  7613  14A0  3E0E               	addlw	14
  7614  14A1  0086               	movwf	6
  7615  14A2  3002               	movlw	2	; select bank4/5
  7616  14A3  0087               	movwf	7
  7617  14A4  0023               	movlb	3	; select bank3
  7618  14A5  082E               	movf	(_RF_Data^(0+384)+14),w
  7619  14A6  0601               	xorwf	1,w
  7620  14A7  1D03               	skipz
  7621  14A8  0008               	return
  7622                           
  7623                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7624  14A9  318B  23D0         	fcall	_setControl_Lights_Table
  7625                           
  7626                           ;RF_Control_B1.c: 250: }
  7627                           ;RF_Control_B1.c: 253: }
  7628                           ;RF_Control_B1.c: 264: }
  7629                           ;RF_Control_B1.c: 265: }
  7630                           ;RF_Control_B1.c: 266: } else {
  7631  14AB  0008               	return
  7632  14AC                     l2252:	
  7633                           
  7634                           ;RF_Control_B1.c: 267: __nop();
  7635  14AC  0000               	nop
  7636  14AD  0008               	return
  7637  14AE                     __end_of_getRxData:	
  7638                           
  7639                           	psect	text27
  7640  0800                     __ptext27:	
  7641 ;; *************** function _setLog_Code *****************
  7642 ;; Defined at:
  7643 ;;		line 273 in file "../src/RF_Control_B1.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;		None
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;		None               void
  7650 ;; Registers used:
  7651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;Total ram usage:        1 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    7
  7664 ;; This function calls:
  7665 ;;		_setBuz
  7666 ;;		_setMemory_LoopSave
  7667 ;;		_setMemory_Modify
  7668 ;;		_setProductData
  7669 ;; This function is called by:
  7670 ;;		_getRxData
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           
  7675                           ;psect for function _setLog_Code
  7676  0800                     _setLog_Code:	
  7677                           
  7678                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7679                           
  7680                           ;incstack = 0
  7681                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7682  0800  0021               	movlb	1	; select bank1
  7683  0801  1320               	bcf	_RF1^(0+128),6
  7684                           
  7685                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7686  0802  0023               	movlb	3	; select bank3
  7687  0803  082C               	movf	(_RF_Data^(0+384)+12),w
  7688  0804  0020               	movlb	0	; select bank0
  7689  0805  00E5               	movwf	??_setLog_Code
  7690  0806  0865               	movf	??_setLog_Code,w
  7691  0807  00E2               	movwf	setProductData@value
  7692  0808  300C               	movlw	12
  7693  0809  31A6  26FD  3188   	fcall	_setProductData
  7694                           
  7695                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7696  080C  0023               	movlb	3	; select bank3
  7697  080D  082D               	movf	(_RF_Data^(0+384)+13),w
  7698  080E  0020               	movlb	0	; select bank0
  7699  080F  00E5               	movwf	??_setLog_Code
  7700  0810  0865               	movf	??_setLog_Code,w
  7701  0811  00E2               	movwf	setProductData@value
  7702  0812  300D               	movlw	13
  7703  0813  31A6  26FD  3188   	fcall	_setProductData
  7704                           
  7705                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7706  0816  0023               	movlb	3	; select bank3
  7707  0817  082E               	movf	(_RF_Data^(0+384)+14),w
  7708  0818  0020               	movlb	0	; select bank0
  7709  0819  00E5               	movwf	??_setLog_Code
  7710  081A  0865               	movf	??_setLog_Code,w
  7711  081B  00E2               	movwf	setProductData@value
  7712  081C  300E               	movlw	14
  7713  081D  31A6  26FD  3188   	fcall	_setProductData
  7714                           
  7715                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7716  0820  3064               	movlw	100
  7717  0821  0020               	movlb	0	; select bank0
  7718  0822  00A9               	movwf	setBuz@time
  7719  0823  3000               	movlw	0
  7720  0824  00AA               	movwf	setBuz@time+1
  7721  0825  3001               	movlw	1
  7722  0826  3193  2335  3188   	fcall	_setBuz
  7723                           
  7724                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7725  0829  0021               	movlb	1	; select bank1
  7726  082A  1EAF               	btfss	_myMain^(0+128),5
  7727  082B  2830               	goto	l2265
  7728                           
  7729                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7730  082C  3001               	movlw	1
  7731  082D  3199  2107  3188   	fcall	_setMemory_LoopSave
  7732  0830                     l2265:	
  7733                           
  7734                           ;RF_Control_B1.c: 281: }
  7735                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7736  0830  3001               	movlw	1
  7737  0831  3198  20BB         	fcall	_setMemory_Modify
  7738  0833  0008               	return
  7739  0834                     __end_of_setLog_Code:	
  7740                           
  7741                           	psect	text28
  7742  1907                     __ptext28:	
  7743 ;; *************** function _setMemory_LoopSave *****************
  7744 ;; Defined at:
  7745 ;;		line 1089 in file "../src/MCU_B1.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  command         1    wreg     unsigned char 
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;  command         1    1[BANK0 ] unsigned char 
  7750 ;; Return value:  Size  Location     Type
  7751 ;;		None               void
  7752 ;; Registers used:
  7753 ;;		wreg, status,2, status,0
  7754 ;; Tracked objects:
  7755 ;;		On entry : 0/0
  7756 ;;		On exit  : 0/0
  7757 ;;		Unchanged: 0/0
  7758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7763 ;;Total ram usage:        2 bytes
  7764 ;; Hardware stack levels used:    1
  7765 ;; Hardware stack levels required when called:    5
  7766 ;; This function calls:
  7767 ;;		Nothing
  7768 ;; This function is called by:
  7769 ;;		_setLog_Code
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           
  7774                           ;psect for function _setMemory_LoopSave
  7775  1907                     _setMemory_LoopSave:	
  7776                           
  7777                           ;incstack = 0
  7778                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7779                           ;setMemory_LoopSave@command stored from wreg
  7780  1907  0020               	movlb	0	; select bank0
  7781  1908  00A1               	movwf	setMemory_LoopSave@command
  7782                           
  7783                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7784  1909  0821               	movf	setMemory_LoopSave@command,w
  7785  190A  3A01               	xorlw	1
  7786  190B  3000               	movlw	0
  7787  190C  1903               	skipnz
  7788  190D  3001               	movlw	1
  7789  190E  00A0               	movwf	??_setMemory_LoopSave
  7790  190F  0DA0               	rlf	??_setMemory_LoopSave,f
  7791  1910  0DA0               	rlf	??_setMemory_LoopSave,f
  7792  1911  0024               	movlb	4	; select bank4
  7793  1912  0844               	movf	(_Memory^(0+512)+36),w
  7794  1913  0020               	movlb	0	; select bank0
  7795  1914  0620               	xorwf	??_setMemory_LoopSave,w
  7796  1915  39FB               	andlw	-5
  7797  1916  0620               	xorwf	??_setMemory_LoopSave,w
  7798  1917  0024               	movlb	4	; select bank4
  7799  1918  00C4               	movwf	(_Memory^(0+512)+36)
  7800  1919  0008               	return
  7801  191A                     __end_of_setMemory_LoopSave:	
  7802                           
  7803                           	psect	text29
  7804  0BD0                     __ptext29:	
  7805 ;; *************** function _setControl_Lights_Table *****************
  7806 ;; Defined at:
  7807 ;;		line 286 in file "../src/RF_Control_B1.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;		None
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;		None
  7812 ;; Return value:  Size  Location     Type
  7813 ;;		None               void
  7814 ;; Registers used:
  7815 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;Total ram usage:        0 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    9
  7828 ;; This function calls:
  7829 ;;		_getDimmerLights_Status
  7830 ;;		_getMain_All_LightsStatus
  7831 ;;		_setCmd_Status
  7832 ;;		_setDimmerLights_SwOff
  7833 ;;		_setDimmerLights_SwOn
  7834 ;;		_setProductData
  7835 ;;		_setRFSW_AdjControl
  7836 ;;		_setRFSW_Control
  7837 ;;		_setRF_AdjControl
  7838 ;;		_setTxData
  7839 ;; This function is called by:
  7840 ;;		_getRxData
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           
  7845                           ;psect for function _setControl_Lights_Table
  7846  0BD0                     _setControl_Lights_Table:	
  7847                           
  7848                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7849                           
  7850                           ;incstack = 0
  7851                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7852  0BD0  2C51               	goto	l7629
  7853  0BD1                     l7601:	
  7854                           ;RF_Control_B1.c: 290: case 0x00:
  7855                           
  7856                           
  7857                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7858  0BD1  3198  20E1  318B   	fcall	_getMain_All_LightsStatus
  7859  0BD4  3A01               	xorlw	1
  7860  0BD5  1D03               	skipz
  7861  0BD6  2BFC               	goto	l7611
  7862                           
  7863                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7864  0BD7  3001               	movlw	1
  7865  0BD8  31A7  2787  318B   	fcall	_getDimmerLights_Status
  7866  0BDB  3A01               	xorlw	1
  7867  0BDC  1D03               	skipz
  7868  0BDD  2BE6               	goto	l2272
  7869                           
  7870                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7871  0BDE  3001               	movlw	1
  7872  0BDF  3188  2034  318B   	fcall	_setDimmerLights_SwOn
  7873                           
  7874                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7875  0BE2  3001               	movlw	1
  7876  0BE3  319F  274C  318B   	fcall	_setDimmerLights_SwOff
  7877  0BE6                     l2272:	
  7878                           
  7879                           ;RF_Control_B1.c: 297: }
  7880                           ;RF_Control_B1.c: 300: if (getDimmerLights_Status(2) == 1) {
  7881  0BE6  3002               	movlw	2
  7882  0BE7  31A7  2787  318B   	fcall	_getDimmerLights_Status
  7883  0BEA  3A01               	xorlw	1
  7884  0BEB  1D03               	skipz
  7885  0BEC  2BF5               	goto	l7609
  7886                           
  7887                           ;RF_Control_B1.c: 301: setDimmerLights_SwOn(2);
  7888  0BED  3002               	movlw	2
  7889  0BEE  3188  2034  318B   	fcall	_setDimmerLights_SwOn
  7890                           
  7891                           ;RF_Control_B1.c: 302: setDimmerLights_SwOff(2);
  7892  0BF1  3002               	movlw	2
  7893  0BF2  319F  274C  318B   	fcall	_setDimmerLights_SwOff
  7894  0BF5                     l7609:	
  7895                           
  7896                           ;RF_Control_B1.c: 303: }
  7897                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7898  0BF5  0020               	movlb	0	; select bank0
  7899  0BF6  01A0               	clrf	setCmd_Status@cmd
  7900  0BF7  0AA0               	incf	setCmd_Status@cmd,f
  7901  0BF8  3001               	movlw	1
  7902  0BF9  319A  2237         	fcall	_setCmd_Status
  7903                           
  7904                           ;RF_Control_B1.c: 313: } else {
  7905  0BFB  0008               	return
  7906  0BFC                     l7611:	
  7907                           
  7908                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7909  0BFC  0020               	movlb	0	; select bank0
  7910  0BFD  01E2               	clrf	setProductData@value
  7911  0BFE  3009               	movlw	9
  7912  0BFF  31A6  26FD  318B   	fcall	_setProductData
  7913                           
  7914                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7915  0C02  0020               	movlb	0	; select bank0
  7916  0C03  01E2               	clrf	setProductData@value
  7917  0C04  300B               	movlw	11
  7918  0C05  31A6  26FD  318B   	fcall	_setProductData
  7919                           
  7920                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7921  0C08  0020               	movlb	0	; select bank0
  7922  0C09  01E2               	clrf	setProductData@value
  7923  0C0A  300F               	movlw	15
  7924  0C0B  31A6  26FD  318B   	fcall	_setProductData
  7925                           
  7926                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7927  0C0E  0020               	movlb	0	; select bank0
  7928  0C0F  01E2               	clrf	setProductData@value
  7929  0C10  3011               	movlw	17
  7930  0C11  31A6  26FD  318B   	fcall	_setProductData
  7931                           
  7932                           ;RF_Control_B1.c: 318: setTxData();
  7933  0C14  318E  267E         	fcall	_setTxData
  7934                           
  7935                           ;RF_Control_B1.c: 319: }
  7936                           ;RF_Control_B1.c: 320: break;
  7937  0C16  0008               	return
  7938  0C17                     l7613:	
  7939                           ;RF_Control_B1.c: 322: case 0x20:
  7940                           
  7941                           
  7942                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7943  0C17  0020               	movlb	0	; select bank0
  7944  0C18  01E2               	clrf	setProductData@value
  7945  0C19  3009               	movlw	9
  7946  0C1A  31A6  26FD  318B   	fcall	_setProductData
  7947                           
  7948                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7949  0C1D  0020               	movlb	0	; select bank0
  7950  0C1E  01E2               	clrf	setProductData@value
  7951  0C1F  300B               	movlw	11
  7952  0C20  31A6  26FD  318B   	fcall	_setProductData
  7953                           
  7954                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7955  0C23  0021               	movlb	1	; select bank1
  7956  0C24  086D               	movf	_product^(0+128),w
  7957  0C25  0086               	movwf	6
  7958  0C26  3002               	movlw	2	; select bank4/5
  7959  0C27  0087               	movwf	7
  7960  0C28  3002               	movlw	2	; select bank4/5
  7961  0C29  3F4F               	moviw [15]fsr1
  7962  0C2A  0020               	movlb	0	; select bank0
  7963  0C2B  00E2               	movwf	setProductData@value
  7964  0C2C  300F               	movlw	15
  7965  0C2D  31A6  26FD  318B   	fcall	_setProductData
  7966                           
  7967                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7968  0C30  0020               	movlb	0	; select bank0
  7969  0C31  01E2               	clrf	setProductData@value
  7970  0C32  3011               	movlw	17
  7971  0C33  31A6  26FD  318B   	fcall	_setProductData
  7972                           
  7973                           ;RF_Control_B1.c: 327: setTxData();
  7974  0C36  318E  267E         	fcall	_setTxData
  7975                           
  7976                           ;RF_Control_B1.c: 328: break;
  7977  0C38  0008               	return
  7978  0C39                     l7615:	
  7979                           ;RF_Control_B1.c: 331: case 0x01:
  7980                           
  7981                           
  7982                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7983  0C39  3001               	movlw	1
  7984  0C3A  3190  2095         	fcall	_setRFSW_Control
  7985                           
  7986                           ;RF_Control_B1.c: 333: break;
  7987  0C3C  0008               	return
  7988  0C3D                     l7617:	
  7989                           ;RF_Control_B1.c: 337: case 0x11:
  7990                           
  7991                           
  7992                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7993  0C3D  3001               	movlw	1
  7994  0C3E  3189  212A         	fcall	_setRFSW_AdjControl
  7995                           
  7996                           ;RF_Control_B1.c: 339: break;
  7997  0C40  0008               	return
  7998  0C41                     l7619:	
  7999                           ;RF_Control_B1.c: 341: case 0xd1:
  8000                           
  8001                           
  8002                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  8003  0C41  3001               	movlw	1
  8004  0C42  319F  2712         	fcall	_setRF_AdjControl
  8005                           
  8006                           ;RF_Control_B1.c: 343: break;
  8007  0C44  0008               	return
  8008  0C45                     l7621:	
  8009                           ;RF_Control_B1.c: 348: case 0x02:
  8010                           
  8011                           
  8012                           ;RF_Control_B1.c: 349: setRFSW_Control(2);
  8013  0C45  3002               	movlw	2
  8014  0C46  3190  2095         	fcall	_setRFSW_Control
  8015                           
  8016                           ;RF_Control_B1.c: 350: break;
  8017  0C48  0008               	return
  8018  0C49                     l7623:	
  8019                           ;RF_Control_B1.c: 353: case 0x21:
  8020                           
  8021                           
  8022                           ;RF_Control_B1.c: 354: setRFSW_AdjControl(2);
  8023  0C49  3002               	movlw	2
  8024  0C4A  3189  212A         	fcall	_setRFSW_AdjControl
  8025                           
  8026                           ;RF_Control_B1.c: 355: break;
  8027  0C4C  0008               	return
  8028  0C4D                     l7625:	
  8029                           ;RF_Control_B1.c: 357: case 0xd2:
  8030                           
  8031                           
  8032                           ;RF_Control_B1.c: 358: setRF_AdjControl(2);
  8033  0C4D  3002               	movlw	2
  8034  0C4E  319F  2712         	fcall	_setRF_AdjControl
  8035                           
  8036                           ;RF_Control_B1.c: 376: }
  8037                           
  8038                           ;RF_Control_B1.c: 359: break;
  8039  0C50  0008               	return
  8040  0C51                     l7629:	
  8041  0C51  0023               	movlb	3	; select bank3
  8042  0C52  082F               	movf	(_RF_Data^(0+384)+15),w
  8043                           
  8044                           ; Switch size 1, requested type "space"
  8045                           ; Number of cases is 8, Range of values is 0 to 210
  8046                           ; switch strategies available:
  8047                           ; Name         Instructions Cycles
  8048                           ; simple_byte           25    13 (average)
  8049                           ; jumptable            260     6 (fixed)
  8050                           ;	Chosen strategy is simple_byte
  8051  0C53  3A00               	xorlw	0	; case 0
  8052  0C54  1903               	skipnz
  8053  0C55  2BD1               	goto	l7601
  8054  0C56  3A01               	xorlw	1	; case 1
  8055  0C57  1903               	skipnz
  8056  0C58  2C39               	goto	l7615
  8057  0C59  3A03               	xorlw	3	; case 2
  8058  0C5A  1903               	skipnz
  8059  0C5B  2C45               	goto	l7621
  8060  0C5C  3A13               	xorlw	19	; case 17
  8061  0C5D  1903               	skipnz
  8062  0C5E  2C3D               	goto	l7617
  8063  0C5F  3A31               	xorlw	49	; case 32
  8064  0C60  1903               	skipnz
  8065  0C61  2C17               	goto	l7613
  8066  0C62  3A01               	xorlw	1	; case 33
  8067  0C63  1903               	skipnz
  8068  0C64  2C49               	goto	l7623
  8069  0C65  3AF0               	xorlw	240	; case 209
  8070  0C66  1903               	skipnz
  8071  0C67  2C41               	goto	l7619
  8072  0C68  3A03               	xorlw	3	; case 210
  8073  0C69  1903               	skipnz
  8074  0C6A  2C4D               	goto	l7625
  8075  0C6B  2C6C               	goto	l2283
  8076  0C6C                     l2283:	
  8077  0C6C  0008               	return
  8078  0C6D                     __end_of_setControl_Lights_Table:	
  8079                           
  8080                           	psect	text30
  8081  1F12                     __ptext30:	
  8082 ;; *************** function _setRF_AdjControl *****************
  8083 ;; Defined at:
  8084 ;;		line 447 in file "../src/RF_Control_B1.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;  sw              1    wreg     unsigned char 
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;  sw              1    7[BANK0 ] unsigned char 
  8089 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
  8090 ;;  status          1    5[BANK0 ] unsigned char 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;		None               void
  8093 ;; Registers used:
  8094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 0/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;Total ram usage:        4 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    7
  8107 ;; This function calls:
  8108 ;;		_DimmerLights_SelectPointer
  8109 ;;		_getDimmerIntr_Dimming_Sw
  8110 ;;		_getDimmerLights_Status
  8111 ;; This function is called by:
  8112 ;;		_setControl_Lights_Table
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           
  8117                           ;psect for function _setRF_AdjControl
  8118  1F12                     _setRF_AdjControl:	
  8119                           
  8120                           ;incstack = 0
  8121                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8122                           ;setRF_AdjControl@sw stored from wreg
  8123  1F12  0020               	movlb	0	; select bank0
  8124  1F13  00A7               	movwf	setRF_AdjControl@sw
  8125                           
  8126                           ;RF_Control_B1.c: 448: char status = 0;
  8127  1F14  01A5               	clrf	setRF_AdjControl@status
  8128                           
  8129                           ;RF_Control_B1.c: 450: status = getDimmerLights_Status(sw);
  8130  1F15  0827               	movf	setRF_AdjControl@sw,w
  8131  1F16  31A7  2787  319F   	fcall	_getDimmerLights_Status
  8132  1F19  0020               	movlb	0	; select bank0
  8133  1F1A  00A4               	movwf	??_setRF_AdjControl
  8134  1F1B  0824               	movf	??_setRF_AdjControl,w
  8135  1F1C  00A5               	movwf	setRF_AdjControl@status
  8136                           
  8137                           ;RF_Control_B1.c: 451: char dimmingStatus = 0;
  8138  1F1D  01A6               	clrf	setRF_AdjControl@dimmingStatus
  8139                           
  8140                           ;RF_Control_B1.c: 452: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  8141  1F1E  0827               	movf	setRF_AdjControl@sw,w
  8142  1F1F  319A  221E  319F   	fcall	_getDimmerIntr_Dimming_Sw
  8143  1F22  0020               	movlb	0	; select bank0
  8144  1F23  00A4               	movwf	??_setRF_AdjControl
  8145  1F24  0824               	movf	??_setRF_AdjControl,w
  8146  1F25  00A6               	movwf	setRF_AdjControl@dimmingStatus
  8147                           
  8148                           ;RF_Control_B1.c: 454: if (status == 1) {
  8149  1F26  0825               	movf	setRF_AdjControl@status,w
  8150  1F27  3A01               	xorlw	1
  8151  1F28  1D03               	skipz
  8152  1F29  0008               	return
  8153                           
  8154                           ;RF_Control_B1.c: 455: if (dimmingStatus == 0) {
  8155  1F2A  08A6               	movf	setRF_AdjControl@dimmingStatus,f
  8156  1F2B  1D03               	skipz
  8157  1F2C  2F3C               	goto	l7329
  8158                           
  8159                           ;RF_Control_B1.c: 456: DimmerLights_SelectPointer(sw);
  8160  1F2D  0827               	movf	setRF_AdjControl@sw,w
  8161  1F2E  3199  21C2         	fcall	_DimmerLights_SelectPointer
  8162                           
  8163                           ;RF_Control_B1.c: 457: DimmerLights->DimmingTrigger = 1;
  8164  1F30  0021               	movlb	1	; select bank1
  8165  1F31  085A               	movf	_DimmerLights^(0+128),w
  8166  1F32  0086               	movwf	6
  8167  1F33  3001               	movlw	1	; select bank2/3
  8168  1F34  0087               	movwf	7
  8169  1F35  1601               	bsf	1,4
  8170                           
  8171                           ;RF_Control_B1.c: 458: DimmerLights->DimmingSwitch = 1;
  8172  1F36  085A               	movf	_DimmerLights^(0+128),w
  8173  1F37  0086               	movwf	6
  8174  1F38  3001               	movlw	1	; select bank2/3
  8175  1F39  0087               	movwf	7
  8176  1F3A  1681               	bsf	1,5
  8177                           
  8178                           ;RF_Control_B1.c: 460: } else {
  8179  1F3B  0008               	return
  8180  1F3C                     l7329:	
  8181                           
  8182                           ;RF_Control_B1.c: 461: DimmerLights_SelectPointer(sw);
  8183  1F3C  0020               	movlb	0	; select bank0
  8184  1F3D  0827               	movf	setRF_AdjControl@sw,w
  8185  1F3E  3199  21C2         	fcall	_DimmerLights_SelectPointer
  8186                           
  8187                           ;RF_Control_B1.c: 462: DimmerLights->DimmingTrigger = 1;
  8188  1F40  0021               	movlb	1	; select bank1
  8189  1F41  085A               	movf	_DimmerLights^(0+128),w
  8190  1F42  0086               	movwf	6
  8191  1F43  3001               	movlw	1	; select bank2/3
  8192  1F44  0087               	movwf	7
  8193  1F45  1601               	bsf	1,4
  8194                           
  8195                           ;RF_Control_B1.c: 463: DimmerLights->DimmingSwitch = 0;
  8196  1F46  085A               	movf	_DimmerLights^(0+128),w
  8197  1F47  0086               	movwf	6
  8198  1F48  3001               	movlw	1	; select bank2/3
  8199  1F49  0087               	movwf	7
  8200  1F4A  1281               	bcf	1,5
  8201  1F4B  0008               	return
  8202  1F4C                     __end_of_setRF_AdjControl:	
  8203                           
  8204                           	psect	text31
  8205  1095                     __ptext31:	
  8206 ;; *************** function _setRFSW_Control *****************
  8207 ;; Defined at:
  8208 ;;		line 384 in file "../src/RF_Control_B1.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  sw              1    wreg     unsigned char 
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;  sw              1   79[BANK0 ] unsigned char 
  8213 ;;  status          1   78[BANK0 ] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;		None               void
  8216 ;; Registers used:
  8217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;Total ram usage:        3 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    8
  8230 ;; This function calls:
  8231 ;;		_getDimmerLights_Status
  8232 ;;		_setBuz
  8233 ;;		_setDelayOff_GO
  8234 ;;		_setDimmerLights_SwOff
  8235 ;;		_setDimmerLights_SwOn
  8236 ;;		_setRF_DimmerLights
  8237 ;;		_setTxData
  8238 ;; This function is called by:
  8239 ;;		_setControl_Lights_Table
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           
  8244                           ;psect for function _setRFSW_Control
  8245  1095                     _setRFSW_Control:	
  8246                           
  8247                           ;incstack = 0
  8248                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8249                           ;setRFSW_Control@sw stored from wreg
  8250  1095  0020               	movlb	0	; select bank0
  8251  1096  00EF               	movwf	setRFSW_Control@sw
  8252                           
  8253                           ;RF_Control_B1.c: 385: char status = 0;
  8254  1097  01EE               	clrf	setRFSW_Control@status
  8255                           
  8256                           ;RF_Control_B1.c: 387: if (RF_Data[16] == 0x80) {
  8257  1098  0023               	movlb	3	; select bank3
  8258  1099  0830               	movf	(_RF_Data^(0+384)+16),w
  8259  109A  3A80               	xorlw	128
  8260  109B  1D03               	skipz
  8261  109C  28C8               	goto	l7281
  8262                           
  8263                           ;RF_Control_B1.c: 388: setDelayOff_GO(sw, 1, RF_Data[17]);
  8264  109D  0020               	movlb	0	; select bank0
  8265  109E  01E5               	clrf	setDelayOff_GO@command
  8266  109F  0AE5               	incf	setDelayOff_GO@command,f
  8267  10A0  0023               	movlb	3	; select bank3
  8268  10A1  0831               	movf	(_RF_Data^(0+384)+17),w
  8269  10A2  0020               	movlb	0	; select bank0
  8270  10A3  00ED               	movwf	??_setRFSW_Control
  8271  10A4  086D               	movf	??_setRFSW_Control,w
  8272  10A5  00E6               	movwf	setDelayOff_GO@value
  8273  10A6  086F               	movf	setRFSW_Control@sw,w
  8274  10A7  318A  22B7  3190   	fcall	_setDelayOff_GO
  8275                           
  8276                           ;RF_Control_B1.c: 389: if (getDimmerLights_Status(sw) == 1) {
  8277  10AA  0020               	movlb	0	; select bank0
  8278  10AB  086F               	movf	setRFSW_Control@sw,w
  8279  10AC  31A7  2787  3190   	fcall	_getDimmerLights_Status
  8280  10AF  3A01               	xorlw	1
  8281  10B0  1D03               	skipz
  8282  10B1  28C8               	goto	l7281
  8283                           
  8284                           ;RF_Control_B1.c: 390: setBuz(1, 100);
  8285  10B2  3064               	movlw	100
  8286  10B3  0020               	movlb	0	; select bank0
  8287  10B4  00A9               	movwf	setBuz@time
  8288  10B5  3000               	movlw	0
  8289  10B6  00AA               	movwf	setBuz@time+1
  8290  10B7  3001               	movlw	1
  8291  10B8  3193  2335  3190   	fcall	_setBuz
  8292                           
  8293                           ;RF_Control_B1.c: 391: setRF_DimmerLights(sw, 1);
  8294  10BB  0020               	movlb	0	; select bank0
  8295  10BC  01E5               	clrf	setRF_DimmerLights@on
  8296  10BD  0AE5               	incf	setRF_DimmerLights@on,f
  8297  10BE  086F               	movf	setRFSW_Control@sw,w
  8298  10BF  3195  2578  3190   	fcall	_setRF_DimmerLights
  8299                           
  8300                           ;RF_Control_B1.c: 392: setTxData();
  8301  10C2  318E  267E  3190   	fcall	_setTxData
  8302                           
  8303                           ;RF_Control_B1.c: 393: status = 1;
  8304  10C5  0020               	movlb	0	; select bank0
  8305  10C6  01EE               	clrf	setRFSW_Control@status
  8306  10C7  0AEE               	incf	setRFSW_Control@status,f
  8307  10C8                     l7281:	
  8308                           
  8309                           ;RF_Control_B1.c: 394: }
  8310                           ;RF_Control_B1.c: 395: }
  8311                           ;RF_Control_B1.c: 397: if (status == 0) {
  8312  10C8  0020               	movlb	0	; select bank0
  8313  10C9  08EE               	movf	setRFSW_Control@status,f
  8314  10CA  1D03               	skipz
  8315  10CB  0008               	return
  8316                           
  8317                           ;RF_Control_B1.c: 399: setDimmerLights_SwOn(sw);
  8318  10CC  086F               	movf	setRFSW_Control@sw,w
  8319  10CD  3188  2034  3190   	fcall	_setDimmerLights_SwOn
  8320                           
  8321                           ;RF_Control_B1.c: 400: setDimmerLights_SwOff(sw);
  8322  10D0  0020               	movlb	0	; select bank0
  8323  10D1  086F               	movf	setRFSW_Control@sw,w
  8324  10D2  319F  274C         	fcall	_setDimmerLights_SwOff
  8325  10D4  0008               	return
  8326  10D5                     __end_of_setRFSW_Control:	
  8327                           
  8328                           	psect	text32
  8329  092A                     __ptext32:	
  8330 ;; *************** function _setRFSW_AdjControl *****************
  8331 ;; Defined at:
  8332 ;;		line 406 in file "../src/RF_Control_B1.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  sw              1    wreg     unsigned char 
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  sw              1   72[BANK0 ] unsigned char 
  8337 ;;  status          1   71[BANK0 ] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;		None               void
  8340 ;; Registers used:
  8341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;Total ram usage:        4 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    8
  8354 ;; This function calls:
  8355 ;;		_getDimmerLights_PercentToValue
  8356 ;;		_getDimmerLights_Status
  8357 ;;		_setDimmerIntr_Dimming_RF
  8358 ;;		_setDimmerIntr_MaxmumValue
  8359 ;;		_setDimmerLights_DimmingRun
  8360 ;;		_setDimmerLights_SwOff
  8361 ;;		_setDimmerLights_SwOn
  8362 ;;		_setMemory_Modify
  8363 ;;		_setProductData
  8364 ;;		_setTxData
  8365 ;; This function is called by:
  8366 ;;		_setControl_Lights_Table
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           
  8371                           ;psect for function _setRFSW_AdjControl
  8372  092A                     _setRFSW_AdjControl:	
  8373                           
  8374                           ;incstack = 0
  8375                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8376                           ;setRFSW_AdjControl@sw stored from wreg
  8377  092A  0020               	movlb	0	; select bank0
  8378  092B  00E8               	movwf	setRFSW_AdjControl@sw
  8379                           
  8380                           ;RF_Control_B1.c: 407: char status = 0;
  8381  092C  01E7               	clrf	setRFSW_AdjControl@status
  8382                           
  8383                           ;RF_Control_B1.c: 409: status = getDimmerLights_Status(sw);
  8384  092D  0868               	movf	setRFSW_AdjControl@sw,w
  8385  092E  31A7  2787  3189   	fcall	_getDimmerLights_Status
  8386  0931  0020               	movlb	0	; select bank0
  8387  0932  00E5               	movwf	??_setRFSW_AdjControl
  8388  0933  0865               	movf	??_setRFSW_AdjControl,w
  8389  0934  00E7               	movwf	setRFSW_AdjControl@status
  8390                           
  8391                           ;RF_Control_B1.c: 411: if (RF_Data[9] > 0x64) {
  8392  0935  3065               	movlw	101
  8393  0936  0023               	movlb	3	; select bank3
  8394  0937  0229               	subwf	(_RF_Data^(0+384)+9),w
  8395  0938  1C03               	skipc
  8396  0939  2941               	goto	l7293
  8397                           
  8398                           ;RF_Control_B1.c: 412: RF_Data[9] = 0x64;
  8399  093A  3064               	movlw	100
  8400  093B  0020               	movlb	0	; select bank0
  8401  093C  00E5               	movwf	??_setRFSW_AdjControl
  8402  093D  0865               	movf	??_setRFSW_AdjControl,w
  8403  093E  0023               	movlb	3	; select bank3
  8404  093F  00A9               	movwf	(_RF_Data^(0+384)+9)
  8405                           
  8406                           ;RF_Control_B1.c: 413: } else if (RF_Data[9] < 0x01) {
  8407  0940  2946               	goto	l7297
  8408  0941                     l7293:	
  8409  0941  08A9               	movf	(_RF_Data^(0+384)+9),f
  8410  0942  1D03               	skipz
  8411  0943  2946               	goto	l7297
  8412                           
  8413                           ;RF_Control_B1.c: 414: RF_Data[9] = 0x01;
  8414  0944  01A9               	clrf	(_RF_Data^(0+384)+9)
  8415  0945  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8416  0946                     l7297:	
  8417                           
  8418                           ;RF_Control_B1.c: 415: }
  8419                           ;RF_Control_B1.c: 416: setProductData(9, RF_Data[9]);
  8420  0946  0829               	movf	(_RF_Data^(0+384)+9),w
  8421  0947  0020               	movlb	0	; select bank0
  8422  0948  00E5               	movwf	??_setRFSW_AdjControl
  8423  0949  0865               	movf	??_setRFSW_AdjControl,w
  8424  094A  00E2               	movwf	setProductData@value
  8425  094B  3009               	movlw	9
  8426  094C  31A6  26FD  3189   	fcall	_setProductData
  8427                           
  8428                           ;RF_Control_B1.c: 417: setProductData(11, sw);
  8429  094F  0020               	movlb	0	; select bank0
  8430  0950  0868               	movf	setRFSW_AdjControl@sw,w
  8431  0951  00E5               	movwf	??_setRFSW_AdjControl
  8432  0952  0865               	movf	??_setRFSW_AdjControl,w
  8433  0953  00E2               	movwf	setProductData@value
  8434  0954  300B               	movlw	11
  8435  0955  31A6  26FD  3189   	fcall	_setProductData
  8436                           
  8437                           ;RF_Control_B1.c: 418: setProductData(17, product->Data[26 + sw]);
  8438  0958  0020               	movlb	0	; select bank0
  8439  0959  0868               	movf	setRFSW_AdjControl@sw,w
  8440  095A  3E1A               	addlw	26
  8441  095B  0021               	movlb	1	; select bank1
  8442  095C  076D               	addwf	_product^(0+128),w
  8443  095D  0020               	movlb	0	; select bank0
  8444  095E  00E5               	movwf	??_setRFSW_AdjControl
  8445  095F  0865               	movf	??_setRFSW_AdjControl,w
  8446  0960  0086               	movwf	6
  8447  0961  3002               	movlw	2	; select bank4/5
  8448  0962  0087               	movwf	7
  8449  0963  0801               	movf	1,w
  8450  0964  00E6               	movwf	??_setRFSW_AdjControl+1
  8451  0965  0866               	movf	??_setRFSW_AdjControl+1,w
  8452  0966  00E2               	movwf	setProductData@value
  8453  0967  3011               	movlw	17
  8454  0968  31A6  26FD  3189   	fcall	_setProductData
  8455                           
  8456                           ;RF_Control_B1.c: 419: setProductData((20 + sw), RF_Data[9]);
  8457  096B  0023               	movlb	3	; select bank3
  8458  096C  0829               	movf	(_RF_Data^(0+384)+9),w
  8459  096D  0020               	movlb	0	; select bank0
  8460  096E  00E5               	movwf	??_setRFSW_AdjControl
  8461  096F  0865               	movf	??_setRFSW_AdjControl,w
  8462  0970  00E2               	movwf	setProductData@value
  8463  0971  0868               	movf	setRFSW_AdjControl@sw,w
  8464  0972  3E14               	addlw	20
  8465  0973  31A6  26FD  3189   	fcall	_setProductData
  8466                           
  8467                           ;RF_Control_B1.c: 427: setMemory_Modify(1);
  8468  0976  3001               	movlw	1
  8469  0977  3198  20BB  3189   	fcall	_setMemory_Modify
  8470                           
  8471                           ;RF_Control_B1.c: 431: if (status == 1) {
  8472  097A  0020               	movlb	0	; select bank0
  8473  097B  0867               	movf	setRFSW_AdjControl@status,w
  8474  097C  3A01               	xorlw	1
  8475  097D  1D03               	skipz
  8476  097E  2996               	goto	l7307
  8477                           
  8478                           ;RF_Control_B1.c: 432: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8479  097F  0023               	movlb	3	; select bank3
  8480  0980  0829               	movf	(_RF_Data^(0+384)+9),w
  8481  0981  3194  24AE  3189   	fcall	_getDimmerLights_PercentToValue
  8482  0984  0020               	movlb	0	; select bank0
  8483  0985  00E5               	movwf	??_setRFSW_AdjControl
  8484  0986  0865               	movf	??_setRFSW_AdjControl,w
  8485  0987  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8486  0988  0868               	movf	setRFSW_AdjControl@sw,w
  8487  0989  3199  21D9  3189   	fcall	_setDimmerIntr_MaxmumValue
  8488                           
  8489                           ;RF_Control_B1.c: 433: setDimmerIntr_Dimming_RF(sw, 1);
  8490  098C  0020               	movlb	0	; select bank0
  8491  098D  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8492  098E  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8493  098F  0868               	movf	setRFSW_AdjControl@sw,w
  8494  0990  319D  257B  3189   	fcall	_setDimmerIntr_Dimming_RF
  8495                           
  8496                           ;RF_Control_B1.c: 434: setTxData();
  8497  0993  318E  267E         	fcall	_setTxData
  8498                           
  8499                           ;RF_Control_B1.c: 436: } else if (status == 0) {
  8500  0995  0008               	return
  8501  0996                     l7307:	
  8502  0996  0020               	movlb	0	; select bank0
  8503  0997  08E7               	movf	setRFSW_AdjControl@status,f
  8504  0998  1D03               	skipz
  8505  0999  0008               	return
  8506                           
  8507                           ;RF_Control_B1.c: 440: setDimmerLights_DimmingRun(sw, 1);
  8508  099A  01A2               	clrf	setDimmerLights_DimmingRun@command
  8509  099B  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8510  099C  0868               	movf	setRFSW_AdjControl@sw,w
  8511  099D  319A  229E  3189   	fcall	_setDimmerLights_DimmingRun
  8512                           
  8513                           ;RF_Control_B1.c: 441: setDimmerLights_SwOn(sw);
  8514  09A0  0020               	movlb	0	; select bank0
  8515  09A1  0868               	movf	setRFSW_AdjControl@sw,w
  8516  09A2  3188  2034  3189   	fcall	_setDimmerLights_SwOn
  8517                           
  8518                           ;RF_Control_B1.c: 442: setDimmerLights_SwOff(sw);
  8519  09A5  0020               	movlb	0	; select bank0
  8520  09A6  0868               	movf	setRFSW_AdjControl@sw,w
  8521  09A7  319F  274C         	fcall	_setDimmerLights_SwOff
  8522  09A9  0008               	return
  8523  09AA                     __end_of_setRFSW_AdjControl:	
  8524                           
  8525                           	psect	text33
  8526  1A9E                     __ptext33:	
  8527 ;; *************** function _setDimmerLights_DimmingRun *****************
  8528 ;; Defined at:
  8529 ;;		line 1208 in file "../src/Dimmer_B1.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  lights          1    wreg     unsigned char 
  8532 ;;  command         1    2[BANK0 ] unsigned char 
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  lights          1    4[BANK0 ] unsigned char 
  8535 ;; Return value:  Size  Location     Type
  8536 ;;		None               void
  8537 ;; Registers used:
  8538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8539 ;; Tracked objects:
  8540 ;;		On entry : 0/0
  8541 ;;		On exit  : 0/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8544 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;Total ram usage:        3 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:    6
  8551 ;; This function calls:
  8552 ;;		_DimmerLights_SelectPointer
  8553 ;; This function is called by:
  8554 ;;		_setRFSW_AdjControl
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           
  8559                           ;psect for function _setDimmerLights_DimmingRun
  8560  1A9E                     _setDimmerLights_DimmingRun:	
  8561                           
  8562                           ;incstack = 0
  8563                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8564                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8565  1A9E  0020               	movlb	0	; select bank0
  8566  1A9F  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8567                           
  8568                           ;Dimmer_B1.c: 1209: DimmerLights_SelectPointer(lights);
  8569  1AA0  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8570  1AA1  3199  21C2         	fcall	_DimmerLights_SelectPointer
  8571                           
  8572                           ;Dimmer_B1.c: 1210: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8573  1AA3  0020               	movlb	0	; select bank0
  8574  1AA4  0822               	movf	setDimmerLights_DimmingRun@command,w
  8575  1AA5  3A01               	xorlw	1
  8576  1AA6  3000               	movlw	0
  8577  1AA7  1903               	skipnz
  8578  1AA8  3001               	movlw	1
  8579  1AA9  00A3               	movwf	??_setDimmerLights_DimmingRun
  8580  1AAA  0021               	movlb	1	; select bank1
  8581  1AAB  0A5A               	incf	_DimmerLights^(0+128),w
  8582  1AAC  0086               	movwf	6
  8583  1AAD  3001               	movlw	1	; select bank2/3
  8584  1AAE  0087               	movwf	7
  8585  1AAF  0020               	movlb	0	; select bank0
  8586  1AB0  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8587  1AB1  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8588  1AB2  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8589  1AB3  0801               	movf	1,w
  8590  1AB4  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8591  1AB5  39BF               	andlw	-65
  8592  1AB6  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8593  1AB7  0081               	movwf	1
  8594  1AB8  0008               	return
  8595  1AB9                     __end_of_setDimmerLights_DimmingRun:	
  8596                           
  8597                           	psect	text34
  8598  27CB                     __ptext34:	
  8599 ;; *************** function _getRF_KeyStatus *****************
  8600 ;; Defined at:
  8601 ;;		line 166 in file "../src/RF_Control_B1.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;		None
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;  key             1    1[BANK0 ] unsigned char 
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  1    wreg      unsigned char 
  8608 ;; Registers used:
  8609 ;;		wreg, status,2
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;Total ram usage:        3 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    5
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		_setRF_Main
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           
  8630                           ;psect for function _getRF_KeyStatus
  8631  27CB                     _getRF_KeyStatus:	
  8632                           
  8633                           ;RF_Control_B1.c: 167: char key = 0;
  8634                           
  8635                           ;incstack = 0
  8636                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8637  27CB  0020               	movlb	0	; select bank0
  8638  27CC  01A1               	clrf	getRF_KeyStatus@key
  8639                           
  8640                           ;RF_Control_B1.c: 173: key = (RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  8641  27CD  01A2               	clrf	_getRF_KeyStatus$5318
  8642  27CE  0AA2               	incf	_getRF_KeyStatus$5318,f
  8643  27CF  1C0C               	btfss	12,0	;volatile
  8644  27D0  188D               	btfsc	13,1	;volatile
  8645  27D1  2FD6               	goto	l8051
  8646  27D2  1F0C               	btfss	12,6	;volatile
  8647  27D3  1A0C               	btfsc	12,4	;volatile
  8648  27D4  2FD6               	goto	l8051
  8649  27D5  01A2               	clrf	_getRF_KeyStatus$5318
  8650  27D6                     l8051:	
  8651  27D6  0822               	movf	_getRF_KeyStatus$5318,w
  8652  27D7  00A0               	movwf	??_getRF_KeyStatus
  8653  27D8  0820               	movf	??_getRF_KeyStatus,w
  8654  27D9  00A1               	movwf	getRF_KeyStatus@key
  8655                           
  8656                           ;RF_Control_B1.c: 179: return key;
  8657  27DA  0821               	movf	getRF_KeyStatus@key,w
  8658  27DB  0008               	return
  8659  27DC                     __end_of_getRF_KeyStatus:	
  8660                           
  8661                           	psect	text35
  8662  27BA                     __ptext35:	
  8663 ;; *************** function _getBuz_GO *****************
  8664 ;; Defined at:
  8665 ;;		line 82 in file "../src/Buzzer_B1.c"
  8666 ;; Parameters:    Size  Location     Type
  8667 ;;		None
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;  i               2    4[BANK0 ] int 
  8670 ;; Return value:  Size  Location     Type
  8671 ;;                  2    0[BANK0 ] int 
  8672 ;; Registers used:
  8673 ;;		wreg, status,2, status,0
  8674 ;; Tracked objects:
  8675 ;;		On entry : 0/0
  8676 ;;		On exit  : 0/0
  8677 ;;		Unchanged: 0/0
  8678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8679 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8680 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;Total ram usage:        6 bytes
  8684 ;; Hardware stack levels used:    1
  8685 ;; Hardware stack levels required when called:    5
  8686 ;; This function calls:
  8687 ;;		Nothing
  8688 ;; This function is called by:
  8689 ;;		_setRF_Main
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           
  8694                           ;psect for function _getBuz_GO
  8695  27BA                     _getBuz_GO:	
  8696                           
  8697                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8698                           
  8699                           ;incstack = 0
  8700                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8701  27BA  0022               	movlb	2	; select bank2
  8702  27BB  0C20               	rrf	_Buz1^(0+256),w
  8703  27BC  3901               	andlw	1
  8704  27BD  0020               	movlb	0	; select bank0
  8705  27BE  00A2               	movwf	??_getBuz_GO
  8706  27BF  01A3               	clrf	??_getBuz_GO+1
  8707  27C0  0822               	movf	??_getBuz_GO,w
  8708  27C1  00A4               	movwf	getBuz_GO@i
  8709  27C2  0823               	movf	??_getBuz_GO+1,w
  8710  27C3  00A5               	movwf	getBuz_GO@i+1
  8711                           
  8712                           ;Buzzer_B1.c: 84: return i;
  8713  27C4  0825               	movf	getBuz_GO@i+1,w
  8714  27C5  01A1               	clrf	?_getBuz_GO+1
  8715  27C6  07A1               	addwf	?_getBuz_GO+1,f
  8716  27C7  0824               	movf	getBuz_GO@i,w
  8717  27C8  01A0               	clrf	?_getBuz_GO
  8718  27C9  07A0               	addwf	?_getBuz_GO,f
  8719  27CA  0008               	return
  8720  27CB                     __end_of_getBuz_GO:	
  8721                           
  8722                           	psect	text36
  8723  2778                     __ptext36:	
  8724 ;; *************** function _RF_RxDisable *****************
  8725 ;; Defined at:
  8726 ;;		line 154 in file "../src/RF_Control_B1.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;		None
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;		None
  8731 ;; Return value:  Size  Location     Type
  8732 ;;		None               void
  8733 ;; Registers used:
  8734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8735 ;; Tracked objects:
  8736 ;;		On entry : 0/0
  8737 ;;		On exit  : 0/0
  8738 ;;		Unchanged: 0/0
  8739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;Total ram usage:        0 bytes
  8745 ;; Hardware stack levels used:    1
  8746 ;; Hardware stack levels required when called:    7
  8747 ;; This function calls:
  8748 ;;		_CC2500_WriteCommand
  8749 ;; This function is called by:
  8750 ;;		_setRF_Main
  8751 ;; This function uses a non-reentrant model
  8752 ;;
  8753                           
  8754                           
  8755                           ;psect for function _RF_RxDisable
  8756  2778                     _RF_RxDisable:	
  8757                           
  8758                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8759                           
  8760                           ;incstack = 0
  8761                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8762  2778  0021               	movlb	1	; select bank1
  8763  2779  18A0               	btfsc	_RF1^(0+128),1
  8764  277A  2F7D               	goto	l2237
  8765  277B  1DA0               	btfss	_RF1^(0+128),3
  8766  277C  0008               	return
  8767  277D                     l2237:	
  8768                           
  8769                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8770  277D  11A0               	bcf	_RF1^(0+128),3
  8771                           
  8772                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8773  277E  10A0               	bcf	_RF1^(0+128),1
  8774                           
  8775                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8776  277F  3036               	movlw	54
  8777  2780  3190  2000  31A7   	fcall	_CC2500_WriteCommand
  8778                           
  8779                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8780  2783  303A               	movlw	58
  8781  2784  3190  2000         	fcall	_CC2500_WriteCommand
  8782  2786  0008               	return
  8783  2787                     __end_of_RF_RxDisable:	
  8784                           
  8785                           	psect	text37
  8786  16B3                     __ptext37:	
  8787 ;; *************** function _CC2500_TxData *****************
  8788 ;; Defined at:
  8789 ;;		line 32 in file "../src/CC2500_B1.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;		None
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8794 ;; Return value:  Size  Location     Type
  8795 ;;		None               void
  8796 ;; Registers used:
  8797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;Total ram usage:        2 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    7
  8810 ;; This function calls:
  8811 ;;		_CC2500_WriteByte
  8812 ;;		_CC2500_WriteCommand
  8813 ;;		_RF_Timeout_Counter
  8814 ;;		_setRF_TimeoutCleared
  8815 ;; This function is called by:
  8816 ;;		_setRF_Main
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           
  8821                           ;psect for function _CC2500_TxData
  8822  16B3                     _CC2500_TxData:	
  8823                           
  8824                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8825                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8829  16B3  3036               	movlw	54
  8830  16B4  3190  2000  3196   	fcall	_CC2500_WriteCommand
  8831                           
  8832                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8833  16B7  303B               	movlw	59
  8834  16B8  3190  2000  3196   	fcall	_CC2500_WriteCommand
  8835                           
  8836                           ;CC2500_B1.c: 38: RC4 = 0;
  8837  16BB  0020               	movlb	0	; select bank0
  8838  16BC  120E               	bcf	14,4	;volatile
  8839                           
  8840                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8841  16BD  307F               	movlw	127
  8842  16BE  00A4               	movwf	??_CC2500_TxData
  8843  16BF  0824               	movf	??_CC2500_TxData,w
  8844  16C0  0021               	movlb	1	; select bank1
  8845  16C1  00DF               	movwf	_SPI0Buffer^(0+128)
  8846                           
  8847                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8848  16C2  2EC6               	goto	l9891
  8849  16C3                     l9889:	
  8850                           
  8851                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8852  16C3  3199  2141  3196   	fcall	_RF_Timeout_Counter
  8853  16C6                     l9891:	
  8854  16C6  0020               	movlb	0	; select bank0
  8855  16C7  1D0E               	btfss	14,2	;volatile
  8856  16C8  2ECC               	goto	l9895
  8857  16C9  0021               	movlb	1	; select bank1
  8858  16CA  1F21               	btfss	(_RF1^(0+128)+1),6
  8859  16CB  2EC3               	goto	l9889
  8860  16CC                     l9895:	
  8861                           
  8862                           ;CC2500_B1.c: 42: };
  8863                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8864  16CC  31A6  264D  3196   	fcall	_setRF_TimeoutCleared
  8865                           
  8866                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8867  16CF  319A  2250  3196   	fcall	_CC2500_WriteByte
  8868                           
  8869                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8870  16D2  0021               	movlb	1	; select bank1
  8871  16D3  0861               	movf	_Tx_Length^(0+128),w
  8872  16D4  0020               	movlb	0	; select bank0
  8873  16D5  00A4               	movwf	??_CC2500_TxData
  8874  16D6  0824               	movf	??_CC2500_TxData,w
  8875  16D7  0021               	movlb	1	; select bank1
  8876  16D8  00DF               	movwf	_SPI0Buffer^(0+128)
  8877                           
  8878                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8879  16D9  319A  2250  3196   	fcall	_CC2500_WriteByte
  8880                           
  8881                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8882  16DC  0020               	movlb	0	; select bank0
  8883  16DD  01A5               	clrf	CC2500_TxData@loop_e
  8884  16DE                     l9909:	
  8885  16DE  0021               	movlb	1	; select bank1
  8886  16DF  0861               	movf	_Tx_Length^(0+128),w
  8887  16E0  0020               	movlb	0	; select bank0
  8888  16E1  0225               	subwf	CC2500_TxData@loop_e,w
  8889  16E2  1803               	btfsc	3,0
  8890  16E3  2EF7               	goto	l259
  8891                           
  8892                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8893  16E4  0825               	movf	CC2500_TxData@loop_e,w
  8894  16E5  3EA0               	addlw	_RF_Data& (0+255)
  8895  16E6  0086               	movwf	6
  8896  16E7  3001               	movlw	1	; select bank3/4
  8897  16E8  0087               	movwf	7
  8898  16E9  0801               	movf	1,w
  8899  16EA  00A4               	movwf	??_CC2500_TxData
  8900  16EB  0824               	movf	??_CC2500_TxData,w
  8901  16EC  0021               	movlb	1	; select bank1
  8902  16ED  00DF               	movwf	_SPI0Buffer^(0+128)
  8903                           
  8904                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8905  16EE  319A  2250  3196   	fcall	_CC2500_WriteByte
  8906  16F1  3001               	movlw	1
  8907  16F2  0020               	movlb	0	; select bank0
  8908  16F3  00A4               	movwf	??_CC2500_TxData
  8909  16F4  0824               	movf	??_CC2500_TxData,w
  8910  16F5  07A5               	addwf	CC2500_TxData@loop_e,f
  8911  16F6  2EDE               	goto	l9909
  8912  16F7                     l259:	
  8913                           
  8914                           ;CC2500_B1.c: 51: }
  8915                           ;CC2500_B1.c: 52: RC4 = 1;
  8916  16F7  160E               	bsf	14,4	;volatile
  8917                           
  8918                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8919  16F8  3035               	movlw	53
  8920  16F9  3190  2000  3196   	fcall	_CC2500_WriteCommand
  8921                           
  8922                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8923  16FC  2F00               	goto	l9915
  8924  16FD                     l9913:	
  8925                           
  8926                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8927  16FD  3199  2141  3196   	fcall	_RF_Timeout_Counter
  8928  1700                     l9915:	
  8929  1700  0020               	movlb	0	; select bank0
  8930  1701  180D               	btfsc	13,0	;volatile
  8931  1702  2F06               	goto	l9919
  8932  1703  0021               	movlb	1	; select bank1
  8933  1704  1F21               	btfss	(_RF1^(0+128)+1),6
  8934  1705  2EFD               	goto	l9913
  8935  1706                     l9919:	
  8936                           
  8937                           ;CC2500_B1.c: 56: };
  8938                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8939  1706  31A6  264D  3196   	fcall	_setRF_TimeoutCleared
  8940                           
  8941                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8942  1709  2F0D               	goto	l9923
  8943  170A                     l9921:	
  8944                           
  8945                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8946  170A  3199  2141  3196   	fcall	_RF_Timeout_Counter
  8947  170D                     l9923:	
  8948  170D  0020               	movlb	0	; select bank0
  8949  170E  1C0D               	btfss	13,0	;volatile
  8950  170F  2F13               	goto	l9927
  8951  1710  0021               	movlb	1	; select bank1
  8952  1711  1F21               	btfss	(_RF1^(0+128)+1),6
  8953  1712  2F0A               	goto	l9921
  8954  1713                     l9927:	
  8955                           
  8956                           ;CC2500_B1.c: 61: };
  8957                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8958  1713  31A6  264D  3196   	fcall	_setRF_TimeoutCleared
  8959                           
  8960                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8961  1716  3036               	movlw	54
  8962  1717  3190  2000  3196   	fcall	_CC2500_WriteCommand
  8963                           
  8964                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8965  171A  303B               	movlw	59
  8966  171B  3190  2000         	fcall	_CC2500_WriteCommand
  8967                           
  8968                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8969  171D  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8970  171E  0008               	return
  8971  171F                     __end_of_CC2500_TxData:	
  8972                           
  8973                           	psect	text38
  8974  1648                     __ptext38:	
  8975 ;; *************** function _CC2500_RxData *****************
  8976 ;; Defined at:
  8977 ;;		line 73 in file "../src/CC2500_B1.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;		None
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8982 ;; Return value:  Size  Location     Type
  8983 ;;		None               void
  8984 ;; Registers used:
  8985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8986 ;; Tracked objects:
  8987 ;;		On entry : 0/0
  8988 ;;		On exit  : 0/0
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;Total ram usage:        2 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; Hardware stack levels required when called:    7
  8998 ;; This function calls:
  8999 ;;		_CC2500_ReadByte
  9000 ;;		_CC2500_ReadStatus
  9001 ;;		_CC2500_WriteByte
  9002 ;;		_CC2500_WriteCommand
  9003 ;;		_RF_Timeout_Counter
  9004 ;;		_setRF_TimeoutCleared
  9005 ;; This function is called by:
  9006 ;;		_setRF_Main
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           
  9011                           ;psect for function _CC2500_RxData
  9012  1648                     _CC2500_RxData:	
  9013                           
  9014                           ;CC2500_B1.c: 74: unsigned char loop_f;
  9015                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  9016                           
  9017                           ;incstack = 0
  9018                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9019  1648  0020               	movlb	0	; select bank0
  9020  1649  180D               	btfsc	13,0	;volatile
  9021  164A  0008               	return
  9022                           
  9023                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  9024  164B  303B               	movlw	59
  9025  164C  319C  24B3  3196   	fcall	_CC2500_ReadStatus
  9026                           
  9027                           ;CC2500_B1.c: 89: if (s_data != 0) {
  9028  164F  0021               	movlb	1	; select bank1
  9029  1650  0864               	movf	_s_data^(0+128),w
  9030  1651  1903               	btfsc	3,2
  9031  1652  0008               	return
  9032                           
  9033                           ;CC2500_B1.c: 90: RC4 = 0;
  9034  1653  0020               	movlb	0	; select bank0
  9035  1654  120E               	bcf	14,4	;volatile
  9036                           
  9037                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  9038  1655  30FF               	movlw	255
  9039  1656  00A4               	movwf	??_CC2500_RxData
  9040  1657  0824               	movf	??_CC2500_RxData,w
  9041  1658  0021               	movlb	1	; select bank1
  9042  1659  00DF               	movwf	_SPI0Buffer^(0+128)
  9043                           
  9044                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  9045  165A  2E5E               	goto	l9947
  9046  165B                     l9945:	
  9047                           
  9048                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  9049  165B  3199  2141  3196   	fcall	_RF_Timeout_Counter
  9050  165E                     l9947:	
  9051  165E  0020               	movlb	0	; select bank0
  9052  165F  1D0E               	btfss	14,2	;volatile
  9053  1660  2E64               	goto	l9951
  9054  1661  0021               	movlb	1	; select bank1
  9055  1662  1F21               	btfss	(_RF1^(0+128)+1),6
  9056  1663  2E5B               	goto	l9945
  9057  1664                     l9951:	
  9058                           
  9059                           ;CC2500_B1.c: 95: };
  9060                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  9061  1664  31A6  264D  3196   	fcall	_setRF_TimeoutCleared
  9062                           
  9063                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  9064  1667  319A  2250  3196   	fcall	_CC2500_WriteByte
  9065                           
  9066                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  9067  166A  319A  22F1  3196   	fcall	_CC2500_ReadByte
  9068                           
  9069                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  9070  166D  0021               	movlb	1	; select bank1
  9071  166E  085F               	movf	_SPI0Buffer^(0+128),w
  9072  166F  0020               	movlb	0	; select bank0
  9073  1670  00A4               	movwf	??_CC2500_RxData
  9074  1671  0824               	movf	??_CC2500_RxData,w
  9075  1672  0021               	movlb	1	; select bank1
  9076  1673  00DE               	movwf	_Rx_Length^(0+128)
  9077                           
  9078                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9079  1674  0020               	movlb	0	; select bank0
  9080  1675  01A5               	clrf	CC2500_RxData@loop_f
  9081  1676                     l9967:	
  9082  1676  0021               	movlb	1	; select bank1
  9083  1677  085E               	movf	_Rx_Length^(0+128),w
  9084  1678  0020               	movlb	0	; select bank0
  9085  1679  0225               	subwf	CC2500_RxData@loop_f,w
  9086  167A  1803               	btfsc	3,0
  9087  167B  2E8F               	goto	l9969
  9088                           
  9089                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9090  167C  319A  22F1  3196   	fcall	_CC2500_ReadByte
  9091                           
  9092                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  9093  167F  0021               	movlb	1	; select bank1
  9094  1680  085F               	movf	_SPI0Buffer^(0+128),w
  9095  1681  0020               	movlb	0	; select bank0
  9096  1682  00A4               	movwf	??_CC2500_RxData
  9097  1683  0825               	movf	CC2500_RxData@loop_f,w
  9098  1684  3EA0               	addlw	_RF_Data& (0+255)
  9099  1685  0086               	movwf	6
  9100  1686  3001               	movlw	1	; select bank3/4
  9101  1687  0087               	movwf	7
  9102  1688  0824               	movf	??_CC2500_RxData,w
  9103  1689  0081               	movwf	1
  9104  168A  3001               	movlw	1
  9105  168B  00A4               	movwf	??_CC2500_RxData
  9106  168C  0824               	movf	??_CC2500_RxData,w
  9107  168D  07A5               	addwf	CC2500_RxData@loop_f,f
  9108  168E  2E76               	goto	l9967
  9109  168F                     l9969:	
  9110                           
  9111                           ;CC2500_B1.c: 104: }
  9112                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  9113  168F  319A  22F1  3196   	fcall	_CC2500_ReadByte
  9114                           
  9115                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  9116  1692  0021               	movlb	1	; select bank1
  9117  1693  085F               	movf	_SPI0Buffer^(0+128),w
  9118  1694  0020               	movlb	0	; select bank0
  9119  1695  00A4               	movwf	??_CC2500_RxData
  9120  1696  0824               	movf	??_CC2500_RxData,w
  9121  1697  0021               	movlb	1	; select bank1
  9122  1698  00DD               	movwf	_RSSI^(0+128)
  9123                           
  9124                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  9125  1699  319A  22F1  3196   	fcall	_CC2500_ReadByte
  9126                           
  9127                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9128  169C  0021               	movlb	1	; select bank1
  9129  169D  085F               	movf	_SPI0Buffer^(0+128),w
  9130  169E  0020               	movlb	0	; select bank0
  9131  169F  00A4               	movwf	??_CC2500_RxData
  9132  16A0  0824               	movf	??_CC2500_RxData,w
  9133  16A1  0021               	movlb	1	; select bank1
  9134  16A2  00D6               	movwf	_CRC^(0+128)
  9135                           
  9136                           ;CC2500_B1.c: 109: RC4 = 1;
  9137  16A3  0020               	movlb	0	; select bank0
  9138  16A4  160E               	bsf	14,4	;volatile
  9139                           
  9140                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9141  16A5  0021               	movlb	1	; select bank1
  9142  16A6  1BD6               	btfsc	_CRC^(0+128),7
  9143                           
  9144                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9145  16A7  146E               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  9146                           
  9147                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9148  16A8  11A0               	bcf	_RF1^(0+128),3
  9149                           
  9150                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9151  16A9  14A0               	bsf	_RF1^(0+128),1
  9152                           
  9153                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9154  16AA  3036               	movlw	54
  9155  16AB  3190  2000  3196   	fcall	_CC2500_WriteCommand
  9156                           
  9157                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9158  16AE  303A               	movlw	58
  9159  16AF  3190  2000         	fcall	_CC2500_WriteCommand
  9160  16B1  0021               	movlb	1	; select bank1
  9161  16B2  0008               	return
  9162  16B3                     __end_of_CC2500_RxData:	
  9163                           
  9164                           	psect	text39
  9165  1CB3                     __ptext39:	
  9166 ;; *************** function _CC2500_ReadStatus *****************
  9167 ;; Defined at:
  9168 ;;		line 308 in file "../src/CC2500_B1.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;  status_addr     1    wreg     unsigned char 
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9173 ;; Return value:  Size  Location     Type
  9174 ;;		None               void
  9175 ;; Registers used:
  9176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;Total ram usage:        2 bytes
  9187 ;; Hardware stack levels used:    1
  9188 ;; Hardware stack levels required when called:    6
  9189 ;; This function calls:
  9190 ;;		_CC2500_ReadByte
  9191 ;;		_CC2500_WriteByte
  9192 ;;		_RF_Timeout_Counter
  9193 ;;		_setRF_TimeoutCleared
  9194 ;; This function is called by:
  9195 ;;		_CC2500_RxData
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function _CC2500_ReadStatus
  9201  1CB3                     _CC2500_ReadStatus:	
  9202                           
  9203                           ;incstack = 0
  9204                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9205                           ;CC2500_ReadStatus@status_addr stored from wreg
  9206  1CB3  0020               	movlb	0	; select bank0
  9207  1CB4  00A3               	movwf	CC2500_ReadStatus@status_addr
  9208                           
  9209                           ;CC2500_B1.c: 309: RC4 = 0;
  9210  1CB5  120E               	bcf	14,4	;volatile
  9211                           
  9212                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9213  1CB6  0823               	movf	CC2500_ReadStatus@status_addr,w
  9214  1CB7  3EC0               	addlw	192
  9215  1CB8  00A2               	movwf	??_CC2500_ReadStatus
  9216  1CB9  0822               	movf	??_CC2500_ReadStatus,w
  9217  1CBA  0021               	movlb	1	; select bank1
  9218  1CBB  00DF               	movwf	_SPI0Buffer^(0+128)
  9219                           
  9220                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  9221  1CBC  2CC0               	goto	l9747
  9222  1CBD                     l9745:	
  9223                           
  9224                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9225  1CBD  3199  2141  319C   	fcall	_RF_Timeout_Counter
  9226  1CC0                     l9747:	
  9227  1CC0  0020               	movlb	0	; select bank0
  9228  1CC1  1D0E               	btfss	14,2	;volatile
  9229  1CC2  2CC6               	goto	l9751
  9230  1CC3  0021               	movlb	1	; select bank1
  9231  1CC4  1F21               	btfss	(_RF1^(0+128)+1),6
  9232  1CC5  2CBD               	goto	l9745
  9233  1CC6                     l9751:	
  9234                           
  9235                           ;CC2500_B1.c: 314: };
  9236                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9237  1CC6  31A6  264D  319C   	fcall	_setRF_TimeoutCleared
  9238                           
  9239                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9240  1CC9  319A  2250  319C   	fcall	_CC2500_WriteByte
  9241                           
  9242                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9243  1CCC  319A  22F1         	fcall	_CC2500_ReadByte
  9244                           
  9245                           ;CC2500_B1.c: 319: RC4 = 1;
  9246  1CCE  0020               	movlb	0	; select bank0
  9247  1CCF  160E               	bsf	14,4	;volatile
  9248                           
  9249                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9250  1CD0  0021               	movlb	1	; select bank1
  9251  1CD1  085F               	movf	_SPI0Buffer^(0+128),w
  9252  1CD2  0020               	movlb	0	; select bank0
  9253  1CD3  00A2               	movwf	??_CC2500_ReadStatus
  9254  1CD4  0822               	movf	??_CC2500_ReadStatus,w
  9255  1CD5  0021               	movlb	1	; select bank1
  9256  1CD6  00E4               	movwf	_s_data^(0+128)
  9257  1CD7  0008               	return
  9258  1CD8                     __end_of_CC2500_ReadStatus:	
  9259                           
  9260                           	psect	text40
  9261  1AF1                     __ptext40:	
  9262 ;; *************** function _CC2500_ReadByte *****************
  9263 ;; Defined at:
  9264 ;;		line 242 in file "../src/CC2500_B1.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;		None
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9269 ;; Return value:  Size  Location     Type
  9270 ;;		None               void
  9271 ;; Registers used:
  9272 ;;		wreg, status,2, status,0
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;Total ram usage:        2 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; Hardware stack levels required when called:    5
  9285 ;; This function calls:
  9286 ;;		Nothing
  9287 ;; This function is called by:
  9288 ;;		_CC2500_RxData
  9289 ;;		_CC2500_ReadStatus
  9290 ;;		_CC2500_ReadREG
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           
  9295                           ;psect for function _CC2500_ReadByte
  9296  1AF1                     _CC2500_ReadByte:	
  9297                           
  9298                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9299                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9300                           
  9301                           ;incstack = 0
  9302                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9303  1AF1  0020               	movlb	0	; select bank0
  9304  1AF2  01A1               	clrf	CC2500_ReadByte@loop_b
  9305  1AF3                     L4:	
  9306  1AF3  3008               	movlw	8
  9307  1AF4  0221               	subwf	CC2500_ReadByte@loop_b,w
  9308  1AF5  1803               	btfsc	3,0
  9309  1AF6  0008               	return
  9310                           
  9311                           ;CC2500_B1.c: 245: RC1 = 1;
  9312  1AF7  148E               	bsf	14,1	;volatile
  9313                           
  9314                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9315  1AF8  1003               	clrc
  9316  1AF9  0021               	movlb	1	; select bank1
  9317  1AFA  0DDF               	rlf	_SPI0Buffer^(0+128),f
  9318                           
  9319                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9320  1AFB  0020               	movlb	0	; select bank0
  9321  1AFC  1D0E               	btfss	14,2	;volatile
  9322  1AFD  2B01               	goto	l9709
  9323                           
  9324                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9325  1AFE  0021               	movlb	1	; select bank1
  9326  1AFF  145F               	bsf	_SPI0Buffer^(0+128),0
  9327  1B00  2B07               	goto	l9711
  9328  1B01                     l9709:	
  9329                           
  9330                           ;CC2500_B1.c: 249: else
  9331                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9332  1B01  30FE               	movlw	254
  9333  1B02  0020               	movlb	0	; select bank0
  9334  1B03  00A0               	movwf	??_CC2500_ReadByte
  9335  1B04  0820               	movf	??_CC2500_ReadByte,w
  9336  1B05  0021               	movlb	1	; select bank1
  9337  1B06  05DF               	andwf	_SPI0Buffer^(0+128),f
  9338  1B07                     l9711:	
  9339                           
  9340                           ;CC2500_B1.c: 251: RC1 = 0;
  9341  1B07  0020               	movlb	0	; select bank0
  9342  1B08  108E               	bcf	14,1	;volatile
  9343  1B09  3001               	movlw	1
  9344  1B0A  00A0               	movwf	??_CC2500_ReadByte
  9345  1B0B  0820               	movf	??_CC2500_ReadByte,w
  9346  1B0C  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9347  1B0D  2AF3               	goto	L4
  9348  1B0E                     __end_of_CC2500_ReadByte:	
  9349                           
  9350                           	psect	text41
  9351  1956                     __ptext41:	
  9352 ;; *************** function _CC2500_PowerOnInitial *****************
  9353 ;; Defined at:
  9354 ;;		line 126 in file "../src/CC2500_B1.c"
  9355 ;; Parameters:    Size  Location     Type
  9356 ;;		None
  9357 ;; Auto vars:     Size  Location     Type
  9358 ;;		None
  9359 ;; Return value:  Size  Location     Type
  9360 ;;		None               void
  9361 ;; Registers used:
  9362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;Total ram usage:        0 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; Hardware stack levels required when called:    8
  9375 ;; This function calls:
  9376 ;;		_CC2500_ClearRXFIFO
  9377 ;;		_CC2500_ClearTXFIFO
  9378 ;;		_CC2500_FrequencyCabr
  9379 ;;		_CC2500_InitPATable
  9380 ;;		_CC2500_InitSetREG
  9381 ;;		_CC2500_PowerRST
  9382 ;;		_CC2500_SIDLEMode
  9383 ;; This function is called by:
  9384 ;;		_setRF_Main
  9385 ;;		_main
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           
  9390                           ;psect for function _CC2500_PowerOnInitial
  9391  1956                     _CC2500_PowerOnInitial:	
  9392                           
  9393                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9394                           
  9395                           ;incstack = 0
  9396                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9397  1956  3191  2157  3199   	fcall	_CC2500_PowerRST
  9398                           
  9399                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9400  1959  319D  2526  3199   	fcall	_CC2500_InitSetREG
  9401                           
  9402                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9403  195C  319B  234A  3199   	fcall	_CC2500_InitPATable
  9404                           
  9405                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9406  195F  31A6  2655  3199   	fcall	_CC2500_ClearTXFIFO
  9407                           
  9408                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9409  1962  31A6  2651  3199   	fcall	_CC2500_ClearRXFIFO
  9410                           
  9411                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9412  1965  31A7  275D  3199   	fcall	_CC2500_FrequencyCabr
  9413                           
  9414                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9415  1968  31A6  2659         	fcall	_CC2500_SIDLEMode
  9416  196A  0008               	return
  9417  196B                     __end_of_CC2500_PowerOnInitial:	
  9418                           
  9419                           	psect	text42
  9420  2659                     __ptext42:	
  9421 ;; *************** function _CC2500_SIDLEMode *****************
  9422 ;; Defined at:
  9423 ;;		line 216 in file "../src/CC2500_B1.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;		None
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;		None
  9428 ;; Return value:  Size  Location     Type
  9429 ;;		None               void
  9430 ;; Registers used:
  9431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;Total ram usage:        0 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; Hardware stack levels required when called:    7
  9444 ;; This function calls:
  9445 ;;		_CC2500_WriteCommand
  9446 ;; This function is called by:
  9447 ;;		_CC2500_PowerOnInitial
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451                           
  9452                           ;psect for function _CC2500_SIDLEMode
  9453  2659                     _CC2500_SIDLEMode:	
  9454                           
  9455                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9456                           
  9457                           ;incstack = 0
  9458                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9459  2659  3036               	movlw	54
  9460  265A  3190  2000         	fcall	_CC2500_WriteCommand
  9461  265C  0008               	return
  9462  265D                     __end_of_CC2500_SIDLEMode:	
  9463                           
  9464                           	psect	text43
  9465  1157                     __ptext43:	
  9466 ;; *************** function _CC2500_PowerRST *****************
  9467 ;; Defined at:
  9468 ;;		line 139 in file "../src/CC2500_B1.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;		None
  9471 ;; Auto vars:     Size  Location     Type
  9472 ;;		None
  9473 ;; Return value:  Size  Location     Type
  9474 ;;		None               void
  9475 ;; Registers used:
  9476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;Total ram usage:        1 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; Hardware stack levels required when called:    6
  9489 ;; This function calls:
  9490 ;;		_CC2500_WriteByte
  9491 ;;		_DelayTime_1us
  9492 ;;		_RF_Timeout_Counter
  9493 ;;		_setRF_TimeoutCleared
  9494 ;; This function is called by:
  9495 ;;		_CC2500_PowerOnInitial
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           
  9500                           ;psect for function _CC2500_PowerRST
  9501  1157                     _CC2500_PowerRST:	
  9502                           
  9503                           ;CC2500_B1.c: 140: RC1 = 0;
  9504                           
  9505                           ;incstack = 0
  9506                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9507  1157  0020               	movlb	0	; select bank0
  9508  1158  108E               	bcf	14,1	;volatile
  9509                           
  9510                           ;CC2500_B1.c: 141: RC0 = 0;
  9511  1159  100E               	bcf	14,0	;volatile
  9512                           
  9513                           ;CC2500_B1.c: 142: RC4 = 1;
  9514  115A  160E               	bsf	14,4	;volatile
  9515                           
  9516                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9517  115B  300A               	movlw	10
  9518  115C  00A0               	movwf	DelayTime_1us@count
  9519  115D  3000               	movlw	0
  9520  115E  00A1               	movwf	DelayTime_1us@count+1
  9521  115F  319C  24D8  3191   	fcall	_DelayTime_1us
  9522                           
  9523                           ;CC2500_B1.c: 144: RC4 = 0;
  9524  1162  0020               	movlb	0	; select bank0
  9525  1163  120E               	bcf	14,4	;volatile
  9526                           
  9527                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9528  1164  300A               	movlw	10
  9529  1165  00A0               	movwf	DelayTime_1us@count
  9530  1166  3000               	movlw	0
  9531  1167  00A1               	movwf	DelayTime_1us@count+1
  9532  1168  319C  24D8  3191   	fcall	_DelayTime_1us
  9533                           
  9534                           ;CC2500_B1.c: 146: RC4 = 1;
  9535  116B  0020               	movlb	0	; select bank0
  9536  116C  160E               	bsf	14,4	;volatile
  9537                           
  9538                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9539  116D  3028               	movlw	40
  9540  116E  00A0               	movwf	DelayTime_1us@count
  9541  116F  3000               	movlw	0
  9542  1170  00A1               	movwf	DelayTime_1us@count+1
  9543  1171  319C  24D8  3191   	fcall	_DelayTime_1us
  9544                           
  9545                           ;CC2500_B1.c: 148: RC4 = 0;
  9546  1174  0020               	movlb	0	; select bank0
  9547  1175  120E               	bcf	14,4	;volatile
  9548                           
  9549                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9550  1176  3030               	movlw	48
  9551  1177  00A6               	movwf	??_CC2500_PowerRST
  9552  1178  0826               	movf	??_CC2500_PowerRST,w
  9553  1179  0021               	movlb	1	; select bank1
  9554  117A  00DF               	movwf	_SPI0Buffer^(0+128)
  9555                           
  9556                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9557  117B  297F               	goto	l9775
  9558  117C                     l9773:	
  9559                           
  9560                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9561  117C  3199  2141  3191   	fcall	_RF_Timeout_Counter
  9562  117F                     l9775:	
  9563  117F  0020               	movlb	0	; select bank0
  9564  1180  1D0E               	btfss	14,2	;volatile
  9565  1181  2985               	goto	l9779
  9566  1182  0021               	movlb	1	; select bank1
  9567  1183  1F21               	btfss	(_RF1^(0+128)+1),6
  9568  1184  297C               	goto	l9773
  9569  1185                     l9779:	
  9570                           
  9571                           ;CC2500_B1.c: 152: };
  9572                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9573  1185  31A6  264D  3191   	fcall	_setRF_TimeoutCleared
  9574                           
  9575                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9576  1188  319A  2250  3191   	fcall	_CC2500_WriteByte
  9577                           
  9578                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9579  118B  298F               	goto	l9785
  9580  118C                     l9783:	
  9581                           
  9582                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9583  118C  3199  2141  3191   	fcall	_RF_Timeout_Counter
  9584  118F                     l9785:	
  9585  118F  0020               	movlb	0	; select bank0
  9586  1190  1D0E               	btfss	14,2	;volatile
  9587  1191  2995               	goto	l9789
  9588  1192  0021               	movlb	1	; select bank1
  9589  1193  1F21               	btfss	(_RF1^(0+128)+1),6
  9590  1194  298C               	goto	l9783
  9591  1195                     l9789:	
  9592                           
  9593                           ;CC2500_B1.c: 157: };
  9594                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9595  1195  31A6  264D         	fcall	_setRF_TimeoutCleared
  9596                           
  9597                           ;CC2500_B1.c: 159: RC0 = 0;
  9598  1197  0020               	movlb	0	; select bank0
  9599  1198  100E               	bcf	14,0	;volatile
  9600                           
  9601                           ;CC2500_B1.c: 160: RC4 = 1;
  9602  1199  160E               	bsf	14,4	;volatile
  9603  119A  0008               	return
  9604  119B                     __end_of_CC2500_PowerRST:	
  9605                           
  9606                           	psect	text44
  9607  1D26                     __ptext44:	
  9608 ;; *************** function _CC2500_InitSetREG *****************
  9609 ;; Defined at:
  9610 ;;		line 166 in file "../src/CC2500_B1.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;		None
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9615 ;;  temp2           1    7[BANK0 ] unsigned char 
  9616 ;;  temp1           1    6[BANK0 ] unsigned char 
  9617 ;; Return value:  Size  Location     Type
  9618 ;;		None               void
  9619 ;; Registers used:
  9620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9621 ;; Tracked objects:
  9622 ;;		On entry : 0/0
  9623 ;;		On exit  : 0/0
  9624 ;;		Unchanged: 0/0
  9625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;Total ram usage:        4 bytes
  9631 ;; Hardware stack levels used:    1
  9632 ;; Hardware stack levels required when called:    7
  9633 ;; This function calls:
  9634 ;;		_CC2500_WriteREG
  9635 ;; This function is called by:
  9636 ;;		_CC2500_PowerOnInitial
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           
  9641                           ;psect for function _CC2500_InitSetREG
  9642  1D26                     _CC2500_InitSetREG:	
  9643                           
  9644                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9645                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9646                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9647                           
  9648                           ;incstack = 0
  9649                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9650  1D26  0020               	movlb	0	; select bank0
  9651  1D27  01A8               	clrf	CC2500_InitSetREG@loop_c
  9652  1D28                     L5:	
  9653  1D28  302F               	movlw	47
  9654  1D29  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9655  1D2A  1803               	btfsc	3,0
  9656  1D2B  0008               	return
  9657                           
  9658                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9659  1D2C  0828               	movf	CC2500_InitSetREG@loop_c,w
  9660  1D2D  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9661  1D2E  0084               	movwf	4
  9662  1D2F  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9663  1D30  1803               	skipnc
  9664  1D31  3E01               	addlw	1
  9665  1D32  0085               	movwf	5
  9666  1D33  0800               	movf	0,w	;code access
  9667  1D34  00A5               	movwf	??_CC2500_InitSetREG
  9668  1D35  0825               	movf	??_CC2500_InitSetREG,w
  9669  1D36  00A6               	movwf	CC2500_InitSetREG@temp1
  9670                           
  9671                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9672  1D37  0828               	movf	CC2500_InitSetREG@loop_c,w
  9673  1D38  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9674  1D39  0084               	movwf	4
  9675  1D3A  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9676  1D3B  1803               	skipnc
  9677  1D3C  3E01               	addlw	1
  9678  1D3D  0085               	movwf	5
  9679  1D3E  0800               	movf	0,w	;code access
  9680  1D3F  00A5               	movwf	??_CC2500_InitSetREG
  9681  1D40  0825               	movf	??_CC2500_InitSetREG,w
  9682  1D41  00A7               	movwf	CC2500_InitSetREG@temp2
  9683                           
  9684                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9685  1D42  0827               	movf	CC2500_InitSetREG@temp2,w
  9686  1D43  00A5               	movwf	??_CC2500_InitSetREG
  9687  1D44  0825               	movf	??_CC2500_InitSetREG,w
  9688  1D45  00A2               	movwf	CC2500_WriteREG@value
  9689  1D46  0826               	movf	CC2500_InitSetREG@temp1,w
  9690  1D47  319C  2490  319D   	fcall	_CC2500_WriteREG
  9691  1D4A  3001               	movlw	1
  9692  1D4B  0020               	movlb	0	; select bank0
  9693  1D4C  00A5               	movwf	??_CC2500_InitSetREG
  9694  1D4D  0825               	movf	??_CC2500_InitSetREG,w
  9695  1D4E  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9696  1D4F  2D28               	goto	L5
  9697  1D50                     __end_of_CC2500_InitSetREG:	
  9698                           
  9699                           	psect	text45
  9700  1B4A                     __ptext45:	
  9701 ;; *************** function _CC2500_InitPATable *****************
  9702 ;; Defined at:
  9703 ;;		line 181 in file "../src/CC2500_B1.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;		None
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9708 ;;  temp            1    6[BANK0 ] unsigned char 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;		None               void
  9711 ;; Registers used:
  9712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;Total ram usage:        3 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    7
  9725 ;; This function calls:
  9726 ;;		_CC2500_WriteREG
  9727 ;; This function is called by:
  9728 ;;		_CC2500_PowerOnInitial
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           
  9733                           ;psect for function _CC2500_InitPATable
  9734  1B4A                     _CC2500_InitPATable:	
  9735                           
  9736                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9737                           ;CC2500_B1.c: 183: unsigned char temp;
  9738                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9739                           
  9740                           ;incstack = 0
  9741                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9742  1B4A  0020               	movlb	0	; select bank0
  9743  1B4B  01A7               	clrf	CC2500_InitPATable@loop_d
  9744  1B4C                     L6:	
  9745  1B4C  3008               	movlw	8
  9746  1B4D  0227               	subwf	CC2500_InitPATable@loop_d,w
  9747  1B4E  1803               	btfsc	3,0
  9748  1B4F  0008               	return
  9749                           
  9750                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9751  1B50  0827               	movf	CC2500_InitPATable@loop_d,w
  9752  1B51  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9753  1B52  0084               	movwf	4
  9754  1B53  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9755  1B54  1803               	skipnc
  9756  1B55  3E01               	addlw	1
  9757  1B56  0085               	movwf	5
  9758  1B57  0800               	movf	0,w	;code access
  9759  1B58  00A5               	movwf	??_CC2500_InitPATable
  9760  1B59  0825               	movf	??_CC2500_InitPATable,w
  9761  1B5A  00A6               	movwf	CC2500_InitPATable@temp
  9762                           
  9763                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9764  1B5B  0826               	movf	CC2500_InitPATable@temp,w
  9765  1B5C  00A5               	movwf	??_CC2500_InitPATable
  9766  1B5D  0825               	movf	??_CC2500_InitPATable,w
  9767  1B5E  00A2               	movwf	CC2500_WriteREG@value
  9768  1B5F  303E               	movlw	62
  9769  1B60  319C  2490  319B   	fcall	_CC2500_WriteREG
  9770  1B63  3001               	movlw	1
  9771  1B64  0020               	movlb	0	; select bank0
  9772  1B65  00A5               	movwf	??_CC2500_InitPATable
  9773  1B66  0825               	movf	??_CC2500_InitPATable,w
  9774  1B67  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9775  1B68  2B4C               	goto	L6
  9776  1B69                     __end_of_CC2500_InitPATable:	
  9777                           
  9778                           	psect	text46
  9779  1C90                     __ptext46:	
  9780 ;; *************** function _CC2500_WriteREG *****************
  9781 ;; Defined at:
  9782 ;;		line 258 in file "../src/CC2500_B1.c"
  9783 ;; Parameters:    Size  Location     Type
  9784 ;;  w_addr          1    wreg     unsigned char 
  9785 ;;  value           1    2[BANK0 ] unsigned char 
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9788 ;; Return value:  Size  Location     Type
  9789 ;;		None               void
  9790 ;; Registers used:
  9791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9797 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;Total ram usage:        3 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    6
  9804 ;; This function calls:
  9805 ;;		_CC2500_WriteByte
  9806 ;;		_RF_Timeout_Counter
  9807 ;;		_setRF_TimeoutCleared
  9808 ;; This function is called by:
  9809 ;;		_CC2500_InitSetREG
  9810 ;;		_CC2500_InitPATable
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814                           
  9815                           ;psect for function _CC2500_WriteREG
  9816  1C90                     _CC2500_WriteREG:	
  9817                           
  9818                           ;incstack = 0
  9819                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9820                           ;CC2500_WriteREG@w_addr stored from wreg
  9821  1C90  0020               	movlb	0	; select bank0
  9822  1C91  00A4               	movwf	CC2500_WriteREG@w_addr
  9823                           
  9824                           ;CC2500_B1.c: 259: RC4 = 0;
  9825  1C92  120E               	bcf	14,4	;volatile
  9826                           
  9827                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9828  1C93  0824               	movf	CC2500_WriteREG@w_addr,w
  9829  1C94  00A3               	movwf	??_CC2500_WriteREG
  9830  1C95  0823               	movf	??_CC2500_WriteREG,w
  9831  1C96  0021               	movlb	1	; select bank1
  9832  1C97  00DF               	movwf	_SPI0Buffer^(0+128)
  9833                           
  9834                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9835  1C98  2C9C               	goto	l9721
  9836  1C99                     l9719:	
  9837                           
  9838                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9839  1C99  3199  2141  319C   	fcall	_RF_Timeout_Counter
  9840  1C9C                     l9721:	
  9841  1C9C  0020               	movlb	0	; select bank0
  9842  1C9D  1D0E               	btfss	14,2	;volatile
  9843  1C9E  2CA2               	goto	l9725
  9844  1C9F  0021               	movlb	1	; select bank1
  9845  1CA0  1F21               	btfss	(_RF1^(0+128)+1),6
  9846  1CA1  2C99               	goto	l9719
  9847  1CA2                     l9725:	
  9848                           
  9849                           ;CC2500_B1.c: 263: };
  9850                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9851  1CA2  31A6  264D  319C   	fcall	_setRF_TimeoutCleared
  9852                           
  9853                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9854  1CA5  319A  2250  319C   	fcall	_CC2500_WriteByte
  9855                           
  9856                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9857  1CA8  0020               	movlb	0	; select bank0
  9858  1CA9  0822               	movf	CC2500_WriteREG@value,w
  9859  1CAA  00A3               	movwf	??_CC2500_WriteREG
  9860  1CAB  0823               	movf	??_CC2500_WriteREG,w
  9861  1CAC  0021               	movlb	1	; select bank1
  9862  1CAD  00DF               	movwf	_SPI0Buffer^(0+128)
  9863                           
  9864                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9865  1CAE  319A  2250         	fcall	_CC2500_WriteByte
  9866                           
  9867                           ;CC2500_B1.c: 269: RC4 = 1;
  9868  1CB0  0020               	movlb	0	; select bank0
  9869  1CB1  160E               	bsf	14,4	;volatile
  9870  1CB2  0008               	return
  9871  1CB3                     __end_of_CC2500_WriteREG:	
  9872                           
  9873                           	psect	text47
  9874  275D                     __ptext47:	
  9875 ;; *************** function _CC2500_FrequencyCabr *****************
  9876 ;; Defined at:
  9877 ;;		line 208 in file "../src/CC2500_B1.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;		None
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;		None
  9882 ;; Return value:  Size  Location     Type
  9883 ;;		None               void
  9884 ;; Registers used:
  9885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;Total ram usage:        0 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    7
  9898 ;; This function calls:
  9899 ;;		_CC2500_WriteCommand
  9900 ;;		_DelayTime_1us
  9901 ;; This function is called by:
  9902 ;;		_CC2500_PowerOnInitial
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           
  9907                           ;psect for function _CC2500_FrequencyCabr
  9908  275D                     _CC2500_FrequencyCabr:	
  9909                           
  9910                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9911                           
  9912                           ;incstack = 0
  9913                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9914  275D  3033               	movlw	51
  9915  275E  3190  2000  31A7   	fcall	_CC2500_WriteCommand
  9916                           
  9917                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9918  2761  30E8               	movlw	232
  9919  2762  0020               	movlb	0	; select bank0
  9920  2763  00A0               	movwf	DelayTime_1us@count
  9921  2764  3003               	movlw	3
  9922  2765  00A1               	movwf	DelayTime_1us@count+1
  9923  2766  319C  24D8         	fcall	_DelayTime_1us
  9924  2768  0008               	return
  9925  2769                     __end_of_CC2500_FrequencyCabr:	
  9926                           
  9927                           	psect	text48
  9928  1CD8                     __ptext48:	
  9929 ;; *************** function _DelayTime_1us *****************
  9930 ;; Defined at:
  9931 ;;		line 327 in file "../src/CC2500_B1.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;  count           2    0[BANK0 ] int 
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;  j               2    4[BANK0 ] unsigned int 
  9936 ;;  i               2    2[BANK0 ] unsigned int 
  9937 ;; Return value:  Size  Location     Type
  9938 ;;		None               void
  9939 ;; Registers used:
  9940 ;;		wreg, status,2
  9941 ;; Tracked objects:
  9942 ;;		On entry : 0/0
  9943 ;;		On exit  : 0/0
  9944 ;;		Unchanged: 0/0
  9945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9946 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;Total ram usage:        6 bytes
  9951 ;; Hardware stack levels used:    1
  9952 ;; Hardware stack levels required when called:    5
  9953 ;; This function calls:
  9954 ;;		Nothing
  9955 ;; This function is called by:
  9956 ;;		_CC2500_PowerRST
  9957 ;;		_CC2500_FrequencyCabr
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           
  9962                           ;psect for function _DelayTime_1us
  9963  1CD8                     _DelayTime_1us:	
  9964                           
  9965                           ;CC2500_B1.c: 328: unsigned int i, j;
  9966                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9967                           
  9968                           ;incstack = 0
  9969                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9970  1CD8  3001               	movlw	1
  9971  1CD9  0020               	movlb	0	; select bank0
  9972  1CDA  00A2               	movwf	DelayTime_1us@i
  9973  1CDB  3000               	movlw	0
  9974  1CDC  00A3               	movwf	DelayTime_1us@i+1
  9975  1CDD                     l371:	
  9976  1CDD  0821               	movf	DelayTime_1us@count+1,w
  9977  1CDE  0223               	subwf	DelayTime_1us@i+1,w
  9978  1CDF  1D03               	skipz
  9979  1CE0  2CE3               	goto	u6585
  9980  1CE1  0820               	movf	DelayTime_1us@count,w
  9981  1CE2  0222               	subwf	DelayTime_1us@i,w
  9982  1CE3                     u6585:	
  9983  1CE3  1803               	btfsc	3,0
  9984  1CE4  0008               	return
  9985                           
  9986                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9987  1CE5  01A4               	clrf	DelayTime_1us@j
  9988  1CE6  01A5               	clrf	DelayTime_1us@j+1
  9989  1CE7  3000               	movlw	0
  9990  1CE8  0225               	subwf	DelayTime_1us@j+1,w
  9991  1CE9  3002               	movlw	2
  9992  1CEA  1903               	skipnz
  9993  1CEB  0224               	subwf	DelayTime_1us@j,w
  9994  1CEC  1803               	btfsc	3,0
  9995  1CED  2CF9               	goto	l7209
  9996  1CEE                     l7207:	
  9997  1CEE  3001               	movlw	1
  9998  1CEF  07A4               	addwf	DelayTime_1us@j,f
  9999  1CF0  3000               	movlw	0
 10000  1CF1  3DA5               	addwfc	DelayTime_1us@j+1,f
 10001  1CF2  3000               	movlw	0
 10002  1CF3  0225               	subwf	DelayTime_1us@j+1,w
 10003  1CF4  3002               	movlw	2
 10004  1CF5  1903               	skipnz
 10005  1CF6  0224               	subwf	DelayTime_1us@j,w
 10006  1CF7  1C03               	skipc
 10007  1CF8  2CEE               	goto	l7207
 10008  1CF9                     l7209:	
 10009  1CF9  3001               	movlw	1
 10010  1CFA  07A2               	addwf	DelayTime_1us@i,f
 10011  1CFB  3000               	movlw	0
 10012  1CFC  3DA3               	addwfc	DelayTime_1us@i+1,f
 10013  1CFD  2CDD               	goto	l371
 10014  1CFE                     __end_of_DelayTime_1us:	
 10015                           
 10016                           	psect	text49
 10017  2655                     __ptext49:	
 10018 ;; *************** function _CC2500_ClearTXFIFO *****************
 10019 ;; Defined at:
 10020 ;;		line 194 in file "../src/CC2500_B1.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;		None
 10025 ;; Return value:  Size  Location     Type
 10026 ;;		None               void
 10027 ;; Registers used:
 10028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;Total ram usage:        0 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    7
 10041 ;; This function calls:
 10042 ;;		_CC2500_WriteCommand
 10043 ;; This function is called by:
 10044 ;;		_CC2500_PowerOnInitial
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           
 10049                           ;psect for function _CC2500_ClearTXFIFO
 10050  2655                     _CC2500_ClearTXFIFO:	
 10051                           
 10052                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
 10053                           
 10054                           ;incstack = 0
 10055                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10056  2655  303B               	movlw	59
 10057  2656  3190  2000         	fcall	_CC2500_WriteCommand
 10058  2658  0008               	return
 10059  2659                     __end_of_CC2500_ClearTXFIFO:	
 10060                           
 10061                           	psect	text50
 10062  2651                     __ptext50:	
 10063 ;; *************** function _CC2500_ClearRXFIFO *****************
 10064 ;; Defined at:
 10065 ;;		line 201 in file "../src/CC2500_B1.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;		None               void
 10072 ;; Registers used:
 10073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;Total ram usage:        0 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    7
 10086 ;; This function calls:
 10087 ;;		_CC2500_WriteCommand
 10088 ;; This function is called by:
 10089 ;;		_CC2500_PowerOnInitial
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           
 10094                           ;psect for function _CC2500_ClearRXFIFO
 10095  2651                     _CC2500_ClearRXFIFO:	
 10096                           
 10097                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
 10098                           
 10099                           ;incstack = 0
 10100                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10101  2651  303A               	movlw	58
 10102  2652  3190  2000         	fcall	_CC2500_WriteCommand
 10103  2654  0008               	return
 10104  2655                     __end_of_CC2500_ClearRXFIFO:	
 10105                           
 10106                           	psect	text51
 10107  1000                     __ptext51:	
 10108 ;; *************** function _CC2500_WriteCommand *****************
 10109 ;; Defined at:
 10110 ;;		line 292 in file "../src/CC2500_B1.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;  command         1    wreg     unsigned char 
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;  command         1    3[BANK0 ] unsigned char 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;		None               void
 10117 ;; Registers used:
 10118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;Total ram usage:        2 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    6
 10131 ;; This function calls:
 10132 ;;		_CC2500_WriteByte
 10133 ;;		_RF_Timeout_Counter
 10134 ;;		_setRF_TimeoutCleared
 10135 ;; This function is called by:
 10136 ;;		_CC2500_TxData
 10137 ;;		_CC2500_RxData
 10138 ;;		_CC2500_ClearTXFIFO
 10139 ;;		_CC2500_ClearRXFIFO
 10140 ;;		_CC2500_FrequencyCabr
 10141 ;;		_CC2500_SIDLEMode
 10142 ;;		_setRF_Main
 10143 ;;		_RF_RxDisable
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           
 10148                           ;psect for function _CC2500_WriteCommand
 10149  1000                     _CC2500_WriteCommand:	
 10150                           
 10151                           ;incstack = 0
 10152                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10153                           ;CC2500_WriteCommand@command stored from wreg
 10154  1000  0020               	movlb	0	; select bank0
 10155  1001  00A3               	movwf	CC2500_WriteCommand@command
 10156                           
 10157                           ;CC2500_B1.c: 293: RC4 = 0;
 10158  1002  120E               	bcf	14,4	;volatile
 10159                           
 10160                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10161  1003  0823               	movf	CC2500_WriteCommand@command,w
 10162  1004  00A2               	movwf	??_CC2500_WriteCommand
 10163  1005  0822               	movf	??_CC2500_WriteCommand,w
 10164  1006  0021               	movlb	1	; select bank1
 10165  1007  00DF               	movwf	_SPI0Buffer^(0+128)
 10166                           
 10167                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
 10168  1008  280C               	goto	l9687
 10169  1009                     l9685:	
 10170                           
 10171                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10172  1009  3199  2141  3190   	fcall	_RF_Timeout_Counter
 10173  100C                     l9687:	
 10174  100C  0020               	movlb	0	; select bank0
 10175  100D  1D0E               	btfss	14,2	;volatile
 10176  100E  2812               	goto	l9691
 10177  100F  0021               	movlb	1	; select bank1
 10178  1010  1F21               	btfss	(_RF1^(0+128)+1),6
 10179  1011  2809               	goto	l9685
 10180  1012                     l9691:	
 10181                           
 10182                           ;CC2500_B1.c: 298: };
 10183                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10184  1012  31A6  264D  3190   	fcall	_setRF_TimeoutCleared
 10185                           
 10186                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10187  1015  319A  2250         	fcall	_CC2500_WriteByte
 10188                           
 10189                           ;CC2500_B1.c: 302: RC4 = 1;
 10190  1017  0020               	movlb	0	; select bank0
 10191  1018  160E               	bsf	14,4	;volatile
 10192  1019  0008               	return
 10193  101A                     __end_of_CC2500_WriteCommand:	
 10194                           
 10195                           	psect	text52
 10196  264D                     __ptext52:	
 10197 ;; *************** function _setRF_TimeoutCleared *****************
 10198 ;; Defined at:
 10199 ;;		line 149 in file "../src/RF_Control_B1.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;		None
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;		None
 10204 ;; Return value:  Size  Location     Type
 10205 ;;		None               void
 10206 ;; Registers used:
 10207 ;;		status,2
 10208 ;; Tracked objects:
 10209 ;;		On entry : 0/0
 10210 ;;		On exit  : 0/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;Total ram usage:        0 bytes
 10218 ;; Hardware stack levels used:    1
 10219 ;; Hardware stack levels required when called:    5
 10220 ;; This function calls:
 10221 ;;		Nothing
 10222 ;; This function is called by:
 10223 ;;		_CC2500_TxData
 10224 ;;		_CC2500_RxData
 10225 ;;		_CC2500_PowerRST
 10226 ;;		_CC2500_WriteREG
 10227 ;;		_CC2500_WriteCommand
 10228 ;;		_CC2500_ReadStatus
 10229 ;;		_CC2500_ReadREG
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function _setRF_TimeoutCleared
 10235  264D                     _setRF_TimeoutCleared:	
 10236                           
 10237                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
 10238                           
 10239                           ;incstack = 0
 10240                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10241  264D  0021               	movlb	1	; select bank1
 10242  264E  01AD               	clrf	(_RF1^(0+128)+13)
 10243  264F  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10244  2650  0008               	return
 10245  2651                     __end_of_setRF_TimeoutCleared:	
 10246                           
 10247                           	psect	text53
 10248  1941                     __ptext53:	
 10249 ;; *************** function _RF_Timeout_Counter *****************
 10250 ;; Defined at:
 10251 ;;		line 141 in file "../src/RF_Control_B1.c"
 10252 ;; Parameters:    Size  Location     Type
 10253 ;;		None
 10254 ;; Auto vars:     Size  Location     Type
 10255 ;;		None
 10256 ;; Return value:  Size  Location     Type
 10257 ;;		None               void
 10258 ;; Registers used:
 10259 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/0
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;Total ram usage:        0 bytes
 10270 ;; Hardware stack levels used:    1
 10271 ;; Hardware stack levels required when called:    5
 10272 ;; This function calls:
 10273 ;;		Nothing
 10274 ;; This function is called by:
 10275 ;;		_CC2500_TxData
 10276 ;;		_CC2500_RxData
 10277 ;;		_CC2500_PowerRST
 10278 ;;		_CC2500_WriteREG
 10279 ;;		_CC2500_WriteCommand
 10280 ;;		_CC2500_ReadStatus
 10281 ;;		_CC2500_ReadREG
 10282 ;; This function uses a non-reentrant model
 10283 ;;
 10284                           
 10285                           
 10286                           ;psect for function _RF_Timeout_Counter
 10287  1941                     _RF_Timeout_Counter:	
 10288                           
 10289                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
 10290                           
 10291                           ;incstack = 0
 10292                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10293  1941  3001               	movlw	1
 10294  1942  0021               	movlb	1	; select bank1
 10295  1943  07AD               	addwf	(_RF1^(0+128)+13),f
 10296  1944  3000               	movlw	0
 10297  1945  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
 10298                           
 10299                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
 10300  1946  300D               	movlw	13
 10301  1947  3EA0               	addlw	_RF1& (0+255)
 10302  1948  0086               	movwf	6
 10303  1949  0187               	clrf	7
 10304  194A  3F40               	moviw [0]fsr1
 10305  194B  3AA8               	xorlw	168
 10306  194C  1D03               	skipz
 10307  194D  2950               	goto	u10655
 10308  194E  3F41               	moviw [1]fsr1
 10309  194F  3A61               	xorlw	97
 10310  1950                     u10655:	
 10311  1950  1D03               	skipz
 10312  1951  0008               	return
 10313                           
 10314                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
 10315  1952  01AD               	clrf	(_RF1^(0+128)+13)
 10316  1953  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10317                           
 10318                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
 10319  1954  1721               	bsf	(_RF1^(0+128)+1),6
 10320  1955  0008               	return
 10321  1956                     __end_of_RF_Timeout_Counter:	
 10322                           
 10323                           	psect	text54
 10324  1A50                     __ptext54:	
 10325 ;; *************** function _CC2500_WriteByte *****************
 10326 ;; Defined at:
 10327 ;;		line 226 in file "../src/CC2500_B1.c"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;		None
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10332 ;; Return value:  Size  Location     Type
 10333 ;;		None               void
 10334 ;; Registers used:
 10335 ;;		wreg, status,2, status,0
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;Total ram usage:        2 bytes
 10346 ;; Hardware stack levels used:    1
 10347 ;; Hardware stack levels required when called:    5
 10348 ;; This function calls:
 10349 ;;		Nothing
 10350 ;; This function is called by:
 10351 ;;		_CC2500_TxData
 10352 ;;		_CC2500_RxData
 10353 ;;		_CC2500_PowerRST
 10354 ;;		_CC2500_WriteREG
 10355 ;;		_CC2500_WriteCommand
 10356 ;;		_CC2500_ReadStatus
 10357 ;;		_CC2500_ReadREG
 10358 ;; This function uses a non-reentrant model
 10359 ;;
 10360                           
 10361                           
 10362                           ;psect for function _CC2500_WriteByte
 10363  1A50                     _CC2500_WriteByte:	
 10364                           
 10365                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10366                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10367                           
 10368                           ;incstack = 0
 10369                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10370  1A50  0020               	movlb	0	; select bank0
 10371  1A51  01A1               	clrf	CC2500_WriteByte@loop_a
 10372  1A52                     L7:	
 10373  1A52  3008               	movlw	8
 10374  1A53  0221               	subwf	CC2500_WriteByte@loop_a,w
 10375  1A54  1803               	btfsc	3,0
 10376  1A55  0008               	return
 10377                           
 10378                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10379  1A56  0021               	movlb	1	; select bank1
 10380  1A57  1FDF               	btfss	_SPI0Buffer^(0+128),7
 10381  1A58  2A5C               	goto	l327
 10382                           
 10383                           ;CC2500_B1.c: 230: RC0 = 1;
 10384  1A59  0020               	movlb	0	; select bank0
 10385  1A5A  140E               	bsf	14,0	;volatile
 10386  1A5B  2A5E               	goto	l328
 10387  1A5C                     l327:	
 10388                           
 10389                           ;CC2500_B1.c: 231: else
 10390                           ;CC2500_B1.c: 232: RC0 = 0;
 10391  1A5C  0020               	movlb	0	; select bank0
 10392  1A5D  100E               	bcf	14,0	;volatile
 10393  1A5E                     l328:	
 10394                           
 10395                           ;CC2500_B1.c: 233: RC1 = 1;
 10396  1A5E  148E               	bsf	14,1	;volatile
 10397                           
 10398                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10399  1A5F  1003               	clrc
 10400  1A60  0021               	movlb	1	; select bank1
 10401  1A61  0DDF               	rlf	_SPI0Buffer^(0+128),f
 10402                           
 10403                           ;CC2500_B1.c: 235: RC1 = 0;
 10404  1A62  0020               	movlb	0	; select bank0
 10405  1A63  108E               	bcf	14,1	;volatile
 10406  1A64  3001               	movlw	1
 10407  1A65  00A0               	movwf	??_CC2500_WriteByte
 10408  1A66  0820               	movf	??_CC2500_WriteByte,w
 10409  1A67  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10410  1A68  2A52               	goto	L7
 10411  1A69                     __end_of_CC2500_WriteByte:	
 10412                           
 10413                           	psect	text55
 10414  263D                     __ptext55:	
 10415 ;; *************** function _RF_Initialization *****************
 10416 ;; Defined at:
 10417 ;;		line 9 in file "../src/RF_Control_B1.c"
 10418 ;; Parameters:    Size  Location     Type
 10419 ;;		None
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;		None
 10422 ;; Return value:  Size  Location     Type
 10423 ;;		None               void
 10424 ;; Registers used:
 10425 ;;		wreg, status,2, status,0, pclath, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;Total ram usage:        0 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    6
 10438 ;; This function calls:
 10439 ;;		_setRF_Initialization
 10440 ;; This function is called by:
 10441 ;;		_main
 10442 ;; This function uses a non-reentrant model
 10443 ;;
 10444                           
 10445                           
 10446                           ;psect for function _RF_Initialization
 10447  263D                     _RF_Initialization:	
 10448                           
 10449                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10450                           
 10451                           ;incstack = 0
 10452                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10453  263D  31A6  26DB         	fcall	_setRF_Initialization
 10454  263F  0008               	return
 10455  2640                     __end_of_RF_Initialization:	
 10456                           
 10457                           	psect	text56
 10458  26DB                     __ptext56:	
 10459 ;; *************** function _setRF_Initialization *****************
 10460 ;; Defined at:
 10461 ;;		line 17 in file "../src/RF_Control_B1.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;		None
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;		None
 10466 ;; Return value:  Size  Location     Type
 10467 ;;		None               void
 10468 ;; Registers used:
 10469 ;;		wreg
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;Total ram usage:        1 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    5
 10482 ;; This function calls:
 10483 ;;		Nothing
 10484 ;; This function is called by:
 10485 ;;		_RF_Initialization
 10486 ;; This function uses a non-reentrant model
 10487 ;;
 10488                           
 10489                           
 10490                           ;psect for function _setRF_Initialization
 10491  26DB                     _setRF_Initialization:	
 10492                           
 10493                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10494                           
 10495                           ;incstack = 0
 10496                           ; Regs used in _setRF_Initialization: [wreg]
 10497  26DB  3015               	movlw	21
 10498  26DC  0020               	movlb	0	; select bank0
 10499  26DD  00A0               	movwf	??_setRF_Initialization
 10500  26DE  0820               	movf	??_setRF_Initialization,w
 10501  26DF  0021               	movlb	1	; select bank1
 10502  26E0  00E1               	movwf	_Tx_Length^(0+128)
 10503                           
 10504                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10505  26E1  30C8               	movlw	200
 10506  26E2  00A8               	movwf	(_RF1^(0+128)+8)
 10507  26E3  3000               	movlw	0
 10508  26E4  00A9               	movwf	(_RF1^(0+128)+9)
 10509  26E5  0008               	return
 10510  26E6                     __end_of_setRF_Initialization:	
 10511                           
 10512                           	psect	text57
 10513  1897                     __ptext57:	
 10514 ;; *************** function _Mcu_Initialization *****************
 10515 ;; Defined at:
 10516 ;;		line 30 in file "../src/MCU_B1.c"
 10517 ;; Parameters:    Size  Location     Type
 10518 ;;		None
 10519 ;; Auto vars:     Size  Location     Type
 10520 ;;		None
 10521 ;; Return value:  Size  Location     Type
 10522 ;;		None               void
 10523 ;; Registers used:
 10524 ;;		wreg, status,2, status,0, pclath, cstack
 10525 ;; Tracked objects:
 10526 ;;		On entry : 0/0
 10527 ;;		On exit  : 0/0
 10528 ;;		Unchanged: 0/0
 10529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;Total ram usage:        0 bytes
 10535 ;; Hardware stack levels used:    1
 10536 ;; Hardware stack levels required when called:    6
 10537 ;; This function calls:
 10538 ;;		_ADC_Set
 10539 ;;		_Fosc_Set
 10540 ;;		_IOC_Set
 10541 ;;		_IO_Set
 10542 ;;		_TMR1_Set
 10543 ;;		_WDT_Set
 10544 ;; This function is called by:
 10545 ;;		_main
 10546 ;; This function uses a non-reentrant model
 10547 ;;
 10548                           
 10549                           
 10550                           ;psect for function _Mcu_Initialization
 10551  1897                     _Mcu_Initialization:	
 10552                           
 10553                           ;MCU_B1.c: 32: Fosc_Set();
 10554                           
 10555                           ;incstack = 0
 10556                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10557  1897  31A6  2649  3198   	fcall	_Fosc_Set
 10558                           
 10559                           ;MCU_B1.c: 34: IO_Set();
 10560  189A  319A  2283  3198   	fcall	_IO_Set
 10561                           
 10562                           ;MCU_B1.c: 36: ;;
 10563                           ;MCU_B1.c: 38: TMR1_Set();
 10564  189D  31A7  2745  3198   	fcall	_TMR1_Set
 10565                           
 10566                           ;MCU_B1.c: 40: ADC_Set();
 10567  18A0  31A6  2674  3198   	fcall	_ADC_Set
 10568                           
 10569                           ;MCU_B1.c: 42: ;;
 10570                           ;MCU_B1.c: 44: ;;
 10571                           ;MCU_B1.c: 46: IOC_Set();
 10572  18A3  31A6  26D0  3198   	fcall	_IOC_Set
 10573                           
 10574                           ;MCU_B1.c: 48: ;;
 10575                           ;MCU_B1.c: 50: ;;
 10576                           ;MCU_B1.c: 52: WDT_Set();
 10577  18A6  31A7  2751         	fcall	_WDT_Set
 10578  18A8  0008               	return
 10579  18A9                     __end_of_Mcu_Initialization:	
 10580                           
 10581                           	psect	text58
 10582  2751                     __ptext58:	
 10583 ;; *************** function _WDT_Set *****************
 10584 ;; Defined at:
 10585 ;;		line 1102 in file "../src/MCU_B1.c"
 10586 ;; Parameters:    Size  Location     Type
 10587 ;;		None
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;		None
 10590 ;; Return value:  Size  Location     Type
 10591 ;;		None               void
 10592 ;; Registers used:
 10593 ;;		wreg
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;Total ram usage:        1 bytes
 10604 ;; Hardware stack levels used:    1
 10605 ;; Hardware stack levels required when called:    5
 10606 ;; This function calls:
 10607 ;;		Nothing
 10608 ;; This function is called by:
 10609 ;;		_Mcu_Initialization
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           
 10614                           ;psect for function _WDT_Set
 10615  2751                     _WDT_Set:	
 10616                           
 10617                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in _WDT_Set: [wreg]
 10621  2751  3017               	movlw	23
 10622  2752  0021               	movlb	1	; select bank1
 10623  2753  0097               	movwf	23	;volatile
 10624                           
 10625                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10626  2754  0022               	movlb	2	; select bank2
 10627  2755  1436               	bsf	_WDT^(0+256),0
 10628                           
 10629                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10630  2756  300A               	movlw	10
 10631  2757  0020               	movlb	0	; select bank0
 10632  2758  00A0               	movwf	??_WDT_Set
 10633  2759  0820               	movf	??_WDT_Set,w
 10634  275A  0022               	movlb	2	; select bank2
 10635  275B  00B7               	movwf	(_WDT^(0+256)+1)
 10636  275C  0008               	return
 10637  275D                     __end_of_WDT_Set:	
 10638                           
 10639                           	psect	text59
 10640  2745                     __ptext59:	
 10641 ;; *************** function _TMR1_Set *****************
 10642 ;; Defined at:
 10643 ;;		line 226 in file "../src/MCU_B1.c"
 10644 ;; Parameters:    Size  Location     Type
 10645 ;;		None
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;		None
 10648 ;; Return value:  Size  Location     Type
 10649 ;;		None               void
 10650 ;; Registers used:
 10651 ;;		wreg
 10652 ;; Tracked objects:
 10653 ;;		On entry : 0/0
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;Total ram usage:        0 bytes
 10662 ;; Hardware stack levels used:    1
 10663 ;; Hardware stack levels required when called:    5
 10664 ;; This function calls:
 10665 ;;		Nothing
 10666 ;; This function is called by:
 10667 ;;		_Mcu_Initialization
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           
 10672                           ;psect for function _TMR1_Set
 10673  2745                     _TMR1_Set:	
 10674                           
 10675                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10676                           
 10677                           ;incstack = 0
 10678                           ; Regs used in _TMR1_Set: [wreg]
 10679  2745  3041               	movlw	65
 10680  2746  0020               	movlb	0	; select bank0
 10681  2747  0098               	movwf	24	;volatile
 10682                           
 10683                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10684  2748  30FA               	movlw	250
 10685  2749  0097               	movwf	23	;volatile
 10686                           
 10687                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10688  274A  3038               	movlw	56
 10689  274B  0096               	movwf	22	;volatile
 10690                           
 10691                           ;MCU_B1.c: 230: TMR1IE = 1;
 10692  274C  0021               	movlb	1	; select bank1
 10693  274D  1411               	bsf	17,0	;volatile
 10694                           
 10695                           ;MCU_B1.c: 231: PEIE = 1;
 10696  274E  170B               	bsf	11,6	;volatile
 10697                           
 10698                           ;MCU_B1.c: 232: GIE = 1;
 10699  274F  178B               	bsf	11,7	;volatile
 10700  2750  0008               	return
 10701  2751                     __end_of_TMR1_Set:	
 10702                           
 10703                           	psect	text60
 10704  1A83                     __ptext60:	
 10705 ;; *************** function _IO_Set *****************
 10706 ;; Defined at:
 10707 ;;		line 60 in file "../src/MCU_B1.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;		None
 10712 ;; Return value:  Size  Location     Type
 10713 ;;		None               void
 10714 ;; Registers used:
 10715 ;;		wreg, status,2
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;Total ram usage:        0 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:    5
 10728 ;; This function calls:
 10729 ;;		Nothing
 10730 ;; This function is called by:
 10731 ;;		_Mcu_Initialization
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           
 10736                           ;psect for function _IO_Set
 10737  1A83                     _IO_Set:	
 10738                           
 10739                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10740                           
 10741                           ;incstack = 0
 10742                           ; Regs used in _IO_Set: [wreg+status,2]
 10743  1A83  3077               	movlw	119
 10744  1A84  0021               	movlb	1	; select bank1
 10745  1A85  008C               	movwf	12	;volatile
 10746                           
 10747                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10748  1A86  3007               	movlw	7
 10749  1A87  008D               	movwf	13	;volatile
 10750                           
 10751                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10752  1A88  300C               	movlw	12
 10753  1A89  008E               	movwf	14	;volatile
 10754                           
 10755                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10756  1A8A  0022               	movlb	2	; select bank2
 10757  1A8B  018C               	clrf	12	;volatile
 10758                           
 10759                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10760  1A8C  3002               	movlw	2
 10761  1A8D  008D               	movwf	13	;volatile
 10762                           
 10763                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10764  1A8E  018E               	clrf	14	;volatile
 10765                           
 10766                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10767  1A8F  3022               	movlw	34
 10768  1A90  0023               	movlb	3	; select bank3
 10769  1A91  008C               	movwf	12	;volatile
 10770                           
 10771                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10772  1A92  018D               	clrf	13	;volatile
 10773                           
 10774                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10775  1A93  018E               	clrf	14	;volatile
 10776                           
 10777                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10778  1A94  3077               	movlw	119
 10779  1A95  0020               	movlb	0	; select bank0
 10780  1A96  008C               	movwf	12	;volatile
 10781                           
 10782                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10783  1A97  3007               	movlw	7
 10784  1A98  008D               	movwf	13	;volatile
 10785                           
 10786                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10787  1A99  300C               	movlw	12
 10788  1A9A  008E               	movwf	14	;volatile
 10789                           
 10790                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10791  1A9B  0024               	movlb	4	; select bank4
 10792  1A9C  018D               	clrf	13	;volatile
 10793  1A9D  0008               	return
 10794  1A9E                     __end_of_IO_Set:	
 10795                           
 10796                           	psect	text61
 10797  26D0                     __ptext61:	
 10798 ;; *************** function _IOC_Set *****************
 10799 ;; Defined at:
 10800 ;;		line 380 in file "../src/MCU_B1.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;		None
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;		None
 10805 ;; Return value:  Size  Location     Type
 10806 ;;		None               void
 10807 ;; Registers used:
 10808 ;;		wreg, status,2
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;Total ram usage:        0 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    5
 10821 ;; This function calls:
 10822 ;;		Nothing
 10823 ;; This function is called by:
 10824 ;;		_Mcu_Initialization
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _IOC_Set
 10830  26D0                     _IOC_Set:	
 10831                           
 10832                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10833                           
 10834                           ;incstack = 0
 10835                           ; Regs used in _IOC_Set: [wreg+status,2]
 10836  26D0  3004               	movlw	4
 10837  26D1  0027               	movlb	7	; select bank7
 10838  26D2  0094               	movwf	20	;volatile
 10839                           
 10840                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10841  26D3  3004               	movlw	4
 10842  26D4  0095               	movwf	21	;volatile
 10843                           
 10844                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10845  26D5  0196               	clrf	22	;volatile
 10846                           
 10847                           ;MCU_B1.c: 387: IOCIE = 1;
 10848  26D6  158B               	bsf	11,3	;volatile
 10849                           
 10850                           ;MCU_B1.c: 388: IOCIF = 0;
 10851  26D7  100B               	bcf	11,0	;volatile
 10852                           
 10853                           ;MCU_B1.c: 389: PEIE = 1;
 10854  26D8  170B               	bsf	11,6	;volatile
 10855                           
 10856                           ;MCU_B1.c: 390: GIE = 1;
 10857  26D9  178B               	bsf	11,7	;volatile
 10858  26DA  0008               	return
 10859  26DB                     __end_of_IOC_Set:	
 10860                           
 10861                           	psect	text62
 10862  2649                     __ptext62:	
 10863 ;; *************** function _Fosc_Set *****************
 10864 ;; Defined at:
 10865 ;;		line 56 in file "../src/MCU_B1.c"
 10866 ;; Parameters:    Size  Location     Type
 10867 ;;		None
 10868 ;; Auto vars:     Size  Location     Type
 10869 ;;		None
 10870 ;; Return value:  Size  Location     Type
 10871 ;;		None               void
 10872 ;; Registers used:
 10873 ;;		wreg
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;Total ram usage:        0 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; Hardware stack levels required when called:    5
 10886 ;; This function calls:
 10887 ;;		Nothing
 10888 ;; This function is called by:
 10889 ;;		_Mcu_Initialization
 10890 ;; This function uses a non-reentrant model
 10891 ;;
 10892                           
 10893                           
 10894                           ;psect for function _Fosc_Set
 10895  2649                     _Fosc_Set:	
 10896                           
 10897                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10898                           
 10899                           ;incstack = 0
 10900                           ; Regs used in _Fosc_Set: [wreg]
 10901  2649  3078               	movlw	120
 10902  264A  0021               	movlb	1	; select bank1
 10903  264B  0099               	movwf	25	;volatile
 10904  264C  0008               	return
 10905  264D                     __end_of_Fosc_Set:	
 10906                           
 10907                           	psect	text63
 10908  2674                     __ptext63:	
 10909 ;; *************** function _ADC_Set *****************
 10910 ;; Defined at:
 10911 ;;		line 427 in file "../src/MCU_B1.c"
 10912 ;; Parameters:    Size  Location     Type
 10913 ;;		None
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;		None
 10916 ;; Return value:  Size  Location     Type
 10917 ;;		None               void
 10918 ;; Registers used:
 10919 ;;		wreg
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;Total ram usage:        0 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; Hardware stack levels required when called:    5
 10932 ;; This function calls:
 10933 ;;		Nothing
 10934 ;; This function is called by:
 10935 ;;		_Mcu_Initialization
 10936 ;; This function uses a non-reentrant model
 10937 ;;
 10938                           
 10939                           
 10940                           ;psect for function _ADC_Set
 10941  2674                     _ADC_Set:	
 10942                           
 10943                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10944                           
 10945                           ;incstack = 0
 10946                           ; Regs used in _ADC_Set: [wreg]
 10947  2674  30F3               	movlw	243
 10948  2675  0021               	movlb	1	; select bank1
 10949  2676  009E               	movwf	30	;volatile
 10950                           
 10951                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10952  2677  30C1               	movlw	193
 10953  2678  0022               	movlb	2	; select bank2
 10954  2679  0097               	movwf	23	;volatile
 10955  267A  0008               	return
 10956  267B                     __end_of_ADC_Set:	
 10957                           
 10958                           	psect	text64
 10959  0053                     __ptext64:	
 10960 ;; *************** function _Load_Main *****************
 10961 ;; Defined at:
 10962 ;;		line 40 in file "../src/OverLoad_B1.c"
 10963 ;; Parameters:    Size  Location     Type
 10964 ;;		None
 10965 ;; Auto vars:     Size  Location     Type
 10966 ;;  i               2   16[BANK0 ] int 
 10967 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10968 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10969 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10970 ;;  error           1   12[BANK0 ] unsigned char 
 10971 ;; Return value:  Size  Location     Type
 10972 ;;		None               void
 10973 ;; Registers used:
 10974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;Total ram usage:       10 bytes
 10985 ;; Hardware stack levels used:    1
 10986 ;; Hardware stack levels required when called:    6
 10987 ;; This function calls:
 10988 ;;		___lwdiv
 10989 ;;		___wmul
 10990 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10991 ;;		_getDimmer_LoadGO
 10992 ;;		_getDimmer_Load_Status
 10993 ;;		_getMain_All_Error_Status
 10994 ;;		_getMain_All_LightsStatus
 10995 ;;		_getMain_Lights_Count
 10996 ;;		_setLoad_AH_AL_Restore
 10997 ;; This function is called by:
 10998 ;;		_main
 10999 ;; This function uses a non-reentrant model
 11000 ;;
 11001                           
 11002                           
 11003                           ;psect for function _Load_Main
 11004  0053                     _Load_Main:	
 11005                           
 11006                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 11007                           
 11008                           ;incstack = 0
 11009                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11010  0053  3000               	movlw	0
 11011  0054  319E  2638  3180   	fcall	_getMain_All_Error_Status
 11012  0057  0020               	movlb	0	; select bank0
 11013  0058  00A8               	movwf	??_Load_Main
 11014  0059  0828               	movf	??_Load_Main,w
 11015  005A  00AC               	movwf	Load_Main@error
 11016                           
 11017                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 11018  005B  01AE               	clrf	Load_Main@Load_RunStatus
 11019  005C  01AD               	clrf	Load_Main@ErrorCountValue
 11020  005D  01AF               	clrf	Load_Main@LightsCount
 11021                           
 11022                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 11023  005E  0022               	movlb	2	; select bank2
 11024  005F  1C38               	btfss	_Load^(0+256),0
 11025  0060  29FF               	goto	l1644
 11026                           
 11027                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 11028  0061  3198  20E1  3180   	fcall	_getMain_All_LightsStatus
 11029  0064  3800               	iorlw	0
 11030  0065  1D03               	skipz
 11031  0066  2869               	goto	l9175
 11032                           
 11033                           ;OverLoad_B1.c: 46: Load.GO = 0;
 11034  0067  0022               	movlb	2	; select bank2
 11035  0068  288A               	goto	l9193
 11036  0069                     l9175:	
 11037                           ;OverLoad_B1.c: 47: } else {
 11038                           
 11039                           
 11040                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 11041  0069  0020               	movlb	0	; select bank0
 11042  006A  08AC               	movf	Load_Main@error,f
 11043  006B  1D03               	skipz
 11044  006C  2887               	goto	l1647
 11045  006D  319C  2409  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 11046  0070  3800               	iorlw	0
 11047  0071  1D03               	skipz
 11048  0072  2887               	goto	l1647
 11049                           
 11050                           ;OverLoad_B1.c: 51: Load.GO = 1;
 11051  0073  0022               	movlb	2	; select bank2
 11052  0074  14B8               	bsf	_Load^(0+256),1
 11053                           
 11054                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 11055  0075  31A6  2693  3180   	fcall	_getDimmer_LoadGO
 11056  0078  3A01               	xorlw	1
 11057  0079  1D03               	skipz
 11058  007A  2882               	goto	l1648
 11059                           
 11060                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 11061  007B  0022               	movlb	2	; select bank2
 11062  007C  1DB8               	btfss	_Load^(0+256),3
 11063  007D  1BB8               	btfsc	_Load^(0+256),7
 11064  007E  288B               	goto	l1646
 11065                           
 11066                           ;OverLoad_B1.c: 55: Load.Run = 1;
 11067  007F  15B8               	bsf	_Load^(0+256),3
 11068                           
 11069                           ;OverLoad_B1.c: 56: Load.Count = 0;
 11070  0080  01DD               	clrf	(_Load^(0+256)+37)
 11071                           
 11072                           ;OverLoad_B1.c: 57: }
 11073                           ;OverLoad_B1.c: 58: } else {
 11074  0081  288B               	goto	l1646
 11075  0082                     l1648:	
 11076                           
 11077                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 11078  0082  0022               	movlb	2	; select bank2
 11079  0083  1FB8               	btfss	_Load^(0+256),7
 11080  0084  288B               	goto	l1646
 11081                           
 11082                           ;OverLoad_B1.c: 60: Load.OK = 0;
 11083  0085  13B8               	bcf	_Load^(0+256),7
 11084                           
 11085                           ;OverLoad_B1.c: 61: }
 11086                           ;OverLoad_B1.c: 62: }
 11087                           ;OverLoad_B1.c: 63: } else {
 11088  0086  288B               	goto	l1646
 11089  0087                     l1647:	
 11090                           
 11091                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 11092  0087  0022               	movlb	2	; select bank2
 11093  0088  1CB8               	btfss	_Load^(0+256),1
 11094  0089  288B               	goto	l1646
 11095  008A                     l9193:	
 11096                           
 11097                           ;OverLoad_B1.c: 65: Load.GO = 0;
 11098  008A  10B8               	bcf	_Load^(0+256),1
 11099  008B                     l1646:	
 11100                           
 11101                           ;OverLoad_B1.c: 66: }
 11102                           ;OverLoad_B1.c: 67: }
 11103                           ;OverLoad_B1.c: 89: }
 11104                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 11105  008B  1CB8               	btfss	_Load^(0+256),1
 11106  008C  29DB               	goto	l1654
 11107                           
 11108                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 11109  008D  1538               	bsf	_Load^(0+256),2
 11110                           
 11111                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 11112  008E  1E38               	btfss	_Load^(0+256),4
 11113  008F  29D9               	goto	l1655
 11114                           
 11115                           ;OverLoad_B1.c: 96: Load.Time++;
 11116  0090  3001               	movlw	1
 11117  0091  07B9               	addwf	(_Load^(0+256)+1),f
 11118  0092  3000               	movlw	0
 11119  0093  3DBA               	addwfc	((_Load+1)^(0+256)+1),f
 11120                           
 11121                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 11122  0094  3000               	movlw	0
 11123  0095  023A               	subwf	((_Load+1)^(0+256)+1),w
 11124  0096  3002               	movlw	2
 11125  0097  1903               	skipnz
 11126  0098  0239               	subwf	(_Load^(0+256)+1),w
 11127  0099  1C03               	skipc
 11128  009A  0008               	return
 11129                           
 11130                           ;OverLoad_B1.c: 98: Load.Time = 0;
 11131  009B  01B9               	clrf	(_Load^(0+256)+1)
 11132  009C  01BA               	clrf	((_Load+1)^(0+256)+1)
 11133                           
 11134                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 11135  009D  1238               	bcf	_Load^(0+256),4
 11136                           
 11137                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 11138  009E  3001               	movlw	1
 11139  009F  0020               	movlb	0	; select bank0
 11140  00A0  00B0               	movwf	Load_Main@i
 11141  00A1  3000               	movlw	0
 11142  00A2  00B1               	movwf	Load_Main@i+1
 11143  00A3  0831               	movf	Load_Main@i+1,w
 11144  00A4  3A80               	xorlw	128
 11145  00A5  00A8               	movwf	??_Load_Main
 11146  00A6  3080               	movlw	128
 11147  00A7  0228               	subwf	??_Load_Main,w
 11148  00A8  1D03               	skipz
 11149  00A9  28AC               	goto	u10005
 11150  00AA  3004               	movlw	4
 11151  00AB  0230               	subwf	Load_Main@i,w
 11152  00AC                     u10005:	
 11153  00AC  1803               	btfsc	3,0
 11154  00AD  28E0               	goto	l9215
 11155  00AE                     l9209:	
 11156                           
 11157                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 11158  00AE  0020               	movlb	0	; select bank0
 11159  00AF  3530               	lslf	Load_Main@i,w
 11160  00B0  3E43               	addlw	(_Load+11)& (0+255)
 11161  00B1  0086               	movwf	6
 11162  00B2  3001               	movlw	1	; select bank2/3
 11163  00B3  0087               	movwf	7
 11164  00B4  3F40               	moviw [0]fsr1
 11165  00B5  00A8               	movwf	??_Load_Main
 11166  00B6  3F41               	moviw [1]fsr1
 11167  00B7  00A9               	movwf	??_Load_Main+1
 11168  00B8  0828               	movf	??_Load_Main,w
 11169  00B9  0022               	movlb	2	; select bank2
 11170  00BA  07BD               	addwf	(_Load^(0+256)+5),f
 11171  00BB  0020               	movlb	0	; select bank0
 11172  00BC  0829               	movf	??_Load_Main+1,w
 11173  00BD  0022               	movlb	2	; select bank2
 11174  00BE  3DBE               	addwfc	((_Load+1)^(0+256)+5),f
 11175                           
 11176                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11177  00BF  0020               	movlb	0	; select bank0
 11178  00C0  3530               	lslf	Load_Main@i,w
 11179  00C1  3E4D               	addlw	(_Load+21)& (0+255)
 11180  00C2  0086               	movwf	6
 11181  00C3  3001               	movlw	1	; select bank2/3
 11182  00C4  0087               	movwf	7
 11183  00C5  3F40               	moviw [0]fsr1
 11184  00C6  00A8               	movwf	??_Load_Main
 11185  00C7  3F41               	moviw [1]fsr1
 11186  00C8  00A9               	movwf	??_Load_Main+1
 11187  00C9  0828               	movf	??_Load_Main,w
 11188  00CA  0022               	movlb	2	; select bank2
 11189  00CB  07BF               	addwf	(_Load^(0+256)+7),f
 11190  00CC  0020               	movlb	0	; select bank0
 11191  00CD  0829               	movf	??_Load_Main+1,w
 11192  00CE  0022               	movlb	2	; select bank2
 11193  00CF  3DC0               	addwfc	((_Load+1)^(0+256)+7),f
 11194  00D0  3001               	movlw	1
 11195  00D1  0020               	movlb	0	; select bank0
 11196  00D2  07B0               	addwf	Load_Main@i,f
 11197  00D3  3000               	movlw	0
 11198  00D4  3DB1               	addwfc	Load_Main@i+1,f
 11199  00D5  0831               	movf	Load_Main@i+1,w
 11200  00D6  3A80               	xorlw	128
 11201  00D7  00A8               	movwf	??_Load_Main
 11202  00D8  3080               	movlw	128
 11203  00D9  0228               	subwf	??_Load_Main,w
 11204  00DA  1D03               	skipz
 11205  00DB  28DE               	goto	u10015
 11206  00DC  3004               	movlw	4
 11207  00DD  0230               	subwf	Load_Main@i,w
 11208  00DE                     u10015:	
 11209  00DE  1C03               	skipc
 11210  00DF  28AE               	goto	l9209
 11211  00E0                     l9215:	
 11212                           
 11213                           ;OverLoad_B1.c: 104: }
 11214                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11215  00E0  3003               	movlw	3
 11216  00E1  0020               	movlb	0	; select bank0
 11217  00E2  00A0               	movwf	___lwdiv@divisor
 11218  00E3  3000               	movlw	0
 11219  00E4  00A1               	movwf	___lwdiv@divisor+1
 11220  00E5  0022               	movlb	2	; select bank2
 11221  00E6  083E               	movf	((_Load+1)^(0+256)+5),w
 11222  00E7  0020               	movlb	0	; select bank0
 11223  00E8  01A3               	clrf	___lwdiv@dividend+1
 11224  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 11225  00EA  0022               	movlb	2	; select bank2
 11226  00EB  083D               	movf	(_Load^(0+256)+5),w
 11227  00EC  0020               	movlb	0	; select bank0
 11228  00ED  01A2               	clrf	___lwdiv@dividend
 11229  00EE  07A2               	addwf	___lwdiv@dividend,f
 11230  00EF  319E  266B  3180   	fcall	___lwdiv
 11231  00F2  0020               	movlb	0	; select bank0
 11232  00F3  0821               	movf	?___lwdiv+1,w
 11233  00F4  0022               	movlb	2	; select bank2
 11234  00F5  01BE               	clrf	((_Load+1)^(0+256)+5)
 11235  00F6  07BE               	addwf	((_Load+1)^(0+256)+5),f
 11236  00F7  0020               	movlb	0	; select bank0
 11237  00F8  0820               	movf	?___lwdiv,w
 11238  00F9  0022               	movlb	2	; select bank2
 11239  00FA  01BD               	clrf	(_Load^(0+256)+5)
 11240  00FB  07BD               	addwf	(_Load^(0+256)+5),f
 11241                           
 11242                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11243  00FC  3003               	movlw	3
 11244  00FD  0020               	movlb	0	; select bank0
 11245  00FE  00A0               	movwf	___lwdiv@divisor
 11246  00FF  3000               	movlw	0
 11247  0100  00A1               	movwf	___lwdiv@divisor+1
 11248  0101  0022               	movlb	2	; select bank2
 11249  0102  0840               	movf	((_Load+1)^(0+256)+7),w
 11250  0103  0020               	movlb	0	; select bank0
 11251  0104  01A3               	clrf	___lwdiv@dividend+1
 11252  0105  07A3               	addwf	___lwdiv@dividend+1,f
 11253  0106  0022               	movlb	2	; select bank2
 11254  0107  083F               	movf	(_Load^(0+256)+7),w
 11255  0108  0020               	movlb	0	; select bank0
 11256  0109  01A2               	clrf	___lwdiv@dividend
 11257  010A  07A2               	addwf	___lwdiv@dividend,f
 11258  010B  319E  266B  3180   	fcall	___lwdiv
 11259  010E  0020               	movlb	0	; select bank0
 11260  010F  0821               	movf	?___lwdiv+1,w
 11261  0110  0022               	movlb	2	; select bank2
 11262  0111  01C0               	clrf	((_Load+1)^(0+256)+7)
 11263  0112  07C0               	addwf	((_Load+1)^(0+256)+7),f
 11264  0113  0020               	movlb	0	; select bank0
 11265  0114  0820               	movf	?___lwdiv,w
 11266  0115  0022               	movlb	2	; select bank2
 11267  0116  01BF               	clrf	(_Load^(0+256)+7)
 11268  0117  07BF               	addwf	(_Load^(0+256)+7),f
 11269                           
 11270                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11271  0118  319A  22B9  3180   	fcall	_setLoad_AH_AL_Restore
 11272                           
 11273                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11274  011B  0022               	movlb	2	; select bank2
 11275  011C  0840               	movf	((_Load+1)^(0+256)+7),w
 11276  011D  023E               	subwf	((_Load+1)^(0+256)+5),w
 11277  011E  1D03               	skipz
 11278  011F  2922               	goto	u10025
 11279  0120  083F               	movf	(_Load^(0+256)+7),w
 11280  0121  023D               	subwf	(_Load^(0+256)+5),w
 11281  0122                     u10025:	
 11282  0122  1C03               	skipc
 11283  0123  0008               	return
 11284                           
 11285                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11286  0124  3005               	movlw	5
 11287  0125  3E38               	addlw	_Load& (0+255)
 11288  0126  0086               	movwf	6
 11289  0127  3001               	movlw	1	; select bank2/3
 11290  0128  0087               	movwf	7
 11291  0129  093F               	comf	(_Load^(0+256)+7),w
 11292  012A  0020               	movlb	0	; select bank0
 11293  012B  00A8               	movwf	??_Load_Main
 11294  012C  0022               	movlb	2	; select bank2
 11295  012D  0940               	comf	((_Load+1)^(0+256)+7),w
 11296  012E  0020               	movlb	0	; select bank0
 11297  012F  00A9               	movwf	??_Load_Main+1
 11298  0130  0AA8               	incf	??_Load_Main,f
 11299  0131  1903               	skipnz
 11300  0132  0AA9               	incf	??_Load_Main+1,f
 11301  0133  3F40               	moviw [0]fsr1
 11302  0134  0728               	addwf	??_Load_Main,w
 11303  0135  0022               	movlb	2	; select bank2
 11304  0136  00D7               	movwf	(_Load^(0+256)+31)
 11305  0137  3F41               	moviw [1]fsr1
 11306  0138  0020               	movlb	0	; select bank0
 11307  0139  3D29               	addwfc	??_Load_Main+1,w
 11308  013A  0022               	movlb	2	; select bank2
 11309  013B  00D8               	movwf	(_Load^(0+256)+32)
 11310                           
 11311                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11312  013C  01BD               	clrf	(_Load^(0+256)+5)
 11313  013D  01BE               	clrf	((_Load+1)^(0+256)+5)
 11314                           
 11315                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11316  013E  01BF               	clrf	(_Load^(0+256)+7)
 11317  013F  01C0               	clrf	((_Load+1)^(0+256)+7)
 11318                           
 11319                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11320  0140  1DB8               	btfss	_Load^(0+256),3
 11321  0141  299B               	goto	l9255
 11322                           
 11323                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11324  0142  3002               	movlw	2
 11325  0143  025D               	subwf	(_Load^(0+256)+37),w
 11326  0144  1803               	skipnc
 11327  0145  299B               	goto	l9255
 11328                           
 11329                           ;OverLoad_B1.c: 117: Load.Count++;
 11330  0146  3001               	movlw	1
 11331  0147  0020               	movlb	0	; select bank0
 11332  0148  00A8               	movwf	??_Load_Main
 11333  0149  0828               	movf	??_Load_Main,w
 11334  014A  0022               	movlb	2	; select bank2
 11335  014B  07DD               	addwf	(_Load^(0+256)+37),f
 11336                           
 11337                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11338  014C  31A6  269B  3180   	fcall	_getDimmer_Load_Status
 11339  014F  0020               	movlb	0	; select bank0
 11340  0150  00A8               	movwf	??_Load_Main
 11341  0151  0828               	movf	??_Load_Main,w
 11342  0152  00AE               	movwf	Load_Main@Load_RunStatus
 11343                           
 11344                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11345  0153  3198  2085  3180   	fcall	_getMain_Lights_Count
 11346  0156  0020               	movlb	0	; select bank0
 11347  0157  00A8               	movwf	??_Load_Main
 11348  0158  0828               	movf	??_Load_Main,w
 11349  0159  00AF               	movwf	Load_Main@LightsCount
 11350                           
 11351                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11352  015A  0022               	movlb	2	; select bank2
 11353  015B  085D               	movf	(_Load^(0+256)+37),w
 11354  015C  3A01               	xorlw	1
 11355  015D  1D03               	skipz
 11356  015E  2963               	goto	l9241
 11357                           
 11358                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*56);
 11359  015F  3060               	movlw	96
 11360  0160  00DB               	movwf	(_Load^(0+256)+35)
 11361  0161  3004               	movlw	4
 11362  0162  2970               	goto	L8
 11363  0163                     l9241:	
 11364                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11365                           
 11366  0163  085D               	movf	(_Load^(0+256)+37),w
 11367  0164  3A02               	xorlw	2
 11368  0165  1D03               	skipz
 11369  0166  299B               	goto	l9255
 11370                           
 11371                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11372  0167  0020               	movlb	0	; select bank0
 11373  0168  082F               	movf	Load_Main@LightsCount,w
 11374  0169  3A01               	xorlw	1
 11375  016A  1D03               	skipz
 11376  016B  2972               	goto	l9247
 11377                           
 11378                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.2*56);
 11379  016C  3043               	movlw	67
 11380  016D  0022               	movlb	2	; select bank2
 11381  016E  00DB               	movwf	(_Load^(0+256)+35)
 11382  016F  3000               	movlw	0
 11383  0170                     L8:	
 11384  0170  00DC               	movwf	(_Load^(0+256)+36)
 11385                           
 11386                           ;OverLoad_B1.c: 132: } else {
 11387  0171  299B               	goto	l9255
 11388  0172                     l9247:	
 11389                           
 11390                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11391  0172  0020               	movlb	0	; select bank0
 11392  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 11393  0174  1D03               	skipz
 11394  0175  298F               	goto	l9251
 11395                           
 11396                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.2*56) * LightsCount;
 11397  0176  082F               	movf	Load_Main@LightsCount,w
 11398  0177  00A8               	movwf	??_Load_Main
 11399  0178  01A9               	clrf	??_Load_Main+1
 11400  0179  0828               	movf	??_Load_Main,w
 11401  017A  00A0               	movwf	___wmul@multiplier
 11402  017B  0829               	movf	??_Load_Main+1,w
 11403  017C  00A1               	movwf	___wmul@multiplier+1
 11404  017D  3043               	movlw	67
 11405  017E  00A2               	movwf	___wmul@multiplicand
 11406  017F  3000               	movlw	0
 11407  0180  00A3               	movwf	___wmul@multiplicand+1
 11408  0181  319B  232C  3180   	fcall	___wmul
 11409  0184  0020               	movlb	0	; select bank0
 11410  0185  0821               	movf	?___wmul+1,w
 11411  0186  0022               	movlb	2	; select bank2
 11412  0187  01DC               	clrf	((_Load+1)^(0+256)+35)
 11413  0188  07DC               	addwf	((_Load+1)^(0+256)+35),f
 11414  0189  0020               	movlb	0	; select bank0
 11415  018A  0820               	movf	?___wmul,w
 11416  018B  0022               	movlb	2	; select bank2
 11417  018C  01DB               	clrf	(_Load^(0+256)+35)
 11418  018D  07DB               	addwf	(_Load^(0+256)+35),f
 11419                           
 11420                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11421  018E  299B               	goto	l9255
 11422  018F                     l9251:	
 11423  018F  0020               	movlb	0	; select bank0
 11424  0190  082E               	movf	Load_Main@Load_RunStatus,w
 11425  0191  3A01               	xorlw	1
 11426  0192  1D03               	skipz
 11427  0193  299B               	goto	l9255
 11428                           
 11429                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.2*56) + Load.TotalLoad;
 11430  0194  0022               	movlb	2	; select bank2
 11431  0195  0841               	movf	(_Load^(0+256)+9),w
 11432  0196  3E43               	addlw	67
 11433  0197  00DB               	movwf	(_Load^(0+256)+35)
 11434  0198  3000               	movlw	0
 11435  0199  3D42               	addwfc	((_Load+1)^(0+256)+9),w
 11436  019A  00DC               	movwf	((_Load+1)^(0+256)+35)
 11437  019B                     l9255:	
 11438                           
 11439                           ;OverLoad_B1.c: 137: }
 11440                           ;OverLoad_B1.c: 138: }
 11441                           ;OverLoad_B1.c: 139: }
 11442                           ;OverLoad_B1.c: 140: }
 11443                           ;OverLoad_B1.c: 141: }
 11444                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11445  019B  0022               	movlb	2	; select bank2
 11446  019C  085C               	movf	((_Load+1)^(0+256)+35),w
 11447  019D  0258               	subwf	((_Load+1)^(0+256)+31),w
 11448  019E  1D03               	skipz
 11449  019F  29A2               	goto	u10105
 11450  01A0  085B               	movf	(_Load^(0+256)+35),w
 11451  01A1  0257               	subwf	(_Load^(0+256)+31),w
 11452  01A2                     u10105:	
 11453  01A2  1C03               	skipc
 11454  01A3  29C1               	goto	l9271
 11455                           
 11456                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11457  01A4  0020               	movlb	0	; select bank0
 11458  01A5  082F               	movf	Load_Main@LightsCount,w
 11459  01A6  3A01               	xorlw	1
 11460  01A7  1903               	skipnz
 11461  01A8  29AB               	goto	l9261
 11462  01A9  3003               	movlw	3
 11463  01AA  29AC               	goto	L9
 11464  01AB                     l9261:	
 11465  01AB  3002               	movlw	2
 11466  01AC                     L9:	
 11467  01AC  00AA               	movwf	_Load_Main$3837
 11468  01AD  3000               	movlw	0
 11469  01AE  00AB               	movwf	_Load_Main$3837+1
 11470  01AF  082A               	movf	_Load_Main$3837,w
 11471  01B0  00A8               	movwf	??_Load_Main
 11472  01B1  0828               	movf	??_Load_Main,w
 11473  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11474                           
 11475                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11476  01B3  3001               	movlw	1
 11477  01B4  00A8               	movwf	??_Load_Main
 11478  01B5  0828               	movf	??_Load_Main,w
 11479  01B6  0022               	movlb	2	; select bank2
 11480  01B7  07DE               	addwf	(_Load^(0+256)+38),f
 11481                           
 11482                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11483  01B8  085E               	movf	(_Load^(0+256)+38),w
 11484  01B9  0020               	movlb	0	; select bank0
 11485  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11486  01BB  1803               	skipnc
 11487  01BC  0008               	return
 11488                           
 11489                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11490  01BD  0022               	movlb	2	; select bank2
 11491  01BE  01DE               	clrf	(_Load^(0+256)+38)
 11492                           
 11493                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11494  01BF  16B8               	bsf	_Load^(0+256),5
 11495                           
 11496                           ;OverLoad_B1.c: 170: }
 11497                           ;OverLoad_B1.c: 171: } else {
 11498  01C0  0008               	return
 11499  01C1                     l9271:	
 11500                           
 11501                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11502  01C1  01DE               	clrf	(_Load^(0+256)+38)
 11503                           
 11504                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11505  01C2  1DB8               	btfss	_Load^(0+256),3
 11506  01C3  0008               	return
 11507                           
 11508                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11509  01C4  3001               	movlw	1
 11510  01C5  0020               	movlb	0	; select bank0
 11511  01C6  00A8               	movwf	??_Load_Main
 11512  01C7  0828               	movf	??_Load_Main,w
 11513  01C8  0022               	movlb	2	; select bank2
 11514  01C9  07DF               	addwf	(_Load^(0+256)+39),f
 11515                           
 11516                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11517  01CA  3003               	movlw	3
 11518  01CB  025F               	subwf	(_Load^(0+256)+39),w
 11519  01CC  1C03               	skipc
 11520  01CD  0008               	return
 11521                           
 11522                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11523  01CE  01DF               	clrf	(_Load^(0+256)+39)
 11524                           
 11525                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11526  01CF  17B8               	bsf	_Load^(0+256),7
 11527                           
 11528                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11529  01D0  11B8               	bcf	_Load^(0+256),3
 11530                           
 11531                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11532  01D1  01DD               	clrf	(_Load^(0+256)+37)
 11533                           
 11534                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11535  01D2  0858               	movf	((_Load+1)^(0+256)+31),w
 11536  01D3  01C2               	clrf	((_Load+1)^(0+256)+9)
 11537  01D4  07C2               	addwf	((_Load+1)^(0+256)+9),f
 11538  01D5  0857               	movf	(_Load^(0+256)+31),w
 11539  01D6  01C1               	clrf	(_Load^(0+256)+9)
 11540  01D7  07C1               	addwf	(_Load^(0+256)+9),f
 11541                           
 11542                           ;OverLoad_B1.c: 184: }
 11543                           ;OverLoad_B1.c: 185: }
 11544                           ;OverLoad_B1.c: 208: }
 11545                           ;OverLoad_B1.c: 209: }
 11546                           ;OverLoad_B1.c: 210: }
 11547                           ;OverLoad_B1.c: 211: } else {
 11548  01D8  0008               	return
 11549  01D9                     l1655:	
 11550                           
 11551                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11552  01D9  1638               	bsf	_Load^(0+256),4
 11553                           
 11554                           ;OverLoad_B1.c: 213: }
 11555                           ;OverLoad_B1.c: 214: } else {
 11556  01DA  0008               	return
 11557  01DB                     l1654:	
 11558                           
 11559                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11560  01DB  1D38               	btfss	_Load^(0+256),2
 11561  01DC  29EE               	goto	l9307
 11562                           
 11563                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11564  01DD  1138               	bcf	_Load^(0+256),2
 11565                           
 11566                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11567  01DE  1238               	bcf	_Load^(0+256),4
 11568                           
 11569                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11570  01DF  01B9               	clrf	(_Load^(0+256)+1)
 11571  01E0  01BA               	clrf	((_Load+1)^(0+256)+1)
 11572                           
 11573                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11574  01E1  319A  22B9  3180   	fcall	_setLoad_AH_AL_Restore
 11575                           
 11576                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11577  01E4  0022               	movlb	2	; select bank2
 11578  01E5  01DE               	clrf	(_Load^(0+256)+38)
 11579                           
 11580                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11581  01E6  01DF               	clrf	(_Load^(0+256)+39)
 11582                           
 11583                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11584  01E7  01BD               	clrf	(_Load^(0+256)+5)
 11585  01E8  01BE               	clrf	((_Load+1)^(0+256)+5)
 11586                           
 11587                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11588  01E9  01BF               	clrf	(_Load^(0+256)+7)
 11589  01EA  01C0               	clrf	((_Load+1)^(0+256)+7)
 11590                           
 11591                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11592  01EB  11B8               	bcf	_Load^(0+256),3
 11593                           
 11594                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11595  01EC  01DD               	clrf	(_Load^(0+256)+37)
 11596                           
 11597                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11598  01ED  13B8               	bcf	_Load^(0+256),7
 11599  01EE                     l9307:	
 11600                           
 11601                           ;OverLoad_B1.c: 257: }
 11602                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11603  01EE  1EB8               	btfss	_Load^(0+256),5
 11604  01EF  0008               	return
 11605                           
 11606                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11607  01F0  3001               	movlw	1
 11608  01F1  07BB               	addwf	(_Load^(0+256)+3),f
 11609  01F2  3000               	movlw	0
 11610  01F3  3DBC               	addwfc	((_Load+1)^(0+256)+3),f
 11611                           
 11612                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11613  01F4  3001               	movlw	1
 11614  01F5  023C               	subwf	((_Load+1)^(0+256)+3),w
 11615  01F6  30F4               	movlw	244
 11616  01F7  1903               	skipnz
 11617  01F8  023B               	subwf	(_Load^(0+256)+3),w
 11618  01F9  1C03               	skipc
 11619  01FA  0008               	return
 11620                           
 11621                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11622  01FB  01BB               	clrf	(_Load^(0+256)+3)
 11623  01FC  01BC               	clrf	((_Load+1)^(0+256)+3)
 11624                           
 11625                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11626  01FD  12B8               	bcf	_Load^(0+256),5
 11627                           
 11628                           ;OverLoad_B1.c: 263: }
 11629                           ;OverLoad_B1.c: 264: }
 11630                           ;OverLoad_B1.c: 265: }
 11631                           ;OverLoad_B1.c: 266: } else {
 11632  01FE  0008               	return
 11633  01FF                     l1644:	
 11634                           
 11635                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11636  01FF  0021               	movlb	1	; select bank1
 11637  0200  1C2F               	btfss	_myMain^(0+128),0
 11638  0201  0008               	return
 11639                           
 11640                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11641  0202  0022               	movlb	2	; select bank2
 11642  0203  1438               	bsf	_Load^(0+256),0
 11643  0204  0008               	return
 11644  0205                     __end_of_Load_Main:	
 11645                           
 11646                           	psect	text65
 11647  1885                     __ptext65:	
 11648 ;; *************** function _getMain_Lights_Count *****************
 11649 ;; Defined at:
 11650 ;;		line 459 in file "../src/main_B1.c"
 11651 ;; Parameters:    Size  Location     Type
 11652 ;;		None
 11653 ;; Auto vars:     Size  Location     Type
 11654 ;;  status2         1    2[BANK0 ] unsigned char 
 11655 ;;  status1         1    1[BANK0 ] unsigned char 
 11656 ;;  count           1    0[BANK0 ] unsigned char 
 11657 ;; Return value:  Size  Location     Type
 11658 ;;                  1    wreg      unsigned char 
 11659 ;; Registers used:
 11660 ;;		wreg, status,2, status,0
 11661 ;; Tracked objects:
 11662 ;;		On entry : 0/0
 11663 ;;		On exit  : 0/0
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;Total ram usage:        3 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    5
 11673 ;; This function calls:
 11674 ;;		Nothing
 11675 ;; This function is called by:
 11676 ;;		_Load_Main
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           
 11681                           ;psect for function _getMain_Lights_Count
 11682  1885                     _getMain_Lights_Count:	
 11683                           
 11684                           ;main_B1.c: 460: char count = 0;
 11685                           
 11686                           ;incstack = 0
 11687                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11688  1885  0020               	movlb	0	; select bank0
 11689  1886  01A0               	clrf	getMain_Lights_Count@count
 11690                           
 11691                           ;main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11692  1887  3000               	movlw	0
 11693  1888  0021               	movlb	1	; select bank1
 11694  1889  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11695  188A  3001               	movlw	1
 11696  188B  0020               	movlb	0	; select bank0
 11697  188C  00A1               	movwf	getMain_Lights_Count@status1
 11698                           
 11699                           ;main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11700  188D  3000               	movlw	0
 11701  188E  0021               	movlb	1	; select bank1
 11702  188F  19C8               	btfsc	_DimmerIntr2^(0+128),3
 11703  1890  3001               	movlw	1
 11704  1891  0020               	movlb	0	; select bank0
 11705  1892  00A2               	movwf	getMain_Lights_Count@status2
 11706                           
 11707                           ;main_B1.c: 490: return count = (status1 + status2);
 11708  1893  0821               	movf	getMain_Lights_Count@status1,w
 11709  1894  0722               	addwf	getMain_Lights_Count@status2,w
 11710  1895  00A0               	movwf	getMain_Lights_Count@count
 11711  1896  0008               	return
 11712  1897                     __end_of_getMain_Lights_Count:	
 11713                           
 11714                           	psect	text66
 11715  269B                     __ptext66:	
 11716 ;; *************** function _getDimmer_Load_Status *****************
 11717 ;; Defined at:
 11718 ;;		line 1280 in file "../src/Dimmer_B1.c"
 11719 ;; Parameters:    Size  Location     Type
 11720 ;;		None
 11721 ;; Auto vars:     Size  Location     Type
 11722 ;;  status          1    0[BANK0 ] unsigned char 
 11723 ;; Return value:  Size  Location     Type
 11724 ;;                  1    wreg      unsigned char 
 11725 ;; Registers used:
 11726 ;;		wreg, status,2
 11727 ;; Tracked objects:
 11728 ;;		On entry : 0/0
 11729 ;;		On exit  : 0/0
 11730 ;;		Unchanged: 0/0
 11731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11736 ;;Total ram usage:        1 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; Hardware stack levels required when called:    5
 11739 ;; This function calls:
 11740 ;;		Nothing
 11741 ;; This function is called by:
 11742 ;;		_Load_Main
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           
 11747                           ;psect for function _getDimmer_Load_Status
 11748  269B                     _getDimmer_Load_Status:	
 11749                           
 11750                           ;Dimmer_B1.c: 1281: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11751                           
 11752                           ;incstack = 0
 11753                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11754  269B  3000               	movlw	0
 11755  269C  0022               	movlb	2	; select bank2
 11756  269D  192C               	btfsc	_Dimmer^(0+256),2
 11757  269E  3001               	movlw	1
 11758  269F  0020               	movlb	0	; select bank0
 11759  26A0  00A0               	movwf	getDimmer_Load_Status@status
 11760                           
 11761                           ;Dimmer_B1.c: 1282: return status;
 11762  26A1  0820               	movf	getDimmer_Load_Status@status,w
 11763  26A2  0008               	return
 11764  26A3                     __end_of_getDimmer_Load_Status:	
 11765                           
 11766                           	psect	text67
 11767  2693                     __ptext67:	
 11768 ;; *************** function _getDimmer_LoadGO *****************
 11769 ;; Defined at:
 11770 ;;		line 1274 in file "../src/Dimmer_B1.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;		None
 11773 ;; Auto vars:     Size  Location     Type
 11774 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11775 ;; Return value:  Size  Location     Type
 11776 ;;                  1    wreg      unsigned char 
 11777 ;; Registers used:
 11778 ;;		wreg, status,2
 11779 ;; Tracked objects:
 11780 ;;		On entry : 0/0
 11781 ;;		On exit  : 0/0
 11782 ;;		Unchanged: 0/0
 11783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11787 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;Total ram usage:        1 bytes
 11789 ;; Hardware stack levels used:    1
 11790 ;; Hardware stack levels required when called:    5
 11791 ;; This function calls:
 11792 ;;		Nothing
 11793 ;; This function is called by:
 11794 ;;		_Load_Main
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           
 11799                           ;psect for function _getDimmer_LoadGO
 11800  2693                     _getDimmer_LoadGO:	
 11801                           
 11802                           ;Dimmer_B1.c: 1275: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11803                           
 11804                           ;incstack = 0
 11805                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11806  2693  3000               	movlw	0
 11807  2694  0022               	movlb	2	; select bank2
 11808  2695  18AC               	btfsc	_Dimmer^(0+256),1
 11809  2696  3001               	movlw	1
 11810  2697  0020               	movlb	0	; select bank0
 11811  2698  00A0               	movwf	getDimmer_LoadGO@loadgo
 11812                           
 11813                           ;Dimmer_B1.c: 1276: return loadgo;
 11814  2699  0820               	movf	getDimmer_LoadGO@loadgo,w
 11815  269A  0008               	return
 11816  269B                     __end_of_getDimmer_LoadGO:	
 11817                           
 11818                           	psect	text68
 11819  1C09                     __ptext68:	
 11820 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11821 ;; Defined at:
 11822 ;;		line 318 in file "../src/Dimmer_B1.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;		None
 11825 ;; Auto vars:     Size  Location     Type
 11826 ;;  status          1    3[BANK0 ] unsigned char 
 11827 ;; Return value:  Size  Location     Type
 11828 ;;                  1    wreg      unsigned char 
 11829 ;; Registers used:
 11830 ;;		wreg, status,2, status,0
 11831 ;; Tracked objects:
 11832 ;;		On entry : 0/0
 11833 ;;		On exit  : 0/0
 11834 ;;		Unchanged: 0/0
 11835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11837 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;Total ram usage:        4 bytes
 11841 ;; Hardware stack levels used:    1
 11842 ;; Hardware stack levels required when called:    5
 11843 ;; This function calls:
 11844 ;;		Nothing
 11845 ;; This function is called by:
 11846 ;;		_Load_Main
 11847 ;; This function uses a non-reentrant model
 11848 ;;
 11849                           
 11850                           
 11851                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11852  1C09                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11853                           
 11854                           ;Dimmer_B1.c: 319: char status = 0;
 11855                           
 11856                           ;incstack = 0
 11857                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11858  1C09  0020               	movlb	0	; select bank0
 11859  1C0A  01A3               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11860                           
 11861                           ;Dimmer_B1.c: 326: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11862  1C0B  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2392
 11863  1C0C  0AA1               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2392,f
 11864  1C0D  0021               	movlb	1	; select bank1
 11865  1C0E  1E3C               	btfss	_DimmerIntr1^(0+128),4
 11866  1C0F  1A48               	btfsc	_DimmerIntr2^(0+128),4
 11867  1C10  2C13               	goto	l8241
 11868  1C11  0020               	movlb	0	; select bank0
 11869  1C12  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2392
 11870  1C13                     l8241:	
 11871  1C13  0020               	movlb	0	; select bank0
 11872  1C14  0821               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2392,w
 11873  1C15  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11874  1C16  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11875  1C17  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11876                           
 11877                           ;Dimmer_B1.c: 334: if (status == 0) {
 11878  1C18  08A3               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11879  1C19  1D03               	skipz
 11880  1C1A  2C28               	goto	l8253
 11881                           
 11882                           ;Dimmer_B1.c: 340: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11883  1C1B  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2393
 11884  1C1C  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2393,f
 11885  1C1D  0021               	movlb	1	; select bank1
 11886  1C1E  1F3C               	btfss	_DimmerIntr1^(0+128),6
 11887  1C1F  1B48               	btfsc	_DimmerIntr2^(0+128),6
 11888  1C20  2C23               	goto	l8251
 11889  1C21  0020               	movlb	0	; select bank0
 11890  1C22  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2393
 11891  1C23                     l8251:	
 11892  1C23  0020               	movlb	0	; select bank0
 11893  1C24  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2393,w
 11894  1C25  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11895  1C26  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11896  1C27  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11897  1C28                     l8253:	
 11898                           
 11899                           ;Dimmer_B1.c: 346: }
 11900                           ;Dimmer_B1.c: 348: return status;
 11901  1C28  0823               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11902  1C29  0008               	return
 11903  1C2A                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11904                           
 11905                           	psect	text69
 11906  1B2C                     __ptext69:	
 11907 ;; *************** function ___wmul *****************
 11908 ;; Defined at:
 11909 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11912 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;  product         2    4[BANK0 ] unsigned int 
 11915 ;; Return value:  Size  Location     Type
 11916 ;;                  2    0[BANK0 ] unsigned int 
 11917 ;; Registers used:
 11918 ;;		wreg, status,2, status,0
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11924 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;Total ram usage:        6 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:    5
 11931 ;; This function calls:
 11932 ;;		Nothing
 11933 ;; This function is called by:
 11934 ;;		_Load_Main
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           
 11939                           ;psect for function ___wmul
 11940  1B2C                     ___wmul:	
 11941                           
 11942                           ;incstack = 0
 11943                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11944  1B2C  0020               	movlb	0	; select bank0
 11945  1B2D  01A4               	clrf	___wmul@product
 11946  1B2E  01A5               	clrf	___wmul@product+1
 11947  1B2F                     l8949:	
 11948  1B2F  1C20               	btfss	___wmul@multiplier,0
 11949  1B30  2B35               	goto	l3090
 11950  1B31  0822               	movf	___wmul@multiplicand,w
 11951  1B32  07A4               	addwf	___wmul@product,f
 11952  1B33  0823               	movf	___wmul@multiplicand+1,w
 11953  1B34  3DA5               	addwfc	___wmul@product+1,f
 11954  1B35                     l3090:	
 11955  1B35  3001               	movlw	1
 11956  1B36                     u9505:	
 11957  1B36  35A2               	lslf	___wmul@multiplicand,f
 11958  1B37  0DA3               	rlf	___wmul@multiplicand+1,f
 11959  1B38  0B89               	decfsz	9,f
 11960  1B39  2B36               	goto	u9505
 11961  1B3A  3001               	movlw	1
 11962  1B3B                     u9515:	
 11963  1B3B  36A1               	lsrf	___wmul@multiplier+1,f
 11964  1B3C  0CA0               	rrf	___wmul@multiplier,f
 11965  1B3D  0B89               	decfsz	9,f
 11966  1B3E  2B3B               	goto	u9515
 11967  1B3F  0821               	movf	___wmul@multiplier+1,w
 11968  1B40  0420               	iorwf	___wmul@multiplier,w
 11969  1B41  1D03               	skipz
 11970  1B42  2B2F               	goto	l8949
 11971  1B43  0825               	movf	___wmul@product+1,w
 11972  1B44  01A1               	clrf	?___wmul+1
 11973  1B45  07A1               	addwf	?___wmul+1,f
 11974  1B46  0824               	movf	___wmul@product,w
 11975  1B47  01A0               	clrf	?___wmul
 11976  1B48  07A0               	addwf	?___wmul,f
 11977  1B49  0008               	return
 11978  1B4A                     __end_of___wmul:	
 11979                           
 11980                           	psect	text70
 11981  1E6B                     __ptext70:	
 11982 ;; *************** function ___lwdiv *****************
 11983 ;; Defined at:
 11984 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;  divisor         2    0[BANK0 ] unsigned int 
 11987 ;;  dividend        2    2[BANK0 ] unsigned int 
 11988 ;; Auto vars:     Size  Location     Type
 11989 ;;  quotient        2    5[BANK0 ] unsigned int 
 11990 ;;  counter         1    7[BANK0 ] unsigned char 
 11991 ;; Return value:  Size  Location     Type
 11992 ;;                  2    0[BANK0 ] unsigned int 
 11993 ;; Registers used:
 11994 ;;		wreg, status,2, status,0
 11995 ;; Tracked objects:
 11996 ;;		On entry : 0/0
 11997 ;;		On exit  : 0/0
 11998 ;;		Unchanged: 0/0
 11999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;Total ram usage:        8 bytes
 12005 ;; Hardware stack levels used:    1
 12006 ;; Hardware stack levels required when called:    5
 12007 ;; This function calls:
 12008 ;;		Nothing
 12009 ;; This function is called by:
 12010 ;;		_Load_Main
 12011 ;;		_setTemp_Main
 12012 ;;		_setRF_Main
 12013 ;; This function uses a non-reentrant model
 12014 ;;
 12015                           
 12016                           
 12017                           ;psect for function ___lwdiv
 12018  1E6B                     ___lwdiv:	
 12019                           
 12020                           ;incstack = 0
 12021                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12022  1E6B  0020               	movlb	0	; select bank0
 12023  1E6C  01A5               	clrf	___lwdiv@quotient
 12024  1E6D  01A6               	clrf	___lwdiv@quotient+1
 12025  1E6E  0821               	movf	___lwdiv@divisor+1,w
 12026  1E6F  0420               	iorwf	___lwdiv@divisor,w
 12027  1E70  1903               	skipnz
 12028  1E71  2E9B               	goto	l8155
 12029  1E72  01A7               	clrf	___lwdiv@counter
 12030  1E73  0AA7               	incf	___lwdiv@counter,f
 12031  1E74                     l8143:	
 12032  1E74  1BA1               	btfsc	___lwdiv@divisor+1,7
 12033  1E75  2E80               	goto	l8145
 12034  1E76  3001               	movlw	1
 12035  1E77                     u7975:	
 12036  1E77  35A0               	lslf	___lwdiv@divisor,f
 12037  1E78  0DA1               	rlf	___lwdiv@divisor+1,f
 12038  1E79  0B89               	decfsz	9,f
 12039  1E7A  2E77               	goto	u7975
 12040  1E7B  3001               	movlw	1
 12041  1E7C  00A4               	movwf	??___lwdiv
 12042  1E7D  0824               	movf	??___lwdiv,w
 12043  1E7E  07A7               	addwf	___lwdiv@counter,f
 12044  1E7F  2E74               	goto	l8143
 12045  1E80                     l8145:	
 12046  1E80  3001               	movlw	1
 12047  1E81                     u7995:	
 12048  1E81  35A5               	lslf	___lwdiv@quotient,f
 12049  1E82  0DA6               	rlf	___lwdiv@quotient+1,f
 12050  1E83  0B89               	decfsz	9,f
 12051  1E84  2E81               	goto	u7995
 12052  1E85  0821               	movf	___lwdiv@divisor+1,w
 12053  1E86  0223               	subwf	___lwdiv@dividend+1,w
 12054  1E87  1D03               	skipz
 12055  1E88  2E8B               	goto	u8005
 12056  1E89  0820               	movf	___lwdiv@divisor,w
 12057  1E8A  0222               	subwf	___lwdiv@dividend,w
 12058  1E8B                     u8005:	
 12059  1E8B  1C03               	skipc
 12060  1E8C  2E92               	goto	l8151
 12061  1E8D  0820               	movf	___lwdiv@divisor,w
 12062  1E8E  02A2               	subwf	___lwdiv@dividend,f
 12063  1E8F  0821               	movf	___lwdiv@divisor+1,w
 12064  1E90  3BA3               	subwfb	___lwdiv@dividend+1,f
 12065  1E91  1425               	bsf	___lwdiv@quotient,0
 12066  1E92                     l8151:	
 12067  1E92  3001               	movlw	1
 12068  1E93                     u8015:	
 12069  1E93  36A1               	lsrf	___lwdiv@divisor+1,f
 12070  1E94  0CA0               	rrf	___lwdiv@divisor,f
 12071  1E95  0B89               	decfsz	9,f
 12072  1E96  2E93               	goto	u8015
 12073  1E97  3001               	movlw	1
 12074  1E98  02A7               	subwf	___lwdiv@counter,f
 12075  1E99  1D03               	btfss	3,2
 12076  1E9A  2E80               	goto	l8145
 12077  1E9B                     l8155:	
 12078  1E9B  0826               	movf	___lwdiv@quotient+1,w
 12079  1E9C  01A1               	clrf	?___lwdiv+1
 12080  1E9D  07A1               	addwf	?___lwdiv+1,f
 12081  1E9E  0825               	movf	___lwdiv@quotient,w
 12082  1E9F  01A0               	clrf	?___lwdiv
 12083  1EA0  07A0               	addwf	?___lwdiv,f
 12084  1EA1  0008               	return
 12085  1EA2                     __end_of___lwdiv:	
 12086                           
 12087                           	psect	text71
 12088  263A                     __ptext71:	
 12089 ;; *************** function _Load_Initialization *****************
 12090 ;; Defined at:
 12091 ;;		line 9 in file "../src/OverLoad_B1.c"
 12092 ;; Parameters:    Size  Location     Type
 12093 ;;		None
 12094 ;; Auto vars:     Size  Location     Type
 12095 ;;		None
 12096 ;; Return value:  Size  Location     Type
 12097 ;;		None               void
 12098 ;; Registers used:
 12099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12100 ;; Tracked objects:
 12101 ;;		On entry : 0/0
 12102 ;;		On exit  : 0/0
 12103 ;;		Unchanged: 0/0
 12104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;Total ram usage:        0 bytes
 12110 ;; Hardware stack levels used:    1
 12111 ;; Hardware stack levels required when called:    6
 12112 ;; This function calls:
 12113 ;;		_setLoad_AH_AL_Restore
 12114 ;; This function is called by:
 12115 ;;		_main
 12116 ;; This function uses a non-reentrant model
 12117 ;;
 12118                           
 12119                           
 12120                           ;psect for function _Load_Initialization
 12121  263A                     _Load_Initialization:	
 12122                           
 12123                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12124                           
 12125                           ;incstack = 0
 12126                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12127  263A  319A  22B9         	fcall	_setLoad_AH_AL_Restore
 12128  263C  0008               	return
 12129  263D                     __end_of_Load_Initialization:	
 12130                           
 12131                           	psect	text72
 12132  1AB9                     __ptext72:	
 12133 ;; *************** function _setLoad_AH_AL_Restore *****************
 12134 ;; Defined at:
 12135 ;;		line 294 in file "../src/OverLoad_B1.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;		None
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;  i               1    1[BANK0 ] unsigned char 
 12140 ;; Return value:  Size  Location     Type
 12141 ;;		None               void
 12142 ;; Registers used:
 12143 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12144 ;; Tracked objects:
 12145 ;;		On entry : 0/0
 12146 ;;		On exit  : 0/0
 12147 ;;		Unchanged: 0/0
 12148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;Total ram usage:        2 bytes
 12154 ;; Hardware stack levels used:    1
 12155 ;; Hardware stack levels required when called:    5
 12156 ;; This function calls:
 12157 ;;		Nothing
 12158 ;; This function is called by:
 12159 ;;		_Load_Initialization
 12160 ;;		_Load_Main
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           
 12165                           ;psect for function _setLoad_AH_AL_Restore
 12166  1AB9                     _setLoad_AH_AL_Restore:	
 12167                           
 12168                           ;OverLoad_B1.c: 295: char i;
 12169                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 12170                           
 12171                           ;incstack = 0
 12172                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12173  1AB9  0020               	movlb	0	; select bank0
 12174  1ABA  01A1               	clrf	setLoad_AH_AL_Restore@i
 12175  1ABB                     L10:	
 12176  1ABB  3005               	movlw	5
 12177  1ABC  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12178  1ABD  1803               	btfsc	3,0
 12179  1ABE  0008               	return
 12180                           
 12181                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 12182  1ABF  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12183  1AC0  3E43               	addlw	(_Load+11)& (0+255)
 12184  1AC1  0086               	movwf	6
 12185  1AC2  3001               	movlw	1	; select bank2/3
 12186  1AC3  0087               	movwf	7
 12187  1AC4  3000               	movlw	0
 12188  1AC5  3FC0               	movwi [0]fsr1
 12189  1AC6  3FC1               	movwi [1]fsr1
 12190                           
 12191                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 12192  1AC7  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12193  1AC8  3E4D               	addlw	(_Load+21)& (0+255)
 12194  1AC9  0086               	movwf	6
 12195  1ACA  3001               	movlw	1	; select bank2/3
 12196  1ACB  0087               	movwf	7
 12197  1ACC  30FF               	movlw	255
 12198  1ACD  3FC0               	movwi [0]fsr1
 12199  1ACE  30FF               	movlw	255
 12200  1ACF  3FC1               	movwi [1]fsr1
 12201  1AD0  3001               	movlw	1
 12202  1AD1  00A0               	movwf	??_setLoad_AH_AL_Restore
 12203  1AD2  0820               	movf	??_setLoad_AH_AL_Restore,w
 12204  1AD3  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12205  1AD4  2ABB               	goto	L10
 12206  1AD5                     __end_of_setLoad_AH_AL_Restore:	
 12207                           
 12208                           	psect	text73
 12209  2739                     __ptext73:	
 12210 ;; *************** function _LED_Main *****************
 12211 ;; Defined at:
 12212 ;;		line 47 in file "../src/LED_B1.c"
 12213 ;; Parameters:    Size  Location     Type
 12214 ;;		None
 12215 ;; Auto vars:     Size  Location     Type
 12216 ;;		None
 12217 ;; Return value:  Size  Location     Type
 12218 ;;		None               void
 12219 ;; Registers used:
 12220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12221 ;; Tracked objects:
 12222 ;;		On entry : 0/0
 12223 ;;		On exit  : 0/0
 12224 ;;		Unchanged: 0/0
 12225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12230 ;;Total ram usage:        0 bytes
 12231 ;; Hardware stack levels used:    1
 12232 ;; Hardware stack levels required when called:    7
 12233 ;; This function calls:
 12234 ;;		_setLED_Main
 12235 ;; This function is called by:
 12236 ;;		_main
 12237 ;; This function uses a non-reentrant model
 12238 ;;
 12239                           
 12240                           
 12241                           ;psect for function _LED_Main
 12242  2739                     _LED_Main:	
 12243                           
 12244                           ;LED_B1.c: 58: setLED_Main(1);
 12245                           
 12246                           ;incstack = 0
 12247                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12248  2739  3001               	movlw	1
 12249  273A  3191  2116  31A7   	fcall	_setLED_Main
 12250                           
 12251                           ;LED_B1.c: 61: setLED_Main(2);
 12252  273D  3002               	movlw	2
 12253  273E  3191  2116  31A7   	fcall	_setLED_Main
 12254                           
 12255                           ;LED_B1.c: 67: setLED_Main(99);
 12256  2741  3063               	movlw	99
 12257  2742  3191  2116         	fcall	_setLED_Main
 12258  2744  0008               	return
 12259  2745                     __end_of_LED_Main:	
 12260                           
 12261                           	psect	text74
 12262  1116                     __ptext74:	
 12263 ;; *************** function _setLED_Main *****************
 12264 ;; Defined at:
 12265 ;;		line 229 in file "../src/LED_B1.c"
 12266 ;; Parameters:    Size  Location     Type
 12267 ;;  led             1    wreg     unsigned char 
 12268 ;; Auto vars:     Size  Location     Type
 12269 ;;  led             1    4[BANK0 ] unsigned char 
 12270 ;; Return value:  Size  Location     Type
 12271 ;;		None               void
 12272 ;; Registers used:
 12273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12274 ;; Tracked objects:
 12275 ;;		On entry : 0/0
 12276 ;;		On exit  : 0/0
 12277 ;;		Unchanged: 0/0
 12278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12282 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12283 ;;Total ram usage:        3 bytes
 12284 ;; Hardware stack levels used:    1
 12285 ;; Hardware stack levels required when called:    6
 12286 ;; This function calls:
 12287 ;;		_LedPointSelect
 12288 ;; This function is called by:
 12289 ;;		_LED_Main
 12290 ;; This function uses a non-reentrant model
 12291 ;;
 12292                           
 12293                           
 12294                           ;psect for function _setLED_Main
 12295  1116                     _setLED_Main:	
 12296                           
 12297                           ;incstack = 0
 12298                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12299                           ;setLED_Main@led stored from wreg
 12300  1116  0020               	movlb	0	; select bank0
 12301  1117  00A4               	movwf	setLED_Main@led
 12302                           
 12303                           ;LED_B1.c: 230: LedPointSelect(led);
 12304  1118  0824               	movf	setLED_Main@led,w
 12305  1119  319B  2388  3191   	fcall	_LedPointSelect
 12306                           
 12307                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12308  111C  0021               	movlb	1	; select bank1
 12309  111D  085B               	movf	_LED^(0+128),w
 12310  111E  0086               	movwf	6
 12311  111F  3001               	movlw	1	; select bank2/3
 12312  1120  0087               	movwf	7
 12313  1121  1C81               	btfss	1,1
 12314  1122  0008               	return
 12315                           
 12316                           ;LED_B1.c: 232: LED->Time++;
 12317  1123  0A5B               	incf	_LED^(0+128),w
 12318  1124  0086               	movwf	6
 12319  1125  3001               	movlw	1	; select bank2/3
 12320  1126  0087               	movwf	7
 12321  1127  3001               	movlw	1
 12322  1128  0781               	addwf	1,f
 12323  1129  3141               	addfsr 1,1
 12324  112A  1803               	skipnc
 12325  112B  0A81               	incf	1,f
 12326                           
 12327                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12328  112C  0A5B               	incf	_LED^(0+128),w
 12329  112D  0086               	movwf	6
 12330  112E  3001               	movlw	1	; select bank2/3
 12331  112F  0087               	movwf	7
 12332  1130  3F40               	moviw [0]fsr1
 12333  1131  0020               	movlb	0	; select bank0
 12334  1132  00A2               	movwf	??_setLED_Main
 12335  1133  3F41               	moviw [1]fsr1
 12336  1134  00A3               	movwf	??_setLED_Main+1
 12337  1135  3000               	movlw	0
 12338  1136  0223               	subwf	??_setLED_Main+1,w
 12339  1137  3019               	movlw	25
 12340  1138  1903               	skipnz
 12341  1139  0222               	subwf	??_setLED_Main,w
 12342  113A  1C03               	skipc
 12343  113B  0008               	return
 12344                           
 12345                           ;LED_B1.c: 234: LED->Time = 0;
 12346  113C  0021               	movlb	1	; select bank1
 12347  113D  0A5B               	incf	_LED^(0+128),w
 12348  113E  0086               	movwf	6
 12349  113F  3001               	movlw	1	; select bank2/3
 12350  1140  0087               	movwf	7
 12351  1141  3000               	movlw	0
 12352  1142  3FC0               	movwi [0]fsr1
 12353  1143  3FC1               	movwi [1]fsr1
 12354                           
 12355                           ;LED_B1.c: 237: if (led == 1) {
 12356  1144  0020               	movlb	0	; select bank0
 12357  1145  0824               	movf	setLED_Main@led,w
 12358  1146  3A01               	xorlw	1
 12359  1147  1D03               	skipz
 12360  1148  294B               	goto	l1206
 12361                           
 12362                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
 12363  1149  3080               	movlw	128
 12364  114A  068E               	xorwf	14,f
 12365  114B                     l1206:	
 12366                           
 12367                           ;LED_B1.c: 239: }
 12368                           ;LED_B1.c: 242: if (led == 2) {
 12369  114B  0824               	movf	setLED_Main@led,w
 12370  114C  3A02               	xorlw	2
 12371                           
 12372                           ;LED_B1.c: 243: RA3 = RA3 == 1 ? 0 : 1;
 12373  114D  3008               	movlw	8
 12374  114E  1903               	btfsc	3,2
 12375  114F  068C               	xorwf	12,f
 12376                           
 12377                           ;LED_B1.c: 244: }
 12378                           ;LED_B1.c: 252: if (led == 99) {
 12379  1150  0824               	movf	setLED_Main@led,w
 12380  1151  3A63               	xorlw	99
 12381  1152  1D03               	skipz
 12382  1153  0008               	return
 12383                           
 12384                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12385  1154  3020               	movlw	32
 12386  1155  068D               	xorwf	13,f
 12387  1156  0008               	return
 12388  1157                     __end_of_setLED_Main:	
 12389                           
 12390                           	psect	text75
 12391  272D                     __ptext75:	
 12392 ;; *************** function _LED_Initialization *****************
 12393 ;; Defined at:
 12394 ;;		line 31 in file "../src/LED_B1.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;		None
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;		None
 12399 ;; Return value:  Size  Location     Type
 12400 ;;		None               void
 12401 ;; Registers used:
 12402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12403 ;; Tracked objects:
 12404 ;;		On entry : 0/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;Total ram usage:        0 bytes
 12413 ;; Hardware stack levels used:    1
 12414 ;; Hardware stack levels required when called:    8
 12415 ;; This function calls:
 12416 ;;		_setLED_Initialization
 12417 ;; This function is called by:
 12418 ;;		_main
 12419 ;; This function uses a non-reentrant model
 12420 ;;
 12421                           
 12422                           
 12423                           ;psect for function _LED_Initialization
 12424  272D                     _LED_Initialization:	
 12425                           
 12426                           ;LED_B1.c: 33: setLED_Initialization(1);
 12427                           
 12428                           ;incstack = 0
 12429                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12430  272D  3001               	movlw	1
 12431  272E  3198  2073  31A7   	fcall	_setLED_Initialization
 12432                           
 12433                           ;LED_B1.c: 36: setLED_Initialization(2);
 12434  2731  3002               	movlw	2
 12435  2732  3198  2073  31A7   	fcall	_setLED_Initialization
 12436                           
 12437                           ;LED_B1.c: 42: setLED_Initialization(99);
 12438  2735  3063               	movlw	99
 12439  2736  3198  2073         	fcall	_setLED_Initialization
 12440  2738  0008               	return
 12441  2739                     __end_of_LED_Initialization:	
 12442                           
 12443                           	psect	text76
 12444  1873                     __ptext76:	
 12445 ;; *************** function _setLED_Initialization *****************
 12446 ;; Defined at:
 12447 ;;		line 74 in file "../src/LED_B1.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;  led             1    wreg     unsigned char 
 12450 ;; Auto vars:     Size  Location     Type
 12451 ;;  led             1    4[BANK0 ] unsigned char 
 12452 ;; Return value:  Size  Location     Type
 12453 ;;		None               void
 12454 ;; Registers used:
 12455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;Total ram usage:        1 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; Hardware stack levels required when called:    7
 12468 ;; This function calls:
 12469 ;;		_LedPointSelect
 12470 ;;		_setLED
 12471 ;; This function is called by:
 12472 ;;		_LED_Initialization
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function _setLED_Initialization
 12478  1873                     _setLED_Initialization:	
 12479                           
 12480                           ;incstack = 0
 12481                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12482                           ;setLED_Initialization@led stored from wreg
 12483  1873  0020               	movlb	0	; select bank0
 12484  1874  00A4               	movwf	setLED_Initialization@led
 12485                           
 12486                           ;LED_B1.c: 75: LedPointSelect(led);
 12487  1875  0824               	movf	setLED_Initialization@led,w
 12488  1876  319B  2388  3198   	fcall	_LedPointSelect
 12489                           
 12490                           ;LED_B1.c: 76: LED->Enable = 1;
 12491  1879  0021               	movlb	1	; select bank1
 12492  187A  085B               	movf	_LED^(0+128),w
 12493  187B  0086               	movwf	6
 12494  187C  3001               	movlw	1	; select bank2/3
 12495  187D  0087               	movwf	7
 12496  187E  1401               	bsf	1,0
 12497                           
 12498                           ;LED_B1.c: 77: setLED(led, 0);
 12499  187F  0020               	movlb	0	; select bank0
 12500  1880  01A2               	clrf	setLED@command
 12501  1881  0824               	movf	setLED_Initialization@led,w
 12502  1882  3191  21E5         	fcall	_setLED
 12503  1884  0008               	return
 12504  1885                     __end_of_setLED_Initialization:	
 12505                           
 12506                           	psect	text77
 12507  10D5                     __ptext77:	
 12508 ;; *************** function _Flash_Memory_Main *****************
 12509 ;; Defined at:
 12510 ;;		line 976 in file "../src/MCU_B1.c"
 12511 ;; Parameters:    Size  Location     Type
 12512 ;;		None
 12513 ;; Auto vars:     Size  Location     Type
 12514 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12515 ;; Return value:  Size  Location     Type
 12516 ;;		None               void
 12517 ;; Registers used:
 12518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12527 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;Total ram usage:        3 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    8
 12531 ;; This function calls:
 12532 ;;		_Flash_Memory_Modify
 12533 ;;		_getAll_Sw_KeyStatus
 12534 ;;		_getMain_All_LightsStatus
 12535 ;; This function is called by:
 12536 ;;		_main
 12537 ;; This function uses a non-reentrant model
 12538 ;;
 12539                           
 12540                           
 12541                           ;psect for function _Flash_Memory_Main
 12542  10D5                     _Flash_Memory_Main:	
 12543                           
 12544                           ;MCU_B1.c: 977: char key_Status = 0;
 12545                           
 12546                           ;incstack = 0
 12547                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12548  10D5  0020               	movlb	0	; select bank0
 12549  10D6  01A7               	clrf	Flash_Memory_Main@key_Status
 12550                           
 12551                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12552  10D7  31A7  27A9  3190   	fcall	_getAll_Sw_KeyStatus
 12553  10DA  0020               	movlb	0	; select bank0
 12554  10DB  00A6               	movwf	??_Flash_Memory_Main
 12555  10DC  0826               	movf	??_Flash_Memory_Main,w
 12556  10DD  00A7               	movwf	Flash_Memory_Main@key_Status
 12557                           
 12558                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12559  10DE  0024               	movlb	4	; select bank4
 12560  10DF  1C44               	btfss	(_Memory^(0+512)+36),0
 12561  10E0  0008               	return
 12562                           
 12563                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12564  10E1  0020               	movlb	0	; select bank0
 12565  10E2  01A8               	clrf	_Flash_Memory_Main$3446
 12566  10E3  3198  20E1  3190   	fcall	_getMain_All_LightsStatus
 12567  10E6  3800               	iorlw	0
 12568  10E7  1D03               	skipz
 12569  10E8  28EF               	goto	l9085
 12570  10E9  0020               	movlb	0	; select bank0
 12571  10EA  08A7               	movf	Flash_Memory_Main@key_Status,f
 12572  10EB  1D03               	skipz
 12573  10EC  28EF               	goto	l9085
 12574  10ED  01A8               	clrf	_Flash_Memory_Main$3446
 12575  10EE  0AA8               	incf	_Flash_Memory_Main$3446,f
 12576  10EF                     l9085:	
 12577  10EF  0020               	movlb	0	; select bank0
 12578  10F0  0828               	movf	_Flash_Memory_Main$3446,w
 12579  10F1  0024               	movlb	4	; select bank4
 12580  10F2  10C4               	bcf	(_Memory^(0+512)+36),1
 12581  10F3  1D03               	skipz
 12582  10F4  14C4               	bsf	(_Memory^(0+512)+36),1
 12583                           
 12584                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12585  10F5  1CC4               	btfss	(_Memory^(0+512)+36),1
 12586  10F6  2910               	goto	l1480
 12587                           
 12588                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12589  10F7  15C4               	bsf	(_Memory^(0+512)+36),3
 12590                           
 12591                           ;MCU_B1.c: 985: Memory.Time++;
 12592  10F8  3001               	movlw	1
 12593  10F9  07C2               	addwf	(_Memory^(0+512)+34),f
 12594  10FA  3000               	movlw	0
 12595  10FB  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12596                           
 12597                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12598  10FC  3022               	movlw	34
 12599  10FD  3E20               	addlw	_Memory& (0+255)
 12600  10FE  0086               	movwf	6
 12601  10FF  3002               	movlw	2	; select bank4/5
 12602  1100  0087               	movwf	7
 12603  1101  3F40               	moviw [0]fsr1
 12604  1102  3A0A               	xorlw	10
 12605  1103  1D03               	skipz
 12606  1104  2907               	goto	u9745
 12607  1105  3F41               	moviw [1]fsr1
 12608  1106  3A00               	xorlw	0
 12609  1107                     u9745:	
 12610  1107  1D03               	skipz
 12611  1108  0008               	return
 12612                           
 12613                           ;MCU_B1.c: 987: Memory.Time = 0;
 12614  1109  01C2               	clrf	(_Memory^(0+512)+34)
 12615  110A  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12616                           
 12617                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12618  110B  1044               	bcf	(_Memory^(0+512)+36),0
 12619                           
 12620                           ;MCU_B1.c: 989: Memory.GO = 0;
 12621  110C  10C4               	bcf	(_Memory^(0+512)+36),1
 12622                           
 12623                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12624  110D  3189  21AA         	fcall	_Flash_Memory_Modify
 12625                           
 12626                           ;MCU_B1.c: 991: }
 12627                           ;MCU_B1.c: 992: } else {
 12628  110F  0008               	return
 12629  1110                     l1480:	
 12630                           
 12631                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12632  1110  1DC4               	btfss	(_Memory^(0+512)+36),3
 12633  1111  0008               	return
 12634                           
 12635                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12636  1112  11C4               	bcf	(_Memory^(0+512)+36),3
 12637                           
 12638                           ;MCU_B1.c: 995: Memory.Time = 0;
 12639  1113  01C2               	clrf	(_Memory^(0+512)+34)
 12640  1114  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12641  1115  0008               	return
 12642  1116                     __end_of_Flash_Memory_Main:	
 12643                           
 12644                           	psect	text78
 12645  27A9                     __ptext78:	
 12646 ;; *************** function _getAll_Sw_KeyStatus *****************
 12647 ;; Defined at:
 12648 ;;		line 279 in file "../src/Switch_B1.c"
 12649 ;; Parameters:    Size  Location     Type
 12650 ;;		None
 12651 ;; Auto vars:     Size  Location     Type
 12652 ;;  status          1    1[BANK0 ] unsigned char 
 12653 ;; Return value:  Size  Location     Type
 12654 ;;                  1    wreg      unsigned char 
 12655 ;; Registers used:
 12656 ;;		wreg, status,2
 12657 ;; Tracked objects:
 12658 ;;		On entry : 0/0
 12659 ;;		On exit  : 0/0
 12660 ;;		Unchanged: 0/0
 12661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12664 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;Total ram usage:        3 bytes
 12667 ;; Hardware stack levels used:    1
 12668 ;; Hardware stack levels required when called:    5
 12669 ;; This function calls:
 12670 ;;		Nothing
 12671 ;; This function is called by:
 12672 ;;		_Flash_Memory_Main
 12673 ;; This function uses a non-reentrant model
 12674 ;;
 12675                           
 12676                           
 12677                           ;psect for function _getAll_Sw_KeyStatus
 12678  27A9                     _getAll_Sw_KeyStatus:	
 12679                           
 12680                           ;Switch_B1.c: 280: char status = 0;
 12681                           
 12682                           ;incstack = 0
 12683                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12684  27A9  0020               	movlb	0	; select bank0
 12685  27AA  01A1               	clrf	getAll_Sw_KeyStatus@status
 12686                           
 12687                           ;Switch_B1.c: 290: status = RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1 ? 1 : 0;
 12688  27AB  01A2               	clrf	_getAll_Sw_KeyStatus$6419
 12689  27AC  0AA2               	incf	_getAll_Sw_KeyStatus$6419,f
 12690  27AD  1C0C               	btfss	12,0	;volatile
 12691  27AE  188D               	btfsc	13,1	;volatile
 12692  27AF  2FB4               	goto	l8629
 12693  27B0  1F0C               	btfss	12,6	;volatile
 12694  27B1  1A0C               	btfsc	12,4	;volatile
 12695  27B2  2FB4               	goto	l8629
 12696  27B3  01A2               	clrf	_getAll_Sw_KeyStatus$6419
 12697  27B4                     l8629:	
 12698  27B4  0822               	movf	_getAll_Sw_KeyStatus$6419,w
 12699  27B5  00A0               	movwf	??_getAll_Sw_KeyStatus
 12700  27B6  0820               	movf	??_getAll_Sw_KeyStatus,w
 12701  27B7  00A1               	movwf	getAll_Sw_KeyStatus@status
 12702                           
 12703                           ;Switch_B1.c: 303: return status;
 12704  27B8  0821               	movf	getAll_Sw_KeyStatus@status,w
 12705  27B9  0008               	return
 12706  27BA                     __end_of_getAll_Sw_KeyStatus:	
 12707                           
 12708                           	psect	text79
 12709  09AA                     __ptext79:	
 12710 ;; *************** function _Flash_Memory_Modify *****************
 12711 ;; Defined at:
 12712 ;;		line 1053 in file "../src/MCU_B1.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;		None
 12715 ;; Auto vars:     Size  Location     Type
 12716 ;;  i               1    5[BANK0 ] unsigned char 
 12717 ;; Return value:  Size  Location     Type
 12718 ;;		None               void
 12719 ;; Registers used:
 12720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12721 ;; Tracked objects:
 12722 ;;		On entry : 0/0
 12723 ;;		On exit  : 0/0
 12724 ;;		Unchanged: 0/0
 12725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;Total ram usage:        2 bytes
 12731 ;; Hardware stack levels used:    1
 12732 ;; Hardware stack levels required when called:    7
 12733 ;; This function calls:
 12734 ;;		_Flash_Memory_Erasing
 12735 ;;		_Flash_Memory_Read
 12736 ;;		_Flash_Memory_Write
 12737 ;;		_setMemory_Data
 12738 ;; This function is called by:
 12739 ;;		_Flash_Memory_Main
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           
 12744                           ;psect for function _Flash_Memory_Modify
 12745  09AA                     _Flash_Memory_Modify:	
 12746                           
 12747                           ;MCU_B1.c: 1054: char i = 0;
 12748                           
 12749                           ;incstack = 0
 12750                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12751  09AA  0020               	movlb	0	; select bank0
 12752  09AB  01A5               	clrf	Flash_Memory_Modify@i
 12753                           
 12754                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12755  09AC  01A5               	clrf	Flash_Memory_Modify@i
 12756  09AD  3020               	movlw	32
 12757  09AE  0225               	subwf	Flash_Memory_Modify@i,w
 12758  09AF  1803               	btfsc	3,0
 12759  09B0  29C6               	goto	l8647
 12760  09B1                     l8641:	
 12761                           
 12762                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12763  09B1  0825               	movf	Flash_Memory_Modify@i,w
 12764  09B2  319A  2269  3189   	fcall	_Flash_Memory_Read
 12765  09B5  0020               	movlb	0	; select bank0
 12766  09B6  00A4               	movwf	??_Flash_Memory_Modify
 12767  09B7  0825               	movf	Flash_Memory_Modify@i,w
 12768  09B8  3E20               	addlw	_Memory& (0+255)
 12769  09B9  0086               	movwf	6
 12770  09BA  3002               	movlw	2	; select bank4/5
 12771  09BB  0087               	movwf	7
 12772  09BC  0824               	movf	??_Flash_Memory_Modify,w
 12773  09BD  0081               	movwf	1
 12774  09BE  3001               	movlw	1
 12775  09BF  00A4               	movwf	??_Flash_Memory_Modify
 12776  09C0  0824               	movf	??_Flash_Memory_Modify,w
 12777  09C1  07A5               	addwf	Flash_Memory_Modify@i,f
 12778  09C2  3020               	movlw	32
 12779  09C3  0225               	subwf	Flash_Memory_Modify@i,w
 12780  09C4  1C03               	skipc
 12781  09C5  29B1               	goto	l8641
 12782  09C6                     l8647:	
 12783                           
 12784                           ;MCU_B1.c: 1057: }
 12785                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12786  09C6  0021               	movlb	1	; select bank1
 12787  09C7  086D               	movf	_product^(0+128),w
 12788  09C8  0086               	movwf	6
 12789  09C9  3002               	movlw	2	; select bank4/5
 12790  09CA  0087               	movwf	7
 12791  09CB  3002               	movlw	2	; select bank4/5
 12792  09CC  3F4C               	moviw [12]fsr1
 12793  09CD  0020               	movlb	0	; select bank0
 12794  09CE  00A0               	movwf	setMemory_Data@data
 12795  09CF  3000               	movlw	0
 12796  09D0  31A7  2715  3189   	fcall	_setMemory_Data
 12797                           
 12798                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12799  09D3  0021               	movlb	1	; select bank1
 12800  09D4  086D               	movf	_product^(0+128),w
 12801  09D5  0086               	movwf	6
 12802  09D6  3002               	movlw	2	; select bank4/5
 12803  09D7  0087               	movwf	7
 12804  09D8  3002               	movlw	2	; select bank4/5
 12805  09D9  3F4D               	moviw [13]fsr1
 12806  09DA  0020               	movlb	0	; select bank0
 12807  09DB  00A0               	movwf	setMemory_Data@data
 12808  09DC  3001               	movlw	1
 12809  09DD  31A7  2715  3189   	fcall	_setMemory_Data
 12810                           
 12811                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12812  09E0  0021               	movlb	1	; select bank1
 12813  09E1  086D               	movf	_product^(0+128),w
 12814  09E2  0086               	movwf	6
 12815  09E3  3002               	movlw	2	; select bank4/5
 12816  09E4  0087               	movwf	7
 12817  09E5  3002               	movlw	2	; select bank4/5
 12818  09E6  3F4E               	moviw [14]fsr1
 12819  09E7  0020               	movlb	0	; select bank0
 12820  09E8  00A0               	movwf	setMemory_Data@data
 12821  09E9  3002               	movlw	2
 12822  09EA  31A7  2715  3189   	fcall	_setMemory_Data
 12823                           
 12824                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12825  09ED  0021               	movlb	1	; select bank1
 12826  09EE  086D               	movf	_product^(0+128),w
 12827  09EF  0086               	movwf	6
 12828  09F0  3002               	movlw	2	; select bank4/5
 12829  09F1  0087               	movwf	7
 12830  09F2  3002               	movlw	2	; select bank4/5
 12831  09F3  3F55               	moviw [21]fsr1
 12832  09F4  0020               	movlb	0	; select bank0
 12833  09F5  00A0               	movwf	setMemory_Data@data
 12834  09F6  3003               	movlw	3
 12835  09F7  31A7  2715  3189   	fcall	_setMemory_Data
 12836                           
 12837                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12838  09FA  0021               	movlb	1	; select bank1
 12839  09FB  086D               	movf	_product^(0+128),w
 12840  09FC  0086               	movwf	6
 12841  09FD  3002               	movlw	2	; select bank4/5
 12842  09FE  0087               	movwf	7
 12843  09FF  3002               	movlw	2	; select bank4/5
 12844  0A00  3F56               	moviw [22]fsr1
 12845  0A01  0020               	movlb	0	; select bank0
 12846  0A02  00A0               	movwf	setMemory_Data@data
 12847  0A03  3004               	movlw	4
 12848  0A04  31A7  2715  3189   	fcall	_setMemory_Data
 12849                           
 12850                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12851  0A07  0021               	movlb	1	; select bank1
 12852  0A08  086D               	movf	_product^(0+128),w
 12853  0A09  0086               	movwf	6
 12854  0A0A  3002               	movlw	2	; select bank4/5
 12855  0A0B  0087               	movwf	7
 12856  0A0C  3002               	movlw	2	; select bank4/5
 12857  0A0D  3F57               	moviw [23]fsr1
 12858  0A0E  0020               	movlb	0	; select bank0
 12859  0A0F  00A0               	movwf	setMemory_Data@data
 12860  0A10  3005               	movlw	5
 12861  0A11  31A7  2715  3189   	fcall	_setMemory_Data
 12862                           
 12863                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12864  0A14  0021               	movlb	1	; select bank1
 12865  0A15  1EB9               	btfss	(_myMain^(0+128)+10),5
 12866  0A16  2A21               	goto	l8655
 12867                           
 12868                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12869  0A17  12B9               	bcf	(_myMain^(0+128)+10),5
 12870                           
 12871                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12872  0A18  30AA               	movlw	170
 12873  0A19  0020               	movlb	0	; select bank0
 12874  0A1A  00A4               	movwf	??_Flash_Memory_Modify
 12875  0A1B  0824               	movf	??_Flash_Memory_Modify,w
 12876  0A1C  00A0               	movwf	setMemory_Data@data
 12877  0A1D  301E               	movlw	30
 12878  0A1E  31A7  2715  3189   	fcall	_setMemory_Data
 12879  0A21                     l8655:	
 12880                           
 12881                           ;MCU_B1.c: 1068: }
 12882                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12883  0A21  0024               	movlb	4	; select bank4
 12884  0A22  1D44               	btfss	(_Memory^(0+512)+36),2
 12885  0A23  2A28               	goto	l1504
 12886                           
 12887                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12888  0A24  1144               	bcf	(_Memory^(0+512)+36),2
 12889                           
 12890                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12891  0A25  0021               	movlb	1	; select bank1
 12892  0A26  11AF               	bcf	_myMain^(0+128),3
 12893                           
 12894                           ;MCU_B1.c: 1073: myMain.First = 0;
 12895  0A27  12AF               	bcf	_myMain^(0+128),5
 12896  0A28                     l1504:	
 12897                           
 12898                           ;MCU_B1.c: 1075: }
 12899                           ;MCU_B1.c: 1076: GIE = 0;
 12900  0A28  138B               	bcf	11,7	;volatile
 12901                           
 12902                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12903  0A29  31A7  2721  3189   	fcall	_Flash_Memory_Erasing
 12904                           
 12905                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12906  0A2C  319D  25D9         	fcall	_Flash_Memory_Write
 12907                           
 12908                           ;MCU_B1.c: 1079: GIE = 1;
 12909  0A2E  178B               	bsf	11,7	;volatile
 12910  0A2F  0008               	return
 12911  0A30                     __end_of_Flash_Memory_Modify:	
 12912                           
 12913                           	psect	text80
 12914  2721                     __ptext80:	
 12915 ;; *************** function _Flash_Memory_Erasing *****************
 12916 ;; Defined at:
 12917 ;;		line 1042 in file "../src/MCU_B1.c"
 12918 ;; Parameters:    Size  Location     Type
 12919 ;;		None
 12920 ;; Auto vars:     Size  Location     Type
 12921 ;;		None
 12922 ;; Return value:  Size  Location     Type
 12923 ;;		None               void
 12924 ;; Registers used:
 12925 ;;		wreg, status,2, status,0, pclath, cstack
 12926 ;; Tracked objects:
 12927 ;;		On entry : 0/0
 12928 ;;		On exit  : 0/0
 12929 ;;		Unchanged: 0/0
 12930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;Total ram usage:        0 bytes
 12936 ;; Hardware stack levels used:    1
 12937 ;; Hardware stack levels required when called:    6
 12938 ;; This function calls:
 12939 ;;		_Flash_Memory_Unlock
 12940 ;; This function is called by:
 12941 ;;		_Flash_Memory_Modify
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           
 12946                           ;psect for function _Flash_Memory_Erasing
 12947  2721                     _Flash_Memory_Erasing:	
 12948                           
 12949                           ;MCU_B1.c: 1043: CFGS = 0;
 12950                           
 12951                           ;incstack = 0
 12952                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12953  2721  0023               	movlb	3	; select bank3
 12954  2722  1315               	bcf	21,6	;volatile
 12955                           
 12956                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12957  2723  3030               	movlw	48
 12958  2724  0092               	movwf	18	;volatile
 12959                           
 12960                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12961  2725  0191               	clrf	17	;volatile
 12962                           
 12963                           ;MCU_B1.c: 1046: FREE = 1;
 12964  2726  1615               	bsf	21,4	;volatile
 12965                           
 12966                           ;MCU_B1.c: 1047: WREN = 1;
 12967  2727  1515               	bsf	21,2	;volatile
 12968                           
 12969                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12970  2728  31A6  26BC         	fcall	_Flash_Memory_Unlock
 12971                           
 12972                           ;MCU_B1.c: 1049: WREN = 0;
 12973  272A  0023               	movlb	3	; select bank3
 12974  272B  1115               	bcf	21,2	;volatile
 12975  272C  0008               	return
 12976  272D                     __end_of_Flash_Memory_Erasing:	
 12977                           
 12978                           	psect	text81
 12979  0705                     __ptext81:	
 12980 ;; *************** function _Flash_Memory_Initialization *****************
 12981 ;; Defined at:
 12982 ;;		line 932 in file "../src/MCU_B1.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;		None
 12985 ;; Auto vars:     Size  Location     Type
 12986 ;;  value           1    5[BANK0 ] unsigned char 
 12987 ;; Return value:  Size  Location     Type
 12988 ;;		None               void
 12989 ;; Registers used:
 12990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12991 ;; Tracked objects:
 12992 ;;		On entry : 0/0
 12993 ;;		On exit  : 0/0
 12994 ;;		Unchanged: 0/0
 12995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12999 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13000 ;;Total ram usage:        2 bytes
 13001 ;; Hardware stack levels used:    1
 13002 ;; Hardware stack levels required when called:    7
 13003 ;; This function calls:
 13004 ;;		_Flash_Memory_Read
 13005 ;;		_Flash_Memory_Write
 13006 ;;		_setMemory_Data
 13007 ;; This function is called by:
 13008 ;;		_main
 13009 ;; This function uses a non-reentrant model
 13010 ;;
 13011                           
 13012                           
 13013                           ;psect for function _Flash_Memory_Initialization
 13014  0705                     _Flash_Memory_Initialization:	
 13015                           
 13016                           ;MCU_B1.c: 933: char value = 0;
 13017                           
 13018                           ;incstack = 0
 13019                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13020  0705  0020               	movlb	0	; select bank0
 13021  0706  01A5               	clrf	Flash_Memory_Initialization@value
 13022                           
 13023                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 13024  0707  301F               	movlw	31
 13025  0708  319A  2269  3187   	fcall	_Flash_Memory_Read
 13026  070B  3AAA               	xorlw	170
 13027  070C  1D03               	skipz
 13028  070D  2F87               	goto	l9059
 13029                           
 13030                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 13031  070E  3000               	movlw	0
 13032  070F  319A  2269  3187   	fcall	_Flash_Memory_Read
 13033  0712  0020               	movlb	0	; select bank0
 13034  0713  00A4               	movwf	??_Flash_Memory_Initialization
 13035  0714  0021               	movlb	1	; select bank1
 13036  0715  086D               	movf	_product^(0+128),w
 13037  0716  3E0C               	addlw	12
 13038  0717  0086               	movwf	6
 13039  0718  3002               	movlw	2	; select bank4/5
 13040  0719  0087               	movwf	7
 13041  071A  0020               	movlb	0	; select bank0
 13042  071B  0824               	movf	??_Flash_Memory_Initialization,w
 13043  071C  0081               	movwf	1
 13044                           
 13045                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 13046  071D  3001               	movlw	1
 13047  071E  319A  2269  3187   	fcall	_Flash_Memory_Read
 13048  0721  0020               	movlb	0	; select bank0
 13049  0722  00A4               	movwf	??_Flash_Memory_Initialization
 13050  0723  0021               	movlb	1	; select bank1
 13051  0724  086D               	movf	_product^(0+128),w
 13052  0725  3E0D               	addlw	13
 13053  0726  0086               	movwf	6
 13054  0727  3002               	movlw	2	; select bank4/5
 13055  0728  0087               	movwf	7
 13056  0729  0020               	movlb	0	; select bank0
 13057  072A  0824               	movf	??_Flash_Memory_Initialization,w
 13058  072B  0081               	movwf	1
 13059                           
 13060                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 13061  072C  3002               	movlw	2
 13062  072D  319A  2269  3187   	fcall	_Flash_Memory_Read
 13063  0730  0020               	movlb	0	; select bank0
 13064  0731  00A4               	movwf	??_Flash_Memory_Initialization
 13065  0732  0021               	movlb	1	; select bank1
 13066  0733  086D               	movf	_product^(0+128),w
 13067  0734  3E0E               	addlw	14
 13068  0735  0086               	movwf	6
 13069  0736  3002               	movlw	2	; select bank4/5
 13070  0737  0087               	movwf	7
 13071  0738  0020               	movlb	0	; select bank0
 13072  0739  0824               	movf	??_Flash_Memory_Initialization,w
 13073  073A  0081               	movwf	1
 13074                           
 13075                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 13076  073B  3003               	movlw	3
 13077  073C  319A  2269  3187   	fcall	_Flash_Memory_Read
 13078  073F  0020               	movlb	0	; select bank0
 13079  0740  00A4               	movwf	??_Flash_Memory_Initialization
 13080  0741  0021               	movlb	1	; select bank1
 13081  0742  086D               	movf	_product^(0+128),w
 13082  0743  3E15               	addlw	21
 13083  0744  0086               	movwf	6
 13084  0745  3002               	movlw	2	; select bank4/5
 13085  0746  0087               	movwf	7
 13086  0747  0020               	movlb	0	; select bank0
 13087  0748  0824               	movf	??_Flash_Memory_Initialization,w
 13088  0749  0081               	movwf	1
 13089                           
 13090                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 13091  074A  3004               	movlw	4
 13092  074B  319A  2269  3187   	fcall	_Flash_Memory_Read
 13093  074E  0020               	movlb	0	; select bank0
 13094  074F  00A4               	movwf	??_Flash_Memory_Initialization
 13095  0750  0021               	movlb	1	; select bank1
 13096  0751  086D               	movf	_product^(0+128),w
 13097  0752  3E16               	addlw	22
 13098  0753  0086               	movwf	6
 13099  0754  3002               	movlw	2	; select bank4/5
 13100  0755  0087               	movwf	7
 13101  0756  0020               	movlb	0	; select bank0
 13102  0757  0824               	movf	??_Flash_Memory_Initialization,w
 13103  0758  0081               	movwf	1
 13104                           
 13105                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 13106  0759  3005               	movlw	5
 13107  075A  319A  2269  3187   	fcall	_Flash_Memory_Read
 13108  075D  0020               	movlb	0	; select bank0
 13109  075E  00A4               	movwf	??_Flash_Memory_Initialization
 13110  075F  0021               	movlb	1	; select bank1
 13111  0760  086D               	movf	_product^(0+128),w
 13112  0761  3E17               	addlw	23
 13113  0762  0086               	movwf	6
 13114  0763  3002               	movlw	2	; select bank4/5
 13115  0764  0087               	movwf	7
 13116  0765  0020               	movlb	0	; select bank0
 13117  0766  0824               	movf	??_Flash_Memory_Initialization,w
 13118  0767  0081               	movwf	1
 13119                           
 13120                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13121  0768  0021               	movlb	1	; select bank1
 13122  0769  086D               	movf	_product^(0+128),w
 13123  076A  3E0C               	addlw	12
 13124  076B  0086               	movwf	6
 13125  076C  3002               	movlw	2	; select bank4/5
 13126  076D  0087               	movwf	7
 13127  076E  0801               	movf	1,w
 13128  076F  3AFF               	xorlw	255
 13129  0770  1D03               	skipz
 13130  0771  0008               	return
 13131  0772  086D               	movf	_product^(0+128),w
 13132  0773  3E0D               	addlw	13
 13133  0774  0086               	movwf	6
 13134  0775  3002               	movlw	2	; select bank4/5
 13135  0776  0087               	movwf	7
 13136  0777  0801               	movf	1,w
 13137  0778  3AFF               	xorlw	255
 13138  0779  1D03               	skipz
 13139  077A  0008               	return
 13140  077B  086D               	movf	_product^(0+128),w
 13141  077C  3E0E               	addlw	14
 13142  077D  0086               	movwf	6
 13143  077E  3002               	movlw	2	; select bank4/5
 13144  077F  0087               	movwf	7
 13145  0780  0801               	movf	1,w
 13146  0781  3AFF               	xorlw	255
 13147  0782  1D03               	skipz
 13148  0783  0008               	return
 13149                           
 13150                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 13151  0784  15AF               	bsf	_myMain^(0+128),3
 13152                           
 13153                           ;MCU_B1.c: 951: myMain.First = 1;
 13154  0785  16AF               	bsf	_myMain^(0+128),5
 13155                           
 13156                           ;MCU_B1.c: 952: }
 13157                           ;MCU_B1.c: 953: } else {
 13158  0786  0008               	return
 13159  0787                     l9059:	
 13160                           
 13161                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 13162  0787  30FF               	movlw	255
 13163  0788  0020               	movlb	0	; select bank0
 13164  0789  00A4               	movwf	??_Flash_Memory_Initialization
 13165  078A  0824               	movf	??_Flash_Memory_Initialization,w
 13166  078B  00A0               	movwf	setMemory_Data@data
 13167  078C  3000               	movlw	0
 13168  078D  31A7  2715  3187   	fcall	_setMemory_Data
 13169                           
 13170                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 13171  0790  30FF               	movlw	255
 13172  0791  0020               	movlb	0	; select bank0
 13173  0792  00A4               	movwf	??_Flash_Memory_Initialization
 13174  0793  0824               	movf	??_Flash_Memory_Initialization,w
 13175  0794  00A0               	movwf	setMemory_Data@data
 13176  0795  3001               	movlw	1
 13177  0796  31A7  2715  3187   	fcall	_setMemory_Data
 13178                           
 13179                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 13180  0799  30FF               	movlw	255
 13181  079A  0020               	movlb	0	; select bank0
 13182  079B  00A4               	movwf	??_Flash_Memory_Initialization
 13183  079C  0824               	movf	??_Flash_Memory_Initialization,w
 13184  079D  00A0               	movwf	setMemory_Data@data
 13185  079E  3002               	movlw	2
 13186  079F  31A7  2715  3187   	fcall	_setMemory_Data
 13187                           
 13188                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 13189  07A2  30FF               	movlw	255
 13190  07A3  0020               	movlb	0	; select bank0
 13191  07A4  00A4               	movwf	??_Flash_Memory_Initialization
 13192  07A5  0824               	movf	??_Flash_Memory_Initialization,w
 13193  07A6  00A0               	movwf	setMemory_Data@data
 13194  07A7  3003               	movlw	3
 13195  07A8  31A7  2715  3187   	fcall	_setMemory_Data
 13196                           
 13197                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 13198  07AB  30FF               	movlw	255
 13199  07AC  0020               	movlb	0	; select bank0
 13200  07AD  00A4               	movwf	??_Flash_Memory_Initialization
 13201  07AE  0824               	movf	??_Flash_Memory_Initialization,w
 13202  07AF  00A0               	movwf	setMemory_Data@data
 13203  07B0  3004               	movlw	4
 13204  07B1  31A7  2715  3187   	fcall	_setMemory_Data
 13205                           
 13206                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 13207  07B4  30FF               	movlw	255
 13208  07B5  0020               	movlb	0	; select bank0
 13209  07B6  00A4               	movwf	??_Flash_Memory_Initialization
 13210  07B7  0824               	movf	??_Flash_Memory_Initialization,w
 13211  07B8  00A0               	movwf	setMemory_Data@data
 13212  07B9  3005               	movlw	5
 13213  07BA  31A7  2715  3187   	fcall	_setMemory_Data
 13214                           
 13215                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 13216  07BD  30AA               	movlw	170
 13217  07BE  0020               	movlb	0	; select bank0
 13218  07BF  00A4               	movwf	??_Flash_Memory_Initialization
 13219  07C0  0824               	movf	??_Flash_Memory_Initialization,w
 13220  07C1  00A0               	movwf	setMemory_Data@data
 13221  07C2  301F               	movlw	31
 13222  07C3  31A7  2715  3187   	fcall	_setMemory_Data
 13223                           
 13224                           ;MCU_B1.c: 966: GIE = 0;
 13225  07C6  138B               	bcf	11,7	;volatile
 13226                           
 13227                           ;MCU_B1.c: 967: Flash_Memory_Write();
 13228  07C7  319D  25D9         	fcall	_Flash_Memory_Write
 13229                           
 13230                           ;MCU_B1.c: 968: GIE = 1;
 13231  07C9  178B               	bsf	11,7	;volatile
 13232                           
 13233                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 13234  07CA  0021               	movlb	1	; select bank1
 13235  07CB  15AF               	bsf	_myMain^(0+128),3
 13236                           
 13237                           ;MCU_B1.c: 970: myMain.First = 1;
 13238  07CC  16AF               	bsf	_myMain^(0+128),5
 13239                           
 13240                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 13241  07CD  1639               	bsf	(_myMain^(0+128)+10),4
 13242  07CE  0008               	return
 13243  07CF                     __end_of_Flash_Memory_Initialization:	
 13244                           
 13245                           	psect	text82
 13246  2715                     __ptext82:	
 13247 ;; *************** function _setMemory_Data *****************
 13248 ;; Defined at:
 13249 ;;		line 1094 in file "../src/MCU_B1.c"
 13250 ;; Parameters:    Size  Location     Type
 13251 ;;  address         1    wreg     unsigned char 
 13252 ;;  data            1    0[BANK0 ] unsigned char 
 13253 ;; Auto vars:     Size  Location     Type
 13254 ;;  address         1    2[BANK0 ] unsigned char 
 13255 ;; Return value:  Size  Location     Type
 13256 ;;		None               void
 13257 ;; Registers used:
 13258 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13259 ;; Tracked objects:
 13260 ;;		On entry : 0/0
 13261 ;;		On exit  : 0/0
 13262 ;;		Unchanged: 0/0
 13263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13264 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13267 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;Total ram usage:        3 bytes
 13269 ;; Hardware stack levels used:    1
 13270 ;; Hardware stack levels required when called:    5
 13271 ;; This function calls:
 13272 ;;		Nothing
 13273 ;; This function is called by:
 13274 ;;		_Flash_Memory_Initialization
 13275 ;;		_Flash_Memory_Modify
 13276 ;; This function uses a non-reentrant model
 13277 ;;
 13278                           
 13279                           
 13280                           ;psect for function _setMemory_Data
 13281  2715                     _setMemory_Data:	
 13282                           
 13283                           ;incstack = 0
 13284                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13285                           ;setMemory_Data@address stored from wreg
 13286  2715  0020               	movlb	0	; select bank0
 13287  2716  00A2               	movwf	setMemory_Data@address
 13288                           
 13289                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 13290  2717  0820               	movf	setMemory_Data@data,w
 13291  2718  00A1               	movwf	??_setMemory_Data
 13292  2719  0822               	movf	setMemory_Data@address,w
 13293  271A  3E20               	addlw	_Memory& (0+255)
 13294  271B  0086               	movwf	6
 13295  271C  3002               	movlw	2	; select bank4/5
 13296  271D  0087               	movwf	7
 13297  271E  0821               	movf	??_setMemory_Data,w
 13298  271F  0081               	movwf	1
 13299  2720  0008               	return
 13300  2721                     __end_of_setMemory_Data:	
 13301                           
 13302                           	psect	text83
 13303  1DD9                     __ptext83:	
 13304 ;; *************** function _Flash_Memory_Write *****************
 13305 ;; Defined at:
 13306 ;;		line 1023 in file "../src/MCU_B1.c"
 13307 ;; Parameters:    Size  Location     Type
 13308 ;;		None
 13309 ;; Auto vars:     Size  Location     Type
 13310 ;;  i               1    1[BANK0 ] unsigned char 
 13311 ;; Return value:  Size  Location     Type
 13312 ;;		None               void
 13313 ;; Registers used:
 13314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13315 ;; Tracked objects:
 13316 ;;		On entry : 0/0
 13317 ;;		On exit  : 0/0
 13318 ;;		Unchanged: 0/0
 13319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13323 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13324 ;;Total ram usage:        2 bytes
 13325 ;; Hardware stack levels used:    1
 13326 ;; Hardware stack levels required when called:    6
 13327 ;; This function calls:
 13328 ;;		_Flash_Memory_Unlock
 13329 ;; This function is called by:
 13330 ;;		_Flash_Memory_Initialization
 13331 ;;		_Flash_Memory_Modify
 13332 ;; This function uses a non-reentrant model
 13333 ;;
 13334                           
 13335                           
 13336                           ;psect for function _Flash_Memory_Write
 13337  1DD9                     _Flash_Memory_Write:	
 13338                           
 13339                           ;MCU_B1.c: 1024: char i = 0;
 13340                           
 13341                           ;incstack = 0
 13342                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13343  1DD9  0020               	movlb	0	; select bank0
 13344  1DDA  01A1               	clrf	Flash_Memory_Write@i
 13345                           
 13346                           ;MCU_B1.c: 1025: CFGS = 0;
 13347  1DDB  0023               	movlb	3	; select bank3
 13348  1DDC  1315               	bcf	21,6	;volatile
 13349                           
 13350                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 13351  1DDD  3030               	movlw	48
 13352  1DDE  0092               	movwf	18	;volatile
 13353                           
 13354                           ;MCU_B1.c: 1027: PMDATH = 0;
 13355  1DDF  0194               	clrf	20	;volatile
 13356                           
 13357                           ;MCU_B1.c: 1028: FREE = 0;
 13358  1DE0  1215               	bcf	21,4	;volatile
 13359                           
 13360                           ;MCU_B1.c: 1029: LWLO = 1;
 13361  1DE1  1695               	bsf	21,5	;volatile
 13362                           
 13363                           ;MCU_B1.c: 1030: WREN = 1;
 13364  1DE2  1515               	bsf	21,2	;volatile
 13365                           
 13366                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 13367  1DE3  0020               	movlb	0	; select bank0
 13368  1DE4  01A1               	clrf	Flash_Memory_Write@i
 13369  1DE5  3020               	movlw	32
 13370  1DE6  0221               	subwf	Flash_Memory_Write@i,w
 13371  1DE7  1803               	btfsc	3,0
 13372  1DE8  2E01               	goto	l1494
 13373  1DE9                     l7995:	
 13374                           
 13375                           ;MCU_B1.c: 1032: PMADRL = i;
 13376  1DE9  0821               	movf	Flash_Memory_Write@i,w
 13377  1DEA  0023               	movlb	3	; select bank3
 13378  1DEB  0091               	movwf	17	;volatile
 13379                           
 13380                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 13381  1DEC  0020               	movlb	0	; select bank0
 13382  1DED  0821               	movf	Flash_Memory_Write@i,w
 13383  1DEE  3E20               	addlw	_Memory& (0+255)
 13384  1DEF  0086               	movwf	6
 13385  1DF0  3002               	movlw	2	; select bank4/5
 13386  1DF1  0087               	movwf	7
 13387  1DF2  0801               	movf	1,w
 13388  1DF3  0023               	movlb	3	; select bank3
 13389  1DF4  0093               	movwf	19	;volatile
 13390                           
 13391                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 13392  1DF5  31A6  26BC  319D   	fcall	_Flash_Memory_Unlock
 13393  1DF8  3001               	movlw	1
 13394  1DF9  0020               	movlb	0	; select bank0
 13395  1DFA  00A0               	movwf	??_Flash_Memory_Write
 13396  1DFB  0820               	movf	??_Flash_Memory_Write,w
 13397  1DFC  07A1               	addwf	Flash_Memory_Write@i,f
 13398  1DFD  3020               	movlw	32
 13399  1DFE  0221               	subwf	Flash_Memory_Write@i,w
 13400  1DFF  1C03               	skipc
 13401  1E00  2DE9               	goto	l7995
 13402  1E01                     l1494:	
 13403                           
 13404                           ;MCU_B1.c: 1035: }
 13405                           ;MCU_B1.c: 1036: LWLO = 0;
 13406  1E01  0023               	movlb	3	; select bank3
 13407  1E02  1295               	bcf	21,5	;volatile
 13408                           
 13409                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13410  1E03  31A6  26BC         	fcall	_Flash_Memory_Unlock
 13411                           
 13412                           ;MCU_B1.c: 1038: WREN = 0;
 13413  1E05  0023               	movlb	3	; select bank3
 13414  1E06  1115               	bcf	21,2	;volatile
 13415  1E07  0008               	return
 13416  1E08                     __end_of_Flash_Memory_Write:	
 13417                           
 13418                           	psect	text84
 13419  26BC                     __ptext84:	
 13420 ;; *************** function _Flash_Memory_Unlock *****************
 13421 ;; Defined at:
 13422 ;;		line 1002 in file "../src/MCU_B1.c"
 13423 ;; Parameters:    Size  Location     Type
 13424 ;;		None
 13425 ;; Auto vars:     Size  Location     Type
 13426 ;;		None
 13427 ;; Return value:  Size  Location     Type
 13428 ;;		None               void
 13429 ;; Registers used:
 13430 ;;		wreg
 13431 ;; Tracked objects:
 13432 ;;		On entry : 0/0
 13433 ;;		On exit  : 0/0
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13440 ;;Total ram usage:        0 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    5
 13443 ;; This function calls:
 13444 ;;		Nothing
 13445 ;; This function is called by:
 13446 ;;		_Flash_Memory_Write
 13447 ;;		_Flash_Memory_Erasing
 13448 ;; This function uses a non-reentrant model
 13449 ;;
 13450                           
 13451                           
 13452                           ;psect for function _Flash_Memory_Unlock
 13453  26BC                     _Flash_Memory_Unlock:	
 13454                           
 13455                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13456                           
 13457                           ;incstack = 0
 13458                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13459  26BC  3055               	movlw	85
 13460  26BD  0023               	movlb	3	; select bank3
 13461  26BE  0096               	movwf	22	;volatile
 13462                           
 13463                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13464  26BF  30AA               	movlw	170
 13465  26C0  0096               	movwf	22	;volatile
 13466                           
 13467                           ;MCU_B1.c: 1005: WR = 1;
 13468  26C1  1495               	bsf	21,1	;volatile
 13469                           
 13470                           ;MCU_B1.c: 1006: __nop();
 13471  26C2  0000               	nop
 13472                           
 13473                           ;MCU_B1.c: 1007: __nop();
 13474  26C3  0000               	nop
 13475  26C4  0008               	return
 13476  26C5                     __end_of_Flash_Memory_Unlock:	
 13477                           
 13478                           	psect	text85
 13479  1A69                     __ptext85:	
 13480 ;; *************** function _Flash_Memory_Read *****************
 13481 ;; Defined at:
 13482 ;;		line 1011 in file "../src/MCU_B1.c"
 13483 ;; Parameters:    Size  Location     Type
 13484 ;;  address         1    wreg     unsigned char 
 13485 ;; Auto vars:     Size  Location     Type
 13486 ;;  address         1    2[BANK0 ] unsigned char 
 13487 ;;  ret             1    3[BANK0 ] unsigned char 
 13488 ;;  i               1    1[BANK0 ] unsigned char 
 13489 ;; Return value:  Size  Location     Type
 13490 ;;                  1    wreg      unsigned char 
 13491 ;; Registers used:
 13492 ;;		wreg, status,2
 13493 ;; Tracked objects:
 13494 ;;		On entry : 0/0
 13495 ;;		On exit  : 0/0
 13496 ;;		Unchanged: 0/0
 13497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13501 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13502 ;;Total ram usage:        4 bytes
 13503 ;; Hardware stack levels used:    1
 13504 ;; Hardware stack levels required when called:    5
 13505 ;; This function calls:
 13506 ;;		Nothing
 13507 ;; This function is called by:
 13508 ;;		_Flash_Memory_Initialization
 13509 ;;		_Flash_Memory_Modify
 13510 ;; This function uses a non-reentrant model
 13511 ;;
 13512                           
 13513                           
 13514                           ;psect for function _Flash_Memory_Read
 13515  1A69                     _Flash_Memory_Read:	
 13516                           
 13517                           ;incstack = 0
 13518                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13519                           ;Flash_Memory_Read@address stored from wreg
 13520  1A69  0020               	movlb	0	; select bank0
 13521  1A6A  00A2               	movwf	Flash_Memory_Read@address
 13522                           
 13523                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13524  1A6B  01A1               	clrf	Flash_Memory_Read@i
 13525  1A6C  01A3               	clrf	Flash_Memory_Read@ret
 13526                           
 13527                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13528  1A6D  3030               	movlw	48
 13529  1A6E  0023               	movlb	3	; select bank3
 13530  1A6F  0092               	movwf	18	;volatile
 13531                           
 13532                           ;MCU_B1.c: 1014: PMADRL = address;
 13533  1A70  0020               	movlb	0	; select bank0
 13534  1A71  0822               	movf	Flash_Memory_Read@address,w
 13535  1A72  0023               	movlb	3	; select bank3
 13536  1A73  0091               	movwf	17	;volatile
 13537                           
 13538                           ;MCU_B1.c: 1015: CFGS = 0;
 13539  1A74  1315               	bcf	21,6	;volatile
 13540                           
 13541                           ;MCU_B1.c: 1016: RD = 1;
 13542  1A75  1415               	bsf	21,0	;volatile
 13543                           
 13544                           ;MCU_B1.c: 1017: i = PMDATH;
 13545  1A76  0814               	movf	20,w	;volatile
 13546  1A77  0020               	movlb	0	; select bank0
 13547  1A78  00A0               	movwf	??_Flash_Memory_Read
 13548  1A79  0820               	movf	??_Flash_Memory_Read,w
 13549  1A7A  00A1               	movwf	Flash_Memory_Read@i
 13550                           
 13551                           ;MCU_B1.c: 1018: ret = PMDATL;
 13552  1A7B  0023               	movlb	3	; select bank3
 13553  1A7C  0813               	movf	19,w	;volatile
 13554  1A7D  0020               	movlb	0	; select bank0
 13555  1A7E  00A0               	movwf	??_Flash_Memory_Read
 13556  1A7F  0820               	movf	??_Flash_Memory_Read,w
 13557  1A80  00A3               	movwf	Flash_Memory_Read@ret
 13558                           
 13559                           ;MCU_B1.c: 1019: return ret;
 13560  1A81  0823               	movf	Flash_Memory_Read@ret,w
 13561  1A82  0008               	return
 13562  1A83                     __end_of_Flash_Memory_Read:	
 13563                           
 13564                           	psect	text86
 13565  0559                     __ptext86:	
 13566 ;; *************** function _Exception_Main *****************
 13567 ;; Defined at:
 13568 ;;		line 499 in file "../src/main_B1.c"
 13569 ;; Parameters:    Size  Location     Type
 13570 ;;		None
 13571 ;; Auto vars:     Size  Location     Type
 13572 ;;  i               2   19[BANK0 ] int 
 13573 ;;  i               2   17[BANK0 ] int 
 13574 ;;  lights          1   21[BANK0 ] unsigned char 
 13575 ;;  error           1   16[BANK0 ] unsigned char 
 13576 ;;  count           1   15[BANK0 ] unsigned char 
 13577 ;;  status          1   14[BANK0 ] unsigned char 
 13578 ;; Return value:  Size  Location     Type
 13579 ;;		None               void
 13580 ;; Registers used:
 13581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13582 ;; Tracked objects:
 13583 ;;		On entry : 0/0
 13584 ;;		On exit  : 0/0
 13585 ;;		Unchanged: 0/0
 13586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13588 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13590 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13591 ;;Total ram usage:        9 bytes
 13592 ;; Hardware stack levels used:    1
 13593 ;; Hardware stack levels required when called:    7
 13594 ;; This function calls:
 13595 ;;		_getDimmerLights_Line
 13596 ;;		_getDimmerLights_Status
 13597 ;;		_getMain_All_Error_Status
 13598 ;;		_getMain_All_LightsStatus
 13599 ;;		_setBuz
 13600 ;;		_setDimmerLights_SwOff
 13601 ;;		_setLED
 13602 ;; This function is called by:
 13603 ;;		_main
 13604 ;; This function uses a non-reentrant model
 13605 ;;
 13606                           
 13607                           
 13608                           ;psect for function _Exception_Main
 13609  0559                     _Exception_Main:	
 13610                           
 13611                           ;main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13612                           
 13613                           ;incstack = 0
 13614                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13615  0559  3000               	movlw	0
 13616  055A  319E  2638  3185   	fcall	_getMain_All_Error_Status
 13617  055D  0020               	movlb	0	; select bank0
 13618  055E  00AD               	movwf	??_Exception_Main
 13619  055F  082D               	movf	??_Exception_Main,w
 13620  0560  00B0               	movwf	Exception_Main@error
 13621                           
 13622                           ;main_B1.c: 501: char lights = 0, count = 2;
 13623  0561  01B5               	clrf	Exception_Main@lights
 13624  0562  3002               	movlw	2
 13625  0563  00AD               	movwf	??_Exception_Main
 13626  0564  082D               	movf	??_Exception_Main,w
 13627  0565  00AF               	movwf	Exception_Main@count
 13628                           
 13629                           ;main_B1.c: 502: char status = 0;
 13630  0566  01AE               	clrf	Exception_Main@status
 13631                           
 13632                           ;main_B1.c: 504: if (myMain.Error_Run == 1) {
 13633  0567  0021               	movlb	1	; select bank1
 13634  0568  1DB9               	btfss	(_myMain^(0+128)+10),3
 13635  0569  2D79               	goto	l10247
 13636                           
 13637                           ;main_B1.c: 505: if (error == 0) {
 13638  056A  0020               	movlb	0	; select bank0
 13639  056B  08B0               	movf	Exception_Main@error,f
 13640  056C  1D03               	skipz
 13641  056D  0008               	return
 13642                           
 13643                           ;main_B1.c: 506: myMain.Error_Run = 0;
 13644  056E  0021               	movlb	1	; select bank1
 13645  056F  11B9               	bcf	(_myMain^(0+128)+10),3
 13646                           
 13647                           ;main_B1.c: 509: setLED(99, 10);
 13648  0570  300A               	movlw	10
 13649  0571  0020               	movlb	0	; select bank0
 13650  0572  00AD               	movwf	??_Exception_Main
 13651  0573  082D               	movf	??_Exception_Main,w
 13652  0574  00A2               	movwf	setLED@command
 13653  0575  3063               	movlw	99
 13654  0576  3191  21E5         	fcall	_setLED
 13655                           
 13656                           ;main_B1.c: 522: }
 13657                           ;main_B1.c: 523: } else {
 13658  0578  0008               	return
 13659  0579                     l10247:	
 13660                           
 13661                           ;main_B1.c: 524: if (error != 0) {
 13662  0579  0020               	movlb	0	; select bank0
 13663  057A  0830               	movf	Exception_Main@error,w
 13664  057B  1903               	btfsc	3,2
 13665  057C  0008               	return
 13666                           
 13667                           ;main_B1.c: 525: myMain.Error_Run = 1;
 13668  057D  0021               	movlb	1	; select bank1
 13669  057E  15B9               	bsf	(_myMain^(0+128)+10),3
 13670                           
 13671                           ;main_B1.c: 527: setLED(99, 11);
 13672  057F  300B               	movlw	11
 13673  0580  0020               	movlb	0	; select bank0
 13674  0581  00AD               	movwf	??_Exception_Main
 13675  0582  082D               	movf	??_Exception_Main,w
 13676  0583  00A2               	movwf	setLED@command
 13677  0584  3063               	movlw	99
 13678  0585  3191  21E5  3185   	fcall	_setLED
 13679                           
 13680                           ;main_B1.c: 538: switch (error) {
 13681  0588  2E25               	goto	l10295
 13682  0589                     l10253:	
 13683                           ;main_B1.c: 539: case 2:
 13684                           
 13685                           
 13686                           ;main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13687  0589  3198  20E1  3185   	fcall	_getMain_All_LightsStatus
 13688  058C  3A01               	xorlw	1
 13689  058D  1D03               	skipz
 13690  058E  2D98               	goto	l10257
 13691                           
 13692                           ;main_B1.c: 547: setBuz(10, 300);
 13693  058F  302C               	movlw	44
 13694  0590  0020               	movlb	0	; select bank0
 13695  0591  00A9               	movwf	setBuz@time
 13696  0592  3001               	movlw	1
 13697  0593  00AA               	movwf	setBuz@time+1
 13698  0594  300A               	movlw	10
 13699  0595  3193  2335  3185   	fcall	_setBuz
 13700  0598                     l10257:	
 13701                           
 13702                           ;main_B1.c: 548: }
 13703                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13704  0598  0020               	movlb	0	; select bank0
 13705  0599  01B1               	clrf	Exception_Main@i
 13706  059A  01B2               	clrf	Exception_Main@i+1
 13707  059B                     l10267:	
 13708  059B  0832               	movf	Exception_Main@i+1,w
 13709  059C  3A80               	xorlw	128
 13710  059D  00AD               	movwf	??_Exception_Main
 13711  059E  3080               	movlw	128
 13712  059F  022D               	subwf	??_Exception_Main,w
 13713  05A0  1D03               	skipz
 13714  05A1  2DA4               	goto	u11645
 13715  05A2  082F               	movf	Exception_Main@count,w
 13716  05A3  0231               	subwf	Exception_Main@i,w
 13717  05A4                     u11645:	
 13718  05A4  1803               	btfsc	3,0
 13719  05A5  2DC6               	goto	u11640
 13720                           
 13721                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13722  05A6  0020               	movlb	0	; select bank0
 13723  05A7  0831               	movf	Exception_Main@i,w
 13724  05A8  3E01               	addlw	1
 13725  05A9  31A7  2787  3185   	fcall	_getDimmerLights_Status
 13726  05AC  3A01               	xorlw	1
 13727  05AD  1D03               	skipz
 13728  05AE  2DC0               	goto	l10265
 13729                           
 13730                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13731  05AF  0021               	movlb	1	; select bank1
 13732  05B0  085A               	movf	_DimmerLights^(0+128),w
 13733  05B1  0086               	movwf	6
 13734  05B2  3001               	movlw	1	; select bank2/3
 13735  05B3  0087               	movwf	7
 13736  05B4  1401               	bsf	1,0
 13737                           
 13738                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13739  05B5  0A5A               	incf	_DimmerLights^(0+128),w
 13740  05B6  0086               	movwf	6
 13741  05B7  3001               	movlw	1	; select bank2/3
 13742  05B8  0087               	movwf	7
 13743  05B9  1001               	bcf	1,0
 13744                           
 13745                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13746  05BA  0020               	movlb	0	; select bank0
 13747  05BB  0831               	movf	Exception_Main@i,w
 13748  05BC  3E01               	addlw	1
 13749  05BD  319F  274C  3185   	fcall	_setDimmerLights_SwOff
 13750  05C0                     l10265:	
 13751  05C0  3001               	movlw	1
 13752  05C1  0020               	movlb	0	; select bank0
 13753  05C2  07B1               	addwf	Exception_Main@i,f
 13754  05C3  3000               	movlw	0
 13755  05C4  3DB2               	addwfc	Exception_Main@i+1,f
 13756  05C5  2D9B               	goto	l10267
 13757  05C6                     u11640:	
 13758  05C6  0020               	movlb	0	; select bank0
 13759  05C7  0008               	return
 13760  05C8                     l10269:	
 13761                           ;main_B1.c: 561: case 3:
 13762                           
 13763                           ;main_B1.c: 556: }
 13764                           ;main_B1.c: 557: }
 13765                           ;main_B1.c: 560: break;
 13766                           
 13767                           
 13768                           ;main_B1.c: 563: setBuz(5, 300);
 13769  05C8  302C               	movlw	44
 13770  05C9  0020               	movlb	0	; select bank0
 13771  05CA  00A9               	movwf	setBuz@time
 13772  05CB  3001               	movlw	1
 13773  05CC  00AA               	movwf	setBuz@time+1
 13774  05CD  3005               	movlw	5
 13775  05CE  3193  2335  3185   	fcall	_setBuz
 13776                           
 13777                           ;main_B1.c: 564: lights = getDimmerLights_Line();
 13778  05D1  3198  20F4  3185   	fcall	_getDimmerLights_Line
 13779  05D4  0020               	movlb	0	; select bank0
 13780  05D5  00AD               	movwf	??_Exception_Main
 13781  05D6  082D               	movf	??_Exception_Main,w
 13782  05D7  00B5               	movwf	Exception_Main@lights
 13783                           
 13784                           ;main_B1.c: 565: if (lights == 0) {
 13785  05D8  08B5               	movf	Exception_Main@lights,f
 13786  05D9  1D03               	skipz
 13787  05DA  2E0A               	goto	l10287
 13788                           
 13789                           ;main_B1.c: 567: for (int i = 0; i < count; i++) {
 13790  05DB  01B3               	clrf	Exception_Main@i_7194
 13791  05DC  01B4               	clrf	Exception_Main@i_7194+1
 13792  05DD                     l10285:	
 13793  05DD  0834               	movf	Exception_Main@i_7194+1,w
 13794  05DE  3A80               	xorlw	128
 13795  05DF  00AD               	movwf	??_Exception_Main
 13796  05E0  3080               	movlw	128
 13797  05E1  022D               	subwf	??_Exception_Main,w
 13798  05E2  1D03               	skipz
 13799  05E3  2DE6               	goto	u11675
 13800  05E4  082F               	movf	Exception_Main@count,w
 13801  05E5  0233               	subwf	Exception_Main@i_7194,w
 13802  05E6                     u11675:	
 13803  05E6  1803               	btfsc	3,0
 13804  05E7  2E08               	goto	u11670
 13805                           
 13806                           ;main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13807  05E8  0020               	movlb	0	; select bank0
 13808  05E9  0833               	movf	Exception_Main@i_7194,w
 13809  05EA  3E01               	addlw	1
 13810  05EB  31A7  2787  3185   	fcall	_getDimmerLights_Status
 13811  05EE  3A01               	xorlw	1
 13812  05EF  1D03               	skipz
 13813  05F0  2E02               	goto	l10283
 13814                           
 13815                           ;main_B1.c: 570: DimmerLights->SwFlag = 1;
 13816  05F1  0021               	movlb	1	; select bank1
 13817  05F2  085A               	movf	_DimmerLights^(0+128),w
 13818  05F3  0086               	movwf	6
 13819  05F4  3001               	movlw	1	; select bank2/3
 13820  05F5  0087               	movwf	7
 13821  05F6  1401               	bsf	1,0
 13822                           
 13823                           ;main_B1.c: 571: DimmerLights->Status = 0;
 13824  05F7  0A5A               	incf	_DimmerLights^(0+128),w
 13825  05F8  0086               	movwf	6
 13826  05F9  3001               	movlw	1	; select bank2/3
 13827  05FA  0087               	movwf	7
 13828  05FB  1001               	bcf	1,0
 13829                           
 13830                           ;main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13831  05FC  0020               	movlb	0	; select bank0
 13832  05FD  0833               	movf	Exception_Main@i_7194,w
 13833  05FE  3E01               	addlw	1
 13834  05FF  319F  274C  3185   	fcall	_setDimmerLights_SwOff
 13835  0602                     l10283:	
 13836  0602  3001               	movlw	1
 13837  0603  0020               	movlb	0	; select bank0
 13838  0604  07B3               	addwf	Exception_Main@i_7194,f
 13839  0605  3000               	movlw	0
 13840  0606  3DB4               	addwfc	Exception_Main@i_7194+1,f
 13841  0607  2DDD               	goto	l10285
 13842  0608                     u11670:	
 13843  0608  0020               	movlb	0	; select bank0
 13844  0609  0008               	return
 13845  060A                     l10287:	
 13846                           ;main_B1.c: 573: }
 13847                           ;main_B1.c: 574: }
 13848                           ;main_B1.c: 575: } else {
 13849                           
 13850                           
 13851                           ;main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13852  060A  0020               	movlb	0	; select bank0
 13853  060B  0835               	movf	Exception_Main@lights,w
 13854  060C  31A7  2787  3185   	fcall	_getDimmerLights_Status
 13855  060F  3A01               	xorlw	1
 13856  0610  1903               	btfsc	3,2
 13857  0611  2E14               	goto	l10289
 13858  0612  0020               	movlb	0	; select bank0
 13859  0613  0008               	return
 13860  0614                     l10289:	
 13861                           
 13862                           ;main_B1.c: 579: DimmerLights->SwFlag = 1;
 13863  0614  0021               	movlb	1	; select bank1
 13864  0615  085A               	movf	_DimmerLights^(0+128),w
 13865  0616  0086               	movwf	6
 13866  0617  3001               	movlw	1	; select bank2/3
 13867  0618  0087               	movwf	7
 13868  0619  1401               	bsf	1,0
 13869                           
 13870                           ;main_B1.c: 580: DimmerLights->Status = 0;
 13871  061A  0A5A               	incf	_DimmerLights^(0+128),w
 13872  061B  0086               	movwf	6
 13873  061C  3001               	movlw	1	; select bank2/3
 13874  061D  0087               	movwf	7
 13875  061E  1001               	bcf	1,0
 13876                           
 13877                           ;main_B1.c: 581: setDimmerLights_SwOff(lights);
 13878  061F  0020               	movlb	0	; select bank0
 13879  0620  0835               	movf	Exception_Main@lights,w
 13880  0621  319F  274C         	fcall	_setDimmerLights_SwOff
 13881  0623  0020               	movlb	0	; select bank0
 13882  0624  0008               	return
 13883  0625                     l10295:	
 13884                           ;main_B1.c: 586: }
 13885                           
 13886                           ;main_B1.c: 582: }
 13887                           ;main_B1.c: 583: }
 13888                           ;main_B1.c: 585: break;
 13889                           
 13890  0625  0020               	movlb	0	; select bank0
 13891  0626  0830               	movf	Exception_Main@error,w
 13892                           
 13893                           ; Switch size 1, requested type "space"
 13894                           ; Number of cases is 2, Range of values is 2 to 3
 13895                           ; switch strategies available:
 13896                           ; Name         Instructions Cycles
 13897                           ; simple_byte            7     4 (average)
 13898                           ; direct_byte           13     9 (fixed)
 13899                           ; jumptable            263     9 (fixed)
 13900                           ;	Chosen strategy is simple_byte
 13901  0627  3A02               	xorlw	2	; case 2
 13902  0628  1903               	skipnz
 13903  0629  2D89               	goto	l10253
 13904  062A  3A01               	xorlw	1	; case 3
 13905  062B  1903               	skipnz
 13906  062C  2DC8               	goto	l10269
 13907  062D  2E2F               	goto	l2985
 13908  062E  0008               	return
 13909  062F                     l2985:	
 13910  062F  0008               	return
 13911  0630                     __end_of_Exception_Main:	
 13912                           
 13913                           	psect	text87
 13914  18F4                     __ptext87:	
 13915 ;; *************** function _getDimmerLights_Line *****************
 13916 ;; Defined at:
 13917 ;;		line 1174 in file "../src/Dimmer_B1.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;		None
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;  line            1    1[BANK0 ] unsigned char 
 13922 ;; Return value:  Size  Location     Type
 13923 ;;                  1    wreg      unsigned char 
 13924 ;; Registers used:
 13925 ;;		wreg, status,2
 13926 ;; Tracked objects:
 13927 ;;		On entry : 0/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;Total ram usage:        2 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; Hardware stack levels required when called:    5
 13938 ;; This function calls:
 13939 ;;		Nothing
 13940 ;; This function is called by:
 13941 ;;		_Exception_Main
 13942 ;; This function uses a non-reentrant model
 13943 ;;
 13944                           
 13945                           
 13946                           ;psect for function _getDimmerLights_Line
 13947  18F4                     _getDimmerLights_Line:	
 13948                           
 13949                           ;Dimmer_B1.c: 1175: char line = 0;
 13950                           
 13951                           ;incstack = 0
 13952                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13953  18F4  0020               	movlb	0	; select bank0
 13954  18F5  01A1               	clrf	getDimmerLights_Line@line
 13955                           
 13956                           ;Dimmer_B1.c: 1177: if (DimmerLights1.Line == 1) {
 13957  18F6  0023               	movlb	3	; select bank3
 13958  18F7  1CBF               	btfss	(_DimmerLights1^(0+384)+1),1
 13959  18F8  28FD               	goto	l950
 13960                           
 13961                           ;Dimmer_B1.c: 1178: line = 1;
 13962  18F9  0020               	movlb	0	; select bank0
 13963  18FA  01A1               	clrf	getDimmerLights_Line@line
 13964  18FB  0AA1               	incf	getDimmerLights_Line@line,f
 13965                           
 13966                           ;Dimmer_B1.c: 1179: }
 13967  18FC  2904               	goto	l951
 13968  18FD                     l950:	
 13969                           
 13970                           ;Dimmer_B1.c: 1182: else if (DimmerLights2.Line == 1) {
 13971  18FD  1CC8               	btfss	(_DimmerLights2^(0+384)+1),1
 13972  18FE  2904               	goto	l951
 13973                           
 13974                           ;Dimmer_B1.c: 1183: line = 2;
 13975  18FF  3002               	movlw	2
 13976  1900  0020               	movlb	0	; select bank0
 13977  1901  00A0               	movwf	??_getDimmerLights_Line
 13978  1902  0820               	movf	??_getDimmerLights_Line,w
 13979  1903  00A1               	movwf	getDimmerLights_Line@line
 13980  1904                     l951:	
 13981                           
 13982                           ;Dimmer_B1.c: 1184: }
 13983                           ;Dimmer_B1.c: 1191: return line;
 13984  1904  0020               	movlb	0	; select bank0
 13985  1905  0821               	movf	getDimmerLights_Line@line,w
 13986  1906  0008               	return
 13987  1907                     __end_of_getDimmerLights_Line:	
 13988                           
 13989                           	psect	text88
 13990  1E08                     __ptext88:	
 13991 ;; *************** function _DimmerLights_Main *****************
 13992 ;; Defined at:
 13993 ;;		line 837 in file "../src/Dimmer_B1.c"
 13994 ;; Parameters:    Size  Location     Type
 13995 ;;		None
 13996 ;; Auto vars:     Size  Location     Type
 13997 ;;		None
 13998 ;; Return value:  Size  Location     Type
 13999 ;;		None               void
 14000 ;; Registers used:
 14001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14002 ;; Tracked objects:
 14003 ;;		On entry : 0/0
 14004 ;;		On exit  : 0/0
 14005 ;;		Unchanged: 0/0
 14006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;Total ram usage:        0 bytes
 14012 ;; Hardware stack levels used:    1
 14013 ;; Hardware stack levels required when called:   10
 14014 ;; This function calls:
 14015 ;;		_DimmerLights_DimmingFunction
 14016 ;;		_DimmerLights_TwoPhase_Main
 14017 ;;		_getLoad_OK
 14018 ;;		_getMain_All_Error_Status
 14019 ;;		_getMain_All_LightsStatus
 14020 ;;		_setDimmerLights_Main
 14021 ;; This function is called by:
 14022 ;;		_main
 14023 ;; This function uses a non-reentrant model
 14024 ;;
 14025                           
 14026                           
 14027                           ;psect for function _DimmerLights_Main
 14028  1E08                     _DimmerLights_Main:	
 14029                           
 14030                           ;Dimmer_B1.c: 840: if (Dimmer.LoadGO == 1) {
 14031                           
 14032                           ;incstack = 0
 14033                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14034  1E08  0022               	movlb	2	; select bank2
 14035  1E09  1CAC               	btfss	_Dimmer^(0+256),1
 14036  1E0A  2E20               	goto	l10203
 14037                           
 14038                           ;Dimmer_B1.c: 841: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 14039  1E0B  31A6  268B  319E   	fcall	_getLoad_OK
 14040  1E0E  3A01               	xorlw	1
 14041  1E0F  1903               	skipnz
 14042  1E10  2E1E               	goto	l876
 14043  1E11  3000               	movlw	0
 14044  1E12  319E  2638  319E   	fcall	_getMain_All_Error_Status
 14045  1E15  3800               	iorlw	0
 14046  1E16  1D03               	skipz
 14047  1E17  2E1E               	goto	l876
 14048  1E18  3198  20E1  319E   	fcall	_getMain_All_LightsStatus
 14049  1E1B  3800               	iorlw	0
 14050  1E1C  1D03               	skipz
 14051  1E1D  2E20               	goto	l10203
 14052  1E1E                     l876:	
 14053                           
 14054                           ;Dimmer_B1.c: 842: Dimmer.LoadGO = 0;
 14055  1E1E  0022               	movlb	2	; select bank2
 14056  1E1F  10AC               	bcf	_Dimmer^(0+256),1
 14057  1E20                     l10203:	
 14058                           
 14059                           ;Dimmer_B1.c: 843: }
 14060                           ;Dimmer_B1.c: 844: }
 14061                           ;Dimmer_B1.c: 849: setDimmerLights_Main(1);
 14062  1E20  3001               	movlw	1
 14063  1E21  3195  25DD  319E   	fcall	_setDimmerLights_Main
 14064                           
 14065                           ;Dimmer_B1.c: 852: DimmerLights_DimmingFunction(1);
 14066  1E24  3001               	movlw	1
 14067  1E25  3188  20AA  319E   	fcall	_DimmerLights_DimmingFunction
 14068                           
 14069                           ;Dimmer_B1.c: 856: DimmerLights_TwoPhase_Main(1);
 14070  1E28  3001               	movlw	1
 14071  1E29  3192  22E0  319E   	fcall	_DimmerLights_TwoPhase_Main
 14072                           
 14073                           ;Dimmer_B1.c: 862: setDimmerLights_Main(2);
 14074  1E2C  3002               	movlw	2
 14075  1E2D  3195  25DD  319E   	fcall	_setDimmerLights_Main
 14076                           
 14077                           ;Dimmer_B1.c: 864: DimmerLights_DimmingFunction(2);
 14078  1E30  3002               	movlw	2
 14079  1E31  3188  20AA  319E   	fcall	_DimmerLights_DimmingFunction
 14080                           
 14081                           ;Dimmer_B1.c: 868: DimmerLights_TwoPhase_Main(2);
 14082  1E34  3002               	movlw	2
 14083  1E35  3192  22E0         	fcall	_DimmerLights_TwoPhase_Main
 14084  1E37  0008               	return
 14085  1E38                     __end_of_DimmerLights_Main:	
 14086                           
 14087                           	psect	text89
 14088  15DD                     __ptext89:	
 14089 ;; *************** function _setDimmerLights_Main *****************
 14090 ;; Defined at:
 14091 ;;		line 884 in file "../src/Dimmer_B1.c"
 14092 ;; Parameters:    Size  Location     Type
 14093 ;;  lights          1    wreg     unsigned char 
 14094 ;; Auto vars:     Size  Location     Type
 14095 ;;  lights          1    1[BANK1 ] unsigned char 
 14096 ;; Return value:  Size  Location     Type
 14097 ;;		None               void
 14098 ;; Registers used:
 14099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14100 ;; Tracked objects:
 14101 ;;		On entry : 0/0
 14102 ;;		On exit  : 0/0
 14103 ;;		Unchanged: 0/0
 14104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14106 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14108 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14109 ;;Total ram usage:        1 bytes
 14110 ;; Hardware stack levels used:    1
 14111 ;; Hardware stack levels required when called:    9
 14112 ;; This function calls:
 14113 ;;		_DimmerLights_SelectPointer
 14114 ;;		_getDimmerLights_Allow_Condition
 14115 ;;		_getMain_All_LightsStatus
 14116 ;;		_setDimmerLights_Dimming
 14117 ;;		_setDimmerLights_OnOff
 14118 ;; This function is called by:
 14119 ;;		_DimmerLights_Main
 14120 ;; This function uses a non-reentrant model
 14121 ;;
 14122                           
 14123                           
 14124                           ;psect for function _setDimmerLights_Main
 14125  15DD                     _setDimmerLights_Main:	
 14126                           
 14127                           ;incstack = 0
 14128                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14129                           ;setDimmerLights_Main@lights stored from wreg
 14130  15DD  0021               	movlb	1	; select bank1
 14131  15DE  00E6               	movwf	setDimmerLights_Main@lights^(0+128)
 14132                           
 14133                           ;Dimmer_B1.c: 886: DimmerLights_SelectPointer(lights);
 14134  15DF  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14135  15E0  3199  21C2  3195   	fcall	_DimmerLights_SelectPointer
 14136                           
 14137                           ;Dimmer_B1.c: 887: if (DimmerLights->Trigger == 1) {
 14138  15E3  0021               	movlb	1	; select bank1
 14139  15E4  085A               	movf	_DimmerLights^(0+128),w
 14140  15E5  0086               	movwf	6
 14141  15E6  3001               	movlw	1	; select bank2/3
 14142  15E7  0087               	movwf	7
 14143  15E8  1C81               	btfss	1,1
 14144  15E9  2E0C               	goto	l10069
 14145                           
 14146                           ;Dimmer_B1.c: 888: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14147  15EA  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14148  15EB  3190  2057  3195   	fcall	_getDimmerLights_Allow_Condition
 14149  15EE  3800               	iorlw	0
 14150  15EF  1D03               	skipz
 14151  15F0  0008               	return
 14152                           
 14153                           ;Dimmer_B1.c: 889: DimmerLights->Trigger = 0;
 14154  15F1  0021               	movlb	1	; select bank1
 14155  15F2  085A               	movf	_DimmerLights^(0+128),w
 14156  15F3  0086               	movwf	6
 14157  15F4  3001               	movlw	1	; select bank2/3
 14158  15F5  0087               	movwf	7
 14159  15F6  1081               	bcf	1,1
 14160                           
 14161                           ;Dimmer_B1.c: 890: if (DimmerLights->Switch == 1) {
 14162  15F7  085A               	movf	_DimmerLights^(0+128),w
 14163  15F8  0086               	movwf	6
 14164  15F9  3001               	movlw	1	; select bank2/3
 14165  15FA  0087               	movwf	7
 14166  15FB  1D01               	btfss	1,2
 14167  15FC  2E05               	goto	l10067
 14168                           
 14169                           ;Dimmer_B1.c: 891: setDimmerLights_OnOff(lights, 1);
 14170  15FD  0020               	movlb	0	; select bank0
 14171  15FE  01ED               	clrf	setDimmerLights_OnOff@command
 14172  15FF  0AED               	incf	setDimmerLights_OnOff@command,f
 14173  1600  0021               	movlb	1	; select bank1
 14174  1601  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14175  1602  318F  2739         	fcall	_setDimmerLights_OnOff
 14176                           
 14177                           ;Dimmer_B1.c: 892: } else {
 14178  1604  0008               	return
 14179  1605                     l10067:	
 14180                           
 14181                           ;Dimmer_B1.c: 893: setDimmerLights_OnOff(lights, 0);
 14182  1605  0020               	movlb	0	; select bank0
 14183  1606  01ED               	clrf	setDimmerLights_OnOff@command
 14184  1607  0021               	movlb	1	; select bank1
 14185  1608  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14186  1609  318F  2739         	fcall	_setDimmerLights_OnOff
 14187                           
 14188                           ;Dimmer_B1.c: 894: }
 14189                           ;Dimmer_B1.c: 895: }
 14190                           ;Dimmer_B1.c: 896: } else {
 14191  160B  0008               	return
 14192  160C                     l10069:	
 14193                           
 14194                           ;Dimmer_B1.c: 897: if (getMain_All_LightsStatus() == 1) {
 14195  160C  3198  20E1  3195   	fcall	_getMain_All_LightsStatus
 14196  160F  3A01               	xorlw	1
 14197  1610  1D03               	skipz
 14198  1611  2E3B               	goto	l10081
 14199                           
 14200                           ;Dimmer_B1.c: 898: if (DimmerLights->DimmingTrigger == 1) {
 14201  1612  0021               	movlb	1	; select bank1
 14202  1613  085A               	movf	_DimmerLights^(0+128),w
 14203  1614  0086               	movwf	6
 14204  1615  3001               	movlw	1	; select bank2/3
 14205  1616  0087               	movwf	7
 14206  1617  1E01               	btfss	1,4
 14207  1618  0008               	return
 14208                           
 14209                           ;Dimmer_B1.c: 899: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14210  1619  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14211  161A  3190  2057  3195   	fcall	_getDimmerLights_Allow_Condition
 14212  161D  3800               	iorlw	0
 14213  161E  1D03               	skipz
 14214  161F  0008               	return
 14215                           
 14216                           ;Dimmer_B1.c: 900: DimmerLights->DimmingTrigger = 0;
 14217  1620  0021               	movlb	1	; select bank1
 14218  1621  085A               	movf	_DimmerLights^(0+128),w
 14219  1622  0086               	movwf	6
 14220  1623  3001               	movlw	1	; select bank2/3
 14221  1624  0087               	movwf	7
 14222  1625  1201               	bcf	1,4
 14223                           
 14224                           ;Dimmer_B1.c: 901: if (DimmerLights->DimmingSwitch == 1) {
 14225  1626  085A               	movf	_DimmerLights^(0+128),w
 14226  1627  0086               	movwf	6
 14227  1628  3001               	movlw	1	; select bank2/3
 14228  1629  0087               	movwf	7
 14229  162A  1E81               	btfss	1,5
 14230  162B  2E34               	goto	l10079
 14231                           
 14232                           ;Dimmer_B1.c: 902: setDimmerLights_Dimming(lights, 1);
 14233  162C  0020               	movlb	0	; select bank0
 14234  162D  01EA               	clrf	setDimmerLights_Dimming@status
 14235  162E  0AEA               	incf	setDimmerLights_Dimming@status,f
 14236  162F  0021               	movlb	1	; select bank1
 14237  1630  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14238  1631  3192  228C         	fcall	_setDimmerLights_Dimming
 14239                           
 14240                           ;Dimmer_B1.c: 903: } else {
 14241  1633  0008               	return
 14242  1634                     l10079:	
 14243                           
 14244                           ;Dimmer_B1.c: 904: setDimmerLights_Dimming(lights, 0);
 14245  1634  0020               	movlb	0	; select bank0
 14246  1635  01EA               	clrf	setDimmerLights_Dimming@status
 14247  1636  0021               	movlb	1	; select bank1
 14248  1637  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14249  1638  3192  228C         	fcall	_setDimmerLights_Dimming
 14250                           
 14251                           ;Dimmer_B1.c: 905: }
 14252                           ;Dimmer_B1.c: 906: }
 14253                           ;Dimmer_B1.c: 907: }
 14254                           ;Dimmer_B1.c: 908: } else {
 14255  163A  0008               	return
 14256  163B                     l10081:	
 14257                           
 14258                           ;Dimmer_B1.c: 909: if (DimmerLights->DimmingTrigger == 1) {
 14259  163B  0021               	movlb	1	; select bank1
 14260  163C  085A               	movf	_DimmerLights^(0+128),w
 14261  163D  0086               	movwf	6
 14262  163E  3001               	movlw	1	; select bank2/3
 14263  163F  0087               	movwf	7
 14264  1640  1E01               	btfss	1,4
 14265  1641  0008               	return
 14266                           
 14267                           ;Dimmer_B1.c: 910: DimmerLights->DimmingTrigger = 0;
 14268  1642  085A               	movf	_DimmerLights^(0+128),w
 14269  1643  0086               	movwf	6
 14270  1644  3001               	movlw	1	; select bank2/3
 14271  1645  0087               	movwf	7
 14272  1646  1201               	bcf	1,4
 14273  1647  0008               	return
 14274  1648                     __end_of_setDimmerLights_Main:	
 14275                           
 14276                           	psect	text90
 14277  0F39                     __ptext90:	
 14278 ;; *************** function _setDimmerLights_OnOff *****************
 14279 ;; Defined at:
 14280 ;;		line 961 in file "../src/Dimmer_B1.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;  lights          1    wreg     unsigned char 
 14283 ;;  command         1   77[BANK0 ] unsigned char 
 14284 ;; Auto vars:     Size  Location     Type
 14285 ;;  lights          1    0[BANK1 ] unsigned char 
 14286 ;; Return value:  Size  Location     Type
 14287 ;;		None               void
 14288 ;; Registers used:
 14289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14290 ;; Tracked objects:
 14291 ;;		On entry : 0/0
 14292 ;;		On exit  : 0/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14295 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;Total ram usage:        4 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; Hardware stack levels required when called:    8
 14302 ;; This function calls:
 14303 ;;		_getCmd_Status
 14304 ;;		_getDelayOff_GO
 14305 ;;		_getDimmerLights_PercentToValue
 14306 ;;		_getMain_All_LightsStatus
 14307 ;;		_setCmd_Status
 14308 ;;		_setDelayOff_GO
 14309 ;;		_setDimmerIntr_ControlStatus
 14310 ;;		_setDimmerIntr_DimmingValue
 14311 ;;		_setDimmerIntr_Dimming_RF
 14312 ;;		_setDimmerIntr_MaxmumValue
 14313 ;;		_setDimmerLights_DimmingClose
 14314 ;;		_setDimmerLights_Line
 14315 ;;		_setLED
 14316 ;;		_setProductData
 14317 ;;		_setRF_DimmerLights
 14318 ;;		_setTxData
 14319 ;; This function is called by:
 14320 ;;		_setDimmerLights_Main
 14321 ;; This function uses a non-reentrant model
 14322 ;;
 14323                           
 14324                           
 14325                           ;psect for function _setDimmerLights_OnOff
 14326  0F39                     _setDimmerLights_OnOff:	
 14327                           
 14328                           ;incstack = 0
 14329                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14330                           ;setDimmerLights_OnOff@lights stored from wreg
 14331  0F39  0021               	movlb	1	; select bank1
 14332  0F3A  00E5               	movwf	setDimmerLights_OnOff@lights^(0+128)
 14333                           
 14334                           ;Dimmer_B1.c: 963: if (command == 1) {
 14335  0F3B  0020               	movlb	0	; select bank0
 14336  0F3C  086D               	movf	setDimmerLights_OnOff@command,w
 14337  0F3D  3A01               	xorlw	1
 14338  0F3E  1D03               	skipz
 14339  0F3F  2F97               	goto	l10015
 14340                           
 14341                           ;Dimmer_B1.c: 965: setDimmerIntr_ControlStatus(lights, 1);
 14342  0F40  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14343  0F41  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 14344  0F42  0021               	movlb	1	; select bank1
 14345  0F43  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14346  0F44  319D  25AA  318F   	fcall	_setDimmerIntr_ControlStatus
 14347                           
 14348                           ;Dimmer_B1.c: 968: Dimmer.Load_Status = 1;
 14349  0F47  0022               	movlb	2	; select bank2
 14350  0F48  152C               	bsf	_Dimmer^(0+256),2
 14351                           
 14352                           ;Dimmer_B1.c: 969: setDimmerLights_Line(lights);
 14353  0F49  0021               	movlb	1	; select bank1
 14354  0F4A  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14355  0F4B  319B  230E  318F   	fcall	_setDimmerLights_Line
 14356                           
 14357                           ;Dimmer_B1.c: 975: setLED(lights, 0);
 14358  0F4E  0020               	movlb	0	; select bank0
 14359  0F4F  01A2               	clrf	setLED@command
 14360  0F50  0021               	movlb	1	; select bank1
 14361  0F51  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14362  0F52  3191  21E5  318F   	fcall	_setLED
 14363                           
 14364                           ;Dimmer_B1.c: 996: if (DimmerLights->DimmingRun == 1) {
 14365  0F55  0021               	movlb	1	; select bank1
 14366  0F56  0A5A               	incf	_DimmerLights^(0+128),w
 14367  0F57  0086               	movwf	6
 14368  0F58  3001               	movlw	1	; select bank2/3
 14369  0F59  0087               	movwf	7
 14370  0F5A  1F01               	btfss	1,6
 14371  0F5B  2F80               	goto	l10005
 14372                           
 14373                           ;Dimmer_B1.c: 997: DimmerLights->DimmingRun = 0;
 14374  0F5C  0A5A               	incf	_DimmerLights^(0+128),w
 14375  0F5D  0086               	movwf	6
 14376  0F5E  3001               	movlw	1	; select bank2/3
 14377  0F5F  0087               	movwf	7
 14378  0F60  1301               	bcf	1,6
 14379                           
 14380                           ;Dimmer_B1.c: 998: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14381  0F61  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14382  0F62  3E14               	addlw	20
 14383  0F63  076D               	addwf	_product^(0+128),w
 14384  0F64  0020               	movlb	0	; select bank0
 14385  0F65  00EE               	movwf	??_setDimmerLights_OnOff
 14386  0F66  086E               	movf	??_setDimmerLights_OnOff,w
 14387  0F67  0086               	movwf	6
 14388  0F68  3002               	movlw	2	; select bank4/5
 14389  0F69  0087               	movwf	7
 14390  0F6A  0801               	movf	1,w
 14391  0F6B  3194  24AE  318F   	fcall	_getDimmerLights_PercentToValue
 14392  0F6E  0020               	movlb	0	; select bank0
 14393  0F6F  00EF               	movwf	??_setDimmerLights_OnOff+1
 14394  0F70  086F               	movf	??_setDimmerLights_OnOff+1,w
 14395  0F71  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14396  0F72  0021               	movlb	1	; select bank1
 14397  0F73  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14398  0F74  3199  21D9  318F   	fcall	_setDimmerIntr_MaxmumValue
 14399                           
 14400                           ;Dimmer_B1.c: 999: setDimmerIntr_Dimming_RF(lights, 1);
 14401  0F77  0020               	movlb	0	; select bank0
 14402  0F78  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14403  0F79  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14404  0F7A  0021               	movlb	1	; select bank1
 14405  0F7B  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14406  0F7C  319D  257B  318F   	fcall	_setDimmerIntr_Dimming_RF
 14407                           
 14408                           ;Dimmer_B1.c: 1000: } else {
 14409  0F7F  2F8A               	goto	l10007
 14410  0F80                     l10005:	
 14411                           
 14412                           ;Dimmer_B1.c: 1004: setDimmerIntr_DimmingValue(lights, ((char)(5*0.55))+((((char)(77*0.5
      +                          5))-((char)(5*0.55)))/2));
 14413  0F80  3016               	movlw	22
 14414  0F81  0020               	movlb	0	; select bank0
 14415  0F82  00EE               	movwf	??_setDimmerLights_OnOff
 14416  0F83  086E               	movf	??_setDimmerLights_OnOff,w
 14417  0F84  00A0               	movwf	setDimmerIntr_DimmingValue@value
 14418  0F85  0021               	movlb	1	; select bank1
 14419  0F86  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14420  0F87  3199  21F0  318F   	fcall	_setDimmerIntr_DimmingValue
 14421  0F8A                     l10007:	
 14422                           
 14423                           ;Dimmer_B1.c: 1008: }
 14424                           ;Dimmer_B1.c: 1010: if (lights == 1) {
 14425  0F8A  0021               	movlb	1	; select bank1
 14426  0F8B  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14427  0F8C  3A01               	xorlw	1
 14428  0F8D  1D03               	skipz
 14429  0F8E  2F91               	goto	l10011
 14430                           
 14431                           ;Dimmer_B1.c: 1012: DimmerIntr1.TuneGO = 1;
 14432  0F8F  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14433                           
 14434                           ;Dimmer_B1.c: 1014: } else if (lights == 2) {
 14435  0F90  2FCE               	goto	l10033
 14436  0F91                     l10011:	
 14437  0F91  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14438  0F92  3A02               	xorlw	2
 14439  0F93  1D03               	skipz
 14440  0F94  2FCE               	goto	l10033
 14441                           
 14442                           ;Dimmer_B1.c: 1016: DimmerIntr2.TuneGO = 1;
 14443  0F95  1749               	bsf	(_DimmerIntr2^(0+128)+1),6
 14444                           
 14445                           ;Dimmer_B1.c: 1018: }
 14446                           ;Dimmer_B1.c: 1024: } else if (command == 0) {
 14447  0F96  2FCE               	goto	l10033
 14448  0F97                     l10015:	
 14449  0F97  0020               	movlb	0	; select bank0
 14450  0F98  08ED               	movf	setDimmerLights_OnOff@command,f
 14451  0F99  1D03               	skipz
 14452  0F9A  2FCE               	goto	l10033
 14453                           
 14454                           ;Dimmer_B1.c: 1026: setDimmerIntr_ControlStatus(lights, 0);
 14455  0F9B  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14456  0F9C  0021               	movlb	1	; select bank1
 14457  0F9D  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14458  0F9E  319D  25AA  318F   	fcall	_setDimmerIntr_ControlStatus
 14459                           
 14460                           ;Dimmer_B1.c: 1028: Dimmer.Load_Status = 0;
 14461  0FA1  0022               	movlb	2	; select bank2
 14462  0FA2  112C               	bcf	_Dimmer^(0+256),2
 14463                           
 14464                           ;Dimmer_B1.c: 1029: setDimmerLights_Line(0);
 14465  0FA3  3000               	movlw	0
 14466  0FA4  319B  230E  318F   	fcall	_setDimmerLights_Line
 14467                           
 14468                           ;Dimmer_B1.c: 1033: if (getDelayOff_GO(lights) == 1) {
 14469  0FA7  0021               	movlb	1	; select bank1
 14470  0FA8  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14471  0FA9  31A7  2798  318F   	fcall	_getDelayOff_GO
 14472  0FAC  3A01               	xorlw	1
 14473  0FAD  1D03               	skipz
 14474  0FAE  2FB7               	goto	l916
 14475                           
 14476                           ;Dimmer_B1.c: 1034: setDelayOff_GO(lights, 0, 0);
 14477  0FAF  0020               	movlb	0	; select bank0
 14478  0FB0  01E5               	clrf	setDelayOff_GO@command
 14479  0FB1  01E6               	clrf	setDelayOff_GO@value
 14480  0FB2  0021               	movlb	1	; select bank1
 14481  0FB3  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14482  0FB4  318A  22B7  318F   	fcall	_setDelayOff_GO
 14483  0FB7                     l916:	
 14484                           
 14485                           ;Dimmer_B1.c: 1035: }
 14486                           ;Dimmer_B1.c: 1040: setLED(lights, 1);
 14487  0FB7  0020               	movlb	0	; select bank0
 14488  0FB8  01A2               	clrf	setLED@command
 14489  0FB9  0AA2               	incf	setLED@command,f
 14490  0FBA  0021               	movlb	1	; select bank1
 14491  0FBB  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14492  0FBC  3191  21E5  318F   	fcall	_setLED
 14493                           
 14494                           ;Dimmer_B1.c: 1045: if (lights == 1) {
 14495  0FBF  0021               	movlb	1	; select bank1
 14496  0FC0  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14497  0FC1  3A01               	xorlw	1
 14498  0FC2  1D03               	skipz
 14499  0FC3  2FC7               	goto	l10029
 14500                           
 14501                           ;Dimmer_B1.c: 1046: RB4 = 0;
 14502  0FC4  0020               	movlb	0	; select bank0
 14503  0FC5  120D               	bcf	13,4	;volatile
 14504                           
 14505                           ;Dimmer_B1.c: 1048: }
 14506  0FC6  2FCE               	goto	l10033
 14507  0FC7                     l10029:	
 14508                           
 14509                           ;Dimmer_B1.c: 1051: else if (lights == 2) {
 14510  0FC7  0021               	movlb	1	; select bank1
 14511  0FC8  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14512  0FC9  3A02               	xorlw	2
 14513  0FCA  1D03               	skipz
 14514  0FCB  2FCE               	goto	l10033
 14515                           
 14516                           ;Dimmer_B1.c: 1052: RA7 = 0;
 14517  0FCC  0020               	movlb	0	; select bank0
 14518  0FCD  138C               	bcf	12,7	;volatile
 14519  0FCE                     l10033:	
 14520                           
 14521                           ;Dimmer_B1.c: 1053: }
 14522                           ;Dimmer_B1.c: 1059: }
 14523                           ;Dimmer_B1.c: 1061: setDimmerLights_DimmingClose();
 14524  0FCE  31A7  2709  318F   	fcall	_setDimmerLights_DimmingClose
 14525                           
 14526                           ;Dimmer_B1.c: 1063: setRF_DimmerLights(lights, command);
 14527  0FD1  0020               	movlb	0	; select bank0
 14528  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 14529  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 14530  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 14531  0FD5  00E5               	movwf	setRF_DimmerLights@on
 14532  0FD6  0021               	movlb	1	; select bank1
 14533  0FD7  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14534  0FD8  3195  2578  318F   	fcall	_setRF_DimmerLights
 14535                           
 14536                           ;Dimmer_B1.c: 1065: if (getCmd_Status(1) == 1) {
 14537  0FDB  3001               	movlw	1
 14538  0FDC  31A7  27DC  318F   	fcall	_getCmd_Status
 14539  0FDF  3A01               	xorlw	1
 14540  0FE0  1D03               	skipz
 14541  0FE1  2FFD               	goto	l10049
 14542                           
 14543                           ;Dimmer_B1.c: 1066: if (getMain_All_LightsStatus() == 0) {
 14544  0FE2  3198  20E1  318F   	fcall	_getMain_All_LightsStatus
 14545  0FE5  3800               	iorlw	0
 14546  0FE6  1D03               	skipz
 14547  0FE7  0008               	return
 14548                           
 14549                           ;Dimmer_B1.c: 1067: setCmd_Status(1, 0);
 14550  0FE8  0020               	movlb	0	; select bank0
 14551  0FE9  01A0               	clrf	setCmd_Status@cmd
 14552  0FEA  3001               	movlw	1
 14553  0FEB  319A  2237  318F   	fcall	_setCmd_Status
 14554                           
 14555                           ;Dimmer_B1.c: 1068: setProductData(11, 0);
 14556  0FEE  0020               	movlb	0	; select bank0
 14557  0FEF  01E2               	clrf	setProductData@value
 14558  0FF0  300B               	movlw	11
 14559  0FF1  31A6  26FD  318F   	fcall	_setProductData
 14560                           
 14561                           ;Dimmer_B1.c: 1069: setProductData(17, 0);
 14562  0FF4  0020               	movlb	0	; select bank0
 14563  0FF5  01E2               	clrf	setProductData@value
 14564  0FF6  3011               	movlw	17
 14565  0FF7  31A6  26FD  318F   	fcall	_setProductData
 14566                           
 14567                           ;Dimmer_B1.c: 1070: setTxData();
 14568  0FFA  318E  267E         	fcall	_setTxData
 14569                           
 14570                           ;Dimmer_B1.c: 1071: }
 14571                           ;Dimmer_B1.c: 1072: } else {
 14572  0FFC  0008               	return
 14573  0FFD                     l10049:	
 14574                           
 14575                           ;Dimmer_B1.c: 1073: setTxData();
 14576  0FFD  318E  267E         	fcall	_setTxData
 14577  0FFF  0008               	return
 14578  1000                     __end_of_setDimmerLights_OnOff:	
 14579                           
 14580                           	psect	text91
 14581  11E5                     __ptext91:	
 14582 ;; *************** function _setLED *****************
 14583 ;; Defined at:
 14584 ;;		line 81 in file "../src/LED_B1.c"
 14585 ;; Parameters:    Size  Location     Type
 14586 ;;  led             1    wreg     unsigned char 
 14587 ;;  command         1    2[BANK0 ] unsigned char 
 14588 ;; Auto vars:     Size  Location     Type
 14589 ;;  led             1    3[BANK0 ] unsigned char 
 14590 ;; Return value:  Size  Location     Type
 14591 ;;		None               void
 14592 ;; Registers used:
 14593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14594 ;; Tracked objects:
 14595 ;;		On entry : 0/0
 14596 ;;		On exit  : 0/0
 14597 ;;		Unchanged: 0/0
 14598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14599 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14600 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;Total ram usage:        2 bytes
 14604 ;; Hardware stack levels used:    1
 14605 ;; Hardware stack levels required when called:    6
 14606 ;; This function calls:
 14607 ;;		_LedPointSelect
 14608 ;; This function is called by:
 14609 ;;		_setDimmerLights_OnOff
 14610 ;;		_setLED_Initialization
 14611 ;;		_setSw_Initialization
 14612 ;;		_Exception_Main
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           
 14617                           ;psect for function _setLED
 14618  11E5                     _setLED:	
 14619                           
 14620                           ;incstack = 0
 14621                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14622                           ;setLED@led stored from wreg
 14623  11E5  0020               	movlb	0	; select bank0
 14624  11E6  00A3               	movwf	setLED@led
 14625                           
 14626                           ;LED_B1.c: 82: LedPointSelect(led);
 14627  11E7  0823               	movf	setLED@led,w
 14628  11E8  319B  2388  3191   	fcall	_LedPointSelect
 14629                           
 14630                           ;LED_B1.c: 83: if (command == 0) {
 14631  11EB  0020               	movlb	0	; select bank0
 14632  11EC  08A2               	movf	setLED@command,f
 14633  11ED  1D03               	skipz
 14634  11EE  29FC               	goto	l9849
 14635                           
 14636                           ;LED_B1.c: 85: if (led == 1) {
 14637  11EF  0823               	movf	setLED@led,w
 14638  11F0  3A01               	xorlw	1
 14639  11F1  1D03               	skipz
 14640  11F2  29F4               	goto	l9841
 14641                           
 14642                           ;LED_B1.c: 89: RC7 = 1;
 14643  11F3  178E               	bsf	14,7	;volatile
 14644  11F4                     l9841:	
 14645                           
 14646                           ;LED_B1.c: 91: }
 14647                           ;LED_B1.c: 94: if (led == 2) {
 14648  11F4  0823               	movf	setLED@led,w
 14649  11F5  3A02               	xorlw	2
 14650  11F6  1903               	btfsc	3,2
 14651                           
 14652                           ;LED_B1.c: 98: RA3 = 1;
 14653  11F7  158C               	bsf	12,3	;volatile
 14654                           
 14655                           ;LED_B1.c: 100: }
 14656                           ;LED_B1.c: 112: if (led == 99) {
 14657  11F8  0823               	movf	setLED@led,w
 14658  11F9  3A63               	xorlw	99
 14659  11FA  1903               	btfsc	3,2
 14660                           
 14661                           ;LED_B1.c: 116: RB5 = 1;
 14662  11FB  168D               	bsf	13,5	;volatile
 14663  11FC                     l9849:	
 14664                           
 14665                           ;LED_B1.c: 118: }
 14666                           ;LED_B1.c: 120: }
 14667                           ;LED_B1.c: 121: if (command == 1) {
 14668  11FC  0822               	movf	setLED@command,w
 14669  11FD  3A01               	xorlw	1
 14670  11FE  1D03               	skipz
 14671  11FF  2A0D               	goto	l9863
 14672                           
 14673                           ;LED_B1.c: 123: if (led == 1) {
 14674  1200  0823               	movf	setLED@led,w
 14675  1201  3A01               	xorlw	1
 14676  1202  1D03               	skipz
 14677  1203  2A05               	goto	l9855
 14678                           
 14679                           ;LED_B1.c: 127: RC7 = 0;
 14680  1204  138E               	bcf	14,7	;volatile
 14681  1205                     l9855:	
 14682                           
 14683                           ;LED_B1.c: 129: }
 14684                           ;LED_B1.c: 132: if (led == 2) {
 14685  1205  0823               	movf	setLED@led,w
 14686  1206  3A02               	xorlw	2
 14687  1207  1903               	btfsc	3,2
 14688                           
 14689                           ;LED_B1.c: 136: RA3 = 0;
 14690  1208  118C               	bcf	12,3	;volatile
 14691                           
 14692                           ;LED_B1.c: 138: }
 14693                           ;LED_B1.c: 150: if (led == 99) {
 14694  1209  0823               	movf	setLED@led,w
 14695  120A  3A63               	xorlw	99
 14696  120B  1903               	btfsc	3,2
 14697                           
 14698                           ;LED_B1.c: 154: RB5 = 0;
 14699  120C  128D               	bcf	13,5	;volatile
 14700  120D                     l9863:	
 14701                           
 14702                           ;LED_B1.c: 156: }
 14703                           ;LED_B1.c: 158: }
 14704                           ;LED_B1.c: 159: if (command == 10) {
 14705  120D  0822               	movf	setLED@command,w
 14706  120E  3A0A               	xorlw	10
 14707  120F  1D03               	skipz
 14708  1210  2A2D               	goto	l9879
 14709                           
 14710                           ;LED_B1.c: 160: LED->GO = 0;
 14711  1211  0021               	movlb	1	; select bank1
 14712  1212  085B               	movf	_LED^(0+128),w
 14713  1213  0086               	movwf	6
 14714  1214  3001               	movlw	1	; select bank2/3
 14715  1215  0087               	movwf	7
 14716  1216  1081               	bcf	1,1
 14717                           
 14718                           ;LED_B1.c: 161: LED->Time = 0;
 14719  1217  0A5B               	incf	_LED^(0+128),w
 14720  1218  0086               	movwf	6
 14721  1219  3001               	movlw	1	; select bank2/3
 14722  121A  0087               	movwf	7
 14723  121B  3000               	movlw	0
 14724  121C  3FC0               	movwi [0]fsr1
 14725  121D  3FC1               	movwi [1]fsr1
 14726                           
 14727                           ;LED_B1.c: 163: if (led == 1) {
 14728  121E  0020               	movlb	0	; select bank0
 14729  121F  0823               	movf	setLED@led,w
 14730  1220  3A01               	xorlw	1
 14731  1221  1D03               	skipz
 14732  1222  2A25               	goto	l9871
 14733                           
 14734                           ;LED_B1.c: 167: RC7 = 1;
 14735  1223  178E               	bsf	14,7	;volatile
 14736                           
 14737                           ;LED_B1.c: 169: }
 14738  1224  2A29               	goto	l9875
 14739  1225                     l9871:	
 14740                           
 14741                           ;LED_B1.c: 172: else if (led == 2) {
 14742  1225  0823               	movf	setLED@led,w
 14743  1226  3A02               	xorlw	2
 14744  1227  1903               	btfsc	3,2
 14745                           
 14746                           ;LED_B1.c: 176: RA3 = 1;
 14747  1228  158C               	bsf	12,3	;volatile
 14748  1229                     l9875:	
 14749                           
 14750                           ;LED_B1.c: 178: }
 14751                           ;LED_B1.c: 190: if (led == 99) {
 14752  1229  0823               	movf	setLED@led,w
 14753  122A  3A63               	xorlw	99
 14754  122B  1903               	btfsc	3,2
 14755                           
 14756                           ;LED_B1.c: 194: RB5 = 1;
 14757  122C  168D               	bsf	13,5	;volatile
 14758  122D                     l9879:	
 14759                           
 14760                           ;LED_B1.c: 196: }
 14761                           ;LED_B1.c: 198: }
 14762                           ;LED_B1.c: 199: if (command == 11) {
 14763  122D  0822               	movf	setLED@command,w
 14764  122E  3A0B               	xorlw	11
 14765  122F  1D03               	skipz
 14766  1230  0008               	return
 14767                           
 14768                           ;LED_B1.c: 200: LED->GO = 1;
 14769  1231  0021               	movlb	1	; select bank1
 14770  1232  085B               	movf	_LED^(0+128),w
 14771  1233  0086               	movwf	6
 14772  1234  3001               	movlw	1	; select bank2/3
 14773  1235  0087               	movwf	7
 14774  1236  1481               	bsf	1,1
 14775  1237  0008               	return
 14776  1238                     __end_of_setLED:	
 14777                           
 14778                           	psect	text92
 14779  1B88                     __ptext92:	
 14780 ;; *************** function _LedPointSelect *****************
 14781 ;; Defined at:
 14782 ;;		line 7 in file "../src/LED_B1.c"
 14783 ;; Parameters:    Size  Location     Type
 14784 ;;  led             1    wreg     unsigned char 
 14785 ;; Auto vars:     Size  Location     Type
 14786 ;;  led             1    1[BANK0 ] unsigned char 
 14787 ;; Return value:  Size  Location     Type
 14788 ;;		None               void
 14789 ;; Registers used:
 14790 ;;		wreg
 14791 ;; Tracked objects:
 14792 ;;		On entry : 0/0
 14793 ;;		On exit  : 0/0
 14794 ;;		Unchanged: 0/0
 14795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;Total ram usage:        2 bytes
 14801 ;; Hardware stack levels used:    1
 14802 ;; Hardware stack levels required when called:    5
 14803 ;; This function calls:
 14804 ;;		Nothing
 14805 ;; This function is called by:
 14806 ;;		_setLED_Initialization
 14807 ;;		_setLED
 14808 ;;		_setLED_Main
 14809 ;; This function uses a non-reentrant model
 14810 ;;
 14811                           
 14812                           
 14813                           ;psect for function _LedPointSelect
 14814  1B88                     _LedPointSelect:	
 14815                           
 14816                           ;incstack = 0
 14817                           ; Regs used in _LedPointSelect: [wreg]
 14818                           ;LedPointSelect@led stored from wreg
 14819  1B88  0020               	movlb	0	; select bank0
 14820  1B89  00A1               	movwf	LedPointSelect@led
 14821                           
 14822                           ;LED_B1.c: 9: if (led == 1) {
 14823  1B8A  0821               	movf	LedPointSelect@led,w
 14824  1B8B  3A01               	xorlw	1
 14825  1B8C  1D03               	skipz
 14826  1B8D  2B93               	goto	l1172
 14827                           
 14828                           ;LED_B1.c: 10: LED = &VarLED1;
 14829  1B8E  30E7               	movlw	_VarLED1& (0+255)
 14830  1B8F  00A0               	movwf	??_LedPointSelect
 14831  1B90  0820               	movf	??_LedPointSelect,w
 14832  1B91  0021               	movlb	1	; select bank1
 14833  1B92  00DB               	movwf	_LED^(0+128)
 14834  1B93                     l1172:	
 14835                           
 14836                           ;LED_B1.c: 11: }
 14837                           ;LED_B1.c: 14: if (led == 2) {
 14838  1B93  0020               	movlb	0	; select bank0
 14839  1B94  0821               	movf	LedPointSelect@led,w
 14840  1B95  3A02               	xorlw	2
 14841  1B96  1D03               	skipz
 14842  1B97  2B9D               	goto	l1173
 14843                           
 14844                           ;LED_B1.c: 15: LED = &VarLED2;
 14845  1B98  30EB               	movlw	_VarLED2& (0+255)
 14846  1B99  00A0               	movwf	??_LedPointSelect
 14847  1B9A  0820               	movf	??_LedPointSelect,w
 14848  1B9B  0021               	movlb	1	; select bank1
 14849  1B9C  00DB               	movwf	_LED^(0+128)
 14850  1B9D                     l1173:	
 14851                           
 14852                           ;LED_B1.c: 16: }
 14853                           ;LED_B1.c: 24: if (led == 99) {
 14854  1B9D  0020               	movlb	0	; select bank0
 14855  1B9E  0821               	movf	LedPointSelect@led,w
 14856  1B9F  3A63               	xorlw	99
 14857  1BA0  1D03               	skipz
 14858  1BA1  0008               	return
 14859                           
 14860                           ;LED_B1.c: 25: LED = &VarErrLED;
 14861  1BA2  30E3               	movlw	_VarErrLED& (0+255)
 14862  1BA3  00A0               	movwf	??_LedPointSelect
 14863  1BA4  0820               	movf	??_LedPointSelect,w
 14864  1BA5  0021               	movlb	1	; select bank1
 14865  1BA6  00DB               	movwf	_LED^(0+128)
 14866  1BA7  0008               	return
 14867  1BA8                     __end_of_LedPointSelect:	
 14868                           
 14869                           	psect	text93
 14870  2709                     __ptext93:	
 14871 ;; *************** function _setDimmerLights_DimmingClose *****************
 14872 ;; Defined at:
 14873 ;;		line 1842 in file "../src/Dimmer_B1.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;		None
 14876 ;; Auto vars:     Size  Location     Type
 14877 ;;		None
 14878 ;; Return value:  Size  Location     Type
 14879 ;;		None               void
 14880 ;; Registers used:
 14881 ;;		wreg, status,2, status,0, pclath, cstack
 14882 ;; Tracked objects:
 14883 ;;		On entry : 0/0
 14884 ;;		On exit  : 0/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;Total ram usage:        0 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; Hardware stack levels required when called:    6
 14894 ;; This function calls:
 14895 ;;		_setDimmerIntr_Dimming_Sw
 14896 ;; This function is called by:
 14897 ;;		_setDimmerLights_OnOff
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           
 14902                           ;psect for function _setDimmerLights_DimmingClose
 14903  2709                     _setDimmerLights_DimmingClose:	
 14904                           
 14905                           ;Dimmer_B1.c: 1844: setDimmerIntr_Dimming_Sw(1, 0);
 14906                           
 14907                           ;incstack = 0
 14908                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14909  2709  0020               	movlb	0	; select bank0
 14910  270A  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14911  270B  3001               	movlw	1
 14912  270C  319D  2550  31A7   	fcall	_setDimmerIntr_Dimming_Sw
 14913                           
 14914                           ;Dimmer_B1.c: 1848: setDimmerIntr_Dimming_Sw(2, 0);
 14915  270F  0020               	movlb	0	; select bank0
 14916  2710  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14917  2711  3002               	movlw	2
 14918  2712  319D  2550         	fcall	_setDimmerIntr_Dimming_Sw
 14919  2714  0008               	return
 14920  2715                     __end_of_setDimmerLights_DimmingClose:	
 14921                           
 14922                           	psect	text94
 14923  19F0                     __ptext94:	
 14924 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14925 ;; Defined at:
 14926 ;;		line 107 in file "../src/Dimmer_B1.c"
 14927 ;; Parameters:    Size  Location     Type
 14928 ;;  lights          1    wreg     unsigned char 
 14929 ;;  value           1    0[BANK0 ] unsigned char 
 14930 ;; Auto vars:     Size  Location     Type
 14931 ;;  lights          1    2[BANK0 ] unsigned char 
 14932 ;; Return value:  Size  Location     Type
 14933 ;;		None               void
 14934 ;; Registers used:
 14935 ;;		wreg
 14936 ;; Tracked objects:
 14937 ;;		On entry : 0/0
 14938 ;;		On exit  : 0/0
 14939 ;;		Unchanged: 0/0
 14940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14941 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14945 ;;Total ram usage:        3 bytes
 14946 ;; Hardware stack levels used:    1
 14947 ;; Hardware stack levels required when called:    5
 14948 ;; This function calls:
 14949 ;;		Nothing
 14950 ;; This function is called by:
 14951 ;;		_setDimmerLights_OnOff
 14952 ;; This function uses a non-reentrant model
 14953 ;;
 14954                           
 14955                           
 14956                           ;psect for function _setDimmerIntr_DimmingValue
 14957  19F0                     _setDimmerIntr_DimmingValue:	
 14958                           
 14959                           ;incstack = 0
 14960                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14961                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14962  19F0  0020               	movlb	0	; select bank0
 14963  19F1  00A2               	movwf	setDimmerIntr_DimmingValue@lights
 14964                           
 14965                           ;Dimmer_B1.c: 109: if (lights == 1) {
 14966  19F2  0822               	movf	setDimmerIntr_DimmingValue@lights,w
 14967  19F3  3A01               	xorlw	1
 14968  19F4  1D03               	skipz
 14969  19F5  29FC               	goto	l7455
 14970                           
 14971                           ;Dimmer_B1.c: 110: DimmerIntr1.DimmingValue = value;
 14972  19F6  0820               	movf	setDimmerIntr_DimmingValue@value,w
 14973  19F7  00A1               	movwf	??_setDimmerIntr_DimmingValue
 14974  19F8  0821               	movf	??_setDimmerIntr_DimmingValue,w
 14975  19F9  0021               	movlb	1	; select bank1
 14976  19FA  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14977                           
 14978                           ;Dimmer_B1.c: 111: }
 14979  19FB  0008               	return
 14980  19FC                     l7455:	
 14981                           
 14982                           ;Dimmer_B1.c: 114: else if (lights == 2) {
 14983  19FC  0020               	movlb	0	; select bank0
 14984  19FD  0822               	movf	setDimmerIntr_DimmingValue@lights,w
 14985  19FE  3A02               	xorlw	2
 14986  19FF  1D03               	skipz
 14987  1A00  0008               	return
 14988                           
 14989                           ;Dimmer_B1.c: 115: DimmerIntr2.DimmingValue = value;
 14990  1A01  0820               	movf	setDimmerIntr_DimmingValue@value,w
 14991  1A02  00A1               	movwf	??_setDimmerIntr_DimmingValue
 14992  1A03  0821               	movf	??_setDimmerIntr_DimmingValue,w
 14993  1A04  0021               	movlb	1	; select bank1
 14994  1A05  00CD               	movwf	(_DimmerIntr2^(0+128)+5)
 14995  1A06  0008               	return
 14996  1A07                     __end_of_setDimmerIntr_DimmingValue:	
 14997                           
 14998                           	psect	text95
 14999  1DAA                     __ptext95:	
 15000 ;; *************** function _setDimmerIntr_ControlStatus *****************
 15001 ;; Defined at:
 15002 ;;		line 89 in file "../src/Dimmer_B1.c"
 15003 ;; Parameters:    Size  Location     Type
 15004 ;;  lights          1    wreg     unsigned char 
 15005 ;;  command         1    0[BANK0 ] unsigned char 
 15006 ;; Auto vars:     Size  Location     Type
 15007 ;;  lights          1    2[BANK0 ] unsigned char 
 15008 ;; Return value:  Size  Location     Type
 15009 ;;		None               void
 15010 ;; Registers used:
 15011 ;;		wreg, status,2, status,0
 15012 ;; Tracked objects:
 15013 ;;		On entry : 0/0
 15014 ;;		On exit  : 0/0
 15015 ;;		Unchanged: 0/0
 15016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15017 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15020 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;Total ram usage:        3 bytes
 15022 ;; Hardware stack levels used:    1
 15023 ;; Hardware stack levels required when called:    5
 15024 ;; This function calls:
 15025 ;;		Nothing
 15026 ;; This function is called by:
 15027 ;;		_setDimmerLights_OnOff
 15028 ;; This function uses a non-reentrant model
 15029 ;;
 15030                           
 15031                           
 15032                           ;psect for function _setDimmerIntr_ControlStatus
 15033  1DAA                     _setDimmerIntr_ControlStatus:	
 15034                           
 15035                           ;incstack = 0
 15036                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 15037                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 15038  1DAA  0020               	movlb	0	; select bank0
 15039  1DAB  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 15040                           
 15041                           ;Dimmer_B1.c: 91: if (lights == 1) {
 15042  1DAC  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 15043  1DAD  3A01               	xorlw	1
 15044  1DAE  1D03               	skipz
 15045  1DAF  2DC2               	goto	l7447
 15046                           
 15047                           ;Dimmer_B1.c: 92: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 15048  1DB0  0820               	movf	setDimmerIntr_ControlStatus@command,w
 15049  1DB1  3A01               	xorlw	1
 15050  1DB2  3000               	movlw	0
 15051  1DB3  1903               	skipnz
 15052  1DB4  3001               	movlw	1
 15053  1DB5  00A1               	movwf	??_setDimmerIntr_ControlStatus
 15054  1DB6  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15055  1DB7  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15056  1DB8  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15057  1DB9  0021               	movlb	1	; select bank1
 15058  1DBA  083C               	movf	_DimmerIntr1^(0+128),w
 15059  1DBB  0020               	movlb	0	; select bank0
 15060  1DBC  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15061  1DBD  39F7               	andlw	-9
 15062  1DBE  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15063  1DBF  0021               	movlb	1	; select bank1
 15064  1DC0  00BC               	movwf	_DimmerIntr1^(0+128)
 15065                           
 15066                           ;Dimmer_B1.c: 93: }
 15067  1DC1  0008               	return
 15068  1DC2                     l7447:	
 15069                           
 15070                           ;Dimmer_B1.c: 96: else if (lights == 2) {
 15071  1DC2  0020               	movlb	0	; select bank0
 15072  1DC3  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 15073  1DC4  3A02               	xorlw	2
 15074  1DC5  1D03               	skipz
 15075  1DC6  0008               	return
 15076                           
 15077                           ;Dimmer_B1.c: 97: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 15078  1DC7  0820               	movf	setDimmerIntr_ControlStatus@command,w
 15079  1DC8  3A01               	xorlw	1
 15080  1DC9  3000               	movlw	0
 15081  1DCA  1903               	skipnz
 15082  1DCB  3001               	movlw	1
 15083  1DCC  00A1               	movwf	??_setDimmerIntr_ControlStatus
 15084  1DCD  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15085  1DCE  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15086  1DCF  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15087  1DD0  0021               	movlb	1	; select bank1
 15088  1DD1  0848               	movf	_DimmerIntr2^(0+128),w
 15089  1DD2  0020               	movlb	0	; select bank0
 15090  1DD3  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15091  1DD4  39F7               	andlw	-9
 15092  1DD5  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15093  1DD6  0021               	movlb	1	; select bank1
 15094  1DD7  00C8               	movwf	_DimmerIntr2^(0+128)
 15095  1DD8  0008               	return
 15096  1DD9                     __end_of_setDimmerIntr_ControlStatus:	
 15097                           
 15098                           	psect	text96
 15099  0AB7                     __ptext96:	
 15100 ;; *************** function _setDelayOff_GO *****************
 15101 ;; Defined at:
 15102 ;;		line 87 in file "../src/DelayOff_B1.c"
 15103 ;; Parameters:    Size  Location     Type
 15104 ;;  sw              1    wreg     unsigned char 
 15105 ;;  command         1   69[BANK0 ] unsigned char 
 15106 ;;  value           1   70[BANK0 ] unsigned char 
 15107 ;; Auto vars:     Size  Location     Type
 15108 ;;  sw              1   76[BANK0 ] unsigned char 
 15109 ;;  k               1   75[BANK0 ] unsigned char 
 15110 ;;  j               1   74[BANK0 ] unsigned char 
 15111 ;;  i               1   73[BANK0 ] unsigned char 
 15112 ;; Return value:  Size  Location     Type
 15113 ;;		None               void
 15114 ;; Registers used:
 15115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15116 ;; Tracked objects:
 15117 ;;		On entry : 0/0
 15118 ;;		On exit  : 0/0
 15119 ;;		Unchanged: 0/0
 15120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15121 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15122 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15124 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;Total ram usage:        8 bytes
 15126 ;; Hardware stack levels used:    1
 15127 ;; Hardware stack levels required when called:    6
 15128 ;; This function calls:
 15129 ;;		_DelayOffPointSelect
 15130 ;;		___bmul
 15131 ;;		_setProductData
 15132 ;; This function is called by:
 15133 ;;		_setDimmerLights_OnOff
 15134 ;;		_setRFSW_Control
 15135 ;; This function uses a non-reentrant model
 15136 ;;
 15137                           
 15138                           
 15139                           ;psect for function _setDelayOff_GO
 15140  0AB7                     _setDelayOff_GO:	
 15141                           
 15142                           ;incstack = 0
 15143                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15144                           ;setDelayOff_GO@sw stored from wreg
 15145  0AB7  0020               	movlb	0	; select bank0
 15146  0AB8  00EC               	movwf	setDelayOff_GO@sw
 15147                           
 15148                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 15149  0AB9  086C               	movf	setDelayOff_GO@sw,w
 15150  0ABA  3199  21AB  318A   	fcall	_DelayOffPointSelect
 15151                           
 15152                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 15153  0ABD  0020               	movlb	0	; select bank0
 15154  0ABE  0865               	movf	setDelayOff_GO@command,w
 15155  0ABF  3A01               	xorlw	1
 15156  0AC0  3000               	movlw	0
 15157  0AC1  1903               	skipnz
 15158  0AC2  3001               	movlw	1
 15159  0AC3  00E7               	movwf	??_setDelayOff_GO
 15160  0AC4  0021               	movlb	1	; select bank1
 15161  0AC5  0858               	movf	_DelayOff^(0+128),w
 15162  0AC6  0086               	movwf	6
 15163  0AC7  3001               	movlw	1	; select bank2/3
 15164  0AC8  0087               	movwf	7
 15165  0AC9  0020               	movlb	0	; select bank0
 15166  0ACA  0DE7               	rlf	??_setDelayOff_GO,f
 15167  0ACB  0801               	movf	1,w
 15168  0ACC  0667               	xorwf	??_setDelayOff_GO,w
 15169  0ACD  39FD               	andlw	-3
 15170  0ACE  0667               	xorwf	??_setDelayOff_GO,w
 15171  0ACF  0081               	movwf	1
 15172                           
 15173                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 15174  0AD0  0021               	movlb	1	; select bank1
 15175  0AD1  0858               	movf	_DelayOff^(0+128),w
 15176  0AD2  3E02               	addlw	2
 15177  0AD3  0086               	movwf	6
 15178  0AD4  3001               	movlw	1	; select bank2/3
 15179  0AD5  0087               	movwf	7
 15180  0AD6  3000               	movlw	0
 15181  0AD7  3FC0               	movwi [0]fsr1
 15182  0AD8  3FC1               	movwi [1]fsr1
 15183                           
 15184                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 15185  0AD9  0858               	movf	_DelayOff^(0+128),w
 15186  0ADA  3E04               	addlw	4
 15187  0ADB  0086               	movwf	6
 15188  0ADC  3001               	movlw	1	; select bank2/3
 15189  0ADD  0087               	movwf	7
 15190  0ADE  0181               	clrf	1
 15191                           
 15192                           ;DelayOff_B1.c: 94: if (command == 1) {
 15193  0ADF  0020               	movlb	0	; select bank0
 15194  0AE0  0865               	movf	setDelayOff_GO@command,w
 15195  0AE1  3A01               	xorlw	1
 15196  0AE2  1D03               	skipz
 15197  0AE3  2B39               	goto	l7067
 15198                           
 15199                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 15200  0AE4  3005               	movlw	5
 15201  0AE5  00E7               	movwf	??_setDelayOff_GO
 15202  0AE6  0867               	movf	??_setDelayOff_GO,w
 15203  0AE7  00E9               	movwf	setDelayOff_GO@i
 15204  0AE8  01EA               	clrf	setDelayOff_GO@j
 15205  0AE9  01EB               	clrf	setDelayOff_GO@k
 15206                           
 15207                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 15208  0AEA  300F               	movlw	15
 15209  0AEB  0566               	andwf	setDelayOff_GO@value,w
 15210  0AEC  00E7               	movwf	??_setDelayOff_GO
 15211  0AED  0867               	movf	??_setDelayOff_GO,w
 15212  0AEE  3A05               	xorlw	5
 15213  0AEF  1903               	skipnz
 15214  0AF0  2AF5               	goto	l7053
 15215  0AF1  0866               	movf	setDelayOff_GO@value,w
 15216  0AF2  390F               	andlw	15
 15217  0AF3  1D03               	btfss	3,2
 15218  0AF4  2B25               	goto	l7063
 15219  0AF5                     l7053:	
 15220  0AF5  3031               	movlw	49
 15221  0AF6  0266               	subwf	setDelayOff_GO@value,w
 15222  0AF7  1803               	skipnc
 15223  0AF8  2B25               	goto	l7063
 15224                           
 15225                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 15226  0AF9  0866               	movf	setDelayOff_GO@value,w
 15227  0AFA  390F               	andlw	15
 15228  0AFB  00E7               	movwf	??_setDelayOff_GO
 15229  0AFC  0867               	movf	??_setDelayOff_GO,w
 15230  0AFD  00EA               	movwf	setDelayOff_GO@j
 15231                           
 15232                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 15233  0AFE  0866               	movf	setDelayOff_GO@value,w
 15234  0AFF  00E7               	movwf	??_setDelayOff_GO
 15235  0B00  3004               	movlw	4
 15236  0B01                     u6425:	
 15237  0B01  36E7               	lsrf	??_setDelayOff_GO,f
 15238  0B02  0B89               	decfsz	9,f
 15239  0B03  2B01               	goto	u6425
 15240  0B04  0867               	movf	??_setDelayOff_GO,w
 15241  0B05  390F               	andlw	15
 15242  0B06  00E8               	movwf	??_setDelayOff_GO+1
 15243  0B07  0868               	movf	??_setDelayOff_GO+1,w
 15244  0B08  00EB               	movwf	setDelayOff_GO@k
 15245                           
 15246                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 15247  0B09  300A               	movlw	10
 15248  0B0A  00E7               	movwf	??_setDelayOff_GO
 15249  0B0B  0867               	movf	??_setDelayOff_GO,w
 15250  0B0C  00A0               	movwf	___bmul@multiplicand
 15251  0B0D  086B               	movf	setDelayOff_GO@k,w
 15252  0B0E  31A7  27EE  318A   	fcall	___bmul
 15253  0B11  0020               	movlb	0	; select bank0
 15254  0B12  076A               	addwf	setDelayOff_GO@j,w
 15255  0B13  00E8               	movwf	??_setDelayOff_GO+1
 15256  0B14  0021               	movlb	1	; select bank1
 15257  0B15  0A58               	incf	_DelayOff^(0+128),w
 15258  0B16  0086               	movwf	6
 15259  0B17  3001               	movlw	1	; select bank2/3
 15260  0B18  0087               	movwf	7
 15261  0B19  0020               	movlb	0	; select bank0
 15262  0B1A  0868               	movf	??_setDelayOff_GO+1,w
 15263  0B1B  0081               	movwf	1
 15264                           
 15265                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 15266  0B1C  0866               	movf	setDelayOff_GO@value,w
 15267  0B1D  00E7               	movwf	??_setDelayOff_GO
 15268  0B1E  0867               	movf	??_setDelayOff_GO,w
 15269  0B1F  00E2               	movwf	setProductData@value
 15270  0B20  086C               	movf	setDelayOff_GO@sw,w
 15271  0B21  3E1A               	addlw	26
 15272  0B22  31A6  26FD         	fcall	_setProductData
 15273                           
 15274                           ;DelayOff_B1.c: 103: } else {
 15275  0B24  0008               	return
 15276  0B25                     l7063:	
 15277                           
 15278                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 15279  0B25  3005               	movlw	5
 15280  0B26  0020               	movlb	0	; select bank0
 15281  0B27  00E7               	movwf	??_setDelayOff_GO
 15282  0B28  0021               	movlb	1	; select bank1
 15283  0B29  0A58               	incf	_DelayOff^(0+128),w
 15284  0B2A  0086               	movwf	6
 15285  0B2B  3001               	movlw	1	; select bank2/3
 15286  0B2C  0087               	movwf	7
 15287  0B2D  0020               	movlb	0	; select bank0
 15288  0B2E  0867               	movf	??_setDelayOff_GO,w
 15289  0B2F  0081               	movwf	1
 15290                           
 15291                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 15292  0B30  3005               	movlw	5
 15293  0B31  00E7               	movwf	??_setDelayOff_GO
 15294  0B32  0867               	movf	??_setDelayOff_GO,w
 15295  0B33  00E2               	movwf	setProductData@value
 15296  0B34  086C               	movf	setDelayOff_GO@sw,w
 15297  0B35  3E1A               	addlw	26
 15298  0B36  31A6  26FD         	fcall	_setProductData
 15299                           
 15300                           ;DelayOff_B1.c: 106: }
 15301                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 15302  0B38  0008               	return
 15303  0B39                     l7067:	
 15304  0B39  0020               	movlb	0	; select bank0
 15305  0B3A  08E5               	movf	setDelayOff_GO@command,f
 15306  0B3B  1D03               	skipz
 15307  0B3C  0008               	return
 15308                           
 15309                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 15310  0B3D  01E2               	clrf	setProductData@value
 15311  0B3E  086C               	movf	setDelayOff_GO@sw,w
 15312  0B3F  3E1A               	addlw	26
 15313  0B40  31A6  26FD         	fcall	_setProductData
 15314  0B42  0008               	return
 15315  0B43                     __end_of_setDelayOff_GO:	
 15316                           
 15317                           	psect	text97
 15318  27EE                     __ptext97:	
 15319 ;; *************** function ___bmul *****************
 15320 ;; Defined at:
 15321 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15322 ;; Parameters:    Size  Location     Type
 15323 ;;  multiplier      1    wreg     unsigned char 
 15324 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15325 ;; Auto vars:     Size  Location     Type
 15326 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15327 ;;  product         1    2[BANK0 ] unsigned char 
 15328 ;; Return value:  Size  Location     Type
 15329 ;;                  1    wreg      unsigned char 
 15330 ;; Registers used:
 15331 ;;		wreg, status,2, status,0
 15332 ;; Tracked objects:
 15333 ;;		On entry : 0/0
 15334 ;;		On exit  : 0/0
 15335 ;;		Unchanged: 0/0
 15336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15337 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;Total ram usage:        4 bytes
 15342 ;; Hardware stack levels used:    1
 15343 ;; Hardware stack levels required when called:    5
 15344 ;; This function calls:
 15345 ;;		Nothing
 15346 ;; This function is called by:
 15347 ;;		_setDelayOff_GO
 15348 ;;		_DelayTimejudge
 15349 ;; This function uses a non-reentrant model
 15350 ;;
 15351                           
 15352                           
 15353                           ;psect for function ___bmul
 15354  27EE                     ___bmul:	
 15355                           
 15356                           ;incstack = 0
 15357                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15358                           ;___bmul@multiplier stored from wreg
 15359  27EE  0020               	movlb	0	; select bank0
 15360  27EF  00A3               	movwf	___bmul@multiplier
 15361  27F0  01A2               	clrf	___bmul@product
 15362  27F1                     l6703:	
 15363  27F1  1C23               	btfss	___bmul@multiplier,0
 15364  27F2  2FF7               	goto	l6707
 15365  27F3  0820               	movf	___bmul@multiplicand,w
 15366  27F4  00A1               	movwf	??___bmul
 15367  27F5  0821               	movf	??___bmul,w
 15368  27F6  07A2               	addwf	___bmul@product,f
 15369  27F7                     l6707:	
 15370  27F7  1003               	clrc
 15371  27F8  0DA0               	rlf	___bmul@multiplicand,f
 15372  27F9  1003               	clrc
 15373  27FA  0CA3               	rrf	___bmul@multiplier,f
 15374  27FB  08A3               	movf	___bmul@multiplier,f
 15375  27FC  1D03               	skipz
 15376  27FD  2FF1               	goto	l6703
 15377  27FE  0822               	movf	___bmul@product,w
 15378  27FF  0008               	return
 15379  2800                     __end_of___bmul:	
 15380                           
 15381                           	psect	text98
 15382  1A37                     __ptext98:	
 15383 ;; *************** function _setCmd_Status *****************
 15384 ;; Defined at:
 15385 ;;		line 651 in file "../src/main_B1.c"
 15386 ;; Parameters:    Size  Location     Type
 15387 ;;  number          1    wreg     unsigned char 
 15388 ;;  cmd             1    0[BANK0 ] unsigned char 
 15389 ;; Auto vars:     Size  Location     Type
 15390 ;;  number          1    2[BANK0 ] unsigned char 
 15391 ;; Return value:  Size  Location     Type
 15392 ;;		None               void
 15393 ;; Registers used:
 15394 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15395 ;; Tracked objects:
 15396 ;;		On entry : 0/0
 15397 ;;		On exit  : 0/0
 15398 ;;		Unchanged: 0/0
 15399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15400 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15402 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15403 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15404 ;;Total ram usage:        3 bytes
 15405 ;; Hardware stack levels used:    1
 15406 ;; Hardware stack levels required when called:    5
 15407 ;; This function calls:
 15408 ;;		Nothing
 15409 ;; This function is called by:
 15410 ;;		_setDimmerLights_OnOff
 15411 ;;		_setControl_Lights_Table
 15412 ;; This function uses a non-reentrant model
 15413 ;;
 15414                           
 15415                           
 15416                           ;psect for function _setCmd_Status
 15417  1A37                     _setCmd_Status:	
 15418                           
 15419                           ;incstack = 0
 15420                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15421                           ;setCmd_Status@number stored from wreg
 15422  1A37  0020               	movlb	0	; select bank0
 15423  1A38  00A2               	movwf	setCmd_Status@number
 15424                           
 15425                           ;main_B1.c: 652: switch (number) {
 15426  1A39  2A49               	goto	l7255
 15427  1A3A                     l7251:	
 15428                           ;main_B1.c: 653: case 1:
 15429                           
 15430                           
 15431                           ;main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15432  1A3A  0820               	movf	setCmd_Status@cmd,w
 15433  1A3B  3A01               	xorlw	1
 15434  1A3C  3000               	movlw	0
 15435  1A3D  1903               	skipnz
 15436  1A3E  3001               	movlw	1
 15437  1A3F  00A1               	movwf	??_setCmd_Status
 15438  1A40  0021               	movlb	1	; select bank1
 15439  1A41  0857               	movf	_Cmd^(0+128),w
 15440  1A42  0020               	movlb	0	; select bank0
 15441  1A43  0621               	xorwf	??_setCmd_Status,w
 15442  1A44  39FE               	andlw	-2
 15443  1A45  0621               	xorwf	??_setCmd_Status,w
 15444  1A46  0021               	movlb	1	; select bank1
 15445  1A47  00D7               	movwf	_Cmd^(0+128)
 15446                           
 15447                           ;main_B1.c: 656: }
 15448                           
 15449                           ;main_B1.c: 655: break;
 15450  1A48  0008               	return
 15451  1A49                     l7255:	
 15452  1A49  0020               	movlb	0	; select bank0
 15453  1A4A  0822               	movf	setCmd_Status@number,w
 15454                           
 15455                           ; Switch size 1, requested type "space"
 15456                           ; Number of cases is 1, Range of values is 1 to 1
 15457                           ; switch strategies available:
 15458                           ; Name         Instructions Cycles
 15459                           ; simple_byte            4     3 (average)
 15460                           ; direct_byte           11     9 (fixed)
 15461                           ; jumptable            263     9 (fixed)
 15462                           ;	Chosen strategy is simple_byte
 15463  1A4B  3A01               	xorlw	1	; case 1
 15464  1A4C  1903               	skipnz
 15465  1A4D  2A3A               	goto	l7251
 15466  1A4E  2A4F               	goto	l2994
 15467  1A4F                     l2994:	
 15468  1A4F  0008               	return
 15469  1A50                     __end_of_setCmd_Status:	
 15470                           
 15471                           	psect	text99
 15472  18E1                     __ptext99:	
 15473 ;; *************** function _getMain_All_LightsStatus *****************
 15474 ;; Defined at:
 15475 ;;		line 373 in file "../src/main_B1.c"
 15476 ;; Parameters:    Size  Location     Type
 15477 ;;		None
 15478 ;; Auto vars:     Size  Location     Type
 15479 ;;  status          1    0[BANK0 ] unsigned char 
 15480 ;; Return value:  Size  Location     Type
 15481 ;;                  1    wreg      unsigned char 
 15482 ;; Registers used:
 15483 ;;		wreg, status,2, status,0
 15484 ;; Tracked objects:
 15485 ;;		On entry : 0/0
 15486 ;;		On exit  : 0/0
 15487 ;;		Unchanged: 0/0
 15488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15492 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15493 ;;Total ram usage:        1 bytes
 15494 ;; Hardware stack levels used:    1
 15495 ;; Hardware stack levels required when called:    5
 15496 ;; This function calls:
 15497 ;;		Nothing
 15498 ;; This function is called by:
 15499 ;;		_DimmerLights_Main
 15500 ;;		_setDimmerLights_Main
 15501 ;;		_setDimmerLights_OnOff
 15502 ;;		_Flash_Memory_Main
 15503 ;;		_Load_Main
 15504 ;;		_setTemp_Main
 15505 ;;		_setControl_Lights_Table
 15506 ;;		_Exception_Main
 15507 ;; This function uses a non-reentrant model
 15508 ;;
 15509                           
 15510                           
 15511                           ;psect for function _getMain_All_LightsStatus
 15512  18E1                     _getMain_All_LightsStatus:	
 15513                           
 15514                           ;main_B1.c: 374: char status = 0;
 15515                           
 15516                           ;incstack = 0
 15517                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15518  18E1  0020               	movlb	0	; select bank0
 15519  18E2  01A0               	clrf	getMain_All_LightsStatus@status
 15520                           
 15521                           ;main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15522  18E3  3000               	movlw	0
 15523  18E4  0023               	movlb	3	; select bank3
 15524  18E5  183F               	btfsc	(_DimmerLights1^(0+384)+1),0
 15525  18E6  3001               	movlw	1
 15526  18E7  0020               	movlb	0	; select bank0
 15527  18E8  00A0               	movwf	getMain_All_LightsStatus@status
 15528                           
 15529                           ;main_B1.c: 394: if (status == 0) {
 15530  18E9  08A0               	movf	getMain_All_LightsStatus@status,f
 15531  18EA  1D03               	skipz
 15532  18EB  28F2               	goto	l7245
 15533                           
 15534                           ;main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15535  18EC  3000               	movlw	0
 15536  18ED  0023               	movlb	3	; select bank3
 15537  18EE  1848               	btfsc	(_DimmerLights2^(0+384)+1),0
 15538  18EF  3001               	movlw	1
 15539  18F0  0020               	movlb	0	; select bank0
 15540  18F1  00A0               	movwf	getMain_All_LightsStatus@status
 15541  18F2                     l7245:	
 15542                           
 15543                           ;main_B1.c: 396: }
 15544                           ;main_B1.c: 420: return status;
 15545  18F2  0820               	movf	getMain_All_LightsStatus@status,w
 15546  18F3  0008               	return
 15547  18F4                     __end_of_getMain_All_LightsStatus:	
 15548                           
 15549                           	psect	text100
 15550  2798                     __ptext100:	
 15551 ;; *************** function _getDelayOff_GO *****************
 15552 ;; Defined at:
 15553 ;;		line 114 in file "../src/DelayOff_B1.c"
 15554 ;; Parameters:    Size  Location     Type
 15555 ;;  sw              1    wreg     unsigned char 
 15556 ;; Auto vars:     Size  Location     Type
 15557 ;;  sw              1    2[BANK0 ] unsigned char 
 15558 ;;  go              1    3[BANK0 ] unsigned char 
 15559 ;; Return value:  Size  Location     Type
 15560 ;;                  1    wreg      unsigned char 
 15561 ;; Registers used:
 15562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15563 ;; Tracked objects:
 15564 ;;		On entry : 0/0
 15565 ;;		On exit  : 0/0
 15566 ;;		Unchanged: 0/0
 15567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15569 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15571 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15572 ;;Total ram usage:        2 bytes
 15573 ;; Hardware stack levels used:    1
 15574 ;; Hardware stack levels required when called:    6
 15575 ;; This function calls:
 15576 ;;		_DelayOffPointSelect
 15577 ;; This function is called by:
 15578 ;;		_setDimmerLights_OnOff
 15579 ;; This function uses a non-reentrant model
 15580 ;;
 15581                           
 15582                           
 15583                           ;psect for function _getDelayOff_GO
 15584  2798                     _getDelayOff_GO:	
 15585                           
 15586                           ;incstack = 0
 15587                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15588                           ;getDelayOff_GO@sw stored from wreg
 15589  2798  0020               	movlb	0	; select bank0
 15590  2799  00A2               	movwf	getDelayOff_GO@sw
 15591                           
 15592                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15593  279A  0822               	movf	getDelayOff_GO@sw,w
 15594  279B  3199  21AB         	fcall	_DelayOffPointSelect
 15595                           
 15596                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15597  279D  0021               	movlb	1	; select bank1
 15598  279E  0858               	movf	_DelayOff^(0+128),w
 15599  279F  0086               	movwf	6
 15600  27A0  3001               	movlw	1	; select bank2/3
 15601  27A1  0087               	movwf	7
 15602  27A2  3000               	movlw	0
 15603  27A3  1881               	btfsc	1,1
 15604  27A4  3001               	movlw	1
 15605  27A5  0020               	movlb	0	; select bank0
 15606  27A6  00A3               	movwf	getDelayOff_GO@go
 15607                           
 15608                           ;DelayOff_B1.c: 117: return go;
 15609  27A7  0823               	movf	getDelayOff_GO@go,w
 15610  27A8  0008               	return
 15611  27A9                     __end_of_getDelayOff_GO:	
 15612                           
 15613                           	psect	text101
 15614  27DC                     __ptext101:	
 15615 ;; *************** function _getCmd_Status *****************
 15616 ;; Defined at:
 15617 ;;		line 659 in file "../src/main_B1.c"
 15618 ;; Parameters:    Size  Location     Type
 15619 ;;  number          1    wreg     unsigned char 
 15620 ;; Auto vars:     Size  Location     Type
 15621 ;;  number          1    0[BANK0 ] unsigned char 
 15622 ;;  cmd             1    1[BANK0 ] unsigned char 
 15623 ;; Return value:  Size  Location     Type
 15624 ;;                  1    wreg      unsigned char 
 15625 ;; Registers used:
 15626 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15627 ;; Tracked objects:
 15628 ;;		On entry : 0/0
 15629 ;;		On exit  : 0/0
 15630 ;;		Unchanged: 0/0
 15631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15633 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15635 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15636 ;;Total ram usage:        2 bytes
 15637 ;; Hardware stack levels used:    1
 15638 ;; Hardware stack levels required when called:    5
 15639 ;; This function calls:
 15640 ;;		Nothing
 15641 ;; This function is called by:
 15642 ;;		_setDimmerLights_OnOff
 15643 ;; This function uses a non-reentrant model
 15644 ;;
 15645                           
 15646                           
 15647                           ;psect for function _getCmd_Status
 15648  27DC                     _getCmd_Status:	
 15649                           
 15650                           ;incstack = 0
 15651                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15652                           ;getCmd_Status@number stored from wreg
 15653  27DC  0020               	movlb	0	; select bank0
 15654  27DD  00A0               	movwf	getCmd_Status@number
 15655                           
 15656                           ;main_B1.c: 660: char cmd = 0;
 15657  27DE  01A1               	clrf	getCmd_Status@cmd
 15658                           
 15659                           ;main_B1.c: 661: switch (number) {
 15660  27DF  2FE7               	goto	l7573
 15661  27E0                     l7569:	
 15662                           ;main_B1.c: 662: case 1:
 15663                           
 15664                           
 15665                           ;main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15666  27E0  3000               	movlw	0
 15667  27E1  0021               	movlb	1	; select bank1
 15668  27E2  1857               	btfsc	_Cmd^(0+128),0
 15669  27E3  3001               	movlw	1
 15670  27E4  0020               	movlb	0	; select bank0
 15671  27E5  00A1               	movwf	getCmd_Status@cmd
 15672                           
 15673                           ;main_B1.c: 665: }
 15674                           
 15675                           ;main_B1.c: 664: break;
 15676  27E6  2FEC               	goto	l7575
 15677  27E7                     l7573:	
 15678  27E7  0820               	movf	getCmd_Status@number,w
 15679                           
 15680                           ; Switch size 1, requested type "space"
 15681                           ; Number of cases is 1, Range of values is 1 to 1
 15682                           ; switch strategies available:
 15683                           ; Name         Instructions Cycles
 15684                           ; simple_byte            4     3 (average)
 15685                           ; direct_byte           11     9 (fixed)
 15686                           ; jumptable            263     9 (fixed)
 15687                           ;	Chosen strategy is simple_byte
 15688  27E8  3A01               	xorlw	1	; case 1
 15689  27E9  1903               	skipnz
 15690  27EA  2FE0               	goto	l7569
 15691  27EB  2FEC               	goto	l7575
 15692  27EC                     l7575:	
 15693                           
 15694                           ;main_B1.c: 666: return cmd;
 15695  27EC  0821               	movf	getCmd_Status@cmd,w
 15696  27ED  0008               	return
 15697  27EE                     __end_of_getCmd_Status:	
 15698                           
 15699                           	psect	text102
 15700  128C                     __ptext102:	
 15701 ;; *************** function _setDimmerLights_Dimming *****************
 15702 ;; Defined at:
 15703 ;;		line 1079 in file "../src/Dimmer_B1.c"
 15704 ;; Parameters:    Size  Location     Type
 15705 ;;  lights          1    wreg     unsigned char 
 15706 ;;  status          1   74[BANK0 ] unsigned char 
 15707 ;; Auto vars:     Size  Location     Type
 15708 ;;  lights          1   77[BANK0 ] unsigned char 
 15709 ;;  value           1   76[BANK0 ] unsigned char 
 15710 ;; Return value:  Size  Location     Type
 15711 ;;		None               void
 15712 ;; Registers used:
 15713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15714 ;; Tracked objects:
 15715 ;;		On entry : 0/0
 15716 ;;		On exit  : 0/0
 15717 ;;		Unchanged: 0/0
 15718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15719 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15720 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15722 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15723 ;;Total ram usage:        4 bytes
 15724 ;; Hardware stack levels used:    1
 15725 ;; Hardware stack levels required when called:    8
 15726 ;; This function calls:
 15727 ;;		_getDimmerIntr_DimmingValue
 15728 ;;		_getDimmerLights_ValueToPercent
 15729 ;;		_setBuz
 15730 ;;		_setDimmerIntr_Dimming_Sw
 15731 ;;		_setDimmerIntr_MaxmumValue
 15732 ;;		_setDimmerLights_Line
 15733 ;;		_setMemory_Modify
 15734 ;;		_setProductData
 15735 ;;		_setRF_DimmerLights
 15736 ;;		_setRF_TransceiveGO
 15737 ;;		_setTxData
 15738 ;; This function is called by:
 15739 ;;		_setDimmerLights_Main
 15740 ;; This function uses a non-reentrant model
 15741 ;;
 15742                           
 15743                           
 15744                           ;psect for function _setDimmerLights_Dimming
 15745  128C                     _setDimmerLights_Dimming:	
 15746                           
 15747                           ;incstack = 0
 15748                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15749                           ;setDimmerLights_Dimming@lights stored from wreg
 15750  128C  0020               	movlb	0	; select bank0
 15751  128D  00ED               	movwf	setDimmerLights_Dimming@lights
 15752                           
 15753                           ;Dimmer_B1.c: 1080: setDimmerIntr_Dimming_Sw(lights, status);
 15754  128E  086A               	movf	setDimmerLights_Dimming@status,w
 15755  128F  00EB               	movwf	??_setDimmerLights_Dimming
 15756  1290  086B               	movf	??_setDimmerLights_Dimming,w
 15757  1291  00A0               	movwf	setDimmerIntr_Dimming_Sw@command
 15758  1292  086D               	movf	setDimmerLights_Dimming@lights,w
 15759  1293  319D  2550  3192   	fcall	_setDimmerIntr_Dimming_Sw
 15760                           
 15761                           ;Dimmer_B1.c: 1081: if (status == 1) {
 15762  1296  0020               	movlb	0	; select bank0
 15763  1297  086A               	movf	setDimmerLights_Dimming@status,w
 15764  1298  3A01               	xorlw	1
 15765  1299  1D03               	skipz
 15766  129A  2AA8               	goto	l7913
 15767                           
 15768                           ;Dimmer_B1.c: 1083: setRF_TransceiveGO(0);
 15769  129B  3000               	movlw	0
 15770  129C  3198  20CE  3192   	fcall	_setRF_TransceiveGO
 15771                           
 15772                           ;Dimmer_B1.c: 1085: setBuz(1, 100);
 15773  129F  3064               	movlw	100
 15774  12A0  0020               	movlb	0	; select bank0
 15775  12A1  00A9               	movwf	setBuz@time
 15776  12A2  3000               	movlw	0
 15777  12A3  00AA               	movwf	setBuz@time+1
 15778  12A4  3001               	movlw	1
 15779  12A5  3193  2335         	fcall	_setBuz
 15780                           
 15781                           ;Dimmer_B1.c: 1086: } else if (status == 0) {
 15782  12A7  0008               	return
 15783  12A8                     l7913:	
 15784  12A8  0020               	movlb	0	; select bank0
 15785  12A9  08EA               	movf	setDimmerLights_Dimming@status,f
 15786  12AA  1D03               	skipz
 15787  12AB  0008               	return
 15788                           
 15789                           ;Dimmer_B1.c: 1089: Dimmer.Load_Status = 0;
 15790  12AC  0022               	movlb	2	; select bank2
 15791  12AD  112C               	bcf	_Dimmer^(0+256),2
 15792                           
 15793                           ;Dimmer_B1.c: 1090: setDimmerLights_Line(lights);
 15794  12AE  0020               	movlb	0	; select bank0
 15795  12AF  086D               	movf	setDimmerLights_Dimming@lights,w
 15796  12B0  319B  230E  3192   	fcall	_setDimmerLights_Line
 15797                           
 15798                           ;Dimmer_B1.c: 1092: char value = getDimmerIntr_DimmingValue(lights);
 15799  12B3  0020               	movlb	0	; select bank0
 15800  12B4  086D               	movf	setDimmerLights_Dimming@lights,w
 15801  12B5  3199  2195  3192   	fcall	_getDimmerIntr_DimmingValue
 15802  12B8  0020               	movlb	0	; select bank0
 15803  12B9  00EB               	movwf	??_setDimmerLights_Dimming
 15804  12BA  086B               	movf	??_setDimmerLights_Dimming,w
 15805  12BB  00EC               	movwf	setDimmerLights_Dimming@value
 15806                           
 15807                           ;Dimmer_B1.c: 1093: setDimmerIntr_MaxmumValue(lights, value);
 15808  12BC  086C               	movf	setDimmerLights_Dimming@value,w
 15809  12BD  00EB               	movwf	??_setDimmerLights_Dimming
 15810  12BE  086B               	movf	??_setDimmerLights_Dimming,w
 15811  12BF  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15812  12C0  086D               	movf	setDimmerLights_Dimming@lights,w
 15813  12C1  3199  21D9  3192   	fcall	_setDimmerIntr_MaxmumValue
 15814                           
 15815                           ;Dimmer_B1.c: 1094: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15816  12C4  0020               	movlb	0	; select bank0
 15817  12C5  086C               	movf	setDimmerLights_Dimming@value,w
 15818  12C6  3195  2513  3192   	fcall	_getDimmerLights_ValueToPercent
 15819  12C9  0020               	movlb	0	; select bank0
 15820  12CA  00EB               	movwf	??_setDimmerLights_Dimming
 15821  12CB  086B               	movf	??_setDimmerLights_Dimming,w
 15822  12CC  00E2               	movwf	setProductData@value
 15823  12CD  086D               	movf	setDimmerLights_Dimming@lights,w
 15824  12CE  3E14               	addlw	20
 15825  12CF  31A6  26FD  3192   	fcall	_setProductData
 15826                           
 15827                           ;Dimmer_B1.c: 1101: setMemory_Modify(1);
 15828  12D2  3001               	movlw	1
 15829  12D3  3198  20BB  3192   	fcall	_setMemory_Modify
 15830                           
 15831                           ;Dimmer_B1.c: 1105: setRF_DimmerLights(lights, 1);
 15832  12D6  0020               	movlb	0	; select bank0
 15833  12D7  01E5               	clrf	setRF_DimmerLights@on
 15834  12D8  0AE5               	incf	setRF_DimmerLights@on,f
 15835  12D9  086D               	movf	setDimmerLights_Dimming@lights,w
 15836  12DA  3195  2578  3192   	fcall	_setRF_DimmerLights
 15837                           
 15838                           ;Dimmer_B1.c: 1106: setTxData();
 15839  12DD  318E  267E         	fcall	_setTxData
 15840  12DF  0008               	return
 15841  12E0                     __end_of_setDimmerLights_Dimming:	
 15842                           
 15843                           	psect	text103
 15844  0E7E                     __ptext103:	
 15845 ;; *************** function _setTxData *****************
 15846 ;; Defined at:
 15847 ;;		line 183 in file "../src/RF_Control_B1.c"
 15848 ;; Parameters:    Size  Location     Type
 15849 ;;		None
 15850 ;; Auto vars:     Size  Location     Type
 15851 ;;  i               1    0        unsigned char 
 15852 ;; Return value:  Size  Location     Type
 15853 ;;		None               void
 15854 ;; Registers used:
 15855 ;;		wreg, fsr1l, fsr1h, status,2
 15856 ;; Tracked objects:
 15857 ;;		On entry : 0/0
 15858 ;;		On exit  : 0/0
 15859 ;;		Unchanged: 0/0
 15860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15865 ;;Total ram usage:        1 bytes
 15866 ;; Hardware stack levels used:    1
 15867 ;; Hardware stack levels required when called:    5
 15868 ;; This function calls:
 15869 ;;		Nothing
 15870 ;; This function is called by:
 15871 ;;		_setDimmerLights_OnOff
 15872 ;;		_setDimmerLights_Dimming
 15873 ;;		_getRxData
 15874 ;;		_setControl_Lights_Table
 15875 ;;		_setRFSW_Control
 15876 ;;		_setRFSW_AdjControl
 15877 ;; This function uses a non-reentrant model
 15878 ;;
 15879                           
 15880                           
 15881                           ;psect for function _setTxData
 15882  0E7E                     _setTxData:	
 15883                           
 15884                           ;RF_Control_B1.c: 184: char i;
 15885                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15886                           
 15887                           ;incstack = 0
 15888                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15889  0E7E  0021               	movlb	1	; select bank1
 15890  0E7F  1C20               	btfss	_RF1^(0+128),0
 15891  0E80  0008               	return
 15892                           
 15893                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15894  0E81  1520               	bsf	_RF1^(0+128),2
 15895                           
 15896                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15897  0E82  01A3               	clrf	(_RF1^(0+128)+3)
 15898  0E83  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15899                           
 15900                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15901  0E84  3063               	movlw	99
 15902  0E85  0020               	movlb	0	; select bank0
 15903  0E86  00A0               	movwf	??_setTxData
 15904  0E87  0820               	movf	??_setTxData,w
 15905  0E88  0023               	movlb	3	; select bank3
 15906  0E89  00A0               	movwf	_RF_Data^(0+384)
 15907                           
 15908                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15909  0E8A  3002               	movlw	2
 15910  0E8B  0020               	movlb	0	; select bank0
 15911  0E8C  00A0               	movwf	??_setTxData
 15912  0E8D  0820               	movf	??_setTxData,w
 15913  0E8E  0023               	movlb	3	; select bank3
 15914  0E8F  00A1               	movwf	(_RF_Data^(0+384)+1)
 15915                           
 15916                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15917  0E90  0021               	movlb	1	; select bank1
 15918  0E91  086D               	movf	_product^(0+128),w
 15919  0E92  0086               	movwf	6
 15920  0E93  3002               	movlw	2	; select bank4/5
 15921  0E94  0087               	movwf	7
 15922  0E95  3002               	movlw	2	; select bank4/5
 15923  0E96  3F42               	moviw [2]fsr1
 15924  0E97  0023               	movlb	3	; select bank3
 15925  0E98  00A2               	movwf	(_RF_Data^(0+384)+2)
 15926                           
 15927                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15928  0E99  0021               	movlb	1	; select bank1
 15929  0E9A  086D               	movf	_product^(0+128),w
 15930  0E9B  0086               	movwf	6
 15931  0E9C  3002               	movlw	2	; select bank4/5
 15932  0E9D  0087               	movwf	7
 15933  0E9E  3002               	movlw	2	; select bank4/5
 15934  0E9F  3F43               	moviw [3]fsr1
 15935  0EA0  0023               	movlb	3	; select bank3
 15936  0EA1  00A3               	movwf	(_RF_Data^(0+384)+3)
 15937                           
 15938                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15939  0EA2  0021               	movlb	1	; select bank1
 15940  0EA3  086D               	movf	_product^(0+128),w
 15941  0EA4  0086               	movwf	6
 15942  0EA5  3002               	movlw	2	; select bank4/5
 15943  0EA6  0087               	movwf	7
 15944  0EA7  3002               	movlw	2	; select bank4/5
 15945  0EA8  3F44               	moviw [4]fsr1
 15946  0EA9  0023               	movlb	3	; select bank3
 15947  0EAA  00A4               	movwf	(_RF_Data^(0+384)+4)
 15948                           
 15949                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15950  0EAB  0021               	movlb	1	; select bank1
 15951  0EAC  086D               	movf	_product^(0+128),w
 15952  0EAD  0086               	movwf	6
 15953  0EAE  3002               	movlw	2	; select bank4/5
 15954  0EAF  0087               	movwf	7
 15955  0EB0  3002               	movlw	2	; select bank4/5
 15956  0EB1  3F45               	moviw [5]fsr1
 15957  0EB2  0023               	movlb	3	; select bank3
 15958  0EB3  00A5               	movwf	(_RF_Data^(0+384)+5)
 15959                           
 15960                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15961  0EB4  0021               	movlb	1	; select bank1
 15962  0EB5  086D               	movf	_product^(0+128),w
 15963  0EB6  0086               	movwf	6
 15964  0EB7  3002               	movlw	2	; select bank4/5
 15965  0EB8  0087               	movwf	7
 15966  0EB9  3002               	movlw	2	; select bank4/5
 15967  0EBA  3F46               	moviw [6]fsr1
 15968  0EBB  0023               	movlb	3	; select bank3
 15969  0EBC  00A6               	movwf	(_RF_Data^(0+384)+6)
 15970                           
 15971                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15972  0EBD  0021               	movlb	1	; select bank1
 15973  0EBE  086D               	movf	_product^(0+128),w
 15974  0EBF  0086               	movwf	6
 15975  0EC0  3002               	movlw	2	; select bank4/5
 15976  0EC1  0087               	movwf	7
 15977  0EC2  3002               	movlw	2	; select bank4/5
 15978  0EC3  3F47               	moviw [7]fsr1
 15979  0EC4  0023               	movlb	3	; select bank3
 15980  0EC5  00A7               	movwf	(_RF_Data^(0+384)+7)
 15981                           
 15982                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15983  0EC6  0021               	movlb	1	; select bank1
 15984  0EC7  086D               	movf	_product^(0+128),w
 15985  0EC8  0086               	movwf	6
 15986  0EC9  3002               	movlw	2	; select bank4/5
 15987  0ECA  0087               	movwf	7
 15988  0ECB  3002               	movlw	2	; select bank4/5
 15989  0ECC  3F48               	moviw [8]fsr1
 15990  0ECD  0023               	movlb	3	; select bank3
 15991  0ECE  00A8               	movwf	(_RF_Data^(0+384)+8)
 15992                           
 15993                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15994  0ECF  0021               	movlb	1	; select bank1
 15995  0ED0  086D               	movf	_product^(0+128),w
 15996  0ED1  0086               	movwf	6
 15997  0ED2  3002               	movlw	2	; select bank4/5
 15998  0ED3  0087               	movwf	7
 15999  0ED4  3002               	movlw	2	; select bank4/5
 16000  0ED5  3F49               	moviw [9]fsr1
 16001  0ED6  0023               	movlb	3	; select bank3
 16002  0ED7  00A9               	movwf	(_RF_Data^(0+384)+9)
 16003                           
 16004                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 16005  0ED8  0021               	movlb	1	; select bank1
 16006  0ED9  086D               	movf	_product^(0+128),w
 16007  0EDA  0086               	movwf	6
 16008  0EDB  3002               	movlw	2	; select bank4/5
 16009  0EDC  0087               	movwf	7
 16010  0EDD  3002               	movlw	2	; select bank4/5
 16011  0EDE  3F4A               	moviw [10]fsr1
 16012  0EDF  0023               	movlb	3	; select bank3
 16013  0EE0  00AA               	movwf	(_RF_Data^(0+384)+10)
 16014                           
 16015                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 16016  0EE1  0021               	movlb	1	; select bank1
 16017  0EE2  086D               	movf	_product^(0+128),w
 16018  0EE3  0086               	movwf	6
 16019  0EE4  3002               	movlw	2	; select bank4/5
 16020  0EE5  0087               	movwf	7
 16021  0EE6  3002               	movlw	2	; select bank4/5
 16022  0EE7  3F4B               	moviw [11]fsr1
 16023  0EE8  0023               	movlb	3	; select bank3
 16024  0EE9  00AB               	movwf	(_RF_Data^(0+384)+11)
 16025                           
 16026                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 16027  0EEA  0021               	movlb	1	; select bank1
 16028  0EEB  086D               	movf	_product^(0+128),w
 16029  0EEC  0086               	movwf	6
 16030  0EED  3002               	movlw	2	; select bank4/5
 16031  0EEE  0087               	movwf	7
 16032  0EEF  3002               	movlw	2	; select bank4/5
 16033  0EF0  3F4C               	moviw [12]fsr1
 16034  0EF1  0023               	movlb	3	; select bank3
 16035  0EF2  00AC               	movwf	(_RF_Data^(0+384)+12)
 16036                           
 16037                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 16038  0EF3  0021               	movlb	1	; select bank1
 16039  0EF4  086D               	movf	_product^(0+128),w
 16040  0EF5  0086               	movwf	6
 16041  0EF6  3002               	movlw	2	; select bank4/5
 16042  0EF7  0087               	movwf	7
 16043  0EF8  3002               	movlw	2	; select bank4/5
 16044  0EF9  3F4D               	moviw [13]fsr1
 16045  0EFA  0023               	movlb	3	; select bank3
 16046  0EFB  00AD               	movwf	(_RF_Data^(0+384)+13)
 16047                           
 16048                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 16049  0EFC  0021               	movlb	1	; select bank1
 16050  0EFD  086D               	movf	_product^(0+128),w
 16051  0EFE  0086               	movwf	6
 16052  0EFF  3002               	movlw	2	; select bank4/5
 16053  0F00  0087               	movwf	7
 16054  0F01  3002               	movlw	2	; select bank4/5
 16055  0F02  3F4E               	moviw [14]fsr1
 16056  0F03  0023               	movlb	3	; select bank3
 16057  0F04  00AE               	movwf	(_RF_Data^(0+384)+14)
 16058                           
 16059                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 16060  0F05  0021               	movlb	1	; select bank1
 16061  0F06  086D               	movf	_product^(0+128),w
 16062  0F07  0086               	movwf	6
 16063  0F08  3002               	movlw	2	; select bank4/5
 16064  0F09  0087               	movwf	7
 16065  0F0A  3002               	movlw	2	; select bank4/5
 16066  0F0B  3F4F               	moviw [15]fsr1
 16067  0F0C  0023               	movlb	3	; select bank3
 16068  0F0D  00AF               	movwf	(_RF_Data^(0+384)+15)
 16069                           
 16070                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 16071  0F0E  0021               	movlb	1	; select bank1
 16072  0F0F  086D               	movf	_product^(0+128),w
 16073  0F10  0086               	movwf	6
 16074  0F11  3002               	movlw	2	; select bank4/5
 16075  0F12  0087               	movwf	7
 16076  0F13  3002               	movlw	2	; select bank4/5
 16077  0F14  3F50               	moviw [16]fsr1
 16078  0F15  0023               	movlb	3	; select bank3
 16079  0F16  00B0               	movwf	(_RF_Data^(0+384)+16)
 16080                           
 16081                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 16082  0F17  0021               	movlb	1	; select bank1
 16083  0F18  086D               	movf	_product^(0+128),w
 16084  0F19  0086               	movwf	6
 16085  0F1A  3002               	movlw	2	; select bank4/5
 16086  0F1B  0087               	movwf	7
 16087  0F1C  3002               	movlw	2	; select bank4/5
 16088  0F1D  3F51               	moviw [17]fsr1
 16089  0F1E  0023               	movlb	3	; select bank3
 16090  0F1F  00B1               	movwf	(_RF_Data^(0+384)+17)
 16091                           
 16092                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 16093  0F20  0021               	movlb	1	; select bank1
 16094  0F21  086D               	movf	_product^(0+128),w
 16095  0F22  0086               	movwf	6
 16096  0F23  3002               	movlw	2	; select bank4/5
 16097  0F24  0087               	movwf	7
 16098  0F25  3002               	movlw	2	; select bank4/5
 16099  0F26  3F52               	moviw [18]fsr1
 16100  0F27  0023               	movlb	3	; select bank3
 16101  0F28  00B2               	movwf	(_RF_Data^(0+384)+18)
 16102                           
 16103                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 16104  0F29  0021               	movlb	1	; select bank1
 16105  0F2A  086D               	movf	_product^(0+128),w
 16106  0F2B  0086               	movwf	6
 16107  0F2C  3002               	movlw	2	; select bank4/5
 16108  0F2D  0087               	movwf	7
 16109  0F2E  3002               	movlw	2	; select bank4/5
 16110  0F2F  3F53               	moviw [19]fsr1
 16111  0F30  0023               	movlb	3	; select bank3
 16112  0F31  00B3               	movwf	(_RF_Data^(0+384)+19)
 16113                           
 16114                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 16115  0F32  30D2               	movlw	210
 16116  0F33  0020               	movlb	0	; select bank0
 16117  0F34  00A0               	movwf	??_setTxData
 16118  0F35  0820               	movf	??_setTxData,w
 16119  0F36  0023               	movlb	3	; select bank3
 16120  0F37  00B4               	movwf	(_RF_Data^(0+384)+20)
 16121  0F38  0008               	return
 16122  0F39                     __end_of_setTxData:	
 16123                           
 16124                           	psect	text104
 16125  18CE                     __ptext104:	
 16126 ;; *************** function _setRF_TransceiveGO *****************
 16127 ;; Defined at:
 16128 ;;		line 508 in file "../src/RF_Control_B1.c"
 16129 ;; Parameters:    Size  Location     Type
 16130 ;;  command         1    wreg     unsigned char 
 16131 ;; Auto vars:     Size  Location     Type
 16132 ;;  command         1    1[BANK0 ] unsigned char 
 16133 ;; Return value:  Size  Location     Type
 16134 ;;		None               void
 16135 ;; Registers used:
 16136 ;;		wreg, status,2, status,0
 16137 ;; Tracked objects:
 16138 ;;		On entry : 0/0
 16139 ;;		On exit  : 0/0
 16140 ;;		Unchanged: 0/0
 16141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16144 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16145 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16146 ;;Total ram usage:        2 bytes
 16147 ;; Hardware stack levels used:    1
 16148 ;; Hardware stack levels required when called:    5
 16149 ;; This function calls:
 16150 ;;		Nothing
 16151 ;; This function is called by:
 16152 ;;		_setDimmerLights_Dimming
 16153 ;; This function uses a non-reentrant model
 16154 ;;
 16155                           
 16156                           
 16157                           ;psect for function _setRF_TransceiveGO
 16158  18CE                     _setRF_TransceiveGO:	
 16159                           
 16160                           ;incstack = 0
 16161                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 16162                           ;setRF_TransceiveGO@command stored from wreg
 16163  18CE  0020               	movlb	0	; select bank0
 16164  18CF  00A1               	movwf	setRF_TransceiveGO@command
 16165                           
 16166                           ;RF_Control_B1.c: 509: RF1.TransceiveGO = command == 1 ? 1 : 0;
 16167  18D0  0821               	movf	setRF_TransceiveGO@command,w
 16168  18D1  3A01               	xorlw	1
 16169  18D2  3000               	movlw	0
 16170  18D3  1903               	skipnz
 16171  18D4  3001               	movlw	1
 16172  18D5  00A0               	movwf	??_setRF_TransceiveGO
 16173  18D6  0DA0               	rlf	??_setRF_TransceiveGO,f
 16174  18D7  0DA0               	rlf	??_setRF_TransceiveGO,f
 16175  18D8  0021               	movlb	1	; select bank1
 16176  18D9  0820               	movf	_RF1^(0+128),w
 16177  18DA  0020               	movlb	0	; select bank0
 16178  18DB  0620               	xorwf	??_setRF_TransceiveGO,w
 16179  18DC  39FB               	andlw	-5
 16180  18DD  0620               	xorwf	??_setRF_TransceiveGO,w
 16181  18DE  0021               	movlb	1	; select bank1
 16182  18DF  00A0               	movwf	_RF1^(0+128)
 16183  18E0  0008               	return
 16184  18E1                     __end_of_setRF_TransceiveGO:	
 16185                           
 16186                           	psect	text105
 16187  1578                     __ptext105:	
 16188 ;; *************** function _setRF_DimmerLights *****************
 16189 ;; Defined at:
 16190 ;;		line 493 in file "../src/RF_Control_B1.c"
 16191 ;; Parameters:    Size  Location     Type
 16192 ;;  lights          1    wreg     unsigned char 
 16193 ;;  on              1   69[BANK0 ] unsigned char 
 16194 ;; Auto vars:     Size  Location     Type
 16195 ;;  lights          1   73[BANK0 ] unsigned char 
 16196 ;;  status          1   72[BANK0 ] unsigned char 
 16197 ;; Return value:  Size  Location     Type
 16198 ;;		None               void
 16199 ;; Registers used:
 16200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16201 ;; Tracked objects:
 16202 ;;		On entry : 0/0
 16203 ;;		On exit  : 0/0
 16204 ;;		Unchanged: 0/0
 16205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16206 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16210 ;;Total ram usage:        5 bytes
 16211 ;; Hardware stack levels used:    1
 16212 ;; Hardware stack levels required when called:    6
 16213 ;; This function calls:
 16214 ;;		_setProductData
 16215 ;; This function is called by:
 16216 ;;		_setDimmerLights_OnOff
 16217 ;;		_setDimmerLights_Dimming
 16218 ;;		_setRFSW_Control
 16219 ;; This function uses a non-reentrant model
 16220 ;;
 16221                           
 16222                           
 16223                           ;psect for function _setRF_DimmerLights
 16224  1578                     _setRF_DimmerLights:	
 16225                           
 16226                           ;incstack = 0
 16227                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16228                           ;setRF_DimmerLights@lights stored from wreg
 16229  1578  0020               	movlb	0	; select bank0
 16230  1579  00E9               	movwf	setRF_DimmerLights@lights
 16231                           
 16232                           ;RF_Control_B1.c: 494: char status = 1;
 16233  157A  01E8               	clrf	setRF_DimmerLights@status
 16234  157B  0AE8               	incf	setRF_DimmerLights@status,f
 16235                           
 16236                           ;RF_Control_B1.c: 495: status <<= (lights - 1);
 16237  157C  0869               	movf	setRF_DimmerLights@lights,w
 16238  157D  3EFF               	addlw	-1
 16239  157E  0A89               	incf	9,f
 16240  157F  2D82               	goto	u6480
 16241  1580                     u6485:	
 16242  1580  1003               	clrc
 16243  1581  0DE8               	rlf	setRF_DimmerLights@status,f
 16244  1582                     u6480:	
 16245  1582  3EFF               	addlw	-1
 16246  1583  1D03               	skipz
 16247  1584  2D80               	goto	u6485
 16248                           
 16249                           ;RF_Control_B1.c: 496: setProductData(11, lights);
 16250  1585  0869               	movf	setRF_DimmerLights@lights,w
 16251  1586  00E6               	movwf	??_setRF_DimmerLights
 16252  1587  0866               	movf	??_setRF_DimmerLights,w
 16253  1588  00E2               	movwf	setProductData@value
 16254  1589  300B               	movlw	11
 16255  158A  31A6  26FD  3195   	fcall	_setProductData
 16256                           
 16257                           ;RF_Control_B1.c: 497: setProductData(17, product->Data[26 + lights]);
 16258  158D  0020               	movlb	0	; select bank0
 16259  158E  0869               	movf	setRF_DimmerLights@lights,w
 16260  158F  3E1A               	addlw	26
 16261  1590  0021               	movlb	1	; select bank1
 16262  1591  076D               	addwf	_product^(0+128),w
 16263  1592  0020               	movlb	0	; select bank0
 16264  1593  00E6               	movwf	??_setRF_DimmerLights
 16265  1594  0866               	movf	??_setRF_DimmerLights,w
 16266  1595  0086               	movwf	6
 16267  1596  3002               	movlw	2	; select bank4/5
 16268  1597  0087               	movwf	7
 16269  1598  0801               	movf	1,w
 16270  1599  00E7               	movwf	??_setRF_DimmerLights+1
 16271  159A  0867               	movf	??_setRF_DimmerLights+1,w
 16272  159B  00E2               	movwf	setProductData@value
 16273  159C  3011               	movlw	17
 16274  159D  31A6  26FD  3195   	fcall	_setProductData
 16275                           
 16276                           ;RF_Control_B1.c: 498: if (on == 1) {
 16277  15A0  0020               	movlb	0	; select bank0
 16278  15A1  0865               	movf	setRF_DimmerLights@on,w
 16279  15A2  3A01               	xorlw	1
 16280  15A3  1D03               	skipz
 16281  15A4  2DC7               	goto	l7111
 16282                           
 16283                           ;RF_Control_B1.c: 499: setProductData(9, product->Data[20 + lights]);
 16284  15A5  0869               	movf	setRF_DimmerLights@lights,w
 16285  15A6  3E14               	addlw	20
 16286  15A7  0021               	movlb	1	; select bank1
 16287  15A8  076D               	addwf	_product^(0+128),w
 16288  15A9  0020               	movlb	0	; select bank0
 16289  15AA  00E6               	movwf	??_setRF_DimmerLights
 16290  15AB  0866               	movf	??_setRF_DimmerLights,w
 16291  15AC  0086               	movwf	6
 16292  15AD  3002               	movlw	2	; select bank4/5
 16293  15AE  0087               	movwf	7
 16294  15AF  0801               	movf	1,w
 16295  15B0  00E7               	movwf	??_setRF_DimmerLights+1
 16296  15B1  0867               	movf	??_setRF_DimmerLights+1,w
 16297  15B2  00E2               	movwf	setProductData@value
 16298  15B3  3009               	movlw	9
 16299  15B4  31A6  26FD  3195   	fcall	_setProductData
 16300                           
 16301                           ;RF_Control_B1.c: 500: setProductData(15, (product->Data[15] | status));
 16302  15B7  0021               	movlb	1	; select bank1
 16303  15B8  086D               	movf	_product^(0+128),w
 16304  15B9  3E0F               	addlw	15
 16305  15BA  0086               	movwf	6
 16306  15BB  3002               	movlw	2	; select bank4/5
 16307  15BC  0087               	movwf	7
 16308  15BD  0801               	movf	1,w
 16309  15BE  0020               	movlb	0	; select bank0
 16310  15BF  0468               	iorwf	setRF_DimmerLights@status,w
 16311  15C0  00E6               	movwf	??_setRF_DimmerLights
 16312  15C1  0866               	movf	??_setRF_DimmerLights,w
 16313  15C2  00E2               	movwf	setProductData@value
 16314  15C3  300F               	movlw	15
 16315  15C4  31A6  26FD         	fcall	_setProductData
 16316                           
 16317                           ;RF_Control_B1.c: 501: } else {
 16318  15C6  0008               	return
 16319  15C7                     l7111:	
 16320                           
 16321                           ;RF_Control_B1.c: 502: setProductData(9, 0x00);
 16322  15C7  0020               	movlb	0	; select bank0
 16323  15C8  01E2               	clrf	setProductData@value
 16324  15C9  3009               	movlw	9
 16325  15CA  31A6  26FD  3195   	fcall	_setProductData
 16326                           
 16327                           ;RF_Control_B1.c: 503: setProductData(15, (product->Data[15]&(~status)));
 16328  15CD  0021               	movlb	1	; select bank1
 16329  15CE  086D               	movf	_product^(0+128),w
 16330  15CF  3E0F               	addlw	15
 16331  15D0  0086               	movwf	6
 16332  15D1  3002               	movlw	2	; select bank4/5
 16333  15D2  0087               	movwf	7
 16334  15D3  0020               	movlb	0	; select bank0
 16335  15D4  0968               	comf	setRF_DimmerLights@status,w
 16336  15D5  0501               	andwf	1,w
 16337  15D6  00E6               	movwf	??_setRF_DimmerLights
 16338  15D7  0866               	movf	??_setRF_DimmerLights,w
 16339  15D8  00E2               	movwf	setProductData@value
 16340  15D9  300F               	movlw	15
 16341  15DA  31A6  26FD         	fcall	_setProductData
 16342  15DC  0008               	return
 16343  15DD                     __end_of_setRF_DimmerLights:	
 16344                           
 16345                           	psect	text106
 16346  1B0E                     __ptext106:	
 16347 ;; *************** function _setDimmerLights_Line *****************
 16348 ;; Defined at:
 16349 ;;		line 1151 in file "../src/Dimmer_B1.c"
 16350 ;; Parameters:    Size  Location     Type
 16351 ;;  lights          1    wreg     unsigned char 
 16352 ;; Auto vars:     Size  Location     Type
 16353 ;;  lights          1    0[BANK0 ] unsigned char 
 16354 ;; Return value:  Size  Location     Type
 16355 ;;		None               void
 16356 ;; Registers used:
 16357 ;;		wreg
 16358 ;; Tracked objects:
 16359 ;;		On entry : 0/0
 16360 ;;		On exit  : 0/0
 16361 ;;		Unchanged: 0/0
 16362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16366 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16367 ;;Total ram usage:        1 bytes
 16368 ;; Hardware stack levels used:    1
 16369 ;; Hardware stack levels required when called:    5
 16370 ;; This function calls:
 16371 ;;		Nothing
 16372 ;; This function is called by:
 16373 ;;		_setDimmerLights_OnOff
 16374 ;;		_setDimmerLights_Dimming
 16375 ;; This function uses a non-reentrant model
 16376 ;;
 16377                           
 16378                           
 16379                           ;psect for function _setDimmerLights_Line
 16380  1B0E                     _setDimmerLights_Line:	
 16381                           
 16382                           ;incstack = 0
 16383                           ; Regs used in _setDimmerLights_Line: [wreg]
 16384                           ;setDimmerLights_Line@lights stored from wreg
 16385  1B0E  0020               	movlb	0	; select bank0
 16386  1B0F  00A0               	movwf	setDimmerLights_Line@lights
 16387                           
 16388                           ;Dimmer_B1.c: 1152: Dimmer.LoadGO = 1;
 16389  1B10  0022               	movlb	2	; select bank2
 16390  1B11  14AC               	bsf	_Dimmer^(0+256),1
 16391                           
 16392                           ;Dimmer_B1.c: 1154: DimmerLights1.Line = 0;
 16393  1B12  0023               	movlb	3	; select bank3
 16394  1B13  10BF               	bcf	(_DimmerLights1^(0+384)+1),1
 16395                           
 16396                           ;Dimmer_B1.c: 1155: if (lights == 1 && lights != 0) {
 16397  1B14  0020               	movlb	0	; select bank0
 16398  1B15  0820               	movf	setDimmerLights_Line@lights,w
 16399  1B16  3A01               	xorlw	1
 16400  1B17  1D03               	skipz
 16401  1B18  2B1E               	goto	l945
 16402  1B19  0820               	movf	setDimmerLights_Line@lights,w
 16403  1B1A  1903               	btfsc	3,2
 16404  1B1B  2B1E               	goto	l945
 16405                           
 16406                           ;Dimmer_B1.c: 1156: DimmerLights1.Line = 1;
 16407  1B1C  0023               	movlb	3	; select bank3
 16408  1B1D  14BF               	bsf	(_DimmerLights1^(0+384)+1),1
 16409  1B1E                     l945:	
 16410                           
 16411                           ;Dimmer_B1.c: 1157: }
 16412                           ;Dimmer_B1.c: 1160: DimmerLights2.Line = 0;
 16413  1B1E  0023               	movlb	3	; select bank3
 16414  1B1F  10C8               	bcf	(_DimmerLights2^(0+384)+1),1
 16415                           
 16416                           ;Dimmer_B1.c: 1161: if (lights == 2 && lights != 0) {
 16417  1B20  0020               	movlb	0	; select bank0
 16418  1B21  0820               	movf	setDimmerLights_Line@lights,w
 16419  1B22  3A02               	xorlw	2
 16420  1B23  1D03               	skipz
 16421  1B24  0008               	return
 16422  1B25  0820               	movf	setDimmerLights_Line@lights,w
 16423  1B26  1903               	btfsc	3,2
 16424  1B27  0008               	return
 16425                           
 16426                           ;Dimmer_B1.c: 1162: DimmerLights2.Line = 1;
 16427  1B28  0023               	movlb	3	; select bank3
 16428  1B29  14C8               	bsf	(_DimmerLights2^(0+384)+1),1
 16429  1B2A  0020               	movlb	0	; select bank0
 16430  1B2B  0008               	return
 16431  1B2C                     __end_of_setDimmerLights_Line:	
 16432                           
 16433                           	psect	text107
 16434  1D50                     __ptext107:	
 16435 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16436 ;; Defined at:
 16437 ;;		line 221 in file "../src/Dimmer_B1.c"
 16438 ;; Parameters:    Size  Location     Type
 16439 ;;  lights          1    wreg     unsigned char 
 16440 ;;  command         1    0[BANK0 ] unsigned char 
 16441 ;; Auto vars:     Size  Location     Type
 16442 ;;  lights          1    2[BANK0 ] unsigned char 
 16443 ;; Return value:  Size  Location     Type
 16444 ;;		None               void
 16445 ;; Registers used:
 16446 ;;		wreg, status,2, status,0
 16447 ;; Tracked objects:
 16448 ;;		On entry : 0/0
 16449 ;;		On exit  : 0/0
 16450 ;;		Unchanged: 0/0
 16451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16452 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;Total ram usage:        3 bytes
 16457 ;; Hardware stack levels used:    1
 16458 ;; Hardware stack levels required when called:    5
 16459 ;; This function calls:
 16460 ;;		Nothing
 16461 ;; This function is called by:
 16462 ;;		_setDimmerLights_Dimming
 16463 ;;		_setDimmerLights_DimmingClose
 16464 ;; This function uses a non-reentrant model
 16465 ;;
 16466                           
 16467                           
 16468                           ;psect for function _setDimmerIntr_Dimming_Sw
 16469  1D50                     _setDimmerIntr_Dimming_Sw:	
 16470                           
 16471                           ;incstack = 0
 16472                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16473                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16474  1D50  0020               	movlb	0	; select bank0
 16475  1D51  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16476                           
 16477                           ;Dimmer_B1.c: 223: if (lights == 1) {
 16478  1D52  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16479  1D53  3A01               	xorlw	1
 16480  1D54  1D03               	skipz
 16481  1D55  2D66               	goto	l7233
 16482                           
 16483                           ;Dimmer_B1.c: 224: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16484  1D56  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16485  1D57  3A01               	xorlw	1
 16486  1D58  3000               	movlw	0
 16487  1D59  1903               	skipnz
 16488  1D5A  3001               	movlw	1
 16489  1D5B  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16490  1D5C  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16491  1D5D  0021               	movlb	1	; select bank1
 16492  1D5E  083C               	movf	_DimmerIntr1^(0+128),w
 16493  1D5F  0020               	movlb	0	; select bank0
 16494  1D60  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16495  1D61  39EF               	andlw	-17
 16496  1D62  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16497  1D63  0021               	movlb	1	; select bank1
 16498  1D64  00BC               	movwf	_DimmerIntr1^(0+128)
 16499                           
 16500                           ;Dimmer_B1.c: 225: }
 16501  1D65  0008               	return
 16502  1D66                     l7233:	
 16503                           
 16504                           ;Dimmer_B1.c: 228: else if (lights == 2) {
 16505  1D66  0020               	movlb	0	; select bank0
 16506  1D67  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16507  1D68  3A02               	xorlw	2
 16508  1D69  1D03               	skipz
 16509  1D6A  0008               	return
 16510                           
 16511                           ;Dimmer_B1.c: 229: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16512  1D6B  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16513  1D6C  3A01               	xorlw	1
 16514  1D6D  3000               	movlw	0
 16515  1D6E  1903               	skipnz
 16516  1D6F  3001               	movlw	1
 16517  1D70  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16518  1D71  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16519  1D72  0021               	movlb	1	; select bank1
 16520  1D73  0848               	movf	_DimmerIntr2^(0+128),w
 16521  1D74  0020               	movlb	0	; select bank0
 16522  1D75  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16523  1D76  39EF               	andlw	-17
 16524  1D77  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16525  1D78  0021               	movlb	1	; select bank1
 16526  1D79  00C8               	movwf	_DimmerIntr2^(0+128)
 16527  1D7A  0008               	return
 16528  1D7B                     __end_of_setDimmerIntr_Dimming_Sw:	
 16529                           
 16530                           	psect	text108
 16531  1995                     __ptext108:	
 16532 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16533 ;; Defined at:
 16534 ;;		line 125 in file "../src/Dimmer_B1.c"
 16535 ;; Parameters:    Size  Location     Type
 16536 ;;  lights          1    wreg     unsigned char 
 16537 ;; Auto vars:     Size  Location     Type
 16538 ;;  lights          1    2[BANK0 ] unsigned char 
 16539 ;;  value           1    1[BANK0 ] unsigned char 
 16540 ;; Return value:  Size  Location     Type
 16541 ;;                  1    wreg      unsigned char 
 16542 ;; Registers used:
 16543 ;;		wreg, status,2
 16544 ;; Tracked objects:
 16545 ;;		On entry : 0/0
 16546 ;;		On exit  : 0/0
 16547 ;;		Unchanged: 0/0
 16548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16552 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;Total ram usage:        3 bytes
 16554 ;; Hardware stack levels used:    1
 16555 ;; Hardware stack levels required when called:    5
 16556 ;; This function calls:
 16557 ;;		Nothing
 16558 ;; This function is called by:
 16559 ;;		_setDimmerLights_Dimming
 16560 ;; This function uses a non-reentrant model
 16561 ;;
 16562                           
 16563                           
 16564                           ;psect for function _getDimmerIntr_DimmingValue
 16565  1995                     _getDimmerIntr_DimmingValue:	
 16566                           
 16567                           ;incstack = 0
 16568                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16569                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16570  1995  0020               	movlb	0	; select bank0
 16571  1996  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 16572                           
 16573                           ;Dimmer_B1.c: 126: char value = 0;
 16574  1997  01A1               	clrf	getDimmerIntr_DimmingValue@value
 16575                           
 16576                           ;Dimmer_B1.c: 128: if (lights == 1) {
 16577  1998  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16578  1999  3A01               	xorlw	1
 16579  199A  1D03               	skipz
 16580  199B  299F               	goto	l7465
 16581                           
 16582                           ;Dimmer_B1.c: 129: value = DimmerIntr1.DimmingValue;
 16583  199C  0021               	movlb	1	; select bank1
 16584  199D  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16585  199E  29A5               	goto	L11
 16586  199F                     l7465:	
 16587                           ;Dimmer_B1.c: 130: }
 16588                           
 16589                           
 16590                           ;Dimmer_B1.c: 133: else if (lights == 2) {
 16591  199F  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16592  19A0  3A02               	xorlw	2
 16593  19A1  1D03               	skipz
 16594  19A2  29A9               	goto	l769
 16595                           
 16596                           ;Dimmer_B1.c: 134: value = DimmerIntr2.DimmingValue;
 16597  19A3  0021               	movlb	1	; select bank1
 16598  19A4  084D               	movf	(_DimmerIntr2^(0+128)+5),w
 16599  19A5                     L11:	
 16600  19A5  0020               	movlb	0	; select bank0
 16601  19A6  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16602  19A7  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16603  19A8  00A1               	movwf	getDimmerIntr_DimmingValue@value
 16604  19A9                     l769:	
 16605                           
 16606                           ;Dimmer_B1.c: 135: }
 16607                           ;Dimmer_B1.c: 142: return value;
 16608  19A9  0821               	movf	getDimmerIntr_DimmingValue@value,w
 16609  19AA  0008               	return
 16610  19AB                     __end_of_getDimmerIntr_DimmingValue:	
 16611                           
 16612                           	psect	text109
 16613  1057                     __ptext109:	
 16614 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16615 ;; Defined at:
 16616 ;;		line 1112 in file "../src/Dimmer_B1.c"
 16617 ;; Parameters:    Size  Location     Type
 16618 ;;  lights          1    wreg     unsigned char 
 16619 ;; Auto vars:     Size  Location     Type
 16620 ;;  lights          1    5[BANK0 ] unsigned char 
 16621 ;;  allow           1    6[BANK0 ] unsigned char 
 16622 ;; Return value:  Size  Location     Type
 16623 ;;                  1    wreg      unsigned char 
 16624 ;; Registers used:
 16625 ;;		wreg, status,2, status,0, pclath, cstack
 16626 ;; Tracked objects:
 16627 ;;		On entry : 0/0
 16628 ;;		On exit  : 0/0
 16629 ;;		Unchanged: 0/0
 16630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16632 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16634 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;Total ram usage:        6 bytes
 16636 ;; Hardware stack levels used:    1
 16637 ;; Hardware stack levels required when called:    6
 16638 ;; This function calls:
 16639 ;;		_getLoad_OK
 16640 ;; This function is called by:
 16641 ;;		_setDimmerLights_Main
 16642 ;; This function uses a non-reentrant model
 16643 ;;
 16644                           
 16645                           
 16646                           ;psect for function _getDimmerLights_Allow_Condition
 16647  1057                     _getDimmerLights_Allow_Condition:	
 16648                           
 16649                           ;incstack = 0
 16650                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16651                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16652  1057  0020               	movlb	0	; select bank0
 16653  1058  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 16654                           
 16655                           ;Dimmer_B1.c: 1113: char allow = 0;
 16656  1059  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 16657                           
 16658                           ;Dimmer_B1.c: 1119: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16659  105A  01A2               	clrf	_getDimmerLights_Allow_Condition$2532
 16660  105B  0AA2               	incf	_getDimmerLights_Allow_Condition$2532,f
 16661  105C  31A6  268B  3190   	fcall	_getLoad_OK
 16662  105F  3800               	iorlw	0
 16663  1060  1D03               	skipz
 16664  1061  2867               	goto	l7817
 16665  1062  0022               	movlb	2	; select bank2
 16666  1063  18AC               	btfsc	_Dimmer^(0+256),1
 16667  1064  2867               	goto	l7817
 16668  1065  0020               	movlb	0	; select bank0
 16669  1066  01A2               	clrf	_getDimmerLights_Allow_Condition$2532
 16670  1067                     l7817:	
 16671  1067  0020               	movlb	0	; select bank0
 16672  1068  0822               	movf	_getDimmerLights_Allow_Condition$2532,w
 16673  1069  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16674  106A  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16675  106B  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16676                           
 16677                           ;Dimmer_B1.c: 1123: if (allow == 0) {
 16678  106C  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 16679  106D  1D03               	skipz
 16680  106E  2893               	goto	l7841
 16681                           
 16682                           ;Dimmer_B1.c: 1124: if (lights == 1) {
 16683  106F  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16684  1070  3A01               	xorlw	1
 16685  1071  1D03               	skipz
 16686  1072  2880               	goto	l7831
 16687                           
 16688                           ;Dimmer_B1.c: 1125: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16689  1073  01A3               	clrf	_getDimmerLights_Allow_Condition$2533
 16690  1074  0AA3               	incf	_getDimmerLights_Allow_Condition$2533,f
 16691  1075  0023               	movlb	3	; select bank3
 16692  1076  1A47               	btfsc	_DimmerLights2^(0+384),4
 16693  1077  287D               	goto	l7829
 16694  1078  0021               	movlb	1	; select bank1
 16695  1079  1A48               	btfsc	_DimmerIntr2^(0+128),4
 16696  107A  287D               	goto	l7829
 16697  107B  0020               	movlb	0	; select bank0
 16698  107C  01A3               	clrf	_getDimmerLights_Allow_Condition$2533
 16699  107D                     l7829:	
 16700  107D  0020               	movlb	0	; select bank0
 16701  107E  0823               	movf	_getDimmerLights_Allow_Condition$2533,w
 16702  107F  2890               	goto	L12
 16703  1080                     l7831:	
 16704                           ;Dimmer_B1.c: 1126: } else if (lights == 2) {
 16705                           
 16706  1080  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16707  1081  3A02               	xorlw	2
 16708  1082  1D03               	skipz
 16709  1083  2893               	goto	l7841
 16710                           
 16711                           ;Dimmer_B1.c: 1127: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16712  1084  01A4               	clrf	_getDimmerLights_Allow_Condition$2534
 16713  1085  0AA4               	incf	_getDimmerLights_Allow_Condition$2534,f
 16714  1086  0023               	movlb	3	; select bank3
 16715  1087  1A3E               	btfsc	_DimmerLights1^(0+384),4
 16716  1088  288E               	goto	l7839
 16717  1089  0021               	movlb	1	; select bank1
 16718  108A  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 16719  108B  288E               	goto	l7839
 16720  108C  0020               	movlb	0	; select bank0
 16721  108D  01A4               	clrf	_getDimmerLights_Allow_Condition$2534
 16722  108E                     l7839:	
 16723  108E  0020               	movlb	0	; select bank0
 16724  108F  0824               	movf	_getDimmerLights_Allow_Condition$2534,w
 16725  1090                     L12:	
 16726  1090  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16727  1091  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16728  1092  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16729  1093                     l7841:	
 16730                           
 16731                           ;Dimmer_B1.c: 1128: }
 16732                           ;Dimmer_B1.c: 1129: }
 16733                           ;Dimmer_B1.c: 1146: return allow;
 16734  1093  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 16735  1094  0008               	return
 16736  1095                     __end_of_getDimmerLights_Allow_Condition:	
 16737                           
 16738                           	psect	text110
 16739  268B                     __ptext110:	
 16740 ;; *************** function _getLoad_OK *****************
 16741 ;; Defined at:
 16742 ;;		line 274 in file "../src/OverLoad_B1.c"
 16743 ;; Parameters:    Size  Location     Type
 16744 ;;		None
 16745 ;; Auto vars:     Size  Location     Type
 16746 ;;  ok              1    0[BANK0 ] unsigned char 
 16747 ;; Return value:  Size  Location     Type
 16748 ;;                  1    wreg      unsigned char 
 16749 ;; Registers used:
 16750 ;;		wreg, status,2
 16751 ;; Tracked objects:
 16752 ;;		On entry : 0/0
 16753 ;;		On exit  : 0/0
 16754 ;;		Unchanged: 0/0
 16755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;Total ram usage:        1 bytes
 16761 ;; Hardware stack levels used:    1
 16762 ;; Hardware stack levels required when called:    5
 16763 ;; This function calls:
 16764 ;;		Nothing
 16765 ;; This function is called by:
 16766 ;;		_DimmerLights_Main
 16767 ;;		_getDimmerLights_Allow_Condition
 16768 ;; This function uses a non-reentrant model
 16769 ;;
 16770                           
 16771                           
 16772                           ;psect for function _getLoad_OK
 16773  268B                     _getLoad_OK:	
 16774                           
 16775                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16776                           
 16777                           ;incstack = 0
 16778                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16779  268B  3000               	movlw	0
 16780  268C  0022               	movlb	2	; select bank2
 16781  268D  1BB8               	btfsc	_Load^(0+256),7
 16782  268E  3001               	movlw	1
 16783  268F  0020               	movlb	0	; select bank0
 16784  2690  00A0               	movwf	getLoad_OK@ok
 16785                           
 16786                           ;OverLoad_B1.c: 276: return ok;
 16787  2691  0820               	movf	getLoad_OK@ok,w
 16788  2692  0008               	return
 16789  2693                     __end_of_getLoad_OK:	
 16790                           
 16791                           	psect	text111
 16792  1E38                     __ptext111:	
 16793 ;; *************** function _getMain_All_Error_Status *****************
 16794 ;; Defined at:
 16795 ;;		line 424 in file "../src/main_B1.c"
 16796 ;; Parameters:    Size  Location     Type
 16797 ;;  command         1    wreg     unsigned char 
 16798 ;; Auto vars:     Size  Location     Type
 16799 ;;  command         1    5[BANK0 ] unsigned char 
 16800 ;;  status          1    6[BANK0 ] unsigned char 
 16801 ;; Return value:  Size  Location     Type
 16802 ;;                  1    wreg      unsigned char 
 16803 ;; Registers used:
 16804 ;;		wreg, status,2, status,0
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;Total ram usage:        7 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:    5
 16817 ;; This function calls:
 16818 ;;		Nothing
 16819 ;; This function is called by:
 16820 ;;		_DimmerLights_Main
 16821 ;;		_Load_Main
 16822 ;;		_setTemp_Main
 16823 ;;		_getRxData
 16824 ;;		_setSw_Main
 16825 ;;		_Exception_Main
 16826 ;; This function uses a non-reentrant model
 16827 ;;
 16828                           
 16829                           
 16830                           ;psect for function _getMain_All_Error_Status
 16831  1E38                     _getMain_All_Error_Status:	
 16832                           
 16833                           ;incstack = 0
 16834                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16835                           ;getMain_All_Error_Status@command stored from wreg
 16836  1E38  0020               	movlb	0	; select bank0
 16837  1E39  00A5               	movwf	getMain_All_Error_Status@command
 16838                           
 16839                           ;main_B1.c: 425: char status = 0;
 16840  1E3A  01A6               	clrf	getMain_All_Error_Status@status
 16841                           
 16842                           ;main_B1.c: 436: if (status == 0 && command != 2) {
 16843  1E3B  08A6               	movf	getMain_All_Error_Status@status,f
 16844  1E3C  1D03               	skipz
 16845  1E3D  2E52               	goto	l7489
 16846  1E3E  0825               	movf	getMain_All_Error_Status@command,w
 16847  1E3F  3A02               	xorlw	2
 16848  1E40  1903               	skipnz
 16849  1E41  2E52               	goto	l7489
 16850                           
 16851                           ;main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16852  1E42  0022               	movlb	2	; select bank2
 16853  1E43  18E0               	btfsc	_Temp^(0+256),1
 16854  1E44  2E49               	goto	l7487
 16855  1E45  0020               	movlb	0	; select bank0
 16856  1E46  01A1               	clrf	_getMain_All_Error_Status$7181
 16857  1E47  01A2               	clrf	_getMain_All_Error_Status$7181+1
 16858  1E48  2E4E               	goto	l2953
 16859  1E49                     l7487:	
 16860  1E49  3002               	movlw	2
 16861  1E4A  0020               	movlb	0	; select bank0
 16862  1E4B  00A1               	movwf	_getMain_All_Error_Status$7181
 16863  1E4C  3000               	movlw	0
 16864  1E4D  00A2               	movwf	_getMain_All_Error_Status$7181+1
 16865  1E4E                     l2953:	
 16866  1E4E  0821               	movf	_getMain_All_Error_Status$7181,w
 16867  1E4F  00A0               	movwf	??_getMain_All_Error_Status
 16868  1E50  0820               	movf	??_getMain_All_Error_Status,w
 16869  1E51  00A6               	movwf	getMain_All_Error_Status@status
 16870  1E52                     l7489:	
 16871                           
 16872                           ;main_B1.c: 438: }
 16873                           ;main_B1.c: 443: if (status == 0 && command != 3) {
 16874  1E52  08A6               	movf	getMain_All_Error_Status@status,f
 16875  1E53  1D03               	skipz
 16876  1E54  2E69               	goto	l2954
 16877  1E55  0825               	movf	getMain_All_Error_Status@command,w
 16878  1E56  3A03               	xorlw	3
 16879  1E57  1903               	skipnz
 16880  1E58  2E69               	goto	l2954
 16881                           
 16882                           ;main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16883  1E59  0022               	movlb	2	; select bank2
 16884  1E5A  1AB8               	btfsc	_Load^(0+256),5
 16885  1E5B  2E60               	goto	l7497
 16886  1E5C  0020               	movlb	0	; select bank0
 16887  1E5D  01A3               	clrf	_getMain_All_Error_Status$7182
 16888  1E5E  01A4               	clrf	_getMain_All_Error_Status$7182+1
 16889  1E5F  2E65               	goto	l2958
 16890  1E60                     l7497:	
 16891  1E60  3003               	movlw	3
 16892  1E61  0020               	movlb	0	; select bank0
 16893  1E62  00A3               	movwf	_getMain_All_Error_Status$7182
 16894  1E63  3000               	movlw	0
 16895  1E64  00A4               	movwf	_getMain_All_Error_Status$7182+1
 16896  1E65                     l2958:	
 16897  1E65  0823               	movf	_getMain_All_Error_Status$7182,w
 16898  1E66  00A0               	movwf	??_getMain_All_Error_Status
 16899  1E67  0820               	movf	??_getMain_All_Error_Status,w
 16900  1E68  00A6               	movwf	getMain_All_Error_Status@status
 16901  1E69                     l2954:	
 16902                           
 16903                           ;main_B1.c: 445: }
 16904                           ;main_B1.c: 455: return status;
 16905  1E69  0826               	movf	getMain_All_Error_Status@status,w
 16906  1E6A  0008               	return
 16907  1E6B                     __end_of_getMain_All_Error_Status:	
 16908                           
 16909                           	psect	text112
 16910  12E0                     __ptext112:	
 16911 ;; *************** function _DimmerLights_TwoPhase_Main *****************
 16912 ;; Defined at:
 16913 ;;		line 917 in file "../src/Dimmer_B1.c"
 16914 ;; Parameters:    Size  Location     Type
 16915 ;;  lights          1    wreg     unsigned char 
 16916 ;; Auto vars:     Size  Location     Type
 16917 ;;  lights          1   73[BANK0 ] unsigned char 
 16918 ;; Return value:  Size  Location     Type
 16919 ;;		None               void
 16920 ;; Registers used:
 16921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16922 ;; Tracked objects:
 16923 ;;		On entry : 0/0
 16924 ;;		On exit  : 0/0
 16925 ;;		Unchanged: 0/0
 16926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16928 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;Total ram usage:        1 bytes
 16932 ;; Hardware stack levels used:    1
 16933 ;; Hardware stack levels required when called:    9
 16934 ;; This function calls:
 16935 ;;		_DimmerLights_AssignationDimming
 16936 ;;		_DimmerLights_SelectPointer
 16937 ;; This function is called by:
 16938 ;;		_DimmerLights_Main
 16939 ;; This function uses a non-reentrant model
 16940 ;;
 16941                           
 16942                           
 16943                           ;psect for function _DimmerLights_TwoPhase_Main
 16944  12E0                     _DimmerLights_TwoPhase_Main:	
 16945                           
 16946                           ;incstack = 0
 16947                           ; Regs used in _DimmerLights_TwoPhase_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16948                           ;DimmerLights_TwoPhase_Main@lights stored from wreg
 16949  12E0  0020               	movlb	0	; select bank0
 16950  12E1  00E9               	movwf	DimmerLights_TwoPhase_Main@lights
 16951                           
 16952                           ;Dimmer_B1.c: 919: DimmerLights_SelectPointer(lights);
 16953  12E2  0869               	movf	DimmerLights_TwoPhase_Main@lights,w
 16954  12E3  3199  21C2  3192   	fcall	_DimmerLights_SelectPointer
 16955                           
 16956                           ;Dimmer_B1.c: 920: if (DimmerLights->Phase == 1) {
 16957  12E6  0021               	movlb	1	; select bank1
 16958  12E7  085A               	movf	_DimmerLights^(0+128),w
 16959  12E8  3E02               	addlw	2
 16960  12E9  0086               	movwf	6
 16961  12EA  3001               	movlw	1	; select bank2/3
 16962  12EB  0087               	movwf	7
 16963  12EC  1C01               	btfss	1,0
 16964  12ED  0008               	return
 16965                           
 16966                           ;Dimmer_B1.c: 921: if (DimmerLights->PhaseFirst == 0) {
 16967  12EE  085A               	movf	_DimmerLights^(0+128),w
 16968  12EF  3E02               	addlw	2
 16969  12F0  0086               	movwf	6
 16970  12F1  3001               	movlw	1	; select bank2/3
 16971  12F2  0087               	movwf	7
 16972  12F3  1881               	btfsc	1,1
 16973  12F4  2B1E               	goto	l8365
 16974                           
 16975                           ;Dimmer_B1.c: 923: if (DimmerLights->PhaseSwitch == 1) {
 16976  12F5  085A               	movf	_DimmerLights^(0+128),w
 16977  12F6  3E02               	addlw	2
 16978  12F7  0086               	movwf	6
 16979  12F8  3001               	movlw	1	; select bank2/3
 16980  12F9  0087               	movwf	7
 16981  12FA  1D01               	btfss	1,2
 16982  12FB  2B0D               	goto	l8363
 16983                           
 16984                           ;Dimmer_B1.c: 924: DimmerLights->PhaseFirst = 1;
 16985  12FC  085A               	movf	_DimmerLights^(0+128),w
 16986  12FD  3E02               	addlw	2
 16987  12FE  0086               	movwf	6
 16988  12FF  3001               	movlw	1	; select bank2/3
 16989  1300  0087               	movwf	7
 16990  1301  1481               	bsf	1,1
 16991                           
 16992                           ;Dimmer_B1.c: 925: DimmerLights->Trigger = 1;
 16993  1302  085A               	movf	_DimmerLights^(0+128),w
 16994  1303  0086               	movwf	6
 16995  1304  3001               	movlw	1	; select bank2/3
 16996  1305  0087               	movwf	7
 16997  1306  1481               	bsf	1,1
 16998                           
 16999                           ;Dimmer_B1.c: 926: DimmerLights->Switch = 1;
 17000  1307  085A               	movf	_DimmerLights^(0+128),w
 17001  1308  0086               	movwf	6
 17002  1309  3001               	movlw	1	; select bank2/3
 17003  130A  0087               	movwf	7
 17004  130B  1501               	bsf	1,2
 17005                           
 17006                           ;Dimmer_B1.c: 927: } else {
 17007  130C  0008               	return
 17008  130D                     l8363:	
 17009                           
 17010                           ;Dimmer_B1.c: 928: DimmerLights->Phase = 0;
 17011  130D  085A               	movf	_DimmerLights^(0+128),w
 17012  130E  3E02               	addlw	2
 17013  130F  0086               	movwf	6
 17014  1310  3001               	movlw	1	; select bank2/3
 17015  1311  0087               	movwf	7
 17016  1312  1001               	bcf	1,0
 17017                           
 17018                           ;Dimmer_B1.c: 929: DimmerLights->Trigger = 1;
 17019  1313  085A               	movf	_DimmerLights^(0+128),w
 17020  1314  0086               	movwf	6
 17021  1315  3001               	movlw	1	; select bank2/3
 17022  1316  0087               	movwf	7
 17023  1317  1481               	bsf	1,1
 17024                           
 17025                           ;Dimmer_B1.c: 930: DimmerLights->Switch = 0;
 17026  1318  085A               	movf	_DimmerLights^(0+128),w
 17027  1319  0086               	movwf	6
 17028  131A  3001               	movlw	1	; select bank2/3
 17029  131B  0087               	movwf	7
 17030  131C  1101               	bcf	1,2
 17031                           
 17032                           ;Dimmer_B1.c: 931: }
 17033                           ;Dimmer_B1.c: 932: } else {
 17034  131D  0008               	return
 17035  131E                     l8365:	
 17036                           
 17037                           ;Dimmer_B1.c: 933: if (DimmerLights->Trigger == 0) {
 17038  131E  085A               	movf	_DimmerLights^(0+128),w
 17039  131F  0086               	movwf	6
 17040  1320  3001               	movlw	1	; select bank2/3
 17041  1321  0087               	movwf	7
 17042  1322  1881               	btfsc	1,1
 17043  1323  0008               	return
 17044                           
 17045                           ;Dimmer_B1.c: 934: DimmerLights->PhaseFirst = 0;
 17046  1324  085A               	movf	_DimmerLights^(0+128),w
 17047  1325  3E02               	addlw	2
 17048  1326  0086               	movwf	6
 17049  1327  3001               	movlw	1	; select bank2/3
 17050  1328  0087               	movwf	7
 17051  1329  1081               	bcf	1,1
 17052                           
 17053                           ;Dimmer_B1.c: 935: DimmerLights->Phase = 0;
 17054  132A  085A               	movf	_DimmerLights^(0+128),w
 17055  132B  3E02               	addlw	2
 17056  132C  0086               	movwf	6
 17057  132D  3001               	movlw	1	; select bank2/3
 17058  132E  0087               	movwf	7
 17059  132F  1001               	bcf	1,0
 17060                           
 17061                           ;Dimmer_B1.c: 936: DimmerLights_AssignationDimming(lights);
 17062  1330  0020               	movlb	0	; select bank0
 17063  1331  0869               	movf	DimmerLights_TwoPhase_Main@lights,w
 17064  1332  3187  27CF         	fcall	_DimmerLights_AssignationDimming
 17065  1334  0008               	return
 17066  1335                     __end_of_DimmerLights_TwoPhase_Main:	
 17067                           
 17068                           	psect	text113
 17069  07CF                     __ptext113:	
 17070 ;; *************** function _DimmerLights_AssignationDimming *****************
 17071 ;; Defined at:
 17072 ;;		line 943 in file "../src/Dimmer_B1.c"
 17073 ;; Parameters:    Size  Location     Type
 17074 ;;  sw              1    wreg     unsigned char 
 17075 ;; Auto vars:     Size  Location     Type
 17076 ;;  sw              1   72[BANK0 ] unsigned char 
 17077 ;;  status          1   71[BANK0 ] unsigned char 
 17078 ;; Return value:  Size  Location     Type
 17079 ;;		None               void
 17080 ;; Registers used:
 17081 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17082 ;; Tracked objects:
 17083 ;;		On entry : 0/0
 17084 ;;		On exit  : 0/0
 17085 ;;		Unchanged: 0/0
 17086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;Total ram usage:        4 bytes
 17092 ;; Hardware stack levels used:    1
 17093 ;; Hardware stack levels required when called:    8
 17094 ;; This function calls:
 17095 ;;		_getDimmerLights_PercentToValue
 17096 ;;		_getDimmerLights_Status
 17097 ;;		_setDimmerIntr_Dimming_RF
 17098 ;;		_setDimmerIntr_MaxmumValue
 17099 ;;		_setMemory_Modify
 17100 ;; This function is called by:
 17101 ;;		_DimmerLights_TwoPhase_Main
 17102 ;; This function uses a non-reentrant model
 17103 ;;
 17104                           
 17105                           
 17106                           ;psect for function _DimmerLights_AssignationDimming
 17107  07CF                     _DimmerLights_AssignationDimming:	
 17108                           
 17109                           ;incstack = 0
 17110                           ; Regs used in _DimmerLights_AssignationDimming: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 17111                           ;DimmerLights_AssignationDimming@sw stored from wreg
 17112  07CF  0020               	movlb	0	; select bank0
 17113  07D0  00E8               	movwf	DimmerLights_AssignationDimming@sw
 17114                           
 17115                           ;Dimmer_B1.c: 944: char status = 0;
 17116  07D1  01E7               	clrf	DimmerLights_AssignationDimming@status
 17117                           
 17118                           ;Dimmer_B1.c: 946: status = getDimmerLights_Status(sw);
 17119  07D2  0868               	movf	DimmerLights_AssignationDimming@sw,w
 17120  07D3  31A7  2787  3187   	fcall	_getDimmerLights_Status
 17121  07D6  0020               	movlb	0	; select bank0
 17122  07D7  00E5               	movwf	??_DimmerLights_AssignationDimming
 17123  07D8  0865               	movf	??_DimmerLights_AssignationDimming,w
 17124  07D9  00E7               	movwf	DimmerLights_AssignationDimming@status
 17125                           
 17126                           ;Dimmer_B1.c: 950: setMemory_Modify(1);
 17127  07DA  3001               	movlw	1
 17128  07DB  3198  20BB  3187   	fcall	_setMemory_Modify
 17129                           
 17130                           ;Dimmer_B1.c: 954: if (status == 1) {
 17131  07DE  0020               	movlb	0	; select bank0
 17132  07DF  0867               	movf	DimmerLights_AssignationDimming@status,w
 17133  07E0  3A01               	xorlw	1
 17134  07E1  1D03               	skipz
 17135  07E2  0008               	return
 17136                           
 17137                           ;Dimmer_B1.c: 955: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(product-
      +                          >Data[20 + sw]));
 17138  07E3  0868               	movf	DimmerLights_AssignationDimming@sw,w
 17139  07E4  3E14               	addlw	20
 17140  07E5  0021               	movlb	1	; select bank1
 17141  07E6  076D               	addwf	_product^(0+128),w
 17142  07E7  0020               	movlb	0	; select bank0
 17143  07E8  00E5               	movwf	??_DimmerLights_AssignationDimming
 17144  07E9  0865               	movf	??_DimmerLights_AssignationDimming,w
 17145  07EA  0086               	movwf	6
 17146  07EB  3002               	movlw	2	; select bank4/5
 17147  07EC  0087               	movwf	7
 17148  07ED  0801               	movf	1,w
 17149  07EE  3194  24AE  3187   	fcall	_getDimmerLights_PercentToValue
 17150  07F1  0020               	movlb	0	; select bank0
 17151  07F2  00E6               	movwf	??_DimmerLights_AssignationDimming+1
 17152  07F3  0866               	movf	??_DimmerLights_AssignationDimming+1,w
 17153  07F4  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 17154  07F5  0868               	movf	DimmerLights_AssignationDimming@sw,w
 17155  07F6  3199  21D9  3187   	fcall	_setDimmerIntr_MaxmumValue
 17156                           
 17157                           ;Dimmer_B1.c: 956: setDimmerIntr_Dimming_RF(sw, 1);
 17158  07F9  0020               	movlb	0	; select bank0
 17159  07FA  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 17160  07FB  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 17161  07FC  0868               	movf	DimmerLights_AssignationDimming@sw,w
 17162  07FD  319D  257B         	fcall	_setDimmerIntr_Dimming_RF
 17163  07FF  0008               	return
 17164  0800                     __end_of_DimmerLights_AssignationDimming:	
 17165                           
 17166                           	psect	text114
 17167  19D9                     __ptext114:	
 17168 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 17169 ;; Defined at:
 17170 ;;		line 145 in file "../src/Dimmer_B1.c"
 17171 ;; Parameters:    Size  Location     Type
 17172 ;;  lights          1    wreg     unsigned char 
 17173 ;;  value           1   66[BANK0 ] unsigned char 
 17174 ;; Auto vars:     Size  Location     Type
 17175 ;;  lights          1   68[BANK0 ] unsigned char 
 17176 ;; Return value:  Size  Location     Type
 17177 ;;		None               void
 17178 ;; Registers used:
 17179 ;;		wreg
 17180 ;; Tracked objects:
 17181 ;;		On entry : 0/0
 17182 ;;		On exit  : 0/0
 17183 ;;		Unchanged: 0/0
 17184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17185 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;Total ram usage:        3 bytes
 17190 ;; Hardware stack levels used:    1
 17191 ;; Hardware stack levels required when called:    5
 17192 ;; This function calls:
 17193 ;;		Nothing
 17194 ;; This function is called by:
 17195 ;;		_DimmerLights_AssignationDimming
 17196 ;;		_setDimmerLights_OnOff
 17197 ;;		_setDimmerLights_Dimming
 17198 ;;		_setRFSW_AdjControl
 17199 ;; This function uses a non-reentrant model
 17200 ;;
 17201                           
 17202                           
 17203                           ;psect for function _setDimmerIntr_MaxmumValue
 17204  19D9                     _setDimmerIntr_MaxmumValue:	
 17205                           
 17206                           ;incstack = 0
 17207                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 17208                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 17209  19D9  0020               	movlb	0	; select bank0
 17210  19DA  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 17211                           
 17212                           ;Dimmer_B1.c: 147: if (lights == 1) {
 17213  19DB  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 17214  19DC  3A01               	xorlw	1
 17215  19DD  1D03               	skipz
 17216  19DE  29E5               	goto	l7087
 17217                           
 17218                           ;Dimmer_B1.c: 148: DimmerIntr1.MaxmumValue = value;
 17219  19DF  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 17220  19E0  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 17221  19E1  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 17222  19E2  0021               	movlb	1	; select bank1
 17223  19E3  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 17224                           
 17225                           ;Dimmer_B1.c: 149: }
 17226  19E4  0008               	return
 17227  19E5                     l7087:	
 17228                           
 17229                           ;Dimmer_B1.c: 152: else if (lights == 2) {
 17230  19E5  0020               	movlb	0	; select bank0
 17231  19E6  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 17232  19E7  3A02               	xorlw	2
 17233  19E8  1D03               	skipz
 17234  19E9  0008               	return
 17235                           
 17236                           ;Dimmer_B1.c: 153: DimmerIntr2.MaxmumValue = value;
 17237  19EA  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 17238  19EB  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 17239  19EC  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 17240  19ED  0021               	movlb	1	; select bank1
 17241  19EE  00CE               	movwf	(_DimmerIntr2^(0+128)+6)
 17242  19EF  0008               	return
 17243  19F0                     __end_of_setDimmerIntr_MaxmumValue:	
 17244                           
 17245                           	psect	text115
 17246  1D7B                     __ptext115:	
 17247 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 17248 ;; Defined at:
 17249 ;;		line 260 in file "../src/Dimmer_B1.c"
 17250 ;; Parameters:    Size  Location     Type
 17251 ;;  lights          1    wreg     unsigned char 
 17252 ;;  command         1    0[BANK0 ] unsigned char 
 17253 ;; Auto vars:     Size  Location     Type
 17254 ;;  lights          1    2[BANK0 ] unsigned char 
 17255 ;; Return value:  Size  Location     Type
 17256 ;;		None               void
 17257 ;; Registers used:
 17258 ;;		wreg, status,2, status,0
 17259 ;; Tracked objects:
 17260 ;;		On entry : 0/0
 17261 ;;		On exit  : 0/0
 17262 ;;		Unchanged: 0/0
 17263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17264 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17267 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;Total ram usage:        3 bytes
 17269 ;; Hardware stack levels used:    1
 17270 ;; Hardware stack levels required when called:    5
 17271 ;; This function calls:
 17272 ;;		Nothing
 17273 ;; This function is called by:
 17274 ;;		_DimmerLights_AssignationDimming
 17275 ;;		_setDimmerLights_OnOff
 17276 ;;		_setRFSW_AdjControl
 17277 ;; This function uses a non-reentrant model
 17278 ;;
 17279                           
 17280                           
 17281                           ;psect for function _setDimmerIntr_Dimming_RF
 17282  1D7B                     _setDimmerIntr_Dimming_RF:	
 17283                           
 17284                           ;incstack = 0
 17285                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 17286                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 17287  1D7B  0020               	movlb	0	; select bank0
 17288  1D7C  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 17289                           
 17290                           ;Dimmer_B1.c: 262: if (lights == 1) {
 17291  1D7D  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 17292  1D7E  3A01               	xorlw	1
 17293  1D7F  1D03               	skipz
 17294  1D80  2D93               	goto	l7095
 17295                           
 17296                           ;Dimmer_B1.c: 263: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 17297  1D81  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 17298  1D82  3A01               	xorlw	1
 17299  1D83  3000               	movlw	0
 17300  1D84  1903               	skipnz
 17301  1D85  3001               	movlw	1
 17302  1D86  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 17303  1D87  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 17304  1D88  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 17305  1D89  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 17306  1D8A  0021               	movlb	1	; select bank1
 17307  1D8B  083C               	movf	_DimmerIntr1^(0+128),w
 17308  1D8C  0020               	movlb	0	; select bank0
 17309  1D8D  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 17310  1D8E  39BF               	andlw	-65
 17311  1D8F  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 17312  1D90  0021               	movlb	1	; select bank1
 17313  1D91  00BC               	movwf	_DimmerIntr1^(0+128)
 17314                           
 17315                           ;Dimmer_B1.c: 264: }
 17316  1D92  0008               	return
 17317  1D93                     l7095:	
 17318                           
 17319                           ;Dimmer_B1.c: 267: else if (lights == 2) {
 17320  1D93  0020               	movlb	0	; select bank0
 17321  1D94  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 17322  1D95  3A02               	xorlw	2
 17323  1D96  1D03               	skipz
 17324  1D97  0008               	return
 17325                           
 17326                           ;Dimmer_B1.c: 268: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 17327  1D98  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 17328  1D99  3A01               	xorlw	1
 17329  1D9A  3000               	movlw	0
 17330  1D9B  1903               	skipnz
 17331  1D9C  3001               	movlw	1
 17332  1D9D  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 17333  1D9E  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 17334  1D9F  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 17335  1DA0  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 17336  1DA1  0021               	movlb	1	; select bank1
 17337  1DA2  0848               	movf	_DimmerIntr2^(0+128),w
 17338  1DA3  0020               	movlb	0	; select bank0
 17339  1DA4  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 17340  1DA5  39BF               	andlw	-65
 17341  1DA6  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 17342  1DA7  0021               	movlb	1	; select bank1
 17343  1DA8  00C8               	movwf	_DimmerIntr2^(0+128)
 17344  1DA9  0008               	return
 17345  1DAA                     __end_of_setDimmerIntr_Dimming_RF:	
 17346                           
 17347                           	psect	text116
 17348  08AA                     __ptext116:	
 17349 ;; *************** function _DimmerLights_DimmingFunction *****************
 17350 ;; Defined at:
 17351 ;;		line 1857 in file "../src/Dimmer_B1.c"
 17352 ;; Parameters:    Size  Location     Type
 17353 ;;  lights          1    wreg     unsigned char 
 17354 ;; Auto vars:     Size  Location     Type
 17355 ;;  lights          1    1[BANK0 ] unsigned char 
 17356 ;; Return value:  Size  Location     Type
 17357 ;;		None               void
 17358 ;; Registers used:
 17359 ;;		wreg, status,2, status,0
 17360 ;; Tracked objects:
 17361 ;;		On entry : 0/0
 17362 ;;		On exit  : 0/0
 17363 ;;		Unchanged: 0/0
 17364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17369 ;;Total ram usage:        2 bytes
 17370 ;; Hardware stack levels used:    1
 17371 ;; Hardware stack levels required when called:    5
 17372 ;; This function calls:
 17373 ;;		Nothing
 17374 ;; This function is called by:
 17375 ;;		_DimmerLights_Main
 17376 ;; This function uses a non-reentrant model
 17377 ;;
 17378                           
 17379                           
 17380                           ;psect for function _DimmerLights_DimmingFunction
 17381  08AA                     _DimmerLights_DimmingFunction:	
 17382                           
 17383                           ;incstack = 0
 17384                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0]
 17385                           ;DimmerLights_DimmingFunction@lights stored from wreg
 17386  08AA  0020               	movlb	0	; select bank0
 17387  08AB  00A1               	movwf	DimmerLights_DimmingFunction@lights
 17388                           
 17389                           ;Dimmer_B1.c: 1859: if (lights == 1) {
 17390  08AC  0821               	movf	DimmerLights_DimmingFunction@lights,w
 17391  08AD  3A01               	xorlw	1
 17392  08AE  1D03               	skipz
 17393  08AF  28E5               	goto	l8319
 17394                           
 17395                           ;Dimmer_B1.c: 1860: if (DimmerIntr1.Tune == 1) {
 17396  08B0  0021               	movlb	1	; select bank1
 17397  08B1  1CBC               	btfss	_DimmerIntr1^(0+128),1
 17398  08B2  28E5               	goto	l8319
 17399                           
 17400                           ;Dimmer_B1.c: 1861: DimmerIntr1.Tune = 0;
 17401  08B3  10BC               	bcf	_DimmerIntr1^(0+128),1
 17402                           
 17403                           ;Dimmer_B1.c: 1862: DimmerIntr1.TuneTime++;
 17404  08B4  3001               	movlw	1
 17405  08B5  0020               	movlb	0	; select bank0
 17406  08B6  00A0               	movwf	??_DimmerLights_DimmingFunction
 17407  08B7  0820               	movf	??_DimmerLights_DimmingFunction,w
 17408  08B8  0021               	movlb	1	; select bank1
 17409  08B9  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 17410                           
 17411                           ;Dimmer_B1.c: 1863: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 17412  08BA  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 17413  08BB  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 17414  08BC  1C03               	skipc
 17415  08BD  28E5               	goto	l8319
 17416                           
 17417                           ;Dimmer_B1.c: 1864: DimmerIntr1.TuneTime = 0;
 17418  08BE  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 17419                           
 17420                           ;Dimmer_B1.c: 1865: DimmerIntr1.TuneGO = 1;
 17421  08BF  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 17422                           
 17423                           ;Dimmer_B1.c: 1866: if (DimmerIntr1.Dimming_Sw == 1) {
 17424  08C0  1E3C               	btfss	_DimmerIntr1^(0+128),4
 17425  08C1  28D0               	goto	l1042
 17426                           
 17427                           ;Dimmer_B1.c: 1867: if (DimmerIntr1.Dimming_Status == 0) {
 17428  08C2  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 17429  08C3  28CA               	goto	l8307
 17430                           
 17431                           ;Dimmer_B1.c: 1868: if (DimmerIntr1.DimmingValue < ((char)(77*0.55))) {
 17432  08C4  302A               	movlw	42
 17433  08C5  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 17434  08C6  1C03               	btfss	3,0
 17435  08C7  28D6               	goto	l8313
 17436                           
 17437                           ;Dimmer_B1.c: 1871: DimmerIntr1.Dimming_Status = 1;
 17438                           
 17439                           ;Dimmer_B1.c: 1870: } else {
 17440                           
 17441                           ;Dimmer_B1.c: 1869: DimmerIntr1.DimmingValue++;
 17442  08C8  16BC               	bsf	_DimmerIntr1^(0+128),5
 17443                           
 17444                           ;Dimmer_B1.c: 1872: }
 17445                           ;Dimmer_B1.c: 1873: } else {
 17446  08C9  28E5               	goto	l8319
 17447  08CA                     l8307:	
 17448                           
 17449                           ;Dimmer_B1.c: 1874: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 17450  08CA  3003               	movlw	3
 17451  08CB  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 17452  08CC  1803               	btfsc	3,0
 17453  08CD  28E1               	goto	l8317
 17454                           
 17455                           ;Dimmer_B1.c: 1877: DimmerIntr1.Dimming_Status = 0;
 17456                           
 17457                           ;Dimmer_B1.c: 1876: } else {
 17458                           
 17459                           ;Dimmer_B1.c: 1875: DimmerIntr1.DimmingValue--;
 17460  08CE  12BC               	bcf	_DimmerIntr1^(0+128),5
 17461                           
 17462                           ;Dimmer_B1.c: 1878: }
 17463                           ;Dimmer_B1.c: 1879: }
 17464                           ;Dimmer_B1.c: 1880: } else if (DimmerIntr1.Dimming_RF == 1) {
 17465  08CF  28E5               	goto	l8319
 17466  08D0                     l1042:	
 17467  08D0  1F3C               	btfss	_DimmerIntr1^(0+128),6
 17468  08D1  28E5               	goto	l8319
 17469                           
 17470                           ;Dimmer_B1.c: 1881: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 17471  08D2  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 17472  08D3  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 17473  08D4  1803               	skipnc
 17474  08D5  28DD               	goto	l8315
 17475  08D6                     l8313:	
 17476                           
 17477                           ;Dimmer_B1.c: 1882: DimmerIntr1.DimmingValue++;
 17478  08D6  3001               	movlw	1
 17479  08D7  0020               	movlb	0	; select bank0
 17480  08D8  00A0               	movwf	??_DimmerLights_DimmingFunction
 17481  08D9  0820               	movf	??_DimmerLights_DimmingFunction,w
 17482  08DA  0021               	movlb	1	; select bank1
 17483  08DB  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 17484                           
 17485                           ;Dimmer_B1.c: 1883: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 17486  08DC  28E5               	goto	l8319
 17487  08DD                     l8315:	
 17488  08DD  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 17489  08DE  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 17490  08DF  1803               	skipnc
 17491  08E0  28E4               	goto	l1053
 17492  08E1                     l8317:	
 17493                           
 17494                           ;Dimmer_B1.c: 1884: DimmerIntr1.DimmingValue--;
 17495  08E1  3001               	movlw	1
 17496  08E2  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 17497                           
 17498                           ;Dimmer_B1.c: 1885: } else {
 17499  08E3  28E5               	goto	l8319
 17500  08E4                     l1053:	
 17501                           
 17502                           ;Dimmer_B1.c: 1886: DimmerIntr1.Dimming_RF = 0;
 17503  08E4  133C               	bcf	_DimmerIntr1^(0+128),6
 17504  08E5                     l8319:	
 17505                           
 17506                           ;Dimmer_B1.c: 1887: }
 17507                           ;Dimmer_B1.c: 1888: }
 17508                           ;Dimmer_B1.c: 1889: }
 17509                           ;Dimmer_B1.c: 1890: }
 17510                           ;Dimmer_B1.c: 1891: }
 17511                           ;Dimmer_B1.c: 1895: if (lights == 2) {
 17512  08E5  0020               	movlb	0	; select bank0
 17513  08E6  0821               	movf	DimmerLights_DimmingFunction@lights,w
 17514  08E7  3A02               	xorlw	2
 17515  08E8  1D03               	skipz
 17516  08E9  0008               	return
 17517                           
 17518                           ;Dimmer_B1.c: 1896: if (DimmerIntr2.Tune == 1) {
 17519  08EA  0021               	movlb	1	; select bank1
 17520  08EB  1CC8               	btfss	_DimmerIntr2^(0+128),1
 17521  08EC  0008               	return
 17522                           
 17523                           ;Dimmer_B1.c: 1897: DimmerIntr2.Tune = 0;
 17524  08ED  10C8               	bcf	_DimmerIntr2^(0+128),1
 17525                           
 17526                           ;Dimmer_B1.c: 1898: DimmerIntr2.TuneTime++;
 17527  08EE  3001               	movlw	1
 17528  08EF  0020               	movlb	0	; select bank0
 17529  08F0  00A0               	movwf	??_DimmerLights_DimmingFunction
 17530  08F1  0820               	movf	??_DimmerLights_DimmingFunction,w
 17531  08F2  0021               	movlb	1	; select bank1
 17532  08F3  07CB               	addwf	(_DimmerIntr2^(0+128)+3),f
 17533                           
 17534                           ;Dimmer_B1.c: 1899: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 17535  08F4  084C               	movf	(_DimmerIntr2^(0+128)+4),w
 17536  08F5  024B               	subwf	(_DimmerIntr2^(0+128)+3),w
 17537  08F6  1C03               	skipc
 17538  08F7  0008               	return
 17539                           
 17540                           ;Dimmer_B1.c: 1900: DimmerIntr2.TuneTime = 0;
 17541  08F8  01CB               	clrf	(_DimmerIntr2^(0+128)+3)
 17542                           
 17543                           ;Dimmer_B1.c: 1901: DimmerIntr2.TuneGO = 1;
 17544  08F9  1749               	bsf	(_DimmerIntr2^(0+128)+1),6
 17545                           
 17546                           ;Dimmer_B1.c: 1902: if (DimmerIntr2.Dimming_Sw == 1) {
 17547  08FA  1E48               	btfss	_DimmerIntr2^(0+128),4
 17548  08FB  2914               	goto	l1058
 17549                           
 17550                           ;Dimmer_B1.c: 1903: if (DimmerIntr2.Dimming_Status == 0) {
 17551  08FC  1AC8               	btfsc	_DimmerIntr2^(0+128),5
 17552  08FD  290B               	goto	l8341
 17553                           
 17554                           ;Dimmer_B1.c: 1904: if (DimmerIntr2.DimmingValue < ((char)(77*0.55))) {
 17555  08FE  302A               	movlw	42
 17556  08FF  024D               	subwf	(_DimmerIntr2^(0+128)+5),w
 17557  0900  1803               	skipnc
 17558  0901  2909               	goto	l1060
 17559                           
 17560                           ;Dimmer_B1.c: 1905: DimmerIntr2.DimmingValue++;
 17561  0902  3001               	movlw	1
 17562  0903  0020               	movlb	0	; select bank0
 17563  0904  00A0               	movwf	??_DimmerLights_DimmingFunction
 17564  0905  0820               	movf	??_DimmerLights_DimmingFunction,w
 17565  0906  0021               	movlb	1	; select bank1
 17566  0907  07CD               	addwf	(_DimmerIntr2^(0+128)+5),f
 17567                           
 17568                           ;Dimmer_B1.c: 1906: } else {
 17569  0908  0008               	return
 17570  0909                     l1060:	
 17571                           
 17572                           ;Dimmer_B1.c: 1907: DimmerIntr2.Dimming_Status = 1;
 17573  0909  16C8               	bsf	_DimmerIntr2^(0+128),5
 17574                           
 17575                           ;Dimmer_B1.c: 1908: }
 17576                           ;Dimmer_B1.c: 1909: } else {
 17577  090A  0008               	return
 17578  090B                     l8341:	
 17579                           
 17580                           ;Dimmer_B1.c: 1910: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 17581  090B  3003               	movlw	3
 17582  090C  024D               	subwf	(_DimmerIntr2^(0+128)+5),w
 17583  090D  1C03               	skipc
 17584  090E  2912               	goto	l1063
 17585                           
 17586                           ;Dimmer_B1.c: 1911: DimmerIntr2.DimmingValue--;
 17587  090F  3001               	movlw	1
 17588  0910  02CD               	subwf	(_DimmerIntr2^(0+128)+5),f
 17589                           
 17590                           ;Dimmer_B1.c: 1912: } else {
 17591  0911  0008               	return
 17592  0912                     l1063:	
 17593                           
 17594                           ;Dimmer_B1.c: 1913: DimmerIntr2.Dimming_Status = 0;
 17595  0912  12C8               	bcf	_DimmerIntr2^(0+128),5
 17596                           
 17597                           ;Dimmer_B1.c: 1914: }
 17598                           ;Dimmer_B1.c: 1915: }
 17599                           ;Dimmer_B1.c: 1916: } else if (DimmerIntr2.Dimming_RF == 1) {
 17600  0913  0008               	return
 17601  0914                     l1058:	
 17602  0914  1F48               	btfss	_DimmerIntr2^(0+128),6
 17603  0915  0008               	return
 17604                           
 17605                           ;Dimmer_B1.c: 1917: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 17606  0916  084E               	movf	(_DimmerIntr2^(0+128)+6),w
 17607  0917  024D               	subwf	(_DimmerIntr2^(0+128)+5),w
 17608  0918  1803               	skipnc
 17609  0919  2921               	goto	l8349
 17610                           
 17611                           ;Dimmer_B1.c: 1918: DimmerIntr2.DimmingValue++;
 17612  091A  3001               	movlw	1
 17613  091B  0020               	movlb	0	; select bank0
 17614  091C  00A0               	movwf	??_DimmerLights_DimmingFunction
 17615  091D  0820               	movf	??_DimmerLights_DimmingFunction,w
 17616  091E  0021               	movlb	1	; select bank1
 17617  091F  07CD               	addwf	(_DimmerIntr2^(0+128)+5),f
 17618                           
 17619                           ;Dimmer_B1.c: 1919: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 17620  0920  0008               	return
 17621  0921                     l8349:	
 17622  0921  084D               	movf	(_DimmerIntr2^(0+128)+5),w
 17623  0922  024E               	subwf	(_DimmerIntr2^(0+128)+6),w
 17624  0923  1803               	skipnc
 17625  0924  2928               	goto	l1069
 17626                           
 17627                           ;Dimmer_B1.c: 1920: DimmerIntr2.DimmingValue--;
 17628  0925  3001               	movlw	1
 17629  0926  02CD               	subwf	(_DimmerIntr2^(0+128)+5),f
 17630                           
 17631                           ;Dimmer_B1.c: 1921: } else {
 17632  0927  0008               	return
 17633  0928                     l1069:	
 17634                           
 17635                           ;Dimmer_B1.c: 1922: DimmerIntr2.Dimming_RF = 0;
 17636  0928  1348               	bcf	_DimmerIntr2^(0+128),6
 17637  0929  0008               	return
 17638  092A                     __end_of_DimmerLights_DimmingFunction:	
 17639                           
 17640                           	psect	text117
 17641  26C5                     __ptext117:	
 17642 ;; *************** function _DimmerLights_Initialization *****************
 17643 ;; Defined at:
 17644 ;;		line 673 in file "../src/Dimmer_B1.c"
 17645 ;; Parameters:    Size  Location     Type
 17646 ;;		None
 17647 ;; Auto vars:     Size  Location     Type
 17648 ;;		None
 17649 ;; Return value:  Size  Location     Type
 17650 ;;		None               void
 17651 ;; Registers used:
 17652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17653 ;; Tracked objects:
 17654 ;;		On entry : 0/0
 17655 ;;		On exit  : 0/0
 17656 ;;		Unchanged: 0/0
 17657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17662 ;;Total ram usage:        0 bytes
 17663 ;; Hardware stack levels used:    1
 17664 ;; Hardware stack levels required when called:    9
 17665 ;; This function calls:
 17666 ;;		_DimmerIntr_Initialization
 17667 ;;		_setDimmerLights_Initialization
 17668 ;; This function is called by:
 17669 ;;		_main
 17670 ;; This function uses a non-reentrant model
 17671 ;;
 17672                           
 17673                           
 17674                           ;psect for function _DimmerLights_Initialization
 17675  26C5                     _DimmerLights_Initialization:	
 17676                           
 17677                           ;Dimmer_B1.c: 675: setDimmerLights_Initialization(1);
 17678                           
 17679                           ;incstack = 0
 17680                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 17681  26C5  3001               	movlw	1
 17682  26C6  31A6  2635  31A6   	fcall	_setDimmerLights_Initialization
 17683                           
 17684                           ;Dimmer_B1.c: 679: setDimmerLights_Initialization(2);
 17685  26C9  3002               	movlw	2
 17686  26CA  31A6  2635  31A6   	fcall	_setDimmerLights_Initialization
 17687                           
 17688                           ;Dimmer_B1.c: 685: DimmerIntr_Initialization();
 17689  26CD  318D  25CA         	fcall	_DimmerIntr_Initialization
 17690  26CF  0008               	return
 17691  26D0                     __end_of_DimmerLights_Initialization:	
 17692                           
 17693                           	psect	text118
 17694  2635                     __ptext118:	
 17695 ;; *************** function _setDimmerLights_Initialization *****************
 17696 ;; Defined at:
 17697 ;;		line 689 in file "../src/Dimmer_B1.c"
 17698 ;; Parameters:    Size  Location     Type
 17699 ;;  lights          1    wreg     unsigned char 
 17700 ;; Auto vars:     Size  Location     Type
 17701 ;;  lights          1    0[COMMON] unsigned char 
 17702 ;; Return value:  Size  Location     Type
 17703 ;;		None               void
 17704 ;; Registers used:
 17705 ;;		wreg
 17706 ;; Tracked objects:
 17707 ;;		On entry : 0/0
 17708 ;;		On exit  : 0/0
 17709 ;;		Unchanged: 0/0
 17710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;Total ram usage:        0 bytes
 17716 ;; Hardware stack levels used:    1
 17717 ;; Hardware stack levels required when called:    5
 17718 ;; This function calls:
 17719 ;;		Nothing
 17720 ;; This function is called by:
 17721 ;;		_DimmerLights_Initialization
 17722 ;; This function uses a non-reentrant model
 17723 ;;
 17724                           
 17725                           
 17726                           ;psect for function _setDimmerLights_Initialization
 17727  2635                     _setDimmerLights_Initialization:	
 17728                           
 17729                           ;incstack = 0
 17730                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17731  2635  0008               	return
 17732  2636                     __end_of_setDimmerLights_Initialization:	
 17733                           
 17734                           	psect	text119
 17735  0DCA                     __ptext119:	
 17736 ;; *************** function _DimmerIntr_Initialization *****************
 17737 ;; Defined at:
 17738 ;;		line 7 in file "../src/Dimmer_B1.c"
 17739 ;; Parameters:    Size  Location     Type
 17740 ;;		None
 17741 ;; Auto vars:     Size  Location     Type
 17742 ;;		None
 17743 ;; Return value:  Size  Location     Type
 17744 ;;		None               void
 17745 ;; Registers used:
 17746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17747 ;; Tracked objects:
 17748 ;;		On entry : 0/0
 17749 ;;		On exit  : 0/0
 17750 ;;		Unchanged: 0/0
 17751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17756 ;;Total ram usage:        2 bytes
 17757 ;; Hardware stack levels used:    1
 17758 ;; Hardware stack levels required when called:    8
 17759 ;; This function calls:
 17760 ;;		_Division
 17761 ;;		_getDimmerLights_PercentToValue
 17762 ;;		_getDimmerLights_ValueToPercent
 17763 ;;		_setMemory_Modify
 17764 ;; This function is called by:
 17765 ;;		_DimmerLights_Initialization
 17766 ;; This function uses a non-reentrant model
 17767 ;;
 17768                           
 17769                           
 17770                           ;psect for function _DimmerIntr_Initialization
 17771  0DCA                     _DimmerIntr_Initialization:	
 17772                           
 17773                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 17774                           
 17775                           ;incstack = 0
 17776                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 17777  0DCA  3003               	movlw	3
 17778  0DCB  0020               	movlb	0	; select bank0
 17779  0DCC  00E2               	movwf	??_DimmerIntr_Initialization
 17780  0DCD  0862               	movf	??_DimmerIntr_Initialization,w
 17781  0DCE  0021               	movlb	1	; select bank1
 17782  0DCF  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 17783                           
 17784                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(77*0.55));
 17785  0DD0  302A               	movlw	42
 17786  0DD1  0020               	movlb	0	; select bank0
 17787  0DD2  00E2               	movwf	??_DimmerIntr_Initialization
 17788  0DD3  0862               	movf	??_DimmerIntr_Initialization,w
 17789  0DD4  0021               	movlb	1	; select bank1
 17790  0DD5  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 17791                           
 17792                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 17793  0DD6  3002               	movlw	2
 17794  0DD7  0020               	movlb	0	; select bank0
 17795  0DD8  00E2               	movwf	??_DimmerIntr_Initialization
 17796  0DD9  0862               	movf	??_DimmerIntr_Initialization,w
 17797  0DDA  0021               	movlb	1	; select bank1
 17798  0DDB  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 17799                           
 17800                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 17801  0DDC  10BC               	bcf	_DimmerIntr1^(0+128),1
 17802                           
 17803                           ;Dimmer_B1.c: 17: if (myMain.InitDimmer == 1) {
 17804  0DDD  1E39               	btfss	(_myMain^(0+128)+10),4
 17805  0DDE  2DEE               	goto	l750
 17806                           
 17807                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17808  0DDF  302A               	movlw	42
 17809  0DE0  3195  2513  318D   	fcall	_getDimmerLights_ValueToPercent
 17810  0DE3  0020               	movlb	0	; select bank0
 17811  0DE4  00E2               	movwf	??_DimmerIntr_Initialization
 17812  0DE5  0021               	movlb	1	; select bank1
 17813  0DE6  086D               	movf	_product^(0+128),w
 17814  0DE7  3E15               	addlw	21
 17815  0DE8  0086               	movwf	6
 17816  0DE9  3002               	movlw	2	; select bank4/5
 17817  0DEA  0087               	movwf	7
 17818  0DEB  0020               	movlb	0	; select bank0
 17819  0DEC  0862               	movf	??_DimmerIntr_Initialization,w
 17820  0DED  0081               	movwf	1
 17821  0DEE                     l750:	
 17822                           
 17823                           ;Dimmer_B1.c: 19: }
 17824                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 17825  0DEE  0021               	movlb	1	; select bank1
 17826  0DEF  086D               	movf	_product^(0+128),w
 17827  0DF0  3E15               	addlw	21
 17828  0DF1  0086               	movwf	6
 17829  0DF2  3002               	movlw	2	; select bank4/5
 17830  0DF3  0087               	movwf	7
 17831  0DF4  0801               	movf	1,w
 17832  0DF5  3194  24AE  318D   	fcall	_getDimmerLights_PercentToValue
 17833  0DF8  0020               	movlb	0	; select bank0
 17834  0DF9  00E2               	movwf	??_DimmerIntr_Initialization
 17835  0DFA  0862               	movf	??_DimmerIntr_Initialization,w
 17836  0DFB  0021               	movlb	1	; select bank1
 17837  0DFC  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 17838                           
 17839                           ;Dimmer_B1.c: 28: DimmerIntr1.TuneValue2 = Division(((char)(77*0.55)), 2);
 17840  0DFD  3002               	movlw	2
 17841  0DFE  0020               	movlb	0	; select bank0
 17842  0DFF  00E2               	movwf	??_DimmerIntr_Initialization
 17843  0E00  0862               	movf	??_DimmerIntr_Initialization,w
 17844  0E01  00A5               	movwf	Division@num
 17845  0E02  302A               	movlw	42
 17846  0E03  31A7  2769  318D   	fcall	_Division
 17847  0E06  0020               	movlb	0	; select bank0
 17848  0E07  00E3               	movwf	??_DimmerIntr_Initialization+1
 17849  0E08  0863               	movf	??_DimmerIntr_Initialization+1,w
 17850  0E09  0021               	movlb	1	; select bank1
 17851  0E0A  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 17852                           
 17853                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17854  0E0B  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 17855  0E0C  3E0D               	addlw	13
 17856  0E0D  0020               	movlb	0	; select bank0
 17857  0E0E  00E2               	movwf	??_DimmerIntr_Initialization
 17858  0E0F  0862               	movf	??_DimmerIntr_Initialization,w
 17859  0E10  0021               	movlb	1	; select bank1
 17860  0E11  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 17861                           
 17862                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 17863  0E12  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 17864  0E13  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 17865  0E14  0020               	movlb	0	; select bank0
 17866  0E15  00E2               	movwf	??_DimmerIntr_Initialization
 17867  0E16  0862               	movf	??_DimmerIntr_Initialization,w
 17868  0E17  0021               	movlb	1	; select bank1
 17869  0E18  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 17870                           
 17871                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 17872  0E19  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 17873  0E1A  3E01               	addlw	1
 17874  0E1B  0020               	movlb	0	; select bank0
 17875  0E1C  00E2               	movwf	??_DimmerIntr_Initialization
 17876  0E1D  0862               	movf	??_DimmerIntr_Initialization,w
 17877  0E1E  0021               	movlb	1	; select bank1
 17878  0E1F  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 17879                           
 17880                           ;Dimmer_B1.c: 37: DimmerIntr2.TuneTimeValue = 3;
 17881  0E20  3003               	movlw	3
 17882  0E21  0020               	movlb	0	; select bank0
 17883  0E22  00E2               	movwf	??_DimmerIntr_Initialization
 17884  0E23  0862               	movf	??_DimmerIntr_Initialization,w
 17885  0E24  0021               	movlb	1	; select bank1
 17886  0E25  00CC               	movwf	(_DimmerIntr2^(0+128)+4)
 17887                           
 17888                           ;Dimmer_B1.c: 38: DimmerIntr2.MaxmumValue = ((char)(77*0.55));
 17889  0E26  302A               	movlw	42
 17890  0E27  0020               	movlb	0	; select bank0
 17891  0E28  00E2               	movwf	??_DimmerIntr_Initialization
 17892  0E29  0862               	movf	??_DimmerIntr_Initialization,w
 17893  0E2A  0021               	movlb	1	; select bank1
 17894  0E2B  00CE               	movwf	(_DimmerIntr2^(0+128)+6)
 17895                           
 17896                           ;Dimmer_B1.c: 39: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 17897  0E2C  3002               	movlw	2
 17898  0E2D  0020               	movlb	0	; select bank0
 17899  0E2E  00E2               	movwf	??_DimmerIntr_Initialization
 17900  0E2F  0862               	movf	??_DimmerIntr_Initialization,w
 17901  0E30  0021               	movlb	1	; select bank1
 17902  0E31  00CF               	movwf	(_DimmerIntr2^(0+128)+7)
 17903                           
 17904                           ;Dimmer_B1.c: 40: DimmerIntr2.Tune = 0;
 17905  0E32  10C8               	bcf	_DimmerIntr2^(0+128),1
 17906                           
 17907                           ;Dimmer_B1.c: 44: if (myMain.InitDimmer == 1) {
 17908  0E33  1E39               	btfss	(_myMain^(0+128)+10),4
 17909  0E34  2E44               	goto	l751
 17910                           
 17911                           ;Dimmer_B1.c: 45: product->Data[22] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17912  0E35  302A               	movlw	42
 17913  0E36  3195  2513  318D   	fcall	_getDimmerLights_ValueToPercent
 17914  0E39  0020               	movlb	0	; select bank0
 17915  0E3A  00E2               	movwf	??_DimmerIntr_Initialization
 17916  0E3B  0021               	movlb	1	; select bank1
 17917  0E3C  086D               	movf	_product^(0+128),w
 17918  0E3D  3E16               	addlw	22
 17919  0E3E  0086               	movwf	6
 17920  0E3F  3002               	movlw	2	; select bank4/5
 17921  0E40  0087               	movwf	7
 17922  0E41  0020               	movlb	0	; select bank0
 17923  0E42  0862               	movf	??_DimmerIntr_Initialization,w
 17924  0E43  0081               	movwf	1
 17925  0E44                     l751:	
 17926                           
 17927                           ;Dimmer_B1.c: 46: }
 17928                           ;Dimmer_B1.c: 48: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 17929  0E44  0021               	movlb	1	; select bank1
 17930  0E45  086D               	movf	_product^(0+128),w
 17931  0E46  3E16               	addlw	22
 17932  0E47  0086               	movwf	6
 17933  0E48  3002               	movlw	2	; select bank4/5
 17934  0E49  0087               	movwf	7
 17935  0E4A  0801               	movf	1,w
 17936  0E4B  3194  24AE  318D   	fcall	_getDimmerLights_PercentToValue
 17937  0E4E  0020               	movlb	0	; select bank0
 17938  0E4F  00E2               	movwf	??_DimmerIntr_Initialization
 17939  0E50  0862               	movf	??_DimmerIntr_Initialization,w
 17940  0E51  0021               	movlb	1	; select bank1
 17941  0E52  00CD               	movwf	(_DimmerIntr2^(0+128)+5)
 17942                           
 17943                           ;Dimmer_B1.c: 55: DimmerIntr2.TuneValue2 = Division(((char)(77*0.55)), 2);
 17944  0E53  3002               	movlw	2
 17945  0E54  0020               	movlb	0	; select bank0
 17946  0E55  00E2               	movwf	??_DimmerIntr_Initialization
 17947  0E56  0862               	movf	??_DimmerIntr_Initialization,w
 17948  0E57  00A5               	movwf	Division@num
 17949  0E58  302A               	movlw	42
 17950  0E59  31A7  2769  318D   	fcall	_Division
 17951  0E5C  0020               	movlb	0	; select bank0
 17952  0E5D  00E3               	movwf	??_DimmerIntr_Initialization+1
 17953  0E5E  0863               	movf	??_DimmerIntr_Initialization+1,w
 17954  0E5F  0021               	movlb	1	; select bank1
 17955  0E60  00D0               	movwf	(_DimmerIntr2^(0+128)+8)
 17956                           
 17957                           ;Dimmer_B1.c: 56: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17958  0E61  0850               	movf	(_DimmerIntr2^(0+128)+8),w
 17959  0E62  3E0D               	addlw	13
 17960  0E63  0020               	movlb	0	; select bank0
 17961  0E64  00E2               	movwf	??_DimmerIntr_Initialization
 17962  0E65  0862               	movf	??_DimmerIntr_Initialization,w
 17963  0E66  0021               	movlb	1	; select bank1
 17964  0E67  00D1               	movwf	(_DimmerIntr2^(0+128)+9)
 17965                           
 17966                           ;Dimmer_B1.c: 57: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneValu
      +                          e2;
 17967  0E68  0851               	movf	(_DimmerIntr2^(0+128)+9),w
 17968  0E69  0750               	addwf	(_DimmerIntr2^(0+128)+8),w
 17969  0E6A  0020               	movlb	0	; select bank0
 17970  0E6B  00E2               	movwf	??_DimmerIntr_Initialization
 17971  0E6C  0862               	movf	??_DimmerIntr_Initialization,w
 17972  0E6D  0021               	movlb	1	; select bank1
 17973  0E6E  00D2               	movwf	(_DimmerIntr2^(0+128)+10)
 17974                           
 17975                           ;Dimmer_B1.c: 58: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 1;
 17976  0E6F  0852               	movf	(_DimmerIntr2^(0+128)+10),w
 17977  0E70  3E01               	addlw	1
 17978  0E71  0020               	movlb	0	; select bank0
 17979  0E72  00E2               	movwf	??_DimmerIntr_Initialization
 17980  0E73  0862               	movf	??_DimmerIntr_Initialization,w
 17981  0E74  0021               	movlb	1	; select bank1
 17982  0E75  00D3               	movwf	(_DimmerIntr2^(0+128)+11)
 17983                           
 17984                           ;Dimmer_B1.c: 81: if (myMain.InitDimmer == 1) {
 17985  0E76  1E39               	btfss	(_myMain^(0+128)+10),4
 17986  0E77  0008               	return
 17987                           
 17988                           ;Dimmer_B1.c: 82: myMain.InitDimmer = 0;
 17989  0E78  1239               	bcf	(_myMain^(0+128)+10),4
 17990                           
 17991                           ;Dimmer_B1.c: 83: myMain.SaveDimmer = 1;
 17992  0E79  16B9               	bsf	(_myMain^(0+128)+10),5
 17993                           
 17994                           ;Dimmer_B1.c: 84: setMemory_Modify(1);
 17995  0E7A  3001               	movlw	1
 17996  0E7B  3198  20BB         	fcall	_setMemory_Modify
 17997  0E7D  0008               	return
 17998  0E7E                     __end_of_DimmerIntr_Initialization:	
 17999                           
 18000                           	psect	text120
 18001  18BB                     __ptext120:	
 18002 ;; *************** function _setMemory_Modify *****************
 18003 ;; Defined at:
 18004 ;;		line 1083 in file "../src/MCU_B1.c"
 18005 ;; Parameters:    Size  Location     Type
 18006 ;;  command         1    wreg     unsigned char 
 18007 ;; Auto vars:     Size  Location     Type
 18008 ;;  command         1    1[BANK0 ] unsigned char 
 18009 ;; Return value:  Size  Location     Type
 18010 ;;		None               void
 18011 ;; Registers used:
 18012 ;;		wreg, status,2, status,0
 18013 ;; Tracked objects:
 18014 ;;		On entry : 0/0
 18015 ;;		On exit  : 0/0
 18016 ;;		Unchanged: 0/0
 18017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;Total ram usage:        2 bytes
 18023 ;; Hardware stack levels used:    1
 18024 ;; Hardware stack levels required when called:    5
 18025 ;; This function calls:
 18026 ;;		Nothing
 18027 ;; This function is called by:
 18028 ;;		_DimmerIntr_Initialization
 18029 ;;		_DimmerLights_AssignationDimming
 18030 ;;		_setDimmerLights_Dimming
 18031 ;;		_setLog_Code
 18032 ;;		_setRFSW_AdjControl
 18033 ;; This function uses a non-reentrant model
 18034 ;;
 18035                           
 18036                           
 18037                           ;psect for function _setMemory_Modify
 18038  18BB                     _setMemory_Modify:	
 18039                           
 18040                           ;incstack = 0
 18041                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 18042                           ;setMemory_Modify@command stored from wreg
 18043  18BB  0020               	movlb	0	; select bank0
 18044  18BC  00A1               	movwf	setMemory_Modify@command
 18045                           
 18046                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 18047  18BD  0821               	movf	setMemory_Modify@command,w
 18048  18BE  3A01               	xorlw	1
 18049  18BF  3000               	movlw	0
 18050  18C0  1903               	skipnz
 18051  18C1  3001               	movlw	1
 18052  18C2  00A0               	movwf	??_setMemory_Modify
 18053  18C3  0024               	movlb	4	; select bank4
 18054  18C4  0844               	movf	(_Memory^(0+512)+36),w
 18055  18C5  0020               	movlb	0	; select bank0
 18056  18C6  0620               	xorwf	??_setMemory_Modify,w
 18057  18C7  39FE               	andlw	-2
 18058  18C8  0620               	xorwf	??_setMemory_Modify,w
 18059  18C9  0024               	movlb	4	; select bank4
 18060  18CA  00C4               	movwf	(_Memory^(0+512)+36)
 18061                           
 18062                           ;MCU_B1.c: 1085: Memory.Time = 0;
 18063  18CB  01C2               	clrf	(_Memory^(0+512)+34)
 18064  18CC  01C3               	clrf	((_Memory+1)^(0+512)+34)
 18065  18CD  0008               	return
 18066  18CE                     __end_of_setMemory_Modify:	
 18067                           
 18068                           	psect	text121
 18069  1513                     __ptext121:	
 18070 ;; *************** function _getDimmerLights_ValueToPercent *****************
 18071 ;; Defined at:
 18072 ;;		line 1251 in file "../src/Dimmer_B1.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;  value           1    wreg     unsigned char 
 18075 ;; Auto vars:     Size  Location     Type
 18076 ;;  value           1   62[BANK0 ] unsigned char 
 18077 ;;  i               3   63[BANK0 ] float 
 18078 ;; Return value:  Size  Location     Type
 18079 ;;                  1    wreg      unsigned char 
 18080 ;; Registers used:
 18081 ;;		wreg, status,2, status,0, pclath, cstack
 18082 ;; Tracked objects:
 18083 ;;		On entry : 0/0
 18084 ;;		On exit  : 0/0
 18085 ;;		Unchanged: 0/0
 18086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18088 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18090 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18091 ;;Total ram usage:        6 bytes
 18092 ;; Hardware stack levels used:    1
 18093 ;; Hardware stack levels required when called:    7
 18094 ;; This function calls:
 18095 ;;		___awtoft
 18096 ;;		___ftadd
 18097 ;;		___ftdiv
 18098 ;;		___ftneg
 18099 ;;		___fttol
 18100 ;; This function is called by:
 18101 ;;		_DimmerIntr_Initialization
 18102 ;;		_setDimmerLights_Dimming
 18103 ;; This function uses a non-reentrant model
 18104 ;;
 18105                           
 18106                           
 18107                           ;psect for function _getDimmerLights_ValueToPercent
 18108  1513                     _getDimmerLights_ValueToPercent:	
 18109                           
 18110                           ;incstack = 0
 18111                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 18112                           ;getDimmerLights_ValueToPercent@value stored from wreg
 18113  1513  0020               	movlb	0	; select bank0
 18114  1514  00DE               	movwf	getDimmerLights_ValueToPercent@value
 18115                           
 18116                           ;Dimmer_B1.c: 1259: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 18117  1515  3000               	movlw	0
 18118  1516  00DF               	movwf	getDimmerLights_ValueToPercent@i
 18119  1517  3020               	movlw	32
 18120  1518  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 18121  1519  3042               	movlw	66
 18122  151A  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 18123                           
 18124                           ;Dimmer_B1.c: 1260: i /= 100;
 18125  151B  3000               	movlw	0
 18126  151C  00AE               	movwf	___ftdiv@f2
 18127  151D  30C8               	movlw	200
 18128  151E  00AF               	movwf	___ftdiv@f2+1
 18129  151F  3042               	movlw	66
 18130  1520  00B0               	movwf	___ftdiv@f2+2
 18131  1521  085F               	movf	getDimmerLights_ValueToPercent@i,w
 18132  1522  00B1               	movwf	___ftdiv@f1
 18133  1523  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 18134  1524  00B2               	movwf	___ftdiv@f1+1
 18135  1525  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 18136  1526  00B3               	movwf	___ftdiv@f1+2
 18137  1527  318C  246D  3195   	fcall	___ftdiv
 18138  152A  0020               	movlb	0	; select bank0
 18139  152B  082E               	movf	?___ftdiv,w
 18140  152C  00DF               	movwf	getDimmerLights_ValueToPercent@i
 18141  152D  082F               	movf	?___ftdiv+1,w
 18142  152E  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 18143  152F  0830               	movf	?___ftdiv+2,w
 18144  1530  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 18145                           
 18146                           ;Dimmer_B1.c: 1262: return (char) (100 - ((((char)(77*0.55)) - value) / i));
 18147  1531  085E               	movf	getDimmerLights_ValueToPercent@value,w
 18148  1532  00DC               	movwf	??_getDimmerLights_ValueToPercent
 18149  1533  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 18150  1534  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 18151  1535  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 18152  1536  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 18153  1537  1903               	skipnz
 18154  1538  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 18155  1539  085C               	movf	??_getDimmerLights_ValueToPercent,w
 18156  153A  3E2A               	addlw	42
 18157  153B  00A8               	movwf	___awtoft@c
 18158  153C  3000               	movlw	0
 18159  153D  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 18160  153E  00A9               	movwf	___awtoft@c+1
 18161  153F  319C  246E  3195   	fcall	___awtoft
 18162  1542  0020               	movlb	0	; select bank0
 18163  1543  0828               	movf	?___awtoft,w
 18164  1544  00B1               	movwf	___ftdiv@f1
 18165  1545  0829               	movf	?___awtoft+1,w
 18166  1546  00B2               	movwf	___ftdiv@f1+1
 18167  1547  082A               	movf	?___awtoft+2,w
 18168  1548  00B3               	movwf	___ftdiv@f1+2
 18169  1549  085F               	movf	getDimmerLights_ValueToPercent@i,w
 18170  154A  00AE               	movwf	___ftdiv@f2
 18171  154B  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 18172  154C  00AF               	movwf	___ftdiv@f2+1
 18173  154D  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 18174  154E  00B0               	movwf	___ftdiv@f2+2
 18175  154F  318C  246D  3195   	fcall	___ftdiv
 18176  1552  0020               	movlb	0	; select bank0
 18177  1553  082E               	movf	?___ftdiv,w
 18178  1554  00BE               	movwf	___ftneg@f1
 18179  1555  082F               	movf	?___ftdiv+1,w
 18180  1556  00BF               	movwf	___ftneg@f1+1
 18181  1557  0830               	movf	?___ftdiv+2,w
 18182  1558  00C0               	movwf	___ftneg@f1+2
 18183  1559  31A6  26B3  3195   	fcall	___ftneg
 18184  155C  0020               	movlb	0	; select bank0
 18185  155D  083E               	movf	?___ftneg,w
 18186  155E  00C4               	movwf	___ftadd@f2
 18187  155F  083F               	movf	?___ftneg+1,w
 18188  1560  00C5               	movwf	___ftadd@f2+1
 18189  1561  0840               	movf	?___ftneg+2,w
 18190  1562  00C6               	movwf	___ftadd@f2+2
 18191  1563  3000               	movlw	0
 18192  1564  00C1               	movwf	___ftadd@f1
 18193  1565  30C8               	movlw	200
 18194  1566  00C2               	movwf	___ftadd@f1+1
 18195  1567  3042               	movlw	66
 18196  1568  00C3               	movwf	___ftadd@f1+2
 18197  1569  3183  238C  3195   	fcall	___ftadd
 18198  156C  0020               	movlb	0	; select bank0
 18199  156D  0841               	movf	?___ftadd,w
 18200  156E  00CE               	movwf	___fttol@f1
 18201  156F  0842               	movf	?___ftadd+1,w
 18202  1570  00CF               	movwf	___fttol@f1+1
 18203  1571  0843               	movf	?___ftadd+2,w
 18204  1572  00D0               	movwf	___fttol@f1+2
 18205  1573  318A  2230         	fcall	___fttol
 18206  1575  0020               	movlb	0	; select bank0
 18207  1576  084E               	movf	?___fttol,w
 18208  1577  0008               	return
 18209  1578                     __end_of_getDimmerLights_ValueToPercent:	
 18210                           
 18211                           	psect	text122
 18212  14AE                     __ptext122:	
 18213 ;; *************** function _getDimmerLights_PercentToValue *****************
 18214 ;; Defined at:
 18215 ;;		line 1235 in file "../src/Dimmer_B1.c"
 18216 ;; Parameters:    Size  Location     Type
 18217 ;;  value           1    wreg     unsigned char 
 18218 ;; Auto vars:     Size  Location     Type
 18219 ;;  value           1   62[BANK0 ] unsigned char 
 18220 ;;  i               3   63[BANK0 ] float 
 18221 ;; Return value:  Size  Location     Type
 18222 ;;                  1    wreg      unsigned char 
 18223 ;; Registers used:
 18224 ;;		wreg, status,2, status,0, pclath, cstack
 18225 ;; Tracked objects:
 18226 ;;		On entry : 0/0
 18227 ;;		On exit  : 0/0
 18228 ;;		Unchanged: 0/0
 18229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18231 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18233 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18234 ;;Total ram usage:        6 bytes
 18235 ;; Hardware stack levels used:    1
 18236 ;; Hardware stack levels required when called:    7
 18237 ;; This function calls:
 18238 ;;		___awtoft
 18239 ;;		___ftadd
 18240 ;;		___ftdiv
 18241 ;;		___ftmul
 18242 ;;		___ftneg
 18243 ;;		___fttol
 18244 ;; This function is called by:
 18245 ;;		_DimmerIntr_Initialization
 18246 ;;		_DimmerLights_AssignationDimming
 18247 ;;		_setDimmerLights_OnOff
 18248 ;;		_setRFSW_AdjControl
 18249 ;; This function uses a non-reentrant model
 18250 ;;
 18251                           
 18252                           
 18253                           ;psect for function _getDimmerLights_PercentToValue
 18254  14AE                     _getDimmerLights_PercentToValue:	
 18255                           
 18256                           ;incstack = 0
 18257                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 18258                           ;getDimmerLights_PercentToValue@value stored from wreg
 18259  14AE  0020               	movlb	0	; select bank0
 18260  14AF  00DE               	movwf	getDimmerLights_PercentToValue@value
 18261                           
 18262                           ;Dimmer_B1.c: 1243: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 18263  14B0  3000               	movlw	0
 18264  14B1  00DF               	movwf	getDimmerLights_PercentToValue@i
 18265  14B2  3020               	movlw	32
 18266  14B3  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 18267  14B4  3042               	movlw	66
 18268  14B5  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 18269                           
 18270                           ;Dimmer_B1.c: 1244: i /= 100;
 18271  14B6  3000               	movlw	0
 18272  14B7  00AE               	movwf	___ftdiv@f2
 18273  14B8  30C8               	movlw	200
 18274  14B9  00AF               	movwf	___ftdiv@f2+1
 18275  14BA  3042               	movlw	66
 18276  14BB  00B0               	movwf	___ftdiv@f2+2
 18277  14BC  085F               	movf	getDimmerLights_PercentToValue@i,w
 18278  14BD  00B1               	movwf	___ftdiv@f1
 18279  14BE  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 18280  14BF  00B2               	movwf	___ftdiv@f1+1
 18281  14C0  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 18282  14C1  00B3               	movwf	___ftdiv@f1+2
 18283  14C2  318C  246D  3194   	fcall	___ftdiv
 18284  14C5  0020               	movlb	0	; select bank0
 18285  14C6  082E               	movf	?___ftdiv,w
 18286  14C7  00DF               	movwf	getDimmerLights_PercentToValue@i
 18287  14C8  082F               	movf	?___ftdiv+1,w
 18288  14C9  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 18289  14CA  0830               	movf	?___ftdiv+2,w
 18290  14CB  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 18291                           
 18292                           ;Dimmer_B1.c: 1246: return (char) (((char)(77*0.55)) - ((100 - value) * i));
 18293  14CC  085E               	movf	getDimmerLights_PercentToValue@value,w
 18294  14CD  00DC               	movwf	??_getDimmerLights_PercentToValue
 18295  14CE  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 18296  14CF  09DC               	comf	??_getDimmerLights_PercentToValue,f
 18297  14D0  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 18298  14D1  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 18299  14D2  1903               	skipnz
 18300  14D3  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 18301  14D4  085C               	movf	??_getDimmerLights_PercentToValue,w
 18302  14D5  3E64               	addlw	100
 18303  14D6  00A8               	movwf	___awtoft@c
 18304  14D7  3000               	movlw	0
 18305  14D8  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 18306  14D9  00A9               	movwf	___awtoft@c+1
 18307  14DA  319C  246E  3194   	fcall	___awtoft
 18308  14DD  0020               	movlb	0	; select bank0
 18309  14DE  0828               	movf	?___awtoft,w
 18310  14DF  00B1               	movwf	___ftmul@f2
 18311  14E0  0829               	movf	?___awtoft+1,w
 18312  14E1  00B2               	movwf	___ftmul@f2+1
 18313  14E2  082A               	movf	?___awtoft+2,w
 18314  14E3  00B3               	movwf	___ftmul@f2+2
 18315  14E4  085F               	movf	getDimmerLights_PercentToValue@i,w
 18316  14E5  00AE               	movwf	___ftmul@f1
 18317  14E6  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 18318  14E7  00AF               	movwf	___ftmul@f1+1
 18319  14E8  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 18320  14E9  00B0               	movwf	___ftmul@f1+2
 18321  14EA  318D  2516  3194   	fcall	___ftmul
 18322  14ED  0020               	movlb	0	; select bank0
 18323  14EE  082E               	movf	?___ftmul,w
 18324  14EF  00BE               	movwf	___ftneg@f1
 18325  14F0  082F               	movf	?___ftmul+1,w
 18326  14F1  00BF               	movwf	___ftneg@f1+1
 18327  14F2  0830               	movf	?___ftmul+2,w
 18328  14F3  00C0               	movwf	___ftneg@f1+2
 18329  14F4  31A6  26B3  3194   	fcall	___ftneg
 18330  14F7  0020               	movlb	0	; select bank0
 18331  14F8  083E               	movf	?___ftneg,w
 18332  14F9  00C4               	movwf	___ftadd@f2
 18333  14FA  083F               	movf	?___ftneg+1,w
 18334  14FB  00C5               	movwf	___ftadd@f2+1
 18335  14FC  0840               	movf	?___ftneg+2,w
 18336  14FD  00C6               	movwf	___ftadd@f2+2
 18337  14FE  3000               	movlw	0
 18338  14FF  00C1               	movwf	___ftadd@f1
 18339  1500  3028               	movlw	40
 18340  1501  00C2               	movwf	___ftadd@f1+1
 18341  1502  3042               	movlw	66
 18342  1503  00C3               	movwf	___ftadd@f1+2
 18343  1504  3183  238C  3194   	fcall	___ftadd
 18344  1507  0020               	movlb	0	; select bank0
 18345  1508  0841               	movf	?___ftadd,w
 18346  1509  00CE               	movwf	___fttol@f1
 18347  150A  0842               	movf	?___ftadd+1,w
 18348  150B  00CF               	movwf	___fttol@f1+1
 18349  150C  0843               	movf	?___ftadd+2,w
 18350  150D  00D0               	movwf	___fttol@f1+2
 18351  150E  318A  2230         	fcall	___fttol
 18352  1510  0020               	movlb	0	; select bank0
 18353  1511  084E               	movf	?___fttol,w
 18354  1512  0008               	return
 18355  1513                     __end_of_getDimmerLights_PercentToValue:	
 18356                           
 18357                           	psect	text123
 18358  0A30                     __ptext123:	
 18359 ;; *************** function ___fttol *****************
 18360 ;; Defined at:
 18361 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 18362 ;; Parameters:    Size  Location     Type
 18363 ;;  f1              3   46[BANK0 ] float 
 18364 ;; Auto vars:     Size  Location     Type
 18365 ;;  lval            4   55[BANK0 ] unsigned long 
 18366 ;;  exp1            1   59[BANK0 ] unsigned char 
 18367 ;;  sign1           1   54[BANK0 ] unsigned char 
 18368 ;; Return value:  Size  Location     Type
 18369 ;;                  4   46[BANK0 ] long 
 18370 ;; Registers used:
 18371 ;;		wreg, status,2, status,0
 18372 ;; Tracked objects:
 18373 ;;		On entry : 0/0
 18374 ;;		On exit  : 0/0
 18375 ;;		Unchanged: 0/0
 18376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18377 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18379 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;Total ram usage:       14 bytes
 18382 ;; Hardware stack levels used:    1
 18383 ;; Hardware stack levels required when called:    5
 18384 ;; This function calls:
 18385 ;;		Nothing
 18386 ;; This function is called by:
 18387 ;;		_getDimmerLights_PercentToValue
 18388 ;;		_getDimmerLights_ValueToPercent
 18389 ;; This function uses a non-reentrant model
 18390 ;;
 18391                           
 18392                           
 18393                           ;psect for function ___fttol
 18394  0A30                     ___fttol:	
 18395                           
 18396                           ;incstack = 0
 18397                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 18398  0A30  0020               	movlb	0	; select bank0
 18399  0A31  084E               	movf	___fttol@f1,w
 18400  0A32  00D2               	movwf	??___fttol
 18401  0A33  084F               	movf	___fttol@f1+1,w
 18402  0A34  00D3               	movwf	??___fttol+1
 18403  0A35  0850               	movf	___fttol@f1+2,w
 18404  0A36  00D4               	movwf	??___fttol+2
 18405  0A37  1003               	clrc
 18406  0A38  0D53               	rlf	??___fttol+1,w
 18407  0A39  0D54               	rlf	??___fttol+2,w
 18408  0A3A  00D5               	movwf	??___fttol+3
 18409  0A3B  0855               	movf	??___fttol+3,w
 18410  0A3C  00DB               	movwf	___fttol@exp1
 18411  0A3D  08DB               	movf	___fttol@exp1,f
 18412  0A3E  1D03               	skipz
 18413  0A3F  2A49               	goto	l6907
 18414  0A40  3000               	movlw	0
 18415  0A41  00D1               	movwf	?___fttol+3
 18416  0A42  3000               	movlw	0
 18417  0A43  00D0               	movwf	?___fttol+2
 18418  0A44  3000               	movlw	0
 18419  0A45  00CF               	movwf	?___fttol+1
 18420  0A46  3000               	movlw	0
 18421  0A47  00CE               	movwf	?___fttol
 18422  0A48  0008               	return
 18423  0A49                     l6907:	
 18424  0A49  084E               	movf	___fttol@f1,w
 18425  0A4A  00D2               	movwf	??___fttol
 18426  0A4B  084F               	movf	___fttol@f1+1,w
 18427  0A4C  00D3               	movwf	??___fttol+1
 18428  0A4D  0850               	movf	___fttol@f1+2,w
 18429  0A4E  00D4               	movwf	??___fttol+2
 18430  0A4F  3017               	movlw	23
 18431  0A50                     u6125:	
 18432  0A50  36D4               	lsrf	??___fttol+2,f
 18433  0A51  0CD3               	rrf	??___fttol+1,f
 18434  0A52  0CD2               	rrf	??___fttol,f
 18435  0A53  0B89               	decfsz	9,f
 18436  0A54  2A50               	goto	u6125
 18437  0A55  0852               	movf	??___fttol,w
 18438  0A56  00D5               	movwf	??___fttol+3
 18439  0A57  0855               	movf	??___fttol+3,w
 18440  0A58  00D6               	movwf	___fttol@sign1
 18441  0A59  17CF               	bsf	___fttol@f1+1,7
 18442  0A5A  30FF               	movlw	255
 18443  0A5B  05CE               	andwf	___fttol@f1,f
 18444  0A5C  30FF               	movlw	255
 18445  0A5D  05CF               	andwf	___fttol@f1+1,f
 18446  0A5E  3000               	movlw	0
 18447  0A5F  05D0               	andwf	___fttol@f1+2,f
 18448  0A60  084E               	movf	___fttol@f1,w
 18449  0A61  00D7               	movwf	___fttol@lval
 18450  0A62  084F               	movf	___fttol@f1+1,w
 18451  0A63  00D8               	movwf	___fttol@lval+1
 18452  0A64  0850               	movf	___fttol@f1+2,w
 18453  0A65  00D9               	movwf	___fttol@lval+2
 18454  0A66  01DA               	clrf	___fttol@lval+3
 18455  0A67  308E               	movlw	142
 18456  0A68  02DB               	subwf	___fttol@exp1,f
 18457  0A69  1FDB               	btfss	___fttol@exp1,7
 18458  0A6A  2A87               	goto	l6927
 18459  0A6B  085B               	movf	___fttol@exp1,w
 18460  0A6C  3A80               	xorlw	128
 18461  0A6D  3E8F               	addlw	143
 18462  0A6E  1803               	skipnc
 18463  0A6F  2A79               	goto	l6925
 18464  0A70  3000               	movlw	0
 18465  0A71  00D1               	movwf	?___fttol+3
 18466  0A72  3000               	movlw	0
 18467  0A73  00D0               	movwf	?___fttol+2
 18468  0A74  3000               	movlw	0
 18469  0A75  00CF               	movwf	?___fttol+1
 18470  0A76  3000               	movlw	0
 18471  0A77  00CE               	movwf	?___fttol
 18472  0A78  0008               	return
 18473  0A79                     l6925:	
 18474  0A79  3001               	movlw	1
 18475  0A7A                     u6155:	
 18476  0A7A  36DA               	lsrf	___fttol@lval+3,f
 18477  0A7B  0CD9               	rrf	___fttol@lval+2,f
 18478  0A7C  0CD8               	rrf	___fttol@lval+1,f
 18479  0A7D  0CD7               	rrf	___fttol@lval,f
 18480  0A7E  0B89               	decfsz	9,f
 18481  0A7F  2A7A               	goto	u6155
 18482  0A80  3001               	movlw	1
 18483  0A81  00D2               	movwf	??___fttol
 18484  0A82  0852               	movf	??___fttol,w
 18485  0A83  07DB               	addwf	___fttol@exp1,f
 18486  0A84  1903               	btfsc	3,2
 18487  0A85  2AA0               	goto	l6937
 18488  0A86  2A79               	goto	l6925
 18489  0A87                     l6927:	
 18490  0A87  3018               	movlw	24
 18491  0A88  025B               	subwf	___fttol@exp1,w
 18492  0A89  1C03               	skipc
 18493  0A8A  2A9D               	goto	l6935
 18494  0A8B  3000               	movlw	0
 18495  0A8C  00D1               	movwf	?___fttol+3
 18496  0A8D  3000               	movlw	0
 18497  0A8E  00D0               	movwf	?___fttol+2
 18498  0A8F  3000               	movlw	0
 18499  0A90  00CF               	movwf	?___fttol+1
 18500  0A91  3000               	movlw	0
 18501  0A92  00CE               	movwf	?___fttol
 18502  0A93  0008               	return
 18503  0A94                     l6933:	
 18504  0A94  3001               	movlw	1
 18505  0A95                     u6185:	
 18506  0A95  35D7               	lslf	___fttol@lval,f
 18507  0A96  0DD8               	rlf	___fttol@lval+1,f
 18508  0A97  0DD9               	rlf	___fttol@lval+2,f
 18509  0A98  0DDA               	rlf	___fttol@lval+3,f
 18510  0A99  0B89               	decfsz	9,f
 18511  0A9A  2A95               	goto	u6185
 18512  0A9B  3001               	movlw	1
 18513  0A9C  02DB               	subwf	___fttol@exp1,f
 18514  0A9D                     l6935:	
 18515  0A9D  08DB               	movf	___fttol@exp1,f
 18516  0A9E  1D03               	skipz
 18517  0A9F  2A94               	goto	l6933
 18518  0AA0                     l6937:	
 18519  0AA0  0856               	movf	___fttol@sign1,w
 18520  0AA1  1903               	btfsc	3,2
 18521  0AA2  2AAE               	goto	l6941
 18522  0AA3  09D7               	comf	___fttol@lval,f
 18523  0AA4  09D8               	comf	___fttol@lval+1,f
 18524  0AA5  09D9               	comf	___fttol@lval+2,f
 18525  0AA6  09DA               	comf	___fttol@lval+3,f
 18526  0AA7  0AD7               	incf	___fttol@lval,f
 18527  0AA8  1903               	skipnz
 18528  0AA9  0AD8               	incf	___fttol@lval+1,f
 18529  0AAA  1903               	skipnz
 18530  0AAB  0AD9               	incf	___fttol@lval+2,f
 18531  0AAC  1903               	skipnz
 18532  0AAD  0ADA               	incf	___fttol@lval+3,f
 18533  0AAE                     l6941:	
 18534  0AAE  085A               	movf	___fttol@lval+3,w
 18535  0AAF  00D1               	movwf	?___fttol+3
 18536  0AB0  0859               	movf	___fttol@lval+2,w
 18537  0AB1  00D0               	movwf	?___fttol+2
 18538  0AB2  0858               	movf	___fttol@lval+1,w
 18539  0AB3  00CF               	movwf	?___fttol+1
 18540  0AB4  0857               	movf	___fttol@lval,w
 18541  0AB5  00CE               	movwf	?___fttol
 18542  0AB6  0008               	return
 18543  0AB7                     __end_of___fttol:	
 18544                           
 18545                           	psect	text124
 18546  26B3                     __ptext124:	
 18547 ;; *************** function ___ftneg *****************
 18548 ;; Defined at:
 18549 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 18550 ;; Parameters:    Size  Location     Type
 18551 ;;  f1              3   30[BANK0 ] float 
 18552 ;; Auto vars:     Size  Location     Type
 18553 ;;		None
 18554 ;; Return value:  Size  Location     Type
 18555 ;;                  3   30[BANK0 ] float 
 18556 ;; Registers used:
 18557 ;;		wreg
 18558 ;; Tracked objects:
 18559 ;;		On entry : 0/0
 18560 ;;		On exit  : 0/0
 18561 ;;		Unchanged: 0/0
 18562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18563 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18566 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18567 ;;Total ram usage:        3 bytes
 18568 ;; Hardware stack levels used:    1
 18569 ;; Hardware stack levels required when called:    5
 18570 ;; This function calls:
 18571 ;;		Nothing
 18572 ;; This function is called by:
 18573 ;;		_getDimmerLights_PercentToValue
 18574 ;;		_getDimmerLights_ValueToPercent
 18575 ;; This function uses a non-reentrant model
 18576 ;;
 18577                           
 18578                           
 18579                           ;psect for function ___ftneg
 18580  26B3                     ___ftneg:	
 18581                           
 18582                           ;incstack = 0
 18583                           ; Regs used in ___ftneg: [wreg]
 18584  26B3  0020               	movlb	0	; select bank0
 18585  26B4  0840               	movf	___ftneg@f1+2,w
 18586  26B5  043F               	iorwf	___ftneg@f1+1,w
 18587  26B6  043E               	iorwf	___ftneg@f1,w
 18588  26B7  1903               	skipnz
 18589  26B8  0008               	return
 18590  26B9  3080               	movlw	128
 18591  26BA  06C0               	xorwf	___ftneg@f1+2,f
 18592  26BB  0008               	return
 18593  26BC                     __end_of___ftneg:	
 18594                           
 18595                           	psect	text125
 18596  0D16                     __ptext125:	
 18597 ;; *************** function ___ftmul *****************
 18598 ;; Defined at:
 18599 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 18600 ;; Parameters:    Size  Location     Type
 18601 ;;  f1              3   14[BANK0 ] float 
 18602 ;;  f2              3   17[BANK0 ] float 
 18603 ;; Auto vars:     Size  Location     Type
 18604 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 18605 ;;  sign            1   29[BANK0 ] unsigned char 
 18606 ;;  cntr            1   28[BANK0 ] unsigned char 
 18607 ;;  exp             1   24[BANK0 ] unsigned char 
 18608 ;; Return value:  Size  Location     Type
 18609 ;;                  3   14[BANK0 ] float 
 18610 ;; Registers used:
 18611 ;;		wreg, status,2, status,0, pclath, cstack
 18612 ;; Tracked objects:
 18613 ;;		On entry : 0/0
 18614 ;;		On exit  : 0/0
 18615 ;;		Unchanged: 0/0
 18616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18617 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18618 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18619 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18620 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18621 ;;Total ram usage:       16 bytes
 18622 ;; Hardware stack levels used:    1
 18623 ;; Hardware stack levels required when called:    6
 18624 ;; This function calls:
 18625 ;;		___ftpack
 18626 ;; This function is called by:
 18627 ;;		_getDimmerLights_PercentToValue
 18628 ;; This function uses a non-reentrant model
 18629 ;;
 18630                           
 18631                           
 18632                           ;psect for function ___ftmul
 18633  0D16                     ___ftmul:	
 18634                           
 18635                           ;incstack = 0
 18636                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 18637  0D16  0020               	movlb	0	; select bank0
 18638  0D17  082E               	movf	___ftmul@f1,w
 18639  0D18  00B4               	movwf	??___ftmul
 18640  0D19  082F               	movf	___ftmul@f1+1,w
 18641  0D1A  00B5               	movwf	??___ftmul+1
 18642  0D1B  0830               	movf	___ftmul@f1+2,w
 18643  0D1C  00B6               	movwf	??___ftmul+2
 18644  0D1D  1003               	clrc
 18645  0D1E  0D35               	rlf	??___ftmul+1,w
 18646  0D1F  0D36               	rlf	??___ftmul+2,w
 18647  0D20  00B7               	movwf	??___ftmul+3
 18648  0D21  0837               	movf	??___ftmul+3,w
 18649  0D22  00B8               	movwf	___ftmul@exp
 18650  0D23  08B8               	movf	___ftmul@exp,f
 18651  0D24  1D03               	skipz
 18652  0D25  2D2D               	goto	l6849
 18653  0D26  3000               	movlw	0
 18654  0D27  00AE               	movwf	?___ftmul
 18655  0D28  3000               	movlw	0
 18656  0D29  00AF               	movwf	?___ftmul+1
 18657  0D2A  3000               	movlw	0
 18658  0D2B  00B0               	movwf	?___ftmul+2
 18659  0D2C  0008               	return
 18660  0D2D                     l6849:	
 18661  0D2D  0831               	movf	___ftmul@f2,w
 18662  0D2E  00B4               	movwf	??___ftmul
 18663  0D2F  0832               	movf	___ftmul@f2+1,w
 18664  0D30  00B5               	movwf	??___ftmul+1
 18665  0D31  0833               	movf	___ftmul@f2+2,w
 18666  0D32  00B6               	movwf	??___ftmul+2
 18667  0D33  1003               	clrc
 18668  0D34  0D35               	rlf	??___ftmul+1,w
 18669  0D35  0D36               	rlf	??___ftmul+2,w
 18670  0D36  00B7               	movwf	??___ftmul+3
 18671  0D37  0837               	movf	??___ftmul+3,w
 18672  0D38  00BD               	movwf	___ftmul@sign
 18673  0D39  08BD               	movf	___ftmul@sign,f
 18674  0D3A  1D03               	skipz
 18675  0D3B  2D43               	goto	l6855
 18676  0D3C  3000               	movlw	0
 18677  0D3D  00AE               	movwf	?___ftmul
 18678  0D3E  3000               	movlw	0
 18679  0D3F  00AF               	movwf	?___ftmul+1
 18680  0D40  3000               	movlw	0
 18681  0D41  00B0               	movwf	?___ftmul+2
 18682  0D42  0008               	return
 18683  0D43                     l6855:	
 18684  0D43  083D               	movf	___ftmul@sign,w
 18685  0D44  3E7B               	addlw	123
 18686  0D45  00B4               	movwf	??___ftmul
 18687  0D46  0834               	movf	??___ftmul,w
 18688  0D47  07B8               	addwf	___ftmul@exp,f
 18689  0D48  082E               	movf	___ftmul@f1,w
 18690  0D49  00B4               	movwf	??___ftmul
 18691  0D4A  082F               	movf	___ftmul@f1+1,w
 18692  0D4B  00B5               	movwf	??___ftmul+1
 18693  0D4C  0830               	movf	___ftmul@f1+2,w
 18694  0D4D  00B6               	movwf	??___ftmul+2
 18695  0D4E  3010               	movlw	16
 18696  0D4F                     u6005:	
 18697  0D4F  36B6               	lsrf	??___ftmul+2,f
 18698  0D50  0CB5               	rrf	??___ftmul+1,f
 18699  0D51  0CB4               	rrf	??___ftmul,f
 18700  0D52  0B89               	decfsz	9,f
 18701  0D53  2D4F               	goto	u6005
 18702  0D54  0834               	movf	??___ftmul,w
 18703  0D55  00B7               	movwf	??___ftmul+3
 18704  0D56  0837               	movf	??___ftmul+3,w
 18705  0D57  00BD               	movwf	___ftmul@sign
 18706  0D58  0831               	movf	___ftmul@f2,w
 18707  0D59  00B4               	movwf	??___ftmul
 18708  0D5A  0832               	movf	___ftmul@f2+1,w
 18709  0D5B  00B5               	movwf	??___ftmul+1
 18710  0D5C  0833               	movf	___ftmul@f2+2,w
 18711  0D5D  00B6               	movwf	??___ftmul+2
 18712  0D5E  3010               	movlw	16
 18713  0D5F                     u6015:	
 18714  0D5F  36B6               	lsrf	??___ftmul+2,f
 18715  0D60  0CB5               	rrf	??___ftmul+1,f
 18716  0D61  0CB4               	rrf	??___ftmul,f
 18717  0D62  0B89               	decfsz	9,f
 18718  0D63  2D5F               	goto	u6015
 18719  0D64  0834               	movf	??___ftmul,w
 18720  0D65  00B7               	movwf	??___ftmul+3
 18721  0D66  0837               	movf	??___ftmul+3,w
 18722  0D67  06BD               	xorwf	___ftmul@sign,f
 18723  0D68  3080               	movlw	128
 18724  0D69  00B4               	movwf	??___ftmul
 18725  0D6A  0834               	movf	??___ftmul,w
 18726  0D6B  05BD               	andwf	___ftmul@sign,f
 18727  0D6C  17AF               	bsf	___ftmul@f1+1,7
 18728  0D6D  17B2               	bsf	___ftmul@f2+1,7
 18729  0D6E  30FF               	movlw	255
 18730  0D6F  05B1               	andwf	___ftmul@f2,f
 18731  0D70  30FF               	movlw	255
 18732  0D71  05B2               	andwf	___ftmul@f2+1,f
 18733  0D72  3000               	movlw	0
 18734  0D73  05B3               	andwf	___ftmul@f2+2,f
 18735  0D74  3000               	movlw	0
 18736  0D75  00B9               	movwf	___ftmul@f3_as_product
 18737  0D76  3000               	movlw	0
 18738  0D77  00BA               	movwf	___ftmul@f3_as_product+1
 18739  0D78  3000               	movlw	0
 18740  0D79  00BB               	movwf	___ftmul@f3_as_product+2
 18741  0D7A  3007               	movlw	7
 18742  0D7B  00B4               	movwf	??___ftmul
 18743  0D7C  0834               	movf	??___ftmul,w
 18744  0D7D  00BC               	movwf	___ftmul@cntr
 18745  0D7E                     l6867:	
 18746  0D7E  1C2E               	btfss	___ftmul@f1,0
 18747  0D7F  2D86               	goto	l6871
 18748  0D80  0831               	movf	___ftmul@f2,w
 18749  0D81  07B9               	addwf	___ftmul@f3_as_product,f
 18750  0D82  0832               	movf	___ftmul@f2+1,w
 18751  0D83  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 18752  0D84  0833               	movf	___ftmul@f2+2,w
 18753  0D85  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 18754  0D86                     l6871:	
 18755  0D86  3001               	movlw	1
 18756  0D87                     u6035:	
 18757  0D87  36B0               	lsrf	___ftmul@f1+2,f
 18758  0D88  0CAF               	rrf	___ftmul@f1+1,f
 18759  0D89  0CAE               	rrf	___ftmul@f1,f
 18760  0D8A  0B89               	decfsz	9,f
 18761  0D8B  2D87               	goto	u6035
 18762  0D8C  3001               	movlw	1
 18763  0D8D                     u6045:	
 18764  0D8D  35B1               	lslf	___ftmul@f2,f
 18765  0D8E  0DB2               	rlf	___ftmul@f2+1,f
 18766  0D8F  0DB3               	rlf	___ftmul@f2+2,f
 18767  0D90  0B89               	decfsz	9,f
 18768  0D91  2D8D               	goto	u6045
 18769  0D92  3001               	movlw	1
 18770  0D93  02BC               	subwf	___ftmul@cntr,f
 18771  0D94  1D03               	btfss	3,2
 18772  0D95  2D7E               	goto	l6867
 18773  0D96  3009               	movlw	9
 18774  0D97  00B4               	movwf	??___ftmul
 18775  0D98  0834               	movf	??___ftmul,w
 18776  0D99  00BC               	movwf	___ftmul@cntr
 18777  0D9A                     l6879:	
 18778  0D9A  1C2E               	btfss	___ftmul@f1,0
 18779  0D9B  2DA2               	goto	l6883
 18780  0D9C  0831               	movf	___ftmul@f2,w
 18781  0D9D  07B9               	addwf	___ftmul@f3_as_product,f
 18782  0D9E  0832               	movf	___ftmul@f2+1,w
 18783  0D9F  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 18784  0DA0  0833               	movf	___ftmul@f2+2,w
 18785  0DA1  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 18786  0DA2                     l6883:	
 18787  0DA2  3001               	movlw	1
 18788  0DA3                     u6075:	
 18789  0DA3  36B0               	lsrf	___ftmul@f1+2,f
 18790  0DA4  0CAF               	rrf	___ftmul@f1+1,f
 18791  0DA5  0CAE               	rrf	___ftmul@f1,f
 18792  0DA6  0B89               	decfsz	9,f
 18793  0DA7  2DA3               	goto	u6075
 18794  0DA8  3001               	movlw	1
 18795  0DA9                     u6085:	
 18796  0DA9  36BB               	lsrf	___ftmul@f3_as_product+2,f
 18797  0DAA  0CBA               	rrf	___ftmul@f3_as_product+1,f
 18798  0DAB  0CB9               	rrf	___ftmul@f3_as_product,f
 18799  0DAC  0B89               	decfsz	9,f
 18800  0DAD  2DA9               	goto	u6085
 18801  0DAE  3001               	movlw	1
 18802  0DAF  02BC               	subwf	___ftmul@cntr,f
 18803  0DB0  1D03               	btfss	3,2
 18804  0DB1  2D9A               	goto	l6879
 18805  0DB2  0839               	movf	___ftmul@f3_as_product,w
 18806  0DB3  00A0               	movwf	___ftpack@arg
 18807  0DB4  083A               	movf	___ftmul@f3_as_product+1,w
 18808  0DB5  00A1               	movwf	___ftpack@arg+1
 18809  0DB6  083B               	movf	___ftmul@f3_as_product+2,w
 18810  0DB7  00A2               	movwf	___ftpack@arg+2
 18811  0DB8  0838               	movf	___ftmul@exp,w
 18812  0DB9  00B4               	movwf	??___ftmul
 18813  0DBA  0834               	movf	??___ftmul,w
 18814  0DBB  00A3               	movwf	___ftpack@exp
 18815  0DBC  083D               	movf	___ftmul@sign,w
 18816  0DBD  00B5               	movwf	??___ftmul+1
 18817  0DBE  0835               	movf	??___ftmul+1,w
 18818  0DBF  00A4               	movwf	___ftpack@sign
 18819  0DC0  3193  23E9         	fcall	___ftpack
 18820  0DC2  0020               	movlb	0	; select bank0
 18821  0DC3  0820               	movf	?___ftpack,w
 18822  0DC4  00AE               	movwf	?___ftmul
 18823  0DC5  0821               	movf	?___ftpack+1,w
 18824  0DC6  00AF               	movwf	?___ftmul+1
 18825  0DC7  0822               	movf	?___ftpack+2,w
 18826  0DC8  00B0               	movwf	?___ftmul+2
 18827  0DC9  0008               	return
 18828  0DCA                     __end_of___ftmul:	
 18829                           
 18830                           	psect	text126
 18831  0C6D                     __ptext126:	
 18832 ;; *************** function ___ftdiv *****************
 18833 ;; Defined at:
 18834 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18835 ;; Parameters:    Size  Location     Type
 18836 ;;  f2              3   14[BANK0 ] float 
 18837 ;;  f1              3   17[BANK0 ] float 
 18838 ;; Auto vars:     Size  Location     Type
 18839 ;;  f3              3   25[BANK0 ] float 
 18840 ;;  sign            1   29[BANK0 ] unsigned char 
 18841 ;;  exp             1   28[BANK0 ] unsigned char 
 18842 ;;  cntr            1   24[BANK0 ] unsigned char 
 18843 ;; Return value:  Size  Location     Type
 18844 ;;                  3   14[BANK0 ] float 
 18845 ;; Registers used:
 18846 ;;		wreg, status,2, status,0, pclath, cstack
 18847 ;; Tracked objects:
 18848 ;;		On entry : 0/0
 18849 ;;		On exit  : 0/0
 18850 ;;		Unchanged: 0/0
 18851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18852 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18853 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18855 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18856 ;;Total ram usage:       16 bytes
 18857 ;; Hardware stack levels used:    1
 18858 ;; Hardware stack levels required when called:    6
 18859 ;; This function calls:
 18860 ;;		___ftpack
 18861 ;; This function is called by:
 18862 ;;		_getDimmerLights_PercentToValue
 18863 ;;		_getDimmerLights_ValueToPercent
 18864 ;; This function uses a non-reentrant model
 18865 ;;
 18866                           
 18867                           
 18868                           ;psect for function ___ftdiv
 18869  0C6D                     ___ftdiv:	
 18870                           
 18871                           ;incstack = 0
 18872                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18873  0C6D  0020               	movlb	0	; select bank0
 18874  0C6E  0831               	movf	___ftdiv@f1,w
 18875  0C6F  00B4               	movwf	??___ftdiv
 18876  0C70  0832               	movf	___ftdiv@f1+1,w
 18877  0C71  00B5               	movwf	??___ftdiv+1
 18878  0C72  0833               	movf	___ftdiv@f1+2,w
 18879  0C73  00B6               	movwf	??___ftdiv+2
 18880  0C74  1003               	clrc
 18881  0C75  0D35               	rlf	??___ftdiv+1,w
 18882  0C76  0D36               	rlf	??___ftdiv+2,w
 18883  0C77  00B7               	movwf	??___ftdiv+3
 18884  0C78  0837               	movf	??___ftdiv+3,w
 18885  0C79  00BC               	movwf	___ftdiv@exp
 18886  0C7A  08BC               	movf	___ftdiv@exp,f
 18887  0C7B  1D03               	skipz
 18888  0C7C  2C84               	goto	l6807
 18889  0C7D  3000               	movlw	0
 18890  0C7E  00AE               	movwf	?___ftdiv
 18891  0C7F  3000               	movlw	0
 18892  0C80  00AF               	movwf	?___ftdiv+1
 18893  0C81  3000               	movlw	0
 18894  0C82  00B0               	movwf	?___ftdiv+2
 18895  0C83  0008               	return
 18896  0C84                     l6807:	
 18897  0C84  082E               	movf	___ftdiv@f2,w
 18898  0C85  00B4               	movwf	??___ftdiv
 18899  0C86  082F               	movf	___ftdiv@f2+1,w
 18900  0C87  00B5               	movwf	??___ftdiv+1
 18901  0C88  0830               	movf	___ftdiv@f2+2,w
 18902  0C89  00B6               	movwf	??___ftdiv+2
 18903  0C8A  1003               	clrc
 18904  0C8B  0D35               	rlf	??___ftdiv+1,w
 18905  0C8C  0D36               	rlf	??___ftdiv+2,w
 18906  0C8D  00B7               	movwf	??___ftdiv+3
 18907  0C8E  0837               	movf	??___ftdiv+3,w
 18908  0C8F  00BD               	movwf	___ftdiv@sign
 18909  0C90  08BD               	movf	___ftdiv@sign,f
 18910  0C91  1D03               	skipz
 18911  0C92  2C9A               	goto	l6813
 18912  0C93  3000               	movlw	0
 18913  0C94  00AE               	movwf	?___ftdiv
 18914  0C95  3000               	movlw	0
 18915  0C96  00AF               	movwf	?___ftdiv+1
 18916  0C97  3000               	movlw	0
 18917  0C98  00B0               	movwf	?___ftdiv+2
 18918  0C99  0008               	return
 18919  0C9A                     l6813:	
 18920  0C9A  3000               	movlw	0
 18921  0C9B  00B9               	movwf	___ftdiv@f3
 18922  0C9C  3000               	movlw	0
 18923  0C9D  00BA               	movwf	___ftdiv@f3+1
 18924  0C9E  3000               	movlw	0
 18925  0C9F  00BB               	movwf	___ftdiv@f3+2
 18926  0CA0  3089               	movlw	137
 18927  0CA1  073D               	addwf	___ftdiv@sign,w
 18928  0CA2  00B4               	movwf	??___ftdiv
 18929  0CA3  0834               	movf	??___ftdiv,w
 18930  0CA4  02BC               	subwf	___ftdiv@exp,f
 18931  0CA5  0831               	movf	___ftdiv@f1,w
 18932  0CA6  00B4               	movwf	??___ftdiv
 18933  0CA7  0832               	movf	___ftdiv@f1+1,w
 18934  0CA8  00B5               	movwf	??___ftdiv+1
 18935  0CA9  0833               	movf	___ftdiv@f1+2,w
 18936  0CAA  00B6               	movwf	??___ftdiv+2
 18937  0CAB  3010               	movlw	16
 18938  0CAC                     u5925:	
 18939  0CAC  36B6               	lsrf	??___ftdiv+2,f
 18940  0CAD  0CB5               	rrf	??___ftdiv+1,f
 18941  0CAE  0CB4               	rrf	??___ftdiv,f
 18942  0CAF  0B89               	decfsz	9,f
 18943  0CB0  2CAC               	goto	u5925
 18944  0CB1  0834               	movf	??___ftdiv,w
 18945  0CB2  00B7               	movwf	??___ftdiv+3
 18946  0CB3  0837               	movf	??___ftdiv+3,w
 18947  0CB4  00BD               	movwf	___ftdiv@sign
 18948  0CB5  082E               	movf	___ftdiv@f2,w
 18949  0CB6  00B4               	movwf	??___ftdiv
 18950  0CB7  082F               	movf	___ftdiv@f2+1,w
 18951  0CB8  00B5               	movwf	??___ftdiv+1
 18952  0CB9  0830               	movf	___ftdiv@f2+2,w
 18953  0CBA  00B6               	movwf	??___ftdiv+2
 18954  0CBB  3010               	movlw	16
 18955  0CBC                     u5935:	
 18956  0CBC  36B6               	lsrf	??___ftdiv+2,f
 18957  0CBD  0CB5               	rrf	??___ftdiv+1,f
 18958  0CBE  0CB4               	rrf	??___ftdiv,f
 18959  0CBF  0B89               	decfsz	9,f
 18960  0CC0  2CBC               	goto	u5935
 18961  0CC1  0834               	movf	??___ftdiv,w
 18962  0CC2  00B7               	movwf	??___ftdiv+3
 18963  0CC3  0837               	movf	??___ftdiv+3,w
 18964  0CC4  06BD               	xorwf	___ftdiv@sign,f
 18965  0CC5  3080               	movlw	128
 18966  0CC6  00B4               	movwf	??___ftdiv
 18967  0CC7  0834               	movf	??___ftdiv,w
 18968  0CC8  05BD               	andwf	___ftdiv@sign,f
 18969  0CC9  17B2               	bsf	___ftdiv@f1+1,7
 18970  0CCA  30FF               	movlw	255
 18971  0CCB  05B1               	andwf	___ftdiv@f1,f
 18972  0CCC  30FF               	movlw	255
 18973  0CCD  05B2               	andwf	___ftdiv@f1+1,f
 18974  0CCE  3000               	movlw	0
 18975  0CCF  05B3               	andwf	___ftdiv@f1+2,f
 18976  0CD0  17AF               	bsf	___ftdiv@f2+1,7
 18977  0CD1  30FF               	movlw	255
 18978  0CD2  05AE               	andwf	___ftdiv@f2,f
 18979  0CD3  30FF               	movlw	255
 18980  0CD4  05AF               	andwf	___ftdiv@f2+1,f
 18981  0CD5  3000               	movlw	0
 18982  0CD6  05B0               	andwf	___ftdiv@f2+2,f
 18983  0CD7  3018               	movlw	24
 18984  0CD8  00B4               	movwf	??___ftdiv
 18985  0CD9  0834               	movf	??___ftdiv,w
 18986  0CDA  00B8               	movwf	___ftdiv@cntr
 18987  0CDB                     l6827:	
 18988  0CDB  3001               	movlw	1
 18989  0CDC                     u5945:	
 18990  0CDC  35B9               	lslf	___ftdiv@f3,f
 18991  0CDD  0DBA               	rlf	___ftdiv@f3+1,f
 18992  0CDE  0DBB               	rlf	___ftdiv@f3+2,f
 18993  0CDF  0B89               	decfsz	9,f
 18994  0CE0  2CDC               	goto	u5945
 18995  0CE1  0830               	movf	___ftdiv@f2+2,w
 18996  0CE2  0233               	subwf	___ftdiv@f1+2,w
 18997  0CE3  1D03               	skipz
 18998  0CE4  2CEB               	goto	u5955
 18999  0CE5  082F               	movf	___ftdiv@f2+1,w
 19000  0CE6  0232               	subwf	___ftdiv@f1+1,w
 19001  0CE7  1D03               	skipz
 19002  0CE8  2CEB               	goto	u5955
 19003  0CE9  082E               	movf	___ftdiv@f2,w
 19004  0CEA  0231               	subwf	___ftdiv@f1,w
 19005  0CEB                     u5955:	
 19006  0CEB  1C03               	skipc
 19007  0CEC  2CF4               	goto	l6835
 19008  0CED  082E               	movf	___ftdiv@f2,w
 19009  0CEE  02B1               	subwf	___ftdiv@f1,f
 19010  0CEF  082F               	movf	___ftdiv@f2+1,w
 19011  0CF0  3BB2               	subwfb	___ftdiv@f1+1,f
 19012  0CF1  0830               	movf	___ftdiv@f2+2,w
 19013  0CF2  3BB3               	subwfb	___ftdiv@f1+2,f
 19014  0CF3  1439               	bsf	___ftdiv@f3,0
 19015  0CF4                     l6835:	
 19016  0CF4  3001               	movlw	1
 19017  0CF5                     u5965:	
 19018  0CF5  35B1               	lslf	___ftdiv@f1,f
 19019  0CF6  0DB2               	rlf	___ftdiv@f1+1,f
 19020  0CF7  0DB3               	rlf	___ftdiv@f1+2,f
 19021  0CF8  0B89               	decfsz	9,f
 19022  0CF9  2CF5               	goto	u5965
 19023  0CFA  3001               	movlw	1
 19024  0CFB  02B8               	subwf	___ftdiv@cntr,f
 19025  0CFC  1D03               	btfss	3,2
 19026  0CFD  2CDB               	goto	l6827
 19027  0CFE  0839               	movf	___ftdiv@f3,w
 19028  0CFF  00A0               	movwf	___ftpack@arg
 19029  0D00  083A               	movf	___ftdiv@f3+1,w
 19030  0D01  00A1               	movwf	___ftpack@arg+1
 19031  0D02  083B               	movf	___ftdiv@f3+2,w
 19032  0D03  00A2               	movwf	___ftpack@arg+2
 19033  0D04  083C               	movf	___ftdiv@exp,w
 19034  0D05  00B4               	movwf	??___ftdiv
 19035  0D06  0834               	movf	??___ftdiv,w
 19036  0D07  00A3               	movwf	___ftpack@exp
 19037  0D08  083D               	movf	___ftdiv@sign,w
 19038  0D09  00B5               	movwf	??___ftdiv+1
 19039  0D0A  0835               	movf	??___ftdiv+1,w
 19040  0D0B  00A4               	movwf	___ftpack@sign
 19041  0D0C  3193  23E9         	fcall	___ftpack
 19042  0D0E  0020               	movlb	0	; select bank0
 19043  0D0F  0820               	movf	?___ftpack,w
 19044  0D10  00AE               	movwf	?___ftdiv
 19045  0D11  0821               	movf	?___ftpack+1,w
 19046  0D12  00AF               	movwf	?___ftdiv+1
 19047  0D13  0822               	movf	?___ftpack+2,w
 19048  0D14  00B0               	movwf	?___ftdiv+2
 19049  0D15  0008               	return
 19050  0D16                     __end_of___ftdiv:	
 19051                           
 19052                           	psect	text127
 19053  038C                     __ptext127:	
 19054 ;; *************** function ___ftadd *****************
 19055 ;; Defined at:
 19056 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 19057 ;; Parameters:    Size  Location     Type
 19058 ;;  f1              3   33[BANK0 ] float 
 19059 ;;  f2              3   36[BANK0 ] float 
 19060 ;; Auto vars:     Size  Location     Type
 19061 ;;  exp1            1   45[BANK0 ] unsigned char 
 19062 ;;  exp2            1   44[BANK0 ] unsigned char 
 19063 ;;  sign            1   43[BANK0 ] unsigned char 
 19064 ;; Return value:  Size  Location     Type
 19065 ;;                  3   33[BANK0 ] float 
 19066 ;; Registers used:
 19067 ;;		wreg, status,2, status,0, pclath, cstack
 19068 ;; Tracked objects:
 19069 ;;		On entry : 0/0
 19070 ;;		On exit  : 0/0
 19071 ;;		Unchanged: 0/0
 19072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19073 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19074 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19075 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19076 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19077 ;;Total ram usage:       13 bytes
 19078 ;; Hardware stack levels used:    1
 19079 ;; Hardware stack levels required when called:    6
 19080 ;; This function calls:
 19081 ;;		___ftpack
 19082 ;; This function is called by:
 19083 ;;		_getDimmerLights_PercentToValue
 19084 ;;		_getDimmerLights_ValueToPercent
 19085 ;; This function uses a non-reentrant model
 19086 ;;
 19087                           
 19088                           
 19089                           ;psect for function ___ftadd
 19090  038C                     ___ftadd:	
 19091                           
 19092                           ;incstack = 0
 19093                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 19094  038C  0020               	movlb	0	; select bank0
 19095  038D  0841               	movf	___ftadd@f1,w
 19096  038E  00C7               	movwf	??___ftadd
 19097  038F  0842               	movf	___ftadd@f1+1,w
 19098  0390  00C8               	movwf	??___ftadd+1
 19099  0391  0843               	movf	___ftadd@f1+2,w
 19100  0392  00C9               	movwf	??___ftadd+2
 19101  0393  1003               	clrc
 19102  0394  0D48               	rlf	??___ftadd+1,w
 19103  0395  0D49               	rlf	??___ftadd+2,w
 19104  0396  00CA               	movwf	??___ftadd+3
 19105  0397  084A               	movf	??___ftadd+3,w
 19106  0398  00CD               	movwf	___ftadd@exp1
 19107  0399  0844               	movf	___ftadd@f2,w
 19108  039A  00C7               	movwf	??___ftadd
 19109  039B  0845               	movf	___ftadd@f2+1,w
 19110  039C  00C8               	movwf	??___ftadd+1
 19111  039D  0846               	movf	___ftadd@f2+2,w
 19112  039E  00C9               	movwf	??___ftadd+2
 19113  039F  1003               	clrc
 19114  03A0  0D48               	rlf	??___ftadd+1,w
 19115  03A1  0D49               	rlf	??___ftadd+2,w
 19116  03A2  00CA               	movwf	??___ftadd+3
 19117  03A3  084A               	movf	??___ftadd+3,w
 19118  03A4  00CC               	movwf	___ftadd@exp2
 19119  03A5  084D               	movf	___ftadd@exp1,w
 19120  03A6  1903               	btfsc	3,2
 19121  03A7  2BB4               	goto	l6737
 19122  03A8  084C               	movf	___ftadd@exp2,w
 19123  03A9  024D               	subwf	___ftadd@exp1,w
 19124  03AA  1803               	skipnc
 19125  03AB  2BBB               	goto	l6741
 19126  03AC  034D               	decf	___ftadd@exp1,w
 19127  03AD  3AFF               	xorlw	255
 19128  03AE  074C               	addwf	___ftadd@exp2,w
 19129  03AF  00C7               	movwf	??___ftadd
 19130  03B0  3019               	movlw	25
 19131  03B1  0247               	subwf	??___ftadd,w
 19132  03B2  1C03               	skipc
 19133  03B3  2BBB               	goto	l6741
 19134  03B4                     l6737:	
 19135  03B4  0844               	movf	___ftadd@f2,w
 19136  03B5  00C1               	movwf	?___ftadd
 19137  03B6  0845               	movf	___ftadd@f2+1,w
 19138  03B7  00C2               	movwf	?___ftadd+1
 19139  03B8  0846               	movf	___ftadd@f2+2,w
 19140  03B9  00C3               	movwf	?___ftadd+2
 19141  03BA  0008               	return
 19142  03BB                     l6741:	
 19143  03BB  084C               	movf	___ftadd@exp2,w
 19144  03BC  1903               	btfsc	3,2
 19145  03BD  0008               	return
 19146  03BE  084D               	movf	___ftadd@exp1,w
 19147  03BF  024C               	subwf	___ftadd@exp2,w
 19148  03C0  1803               	skipnc
 19149  03C1  2BCA               	goto	l6747
 19150  03C2  034C               	decf	___ftadd@exp2,w
 19151  03C3  3AFF               	xorlw	255
 19152  03C4  074D               	addwf	___ftadd@exp1,w
 19153  03C5  00C7               	movwf	??___ftadd
 19154  03C6  3019               	movlw	25
 19155  03C7  0247               	subwf	??___ftadd,w
 19156  03C8  1803               	btfsc	3,0
 19157  03C9  0008               	return
 19158  03CA                     l6747:	
 19159  03CA  3006               	movlw	6
 19160  03CB  00C7               	movwf	??___ftadd
 19161  03CC  0847               	movf	??___ftadd,w
 19162  03CD  00CB               	movwf	___ftadd@sign
 19163  03CE  1BC3               	btfsc	___ftadd@f1+2,7
 19164  03CF  17CB               	bsf	___ftadd@sign,7
 19165  03D0  1BC6               	btfsc	___ftadd@f2+2,7
 19166  03D1  174B               	bsf	___ftadd@sign,6
 19167  03D2  17C2               	bsf	___ftadd@f1+1,7
 19168  03D3  30FF               	movlw	255
 19169  03D4  05C1               	andwf	___ftadd@f1,f
 19170  03D5  30FF               	movlw	255
 19171  03D6  05C2               	andwf	___ftadd@f1+1,f
 19172  03D7  3000               	movlw	0
 19173  03D8  05C3               	andwf	___ftadd@f1+2,f
 19174  03D9  17C5               	bsf	___ftadd@f2+1,7
 19175  03DA  30FF               	movlw	255
 19176  03DB  05C4               	andwf	___ftadd@f2,f
 19177  03DC  30FF               	movlw	255
 19178  03DD  05C5               	andwf	___ftadd@f2+1,f
 19179  03DE  3000               	movlw	0
 19180  03DF  05C6               	andwf	___ftadd@f2+2,f
 19181  03E0  084C               	movf	___ftadd@exp2,w
 19182  03E1  024D               	subwf	___ftadd@exp1,w
 19183  03E2  1803               	skipnc
 19184  03E3  2C06               	goto	l6769
 19185  03E4                     l6759:	
 19186  03E4  3001               	movlw	1
 19187  03E5                     u5765:	
 19188  03E5  35C4               	lslf	___ftadd@f2,f
 19189  03E6  0DC5               	rlf	___ftadd@f2+1,f
 19190  03E7  0DC6               	rlf	___ftadd@f2+2,f
 19191  03E8  0B89               	decfsz	9,f
 19192  03E9  2BE5               	goto	u5765
 19193  03EA  3001               	movlw	1
 19194  03EB  02CC               	subwf	___ftadd@exp2,f
 19195  03EC  084C               	movf	___ftadd@exp2,w
 19196  03ED  064D               	xorwf	___ftadd@exp1,w
 19197  03EE  1903               	skipnz
 19198  03EF  2C01               	goto	l6767
 19199  03F0  3001               	movlw	1
 19200  03F1  02CB               	subwf	___ftadd@sign,f
 19201  03F2  084B               	movf	___ftadd@sign,w
 19202  03F3  3907               	andlw	7
 19203  03F4  1903               	btfsc	3,2
 19204  03F5  2C01               	goto	l6767
 19205  03F6  2BE4               	goto	l6759
 19206  03F7                     l6765:	
 19207  03F7  3001               	movlw	1
 19208  03F8                     u5795:	
 19209  03F8  36C3               	lsrf	___ftadd@f1+2,f
 19210  03F9  0CC2               	rrf	___ftadd@f1+1,f
 19211  03FA  0CC1               	rrf	___ftadd@f1,f
 19212  03FB  0B89               	decfsz	9,f
 19213  03FC  2BF8               	goto	u5795
 19214  03FD  3001               	movlw	1
 19215  03FE  00C7               	movwf	??___ftadd
 19216  03FF  0847               	movf	??___ftadd,w
 19217  0400  07CD               	addwf	___ftadd@exp1,f
 19218  0401                     l6767:	
 19219  0401  084D               	movf	___ftadd@exp1,w
 19220  0402  064C               	xorwf	___ftadd@exp2,w
 19221  0403  1903               	btfsc	3,2
 19222  0404  2C2B               	goto	l3280
 19223  0405  2BF7               	goto	l6765
 19224  0406                     l6769:	
 19225  0406  084D               	movf	___ftadd@exp1,w
 19226  0407  024C               	subwf	___ftadd@exp2,w
 19227  0408  1803               	skipnc
 19228  0409  2C2B               	goto	l3280
 19229  040A                     l6771:	
 19230  040A  3001               	movlw	1
 19231  040B                     u5825:	
 19232  040B  35C1               	lslf	___ftadd@f1,f
 19233  040C  0DC2               	rlf	___ftadd@f1+1,f
 19234  040D  0DC3               	rlf	___ftadd@f1+2,f
 19235  040E  0B89               	decfsz	9,f
 19236  040F  2C0B               	goto	u5825
 19237  0410  3001               	movlw	1
 19238  0411  02CD               	subwf	___ftadd@exp1,f
 19239  0412  084C               	movf	___ftadd@exp2,w
 19240  0413  064D               	xorwf	___ftadd@exp1,w
 19241  0414  1903               	skipnz
 19242  0415  2C27               	goto	l6779
 19243  0416  3001               	movlw	1
 19244  0417  02CB               	subwf	___ftadd@sign,f
 19245  0418  084B               	movf	___ftadd@sign,w
 19246  0419  3907               	andlw	7
 19247  041A  1903               	btfsc	3,2
 19248  041B  2C27               	goto	l6779
 19249  041C  2C0A               	goto	l6771
 19250  041D                     l6777:	
 19251  041D  3001               	movlw	1
 19252  041E                     u5855:	
 19253  041E  36C6               	lsrf	___ftadd@f2+2,f
 19254  041F  0CC5               	rrf	___ftadd@f2+1,f
 19255  0420  0CC4               	rrf	___ftadd@f2,f
 19256  0421  0B89               	decfsz	9,f
 19257  0422  2C1E               	goto	u5855
 19258  0423  3001               	movlw	1
 19259  0424  00C7               	movwf	??___ftadd
 19260  0425  0847               	movf	??___ftadd,w
 19261  0426  07CC               	addwf	___ftadd@exp2,f
 19262  0427                     l6779:	
 19263  0427  084D               	movf	___ftadd@exp1,w
 19264  0428  064C               	xorwf	___ftadd@exp2,w
 19265  0429  1D03               	skipz
 19266  042A  2C1D               	goto	l6777
 19267  042B                     l3280:	
 19268  042B  1FCB               	btfss	___ftadd@sign,7
 19269  042C  2C3D               	goto	l6783
 19270  042D  30FF               	movlw	255
 19271  042E  06C1               	xorwf	___ftadd@f1,f
 19272  042F  30FF               	movlw	255
 19273  0430  06C2               	xorwf	___ftadd@f1+1,f
 19274  0431  30FF               	movlw	255
 19275  0432  06C3               	xorwf	___ftadd@f1+2,f
 19276  0433  3001               	movlw	1
 19277  0434  07C1               	addwf	___ftadd@f1,f
 19278  0435  3000               	movlw	0
 19279  0436  1803               	skipnc
 19280  0437  3001               	movlw	1
 19281  0438  07C2               	addwf	___ftadd@f1+1,f
 19282  0439  3000               	movlw	0
 19283  043A  1803               	skipnc
 19284  043B  3001               	movlw	1
 19285  043C  07C3               	addwf	___ftadd@f1+2,f
 19286  043D                     l6783:	
 19287  043D  1F4B               	btfss	___ftadd@sign,6
 19288  043E  2C4F               	goto	l6787
 19289  043F  30FF               	movlw	255
 19290  0440  06C4               	xorwf	___ftadd@f2,f
 19291  0441  30FF               	movlw	255
 19292  0442  06C5               	xorwf	___ftadd@f2+1,f
 19293  0443  30FF               	movlw	255
 19294  0444  06C6               	xorwf	___ftadd@f2+2,f
 19295  0445  3001               	movlw	1
 19296  0446  07C4               	addwf	___ftadd@f2,f
 19297  0447  3000               	movlw	0
 19298  0448  1803               	skipnc
 19299  0449  3001               	movlw	1
 19300  044A  07C5               	addwf	___ftadd@f2+1,f
 19301  044B  3000               	movlw	0
 19302  044C  1803               	skipnc
 19303  044D  3001               	movlw	1
 19304  044E  07C6               	addwf	___ftadd@f2+2,f
 19305  044F                     l6787:	
 19306  044F  01CB               	clrf	___ftadd@sign
 19307  0450  0841               	movf	___ftadd@f1,w
 19308  0451  07C4               	addwf	___ftadd@f2,f
 19309  0452  0842               	movf	___ftadd@f1+1,w
 19310  0453  3DC5               	addwfc	___ftadd@f2+1,f
 19311  0454  0843               	movf	___ftadd@f1+2,w
 19312  0455  3DC6               	addwfc	___ftadd@f2+2,f
 19313  0456  1FC6               	btfss	___ftadd@f2+2,7
 19314  0457  2C6A               	goto	l6797
 19315  0458  30FF               	movlw	255
 19316  0459  06C4               	xorwf	___ftadd@f2,f
 19317  045A  30FF               	movlw	255
 19318  045B  06C5               	xorwf	___ftadd@f2+1,f
 19319  045C  30FF               	movlw	255
 19320  045D  06C6               	xorwf	___ftadd@f2+2,f
 19321  045E  3001               	movlw	1
 19322  045F  07C4               	addwf	___ftadd@f2,f
 19323  0460  3000               	movlw	0
 19324  0461  1803               	skipnc
 19325  0462  3001               	movlw	1
 19326  0463  07C5               	addwf	___ftadd@f2+1,f
 19327  0464  3000               	movlw	0
 19328  0465  1803               	skipnc
 19329  0466  3001               	movlw	1
 19330  0467  07C6               	addwf	___ftadd@f2+2,f
 19331  0468  01CB               	clrf	___ftadd@sign
 19332  0469  0ACB               	incf	___ftadd@sign,f
 19333  046A                     l6797:	
 19334  046A  0844               	movf	___ftadd@f2,w
 19335  046B  00A0               	movwf	___ftpack@arg
 19336  046C  0845               	movf	___ftadd@f2+1,w
 19337  046D  00A1               	movwf	___ftpack@arg+1
 19338  046E  0846               	movf	___ftadd@f2+2,w
 19339  046F  00A2               	movwf	___ftpack@arg+2
 19340  0470  084D               	movf	___ftadd@exp1,w
 19341  0471  00C7               	movwf	??___ftadd
 19342  0472  0847               	movf	??___ftadd,w
 19343  0473  00A3               	movwf	___ftpack@exp
 19344  0474  084B               	movf	___ftadd@sign,w
 19345  0475  00C8               	movwf	??___ftadd+1
 19346  0476  0848               	movf	??___ftadd+1,w
 19347  0477  00A4               	movwf	___ftpack@sign
 19348  0478  3193  23E9         	fcall	___ftpack
 19349  047A  0020               	movlb	0	; select bank0
 19350  047B  0820               	movf	?___ftpack,w
 19351  047C  00C1               	movwf	?___ftadd
 19352  047D  0821               	movf	?___ftpack+1,w
 19353  047E  00C2               	movwf	?___ftadd+1
 19354  047F  0822               	movf	?___ftpack+2,w
 19355  0480  00C3               	movwf	?___ftadd+2
 19356  0481  0008               	return
 19357  0482                     __end_of___ftadd:	
 19358                           
 19359                           	psect	text128
 19360  1C6E                     __ptext128:	
 19361 ;; *************** function ___awtoft *****************
 19362 ;; Defined at:
 19363 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 19364 ;; Parameters:    Size  Location     Type
 19365 ;;  c               2    8[BANK0 ] int 
 19366 ;; Auto vars:     Size  Location     Type
 19367 ;;  sign            1   13[BANK0 ] unsigned char 
 19368 ;; Return value:  Size  Location     Type
 19369 ;;                  3    8[BANK0 ] float 
 19370 ;; Registers used:
 19371 ;;		wreg, status,2, status,0, pclath, cstack
 19372 ;; Tracked objects:
 19373 ;;		On entry : 0/0
 19374 ;;		On exit  : 0/0
 19375 ;;		Unchanged: 0/0
 19376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19377 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19380 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19381 ;;Total ram usage:        6 bytes
 19382 ;; Hardware stack levels used:    1
 19383 ;; Hardware stack levels required when called:    6
 19384 ;; This function calls:
 19385 ;;		___ftpack
 19386 ;; This function is called by:
 19387 ;;		_getDimmerLights_PercentToValue
 19388 ;;		_getDimmerLights_ValueToPercent
 19389 ;; This function uses a non-reentrant model
 19390 ;;
 19391                           
 19392                           
 19393                           ;psect for function ___awtoft
 19394  1C6E                     ___awtoft:	
 19395                           
 19396                           ;incstack = 0
 19397                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 19398  1C6E  0020               	movlb	0	; select bank0
 19399  1C6F  01AD               	clrf	___awtoft@sign
 19400  1C70  1FA9               	btfss	___awtoft@c+1,7
 19401  1C71  2C79               	goto	l6725
 19402  1C72  09A8               	comf	___awtoft@c,f
 19403  1C73  09A9               	comf	___awtoft@c+1,f
 19404  1C74  0AA8               	incf	___awtoft@c,f
 19405  1C75  1903               	skipnz
 19406  1C76  0AA9               	incf	___awtoft@c+1,f
 19407  1C77  01AD               	clrf	___awtoft@sign
 19408  1C78  0AAD               	incf	___awtoft@sign,f
 19409  1C79                     l6725:	
 19410  1C79  0828               	movf	___awtoft@c,w
 19411  1C7A  00A0               	movwf	___ftpack@arg
 19412  1C7B  0829               	movf	___awtoft@c+1,w
 19413  1C7C  00A1               	movwf	___ftpack@arg+1
 19414  1C7D  01A2               	clrf	___ftpack@arg+2
 19415  1C7E  308E               	movlw	142
 19416  1C7F  00AB               	movwf	??___awtoft
 19417  1C80  082B               	movf	??___awtoft,w
 19418  1C81  00A3               	movwf	___ftpack@exp
 19419  1C82  082D               	movf	___awtoft@sign,w
 19420  1C83  00AC               	movwf	??___awtoft+1
 19421  1C84  082C               	movf	??___awtoft+1,w
 19422  1C85  00A4               	movwf	___ftpack@sign
 19423  1C86  3193  23E9         	fcall	___ftpack
 19424  1C88  0020               	movlb	0	; select bank0
 19425  1C89  0820               	movf	?___ftpack,w
 19426  1C8A  00A8               	movwf	?___awtoft
 19427  1C8B  0821               	movf	?___ftpack+1,w
 19428  1C8C  00A9               	movwf	?___awtoft+1
 19429  1C8D  0822               	movf	?___ftpack+2,w
 19430  1C8E  00AA               	movwf	?___awtoft+2
 19431  1C8F  0008               	return
 19432  1C90                     __end_of___awtoft:	
 19433                           
 19434                           	psect	text129
 19435  13E9                     __ptext129:	
 19436 ;; *************** function ___ftpack *****************
 19437 ;; Defined at:
 19438 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 19439 ;; Parameters:    Size  Location     Type
 19440 ;;  arg             3    0[BANK0 ] unsigned um
 19441 ;;  exp             1    3[BANK0 ] unsigned char 
 19442 ;;  sign            1    4[BANK0 ] unsigned char 
 19443 ;; Auto vars:     Size  Location     Type
 19444 ;;		None
 19445 ;; Return value:  Size  Location     Type
 19446 ;;                  3    0[BANK0 ] float 
 19447 ;; Registers used:
 19448 ;;		wreg, status,2, status,0
 19449 ;; Tracked objects:
 19450 ;;		On entry : 0/0
 19451 ;;		On exit  : 0/0
 19452 ;;		Unchanged: 0/0
 19453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19454 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19456 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19457 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19458 ;;Total ram usage:        8 bytes
 19459 ;; Hardware stack levels used:    1
 19460 ;; Hardware stack levels required when called:    5
 19461 ;; This function calls:
 19462 ;;		Nothing
 19463 ;; This function is called by:
 19464 ;;		___awtoft
 19465 ;;		___ftadd
 19466 ;;		___ftdiv
 19467 ;;		___ftmul
 19468 ;; This function uses a non-reentrant model
 19469 ;;
 19470                           
 19471                           
 19472                           ;psect for function ___ftpack
 19473  13E9                     ___ftpack:	
 19474                           
 19475                           ;incstack = 0
 19476                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 19477  13E9  0020               	movlb	0	; select bank0
 19478  13EA  0823               	movf	___ftpack@exp,w
 19479  13EB  1903               	btfsc	3,2
 19480  13EC  2BF2               	goto	l6571
 19481  13ED  0822               	movf	___ftpack@arg+2,w
 19482  13EE  0421               	iorwf	___ftpack@arg+1,w
 19483  13EF  0420               	iorwf	___ftpack@arg,w
 19484  13F0  1D03               	skipz
 19485  13F1  2C03               	goto	l6577
 19486  13F2                     l6571:	
 19487  13F2  3000               	movlw	0
 19488  13F3  00A0               	movwf	?___ftpack
 19489  13F4  3000               	movlw	0
 19490  13F5  00A1               	movwf	?___ftpack+1
 19491  13F6  3000               	movlw	0
 19492  13F7  00A2               	movwf	?___ftpack+2
 19493  13F8  0008               	return
 19494  13F9                     l6575:	
 19495  13F9  3001               	movlw	1
 19496  13FA  00A5               	movwf	??___ftpack
 19497  13FB  0825               	movf	??___ftpack,w
 19498  13FC  07A3               	addwf	___ftpack@exp,f
 19499  13FD  3001               	movlw	1
 19500  13FE                     u5355:	
 19501  13FE  36A2               	lsrf	___ftpack@arg+2,f
 19502  13FF  0CA1               	rrf	___ftpack@arg+1,f
 19503  1400  0CA0               	rrf	___ftpack@arg,f
 19504  1401  0B89               	decfsz	9,f
 19505  1402  2BFE               	goto	u5355
 19506  1403                     l6577:	
 19507  1403  30FE               	movlw	254
 19508  1404  0522               	andwf	___ftpack@arg+2,w
 19509  1405  1903               	btfsc	3,2
 19510  1406  2C1C               	goto	l3251
 19511  1407  2BF9               	goto	l6575
 19512  1408                     l6579:	
 19513  1408  3001               	movlw	1
 19514  1409  00A5               	movwf	??___ftpack
 19515  140A  0825               	movf	??___ftpack,w
 19516  140B  07A3               	addwf	___ftpack@exp,f
 19517  140C  3001               	movlw	1
 19518  140D  07A0               	addwf	___ftpack@arg,f
 19519  140E  3000               	movlw	0
 19520  140F  1803               	skipnc
 19521  1410  3001               	movlw	1
 19522  1411  07A1               	addwf	___ftpack@arg+1,f
 19523  1412  3000               	movlw	0
 19524  1413  1803               	skipnc
 19525  1414  3001               	movlw	1
 19526  1415  07A2               	addwf	___ftpack@arg+2,f
 19527  1416  3001               	movlw	1
 19528  1417                     u5375:	
 19529  1417  36A2               	lsrf	___ftpack@arg+2,f
 19530  1418  0CA1               	rrf	___ftpack@arg+1,f
 19531  1419  0CA0               	rrf	___ftpack@arg,f
 19532  141A  0B89               	decfsz	9,f
 19533  141B  2C17               	goto	u5375
 19534  141C                     l3251:	
 19535  141C  30FF               	movlw	255
 19536  141D  0522               	andwf	___ftpack@arg+2,w
 19537  141E  1903               	btfsc	3,2
 19538  141F  2C29               	goto	l6587
 19539  1420  2C08               	goto	l6579
 19540  1421                     l6585:	
 19541  1421  3001               	movlw	1
 19542  1422  02A3               	subwf	___ftpack@exp,f
 19543  1423  3001               	movlw	1
 19544  1424                     u5395:	
 19545  1424  35A0               	lslf	___ftpack@arg,f
 19546  1425  0DA1               	rlf	___ftpack@arg+1,f
 19547  1426  0DA2               	rlf	___ftpack@arg+2,f
 19548  1427  0B89               	decfsz	9,f
 19549  1428  2C24               	goto	u5395
 19550  1429                     l6587:	
 19551  1429  1FA1               	btfss	___ftpack@arg+1,7
 19552  142A  2C21               	goto	l6585
 19553  142B  1823               	btfsc	___ftpack@exp,0
 19554  142C  2C33               	goto	l3257
 19555  142D  30FF               	movlw	255
 19556  142E  05A0               	andwf	___ftpack@arg,f
 19557  142F  307F               	movlw	127
 19558  1430  05A1               	andwf	___ftpack@arg+1,f
 19559  1431  30FF               	movlw	255
 19560  1432  05A2               	andwf	___ftpack@arg+2,f
 19561  1433                     l3257:	
 19562  1433  1003               	clrc
 19563  1434  0CA3               	rrf	___ftpack@exp,f
 19564  1435  0823               	movf	___ftpack@exp,w
 19565  1436  00A5               	movwf	??___ftpack
 19566  1437  01A6               	clrf	??___ftpack+1
 19567  1438  01A7               	clrf	??___ftpack+2
 19568  1439  3010               	movlw	16
 19569  143A                     u5425:	
 19570  143A  35A5               	lslf	??___ftpack,f
 19571  143B  0DA6               	rlf	??___ftpack+1,f
 19572  143C  0DA7               	rlf	??___ftpack+2,f
 19573  143D  0B89               	decfsz	9,f
 19574  143E  2C3A               	goto	u5425
 19575  143F  0825               	movf	??___ftpack,w
 19576  1440  04A0               	iorwf	___ftpack@arg,f
 19577  1441  0826               	movf	??___ftpack+1,w
 19578  1442  04A1               	iorwf	___ftpack@arg+1,f
 19579  1443  0827               	movf	??___ftpack+2,w
 19580  1444  04A2               	iorwf	___ftpack@arg+2,f
 19581  1445  0824               	movf	___ftpack@sign,w
 19582  1446  1903               	btfsc	3,2
 19583  1447  0008               	return
 19584  1448  17A2               	bsf	___ftpack@arg+2,7
 19585  1449  0008               	return
 19586  144A                     __end_of___ftpack:	
 19587                           
 19588                           	psect	text130
 19589  2769                     __ptext130:	
 19590 ;; *************** function _Division *****************
 19591 ;; Defined at:
 19592 ;;		line 1504 in file "../src/Dimmer_B1.c"
 19593 ;; Parameters:    Size  Location     Type
 19594 ;;  value           1    wreg     unsigned char 
 19595 ;;  num             1    5[BANK0 ] unsigned char 
 19596 ;; Auto vars:     Size  Location     Type
 19597 ;;  value           1    8[BANK0 ] unsigned char 
 19598 ;;  result          1    9[BANK0 ] unsigned char 
 19599 ;; Return value:  Size  Location     Type
 19600 ;;                  1    wreg      unsigned char 
 19601 ;; Registers used:
 19602 ;;		wreg, status,2, status,0, pclath, cstack
 19603 ;; Tracked objects:
 19604 ;;		On entry : 0/0
 19605 ;;		On exit  : 0/0
 19606 ;;		Unchanged: 0/0
 19607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19608 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19610 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19611 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19612 ;;Total ram usage:        5 bytes
 19613 ;; Hardware stack levels used:    1
 19614 ;; Hardware stack levels required when called:    6
 19615 ;; This function calls:
 19616 ;;		___lbdiv
 19617 ;; This function is called by:
 19618 ;;		_DimmerIntr_Initialization
 19619 ;; This function uses a non-reentrant model
 19620 ;;
 19621                           
 19622                           
 19623                           ;psect for function _Division
 19624  2769                     _Division:	
 19625                           
 19626                           ;incstack = 0
 19627                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19628                           ;Division@value stored from wreg
 19629  2769  0020               	movlb	0	; select bank0
 19630  276A  00A8               	movwf	Division@value
 19631                           
 19632                           ;Dimmer_B1.c: 1505: char result = (char) (value / num);
 19633  276B  0825               	movf	Division@num,w
 19634  276C  00A6               	movwf	??_Division
 19635  276D  0826               	movf	??_Division,w
 19636  276E  00A0               	movwf	___lbdiv@divisor
 19637  276F  0828               	movf	Division@value,w
 19638  2770  319C  244C         	fcall	___lbdiv
 19639  2772  0020               	movlb	0	; select bank0
 19640  2773  00A7               	movwf	??_Division+1
 19641  2774  0827               	movf	??_Division+1,w
 19642  2775  00A9               	movwf	Division@result
 19643                           
 19644                           ;Dimmer_B1.c: 1506: return result;
 19645  2776  0829               	movf	Division@result,w
 19646  2777  0008               	return
 19647  2778                     __end_of_Division:	
 19648                           
 19649                           	psect	text131
 19650  1C4C                     __ptext131:	
 19651 ;; *************** function ___lbdiv *****************
 19652 ;; Defined at:
 19653 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19654 ;; Parameters:    Size  Location     Type
 19655 ;;  dividend        1    wreg     unsigned char 
 19656 ;;  divisor         1    0[BANK0 ] unsigned char 
 19657 ;; Auto vars:     Size  Location     Type
 19658 ;;  dividend        1    2[BANK0 ] unsigned char 
 19659 ;;  quotient        1    4[BANK0 ] unsigned char 
 19660 ;;  counter         1    3[BANK0 ] unsigned char 
 19661 ;; Return value:  Size  Location     Type
 19662 ;;                  1    wreg      unsigned char 
 19663 ;; Registers used:
 19664 ;;		wreg, status,2, status,0
 19665 ;; Tracked objects:
 19666 ;;		On entry : 0/0
 19667 ;;		On exit  : 0/0
 19668 ;;		Unchanged: 0/0
 19669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19670 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19671 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19673 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19674 ;;Total ram usage:        5 bytes
 19675 ;; Hardware stack levels used:    1
 19676 ;; Hardware stack levels required when called:    5
 19677 ;; This function calls:
 19678 ;;		Nothing
 19679 ;; This function is called by:
 19680 ;;		_Division
 19681 ;; This function uses a non-reentrant model
 19682 ;;
 19683                           
 19684                           
 19685                           ;psect for function ___lbdiv
 19686  1C4C                     ___lbdiv:	
 19687                           
 19688                           ;incstack = 0
 19689                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19690                           ;___lbdiv@dividend stored from wreg
 19691  1C4C  0020               	movlb	0	; select bank0
 19692  1C4D  00A2               	movwf	___lbdiv@dividend
 19693  1C4E  01A4               	clrf	___lbdiv@quotient
 19694  1C4F  0820               	movf	___lbdiv@divisor,w
 19695  1C50  1903               	btfsc	3,2
 19696  1C51  2C6C               	goto	l7653
 19697  1C52  01A3               	clrf	___lbdiv@counter
 19698  1C53  0AA3               	incf	___lbdiv@counter,f
 19699  1C54                     l7641:	
 19700  1C54  1BA0               	btfsc	___lbdiv@divisor,7
 19701  1C55  2C5D               	goto	l7643
 19702  1C56  1003               	clrc
 19703  1C57  0DA0               	rlf	___lbdiv@divisor,f
 19704  1C58  3001               	movlw	1
 19705  1C59  00A1               	movwf	??___lbdiv
 19706  1C5A  0821               	movf	??___lbdiv,w
 19707  1C5B  07A3               	addwf	___lbdiv@counter,f
 19708  1C5C  2C54               	goto	l7641
 19709  1C5D                     l7643:	
 19710  1C5D  1003               	clrc
 19711  1C5E  0DA4               	rlf	___lbdiv@quotient,f
 19712  1C5F  0820               	movf	___lbdiv@divisor,w
 19713  1C60  0222               	subwf	___lbdiv@dividend,w
 19714  1C61  1C03               	skipc
 19715  1C62  2C67               	goto	L13
 19716  1C63  0820               	movf	___lbdiv@divisor,w
 19717  1C64  02A2               	subwf	___lbdiv@dividend,f
 19718  1C65  1424               	bsf	___lbdiv@quotient,0
 19719  1C66  1003               	clrc
 19720  1C67                     L13:	
 19721  1C67  0CA0               	rrf	___lbdiv@divisor,f
 19722  1C68  3001               	movlw	1
 19723  1C69  02A3               	subwf	___lbdiv@counter,f
 19724  1C6A  1D03               	btfss	3,2
 19725  1C6B  2C5D               	goto	l7643
 19726  1C6C                     l7653:	
 19727  1C6C  0824               	movf	___lbdiv@quotient,w
 19728  1C6D  0008               	return
 19729  1C6E                     __end_of___lbdiv:	
 19730                           
 19731                           	psect	text132
 19732  2683                     __ptext132:	
 19733 ;; *************** function _DelayOff_Main *****************
 19734 ;; Defined at:
 19735 ;;		line 41 in file "../src/DelayOff_B1.c"
 19736 ;; Parameters:    Size  Location     Type
 19737 ;;		None
 19738 ;; Auto vars:     Size  Location     Type
 19739 ;;		None
 19740 ;; Return value:  Size  Location     Type
 19741 ;;		None               void
 19742 ;; Registers used:
 19743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19744 ;; Tracked objects:
 19745 ;;		On entry : 0/0
 19746 ;;		On exit  : 0/0
 19747 ;;		Unchanged: 0/0
 19748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19753 ;;Total ram usage:        0 bytes
 19754 ;; Hardware stack levels used:    1
 19755 ;; Hardware stack levels required when called:    9
 19756 ;; This function calls:
 19757 ;;		_DlyOff_Main
 19758 ;; This function is called by:
 19759 ;;		_main
 19760 ;; This function uses a non-reentrant model
 19761 ;;
 19762                           
 19763                           
 19764                           ;psect for function _DelayOff_Main
 19765  2683                     _DelayOff_Main:	
 19766                           
 19767                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 19768                           
 19769                           ;incstack = 0
 19770                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19771  2683  3001               	movlw	1
 19772  2684  3197  271F  31A6   	fcall	_DlyOff_Main
 19773                           
 19774                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 19775  2687  3002               	movlw	2
 19776  2688  3197  271F         	fcall	_DlyOff_Main
 19777  268A  0008               	return
 19778  268B                     __end_of_DelayOff_Main:	
 19779                           
 19780                           	psect	text133
 19781  171F                     __ptext133:	
 19782 ;; *************** function _DlyOff_Main *****************
 19783 ;; Defined at:
 19784 ;;		line 61 in file "../src/DelayOff_B1.c"
 19785 ;; Parameters:    Size  Location     Type
 19786 ;;  sw              1    wreg     unsigned char 
 19787 ;; Auto vars:     Size  Location     Type
 19788 ;;  sw              1   71[BANK0 ] unsigned char 
 19789 ;; Return value:  Size  Location     Type
 19790 ;;		None               void
 19791 ;; Registers used:
 19792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19793 ;; Tracked objects:
 19794 ;;		On entry : 0/0
 19795 ;;		On exit  : 0/0
 19796 ;;		Unchanged: 0/0
 19797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19801 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19802 ;;Total ram usage:        3 bytes
 19803 ;; Hardware stack levels used:    1
 19804 ;; Hardware stack levels required when called:    8
 19805 ;; This function calls:
 19806 ;;		_DelayOffPointSelect
 19807 ;;		_getDimmerLights_Status
 19808 ;;		_setDimmerLights_SwOff
 19809 ;;		_setDimmerLights_SwOn
 19810 ;;		_setProductData
 19811 ;; This function is called by:
 19812 ;;		_DelayOff_Main
 19813 ;; This function uses a non-reentrant model
 19814 ;;
 19815                           
 19816                           
 19817                           ;psect for function _DlyOff_Main
 19818  171F                     _DlyOff_Main:	
 19819                           
 19820                           ;incstack = 0
 19821                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19822                           ;DlyOff_Main@sw stored from wreg
 19823  171F  0020               	movlb	0	; select bank0
 19824  1720  00E7               	movwf	DlyOff_Main@sw
 19825                           
 19826                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 19827  1721  0867               	movf	DlyOff_Main@sw,w
 19828  1722  3199  21AB  3197   	fcall	_DelayOffPointSelect
 19829                           
 19830                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 19831  1725  0021               	movlb	1	; select bank1
 19832  1726  0858               	movf	_DelayOff^(0+128),w
 19833  1727  0086               	movwf	6
 19834  1728  3001               	movlw	1	; select bank2/3
 19835  1729  0087               	movwf	7
 19836  172A  1C81               	btfss	1,1
 19837  172B  0008               	return
 19838                           
 19839                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 19840  172C  0858               	movf	_DelayOff^(0+128),w
 19841  172D  3E02               	addlw	2
 19842  172E  0086               	movwf	6
 19843  172F  3001               	movlw	1	; select bank2/3
 19844  1730  0087               	movwf	7
 19845  1731  3001               	movlw	1
 19846  1732  0781               	addwf	1,f
 19847  1733  3141               	addfsr 1,1
 19848  1734  1803               	skipnc
 19849  1735  0A81               	incf	1,f
 19850                           
 19851                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= (60000-10000)/20) {
 19852  1736  0858               	movf	_DelayOff^(0+128),w
 19853  1737  3E02               	addlw	2
 19854  1738  0086               	movwf	6
 19855  1739  3001               	movlw	1	; select bank2/3
 19856  173A  0087               	movwf	7
 19857  173B  3F40               	moviw [0]fsr1
 19858  173C  0020               	movlb	0	; select bank0
 19859  173D  00E5               	movwf	??_DlyOff_Main
 19860  173E  3F41               	moviw [1]fsr1
 19861  173F  00E6               	movwf	??_DlyOff_Main+1
 19862  1740  3009               	movlw	9
 19863  1741  0266               	subwf	??_DlyOff_Main+1,w
 19864  1742  30C4               	movlw	196
 19865  1743  1903               	skipnz
 19866  1744  0265               	subwf	??_DlyOff_Main,w
 19867  1745  1C03               	skipc
 19868  1746  0008               	return
 19869                           
 19870                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 19871  1747  0021               	movlb	1	; select bank1
 19872  1748  0858               	movf	_DelayOff^(0+128),w
 19873  1749  3E02               	addlw	2
 19874  174A  0086               	movwf	6
 19875  174B  3001               	movlw	1	; select bank2/3
 19876  174C  0087               	movwf	7
 19877  174D  3000               	movlw	0
 19878  174E  3FC0               	movwi [0]fsr1
 19879  174F  3FC1               	movwi [1]fsr1
 19880                           
 19881                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 19882  1750  3001               	movlw	1
 19883  1751  0020               	movlb	0	; select bank0
 19884  1752  00E5               	movwf	??_DlyOff_Main
 19885  1753  0021               	movlb	1	; select bank1
 19886  1754  0858               	movf	_DelayOff^(0+128),w
 19887  1755  3E04               	addlw	4
 19888  1756  0086               	movwf	6
 19889  1757  3001               	movlw	1	; select bank2/3
 19890  1758  0087               	movwf	7
 19891  1759  0020               	movlb	0	; select bank0
 19892  175A  0865               	movf	??_DlyOff_Main,w
 19893  175B  0781               	addwf	1,f
 19894                           
 19895                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 19896  175C  0021               	movlb	1	; select bank1
 19897  175D  0858               	movf	_DelayOff^(0+128),w
 19898  175E  3E04               	addlw	4
 19899  175F  0086               	movwf	6
 19900  1760  3001               	movlw	1	; select bank2/3
 19901  1761  0087               	movwf	7
 19902  1762  0A58               	incf	_DelayOff^(0+128),w
 19903  1763  0084               	movwf	4
 19904  1764  3001               	movlw	1	; select bank2/3
 19905  1765  0085               	movwf	5
 19906  1766  0800               	movf	0,w
 19907  1767  0201               	subwf	1,w
 19908  1768  1C03               	skipc
 19909  1769  0008               	return
 19910                           
 19911                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 19912  176A  0858               	movf	_DelayOff^(0+128),w
 19913  176B  3E04               	addlw	4
 19914  176C  0086               	movwf	6
 19915  176D  3001               	movlw	1	; select bank2/3
 19916  176E  0087               	movwf	7
 19917  176F  0181               	clrf	1
 19918                           
 19919                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 19920  1770  0858               	movf	_DelayOff^(0+128),w
 19921  1771  0086               	movwf	6
 19922  1772  3001               	movlw	1	; select bank2/3
 19923  1773  0087               	movwf	7
 19924  1774  1081               	bcf	1,1
 19925                           
 19926                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 19927  1775  0020               	movlb	0	; select bank0
 19928  1776  0867               	movf	DlyOff_Main@sw,w
 19929  1777  31A7  2787  3197   	fcall	_getDimmerLights_Status
 19930  177A  3A01               	xorlw	1
 19931  177B  1D03               	skipz
 19932  177C  2F87               	goto	l581
 19933                           
 19934                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 19935  177D  0020               	movlb	0	; select bank0
 19936  177E  0867               	movf	DlyOff_Main@sw,w
 19937  177F  3188  2034  3197   	fcall	_setDimmerLights_SwOn
 19938                           
 19939                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 19940  1782  0020               	movlb	0	; select bank0
 19941  1783  0867               	movf	DlyOff_Main@sw,w
 19942  1784  319F  274C  3197   	fcall	_setDimmerLights_SwOff
 19943  1787                     l581:	
 19944                           
 19945                           ;DelayOff_B1.c: 78: }
 19946                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 19947  1787  0020               	movlb	0	; select bank0
 19948  1788  01E2               	clrf	setProductData@value
 19949  1789  0867               	movf	DlyOff_Main@sw,w
 19950  178A  3E1A               	addlw	26
 19951  178B  31A6  26FD         	fcall	_setProductData
 19952  178D  0008               	return
 19953  178E                     __end_of_DlyOff_Main:	
 19954                           
 19955                           	psect	text134
 19956  26FD                     __ptext134:	
 19957 ;; *************** function _setProductData *****************
 19958 ;; Defined at:
 19959 ;;		line 645 in file "../src/main_B1.c"
 19960 ;; Parameters:    Size  Location     Type
 19961 ;;  address         1    wreg     unsigned char 
 19962 ;;  value           1   66[BANK0 ] unsigned char 
 19963 ;; Auto vars:     Size  Location     Type
 19964 ;;  address         1   68[BANK0 ] unsigned char 
 19965 ;; Return value:  Size  Location     Type
 19966 ;;		None               void
 19967 ;; Registers used:
 19968 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19969 ;; Tracked objects:
 19970 ;;		On entry : 0/0
 19971 ;;		On exit  : 0/0
 19972 ;;		Unchanged: 0/0
 19973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19974 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19977 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19978 ;;Total ram usage:        3 bytes
 19979 ;; Hardware stack levels used:    1
 19980 ;; Hardware stack levels required when called:    5
 19981 ;; This function calls:
 19982 ;;		Nothing
 19983 ;; This function is called by:
 19984 ;;		_DlyOff_Main
 19985 ;;		_setDelayOff_GO
 19986 ;;		_setDimmerLights_OnOff
 19987 ;;		_setDimmerLights_Dimming
 19988 ;;		_setTemp_Main
 19989 ;;		_setLog_Code
 19990 ;;		_setControl_Lights_Table
 19991 ;;		_setRFSW_AdjControl
 19992 ;;		_setRF_DimmerLights
 19993 ;; This function uses a non-reentrant model
 19994 ;;
 19995                           
 19996                           
 19997                           ;psect for function _setProductData
 19998  26FD                     _setProductData:	
 19999                           
 20000                           ;incstack = 0
 20001                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 20002                           ;setProductData@address stored from wreg
 20003  26FD  0020               	movlb	0	; select bank0
 20004  26FE  00E4               	movwf	setProductData@address
 20005                           
 20006                           ;main_B1.c: 646: _product.Data[address] = value;
 20007  26FF  0862               	movf	setProductData@value,w
 20008  2700  00E3               	movwf	??_setProductData
 20009  2701  0864               	movf	setProductData@address,w
 20010  2702  3E4E               	addlw	__product& (0+255)
 20011  2703  0086               	movwf	6
 20012  2704  3002               	movlw	2	; select bank4/5
 20013  2705  0087               	movwf	7
 20014  2706  0863               	movf	??_setProductData,w
 20015  2707  0081               	movwf	1
 20016  2708  0008               	return
 20017  2709                     __end_of_setProductData:	
 20018                           
 20019                           	psect	text135
 20020  0834                     __ptext135:	
 20021 ;; *************** function _setDimmerLights_SwOn *****************
 20022 ;; Defined at:
 20023 ;;		line 729 in file "../src/Dimmer_B1.c"
 20024 ;; Parameters:    Size  Location     Type
 20025 ;;  sw              1    wreg     unsigned char 
 20026 ;; Auto vars:     Size  Location     Type
 20027 ;;  sw              1   18[BANK0 ] unsigned char 
 20028 ;;  idle            1   17[BANK0 ] unsigned char 
 20029 ;;  dimmingStatu    1   14[BANK0 ] unsigned char 
 20030 ;; Return value:  Size  Location     Type
 20031 ;;		None               void
 20032 ;; Registers used:
 20033 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20034 ;; Tracked objects:
 20035 ;;		On entry : 0/0
 20036 ;;		On exit  : 0/0
 20037 ;;		Unchanged: 0/0
 20038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20040 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20042 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20043 ;;Total ram usage:        6 bytes
 20044 ;; Hardware stack levels used:    1
 20045 ;; Hardware stack levels required when called:    7
 20046 ;; This function calls:
 20047 ;;		_DimmerLights_SelectPointer
 20048 ;;		_getDimmerIntr_Dimming_Sw
 20049 ;;		_setBuz
 20050 ;; This function is called by:
 20051 ;;		_DlyOff_Main
 20052 ;;		_setControl_Lights_Table
 20053 ;;		_setRFSW_Control
 20054 ;;		_setRFSW_AdjControl
 20055 ;;		_setSw_Main
 20056 ;; This function uses a non-reentrant model
 20057 ;;
 20058                           
 20059                           
 20060                           ;psect for function _setDimmerLights_SwOn
 20061  0834                     _setDimmerLights_SwOn:	
 20062                           
 20063                           ;incstack = 0
 20064                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20065                           ;setDimmerLights_SwOn@sw stored from wreg
 20066  0834  0020               	movlb	0	; select bank0
 20067  0835  00B2               	movwf	setDimmerLights_SwOn@sw
 20068                           
 20069                           ;Dimmer_B1.c: 730: char idle = 0;
 20070  0836  01B1               	clrf	setDimmerLights_SwOn@idle
 20071                           
 20072                           ;Dimmer_B1.c: 732: char dimmingStatus = 0;
 20073  0837  01AE               	clrf	setDimmerLights_SwOn@dimmingStatus
 20074                           
 20075                           ;Dimmer_B1.c: 733: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 20076  0838  0832               	movf	setDimmerLights_SwOn@sw,w
 20077  0839  319A  221E  3188   	fcall	_getDimmerIntr_Dimming_Sw
 20078  083C  0020               	movlb	0	; select bank0
 20079  083D  00AD               	movwf	??_setDimmerLights_SwOn
 20080  083E  082D               	movf	??_setDimmerLights_SwOn,w
 20081  083F  00AE               	movwf	setDimmerLights_SwOn@dimmingStatus
 20082                           
 20083                           ;Dimmer_B1.c: 737: if (idle == 0) {
 20084  0840  08B1               	movf	setDimmerLights_SwOn@idle,f
 20085  0841  1D03               	skipz
 20086  0842  2867               	goto	l7005
 20087                           
 20088                           ;Dimmer_B1.c: 738: if (sw == 1) {
 20089  0843  0832               	movf	setDimmerLights_SwOn@sw,w
 20090  0844  3A01               	xorlw	1
 20091  0845  1D03               	skipz
 20092  0846  2854               	goto	l6995
 20093                           
 20094                           ;Dimmer_B1.c: 739: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 20095  0847  01AF               	clrf	_setDimmerLights_SwOn$2446
 20096  0848  0AAF               	incf	_setDimmerLights_SwOn$2446,f
 20097  0849  0023               	movlb	3	; select bank3
 20098  084A  1A47               	btfsc	_DimmerLights2^(0+384),4
 20099  084B  2851               	goto	l6993
 20100  084C  0021               	movlb	1	; select bank1
 20101  084D  1A48               	btfsc	_DimmerIntr2^(0+128),4
 20102  084E  2851               	goto	l6993
 20103  084F  0020               	movlb	0	; select bank0
 20104  0850  01AF               	clrf	_setDimmerLights_SwOn$2446
 20105  0851                     l6993:	
 20106  0851  0020               	movlb	0	; select bank0
 20107  0852  082F               	movf	_setDimmerLights_SwOn$2446,w
 20108  0853  2864               	goto	L14
 20109  0854                     l6995:	
 20110                           ;Dimmer_B1.c: 740: } else if (sw == 2) {
 20111                           
 20112  0854  0832               	movf	setDimmerLights_SwOn@sw,w
 20113  0855  3A02               	xorlw	2
 20114  0856  1D03               	skipz
 20115  0857  2867               	goto	l7005
 20116                           
 20117                           ;Dimmer_B1.c: 741: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 20118  0858  01B0               	clrf	_setDimmerLights_SwOn$2455
 20119  0859  0AB0               	incf	_setDimmerLights_SwOn$2455,f
 20120  085A  0023               	movlb	3	; select bank3
 20121  085B  1A3E               	btfsc	_DimmerLights1^(0+384),4
 20122  085C  2862               	goto	l7003
 20123  085D  0021               	movlb	1	; select bank1
 20124  085E  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 20125  085F  2862               	goto	l7003
 20126  0860  0020               	movlb	0	; select bank0
 20127  0861  01B0               	clrf	_setDimmerLights_SwOn$2455
 20128  0862                     l7003:	
 20129  0862  0020               	movlb	0	; select bank0
 20130  0863  0830               	movf	_setDimmerLights_SwOn$2455,w
 20131  0864                     L14:	
 20132  0864  00AD               	movwf	??_setDimmerLights_SwOn
 20133  0865  082D               	movf	??_setDimmerLights_SwOn,w
 20134  0866  00B1               	movwf	setDimmerLights_SwOn@idle
 20135  0867                     l7005:	
 20136                           
 20137                           ;Dimmer_B1.c: 742: }
 20138                           ;Dimmer_B1.c: 743: }
 20139                           ;Dimmer_B1.c: 760: DimmerLights_SelectPointer(sw);
 20140  0867  0832               	movf	setDimmerLights_SwOn@sw,w
 20141  0868  3199  21C2  3188   	fcall	_DimmerLights_SelectPointer
 20142                           
 20143                           ;Dimmer_B1.c: 761: if (idle == 0) {
 20144  086B  0020               	movlb	0	; select bank0
 20145  086C  08B1               	movf	setDimmerLights_SwOn@idle,f
 20146  086D  1D03               	skipz
 20147  086E  0008               	return
 20148                           
 20149                           ;Dimmer_B1.c: 763: if (dimmingStatus == 0) {
 20150  086F  08AE               	movf	setDimmerLights_SwOn@dimmingStatus,f
 20151  0870  1D03               	skipz
 20152  0871  2896               	goto	l7017
 20153                           
 20154                           ;Dimmer_B1.c: 764: DimmerLights->SwFlag = 1;
 20155  0872  0021               	movlb	1	; select bank1
 20156  0873  085A               	movf	_DimmerLights^(0+128),w
 20157  0874  0086               	movwf	6
 20158  0875  3001               	movlw	1	; select bank2/3
 20159  0876  0087               	movwf	7
 20160  0877  1401               	bsf	1,0
 20161                           
 20162                           ;Dimmer_B1.c: 765: if (DimmerLights->Status == 0) {
 20163  0878  0A5A               	incf	_DimmerLights^(0+128),w
 20164  0879  0086               	movwf	6
 20165  087A  3001               	movlw	1	; select bank2/3
 20166  087B  0087               	movwf	7
 20167  087C  1801               	btfsc	1,0
 20168  087D  2890               	goto	l7015
 20169                           
 20170                           ;Dimmer_B1.c: 766: DimmerLights->Status = 1;
 20171  087E  0A5A               	incf	_DimmerLights^(0+128),w
 20172  087F  0086               	movwf	6
 20173  0880  3001               	movlw	1	; select bank2/3
 20174  0881  0087               	movwf	7
 20175  0882  1401               	bsf	1,0
 20176                           
 20177                           ;Dimmer_B1.c: 772: DimmerLights->Phase = 1;
 20178  0883  085A               	movf	_DimmerLights^(0+128),w
 20179  0884  3E02               	addlw	2
 20180  0885  0086               	movwf	6
 20181  0886  3001               	movlw	1	; select bank2/3
 20182  0887  0087               	movwf	7
 20183  0888  1401               	bsf	1,0
 20184                           
 20185                           ;Dimmer_B1.c: 773: DimmerLights->PhaseSwitch = 1;
 20186  0889  085A               	movf	_DimmerLights^(0+128),w
 20187  088A  3E02               	addlw	2
 20188  088B  0086               	movwf	6
 20189  088C  3001               	movlw	1	; select bank2/3
 20190  088D  0087               	movwf	7
 20191  088E  1501               	bsf	1,2
 20192                           
 20193                           ;Dimmer_B1.c: 777: } else {
 20194  088F  28A1               	goto	l7019
 20195  0890                     l7015:	
 20196                           
 20197                           ;Dimmer_B1.c: 778: DimmerLights->Status = 0;
 20198  0890  0A5A               	incf	_DimmerLights^(0+128),w
 20199  0891  0086               	movwf	6
 20200  0892  3001               	movlw	1	; select bank2/3
 20201  0893  0087               	movwf	7
 20202  0894  1001               	bcf	1,0
 20203                           
 20204                           ;Dimmer_B1.c: 779: }
 20205                           ;Dimmer_B1.c: 780: } else {
 20206  0895  28A1               	goto	l7019
 20207  0896                     l7017:	
 20208                           
 20209                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 1;
 20210  0896  0021               	movlb	1	; select bank1
 20211  0897  085A               	movf	_DimmerLights^(0+128),w
 20212  0898  0086               	movwf	6
 20213  0899  3001               	movlw	1	; select bank2/3
 20214  089A  0087               	movwf	7
 20215  089B  1601               	bsf	1,4
 20216                           
 20217                           ;Dimmer_B1.c: 782: DimmerLights->DimmingSwitch = 0;
 20218  089C  085A               	movf	_DimmerLights^(0+128),w
 20219  089D  0086               	movwf	6
 20220  089E  3001               	movlw	1	; select bank2/3
 20221  089F  0087               	movwf	7
 20222  08A0  1281               	bcf	1,5
 20223  08A1                     l7019:	
 20224                           
 20225                           ;Dimmer_B1.c: 783: }
 20226                           ;Dimmer_B1.c: 784: setBuz(1, 100);
 20227  08A1  3064               	movlw	100
 20228  08A2  0020               	movlb	0	; select bank0
 20229  08A3  00A9               	movwf	setBuz@time
 20230  08A4  3000               	movlw	0
 20231  08A5  00AA               	movwf	setBuz@time+1
 20232  08A6  3001               	movlw	1
 20233  08A7  3193  2335         	fcall	_setBuz
 20234  08A9  0008               	return
 20235  08AA                     __end_of_setDimmerLights_SwOn:	
 20236                           
 20237                           	psect	text136
 20238  1335                     __ptext136:	
 20239 ;; *************** function _setBuz *****************
 20240 ;; Defined at:
 20241 ;;		line 22 in file "../src/Buzzer_B1.c"
 20242 ;; Parameters:    Size  Location     Type
 20243 ;;  count           1    wreg     unsigned char 
 20244 ;;  time            2    9[BANK0 ] int 
 20245 ;; Auto vars:     Size  Location     Type
 20246 ;;  count           1   12[BANK0 ] unsigned char 
 20247 ;; Return value:  Size  Location     Type
 20248 ;;		None               void
 20249 ;; Registers used:
 20250 ;;		wreg, status,2, status,0, pclath, cstack
 20251 ;; Tracked objects:
 20252 ;;		On entry : 0/0
 20253 ;;		On exit  : 0/0
 20254 ;;		Unchanged: 0/0
 20255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20256 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20259 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20260 ;;Total ram usage:        4 bytes
 20261 ;; Hardware stack levels used:    1
 20262 ;; Hardware stack levels required when called:    6
 20263 ;; This function calls:
 20264 ;;		___awdiv
 20265 ;; This function is called by:
 20266 ;;		_setDimmerLights_SwOn
 20267 ;;		_setDimmerLights_Dimming
 20268 ;;		_setTemp_Main
 20269 ;;		_setLog_Code
 20270 ;;		_setRFSW_Control
 20271 ;;		_setSw_Main
 20272 ;;		_my_MainTimer
 20273 ;;		_Exception_Main
 20274 ;; This function uses a non-reentrant model
 20275 ;;
 20276                           
 20277                           
 20278                           ;psect for function _setBuz
 20279  1335                     _setBuz:	
 20280                           
 20281                           ;incstack = 0
 20282                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 20283                           ;setBuz@count stored from wreg
 20284  1335  0020               	movlb	0	; select bank0
 20285  1336  00AC               	movwf	setBuz@count
 20286                           
 20287                           ;Buzzer_B1.c: 23: time /= 20;
 20288  1337  3014               	movlw	20
 20289  1338  00A0               	movwf	___awdiv@divisor
 20290  1339  3000               	movlw	0
 20291  133A  00A1               	movwf	___awdiv@divisor+1
 20292  133B  082A               	movf	setBuz@time+1,w
 20293  133C  01A3               	clrf	___awdiv@dividend+1
 20294  133D  07A3               	addwf	___awdiv@dividend+1,f
 20295  133E  0829               	movf	setBuz@time,w
 20296  133F  01A2               	clrf	___awdiv@dividend
 20297  1340  07A2               	addwf	___awdiv@dividend,f
 20298  1341  3192  2238  3193   	fcall	___awdiv
 20299  1344  0020               	movlb	0	; select bank0
 20300  1345  0821               	movf	?___awdiv+1,w
 20301  1346  01AA               	clrf	setBuz@time+1
 20302  1347  07AA               	addwf	setBuz@time+1,f
 20303  1348  0820               	movf	?___awdiv,w
 20304  1349  01A9               	clrf	setBuz@time
 20305  134A  07A9               	addwf	setBuz@time,f
 20306                           
 20307                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 20308  134B  0022               	movlb	2	; select bank2
 20309  134C  1C20               	btfss	_Buz1^(0+256),0
 20310  134D  0008               	return
 20311                           
 20312                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 20313  134E  18A0               	btfsc	_Buz1^(0+256),1
 20314  134F  2B66               	goto	l98
 20315                           
 20316                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 20317  1350  14A0               	bsf	_Buz1^(0+256),1
 20318                           
 20319                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 20320  1351  01A1               	clrf	(_Buz1^(0+256)+1)
 20321  1352  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 20322                           
 20323                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 20324  1353  0020               	movlb	0	; select bank0
 20325  1354  082C               	movf	setBuz@count,w
 20326  1355  00AB               	movwf	??_setBuz
 20327  1356  082B               	movf	??_setBuz,w
 20328  1357  0022               	movlb	2	; select bank2
 20329  1358  00A3               	movwf	(_Buz1^(0+256)+3)
 20330                           
 20331                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 20332  1359  0020               	movlb	0	; select bank0
 20333  135A  082A               	movf	setBuz@time+1,w
 20334  135B  0022               	movlb	2	; select bank2
 20335  135C  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20336  135D  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20337  135E  0020               	movlb	0	; select bank0
 20338  135F  0829               	movf	setBuz@time,w
 20339  1360  0022               	movlb	2	; select bank2
 20340  1361  01A6               	clrf	(_Buz1^(0+256)+6)
 20341  1362  07A6               	addwf	(_Buz1^(0+256)+6),f
 20342                           
 20343                           ;Buzzer_B1.c: 30: RB3 = 1;
 20344  1363  0020               	movlb	0	; select bank0
 20345  1364  158D               	bsf	13,3	;volatile
 20346                           
 20347                           ;Buzzer_B1.c: 31: } else {
 20348  1365  0008               	return
 20349  1366                     l98:	
 20350                           
 20351                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 20352  1366  19A0               	btfsc	_Buz1^(0+256),3
 20353  1367  2B7A               	goto	l100
 20354                           
 20355                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 20356  1368  15A0               	bsf	_Buz1^(0+256),3
 20357                           
 20358                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 20359  1369  0020               	movlb	0	; select bank0
 20360  136A  082C               	movf	setBuz@count,w
 20361  136B  00AB               	movwf	??_setBuz
 20362  136C  082B               	movf	??_setBuz,w
 20363  136D  0022               	movlb	2	; select bank2
 20364  136E  00A4               	movwf	(_Buz1^(0+256)+4)
 20365                           
 20366                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 20367  136F  0020               	movlb	0	; select bank0
 20368  1370  082A               	movf	setBuz@time+1,w
 20369  1371  0022               	movlb	2	; select bank2
 20370  1372  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 20371  1373  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 20372  1374  0020               	movlb	0	; select bank0
 20373  1375  0829               	movf	setBuz@time,w
 20374  1376  0022               	movlb	2	; select bank2
 20375  1377  01A8               	clrf	(_Buz1^(0+256)+8)
 20376  1378  07A8               	addwf	(_Buz1^(0+256)+8),f
 20377                           
 20378                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 20379  1379  0008               	return
 20380  137A                     l100:	
 20381  137A  1A20               	btfsc	_Buz1^(0+256),4
 20382  137B  0008               	return
 20383                           
 20384                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 20385  137C  1620               	bsf	_Buz1^(0+256),4
 20386                           
 20387                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 20388  137D  0020               	movlb	0	; select bank0
 20389  137E  082C               	movf	setBuz@count,w
 20390  137F  00AB               	movwf	??_setBuz
 20391  1380  082B               	movf	??_setBuz,w
 20392  1381  0022               	movlb	2	; select bank2
 20393  1382  00A5               	movwf	(_Buz1^(0+256)+5)
 20394                           
 20395                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 20396  1383  0020               	movlb	0	; select bank0
 20397  1384  082A               	movf	setBuz@time+1,w
 20398  1385  0022               	movlb	2	; select bank2
 20399  1386  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 20400  1387  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 20401  1388  0020               	movlb	0	; select bank0
 20402  1389  0829               	movf	setBuz@time,w
 20403  138A  0022               	movlb	2	; select bank2
 20404  138B  01AA               	clrf	(_Buz1^(0+256)+10)
 20405  138C  07AA               	addwf	(_Buz1^(0+256)+10),f
 20406  138D  0008               	return
 20407  138E                     __end_of_setBuz:	
 20408                           
 20409                           	psect	text137
 20410  1238                     __ptext137:	
 20411 ;; *************** function ___awdiv *****************
 20412 ;; Defined at:
 20413 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 20414 ;; Parameters:    Size  Location     Type
 20415 ;;  divisor         2    0[BANK0 ] int 
 20416 ;;  dividend        2    2[BANK0 ] int 
 20417 ;; Auto vars:     Size  Location     Type
 20418 ;;  quotient        2    7[BANK0 ] int 
 20419 ;;  sign            1    6[BANK0 ] unsigned char 
 20420 ;;  counter         1    5[BANK0 ] unsigned char 
 20421 ;; Return value:  Size  Location     Type
 20422 ;;                  2    0[BANK0 ] int 
 20423 ;; Registers used:
 20424 ;;		wreg, status,2, status,0
 20425 ;; Tracked objects:
 20426 ;;		On entry : 0/0
 20427 ;;		On exit  : 0/0
 20428 ;;		Unchanged: 0/0
 20429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20430 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20431 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20432 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20433 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20434 ;;Total ram usage:        9 bytes
 20435 ;; Hardware stack levels used:    1
 20436 ;; Hardware stack levels required when called:    5
 20437 ;; This function calls:
 20438 ;;		Nothing
 20439 ;; This function is called by:
 20440 ;;		_setBuz
 20441 ;; This function uses a non-reentrant model
 20442 ;;
 20443                           
 20444                           
 20445                           ;psect for function ___awdiv
 20446  1238                     ___awdiv:	
 20447                           
 20448                           ;incstack = 0
 20449                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20450  1238  0020               	movlb	0	; select bank0
 20451  1239  01A6               	clrf	___awdiv@sign
 20452  123A  1FA1               	btfss	___awdiv@divisor+1,7
 20453  123B  2A43               	goto	l6605
 20454  123C  09A0               	comf	___awdiv@divisor,f
 20455  123D  09A1               	comf	___awdiv@divisor+1,f
 20456  123E  0AA0               	incf	___awdiv@divisor,f
 20457  123F  1903               	skipnz
 20458  1240  0AA1               	incf	___awdiv@divisor+1,f
 20459  1241  01A6               	clrf	___awdiv@sign
 20460  1242  0AA6               	incf	___awdiv@sign,f
 20461  1243                     l6605:	
 20462  1243  1FA3               	btfss	___awdiv@dividend+1,7
 20463  1244  2A4E               	goto	l6611
 20464  1245  09A2               	comf	___awdiv@dividend,f
 20465  1246  09A3               	comf	___awdiv@dividend+1,f
 20466  1247  0AA2               	incf	___awdiv@dividend,f
 20467  1248  1903               	skipnz
 20468  1249  0AA3               	incf	___awdiv@dividend+1,f
 20469  124A  3001               	movlw	1
 20470  124B  00A4               	movwf	??___awdiv
 20471  124C  0824               	movf	??___awdiv,w
 20472  124D  06A6               	xorwf	___awdiv@sign,f
 20473  124E                     l6611:	
 20474  124E  01A7               	clrf	___awdiv@quotient
 20475  124F  01A8               	clrf	___awdiv@quotient+1
 20476  1250  0821               	movf	___awdiv@divisor+1,w
 20477  1251  0420               	iorwf	___awdiv@divisor,w
 20478  1252  1903               	skipnz
 20479  1253  2A7D               	goto	l6633
 20480  1254  01A5               	clrf	___awdiv@counter
 20481  1255  0AA5               	incf	___awdiv@counter,f
 20482  1256                     l6621:	
 20483  1256  1BA1               	btfsc	___awdiv@divisor+1,7
 20484  1257  2A62               	goto	l6623
 20485  1258  3001               	movlw	1
 20486  1259                     u5475:	
 20487  1259  35A0               	lslf	___awdiv@divisor,f
 20488  125A  0DA1               	rlf	___awdiv@divisor+1,f
 20489  125B  0B89               	decfsz	9,f
 20490  125C  2A59               	goto	u5475
 20491  125D  3001               	movlw	1
 20492  125E  00A4               	movwf	??___awdiv
 20493  125F  0824               	movf	??___awdiv,w
 20494  1260  07A5               	addwf	___awdiv@counter,f
 20495  1261  2A56               	goto	l6621
 20496  1262                     l6623:	
 20497  1262  3001               	movlw	1
 20498  1263                     u5495:	
 20499  1263  35A7               	lslf	___awdiv@quotient,f
 20500  1264  0DA8               	rlf	___awdiv@quotient+1,f
 20501  1265  0B89               	decfsz	9,f
 20502  1266  2A63               	goto	u5495
 20503  1267  0821               	movf	___awdiv@divisor+1,w
 20504  1268  0223               	subwf	___awdiv@dividend+1,w
 20505  1269  1D03               	skipz
 20506  126A  2A6D               	goto	u5505
 20507  126B  0820               	movf	___awdiv@divisor,w
 20508  126C  0222               	subwf	___awdiv@dividend,w
 20509  126D                     u5505:	
 20510  126D  1C03               	skipc
 20511  126E  2A74               	goto	l6629
 20512  126F  0820               	movf	___awdiv@divisor,w
 20513  1270  02A2               	subwf	___awdiv@dividend,f
 20514  1271  0821               	movf	___awdiv@divisor+1,w
 20515  1272  3BA3               	subwfb	___awdiv@dividend+1,f
 20516  1273  1427               	bsf	___awdiv@quotient,0
 20517  1274                     l6629:	
 20518  1274  3001               	movlw	1
 20519  1275                     u5515:	
 20520  1275  36A1               	lsrf	___awdiv@divisor+1,f
 20521  1276  0CA0               	rrf	___awdiv@divisor,f
 20522  1277  0B89               	decfsz	9,f
 20523  1278  2A75               	goto	u5515
 20524  1279  3001               	movlw	1
 20525  127A  02A5               	subwf	___awdiv@counter,f
 20526  127B  1D03               	btfss	3,2
 20527  127C  2A62               	goto	l6623
 20528  127D                     l6633:	
 20529  127D  0826               	movf	___awdiv@sign,w
 20530  127E  1903               	btfsc	3,2
 20531  127F  2A85               	goto	l6637
 20532  1280  09A7               	comf	___awdiv@quotient,f
 20533  1281  09A8               	comf	___awdiv@quotient+1,f
 20534  1282  0AA7               	incf	___awdiv@quotient,f
 20535  1283  1903               	skipnz
 20536  1284  0AA8               	incf	___awdiv@quotient+1,f
 20537  1285                     l6637:	
 20538  1285  0828               	movf	___awdiv@quotient+1,w
 20539  1286  01A1               	clrf	?___awdiv+1
 20540  1287  07A1               	addwf	?___awdiv+1,f
 20541  1288  0827               	movf	___awdiv@quotient,w
 20542  1289  01A0               	clrf	?___awdiv
 20543  128A  07A0               	addwf	?___awdiv,f
 20544  128B  0008               	return
 20545  128C                     __end_of___awdiv:	
 20546                           
 20547                           	psect	text138
 20548  1A1E                     __ptext138:	
 20549 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 20550 ;; Defined at:
 20551 ;;		line 239 in file "../src/Dimmer_B1.c"
 20552 ;; Parameters:    Size  Location     Type
 20553 ;;  lights          1    wreg     unsigned char 
 20554 ;; Auto vars:     Size  Location     Type
 20555 ;;  lights          1    1[BANK0 ] unsigned char 
 20556 ;;  status          1    0[BANK0 ] unsigned char 
 20557 ;; Return value:  Size  Location     Type
 20558 ;;                  1    wreg      unsigned char 
 20559 ;; Registers used:
 20560 ;;		wreg, status,2
 20561 ;; Tracked objects:
 20562 ;;		On entry : 0/0
 20563 ;;		On exit  : 0/0
 20564 ;;		Unchanged: 0/0
 20565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20567 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20569 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20570 ;;Total ram usage:        2 bytes
 20571 ;; Hardware stack levels used:    1
 20572 ;; Hardware stack levels required when called:    5
 20573 ;; This function calls:
 20574 ;;		Nothing
 20575 ;; This function is called by:
 20576 ;;		_setDimmerLights_SwOn
 20577 ;;		_setRF_AdjControl
 20578 ;; This function uses a non-reentrant model
 20579 ;;
 20580                           
 20581                           
 20582                           ;psect for function _getDimmerIntr_Dimming_Sw
 20583  1A1E                     _getDimmerIntr_Dimming_Sw:	
 20584                           
 20585                           ;incstack = 0
 20586                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 20587                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 20588  1A1E  0020               	movlb	0	; select bank0
 20589  1A1F  00A1               	movwf	getDimmerIntr_Dimming_Sw@lights
 20590                           
 20591                           ;Dimmer_B1.c: 240: char status = 0;
 20592  1A20  01A0               	clrf	getDimmerIntr_Dimming_Sw@status
 20593                           
 20594                           ;Dimmer_B1.c: 242: if (lights == 1) {
 20595  1A21  0821               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20596  1A22  3A01               	xorlw	1
 20597  1A23  1D03               	skipz
 20598  1A24  2A2B               	goto	l6685
 20599                           
 20600                           ;Dimmer_B1.c: 243: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 20601  1A25  3000               	movlw	0
 20602  1A26  0021               	movlb	1	; select bank1
 20603  1A27  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 20604  1A28  3001               	movlw	1
 20605  1A29  0020               	movlb	0	; select bank0
 20606  1A2A  00A0               	movwf	getDimmerIntr_Dimming_Sw@status
 20607  1A2B                     l6685:	
 20608                           
 20609                           ;Dimmer_B1.c: 244: }
 20610                           ;Dimmer_B1.c: 247: if (lights == 2) {
 20611  1A2B  0821               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20612  1A2C  3A02               	xorlw	2
 20613  1A2D  1D03               	skipz
 20614  1A2E  2A35               	goto	l6689
 20615                           
 20616                           ;Dimmer_B1.c: 248: status = DimmerIntr2.Dimming_Sw == 1 ? 1 : 0;
 20617  1A2F  3000               	movlw	0
 20618  1A30  0021               	movlb	1	; select bank1
 20619  1A31  1A48               	btfsc	_DimmerIntr2^(0+128),4
 20620  1A32  3001               	movlw	1
 20621  1A33  0020               	movlb	0	; select bank0
 20622  1A34  00A0               	movwf	getDimmerIntr_Dimming_Sw@status
 20623  1A35                     l6689:	
 20624                           
 20625                           ;Dimmer_B1.c: 249: }
 20626                           ;Dimmer_B1.c: 257: return status;
 20627  1A35  0820               	movf	getDimmerIntr_Dimming_Sw@status,w
 20628  1A36  0008               	return
 20629  1A37                     __end_of_getDimmerIntr_Dimming_Sw:	
 20630                           
 20631                           	psect	text139
 20632  1F4C                     __ptext139:	
 20633 ;; *************** function _setDimmerLights_SwOff *****************
 20634 ;; Defined at:
 20635 ;;		line 789 in file "../src/Dimmer_B1.c"
 20636 ;; Parameters:    Size  Location     Type
 20637 ;;  sw              1    wreg     unsigned char 
 20638 ;; Auto vars:     Size  Location     Type
 20639 ;;  sw              1    2[BANK0 ] unsigned char 
 20640 ;; Return value:  Size  Location     Type
 20641 ;;		None               void
 20642 ;; Registers used:
 20643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20644 ;; Tracked objects:
 20645 ;;		On entry : 0/0
 20646 ;;		On exit  : 0/0
 20647 ;;		Unchanged: 0/0
 20648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20652 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20653 ;;Total ram usage:        1 bytes
 20654 ;; Hardware stack levels used:    1
 20655 ;; Hardware stack levels required when called:    6
 20656 ;; This function calls:
 20657 ;;		_DimmerLights_SelectPointer
 20658 ;; This function is called by:
 20659 ;;		_DlyOff_Main
 20660 ;;		_setControl_Lights_Table
 20661 ;;		_setRFSW_Control
 20662 ;;		_setRFSW_AdjControl
 20663 ;;		_setSw_Main
 20664 ;;		_Exception_Main
 20665 ;; This function uses a non-reentrant model
 20666 ;;
 20667                           
 20668                           
 20669                           ;psect for function _setDimmerLights_SwOff
 20670  1F4C                     _setDimmerLights_SwOff:	
 20671                           
 20672                           ;incstack = 0
 20673                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 20674                           ;setDimmerLights_SwOff@sw stored from wreg
 20675  1F4C  0020               	movlb	0	; select bank0
 20676  1F4D  00A2               	movwf	setDimmerLights_SwOff@sw
 20677                           
 20678                           ;Dimmer_B1.c: 791: DimmerLights_SelectPointer(sw);
 20679  1F4E  0822               	movf	setDimmerLights_SwOff@sw,w
 20680  1F4F  3199  21C2  319F   	fcall	_DimmerLights_SelectPointer
 20681                           
 20682                           ;Dimmer_B1.c: 793: if (DimmerLights->SwFlag == 1) {
 20683  1F52  0021               	movlb	1	; select bank1
 20684  1F53  085A               	movf	_DimmerLights^(0+128),w
 20685  1F54  0086               	movwf	6
 20686  1F55  3001               	movlw	1	; select bank2/3
 20687  1F56  0087               	movwf	7
 20688  1F57  1C01               	btfss	1,0
 20689  1F58  0008               	return
 20690                           
 20691                           ;Dimmer_B1.c: 794: DimmerLights->SwFlag = 0;
 20692  1F59  085A               	movf	_DimmerLights^(0+128),w
 20693  1F5A  0086               	movwf	6
 20694  1F5B  3001               	movlw	1	; select bank2/3
 20695  1F5C  0087               	movwf	7
 20696  1F5D  1001               	bcf	1,0
 20697                           
 20698                           ;Dimmer_B1.c: 795: if (DimmerLights->Status == 1) {
 20699  1F5E  0A5A               	incf	_DimmerLights^(0+128),w
 20700  1F5F  0086               	movwf	6
 20701  1F60  3001               	movlw	1	; select bank2/3
 20702  1F61  0087               	movwf	7
 20703  1F62  1C01               	btfss	1,0
 20704  1F63  2F7A               	goto	l7031
 20705                           
 20706                           ;Dimmer_B1.c: 796: if (DimmerLights->DimmingSwFlag == 1) {
 20707  1F64  085A               	movf	_DimmerLights^(0+128),w
 20708  1F65  0086               	movwf	6
 20709  1F66  3001               	movlw	1	; select bank2/3
 20710  1F67  0087               	movwf	7
 20711  1F68  1D81               	btfss	1,3
 20712  1F69  0008               	return
 20713                           
 20714                           ;Dimmer_B1.c: 797: DimmerLights->DimmingSwFlag = 0;
 20715  1F6A  085A               	movf	_DimmerLights^(0+128),w
 20716  1F6B  0086               	movwf	6
 20717  1F6C  3001               	movlw	1	; select bank2/3
 20718  1F6D  0087               	movwf	7
 20719  1F6E  1181               	bcf	1,3
 20720                           
 20721                           ;Dimmer_B1.c: 799: DimmerLights->DimmingTrigger = 1;
 20722  1F6F  085A               	movf	_DimmerLights^(0+128),w
 20723  1F70  0086               	movwf	6
 20724  1F71  3001               	movlw	1	; select bank2/3
 20725  1F72  0087               	movwf	7
 20726  1F73  1601               	bsf	1,4
 20727                           
 20728                           ;Dimmer_B1.c: 800: DimmerLights->DimmingSwitch = 0;
 20729  1F74  085A               	movf	_DimmerLights^(0+128),w
 20730  1F75  0086               	movwf	6
 20731  1F76  3001               	movlw	1	; select bank2/3
 20732  1F77  0087               	movwf	7
 20733  1F78  1281               	bcf	1,5
 20734                           
 20735                           ;Dimmer_B1.c: 801: }
 20736                           ;Dimmer_B1.c: 802: } else {
 20737  1F79  0008               	return
 20738  1F7A                     l7031:	
 20739                           
 20740                           ;Dimmer_B1.c: 808: DimmerLights->Phase = 1;
 20741  1F7A  085A               	movf	_DimmerLights^(0+128),w
 20742  1F7B  3E02               	addlw	2
 20743  1F7C  0086               	movwf	6
 20744  1F7D  3001               	movlw	1	; select bank2/3
 20745  1F7E  0087               	movwf	7
 20746  1F7F  1401               	bsf	1,0
 20747                           
 20748                           ;Dimmer_B1.c: 809: DimmerLights->PhaseSwitch = 0;
 20749  1F80  085A               	movf	_DimmerLights^(0+128),w
 20750  1F81  3E02               	addlw	2
 20751  1F82  0086               	movwf	6
 20752  1F83  3001               	movlw	1	; select bank2/3
 20753  1F84  0087               	movwf	7
 20754  1F85  1101               	bcf	1,2
 20755  1F86  0008               	return
 20756  1F87                     __end_of_setDimmerLights_SwOff:	
 20757                           
 20758                           	psect	text140
 20759  2787                     __ptext140:	
 20760 ;; *************** function _getDimmerLights_Status *****************
 20761 ;; Defined at:
 20762 ;;		line 1202 in file "../src/Dimmer_B1.c"
 20763 ;; Parameters:    Size  Location     Type
 20764 ;;  lights          1    wreg     unsigned char 
 20765 ;; Auto vars:     Size  Location     Type
 20766 ;;  lights          1    2[BANK0 ] unsigned char 
 20767 ;;  status          1    3[BANK0 ] unsigned char 
 20768 ;; Return value:  Size  Location     Type
 20769 ;;                  1    wreg      unsigned char 
 20770 ;; Registers used:
 20771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20772 ;; Tracked objects:
 20773 ;;		On entry : 0/0
 20774 ;;		On exit  : 0/0
 20775 ;;		Unchanged: 0/0
 20776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20780 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20781 ;;Total ram usage:        2 bytes
 20782 ;; Hardware stack levels used:    1
 20783 ;; Hardware stack levels required when called:    6
 20784 ;; This function calls:
 20785 ;;		_DimmerLights_SelectPointer
 20786 ;; This function is called by:
 20787 ;;		_DlyOff_Main
 20788 ;;		_DimmerLights_AssignationDimming
 20789 ;;		_setControl_Lights_Table
 20790 ;;		_setRFSW_Control
 20791 ;;		_setRFSW_AdjControl
 20792 ;;		_setRF_AdjControl
 20793 ;;		_Exception_Main
 20794 ;; This function uses a non-reentrant model
 20795 ;;
 20796                           
 20797                           
 20798                           ;psect for function _getDimmerLights_Status
 20799  2787                     _getDimmerLights_Status:	
 20800                           
 20801                           ;incstack = 0
 20802                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 20803                           ;getDimmerLights_Status@lights stored from wreg
 20804  2787  0020               	movlb	0	; select bank0
 20805  2788  00A2               	movwf	getDimmerLights_Status@lights
 20806                           
 20807                           ;Dimmer_B1.c: 1203: DimmerLights_SelectPointer(lights);
 20808  2789  0822               	movf	getDimmerLights_Status@lights,w
 20809  278A  3199  21C2         	fcall	_DimmerLights_SelectPointer
 20810                           
 20811                           ;Dimmer_B1.c: 1204: char status = DimmerLights->Status == 1 ? 1 : 0;
 20812  278C  0021               	movlb	1	; select bank1
 20813  278D  0A5A               	incf	_DimmerLights^(0+128),w
 20814  278E  0086               	movwf	6
 20815  278F  3001               	movlw	1	; select bank2/3
 20816  2790  0087               	movwf	7
 20817  2791  3000               	movlw	0
 20818  2792  1801               	btfsc	1,0
 20819  2793  3001               	movlw	1
 20820  2794  0020               	movlb	0	; select bank0
 20821  2795  00A3               	movwf	getDimmerLights_Status@status
 20822                           
 20823                           ;Dimmer_B1.c: 1205: return status;
 20824  2796  0823               	movf	getDimmerLights_Status@status,w
 20825  2797  0008               	return
 20826  2798                     __end_of_getDimmerLights_Status:	
 20827                           
 20828                           	psect	text141
 20829  19C2                     __ptext141:	
 20830 ;; *************** function _DimmerLights_SelectPointer *****************
 20831 ;; Defined at:
 20832 ;;		line 652 in file "../src/Dimmer_B1.c"
 20833 ;; Parameters:    Size  Location     Type
 20834 ;;  lights          1    wreg     unsigned char 
 20835 ;; Auto vars:     Size  Location     Type
 20836 ;;  lights          1    1[BANK0 ] unsigned char 
 20837 ;; Return value:  Size  Location     Type
 20838 ;;		None               void
 20839 ;; Registers used:
 20840 ;;		wreg
 20841 ;; Tracked objects:
 20842 ;;		On entry : 0/0
 20843 ;;		On exit  : 0/0
 20844 ;;		Unchanged: 0/0
 20845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20850 ;;Total ram usage:        2 bytes
 20851 ;; Hardware stack levels used:    1
 20852 ;; Hardware stack levels required when called:    5
 20853 ;; This function calls:
 20854 ;;		Nothing
 20855 ;; This function is called by:
 20856 ;;		_setDimmerLights_SwOn
 20857 ;;		_setDimmerLights_SwOff
 20858 ;;		_setDimmerLights_DimmingOn
 20859 ;;		_setDimmerLights_Main
 20860 ;;		_DimmerLights_TwoPhase_Main
 20861 ;;		_getDimmerLights_Status
 20862 ;;		_setDimmerLights_DimmingRun
 20863 ;;		_setRF_AdjControl
 20864 ;;		_setDimmerLights_Status
 20865 ;; This function uses a non-reentrant model
 20866 ;;
 20867                           
 20868                           
 20869                           ;psect for function _DimmerLights_SelectPointer
 20870  19C2                     _DimmerLights_SelectPointer:	
 20871                           
 20872                           ;incstack = 0
 20873                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 20874                           ;DimmerLights_SelectPointer@lights stored from wreg
 20875  19C2  0020               	movlb	0	; select bank0
 20876  19C3  00A1               	movwf	DimmerLights_SelectPointer@lights
 20877                           
 20878                           ;Dimmer_B1.c: 654: if (lights == 1) {
 20879  19C4  0821               	movf	DimmerLights_SelectPointer@lights,w
 20880  19C5  3A01               	xorlw	1
 20881  19C6  1D03               	skipz
 20882  19C7  29CE               	goto	l6697
 20883                           
 20884                           ;Dimmer_B1.c: 655: DimmerLights = &DimmerLights1;
 20885  19C8  30BE               	movlw	_DimmerLights1& (0+255)
 20886  19C9  00A0               	movwf	??_DimmerLights_SelectPointer
 20887  19CA  0820               	movf	??_DimmerLights_SelectPointer,w
 20888  19CB  0021               	movlb	1	; select bank1
 20889  19CC  00DA               	movwf	_DimmerLights^(0+128)
 20890                           
 20891                           ;Dimmer_B1.c: 656: }
 20892  19CD  0008               	return
 20893  19CE                     l6697:	
 20894                           
 20895                           ;Dimmer_B1.c: 659: else if (lights == 2) {
 20896  19CE  0020               	movlb	0	; select bank0
 20897  19CF  0821               	movf	DimmerLights_SelectPointer@lights,w
 20898  19D0  3A02               	xorlw	2
 20899  19D1  1D03               	skipz
 20900  19D2  0008               	return
 20901                           
 20902                           ;Dimmer_B1.c: 660: DimmerLights = &DimmerLights2;
 20903  19D3  30C7               	movlw	_DimmerLights2& (0+255)
 20904  19D4  00A0               	movwf	??_DimmerLights_SelectPointer
 20905  19D5  0820               	movf	??_DimmerLights_SelectPointer,w
 20906  19D6  0021               	movlb	1	; select bank1
 20907  19D7  00DA               	movwf	_DimmerLights^(0+128)
 20908  19D8  0008               	return
 20909  19D9                     __end_of_DimmerLights_SelectPointer:	
 20910                           
 20911                           	psect	text142
 20912  267B                     __ptext142:	
 20913 ;; *************** function _DelayOff_Initialization *****************
 20914 ;; Defined at:
 20915 ;;		line 26 in file "../src/DelayOff_B1.c"
 20916 ;; Parameters:    Size  Location     Type
 20917 ;;		None
 20918 ;; Auto vars:     Size  Location     Type
 20919 ;;		None
 20920 ;; Return value:  Size  Location     Type
 20921 ;;		None               void
 20922 ;; Registers used:
 20923 ;;		wreg, status,2, status,0, pclath, cstack
 20924 ;; Tracked objects:
 20925 ;;		On entry : 0/0
 20926 ;;		On exit  : 0/0
 20927 ;;		Unchanged: 0/0
 20928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20933 ;;Total ram usage:        0 bytes
 20934 ;; Hardware stack levels used:    1
 20935 ;; Hardware stack levels required when called:    7
 20936 ;; This function calls:
 20937 ;;		_DlyOff_Initialization
 20938 ;; This function is called by:
 20939 ;;		_main
 20940 ;; This function uses a non-reentrant model
 20941 ;;
 20942                           
 20943                           
 20944                           ;psect for function _DelayOff_Initialization
 20945  267B                     _DelayOff_Initialization:	
 20946                           
 20947                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 20948                           
 20949                           ;incstack = 0
 20950                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20951  267B  3001               	movlw	1
 20952  267C  31A6  2662  31A6   	fcall	_DlyOff_Initialization
 20953                           
 20954                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 20955  267F  3002               	movlw	2
 20956  2680  31A6  2662         	fcall	_DlyOff_Initialization
 20957  2682  0008               	return
 20958  2683                     __end_of_DelayOff_Initialization:	
 20959                           
 20960                           	psect	text143
 20961  2662                     __ptext143:	
 20962 ;; *************** function _DlyOff_Initialization *****************
 20963 ;; Defined at:
 20964 ;;		line 56 in file "../src/DelayOff_B1.c"
 20965 ;; Parameters:    Size  Location     Type
 20966 ;;  sw              1    wreg     unsigned char 
 20967 ;; Auto vars:     Size  Location     Type
 20968 ;;  sw              1    2[BANK0 ] unsigned char 
 20969 ;; Return value:  Size  Location     Type
 20970 ;;		None               void
 20971 ;; Registers used:
 20972 ;;		wreg, status,2, status,0, pclath, cstack
 20973 ;; Tracked objects:
 20974 ;;		On entry : 0/0
 20975 ;;		On exit  : 0/0
 20976 ;;		Unchanged: 0/0
 20977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20981 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20982 ;;Total ram usage:        1 bytes
 20983 ;; Hardware stack levels used:    1
 20984 ;; Hardware stack levels required when called:    6
 20985 ;; This function calls:
 20986 ;;		_DelayOffPointSelect
 20987 ;; This function is called by:
 20988 ;;		_DelayOff_Initialization
 20989 ;; This function uses a non-reentrant model
 20990 ;;
 20991                           
 20992                           
 20993                           ;psect for function _DlyOff_Initialization
 20994  2662                     _DlyOff_Initialization:	
 20995                           
 20996                           ;incstack = 0
 20997                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20998                           ;DlyOff_Initialization@sw stored from wreg
 20999  2662  0020               	movlb	0	; select bank0
 21000  2663  00A2               	movwf	DlyOff_Initialization@sw
 21001                           
 21002                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 21003  2664  0822               	movf	DlyOff_Initialization@sw,w
 21004  2665  3199  21AB         	fcall	_DelayOffPointSelect
 21005  2667  0008               	return
 21006  2668                     __end_of_DlyOff_Initialization:	
 21007                           
 21008                           	psect	text144
 21009  19AB                     __ptext144:	
 21010 ;; *************** function _DelayOffPointSelect *****************
 21011 ;; Defined at:
 21012 ;;		line 7 in file "../src/DelayOff_B1.c"
 21013 ;; Parameters:    Size  Location     Type
 21014 ;;  sw              1    wreg     unsigned char 
 21015 ;; Auto vars:     Size  Location     Type
 21016 ;;  sw              1    1[BANK0 ] unsigned char 
 21017 ;; Return value:  Size  Location     Type
 21018 ;;		None               void
 21019 ;; Registers used:
 21020 ;;		wreg
 21021 ;; Tracked objects:
 21022 ;;		On entry : 0/0
 21023 ;;		On exit  : 0/0
 21024 ;;		Unchanged: 0/0
 21025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21028 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21029 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21030 ;;Total ram usage:        2 bytes
 21031 ;; Hardware stack levels used:    1
 21032 ;; Hardware stack levels required when called:    5
 21033 ;; This function calls:
 21034 ;;		Nothing
 21035 ;; This function is called by:
 21036 ;;		_DlyOff_Initialization
 21037 ;;		_DlyOff_Main
 21038 ;;		_setDelayOff_GO
 21039 ;;		_getDelayOff_GO
 21040 ;; This function uses a non-reentrant model
 21041 ;;
 21042                           
 21043                           
 21044                           ;psect for function _DelayOffPointSelect
 21045  19AB                     _DelayOffPointSelect:	
 21046                           
 21047                           ;incstack = 0
 21048                           ; Regs used in _DelayOffPointSelect: [wreg]
 21049                           ;DelayOffPointSelect@sw stored from wreg
 21050  19AB  0020               	movlb	0	; select bank0
 21051  19AC  00A1               	movwf	DelayOffPointSelect@sw
 21052                           
 21053                           ;DelayOff_B1.c: 9: if (sw == 1) {
 21054  19AD  0821               	movf	DelayOffPointSelect@sw,w
 21055  19AE  3A01               	xorlw	1
 21056  19AF  1D03               	skipz
 21057  19B0  29B7               	goto	l6673
 21058                           
 21059                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 21060  19B1  30D9               	movlw	_DlySw1& (0+255)
 21061  19B2  00A0               	movwf	??_DelayOffPointSelect
 21062  19B3  0820               	movf	??_DelayOffPointSelect,w
 21063  19B4  0021               	movlb	1	; select bank1
 21064  19B5  00D8               	movwf	_DelayOff^(0+128)
 21065                           
 21066                           ;DelayOff_B1.c: 11: }
 21067  19B6  0008               	return
 21068  19B7                     l6673:	
 21069                           
 21070                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 21071  19B7  0020               	movlb	0	; select bank0
 21072  19B8  0821               	movf	DelayOffPointSelect@sw,w
 21073  19B9  3A02               	xorlw	2
 21074  19BA  1D03               	skipz
 21075  19BB  0008               	return
 21076                           
 21077                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 21078  19BC  30DE               	movlw	_DlySw2& (0+255)
 21079  19BD  00A0               	movwf	??_DelayOffPointSelect
 21080  19BE  0820               	movf	??_DelayOffPointSelect,w
 21081  19BF  0021               	movlb	1	; select bank1
 21082  19C0  00D8               	movwf	_DelayOff^(0+128)
 21083  19C1  0008               	return
 21084  19C2                     __end_of_DelayOffPointSelect:	
 21085                           
 21086                           	psect	text145
 21087  119B                     __ptext145:	
 21088 ;; *************** function _Buzzer_Main *****************
 21089 ;; Defined at:
 21090 ;;		line 46 in file "../src/Buzzer_B1.c"
 21091 ;; Parameters:    Size  Location     Type
 21092 ;;		None
 21093 ;; Auto vars:     Size  Location     Type
 21094 ;;		None
 21095 ;; Return value:  Size  Location     Type
 21096 ;;		None               void
 21097 ;; Registers used:
 21098 ;;		wreg, status,2, status,0
 21099 ;; Tracked objects:
 21100 ;;		On entry : 0/0
 21101 ;;		On exit  : 0/0
 21102 ;;		Unchanged: 0/0
 21103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21107 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21108 ;;Total ram usage:        1 bytes
 21109 ;; Hardware stack levels used:    1
 21110 ;; Hardware stack levels required when called:    5
 21111 ;; This function calls:
 21112 ;;		Nothing
 21113 ;; This function is called by:
 21114 ;;		_main
 21115 ;; This function uses a non-reentrant model
 21116 ;;
 21117                           
 21118                           
 21119                           ;psect for function _Buzzer_Main
 21120  119B                     _Buzzer_Main:	
 21121                           
 21122                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 21123                           
 21124                           ;incstack = 0
 21125                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 21126  119B  0022               	movlb	2	; select bank2
 21127  119C  1CA0               	btfss	_Buz1^(0+256),1
 21128  119D  0008               	return
 21129                           
 21130                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 21131  119E  3001               	movlw	1
 21132  119F  07A1               	addwf	(_Buz1^(0+256)+1),f
 21133  11A0  3000               	movlw	0
 21134  11A1  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 21135                           
 21136                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 21137  11A2  0827               	movf	((_Buz1+1)^(0+256)+6),w
 21138  11A3  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 21139  11A4  1D03               	skipz
 21140  11A5  29A8               	goto	u9545
 21141  11A6  0826               	movf	(_Buz1^(0+256)+6),w
 21142  11A7  0221               	subwf	(_Buz1^(0+256)+1),w
 21143  11A8                     u9545:	
 21144  11A8  1C03               	skipc
 21145  11A9  0008               	return
 21146                           
 21147                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 21148  11AA  01A1               	clrf	(_Buz1^(0+256)+1)
 21149  11AB  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 21150                           
 21151                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 21152  11AC  12A0               	bcf	_Buz1^(0+256),5
 21153  11AD  0020               	movlb	0	; select bank0
 21154  11AE  1D8D               	btfss	13,3	;volatile
 21155  11AF  29B2               	goto	l8969
 21156  11B0  0022               	movlb	2	; select bank2
 21157  11B1  16A0               	bsf	_Buz1^(0+256),5
 21158  11B2                     l8969:	
 21159                           
 21160                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 21161  11B2  0022               	movlb	2	; select bank2
 21162  11B3  1AA0               	btfsc	_Buz1^(0+256),5
 21163  11B4  29DE               	goto	l108
 21164                           
 21165                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 21166  11B5  08A3               	movf	(_Buz1^(0+256)+3),f
 21167  11B6  1D03               	skipz
 21168  11B7  29DA               	goto	l109
 21169                           
 21170                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 21171  11B8  1DA0               	btfss	_Buz1^(0+256),3
 21172  11B9  29C8               	goto	l110
 21173                           
 21174                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 21175  11BA  11A0               	bcf	_Buz1^(0+256),3
 21176                           
 21177                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 21178  11BB  0824               	movf	(_Buz1^(0+256)+4),w
 21179  11BC  0020               	movlb	0	; select bank0
 21180  11BD  00A0               	movwf	??_Buzzer_Main
 21181  11BE  0820               	movf	??_Buzzer_Main,w
 21182  11BF  0022               	movlb	2	; select bank2
 21183  11C0  00A3               	movwf	(_Buz1^(0+256)+3)
 21184                           
 21185                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 21186  11C1  0829               	movf	((_Buz1+1)^(0+256)+8),w
 21187  11C2  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 21188  11C3  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 21189  11C4  0828               	movf	(_Buz1^(0+256)+8),w
 21190  11C5  01A6               	clrf	(_Buz1^(0+256)+6)
 21191  11C6  07A6               	addwf	(_Buz1^(0+256)+6),f
 21192                           
 21193                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 21194  11C7  0008               	return
 21195  11C8                     l110:	
 21196  11C8  1E20               	btfss	_Buz1^(0+256),4
 21197  11C9  29D8               	goto	l112
 21198                           
 21199                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 21200  11CA  1220               	bcf	_Buz1^(0+256),4
 21201                           
 21202                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 21203  11CB  0825               	movf	(_Buz1^(0+256)+5),w
 21204  11CC  0020               	movlb	0	; select bank0
 21205  11CD  00A0               	movwf	??_Buzzer_Main
 21206  11CE  0820               	movf	??_Buzzer_Main,w
 21207  11CF  0022               	movlb	2	; select bank2
 21208  11D0  00A3               	movwf	(_Buz1^(0+256)+3)
 21209                           
 21210                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 21211  11D1  082B               	movf	((_Buz1+1)^(0+256)+10),w
 21212  11D2  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 21213  11D3  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 21214  11D4  082A               	movf	(_Buz1^(0+256)+10),w
 21215  11D5  01A6               	clrf	(_Buz1^(0+256)+6)
 21216  11D6  07A6               	addwf	(_Buz1^(0+256)+6),f
 21217                           
 21218                           ;Buzzer_B1.c: 62: } else {
 21219  11D7  0008               	return
 21220  11D8                     l112:	
 21221                           
 21222                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 21223  11D8  10A0               	bcf	_Buz1^(0+256),1
 21224                           
 21225                           ;Buzzer_B1.c: 64: }
 21226                           ;Buzzer_B1.c: 65: } else {
 21227  11D9  0008               	return
 21228  11DA                     l109:	
 21229                           
 21230                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 21231  11DA  16A0               	bsf	_Buz1^(0+256),5
 21232                           
 21233                           ;Buzzer_B1.c: 68: RB3 = 1;
 21234  11DB  0020               	movlb	0	; select bank0
 21235  11DC  158D               	bsf	13,3	;volatile
 21236                           
 21237                           ;Buzzer_B1.c: 69: }
 21238                           ;Buzzer_B1.c: 70: } else {
 21239  11DD  0008               	return
 21240  11DE                     l108:	
 21241                           
 21242                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 21243  11DE  12A0               	bcf	_Buz1^(0+256),5
 21244                           
 21245                           ;Buzzer_B1.c: 73: RB3 = 0;
 21246  11DF  0020               	movlb	0	; select bank0
 21247  11E0  118D               	bcf	13,3	;volatile
 21248                           
 21249                           ;Buzzer_B1.c: 75: Buz1.Count--;
 21250  11E1  3001               	movlw	1
 21251  11E2  0022               	movlb	2	; select bank2
 21252  11E3  02A3               	subwf	(_Buz1^(0+256)+3),f
 21253  11E4  0008               	return
 21254  11E5                     __end_of_Buzzer_Main:	
 21255                           
 21256                           	psect	text146
 21257  2637                     __ptext146:	
 21258 ;; *************** function _Buzzer_Initialization *****************
 21259 ;; Defined at:
 21260 ;;		line 11 in file "../src/Buzzer_B1.c"
 21261 ;; Parameters:    Size  Location     Type
 21262 ;;		None
 21263 ;; Auto vars:     Size  Location     Type
 21264 ;;		None
 21265 ;; Return value:  Size  Location     Type
 21266 ;;		None               void
 21267 ;; Registers used:
 21268 ;;		None
 21269 ;; Tracked objects:
 21270 ;;		On entry : 0/0
 21271 ;;		On exit  : 0/0
 21272 ;;		Unchanged: 0/0
 21273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21278 ;;Total ram usage:        0 bytes
 21279 ;; Hardware stack levels used:    1
 21280 ;; Hardware stack levels required when called:    5
 21281 ;; This function calls:
 21282 ;;		Nothing
 21283 ;; This function is called by:
 21284 ;;		_main
 21285 ;; This function uses a non-reentrant model
 21286 ;;
 21287                           
 21288                           
 21289                           ;psect for function _Buzzer_Initialization
 21290  2637                     _Buzzer_Initialization:	
 21291                           
 21292                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 21293                           
 21294                           ;incstack = 0
 21295                           ; Regs used in _Buzzer_Initialization: []
 21296  2637  0022               	movlb	2	; select bank2
 21297  2638  1420               	bsf	_Buz1^(0+256),0
 21298  2639  0008               	return
 21299  263A                     __end_of_Buzzer_Initialization:	
 21300                           
 21301                           	psect	intentry
 21302  0004                     __pintentry:	
 21303 ;; *************** function _ISR *****************
 21304 ;; Defined at:
 21305 ;;		line 116 in file "../src/MCU_B1.c"
 21306 ;; Parameters:    Size  Location     Type
 21307 ;;		None
 21308 ;; Auto vars:     Size  Location     Type
 21309 ;;		None
 21310 ;; Return value:  Size  Location     Type
 21311 ;;		None               void
 21312 ;; Registers used:
 21313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21314 ;; Tracked objects:
 21315 ;;		On entry : 0/0
 21316 ;;		On exit  : 0/0
 21317 ;;		Unchanged: 0/0
 21318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21323 ;;Total ram usage:        1 bytes
 21324 ;; Hardware stack levels used:    1
 21325 ;; Hardware stack levels required when called:    4
 21326 ;; This function calls:
 21327 ;;		_IOC_ISR
 21328 ;;		_TMR1_ISR
 21329 ;; This function is called by:
 21330 ;;		Interrupt level 1
 21331 ;; This function uses a non-reentrant model
 21332 ;;
 21333                           
 21334  0004                     _ISR:	
 21335                           
 21336                           ;incstack = 0
 21337                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21338  0004  147E               	bsf	126,0	;set compiler interrupt flag
 21339  0005  3180               	pagesel	$
 21340  0006  0020               	movlb	0	; select bank0
 21341  0007  087F               	movf	127,w
 21342  0008  00FC               	movwf	??_ISR
 21343                           
 21344                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 21345  0009  0021               	movlb	1	; select bank1
 21346  000A  1C11               	btfss	17,0	;volatile
 21347  000B  2812               	goto	i1l9577
 21348  000C  0020               	movlb	0	; select bank0
 21349  000D  1C11               	btfss	17,0	;volatile
 21350  000E  2812               	goto	i1l9577
 21351                           
 21352                           ;MCU_B1.c: 126: TMR1_ISR();
 21353  000F  319C  242A  3180   	fcall	_TMR1_ISR
 21354  0012                     i1l9577:	
 21355                           
 21356                           ;MCU_B1.c: 127: }
 21357                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 21358  0012  198B               	btfsc	11,3	;volatile
 21359  0013  1C0B               	btfss	11,0	;volatile
 21360  0014  281A               	goto	i1l1443
 21361  0015  0027               	movlb	7	; select bank7
 21362  0016  1D16               	btfss	22,2	;volatile
 21363  0017  281A               	goto	i1l1443
 21364                           
 21365                           ;MCU_B1.c: 139: IOC_ISR();
 21366  0018  31A6  26F1         	fcall	_IOC_ISR
 21367  001A                     i1l1443:	
 21368                           ;MCU_B1.c: 140: }
 21369                           ;MCU_B1.c: 148: return;
 21370                           
 21371  001A  087C               	movf	??_ISR,w
 21372  001B  0020               	movlb	0	; select bank0
 21373  001C  00FF               	movwf	127
 21374  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 21375  001E  0009               	retfie
 21376  001F                     __end_of_ISR:	
 21377                           
 21378                           	psect	text148
 21379  1C2A                     __ptext148:	
 21380 ;; *************** function _TMR1_ISR *****************
 21381 ;; Defined at:
 21382 ;;		line 236 in file "../src/MCU_B1.c"
 21383 ;; Parameters:    Size  Location     Type
 21384 ;;		None
 21385 ;; Auto vars:     Size  Location     Type
 21386 ;;		None
 21387 ;; Return value:  Size  Location     Type
 21388 ;;		None               void
 21389 ;; Registers used:
 21390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21391 ;; Tracked objects:
 21392 ;;		On entry : 0/0
 21393 ;;		On exit  : 0/0
 21394 ;;		Unchanged: 0/0
 21395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21400 ;;Total ram usage:        0 bytes
 21401 ;; Hardware stack levels used:    1
 21402 ;; Hardware stack levels required when called:    1
 21403 ;; This function calls:
 21404 ;;		_DimmerLights_TMR_1
 21405 ;;		_DimmerLights_TMR_2
 21406 ;; This function is called by:
 21407 ;;		_ISR
 21408 ;; This function uses a non-reentrant model
 21409 ;;
 21410                           
 21411                           
 21412                           ;psect for function _TMR1_ISR
 21413  1C2A                     _TMR1_ISR:	
 21414                           
 21415                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 21416                           
 21417                           ;incstack = 0
 21418                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21419  1C2A  319E  26A2  319C   	fcall	_DimmerLights_TMR_1
 21420                           
 21421                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 21422  1C2D  319E  26DA  319C   	fcall	_DimmerLights_TMR_2
 21423                           
 21424                           ;MCU_B1.c: 268: Timer1.Count++;
 21425  1C30  3001               	movlw	1
 21426  1C31  0022               	movlb	2	; select bank2
 21427  1C32  07B2               	addwf	(_Timer1^(0+256)+1),f
 21428  1C33  3000               	movlw	0
 21429  1C34  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 21430                           
 21431                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 21432  1C35  3001               	movlw	1
 21433  1C36  3E31               	addlw	_Timer1& (0+255)
 21434  1C37  0086               	movwf	6
 21435  1C38  3001               	movlw	1	; select bank2/3
 21436  1C39  0087               	movwf	7
 21437  1C3A  3F40               	moviw [0]fsr1
 21438  1C3B  3AC8               	xorlw	200
 21439  1C3C  1D03               	skipz
 21440  1C3D  2C40               	goto	u964_25
 21441  1C3E  3F41               	moviw [1]fsr1
 21442  1C3F  3A00               	xorlw	0
 21443  1C40                     u964_25:	
 21444  1C40  1D03               	skipz
 21445  1C41  2C45               	goto	i1l9031
 21446                           
 21447                           ;MCU_B1.c: 270: Timer1.Count = 0;
 21448  1C42  01B2               	clrf	(_Timer1^(0+256)+1)
 21449  1C43  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 21450                           
 21451                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 21452  1C44  1431               	bsf	_Timer1^(0+256),0
 21453  1C45                     i1l9031:	
 21454                           
 21455                           ;MCU_B1.c: 272: }
 21456                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 21457  1C45  30FA               	movlw	250
 21458  1C46  0020               	movlb	0	; select bank0
 21459  1C47  0097               	movwf	23	;volatile
 21460                           
 21461                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 21462  1C48  3038               	movlw	56
 21463  1C49  0096               	movwf	22	;volatile
 21464                           
 21465                           ;MCU_B1.c: 276: TMR1IF = 0;
 21466  1C4A  1011               	bcf	17,0	;volatile
 21467  1C4B  0008               	return
 21468  1C4C                     __end_of_TMR1_ISR:	
 21469                           
 21470                           	psect	text149
 21471  1EDA                     __ptext149:	
 21472 ;; *************** function _DimmerLights_TMR_2 *****************
 21473 ;; Defined at:
 21474 ;;		line 1680 in file "../src/Dimmer_B1.c"
 21475 ;; Parameters:    Size  Location     Type
 21476 ;;		None
 21477 ;; Auto vars:     Size  Location     Type
 21478 ;;		None
 21479 ;; Return value:  Size  Location     Type
 21480 ;;		None               void
 21481 ;; Registers used:
 21482 ;;		wreg, status,2, status,0
 21483 ;; Tracked objects:
 21484 ;;		On entry : 0/0
 21485 ;;		On exit  : 0/0
 21486 ;;		Unchanged: 0/0
 21487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21492 ;;Total ram usage:        1 bytes
 21493 ;; Hardware stack levels used:    1
 21494 ;; This function calls:
 21495 ;;		Nothing
 21496 ;; This function is called by:
 21497 ;;		_TMR1_ISR
 21498 ;; This function uses a non-reentrant model
 21499 ;;
 21500                           
 21501                           
 21502                           ;psect for function _DimmerLights_TMR_2
 21503  1EDA                     _DimmerLights_TMR_2:	
 21504                           
 21505                           ;Dimmer_B1.c: 1682: if (DimmerIntr2.Start == 1) {
 21506                           
 21507                           ;incstack = 0
 21508                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 21509  1EDA  0021               	movlb	1	; select bank1
 21510  1EDB  1D48               	btfss	_DimmerIntr2^(0+128),2
 21511  1EDC  2F00               	goto	i1l1012
 21512                           
 21513                           ;Dimmer_B1.c: 1683: DimmerIntr2.Count++;
 21514  1EDD  3001               	movlw	1
 21515  1EDE  00F0               	movwf	??_DimmerLights_TMR_2
 21516  1EDF  0870               	movf	??_DimmerLights_TMR_2,w
 21517  1EE0  07CA               	addwf	(_DimmerIntr2^(0+128)+2),f
 21518                           
 21519                           ;Dimmer_B1.c: 1685: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd) {
 21520  1EE1  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21521  1EE2  0653               	xorwf	(_DimmerIntr2^(0+128)+11),w
 21522  1EE3  1D03               	skipz
 21523  1EE4  2EE7               	goto	i1l8471
 21524                           
 21525                           ;Dimmer_B1.c: 1686: DimmerIntr2.Count = 0;
 21526  1EE5  01CA               	clrf	(_DimmerIntr2^(0+128)+2)
 21527                           
 21528                           ;Dimmer_B1.c: 1687: DimmerIntr2.Start = 0;
 21529  1EE6  1148               	bcf	_DimmerIntr2^(0+128),2
 21530  1EE7                     i1l8471:	
 21531                           
 21532                           ;Dimmer_B1.c: 1688: }
 21533                           ;Dimmer_B1.c: 1702: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 21534  1EE7  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21535  1EE8  0650               	xorwf	(_DimmerIntr2^(0+128)+8),w
 21536  1EE9  1903               	btfsc	3,2
 21537                           
 21538                           ;Dimmer_B1.c: 1703: if (DimmerIntr2.ControlStatus == 1) {
 21539  1EEA  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21540  1EEB  2EEE               	goto	i1l8477
 21541                           
 21542                           ;Dimmer_B1.c: 1704: RA7 = 0;
 21543  1EEC  0020               	movlb	0	; select bank0
 21544  1EED  138C               	bcf	12,7	;volatile
 21545  1EEE                     i1l8477:	
 21546                           
 21547                           ;Dimmer_B1.c: 1705: }
 21548                           ;Dimmer_B1.c: 1706: }
 21549                           ;Dimmer_B1.c: 1709: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 21550  1EEE  0021               	movlb	1	; select bank1
 21551  1EEF  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21552  1EF0  0651               	xorwf	(_DimmerIntr2^(0+128)+9),w
 21553  1EF1  1903               	btfsc	3,2
 21554                           
 21555                           ;Dimmer_B1.c: 1710: if (DimmerIntr2.ControlStatus == 1) {
 21556  1EF2  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21557  1EF3  2EF6               	goto	i1l8483
 21558                           
 21559                           ;Dimmer_B1.c: 1711: RA7 = 1;
 21560  1EF4  0020               	movlb	0	; select bank0
 21561  1EF5  178C               	bsf	12,7	;volatile
 21562  1EF6                     i1l8483:	
 21563                           
 21564                           ;Dimmer_B1.c: 1712: }
 21565                           ;Dimmer_B1.c: 1713: }
 21566                           ;Dimmer_B1.c: 1716: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 21567  1EF6  0021               	movlb	1	; select bank1
 21568  1EF7  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21569  1EF8  0652               	xorwf	(_DimmerIntr2^(0+128)+10),w
 21570  1EF9  1D03               	skipz
 21571  1EFA  0008               	return
 21572                           
 21573                           ;Dimmer_B1.c: 1717: if (DimmerIntr2.ControlStatus == 1) {
 21574  1EFB  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21575  1EFC  0008               	return
 21576                           
 21577                           ;Dimmer_B1.c: 1718: RA7 = 0;
 21578  1EFD  0020               	movlb	0	; select bank0
 21579  1EFE  138C               	bcf	12,7	;volatile
 21580                           
 21581                           ;Dimmer_B1.c: 1719: }
 21582                           ;Dimmer_B1.c: 1722: }
 21583                           ;Dimmer_B1.c: 1724: } else {
 21584  1EFF  0008               	return
 21585  1F00                     i1l1012:	
 21586                           
 21587                           ;Dimmer_B1.c: 1725: if (DimmerIntr2.GO == 1) {
 21588  1F00  1C48               	btfss	_DimmerIntr2^(0+128),0
 21589  1F01  0008               	return
 21590                           
 21591                           ;Dimmer_B1.c: 1726: DimmerIntr2.Count++;
 21592  1F02  3001               	movlw	1
 21593  1F03  00F0               	movwf	??_DimmerLights_TMR_2
 21594  1F04  0870               	movf	??_DimmerLights_TMR_2,w
 21595  1F05  07CA               	addwf	(_DimmerIntr2^(0+128)+2),f
 21596                           
 21597                           ;Dimmer_B1.c: 1727: if (DimmerIntr2.Count == 4) {
 21598  1F06  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21599  1F07  3A04               	xorlw	4
 21600  1F08  1D03               	skipz
 21601  1F09  0008               	return
 21602                           
 21603                           ;Dimmer_B1.c: 1728: DimmerIntr2.Count = 0;
 21604  1F0A  01CA               	clrf	(_DimmerIntr2^(0+128)+2)
 21605                           
 21606                           ;Dimmer_B1.c: 1729: DimmerIntr2.GO = 0;
 21607  1F0B  1048               	bcf	_DimmerIntr2^(0+128),0
 21608                           
 21609                           ;Dimmer_B1.c: 1730: DimmerIntr2.Start = 1;
 21610  1F0C  1548               	bsf	_DimmerIntr2^(0+128),2
 21611                           
 21612                           ;Dimmer_B1.c: 1732: if (DimmerIntr2.ControlStatus == 1) {
 21613  1F0D  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21614  1F0E  0008               	return
 21615                           
 21616                           ;Dimmer_B1.c: 1733: RA7 = 1;
 21617  1F0F  0020               	movlb	0	; select bank0
 21618  1F10  178C               	bsf	12,7	;volatile
 21619  1F11  0008               	return
 21620  1F12                     __end_of_DimmerLights_TMR_2:	
 21621                           
 21622                           	psect	text150
 21623  1EA2                     __ptext150:	
 21624 ;; *************** function _DimmerLights_TMR_1 *****************
 21625 ;; Defined at:
 21626 ;;		line 1509 in file "../src/Dimmer_B1.c"
 21627 ;; Parameters:    Size  Location     Type
 21628 ;;		None
 21629 ;; Auto vars:     Size  Location     Type
 21630 ;;		None
 21631 ;; Return value:  Size  Location     Type
 21632 ;;		None               void
 21633 ;; Registers used:
 21634 ;;		wreg, status,2, status,0
 21635 ;; Tracked objects:
 21636 ;;		On entry : 0/0
 21637 ;;		On exit  : 0/0
 21638 ;;		Unchanged: 0/0
 21639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21643 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21644 ;;Total ram usage:        1 bytes
 21645 ;; Hardware stack levels used:    1
 21646 ;; This function calls:
 21647 ;;		Nothing
 21648 ;; This function is called by:
 21649 ;;		_TMR1_ISR
 21650 ;; This function uses a non-reentrant model
 21651 ;;
 21652                           
 21653                           
 21654                           ;psect for function _DimmerLights_TMR_1
 21655  1EA2                     _DimmerLights_TMR_1:	
 21656                           
 21657                           ;Dimmer_B1.c: 1511: if (DimmerIntr1.Start == 1) {
 21658                           
 21659                           ;incstack = 0
 21660                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 21661  1EA2  0021               	movlb	1	; select bank1
 21662  1EA3  1D3C               	btfss	_DimmerIntr1^(0+128),2
 21663  1EA4  2EC8               	goto	i1l988
 21664                           
 21665                           ;Dimmer_B1.c: 1512: DimmerIntr1.Count++;
 21666  1EA5  3001               	movlw	1
 21667  1EA6  00F0               	movwf	??_DimmerLights_TMR_1
 21668  1EA7  0870               	movf	??_DimmerLights_TMR_1,w
 21669  1EA8  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 21670                           
 21671                           ;Dimmer_B1.c: 1514: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 21672  1EA9  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21673  1EAA  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 21674  1EAB  1D03               	skipz
 21675  1EAC  2EAF               	goto	i1l8403
 21676                           
 21677                           ;Dimmer_B1.c: 1515: DimmerIntr1.Count = 0;
 21678  1EAD  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 21679                           
 21680                           ;Dimmer_B1.c: 1516: DimmerIntr1.Start = 0;
 21681  1EAE  113C               	bcf	_DimmerIntr1^(0+128),2
 21682  1EAF                     i1l8403:	
 21683                           
 21684                           ;Dimmer_B1.c: 1517: }
 21685                           ;Dimmer_B1.c: 1531: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 21686  1EAF  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21687  1EB0  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 21688  1EB1  1903               	btfsc	3,2
 21689                           
 21690                           ;Dimmer_B1.c: 1532: if (DimmerIntr1.ControlStatus == 1) {
 21691  1EB2  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21692  1EB3  2EB6               	goto	i1l8409
 21693                           
 21694                           ;Dimmer_B1.c: 1533: RB4 = 0;
 21695  1EB4  0020               	movlb	0	; select bank0
 21696  1EB5  120D               	bcf	13,4	;volatile
 21697  1EB6                     i1l8409:	
 21698                           
 21699                           ;Dimmer_B1.c: 1534: }
 21700                           ;Dimmer_B1.c: 1535: }
 21701                           ;Dimmer_B1.c: 1538: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 21702  1EB6  0021               	movlb	1	; select bank1
 21703  1EB7  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21704  1EB8  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 21705  1EB9  1903               	btfsc	3,2
 21706                           
 21707                           ;Dimmer_B1.c: 1539: if (DimmerIntr1.ControlStatus == 1) {
 21708  1EBA  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21709  1EBB  2EBE               	goto	i1l8415
 21710                           
 21711                           ;Dimmer_B1.c: 1540: RB4 = 1;
 21712  1EBC  0020               	movlb	0	; select bank0
 21713  1EBD  160D               	bsf	13,4	;volatile
 21714  1EBE                     i1l8415:	
 21715                           
 21716                           ;Dimmer_B1.c: 1541: }
 21717                           ;Dimmer_B1.c: 1542: }
 21718                           ;Dimmer_B1.c: 1545: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 21719  1EBE  0021               	movlb	1	; select bank1
 21720  1EBF  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21721  1EC0  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 21722  1EC1  1D03               	skipz
 21723  1EC2  0008               	return
 21724                           
 21725                           ;Dimmer_B1.c: 1546: if (DimmerIntr1.ControlStatus == 1) {
 21726  1EC3  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21727  1EC4  0008               	return
 21728                           
 21729                           ;Dimmer_B1.c: 1547: RB4 = 0;
 21730  1EC5  0020               	movlb	0	; select bank0
 21731  1EC6  120D               	bcf	13,4	;volatile
 21732                           
 21733                           ;Dimmer_B1.c: 1548: }
 21734                           ;Dimmer_B1.c: 1551: }
 21735                           ;Dimmer_B1.c: 1553: } else {
 21736  1EC7  0008               	return
 21737  1EC8                     i1l988:	
 21738                           
 21739                           ;Dimmer_B1.c: 1554: if (DimmerIntr1.GO == 1) {
 21740  1EC8  1C3C               	btfss	_DimmerIntr1^(0+128),0
 21741  1EC9  0008               	return
 21742                           
 21743                           ;Dimmer_B1.c: 1555: DimmerIntr1.Count++;
 21744  1ECA  3001               	movlw	1
 21745  1ECB  00F0               	movwf	??_DimmerLights_TMR_1
 21746  1ECC  0870               	movf	??_DimmerLights_TMR_1,w
 21747  1ECD  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 21748                           
 21749                           ;Dimmer_B1.c: 1556: if (DimmerIntr1.Count == 4) {
 21750  1ECE  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21751  1ECF  3A04               	xorlw	4
 21752  1ED0  1D03               	skipz
 21753  1ED1  0008               	return
 21754                           
 21755                           ;Dimmer_B1.c: 1557: DimmerIntr1.Count = 0;
 21756  1ED2  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 21757                           
 21758                           ;Dimmer_B1.c: 1558: DimmerIntr1.GO = 0;
 21759  1ED3  103C               	bcf	_DimmerIntr1^(0+128),0
 21760                           
 21761                           ;Dimmer_B1.c: 1559: DimmerIntr1.Start = 1;
 21762  1ED4  153C               	bsf	_DimmerIntr1^(0+128),2
 21763                           
 21764                           ;Dimmer_B1.c: 1561: if (DimmerIntr1.ControlStatus == 1) {
 21765  1ED5  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21766  1ED6  0008               	return
 21767                           
 21768                           ;Dimmer_B1.c: 1562: RB4 = 1;
 21769  1ED7  0020               	movlb	0	; select bank0
 21770  1ED8  160D               	bsf	13,4	;volatile
 21771  1ED9  0008               	return
 21772  1EDA                     __end_of_DimmerLights_TMR_1:	
 21773                           
 21774                           	psect	text151
 21775  26F1                     __ptext151:	
 21776 ;; *************** function _IOC_ISR *****************
 21777 ;; Defined at:
 21778 ;;		line 395 in file "../src/MCU_B1.c"
 21779 ;; Parameters:    Size  Location     Type
 21780 ;;		None
 21781 ;; Auto vars:     Size  Location     Type
 21782 ;;		None
 21783 ;; Return value:  Size  Location     Type
 21784 ;;		None               void
 21785 ;; Registers used:
 21786 ;;		wreg, status,2, status,0, pclath, cstack
 21787 ;; Tracked objects:
 21788 ;;		On entry : 0/0
 21789 ;;		On exit  : 0/0
 21790 ;;		Unchanged: 0/0
 21791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21796 ;;Total ram usage:        0 bytes
 21797 ;; Hardware stack levels used:    1
 21798 ;; Hardware stack levels required when called:    3
 21799 ;; This function calls:
 21800 ;;		_DimmerLights_IOC_1
 21801 ;;		_DimmerLights_IOC_2
 21802 ;; This function is called by:
 21803 ;;		_ISR
 21804 ;; This function uses a non-reentrant model
 21805 ;;
 21806                           
 21807                           
 21808                           ;psect for function _IOC_ISR
 21809  26F1                     _IOC_ISR:	
 21810                           
 21811                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 21812                           
 21813                           ;incstack = 0
 21814                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 21815  26F1  0021               	movlb	1	; select bank1
 21816  26F2  1C2F               	btfss	_myMain^(0+128),0
 21817  26F3  2EF9               	goto	i1l9041
 21818                           
 21819                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 21820  26F4  319F  27C3  31A6   	fcall	_DimmerLights_IOC_1
 21821                           
 21822                           ;MCU_B1.c: 408: DimmerLights_IOC_2();
 21823  26F7  3190  201A         	fcall	_DimmerLights_IOC_2
 21824  26F9                     i1l9041:	
 21825                           
 21826                           ;MCU_B1.c: 416: }
 21827                           ;MCU_B1.c: 418: IOCBF2 = 0;
 21828  26F9  0027               	movlb	7	; select bank7
 21829  26FA  1116               	bcf	22,2	;volatile
 21830                           
 21831                           ;MCU_B1.c: 419: IOCIF = 0;
 21832  26FB  100B               	bcf	11,0	;volatile
 21833  26FC  0008               	return
 21834  26FD                     __end_of_IOC_ISR:	
 21835                           
 21836                           	psect	text152
 21837  101A                     __ptext152:	
 21838 ;; *************** function _DimmerLights_IOC_2 *****************
 21839 ;; Defined at:
 21840 ;;		line 1773 in file "../src/Dimmer_B1.c"
 21841 ;; Parameters:    Size  Location     Type
 21842 ;;		None
 21843 ;; Auto vars:     Size  Location     Type
 21844 ;;		None
 21845 ;; Return value:  Size  Location     Type
 21846 ;;		None               void
 21847 ;; Registers used:
 21848 ;;		wreg, status,2, status,0, pclath, cstack
 21849 ;; Tracked objects:
 21850 ;;		On entry : 0/0
 21851 ;;		On exit  : 0/0
 21852 ;;		Unchanged: 0/0
 21853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21856 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21857 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21858 ;;Total ram usage:        2 bytes
 21859 ;; Hardware stack levels used:    1
 21860 ;; Hardware stack levels required when called:    2
 21861 ;; This function calls:
 21862 ;;		i1_Division
 21863 ;; This function is called by:
 21864 ;;		_IOC_ISR
 21865 ;; This function uses a non-reentrant model
 21866 ;;
 21867                           
 21868                           
 21869                           ;psect for function _DimmerLights_IOC_2
 21870  101A                     _DimmerLights_IOC_2:	
 21871                           
 21872                           ;Dimmer_B1.c: 1788: if (DimmerIntr2.Start == 0 && DimmerIntr2.GO == 0) {
 21873                           
 21874                           ;incstack = 0
 21875                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 21876  101A  0021               	movlb	1	; select bank1
 21877  101B  1948               	btfsc	_DimmerIntr2^(0+128),2
 21878  101C  0008               	return
 21879  101D  1848               	btfsc	_DimmerIntr2^(0+128),0
 21880  101E  0008               	return
 21881                           
 21882                           ;Dimmer_B1.c: 1790: if (RB2 != DimmerIntr2.Status) {
 21883  101F  0E49               	swapf	(_DimmerIntr2^(0+128)+1),w
 21884  1020  0C89               	rrf	9,f
 21885  1021  3901               	andlw	1
 21886  1022  00FA               	movwf	??_DimmerLights_IOC_2
 21887  1023  3000               	movlw	0
 21888  1024  0020               	movlb	0	; select bank0
 21889  1025  190D               	btfsc	13,2	;volatile
 21890  1026  3001               	movlw	1
 21891  1027  067A               	xorwf	??_DimmerLights_IOC_2,w
 21892  1028  1903               	skipnz
 21893  1029  0008               	return
 21894                           
 21895                           ;Dimmer_B1.c: 1793: DimmerIntr2.Count = 0;
 21896  102A  0021               	movlb	1	; select bank1
 21897  102B  01CA               	clrf	(_DimmerIntr2^(0+128)+2)
 21898                           
 21899                           ;Dimmer_B1.c: 1794: DimmerIntr2.GO = 1;
 21900  102C  1448               	bsf	_DimmerIntr2^(0+128),0
 21901                           
 21902                           ;Dimmer_B1.c: 1796: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 21903  102D  1E48               	btfss	_DimmerIntr2^(0+128),4
 21904  102E  1B48               	btfsc	_DimmerIntr2^(0+128),6
 21905                           
 21906                           ;Dimmer_B1.c: 1797: DimmerIntr2.Tune = 1;
 21907  102F  14C8               	bsf	_DimmerIntr2^(0+128),1
 21908                           
 21909                           ;Dimmer_B1.c: 1798: }
 21910                           ;Dimmer_B1.c: 1800: if (DimmerIntr2.TuneGO == 1) {
 21911  1030  1F49               	btfss	(_DimmerIntr2^(0+128)+1),6
 21912  1031  2850               	goto	i1l8527
 21913                           
 21914                           ;Dimmer_B1.c: 1801: DimmerIntr2.TuneGO = 0;
 21915  1032  1349               	bcf	(_DimmerIntr2^(0+128)+1),6
 21916                           
 21917                           ;Dimmer_B1.c: 1804: DimmerIntr2.TuneValue2 = Division(DimmerIntr2.DimmingValue, 2);
 21918  1033  3002               	movlw	2
 21919  1034  00FA               	movwf	??_DimmerLights_IOC_2
 21920  1035  087A               	movf	??_DimmerLights_IOC_2,w
 21921  1036  00F5               	movwf	i1Division@num
 21922  1037  084D               	movf	(_DimmerIntr2^(0+128)+5),w
 21923  1038  3198  2066  3190   	fcall	i1_Division
 21924  103B  00FB               	movwf	??_DimmerLights_IOC_2+1
 21925  103C  087B               	movf	??_DimmerLights_IOC_2+1,w
 21926  103D  0021               	movlb	1	; select bank1
 21927  103E  00D0               	movwf	(_DimmerIntr2^(0+128)+8)
 21928                           
 21929                           ;Dimmer_B1.c: 1805: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - DimmerIntr2.
      +                          DimmingValue);
 21930  103F  034D               	decf	(_DimmerIntr2^(0+128)+5),w
 21931  1040  3AFF               	xorlw	255
 21932  1041  0750               	addwf	(_DimmerIntr2^(0+128)+8),w
 21933  1042  3E37               	addlw	55
 21934  1043  00FA               	movwf	??_DimmerLights_IOC_2
 21935  1044  087A               	movf	??_DimmerLights_IOC_2,w
 21936  1045  00D1               	movwf	(_DimmerIntr2^(0+128)+9)
 21937                           
 21938                           ;Dimmer_B1.c: 1806: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneVa
      +                          lue2;
 21939  1046  0851               	movf	(_DimmerIntr2^(0+128)+9),w
 21940  1047  0750               	addwf	(_DimmerIntr2^(0+128)+8),w
 21941  1048  00FA               	movwf	??_DimmerLights_IOC_2
 21942  1049  087A               	movf	??_DimmerLights_IOC_2,w
 21943  104A  00D2               	movwf	(_DimmerIntr2^(0+128)+10)
 21944                           
 21945                           ;Dimmer_B1.c: 1807: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 5;
 21946  104B  0852               	movf	(_DimmerIntr2^(0+128)+10),w
 21947  104C  3E05               	addlw	5
 21948  104D  00FA               	movwf	??_DimmerLights_IOC_2
 21949  104E  087A               	movf	??_DimmerLights_IOC_2,w
 21950  104F  00D3               	movwf	(_DimmerIntr2^(0+128)+11)
 21951  1050                     i1l8527:	
 21952                           
 21953                           ;Dimmer_B1.c: 1808: }
 21954                           ;Dimmer_B1.c: 1817: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 21955  1050  12C9               	bcf	(_DimmerIntr2^(0+128)+1),5
 21956  1051  0020               	movlb	0	; select bank0
 21957  1052  1D0D               	btfss	13,2	;volatile
 21958  1053  0008               	return
 21959  1054  0021               	movlb	1	; select bank1
 21960  1055  16C9               	bsf	(_DimmerIntr2^(0+128)+1),5
 21961  1056  0008               	return
 21962  1057                     __end_of_DimmerLights_IOC_2:	
 21963                           
 21964                           	psect	text153
 21965  1FC3                     __ptext153:	
 21966 ;; *************** function _DimmerLights_IOC_1 *****************
 21967 ;; Defined at:
 21968 ;;		line 1604 in file "../src/Dimmer_B1.c"
 21969 ;; Parameters:    Size  Location     Type
 21970 ;;		None
 21971 ;; Auto vars:     Size  Location     Type
 21972 ;;		None
 21973 ;; Return value:  Size  Location     Type
 21974 ;;		None               void
 21975 ;; Registers used:
 21976 ;;		wreg, status,2, status,0, pclath, cstack
 21977 ;; Tracked objects:
 21978 ;;		On entry : 0/0
 21979 ;;		On exit  : 0/0
 21980 ;;		Unchanged: 0/0
 21981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21985 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21986 ;;Total ram usage:        2 bytes
 21987 ;; Hardware stack levels used:    1
 21988 ;; Hardware stack levels required when called:    2
 21989 ;; This function calls:
 21990 ;;		i1_Division
 21991 ;; This function is called by:
 21992 ;;		_IOC_ISR
 21993 ;; This function uses a non-reentrant model
 21994 ;;
 21995                           
 21996                           
 21997                           ;psect for function _DimmerLights_IOC_1
 21998  1FC3                     _DimmerLights_IOC_1:	
 21999                           
 22000                           ;Dimmer_B1.c: 1618: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 22001                           
 22002                           ;incstack = 0
 22003                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 22004  1FC3  0021               	movlb	1	; select bank1
 22005  1FC4  193C               	btfsc	_DimmerIntr1^(0+128),2
 22006  1FC5  0008               	return
 22007  1FC6  183C               	btfsc	_DimmerIntr1^(0+128),0
 22008  1FC7  0008               	return
 22009                           
 22010                           ;Dimmer_B1.c: 1620: if (RB2 != DimmerIntr1.Status) {
 22011  1FC8  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 22012  1FC9  0C89               	rrf	9,f
 22013  1FCA  3901               	andlw	1
 22014  1FCB  00FA               	movwf	??_DimmerLights_IOC_1
 22015  1FCC  3000               	movlw	0
 22016  1FCD  0020               	movlb	0	; select bank0
 22017  1FCE  190D               	btfsc	13,2	;volatile
 22018  1FCF  3001               	movlw	1
 22019  1FD0  067A               	xorwf	??_DimmerLights_IOC_1,w
 22020  1FD1  1903               	skipnz
 22021  1FD2  0008               	return
 22022                           
 22023                           ;Dimmer_B1.c: 1623: DimmerIntr1.Count = 0;
 22024  1FD3  0021               	movlb	1	; select bank1
 22025  1FD4  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 22026                           
 22027                           ;Dimmer_B1.c: 1624: DimmerIntr1.GO = 1;
 22028  1FD5  143C               	bsf	_DimmerIntr1^(0+128),0
 22029                           
 22030                           ;Dimmer_B1.c: 1626: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 22031  1FD6  1E3C               	btfss	_DimmerIntr1^(0+128),4
 22032  1FD7  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 22033                           
 22034                           ;Dimmer_B1.c: 1627: DimmerIntr1.Tune = 1;
 22035  1FD8  14BC               	bsf	_DimmerIntr1^(0+128),1
 22036                           
 22037                           ;Dimmer_B1.c: 1628: }
 22038                           ;Dimmer_B1.c: 1630: if (DimmerIntr1.TuneGO == 1) {
 22039  1FD9  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 22040  1FDA  2FF9               	goto	i1l8459
 22041                           
 22042                           ;Dimmer_B1.c: 1631: DimmerIntr1.TuneGO = 0;
 22043  1FDB  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 22044                           
 22045                           ;Dimmer_B1.c: 1634: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 22046  1FDC  3002               	movlw	2
 22047  1FDD  00FA               	movwf	??_DimmerLights_IOC_1
 22048  1FDE  087A               	movf	??_DimmerLights_IOC_1,w
 22049  1FDF  00F5               	movwf	i1Division@num
 22050  1FE0  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 22051  1FE1  3198  2066  319F   	fcall	i1_Division
 22052  1FE4  00FB               	movwf	??_DimmerLights_IOC_1+1
 22053  1FE5  087B               	movf	??_DimmerLights_IOC_1+1,w
 22054  1FE6  0021               	movlb	1	; select bank1
 22055  1FE7  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 22056                           
 22057                           ;Dimmer_B1.c: 1635: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 22058  1FE8  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 22059  1FE9  3AFF               	xorlw	255
 22060  1FEA  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 22061  1FEB  3E37               	addlw	55
 22062  1FEC  00FA               	movwf	??_DimmerLights_IOC_1
 22063  1FED  087A               	movf	??_DimmerLights_IOC_1,w
 22064  1FEE  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 22065                           
 22066                           ;Dimmer_B1.c: 1636: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 22067  1FEF  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 22068  1FF0  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 22069  1FF1  00FA               	movwf	??_DimmerLights_IOC_1
 22070  1FF2  087A               	movf	??_DimmerLights_IOC_1,w
 22071  1FF3  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 22072                           
 22073                           ;Dimmer_B1.c: 1637: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 22074  1FF4  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 22075  1FF5  3E05               	addlw	5
 22076  1FF6  00FA               	movwf	??_DimmerLights_IOC_1
 22077  1FF7  087A               	movf	??_DimmerLights_IOC_1,w
 22078  1FF8  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 22079  1FF9                     i1l8459:	
 22080                           
 22081                           ;Dimmer_B1.c: 1638: }
 22082                           ;Dimmer_B1.c: 1647: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 22083  1FF9  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 22084  1FFA  0020               	movlb	0	; select bank0
 22085  1FFB  1D0D               	btfss	13,2	;volatile
 22086  1FFC  0008               	return
 22087  1FFD  0021               	movlb	1	; select bank1
 22088  1FFE  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 22089  1FFF  0008               	return
 22090  2000                     __end_of_DimmerLights_IOC_1:	
 22091                           
 22092                           	psect	text154
 22093  1866                     __ptext154:	
 22094 ;; *************** function i1_Division *****************
 22095 ;; Defined at:
 22096 ;;		line 1504 in file "../src/Dimmer_B1.c"
 22097 ;; Parameters:    Size  Location     Type
 22098 ;;  value           1    wreg     unsigned char 
 22099 ;;  num             1    5[COMMON] unsigned char 
 22100 ;; Auto vars:     Size  Location     Type
 22101 ;;  value           1    8[COMMON] unsigned char 
 22102 ;;  Division        1    9[COMMON] unsigned char 
 22103 ;; Return value:  Size  Location     Type
 22104 ;;                  1    wreg      unsigned char 
 22105 ;; Registers used:
 22106 ;;		wreg, status,2, status,0, pclath, cstack
 22107 ;; Tracked objects:
 22108 ;;		On entry : 0/0
 22109 ;;		On exit  : 0/0
 22110 ;;		Unchanged: 0/0
 22111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22112 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22115 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22116 ;;Total ram usage:        5 bytes
 22117 ;; Hardware stack levels used:    1
 22118 ;; Hardware stack levels required when called:    1
 22119 ;; This function calls:
 22120 ;;		i1___lbdiv
 22121 ;; This function is called by:
 22122 ;;		_DimmerLights_IOC_1
 22123 ;;		_DimmerLights_IOC_2
 22124 ;; This function uses a non-reentrant model
 22125 ;;
 22126                           
 22127                           
 22128                           ;psect for function i1_Division
 22129  1866                     i1_Division:	
 22130                           
 22131                           ;incstack = 0
 22132                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 22133                           ;i1Division@value stored from wreg
 22134  1866  00F8               	movwf	i1Division@value
 22135                           
 22136                           ;Dimmer_B1.c: 1505: char result = (char) (value / num);
 22137  1867  0875               	movf	i1Division@num,w
 22138  1868  00F6               	movwf	??i1_Division
 22139  1869  0876               	movf	??i1_Division,w
 22140  186A  00F0               	movwf	i1___lbdiv@divisor
 22141  186B  0878               	movf	i1Division@value,w
 22142  186C  319B  23E8         	fcall	i1___lbdiv
 22143  186E  00F7               	movwf	??i1_Division+1
 22144  186F  0877               	movf	??i1_Division+1,w
 22145  1870  00F9               	movwf	i1Division@result
 22146                           
 22147                           ;Dimmer_B1.c: 1506: return result;
 22148  1871  0879               	movf	i1Division@result,w
 22149  1872  0008               	return
 22150  1873                     __end_ofi1_Division:	
 22151                           
 22152                           	psect	text155
 22153  1BE8                     __ptext155:	
 22154 ;; *************** function i1___lbdiv *****************
 22155 ;; Defined at:
 22156 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 22157 ;; Parameters:    Size  Location     Type
 22158 ;;  dividend        1    wreg     unsigned char 
 22159 ;;  divisor         1    0[COMMON] unsigned char 
 22160 ;; Auto vars:     Size  Location     Type
 22161 ;;  dividend        1    2[COMMON] unsigned char 
 22162 ;;  __lbdiv         1    4[COMMON] unsigned char 
 22163 ;;  __lbdiv         1    3[COMMON] unsigned char 
 22164 ;; Return value:  Size  Location     Type
 22165 ;;                  1    wreg      unsigned char 
 22166 ;; Registers used:
 22167 ;;		wreg, status,2, status,0
 22168 ;; Tracked objects:
 22169 ;;		On entry : 0/0
 22170 ;;		On exit  : 0/0
 22171 ;;		Unchanged: 0/0
 22172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22173 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22174 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22175 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22176 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22177 ;;Total ram usage:        5 bytes
 22178 ;; Hardware stack levels used:    1
 22179 ;; This function calls:
 22180 ;;		Nothing
 22181 ;; This function is called by:
 22182 ;;		i1_Division
 22183 ;; This function uses a non-reentrant model
 22184 ;;
 22185                           
 22186                           
 22187                           ;psect for function i1___lbdiv
 22188  1BE8                     i1___lbdiv:	
 22189                           
 22190                           ;incstack = 0
 22191                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 22192                           ;i1___lbdiv@dividend stored from wreg
 22193  1BE8  00F2               	movwf	i1___lbdiv@dividend
 22194  1BE9  01F4               	clrf	i1___lbdiv@quotient
 22195  1BEA  0870               	movf	i1___lbdiv@divisor,w
 22196  1BEB  1903               	btfsc	3,2
 22197  1BEC  2C07               	goto	i1l7679
 22198  1BED  01F3               	clrf	i1___lbdiv@counter
 22199  1BEE  0AF3               	incf	i1___lbdiv@counter,f
 22200  1BEF                     i1l7667:	
 22201  1BEF  1BF0               	btfsc	i1___lbdiv@divisor,7
 22202  1BF0  2BF8               	goto	i1l7669
 22203  1BF1  1003               	clrc
 22204  1BF2  0DF0               	rlf	i1___lbdiv@divisor,f
 22205  1BF3  3001               	movlw	1
 22206  1BF4  00F1               	movwf	??i1___lbdiv
 22207  1BF5  0871               	movf	??i1___lbdiv,w
 22208  1BF6  07F3               	addwf	i1___lbdiv@counter,f
 22209  1BF7  2BEF               	goto	i1l7667
 22210  1BF8                     i1l7669:	
 22211  1BF8  1003               	clrc
 22212  1BF9  0DF4               	rlf	i1___lbdiv@quotient,f
 22213  1BFA  0870               	movf	i1___lbdiv@divisor,w
 22214  1BFB  0272               	subwf	i1___lbdiv@dividend,w
 22215  1BFC  1C03               	skipc
 22216  1BFD  2C02               	goto	L15
 22217  1BFE  0870               	movf	i1___lbdiv@divisor,w
 22218  1BFF  02F2               	subwf	i1___lbdiv@dividend,f
 22219  1C00  1474               	bsf	i1___lbdiv@quotient,0
 22220  1C01  1003               	clrc
 22221  1C02                     L15:	
 22222  1C02  0CF0               	rrf	i1___lbdiv@divisor,f
 22223  1C03  3001               	movlw	1
 22224  1C04  02F3               	subwf	i1___lbdiv@counter,f
 22225  1C05  1D03               	btfss	3,2
 22226  1C06  2BF8               	goto	i1l7669
 22227  1C07                     i1l7679:	
 22228  1C07  0874               	movf	i1___lbdiv@quotient,w
 22229  1C08  0008               	return
 22230  1C09                     __end_ofi1___lbdiv:	
 22231  007E                     btemp	set	126	;btemp
 22232  007E                     pic14e$flags	set	126
 22233  007E                     wtemp	set	126
 22234  007E                     wtemp0	set	126
 22235  0080                     wtemp1	set	128
 22236  0082                     wtemp2	set	130
 22237  0084                     wtemp3	set	132
 22238  0086                     wtemp4	set	134
 22239  0088                     wtemp5	set	136
 22240  007F                     wtemp6	set	127
 22241  007E                     ttemp	set	126
 22242  007E                     ttemp0	set	126
 22243  0081                     ttemp1	set	129
 22244  0084                     ttemp2	set	132
 22245  0087                     ttemp3	set	135
 22246  007F                     ttemp4	set	127
 22247  007E                     ltemp	set	126
 22248  007E                     ltemp0	set	126
 22249  0082                     ltemp1	set	130
 22250  0086                     ltemp2	set	134
 22251  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         272
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      79
    BANK2            80      0      78
    BANK3            80      0      79
    BANK4            80      0      78
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK4[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->i1_Division
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_TwoPhase_Main->_DimmerLights_AssignationDimming
    _DimmerLights_AssignationDimming->_setDimmerIntr_MaxmumValue
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  170262
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1434
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5838
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    5838
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3774
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3774
                                             19 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45526
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   45526
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   40952
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4192
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   36576
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     338
                                              4 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10333
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21013
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2262
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1663
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3434
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   66260
       _DimmerLights_DimmingFunction
         _DimmerLights_TwoPhase_Main
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   49727
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   28755
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     355
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20477
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     355
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_TwoPhase_Main                           1     1      0   16258
                                             73 BANK0      1     1      0
    _DimmerLights_AssignationDimming
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _DimmerLights_AssignationDimming                      4     4      0   16170
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     355
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27563
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27563
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     622
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4777
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4777
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 6     6      0    1754
                                             13 BANK0      6     6      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     614
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     614
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  2     2      0     307
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     307
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     307
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
     _DimmerLights_TwoPhase_Main
       _DimmerLights_AssignationDimming
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_Status
           _DimmerLights_SelectPointer
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setMemory_Modify
       _DimmerLights_SelectPointer
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
     _DimmerLights_IOC_2
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4E      13       97.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     198      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     198      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Mar 20 16:20:40 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1A50                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l98 1366  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1CB3  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D4                            setTemp_Main@AD 006D  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 18F4  
                  __end_of_setDelayOff_GO 0B43                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 15DD  
                    _setDimmerLights_Line 1B0E                              ___ftadd@sign 004B  
                                     l100 137A                                       l110 11C8  
                                     l112 11D8                                       l108 11DE  
                                     l109 11DA                      _setDimmerLights_SwOn 0834  
                                     l327 1A5C                                       l328 1A5E  
                                     l371 1CDD                                       l259 16F7  
                                     l581 1787                                       l750 0DEE  
                                     l751 0E44                                       l916 0FB7  
                                     l950 18FD                                       l951 1904  
                                     l769 19A9                                       l945 1B1E  
                                     l876 1E1E                                       _GIE 005F  
                                     _CRC 00D6                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00DB  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0136                                       _Cmd 00D7  
            getDimmerLights_Status@lights 0022                                       _Sw1 01D0  
                                     _Sw2 0245                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1A69                     _Buzzer_Initialization 2637  
                         __end_of_ADC_Set 267B                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1DD9               _setDimmerIntr_ControlStatus 1DAA  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 26FD  
                   _setDimmerLights_OnOff 0F39          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l1042 08D0                                      l1060 0909  
                                    l1053 08E4                                      l1206 114B  
                                    l1063 0912                                      l1058 0914  
                                    l2211 0650                                      l1172 1B93  
                                    l2212 06A1                                      l1069 0928  
                                    l1173 1B9D                                      l2207 0701  
                                    l1504 0A28                                      l2252 14AC  
                                    l2237 277D                                      l1480 1110  
                                    l2272 0BE6                                      l2265 0830  
                                    l3090 1B35                                      l3251 141C  
                                    l2283 0C6C                                      l1644 01FF  
                         __end_of_IOC_Set 26DB                                      l1494 1E01  
                                    l1654 01DB                                      l1646 008B  
                                    l1655 01D9                                      l1647 0087  
                                    l3280 042B                                      l1648 0082  
                                    l2616 1987                                      l2640 0250  
                                    l3257 1433                                      l1834 04A4  
                                    l1828 0553                                      l2638 0384  
                                    l7003 0862                            _Load_Main$3837 002A  
                                    l7005 0867                                      l7031 1F7A  
                                    l7015 0890                                      l7111 15C7  
                                    l7017 0896                                      l2953 1E4E  
                                    l2929 1FC1                                      l2954 1E69  
                                    l7019 08A1                                      l7053 0AF5  
                                    l2958 1E65                                      l7063 0B25  
                                    l7207 1CEE                                      l8103 1A13  
                                    l7233 1D66                                      l2985 062F  
                                    l7209 1CF9                                      l2994 1A4F  
                                    l6611 124E                                      l7251 1A3A  
                                    l7067 0B39                                      l8051 27D6  
                                    l7307 0996                     _setDimmerLights_SwOff 1F4C  
                                    l6621 1256                                      l6605 1243  
                                    l7245 18F2                                      l8117 1B76  
                                    l6623 1262                                      l7095 1D93  
                                    l7087 19E5                                      l7255 1A49  
                                    l6703 27F1                                      l8151 1E92  
                                    l8143 1E74                                      l8071 1460  
                                    l8127 1B82                                      l8119 1B78  
                                    l6633 127D                                      l8313 08D6  
                                    l8145 1E80                                      l8241 1C13  
                                    l7281 10C8                                      l7329 1F3C  
                                    l7601 0BD1                                      l8129 1B86  
                                    l6571 13F2                                      l8315 08DD  
                                    l8307 08CA                                      l6707 27F7  
                                    l8155 1E9B                                      l8251 1C23  
                                    l7611 0BFC                                      l8083 1478  
                                    l6637 1285                                      l6629 1274  
                                    l6725 1C79                                      l6741 03BB  
                                    l6813 0C9A                                      l8341 090B  
                                    l8317 08E1                                      l8253 1C28  
                                    l7293 0941                                      l7621 0C45  
                                    l7613 0C17                                      l9141 17D4  
                                    l6575 13F9                                      l6807 0C84  
                                    l8319 08E5                                      l7447 1DC2  
                                    l7455 19FC                                      l9215 00E0  
                                    l7623 0C49                                      l7615 0C39  
                                    l8087 1481                                      l6673 19B7  
                                    l7641 1C54                                      l6585 1421  
                                    l6577 1403                                      l6737 03B4  
                                    l7465 199F                                      l9241 0163  
                                    l9209 00AE                                      l7297 0946  
                                    l7625 0C4D                                      l7617 0C3D  
                                    l7609 0BF5                                      l9137 17CC  
                                    l9129 17AD                                      l7643 1C5D  
                                    l6587 1429                                      l6579 1408  
                                    l6771 040A                                      l6747 03CA  
                                    l6835 0CF4                                      l6827 0CDB  
                                    l6907 0A49                                      l8363 130D  
                                    l9059 0787                                      l9307 01EE  
                                    l9251 018F                                      l7619 0C41  
                                    l8603 1BB3                                      l9331 0B74  
                                    l6685 1A2B                                      l7653 1C6C  
                                    l6765 03F7                                      l6941 0AAE  
                                    l6933 0A94                                      l6925 0A79  
                                    l8349 0921                                      l8365 131E  
                                    l7573 27E7                                      l9085 10EF  
                                    l9261 01AB                                      l7629 0C51  
                                    l8605 1BB6                                      l9157 17FB  
                                    l6783 043D                                      l6767 0401  
                                    l6759 03E4                                      l6871 0D86  
                                    l6855 0D43                                      l6935 0A9D  
                                    l6927 0A87                                      l7487 1E49  
                                    l7831 1080                                      l7575 27EC  
                                    l9271 01C1                                      l9247 0172  
                                    l9255 019B                                      l9175 0069  
                                    l9343 0BB9                                      l9335 0B8B  
                                    l6697 19CE                                      l6689 1A35  
                                    l6777 041D                                      l6769 0406  
                                    l6849 0D2D                                      l6937 0AA0  
                                    l7497 1E60                                      l7489 1E52  
                                    l7841 1093                                      l7817 1067  
                                    l7913 12A8                                      l7569 27E0  
                                    l8641 09B1                                      l9193 008A  
                                    l8713 04B6                                      l8609 1BBB  
                                    l6787 044F                                      l6779 0427  
                                    l6883 0DA2                                      l6867 0D7E  
                                    l8707 04A7                                      l8715 04B9  
                                    l9339 0BA2                                      l6797 046A  
                                    l7829 107D                                      l8629 27B4  
                   _myMain_Initialization 191A                                      l6879 0D9A  
                                    l7839 108E                                      l8655 0A21  
                                    l8647 09C6                                      l9711 1B07  
                                    l9375 1FA1                                      l6993 0851  
                                    l9721 1C9C                                      l8745 052A  
                                    l6995 0854                                      l8851 198C  
                                    l8755 053F                                      l9725 1CA2  
                                    l9709 1B01                                      l8909 02F8  
                                    l8757 0541                                      l9719 1C99  
                                    l9751 1CC6                                      l8855 1992  
                                    l8919 032C                                      l9841 11F4  
                                    l9745 1CBD                                      l9921 170A  
                                    l9913 16FD                                      _CFGS 0CAE  
                                    l7995 1DE9                                      l9691 1012  
                                    l9747 1CC0                                      l9923 170D  
                                    l9915 1700                                      l8949 1B2F  
                                    l9685 1009                                      l9773 117C  
                                    l9909 16DE                                      l8885 0283  
                                    l8869 0238                                      l9871 1225  
                                    l9855 1205                                      l9863 120D  
                                    l9687 100C                                      l9783 118C  
                                    l9775 117F                                      l9951 1664  
                                    l9927 1713                                      l9919 1706  
                                    l8895 02B8                              __CFG_WDTE$ON 0000  
                                    l8969 11B2                                      l9849 11FC  
                                    l9785 118F                                      l9945 165B  
                                    l9875 1229                                      l9779 1185  
                                    l9947 165E                                      l9891 16C6  
                                    l9789 1195                                      l9879 122D  
                                    l9967 1676                                      l9895 16CC  
                                    l9969 168F                                      l9889 16C3  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u6005 0D4F                                      u6015 0D5F  
                                    u6035 0D87                                      _PEIE 005E  
                                    u6045 0D8D                                      u6125 0A50  
                                    u5505 126D                                      u5425 143A  
                                    u5515 1275                                      u5355 13FE  
                                    u6075 0DA3                                      u6155 0A7A  
                                    u6085 0DA9                                      u8005 1E8B  
                                    u5375 1417                                      u8015 1E93  
                                    u6185 0A95                                      u6425 0B01  
                                    u5475 1259                                      u5395 1424  
                                    u5495 1263                                      u6480 1582  
                                    u5825 040B                                      u9115 0513  
                                    u5765 03E5                                      u5925 0CAC  
                                    u6485 1580                                      u5855 041E  
                                    u5935 0CBC                                      u9135 0531  
                                    u5945 0CDC                                      u6585 1CE3  
                                    u5795 03F8                                      u5955 0CEB  
                                    u5965 0CF5                                      u7645 197A  
                                    u9095 04FC                                      u9505 1B36  
                                    u9515 1B3B                                      u7675 1AE1  
                                    u9545 11A8                                      u9805 17BC  
                                    u7975 1E77                                      u9745 1107  
                                    u7995 1E81                                      _LWLO 0CAD  
                                    u9855 17EB                                      _RSSI 00DD  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1AB9                _setDimmerLights_DimmingRun 1A9E  
                                    _Buz1 0120                                      _Load 0138  
                                    _Temp 0160                                      _main 138E  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 178E  
                         __end_of_RF_Main 2643                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 275D  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E         setDimmerLights_SwOn@dimmingStatus 002E  
    __end_of_DimmerLights_DimmingFunction 092A     __size_of_DimmerLights_DimmingFunction 0080  
            _DimmerLights_DimmingFunction 08AA                __end_of_setRFSW_AdjControl 09AA  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2532 0022      _getDimmerLights_Allow_Condition$2533 0023  
    _getDimmerLights_Allow_Condition$2534 0024                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1095  __size_of_getDimmerLights_Allow_Condition 003E  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1057                    _getDimmerLights_Status 2787  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 2745  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00D9  
                                   l10011 0F91                                     l10005 0F80  
                                   l10007 0F8A                                     l10015 0F97  
                                   l10033 0FCE                                     l10203 1E20  
                                   l10029 0FC7                                     l10143 069C  
                                   l10049 0FFD                                     l10081 163B  
                                   l10067 1605                                     l10171 06E2  
                                   l10069 160C                                     l10253 0589  
                                   l10157 06B0                                     l10341 13BD  
                                   l10079 1634                                     l10247 0579  
                                   l10265 05C0                                     l10257 0598  
                                   l10185 06FA                                     l10337 13B2  
                                   l10283 0602                                     l10267 059B  
                                   l10285 05DD                                     l10269 05C8  
                                   l10287 060A                                     l10295 0625  
                                   l10289 0614                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0065  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 00E9  
                         __end_of___awdiv 128C                           __end_of___lbdiv 1C6E  
                         __end_of___ftadd 0482                           __end_of___ftdiv 0D16  
                         __end_of___ftneg 26BC                                     u10005 00AC  
                                   u10015 00DE                                     u10105 01A2  
                                   u10025 0122                                     u10215 0B67  
                                   u10225 0B7E                                     u10235 0B95  
                         __end_of___ftmul 0DCA                                     u10245 0BAC  
                                   u10255 0BC3                           ___awdiv@divisor 0020  
                                   u10295 1FB9                                     _T1CON 0018  
                         __end_of___fttol 0AB7                                     u10655 1950  
                                   u11640 05C6                                     u11465 0674  
                                   u11645 05A4                                     u11670 0608  
                                   u11495 06D1                                     u11675 05E6  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1EA2  
                                   i1l988 1EC8                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1980  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 1578  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1513  
                                   _Light 00DC                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1C4C                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 2751        DimmerLights_DimmingFunction@lights 0021  
                                   _getAD 1BA8                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 18BB  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1897                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1885                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___lbdiv 0021  
                     _getAll_Sw_KeyStatus 27A9                        _setRF_DimmerLights 1578  
                         ___lbdiv@divisor 0020               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0023  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0067  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0020  
             ??_setDimmerLights_DimmingOn 0022                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 2778                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 13E9                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 264D            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 0559                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 26A3  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0020              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0BD0                            _setMemory_Data 2715  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0770        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 128C                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                             _DimmerIntr2 00C8                  _getMain_All_LightsStatus 18E1  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1941  
                 ??_Switch_Initialization 0025                    ?_setDimmerLights_OnOff 006D  
                    ??_setRF_DimmerLights 0066                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 171F                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
        __end_of_getDimmerIntr_Dimming_Sw 1A37                                 ??_RF_Main 0070  
             ?_DimmerLights_TwoPhase_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 269B                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1C90                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 144A                  _getMain_All_Error_Status 1E38  
                                  _IOCBF2 1CB2                                    i1l1012 1F00  
                                  i1l1443 001A                                    i1l9031 1C45  
                                  i1l9041 26F9                                    i1l8403 1EAF  
                                  i1l8415 1EBE                                    i1l8409 1EB6  
                                  i1l8527 1050                                    i1l8471 1EE7  
                                  i1l7667 1BEF                                    i1l8459 1FF9  
                                  i1l8483 1EF6                                    i1l7669 1BF8  
                                  i1l8477 1EEE                                    i1l7679 1C07  
                                  i1l9577 0012                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0026                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1A83  
                                  u964_25 1C40                                    _WDTCON 0097  
    __end_of_setDimmerLights_DimmingClose 2715     __size_of_setDimmerLights_DimmingClose 000C  
            _setDimmerLights_DimmingClose 2709                        DelayTime_1us@count 0020  
                      setRF_AdjControl@sw 0027                      Exception_Main@i_7194 0033  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 196B                                    _Dimmer 012C  
                                  _DlySw1 01D9                                    _DlySw2 01DE  
                        _setRF_AdjControl 1F12                  ?_setOverTemp_ADV_Restore 0070  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 27EE  
              __end_of_Mcu_Initialization 18A9                       __end_of_Buzzer_Main 11E5  
                                  _Memory 0220                          i1Division@result 0079  
                                  _Timer1 0131                                    ___bmul 27EE  
                  __end_of_Exception_Main 0630                      Exception_Main@lights 0035  
                                  ___wmul 1B2C                       __size_ofi1_Division 000D  
                               ??___awdiv 0024                                 ??___lbdiv 0021  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 0017  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024                    ??_setDimmerLights_Main 0070  
                  ??_setDimmerLights_Line 0020                                    _r_data 00E3  
                    Exception_Main@status 002E   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1C2A  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021         ??_getAll_DimmerIntr_Dimming_Sw_RF 0020  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1C09  
                                  _s_data 00E4                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 11E5                                    _myMain 00AF  
                    ??_RF_Timeout_Counter 0020                    __end_of_setMemory_Data 2721  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0027  
                                  _setBuz 1335                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 002F               __end_of_Load_Initialization 263D  
        ??_setDimmerLights_Initialization 0020           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0020          __end_of_setDimmerIntr_Dimming_RF 1DAA  
        __end_of_setDimmerIntr_Dimming_Sw 1D7B                     ___ftmul@f3_as_product 0039  
                       __end_ofi1___lbdiv 1C09                 _setDimmerLights_DimmingOn 1CFE  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 191A               getMain_Lights_Count@status1 0021  
             getMain_Lights_Count@status2 0022               __size_of_DimmerLights_IOC_1 003D  
             __size_of_DimmerLights_IOC_2 003D                     __end_of_SwPointSelect 1A1E  
             __size_of_DimmerLights_TMR_1 0038               __size_of_DimmerLights_TMR_2 0038  
            __size_of_Flash_Memory_Modify 0086                   __size_of_LedPointSelect 0020  
         setDimmerIntr_Dimming_Sw@command 0020                        setTemp_Main@TempGO 006C  
                        ___lbdiv@dividend 0022                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1980  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004F  
         getDimmerIntr_DimmingValue@value 0021           setDimmerIntr_DimmingValue@value 0020  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5318 0022  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2446 002F  
               _setDimmerLights_SwOn$2455 0030                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
           ?_setDimmerLights_DimmingClose 0070                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1BC8  
                           __end_of_getAD 1BC8                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 272D  
                         _getSw_KeyStatus 1B69                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021     DimmerLights_AssignationDimming@status 0067  
                         ?_setMemory_Data 0020            ??_DimmerLights_DimmingFunction 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 1885  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 19D9                __end_of_set_TimeoutCleared 2662  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0064  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 26FD                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 2643                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 119B                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 2649  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 267B                             ??_Switch_Main 0036  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00DA  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0023  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 138E                            _getDelayOff_GO 2798  
                     _CC2500_WriteCommand 1000                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 0E7E             ??_DimmerLights_Initialization 0064  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070         __size_of_getDimmerIntr_Dimming_Sw 0019  
                              _getLoad_AD 178E                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 268B                 ?_getDimmerIntr_Dimming_Sw 0070  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026       __size_of_DimmerLights_TwoPhase_Main 0055  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 2674  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 0B43  
      __end_of_DimmerLights_SelectPointer 19D9                _DimmerLights_SelectPointer 19C2  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 26E6  
                      _setRFSW_AdjControl 092A                    __end_of_setProductData 2709  
           setDimmerLights_Dimming@lights 006D                                   _IOC_ISR 26F1  
                                 _IOC_Set 26D0                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006A     getDimmerLights_Allow_Condition@lights 0025  
                    ?_CC2500_WriteCommand 0070                              ??i1_Division 0076  
                       _Flash_Memory_Main 10D5                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1A69                    __size_of_CC2500_RxData 006B  
                  __size_of_CC2500_TxData 006C                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 2640  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0026                                   _WDT_Set 2751  
         __end_of_setControl_Lights_Table 0C6D                           setRF_Main@error 00E8  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 12E0  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 2769                           __size_of_IO_Set 001B  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 002F  
       __size_of_setDimmerIntr_Dimming_Sw 002B                         __end_of_getBuz_GO 27CB  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 27A9                                   _VarLED1 01E7  
                                 _VarLED2 01EB            __end_of_getDimmerLights_Status 2798  
                       __end_of_getRxData 14AE                   __end_of_getSw_KeyStatus 1B88  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0065                            ??_setTemp_Main 0065  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 1238            ??_setDimmerLights_DimmingClose 0023  
                                 ___lbdiv 1C4C                                   ___ftadd 038C  
                                 ___ftdiv 0C6D                                   ___ftneg 26B3  
                         __size_of___wmul 001E                                   ___ftmul 0D16  
                                 ___fttol 0A30                       __end_of_Switch_Main 26F1  
                      __end_ofi1_Division 1873                                   ___lwdiv 1E6B  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 27CB                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 1F87                                   __ptext2 191A  
                                 __ptext3 0B43                                   __ptext4 178E  
                                 __ptext5 1BA8                                   __ptext6 18A9  
                                 __ptext7 0002                                   __ptext8 2646  
                                 __ptext9 0482                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
                      i1___lbdiv@dividend 0072                 __end_of_Flash_Memory_Main 1116  
               __end_of_Flash_Memory_Read 1A83                   ??_setDimmerLights_SwOff 0022  
                              _setRF_Main 0630                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 2683                  __end_of_setRF_AdjControl 1F4C  
                       _DimmerLights_Main 1E08            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 2668                __end_of_CC2500_ClearRXFIFO 2655  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 2659  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00ED                            _LedPointSelect 1B88  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 19AB                                   clrloop0 266F  
          __size_of_Switch_Initialization 0008             __end_of_Switch_Initialization 26B3  
                    end_of_initialization 004F                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 1D26                             _DelayTime_1us 1CD8  
                       __end_of_setTxData 0F39                __end_of_Flash_Memory_Write 1E08  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 2668  
              __end_of_setRF_TransceiveGO 18E1                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0070                      Flash_Memory_Read@ret 0023  
                                 initloop 2669                                _setSw_Main 0205  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 0032  
                       _CC2500_ReadStatus 1CB3                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1873                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                      i1___lbdiv@quotient 0074                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 1648                             _CC2500_TxData 16B3  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 09AA  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1800  
                           _setCmd_Status 1A37                       _Flash_Memory_Unlock 26BC  
                     ??_CC2500_ReadStatus 0022                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                   setTemp_Main@DangerValue 006A  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1E38  
                      _Mcu_Initialization 1897                  __size_of_CC2500_PowerRST 0044  
        __size_of_setOverTemp_ADV_Restore 001C              __end_of_setRF_TimeoutCleared 2651  
                    __end_of_my_MainTimer 1FC3                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1BA8  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002D  
        getDimmerIntr_DimmingValue@lights 0022          setDimmerIntr_DimmingValue@lights 0022  
                               i1___lbdiv 1BE8                 __end_of_CC2500_InitSetREG 1D50  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065         DimmerLights_AssignationDimming@sw 0068  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 1CD8  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 1D26                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1A9E  
                    _setRF_Initialization 26DB                        _setMemory_LoopSave 1907  
                             _Switch_Main 26E6                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 27DC  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1956               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 27BA  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 2800       __size_of_getDimmerIntr_DimmingValue 0016  
        DimmerLights_TwoPhase_Main@lights 0069                      setRF_DimmerLights@on 0065  
                          __end_of___wmul 1B4A                         getSw_KeyStatus@sw 0024  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0022  
           __size_of_getDimmerLights_Line 0013          DimmerLights_SelectPointer@lights 0021  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006B  
                          __end_of_setLED 1238                             __pbitbssBANK1 0770  
           __size_of_setDimmerLights_Line 001E             __size_of_setDimmerLights_SwOn 0076  
                          __end_of_setBuz 138E                __end_of_DimmerLights_IOC_1 2000  
              __end_of_DimmerLights_IOC_2 1057                      _CC2500_FrequencyCabr 275D  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 1095                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 1EDA                __end_of_DimmerLights_TMR_2 1F12  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 2693  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                              ?i1___lbdiv 0070              ?_setDimmerIntr_ControlStatus 0020  
              __end_of_CC2500_InitPATable 1B69           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 0559                            ??_RF_RxDisable 0024  
  __end_of_getDimmerLights_PercentToValue 1513   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 14AE                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 005E  
                     __size_of_getLoad_OK 0008             setRF_AdjControl@dimmingStatus 0026  
                      _set_TimeoutCleared 265D         __end_of_setDimmerIntr_MaxmumValue 19F0  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 01E3                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 008D  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 2646                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00DE  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0030                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 0017  
        __end_of_getMain_All_LightsStatus 18F4                                 _Tx_Length 00E1  
                             __pdataBANK4 024E                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1E6B  
                        _CC2500_SIDLEMode 2659                __size_of_DimmerLights_Main 0030  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022            getDimmerIntr_Dimming_Sw@lights 0021  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002E  
          getDimmerIntr_Dimming_Sw@status 0020                                 ___latbits 0003  
                        _setMemory_Modify 18BB                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E5  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 0DCA                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 01BE  
                           _DimmerLights2 01C7                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0065            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1AD5  
                setRFSW_AdjControl@status 0067                           ??_CC2500_TxData 0024  
                               __pnvBANK1 00ED                            getRxData@error 00E6  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 264D  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0031  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                           _getCmd_Status 27DC                                setBuz@time 0029  
                         ??_setCmd_Status 0021                       setDelayOff_GO@value 0066  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002C                    _setTemp_Initialization 2636  
                               _getBuz_GO 27BA                  ?_setDimmerLights_Dimming 006A  
     __end_of_Flash_Memory_Initialization 07CF               _Flash_Memory_Initialization 0705  
                                ?___awdiv 0020                                 __ptext100 2798  
                               __ptext101 27DC                                  ?___lbdiv 0020  
                               __ptext110 268B                                 __ptext102 128C  
                               __ptext111 1E38                                 __ptext103 0E7E  
                               __ptext120 18BB                                 __ptext112 12E0  
                               __ptext104 18CE                                 __ptext121 1513  
                               __ptext113 07CF                                 __ptext105 1578  
                               __ptext130 2769                                 __ptext122 14AE  
                               __ptext114 19D9                                 __ptext106 1B0E  
                               __ptext131 1C4C                                 __ptext123 0A30  
                               __ptext115 1D7B                                 __ptext107 1D50  
                               __ptext140 2787                                 __ptext132 2683  
                               __ptext124 26B3                                 __ptext116 08AA  
                               __ptext108 1995                                 __ptext141 19C2  
                               __ptext133 171F                                 __ptext125 0D16  
                               __ptext117 26C5                                 __ptext109 1057  
                                ?___ftadd 0041                                 __ptext150 1EA2  
                               __ptext142 267B                                 __ptext134 26FD  
                               __ptext126 0C6D                                 __ptext118 2635  
                               __ptext151 26F1                                 __ptext143 2662  
                               __ptext135 0834                                 __ptext127 038C  
                               __ptext119 0DCA                                 __ptext152 101A  
                               __ptext144 19AB                                 __ptext136 1335  
                               __ptext128 1C6E                                 __ptext153 1FC3  
                               __ptext145 119B                                 __ptext137 1238  
                               __ptext129 13E9                                 __ptext154 1866  
                               __ptext146 2637                                 __ptext138 1A1E  
                               __ptext155 1BE8                                 __ptext139 1F4C  
                               __ptext148 1C2A                                 __ptext149 1EDA  
                               _getRxData 144A                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 10D5  
                        ??_setProductData 0063                   _setOverTemp_ADV_Restore 1AD5  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 263A                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1995  
                     __size_of_setSw_Main 0187              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 19AB              ??_setDimmerIntr_DimmingValue 0021  
              _getDimmerIntr_DimmingValue 1995                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00C7                         ?_setRF_AdjControl 0070  
                               _r_address 00E2             __end_of_setDimmerLights_OnOff 1000  
          __size_of_setDimmerLights_SwOff 003B            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 1F87              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 192D                               ??i1___lbdiv 0071  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0025  
                      ??_setRF_AdjControl 0024                             _SwPointSelect 1A07  
                     __end_of_setLED_Main 1157              ??_DimmerLights_TwoPhase_Main 0069  
                        ??_getDelayOff_GO 0022                         i1___lbdiv@divisor 0070  
                       i1___lbdiv@counter 0073                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 2646                         _CC2500_rfSettings 182F  
                          ___wmul@product 0024                                  _LED_Main 2739  
                         SwPointSelect@sw 0020                                 clear_ram0 266E  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1F87                                 _setTxData 0E7E  
     __end_of_DimmerLights_Initialization 26D0               _DimmerLights_Initialization 26C5  
                  _Flash_Memory_Main$3446 0028                        _CC2500_ClearRXFIFO 2651  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 2655  
                _getDimmerIntr_Dimming_Sw 1A1E                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1941  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 002F  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 0017  
                      _Flash_Memory_Write 1DD9                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1C2A  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 2745  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 18CE                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 2787                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 101A                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 18A9                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0023                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00D7                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00D8  
                            setSw_Main@sw 0035                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 272D  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 0834  
                   _DlyOff_Initialization 2662         __size_of_getMain_All_LightsStatus 0013  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 2769  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1D7B               setDimmerLights_OnOff@lights 00E5  
                _setDimmerIntr_Dimming_Sw 1D50                                  _Fosc_Set 2649  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 1800                        __end_of_getLoad_OK 2693  
                   _Switch_Initialization 26AB         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 0BD0  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1A50                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 0017                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 00E0                               ??_Temp_Main 006F  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$7181 0021  
           _getMain_All_Error_Status$7182 0023                  __end_of_getDimmer_LoadGO 269B  
                     _Load_Initialization 263A          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
               ??_setOverTemp_ADV_Restore 0020                              _setTemp_Main 0482  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0022  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0031  
                                ___awtoft 1C6E                          ??_LedPointSelect 0020  
                                ___ftpack 13E9             __size_of_getMain_Lights_Count 0012  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E7                      CC2500_WriteREG@value 0022  
                             _setLED_Main 1116                __end_of_setRF_DimmerLights 15DD  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 26A3                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 1AD5  
                                __ptext11 2643                                  __ptext20 265D  
                                __ptext12 2636                                  __ptext21 196B  
                                __ptext13 26E6                                  __ptext30 1F12  
                                __ptext22 26AB                                  __ptext14 0205  
                                __ptext31 1095                                  __ptext23 26A3  
                                __ptext15 192D                                  __ptext40 1AF1  
                                __ptext32 092A                                  __ptext24 2640  
                                __ptext16 1CFE                                  __ptext41 1956  
                                __ptext33 1A9E                                  __ptext25 0630  
                                __ptext17 1B69                                  __ptext50 2651  
                                __ptext42 2659                                  __ptext34 27CB  
                                __ptext26 144A                                  __ptext18 1A07  
                                __ptext51 1000                                  __ptext43 1157  
                                __ptext35 27BA                                  __ptext27 0800  
                                __ptext19 1980                                  __ptext60 1A83  
                                __ptext52 264D                                  __ptext44 1D26  
                                __ptext36 2778                                  __ptext28 1907  
                                __ptext61 26D0                                  __ptext53 1941  
                                __ptext45 1B4A                                  __ptext37 16B3  
                                __ptext29 0BD0                                  __ptext70 1E6B  
                                __ptext62 2649                                  __ptext54 1A50  
                                __ptext46 1C90                                  __ptext38 1648  
                                __ptext71 263A                                  __ptext63 2674  
                                __ptext55 263D                                  __ptext47 275D  
                                __ptext39 1CB3                                  __ptext80 2721  
                                __ptext72 1AB9                                  __ptext64 0053  
                                __ptext56 26DB                                  __ptext48 1CD8  
                                __ptext81 0705                                  __ptext73 2739  
                                __ptext65 1885                                  __ptext57 1897  
                                __ptext49 2655                                  __ptext90 0F39  
                                __ptext82 2715                                  __ptext74 1116  
                                __ptext66 269B                                  __ptext58 2751  
                                __ptext91 11E5                                  __ptext83 1DD9  
                                __ptext75 272D                                  __ptext67 2693  
                                __ptext59 2745                                  __ptext92 1B88  
                                __ptext84 26BC                                  __ptext76 1873  
                                __ptext68 1C09                                  __ptext93 2709  
                                __ptext85 1A69                                  __ptext77 10D5  
                                __ptext69 1B2C                                  __ptext94 19F0  
                                __ptext86 0559                                  __ptext78 27A9  
                                __ptext95 1DAA                                  __ptext87 18F4  
                                __ptext79 09AA                                  __ptext96 0AB7  
                                __ptext88 1E08                                  __ptext97 27EE  
                                __ptext89 15DD                                  __ptext98 1A37  
                                __ptext99 18E1                                  __product 024E  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1907              __end_of_setDimmerLights_Main 1648  
            __end_of_setDimmerLights_Line 1B2C                        _DimmerLights_IOC_1 1FC3  
                      _DimmerLights_IOC_2 101A              __end_of_setDimmerLights_SwOn 08AA  
                            ??_setSw_Main 0033                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 192D  
      __size_of_DimmerIntr_Initialization 00B4                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 1EA2                        _DimmerLights_TMR_2 1EDA  
                __end_of_CC2500_SIDLEMode 265D                setDimmerLights_Main@lights 00E6  
             __end_of_DelayOffPointSelect 19C2                  setOverTemp_ADV_Restore@i 0021  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1AF1  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1B4A  
                __end_of_setMemory_Modify 18CE      _getAll_DimmerIntr_Dimming_Sw_RF$2392 0021  
    _getAll_DimmerIntr_Dimming_Sw_RF$2393 0022                       ?_DimmerLights_IOC_1 0070  
                     ?_DimmerLights_IOC_2 0070                        __end_of_setRF_Main 0705  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
                     ?_DimmerLights_TMR_2 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00E5  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1956  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6419 0022  
                                main@argc 00E9                                  main@argv 00EB  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6415 0021  
                    _getSw_KeyStatus$6416 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 1157                  __size_of_getSw_KeyStatus 001F  
            setDimmerLights_Dimming@value 006C        __end_of_setDimmerIntr_DimmingValue 1A07  
              _setDimmerIntr_DimmingValue 19F0               __end_of_Flash_Memory_Modify 0A30  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 0800  
             __end_of_Flash_Memory_Unlock 26C5                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1C90                        __end_of_setSw_Main 038C  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 007A  
                    ??_DimmerLights_IOC_2 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                    ??_DimmerLights_TMR_2 0070                            Division@result 0029  
         __end_of_setOverTemp_ADV_Restore 1AF1        __end_of_DimmerLights_TwoPhase_Main 1335  
              _DimmerLights_TwoPhase_Main 12E0                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 2636   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 2635                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 263D  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027   __end_of_DimmerLights_AssignationDimming 0800  
__size_of_DimmerLights_AssignationDimming 0031         ??_DimmerLights_AssignationDimming 0065  
        ?_DimmerLights_AssignationDimming 0070           _DimmerLights_AssignationDimming 07CF  
                    _Flash_Memory_Erasing 2721                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00DF                   __size_of_Exception_Main 00D7  
                           Division@value 0028           __end_of_DelayOff_Initialization 2683  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 268B  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0AB7               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 009D          __size_of_setDimmerLights_Dimming 0054  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00CA  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0065  
                              i1_Division 1866                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1CFE                ??_getDimmerIntr_Dimming_Sw 0020  
                 __end_of_CC2500_ReadByte 1B0E              __end_of_setSw_Initialization 26AB  
                         _Timeout_Counter 196B           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 2778  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 2739  
          __end_of_setTemp_Initialization 2637                               Division@num 0025  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 2640  
               __size_of_setRF_AdjControl 003A                     __end_of_CC2500_RxData 16B3  
                   __end_of_CC2500_TxData 171F                     _setLoad_AH_AL_Restore 1AB9  
                 __end_of_CC2500_PowerRST 119B  
