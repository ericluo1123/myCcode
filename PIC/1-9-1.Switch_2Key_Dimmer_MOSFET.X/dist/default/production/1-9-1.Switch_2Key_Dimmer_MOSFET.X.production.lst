

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Jan 03 10:54:28 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	text95,local,class=CODE,merge=1,delta=2
   119                           	psect	text96,local,class=CODE,merge=1,delta=2
   120                           	psect	text97,local,class=CODE,merge=1,delta=2
   121                           	psect	text98,local,class=CODE,merge=1,delta=2
   122                           	psect	text99,local,class=CODE,merge=1,delta=2
   123                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text103,local,class=CODE,merge=1,delta=2
   127                           	psect	text104,local,class=CODE,merge=1,delta=2
   128                           	psect	text105,local,class=CODE,merge=1,delta=2
   129                           	psect	text106,local,class=CODE,merge=1,delta=2
   130                           	psect	text107,local,class=CODE,merge=1,delta=2
   131                           	psect	text108,local,class=CODE,merge=1,delta=2
   132                           	psect	text109,local,class=CODE,merge=1,delta=2
   133                           	psect	text110,local,class=CODE,merge=1,delta=2
   134                           	psect	text111,local,class=CODE,merge=1,delta=2
   135                           	psect	text112,local,class=CODE,merge=1,delta=2
   136                           	psect	text113,local,class=CODE,merge=1,delta=2
   137                           	psect	text114,local,class=CODE,merge=1,delta=2
   138                           	psect	text115,local,class=CODE,merge=1,delta=2
   139                           	psect	text116,local,class=CODE,merge=1,delta=2
   140                           	psect	text117,local,class=CODE,merge=1,delta=2
   141                           	psect	text118,local,class=CODE,merge=1,delta=2
   142                           	psect	text119,local,class=CODE,merge=1,delta=2
   143                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text121,local,class=CODE,merge=1,delta=2
   145                           	psect	text122,local,class=CODE,merge=1,delta=2
   146                           	psect	text123,local,class=CODE,merge=1,delta=2
   147                           	psect	text124,local,class=CODE,merge=1,delta=2
   148                           	psect	text125,local,class=CODE,merge=1,delta=2
   149                           	psect	text126,local,class=CODE,merge=1,delta=2
   150                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text128,local,class=CODE,merge=1,delta=2
   152                           	psect	text129,local,class=CODE,merge=1,delta=2
   153                           	psect	text130,local,class=CODE,merge=1,delta=2
   154                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text133,local,class=CODE,merge=1,delta=2
   157                           	psect	text134,local,class=CODE,merge=1,delta=2
   158                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	intentry,global,class=CODE,delta=2
   161                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  1F7B                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  1F7B  3463               	retlw	99
  2172  1F7C  3402               	retlw	2
  2173  1F7D  3400               	retlw	0
  2174  1F7E  3400               	retlw	0
  2175  1F7F  3400               	retlw	0
  2176  1F80  3400               	retlw	0
  2177  1F81  3400               	retlw	0
  2178  1F82  3400               	retlw	0
  2179  1F83  3400               	retlw	0
  2180  1F84  3400               	retlw	0
  2181  1F85  3400               	retlw	0
  2182  1F86  3400               	retlw	0
  2183  1F87  34FF               	retlw	255
  2184  1F88  34FF               	retlw	255
  2185  1F89  34FF               	retlw	255
  2186  1F8A  3400               	retlw	0
  2187  1F8B  3400               	retlw	0
  2188  1F8C  3400               	retlw	0
  2189  1F8D  3400               	retlw	0
  2190  1F8E  3400               	retlw	0
  2191  1F8F  3400               	retlw	0
  2192  1F90  3400               	retlw	0
  2193  1F91  3400               	retlw	0
  2194  1F92  3400               	retlw	0
  2195  1F93  3400               	retlw	0
  2196  1F94  3400               	retlw	0
  2197  1F95  3400               	retlw	0
  2198  1F96  3400               	retlw	0
  2199  1F97  3400               	retlw	0
  2200  1F98  3400               	retlw	0
  2201  1F99  3400               	retlw	0
  2202  1F9A  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1000                     __pstringtext:	
  2206  1000                     _CC2500_registers_address:	
  2207  1000  3403               	retlw	3
  2208  1001  3416               	retlw	22
  2209  1002  3417               	retlw	23
  2210  1003  341E               	retlw	30
  2211  1004  341F               	retlw	31
  2212  1005  3420               	retlw	32
  2213  1006  342A               	retlw	42
  2214  1007  342B               	retlw	43
  2215  1008  340B               	retlw	11
  2216  1009  340C               	retlw	12
  2217  100A  340D               	retlw	13
  2218  100B  340E               	retlw	14
  2219  100C  340F               	retlw	15
  2220  100D  3410               	retlw	16
  2221  100E  3411               	retlw	17
  2222  100F  3412               	retlw	18
  2223  1010  3413               	retlw	19
  2224  1011  3414               	retlw	20
  2225  1012  340A               	retlw	10
  2226  1013  3415               	retlw	21
  2227  1014  3421               	retlw	33
  2228  1015  3422               	retlw	34
  2229  1016  3418               	retlw	24
  2230  1017  3419               	retlw	25
  2231  1018  341A               	retlw	26
  2232  1019  341B               	retlw	27
  2233  101A  341C               	retlw	28
  2234  101B  341D               	retlw	29
  2235  101C  3423               	retlw	35
  2236  101D  3424               	retlw	36
  2237  101E  3425               	retlw	37
  2238  101F  3426               	retlw	38
  2239  1020  3429               	retlw	41
  2240  1021  342C               	retlw	44
  2241  1022  342D               	retlw	45
  2242  1023  342E               	retlw	46
  2243  1024  3400               	retlw	0
  2244  1025  3401               	retlw	1
  2245  1026  3402               	retlw	2
  2246  1027  3407               	retlw	7
  2247  1028  3408               	retlw	8
  2248  1029  3409               	retlw	9
  2249  102A  3406               	retlw	6
  2250  102B  3404               	retlw	4
  2251  102C  3405               	retlw	5
  2252  102D  3427               	retlw	39
  2253  102E  3428               	retlw	40
  2254  102F                     __end_of_CC2500_registers_address:	
  2255  102F                     _CC2500_rfSettings:	
  2256  102F  3407               	retlw	7
  2257  1030  3407               	retlw	7
  2258  1031  3430               	retlw	48
  2259  1032  3487               	retlw	135
  2260  1033  346B               	retlw	107
  2261  1034  34F8               	retlw	248
  2262  1035  347F               	retlw	127
  2263  1036  343F               	retlw	63
  2264  1037  3409               	retlw	9
  2265  1038  3400               	retlw	0
  2266  1039  345C               	retlw	92
  2267  103A  34A7               	retlw	167
  2268  103B  3462               	retlw	98
  2269  103C  3486               	retlw	134
  2270  103D  3483               	retlw	131
  2271  103E  3403               	retlw	3
  2272  103F  3422               	retlw	34
  2273  1040  34F8               	retlw	248
  2274  1041  3400               	retlw	0
  2275  1042  3444               	retlw	68
  2276  1043  34B6               	retlw	182
  2277  1044  3410               	retlw	16
  2278  1045  3418               	retlw	24
  2279  1046  341D               	retlw	29
  2280  1047  341C               	retlw	28
  2281  1048  34C7               	retlw	199
  2282  1049  3400               	retlw	0
  2283  104A  34B2               	retlw	178
  2284  104B  34EA               	retlw	234
  2285  104C  340A               	retlw	10
  2286  104D  3400               	retlw	0
  2287  104E  3411               	retlw	17
  2288  104F  3459               	retlw	89
  2289  1050  3488               	retlw	136
  2290  1051  3431               	retlw	49
  2291  1052  340B               	retlw	11
  2292  1053  342F               	retlw	47
  2293  1054  342E               	retlw	46
  2294  1055  3406               	retlw	6
  2295  1056  3404               	retlw	4
  2296  1057  3405               	retlw	5
  2297  1058  3400               	retlw	0
  2298  1059  3430               	retlw	48
  2299  105A  34D3               	retlw	211
  2300  105B  3491               	retlw	145
  2301  105C  3441               	retlw	65
  2302  105D  3400               	retlw	0
  2303  105E                     __end_of_CC2500_rfSettings:	
  2304  105E                     _CC2500_patable_vaule:	
  2305  105E  34FE               	retlw	254
  2306  105F  34FE               	retlw	254
  2307  1060  34FE               	retlw	254
  2308  1061  34FE               	retlw	254
  2309  1062  34FE               	retlw	254
  2310  1063  34FE               	retlw	254
  2311  1064  34FE               	retlw	254
  2312  1065  34FE               	retlw	254
  2313  1066                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK0
  2316  006F                     __pnvBANK0:	
  2317  006F                     _product:	
  2318  006F                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0063                     _RA3	set	99
  2331  0064                     _RA4	set	100
  2332  0066                     _RA6	set	102
  2333  0067                     _RA7	set	103
  2334  0068                     _RB0	set	104
  2335  0069                     _RB1	set	105
  2336  006A                     _RB2	set	106
  2337  006B                     _RB3	set	107
  2338  006C                     _RB4	set	108
  2339  006D                     _RB5	set	109
  2340  0070                     _RC0	set	112
  2341  0071                     _RC1	set	113
  2342  0072                     _RC2	set	114
  2343  0074                     _RC4	set	116
  2344  0075                     _RC5	set	117
  2345  0077                     _RC7	set	119
  2346  0088                     _TMR1IF	set	136
  2347  009D                     _ADCON0	set	157
  2348  009E                     _ADCON1	set	158
  2349  009C                     _ADRESH	set	156
  2350  009B                     _ADRESL	set	155
  2351  0099                     _OSCCON	set	153
  2352  008C                     _TRISA	set	140
  2353  008D                     _TRISB	set	141
  2354  008E                     _TRISC	set	142
  2355  0097                     _WDTCON	set	151
  2356  04E9                     _GO_nDONE	set	1257
  2357  0488                     _TMR1IE	set	1160
  2358  0117                     _FVRCON	set	279
  2359  010C                     _LATA	set	268
  2360  010D                     _LATB	set	269
  2361  010E                     _LATC	set	270
  2362  018C                     _ANSELA	set	396
  2363  018D                     _ANSELB	set	397
  2364  018E                     _ANSELC	set	398
  2365  0192                     _PMADRH	set	402
  2366  0191                     _PMADRL	set	401
  2367  0196                     _PMCON2	set	406
  2368  0194                     _PMDATH	set	404
  2369  0193                     _PMDATL	set	403
  2370  0CAE                     _CFGS	set	3246
  2371  0CAC                     _FREE	set	3244
  2372  0CAD                     _LWLO	set	3245
  2373  0CA8                     _RD	set	3240
  2374  0CA9                     _WR	set	3241
  2375  0CAA                     _WREN	set	3242
  2376  020D                     _WPUB	set	525
  2377  1069                     _WPUB1	set	4201
  2378  106A                     _WPUB2	set	4202
  2379  0396                     _IOCBF	set	918
  2380  0395                     _IOCBN	set	917
  2381  0394                     _IOCBP	set	916
  2382  1CB2                     _IOCBF2	set	7346
  2383                           
  2384                           ; #config settings
  2385  0000                     
  2386                           	psect	cinit
  2387  0022                     start_initialization:	
  2388  0022                     __initialization:	
  2389                           
  2390                           ; Clear objects allocated to BITCOMMON
  2391  0022  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2392                           
  2393                           ; Clear objects allocated to COMMON
  2394  0023  01FB               	clrf	__pbssCOMMON& (0+127)
  2395                           
  2396                           ; Clear objects allocated to BANK0
  2397  0024  01ED               	clrf	__pbssBANK0& (0+127)
  2398  0025  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  2399                           
  2400                           ; Clear objects allocated to BANK1
  2401  0026  30A0               	movlw	low __pbssBANK1
  2402  0027  0084               	movwf	4
  2403  0028  3000               	movlw	high __pbssBANK1
  2404  0029  0085               	movwf	5
  2405  002A  304B               	movlw	75
  2406  002B  319A  22FD  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK2
  2409  002E  3020               	movlw	low __pbssBANK2
  2410  002F  0084               	movwf	4
  2411  0030  3001               	movlw	high __pbssBANK2
  2412  0031  0085               	movwf	5
  2413  0032  304D               	movlw	77
  2414  0033  319A  22FD  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Clear objects allocated to BANK3
  2417  0036  30A0               	movlw	low __pbssBANK3
  2418  0037  0084               	movwf	4
  2419  0038  3001               	movlw	high __pbssBANK3
  2420  0039  0085               	movwf	5
  2421  003A  304C               	movlw	76
  2422  003B  319A  22FD  3180   	fcall	clear_ram0
  2423                           
  2424                           ; Clear objects allocated to BANK4
  2425  003E  3020               	movlw	low __pbssBANK4
  2426  003F  0084               	movwf	4
  2427  0040  3002               	movlw	high __pbssBANK4
  2428  0041  0085               	movwf	5
  2429  0042  3025               	movlw	37
  2430  0043  319A  22FD  3180   	fcall	clear_ram0
  2431                           
  2432                           ; Initialize objects allocated to BANK4
  2433  0046  307B               	movlw	low __pidataBANK4
  2434  0047  0084               	movwf	4
  2435  0048  309F               	movlw	(high __pidataBANK4)| (0+128)
  2436  0049  0085               	movwf	5
  2437  004A  3045               	movlw	low __pdataBANK4
  2438  004B  0086               	movwf	6
  2439  004C  3002               	movlw	high __pdataBANK4
  2440  004D  0087               	movwf	7
  2441  004E  3020               	movlw	32
  2442  004F  319A  22F7         	fcall	init_ram
  2443  0051                     end_of_initialization:	
  2444                           ;End of C runtime variable initialization code
  2445                           
  2446  0051                     __end_of__initialization:	
  2447  0051  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2448  0052  0020               	movlb	0
  2449  0053  3196  2EE7         	ljmp	_main	;jump to C main() function
  2450                           
  2451                           	psect	bitbssCOMMON
  2452  03D0                     __pbitbssCOMMON:	
  2453  03D0                     _Receive_OK:	
  2454  03D0                     	ds	1
  2455  03D1                     _Transceive_OK:	
  2456  03D1                     	ds	1
  2457                           
  2458                           	psect	bssCOMMON
  2459  007B                     __pbssCOMMON:	
  2460  007B                     _DimmerIntr:	
  2461  007B                     	ds	1
  2462                           
  2463                           	psect	bssBANK0
  2464  006D                     __pbssBANK0:	
  2465  006D                     _DimmerLights:	
  2466  006D                     	ds	1
  2467  006E                     _Sw:	
  2468  006E                     	ds	1
  2469                           
  2470                           	psect	bssBANK1
  2471  00A0                     __pbssBANK1:	
  2472  00A0                     _RF1:	
  2473  00A0                     	ds	14
  2474  00AE                     _Buz1:	
  2475  00AE                     	ds	12
  2476  00BA                     _Timer1:	
  2477  00BA                     	ds	3
  2478  00BD                     _WDT:	
  2479  00BD                     	ds	2
  2480  00BF                     _CRC:	
  2481  00BF                     	ds	1
  2482  00C0                     _Cmd:	
  2483  00C0                     	ds	1
  2484  00C1                     _DelayOff:	
  2485  00C1                     	ds	1
  2486  00C2                     _LED:	
  2487  00C2                     	ds	1
  2488  00C3                     _RSSI:	
  2489  00C3                     	ds	1
  2490  00C4                     _Rx_Length:	
  2491  00C4                     	ds	1
  2492  00C5                     _SPI0Buffer:	
  2493  00C5                     	ds	1
  2494  00C6                     _SwDetect:	
  2495  00C6                     	ds	1
  2496  00C7                     _Tx_Length:	
  2497  00C7                     	ds	1
  2498  00C8                     _r_address:	
  2499  00C8                     	ds	1
  2500  00C9                     _r_data:	
  2501  00C9                     	ds	1
  2502  00CA                     _s_data:	
  2503  00CA                     	ds	1
  2504  00CB                     _Temp:	
  2505  00CB                     	ds	18
  2506  00DD                     _DimmerIntr1:	
  2507  00DD                     	ds	7
  2508  00E4                     _DimmerIntr2:	
  2509  00E4                     	ds	7
  2510                           
  2511                           	psect	bssBANK2
  2512  0120                     __pbssBANK2:	
  2513  0120                     _myMain:	
  2514  0120                     	ds	14
  2515  012E                     _Dimmer:	
  2516  012E                     	ds	3
  2517  0131                     _RF_Count:	
  2518  0131                     	ds	2
  2519  0133                     _Load:	
  2520  0133                     	ds	46
  2521  0161                     _VarErrLED:	
  2522  0161                     	ds	4
  2523  0165                     _VarLED1:	
  2524  0165                     	ds	4
  2525  0169                     _VarLED2:	
  2526  0169                     	ds	4
  2527                           
  2528                           	psect	bssBANK3
  2529  01A0                     __pbssBANK3:	
  2530  01A0                     _RF_Data:	
  2531  01A0                     	ds	30
  2532  01BE                     _DimmerLights1:	
  2533  01BE                     	ds	9
  2534  01C7                     _DimmerLights2:	
  2535  01C7                     	ds	9
  2536  01D0                     _Sw1:	
  2537  01D0                     	ds	9
  2538  01D9                     _Sw2:	
  2539  01D9                     	ds	9
  2540  01E2                     _DlySw1:	
  2541  01E2                     	ds	5
  2542  01E7                     _DlySw2:	
  2543  01E7                     	ds	5
  2544                           
  2545                           	psect	bssBANK4
  2546  0220                     __pbssBANK4:	
  2547  0220                     _Memory:	
  2548  0220                     	ds	37
  2549                           
  2550                           	psect	dataBANK4
  2551  0245                     __pdataBANK4:	
  2552  0245                     __product:	
  2553  0245                     	ds	32
  2554                           
  2555                           	psect	clrtext
  2556  1AFD                     clear_ram0:	
  2557                           ;	Called with FSR0 containing the base address, and
  2558                           ;	WREG with the size to clear
  2559                           
  2560  1AFD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2561  1AFE                     clrloop0:	
  2562  1AFE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2563  1AFF  3101               	addfsr 0,1
  2564  1B00  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2565  1B01  2AFE               	goto	clrloop0	;have we reached the end yet?
  2566  1B02  3400               	retlw	0	;all done for this memory range, return
  2567                           
  2568                           	psect	inittext
  2569  1AF7                     init_ram:	
  2570  1AF7  00FE               	movwf	126
  2571  1AF8                     initloop:	
  2572  1AF8  0012               	moviw fsr0++
  2573  1AF9  001E               	movwi fsr1++
  2574  1AFA  0BFE               	decfsz	126,f
  2575  1AFB  2AF8               	goto	initloop
  2576  1AFC  3400               	retlw	0
  2577                           
  2578                           	psect	cstackBANK4
  2579  0265                     __pcstackBANK4:	
  2580  0265                     Exception_Main@count:	
  2581                           
  2582                           ; 1 bytes @ 0x0
  2583  0265                     	ds	1
  2584  0266                     Exception_Main@error:	
  2585                           
  2586                           ; 1 bytes @ 0x1
  2587  0266                     	ds	1
  2588  0267                     Exception_Main@i:	
  2589                           
  2590                           ; 2 bytes @ 0x2
  2591  0267                     	ds	2
  2592  0269                     Exception_Main@i_6338:	
  2593                           
  2594                           ; 2 bytes @ 0x4
  2595  0269                     	ds	2
  2596  026B                     Exception_Main@lights:	
  2597                           
  2598                           ; 1 bytes @ 0x6
  2599  026B                     	ds	1
  2600                           
  2601                           	psect	cstackBANK3
  2602  01EC                     __pcstackBANK3:	
  2603  01EC                     ?_main:	
  2604  01EC                     main@argc:	
  2605                           ; 2 bytes @ 0x0
  2606                           
  2607                           
  2608                           ; 2 bytes @ 0x0
  2609  01EC                     	ds	2
  2610  01EE                     main@argv:	
  2611                           
  2612                           ; 2 bytes @ 0x2
  2613  01EE                     	ds	2
  2614                           
  2615                           	psect	cstackBANK1
  2616  00EB                     __pcstackBANK1:	
  2617  00EB                     ??_setRF_Main:	
  2618                           
  2619                           ; 0 bytes @ 0x0
  2620  00EB                     	ds	1
  2621  00EC                     setRF_Main@error:	
  2622                           
  2623                           ; 1 bytes @ 0x1
  2624  00EC                     	ds	1
  2625                           
  2626                           	psect	cstackCOMMON
  2627  0070                     __pcstackCOMMON:	
  2628  0070                     ?_CC2500_WriteCommand:	
  2629  0070                     ?_RF_Timeout_Counter:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setRF_TimeoutCleared:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_WriteByte:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_ReadStatus:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_ReadByte:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_PowerRST:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_CC2500_InitSetREG:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_CC2500_InitPATable:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_CC2500_ClearTXFIFO:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_CC2500_ClearRXFIFO:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_CC2500_FrequencyCabr:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_CC2500_SIDLEMode:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_DlyOff_Initialization:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_DlyOff_Main:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setDimmerLights_SwOn:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setDimmerLights_SwOff:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setDimmerLights_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setDimmerLights_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setDimmerLights_Line:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setTxData:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setRF_TransceiveGO:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_setLED_Initialization:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setLED_Main:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Fosc_Set:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_IO_Set:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_TMR1_Set:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_ADC_Set:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_IOC_Set:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_WDT_Set:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_IOC_ISR:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ??_IOC_ISR:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_TMR1_ISR:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Timeout_Counter:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_set_TimeoutCleared:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Flash_Memory_Write:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Flash_Memory_Modify:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_WDT_Clearing:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setLoad_AH_AL_Restore:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setTemp_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setTemp_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setRF_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setRF_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_RF_RxDisable:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_getRxData:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setLog_Code:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setControl_Lights_Table:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setRFSW_Control:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setRFSW_AdjControl:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setSw_Initialization:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setSw_Main:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_myMain_Initialization:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_my_MainTimer:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_Exception_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_Buzzer_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_Buzzer_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_CC2500_TxData:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_CC2500_RxData:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_CC2500_PowerOnInitial:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DelayOffPointSelect:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DelayOff_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DelayOff_Main:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerIntr_Initialization:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DimmerLights_SelectPointer:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DimmerLights_Initialization:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_setDimmerLights_DimmingOn:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_Main:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DimmerLights_MOSFET_TMR_1:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ??_DimmerLights_MOSFET_TMR_1:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_MOSFET_IOC_1:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ??_DimmerLights_MOSFET_IOC_1:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_DimmerLights_MOSFET_TMR_2:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ??_DimmerLights_MOSFET_TMR_2:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_MOSFET_IOC_2:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ??_DimmerLights_MOSFET_IOC_2:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_LedPointSelect:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_LED_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LED_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Mcu_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_ISR:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Flash_Memory_Initialization:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Main:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Unlock:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Erasing:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_setMemory_Modify:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setMemory_LoopSave:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_WDT_Main:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_Load_Initialization:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_getLoad_AD:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_Load_Main:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_Temp_Initialization:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_getTemp_AD:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_Temp_Main:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0070                     ?_RF_Initialization:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0070                     ?_RF_Main:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0070                     ?_setRF_Learn:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0070                     ?_TouchPower:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0070                     ?_SwPointSelect:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0070                     ?_Switch_Initialization:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0070                     ?_Switch_Main:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmerLights_Status:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0070                     ?_getLoad_OK:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getMain_All_Error_Status:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getMain_All_LightsStatus:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmerLights_Allow_Condition:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getDimmerLights_PercentToValue:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmerLights_ValueToPercent:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getCmd_Status:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_Flash_Memory_Read:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getMain_Lights_Count:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?_getRF_KeyStatus:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ?_getSw_KeyStatus:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ?_getDelayOff_GO:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ?_getDimmerIntr_DimmingValue:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0070                     ?_getDimmerLights_Line:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0070                     ?_getDimmer_LoadGO:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0070                     ?_getDimmer_Load_Status:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0070                     setDimmerLights_Initialization@lights:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x0
  2985  0070                     	ds	1
  2986  0071                     ??_TMR1_ISR:	
  2987  0071                     ??_ISR:	
  2988                           ; 0 bytes @ 0x1
  2989                           
  2990                           
  2991                           ; 0 bytes @ 0x1
  2992  0071                     	ds	1
  2993  0072                     ??_RF_Timeout_Counter:	
  2994  0072                     ??_setRF_TimeoutCleared:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0072                     ??_CC2500_WriteByte:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0072                     ??_CC2500_ReadByte:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0072                     ?_DelayTime_1us:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0072                     ??_setDimmerLights_Initialization:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0072                     ??_getLoad_OK:	
  3010                           ; 0 bytes @ 0x2
  3011                           
  3012  0072                     ??_getMain_All_Error_Status:	
  3013                           ; 0 bytes @ 0x2
  3014                           
  3015  0072                     ??_getMain_All_LightsStatus:	
  3016                           ; 0 bytes @ 0x2
  3017                           
  3018  0072                     ??_setDimmerLights_Line:	
  3019                           ; 0 bytes @ 0x2
  3020                           
  3021  0072                     ??_getCmd_Status:	
  3022                           ; 0 bytes @ 0x2
  3023                           
  3024  0072                     ?_setCmd_Status:	
  3025                           ; 0 bytes @ 0x2
  3026                           
  3027  0072                     ??_setTxData:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0072                     ??_setRF_TransceiveGO:	
  3031                           ; 0 bytes @ 0x2
  3032                           
  3033  0072                     ??_Fosc_Set:	
  3034                           ; 0 bytes @ 0x2
  3035                           
  3036  0072                     ??_IO_Set:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0072                     ??_TMR1_Set:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0072                     ??_ADC_Set:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0072                     ??_IOC_Set:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0072                     ??_WDT_Set:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0072                     ??_Timeout_Counter:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0072                     ??_set_TimeoutCleared:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0072                     ??_Flash_Memory_Read:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0072                     ?_setMemory_Data:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0072                     ??_Flash_Memory_Write:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0072                     ??_WDT_Clearing:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0072                     ??_setLoad_AH_AL_Restore:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0072                     ??_getMain_Lights_Count:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0072                     ??_setTemp_Initialization:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0072                     ??_setRF_Initialization:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0072                     ??_getRF_KeyStatus:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0072                     ??_getSw_KeyStatus:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0072                     ??_myMain_Initialization:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0072                     ??_Buzzer_Initialization:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0072                     ??_Buzzer_Main:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0072                     ??_DelayOffPointSelect:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0072                     ??_DimmerIntr_Initialization:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0072                     ?_setDimmerIntr_ControlStatus:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0072                     ?_setDimmerIntr_DimmingValue:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0072                     ??_getDimmerIntr_DimmingValue:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0072                     ?_setDimmerIntr_Dimming_RF:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0072                     ??_DimmerLights_SelectPointer:	
  3121                           ; 0 bytes @ 0x2
  3122                           
  3123  0072                     ??_getDimmerLights_Line:	
  3124                           ; 0 bytes @ 0x2
  3125                           
  3126  0072                     ??_getDimmer_LoadGO:	
  3127                           ; 0 bytes @ 0x2
  3128                           
  3129  0072                     ??_getDimmer_Load_Status:	
  3130                           ; 0 bytes @ 0x2
  3131                           
  3132  0072                     ??_LedPointSelect:	
  3133                           ; 0 bytes @ 0x2
  3134                           
  3135  0072                     ??_Flash_Memory_Unlock:	
  3136                           ; 0 bytes @ 0x2
  3137                           
  3138  0072                     ??_Flash_Memory_Erasing:	
  3139                           ; 0 bytes @ 0x2
  3140                           
  3141  0072                     ??_setMemory_Modify:	
  3142                           ; 0 bytes @ 0x2
  3143                           
  3144  0072                     ??_setMemory_LoopSave:	
  3145                           ; 0 bytes @ 0x2
  3146                           
  3147  0072                     ??_WDT_Main:	
  3148                           ; 0 bytes @ 0x2
  3149                           
  3150  0072                     ??_Temp_Initialization:	
  3151                           ; 0 bytes @ 0x2
  3152                           
  3153  0072                     ??_setRF_Learn:	
  3154                           ; 0 bytes @ 0x2
  3155                           
  3156  0072                     ??_TouchPower:	
  3157                           ; 0 bytes @ 0x2
  3158                           
  3159  0072                     ??_SwPointSelect:	
  3160                           ; 0 bytes @ 0x2
  3161                           
  3162  0072                     ?___bmul:	
  3163                           ; 0 bytes @ 0x2
  3164                           
  3165  0072                     ?_getBuz_GO:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0072                     ?_getAD:	
  3169                           ; 2 bytes @ 0x2
  3170                           
  3171  0072                     ?___wmul:	
  3172                           ; 2 bytes @ 0x2
  3173                           
  3174  0072                     ?___awdiv:	
  3175                           ; 2 bytes @ 0x2
  3176                           
  3177  0072                     ?___lwdiv:	
  3178                           ; 2 bytes @ 0x2
  3179                           
  3180  0072                     ?___ftpack:	
  3181                           ; 2 bytes @ 0x2
  3182                           
  3183  0072                     setDimmerIntr_ControlStatus@command:	
  3184                           ; 3 bytes @ 0x2
  3185                           
  3186  0072                     setDimmerIntr_DimmingValue@value:	
  3187                           ; 1 bytes @ 0x2
  3188                           
  3189  0072                     setDimmerIntr_Dimming_Sw@command:	
  3190                           ; 1 bytes @ 0x2
  3191                           
  3192  0072                     setDimmerIntr_Dimming_RF@command:	
  3193                           ; 1 bytes @ 0x2
  3194                           
  3195  0072                     setDimmerLights_Line@lights:	
  3196                           ; 1 bytes @ 0x2
  3197                           
  3198  0072                     getDimmer_LoadGO@loadgo:	
  3199                           ; 1 bytes @ 0x2
  3200                           
  3201  0072                     getDimmer_Load_Status@status:	
  3202                           ; 1 bytes @ 0x2
  3203                           
  3204  0072                     getAD@adcon1:	
  3205                           ; 1 bytes @ 0x2
  3206                           
  3207  0072                     setMemory_Data@data:	
  3208                           ; 1 bytes @ 0x2
  3209                           
  3210  0072                     getLoad_OK@ok:	
  3211                           ; 1 bytes @ 0x2
  3212                           
  3213  0072                     getMain_All_LightsStatus@status:	
  3214                           ; 1 bytes @ 0x2
  3215                           
  3216  0072                     getMain_Lights_Count@count:	
  3217                           ; 1 bytes @ 0x2
  3218                           
  3219  0072                     setCmd_Status@cmd:	
  3220                           ; 1 bytes @ 0x2
  3221                           
  3222  0072                     getCmd_Status@number:	
  3223                           ; 1 bytes @ 0x2
  3224                           
  3225  0072                     ___bmul@multiplicand:	
  3226                           ; 1 bytes @ 0x2
  3227                           
  3228  0072                     DelayTime_1us@count:	
  3229                           ; 1 bytes @ 0x2
  3230                           
  3231  0072                     ___wmul@multiplier:	
  3232                           ; 2 bytes @ 0x2
  3233                           
  3234  0072                     ___awdiv@divisor:	
  3235                           ; 2 bytes @ 0x2
  3236                           
  3237  0072                     ___lwdiv@divisor:	
  3238                           ; 2 bytes @ 0x2
  3239                           
  3240  0072                     ___ftpack@arg:	
  3241                           ; 2 bytes @ 0x2
  3242                           
  3243                           
  3244                           ; 3 bytes @ 0x2
  3245  0072                     	ds	1
  3246  0073                     ??_getDimmerLights_Allow_Condition:	
  3247  0073                     ??_setCmd_Status:	
  3248                           ; 0 bytes @ 0x3
  3249                           
  3250  0073                     ??_setMemory_Data:	
  3251                           ; 0 bytes @ 0x3
  3252                           
  3253  0073                     ??_setDimmerIntr_ControlStatus:	
  3254                           ; 0 bytes @ 0x3
  3255                           
  3256  0073                     ??_setDimmerIntr_DimmingValue:	
  3257                           ; 0 bytes @ 0x3
  3258                           
  3259  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3260                           ; 0 bytes @ 0x3
  3261                           
  3262  0073                     ??_setDimmerIntr_Dimming_RF:	
  3263                           ; 0 bytes @ 0x3
  3264                           
  3265  0073                     ??_DimmerLights_Initialization:	
  3266                           ; 0 bytes @ 0x3
  3267                           
  3268  0073                     ??_Mcu_Initialization:	
  3269                           ; 0 bytes @ 0x3
  3270                           
  3271  0073                     ??_RF_Initialization:	
  3272                           ; 0 bytes @ 0x3
  3273                           
  3274  0073                     ??___bmul:	
  3275                           ; 0 bytes @ 0x3
  3276                           
  3277  0073                     CC2500_WriteByte@loop_a:	
  3278                           ; 0 bytes @ 0x3
  3279                           
  3280  0073                     CC2500_ReadByte@loop_b:	
  3281                           ; 1 bytes @ 0x3
  3282                           
  3283  0073                     DelayOffPointSelect@sw:	
  3284                           ; 1 bytes @ 0x3
  3285                           
  3286  0073                     getDimmerIntr_DimmingValue@value:	
  3287                           ; 1 bytes @ 0x3
  3288                           
  3289  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2102:	
  3290                           ; 1 bytes @ 0x3
  3291                           
  3292  0073                     DimmerLights_SelectPointer@lights:	
  3293                           ; 1 bytes @ 0x3
  3294                           
  3295  0073                     getDimmerLights_Line@line:	
  3296                           ; 1 bytes @ 0x3
  3297                           
  3298  0073                     LedPointSelect@led:	
  3299                           ; 1 bytes @ 0x3
  3300                           
  3301  0073                     Flash_Memory_Read@i:	
  3302                           ; 1 bytes @ 0x3
  3303                           
  3304  0073                     Flash_Memory_Write@i:	
  3305                           ; 1 bytes @ 0x3
  3306                           
  3307  0073                     setMemory_Modify@command:	
  3308                           ; 1 bytes @ 0x3
  3309                           
  3310  0073                     setMemory_LoopSave@command:	
  3311                           ; 1 bytes @ 0x3
  3312                           
  3313  0073                     setLoad_AH_AL_Restore@i:	
  3314                           ; 1 bytes @ 0x3
  3315                           
  3316  0073                     setRF_Learn@command:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  0073                     getRF_KeyStatus@key:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  0073                     setRF_TransceiveGO@command:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  0073                     SwPointSelect@sw:	
  3326                           ; 1 bytes @ 0x3
  3327                           
  3328  0073                     _getSw_KeyStatus$5635:	
  3329                           ; 1 bytes @ 0x3
  3330                           
  3331  0073                     getMain_Lights_Count@status1:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0073                     getCmd_Status@cmd:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  0073                     _getMain_All_Error_Status$6326:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340                           
  3341                           ; 2 bytes @ 0x3
  3342  0073                     	ds	1
  3343  0074                     ??_CC2500_WriteCommand:	
  3344  0074                     ??_CC2500_ReadStatus:	
  3345                           ; 0 bytes @ 0x4
  3346                           
  3347  0074                     ??_DelayTime_1us:	
  3348                           ; 0 bytes @ 0x4
  3349                           
  3350  0074                     ?_CC2500_WriteREG:	
  3351                           ; 0 bytes @ 0x4
  3352                           
  3353  0074                     ??_DlyOff_Initialization:	
  3354                           ; 0 bytes @ 0x4
  3355                           
  3356  0074                     ??_getDimmerLights_Status:	
  3357                           ; 0 bytes @ 0x4
  3358                           
  3359  0074                     ?_setLED:	
  3360                           ; 0 bytes @ 0x4
  3361                           
  3362  0074                     ??_setLED_Main:	
  3363                           ; 0 bytes @ 0x4
  3364                           
  3365  0074                     ??_getBuz_GO:	
  3366                           ; 0 bytes @ 0x4
  3367                           
  3368  0074                     ??_getDelayOff_GO:	
  3369                           ; 0 bytes @ 0x4
  3370                           
  3371  0074                     ??_setDimmerLights_DimmingOn:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0074                     ?_setDimmerLights_DimmingRun:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0074                     ??_Load_Initialization:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0074                     CC2500_WriteREG@value:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0074                     DlyOff_Initialization@sw:	
  3384                           ; 1 bytes @ 0x4
  3385                           
  3386  0074                     getDelayOff_GO@sw:	
  3387                           ; 1 bytes @ 0x4
  3388                           
  3389  0074                     setDimmerIntr_ControlStatus@lights:	
  3390                           ; 1 bytes @ 0x4
  3391                           
  3392  0074                     setDimmerIntr_DimmingValue@lights:	
  3393                           ; 1 bytes @ 0x4
  3394                           
  3395  0074                     getDimmerIntr_DimmingValue@lights:	
  3396                           ; 1 bytes @ 0x4
  3397                           
  3398  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3399                           ; 1 bytes @ 0x4
  3400                           
  3401  0074                     setDimmerIntr_Dimming_RF@lights:	
  3402                           ; 1 bytes @ 0x4
  3403                           
  3404  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2103:	
  3405                           ; 1 bytes @ 0x4
  3406                           
  3407  0074                     setDimmerLights_DimmingOn@sw:	
  3408                           ; 1 bytes @ 0x4
  3409                           
  3410  0074                     _getDimmerLights_Allow_Condition$2188:	
  3411                           ; 1 bytes @ 0x4
  3412                           
  3413  0074                     getDimmerLights_Status@lights:	
  3414                           ; 1 bytes @ 0x4
  3415                           
  3416  0074                     setDimmerLights_DimmingRun@command:	
  3417                           ; 1 bytes @ 0x4
  3418                           
  3419  0074                     setLED@command:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0074                     Flash_Memory_Read@address:	
  3423                           ; 1 bytes @ 0x4
  3424                           
  3425  0074                     setMemory_Data@address:	
  3426                           ; 1 bytes @ 0x4
  3427                           
  3428  0074                     _getRF_KeyStatus$4658:	
  3429                           ; 1 bytes @ 0x4
  3430                           
  3431  0074                     _getSw_KeyStatus$5636:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0074                     getMain_Lights_Count@status2:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437  0074                     setCmd_Status@number:	
  3438                           ; 1 bytes @ 0x4
  3439                           
  3440  0074                     ___bmul@product:	
  3441                           ; 1 bytes @ 0x4
  3442                           
  3443  0074                     DelayTime_1us@i:	
  3444                           ; 1 bytes @ 0x4
  3445                           
  3446  0074                     ___wmul@multiplicand:	
  3447                           ; 2 bytes @ 0x4
  3448                           
  3449  0074                     ___awdiv@dividend:	
  3450                           ; 2 bytes @ 0x4
  3451                           
  3452  0074                     ___lwdiv@dividend:	
  3453                           ; 2 bytes @ 0x4
  3454                           
  3455                           
  3456                           ; 2 bytes @ 0x4
  3457  0074                     	ds	1
  3458  0075                     ??_CC2500_WriteREG:	
  3459  0075                     ??_setLED:	
  3460                           ; 0 bytes @ 0x5
  3461                           
  3462  0075                     ??_DelayOff_Initialization:	
  3463                           ; 0 bytes @ 0x5
  3464                           
  3465  0075                     ??_setDimmerLights_DimmingRun:	
  3466                           ; 0 bytes @ 0x5
  3467                           
  3468  0075                     ??_getAD:	
  3469                           ; 0 bytes @ 0x5
  3470                           
  3471  0075                     CC2500_WriteCommand@command:	
  3472                           ; 0 bytes @ 0x5
  3473                           
  3474  0075                     CC2500_ReadStatus@status_addr:	
  3475                           ; 1 bytes @ 0x5
  3476                           
  3477  0075                     getDelayOff_GO@go:	
  3478                           ; 1 bytes @ 0x5
  3479                           
  3480  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3481                           ; 1 bytes @ 0x5
  3482                           
  3483  0075                     _getDimmerLights_Allow_Condition$2189:	
  3484                           ; 1 bytes @ 0x5
  3485                           
  3486  0075                     getDimmerLights_Status@status:	
  3487                           ; 1 bytes @ 0x5
  3488                           
  3489  0075                     setLED@led:	
  3490                           ; 1 bytes @ 0x5
  3491                           
  3492  0075                     getAD@adcon0:	
  3493                           ; 1 bytes @ 0x5
  3494                           
  3495  0075                     Flash_Memory_Read@ret:	
  3496                           ; 1 bytes @ 0x5
  3497                           
  3498  0075                     getSw_KeyStatus@status:	
  3499                           ; 1 bytes @ 0x5
  3500                           
  3501  0075                     ___bmul@multiplier:	
  3502                           ; 1 bytes @ 0x5
  3503                           
  3504  0075                     ___ftpack@exp:	
  3505                           ; 1 bytes @ 0x5
  3506                           
  3507  0075                     _getMain_All_Error_Status$6327:	
  3508                           ; 1 bytes @ 0x5
  3509                           
  3510                           
  3511                           ; 2 bytes @ 0x5
  3512  0075                     	ds	1
  3513  0076                     ??_CC2500_ClearTXFIFO:	
  3514  0076                     ??_CC2500_ClearRXFIFO:	
  3515                           ; 0 bytes @ 0x6
  3516                           
  3517  0076                     ??_CC2500_SIDLEMode:	
  3518                           ; 0 bytes @ 0x6
  3519                           
  3520  0076                     ??_setLED_Initialization:	
  3521                           ; 0 bytes @ 0x6
  3522                           
  3523  0076                     ??_Flash_Memory_Modify:	
  3524                           ; 0 bytes @ 0x6
  3525                           
  3526  0076                     ??_RF_RxDisable:	
  3527                           ; 0 bytes @ 0x6
  3528                           
  3529  0076                     ??_setSw_Initialization:	
  3530                           ; 0 bytes @ 0x6
  3531                           
  3532  0076                     ??_CC2500_TxData:	
  3533                           ; 0 bytes @ 0x6
  3534                           
  3535  0076                     ??_CC2500_RxData:	
  3536                           ; 0 bytes @ 0x6
  3537                           
  3538  0076                     ??_getLoad_AD:	
  3539                           ; 0 bytes @ 0x6
  3540                           
  3541  0076                     ??_getTemp_AD:	
  3542                           ; 0 bytes @ 0x6
  3543                           
  3544  0076                     ??___wmul:	
  3545                           ; 0 bytes @ 0x6
  3546                           
  3547  0076                     ??___awdiv:	
  3548                           ; 0 bytes @ 0x6
  3549                           
  3550  0076                     ??___lwdiv:	
  3551                           ; 0 bytes @ 0x6
  3552                           
  3553  0076                     CC2500_WriteREG@w_addr:	
  3554                           ; 0 bytes @ 0x6
  3555                           
  3556  0076                     _getDimmerLights_Allow_Condition$2190:	
  3557                           ; 1 bytes @ 0x6
  3558                           
  3559  0076                     setDimmerLights_DimmingRun@lights:	
  3560                           ; 1 bytes @ 0x6
  3561                           
  3562  0076                     setLED_Initialization@led:	
  3563                           ; 1 bytes @ 0x6
  3564                           
  3565  0076                     setLED_Main@led:	
  3566                           ; 1 bytes @ 0x6
  3567                           
  3568  0076                     setSw_Initialization@sw:	
  3569                           ; 1 bytes @ 0x6
  3570                           
  3571  0076                     getSw_KeyStatus@sw:	
  3572                           ; 1 bytes @ 0x6
  3573                           
  3574  0076                     ___ftpack@sign:	
  3575                           ; 1 bytes @ 0x6
  3576                           
  3577  0076                     getBuz_GO@i:	
  3578                           ; 1 bytes @ 0x6
  3579                           
  3580  0076                     DelayTime_1us@j:	
  3581                           ; 2 bytes @ 0x6
  3582                           
  3583  0076                     ___wmul@product:	
  3584                           ; 2 bytes @ 0x6
  3585                           
  3586                           
  3587                           ; 2 bytes @ 0x6
  3588  0076                     	ds	1
  3589  0077                     ??_CC2500_InitSetREG:	
  3590  0077                     ??_CC2500_InitPATable:	
  3591                           ; 0 bytes @ 0x7
  3592                           
  3593  0077                     ??___ftpack:	
  3594                           ; 0 bytes @ 0x7
  3595                           
  3596  0077                     ??_setBuz:	
  3597                           ; 0 bytes @ 0x7
  3598                           
  3599  0077                     ??_LED_Initialization:	
  3600                           ; 0 bytes @ 0x7
  3601                           
  3602  0077                     ??_LED_Main:	
  3603                           ; 0 bytes @ 0x7
  3604                           
  3605  0077                     ??_Switch_Initialization:	
  3606                           ; 0 bytes @ 0x7
  3607                           
  3608  0077                     CC2500_TxData@loop_e:	
  3609                           ; 0 bytes @ 0x7
  3610                           
  3611  0077                     CC2500_RxData@loop_f:	
  3612                           ; 1 bytes @ 0x7
  3613                           
  3614  0077                     getDimmerLights_Allow_Condition@lights:	
  3615                           ; 1 bytes @ 0x7
  3616                           
  3617  0077                     Flash_Memory_Modify@i:	
  3618                           ; 1 bytes @ 0x7
  3619                           
  3620  0077                     getTemp_AD@channel:	
  3621                           ; 1 bytes @ 0x7
  3622                           
  3623  0077                     getMain_All_Error_Status@command:	
  3624                           ; 1 bytes @ 0x7
  3625                           
  3626  0077                     ___lwdiv@counter:	
  3627                           ; 1 bytes @ 0x7
  3628                           
  3629                           
  3630                           ; 1 bytes @ 0x7
  3631  0077                     	ds	1
  3632  0078                     ??_CC2500_PowerRST:	
  3633  0078                     ??_CC2500_FrequencyCabr:	
  3634                           ; 0 bytes @ 0x8
  3635                           
  3636  0078                     ??_Flash_Memory_Main:	
  3637                           ; 0 bytes @ 0x8
  3638                           
  3639  0078                     setBuz@count:	
  3640                           ; 0 bytes @ 0x8
  3641                           
  3642  0078                     CC2500_InitPATable@temp:	
  3643                           ; 1 bytes @ 0x8
  3644                           
  3645  0078                     getDimmerLights_Allow_Condition@allow:	
  3646                           ; 1 bytes @ 0x8
  3647                           
  3648  0078                     getMain_All_Error_Status@status:	
  3649                           ; 1 bytes @ 0x8
  3650                           
  3651  0078                     ___lwdiv@quotient:	
  3652                           ; 1 bytes @ 0x8
  3653                           
  3654                           
  3655                           ; 2 bytes @ 0x8
  3656  0078                     	ds	1
  3657  0079                     ??_setDimmerLights_SwOn:	
  3658  0079                     ??_my_MainTimer:	
  3659                           ; 0 bytes @ 0x9
  3660                           
  3661  0079                     CC2500_InitPATable@loop_d:	
  3662                           ; 0 bytes @ 0x9
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x9
  3666  0079                     	ds	1
  3667  007A                     ??_setDimmerLights_SwOff:	
  3668  007A                     ??_setDimmerLights_Main:	
  3669                           ; 0 bytes @ 0xA
  3670                           
  3671  007A                     ??_setControl_Lights_Table:	
  3672                           ; 0 bytes @ 0xA
  3673                           
  3674  007A                     ??_CC2500_PowerOnInitial:	
  3675                           ; 0 bytes @ 0xA
  3676                           
  3677  007A                     ??_DelayOff_Main:	
  3678                           ; 0 bytes @ 0xA
  3679                           
  3680  007A                     ??_DimmerLights_Main:	
  3681                           ; 0 bytes @ 0xA
  3682                           
  3683  007A                     ??_Temp_Main:	
  3684                           ; 0 bytes @ 0xA
  3685                           
  3686  007A                     ??_RF_Main:	
  3687                           ; 0 bytes @ 0xA
  3688                           
  3689  007A                     ??_Switch_Main:	
  3690                           ; 0 bytes @ 0xA
  3691                           
  3692  007A                     ??_main:	
  3693                           ; 0 bytes @ 0xA
  3694                           
  3695  007A                     ??___ftneg:	
  3696                           ; 0 bytes @ 0xA
  3697                           
  3698                           
  3699                           	psect	cstackBANK0
  3700  0020                     __pcstackBANK0:	
  3701                           ; 0 bytes @ 0xA
  3702                           
  3703  0020                     ??_Load_Main:	
  3704  0020                     ?___awtoft:	
  3705                           ; 0 bytes @ 0x0
  3706                           
  3707  0020                     CC2500_InitSetREG@temp1:	
  3708                           ; 3 bytes @ 0x0
  3709                           
  3710  0020                     getLoad_AD@channel:	
  3711                           ; 1 bytes @ 0x0
  3712                           
  3713  0020                     ___awdiv@counter:	
  3714                           ; 1 bytes @ 0x0
  3715                           
  3716  0020                     ___awtoft@c:	
  3717                           ; 1 bytes @ 0x0
  3718                           
  3719                           
  3720                           ; 2 bytes @ 0x0
  3721  0020                     	ds	1
  3722  0021                     CC2500_InitSetREG@temp2:	
  3723  0021                     getLoad_AD@k:	
  3724                           ; 1 bytes @ 0x1
  3725                           
  3726  0021                     ___awdiv@sign:	
  3727                           ; 1 bytes @ 0x1
  3728                           
  3729                           
  3730                           ; 1 bytes @ 0x1
  3731  0021                     	ds	1
  3732  0022                     CC2500_InitSetREG@loop_c:	
  3733  0022                     getLoad_AD@j:	
  3734                           ; 1 bytes @ 0x2
  3735                           
  3736  0022                     Load_Main@error:	
  3737                           ; 1 bytes @ 0x2
  3738                           
  3739  0022                     ___awdiv@quotient:	
  3740                           ; 1 bytes @ 0x2
  3741                           
  3742                           
  3743                           ; 2 bytes @ 0x2
  3744  0022                     	ds	1
  3745  0023                     ??___awtoft:	
  3746  0023                     getLoad_AD@i:	
  3747                           ; 0 bytes @ 0x3
  3748                           
  3749  0023                     Load_Main@Load_Status:	
  3750                           ; 1 bytes @ 0x3
  3751                           
  3752                           
  3753                           ; 1 bytes @ 0x3
  3754  0023                     	ds	1
  3755  0024                     ?_setBuz:	
  3756  0024                     setBuz@time:	
  3757                           ; 0 bytes @ 0x4
  3758                           
  3759  0024                     Load_Main@i:	
  3760                           ; 2 bytes @ 0x4
  3761                           
  3762                           
  3763                           ; 2 bytes @ 0x4
  3764  0024                     	ds	1
  3765  0025                     ___awtoft@sign:	
  3766                           
  3767                           ; 1 bytes @ 0x5
  3768  0025                     	ds	1
  3769  0026                     ?___ftdiv:	
  3770  0026                     ?___ftmul:	
  3771                           ; 3 bytes @ 0x6
  3772                           
  3773  0026                     _setDimmerLights_SwOn$2159:	
  3774                           ; 3 bytes @ 0x6
  3775                           
  3776  0026                     ___ftdiv@f2:	
  3777                           ; 1 bytes @ 0x6
  3778                           
  3779  0026                     ___ftmul@f1:	
  3780                           ; 3 bytes @ 0x6
  3781                           
  3782                           
  3783                           ; 3 bytes @ 0x6
  3784  0026                     	ds	1
  3785  0027                     _setDimmerLights_SwOn$2160:	
  3786                           
  3787                           ; 1 bytes @ 0x7
  3788  0027                     	ds	1
  3789  0028                     setDimmerLights_SwOn@idle:	
  3790                           
  3791                           ; 1 bytes @ 0x8
  3792  0028                     	ds	1
  3793  0029                     setDimmerLights_SwOn@sw:	
  3794  0029                     ___ftdiv@f1:	
  3795                           ; 1 bytes @ 0x9
  3796                           
  3797  0029                     ___ftmul@f2:	
  3798                           ; 3 bytes @ 0x9
  3799                           
  3800                           
  3801                           ; 3 bytes @ 0x9
  3802  0029                     	ds	3
  3803  002C                     ??___ftdiv:	
  3804  002C                     ??___ftmul:	
  3805                           ; 0 bytes @ 0xC
  3806                           
  3807                           
  3808                           ; 0 bytes @ 0xC
  3809  002C                     	ds	4
  3810  0030                     ___ftdiv@cntr:	
  3811  0030                     ___ftmul@exp:	
  3812                           ; 1 bytes @ 0x10
  3813                           
  3814                           
  3815                           ; 1 bytes @ 0x10
  3816  0030                     	ds	1
  3817  0031                     ___ftdiv@f3:	
  3818  0031                     ___ftmul@f3_as_product:	
  3819                           ; 3 bytes @ 0x11
  3820                           
  3821                           
  3822                           ; 3 bytes @ 0x11
  3823  0031                     	ds	3
  3824  0034                     ___ftdiv@exp:	
  3825  0034                     ___ftmul@cntr:	
  3826                           ; 1 bytes @ 0x14
  3827                           
  3828                           
  3829                           ; 1 bytes @ 0x14
  3830  0034                     	ds	1
  3831  0035                     ___ftdiv@sign:	
  3832  0035                     ___ftmul@sign:	
  3833                           ; 1 bytes @ 0x15
  3834                           
  3835                           
  3836                           ; 1 bytes @ 0x15
  3837  0035                     	ds	1
  3838  0036                     ?___ftneg:	
  3839  0036                     ___ftneg@f1:	
  3840                           ; 3 bytes @ 0x16
  3841                           
  3842                           
  3843                           ; 3 bytes @ 0x16
  3844  0036                     	ds	3
  3845  0039                     ?___ftadd:	
  3846  0039                     ___ftadd@f1:	
  3847                           ; 3 bytes @ 0x19
  3848                           
  3849                           
  3850                           ; 3 bytes @ 0x19
  3851  0039                     	ds	3
  3852  003C                     ___ftadd@f2:	
  3853                           
  3854                           ; 3 bytes @ 0x1C
  3855  003C                     	ds	3
  3856  003F                     ??___ftadd:	
  3857                           
  3858                           ; 0 bytes @ 0x1F
  3859  003F                     	ds	4
  3860  0043                     ___ftadd@sign:	
  3861                           
  3862                           ; 1 bytes @ 0x23
  3863  0043                     	ds	1
  3864  0044                     ___ftadd@exp2:	
  3865                           
  3866                           ; 1 bytes @ 0x24
  3867  0044                     	ds	1
  3868  0045                     ___ftadd@exp1:	
  3869                           
  3870                           ; 1 bytes @ 0x25
  3871  0045                     	ds	1
  3872  0046                     ?___fttol:	
  3873  0046                     ___fttol@f1:	
  3874                           ; 4 bytes @ 0x26
  3875                           
  3876                           
  3877                           ; 3 bytes @ 0x26
  3878  0046                     	ds	4
  3879  004A                     ??___fttol:	
  3880                           
  3881                           ; 0 bytes @ 0x2A
  3882  004A                     	ds	4
  3883  004E                     ___fttol@sign1:	
  3884                           
  3885                           ; 1 bytes @ 0x2E
  3886  004E                     	ds	1
  3887  004F                     ___fttol@lval:	
  3888                           
  3889                           ; 4 bytes @ 0x2F
  3890  004F                     	ds	4
  3891  0053                     ___fttol@exp1:	
  3892                           
  3893                           ; 1 bytes @ 0x33
  3894  0053                     	ds	1
  3895  0054                     ??_getDimmerLights_PercentToValue:	
  3896  0054                     ??_getDimmerLights_ValueToPercent:	
  3897                           ; 0 bytes @ 0x34
  3898                           
  3899                           
  3900                           ; 0 bytes @ 0x34
  3901  0054                     	ds	2
  3902  0056                     getDimmerLights_PercentToValue@value:	
  3903  0056                     getDimmerLights_ValueToPercent@value:	
  3904                           ; 1 bytes @ 0x36
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x36
  3908  0056                     	ds	1
  3909  0057                     getDimmerLights_PercentToValue@i:	
  3910  0057                     getDimmerLights_ValueToPercent@i:	
  3911                           ; 3 bytes @ 0x37
  3912                           
  3913                           
  3914                           ; 3 bytes @ 0x37
  3915  0057                     	ds	3
  3916  005A                     ?_setProductData:	
  3917  005A                     ?_setDimmerIntr_MaxmumValue:	
  3918                           ; 0 bytes @ 0x3A
  3919                           
  3920  005A                     ??_Flash_Memory_Initialization:	
  3921                           ; 0 bytes @ 0x3A
  3922                           
  3923  005A                     setDimmerIntr_MaxmumValue@value:	
  3924                           ; 0 bytes @ 0x3A
  3925                           
  3926  005A                     setProductData@value:	
  3927                           ; 1 bytes @ 0x3A
  3928                           
  3929                           
  3930                           ; 1 bytes @ 0x3A
  3931  005A                     	ds	1
  3932  005B                     ??_setProductData:	
  3933  005B                     ??_setDimmerIntr_MaxmumValue:	
  3934                           ; 0 bytes @ 0x3B
  3935                           
  3936  005B                     Flash_Memory_Initialization@i:	
  3937                           ; 0 bytes @ 0x3B
  3938                           
  3939                           
  3940                           ; 1 bytes @ 0x3B
  3941  005B                     	ds	1
  3942  005C                     setDimmerIntr_MaxmumValue@lights:	
  3943                           
  3944                           ; 1 bytes @ 0x3C
  3945  005C                     	ds	1
  3946  005D                     setProductData@address:	
  3947                           
  3948                           ; 1 bytes @ 0x3D
  3949  005D                     	ds	1
  3950  005E                     ?_setRF_DimmerLights:	
  3951  005E                     ??_setTemp_Main:	
  3952                           ; 0 bytes @ 0x3E
  3953                           
  3954  005E                     ??_setLog_Code:	
  3955                           ; 0 bytes @ 0x3E
  3956                           
  3957  005E                     ?_setDelayOff_GO:	
  3958                           ; 0 bytes @ 0x3E
  3959                           
  3960  005E                     setDelayOff_GO@command:	
  3961                           ; 0 bytes @ 0x3E
  3962                           
  3963  005E                     setRF_DimmerLights@on:	
  3964                           ; 1 bytes @ 0x3E
  3965                           
  3966                           
  3967                           ; 1 bytes @ 0x3E
  3968  005E                     	ds	1
  3969  005F                     ??_setRF_DimmerLights:	
  3970  005F                     setDelayOff_GO@value:	
  3971                           ; 0 bytes @ 0x3F
  3972                           
  3973                           
  3974                           ; 1 bytes @ 0x3F
  3975  005F                     	ds	1
  3976  0060                     ??_setDelayOff_GO:	
  3977  0060                     setTemp_Main@error:	
  3978                           ; 0 bytes @ 0x40
  3979                           
  3980                           
  3981                           ; 1 bytes @ 0x40
  3982  0060                     	ds	1
  3983  0061                     setRF_DimmerLights@status:	
  3984                           
  3985                           ; 1 bytes @ 0x41
  3986  0061                     	ds	1
  3987  0062                     setDelayOff_GO@i:	
  3988  0062                     setRF_DimmerLights@lights:	
  3989                           ; 1 bytes @ 0x42
  3990                           
  3991                           
  3992                           ; 1 bytes @ 0x42
  3993  0062                     	ds	1
  3994  0063                     ?_setDimmerLights_OnOff:	
  3995  0063                     ?_setDimmerLights_Dimming:	
  3996                           ; 0 bytes @ 0x43
  3997                           
  3998  0063                     setDelayOff_GO@j:	
  3999                           ; 0 bytes @ 0x43
  4000                           
  4001  0063                     setDimmerLights_OnOff@command:	
  4002                           ; 1 bytes @ 0x43
  4003                           
  4004  0063                     setDimmerLights_Dimming@status:	
  4005                           ; 1 bytes @ 0x43
  4006                           
  4007                           
  4008                           ; 1 bytes @ 0x43
  4009  0063                     	ds	1
  4010  0064                     ??_setDimmerLights_OnOff:	
  4011  0064                     ??_setDimmerLights_Dimming:	
  4012                           ; 0 bytes @ 0x44
  4013                           
  4014  0064                     setDelayOff_GO@k:	
  4015                           ; 0 bytes @ 0x44
  4016                           
  4017                           
  4018                           ; 1 bytes @ 0x44
  4019  0064                     	ds	1
  4020  0065                     setDelayOff_GO@sw:	
  4021  0065                     setDimmerLights_Dimming@lights:	
  4022                           ; 1 bytes @ 0x45
  4023                           
  4024                           
  4025                           ; 1 bytes @ 0x45
  4026  0065                     	ds	1
  4027  0066                     setDimmerLights_SwOff@sw:	
  4028  0066                     setDimmerLights_OnOff@lights:	
  4029                           ; 1 bytes @ 0x46
  4030                           
  4031                           
  4032                           ; 1 bytes @ 0x46
  4033  0066                     	ds	1
  4034  0067                     ??_DlyOff_Main:	
  4035  0067                     ??_setRFSW_Control:	
  4036                           ; 0 bytes @ 0x47
  4037                           
  4038  0067                     ??_setRFSW_AdjControl:	
  4039                           ; 0 bytes @ 0x47
  4040                           
  4041  0067                     ??_setSw_Main:	
  4042                           ; 0 bytes @ 0x47
  4043                           
  4044  0067                     ??_Exception_Main:	
  4045                           ; 0 bytes @ 0x47
  4046                           
  4047  0067                     setDimmerLights_Main@lights:	
  4048                           ; 0 bytes @ 0x47
  4049                           
  4050                           
  4051                           ; 1 bytes @ 0x47
  4052  0067                     	ds	1
  4053  0068                     setRFSW_Control@status:	
  4054                           
  4055                           ; 1 bytes @ 0x48
  4056  0068                     	ds	1
  4057  0069                     DlyOff_Main@sw:	
  4058  0069                     setRFSW_Control@sw:	
  4059                           ; 1 bytes @ 0x49
  4060                           
  4061  0069                     setRFSW_AdjControl@status:	
  4062                           ; 1 bytes @ 0x49
  4063                           
  4064  0069                     setSw_Main@sw:	
  4065                           ; 1 bytes @ 0x49
  4066                           
  4067                           
  4068                           ; 1 bytes @ 0x49
  4069  0069                     	ds	1
  4070  006A                     setRFSW_AdjControl@sw:	
  4071                           
  4072                           ; 1 bytes @ 0x4A
  4073  006A                     	ds	1
  4074  006B                     ??_getRxData:	
  4075                           
  4076                           ; 0 bytes @ 0x4B
  4077  006B                     	ds	1
  4078  006C                     getRxData@error:	
  4079                           
  4080                           ; 1 bytes @ 0x4C
  4081  006C                     	ds	1
  4082                           
  4083                           	psect	maintext
  4084  16E7                     __pmaintext:	
  4085 ;;
  4086 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4087 ;;
  4088 ;; *************** function _main *****************
  4089 ;; Defined at:
  4090 ;;		line 7 in file "../src/main_B1.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  argc            2    0[BANK3 ] int 
  4093 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;		None
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  2    0[BANK3 ] int 
  4098 ;; Registers used:
  4099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 17F/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4105 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4109 ;;Total ram usage:        4 bytes
  4110 ;; Hardware stack levels required when called:   11
  4111 ;; This function calls:
  4112 ;;		_Buzzer_Initialization
  4113 ;;		_Buzzer_Main
  4114 ;;		_CC2500_PowerOnInitial
  4115 ;;		_DelayOff_Initialization
  4116 ;;		_DelayOff_Main
  4117 ;;		_DimmerLights_Initialization
  4118 ;;		_DimmerLights_Main
  4119 ;;		_Exception_Main
  4120 ;;		_Flash_Memory_Initialization
  4121 ;;		_Flash_Memory_Main
  4122 ;;		_LED_Initialization
  4123 ;;		_LED_Main
  4124 ;;		_Load_Initialization
  4125 ;;		_Load_Main
  4126 ;;		_Mcu_Initialization
  4127 ;;		_RF_Initialization
  4128 ;;		_RF_Main
  4129 ;;		_Switch_Initialization
  4130 ;;		_Switch_Main
  4131 ;;		_Temp_Initialization
  4132 ;;		_Temp_Main
  4133 ;;		_WDT_Main
  4134 ;;		_getLoad_AD
  4135 ;;		_getTemp_AD
  4136 ;;		_myMain_Initialization
  4137 ;;		_my_MainTimer
  4138 ;; This function is called by:
  4139 ;;		Startup code after reset
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function _main
  4145  16E7                     _main:	
  4146                           
  4147                           ;main_B1.c: 8: myMain_Initialization();
  4148                           
  4149                           ;incstack = 0
  4150                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4151  16E7  319C  2444  3196   	fcall	_myMain_Initialization
  4152                           
  4153                           ;main_B1.c: 9: Mcu_Initialization();
  4154  16EA  319D  2518  3196   	fcall	_Mcu_Initialization
  4155                           
  4156                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4157  16ED  3185  2532  3196   	fcall	_Flash_Memory_Initialization
  4158                           
  4159                           ;main_B1.c: 11: LED_Initialization();
  4160  16F0  319B  239F  3196   	fcall	_LED_Initialization
  4161                           
  4162                           ;main_B1.c: 12: Buzzer_Initialization();
  4163  16F3  319A  22CA  3196   	fcall	_Buzzer_Initialization
  4164                           
  4165                           ;main_B1.c: 14: ;;
  4166                           ;main_B1.c: 15: Temp_Initialization();
  4167  16F6  319A  22D6  3196   	fcall	_Temp_Initialization
  4168                           
  4169                           ;main_B1.c: 16: Load_Initialization();
  4170  16F9  319A  22CD  3196   	fcall	_Load_Initialization
  4171                           
  4172                           ;main_B1.c: 17: ;;
  4173                           ;main_B1.c: 18: DelayOff_Initialization();
  4174  16FC  319B  2326  3196   	fcall	_DelayOff_Initialization
  4175                           
  4176                           ;main_B1.c: 20: DimmerLights_Initialization();
  4177  16FF  319B  235B  3196   	fcall	_DimmerLights_Initialization
  4178                           
  4179                           ;main_B1.c: 21: ;;
  4180                           ;main_B1.c: 22: ;;
  4181                           ;main_B1.c: 23: ;;
  4182                           ;main_B1.c: 24: Switch_Initialization();
  4183  1702  3190  2066  3196   	fcall	_Switch_Initialization
  4184                           
  4185                           ;main_B1.c: 25: RF_Initialization();
  4186  1705  319A  22D0  3196   	fcall	_RF_Initialization
  4187                           
  4188                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4189  1708  319D  25BB  3196   	fcall	_CC2500_PowerOnInitial
  4190  170B                     l11059:	
  4191                           ;main_B1.c: 27: ;;
  4192                           ;main_B1.c: 28: ;;
  4193                           ;main_B1.c: 30: while (1) {
  4194                           
  4195                           
  4196                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4197  170B  0022               	movlb	2	; select bank2
  4198  170C  1C20               	btfss	_myMain^(0+256),0
  4199  170D  2F16               	goto	l11063
  4200                           
  4201                           ;main_B1.c: 38: getLoad_AD(0x05);
  4202  170E  3005               	movlw	5
  4203  170F  3187  2782  3196   	fcall	_getLoad_AD
  4204                           
  4205                           ;main_B1.c: 42: getTemp_AD(0x09);
  4206  1712  3009               	movlw	9
  4207  1713  3192  22D1  3196   	fcall	_getTemp_AD
  4208  1716                     l11063:	
  4209                           
  4210                           ;main_B1.c: 57: }
  4211                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4212  1716  0021               	movlb	1	; select bank1
  4213  1717  1C3A               	btfss	_Timer1^(0+128),0
  4214  1718  2F0B               	goto	l11059
  4215                           
  4216                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4217  1719  103A               	bcf	_Timer1^(0+128),0
  4218                           
  4219                           ;main_B1.c: 96: my_MainTimer();
  4220  171A  3193  230A  3196   	fcall	_my_MainTimer
  4221                           
  4222                           ;main_B1.c: 97: WDT_Main();
  4223  171D  319C  24C3  3196   	fcall	_WDT_Main
  4224                           
  4225                           ;main_B1.c: 98: ;;
  4226                           ;main_B1.c: 99: ;;
  4227                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4228  1720  0022               	movlb	2	; select bank2
  4229  1721  1C20               	btfss	_myMain^(0+256),0
  4230  1722  2F0B               	goto	l11059
  4231                           
  4232                           ;main_B1.c: 101: Flash_Memory_Main();
  4233  1723  3191  21FD  3196   	fcall	_Flash_Memory_Main
  4234                           
  4235                           ;main_B1.c: 103: LED_Main();
  4236  1726  319B  23AB  3196   	fcall	_LED_Main
  4237                           
  4238                           ;main_B1.c: 104: Buzzer_Main();
  4239  1729  3193  23C8  3196   	fcall	_Buzzer_Main
  4240                           
  4241                           ;main_B1.c: 106: ;;
  4242                           ;main_B1.c: 107: Temp_Main();
  4243  172C  3187  27FD  3196   	fcall	_Temp_Main
  4244                           
  4245                           ;main_B1.c: 108: Load_Main();
  4246  172F  3180  2055  3196   	fcall	_Load_Main
  4247                           
  4248                           ;main_B1.c: 109: ;;
  4249                           ;main_B1.c: 111: ;;
  4250                           ;main_B1.c: 112: DimmerLights_Main();
  4251  1732  319F  273B  3196   	fcall	_DimmerLights_Main
  4252                           
  4253                           ;main_B1.c: 113: Switch_Main();
  4254  1735  319B  237C  3196   	fcall	_Switch_Main
  4255                           
  4256                           ;main_B1.c: 114: ;;
  4257                           ;main_B1.c: 115: ;;
  4258                           ;main_B1.c: 117: RF_Main();
  4259  1738  319A  22D3  3196   	fcall	_RF_Main
  4260                           
  4261                           ;main_B1.c: 118: DelayOff_Main();
  4262  173B  319B  232E  3196   	fcall	_DelayOff_Main
  4263                           
  4264                           ;main_B1.c: 119: ;;
  4265                           ;main_B1.c: 120: ;;
  4266                           ;main_B1.c: 121: Exception_Main();
  4267  173E  3184  2454  3196   	fcall	_Exception_Main
  4268  1741  2F0B               	goto	l11059
  4269  1742                     __end_of_main:	
  4270                           ;main_B1.c: 128: }
  4271                           ;main_B1.c: 129: }
  4272                           ;main_B1.c: 163: }
  4273                           ;main_B1.c: 164: return (0);
  4274                           ;	Return value of _main is never used
  4275                           
  4276                           
  4277                           	psect	text1
  4278  130A                     __ptext1:	
  4279 ;; *************** function _my_MainTimer *****************
  4280 ;; Defined at:
  4281 ;;		line 185 in file "../src/main_B1.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;		None
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;		None
  4286 ;; Return value:  Size  Location     Type
  4287 ;;		None               void
  4288 ;; Registers used:
  4289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4298 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4299 ;;Total ram usage:        1 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; Hardware stack levels required when called:    5
  4302 ;; This function calls:
  4303 ;;		_setBuz
  4304 ;; This function is called by:
  4305 ;;		_main
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           
  4310                           ;psect for function _my_MainTimer
  4311  130A                     _my_MainTimer:	
  4312                           
  4313                           ;main_B1.c: 188: if (myMain.PowerON == 0) {
  4314                           
  4315                           ;incstack = 0
  4316                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4317  130A  0022               	movlb	2	; select bank2
  4318  130B  1820               	btfsc	_myMain^(0+256),0
  4319  130C  2B22               	goto	l10921
  4320                           
  4321                           ;main_B1.c: 189: myMain.PowerCount++;
  4322  130D  3001               	movlw	1
  4323  130E  00F9               	movwf	??_my_MainTimer
  4324  130F  0879               	movf	??_my_MainTimer,w
  4325  1310  07A1               	addwf	(_myMain^(0+256)+1),f
  4326                           
  4327                           ;main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4328  1311  0821               	movf	(_myMain^(0+256)+1),w
  4329  1312  3A4B               	xorlw	75
  4330  1313  1D03               	skipz
  4331  1314  0008               	return
  4332                           
  4333                           ;main_B1.c: 191: myMain.PowerCount = 0;
  4334  1315  01A1               	clrf	(_myMain^(0+256)+1)
  4335                           
  4336                           ;main_B1.c: 192: myMain.PowerON = 1;
  4337  1316  1420               	bsf	_myMain^(0+256),0
  4338                           
  4339                           ;main_B1.c: 197: setBuz(3, 50);
  4340  1317  3032               	movlw	50
  4341  1318  0020               	movlb	0	; select bank0
  4342  1319  00A4               	movwf	setBuz@time
  4343  131A  3000               	movlw	0
  4344  131B  00A5               	movwf	setBuz@time+1
  4345  131C  3003               	movlw	3
  4346  131D  3195  25E6         	fcall	_setBuz
  4347                           
  4348                           ;main_B1.c: 198: myMain.SelfTest = 1;
  4349  131F  0022               	movlb	2	; select bank2
  4350  1320  1620               	bsf	_myMain^(0+256),4
  4351                           
  4352                           ;main_B1.c: 207: }
  4353                           ;main_B1.c: 208: } else {
  4354  1321  0008               	return
  4355  1322                     l10921:	
  4356                           
  4357                           ;main_B1.c: 209: myMain.PowerCount++;
  4358  1322  3001               	movlw	1
  4359  1323  00F9               	movwf	??_my_MainTimer
  4360  1324  0879               	movf	??_my_MainTimer,w
  4361  1325  07A1               	addwf	(_myMain^(0+256)+1),f
  4362                           
  4363                           ;main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4364  1326  0821               	movf	(_myMain^(0+256)+1),w
  4365  1327  3A32               	xorlw	50
  4366  1328  1903               	btfsc	3,2
  4367                           
  4368                           ;main_B1.c: 211: myMain.PowerCount = 0;
  4369  1329  01A1               	clrf	(_myMain^(0+256)+1)
  4370                           
  4371                           ;main_B1.c: 226: }
  4372                           ;main_B1.c: 228: myMain.Count1++;
  4373  132A  3001               	movlw	1
  4374  132B  07A4               	addwf	(_myMain^(0+256)+4),f
  4375  132C  3000               	movlw	0
  4376  132D  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4377                           
  4378                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4379  132E  3004               	movlw	4
  4380  132F  3E20               	addlw	_myMain& (0+255)
  4381  1330  0086               	movwf	6
  4382  1331  3001               	movlw	1	; select bank2/3
  4383  1332  0087               	movwf	7
  4384  1333  3F40               	moviw [0]fsr1
  4385  1334  3A32               	xorlw	50
  4386  1335  1D03               	skipz
  4387  1336  2B39               	goto	u13475
  4388  1337  3F41               	moviw [1]fsr1
  4389  1338  3A00               	xorlw	0
  4390  1339                     u13475:	
  4391  1339  1D03               	skipz
  4392  133A  0008               	return
  4393                           
  4394                           ;main_B1.c: 230: myMain.Count1 = 0;
  4395  133B  01A4               	clrf	(_myMain^(0+256)+4)
  4396  133C  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4397                           
  4398                           ;main_B1.c: 242: if (myMain.Flag) {
  4399  133D  1CA0               	btfss	_myMain^(0+256),1
  4400  133E  2B41               	goto	l2824
  4401                           
  4402                           ;main_B1.c: 243: myMain.Flag = 0;
  4403  133F  10A0               	bcf	_myMain^(0+256),1
  4404                           
  4405                           ;main_B1.c: 252: } else {
  4406  1340  0008               	return
  4407  1341                     l2824:	
  4408                           
  4409                           ;main_B1.c: 253: myMain.Flag = 1;
  4410  1341  14A0               	bsf	_myMain^(0+256),1
  4411  1342  0008               	return
  4412  1343                     __end_of_my_MainTimer:	
  4413                           
  4414                           	psect	text2
  4415  1C44                     __ptext2:	
  4416 ;; *************** function _myMain_Initialization *****************
  4417 ;; Defined at:
  4418 ;;		line 170 in file "../src/main_B1.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;		None
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;		None               void
  4425 ;; Registers used:
  4426 ;;		wreg, fsr1l, fsr1h
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4436 ;;Total ram usage:        1 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:    3
  4439 ;; This function calls:
  4440 ;;		Nothing
  4441 ;; This function is called by:
  4442 ;;		_main
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _myMain_Initialization
  4448  1C44                     _myMain_Initialization:	
  4449                           
  4450                           ;main_B1.c: 173: product = &_product;
  4451                           
  4452                           ;incstack = 0
  4453                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4454  1C44  3045               	movlw	__product& (0+255)
  4455  1C45  00F2               	movwf	??_myMain_Initialization
  4456  1C46  0872               	movf	??_myMain_Initialization,w
  4457  1C47  0020               	movlb	0	; select bank0
  4458  1C48  00EF               	movwf	_product
  4459                           
  4460                           ;main_B1.c: 174: product->Data[20] = 210;
  4461  1C49  30D2               	movlw	210
  4462  1C4A  00F2               	movwf	??_myMain_Initialization
  4463  1C4B  086F               	movf	_product,w
  4464  1C4C  3E14               	addlw	20
  4465  1C4D  0086               	movwf	6
  4466  1C4E  3002               	movlw	2	; select bank4/5
  4467  1C4F  0087               	movwf	7
  4468  1C50  0872               	movf	??_myMain_Initialization,w
  4469  1C51  0081               	movwf	1
  4470  1C52  0008               	return
  4471  1C53                     __end_of_myMain_Initialization:	
  4472                           
  4473                           	psect	text3
  4474  12D1                     __ptext3:	
  4475 ;; *************** function _getTemp_AD *****************
  4476 ;; Defined at:
  4477 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;  channel         1    wreg     unsigned char 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  channel         1    7[COMMON] unsigned char 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;		None               void
  4484 ;; Registers used:
  4485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4495 ;;Total ram usage:        2 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    5
  4498 ;; This function calls:
  4499 ;;		_getAD
  4500 ;; This function is called by:
  4501 ;;		_main
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           
  4506                           ;psect for function _getTemp_AD
  4507  12D1                     _getTemp_AD:	
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4511                           ;getTemp_AD@channel stored from wreg
  4512  12D1  00F7               	movwf	getTemp_AD@channel
  4513                           
  4514                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4515  12D2  0021               	movlb	1	; select bank1
  4516  12D3  1D4B               	btfss	_Temp^(0+128),2
  4517  12D4  0008               	return
  4518                           
  4519                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4520  12D5  30F0               	movlw	240
  4521  12D6  00F6               	movwf	??_getTemp_AD
  4522  12D7  0876               	movf	??_getTemp_AD,w
  4523  12D8  00F2               	movwf	getAD@adcon1
  4524  12D9  0877               	movf	getTemp_AD@channel,w
  4525  12DA  319E  26AD  3192   	fcall	_getAD
  4526  12DD  0873               	movf	?_getAD+1,w
  4527  12DE  0021               	movlb	1	; select bank1
  4528  12DF  01D8               	clrf	((_Temp+1)^(0+128)+12)
  4529  12E0  07D8               	addwf	((_Temp+1)^(0+128)+12),f
  4530  12E1  0872               	movf	?_getAD,w
  4531  12E2  01D7               	clrf	(_Temp^(0+128)+12)
  4532  12E3  07D7               	addwf	(_Temp^(0+128)+12),f
  4533                           
  4534                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4535  12E4  300C               	movlw	12
  4536  12E5  3ECB               	addlw	_Temp& (0+255)
  4537  12E6  0086               	movwf	6
  4538  12E7  0187               	clrf	7
  4539  12E8  0016               	moviw fsr1++
  4540  12E9  0401               	iorwf	1,w
  4541  12EA  1903               	skipnz
  4542  12EB  0008               	return
  4543                           
  4544                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4545  12EC  0858               	movf	((_Temp+1)^(0+128)+12),w
  4546  12ED  0254               	subwf	((_Temp+1)^(0+128)+8),w
  4547  12EE  1D03               	skipz
  4548  12EF  2AF2               	goto	u13425
  4549  12F0  0857               	movf	(_Temp^(0+128)+12),w
  4550  12F1  0253               	subwf	(_Temp^(0+128)+8),w
  4551  12F2                     u13425:	
  4552  12F2  1803               	skipnc
  4553  12F3  2AFB               	goto	l10893
  4554                           
  4555                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4556  12F4  0858               	movf	((_Temp+1)^(0+128)+12),w
  4557  12F5  01D4               	clrf	((_Temp+1)^(0+128)+8)
  4558  12F6  07D4               	addwf	((_Temp+1)^(0+128)+8),f
  4559  12F7  0857               	movf	(_Temp^(0+128)+12),w
  4560  12F8  01D3               	clrf	(_Temp^(0+128)+8)
  4561  12F9  07D3               	addwf	(_Temp^(0+128)+8),f
  4562                           
  4563                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4564  12FA  0008               	return
  4565  12FB                     l10893:	
  4566  12FB  0858               	movf	((_Temp+1)^(0+128)+12),w
  4567  12FC  0256               	subwf	((_Temp+1)^(0+128)+10),w
  4568  12FD  1D03               	skipz
  4569  12FE  2B01               	goto	u13435
  4570  12FF  0857               	movf	(_Temp^(0+128)+12),w
  4571  1300  0255               	subwf	(_Temp^(0+128)+10),w
  4572  1301                     u13435:	
  4573  1301  1803               	skipnc
  4574  1302  0008               	return
  4575                           
  4576                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4577  1303  0858               	movf	((_Temp+1)^(0+128)+12),w
  4578  1304  01D6               	clrf	((_Temp+1)^(0+128)+10)
  4579  1305  07D6               	addwf	((_Temp+1)^(0+128)+10),f
  4580  1306  0857               	movf	(_Temp^(0+128)+12),w
  4581  1307  01D5               	clrf	(_Temp^(0+128)+10)
  4582  1308  07D5               	addwf	(_Temp^(0+128)+10),f
  4583  1309  0008               	return
  4584  130A                     __end_of_getTemp_AD:	
  4585                           
  4586                           	psect	text4
  4587  0782                     __ptext4:	
  4588 ;; *************** function _getLoad_AD *****************
  4589 ;; Defined at:
  4590 ;;		line 15 in file "../src/OverLoad_B1.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;  channel         1    wreg     unsigned char 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  channel         1    0[BANK0 ] unsigned char 
  4595 ;;  i               1    3[BANK0 ] unsigned char 
  4596 ;;  j               1    2[BANK0 ] unsigned char 
  4597 ;;  k               1    1[BANK0 ] unsigned char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;		None               void
  4600 ;; Registers used:
  4601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;Total ram usage:        6 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    5
  4614 ;; This function calls:
  4615 ;;		_getAD
  4616 ;; This function is called by:
  4617 ;;		_main
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function _getLoad_AD
  4623  0782                     _getLoad_AD:	
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4627                           ;getLoad_AD@channel stored from wreg
  4628  0782  0020               	movlb	0	; select bank0
  4629  0783  00A0               	movwf	getLoad_AD@channel
  4630                           
  4631                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4632  0784  01A3               	clrf	getLoad_AD@i
  4633  0785  01A2               	clrf	getLoad_AD@j
  4634  0786  01A1               	clrf	getLoad_AD@k
  4635                           
  4636                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4637  0787  0022               	movlb	2	; select bank2
  4638  0788  1E33               	btfss	_Load^(0+256),4
  4639  0789  0008               	return
  4640                           
  4641                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4642  078A  30F3               	movlw	243
  4643  078B  00F6               	movwf	??_getLoad_AD
  4644  078C  0876               	movf	??_getLoad_AD,w
  4645  078D  00F2               	movwf	getAD@adcon1
  4646  078E  0020               	movlb	0	; select bank0
  4647  078F  0820               	movf	getLoad_AD@channel,w
  4648  0790  319E  26AD  3187   	fcall	_getAD
  4649  0793  0873               	movf	?_getAD+1,w
  4650  0794  0022               	movlb	2	; select bank2
  4651  0795  01D5               	clrf	((_Load+1)^(0+256)+33)
  4652  0796  07D5               	addwf	((_Load+1)^(0+256)+33),f
  4653  0797  0872               	movf	?_getAD,w
  4654  0798  01D4               	clrf	(_Load^(0+256)+33)
  4655  0799  07D4               	addwf	(_Load^(0+256)+33),f
  4656                           
  4657                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4658  079A  0020               	movlb	0	; select bank0
  4659  079B  01A3               	clrf	getLoad_AD@i
  4660  079C  3004               	movlw	4
  4661  079D  0223               	subwf	getLoad_AD@i,w
  4662  079E  1803               	btfsc	3,0
  4663  079F  2FCC               	goto	l10715
  4664  07A0                     l10703:	
  4665                           
  4666                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4667  07A0  3523               	lslf	getLoad_AD@i,w
  4668  07A1  3E3E               	addlw	(_Load+11)& (0+255)
  4669  07A2  0086               	movwf	6
  4670  07A3  3001               	movlw	1	; select bank2/3
  4671  07A4  0087               	movwf	7
  4672  07A5  3F40               	moviw [0]fsr1
  4673  07A6  00F6               	movwf	??_getLoad_AD
  4674  07A7  3F41               	moviw [1]fsr1
  4675  07A8  00F7               	movwf	??_getLoad_AD+1
  4676  07A9  0022               	movlb	2	; select bank2
  4677  07AA  0855               	movf	((_Load+1)^(0+256)+33),w
  4678  07AB  0277               	subwf	??_getLoad_AD+1,w
  4679  07AC  1D03               	skipz
  4680  07AD  2FB0               	goto	u13025
  4681  07AE  0854               	movf	(_Load^(0+256)+33),w
  4682  07AF  0276               	subwf	??_getLoad_AD,w
  4683  07B0                     u13025:	
  4684  07B0  1803               	skipnc
  4685  07B1  2FC3               	goto	l10711
  4686  07B2  0020               	movlb	0	; select bank0
  4687  07B3  08A2               	movf	getLoad_AD@j,f
  4688  07B4  1D03               	skipz
  4689  07B5  2FC3               	goto	l10711
  4690                           
  4691                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4692  07B6  3523               	lslf	getLoad_AD@i,w
  4693  07B7  3E3E               	addlw	(_Load+11)& (0+255)
  4694  07B8  0086               	movwf	6
  4695  07B9  3001               	movlw	1	; select bank2/3
  4696  07BA  0087               	movwf	7
  4697  07BB  0022               	movlb	2	; select bank2
  4698  07BC  0854               	movf	(_Load^(0+256)+33),w
  4699  07BD  3FC0               	movwi [0]fsr1
  4700  07BE  0855               	movf	((_Load+1)^(0+256)+33),w
  4701  07BF  3FC1               	movwi [1]fsr1
  4702                           
  4703                           ;OverLoad_B1.c: 24: j = 1;
  4704  07C0  0020               	movlb	0	; select bank0
  4705  07C1  01A2               	clrf	getLoad_AD@j
  4706  07C2  0AA2               	incf	getLoad_AD@j,f
  4707  07C3                     l10711:	
  4708  07C3  3001               	movlw	1
  4709  07C4  00F6               	movwf	??_getLoad_AD
  4710  07C5  0876               	movf	??_getLoad_AD,w
  4711  07C6  0020               	movlb	0	; select bank0
  4712  07C7  07A3               	addwf	getLoad_AD@i,f
  4713  07C8  3004               	movlw	4
  4714  07C9  0223               	subwf	getLoad_AD@i,w
  4715  07CA  1C03               	skipc
  4716  07CB  2FA0               	goto	l10703
  4717  07CC                     l10715:	
  4718                           
  4719                           ;OverLoad_B1.c: 25: }
  4720                           ;OverLoad_B1.c: 26: }
  4721                           ;OverLoad_B1.c: 27: if (j == 0) {
  4722  07CC  08A2               	movf	getLoad_AD@j,f
  4723  07CD  1D03               	skipz
  4724  07CE  0008               	return
  4725                           
  4726                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4727  07CF  01A3               	clrf	getLoad_AD@i
  4728  07D0                     L1:	
  4729  07D0  3004               	movlw	4
  4730  07D1  0223               	subwf	getLoad_AD@i,w
  4731  07D2  1803               	btfsc	3,0
  4732  07D3  0008               	return
  4733                           
  4734                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4735  07D4  3523               	lslf	getLoad_AD@i,w
  4736  07D5  3E48               	addlw	(_Load+21)& (0+255)
  4737  07D6  0086               	movwf	6
  4738  07D7  3001               	movlw	1	; select bank2/3
  4739  07D8  0087               	movwf	7
  4740  07D9  3F40               	moviw [0]fsr1
  4741  07DA  00F6               	movwf	??_getLoad_AD
  4742  07DB  3F41               	moviw [1]fsr1
  4743  07DC  00F7               	movwf	??_getLoad_AD+1
  4744  07DD  0877               	movf	??_getLoad_AD+1,w
  4745  07DE  0022               	movlb	2	; select bank2
  4746  07DF  0255               	subwf	((_Load+1)^(0+256)+33),w
  4747  07E0  1D03               	skipz
  4748  07E1  2FE4               	goto	u13075
  4749  07E2  0876               	movf	??_getLoad_AD,w
  4750  07E3  0254               	subwf	(_Load^(0+256)+33),w
  4751  07E4                     u13075:	
  4752  07E4  1803               	skipnc
  4753  07E5  2FF7               	goto	l10731
  4754  07E6  0020               	movlb	0	; select bank0
  4755  07E7  08A1               	movf	getLoad_AD@k,f
  4756  07E8  1D03               	skipz
  4757  07E9  2FF7               	goto	l10731
  4758                           
  4759                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4760  07EA  3523               	lslf	getLoad_AD@i,w
  4761  07EB  3E48               	addlw	(_Load+21)& (0+255)
  4762  07EC  0086               	movwf	6
  4763  07ED  3001               	movlw	1	; select bank2/3
  4764  07EE  0087               	movwf	7
  4765  07EF  0022               	movlb	2	; select bank2
  4766  07F0  0854               	movf	(_Load^(0+256)+33),w
  4767  07F1  3FC0               	movwi [0]fsr1
  4768  07F2  0855               	movf	((_Load+1)^(0+256)+33),w
  4769  07F3  3FC1               	movwi [1]fsr1
  4770                           
  4771                           ;OverLoad_B1.c: 31: k = 1;
  4772  07F4  0020               	movlb	0	; select bank0
  4773  07F5  01A1               	clrf	getLoad_AD@k
  4774  07F6  0AA1               	incf	getLoad_AD@k,f
  4775  07F7                     l10731:	
  4776  07F7  3001               	movlw	1
  4777  07F8  00F6               	movwf	??_getLoad_AD
  4778  07F9  0876               	movf	??_getLoad_AD,w
  4779  07FA  0020               	movlb	0	; select bank0
  4780  07FB  07A3               	addwf	getLoad_AD@i,f
  4781  07FC  2FD0               	goto	L1
  4782  07FD                     __end_of_getLoad_AD:	
  4783                           
  4784                           	psect	text5
  4785  1EAD                     __ptext5:	
  4786 ;; *************** function _getAD *****************
  4787 ;; Defined at:
  4788 ;;		line 462 in file "../src/MCU_B1.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  adcon0          1    wreg     unsigned char 
  4791 ;;  adcon1          1    2[COMMON] unsigned char 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  adcon0          1    5[COMMON] unsigned char 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  2    2[COMMON] int 
  4796 ;; Registers used:
  4797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4803 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4807 ;;Total ram usage:        4 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; Hardware stack levels required when called:    4
  4810 ;; This function calls:
  4811 ;;		_Timeout_Counter
  4812 ;;		_set_TimeoutCleared
  4813 ;; This function is called by:
  4814 ;;		_getLoad_AD
  4815 ;;		_getTemp_AD
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           
  4820                           ;psect for function _getAD
  4821  1EAD                     _getAD:	
  4822                           
  4823                           ;incstack = 0
  4824                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4825                           ;getAD@adcon0 stored from wreg
  4826  1EAD  00F5               	movwf	getAD@adcon0
  4827                           
  4828                           ;MCU_B1.c: 463: ADCON0 = adcon0;
  4829  1EAE  0875               	movf	getAD@adcon0,w
  4830  1EAF  0021               	movlb	1	; select bank1
  4831  1EB0  009D               	movwf	29	;volatile
  4832                           
  4833                           ;MCU_B1.c: 464: ADCON1 = adcon1;
  4834  1EB1  0872               	movf	getAD@adcon1,w
  4835  1EB2  009E               	movwf	30	;volatile
  4836                           
  4837                           ;MCU_B1.c: 465: GO_nDONE = 1;
  4838  1EB3  149D               	bsf	29,1	;volatile
  4839                           
  4840                           ;MCU_B1.c: 466: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4841  1EB4  2EB8               	goto	l10341
  4842  1EB5                     l10339:	
  4843                           
  4844                           ;MCU_B1.c: 467: Timeout_Counter();
  4845  1EB5  319D  25E5  319E   	fcall	_Timeout_Counter
  4846  1EB8                     l10341:	
  4847  1EB8  0021               	movlb	1	; select bank1
  4848  1EB9  1C9D               	btfss	29,1	;volatile
  4849  1EBA  2EBE               	goto	l10345
  4850  1EBB  0022               	movlb	2	; select bank2
  4851  1EBC  1D2B               	btfss	(_myMain^(0+256)+11),2
  4852  1EBD  2EB5               	goto	l10339
  4853  1EBE                     l10345:	
  4854                           
  4855                           ;MCU_B1.c: 468: };
  4856                           ;MCU_B1.c: 469: set_TimeoutCleared();
  4857  1EBE  319A  22F2         	fcall	_set_TimeoutCleared
  4858                           
  4859                           ;MCU_B1.c: 470: return ((ADRESH*256)+ADRESL);
  4860  1EC0  0021               	movlb	1	; select bank1
  4861  1EC1  081C               	movf	28,w	;volatile
  4862  1EC2  01F3               	clrf	?_getAD+1
  4863  1EC3  07F3               	addwf	?_getAD+1,f
  4864  1EC4  081B               	movf	27,w	;volatile
  4865  1EC5  01F2               	clrf	?_getAD
  4866  1EC6  07F2               	addwf	?_getAD,f
  4867  1EC7  0008               	return
  4868  1EC8                     __end_of_getAD:	
  4869                           
  4870                           	psect	text6
  4871  1CC3                     __ptext6:	
  4872 ;; *************** function _WDT_Main *****************
  4873 ;; Defined at:
  4874 ;;		line 1106 in file "../src/MCU_B1.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0, pclath, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;Total ram usage:        1 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    4
  4895 ;; This function calls:
  4896 ;;		_WDT_Clearing
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _WDT_Main
  4904  1CC3                     _WDT_Main:	
  4905                           
  4906                           ;MCU_B1.c: 1107: if (WDT.Enable == 1) {
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4910  1CC3  0021               	movlb	1	; select bank1
  4911  1CC4  1C3D               	btfss	_WDT^(0+128),0
  4912  1CC5  0008               	return
  4913                           
  4914                           ;MCU_B1.c: 1108: if (WDT.Timer-- > 0) {
  4915  1CC6  3001               	movlw	1
  4916  1CC7  02BE               	subwf	(_WDT^(0+128)+1),f
  4917  1CC8  083E               	movf	(_WDT^(0+128)+1),w
  4918  1CC9  3AFF               	xorlw	255
  4919  1CCA  1903               	skipnz
  4920  1CCB  0008               	return
  4921                           
  4922                           ;MCU_B1.c: 1109: WDT.Timer = 100;
  4923  1CCC  3064               	movlw	100
  4924  1CCD  00F2               	movwf	??_WDT_Main
  4925  1CCE  0872               	movf	??_WDT_Main,w
  4926  1CCF  00BE               	movwf	(_WDT^(0+128)+1)
  4927                           
  4928                           ;MCU_B1.c: 1110: WDT_Clearing();
  4929  1CD0  3180  2002         	fcall	_WDT_Clearing
  4930  1CD2  0008               	return
  4931  1CD3                     __end_of_WDT_Main:	
  4932                           
  4933                           	psect	text7
  4934  0002                     __ptext7:	
  4935 ;; *************** function _WDT_Clearing *****************
  4936 ;; Defined at:
  4937 ;;		line 1116 in file "../src/MCU_B1.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;		None
  4942 ;; Return value:  Size  Location     Type
  4943 ;;		None               void
  4944 ;; Registers used:
  4945 ;;		None
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;Total ram usage:        0 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    3
  4958 ;; This function calls:
  4959 ;;		Nothing
  4960 ;; This function is called by:
  4961 ;;		_WDT_Main
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           
  4966                           ;psect for function _WDT_Clearing
  4967  0002                     _WDT_Clearing:	
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _WDT_Clearing: []
  4971  0002  0064               	clrwdt	;# 
  4972  0003  0008               	return
  4973  0004                     __end_of_WDT_Clearing:	
  4974                           
  4975                           	psect	text8
  4976  07FD                     __ptext8:	
  4977 ;; *************** function _Temp_Main *****************
  4978 ;; Defined at:
  4979 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;		None
  4984 ;; Return value:  Size  Location     Type
  4985 ;;		None               void
  4986 ;; Registers used:
  4987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;Total ram usage:        0 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    6
  5000 ;; This function calls:
  5001 ;;		_setTemp_Main
  5002 ;; This function is called by:
  5003 ;;		_main
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           
  5008                           ;psect for function _Temp_Main
  5009  07FD                     _Temp_Main:	
  5010                           
  5011                           ;OverTemperature_B1.c: 51: setTemp_Main();
  5012                           
  5013                           ;incstack = 0
  5014                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5015  07FD  318E  269A         	fcall	_setTemp_Main
  5016  07FF  0008               	return
  5017  0800                     __end_of_Temp_Main:	
  5018                           
  5019                           	psect	text9
  5020  0E9A                     __ptext9:	
  5021 ;; *************** function _setTemp_Main *****************
  5022 ;; Defined at:
  5023 ;;		line 56 in file "../src/OverTemperature_B1.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;		None
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;  error           1   64[BANK0 ] unsigned char 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;Total ram usage:        3 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    5
  5044 ;; This function calls:
  5045 ;;		_getMain_All_Error_Status
  5046 ;;		_setBuz
  5047 ;;		_setProductData
  5048 ;; This function is called by:
  5049 ;;		_Temp_Main
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           
  5054                           ;psect for function _setTemp_Main
  5055  0E9A                     _setTemp_Main:	
  5056                           
  5057                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  5058                           
  5059                           ;incstack = 0
  5060                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5061  0E9A  3000               	movlw	0
  5062  0E9B  3191  21CF  318E   	fcall	_getMain_All_Error_Status
  5063  0E9E  0020               	movlb	0	; select bank0
  5064  0E9F  00DE               	movwf	??_setTemp_Main
  5065  0EA0  085E               	movf	??_setTemp_Main,w
  5066  0EA1  00E0               	movwf	setTemp_Main@error
  5067                           
  5068                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5069  0EA2  0021               	movlb	1	; select bank1
  5070  0EA3  1C4B               	btfss	_Temp^(0+128),0
  5071  0EA4  2F46               	goto	l1770
  5072                           
  5073                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5074  0EA5  194B               	btfsc	_Temp^(0+128),2
  5075  0EA6  2EB6               	goto	l10363
  5076                           
  5077                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5078  0EA7  3001               	movlw	1
  5079  0EA8  07CC               	addwf	(_Temp^(0+128)+1),f
  5080  0EA9  3000               	movlw	0
  5081  0EAA  3DCD               	addwfc	((_Temp+1)^(0+128)+1),f
  5082                           
  5083                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5084  0EAB  3000               	movlw	0
  5085  0EAC  024D               	subwf	((_Temp+1)^(0+128)+1),w
  5086  0EAD  30FA               	movlw	250
  5087  0EAE  1903               	skipnz
  5088  0EAF  024C               	subwf	(_Temp^(0+128)+1),w
  5089  0EB0  1C03               	skipc
  5090  0EB1  0008               	return
  5091                           
  5092                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5093  0EB2  01CC               	clrf	(_Temp^(0+128)+1)
  5094  0EB3  01CD               	clrf	((_Temp+1)^(0+128)+1)
  5095                           
  5096                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5097  0EB4  154B               	bsf	_Temp^(0+128),2
  5098                           
  5099                           ;OverTemperature_B1.c: 70: }
  5100                           ;OverTemperature_B1.c: 71: } else {
  5101  0EB5  0008               	return
  5102  0EB6                     l10363:	
  5103                           
  5104                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5105  0EB6  3001               	movlw	1
  5106  0EB7  07CC               	addwf	(_Temp^(0+128)+1),f
  5107  0EB8  3000               	movlw	0
  5108  0EB9  3DCD               	addwfc	((_Temp+1)^(0+128)+1),f
  5109                           
  5110                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5111  0EBA  3000               	movlw	0
  5112  0EBB  024D               	subwf	((_Temp+1)^(0+128)+1),w
  5113  0EBC  3002               	movlw	2
  5114  0EBD  1903               	skipnz
  5115  0EBE  024C               	subwf	(_Temp^(0+128)+1),w
  5116  0EBF  1C03               	skipc
  5117  0EC0  0008               	return
  5118                           
  5119                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5120  0EC1  01CC               	clrf	(_Temp^(0+128)+1)
  5121  0EC2  01CD               	clrf	((_Temp+1)^(0+128)+1)
  5122                           
  5123                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5124  0EC3  3008               	movlw	8
  5125  0EC4  3ECB               	addlw	_Temp& (0+255)
  5126  0EC5  0086               	movwf	6
  5127  0EC6  0187               	clrf	7
  5128  0EC7  0016               	moviw fsr1++
  5129  0EC8  0401               	iorwf	1,w
  5130  0EC9  1903               	skipnz
  5131  0ECA  2F40               	goto	l1775
  5132  0ECB  300A               	movlw	10
  5133  0ECC  3ECB               	addlw	_Temp& (0+255)
  5134  0ECD  0086               	movwf	6
  5135  0ECE  0187               	clrf	7
  5136  0ECF  0016               	moviw fsr1++
  5137  0ED0  0401               	iorwf	1,w
  5138  0ED1  1903               	skipnz
  5139  0ED2  2F40               	goto	l1775
  5140                           
  5141                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5142  0ED3  114B               	bcf	_Temp^(0+128),2
  5143                           
  5144                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5145  0ED4  300A               	movlw	10
  5146  0ED5  3ECB               	addlw	_Temp& (0+255)
  5147  0ED6  0086               	movwf	6
  5148  0ED7  0187               	clrf	7
  5149  0ED8  3008               	movlw	8
  5150  0ED9  3ECB               	addlw	_Temp& (0+255)
  5151  0EDA  0084               	movwf	4
  5152  0EDB  0185               	clrf	5
  5153  0EDC  3F40               	moviw [0]fsr1
  5154  0EDD  0700               	addwf	0,w
  5155  0EDE  0020               	movlb	0	; select bank0
  5156  0EDF  00DE               	movwf	??_setTemp_Main
  5157  0EE0  3101               	addfsr 0,1
  5158  0EE1  3F41               	moviw [1]fsr1
  5159  0EE2  3D00               	addwfc	0,w
  5160  0EE3  00DF               	movwf	??_setTemp_Main+1
  5161  0EE4  36DF               	lsrf	??_setTemp_Main+1,f
  5162  0EE5  0CDE               	rrf	??_setTemp_Main,f
  5163  0EE6  085E               	movf	??_setTemp_Main,w
  5164  0EE7  0021               	movlb	1	; select bank1
  5165  0EE8  00D1               	movwf	(_Temp^(0+128)+6)
  5166  0EE9  0020               	movlb	0	; select bank0
  5167  0EEA  085F               	movf	??_setTemp_Main+1,w
  5168  0EEB  0021               	movlb	1	; select bank1
  5169  0EEC  00D2               	movwf	((_Temp+1)^(0+128)+6)
  5170                           
  5171                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5172  0EED  30C7               	movlw	199
  5173  0EEE  00D9               	movwf	(_Temp^(0+128)+14)
  5174  0EEF  3001               	movlw	1
  5175  0EF0  00DA               	movwf	(_Temp^(0+128)+15)
  5176                           
  5177                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5178  0EF1  309F               	movlw	159
  5179  0EF2  00DB               	movwf	(_Temp^(0+128)+16)
  5180  0EF3  3001               	movlw	1
  5181  0EF4  00DC               	movwf	(_Temp^(0+128)+17)
  5182                           
  5183                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5184  0EF5  1CCB               	btfss	_Temp^(0+128),1
  5185  0EF6  2F17               	goto	l10395
  5186                           
  5187                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5188  0EF7  085A               	movf	((_Temp+1)^(0+128)+14),w
  5189  0EF8  0252               	subwf	((_Temp+1)^(0+128)+6),w
  5190  0EF9  1D03               	skipz
  5191  0EFA  2EFD               	goto	u12505
  5192  0EFB  0859               	movf	(_Temp^(0+128)+14),w
  5193  0EFC  0251               	subwf	(_Temp^(0+128)+6),w
  5194  0EFD                     u12505:	
  5195  0EFD  1C03               	skipc
  5196  0EFE  2F15               	goto	l10393
  5197                           
  5198                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5199  0EFF  3001               	movlw	1
  5200  0F00  0020               	movlb	0	; select bank0
  5201  0F01  00DE               	movwf	??_setTemp_Main
  5202  0F02  085E               	movf	??_setTemp_Main,w
  5203  0F03  0021               	movlb	1	; select bank1
  5204  0F04  07CE               	addwf	(_Temp^(0+128)+3),f
  5205                           
  5206                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5207  0F05  3003               	movlw	3
  5208  0F06  024E               	subwf	(_Temp^(0+128)+3),w
  5209  0F07  1C03               	skipc
  5210  0F08  2F2D               	goto	l10407
  5211                           
  5212                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5213  0F09  01CE               	clrf	(_Temp^(0+128)+3)
  5214                           
  5215                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5216  0F0A  10CB               	bcf	_Temp^(0+128),1
  5217                           
  5218                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5219  0F0B  3064               	movlw	100
  5220  0F0C  0020               	movlb	0	; select bank0
  5221  0F0D  00A4               	movwf	setBuz@time
  5222  0F0E  3000               	movlw	0
  5223  0F0F  00A5               	movwf	setBuz@time+1
  5224  0F10  3002               	movlw	2
  5225  0F11  3195  25E6  318E   	fcall	_setBuz
  5226                           
  5227                           ;OverTemperature_B1.c: 103: }
  5228                           ;OverTemperature_B1.c: 104: } else {
  5229  0F14  2F2D               	goto	l10407
  5230  0F15                     l10393:	
  5231                           
  5232                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5233  0F15  0021               	movlb	1	; select bank1
  5234  0F16  2F2C               	goto	l10405
  5235  0F17                     l10395:	
  5236                           ;OverTemperature_B1.c: 106: }
  5237                           ;OverTemperature_B1.c: 107: } else {
  5238                           
  5239                           
  5240                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5241  0F17  0852               	movf	((_Temp+1)^(0+128)+6),w
  5242  0F18  025C               	subwf	((_Temp+1)^(0+128)+16),w
  5243  0F19  1D03               	skipz
  5244  0F1A  2F1D               	goto	u12525
  5245  0F1B  0851               	movf	(_Temp^(0+128)+6),w
  5246  0F1C  025B               	subwf	(_Temp^(0+128)+16),w
  5247  0F1D                     u12525:	
  5248  0F1D  1C03               	skipc
  5249  0F1E  2F2C               	goto	l10405
  5250                           
  5251                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5252  0F1F  3001               	movlw	1
  5253  0F20  0020               	movlb	0	; select bank0
  5254  0F21  00DE               	movwf	??_setTemp_Main
  5255  0F22  085E               	movf	??_setTemp_Main,w
  5256  0F23  0021               	movlb	1	; select bank1
  5257  0F24  07CE               	addwf	(_Temp^(0+128)+3),f
  5258                           
  5259                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5260  0F25  3003               	movlw	3
  5261  0F26  024E               	subwf	(_Temp^(0+128)+3),w
  5262  0F27  1C03               	skipc
  5263  0F28  2F2D               	goto	l10407
  5264                           
  5265                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5266  0F29  01CE               	clrf	(_Temp^(0+128)+3)
  5267                           
  5268                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5269  0F2A  14CB               	bsf	_Temp^(0+128),1
  5270                           
  5271                           ;OverTemperature_B1.c: 113: }
  5272                           ;OverTemperature_B1.c: 114: } else {
  5273  0F2B  2F2D               	goto	l10407
  5274  0F2C                     l10405:	
  5275                           
  5276                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5277  0F2C  01CE               	clrf	(_Temp^(0+128)+3)
  5278  0F2D                     l10407:	
  5279                           
  5280                           ;OverTemperature_B1.c: 116: }
  5281                           ;OverTemperature_B1.c: 117: }
  5282                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5283  0F2D  0021               	movlb	1	; select bank1
  5284  0F2E  0852               	movf	((_Temp+1)^(0+128)+6),w
  5285  0F2F  0020               	movlb	0	; select bank0
  5286  0F30  00DE               	movwf	??_setTemp_Main
  5287  0F31  085E               	movf	??_setTemp_Main,w
  5288  0F32  00DA               	movwf	setProductData@value
  5289  0F33  3018               	movlw	24
  5290  0F34  319B  23EB  318E   	fcall	_setProductData
  5291                           
  5292                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5293  0F37  0021               	movlb	1	; select bank1
  5294  0F38  0851               	movf	(_Temp^(0+128)+6),w
  5295  0F39  0020               	movlb	0	; select bank0
  5296  0F3A  00DE               	movwf	??_setTemp_Main
  5297  0F3B  085E               	movf	??_setTemp_Main,w
  5298  0F3C  00DA               	movwf	setProductData@value
  5299  0F3D  3019               	movlw	25
  5300  0F3E  319B  23EB         	fcall	_setProductData
  5301  0F40                     l1775:	
  5302                           
  5303                           ;OverTemperature_B1.c: 135: }
  5304                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5305  0F40  0021               	movlb	1	; select bank1
  5306  0F41  01D3               	clrf	(_Temp^(0+128)+8)
  5307  0F42  01D4               	clrf	((_Temp+1)^(0+128)+8)
  5308                           
  5309                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5310  0F43  01D5               	clrf	(_Temp^(0+128)+10)
  5311  0F44  01D6               	clrf	((_Temp+1)^(0+128)+10)
  5312                           
  5313                           ;OverTemperature_B1.c: 138: }
  5314                           ;OverTemperature_B1.c: 139: }
  5315                           ;OverTemperature_B1.c: 141: } else {
  5316  0F45  0008               	return
  5317  0F46                     l1770:	
  5318                           
  5319                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5320  0F46  0022               	movlb	2	; select bank2
  5321  0F47  1C20               	btfss	_myMain^(0+256),0
  5322  0F48  0008               	return
  5323                           
  5324                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5325  0F49  0021               	movlb	1	; select bank1
  5326  0F4A  144B               	bsf	_Temp^(0+128),0
  5327  0F4B  0008               	return
  5328  0F4C                     __end_of_setTemp_Main:	
  5329                           
  5330                           	psect	text10
  5331  1AD6                     __ptext10:	
  5332 ;; *************** function _Temp_Initialization *****************
  5333 ;; Defined at:
  5334 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;		None
  5339 ;; Return value:  Size  Location     Type
  5340 ;;		None               void
  5341 ;; Registers used:
  5342 ;;		status,2, status,0, pclath, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;Total ram usage:        0 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    4
  5355 ;; This function calls:
  5356 ;;		_setTemp_Initialization
  5357 ;; This function is called by:
  5358 ;;		_main
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _Temp_Initialization
  5364  1AD6                     _Temp_Initialization:	
  5365                           
  5366                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5370  1AD6  319A  22C9         	fcall	_setTemp_Initialization
  5371  1AD8  0008               	return
  5372  1AD9                     __end_of_Temp_Initialization:	
  5373                           
  5374                           	psect	text11
  5375  1AC9                     __ptext11:	
  5376 ;; *************** function _setTemp_Initialization *****************
  5377 ;; Defined at:
  5378 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;		None               void
  5385 ;; Registers used:
  5386 ;;		None
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;Total ram usage:        0 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    3
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_Temp_Initialization
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _setTemp_Initialization
  5408  1AC9                     _setTemp_Initialization:	
  5409                           
  5410                           ;incstack = 0
  5411                           ; Regs used in _setTemp_Initialization: []
  5412  1AC9  0008               	return
  5413  1ACA                     __end_of_setTemp_Initialization:	
  5414                           
  5415                           	psect	text12
  5416  1B7C                     __ptext12:	
  5417 ;; *************** function _Switch_Main *****************
  5418 ;; Defined at:
  5419 ;;		line 72 in file "../src/Switch_B1.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;		None               void
  5426 ;; Registers used:
  5427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;Total ram usage:        0 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    7
  5440 ;; This function calls:
  5441 ;;		_TouchPower
  5442 ;;		_setSw_Main
  5443 ;; This function is called by:
  5444 ;;		_main
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _Switch_Main
  5450  1B7C                     _Switch_Main:	
  5451                           
  5452                           ;Switch_B1.c: 75: setSw_Main(1);
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5456  1B7C  3001               	movlw	1
  5457  1B7D  3181  21ED  319B   	fcall	_setSw_Main
  5458                           
  5459                           ;Switch_B1.c: 79: setSw_Main(2);
  5460  1B80  3002               	movlw	2
  5461  1B81  3181  21ED  319B   	fcall	_setSw_Main
  5462                           
  5463                           ;Switch_B1.c: 87: TouchPower();
  5464  1B84  319D  25D0         	fcall	_TouchPower
  5465  1B86  0008               	return
  5466  1B87                     __end_of_Switch_Main:	
  5467                           
  5468                           	psect	text13
  5469  01ED                     __ptext13:	
  5470 ;; *************** function _setSw_Main *****************
  5471 ;; Defined at:
  5472 ;;		line 121 in file "../src/Switch_B1.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  sw              1    wreg     unsigned char 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  sw              1   73[BANK0 ] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;		None               void
  5479 ;; Registers used:
  5480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;Total ram usage:        3 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    6
  5493 ;; This function calls:
  5494 ;;		_SwPointSelect
  5495 ;;		_getMain_All_Error_Status
  5496 ;;		_getSw_KeyStatus
  5497 ;;		_setBuz
  5498 ;;		_setDimmerLights_DimmingOn
  5499 ;;		_setDimmerLights_SwOff
  5500 ;;		_setDimmerLights_SwOn
  5501 ;;		_setRF_Learn
  5502 ;; This function is called by:
  5503 ;;		_Switch_Main
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _setSw_Main
  5509  01ED                     _setSw_Main:	
  5510                           
  5511                           ;incstack = 0
  5512                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5513                           ;setSw_Main@sw stored from wreg
  5514  01ED  0020               	movlb	0	; select bank0
  5515  01EE  00E9               	movwf	setSw_Main@sw
  5516                           
  5517                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5518  01EF  0869               	movf	setSw_Main@sw,w
  5519  01F0  3188  2000  3181   	fcall	_SwPointSelect
  5520                           
  5521                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5522  01F3  0020               	movlb	0	; select bank0
  5523  01F4  086E               	movf	_Sw,w
  5524  01F5  0086               	movwf	6
  5525  01F6  3001               	movlw	1	; select bank2/3
  5526  01F7  0087               	movwf	7
  5527  01F8  1C01               	btfss	1,0
  5528  01F9  2B54               	goto	l2542
  5529                           
  5530                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5531  01FA  3000               	movlw	0
  5532  01FB  3191  21CF  3181   	fcall	_getMain_All_Error_Status
  5533  01FE  3800               	iorlw	0
  5534  01FF  1D03               	skipz
  5535  0200  2A1C               	goto	l10517
  5536                           
  5537                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5538  0201  0020               	movlb	0	; select bank0
  5539  0202  0A6E               	incf	_Sw,w
  5540  0203  0086               	movwf	6
  5541  0204  3001               	movlw	1	; select bank2/3
  5542  0205  0087               	movwf	7
  5543  0206  1081               	bcf	1,1
  5544                           
  5545                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5546  0207  0869               	movf	setSw_Main@sw,w
  5547  0208  319F  275B  3181   	fcall	_getSw_KeyStatus
  5548  020B  3A01               	xorlw	1
  5549  020C  3000               	movlw	0
  5550  020D  1903               	skipnz
  5551  020E  3001               	movlw	1
  5552  020F  0020               	movlb	0	; select bank0
  5553  0210  00E7               	movwf	??_setSw_Main
  5554  0211  086E               	movf	_Sw,w
  5555  0212  0086               	movwf	6
  5556  0213  3001               	movlw	1	; select bank2/3
  5557  0214  0087               	movwf	7
  5558  0215  0DE7               	rlf	??_setSw_Main,f
  5559  0216  0801               	movf	1,w
  5560  0217  0667               	xorwf	??_setSw_Main,w
  5561  0218  39FD               	andlw	-3
  5562  0219  0667               	xorwf	??_setSw_Main,w
  5563  021A  0081               	movwf	1
  5564                           
  5565                           ;Switch_B1.c: 128: } else {
  5566  021B  2A32               	goto	l2544
  5567  021C                     l10517:	
  5568                           
  5569                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5570  021C  0020               	movlb	0	; select bank0
  5571  021D  0A6E               	incf	_Sw,w
  5572  021E  0086               	movwf	6
  5573  021F  3001               	movlw	1	; select bank2/3
  5574  0220  0087               	movwf	7
  5575  0221  1881               	btfsc	1,1
  5576  0222  2A32               	goto	l2544
  5577                           
  5578                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5579  0223  0A6E               	incf	_Sw,w
  5580  0224  0086               	movwf	6
  5581  0225  3001               	movlw	1	; select bank2/3
  5582  0226  0087               	movwf	7
  5583  0227  1481               	bsf	1,1
  5584                           
  5585                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5586  0228  086E               	movf	_Sw,w
  5587  0229  0086               	movwf	6
  5588  022A  3001               	movlw	1	; select bank2/3
  5589  022B  0087               	movwf	7
  5590  022C  1081               	bcf	1,1
  5591                           
  5592                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5593  022D  086E               	movf	_Sw,w
  5594  022E  0086               	movwf	6
  5595  022F  3001               	movlw	1	; select bank2/3
  5596  0230  0087               	movwf	7
  5597  0231  1501               	bsf	1,2
  5598  0232                     l2544:	
  5599                           
  5600                           ;Switch_B1.c: 134: }
  5601                           ;Switch_B1.c: 135: }
  5602                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5603  0232  086E               	movf	_Sw,w
  5604  0233  0086               	movwf	6
  5605  0234  3001               	movlw	1	; select bank2/3
  5606  0235  0087               	movwf	7
  5607  0236  1C81               	btfss	1,1
  5608  0237  2B01               	goto	l10567
  5609                           
  5610                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5611  0238  086E               	movf	_Sw,w
  5612  0239  0086               	movwf	6
  5613  023A  3001               	movlw	1	; select bank2/3
  5614  023B  0087               	movwf	7
  5615  023C  1901               	btfsc	1,2
  5616  023D  2A5F               	goto	l10533
  5617                           
  5618                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5619  023E  3001               	movlw	1
  5620  023F  00E7               	movwf	??_setSw_Main
  5621  0240  086E               	movf	_Sw,w
  5622  0241  3E02               	addlw	2
  5623  0242  0086               	movwf	6
  5624  0243  3001               	movlw	1	; select bank2/3
  5625  0244  0087               	movwf	7
  5626  0245  0867               	movf	??_setSw_Main,w
  5627  0246  0781               	addwf	1,f
  5628                           
  5629                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5630  0247  086E               	movf	_Sw,w
  5631  0248  3E02               	addlw	2
  5632  0249  0086               	movwf	6
  5633  024A  3001               	movlw	1	; select bank2/3
  5634  024B  0087               	movwf	7
  5635  024C  3003               	movlw	3
  5636  024D  0201               	subwf	1,w
  5637  024E  1C03               	skipc
  5638  024F  0008               	return
  5639                           
  5640                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5641  0250  086E               	movf	_Sw,w
  5642  0251  3E02               	addlw	2
  5643  0252  0086               	movwf	6
  5644  0253  3001               	movlw	1	; select bank2/3
  5645  0254  0087               	movwf	7
  5646  0255  0181               	clrf	1
  5647                           
  5648                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5649  0256  086E               	movf	_Sw,w
  5650  0257  0086               	movwf	6
  5651  0258  3001               	movlw	1	; select bank2/3
  5652  0259  0087               	movwf	7
  5653  025A  1501               	bsf	1,2
  5654                           
  5655                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5656  025B  0869               	movf	setSw_Main@sw,w
  5657  025C  3196  268D         	fcall	_setDimmerLights_SwOn
  5658                           
  5659                           ;Switch_B1.c: 148: }
  5660                           ;Switch_B1.c: 149: } else {
  5661  025E  0008               	return
  5662  025F                     l10533:	
  5663                           
  5664                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5665  025F  0020               	movlb	0	; select bank0
  5666  0260  086E               	movf	_Sw,w
  5667  0261  0086               	movwf	6
  5668  0262  3001               	movlw	1	; select bank2/3
  5669  0263  0087               	movwf	7
  5670  0264  1981               	btfsc	1,3
  5671  0265  2A91               	goto	l10543
  5672                           
  5673                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5674  0266  086E               	movf	_Sw,w
  5675  0267  3E03               	addlw	3
  5676  0268  0086               	movwf	6
  5677  0269  3001               	movlw	1	; select bank2/3
  5678  026A  0087               	movwf	7
  5679  026B  3001               	movlw	1
  5680  026C  0781               	addwf	1,f
  5681  026D  3141               	addfsr 1,1
  5682  026E  1803               	skipnc
  5683  026F  0A81               	incf	1,f
  5684                           
  5685                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5686  0270  086E               	movf	_Sw,w
  5687  0271  3E03               	addlw	3
  5688  0272  0086               	movwf	6
  5689  0273  3001               	movlw	1	; select bank2/3
  5690  0274  0087               	movwf	7
  5691  0275  3F40               	moviw [0]fsr1
  5692  0276  00E7               	movwf	??_setSw_Main
  5693  0277  3F41               	moviw [1]fsr1
  5694  0278  00E8               	movwf	??_setSw_Main+1
  5695  0279  3000               	movlw	0
  5696  027A  0268               	subwf	??_setSw_Main+1,w
  5697  027B  304B               	movlw	75
  5698  027C  1903               	skipnz
  5699  027D  0267               	subwf	??_setSw_Main,w
  5700  027E  1C03               	skipc
  5701  027F  0008               	return
  5702                           
  5703                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5704  0280  086E               	movf	_Sw,w
  5705  0281  3E03               	addlw	3
  5706  0282  0086               	movwf	6
  5707  0283  3001               	movlw	1	; select bank2/3
  5708  0284  0087               	movwf	7
  5709  0285  3000               	movlw	0
  5710  0286  3FC0               	movwi [0]fsr1
  5711  0287  3FC1               	movwi [1]fsr1
  5712                           
  5713                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5714  0288  086E               	movf	_Sw,w
  5715  0289  0086               	movwf	6
  5716  028A  3001               	movlw	1	; select bank2/3
  5717  028B  0087               	movwf	7
  5718  028C  1581               	bsf	1,3
  5719                           
  5720                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5721  028D  0869               	movf	setSw_Main@sw,w
  5722  028E  3191  2102         	fcall	_setDimmerLights_DimmingOn
  5723                           
  5724                           ;Switch_B1.c: 160: }
  5725                           ;Switch_B1.c: 161: } else {
  5726  0290  0008               	return
  5727  0291                     l10543:	
  5728                           
  5729                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5730  0291  0020               	movlb	0	; select bank0
  5731  0292  086E               	movf	_Sw,w
  5732  0293  0086               	movwf	6
  5733  0294  3001               	movlw	1	; select bank2/3
  5734  0295  0087               	movwf	7
  5735  0296  1A01               	btfsc	1,4
  5736  0297  2ACF               	goto	l10557
  5737                           
  5738                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5739  0298  086E               	movf	_Sw,w
  5740  0299  3E05               	addlw	5
  5741  029A  0086               	movwf	6
  5742  029B  3001               	movlw	1	; select bank2/3
  5743  029C  0087               	movwf	7
  5744  029D  3001               	movlw	1
  5745  029E  0781               	addwf	1,f
  5746  029F  3141               	addfsr 1,1
  5747  02A0  1803               	skipnc
  5748  02A1  0A81               	incf	1,f
  5749                           
  5750                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5751  02A2  086E               	movf	_Sw,w
  5752  02A3  3E05               	addlw	5
  5753  02A4  0086               	movwf	6
  5754  02A5  3001               	movlw	1	; select bank2/3
  5755  02A6  0087               	movwf	7
  5756  02A7  3F40               	moviw [0]fsr1
  5757  02A8  00E7               	movwf	??_setSw_Main
  5758  02A9  3F41               	moviw [1]fsr1
  5759  02AA  00E8               	movwf	??_setSw_Main+1
  5760  02AB  3000               	movlw	0
  5761  02AC  0268               	subwf	??_setSw_Main+1,w
  5762  02AD  304B               	movlw	75
  5763  02AE  1903               	skipnz
  5764  02AF  0267               	subwf	??_setSw_Main,w
  5765  02B0  1C03               	skipc
  5766  02B1  0008               	return
  5767                           
  5768                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5769  02B2  086E               	movf	_Sw,w
  5770  02B3  3E05               	addlw	5
  5771  02B4  0086               	movwf	6
  5772  02B5  3001               	movlw	1	; select bank2/3
  5773  02B6  0087               	movwf	7
  5774  02B7  3000               	movlw	0
  5775  02B8  3FC0               	movwi [0]fsr1
  5776  02B9  3FC1               	movwi [1]fsr1
  5777                           
  5778                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5779  02BA  086E               	movf	_Sw,w
  5780  02BB  0086               	movwf	6
  5781  02BC  3001               	movlw	1	; select bank2/3
  5782  02BD  0087               	movwf	7
  5783  02BE  1601               	bsf	1,4
  5784                           
  5785                           ;Switch_B1.c: 169: setRF_Learn(1);
  5786  02BF  3001               	movlw	1
  5787  02C0  319C  24F5  3181   	fcall	_setRF_Learn
  5788                           
  5789                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5790  02C3  0022               	movlb	2	; select bank2
  5791  02C4  1EA0               	btfss	_myMain^(0+256),5
  5792  02C5  0008               	return
  5793                           
  5794                           ;Switch_B1.c: 171: setBuz(2, 100);
  5795  02C6  3064               	movlw	100
  5796  02C7  0020               	movlb	0	; select bank0
  5797  02C8  00A4               	movwf	setBuz@time
  5798  02C9  3000               	movlw	0
  5799  02CA  00A5               	movwf	setBuz@time+1
  5800  02CB  3002               	movlw	2
  5801  02CC  3195  25E6         	fcall	_setBuz
  5802                           
  5803                           ;Switch_B1.c: 172: }
  5804                           ;Switch_B1.c: 176: }
  5805                           ;Switch_B1.c: 177: } else {
  5806  02CE  0008               	return
  5807  02CF                     l10557:	
  5808                           
  5809                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5810  02CF  0020               	movlb	0	; select bank0
  5811  02D0  086E               	movf	_Sw,w
  5812  02D1  0086               	movwf	6
  5813  02D2  3001               	movlw	1	; select bank2/3
  5814  02D3  0087               	movwf	7
  5815  02D4  1A81               	btfsc	1,5
  5816  02D5  0008               	return
  5817                           
  5818                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5819  02D6  086E               	movf	_Sw,w
  5820  02D7  3E07               	addlw	7
  5821  02D8  0086               	movwf	6
  5822  02D9  3001               	movlw	1	; select bank2/3
  5823  02DA  0087               	movwf	7
  5824  02DB  3001               	movlw	1
  5825  02DC  0781               	addwf	1,f
  5826  02DD  3141               	addfsr 1,1
  5827  02DE  1803               	skipnc
  5828  02DF  0A81               	incf	1,f
  5829                           
  5830                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5831  02E0  086E               	movf	_Sw,w
  5832  02E1  3E07               	addlw	7
  5833  02E2  0086               	movwf	6
  5834  02E3  3001               	movlw	1	; select bank2/3
  5835  02E4  0087               	movwf	7
  5836  02E5  3F40               	moviw [0]fsr1
  5837  02E6  00E7               	movwf	??_setSw_Main
  5838  02E7  3F41               	moviw [1]fsr1
  5839  02E8  00E8               	movwf	??_setSw_Main+1
  5840  02E9  3000               	movlw	0
  5841  02EA  0268               	subwf	??_setSw_Main+1,w
  5842  02EB  3096               	movlw	150
  5843  02EC  1903               	skipnz
  5844  02ED  0267               	subwf	??_setSw_Main,w
  5845  02EE  1C03               	skipc
  5846  02EF  0008               	return
  5847                           
  5848                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5849  02F0  086E               	movf	_Sw,w
  5850  02F1  3E07               	addlw	7
  5851  02F2  0086               	movwf	6
  5852  02F3  3001               	movlw	1	; select bank2/3
  5853  02F4  0087               	movwf	7
  5854  02F5  3000               	movlw	0
  5855  02F6  3FC0               	movwi [0]fsr1
  5856  02F7  3FC1               	movwi [1]fsr1
  5857                           
  5858                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5859  02F8  086E               	movf	_Sw,w
  5860  02F9  0086               	movwf	6
  5861  02FA  3001               	movlw	1	; select bank2/3
  5862  02FB  0087               	movwf	7
  5863  02FC  1681               	bsf	1,5
  5864                           
  5865                           ;Switch_B1.c: 185: setRF_Learn(0);
  5866  02FD  3000               	movlw	0
  5867  02FE  319C  24F5         	fcall	_setRF_Learn
  5868                           
  5869                           ;Switch_B1.c: 188: }
  5870                           ;Switch_B1.c: 189: }
  5871                           ;Switch_B1.c: 190: }
  5872                           ;Switch_B1.c: 191: }
  5873                           ;Switch_B1.c: 192: }
  5874                           ;Switch_B1.c: 193: } else {
  5875  0300  0008               	return
  5876  0301                     l10567:	
  5877                           
  5878                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5879  0301  0020               	movlb	0	; select bank0
  5880  0302  086E               	movf	_Sw,w
  5881  0303  0086               	movwf	6
  5882  0304  3001               	movlw	1	; select bank2/3
  5883  0305  0087               	movwf	7
  5884  0306  1D01               	btfss	1,2
  5885  0307  0008               	return
  5886                           
  5887                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5888  0308  3001               	movlw	1
  5889  0309  00E7               	movwf	??_setSw_Main
  5890  030A  086E               	movf	_Sw,w
  5891  030B  3E02               	addlw	2
  5892  030C  0086               	movwf	6
  5893  030D  3001               	movlw	1	; select bank2/3
  5894  030E  0087               	movwf	7
  5895  030F  0867               	movf	??_setSw_Main,w
  5896  0310  0781               	addwf	1,f
  5897                           
  5898                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5899  0311  086E               	movf	_Sw,w
  5900  0312  3E02               	addlw	2
  5901  0313  0086               	movwf	6
  5902  0314  3001               	movlw	1	; select bank2/3
  5903  0315  0087               	movwf	7
  5904  0316  3003               	movlw	3
  5905  0317  0201               	subwf	1,w
  5906  0318  1C03               	skipc
  5907  0319  0008               	return
  5908                           
  5909                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5910  031A  086E               	movf	_Sw,w
  5911  031B  3E02               	addlw	2
  5912  031C  0086               	movwf	6
  5913  031D  3001               	movlw	1	; select bank2/3
  5914  031E  0087               	movwf	7
  5915  031F  0181               	clrf	1
  5916                           
  5917                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5918  0320  086E               	movf	_Sw,w
  5919  0321  0086               	movwf	6
  5920  0322  3001               	movlw	1	; select bank2/3
  5921  0323  0087               	movwf	7
  5922  0324  1101               	bcf	1,2
  5923                           
  5924                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5925  0325  086E               	movf	_Sw,w
  5926  0326  3E03               	addlw	3
  5927  0327  0086               	movwf	6
  5928  0328  3001               	movlw	1	; select bank2/3
  5929  0329  0087               	movwf	7
  5930  032A  3000               	movlw	0
  5931  032B  3FC0               	movwi [0]fsr1
  5932  032C  3FC1               	movwi [1]fsr1
  5933                           
  5934                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5935  032D  086E               	movf	_Sw,w
  5936  032E  0086               	movwf	6
  5937  032F  3001               	movlw	1	; select bank2/3
  5938  0330  0087               	movwf	7
  5939  0331  1181               	bcf	1,3
  5940                           
  5941                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5942  0332  086E               	movf	_Sw,w
  5943  0333  3E05               	addlw	5
  5944  0334  0086               	movwf	6
  5945  0335  3001               	movlw	1	; select bank2/3
  5946  0336  0087               	movwf	7
  5947  0337  3000               	movlw	0
  5948  0338  3FC0               	movwi [0]fsr1
  5949  0339  3FC1               	movwi [1]fsr1
  5950                           
  5951                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5952  033A  086E               	movf	_Sw,w
  5953  033B  0086               	movwf	6
  5954  033C  3001               	movlw	1	; select bank2/3
  5955  033D  0087               	movwf	7
  5956  033E  1201               	bcf	1,4
  5957                           
  5958                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5959  033F  086E               	movf	_Sw,w
  5960  0340  3E07               	addlw	7
  5961  0341  0086               	movwf	6
  5962  0342  3001               	movlw	1	; select bank2/3
  5963  0343  0087               	movwf	7
  5964  0344  3000               	movlw	0
  5965  0345  3FC0               	movwi [0]fsr1
  5966  0346  3FC1               	movwi [1]fsr1
  5967                           
  5968                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5969  0347  086E               	movf	_Sw,w
  5970  0348  0086               	movwf	6
  5971  0349  3001               	movlw	1	; select bank2/3
  5972  034A  0087               	movwf	7
  5973  034B  1281               	bcf	1,5
  5974                           
  5975                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5976  034C  0869               	movf	setSw_Main@sw,w
  5977  034D  3194  240E  3181   	fcall	_setDimmerLights_SwOff
  5978                           
  5979                           ;Switch_B1.c: 210: setRF_Learn(0);
  5980  0350  3000               	movlw	0
  5981  0351  319C  24F5         	fcall	_setRF_Learn
  5982                           
  5983                           ;Switch_B1.c: 212: }
  5984                           ;Switch_B1.c: 213: }
  5985                           ;Switch_B1.c: 214: }
  5986                           ;Switch_B1.c: 215: } else {
  5987  0353  0008               	return
  5988  0354                     l2542:	
  5989                           
  5990                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5991  0354  0022               	movlb	2	; select bank2
  5992  0355  1C20               	btfss	_myMain^(0+256),0
  5993  0356  0008               	return
  5994                           
  5995                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5996  0357  0020               	movlb	0	; select bank0
  5997  0358  086E               	movf	_Sw,w
  5998  0359  0086               	movwf	6
  5999  035A  3001               	movlw	1	; select bank2/3
  6000  035B  0087               	movwf	7
  6001  035C  1401               	bsf	1,0
  6002  035D  0008               	return
  6003  035E                     __end_of_setSw_Main:	
  6004                           
  6005                           	psect	text14
  6006  1CF5                     __ptext14:	
  6007 ;; *************** function _setRF_Learn *****************
  6008 ;; Defined at:
  6009 ;;		line 33 in file "../src/RF_Control_B1.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  command         1    wreg     unsigned char 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  command         1    3[COMMON] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;		None               void
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;Total ram usage:        2 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    3
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_setSw_Main
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           
  6038                           ;psect for function _setRF_Learn
  6039  1CF5                     _setRF_Learn:	
  6040                           
  6041                           ;incstack = 0
  6042                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6043                           ;setRF_Learn@command stored from wreg
  6044  1CF5  00F3               	movwf	setRF_Learn@command
  6045                           
  6046                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6047  1CF6  0873               	movf	setRF_Learn@command,w
  6048  1CF7  3A01               	xorlw	1
  6049  1CF8  3000               	movlw	0
  6050  1CF9  1903               	skipnz
  6051  1CFA  3001               	movlw	1
  6052  1CFB  00F2               	movwf	??_setRF_Learn
  6053  1CFC  0EF2               	swapf	??_setRF_Learn,f
  6054  1CFD  0DF2               	rlf	??_setRF_Learn,f
  6055  1CFE  0DF2               	rlf	??_setRF_Learn,f
  6056  1CFF  0021               	movlb	1	; select bank1
  6057  1D00  0820               	movf	_RF1^(0+128),w
  6058  1D01  0672               	xorwf	??_setRF_Learn,w
  6059  1D02  39BF               	andlw	-65
  6060  1D03  0672               	xorwf	??_setRF_Learn,w
  6061  1D04  00A0               	movwf	_RF1^(0+128)
  6062  1D05  0008               	return
  6063  1D06                     __end_of_setRF_Learn:	
  6064                           
  6065                           	psect	text15
  6066  1102                     __ptext15:	
  6067 ;; *************** function _setDimmerLights_DimmingOn *****************
  6068 ;; Defined at:
  6069 ;;		line 716 in file "../src/Dimmer_B1.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;  sw              1    wreg     unsigned char 
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;  sw              1    4[COMMON] unsigned char 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;		None               void
  6076 ;; Registers used:
  6077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;Total ram usage:        1 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    4
  6090 ;; This function calls:
  6091 ;;		_DimmerLights_SelectPointer
  6092 ;; This function is called by:
  6093 ;;		_setSw_Main
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           
  6098                           ;psect for function _setDimmerLights_DimmingOn
  6099  1102                     _setDimmerLights_DimmingOn:	
  6100                           
  6101                           ;incstack = 0
  6102                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6103                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6104  1102  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6105                           
  6106                           ;Dimmer_B1.c: 722: DimmerLights_SelectPointer(sw);
  6107  1103  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6108  1104  319D  2567  3191   	fcall	_DimmerLights_SelectPointer
  6109                           
  6110                           ;Dimmer_B1.c: 723: if (DimmerLights->Trigger == 0) {
  6111  1107  0020               	movlb	0	; select bank0
  6112  1108  086D               	movf	_DimmerLights,w
  6113  1109  0086               	movwf	6
  6114  110A  3001               	movlw	1	; select bank2/3
  6115  110B  0087               	movwf	7
  6116  110C  1881               	btfsc	1,1
  6117  110D  0008               	return
  6118                           
  6119                           ;Dimmer_B1.c: 724: if (DimmerLights->SwFlag == 1) {
  6120  110E  086D               	movf	_DimmerLights,w
  6121  110F  0086               	movwf	6
  6122  1110  3001               	movlw	1	; select bank2/3
  6123  1111  0087               	movwf	7
  6124  1112  1C01               	btfss	1,0
  6125  1113  0008               	return
  6126                           
  6127                           ;Dimmer_B1.c: 725: DimmerLights->Status = 1;
  6128  1114  0A6D               	incf	_DimmerLights,w
  6129  1115  0086               	movwf	6
  6130  1116  3001               	movlw	1	; select bank2/3
  6131  1117  0087               	movwf	7
  6132  1118  1401               	bsf	1,0
  6133                           
  6134                           ;Dimmer_B1.c: 727: DimmerLights->DimmingSwFlag = 1;
  6135  1119  086D               	movf	_DimmerLights,w
  6136  111A  0086               	movwf	6
  6137  111B  3001               	movlw	1	; select bank2/3
  6138  111C  0087               	movwf	7
  6139  111D  1581               	bsf	1,3
  6140                           
  6141                           ;Dimmer_B1.c: 728: DimmerLights->DimmingTrigger = 1;
  6142  111E  086D               	movf	_DimmerLights,w
  6143  111F  0086               	movwf	6
  6144  1120  3001               	movlw	1	; select bank2/3
  6145  1121  0087               	movwf	7
  6146  1122  1601               	bsf	1,4
  6147                           
  6148                           ;Dimmer_B1.c: 729: DimmerLights->DimmingSwitch = 1;
  6149  1123  086D               	movf	_DimmerLights,w
  6150  1124  0086               	movwf	6
  6151  1125  3001               	movlw	1	; select bank2/3
  6152  1126  0087               	movwf	7
  6153  1127  1681               	bsf	1,5
  6154  1128  0008               	return
  6155  1129                     __end_of_setDimmerLights_DimmingOn:	
  6156                           
  6157                           	psect	text16
  6158  1F5B                     __ptext16:	
  6159 ;; *************** function _getSw_KeyStatus *****************
  6160 ;; Defined at:
  6161 ;;		line 223 in file "../src/Switch_B1.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;  sw              1    wreg     unsigned char 
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;  sw              1    6[COMMON] unsigned char 
  6166 ;;  status          1    5[COMMON] unsigned char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      unsigned char 
  6169 ;; Registers used:
  6170 ;;		wreg, status,2
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;Total ram usage:        5 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    3
  6183 ;; This function calls:
  6184 ;;		Nothing
  6185 ;; This function is called by:
  6186 ;;		_setSw_Main
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           
  6191                           ;psect for function _getSw_KeyStatus
  6192  1F5B                     _getSw_KeyStatus:	
  6193                           
  6194                           ;incstack = 0
  6195                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6196                           ;getSw_KeyStatus@sw stored from wreg
  6197  1F5B  00F6               	movwf	getSw_KeyStatus@sw
  6198                           
  6199                           ;Switch_B1.c: 224: char status = 0;
  6200  1F5C  01F5               	clrf	getSw_KeyStatus@status
  6201                           
  6202                           ;Switch_B1.c: 236: if (sw == 1) {
  6203  1F5D  0876               	movf	getSw_KeyStatus@sw,w
  6204  1F5E  3A01               	xorlw	1
  6205  1F5F  1D03               	skipz
  6206  1F60  2F6A               	goto	l7603
  6207                           
  6208                           ;Switch_B1.c: 237: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6209  1F61  01F3               	clrf	_getSw_KeyStatus$5635
  6210  1F62  0AF3               	incf	_getSw_KeyStatus$5635,f
  6211  1F63  0020               	movlb	0	; select bank0
  6212  1F64  1F0C               	btfss	12,6	;volatile
  6213  1F65  1A0C               	btfsc	12,4	;volatile
  6214  1F66  2F68               	goto	l7601
  6215  1F67  01F3               	clrf	_getSw_KeyStatus$5635
  6216  1F68                     l7601:	
  6217  1F68  0873               	movf	_getSw_KeyStatus$5635,w
  6218  1F69  2F76               	goto	L2
  6219  1F6A                     l7603:	
  6220                           ;Switch_B1.c: 238: } else if (sw == 2) {
  6221                           
  6222  1F6A  0876               	movf	getSw_KeyStatus@sw,w
  6223  1F6B  3A02               	xorlw	2
  6224  1F6C  1D03               	skipz
  6225  1F6D  2F79               	goto	l7613
  6226                           
  6227                           ;Switch_B1.c: 239: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6228  1F6E  01F4               	clrf	_getSw_KeyStatus$5636
  6229  1F6F  0AF4               	incf	_getSw_KeyStatus$5636,f
  6230  1F70  0020               	movlb	0	; select bank0
  6231  1F71  1C0C               	btfss	12,0	;volatile
  6232  1F72  188D               	btfsc	13,1	;volatile
  6233  1F73  2F75               	goto	l7611
  6234  1F74  01F4               	clrf	_getSw_KeyStatus$5636
  6235  1F75                     l7611:	
  6236  1F75  0874               	movf	_getSw_KeyStatus$5636,w
  6237  1F76                     L2:	
  6238  1F76  00F2               	movwf	??_getSw_KeyStatus
  6239  1F77  0872               	movf	??_getSw_KeyStatus,w
  6240  1F78  00F5               	movwf	getSw_KeyStatus@status
  6241  1F79                     l7613:	
  6242                           
  6243                           ;Switch_B1.c: 240: }
  6244                           ;Switch_B1.c: 247: return status;
  6245  1F79  0875               	movf	getSw_KeyStatus@status,w
  6246  1F7A  0008               	return
  6247  1F7B                     __end_of_getSw_KeyStatus:	
  6248                           
  6249                           	psect	text17
  6250  0800                     __ptext17:	
  6251 ;; *************** function _SwPointSelect *****************
  6252 ;; Defined at:
  6253 ;;		line 25 in file "../src/Switch_B1.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  sw              1    wreg     unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  sw              1    3[COMMON] unsigned char 
  6258 ;; Return value:  Size  Location     Type
  6259 ;;		None               void
  6260 ;; Registers used:
  6261 ;;		wreg
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;Total ram usage:        2 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    3
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_setSw_Main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           
  6282                           ;psect for function _SwPointSelect
  6283  0800                     _SwPointSelect:	
  6284                           
  6285                           ;incstack = 0
  6286                           ; Regs used in _SwPointSelect: [wreg]
  6287                           ;SwPointSelect@sw stored from wreg
  6288  0800  00F3               	movwf	SwPointSelect@sw
  6289                           
  6290                           ;Switch_B1.c: 28: if (sw == 1) {
  6291  0801  0873               	movf	SwPointSelect@sw,w
  6292  0802  3A01               	xorlw	1
  6293  0803  1D03               	skipz
  6294  0804  280B               	goto	l7587
  6295                           
  6296                           ;Switch_B1.c: 29: Sw = &Sw1;
  6297  0805  30D0               	movlw	_Sw1& (0+255)
  6298  0806  00F2               	movwf	??_SwPointSelect
  6299  0807  0872               	movf	??_SwPointSelect,w
  6300  0808  0020               	movlb	0	; select bank0
  6301  0809  00EE               	movwf	_Sw
  6302                           
  6303                           ;Switch_B1.c: 30: }
  6304  080A  0008               	return
  6305  080B                     l7587:	
  6306                           
  6307                           ;Switch_B1.c: 33: else if (sw == 2) {
  6308  080B  0873               	movf	SwPointSelect@sw,w
  6309  080C  3A02               	xorlw	2
  6310  080D  1D03               	skipz
  6311  080E  0008               	return
  6312                           
  6313                           ;Switch_B1.c: 34: Sw = &Sw2;
  6314  080F  30D9               	movlw	_Sw2& (0+255)
  6315  0810  00F2               	movwf	??_SwPointSelect
  6316  0811  0872               	movf	??_SwPointSelect,w
  6317  0812  0020               	movlb	0	; select bank0
  6318  0813  00EE               	movwf	_Sw
  6319  0814  0008               	return
  6320  0815                     __end_of_SwPointSelect:	
  6321                           
  6322                           	psect	text18
  6323  1066                     __ptext18:	
  6324 ;; *************** function _Switch_Initialization *****************
  6325 ;; Defined at:
  6326 ;;		line 46 in file "../src/Switch_B1.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;		None               void
  6333 ;; Registers used:
  6334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6344 ;;Total ram usage:        0 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    6
  6347 ;; This function calls:
  6348 ;;		_TouchPower
  6349 ;;		_setSw_Initialization
  6350 ;; This function is called by:
  6351 ;;		_main
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           
  6356                           ;psect for function _Switch_Initialization
  6357  1066                     _Switch_Initialization:	
  6358                           
  6359                           ;Switch_B1.c: 47: TouchPower();
  6360                           
  6361                           ;incstack = 0
  6362                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6363  1066  319D  25D0  3190   	fcall	_TouchPower
  6364                           
  6365                           ;Switch_B1.c: 49: WPUB1 = 0;
  6366  1069  0024               	movlb	4	; select bank4
  6367  106A  108D               	bcf	13,1	;volatile
  6368                           
  6369                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6370  106B  3001               	movlw	1
  6371  106C  319B  231F  3190   	fcall	_setSw_Initialization
  6372                           
  6373                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6374  106F  3002               	movlw	2
  6375  1070  319B  231F         	fcall	_setSw_Initialization
  6376  1072  0008               	return
  6377  1073                     __end_of_Switch_Initialization:	
  6378                           
  6379                           	psect	text19
  6380  1B1F                     __ptext19:	
  6381 ;; *************** function _setSw_Initialization *****************
  6382 ;; Defined at:
  6383 ;;		line 93 in file "../src/Switch_B1.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  sw              1    wreg     unsigned char 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  sw              1    6[COMMON] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;		None               void
  6390 ;; Registers used:
  6391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;Total ram usage:        1 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    5
  6404 ;; This function calls:
  6405 ;;		_setLED
  6406 ;; This function is called by:
  6407 ;;		_Switch_Initialization
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _setSw_Initialization
  6413  1B1F                     _setSw_Initialization:	
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6417                           ;setSw_Initialization@sw stored from wreg
  6418  1B1F  00F6               	movwf	setSw_Initialization@sw
  6419                           
  6420                           ;Switch_B1.c: 94: setLED(sw, 1);
  6421  1B20  01F4               	clrf	setLED@command
  6422  1B21  0AF4               	incf	setLED@command,f
  6423  1B22  0876               	movf	setSw_Initialization@sw,w
  6424  1B23  3197  27A1         	fcall	_setLED
  6425  1B25  0008               	return
  6426  1B26                     __end_of_setSw_Initialization:	
  6427                           
  6428                           	psect	text20
  6429  1DD0                     __ptext20:	
  6430 ;; *************** function _TouchPower *****************
  6431 ;; Defined at:
  6432 ;;		line 10 in file "../src/Switch_B1.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;		None
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;		None               void
  6439 ;; Registers used:
  6440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;Total ram usage:        0 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; Hardware stack levels required when called:    4
  6453 ;; This function calls:
  6454 ;;		_Timeout_Counter
  6455 ;;		_set_TimeoutCleared
  6456 ;; This function is called by:
  6457 ;;		_Switch_Initialization
  6458 ;;		_Switch_Main
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _TouchPower
  6464  1DD0                     _TouchPower:	
  6465                           
  6466                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6470  1DD0  0022               	movlb	2	; select bank2
  6471  1DD1  1C20               	btfss	_myMain^(0+256),0
  6472  1DD2  0008               	return
  6473                           
  6474                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6475  1DD3  0020               	movlb	0	; select bank0
  6476  1DD4  1A8E               	btfsc	14,5	;volatile
  6477  1DD5  0008               	return
  6478  1DD6  2DDC               	goto	l10499
  6479  1DD7                     l2520:	
  6480                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6481                           
  6482                           
  6483                           ;Switch_B1.c: 14: RC5 = 1;
  6484  1DD7  0020               	movlb	0	; select bank0
  6485  1DD8  168E               	bsf	14,5	;volatile
  6486                           
  6487                           ;Switch_B1.c: 15: Timeout_Counter();
  6488  1DD9  319D  25E5  319D   	fcall	_Timeout_Counter
  6489  1DDC                     l10499:	
  6490  1DDC  0020               	movlb	0	; select bank0
  6491  1DDD  1A8E               	btfsc	14,5	;volatile
  6492  1DDE  2DE2               	goto	l10503
  6493  1DDF  0022               	movlb	2	; select bank2
  6494  1DE0  1D2B               	btfss	(_myMain^(0+256)+11),2
  6495  1DE1  2DD7               	goto	l2520
  6496  1DE2                     l10503:	
  6497                           
  6498                           ;Switch_B1.c: 16: }
  6499                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6500  1DE2  319A  22F2         	fcall	_set_TimeoutCleared
  6501  1DE4  0008               	return
  6502  1DE5                     __end_of_TouchPower:	
  6503                           
  6504                           	psect	text21
  6505  1AF2                     __ptext21:	
  6506 ;; *************** function _set_TimeoutCleared *****************
  6507 ;; Defined at:
  6508 ;;		line 282 in file "../src/main_B1.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;		None
  6511 ;; Auto vars:     Size  Location     Type
  6512 ;;		None
  6513 ;; Return value:  Size  Location     Type
  6514 ;;		None               void
  6515 ;; Registers used:
  6516 ;;		status,2
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;Total ram usage:        0 bytes
  6527 ;; Hardware stack levels used:    1
  6528 ;; Hardware stack levels required when called:    3
  6529 ;; This function calls:
  6530 ;;		Nothing
  6531 ;; This function is called by:
  6532 ;;		_getAD
  6533 ;;		_TouchPower
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           
  6538                           ;psect for function _set_TimeoutCleared
  6539  1AF2                     _set_TimeoutCleared:	
  6540                           
  6541                           ;main_B1.c: 283: myMain.Timeout = 0;
  6542                           
  6543                           ;incstack = 0
  6544                           ; Regs used in _set_TimeoutCleared: [status,2]
  6545  1AF2  0022               	movlb	2	; select bank2
  6546  1AF3  112B               	bcf	(_myMain^(0+256)+11),2
  6547                           
  6548                           ;main_B1.c: 284: myMain.Timeout_Counter = 0;
  6549  1AF4  01AC               	clrf	(_myMain^(0+256)+12)
  6550  1AF5  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6551  1AF6  0008               	return
  6552  1AF7                     __end_of_set_TimeoutCleared:	
  6553                           
  6554                           	psect	text22
  6555  1DE5                     __ptext22:	
  6556 ;; *************** function _Timeout_Counter *****************
  6557 ;; Defined at:
  6558 ;;		line 273 in file "../src/main_B1.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;		None
  6563 ;; Return value:  Size  Location     Type
  6564 ;;		None               void
  6565 ;; Registers used:
  6566 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;Total ram usage:        0 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    3
  6579 ;; This function calls:
  6580 ;;		Nothing
  6581 ;; This function is called by:
  6582 ;;		_getAD
  6583 ;;		_TouchPower
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _Timeout_Counter
  6589  1DE5                     _Timeout_Counter:	
  6590                           
  6591                           ;main_B1.c: 274: myMain.Timeout_Counter++;
  6592                           
  6593                           ;incstack = 0
  6594                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6595  1DE5  3001               	movlw	1
  6596  1DE6  0022               	movlb	2	; select bank2
  6597  1DE7  07AC               	addwf	(_myMain^(0+256)+12),f
  6598  1DE8  3000               	movlw	0
  6599  1DE9  3DAD               	addwfc	((_myMain+1)^(0+256)+12),f
  6600                           
  6601                           ;main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6602  1DEA  300C               	movlw	12
  6603  1DEB  3E20               	addlw	_myMain& (0+255)
  6604  1DEC  0086               	movwf	6
  6605  1DED  3001               	movlw	1	; select bank2/3
  6606  1DEE  0087               	movwf	7
  6607  1DEF  3F40               	moviw [0]fsr1
  6608  1DF0  3AA8               	xorlw	168
  6609  1DF1  1D03               	skipz
  6610  1DF2  2DF5               	goto	u11945
  6611  1DF3  3F41               	moviw [1]fsr1
  6612  1DF4  3A61               	xorlw	97
  6613  1DF5                     u11945:	
  6614  1DF5  1D03               	skipz
  6615  1DF6  0008               	return
  6616                           
  6617                           ;main_B1.c: 276: myMain.Timeout_Counter = 0;
  6618  1DF7  01AC               	clrf	(_myMain^(0+256)+12)
  6619  1DF8  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6620                           
  6621                           ;main_B1.c: 277: myMain.Timeout = 1;
  6622  1DF9  152B               	bsf	(_myMain^(0+256)+11),2
  6623  1DFA  0008               	return
  6624  1DFB                     __end_of_Timeout_Counter:	
  6625                           
  6626                           	psect	text23
  6627  1AD3                     __ptext23:	
  6628 ;; *************** function _RF_Main *****************
  6629 ;; Defined at:
  6630 ;;		line 26 in file "../src/RF_Control_B1.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;		None
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;		None
  6635 ;; Return value:  Size  Location     Type
  6636 ;;		None               void
  6637 ;; Registers used:
  6638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;Total ram usage:        0 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:   10
  6651 ;; This function calls:
  6652 ;;		_setRF_Main
  6653 ;; This function is called by:
  6654 ;;		_main
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           
  6659                           ;psect for function _RF_Main
  6660  1AD3                     _RF_Main:	
  6661                           
  6662                           ;RF_Control_B1.c: 28: setRF_Main();
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6666  1AD3  3186  260E         	fcall	_setRF_Main
  6667  1AD5  0008               	return
  6668  1AD6                     __end_of_RF_Main:	
  6669                           
  6670                           	psect	text24
  6671  060E                     __ptext24:	
  6672 ;; *************** function _setRF_Main *****************
  6673 ;; Defined at:
  6674 ;;		line 53 in file "../src/RF_Control_B1.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;		None
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  error           1    1[BANK1 ] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;		None               void
  6681 ;; Registers used:
  6682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;Total ram usage:        2 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    9
  6695 ;; This function calls:
  6696 ;;		_CC2500_PowerOnInitial
  6697 ;;		_CC2500_RxData
  6698 ;;		_CC2500_TxData
  6699 ;;		_CC2500_WriteCommand
  6700 ;;		_RF_RxDisable
  6701 ;;		___lwdiv
  6702 ;;		_getBuz_GO
  6703 ;;		_getRF_KeyStatus
  6704 ;;		_getRxData
  6705 ;; This function is called by:
  6706 ;;		_RF_Main
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           
  6711                           ;psect for function _setRF_Main
  6712  060E                     _setRF_Main:	
  6713                           
  6714                           ;RF_Control_B1.c: 54: char error = 0;
  6715                           
  6716                           ;incstack = 0
  6717                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6718  060E  0021               	movlb	1	; select bank1
  6719  060F  01EC               	clrf	setRF_Main@error^(0+128)
  6720                           
  6721                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6722  0610  1C20               	btfss	_RF1^(0+128),0
  6723  0611  2EC6               	goto	l2128
  6724                           
  6725                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6726  0612  319C  2493  3186   	fcall	_getBuz_GO
  6727  0615  0873               	movf	?_getBuz_GO+1,w
  6728  0616  0472               	iorwf	?_getBuz_GO,w
  6729  0617  1D03               	skipz
  6730  0618  2EA7               	goto	l10469
  6731                           
  6732                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6733  0619  319C  24E4  3186   	fcall	_getRF_KeyStatus
  6734  061C  3A01               	xorlw	1
  6735  061D  3000               	movlw	0
  6736  061E  1903               	skipnz
  6737  061F  3001               	movlw	1
  6738  0620  0021               	movlb	1	; select bank1
  6739  0621  00EB               	movwf	??_setRF_Main^(0+128)
  6740  0622  0CEB               	rrf	??_setRF_Main^(0+128),f
  6741  0623  0CEB               	rrf	??_setRF_Main^(0+128),f
  6742  0624  0820               	movf	_RF1^(0+128),w
  6743  0625  066B               	xorwf	??_setRF_Main^(0+128),w
  6744  0626  397F               	andlw	-129
  6745  0627  066B               	xorwf	??_setRF_Main^(0+128),w
  6746  0628  00A0               	movwf	_RF1^(0+128)
  6747                           
  6748                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6749  0629  1FA0               	btfss	_RF1^(0+128),7
  6750  062A  2E2D               	goto	l2132
  6751  062B  1F20               	btfss	_RF1^(0+128),6
  6752  062C  2EA7               	goto	l10469
  6753  062D                     l2132:	
  6754                           
  6755                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6756  062D  1D20               	btfss	_RF1^(0+128),2
  6757  062E  2E6E               	goto	l2133
  6758                           
  6759                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6760  062F  1B20               	btfsc	_RF1^(0+128),6
  6761  0630  2E69               	goto	l10441
  6762                           
  6763                           ;RF_Control_B1.c: 68: RF1.Count++;
  6764  0631  3001               	movlw	1
  6765  0632  07A2               	addwf	(_RF1^(0+128)+2),f
  6766  0633  3000               	movlw	0
  6767  0634  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6768                           
  6769                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6770  0635  3014               	movlw	20
  6771  0636  00F2               	movwf	___lwdiv@divisor
  6772  0637  3000               	movlw	0
  6773  0638  00F3               	movwf	___lwdiv@divisor+1
  6774  0639  0828               	movf	((_RF1+1)^(0+128)+7),w
  6775  063A  01F5               	clrf	___lwdiv@dividend+1
  6776  063B  07F5               	addwf	___lwdiv@dividend+1,f
  6777  063C  0827               	movf	(_RF1^(0+128)+7),w
  6778  063D  01F4               	clrf	___lwdiv@dividend
  6779  063E  07F4               	addwf	___lwdiv@dividend,f
  6780  063F  3192  2264  3186   	fcall	___lwdiv
  6781  0642  0873               	movf	?___lwdiv+1,w
  6782  0643  0021               	movlb	1	; select bank1
  6783  0644  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6784  0645  1D03               	skipz
  6785  0646  2E49               	goto	u12615
  6786  0647  0872               	movf	?___lwdiv,w
  6787  0648  0222               	subwf	(_RF1^(0+128)+2),w
  6788  0649                     u12615:	
  6789  0649  1C03               	skipc
  6790  064A  2EA7               	goto	l10469
  6791                           
  6792                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6793  064B  3014               	movlw	20
  6794  064C  00F2               	movwf	___lwdiv@divisor
  6795  064D  3000               	movlw	0
  6796  064E  00F3               	movwf	___lwdiv@divisor+1
  6797  064F  0828               	movf	((_RF1+1)^(0+128)+7),w
  6798  0650  01F5               	clrf	___lwdiv@dividend+1
  6799  0651  07F5               	addwf	___lwdiv@dividend+1,f
  6800  0652  0827               	movf	(_RF1^(0+128)+7),w
  6801  0653  01F4               	clrf	___lwdiv@dividend
  6802  0654  07F4               	addwf	___lwdiv@dividend,f
  6803  0655  3192  2264  3186   	fcall	___lwdiv
  6804  0658  0873               	movf	?___lwdiv+1,w
  6805  0659  0021               	movlb	1	; select bank1
  6806  065A  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6807  065B  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6808  065C  0872               	movf	?___lwdiv,w
  6809  065D  01A2               	clrf	(_RF1^(0+128)+2)
  6810  065E  07A2               	addwf	(_RF1^(0+128)+2),f
  6811                           
  6812                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6813  065F  1120               	bcf	_RF1^(0+128),2
  6814                           
  6815                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6816  0660  01AA               	clrf	(_RF1^(0+128)+10)
  6817  0661  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6818                           
  6819                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6820  0662  319C  2435  3186   	fcall	_RF_RxDisable
  6821                           
  6822                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6823  0665  318A  226D  3186   	fcall	_CC2500_TxData
  6824                           
  6825                           ;RF_Control_B1.c: 77: }
  6826                           ;RF_Control_B1.c: 78: } else {
  6827  0668  2EA7               	goto	l10469
  6828  0669                     l10441:	
  6829                           
  6830                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6831  0669  0021               	movlb	1	; select bank1
  6832  066A  01A2               	clrf	(_RF1^(0+128)+2)
  6833  066B  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6834                           
  6835                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6836  066C  1120               	bcf	_RF1^(0+128),2
  6837                           
  6838                           ;RF_Control_B1.c: 81: }
  6839                           ;RF_Control_B1.c: 82: } else {
  6840  066D  2EA7               	goto	l10469
  6841  066E                     l2133:	
  6842                           
  6843                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6844  066E  1DA0               	btfss	_RF1^(0+128),3
  6845  066F  2E7D               	goto	l10455
  6846                           
  6847                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6848  0670  3188  2075  3186   	fcall	_CC2500_RxData
  6849                           
  6850                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6851  0673  0021               	movlb	1	; select bank1
  6852  0674  1CA0               	btfss	_RF1^(0+128),1
  6853  0675  2EA7               	goto	l10469
  6854                           
  6855                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6856  0676  10A0               	bcf	_RF1^(0+128),1
  6857                           
  6858                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6859  0677  01AA               	clrf	(_RF1^(0+128)+10)
  6860  0678  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6861                           
  6862                           ;RF_Control_B1.c: 97: getRxData();
  6863  0679  318A  22D5  3186   	fcall	_getRxData
  6864                           
  6865                           ;RF_Control_B1.c: 100: }
  6866                           ;RF_Control_B1.c: 101: } else {
  6867  067C  2EA7               	goto	l10469
  6868  067D                     l10455:	
  6869                           
  6870                           ;RF_Control_B1.c: 102: RF1.Count++;
  6871  067D  3001               	movlw	1
  6872  067E  0021               	movlb	1	; select bank1
  6873  067F  07A2               	addwf	(_RF1^(0+128)+2),f
  6874  0680  3000               	movlw	0
  6875  0681  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6876                           
  6877                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6878  0682  3014               	movlw	20
  6879  0683  00F2               	movwf	___lwdiv@divisor
  6880  0684  3000               	movlw	0
  6881  0685  00F3               	movwf	___lwdiv@divisor+1
  6882  0686  0828               	movf	((_RF1+1)^(0+128)+7),w
  6883  0687  01F5               	clrf	___lwdiv@dividend+1
  6884  0688  07F5               	addwf	___lwdiv@dividend+1,f
  6885  0689  0827               	movf	(_RF1^(0+128)+7),w
  6886  068A  01F4               	clrf	___lwdiv@dividend
  6887  068B  07F4               	addwf	___lwdiv@dividend,f
  6888  068C  3192  2264  3186   	fcall	___lwdiv
  6889  068F  0873               	movf	?___lwdiv+1,w
  6890  0690  0021               	movlb	1	; select bank1
  6891  0691  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6892  0692  1D03               	skipz
  6893  0693  2E96               	goto	u12645
  6894  0694  0872               	movf	?___lwdiv,w
  6895  0695  0222               	subwf	(_RF1^(0+128)+2),w
  6896  0696                     u12645:	
  6897  0696  1C03               	skipc
  6898  0697  2EA7               	goto	l10469
  6899                           
  6900                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6901  0698  01A2               	clrf	(_RF1^(0+128)+2)
  6902  0699  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6903                           
  6904                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6905  069A  15A0               	bsf	_RF1^(0+128),3
  6906                           
  6907                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6908  069B  3036               	movlw	54
  6909  069C  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6910                           
  6911                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6912  069F  303A               	movlw	58
  6913  06A0  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6914                           
  6915                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6916  06A3  3034               	movlw	52
  6917  06A4  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6918  06A7                     l10469:	
  6919                           
  6920                           ;RF_Control_B1.c: 111: }
  6921                           ;RF_Control_B1.c: 112: }
  6922                           ;RF_Control_B1.c: 113: }
  6923                           ;RF_Control_B1.c: 114: }
  6924                           ;RF_Control_B1.c: 115: }
  6925                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6926  06A7  3001               	movlw	1
  6927  06A8  0021               	movlb	1	; select bank1
  6928  06A9  07AA               	addwf	(_RF1^(0+128)+10),f
  6929  06AA  3000               	movlw	0
  6930  06AB  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6931                           
  6932                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6933  06AC  300B               	movlw	11
  6934  06AD  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6935  06AE  30B9               	movlw	185
  6936  06AF  1903               	skipnz
  6937  06B0  022A               	subwf	(_RF1^(0+128)+10),w
  6938  06B1  1C03               	skipc
  6939  06B2  2EBF               	goto	l10483
  6940                           
  6941                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6942  06B3  01AA               	clrf	(_RF1^(0+128)+10)
  6943  06B4  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6944                           
  6945                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6946  06B5  11A0               	bcf	_RF1^(0+128),3
  6947                           
  6948                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6949  06B6  10A0               	bcf	_RF1^(0+128),1
  6950                           
  6951                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6952  06B7  3036               	movlw	54
  6953  06B8  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6954                           
  6955                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6956  06BB  303A               	movlw	58
  6957  06BC  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6958  06BF                     l10483:	
  6959                           
  6960                           ;RF_Control_B1.c: 125: }
  6961                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6962  06BF  0021               	movlb	1	; select bank1
  6963  06C0  1F21               	btfss	(_RF1^(0+128)+1),6
  6964  06C1  0008               	return
  6965                           
  6966                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6967  06C2  1321               	bcf	(_RF1^(0+128)+1),6
  6968                           
  6969                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6970  06C3  319D  25BB         	fcall	_CC2500_PowerOnInitial
  6971                           
  6972                           ;RF_Control_B1.c: 130: }
  6973                           ;RF_Control_B1.c: 132: } else {
  6974  06C5  0008               	return
  6975  06C6                     l2128:	
  6976                           
  6977                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6978  06C6  0022               	movlb	2	; select bank2
  6979  06C7  1C20               	btfss	_myMain^(0+256),0
  6980  06C8  0008               	return
  6981                           
  6982                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6983  06C9  0021               	movlb	1	; select bank1
  6984  06CA  1420               	bsf	_RF1^(0+128),0
  6985  06CB  0008               	return
  6986  06CC                     __end_of_setRF_Main:	
  6987                           
  6988                           	psect	text25
  6989  0AD5                     __ptext25:	
  6990 ;; *************** function _getRxData *****************
  6991 ;; Defined at:
  6992 ;;		line 227 in file "../src/RF_Control_B1.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;		None
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  error           1   76[BANK0 ] unsigned char 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;		None               void
  6999 ;; Registers used:
  7000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;Total ram usage:        2 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    8
  7013 ;; This function calls:
  7014 ;;		_getMain_All_Error_Status
  7015 ;;		_setControl_Lights_Table
  7016 ;;		_setLog_Code
  7017 ;;		_setTxData
  7018 ;; This function is called by:
  7019 ;;		_setRF_Main
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           
  7024                           ;psect for function _getRxData
  7025  0AD5                     _getRxData:	
  7026                           
  7027                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7028                           
  7029                           ;incstack = 0
  7030                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7031  0AD5  0023               	movlb	3	; select bank3
  7032  0AD6  0820               	movf	_RF_Data^(0+384),w
  7033  0AD7  3AAA               	xorlw	170
  7034  0AD8  1D03               	skipz
  7035  0AD9  2AEB               	goto	l10191
  7036  0ADA  0821               	movf	(_RF_Data^(0+384)+1),w
  7037  0ADB  3A01               	xorlw	1
  7038  0ADC  1D03               	skipz
  7039  0ADD  2AEB               	goto	l10191
  7040                           
  7041                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7042  0ADE  3055               	movlw	85
  7043  0ADF  0020               	movlb	0	; select bank0
  7044  0AE0  00EB               	movwf	??_getRxData
  7045  0AE1  086F               	movf	_product,w
  7046  0AE2  3E02               	addlw	2
  7047  0AE3  0086               	movwf	6
  7048  0AE4  3002               	movlw	2	; select bank4/5
  7049  0AE5  0087               	movwf	7
  7050  0AE6  086B               	movf	??_getRxData,w
  7051  0AE7  0081               	movwf	1
  7052                           
  7053                           ;RF_Control_B1.c: 231: setTxData();
  7054  0AE8  3186  26CC         	fcall	_setTxData
  7055                           
  7056                           ;RF_Control_B1.c: 235: } else {
  7057  0AEA  0008               	return
  7058  0AEB                     l10191:	
  7059                           
  7060                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7061  0AEB  3000               	movlw	0
  7062  0AEC  3191  21CF  318A   	fcall	_getMain_All_Error_Status
  7063  0AEF  0020               	movlb	0	; select bank0
  7064  0AF0  00EB               	movwf	??_getRxData
  7065  0AF1  086B               	movf	??_getRxData,w
  7066  0AF2  00EC               	movwf	getRxData@error
  7067                           
  7068                           ;RF_Control_B1.c: 237: if (error == 0) {
  7069  0AF3  08EC               	movf	getRxData@error,f
  7070  0AF4  1D03               	skipz
  7071  0AF5  2B3E               	goto	l2173
  7072                           
  7073                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7074  0AF6  0021               	movlb	1	; select bank1
  7075  0AF7  1F20               	btfss	_RF1^(0+128),6
  7076  0AF8  2B04               	goto	l10203
  7077                           
  7078                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7079  0AF9  0023               	movlb	3	; select bank3
  7080  0AFA  08A0               	movf	_RF_Data^(0+384),f
  7081  0AFB  1D03               	skipz
  7082  0AFC  0008               	return
  7083  0AFD  0821               	movf	(_RF_Data^(0+384)+1),w
  7084  0AFE  3A64               	xorlw	100
  7085  0AFF  1D03               	skipz
  7086  0B00  0008               	return
  7087                           
  7088                           ;RF_Control_B1.c: 241: setLog_Code();
  7089  0B01  3192  2230         	fcall	_setLog_Code
  7090                           
  7091                           ;RF_Control_B1.c: 242: }
  7092                           ;RF_Control_B1.c: 243: } else {
  7093  0B03  0008               	return
  7094  0B04                     l10203:	
  7095                           
  7096                           ;RF_Control_B1.c: 245: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7097  0B04  0023               	movlb	3	; select bank3
  7098  0B05  08A0               	movf	_RF_Data^(0+384),f
  7099  0B06  1D03               	skipz
  7100  0B07  0008               	return
  7101  0B08  0821               	movf	(_RF_Data^(0+384)+1),w
  7102  0B09  3A02               	xorlw	2
  7103  0B0A  1D03               	skipz
  7104  0B0B  0008               	return
  7105                           
  7106                           ;RF_Control_B1.c: 247: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7107  0B0C  082C               	movf	(_RF_Data^(0+384)+12),w
  7108  0B0D  3AFF               	xorlw	255
  7109  0B0E  1D03               	skipz
  7110  0B0F  2B1A               	goto	l10215
  7111  0B10  082D               	movf	(_RF_Data^(0+384)+13),w
  7112  0B11  3AFF               	xorlw	255
  7113  0B12  1D03               	skipz
  7114  0B13  2B1A               	goto	l10215
  7115  0B14  082E               	movf	(_RF_Data^(0+384)+14),w
  7116  0B15  3AFF               	xorlw	255
  7117  0B16  1D03               	skipz
  7118  0B17  2B1A               	goto	l10215
  7119                           
  7120                           ;RF_Control_B1.c: 248: __nop();
  7121  0B18  0000               	nop
  7122                           
  7123                           ;RF_Control_B1.c: 249: } else {
  7124  0B19  0008               	return
  7125  0B1A                     l10215:	
  7126                           
  7127                           ;RF_Control_B1.c: 250: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7128  0B1A  0020               	movlb	0	; select bank0
  7129  0B1B  086F               	movf	_product,w
  7130  0B1C  3E0C               	addlw	12
  7131  0B1D  0086               	movwf	6
  7132  0B1E  3002               	movlw	2	; select bank4/5
  7133  0B1F  0087               	movwf	7
  7134  0B20  0023               	movlb	3	; select bank3
  7135  0B21  082C               	movf	(_RF_Data^(0+384)+12),w
  7136  0B22  0601               	xorwf	1,w
  7137  0B23  1D03               	skipz
  7138  0B24  0008               	return
  7139  0B25  0020               	movlb	0	; select bank0
  7140  0B26  086F               	movf	_product,w
  7141  0B27  3E0D               	addlw	13
  7142  0B28  0086               	movwf	6
  7143  0B29  3002               	movlw	2	; select bank4/5
  7144  0B2A  0087               	movwf	7
  7145  0B2B  0023               	movlb	3	; select bank3
  7146  0B2C  082D               	movf	(_RF_Data^(0+384)+13),w
  7147  0B2D  0601               	xorwf	1,w
  7148  0B2E  1D03               	skipz
  7149  0B2F  0008               	return
  7150  0B30  0020               	movlb	0	; select bank0
  7151  0B31  086F               	movf	_product,w
  7152  0B32  3E0E               	addlw	14
  7153  0B33  0086               	movwf	6
  7154  0B34  3002               	movlw	2	; select bank4/5
  7155  0B35  0087               	movwf	7
  7156  0B36  0023               	movlb	3	; select bank3
  7157  0B37  082E               	movf	(_RF_Data^(0+384)+14),w
  7158  0B38  0601               	xorwf	1,w
  7159  0B39  1D03               	skipz
  7160  0B3A  0008               	return
  7161                           
  7162                           ;RF_Control_B1.c: 251: setControl_Lights_Table();
  7163  0B3B  318C  243A         	fcall	_setControl_Lights_Table
  7164                           
  7165                           ;RF_Control_B1.c: 252: }
  7166                           ;RF_Control_B1.c: 253: }
  7167                           ;RF_Control_B1.c: 255: }
  7168                           ;RF_Control_B1.c: 266: }
  7169                           ;RF_Control_B1.c: 267: } else {
  7170  0B3D  0008               	return
  7171  0B3E                     l2173:	
  7172                           
  7173                           ;RF_Control_B1.c: 268: __nop();
  7174  0B3E  0000               	nop
  7175  0B3F  0008               	return
  7176  0B40                     __end_of_getRxData:	
  7177                           
  7178                           	psect	text26
  7179  1230                     __ptext26:	
  7180 ;; *************** function _setLog_Code *****************
  7181 ;; Defined at:
  7182 ;;		line 274 in file "../src/RF_Control_B1.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;		None               void
  7189 ;; Registers used:
  7190 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7200 ;;Total ram usage:        1 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    5
  7203 ;; This function calls:
  7204 ;;		_setBuz
  7205 ;;		_setMemory_LoopSave
  7206 ;;		_setMemory_Modify
  7207 ;;		_setProductData
  7208 ;; This function is called by:
  7209 ;;		_getRxData
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           
  7214                           ;psect for function _setLog_Code
  7215  1230                     _setLog_Code:	
  7216                           
  7217                           ;RF_Control_B1.c: 275: RF1.Learn = 0;
  7218                           
  7219                           ;incstack = 0
  7220                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7221  1230  0021               	movlb	1	; select bank1
  7222  1231  1320               	bcf	_RF1^(0+128),6
  7223                           
  7224                           ;RF_Control_B1.c: 276: setProductData(12, RF_Data[12]);
  7225  1232  0023               	movlb	3	; select bank3
  7226  1233  082C               	movf	(_RF_Data^(0+384)+12),w
  7227  1234  0020               	movlb	0	; select bank0
  7228  1235  00DE               	movwf	??_setLog_Code
  7229  1236  085E               	movf	??_setLog_Code,w
  7230  1237  00DA               	movwf	setProductData@value
  7231  1238  300C               	movlw	12
  7232  1239  319B  23EB  3192   	fcall	_setProductData
  7233                           
  7234                           ;RF_Control_B1.c: 277: setProductData(13, RF_Data[13]);
  7235  123C  0023               	movlb	3	; select bank3
  7236  123D  082D               	movf	(_RF_Data^(0+384)+13),w
  7237  123E  0020               	movlb	0	; select bank0
  7238  123F  00DE               	movwf	??_setLog_Code
  7239  1240  085E               	movf	??_setLog_Code,w
  7240  1241  00DA               	movwf	setProductData@value
  7241  1242  300D               	movlw	13
  7242  1243  319B  23EB  3192   	fcall	_setProductData
  7243                           
  7244                           ;RF_Control_B1.c: 278: setProductData(14, RF_Data[14]);
  7245  1246  0023               	movlb	3	; select bank3
  7246  1247  082E               	movf	(_RF_Data^(0+384)+14),w
  7247  1248  0020               	movlb	0	; select bank0
  7248  1249  00DE               	movwf	??_setLog_Code
  7249  124A  085E               	movf	??_setLog_Code,w
  7250  124B  00DA               	movwf	setProductData@value
  7251  124C  300E               	movlw	14
  7252  124D  319B  23EB  3192   	fcall	_setProductData
  7253                           
  7254                           ;RF_Control_B1.c: 279: setBuz(1, 100);
  7255  1250  3064               	movlw	100
  7256  1251  0020               	movlb	0	; select bank0
  7257  1252  00A4               	movwf	setBuz@time
  7258  1253  3000               	movlw	0
  7259  1254  00A5               	movwf	setBuz@time+1
  7260  1255  3001               	movlw	1
  7261  1256  3195  25E6  3192   	fcall	_setBuz
  7262                           
  7263                           ;RF_Control_B1.c: 280: if (myMain.First == 1) {
  7264  1259  0022               	movlb	2	; select bank2
  7265  125A  1EA0               	btfss	_myMain^(0+256),5
  7266  125B  2A60               	goto	l2185
  7267                           
  7268                           ;RF_Control_B1.c: 281: setMemory_LoopSave(1);
  7269  125C  3001               	movlw	1
  7270  125D  319C  24B3  3192   	fcall	_setMemory_LoopSave
  7271  1260                     l2185:	
  7272                           
  7273                           ;RF_Control_B1.c: 282: }
  7274                           ;RF_Control_B1.c: 283: setMemory_Modify(1);
  7275  1260  3001               	movlw	1
  7276  1261  319C  24A3         	fcall	_setMemory_Modify
  7277  1263  0008               	return
  7278  1264                     __end_of_setLog_Code:	
  7279                           
  7280                           	psect	text27
  7281  1CB3                     __ptext27:	
  7282 ;; *************** function _setMemory_LoopSave *****************
  7283 ;; Defined at:
  7284 ;;		line 1079 in file "../src/MCU_B1.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;  command         1    wreg     unsigned char 
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  command         1    3[COMMON] unsigned char 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;		None               void
  7291 ;; Registers used:
  7292 ;;		wreg, status,2, status,0
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7299 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;Total ram usage:        2 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    3
  7305 ;; This function calls:
  7306 ;;		Nothing
  7307 ;; This function is called by:
  7308 ;;		_setLog_Code
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _setMemory_LoopSave
  7314  1CB3                     _setMemory_LoopSave:	
  7315                           
  7316                           ;incstack = 0
  7317                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7318                           ;setMemory_LoopSave@command stored from wreg
  7319  1CB3  00F3               	movwf	setMemory_LoopSave@command
  7320                           
  7321                           ;MCU_B1.c: 1080: Memory.LoopSave = command == 1 ? 1 : 0;
  7322  1CB4  0873               	movf	setMemory_LoopSave@command,w
  7323  1CB5  3A01               	xorlw	1
  7324  1CB6  3000               	movlw	0
  7325  1CB7  1903               	skipnz
  7326  1CB8  3001               	movlw	1
  7327  1CB9  00F2               	movwf	??_setMemory_LoopSave
  7328  1CBA  0DF2               	rlf	??_setMemory_LoopSave,f
  7329  1CBB  0DF2               	rlf	??_setMemory_LoopSave,f
  7330  1CBC  0024               	movlb	4	; select bank4
  7331  1CBD  0844               	movf	(_Memory^(0+512)+36),w
  7332  1CBE  0672               	xorwf	??_setMemory_LoopSave,w
  7333  1CBF  39FB               	andlw	-5
  7334  1CC0  0672               	xorwf	??_setMemory_LoopSave,w
  7335  1CC1  00C4               	movwf	(_Memory^(0+512)+36)
  7336  1CC2  0008               	return
  7337  1CC3                     __end_of_setMemory_LoopSave:	
  7338                           
  7339                           	psect	text28
  7340  0C3A                     __ptext28:	
  7341 ;; *************** function _setControl_Lights_Table *****************
  7342 ;; Defined at:
  7343 ;;		line 287 in file "../src/RF_Control_B1.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;		None               void
  7350 ;; Registers used:
  7351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;Total ram usage:        0 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; Hardware stack levels required when called:    7
  7364 ;; This function calls:
  7365 ;;		_getDimmerLights_Status
  7366 ;;		_getMain_All_LightsStatus
  7367 ;;		_setCmd_Status
  7368 ;;		_setDimmerLights_SwOff
  7369 ;;		_setDimmerLights_SwOn
  7370 ;;		_setProductData
  7371 ;;		_setRFSW_AdjControl
  7372 ;;		_setRFSW_Control
  7373 ;;		_setTxData
  7374 ;; This function is called by:
  7375 ;;		_getRxData
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           
  7380                           ;psect for function _setControl_Lights_Table
  7381  0C3A                     _setControl_Lights_Table:	
  7382                           
  7383                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7384                           
  7385                           ;incstack = 0
  7386                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7387  0C3A  2CA5               	goto	l9953
  7388  0C3B                     l9929:	
  7389                           ;RF_Control_B1.c: 290: case 0x00:
  7390                           
  7391                           
  7392                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7393  0C3B  319C  2417  318C   	fcall	_getMain_All_LightsStatus
  7394  0C3E  3A01               	xorlw	1
  7395  0C3F  1D03               	skipz
  7396  0C40  2C65               	goto	l9939
  7397                           
  7398                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7399  0C41  3001               	movlw	1
  7400  0C42  319B  23F9  318C   	fcall	_getDimmerLights_Status
  7401  0C45  3A01               	xorlw	1
  7402  0C46  1D03               	skipz
  7403  0C47  2C50               	goto	l2192
  7404                           
  7405                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7406  0C48  3001               	movlw	1
  7407  0C49  3196  268D  318C   	fcall	_setDimmerLights_SwOn
  7408                           
  7409                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7410  0C4C  3001               	movlw	1
  7411  0C4D  3194  240E  318C   	fcall	_setDimmerLights_SwOff
  7412  0C50                     l2192:	
  7413                           
  7414                           ;RF_Control_B1.c: 297: }
  7415                           ;RF_Control_B1.c: 300: if (getDimmerLights_Status(2) == 1) {
  7416  0C50  3002               	movlw	2
  7417  0C51  319B  23F9  318C   	fcall	_getDimmerLights_Status
  7418  0C54  3A01               	xorlw	1
  7419  0C55  1D03               	skipz
  7420  0C56  2C5F               	goto	l9937
  7421                           
  7422                           ;RF_Control_B1.c: 301: setDimmerLights_SwOn(2);
  7423  0C57  3002               	movlw	2
  7424  0C58  3196  268D  318C   	fcall	_setDimmerLights_SwOn
  7425                           
  7426                           ;RF_Control_B1.c: 302: setDimmerLights_SwOff(2);
  7427  0C5B  3002               	movlw	2
  7428  0C5C  3194  240E  318C   	fcall	_setDimmerLights_SwOff
  7429  0C5F                     l9937:	
  7430                           
  7431                           ;RF_Control_B1.c: 303: }
  7432                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7433  0C5F  01F2               	clrf	setCmd_Status@cmd
  7434  0C60  0AF2               	incf	setCmd_Status@cmd,f
  7435  0C61  3001               	movlw	1
  7436  0C62  319D  257C         	fcall	_setCmd_Status
  7437                           
  7438                           ;RF_Control_B1.c: 313: } else {
  7439  0C64  0008               	return
  7440  0C65                     l9939:	
  7441                           
  7442                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7443  0C65  0020               	movlb	0	; select bank0
  7444  0C66  01DA               	clrf	setProductData@value
  7445  0C67  3009               	movlw	9
  7446  0C68  319B  23EB  318C   	fcall	_setProductData
  7447                           
  7448                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7449  0C6B  0020               	movlb	0	; select bank0
  7450  0C6C  01DA               	clrf	setProductData@value
  7451  0C6D  300B               	movlw	11
  7452  0C6E  319B  23EB  318C   	fcall	_setProductData
  7453                           
  7454                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7455  0C71  0020               	movlb	0	; select bank0
  7456  0C72  01DA               	clrf	setProductData@value
  7457  0C73  300F               	movlw	15
  7458  0C74  319B  23EB  318C   	fcall	_setProductData
  7459                           
  7460                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7461  0C77  0020               	movlb	0	; select bank0
  7462  0C78  01DA               	clrf	setProductData@value
  7463  0C79  3011               	movlw	17
  7464  0C7A  319B  23EB  318C   	fcall	_setProductData
  7465                           
  7466                           ;RF_Control_B1.c: 318: setTxData();
  7467  0C7D  3186  26CC         	fcall	_setTxData
  7468                           
  7469                           ;RF_Control_B1.c: 319: }
  7470                           ;RF_Control_B1.c: 320: break;
  7471  0C7F  0008               	return
  7472  0C80                     l9941:	
  7473                           ;RF_Control_B1.c: 322: case 0x20:
  7474                           
  7475                           
  7476                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7477  0C80  0020               	movlb	0	; select bank0
  7478  0C81  01DA               	clrf	setProductData@value
  7479  0C82  3009               	movlw	9
  7480  0C83  319B  23EB  318C   	fcall	_setProductData
  7481                           
  7482                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7483  0C86  0020               	movlb	0	; select bank0
  7484  0C87  01DA               	clrf	setProductData@value
  7485  0C88  300B               	movlw	11
  7486  0C89  319B  23EB  318C   	fcall	_setProductData
  7487                           
  7488                           ;RF_Control_B1.c: 325: setProductData(17, 0);
  7489  0C8C  0020               	movlb	0	; select bank0
  7490  0C8D  01DA               	clrf	setProductData@value
  7491  0C8E  3011               	movlw	17
  7492  0C8F  319B  23EB  318C   	fcall	_setProductData
  7493                           
  7494                           ;RF_Control_B1.c: 326: setTxData();
  7495  0C92  3186  26CC         	fcall	_setTxData
  7496                           
  7497                           ;RF_Control_B1.c: 327: break;
  7498  0C94  0008               	return
  7499  0C95                     l9943:	
  7500                           ;RF_Control_B1.c: 330: case 0x01:
  7501                           
  7502                           
  7503                           ;RF_Control_B1.c: 331: setRFSW_Control(1);
  7504  0C95  3001               	movlw	1
  7505  0C96  3194  24A1         	fcall	_setRFSW_Control
  7506                           
  7507                           ;RF_Control_B1.c: 332: break;
  7508  0C98  0008               	return
  7509  0C99                     l9945:	
  7510                           ;RF_Control_B1.c: 336: case 0x11:
  7511                           
  7512                           
  7513                           ;RF_Control_B1.c: 337: setRFSW_AdjControl(1);
  7514  0C99  3001               	movlw	1
  7515  0C9A  318B  23BB         	fcall	_setRFSW_AdjControl
  7516                           
  7517                           ;RF_Control_B1.c: 338: break;
  7518  0C9C  0008               	return
  7519  0C9D                     l9947:	
  7520                           ;RF_Control_B1.c: 343: case 0x02:
  7521                           
  7522                           
  7523                           ;RF_Control_B1.c: 344: setRFSW_Control(2);
  7524  0C9D  3002               	movlw	2
  7525  0C9E  3194  24A1         	fcall	_setRFSW_Control
  7526                           
  7527                           ;RF_Control_B1.c: 345: break;
  7528  0CA0  0008               	return
  7529  0CA1                     l9949:	
  7530                           ;RF_Control_B1.c: 348: case 0x21:
  7531                           
  7532                           
  7533                           ;RF_Control_B1.c: 349: setRFSW_AdjControl(2);
  7534  0CA1  3002               	movlw	2
  7535  0CA2  318B  23BB         	fcall	_setRFSW_AdjControl
  7536                           
  7537                           ;RF_Control_B1.c: 367: }
  7538                           
  7539                           ;RF_Control_B1.c: 350: break;
  7540  0CA4  0008               	return
  7541  0CA5                     l9953:	
  7542  0CA5  0023               	movlb	3	; select bank3
  7543  0CA6  082F               	movf	(_RF_Data^(0+384)+15),w
  7544                           
  7545                           ; Switch size 1, requested type "space"
  7546                           ; Number of cases is 6, Range of values is 0 to 33
  7547                           ; switch strategies available:
  7548                           ; Name         Instructions Cycles
  7549                           ; simple_byte           19    10 (average)
  7550                           ; direct_byte           74     6 (fixed)
  7551                           ; jumptable            260     6 (fixed)
  7552                           ;	Chosen strategy is simple_byte
  7553  0CA7  3A00               	xorlw	0	; case 0
  7554  0CA8  1903               	skipnz
  7555  0CA9  2C3B               	goto	l9929
  7556  0CAA  3A01               	xorlw	1	; case 1
  7557  0CAB  1903               	skipnz
  7558  0CAC  2C95               	goto	l9943
  7559  0CAD  3A03               	xorlw	3	; case 2
  7560  0CAE  1903               	skipnz
  7561  0CAF  2C9D               	goto	l9947
  7562  0CB0  3A13               	xorlw	19	; case 17
  7563  0CB1  1903               	skipnz
  7564  0CB2  2C99               	goto	l9945
  7565  0CB3  3A31               	xorlw	49	; case 32
  7566  0CB4  1903               	skipnz
  7567  0CB5  2C80               	goto	l9941
  7568  0CB6  3A01               	xorlw	1	; case 33
  7569  0CB7  1903               	skipnz
  7570  0CB8  2CA1               	goto	l9949
  7571  0CB9  2CBA               	goto	l2201
  7572  0CBA                     l2201:	
  7573  0CBA  0008               	return
  7574  0CBB                     __end_of_setControl_Lights_Table:	
  7575                           
  7576                           	psect	text29
  7577  14A1                     __ptext29:	
  7578 ;; *************** function _setRFSW_Control *****************
  7579 ;; Defined at:
  7580 ;;		line 375 in file "../src/RF_Control_B1.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  sw              1    wreg     unsigned char 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;  sw              1   73[BANK0 ] unsigned char 
  7585 ;;  status          1   72[BANK0 ] unsigned char 
  7586 ;; Return value:  Size  Location     Type
  7587 ;;		None               void
  7588 ;; Registers used:
  7589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;Total ram usage:        3 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    6
  7602 ;; This function calls:
  7603 ;;		_getDelayOff_GO
  7604 ;;		_getDimmerLights_Status
  7605 ;;		_setBuz
  7606 ;;		_setDelayOff_GO
  7607 ;;		_setDimmerLights_SwOff
  7608 ;;		_setDimmerLights_SwOn
  7609 ;;		_setRF_DimmerLights
  7610 ;;		_setTxData
  7611 ;; This function is called by:
  7612 ;;		_setControl_Lights_Table
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           
  7617                           ;psect for function _setRFSW_Control
  7618  14A1                     _setRFSW_Control:	
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7622                           ;setRFSW_Control@sw stored from wreg
  7623  14A1  0020               	movlb	0	; select bank0
  7624  14A2  00E9               	movwf	setRFSW_Control@sw
  7625                           
  7626                           ;RF_Control_B1.c: 376: char status = 0;
  7627  14A3  01E8               	clrf	setRFSW_Control@status
  7628                           
  7629                           ;RF_Control_B1.c: 378: if (RF_Data[16] == 0x80) {
  7630  14A4  0023               	movlb	3	; select bank3
  7631  14A5  0830               	movf	(_RF_Data^(0+384)+16),w
  7632  14A6  3A80               	xorlw	128
  7633  14A7  1D03               	skipz
  7634  14A8  2CD5               	goto	l9709
  7635                           
  7636                           ;RF_Control_B1.c: 379: setDelayOff_GO(sw, 1, RF_Data[17]);
  7637  14A9  0020               	movlb	0	; select bank0
  7638  14AA  01DE               	clrf	setDelayOff_GO@command
  7639  14AB  0ADE               	incf	setDelayOff_GO@command,f
  7640  14AC  0023               	movlb	3	; select bank3
  7641  14AD  0831               	movf	(_RF_Data^(0+384)+17),w
  7642  14AE  0020               	movlb	0	; select bank0
  7643  14AF  00E7               	movwf	??_setRFSW_Control
  7644  14B0  0867               	movf	??_setRFSW_Control,w
  7645  14B1  00DF               	movwf	setDelayOff_GO@value
  7646  14B2  0869               	movf	setRFSW_Control@sw,w
  7647  14B3  318B  2340  3194   	fcall	_setDelayOff_GO
  7648                           
  7649                           ;RF_Control_B1.c: 380: if (getDimmerLights_Status(sw) == 1) {
  7650  14B6  0020               	movlb	0	; select bank0
  7651  14B7  0869               	movf	setRFSW_Control@sw,w
  7652  14B8  319B  23F9  3194   	fcall	_getDimmerLights_Status
  7653  14BB  3A01               	xorlw	1
  7654  14BC  1D03               	skipz
  7655  14BD  2CE4               	goto	l9713
  7656                           
  7657                           ;RF_Control_B1.c: 381: setBuz(1, 100);
  7658  14BE  3064               	movlw	100
  7659  14BF  0020               	movlb	0	; select bank0
  7660  14C0  00A4               	movwf	setBuz@time
  7661  14C1  3000               	movlw	0
  7662  14C2  00A5               	movwf	setBuz@time+1
  7663  14C3  3001               	movlw	1
  7664  14C4  3195  25E6  3194   	fcall	_setBuz
  7665                           
  7666                           ;RF_Control_B1.c: 382: setRF_DimmerLights(sw, 1);
  7667  14C7  0020               	movlb	0	; select bank0
  7668  14C8  01DE               	clrf	setRF_DimmerLights@on
  7669  14C9  0ADE               	incf	setRF_DimmerLights@on,f
  7670  14CA  0869               	movf	setRFSW_Control@sw,w
  7671  14CB  3197  2742  3194   	fcall	_setRF_DimmerLights
  7672                           
  7673                           ;RF_Control_B1.c: 383: setTxData();
  7674  14CE  3186  26CC  3194   	fcall	_setTxData
  7675                           
  7676                           ;RF_Control_B1.c: 384: status = 1;
  7677  14D1  0020               	movlb	0	; select bank0
  7678  14D2  01E8               	clrf	setRFSW_Control@status
  7679  14D3  0AE8               	incf	setRFSW_Control@status,f
  7680                           
  7681                           ;RF_Control_B1.c: 385: }
  7682                           ;RF_Control_B1.c: 386: } else {
  7683  14D4  2CE4               	goto	l9713
  7684  14D5                     l9709:	
  7685                           
  7686                           ;RF_Control_B1.c: 388: if (getDelayOff_GO(sw) == 1) {
  7687  14D5  0020               	movlb	0	; select bank0
  7688  14D6  0869               	movf	setRFSW_Control@sw,w
  7689  14D7  319C  2408  3194   	fcall	_getDelayOff_GO
  7690  14DA  3A01               	xorlw	1
  7691  14DB  1D03               	skipz
  7692  14DC  2CE4               	goto	l9713
  7693                           
  7694                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw, 0, 0);
  7695  14DD  0020               	movlb	0	; select bank0
  7696  14DE  01DE               	clrf	setDelayOff_GO@command
  7697  14DF  01DF               	clrf	setDelayOff_GO@value
  7698  14E0  0869               	movf	setRFSW_Control@sw,w
  7699  14E1  318B  2340  3194   	fcall	_setDelayOff_GO
  7700  14E4                     l9713:	
  7701                           
  7702                           ;RF_Control_B1.c: 390: }
  7703                           ;RF_Control_B1.c: 392: }
  7704                           ;RF_Control_B1.c: 393: if (status == 0) {
  7705  14E4  0020               	movlb	0	; select bank0
  7706  14E5  08E8               	movf	setRFSW_Control@status,f
  7707  14E6  1D03               	skipz
  7708  14E7  0008               	return
  7709                           
  7710                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  7711  14E8  0869               	movf	setRFSW_Control@sw,w
  7712  14E9  3196  268D  3194   	fcall	_setDimmerLights_SwOn
  7713                           
  7714                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  7715  14EC  0020               	movlb	0	; select bank0
  7716  14ED  0869               	movf	setRFSW_Control@sw,w
  7717  14EE  3194  240E         	fcall	_setDimmerLights_SwOff
  7718  14F0  0008               	return
  7719  14F1                     __end_of_setRFSW_Control:	
  7720                           
  7721                           	psect	text30
  7722  0BBB                     __ptext30:	
  7723 ;; *************** function _setRFSW_AdjControl *****************
  7724 ;; Defined at:
  7725 ;;		line 402 in file "../src/RF_Control_B1.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  sw              1    wreg     unsigned char 
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;  sw              1   74[BANK0 ] unsigned char 
  7730 ;;  status          1   73[BANK0 ] unsigned char 
  7731 ;; Return value:  Size  Location     Type
  7732 ;;		None               void
  7733 ;; Registers used:
  7734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7735 ;; Tracked objects:
  7736 ;;		On entry : 0/0
  7737 ;;		On exit  : 0/0
  7738 ;;		Unchanged: 0/0
  7739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;Total ram usage:        4 bytes
  7745 ;; Hardware stack levels used:    1
  7746 ;; Hardware stack levels required when called:    6
  7747 ;; This function calls:
  7748 ;;		_getDimmerLights_PercentToValue
  7749 ;;		_getDimmerLights_Status
  7750 ;;		_setDimmerIntr_Dimming_RF
  7751 ;;		_setDimmerIntr_MaxmumValue
  7752 ;;		_setDimmerLights_DimmingRun
  7753 ;;		_setDimmerLights_SwOff
  7754 ;;		_setDimmerLights_SwOn
  7755 ;;		_setMemory_Modify
  7756 ;;		_setProductData
  7757 ;;		_setTxData
  7758 ;; This function is called by:
  7759 ;;		_setControl_Lights_Table
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           
  7764                           ;psect for function _setRFSW_AdjControl
  7765  0BBB                     _setRFSW_AdjControl:	
  7766                           
  7767                           ;incstack = 0
  7768                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7769                           ;setRFSW_AdjControl@sw stored from wreg
  7770  0BBB  0020               	movlb	0	; select bank0
  7771  0BBC  00EA               	movwf	setRFSW_AdjControl@sw
  7772                           
  7773                           ;RF_Control_B1.c: 403: char status = 0;
  7774  0BBD  01E9               	clrf	setRFSW_AdjControl@status
  7775                           
  7776                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  7777  0BBE  086A               	movf	setRFSW_AdjControl@sw,w
  7778  0BBF  319B  23F9  318B   	fcall	_getDimmerLights_Status
  7779  0BC2  0020               	movlb	0	; select bank0
  7780  0BC3  00E7               	movwf	??_setRFSW_AdjControl
  7781  0BC4  0867               	movf	??_setRFSW_AdjControl,w
  7782  0BC5  00E9               	movwf	setRFSW_AdjControl@status
  7783                           
  7784                           ;RF_Control_B1.c: 407: if (RF_Data[9] > 0x64) {
  7785  0BC6  3065               	movlw	101
  7786  0BC7  0023               	movlb	3	; select bank3
  7787  0BC8  0229               	subwf	(_RF_Data^(0+384)+9),w
  7788  0BC9  1C03               	skipc
  7789  0BCA  2BD2               	goto	l9725
  7790                           
  7791                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x64;
  7792  0BCB  3064               	movlw	100
  7793  0BCC  0020               	movlb	0	; select bank0
  7794  0BCD  00E7               	movwf	??_setRFSW_AdjControl
  7795  0BCE  0867               	movf	??_setRFSW_AdjControl,w
  7796  0BCF  0023               	movlb	3	; select bank3
  7797  0BD0  00A9               	movwf	(_RF_Data^(0+384)+9)
  7798                           
  7799                           ;RF_Control_B1.c: 409: } else if (RF_Data[9] < 0x01) {
  7800  0BD1  2BD7               	goto	l9729
  7801  0BD2                     l9725:	
  7802  0BD2  08A9               	movf	(_RF_Data^(0+384)+9),f
  7803  0BD3  1D03               	skipz
  7804  0BD4  2BD7               	goto	l9729
  7805                           
  7806                           ;RF_Control_B1.c: 410: RF_Data[9] = 0x01;
  7807  0BD5  01A9               	clrf	(_RF_Data^(0+384)+9)
  7808  0BD6  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7809  0BD7                     l9729:	
  7810                           
  7811                           ;RF_Control_B1.c: 411: }
  7812                           ;RF_Control_B1.c: 412: setProductData(9, RF_Data[9]);
  7813  0BD7  0829               	movf	(_RF_Data^(0+384)+9),w
  7814  0BD8  0020               	movlb	0	; select bank0
  7815  0BD9  00E7               	movwf	??_setRFSW_AdjControl
  7816  0BDA  0867               	movf	??_setRFSW_AdjControl,w
  7817  0BDB  00DA               	movwf	setProductData@value
  7818  0BDC  3009               	movlw	9
  7819  0BDD  319B  23EB  318B   	fcall	_setProductData
  7820                           
  7821                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7822  0BE0  0023               	movlb	3	; select bank3
  7823  0BE1  0829               	movf	(_RF_Data^(0+384)+9),w
  7824  0BE2  0020               	movlb	0	; select bank0
  7825  0BE3  00E7               	movwf	??_setRFSW_AdjControl
  7826  0BE4  0867               	movf	??_setRFSW_AdjControl,w
  7827  0BE5  00DA               	movwf	setProductData@value
  7828  0BE6  086A               	movf	setRFSW_AdjControl@sw,w
  7829  0BE7  3E14               	addlw	20
  7830  0BE8  319B  23EB  318B   	fcall	_setProductData
  7831                           
  7832                           ;RF_Control_B1.c: 415: if (status == 1) {
  7833  0BEB  0020               	movlb	0	; select bank0
  7834  0BEC  0869               	movf	setRFSW_AdjControl@status,w
  7835  0BED  3A01               	xorlw	1
  7836  0BEE  1D03               	skipz
  7837  0BEF  2C08               	goto	l9737
  7838                           
  7839                           ;RF_Control_B1.c: 416: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7840  0BF0  0023               	movlb	3	; select bank3
  7841  0BF1  0829               	movf	(_RF_Data^(0+384)+9),w
  7842  0BF2  3189  213B  318B   	fcall	_getDimmerLights_PercentToValue
  7843  0BF5  0020               	movlb	0	; select bank0
  7844  0BF6  00E7               	movwf	??_setRFSW_AdjControl
  7845  0BF7  0867               	movf	??_setRFSW_AdjControl,w
  7846  0BF8  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7847  0BF9  086A               	movf	setRFSW_AdjControl@sw,w
  7848  0BFA  319D  25FB  318B   	fcall	_setDimmerIntr_MaxmumValue
  7849                           
  7850                           ;RF_Control_B1.c: 417: setDimmerIntr_Dimming_RF(sw, 1);
  7851  0BFD  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7852  0BFE  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7853  0BFF  0020               	movlb	0	; select bank0
  7854  0C00  086A               	movf	setRFSW_AdjControl@sw,w
  7855  0C01  3191  2152  318B   	fcall	_setDimmerIntr_Dimming_RF
  7856                           
  7857                           ;RF_Control_B1.c: 418: setTxData();
  7858  0C04  3186  26CC  318B   	fcall	_setTxData
  7859                           
  7860                           ;RF_Control_B1.c: 420: } else if (status == 0) {
  7861  0C07  2C1C               	goto	l2216
  7862  0C08                     l9737:	
  7863  0C08  0020               	movlb	0	; select bank0
  7864  0C09  08E9               	movf	setRFSW_AdjControl@status,f
  7865  0C0A  1D03               	skipz
  7866  0C0B  2C1C               	goto	l2216
  7867                           
  7868                           ;RF_Control_B1.c: 424: setDimmerLights_DimmingRun(sw, 1);
  7869  0C0C  01F4               	clrf	setDimmerLights_DimmingRun@command
  7870  0C0D  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7871  0C0E  086A               	movf	setRFSW_AdjControl@sw,w
  7872  0C0F  319E  262A  318B   	fcall	_setDimmerLights_DimmingRun
  7873                           
  7874                           ;RF_Control_B1.c: 425: setDimmerLights_SwOn(sw);
  7875  0C12  0020               	movlb	0	; select bank0
  7876  0C13  086A               	movf	setRFSW_AdjControl@sw,w
  7877  0C14  3196  268D  318B   	fcall	_setDimmerLights_SwOn
  7878                           
  7879                           ;RF_Control_B1.c: 426: setDimmerLights_SwOff(sw);
  7880  0C17  0020               	movlb	0	; select bank0
  7881  0C18  086A               	movf	setRFSW_AdjControl@sw,w
  7882  0C19  3194  240E  318B   	fcall	_setDimmerLights_SwOff
  7883  0C1C                     l2216:	
  7884                           
  7885                           ;RF_Control_B1.c: 427: }
  7886                           ;RF_Control_B1.c: 429: setProductData(11, sw);
  7887  0C1C  0020               	movlb	0	; select bank0
  7888  0C1D  086A               	movf	setRFSW_AdjControl@sw,w
  7889  0C1E  00E7               	movwf	??_setRFSW_AdjControl
  7890  0C1F  0867               	movf	??_setRFSW_AdjControl,w
  7891  0C20  00DA               	movwf	setProductData@value
  7892  0C21  300B               	movlw	11
  7893  0C22  319B  23EB  318B   	fcall	_setProductData
  7894                           
  7895                           ;RF_Control_B1.c: 430: setProductData(17, product->Data[26 + sw]);
  7896  0C25  0020               	movlb	0	; select bank0
  7897  0C26  086A               	movf	setRFSW_AdjControl@sw,w
  7898  0C27  3E1A               	addlw	26
  7899  0C28  076F               	addwf	_product,w
  7900  0C29  00E7               	movwf	??_setRFSW_AdjControl
  7901  0C2A  0867               	movf	??_setRFSW_AdjControl,w
  7902  0C2B  0086               	movwf	6
  7903  0C2C  3002               	movlw	2	; select bank4/5
  7904  0C2D  0087               	movwf	7
  7905  0C2E  0801               	movf	1,w
  7906  0C2F  00E8               	movwf	??_setRFSW_AdjControl+1
  7907  0C30  0868               	movf	??_setRFSW_AdjControl+1,w
  7908  0C31  00DA               	movwf	setProductData@value
  7909  0C32  3011               	movlw	17
  7910  0C33  319B  23EB  318B   	fcall	_setProductData
  7911                           
  7912                           ;RF_Control_B1.c: 432: setMemory_Modify(1);
  7913  0C36  3001               	movlw	1
  7914  0C37  319C  24A3         	fcall	_setMemory_Modify
  7915  0C39  0008               	return
  7916  0C3A                     __end_of_setRFSW_AdjControl:	
  7917                           
  7918                           	psect	text31
  7919  1CA3                     __ptext31:	
  7920 ;; *************** function _setMemory_Modify *****************
  7921 ;; Defined at:
  7922 ;;		line 1073 in file "../src/MCU_B1.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  command         1    wreg     unsigned char 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  command         1    3[COMMON] unsigned char 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;		None               void
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;Total ram usage:        2 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    3
  7943 ;; This function calls:
  7944 ;;		Nothing
  7945 ;; This function is called by:
  7946 ;;		_setLog_Code
  7947 ;;		_setRFSW_AdjControl
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           
  7952                           ;psect for function _setMemory_Modify
  7953  1CA3                     _setMemory_Modify:	
  7954                           
  7955                           ;incstack = 0
  7956                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7957                           ;setMemory_Modify@command stored from wreg
  7958  1CA3  00F3               	movwf	setMemory_Modify@command
  7959                           
  7960                           ;MCU_B1.c: 1074: Memory.Modify = command == 1 ? 1 : 0;
  7961  1CA4  0873               	movf	setMemory_Modify@command,w
  7962  1CA5  3A01               	xorlw	1
  7963  1CA6  3000               	movlw	0
  7964  1CA7  1903               	skipnz
  7965  1CA8  3001               	movlw	1
  7966  1CA9  00F2               	movwf	??_setMemory_Modify
  7967  1CAA  0024               	movlb	4	; select bank4
  7968  1CAB  0844               	movf	(_Memory^(0+512)+36),w
  7969  1CAC  0672               	xorwf	??_setMemory_Modify,w
  7970  1CAD  39FE               	andlw	-2
  7971  1CAE  0672               	xorwf	??_setMemory_Modify,w
  7972  1CAF  00C4               	movwf	(_Memory^(0+512)+36)
  7973                           
  7974                           ;MCU_B1.c: 1075: Memory.Time = 0;
  7975  1CB0  01C2               	clrf	(_Memory^(0+512)+34)
  7976  1CB1  01C3               	clrf	((_Memory+1)^(0+512)+34)
  7977  1CB2  0008               	return
  7978  1CB3                     __end_of_setMemory_Modify:	
  7979                           
  7980                           	psect	text32
  7981  1E2A                     __ptext32:	
  7982 ;; *************** function _setDimmerLights_DimmingRun *****************
  7983 ;; Defined at:
  7984 ;;		line 999 in file "../src/Dimmer_B1.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;  lights          1    wreg     unsigned char 
  7987 ;;  command         1    4[COMMON] unsigned char 
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;  lights          1    6[COMMON] unsigned char 
  7990 ;; Return value:  Size  Location     Type
  7991 ;;		None               void
  7992 ;; Registers used:
  7993 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7999 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;Total ram usage:        3 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; Hardware stack levels required when called:    4
  8006 ;; This function calls:
  8007 ;;		_DimmerLights_SelectPointer
  8008 ;; This function is called by:
  8009 ;;		_setRFSW_AdjControl
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           
  8014                           ;psect for function _setDimmerLights_DimmingRun
  8015  1E2A                     _setDimmerLights_DimmingRun:	
  8016                           
  8017                           ;incstack = 0
  8018                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8019                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8020  1E2A  00F6               	movwf	setDimmerLights_DimmingRun@lights
  8021                           
  8022                           ;Dimmer_B1.c: 1000: DimmerLights_SelectPointer(lights);
  8023  1E2B  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8024  1E2C  319D  2567         	fcall	_DimmerLights_SelectPointer
  8025                           
  8026                           ;Dimmer_B1.c: 1001: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8027  1E2E  0874               	movf	setDimmerLights_DimmingRun@command,w
  8028  1E2F  3A01               	xorlw	1
  8029  1E30  3000               	movlw	0
  8030  1E31  1903               	skipnz
  8031  1E32  3001               	movlw	1
  8032  1E33  00F5               	movwf	??_setDimmerLights_DimmingRun
  8033  1E34  0020               	movlb	0	; select bank0
  8034  1E35  0A6D               	incf	_DimmerLights,w
  8035  1E36  0086               	movwf	6
  8036  1E37  3001               	movlw	1	; select bank2/3
  8037  1E38  0087               	movwf	7
  8038  1E39  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8039  1E3A  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8040  1E3B  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8041  1E3C  0801               	movf	1,w
  8042  1E3D  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8043  1E3E  39BF               	andlw	-65
  8044  1E3F  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8045  1E40  0081               	movwf	1
  8046  1E41  0008               	return
  8047  1E42                     __end_of_setDimmerLights_DimmingRun:	
  8048                           
  8049                           	psect	text33
  8050  1CE4                     __ptext33:	
  8051 ;; *************** function _getRF_KeyStatus *****************
  8052 ;; Defined at:
  8053 ;;		line 166 in file "../src/RF_Control_B1.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;		None
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;  key             1    3[COMMON] unsigned char 
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      unsigned char 
  8060 ;; Registers used:
  8061 ;;		wreg, status,2
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;Total ram usage:        3 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; Hardware stack levels required when called:    3
  8074 ;; This function calls:
  8075 ;;		Nothing
  8076 ;; This function is called by:
  8077 ;;		_setRF_Main
  8078 ;; This function uses a non-reentrant model
  8079 ;;
  8080                           
  8081                           
  8082                           ;psect for function _getRF_KeyStatus
  8083  1CE4                     _getRF_KeyStatus:	
  8084                           
  8085                           ;RF_Control_B1.c: 167: char key = 0;
  8086                           
  8087                           ;incstack = 0
  8088                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8089  1CE4  01F3               	clrf	getRF_KeyStatus@key
  8090                           
  8091                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8092  1CE5  01F4               	clrf	_getRF_KeyStatus$4658
  8093  1CE6  0AF4               	incf	_getRF_KeyStatus$4658,f
  8094  1CE7  0020               	movlb	0	; select bank0
  8095  1CE8  1F0C               	btfss	12,6	;volatile
  8096  1CE9  1A0C               	btfsc	12,4	;volatile
  8097  1CEA  2CEF               	goto	l10171
  8098  1CEB  1C0C               	btfss	12,0	;volatile
  8099  1CEC  188D               	btfsc	13,1	;volatile
  8100  1CED  2CEF               	goto	l10171
  8101  1CEE  01F4               	clrf	_getRF_KeyStatus$4658
  8102  1CEF                     l10171:	
  8103  1CEF  0874               	movf	_getRF_KeyStatus$4658,w
  8104  1CF0  00F2               	movwf	??_getRF_KeyStatus
  8105  1CF1  0872               	movf	??_getRF_KeyStatus,w
  8106  1CF2  00F3               	movwf	getRF_KeyStatus@key
  8107                           
  8108                           ;RF_Control_B1.c: 179: return key;
  8109  1CF3  0873               	movf	getRF_KeyStatus@key,w
  8110  1CF4  0008               	return
  8111  1CF5                     __end_of_getRF_KeyStatus:	
  8112                           
  8113                           	psect	text34
  8114  1C93                     __ptext34:	
  8115 ;; *************** function _getBuz_GO *****************
  8116 ;; Defined at:
  8117 ;;		line 82 in file "../src/Buzzer_B1.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;		None
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;  i               2    6[COMMON] int 
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  2    2[COMMON] int 
  8124 ;; Registers used:
  8125 ;;		wreg, status,2, status,0
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8131 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8133 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;Total ram usage:        6 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    3
  8138 ;; This function calls:
  8139 ;;		Nothing
  8140 ;; This function is called by:
  8141 ;;		_setRF_Main
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           
  8146                           ;psect for function _getBuz_GO
  8147  1C93                     _getBuz_GO:	
  8148                           
  8149                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8150                           
  8151                           ;incstack = 0
  8152                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8153  1C93  0021               	movlb	1	; select bank1
  8154  1C94  0C2E               	rrf	_Buz1^(0+128),w
  8155  1C95  3901               	andlw	1
  8156  1C96  00F4               	movwf	??_getBuz_GO
  8157  1C97  01F5               	clrf	??_getBuz_GO+1
  8158  1C98  0874               	movf	??_getBuz_GO,w
  8159  1C99  00F6               	movwf	getBuz_GO@i
  8160  1C9A  0875               	movf	??_getBuz_GO+1,w
  8161  1C9B  00F7               	movwf	getBuz_GO@i+1
  8162                           
  8163                           ;Buzzer_B1.c: 84: return i;
  8164  1C9C  0877               	movf	getBuz_GO@i+1,w
  8165  1C9D  01F3               	clrf	?_getBuz_GO+1
  8166  1C9E  07F3               	addwf	?_getBuz_GO+1,f
  8167  1C9F  0876               	movf	getBuz_GO@i,w
  8168  1CA0  01F2               	clrf	?_getBuz_GO
  8169  1CA1  07F2               	addwf	?_getBuz_GO,f
  8170  1CA2  0008               	return
  8171  1CA3                     __end_of_getBuz_GO:	
  8172                           
  8173                           	psect	text35
  8174  1C35                     __ptext35:	
  8175 ;; *************** function _RF_RxDisable *****************
  8176 ;; Defined at:
  8177 ;;		line 154 in file "../src/RF_Control_B1.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;		None
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;		None
  8182 ;; Return value:  Size  Location     Type
  8183 ;;		None               void
  8184 ;; Registers used:
  8185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;Total ram usage:        0 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; Hardware stack levels required when called:    5
  8198 ;; This function calls:
  8199 ;;		_CC2500_WriteCommand
  8200 ;; This function is called by:
  8201 ;;		_setRF_Main
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           
  8206                           ;psect for function _RF_RxDisable
  8207  1C35                     _RF_RxDisable:	
  8208                           
  8209                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8210                           
  8211                           ;incstack = 0
  8212                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8213  1C35  0021               	movlb	1	; select bank1
  8214  1C36  18A0               	btfsc	_RF1^(0+128),1
  8215  1C37  2C3A               	goto	l2158
  8216  1C38  1DA0               	btfss	_RF1^(0+128),3
  8217  1C39  0008               	return
  8218  1C3A                     l2158:	
  8219                           
  8220                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8221  1C3A  11A0               	bcf	_RF1^(0+128),3
  8222                           
  8223                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8224  1C3B  10A0               	bcf	_RF1^(0+128),1
  8225                           
  8226                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8227  1C3C  3036               	movlw	54
  8228  1C3D  319E  2642  319C   	fcall	_CC2500_WriteCommand
  8229                           
  8230                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8231  1C40  303A               	movlw	58
  8232  1C41  319E  2642         	fcall	_CC2500_WriteCommand
  8233  1C43  0008               	return
  8234  1C44                     __end_of_RF_RxDisable:	
  8235                           
  8236                           	psect	text36
  8237  0A6D                     __ptext36:	
  8238 ;; *************** function _CC2500_TxData *****************
  8239 ;; Defined at:
  8240 ;;		line 32 in file "../src/CC2500_B1.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;		None
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;  loop_e          1    7[COMMON] unsigned char 
  8245 ;; Return value:  Size  Location     Type
  8246 ;;		None               void
  8247 ;; Registers used:
  8248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8256 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;Total ram usage:        2 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    5
  8261 ;; This function calls:
  8262 ;;		_CC2500_WriteByte
  8263 ;;		_CC2500_WriteCommand
  8264 ;;		_RF_Timeout_Counter
  8265 ;;		_setRF_TimeoutCleared
  8266 ;; This function is called by:
  8267 ;;		_setRF_Main
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           
  8272                           ;psect for function _CC2500_TxData
  8273  0A6D                     _CC2500_TxData:	
  8274                           
  8275                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8276                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8277                           
  8278                           ;incstack = 0
  8279                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8280  0A6D  3036               	movlw	54
  8281  0A6E  319E  2642  318A   	fcall	_CC2500_WriteCommand
  8282                           
  8283                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8284  0A71  303B               	movlw	59
  8285  0A72  319E  2642  318A   	fcall	_CC2500_WriteCommand
  8286                           
  8287                           ;CC2500_B1.c: 38: RC4 = 0;
  8288  0A75  0020               	movlb	0	; select bank0
  8289  0A76  120E               	bcf	14,4	;volatile
  8290                           
  8291                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8292  0A77  307F               	movlw	127
  8293  0A78  00F6               	movwf	??_CC2500_TxData
  8294  0A79  0876               	movf	??_CC2500_TxData,w
  8295  0A7A  0021               	movlb	1	; select bank1
  8296  0A7B  00C5               	movwf	_SPI0Buffer^(0+128)
  8297                           
  8298                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8299  0A7C  2A80               	goto	l9967
  8300  0A7D                     l9965:	
  8301                           
  8302                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8303  0A7D  319D  25A6  318A   	fcall	_RF_Timeout_Counter
  8304  0A80                     l9967:	
  8305  0A80  0020               	movlb	0	; select bank0
  8306  0A81  1D0E               	btfss	14,2	;volatile
  8307  0A82  2A86               	goto	l9971
  8308  0A83  0021               	movlb	1	; select bank1
  8309  0A84  1F21               	btfss	(_RF1^(0+128)+1),6
  8310  0A85  2A7D               	goto	l9965
  8311  0A86                     l9971:	
  8312                           
  8313                           ;CC2500_B1.c: 42: };
  8314                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8315  0A86  319A  22DD  318A   	fcall	_setRF_TimeoutCleared
  8316                           
  8317                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8318  0A89  319E  2612  318A   	fcall	_CC2500_WriteByte
  8319                           
  8320                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8321  0A8C  0021               	movlb	1	; select bank1
  8322  0A8D  0847               	movf	_Tx_Length^(0+128),w
  8323  0A8E  00F6               	movwf	??_CC2500_TxData
  8324  0A8F  0876               	movf	??_CC2500_TxData,w
  8325  0A90  00C5               	movwf	_SPI0Buffer^(0+128)
  8326                           
  8327                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8328  0A91  319E  2612  318A   	fcall	_CC2500_WriteByte
  8329                           
  8330                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8331  0A94  01F7               	clrf	CC2500_TxData@loop_e
  8332  0A95                     l9985:	
  8333  0A95  0021               	movlb	1	; select bank1
  8334  0A96  0847               	movf	_Tx_Length^(0+128),w
  8335  0A97  0277               	subwf	CC2500_TxData@loop_e,w
  8336  0A98  1803               	btfsc	3,0
  8337  0A99  2AAC               	goto	l255
  8338                           
  8339                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8340  0A9A  0877               	movf	CC2500_TxData@loop_e,w
  8341  0A9B  3EA0               	addlw	_RF_Data& (0+255)
  8342  0A9C  0086               	movwf	6
  8343  0A9D  3001               	movlw	1	; select bank3/4
  8344  0A9E  0087               	movwf	7
  8345  0A9F  0801               	movf	1,w
  8346  0AA0  00F6               	movwf	??_CC2500_TxData
  8347  0AA1  0876               	movf	??_CC2500_TxData,w
  8348  0AA2  0021               	movlb	1	; select bank1
  8349  0AA3  00C5               	movwf	_SPI0Buffer^(0+128)
  8350                           
  8351                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8352  0AA4  319E  2612  318A   	fcall	_CC2500_WriteByte
  8353  0AA7  3001               	movlw	1
  8354  0AA8  00F6               	movwf	??_CC2500_TxData
  8355  0AA9  0876               	movf	??_CC2500_TxData,w
  8356  0AAA  07F7               	addwf	CC2500_TxData@loop_e,f
  8357  0AAB  2A95               	goto	l9985
  8358  0AAC                     l255:	
  8359                           
  8360                           ;CC2500_B1.c: 51: }
  8361                           ;CC2500_B1.c: 52: RC4 = 1;
  8362  0AAC  0020               	movlb	0	; select bank0
  8363  0AAD  160E               	bsf	14,4	;volatile
  8364                           
  8365                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8366  0AAE  3035               	movlw	53
  8367  0AAF  319E  2642  318A   	fcall	_CC2500_WriteCommand
  8368                           
  8369                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8370  0AB2  2AB6               	goto	l9991
  8371  0AB3                     l9989:	
  8372                           
  8373                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8374  0AB3  319D  25A6  318A   	fcall	_RF_Timeout_Counter
  8375  0AB6                     l9991:	
  8376  0AB6  0020               	movlb	0	; select bank0
  8377  0AB7  180D               	btfsc	13,0	;volatile
  8378  0AB8  2ABC               	goto	l9995
  8379  0AB9  0021               	movlb	1	; select bank1
  8380  0ABA  1F21               	btfss	(_RF1^(0+128)+1),6
  8381  0ABB  2AB3               	goto	l9989
  8382  0ABC                     l9995:	
  8383                           
  8384                           ;CC2500_B1.c: 56: };
  8385                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8386  0ABC  319A  22DD  318A   	fcall	_setRF_TimeoutCleared
  8387                           
  8388                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8389  0ABF  2AC3               	goto	l9999
  8390  0AC0                     l9997:	
  8391                           
  8392                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8393  0AC0  319D  25A6  318A   	fcall	_RF_Timeout_Counter
  8394  0AC3                     l9999:	
  8395  0AC3  0020               	movlb	0	; select bank0
  8396  0AC4  1C0D               	btfss	13,0	;volatile
  8397  0AC5  2AC9               	goto	l10003
  8398  0AC6  0021               	movlb	1	; select bank1
  8399  0AC7  1F21               	btfss	(_RF1^(0+128)+1),6
  8400  0AC8  2AC0               	goto	l9997
  8401  0AC9                     l10003:	
  8402                           
  8403                           ;CC2500_B1.c: 61: };
  8404                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8405  0AC9  319A  22DD  318A   	fcall	_setRF_TimeoutCleared
  8406                           
  8407                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8408  0ACC  3036               	movlw	54
  8409  0ACD  319E  2642  318A   	fcall	_CC2500_WriteCommand
  8410                           
  8411                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8412  0AD0  303B               	movlw	59
  8413  0AD1  319E  2642         	fcall	_CC2500_WriteCommand
  8414                           
  8415                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8416  0AD3  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8417  0AD4  0008               	return
  8418  0AD5                     __end_of_CC2500_TxData:	
  8419                           
  8420                           	psect	text37
  8421  0875                     __ptext37:	
  8422 ;; *************** function _CC2500_RxData *****************
  8423 ;; Defined at:
  8424 ;;		line 73 in file "../src/CC2500_B1.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;		None
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;  loop_f          1    7[COMMON] unsigned char 
  8429 ;; Return value:  Size  Location     Type
  8430 ;;		None               void
  8431 ;; Registers used:
  8432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;Total ram usage:        2 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    5
  8445 ;; This function calls:
  8446 ;;		_CC2500_ReadByte
  8447 ;;		_CC2500_ReadStatus
  8448 ;;		_CC2500_WriteByte
  8449 ;;		_CC2500_WriteCommand
  8450 ;;		_RF_Timeout_Counter
  8451 ;;		_setRF_TimeoutCleared
  8452 ;; This function is called by:
  8453 ;;		_setRF_Main
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function _CC2500_RxData
  8459  0875                     _CC2500_RxData:	
  8460                           
  8461                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8462                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8463                           
  8464                           ;incstack = 0
  8465                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8466  0875  0020               	movlb	0	; select bank0
  8467  0876  180D               	btfsc	13,0	;volatile
  8468  0877  0008               	return
  8469                           
  8470                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8471  0878  303B               	movlw	59
  8472  0879  3190  2095  3188   	fcall	_CC2500_ReadStatus
  8473                           
  8474                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8475  087C  0021               	movlb	1	; select bank1
  8476  087D  084A               	movf	_s_data^(0+128),w
  8477  087E  1903               	btfsc	3,2
  8478  087F  0008               	return
  8479                           
  8480                           ;CC2500_B1.c: 90: RC4 = 0;
  8481  0880  0020               	movlb	0	; select bank0
  8482  0881  120E               	bcf	14,4	;volatile
  8483                           
  8484                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8485  0882  30FF               	movlw	255
  8486  0883  00F6               	movwf	??_CC2500_RxData
  8487  0884  0876               	movf	??_CC2500_RxData,w
  8488  0885  0021               	movlb	1	; select bank1
  8489  0886  00C5               	movwf	_SPI0Buffer^(0+128)
  8490                           
  8491                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8492  0887  288B               	goto	l10023
  8493  0888                     l10021:	
  8494                           
  8495                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8496  0888  319D  25A6  3188   	fcall	_RF_Timeout_Counter
  8497  088B                     l10023:	
  8498  088B  0020               	movlb	0	; select bank0
  8499  088C  1D0E               	btfss	14,2	;volatile
  8500  088D  2891               	goto	l10027
  8501  088E  0021               	movlb	1	; select bank1
  8502  088F  1F21               	btfss	(_RF1^(0+128)+1),6
  8503  0890  2888               	goto	l10021
  8504  0891                     l10027:	
  8505                           
  8506                           ;CC2500_B1.c: 95: };
  8507                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8508  0891  319A  22DD  3188   	fcall	_setRF_TimeoutCleared
  8509                           
  8510                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8511  0894  319E  2612  3188   	fcall	_CC2500_WriteByte
  8512                           
  8513                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8514  0897  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8515                           
  8516                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8517  089A  0021               	movlb	1	; select bank1
  8518  089B  0845               	movf	_SPI0Buffer^(0+128),w
  8519  089C  00F6               	movwf	??_CC2500_RxData
  8520  089D  0876               	movf	??_CC2500_RxData,w
  8521  089E  00C4               	movwf	_Rx_Length^(0+128)
  8522                           
  8523                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8524  089F  01F7               	clrf	CC2500_RxData@loop_f
  8525  08A0                     l10043:	
  8526  08A0  0844               	movf	_Rx_Length^(0+128),w
  8527  08A1  0277               	subwf	CC2500_RxData@loop_f,w
  8528  08A2  1803               	btfsc	3,0
  8529  08A3  28B6               	goto	l10045
  8530                           
  8531                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8532  08A4  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8533                           
  8534                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8535  08A7  0021               	movlb	1	; select bank1
  8536  08A8  0845               	movf	_SPI0Buffer^(0+128),w
  8537  08A9  00F6               	movwf	??_CC2500_RxData
  8538  08AA  0877               	movf	CC2500_RxData@loop_f,w
  8539  08AB  3EA0               	addlw	_RF_Data& (0+255)
  8540  08AC  0086               	movwf	6
  8541  08AD  3001               	movlw	1	; select bank3/4
  8542  08AE  0087               	movwf	7
  8543  08AF  0876               	movf	??_CC2500_RxData,w
  8544  08B0  0081               	movwf	1
  8545  08B1  3001               	movlw	1
  8546  08B2  00F6               	movwf	??_CC2500_RxData
  8547  08B3  0876               	movf	??_CC2500_RxData,w
  8548  08B4  07F7               	addwf	CC2500_RxData@loop_f,f
  8549  08B5  28A0               	goto	l10043
  8550  08B6                     l10045:	
  8551                           
  8552                           ;CC2500_B1.c: 104: }
  8553                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8554  08B6  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8555                           
  8556                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8557  08B9  0021               	movlb	1	; select bank1
  8558  08BA  0845               	movf	_SPI0Buffer^(0+128),w
  8559  08BB  00F6               	movwf	??_CC2500_RxData
  8560  08BC  0876               	movf	??_CC2500_RxData,w
  8561  08BD  00C3               	movwf	_RSSI^(0+128)
  8562                           
  8563                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8564  08BE  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8565                           
  8566                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8567  08C1  0021               	movlb	1	; select bank1
  8568  08C2  0845               	movf	_SPI0Buffer^(0+128),w
  8569  08C3  00F6               	movwf	??_CC2500_RxData
  8570  08C4  0876               	movf	??_CC2500_RxData,w
  8571  08C5  00BF               	movwf	_CRC^(0+128)
  8572                           
  8573                           ;CC2500_B1.c: 109: RC4 = 1;
  8574  08C6  0020               	movlb	0	; select bank0
  8575  08C7  160E               	bsf	14,4	;volatile
  8576                           
  8577                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8578  08C8  0021               	movlb	1	; select bank1
  8579  08C9  1BBF               	btfsc	_CRC^(0+128),7
  8580                           
  8581                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8582  08CA  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8583                           
  8584                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8585  08CB  11A0               	bcf	_RF1^(0+128),3
  8586                           
  8587                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8588  08CC  14A0               	bsf	_RF1^(0+128),1
  8589                           
  8590                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8591  08CD  3036               	movlw	54
  8592  08CE  319E  2642  3188   	fcall	_CC2500_WriteCommand
  8593                           
  8594                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8595  08D1  303A               	movlw	58
  8596  08D2  319E  2642         	fcall	_CC2500_WriteCommand
  8597  08D4  0021               	movlb	1	; select bank1
  8598  08D5  0008               	return
  8599  08D6                     __end_of_CC2500_RxData:	
  8600                           
  8601                           	psect	text38
  8602  1095                     __ptext38:	
  8603 ;; *************** function _CC2500_ReadStatus *****************
  8604 ;; Defined at:
  8605 ;;		line 308 in file "../src/CC2500_B1.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  status_addr     1    wreg     unsigned char 
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;  status_addr     1    5[COMMON] unsigned char 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;		None               void
  8612 ;; Registers used:
  8613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;Total ram usage:        2 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    4
  8626 ;; This function calls:
  8627 ;;		_CC2500_ReadByte
  8628 ;;		_CC2500_WriteByte
  8629 ;;		_RF_Timeout_Counter
  8630 ;;		_setRF_TimeoutCleared
  8631 ;; This function is called by:
  8632 ;;		_CC2500_RxData
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           
  8637                           ;psect for function _CC2500_ReadStatus
  8638  1095                     _CC2500_ReadStatus:	
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8642                           ;CC2500_ReadStatus@status_addr stored from wreg
  8643  1095  00F5               	movwf	CC2500_ReadStatus@status_addr
  8644                           
  8645                           ;CC2500_B1.c: 309: RC4 = 0;
  8646  1096  0020               	movlb	0	; select bank0
  8647  1097  120E               	bcf	14,4	;volatile
  8648                           
  8649                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8650  1098  0875               	movf	CC2500_ReadStatus@status_addr,w
  8651  1099  3EC0               	addlw	192
  8652  109A  00F4               	movwf	??_CC2500_ReadStatus
  8653  109B  0874               	movf	??_CC2500_ReadStatus,w
  8654  109C  0021               	movlb	1	; select bank1
  8655  109D  00C5               	movwf	_SPI0Buffer^(0+128)
  8656                           
  8657                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8658  109E  28A2               	goto	l9749
  8659  109F                     l9747:	
  8660                           
  8661                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8662  109F  319D  25A6  3190   	fcall	_RF_Timeout_Counter
  8663  10A2                     l9749:	
  8664  10A2  0020               	movlb	0	; select bank0
  8665  10A3  1D0E               	btfss	14,2	;volatile
  8666  10A4  28A8               	goto	l9753
  8667  10A5  0021               	movlb	1	; select bank1
  8668  10A6  1F21               	btfss	(_RF1^(0+128)+1),6
  8669  10A7  289F               	goto	l9747
  8670  10A8                     l9753:	
  8671                           
  8672                           ;CC2500_B1.c: 314: };
  8673                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8674  10A8  319A  22DD  3190   	fcall	_setRF_TimeoutCleared
  8675                           
  8676                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8677  10AB  319E  2612  3190   	fcall	_CC2500_WriteByte
  8678                           
  8679                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8680  10AE  319E  26C8         	fcall	_CC2500_ReadByte
  8681                           
  8682                           ;CC2500_B1.c: 319: RC4 = 1;
  8683  10B0  0020               	movlb	0	; select bank0
  8684  10B1  160E               	bsf	14,4	;volatile
  8685                           
  8686                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8687  10B2  0021               	movlb	1	; select bank1
  8688  10B3  0845               	movf	_SPI0Buffer^(0+128),w
  8689  10B4  00F4               	movwf	??_CC2500_ReadStatus
  8690  10B5  0874               	movf	??_CC2500_ReadStatus,w
  8691  10B6  00CA               	movwf	_s_data^(0+128)
  8692  10B7  0008               	return
  8693  10B8                     __end_of_CC2500_ReadStatus:	
  8694                           
  8695                           	psect	text39
  8696  1EC8                     __ptext39:	
  8697 ;; *************** function _CC2500_ReadByte *****************
  8698 ;; Defined at:
  8699 ;;		line 242 in file "../src/CC2500_B1.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;		None
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  loop_b          1    3[COMMON] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;		None               void
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;Total ram usage:        2 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    3
  8720 ;; This function calls:
  8721 ;;		Nothing
  8722 ;; This function is called by:
  8723 ;;		_CC2500_RxData
  8724 ;;		_CC2500_ReadStatus
  8725 ;;		_CC2500_ReadREG
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function _CC2500_ReadByte
  8731  1EC8                     _CC2500_ReadByte:	
  8732                           
  8733                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8734                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8735                           
  8736                           ;incstack = 0
  8737                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8738  1EC8  01F3               	clrf	CC2500_ReadByte@loop_b
  8739  1EC9                     L3:	
  8740  1EC9  3008               	movlw	8
  8741  1ECA  0273               	subwf	CC2500_ReadByte@loop_b,w
  8742  1ECB  1803               	btfsc	3,0
  8743  1ECC  0008               	return
  8744                           
  8745                           ;CC2500_B1.c: 245: RC1 = 1;
  8746  1ECD  0020               	movlb	0	; select bank0
  8747  1ECE  148E               	bsf	14,1	;volatile
  8748                           
  8749                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8750  1ECF  1003               	clrc
  8751  1ED0  0021               	movlb	1	; select bank1
  8752  1ED1  0DC5               	rlf	_SPI0Buffer^(0+128),f
  8753                           
  8754                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8755  1ED2  0020               	movlb	0	; select bank0
  8756  1ED3  1D0E               	btfss	14,2	;volatile
  8757  1ED4  2ED8               	goto	l9629
  8758                           
  8759                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8760  1ED5  0021               	movlb	1	; select bank1
  8761  1ED6  1445               	bsf	_SPI0Buffer^(0+128),0
  8762  1ED7  2EDD               	goto	l9631
  8763  1ED8                     l9629:	
  8764                           
  8765                           ;CC2500_B1.c: 249: else
  8766                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8767  1ED8  30FE               	movlw	254
  8768  1ED9  00F2               	movwf	??_CC2500_ReadByte
  8769  1EDA  0872               	movf	??_CC2500_ReadByte,w
  8770  1EDB  0021               	movlb	1	; select bank1
  8771  1EDC  05C5               	andwf	_SPI0Buffer^(0+128),f
  8772  1EDD                     l9631:	
  8773                           
  8774                           ;CC2500_B1.c: 251: RC1 = 0;
  8775  1EDD  0020               	movlb	0	; select bank0
  8776  1EDE  108E               	bcf	14,1	;volatile
  8777  1EDF  3001               	movlw	1
  8778  1EE0  00F2               	movwf	??_CC2500_ReadByte
  8779  1EE1  0872               	movf	??_CC2500_ReadByte,w
  8780  1EE2  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8781  1EE3  2EC9               	goto	L3
  8782  1EE4                     __end_of_CC2500_ReadByte:	
  8783                           
  8784                           	psect	text40
  8785  1DBB                     __ptext40:	
  8786 ;; *************** function _CC2500_PowerOnInitial *****************
  8787 ;; Defined at:
  8788 ;;		line 126 in file "../src/CC2500_B1.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;		None
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;		None
  8793 ;; Return value:  Size  Location     Type
  8794 ;;		None               void
  8795 ;; Registers used:
  8796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;Total ram usage:        0 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:    6
  8809 ;; This function calls:
  8810 ;;		_CC2500_ClearRXFIFO
  8811 ;;		_CC2500_ClearTXFIFO
  8812 ;;		_CC2500_FrequencyCabr
  8813 ;;		_CC2500_InitPATable
  8814 ;;		_CC2500_InitSetREG
  8815 ;;		_CC2500_PowerRST
  8816 ;;		_CC2500_SIDLEMode
  8817 ;; This function is called by:
  8818 ;;		_setRF_Main
  8819 ;;		_main
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           
  8824                           ;psect for function _CC2500_PowerOnInitial
  8825  1DBB                     _CC2500_PowerOnInitial:	
  8826                           
  8827                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8828                           
  8829                           ;incstack = 0
  8830                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8831  1DBB  3193  2384  319D   	fcall	_CC2500_PowerRST
  8832                           
  8833                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8834  1DBE  3191  21A5  319D   	fcall	_CC2500_InitSetREG
  8835                           
  8836                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8837  1DC1  319F  271E  319D   	fcall	_CC2500_InitPATable
  8838                           
  8839                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8840  1DC4  319A  22E5  319D   	fcall	_CC2500_ClearTXFIFO
  8841                           
  8842                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8843  1DC7  319A  22E1  319D   	fcall	_CC2500_ClearRXFIFO
  8844                           
  8845                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8846  1DCA  319B  2371  319D   	fcall	_CC2500_FrequencyCabr
  8847                           
  8848                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8849  1DCD  319A  22E9         	fcall	_CC2500_SIDLEMode
  8850  1DCF  0008               	return
  8851  1DD0                     __end_of_CC2500_PowerOnInitial:	
  8852                           
  8853                           	psect	text41
  8854  1AE9                     __ptext41:	
  8855 ;; *************** function _CC2500_SIDLEMode *****************
  8856 ;; Defined at:
  8857 ;;		line 216 in file "../src/CC2500_B1.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;		None
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;		None
  8862 ;; Return value:  Size  Location     Type
  8863 ;;		None               void
  8864 ;; Registers used:
  8865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;Total ram usage:        0 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    5
  8878 ;; This function calls:
  8879 ;;		_CC2500_WriteCommand
  8880 ;; This function is called by:
  8881 ;;		_CC2500_PowerOnInitial
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           
  8886                           ;psect for function _CC2500_SIDLEMode
  8887  1AE9                     _CC2500_SIDLEMode:	
  8888                           
  8889                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8890                           
  8891                           ;incstack = 0
  8892                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8893  1AE9  3036               	movlw	54
  8894  1AEA  319E  2642         	fcall	_CC2500_WriteCommand
  8895  1AEC  0008               	return
  8896  1AED                     __end_of_CC2500_SIDLEMode:	
  8897                           
  8898                           	psect	text42
  8899  1384                     __ptext42:	
  8900 ;; *************** function _CC2500_PowerRST *****************
  8901 ;; Defined at:
  8902 ;;		line 139 in file "../src/CC2500_B1.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;		None
  8905 ;; Auto vars:     Size  Location     Type
  8906 ;;		None
  8907 ;; Return value:  Size  Location     Type
  8908 ;;		None               void
  8909 ;; Registers used:
  8910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8911 ;; Tracked objects:
  8912 ;;		On entry : 0/0
  8913 ;;		On exit  : 0/0
  8914 ;;		Unchanged: 0/0
  8915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;Total ram usage:        1 bytes
  8921 ;; Hardware stack levels used:    1
  8922 ;; Hardware stack levels required when called:    4
  8923 ;; This function calls:
  8924 ;;		_CC2500_WriteByte
  8925 ;;		_DelayTime_1us
  8926 ;;		_RF_Timeout_Counter
  8927 ;;		_setRF_TimeoutCleared
  8928 ;; This function is called by:
  8929 ;;		_CC2500_PowerOnInitial
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           
  8934                           ;psect for function _CC2500_PowerRST
  8935  1384                     _CC2500_PowerRST:	
  8936                           
  8937                           ;CC2500_B1.c: 140: RC1 = 0;
  8938                           
  8939                           ;incstack = 0
  8940                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8941  1384  0020               	movlb	0	; select bank0
  8942  1385  108E               	bcf	14,1	;volatile
  8943                           
  8944                           ;CC2500_B1.c: 141: RC0 = 0;
  8945  1386  100E               	bcf	14,0	;volatile
  8946                           
  8947                           ;CC2500_B1.c: 142: RC4 = 1;
  8948  1387  160E               	bsf	14,4	;volatile
  8949                           
  8950                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8951  1388  300A               	movlw	10
  8952  1389  00F2               	movwf	DelayTime_1us@count
  8953  138A  3000               	movlw	0
  8954  138B  00F3               	movwf	DelayTime_1us@count+1
  8955  138C  3190  20DD  3193   	fcall	_DelayTime_1us
  8956                           
  8957                           ;CC2500_B1.c: 144: RC4 = 0;
  8958  138F  0020               	movlb	0	; select bank0
  8959  1390  120E               	bcf	14,4	;volatile
  8960                           
  8961                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8962  1391  300A               	movlw	10
  8963  1392  00F2               	movwf	DelayTime_1us@count
  8964  1393  3000               	movlw	0
  8965  1394  00F3               	movwf	DelayTime_1us@count+1
  8966  1395  3190  20DD  3193   	fcall	_DelayTime_1us
  8967                           
  8968                           ;CC2500_B1.c: 146: RC4 = 1;
  8969  1398  0020               	movlb	0	; select bank0
  8970  1399  160E               	bsf	14,4	;volatile
  8971                           
  8972                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8973  139A  3028               	movlw	40
  8974  139B  00F2               	movwf	DelayTime_1us@count
  8975  139C  3000               	movlw	0
  8976  139D  00F3               	movwf	DelayTime_1us@count+1
  8977  139E  3190  20DD  3193   	fcall	_DelayTime_1us
  8978                           
  8979                           ;CC2500_B1.c: 148: RC4 = 0;
  8980  13A1  0020               	movlb	0	; select bank0
  8981  13A2  120E               	bcf	14,4	;volatile
  8982                           
  8983                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8984  13A3  3030               	movlw	48
  8985  13A4  00F8               	movwf	??_CC2500_PowerRST
  8986  13A5  0878               	movf	??_CC2500_PowerRST,w
  8987  13A6  0021               	movlb	1	; select bank1
  8988  13A7  00C5               	movwf	_SPI0Buffer^(0+128)
  8989                           
  8990                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8991  13A8  2BAC               	goto	l9777
  8992  13A9                     l9775:	
  8993                           
  8994                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8995  13A9  319D  25A6  3193   	fcall	_RF_Timeout_Counter
  8996  13AC                     l9777:	
  8997  13AC  0020               	movlb	0	; select bank0
  8998  13AD  1D0E               	btfss	14,2	;volatile
  8999  13AE  2BB2               	goto	l9781
  9000  13AF  0021               	movlb	1	; select bank1
  9001  13B0  1F21               	btfss	(_RF1^(0+128)+1),6
  9002  13B1  2BA9               	goto	l9775
  9003  13B2                     l9781:	
  9004                           
  9005                           ;CC2500_B1.c: 152: };
  9006                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9007  13B2  319A  22DD  3193   	fcall	_setRF_TimeoutCleared
  9008                           
  9009                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9010  13B5  319E  2612  3193   	fcall	_CC2500_WriteByte
  9011                           
  9012                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9013  13B8  2BBC               	goto	l9787
  9014  13B9                     l9785:	
  9015                           
  9016                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9017  13B9  319D  25A6  3193   	fcall	_RF_Timeout_Counter
  9018  13BC                     l9787:	
  9019  13BC  0020               	movlb	0	; select bank0
  9020  13BD  1D0E               	btfss	14,2	;volatile
  9021  13BE  2BC2               	goto	l9791
  9022  13BF  0021               	movlb	1	; select bank1
  9023  13C0  1F21               	btfss	(_RF1^(0+128)+1),6
  9024  13C1  2BB9               	goto	l9785
  9025  13C2                     l9791:	
  9026                           
  9027                           ;CC2500_B1.c: 157: };
  9028                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9029  13C2  319A  22DD         	fcall	_setRF_TimeoutCleared
  9030                           
  9031                           ;CC2500_B1.c: 159: RC0 = 0;
  9032  13C4  0020               	movlb	0	; select bank0
  9033  13C5  100E               	bcf	14,0	;volatile
  9034                           
  9035                           ;CC2500_B1.c: 160: RC4 = 1;
  9036  13C6  160E               	bsf	14,4	;volatile
  9037  13C7  0008               	return
  9038  13C8                     __end_of_CC2500_PowerRST:	
  9039                           
  9040                           	psect	text43
  9041  11A5                     __ptext43:	
  9042 ;; *************** function _CC2500_InitSetREG *****************
  9043 ;; Defined at:
  9044 ;;		line 166 in file "../src/CC2500_B1.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9049 ;;  temp2           1    1[BANK0 ] unsigned char 
  9050 ;;  temp1           1    0[BANK0 ] unsigned char 
  9051 ;; Return value:  Size  Location     Type
  9052 ;;		None               void
  9053 ;; Registers used:
  9054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;Total ram usage:        4 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    5
  9067 ;; This function calls:
  9068 ;;		_CC2500_WriteREG
  9069 ;; This function is called by:
  9070 ;;		_CC2500_PowerOnInitial
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function _CC2500_InitSetREG
  9076  11A5                     _CC2500_InitSetREG:	
  9077                           
  9078                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9079                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9080                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9081                           
  9082                           ;incstack = 0
  9083                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9084  11A5  0020               	movlb	0	; select bank0
  9085  11A6  01A2               	clrf	CC2500_InitSetREG@loop_c
  9086  11A7                     L4:	
  9087  11A7  302F               	movlw	47
  9088  11A8  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9089  11A9  1803               	btfsc	3,0
  9090  11AA  0008               	return
  9091                           
  9092                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9093  11AB  0822               	movf	CC2500_InitSetREG@loop_c,w
  9094  11AC  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9095  11AD  0084               	movwf	4
  9096  11AE  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9097  11AF  1803               	skipnc
  9098  11B0  3E01               	addlw	1
  9099  11B1  0085               	movwf	5
  9100  11B2  0800               	movf	0,w	;code access
  9101  11B3  00F7               	movwf	??_CC2500_InitSetREG
  9102  11B4  0877               	movf	??_CC2500_InitSetREG,w
  9103  11B5  00A0               	movwf	CC2500_InitSetREG@temp1
  9104                           
  9105                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9106  11B6  0822               	movf	CC2500_InitSetREG@loop_c,w
  9107  11B7  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9108  11B8  0084               	movwf	4
  9109  11B9  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9110  11BA  1803               	skipnc
  9111  11BB  3E01               	addlw	1
  9112  11BC  0085               	movwf	5
  9113  11BD  0800               	movf	0,w	;code access
  9114  11BE  00F7               	movwf	??_CC2500_InitSetREG
  9115  11BF  0877               	movf	??_CC2500_InitSetREG,w
  9116  11C0  00A1               	movwf	CC2500_InitSetREG@temp2
  9117                           
  9118                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9119  11C1  0821               	movf	CC2500_InitSetREG@temp2,w
  9120  11C2  00F7               	movwf	??_CC2500_InitSetREG
  9121  11C3  0877               	movf	??_CC2500_InitSetREG,w
  9122  11C4  00F4               	movwf	CC2500_WriteREG@value
  9123  11C5  0820               	movf	CC2500_InitSetREG@temp1,w
  9124  11C6  3190  2073  3191   	fcall	_CC2500_WriteREG
  9125  11C9  3001               	movlw	1
  9126  11CA  00F7               	movwf	??_CC2500_InitSetREG
  9127  11CB  0877               	movf	??_CC2500_InitSetREG,w
  9128  11CC  0020               	movlb	0	; select bank0
  9129  11CD  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9130  11CE  29A7               	goto	L4
  9131  11CF                     __end_of_CC2500_InitSetREG:	
  9132                           
  9133                           	psect	text44
  9134  1F1E                     __ptext44:	
  9135 ;; *************** function _CC2500_InitPATable *****************
  9136 ;; Defined at:
  9137 ;;		line 181 in file "../src/CC2500_B1.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;		None
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  loop_d          1    9[COMMON] unsigned char 
  9142 ;;  temp            1    8[COMMON] unsigned char 
  9143 ;; Return value:  Size  Location     Type
  9144 ;;		None               void
  9145 ;; Registers used:
  9146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;Total ram usage:        3 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    5
  9159 ;; This function calls:
  9160 ;;		_CC2500_WriteREG
  9161 ;; This function is called by:
  9162 ;;		_CC2500_PowerOnInitial
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           
  9167                           ;psect for function _CC2500_InitPATable
  9168  1F1E                     _CC2500_InitPATable:	
  9169                           
  9170                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9171                           ;CC2500_B1.c: 183: unsigned char temp;
  9172                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9173                           
  9174                           ;incstack = 0
  9175                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9176  1F1E  01F9               	clrf	CC2500_InitPATable@loop_d
  9177  1F1F                     L5:	
  9178  1F1F  3008               	movlw	8
  9179  1F20  0279               	subwf	CC2500_InitPATable@loop_d,w
  9180  1F21  1803               	btfsc	3,0
  9181  1F22  0008               	return
  9182                           
  9183                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9184  1F23  0879               	movf	CC2500_InitPATable@loop_d,w
  9185  1F24  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9186  1F25  0084               	movwf	4
  9187  1F26  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9188  1F27  1803               	skipnc
  9189  1F28  3E01               	addlw	1
  9190  1F29  0085               	movwf	5
  9191  1F2A  0800               	movf	0,w	;code access
  9192  1F2B  00F7               	movwf	??_CC2500_InitPATable
  9193  1F2C  0877               	movf	??_CC2500_InitPATable,w
  9194  1F2D  00F8               	movwf	CC2500_InitPATable@temp
  9195                           
  9196                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9197  1F2E  0878               	movf	CC2500_InitPATable@temp,w
  9198  1F2F  00F7               	movwf	??_CC2500_InitPATable
  9199  1F30  0877               	movf	??_CC2500_InitPATable,w
  9200  1F31  00F4               	movwf	CC2500_WriteREG@value
  9201  1F32  303E               	movlw	62
  9202  1F33  3190  2073  319F   	fcall	_CC2500_WriteREG
  9203  1F36  3001               	movlw	1
  9204  1F37  00F7               	movwf	??_CC2500_InitPATable
  9205  1F38  0877               	movf	??_CC2500_InitPATable,w
  9206  1F39  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9207  1F3A  2F1F               	goto	L5
  9208  1F3B                     __end_of_CC2500_InitPATable:	
  9209                           
  9210                           	psect	text45
  9211  1073                     __ptext45:	
  9212 ;; *************** function _CC2500_WriteREG *****************
  9213 ;; Defined at:
  9214 ;;		line 258 in file "../src/CC2500_B1.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;  w_addr          1    wreg     unsigned char 
  9217 ;;  value           1    4[COMMON] unsigned char 
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;  w_addr          1    6[COMMON] unsigned char 
  9220 ;; Return value:  Size  Location     Type
  9221 ;;		None               void
  9222 ;; Registers used:
  9223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9229 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;Total ram usage:        3 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    4
  9236 ;; This function calls:
  9237 ;;		_CC2500_WriteByte
  9238 ;;		_RF_Timeout_Counter
  9239 ;;		_setRF_TimeoutCleared
  9240 ;; This function is called by:
  9241 ;;		_CC2500_InitSetREG
  9242 ;;		_CC2500_InitPATable
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           
  9247                           ;psect for function _CC2500_WriteREG
  9248  1073                     _CC2500_WriteREG:	
  9249                           
  9250                           ;incstack = 0
  9251                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9252                           ;CC2500_WriteREG@w_addr stored from wreg
  9253  1073  00F6               	movwf	CC2500_WriteREG@w_addr
  9254                           
  9255                           ;CC2500_B1.c: 259: RC4 = 0;
  9256  1074  0020               	movlb	0	; select bank0
  9257  1075  120E               	bcf	14,4	;volatile
  9258                           
  9259                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9260  1076  0876               	movf	CC2500_WriteREG@w_addr,w
  9261  1077  00F5               	movwf	??_CC2500_WriteREG
  9262  1078  0875               	movf	??_CC2500_WriteREG,w
  9263  1079  0021               	movlb	1	; select bank1
  9264  107A  00C5               	movwf	_SPI0Buffer^(0+128)
  9265                           
  9266                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9267  107B  287F               	goto	l9653
  9268  107C                     l9651:	
  9269                           
  9270                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9271  107C  319D  25A6  3190   	fcall	_RF_Timeout_Counter
  9272  107F                     l9653:	
  9273  107F  0020               	movlb	0	; select bank0
  9274  1080  1D0E               	btfss	14,2	;volatile
  9275  1081  2885               	goto	l9657
  9276  1082  0021               	movlb	1	; select bank1
  9277  1083  1F21               	btfss	(_RF1^(0+128)+1),6
  9278  1084  287C               	goto	l9651
  9279  1085                     l9657:	
  9280                           
  9281                           ;CC2500_B1.c: 263: };
  9282                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9283  1085  319A  22DD  3190   	fcall	_setRF_TimeoutCleared
  9284                           
  9285                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9286  1088  319E  2612  3190   	fcall	_CC2500_WriteByte
  9287                           
  9288                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9289  108B  0874               	movf	CC2500_WriteREG@value,w
  9290  108C  00F5               	movwf	??_CC2500_WriteREG
  9291  108D  0875               	movf	??_CC2500_WriteREG,w
  9292  108E  0021               	movlb	1	; select bank1
  9293  108F  00C5               	movwf	_SPI0Buffer^(0+128)
  9294                           
  9295                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9296  1090  319E  2612         	fcall	_CC2500_WriteByte
  9297                           
  9298                           ;CC2500_B1.c: 269: RC4 = 1;
  9299  1092  0020               	movlb	0	; select bank0
  9300  1093  160E               	bsf	14,4	;volatile
  9301  1094  0008               	return
  9302  1095                     __end_of_CC2500_WriteREG:	
  9303                           
  9304                           	psect	text46
  9305  1B71                     __ptext46:	
  9306 ;; *************** function _CC2500_FrequencyCabr *****************
  9307 ;; Defined at:
  9308 ;;		line 208 in file "../src/CC2500_B1.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;		None
  9311 ;; Auto vars:     Size  Location     Type
  9312 ;;		None
  9313 ;; Return value:  Size  Location     Type
  9314 ;;		None               void
  9315 ;; Registers used:
  9316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9317 ;; Tracked objects:
  9318 ;;		On entry : 0/0
  9319 ;;		On exit  : 0/0
  9320 ;;		Unchanged: 0/0
  9321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;Total ram usage:        0 bytes
  9327 ;; Hardware stack levels used:    1
  9328 ;; Hardware stack levels required when called:    5
  9329 ;; This function calls:
  9330 ;;		_CC2500_WriteCommand
  9331 ;;		_DelayTime_1us
  9332 ;; This function is called by:
  9333 ;;		_CC2500_PowerOnInitial
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           
  9338                           ;psect for function _CC2500_FrequencyCabr
  9339  1B71                     _CC2500_FrequencyCabr:	
  9340                           
  9341                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9342                           
  9343                           ;incstack = 0
  9344                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9345  1B71  3033               	movlw	51
  9346  1B72  319E  2642  319B   	fcall	_CC2500_WriteCommand
  9347                           
  9348                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9349  1B75  30E8               	movlw	232
  9350  1B76  00F2               	movwf	DelayTime_1us@count
  9351  1B77  3003               	movlw	3
  9352  1B78  00F3               	movwf	DelayTime_1us@count+1
  9353  1B79  3190  20DD         	fcall	_DelayTime_1us
  9354  1B7B  0008               	return
  9355  1B7C                     __end_of_CC2500_FrequencyCabr:	
  9356                           
  9357                           	psect	text47
  9358  10DD                     __ptext47:	
  9359 ;; *************** function _DelayTime_1us *****************
  9360 ;; Defined at:
  9361 ;;		line 327 in file "../src/CC2500_B1.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;  count           2    2[COMMON] int 
  9364 ;; Auto vars:     Size  Location     Type
  9365 ;;  j               2    6[COMMON] unsigned int 
  9366 ;;  i               2    4[COMMON] unsigned int 
  9367 ;; Return value:  Size  Location     Type
  9368 ;;		None               void
  9369 ;; Registers used:
  9370 ;;		wreg, status,2
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;Total ram usage:        6 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    3
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		_CC2500_PowerRST
  9387 ;;		_CC2500_FrequencyCabr
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           
  9392                           ;psect for function _DelayTime_1us
  9393  10DD                     _DelayTime_1us:	
  9394                           
  9395                           ;CC2500_B1.c: 328: unsigned int i, j;
  9396                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9397                           
  9398                           ;incstack = 0
  9399                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9400  10DD  3001               	movlw	1
  9401  10DE  00F4               	movwf	DelayTime_1us@i
  9402  10DF  3000               	movlw	0
  9403  10E0  00F5               	movwf	DelayTime_1us@i+1
  9404  10E1                     l367:	
  9405  10E1  0873               	movf	DelayTime_1us@count+1,w
  9406  10E2  0275               	subwf	DelayTime_1us@i+1,w
  9407  10E3  1D03               	skipz
  9408  10E4  28E7               	goto	u11225
  9409  10E5  0872               	movf	DelayTime_1us@count,w
  9410  10E6  0274               	subwf	DelayTime_1us@i,w
  9411  10E7                     u11225:	
  9412  10E7  1803               	btfsc	3,0
  9413  10E8  0008               	return
  9414                           
  9415                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9416  10E9  01F6               	clrf	DelayTime_1us@j
  9417  10EA  01F7               	clrf	DelayTime_1us@j+1
  9418  10EB  3000               	movlw	0
  9419  10EC  0277               	subwf	DelayTime_1us@j+1,w
  9420  10ED  3002               	movlw	2
  9421  10EE  1903               	skipnz
  9422  10EF  0276               	subwf	DelayTime_1us@j,w
  9423  10F0  1803               	btfsc	3,0
  9424  10F1  28FD               	goto	l9645
  9425  10F2                     l9643:	
  9426  10F2  3001               	movlw	1
  9427  10F3  07F6               	addwf	DelayTime_1us@j,f
  9428  10F4  3000               	movlw	0
  9429  10F5  3DF7               	addwfc	DelayTime_1us@j+1,f
  9430  10F6  3000               	movlw	0
  9431  10F7  0277               	subwf	DelayTime_1us@j+1,w
  9432  10F8  3002               	movlw	2
  9433  10F9  1903               	skipnz
  9434  10FA  0276               	subwf	DelayTime_1us@j,w
  9435  10FB  1C03               	skipc
  9436  10FC  28F2               	goto	l9643
  9437  10FD                     l9645:	
  9438  10FD  3001               	movlw	1
  9439  10FE  07F4               	addwf	DelayTime_1us@i,f
  9440  10FF  3000               	movlw	0
  9441  1100  3DF5               	addwfc	DelayTime_1us@i+1,f
  9442  1101  28E1               	goto	l367
  9443  1102                     __end_of_DelayTime_1us:	
  9444                           
  9445                           	psect	text48
  9446  1AE5                     __ptext48:	
  9447 ;; *************** function _CC2500_ClearTXFIFO *****************
  9448 ;; Defined at:
  9449 ;;		line 194 in file "../src/CC2500_B1.c"
  9450 ;; Parameters:    Size  Location     Type
  9451 ;;		None
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;		None
  9454 ;; Return value:  Size  Location     Type
  9455 ;;		None               void
  9456 ;; Registers used:
  9457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9458 ;; Tracked objects:
  9459 ;;		On entry : 0/0
  9460 ;;		On exit  : 0/0
  9461 ;;		Unchanged: 0/0
  9462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;Total ram usage:        0 bytes
  9468 ;; Hardware stack levels used:    1
  9469 ;; Hardware stack levels required when called:    5
  9470 ;; This function calls:
  9471 ;;		_CC2500_WriteCommand
  9472 ;; This function is called by:
  9473 ;;		_CC2500_PowerOnInitial
  9474 ;; This function uses a non-reentrant model
  9475 ;;
  9476                           
  9477                           
  9478                           ;psect for function _CC2500_ClearTXFIFO
  9479  1AE5                     _CC2500_ClearTXFIFO:	
  9480                           
  9481                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9482                           
  9483                           ;incstack = 0
  9484                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9485  1AE5  303B               	movlw	59
  9486  1AE6  319E  2642         	fcall	_CC2500_WriteCommand
  9487  1AE8  0008               	return
  9488  1AE9                     __end_of_CC2500_ClearTXFIFO:	
  9489                           
  9490                           	psect	text49
  9491  1AE1                     __ptext49:	
  9492 ;; *************** function _CC2500_ClearRXFIFO *****************
  9493 ;; Defined at:
  9494 ;;		line 201 in file "../src/CC2500_B1.c"
  9495 ;; Parameters:    Size  Location     Type
  9496 ;;		None
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;		None
  9499 ;; Return value:  Size  Location     Type
  9500 ;;		None               void
  9501 ;; Registers used:
  9502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;Total ram usage:        0 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    5
  9515 ;; This function calls:
  9516 ;;		_CC2500_WriteCommand
  9517 ;; This function is called by:
  9518 ;;		_CC2500_PowerOnInitial
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           
  9523                           ;psect for function _CC2500_ClearRXFIFO
  9524  1AE1                     _CC2500_ClearRXFIFO:	
  9525                           
  9526                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9527                           
  9528                           ;incstack = 0
  9529                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9530  1AE1  303A               	movlw	58
  9531  1AE2  319E  2642         	fcall	_CC2500_WriteCommand
  9532  1AE4  0008               	return
  9533  1AE5                     __end_of_CC2500_ClearRXFIFO:	
  9534                           
  9535                           	psect	text50
  9536  1E42                     __ptext50:	
  9537 ;; *************** function _CC2500_WriteCommand *****************
  9538 ;; Defined at:
  9539 ;;		line 292 in file "../src/CC2500_B1.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;  command         1    wreg     unsigned char 
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;  command         1    5[COMMON] unsigned char 
  9544 ;; Return value:  Size  Location     Type
  9545 ;;		None               void
  9546 ;; Registers used:
  9547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;Total ram usage:        2 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    4
  9560 ;; This function calls:
  9561 ;;		_CC2500_WriteByte
  9562 ;;		_RF_Timeout_Counter
  9563 ;;		_setRF_TimeoutCleared
  9564 ;; This function is called by:
  9565 ;;		_CC2500_TxData
  9566 ;;		_CC2500_RxData
  9567 ;;		_CC2500_ClearTXFIFO
  9568 ;;		_CC2500_ClearRXFIFO
  9569 ;;		_CC2500_FrequencyCabr
  9570 ;;		_CC2500_SIDLEMode
  9571 ;;		_setRF_Main
  9572 ;;		_RF_RxDisable
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           
  9577                           ;psect for function _CC2500_WriteCommand
  9578  1E42                     _CC2500_WriteCommand:	
  9579                           
  9580                           ;incstack = 0
  9581                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9582                           ;CC2500_WriteCommand@command stored from wreg
  9583  1E42  00F5               	movwf	CC2500_WriteCommand@command
  9584                           
  9585                           ;CC2500_B1.c: 293: RC4 = 0;
  9586  1E43  0020               	movlb	0	; select bank0
  9587  1E44  120E               	bcf	14,4	;volatile
  9588                           
  9589                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9590  1E45  0875               	movf	CC2500_WriteCommand@command,w
  9591  1E46  00F4               	movwf	??_CC2500_WriteCommand
  9592  1E47  0874               	movf	??_CC2500_WriteCommand,w
  9593  1E48  0021               	movlb	1	; select bank1
  9594  1E49  00C5               	movwf	_SPI0Buffer^(0+128)
  9595                           
  9596                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9597  1E4A  2E4E               	goto	l9607
  9598  1E4B                     l9605:	
  9599                           
  9600                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9601  1E4B  319D  25A6  319E   	fcall	_RF_Timeout_Counter
  9602  1E4E                     l9607:	
  9603  1E4E  0020               	movlb	0	; select bank0
  9604  1E4F  1D0E               	btfss	14,2	;volatile
  9605  1E50  2E54               	goto	l9611
  9606  1E51  0021               	movlb	1	; select bank1
  9607  1E52  1F21               	btfss	(_RF1^(0+128)+1),6
  9608  1E53  2E4B               	goto	l9605
  9609  1E54                     l9611:	
  9610                           
  9611                           ;CC2500_B1.c: 298: };
  9612                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9613  1E54  319A  22DD  319E   	fcall	_setRF_TimeoutCleared
  9614                           
  9615                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9616  1E57  319E  2612         	fcall	_CC2500_WriteByte
  9617                           
  9618                           ;CC2500_B1.c: 302: RC4 = 1;
  9619  1E59  0020               	movlb	0	; select bank0
  9620  1E5A  160E               	bsf	14,4	;volatile
  9621  1E5B  0008               	return
  9622  1E5C                     __end_of_CC2500_WriteCommand:	
  9623                           
  9624                           	psect	text51
  9625  1ADD                     __ptext51:	
  9626 ;; *************** function _setRF_TimeoutCleared *****************
  9627 ;; Defined at:
  9628 ;;		line 149 in file "../src/RF_Control_B1.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;		None
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;		None
  9633 ;; Return value:  Size  Location     Type
  9634 ;;		None               void
  9635 ;; Registers used:
  9636 ;;		status,2
  9637 ;; Tracked objects:
  9638 ;;		On entry : 0/0
  9639 ;;		On exit  : 0/0
  9640 ;;		Unchanged: 0/0
  9641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;Total ram usage:        0 bytes
  9647 ;; Hardware stack levels used:    1
  9648 ;; Hardware stack levels required when called:    3
  9649 ;; This function calls:
  9650 ;;		Nothing
  9651 ;; This function is called by:
  9652 ;;		_CC2500_TxData
  9653 ;;		_CC2500_RxData
  9654 ;;		_CC2500_PowerRST
  9655 ;;		_CC2500_WriteREG
  9656 ;;		_CC2500_WriteCommand
  9657 ;;		_CC2500_ReadStatus
  9658 ;;		_CC2500_ReadREG
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           
  9663                           ;psect for function _setRF_TimeoutCleared
  9664  1ADD                     _setRF_TimeoutCleared:	
  9665                           
  9666                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9667                           
  9668                           ;incstack = 0
  9669                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9670  1ADD  0021               	movlb	1	; select bank1
  9671  1ADE  01AC               	clrf	(_RF1^(0+128)+12)
  9672  1ADF  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9673  1AE0  0008               	return
  9674  1AE1                     __end_of_setRF_TimeoutCleared:	
  9675                           
  9676                           	psect	text52
  9677  1DA6                     __ptext52:	
  9678 ;; *************** function _RF_Timeout_Counter *****************
  9679 ;; Defined at:
  9680 ;;		line 141 in file "../src/RF_Control_B1.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;		None
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;		None
  9685 ;; Return value:  Size  Location     Type
  9686 ;;		None               void
  9687 ;; Registers used:
  9688 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9689 ;; Tracked objects:
  9690 ;;		On entry : 0/0
  9691 ;;		On exit  : 0/0
  9692 ;;		Unchanged: 0/0
  9693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;Total ram usage:        0 bytes
  9699 ;; Hardware stack levels used:    1
  9700 ;; Hardware stack levels required when called:    3
  9701 ;; This function calls:
  9702 ;;		Nothing
  9703 ;; This function is called by:
  9704 ;;		_CC2500_TxData
  9705 ;;		_CC2500_RxData
  9706 ;;		_CC2500_PowerRST
  9707 ;;		_CC2500_WriteREG
  9708 ;;		_CC2500_WriteCommand
  9709 ;;		_CC2500_ReadStatus
  9710 ;;		_CC2500_ReadREG
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           
  9715                           ;psect for function _RF_Timeout_Counter
  9716  1DA6                     _RF_Timeout_Counter:	
  9717                           
  9718                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9722  1DA6  3001               	movlw	1
  9723  1DA7  0021               	movlb	1	; select bank1
  9724  1DA8  07AC               	addwf	(_RF1^(0+128)+12),f
  9725  1DA9  3000               	movlw	0
  9726  1DAA  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9727                           
  9728                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9729  1DAB  300C               	movlw	12
  9730  1DAC  3EA0               	addlw	_RF1& (0+255)
  9731  1DAD  0086               	movwf	6
  9732  1DAE  0187               	clrf	7
  9733  1DAF  3F40               	moviw [0]fsr1
  9734  1DB0  3AA8               	xorlw	168
  9735  1DB1  1D03               	skipz
  9736  1DB2  2DB5               	goto	u10915
  9737  1DB3  3F41               	moviw [1]fsr1
  9738  1DB4  3A61               	xorlw	97
  9739  1DB5                     u10915:	
  9740  1DB5  1D03               	skipz
  9741  1DB6  0008               	return
  9742                           
  9743                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9744  1DB7  01AC               	clrf	(_RF1^(0+128)+12)
  9745  1DB8  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9746                           
  9747                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9748  1DB9  1721               	bsf	(_RF1^(0+128)+1),6
  9749  1DBA  0008               	return
  9750  1DBB                     __end_of_RF_Timeout_Counter:	
  9751                           
  9752                           	psect	text53
  9753  1E12                     __ptext53:	
  9754 ;; *************** function _CC2500_WriteByte *****************
  9755 ;; Defined at:
  9756 ;;		line 226 in file "../src/CC2500_B1.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;		None
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;  loop_a          1    3[COMMON] unsigned char 
  9761 ;; Return value:  Size  Location     Type
  9762 ;;		None               void
  9763 ;; Registers used:
  9764 ;;		wreg, status,2, status,0
  9765 ;; Tracked objects:
  9766 ;;		On entry : 0/0
  9767 ;;		On exit  : 0/0
  9768 ;;		Unchanged: 0/0
  9769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;Total ram usage:        2 bytes
  9775 ;; Hardware stack levels used:    1
  9776 ;; Hardware stack levels required when called:    3
  9777 ;; This function calls:
  9778 ;;		Nothing
  9779 ;; This function is called by:
  9780 ;;		_CC2500_TxData
  9781 ;;		_CC2500_RxData
  9782 ;;		_CC2500_PowerRST
  9783 ;;		_CC2500_WriteREG
  9784 ;;		_CC2500_WriteCommand
  9785 ;;		_CC2500_ReadStatus
  9786 ;;		_CC2500_ReadREG
  9787 ;; This function uses a non-reentrant model
  9788 ;;
  9789                           
  9790                           
  9791                           ;psect for function _CC2500_WriteByte
  9792  1E12                     _CC2500_WriteByte:	
  9793                           
  9794                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9795                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9796                           
  9797                           ;incstack = 0
  9798                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9799  1E12  01F3               	clrf	CC2500_WriteByte@loop_a
  9800  1E13                     L6:	
  9801  1E13  3008               	movlw	8
  9802  1E14  0273               	subwf	CC2500_WriteByte@loop_a,w
  9803  1E15  1803               	btfsc	3,0
  9804  1E16  0008               	return
  9805                           
  9806                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9807  1E17  0021               	movlb	1	; select bank1
  9808  1E18  1FC5               	btfss	_SPI0Buffer^(0+128),7
  9809  1E19  2E1D               	goto	l323
  9810                           
  9811                           ;CC2500_B1.c: 230: RC0 = 1;
  9812  1E1A  0020               	movlb	0	; select bank0
  9813  1E1B  140E               	bsf	14,0	;volatile
  9814  1E1C  2E1F               	goto	l324
  9815  1E1D                     l323:	
  9816                           
  9817                           ;CC2500_B1.c: 231: else
  9818                           ;CC2500_B1.c: 232: RC0 = 0;
  9819  1E1D  0020               	movlb	0	; select bank0
  9820  1E1E  100E               	bcf	14,0	;volatile
  9821  1E1F                     l324:	
  9822                           
  9823                           ;CC2500_B1.c: 233: RC1 = 1;
  9824  1E1F  148E               	bsf	14,1	;volatile
  9825                           
  9826                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9827  1E20  1003               	clrc
  9828  1E21  0021               	movlb	1	; select bank1
  9829  1E22  0DC5               	rlf	_SPI0Buffer^(0+128),f
  9830                           
  9831                           ;CC2500_B1.c: 235: RC1 = 0;
  9832  1E23  0020               	movlb	0	; select bank0
  9833  1E24  108E               	bcf	14,1	;volatile
  9834  1E25  3001               	movlw	1
  9835  1E26  00F2               	movwf	??_CC2500_WriteByte
  9836  1E27  0872               	movf	??_CC2500_WriteByte,w
  9837  1E28  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9838  1E29  2E13               	goto	L6
  9839  1E2A                     __end_of_CC2500_WriteByte:	
  9840                           
  9841                           	psect	text54
  9842  1AD0                     __ptext54:	
  9843 ;; *************** function _RF_Initialization *****************
  9844 ;; Defined at:
  9845 ;;		line 9 in file "../src/RF_Control_B1.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;		None
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;		None
  9850 ;; Return value:  Size  Location     Type
  9851 ;;		None               void
  9852 ;; Registers used:
  9853 ;;		wreg, status,2, status,0, pclath, cstack
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;Total ram usage:        0 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    4
  9866 ;; This function calls:
  9867 ;;		_setRF_Initialization
  9868 ;; This function is called by:
  9869 ;;		_main
  9870 ;; This function uses a non-reentrant model
  9871 ;;
  9872                           
  9873                           
  9874                           ;psect for function _RF_Initialization
  9875  1AD0                     _RF_Initialization:	
  9876                           
  9877                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9878                           
  9879                           ;incstack = 0
  9880                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9881  1AD0  319B  2351         	fcall	_setRF_Initialization
  9882  1AD2  0008               	return
  9883  1AD3                     __end_of_RF_Initialization:	
  9884                           
  9885                           	psect	text55
  9886  1B51                     __ptext55:	
  9887 ;; *************** function _setRF_Initialization *****************
  9888 ;; Defined at:
  9889 ;;		line 17 in file "../src/RF_Control_B1.c"
  9890 ;; Parameters:    Size  Location     Type
  9891 ;;		None
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;		None
  9894 ;; Return value:  Size  Location     Type
  9895 ;;		None               void
  9896 ;; Registers used:
  9897 ;;		wreg
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;Total ram usage:        1 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    3
  9910 ;; This function calls:
  9911 ;;		Nothing
  9912 ;; This function is called by:
  9913 ;;		_RF_Initialization
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           
  9918                           ;psect for function _setRF_Initialization
  9919  1B51                     _setRF_Initialization:	
  9920                           
  9921                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9922                           
  9923                           ;incstack = 0
  9924                           ; Regs used in _setRF_Initialization: [wreg]
  9925  1B51  3015               	movlw	21
  9926  1B52  00F2               	movwf	??_setRF_Initialization
  9927  1B53  0872               	movf	??_setRF_Initialization,w
  9928  1B54  0021               	movlb	1	; select bank1
  9929  1B55  00C7               	movwf	_Tx_Length^(0+128)
  9930                           
  9931                           ;RF_Control_B1.c: 20: RF1.RunTime = 80;
  9932  1B56  3050               	movlw	80
  9933  1B57  00A7               	movwf	(_RF1^(0+128)+7)
  9934  1B58  3000               	movlw	0
  9935  1B59  00A8               	movwf	(_RF1^(0+128)+8)
  9936  1B5A  0008               	return
  9937  1B5B                     __end_of_setRF_Initialization:	
  9938                           
  9939                           	psect	text56
  9940  1D18                     __ptext56:	
  9941 ;; *************** function _Mcu_Initialization *****************
  9942 ;; Defined at:
  9943 ;;		line 30 in file "../src/MCU_B1.c"
  9944 ;; Parameters:    Size  Location     Type
  9945 ;;		None
  9946 ;; Auto vars:     Size  Location     Type
  9947 ;;		None
  9948 ;; Return value:  Size  Location     Type
  9949 ;;		None               void
  9950 ;; Registers used:
  9951 ;;		wreg, status,2, status,0, pclath, cstack
  9952 ;; Tracked objects:
  9953 ;;		On entry : 0/0
  9954 ;;		On exit  : 0/0
  9955 ;;		Unchanged: 0/0
  9956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;Total ram usage:        0 bytes
  9962 ;; Hardware stack levels used:    1
  9963 ;; Hardware stack levels required when called:    4
  9964 ;; This function calls:
  9965 ;;		_ADC_Set
  9966 ;;		_Fosc_Set
  9967 ;;		_IOC_Set
  9968 ;;		_IO_Set
  9969 ;;		_TMR1_Set
  9970 ;;		_WDT_Set
  9971 ;; This function is called by:
  9972 ;;		_main
  9973 ;; This function uses a non-reentrant model
  9974 ;;
  9975                           
  9976                           
  9977                           ;psect for function _Mcu_Initialization
  9978  1D18                     _Mcu_Initialization:	
  9979                           
  9980                           ;MCU_B1.c: 32: Fosc_Set();
  9981                           
  9982                           ;incstack = 0
  9983                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9984  1D18  319A  22D9  319D   	fcall	_Fosc_Set
  9985                           
  9986                           ;MCU_B1.c: 34: IO_Set();
  9987  1D1B  319E  2692  319D   	fcall	_IO_Set
  9988                           
  9989                           ;MCU_B1.c: 36: ;;
  9990                           ;MCU_B1.c: 38: TMR1_Set();
  9991  1D1E  319B  23C3  319D   	fcall	_TMR1_Set
  9992                           
  9993                           ;MCU_B1.c: 40: ADC_Set();
  9994  1D21  319B  2318  319D   	fcall	_ADC_Set
  9995                           
  9996                           ;MCU_B1.c: 42: ;;
  9997                           ;MCU_B1.c: 44: ;;
  9998                           ;MCU_B1.c: 46: IOC_Set();
  9999  1D24  319B  23B7  319D   	fcall	_IOC_Set
 10000                           
 10001                           ;MCU_B1.c: 48: ;;
 10002                           ;MCU_B1.c: 50: ;;
 10003                           ;MCU_B1.c: 52: WDT_Set();
 10004  1D27  319B  2348         	fcall	_WDT_Set
 10005  1D29  0008               	return
 10006  1D2A                     __end_of_Mcu_Initialization:	
 10007                           
 10008                           	psect	text57
 10009  1B48                     __ptext57:	
 10010 ;; *************** function _WDT_Set *****************
 10011 ;; Defined at:
 10012 ;;		line 1092 in file "../src/MCU_B1.c"
 10013 ;; Parameters:    Size  Location     Type
 10014 ;;		None
 10015 ;; Auto vars:     Size  Location     Type
 10016 ;;		None
 10017 ;; Return value:  Size  Location     Type
 10018 ;;		None               void
 10019 ;; Registers used:
 10020 ;;		wreg
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;Total ram usage:        1 bytes
 10031 ;; Hardware stack levels used:    1
 10032 ;; Hardware stack levels required when called:    3
 10033 ;; This function calls:
 10034 ;;		Nothing
 10035 ;; This function is called by:
 10036 ;;		_Mcu_Initialization
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           
 10041                           ;psect for function _WDT_Set
 10042  1B48                     _WDT_Set:	
 10043                           
 10044                           ;MCU_B1.c: 1099: WDTCON = 0b00010111;;
 10045                           
 10046                           ;incstack = 0
 10047                           ; Regs used in _WDT_Set: [wreg]
 10048  1B48  3017               	movlw	23
 10049  1B49  0021               	movlb	1	; select bank1
 10050  1B4A  0097               	movwf	23	;volatile
 10051                           
 10052                           ;MCU_B1.c: 1101: WDT.Enable = 1;
 10053  1B4B  143D               	bsf	_WDT^(0+128),0
 10054                           
 10055                           ;MCU_B1.c: 1102: WDT.Timer = 10;
 10056  1B4C  300A               	movlw	10
 10057  1B4D  00F2               	movwf	??_WDT_Set
 10058  1B4E  0872               	movf	??_WDT_Set,w
 10059  1B4F  00BE               	movwf	(_WDT^(0+128)+1)
 10060  1B50  0008               	return
 10061  1B51                     __end_of_WDT_Set:	
 10062                           
 10063                           	psect	text58
 10064  1BC3                     __ptext58:	
 10065 ;; *************** function _TMR1_Set *****************
 10066 ;; Defined at:
 10067 ;;		line 221 in file "../src/MCU_B1.c"
 10068 ;; Parameters:    Size  Location     Type
 10069 ;;		None
 10070 ;; Auto vars:     Size  Location     Type
 10071 ;;		None
 10072 ;; Return value:  Size  Location     Type
 10073 ;;		None               void
 10074 ;; Registers used:
 10075 ;;		wreg
 10076 ;; Tracked objects:
 10077 ;;		On entry : 0/0
 10078 ;;		On exit  : 0/0
 10079 ;;		Unchanged: 0/0
 10080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;Total ram usage:        0 bytes
 10086 ;; Hardware stack levels used:    1
 10087 ;; Hardware stack levels required when called:    3
 10088 ;; This function calls:
 10089 ;;		Nothing
 10090 ;; This function is called by:
 10091 ;;		_Mcu_Initialization
 10092 ;; This function uses a non-reentrant model
 10093 ;;
 10094                           
 10095                           
 10096                           ;psect for function _TMR1_Set
 10097  1BC3                     _TMR1_Set:	
 10098                           
 10099                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in _TMR1_Set: [wreg]
 10103  1BC3  3041               	movlw	65
 10104  1BC4  0020               	movlb	0	; select bank0
 10105  1BC5  0098               	movwf	24	;volatile
 10106                           
 10107                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
 10108  1BC6  30FA               	movlw	250
 10109  1BC7  0097               	movwf	23	;volatile
 10110                           
 10111                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
 10112  1BC8  3038               	movlw	56
 10113  1BC9  0096               	movwf	22	;volatile
 10114                           
 10115                           ;MCU_B1.c: 225: TMR1IE = 1;
 10116  1BCA  0021               	movlb	1	; select bank1
 10117  1BCB  1411               	bsf	17,0	;volatile
 10118                           
 10119                           ;MCU_B1.c: 226: PEIE = 1;
 10120  1BCC  170B               	bsf	11,6	;volatile
 10121                           
 10122                           ;MCU_B1.c: 227: GIE = 1;
 10123  1BCD  178B               	bsf	11,7	;volatile
 10124  1BCE  0008               	return
 10125  1BCF                     __end_of_TMR1_Set:	
 10126                           
 10127                           	psect	text59
 10128  1E92                     __ptext59:	
 10129 ;; *************** function _IO_Set *****************
 10130 ;; Defined at:
 10131 ;;		line 60 in file "../src/MCU_B1.c"
 10132 ;; Parameters:    Size  Location     Type
 10133 ;;		None
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;		None
 10136 ;; Return value:  Size  Location     Type
 10137 ;;		None               void
 10138 ;; Registers used:
 10139 ;;		wreg, status,2
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;Total ram usage:        0 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:    3
 10152 ;; This function calls:
 10153 ;;		Nothing
 10154 ;; This function is called by:
 10155 ;;		_Mcu_Initialization
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           
 10160                           ;psect for function _IO_Set
 10161  1E92                     _IO_Set:	
 10162                           
 10163                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10164                           
 10165                           ;incstack = 0
 10166                           ; Regs used in _IO_Set: [wreg+status,2]
 10167  1E92  3077               	movlw	119
 10168  1E93  0021               	movlb	1	; select bank1
 10169  1E94  008C               	movwf	12	;volatile
 10170                           
 10171                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10172  1E95  3007               	movlw	7
 10173  1E96  008D               	movwf	13	;volatile
 10174                           
 10175                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10176  1E97  300C               	movlw	12
 10177  1E98  008E               	movwf	14	;volatile
 10178                           
 10179                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10180  1E99  0022               	movlb	2	; select bank2
 10181  1E9A  018C               	clrf	12	;volatile
 10182                           
 10183                           ;MCU_B1.c: 93: LATB = 0b00000010;;
 10184  1E9B  3002               	movlw	2
 10185  1E9C  008D               	movwf	13	;volatile
 10186                           
 10187                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10188  1E9D  018E               	clrf	14	;volatile
 10189                           
 10190                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10191  1E9E  3022               	movlw	34
 10192  1E9F  0023               	movlb	3	; select bank3
 10193  1EA0  008C               	movwf	12	;volatile
 10194                           
 10195                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10196  1EA1  018D               	clrf	13	;volatile
 10197                           
 10198                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10199  1EA2  018E               	clrf	14	;volatile
 10200                           
 10201                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10202  1EA3  3077               	movlw	119
 10203  1EA4  0020               	movlb	0	; select bank0
 10204  1EA5  008C               	movwf	12	;volatile
 10205                           
 10206                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10207  1EA6  3007               	movlw	7
 10208  1EA7  008D               	movwf	13	;volatile
 10209                           
 10210                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10211  1EA8  300C               	movlw	12
 10212  1EA9  008E               	movwf	14	;volatile
 10213                           
 10214                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10215  1EAA  0024               	movlb	4	; select bank4
 10216  1EAB  018D               	clrf	13	;volatile
 10217  1EAC  0008               	return
 10218  1EAD                     __end_of_IO_Set:	
 10219                           
 10220                           	psect	text60
 10221  1BB7                     __ptext60:	
 10222 ;; *************** function _IOC_Set *****************
 10223 ;; Defined at:
 10224 ;;		line 362 in file "../src/MCU_B1.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;		None
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;		None
 10229 ;; Return value:  Size  Location     Type
 10230 ;;		None               void
 10231 ;; Registers used:
 10232 ;;		wreg, status,2
 10233 ;; Tracked objects:
 10234 ;;		On entry : 0/0
 10235 ;;		On exit  : 0/0
 10236 ;;		Unchanged: 0/0
 10237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;Total ram usage:        0 bytes
 10243 ;; Hardware stack levels used:    1
 10244 ;; Hardware stack levels required when called:    3
 10245 ;; This function calls:
 10246 ;;		Nothing
 10247 ;; This function is called by:
 10248 ;;		_Mcu_Initialization
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           
 10253                           ;psect for function _IOC_Set
 10254  1BB7                     _IOC_Set:	
 10255                           
 10256                           ;MCU_B1.c: 363: WPUB2 = 0;
 10257                           
 10258                           ;incstack = 0
 10259                           ; Regs used in _IOC_Set: [wreg+status,2]
 10260  1BB7  0024               	movlb	4	; select bank4
 10261  1BB8  110D               	bcf	13,2	;volatile
 10262                           
 10263                           ;MCU_B1.c: 383: IOCBP = 0b00000100;
 10264  1BB9  3004               	movlw	4
 10265  1BBA  0027               	movlb	7	; select bank7
 10266  1BBB  0094               	movwf	20	;volatile
 10267                           
 10268                           ;MCU_B1.c: 384: IOCBN = 0b00000000;
 10269  1BBC  0195               	clrf	21	;volatile
 10270                           
 10271                           ;MCU_B1.c: 388: IOCBF = 0b00000000;
 10272  1BBD  0196               	clrf	22	;volatile
 10273                           
 10274                           ;MCU_B1.c: 390: IOCIE = 1;
 10275  1BBE  158B               	bsf	11,3	;volatile
 10276                           
 10277                           ;MCU_B1.c: 391: IOCIF = 0;
 10278  1BBF  100B               	bcf	11,0	;volatile
 10279                           
 10280                           ;MCU_B1.c: 392: PEIE = 1;
 10281  1BC0  170B               	bsf	11,6	;volatile
 10282                           
 10283                           ;MCU_B1.c: 393: GIE = 1;
 10284  1BC1  178B               	bsf	11,7	;volatile
 10285  1BC2  0008               	return
 10286  1BC3                     __end_of_IOC_Set:	
 10287                           
 10288                           	psect	text61
 10289  1AD9                     __ptext61:	
 10290 ;; *************** function _Fosc_Set *****************
 10291 ;; Defined at:
 10292 ;;		line 56 in file "../src/MCU_B1.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;		None
 10295 ;; Auto vars:     Size  Location     Type
 10296 ;;		None
 10297 ;; Return value:  Size  Location     Type
 10298 ;;		None               void
 10299 ;; Registers used:
 10300 ;;		wreg
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;Total ram usage:        0 bytes
 10311 ;; Hardware stack levels used:    1
 10312 ;; Hardware stack levels required when called:    3
 10313 ;; This function calls:
 10314 ;;		Nothing
 10315 ;; This function is called by:
 10316 ;;		_Mcu_Initialization
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           
 10321                           ;psect for function _Fosc_Set
 10322  1AD9                     _Fosc_Set:	
 10323                           
 10324                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10325                           
 10326                           ;incstack = 0
 10327                           ; Regs used in _Fosc_Set: [wreg]
 10328  1AD9  3078               	movlw	120
 10329  1ADA  0021               	movlb	1	; select bank1
 10330  1ADB  0099               	movwf	25	;volatile
 10331  1ADC  0008               	return
 10332  1ADD                     __end_of_Fosc_Set:	
 10333                           
 10334                           	psect	text62
 10335  1B18                     __ptext62:	
 10336 ;; *************** function _ADC_Set *****************
 10337 ;; Defined at:
 10338 ;;		line 428 in file "../src/MCU_B1.c"
 10339 ;; Parameters:    Size  Location     Type
 10340 ;;		None
 10341 ;; Auto vars:     Size  Location     Type
 10342 ;;		None
 10343 ;; Return value:  Size  Location     Type
 10344 ;;		None               void
 10345 ;; Registers used:
 10346 ;;		wreg
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10356 ;;Total ram usage:        0 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:    3
 10359 ;; This function calls:
 10360 ;;		Nothing
 10361 ;; This function is called by:
 10362 ;;		_Mcu_Initialization
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           
 10367                           ;psect for function _ADC_Set
 10368  1B18                     _ADC_Set:	
 10369                           
 10370                           ;MCU_B1.c: 429: ADCON1 = 0xf3;
 10371                           
 10372                           ;incstack = 0
 10373                           ; Regs used in _ADC_Set: [wreg]
 10374  1B18  30F3               	movlw	243
 10375  1B19  0021               	movlb	1	; select bank1
 10376  1B1A  009E               	movwf	30	;volatile
 10377                           
 10378                           ;MCU_B1.c: 430: FVRCON = 0xc1;
 10379  1B1B  30C1               	movlw	193
 10380  1B1C  0022               	movlb	2	; select bank2
 10381  1B1D  0097               	movwf	23	;volatile
 10382  1B1E  0008               	return
 10383  1B1F                     __end_of_ADC_Set:	
 10384                           
 10385                           	psect	text63
 10386  0055                     __ptext63:	
 10387 ;; *************** function _Load_Main *****************
 10388 ;; Defined at:
 10389 ;;		line 39 in file "../src/OverLoad_B1.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;		None
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;  i               2    4[BANK0 ] int 
 10394 ;;  Load_Status     1    3[BANK0 ] unsigned char 
 10395 ;;  error           1    2[BANK0 ] unsigned char 
 10396 ;; Return value:  Size  Location     Type
 10397 ;;		None               void
 10398 ;; Registers used:
 10399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/0
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;Total ram usage:        6 bytes
 10410 ;; Hardware stack levels used:    1
 10411 ;; Hardware stack levels required when called:    4
 10412 ;; This function calls:
 10413 ;;		___lwdiv
 10414 ;;		___wmul
 10415 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10416 ;;		_getDimmer_LoadGO
 10417 ;;		_getDimmer_Load_Status
 10418 ;;		_getMain_All_Error_Status
 10419 ;;		_getMain_All_LightsStatus
 10420 ;;		_getMain_Lights_Count
 10421 ;;		_setLoad_AH_AL_Restore
 10422 ;; This function is called by:
 10423 ;;		_main
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427                           
 10428                           ;psect for function _Load_Main
 10429  0055                     _Load_Main:	
 10430                           
 10431                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10432                           
 10433                           ;incstack = 0
 10434                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10435  0055  3000               	movlw	0
 10436  0056  3191  21CF  3180   	fcall	_getMain_All_Error_Status
 10437  0059  0020               	movlb	0	; select bank0
 10438  005A  00A0               	movwf	??_Load_Main
 10439  005B  0820               	movf	??_Load_Main,w
 10440  005C  00A2               	movwf	Load_Main@error
 10441                           
 10442                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10443  005D  01A3               	clrf	Load_Main@Load_Status
 10444                           
 10445                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10446  005E  0022               	movlb	2	; select bank2
 10447  005F  1C33               	btfss	_Load^(0+256),0
 10448  0060  29E9               	goto	l1602
 10449                           
 10450                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10451  0061  319C  2417  3180   	fcall	_getMain_All_LightsStatus
 10452  0064  3800               	iorlw	0
 10453  0065  1D03               	skipz
 10454  0066  2869               	goto	l10745
 10455                           
 10456                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10457  0067  0022               	movlb	2	; select bank2
 10458  0068  288A               	goto	l10763
 10459  0069                     l10745:	
 10460                           ;OverLoad_B1.c: 47: } else {
 10461                           
 10462                           
 10463                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10464  0069  0020               	movlb	0	; select bank0
 10465  006A  08A2               	movf	Load_Main@error,f
 10466  006B  1D03               	skipz
 10467  006C  2887               	goto	l1605
 10468  006D  319E  2677  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10469  0070  3800               	iorlw	0
 10470  0071  1D03               	skipz
 10471  0072  2887               	goto	l1605
 10472                           
 10473                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10474  0073  0022               	movlb	2	; select bank2
 10475  0074  14B3               	bsf	_Load^(0+256),1
 10476                           
 10477                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10478  0075  319B  230A  3180   	fcall	_getDimmer_LoadGO
 10479  0078  3A01               	xorlw	1
 10480  0079  1D03               	skipz
 10481  007A  2882               	goto	l1606
 10482                           
 10483                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10484  007B  0022               	movlb	2	; select bank2
 10485  007C  1DB3               	btfss	_Load^(0+256),3
 10486  007D  1BB3               	btfsc	_Load^(0+256),7
 10487  007E  288B               	goto	l1604
 10488                           
 10489                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10490  007F  15B3               	bsf	_Load^(0+256),3
 10491                           
 10492                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10493  0080  01DC               	clrf	(_Load^(0+256)+41)
 10494                           
 10495                           ;OverLoad_B1.c: 57: }
 10496                           ;OverLoad_B1.c: 58: } else {
 10497  0081  288B               	goto	l1604
 10498  0082                     l1606:	
 10499                           
 10500                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10501  0082  0022               	movlb	2	; select bank2
 10502  0083  1FB3               	btfss	_Load^(0+256),7
 10503  0084  288B               	goto	l1604
 10504                           
 10505                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10506  0085  13B3               	bcf	_Load^(0+256),7
 10507                           
 10508                           ;OverLoad_B1.c: 61: }
 10509                           ;OverLoad_B1.c: 62: }
 10510                           ;OverLoad_B1.c: 63: } else {
 10511  0086  288B               	goto	l1604
 10512  0087                     l1605:	
 10513                           
 10514                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10515  0087  0022               	movlb	2	; select bank2
 10516  0088  1CB3               	btfss	_Load^(0+256),1
 10517  0089  288B               	goto	l1604
 10518  008A                     l10763:	
 10519                           
 10520                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10521  008A  10B3               	bcf	_Load^(0+256),1
 10522  008B                     l1604:	
 10523                           
 10524                           ;OverLoad_B1.c: 66: }
 10525                           ;OverLoad_B1.c: 67: }
 10526                           ;OverLoad_B1.c: 69: }
 10527                           ;OverLoad_B1.c: 72: if (Load.GO == 1) {
 10528  008B  1CB3               	btfss	_Load^(0+256),1
 10529  008C  29C5               	goto	l1612
 10530                           
 10531                           ;OverLoad_B1.c: 73: Load.LightsON = 1;
 10532  008D  1533               	bsf	_Load^(0+256),2
 10533                           
 10534                           ;OverLoad_B1.c: 75: if (Load.ADtoGO == 1) {
 10535  008E  1E33               	btfss	_Load^(0+256),4
 10536  008F  29C3               	goto	l1613
 10537                           
 10538                           ;OverLoad_B1.c: 76: Load.Time++;
 10539  0090  3001               	movlw	1
 10540  0091  07B4               	addwf	(_Load^(0+256)+1),f
 10541  0092  3000               	movlw	0
 10542  0093  3DB5               	addwfc	((_Load+1)^(0+256)+1),f
 10543                           
 10544                           ;OverLoad_B1.c: 77: if (Load.Time >= (40 / 20)) {
 10545  0094  3000               	movlw	0
 10546  0095  0235               	subwf	((_Load+1)^(0+256)+1),w
 10547  0096  3002               	movlw	2
 10548  0097  1903               	skipnz
 10549  0098  0234               	subwf	(_Load^(0+256)+1),w
 10550  0099  1C03               	skipc
 10551  009A  0008               	return
 10552                           
 10553                           ;OverLoad_B1.c: 78: Load.Time = 0;
 10554  009B  01B4               	clrf	(_Load^(0+256)+1)
 10555  009C  01B5               	clrf	((_Load+1)^(0+256)+1)
 10556                           
 10557                           ;OverLoad_B1.c: 79: Load.ADtoGO = 0;
 10558  009D  1233               	bcf	_Load^(0+256),4
 10559                           
 10560                           ;OverLoad_B1.c: 81: for (int i = 1; i < 4; i++) {
 10561  009E  3001               	movlw	1
 10562  009F  0020               	movlb	0	; select bank0
 10563  00A0  00A4               	movwf	Load_Main@i
 10564  00A1  3000               	movlw	0
 10565  00A2  00A5               	movwf	Load_Main@i+1
 10566  00A3  0825               	movf	Load_Main@i+1,w
 10567  00A4  3A80               	xorlw	128
 10568  00A5  00A0               	movwf	??_Load_Main
 10569  00A6  3080               	movlw	128
 10570  00A7  0220               	subwf	??_Load_Main,w
 10571  00A8  1D03               	skipz
 10572  00A9  28AC               	goto	u13225
 10573  00AA  3004               	movlw	4
 10574  00AB  0224               	subwf	Load_Main@i,w
 10575  00AC                     u13225:	
 10576  00AC  1803               	btfsc	3,0
 10577  00AD  28E0               	goto	l10785
 10578  00AE                     l10779:	
 10579                           
 10580                           ;OverLoad_B1.c: 82: Load.ADH += Load.AH[i];
 10581  00AE  0020               	movlb	0	; select bank0
 10582  00AF  3524               	lslf	Load_Main@i,w
 10583  00B0  3E3E               	addlw	(_Load+11)& (0+255)
 10584  00B1  0086               	movwf	6
 10585  00B2  3001               	movlw	1	; select bank2/3
 10586  00B3  0087               	movwf	7
 10587  00B4  3F40               	moviw [0]fsr1
 10588  00B5  00A0               	movwf	??_Load_Main
 10589  00B6  3F41               	moviw [1]fsr1
 10590  00B7  00A1               	movwf	??_Load_Main+1
 10591  00B8  0820               	movf	??_Load_Main,w
 10592  00B9  0022               	movlb	2	; select bank2
 10593  00BA  07B8               	addwf	(_Load^(0+256)+5),f
 10594  00BB  0020               	movlb	0	; select bank0
 10595  00BC  0821               	movf	??_Load_Main+1,w
 10596  00BD  0022               	movlb	2	; select bank2
 10597  00BE  3DB9               	addwfc	((_Load+1)^(0+256)+5),f
 10598                           
 10599                           ;OverLoad_B1.c: 83: Load.ADL += Load.AL[i];
 10600  00BF  0020               	movlb	0	; select bank0
 10601  00C0  3524               	lslf	Load_Main@i,w
 10602  00C1  3E48               	addlw	(_Load+21)& (0+255)
 10603  00C2  0086               	movwf	6
 10604  00C3  3001               	movlw	1	; select bank2/3
 10605  00C4  0087               	movwf	7
 10606  00C5  3F40               	moviw [0]fsr1
 10607  00C6  00A0               	movwf	??_Load_Main
 10608  00C7  3F41               	moviw [1]fsr1
 10609  00C8  00A1               	movwf	??_Load_Main+1
 10610  00C9  0820               	movf	??_Load_Main,w
 10611  00CA  0022               	movlb	2	; select bank2
 10612  00CB  07BA               	addwf	(_Load^(0+256)+7),f
 10613  00CC  0020               	movlb	0	; select bank0
 10614  00CD  0821               	movf	??_Load_Main+1,w
 10615  00CE  0022               	movlb	2	; select bank2
 10616  00CF  3DBB               	addwfc	((_Load+1)^(0+256)+7),f
 10617  00D0  3001               	movlw	1
 10618  00D1  0020               	movlb	0	; select bank0
 10619  00D2  07A4               	addwf	Load_Main@i,f
 10620  00D3  3000               	movlw	0
 10621  00D4  3DA5               	addwfc	Load_Main@i+1,f
 10622  00D5  0825               	movf	Load_Main@i+1,w
 10623  00D6  3A80               	xorlw	128
 10624  00D7  00A0               	movwf	??_Load_Main
 10625  00D8  3080               	movlw	128
 10626  00D9  0220               	subwf	??_Load_Main,w
 10627  00DA  1D03               	skipz
 10628  00DB  28DE               	goto	u13235
 10629  00DC  3004               	movlw	4
 10630  00DD  0224               	subwf	Load_Main@i,w
 10631  00DE                     u13235:	
 10632  00DE  1C03               	skipc
 10633  00DF  28AE               	goto	l10779
 10634  00E0                     l10785:	
 10635                           
 10636                           ;OverLoad_B1.c: 84: }
 10637                           ;OverLoad_B1.c: 85: Load.ADH /= 3;
 10638  00E0  3003               	movlw	3
 10639  00E1  00F2               	movwf	___lwdiv@divisor
 10640  00E2  3000               	movlw	0
 10641  00E3  00F3               	movwf	___lwdiv@divisor+1
 10642  00E4  0022               	movlb	2	; select bank2
 10643  00E5  0839               	movf	((_Load+1)^(0+256)+5),w
 10644  00E6  01F5               	clrf	___lwdiv@dividend+1
 10645  00E7  07F5               	addwf	___lwdiv@dividend+1,f
 10646  00E8  0838               	movf	(_Load^(0+256)+5),w
 10647  00E9  01F4               	clrf	___lwdiv@dividend
 10648  00EA  07F4               	addwf	___lwdiv@dividend,f
 10649  00EB  3192  2264  3180   	fcall	___lwdiv
 10650  00EE  0873               	movf	?___lwdiv+1,w
 10651  00EF  0022               	movlb	2	; select bank2
 10652  00F0  01B9               	clrf	((_Load+1)^(0+256)+5)
 10653  00F1  07B9               	addwf	((_Load+1)^(0+256)+5),f
 10654  00F2  0872               	movf	?___lwdiv,w
 10655  00F3  01B8               	clrf	(_Load^(0+256)+5)
 10656  00F4  07B8               	addwf	(_Load^(0+256)+5),f
 10657                           
 10658                           ;OverLoad_B1.c: 86: Load.ADL /= 3;
 10659  00F5  3003               	movlw	3
 10660  00F6  00F2               	movwf	___lwdiv@divisor
 10661  00F7  3000               	movlw	0
 10662  00F8  00F3               	movwf	___lwdiv@divisor+1
 10663  00F9  083B               	movf	((_Load+1)^(0+256)+7),w
 10664  00FA  01F5               	clrf	___lwdiv@dividend+1
 10665  00FB  07F5               	addwf	___lwdiv@dividend+1,f
 10666  00FC  083A               	movf	(_Load^(0+256)+7),w
 10667  00FD  01F4               	clrf	___lwdiv@dividend
 10668  00FE  07F4               	addwf	___lwdiv@dividend,f
 10669  00FF  3192  2264  3180   	fcall	___lwdiv
 10670  0102  0873               	movf	?___lwdiv+1,w
 10671  0103  0022               	movlb	2	; select bank2
 10672  0104  01BB               	clrf	((_Load+1)^(0+256)+7)
 10673  0105  07BB               	addwf	((_Load+1)^(0+256)+7),f
 10674  0106  0872               	movf	?___lwdiv,w
 10675  0107  01BA               	clrf	(_Load^(0+256)+7)
 10676  0108  07BA               	addwf	(_Load^(0+256)+7),f
 10677                           
 10678                           ;OverLoad_B1.c: 87: setLoad_AH_AL_Restore();
 10679  0109  319E  265C  3180   	fcall	_setLoad_AH_AL_Restore
 10680                           
 10681                           ;OverLoad_B1.c: 89: if (Load.ADH >= Load.ADL) {
 10682  010C  0022               	movlb	2	; select bank2
 10683  010D  083B               	movf	((_Load+1)^(0+256)+7),w
 10684  010E  0239               	subwf	((_Load+1)^(0+256)+5),w
 10685  010F  1D03               	skipz
 10686  0110  2913               	goto	u13245
 10687  0111  083A               	movf	(_Load^(0+256)+7),w
 10688  0112  0238               	subwf	(_Load^(0+256)+5),w
 10689  0113                     u13245:	
 10690  0113  1C03               	skipc
 10691  0114  0008               	return
 10692                           
 10693                           ;OverLoad_B1.c: 90: Load.AD = Load.ADH - Load.ADL;
 10694  0115  3005               	movlw	5
 10695  0116  3E33               	addlw	_Load& (0+255)
 10696  0117  0086               	movwf	6
 10697  0118  3001               	movlw	1	; select bank2/3
 10698  0119  0087               	movwf	7
 10699  011A  093A               	comf	(_Load^(0+256)+7),w
 10700  011B  0020               	movlb	0	; select bank0
 10701  011C  00A0               	movwf	??_Load_Main
 10702  011D  0022               	movlb	2	; select bank2
 10703  011E  093B               	comf	((_Load+1)^(0+256)+7),w
 10704  011F  0020               	movlb	0	; select bank0
 10705  0120  00A1               	movwf	??_Load_Main+1
 10706  0121  0AA0               	incf	??_Load_Main,f
 10707  0122  1903               	skipnz
 10708  0123  0AA1               	incf	??_Load_Main+1,f
 10709  0124  3F40               	moviw [0]fsr1
 10710  0125  0720               	addwf	??_Load_Main,w
 10711  0126  0022               	movlb	2	; select bank2
 10712  0127  00D2               	movwf	(_Load^(0+256)+31)
 10713  0128  3F41               	moviw [1]fsr1
 10714  0129  0020               	movlb	0	; select bank0
 10715  012A  3D21               	addwfc	??_Load_Main+1,w
 10716  012B  0022               	movlb	2	; select bank2
 10717  012C  00D3               	movwf	(_Load^(0+256)+32)
 10718                           
 10719                           ;OverLoad_B1.c: 91: Load.ADH = 0;
 10720  012D  01B8               	clrf	(_Load^(0+256)+5)
 10721  012E  01B9               	clrf	((_Load+1)^(0+256)+5)
 10722                           
 10723                           ;OverLoad_B1.c: 92: Load.ADL = 0;
 10724  012F  01BA               	clrf	(_Load^(0+256)+7)
 10725  0130  01BB               	clrf	((_Load+1)^(0+256)+7)
 10726                           
 10727                           ;OverLoad_B1.c: 94: if (Load.Run == 1) {
 10728  0131  1DB3               	btfss	_Load^(0+256),3
 10729  0132  298F               	goto	l10825
 10730                           
 10731                           ;OverLoad_B1.c: 95: if (Load.Count < 2) {
 10732  0133  3002               	movlw	2
 10733  0134  025C               	subwf	(_Load^(0+256)+41),w
 10734  0135  1803               	skipnc
 10735  0136  298F               	goto	l10825
 10736                           
 10737                           ;OverLoad_B1.c: 96: Load.Count++;
 10738  0137  3001               	movlw	1
 10739  0138  0020               	movlb	0	; select bank0
 10740  0139  00A0               	movwf	??_Load_Main
 10741  013A  0820               	movf	??_Load_Main,w
 10742  013B  0022               	movlb	2	; select bank2
 10743  013C  07DC               	addwf	(_Load^(0+256)+41),f
 10744                           
 10745                           ;OverLoad_B1.c: 97: Load_Status = getDimmer_Load_Status();
 10746  013D  319B  2311  3180   	fcall	_getDimmer_Load_Status
 10747  0140  0020               	movlb	0	; select bank0
 10748  0141  00A0               	movwf	??_Load_Main
 10749  0142  0820               	movf	??_Load_Main,w
 10750  0143  00A3               	movwf	Load_Main@Load_Status
 10751                           
 10752                           ;OverLoad_B1.c: 98: Load.LightsCount = getMain_Lights_Count();
 10753  0144  319C  2483  3180   	fcall	_getMain_Lights_Count
 10754  0147  0020               	movlb	0	; select bank0
 10755  0148  00A0               	movwf	??_Load_Main
 10756  0149  0820               	movf	??_Load_Main,w
 10757  014A  0022               	movlb	2	; select bank2
 10758  014B  00DF               	movwf	(_Load^(0+256)+44)
 10759                           
 10760                           ;OverLoad_B1.c: 99: if (Load.Count == 1) {
 10761  014C  085C               	movf	(_Load^(0+256)+41),w
 10762  014D  3A01               	xorlw	1
 10763  014E  1D03               	skipz
 10764  014F  295A               	goto	l10811
 10765                           
 10766                           ;OverLoad_B1.c: 100: Load.ErrorCountValue = 2;
 10767  0150  3002               	movlw	2
 10768  0151  0020               	movlb	0	; select bank0
 10769  0152  00A0               	movwf	??_Load_Main
 10770  0153  0820               	movf	??_Load_Main,w
 10771  0154  0022               	movlb	2	; select bank2
 10772  0155  00DE               	movwf	(_Load^(0+256)+43)
 10773                           
 10774                           ;OverLoad_B1.c: 101: Load.JudgeValue = (20*50);
 10775  0156  30E8               	movlw	232
 10776  0157  00D8               	movwf	(_Load^(0+256)+37)
 10777  0158  3003               	movlw	3
 10778  0159  2965               	goto	L7
 10779  015A                     l10811:	
 10780                           ;OverLoad_B1.c: 102: } else if (Load.Count == 2) {
 10781                           
 10782  015A  085C               	movf	(_Load^(0+256)+41),w
 10783  015B  3A02               	xorlw	2
 10784  015C  1D03               	skipz
 10785  015D  298F               	goto	l10825
 10786                           
 10787                           ;OverLoad_B1.c: 103: if (Load.LightsCount == 1) {
 10788  015E  085F               	movf	(_Load^(0+256)+44),w
 10789  015F  3A01               	xorlw	1
 10790  0160  1D03               	skipz
 10791  0161  2967               	goto	l10817
 10792                           
 10793                           ;OverLoad_B1.c: 104: Load.JudgeValue = (int)(1.1*50);
 10794  0162  3037               	movlw	55
 10795  0163  00D8               	movwf	(_Load^(0+256)+37)
 10796  0164  3000               	movlw	0
 10797  0165                     L7:	
 10798  0165  00D9               	movwf	(_Load^(0+256)+38)
 10799                           
 10800                           ;OverLoad_B1.c: 105: } else {
 10801  0166  298F               	goto	l10825
 10802  0167                     l10817:	
 10803                           
 10804                           ;OverLoad_B1.c: 106: if (Load_Status == 0) {
 10805  0167  0020               	movlb	0	; select bank0
 10806  0168  08A3               	movf	Load_Main@Load_Status,f
 10807  0169  1D03               	skipz
 10808  016A  2983               	goto	l10821
 10809                           
 10810                           ;OverLoad_B1.c: 107: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10811  016B  0022               	movlb	2	; select bank2
 10812  016C  085F               	movf	(_Load^(0+256)+44),w
 10813  016D  0020               	movlb	0	; select bank0
 10814  016E  00A0               	movwf	??_Load_Main
 10815  016F  01A1               	clrf	??_Load_Main+1
 10816  0170  0820               	movf	??_Load_Main,w
 10817  0171  00F2               	movwf	___wmul@multiplier
 10818  0172  0821               	movf	??_Load_Main+1,w
 10819  0173  00F3               	movwf	___wmul@multiplier+1
 10820  0174  3037               	movlw	55
 10821  0175  00F4               	movwf	___wmul@multiplicand
 10822  0176  3000               	movlw	0
 10823  0177  00F5               	movwf	___wmul@multiplicand+1
 10824  0178  319F  2701  3180   	fcall	___wmul
 10825  017B  0873               	movf	?___wmul+1,w
 10826  017C  0022               	movlb	2	; select bank2
 10827  017D  01D9               	clrf	((_Load+1)^(0+256)+37)
 10828  017E  07D9               	addwf	((_Load+1)^(0+256)+37),f
 10829  017F  0872               	movf	?___wmul,w
 10830  0180  01D8               	clrf	(_Load^(0+256)+37)
 10831  0181  07D8               	addwf	(_Load^(0+256)+37),f
 10832                           
 10833                           ;OverLoad_B1.c: 108: } else if (Load_Status == 1) {
 10834  0182  298F               	goto	l10825
 10835  0183                     l10821:	
 10836  0183  0020               	movlb	0	; select bank0
 10837  0184  0823               	movf	Load_Main@Load_Status,w
 10838  0185  3A01               	xorlw	1
 10839  0186  1D03               	skipz
 10840  0187  298F               	goto	l10825
 10841                           
 10842                           ;OverLoad_B1.c: 109: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10843  0188  0022               	movlb	2	; select bank2
 10844  0189  083C               	movf	(_Load^(0+256)+9),w
 10845  018A  3E37               	addlw	55
 10846  018B  00D8               	movwf	(_Load^(0+256)+37)
 10847  018C  3000               	movlw	0
 10848  018D  3D3D               	addwfc	((_Load+1)^(0+256)+9),w
 10849  018E  00D9               	movwf	((_Load+1)^(0+256)+37)
 10850  018F                     l10825:	
 10851                           
 10852                           ;OverLoad_B1.c: 110: }
 10853                           ;OverLoad_B1.c: 111: }
 10854                           ;OverLoad_B1.c: 112: }
 10855                           ;OverLoad_B1.c: 113: }
 10856                           ;OverLoad_B1.c: 114: }
 10857                           ;OverLoad_B1.c: 116: if (Load.AD >= Load.JudgeValue) {
 10858  018F  0022               	movlb	2	; select bank2
 10859  0190  0859               	movf	((_Load+1)^(0+256)+37),w
 10860  0191  0253               	subwf	((_Load+1)^(0+256)+31),w
 10861  0192  1D03               	skipz
 10862  0193  2996               	goto	u13325
 10863  0194  0858               	movf	(_Load^(0+256)+37),w
 10864  0195  0252               	subwf	(_Load^(0+256)+31),w
 10865  0196                     u13325:	
 10866  0196  1C03               	skipc
 10867  0197  29A5               	goto	l10835
 10868                           
 10869                           ;OverLoad_B1.c: 117: Load.ErrorCount++;
 10870  0198  3001               	movlw	1
 10871  0199  0020               	movlb	0	; select bank0
 10872  019A  00A0               	movwf	??_Load_Main
 10873  019B  0820               	movf	??_Load_Main,w
 10874  019C  0022               	movlb	2	; select bank2
 10875  019D  07DD               	addwf	(_Load^(0+256)+42),f
 10876                           
 10877                           ;OverLoad_B1.c: 118: if (Load.ErrorCount > Load.ErrorCountValue) {
 10878  019E  085D               	movf	(_Load^(0+256)+42),w
 10879  019F  025E               	subwf	(_Load^(0+256)+43),w
 10880  01A0  1803               	skipnc
 10881  01A1  0008               	return
 10882                           
 10883                           ;OverLoad_B1.c: 119: Load.ErrorCount = 0;
 10884  01A2  01DD               	clrf	(_Load^(0+256)+42)
 10885                           
 10886                           ;OverLoad_B1.c: 120: Load.ERROR = 1;
 10887  01A3  16B3               	bsf	_Load^(0+256),5
 10888                           
 10889                           ;OverLoad_B1.c: 142: }
 10890                           ;OverLoad_B1.c: 143: } else {
 10891  01A4  0008               	return
 10892  01A5                     l10835:	
 10893                           
 10894                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10895  01A5  01DD               	clrf	(_Load^(0+256)+42)
 10896                           
 10897                           ;OverLoad_B1.c: 145: if (Load.Run == 1) {
 10898  01A6  1DB3               	btfss	_Load^(0+256),3
 10899  01A7  0008               	return
 10900                           
 10901                           ;OverLoad_B1.c: 146: Load.SafeCount++;
 10902  01A8  3001               	movlw	1
 10903  01A9  0020               	movlb	0	; select bank0
 10904  01AA  00A0               	movwf	??_Load_Main
 10905  01AB  0820               	movf	??_Load_Main,w
 10906  01AC  0022               	movlb	2	; select bank2
 10907  01AD  07E0               	addwf	(_Load^(0+256)+45),f
 10908                           
 10909                           ;OverLoad_B1.c: 147: if (Load.SafeCount >= 3) {
 10910  01AE  3003               	movlw	3
 10911  01AF  0260               	subwf	(_Load^(0+256)+45),w
 10912  01B0  1C03               	skipc
 10913  01B1  0008               	return
 10914                           
 10915                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10916  01B2  01E0               	clrf	(_Load^(0+256)+45)
 10917                           
 10918                           ;OverLoad_B1.c: 149: Load.OK = 1;
 10919  01B3  17B3               	bsf	_Load^(0+256),7
 10920                           
 10921                           ;OverLoad_B1.c: 150: Load.Run = 0;
 10922  01B4  11B3               	bcf	_Load^(0+256),3
 10923                           
 10924                           ;OverLoad_B1.c: 151: Load.Count = 0;
 10925  01B5  01DC               	clrf	(_Load^(0+256)+41)
 10926                           
 10927                           ;OverLoad_B1.c: 152: Load.TotalLoad = Load.AD;
 10928  01B6  0853               	movf	((_Load+1)^(0+256)+31),w
 10929  01B7  01BD               	clrf	((_Load+1)^(0+256)+9)
 10930  01B8  07BD               	addwf	((_Load+1)^(0+256)+9),f
 10931  01B9  0852               	movf	(_Load^(0+256)+31),w
 10932  01BA  01BC               	clrf	(_Load^(0+256)+9)
 10933  01BB  07BC               	addwf	(_Load^(0+256)+9),f
 10934                           
 10935                           ;OverLoad_B1.c: 153: Load.ErrorCountValue = 3;
 10936  01BC  3003               	movlw	3
 10937  01BD  0020               	movlb	0	; select bank0
 10938  01BE  00A0               	movwf	??_Load_Main
 10939  01BF  0820               	movf	??_Load_Main,w
 10940  01C0  0022               	movlb	2	; select bank2
 10941  01C1  00DE               	movwf	(_Load^(0+256)+43)
 10942                           
 10943                           ;OverLoad_B1.c: 156: }
 10944                           ;OverLoad_B1.c: 157: }
 10945                           ;OverLoad_B1.c: 180: }
 10946                           ;OverLoad_B1.c: 181: }
 10947                           ;OverLoad_B1.c: 182: }
 10948                           ;OverLoad_B1.c: 183: } else {
 10949  01C2  0008               	return
 10950  01C3                     l1613:	
 10951                           
 10952                           ;OverLoad_B1.c: 184: Load.ADtoGO = 1;
 10953  01C3  1633               	bsf	_Load^(0+256),4
 10954                           
 10955                           ;OverLoad_B1.c: 185: }
 10956                           ;OverLoad_B1.c: 186: } else {
 10957  01C4  0008               	return
 10958  01C5                     l1612:	
 10959                           
 10960                           ;OverLoad_B1.c: 188: if (Load.LightsON == 1) {
 10961  01C5  1D33               	btfss	_Load^(0+256),2
 10962  01C6  29D8               	goto	l10873
 10963                           
 10964                           ;OverLoad_B1.c: 189: Load.LightsON = 0;
 10965  01C7  1133               	bcf	_Load^(0+256),2
 10966                           
 10967                           ;OverLoad_B1.c: 191: Load.ADtoGO = 0;
 10968  01C8  1233               	bcf	_Load^(0+256),4
 10969                           
 10970                           ;OverLoad_B1.c: 192: Load.Time = 0;
 10971  01C9  01B4               	clrf	(_Load^(0+256)+1)
 10972  01CA  01B5               	clrf	((_Load+1)^(0+256)+1)
 10973                           
 10974                           ;OverLoad_B1.c: 193: setLoad_AH_AL_Restore();
 10975  01CB  319E  265C  3180   	fcall	_setLoad_AH_AL_Restore
 10976                           
 10977                           ;OverLoad_B1.c: 195: Load.ErrorCount = 0;
 10978  01CE  0022               	movlb	2	; select bank2
 10979  01CF  01DD               	clrf	(_Load^(0+256)+42)
 10980                           
 10981                           ;OverLoad_B1.c: 196: Load.SafeCount = 0;
 10982  01D0  01E0               	clrf	(_Load^(0+256)+45)
 10983                           
 10984                           ;OverLoad_B1.c: 198: Load.ADH = 0;
 10985  01D1  01B8               	clrf	(_Load^(0+256)+5)
 10986  01D2  01B9               	clrf	((_Load+1)^(0+256)+5)
 10987                           
 10988                           ;OverLoad_B1.c: 199: Load.ADL = 0;
 10989  01D3  01BA               	clrf	(_Load^(0+256)+7)
 10990  01D4  01BB               	clrf	((_Load+1)^(0+256)+7)
 10991                           
 10992                           ;OverLoad_B1.c: 205: Load.Run = 0;
 10993  01D5  11B3               	bcf	_Load^(0+256),3
 10994                           
 10995                           ;OverLoad_B1.c: 206: Load.Count = 0;
 10996  01D6  01DC               	clrf	(_Load^(0+256)+41)
 10997                           
 10998                           ;OverLoad_B1.c: 207: Load.OK = 0;
 10999  01D7  13B3               	bcf	_Load^(0+256),7
 11000  01D8                     l10873:	
 11001                           
 11002                           ;OverLoad_B1.c: 229: }
 11003                           ;OverLoad_B1.c: 230: if (Load.ERROR == 1) {
 11004  01D8  1EB3               	btfss	_Load^(0+256),5
 11005  01D9  0008               	return
 11006                           
 11007                           ;OverLoad_B1.c: 231: Load.ErrorTime++;
 11008  01DA  3001               	movlw	1
 11009  01DB  07B6               	addwf	(_Load^(0+256)+3),f
 11010  01DC  3000               	movlw	0
 11011  01DD  3DB7               	addwfc	((_Load+1)^(0+256)+3),f
 11012                           
 11013                           ;OverLoad_B1.c: 232: if (Load.ErrorTime >= (10000 / 20)) {
 11014  01DE  3001               	movlw	1
 11015  01DF  0237               	subwf	((_Load+1)^(0+256)+3),w
 11016  01E0  30F4               	movlw	244
 11017  01E1  1903               	skipnz
 11018  01E2  0236               	subwf	(_Load^(0+256)+3),w
 11019  01E3  1C03               	skipc
 11020  01E4  0008               	return
 11021                           
 11022                           ;OverLoad_B1.c: 233: Load.ErrorTime = 0;
 11023  01E5  01B6               	clrf	(_Load^(0+256)+3)
 11024  01E6  01B7               	clrf	((_Load+1)^(0+256)+3)
 11025                           
 11026                           ;OverLoad_B1.c: 234: Load.ERROR = 0;
 11027  01E7  12B3               	bcf	_Load^(0+256),5
 11028                           
 11029                           ;OverLoad_B1.c: 235: }
 11030                           ;OverLoad_B1.c: 236: }
 11031                           ;OverLoad_B1.c: 237: }
 11032                           ;OverLoad_B1.c: 238: } else {
 11033  01E8  0008               	return
 11034  01E9                     l1602:	
 11035                           
 11036                           ;OverLoad_B1.c: 239: if (myMain.PowerON == 1) {
 11037  01E9  1C20               	btfss	_myMain^(0+256),0
 11038  01EA  0008               	return
 11039                           
 11040                           ;OverLoad_B1.c: 240: Load.Enable = 1;
 11041  01EB  1433               	bsf	_Load^(0+256),0
 11042  01EC  0008               	return
 11043  01ED                     __end_of_Load_Main:	
 11044                           
 11045                           	psect	text64
 11046  1C83                     __ptext64:	
 11047 ;; *************** function _getMain_Lights_Count *****************
 11048 ;; Defined at:
 11049 ;;		line 466 in file "../src/main_B1.c"
 11050 ;; Parameters:    Size  Location     Type
 11051 ;;		None
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;  status2         1    4[COMMON] unsigned char 
 11054 ;;  status1         1    3[COMMON] unsigned char 
 11055 ;;  count           1    2[COMMON] unsigned char 
 11056 ;; Return value:  Size  Location     Type
 11057 ;;                  1    wreg      unsigned char 
 11058 ;; Registers used:
 11059 ;;		wreg, status,2, status,0
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;Total ram usage:        3 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    3
 11072 ;; This function calls:
 11073 ;;		Nothing
 11074 ;; This function is called by:
 11075 ;;		_Load_Main
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           
 11080                           ;psect for function _getMain_Lights_Count
 11081  1C83                     _getMain_Lights_Count:	
 11082                           
 11083                           ;main_B1.c: 467: char count = 0;
 11084                           
 11085                           ;incstack = 0
 11086                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11087  1C83  01F2               	clrf	getMain_Lights_Count@count
 11088                           
 11089                           ;main_B1.c: 471: char status1 = 0;
 11090  1C84  01F3               	clrf	getMain_Lights_Count@status1
 11091                           
 11092                           ;main_B1.c: 472: status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11093  1C85  3000               	movlw	0
 11094  1C86  0021               	movlb	1	; select bank1
 11095  1C87  19DD               	btfsc	_DimmerIntr1^(0+128),3
 11096  1C88  3001               	movlw	1
 11097  1C89  00F3               	movwf	getMain_Lights_Count@status1
 11098                           
 11099                           ;main_B1.c: 475: char status2 = 0;
 11100  1C8A  01F4               	clrf	getMain_Lights_Count@status2
 11101                           
 11102                           ;main_B1.c: 476: status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11103  1C8B  3000               	movlw	0
 11104  1C8C  19E4               	btfsc	_DimmerIntr2^(0+128),3
 11105  1C8D  3001               	movlw	1
 11106  1C8E  00F4               	movwf	getMain_Lights_Count@status2
 11107                           
 11108                           ;main_B1.c: 500: return count = (status1 + status2);
 11109  1C8F  0873               	movf	getMain_Lights_Count@status1,w
 11110  1C90  0774               	addwf	getMain_Lights_Count@status2,w
 11111  1C91  00F2               	movwf	getMain_Lights_Count@count
 11112  1C92  0008               	return
 11113  1C93                     __end_of_getMain_Lights_Count:	
 11114                           
 11115                           	psect	text65
 11116  1B11                     __ptext65:	
 11117 ;; *************** function _getDimmer_Load_Status *****************
 11118 ;; Defined at:
 11119 ;;		line 1068 in file "../src/Dimmer_B1.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;		None
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;  status          1    2[COMMON] unsigned char 
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      unsigned char 
 11126 ;; Registers used:
 11127 ;;		wreg, status,2
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11136 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;Total ram usage:        1 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    3
 11140 ;; This function calls:
 11141 ;;		Nothing
 11142 ;; This function is called by:
 11143 ;;		_Load_Main
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           
 11148                           ;psect for function _getDimmer_Load_Status
 11149  1B11                     _getDimmer_Load_Status:	
 11150                           
 11151                           ;Dimmer_B1.c: 1069: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11152                           
 11153                           ;incstack = 0
 11154                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11155  1B11  3000               	movlw	0
 11156  1B12  0022               	movlb	2	; select bank2
 11157  1B13  192E               	btfsc	_Dimmer^(0+256),2	;volatile
 11158  1B14  3001               	movlw	1
 11159  1B15  00F2               	movwf	getDimmer_Load_Status@status
 11160                           
 11161                           ;Dimmer_B1.c: 1070: return status;
 11162  1B16  0872               	movf	getDimmer_Load_Status@status,w
 11163  1B17  0008               	return
 11164  1B18                     __end_of_getDimmer_Load_Status:	
 11165                           
 11166                           	psect	text66
 11167  1B0A                     __ptext66:	
 11168 ;; *************** function _getDimmer_LoadGO *****************
 11169 ;; Defined at:
 11170 ;;		line 1062 in file "../src/Dimmer_B1.c"
 11171 ;; Parameters:    Size  Location     Type
 11172 ;;		None
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;  loadgo          1    2[COMMON] unsigned char 
 11175 ;; Return value:  Size  Location     Type
 11176 ;;                  1    wreg      unsigned char 
 11177 ;; Registers used:
 11178 ;;		wreg, status,2
 11179 ;; Tracked objects:
 11180 ;;		On entry : 0/0
 11181 ;;		On exit  : 0/0
 11182 ;;		Unchanged: 0/0
 11183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11187 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;Total ram usage:        1 bytes
 11189 ;; Hardware stack levels used:    1
 11190 ;; Hardware stack levels required when called:    3
 11191 ;; This function calls:
 11192 ;;		Nothing
 11193 ;; This function is called by:
 11194 ;;		_Load_Main
 11195 ;; This function uses a non-reentrant model
 11196 ;;
 11197                           
 11198                           
 11199                           ;psect for function _getDimmer_LoadGO
 11200  1B0A                     _getDimmer_LoadGO:	
 11201                           
 11202                           ;Dimmer_B1.c: 1063: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11203                           
 11204                           ;incstack = 0
 11205                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11206  1B0A  3000               	movlw	0
 11207  1B0B  0022               	movlb	2	; select bank2
 11208  1B0C  18AE               	btfsc	_Dimmer^(0+256),1	;volatile
 11209  1B0D  3001               	movlw	1
 11210  1B0E  00F2               	movwf	getDimmer_LoadGO@loadgo
 11211                           
 11212                           ;Dimmer_B1.c: 1064: return loadgo;
 11213  1B0F  0872               	movf	getDimmer_LoadGO@loadgo,w
 11214  1B10  0008               	return
 11215  1B11                     __end_of_getDimmer_LoadGO:	
 11216                           
 11217                           	psect	text67
 11218  1E77                     __ptext67:	
 11219 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11220 ;; Defined at:
 11221 ;;		line 238 in file "../src/Dimmer_B1.c"
 11222 ;; Parameters:    Size  Location     Type
 11223 ;;		None
 11224 ;; Auto vars:     Size  Location     Type
 11225 ;;  status          1    5[COMMON] unsigned char 
 11226 ;; Return value:  Size  Location     Type
 11227 ;;                  1    wreg      unsigned char 
 11228 ;; Registers used:
 11229 ;;		wreg, status,2, status,0
 11230 ;; Tracked objects:
 11231 ;;		On entry : 0/0
 11232 ;;		On exit  : 0/0
 11233 ;;		Unchanged: 0/0
 11234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;Total ram usage:        4 bytes
 11240 ;; Hardware stack levels used:    1
 11241 ;; Hardware stack levels required when called:    3
 11242 ;; This function calls:
 11243 ;;		Nothing
 11244 ;; This function is called by:
 11245 ;;		_Load_Main
 11246 ;; This function uses a non-reentrant model
 11247 ;;
 11248                           
 11249                           
 11250                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11251  1E77                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11252                           
 11253                           ;Dimmer_B1.c: 239: char status = 0;
 11254                           
 11255                           ;incstack = 0
 11256                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11257  1E77  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11258                           
 11259                           ;Dimmer_B1.c: 246: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11260  1E78  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2102
 11261  1E79  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2102,f
 11262  1E7A  0021               	movlb	1	; select bank1
 11263  1E7B  1E5D               	btfss	_DimmerIntr1^(0+128),4
 11264  1E7C  1A64               	btfsc	_DimmerIntr2^(0+128),4
 11265  1E7D  2E7F               	goto	l7679
 11266  1E7E  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2102
 11267  1E7F                     l7679:	
 11268  1E7F  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2102,w
 11269  1E80  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11270  1E81  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11271  1E82  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11272                           
 11273                           ;Dimmer_B1.c: 254: if (status == 0) {
 11274  1E83  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11275  1E84  1D03               	skipz
 11276  1E85  2E90               	goto	l7691
 11277                           
 11278                           ;Dimmer_B1.c: 260: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11279  1E86  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2103
 11280  1E87  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2103,f
 11281  1E88  1F5D               	btfss	_DimmerIntr1^(0+128),6
 11282  1E89  1B64               	btfsc	_DimmerIntr2^(0+128),6
 11283  1E8A  2E8C               	goto	l7689
 11284  1E8B  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2103
 11285  1E8C                     l7689:	
 11286  1E8C  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2103,w
 11287  1E8D  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11288  1E8E  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11289  1E8F  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11290  1E90                     l7691:	
 11291                           
 11292                           ;Dimmer_B1.c: 266: }
 11293                           ;Dimmer_B1.c: 268: return status;
 11294  1E90  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11295  1E91  0008               	return
 11296  1E92                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11297                           
 11298                           	psect	text68
 11299  1F01                     __ptext68:	
 11300 ;; *************** function ___wmul *****************
 11301 ;; Defined at:
 11302 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11303 ;; Parameters:    Size  Location     Type
 11304 ;;  multiplier      2    2[COMMON] unsigned int 
 11305 ;;  multiplicand    2    4[COMMON] unsigned int 
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;  product         2    6[COMMON] unsigned int 
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  2    2[COMMON] unsigned int 
 11310 ;; Registers used:
 11311 ;;		wreg, status,2, status,0
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11317 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;Total ram usage:        6 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; Hardware stack levels required when called:    3
 11324 ;; This function calls:
 11325 ;;		Nothing
 11326 ;; This function is called by:
 11327 ;;		_Load_Main
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           
 11332                           ;psect for function ___wmul
 11333  1F01                     ___wmul:	
 11334                           
 11335                           ;incstack = 0
 11336                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11337  1F01  01F6               	clrf	___wmul@product
 11338  1F02  01F7               	clrf	___wmul@product+1
 11339  1F03                     l8239:	
 11340  1F03  1C72               	btfss	___wmul@multiplier,0
 11341  1F04  2F09               	goto	l2986
 11342  1F05  0874               	movf	___wmul@multiplicand,w
 11343  1F06  07F6               	addwf	___wmul@product,f
 11344  1F07  0875               	movf	___wmul@multiplicand+1,w
 11345  1F08  3DF7               	addwfc	___wmul@product+1,f
 11346  1F09                     l2986:	
 11347  1F09  3001               	movlw	1
 11348  1F0A                     u8635:	
 11349  1F0A  35F4               	lslf	___wmul@multiplicand,f
 11350  1F0B  0DF5               	rlf	___wmul@multiplicand+1,f
 11351  1F0C  0B89               	decfsz	9,f
 11352  1F0D  2F0A               	goto	u8635
 11353  1F0E  3001               	movlw	1
 11354  1F0F                     u8645:	
 11355  1F0F  36F3               	lsrf	___wmul@multiplier+1,f
 11356  1F10  0CF2               	rrf	___wmul@multiplier,f
 11357  1F11  0B89               	decfsz	9,f
 11358  1F12  2F0F               	goto	u8645
 11359  1F13  0873               	movf	___wmul@multiplier+1,w
 11360  1F14  0472               	iorwf	___wmul@multiplier,w
 11361  1F15  1D03               	skipz
 11362  1F16  2F03               	goto	l8239
 11363  1F17  0877               	movf	___wmul@product+1,w
 11364  1F18  01F3               	clrf	?___wmul+1
 11365  1F19  07F3               	addwf	?___wmul+1,f
 11366  1F1A  0876               	movf	___wmul@product,w
 11367  1F1B  01F2               	clrf	?___wmul
 11368  1F1C  07F2               	addwf	?___wmul,f
 11369  1F1D  0008               	return
 11370  1F1E                     __end_of___wmul:	
 11371                           
 11372                           	psect	text69
 11373  1264                     __ptext69:	
 11374 ;; *************** function ___lwdiv *****************
 11375 ;; Defined at:
 11376 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11377 ;; Parameters:    Size  Location     Type
 11378 ;;  divisor         2    2[COMMON] unsigned int 
 11379 ;;  dividend        2    4[COMMON] unsigned int 
 11380 ;; Auto vars:     Size  Location     Type
 11381 ;;  quotient        2    8[COMMON] unsigned int 
 11382 ;;  counter         1    7[COMMON] unsigned char 
 11383 ;; Return value:  Size  Location     Type
 11384 ;;                  2    2[COMMON] unsigned int 
 11385 ;; Registers used:
 11386 ;;		wreg, status,2, status,0
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11396 ;;Total ram usage:        8 bytes
 11397 ;; Hardware stack levels used:    1
 11398 ;; Hardware stack levels required when called:    3
 11399 ;; This function calls:
 11400 ;;		Nothing
 11401 ;; This function is called by:
 11402 ;;		_Load_Main
 11403 ;;		_setRF_Main
 11404 ;; This function uses a non-reentrant model
 11405 ;;
 11406                           
 11407                           
 11408                           ;psect for function ___lwdiv
 11409  1264                     ___lwdiv:	
 11410                           
 11411                           ;incstack = 0
 11412                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11413  1264  01F8               	clrf	___lwdiv@quotient
 11414  1265  01F9               	clrf	___lwdiv@quotient+1
 11415  1266  0873               	movf	___lwdiv@divisor+1,w
 11416  1267  0472               	iorwf	___lwdiv@divisor,w
 11417  1268  1903               	skipnz
 11418  1269  2A93               	goto	l10245
 11419  126A  01F7               	clrf	___lwdiv@counter
 11420  126B  0AF7               	incf	___lwdiv@counter,f
 11421  126C                     l10233:	
 11422  126C  1BF3               	btfsc	___lwdiv@divisor+1,7
 11423  126D  2A78               	goto	l10235
 11424  126E  3001               	movlw	1
 11425  126F                     u12165:	
 11426  126F  35F2               	lslf	___lwdiv@divisor,f
 11427  1270  0DF3               	rlf	___lwdiv@divisor+1,f
 11428  1271  0B89               	decfsz	9,f
 11429  1272  2A6F               	goto	u12165
 11430  1273  3001               	movlw	1
 11431  1274  00F6               	movwf	??___lwdiv
 11432  1275  0876               	movf	??___lwdiv,w
 11433  1276  07F7               	addwf	___lwdiv@counter,f
 11434  1277  2A6C               	goto	l10233
 11435  1278                     l10235:	
 11436  1278  3001               	movlw	1
 11437  1279                     u12185:	
 11438  1279  35F8               	lslf	___lwdiv@quotient,f
 11439  127A  0DF9               	rlf	___lwdiv@quotient+1,f
 11440  127B  0B89               	decfsz	9,f
 11441  127C  2A79               	goto	u12185
 11442  127D  0873               	movf	___lwdiv@divisor+1,w
 11443  127E  0275               	subwf	___lwdiv@dividend+1,w
 11444  127F  1D03               	skipz
 11445  1280  2A83               	goto	u12195
 11446  1281  0872               	movf	___lwdiv@divisor,w
 11447  1282  0274               	subwf	___lwdiv@dividend,w
 11448  1283                     u12195:	
 11449  1283  1C03               	skipc
 11450  1284  2A8A               	goto	l10241
 11451  1285  0872               	movf	___lwdiv@divisor,w
 11452  1286  02F4               	subwf	___lwdiv@dividend,f
 11453  1287  0873               	movf	___lwdiv@divisor+1,w
 11454  1288  3BF5               	subwfb	___lwdiv@dividend+1,f
 11455  1289  1478               	bsf	___lwdiv@quotient,0
 11456  128A                     l10241:	
 11457  128A  3001               	movlw	1
 11458  128B                     u12205:	
 11459  128B  36F3               	lsrf	___lwdiv@divisor+1,f
 11460  128C  0CF2               	rrf	___lwdiv@divisor,f
 11461  128D  0B89               	decfsz	9,f
 11462  128E  2A8B               	goto	u12205
 11463  128F  3001               	movlw	1
 11464  1290  02F7               	subwf	___lwdiv@counter,f
 11465  1291  1D03               	btfss	3,2
 11466  1292  2A78               	goto	l10235
 11467  1293                     l10245:	
 11468  1293  0879               	movf	___lwdiv@quotient+1,w
 11469  1294  01F3               	clrf	?___lwdiv+1
 11470  1295  07F3               	addwf	?___lwdiv+1,f
 11471  1296  0878               	movf	___lwdiv@quotient,w
 11472  1297  01F2               	clrf	?___lwdiv
 11473  1298  07F2               	addwf	?___lwdiv,f
 11474  1299  0008               	return
 11475  129A                     __end_of___lwdiv:	
 11476                           
 11477                           	psect	text70
 11478  1ACD                     __ptext70:	
 11479 ;; *************** function _Load_Initialization *****************
 11480 ;; Defined at:
 11481 ;;		line 9 in file "../src/OverLoad_B1.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;		None
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;		None
 11486 ;; Return value:  Size  Location     Type
 11487 ;;		None               void
 11488 ;; Registers used:
 11489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;Total ram usage:        0 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:    4
 11502 ;; This function calls:
 11503 ;;		_setLoad_AH_AL_Restore
 11504 ;; This function is called by:
 11505 ;;		_main
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           
 11510                           ;psect for function _Load_Initialization
 11511  1ACD                     _Load_Initialization:	
 11512                           
 11513                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11514                           
 11515                           ;incstack = 0
 11516                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11517  1ACD  319E  265C         	fcall	_setLoad_AH_AL_Restore
 11518  1ACF  0008               	return
 11519  1AD0                     __end_of_Load_Initialization:	
 11520                           
 11521                           	psect	text71
 11522  1E5C                     __ptext71:	
 11523 ;; *************** function _setLoad_AH_AL_Restore *****************
 11524 ;; Defined at:
 11525 ;;		line 266 in file "../src/OverLoad_B1.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;  i               1    3[COMMON] unsigned char 
 11530 ;; Return value:  Size  Location     Type
 11531 ;;		None               void
 11532 ;; Registers used:
 11533 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11534 ;; Tracked objects:
 11535 ;;		On entry : 0/0
 11536 ;;		On exit  : 0/0
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;Total ram usage:        2 bytes
 11544 ;; Hardware stack levels used:    1
 11545 ;; Hardware stack levels required when called:    3
 11546 ;; This function calls:
 11547 ;;		Nothing
 11548 ;; This function is called by:
 11549 ;;		_Load_Initialization
 11550 ;;		_Load_Main
 11551 ;; This function uses a non-reentrant model
 11552 ;;
 11553                           
 11554                           
 11555                           ;psect for function _setLoad_AH_AL_Restore
 11556  1E5C                     _setLoad_AH_AL_Restore:	
 11557                           
 11558                           ;OverLoad_B1.c: 267: char i;
 11559                           ;OverLoad_B1.c: 268: for (i = 0; i < 5; i++) {
 11560                           
 11561                           ;incstack = 0
 11562                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11563  1E5C  01F3               	clrf	setLoad_AH_AL_Restore@i
 11564  1E5D                     L8:	
 11565  1E5D  3005               	movlw	5
 11566  1E5E  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11567  1E5F  1803               	btfsc	3,0
 11568  1E60  0008               	return
 11569                           
 11570                           ;OverLoad_B1.c: 269: Load.AH[i] = 0;
 11571  1E61  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11572  1E62  3E3E               	addlw	(_Load+11)& (0+255)
 11573  1E63  0086               	movwf	6
 11574  1E64  3001               	movlw	1	; select bank2/3
 11575  1E65  0087               	movwf	7
 11576  1E66  3000               	movlw	0
 11577  1E67  3FC0               	movwi [0]fsr1
 11578  1E68  3FC1               	movwi [1]fsr1
 11579                           
 11580                           ;OverLoad_B1.c: 270: Load.AL[i] = 0xffff;
 11581  1E69  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11582  1E6A  3E48               	addlw	(_Load+21)& (0+255)
 11583  1E6B  0086               	movwf	6
 11584  1E6C  3001               	movlw	1	; select bank2/3
 11585  1E6D  0087               	movwf	7
 11586  1E6E  30FF               	movlw	255
 11587  1E6F  3FC0               	movwi [0]fsr1
 11588  1E70  30FF               	movlw	255
 11589  1E71  3FC1               	movwi [1]fsr1
 11590  1E72  3001               	movlw	1
 11591  1E73  00F2               	movwf	??_setLoad_AH_AL_Restore
 11592  1E74  0872               	movf	??_setLoad_AH_AL_Restore,w
 11593  1E75  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11594  1E76  2E5D               	goto	L8
 11595  1E77                     __end_of_setLoad_AH_AL_Restore:	
 11596                           
 11597                           	psect	text72
 11598  1BAB                     __ptext72:	
 11599 ;; *************** function _LED_Main *****************
 11600 ;; Defined at:
 11601 ;;		line 47 in file "../src/LED_B1.c"
 11602 ;; Parameters:    Size  Location     Type
 11603 ;;		None
 11604 ;; Auto vars:     Size  Location     Type
 11605 ;;		None
 11606 ;; Return value:  Size  Location     Type
 11607 ;;		None               void
 11608 ;; Registers used:
 11609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11610 ;; Tracked objects:
 11611 ;;		On entry : 0/0
 11612 ;;		On exit  : 0/0
 11613 ;;		Unchanged: 0/0
 11614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;Total ram usage:        0 bytes
 11620 ;; Hardware stack levels used:    1
 11621 ;; Hardware stack levels required when called:    5
 11622 ;; This function calls:
 11623 ;;		_setLED_Main
 11624 ;; This function is called by:
 11625 ;;		_main
 11626 ;; This function uses a non-reentrant model
 11627 ;;
 11628                           
 11629                           
 11630                           ;psect for function _LED_Main
 11631  1BAB                     _LED_Main:	
 11632                           
 11633                           ;LED_B1.c: 53: setLED_Main(1);
 11634                           
 11635                           ;incstack = 0
 11636                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11637  1BAB  3001               	movlw	1
 11638  1BAC  3193  2343  319B   	fcall	_setLED_Main
 11639                           
 11640                           ;LED_B1.c: 56: setLED_Main(2);
 11641  1BAF  3002               	movlw	2
 11642  1BB0  3193  2343  319B   	fcall	_setLED_Main
 11643                           
 11644                           ;LED_B1.c: 62: setLED_Main(99);
 11645  1BB3  3063               	movlw	99
 11646  1BB4  3193  2343         	fcall	_setLED_Main
 11647  1BB6  0008               	return
 11648  1BB7                     __end_of_LED_Main:	
 11649                           
 11650                           	psect	text73
 11651  1343                     __ptext73:	
 11652 ;; *************** function _setLED_Main *****************
 11653 ;; Defined at:
 11654 ;;		line 221 in file "../src/LED_B1.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;  led             1    wreg     unsigned char 
 11657 ;; Auto vars:     Size  Location     Type
 11658 ;;  led             1    6[COMMON] unsigned char 
 11659 ;; Return value:  Size  Location     Type
 11660 ;;		None               void
 11661 ;; Registers used:
 11662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11663 ;; Tracked objects:
 11664 ;;		On entry : 0/0
 11665 ;;		On exit  : 0/0
 11666 ;;		Unchanged: 0/0
 11667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;Total ram usage:        3 bytes
 11673 ;; Hardware stack levels used:    1
 11674 ;; Hardware stack levels required when called:    4
 11675 ;; This function calls:
 11676 ;;		_LedPointSelect
 11677 ;; This function is called by:
 11678 ;;		_LED_Main
 11679 ;; This function uses a non-reentrant model
 11680 ;;
 11681                           
 11682                           
 11683                           ;psect for function _setLED_Main
 11684  1343                     _setLED_Main:	
 11685                           
 11686                           ;incstack = 0
 11687                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11688                           ;setLED_Main@led stored from wreg
 11689  1343  00F6               	movwf	setLED_Main@led
 11690                           
 11691                           ;LED_B1.c: 222: LedPointSelect(led);
 11692  1344  0876               	movf	setLED_Main@led,w
 11693  1345  319E  26E4  3193   	fcall	_LedPointSelect
 11694                           
 11695                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11696  1348  0021               	movlb	1	; select bank1
 11697  1349  0842               	movf	_LED^(0+128),w
 11698  134A  0086               	movwf	6
 11699  134B  3001               	movlw	1	; select bank2/3
 11700  134C  0087               	movwf	7
 11701  134D  1C81               	btfss	1,1
 11702  134E  0008               	return
 11703                           
 11704                           ;LED_B1.c: 224: LED->Time++;
 11705  134F  0A42               	incf	_LED^(0+128),w
 11706  1350  0086               	movwf	6
 11707  1351  3001               	movlw	1	; select bank2/3
 11708  1352  0087               	movwf	7
 11709  1353  3001               	movlw	1
 11710  1354  0781               	addwf	1,f
 11711  1355  3141               	addfsr 1,1
 11712  1356  1803               	skipnc
 11713  1357  0A81               	incf	1,f
 11714                           
 11715                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11716  1358  0A42               	incf	_LED^(0+128),w
 11717  1359  0086               	movwf	6
 11718  135A  3001               	movlw	1	; select bank2/3
 11719  135B  0087               	movwf	7
 11720  135C  3F40               	moviw [0]fsr1
 11721  135D  00F4               	movwf	??_setLED_Main
 11722  135E  3F41               	moviw [1]fsr1
 11723  135F  00F5               	movwf	??_setLED_Main+1
 11724  1360  3000               	movlw	0
 11725  1361  0275               	subwf	??_setLED_Main+1,w
 11726  1362  3019               	movlw	25
 11727  1363  1903               	skipnz
 11728  1364  0274               	subwf	??_setLED_Main,w
 11729  1365  1C03               	skipc
 11730  1366  0008               	return
 11731                           
 11732                           ;LED_B1.c: 226: LED->Time = 0;
 11733  1367  0A42               	incf	_LED^(0+128),w
 11734  1368  0086               	movwf	6
 11735  1369  3001               	movlw	1	; select bank2/3
 11736  136A  0087               	movwf	7
 11737  136B  3000               	movlw	0
 11738  136C  3FC0               	movwi [0]fsr1
 11739  136D  3FC1               	movwi [1]fsr1
 11740                           
 11741                           ;LED_B1.c: 228: if (led == 1) {
 11742  136E  0876               	movf	setLED_Main@led,w
 11743  136F  3A01               	xorlw	1
 11744  1370  1D03               	skipz
 11745  1371  2B75               	goto	l1168
 11746                           
 11747                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11748  1372  3008               	movlw	8
 11749  1373  0020               	movlb	0	; select bank0
 11750  1374  068C               	xorwf	12,f
 11751  1375                     l1168:	
 11752                           
 11753                           ;LED_B1.c: 230: }
 11754                           ;LED_B1.c: 233: if (led == 2) {
 11755  1375  0876               	movf	setLED_Main@led,w
 11756  1376  3A02               	xorlw	2
 11757  1377  1D03               	skipz
 11758  1378  2B7C               	goto	l1169
 11759                           
 11760                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11761  1379  3080               	movlw	128
 11762  137A  0020               	movlb	0	; select bank0
 11763  137B  068E               	xorwf	14,f
 11764  137C                     l1169:	
 11765                           
 11766                           ;LED_B1.c: 235: }
 11767                           ;LED_B1.c: 243: if (led == 99) {
 11768  137C  0876               	movf	setLED_Main@led,w
 11769  137D  3A63               	xorlw	99
 11770  137E  1D03               	skipz
 11771  137F  0008               	return
 11772                           
 11773                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11774  1380  3020               	movlw	32
 11775  1381  0020               	movlb	0	; select bank0
 11776  1382  068D               	xorwf	13,f
 11777  1383  0008               	return
 11778  1384                     __end_of_setLED_Main:	
 11779                           
 11780                           	psect	text74
 11781  1B9F                     __ptext74:	
 11782 ;; *************** function _LED_Initialization *****************
 11783 ;; Defined at:
 11784 ;;		line 31 in file "../src/LED_B1.c"
 11785 ;; Parameters:    Size  Location     Type
 11786 ;;		None
 11787 ;; Auto vars:     Size  Location     Type
 11788 ;;		None
 11789 ;; Return value:  Size  Location     Type
 11790 ;;		None               void
 11791 ;; Registers used:
 11792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11793 ;; Tracked objects:
 11794 ;;		On entry : 0/0
 11795 ;;		On exit  : 0/0
 11796 ;;		Unchanged: 0/0
 11797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;Total ram usage:        0 bytes
 11803 ;; Hardware stack levels used:    1
 11804 ;; Hardware stack levels required when called:    6
 11805 ;; This function calls:
 11806 ;;		_setLED_Initialization
 11807 ;; This function is called by:
 11808 ;;		_main
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           
 11813                           ;psect for function _LED_Initialization
 11814  1B9F                     _LED_Initialization:	
 11815                           
 11816                           ;LED_B1.c: 33: setLED_Initialization(1);
 11817                           
 11818                           ;incstack = 0
 11819                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11820  1B9F  3001               	movlw	1
 11821  1BA0  319C  2473  319B   	fcall	_setLED_Initialization
 11822                           
 11823                           ;LED_B1.c: 36: setLED_Initialization(2);
 11824  1BA3  3002               	movlw	2
 11825  1BA4  319C  2473  319B   	fcall	_setLED_Initialization
 11826                           
 11827                           ;LED_B1.c: 42: setLED_Initialization(99);
 11828  1BA7  3063               	movlw	99
 11829  1BA8  319C  2473         	fcall	_setLED_Initialization
 11830  1BAA  0008               	return
 11831  1BAB                     __end_of_LED_Initialization:	
 11832                           
 11833                           	psect	text75
 11834  1C73                     __ptext75:	
 11835 ;; *************** function _setLED_Initialization *****************
 11836 ;; Defined at:
 11837 ;;		line 69 in file "../src/LED_B1.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;  led             1    wreg     unsigned char 
 11840 ;; Auto vars:     Size  Location     Type
 11841 ;;  led             1    6[COMMON] unsigned char 
 11842 ;; Return value:  Size  Location     Type
 11843 ;;		None               void
 11844 ;; Registers used:
 11845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11846 ;; Tracked objects:
 11847 ;;		On entry : 0/0
 11848 ;;		On exit  : 0/0
 11849 ;;		Unchanged: 0/0
 11850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11855 ;;Total ram usage:        1 bytes
 11856 ;; Hardware stack levels used:    1
 11857 ;; Hardware stack levels required when called:    5
 11858 ;; This function calls:
 11859 ;;		_LedPointSelect
 11860 ;;		_setLED
 11861 ;; This function is called by:
 11862 ;;		_LED_Initialization
 11863 ;; This function uses a non-reentrant model
 11864 ;;
 11865                           
 11866                           
 11867                           ;psect for function _setLED_Initialization
 11868  1C73                     _setLED_Initialization:	
 11869                           
 11870                           ;incstack = 0
 11871                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11872                           ;setLED_Initialization@led stored from wreg
 11873  1C73  00F6               	movwf	setLED_Initialization@led
 11874                           
 11875                           ;LED_B1.c: 70: LedPointSelect(led);
 11876  1C74  0876               	movf	setLED_Initialization@led,w
 11877  1C75  319E  26E4  319C   	fcall	_LedPointSelect
 11878                           
 11879                           ;LED_B1.c: 71: LED->Enable = 1;
 11880  1C78  0021               	movlb	1	; select bank1
 11881  1C79  0842               	movf	_LED^(0+128),w
 11882  1C7A  0086               	movwf	6
 11883  1C7B  3001               	movlw	1	; select bank2/3
 11884  1C7C  0087               	movwf	7
 11885  1C7D  1401               	bsf	1,0
 11886                           
 11887                           ;LED_B1.c: 72: setLED(led, 0);
 11888  1C7E  01F4               	clrf	setLED@command
 11889  1C7F  0876               	movf	setLED_Initialization@led,w
 11890  1C80  3197  27A1         	fcall	_setLED
 11891  1C82  0008               	return
 11892  1C83                     __end_of_setLED_Initialization:	
 11893                           
 11894                           	psect	text76
 11895  11FD                     __ptext76:	
 11896 ;; *************** function _Flash_Memory_Main *****************
 11897 ;; Defined at:
 11898 ;;		line 974 in file "../src/MCU_B1.c"
 11899 ;; Parameters:    Size  Location     Type
 11900 ;;		None
 11901 ;; Auto vars:     Size  Location     Type
 11902 ;;		None
 11903 ;; Return value:  Size  Location     Type
 11904 ;;		None               void
 11905 ;; Registers used:
 11906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11907 ;; Tracked objects:
 11908 ;;		On entry : 0/0
 11909 ;;		On exit  : 0/0
 11910 ;;		Unchanged: 0/0
 11911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;Total ram usage:        1 bytes
 11917 ;; Hardware stack levels used:    1
 11918 ;; Hardware stack levels required when called:    6
 11919 ;; This function calls:
 11920 ;;		_Flash_Memory_Modify
 11921 ;;		_getMain_All_LightsStatus
 11922 ;; This function is called by:
 11923 ;;		_main
 11924 ;; This function uses a non-reentrant model
 11925 ;;
 11926                           
 11927                           
 11928                           ;psect for function _Flash_Memory_Main
 11929  11FD                     _Flash_Memory_Main:	
 11930                           
 11931                           ;MCU_B1.c: 975: if (Memory.Modify == 1) {
 11932                           
 11933                           ;incstack = 0
 11934                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11935  11FD  0024               	movlb	4	; select bank4
 11936  11FE  1C44               	btfss	(_Memory^(0+512)+36),0
 11937  11FF  0008               	return
 11938                           
 11939                           ;MCU_B1.c: 976: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11940  1200  319C  2417  3191   	fcall	_getMain_All_LightsStatus
 11941  1203  3A00               	xorlw	0
 11942  1204  3000               	movlw	0
 11943  1205  1903               	skipnz
 11944  1206  3001               	movlw	1
 11945  1207  00F8               	movwf	??_Flash_Memory_Main
 11946  1208  0DF8               	rlf	??_Flash_Memory_Main,f
 11947  1209  0024               	movlb	4	; select bank4
 11948  120A  0844               	movf	(_Memory^(0+512)+36),w
 11949  120B  0678               	xorwf	??_Flash_Memory_Main,w
 11950  120C  39FD               	andlw	-3
 11951  120D  0678               	xorwf	??_Flash_Memory_Main,w
 11952  120E  00C4               	movwf	(_Memory^(0+512)+36)
 11953                           
 11954                           ;MCU_B1.c: 977: if (Memory.GO == 1) {
 11955  120F  1CC4               	btfss	(_Memory^(0+512)+36),1
 11956  1210  2A2A               	goto	l1441
 11957                           
 11958                           ;MCU_B1.c: 978: Memory.Runtime = 1;
 11959  1211  15C4               	bsf	(_Memory^(0+512)+36),3
 11960                           
 11961                           ;MCU_B1.c: 979: Memory.Time++;
 11962  1212  3001               	movlw	1
 11963  1213  07C2               	addwf	(_Memory^(0+512)+34),f
 11964  1214  3000               	movlw	0
 11965  1215  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11966                           
 11967                           ;MCU_B1.c: 980: if (Memory.Time == 25) {
 11968  1216  3022               	movlw	34
 11969  1217  3E20               	addlw	_Memory& (0+255)
 11970  1218  0086               	movwf	6
 11971  1219  3002               	movlw	2	; select bank4/5
 11972  121A  0087               	movwf	7
 11973  121B  3F40               	moviw [0]fsr1
 11974  121C  3A19               	xorlw	25
 11975  121D  1D03               	skipz
 11976  121E  2A21               	goto	u12985
 11977  121F  3F41               	moviw [1]fsr1
 11978  1220  3A00               	xorlw	0
 11979  1221                     u12985:	
 11980  1221  1D03               	skipz
 11981  1222  0008               	return
 11982                           
 11983                           ;MCU_B1.c: 981: Memory.Time = 0;
 11984  1223  01C2               	clrf	(_Memory^(0+512)+34)
 11985  1224  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11986                           
 11987                           ;MCU_B1.c: 982: Memory.Modify = 0;
 11988  1225  1044               	bcf	(_Memory^(0+512)+36),0
 11989                           
 11990                           ;MCU_B1.c: 983: Memory.GO = 0;
 11991  1226  10C4               	bcf	(_Memory^(0+512)+36),1
 11992                           
 11993                           ;MCU_B1.c: 984: Flash_Memory_Modify();
 11994  1227  3194  2454         	fcall	_Flash_Memory_Modify
 11995                           
 11996                           ;MCU_B1.c: 985: }
 11997                           ;MCU_B1.c: 986: } else {
 11998  1229  0008               	return
 11999  122A                     l1441:	
 12000                           
 12001                           ;MCU_B1.c: 987: if (Memory.Runtime == 1) {
 12002  122A  1DC4               	btfss	(_Memory^(0+512)+36),3
 12003  122B  0008               	return
 12004                           
 12005                           ;MCU_B1.c: 988: Memory.Runtime = 0;
 12006  122C  11C4               	bcf	(_Memory^(0+512)+36),3
 12007                           
 12008                           ;MCU_B1.c: 989: Memory.Time = 0;
 12009  122D  01C2               	clrf	(_Memory^(0+512)+34)
 12010  122E  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12011  122F  0008               	return
 12012  1230                     __end_of_Flash_Memory_Main:	
 12013                           
 12014                           	psect	text77
 12015  1454                     __ptext77:	
 12016 ;; *************** function _Flash_Memory_Modify *****************
 12017 ;; Defined at:
 12018 ;;		line 1047 in file "../src/MCU_B1.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;		None
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;  i               1    7[COMMON] unsigned char 
 12023 ;; Return value:  Size  Location     Type
 12024 ;;		None               void
 12025 ;; Registers used:
 12026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12027 ;; Tracked objects:
 12028 ;;		On entry : 0/0
 12029 ;;		On exit  : 0/0
 12030 ;;		Unchanged: 0/0
 12031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;Total ram usage:        2 bytes
 12037 ;; Hardware stack levels used:    1
 12038 ;; Hardware stack levels required when called:    5
 12039 ;; This function calls:
 12040 ;;		_Flash_Memory_Erasing
 12041 ;;		_Flash_Memory_Read
 12042 ;;		_Flash_Memory_Write
 12043 ;;		_setMemory_Data
 12044 ;; This function is called by:
 12045 ;;		_Flash_Memory_Main
 12046 ;; This function uses a non-reentrant model
 12047 ;;
 12048                           
 12049                           
 12050                           ;psect for function _Flash_Memory_Modify
 12051  1454                     _Flash_Memory_Modify:	
 12052                           
 12053                           ;MCU_B1.c: 1048: char i = 0;
 12054                           
 12055                           ;incstack = 0
 12056                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12057  1454  01F7               	clrf	Flash_Memory_Modify@i
 12058                           
 12059                           ;MCU_B1.c: 1049: for (i = 0; i < 32; i++) {
 12060  1455  01F7               	clrf	Flash_Memory_Modify@i
 12061  1456  3020               	movlw	32
 12062  1457  0277               	subwf	Flash_Memory_Modify@i,w
 12063  1458  1803               	btfsc	3,0
 12064  1459  2C6E               	goto	l7955
 12065  145A                     l7949:	
 12066                           
 12067                           ;MCU_B1.c: 1050: Memory.Data[i] = Flash_Memory_Read(i);
 12068  145A  0877               	movf	Flash_Memory_Modify@i,w
 12069  145B  319D  253E  3194   	fcall	_Flash_Memory_Read
 12070  145E  00F6               	movwf	??_Flash_Memory_Modify
 12071  145F  0877               	movf	Flash_Memory_Modify@i,w
 12072  1460  3E20               	addlw	_Memory& (0+255)
 12073  1461  0086               	movwf	6
 12074  1462  3002               	movlw	2	; select bank4/5
 12075  1463  0087               	movwf	7
 12076  1464  0876               	movf	??_Flash_Memory_Modify,w
 12077  1465  0081               	movwf	1
 12078  1466  3001               	movlw	1
 12079  1467  00F6               	movwf	??_Flash_Memory_Modify
 12080  1468  0876               	movf	??_Flash_Memory_Modify,w
 12081  1469  07F7               	addwf	Flash_Memory_Modify@i,f
 12082  146A  3020               	movlw	32
 12083  146B  0277               	subwf	Flash_Memory_Modify@i,w
 12084  146C  1C03               	skipc
 12085  146D  2C5A               	goto	l7949
 12086  146E                     l7955:	
 12087                           
 12088                           ;MCU_B1.c: 1051: }
 12089                           ;MCU_B1.c: 1052: setMemory_Data(0, product->Data[12]);
 12090  146E  0020               	movlb	0	; select bank0
 12091  146F  086F               	movf	_product,w
 12092  1470  0086               	movwf	6
 12093  1471  3002               	movlw	2	; select bank4/5
 12094  1472  0087               	movwf	7
 12095  1473  3002               	movlw	2	; select bank4/5
 12096  1474  3F4C               	moviw [12]fsr1
 12097  1475  00F2               	movwf	setMemory_Data@data
 12098  1476  3000               	movlw	0
 12099  1477  319B  2366  3194   	fcall	_setMemory_Data
 12100                           
 12101                           ;MCU_B1.c: 1053: setMemory_Data(1, product->Data[13]);
 12102  147A  0020               	movlb	0	; select bank0
 12103  147B  086F               	movf	_product,w
 12104  147C  0086               	movwf	6
 12105  147D  3002               	movlw	2	; select bank4/5
 12106  147E  0087               	movwf	7
 12107  147F  3002               	movlw	2	; select bank4/5
 12108  1480  3F4D               	moviw [13]fsr1
 12109  1481  00F2               	movwf	setMemory_Data@data
 12110  1482  3001               	movlw	1
 12111  1483  319B  2366  3194   	fcall	_setMemory_Data
 12112                           
 12113                           ;MCU_B1.c: 1054: setMemory_Data(2, product->Data[14]);
 12114  1486  0020               	movlb	0	; select bank0
 12115  1487  086F               	movf	_product,w
 12116  1488  0086               	movwf	6
 12117  1489  3002               	movlw	2	; select bank4/5
 12118  148A  0087               	movwf	7
 12119  148B  3002               	movlw	2	; select bank4/5
 12120  148C  3F4E               	moviw [14]fsr1
 12121  148D  00F2               	movwf	setMemory_Data@data
 12122  148E  3002               	movlw	2
 12123  148F  319B  2366  3194   	fcall	_setMemory_Data
 12124                           
 12125                           ;MCU_B1.c: 1060: if (Memory.LoopSave == 1) {
 12126  1492  0024               	movlb	4	; select bank4
 12127  1493  1D44               	btfss	(_Memory^(0+512)+36),2
 12128  1494  2C99               	goto	l1464
 12129                           
 12130                           ;MCU_B1.c: 1061: Memory.LoopSave = 0;
 12131  1495  1144               	bcf	(_Memory^(0+512)+36),2
 12132                           
 12133                           ;MCU_B1.c: 1062: myMain.FirstOpen = 0;
 12134  1496  0022               	movlb	2	; select bank2
 12135  1497  11A0               	bcf	_myMain^(0+256),3
 12136                           
 12137                           ;MCU_B1.c: 1063: myMain.First = 0;
 12138  1498  12A0               	bcf	_myMain^(0+256),5
 12139  1499                     l1464:	
 12140                           
 12141                           ;MCU_B1.c: 1065: }
 12142                           ;MCU_B1.c: 1066: GIE = 0;
 12143  1499  138B               	bcf	11,7	;volatile
 12144                           
 12145                           ;MCU_B1.c: 1067: Flash_Memory_Erasing();
 12146  149A  319B  2393  3194   	fcall	_Flash_Memory_Erasing
 12147                           
 12148                           ;MCU_B1.c: 1068: Flash_Memory_Write();
 12149  149D  3191  217B         	fcall	_Flash_Memory_Write
 12150                           
 12151                           ;MCU_B1.c: 1069: GIE = 1;
 12152  149F  178B               	bsf	11,7	;volatile
 12153  14A0  0008               	return
 12154  14A1                     __end_of_Flash_Memory_Modify:	
 12155                           
 12156                           	psect	text78
 12157  1B93                     __ptext78:	
 12158 ;; *************** function _Flash_Memory_Erasing *****************
 12159 ;; Defined at:
 12160 ;;		line 1036 in file "../src/MCU_B1.c"
 12161 ;; Parameters:    Size  Location     Type
 12162 ;;		None
 12163 ;; Auto vars:     Size  Location     Type
 12164 ;;		None
 12165 ;; Return value:  Size  Location     Type
 12166 ;;		None               void
 12167 ;; Registers used:
 12168 ;;		wreg, status,2, status,0, pclath, cstack
 12169 ;; Tracked objects:
 12170 ;;		On entry : 0/0
 12171 ;;		On exit  : 0/0
 12172 ;;		Unchanged: 0/0
 12173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;Total ram usage:        0 bytes
 12179 ;; Hardware stack levels used:    1
 12180 ;; Hardware stack levels required when called:    4
 12181 ;; This function calls:
 12182 ;;		_Flash_Memory_Unlock
 12183 ;; This function is called by:
 12184 ;;		_Flash_Memory_Modify
 12185 ;; This function uses a non-reentrant model
 12186 ;;
 12187                           
 12188                           
 12189                           ;psect for function _Flash_Memory_Erasing
 12190  1B93                     _Flash_Memory_Erasing:	
 12191                           
 12192                           ;MCU_B1.c: 1037: CFGS = 0;
 12193                           
 12194                           ;incstack = 0
 12195                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12196  1B93  0023               	movlb	3	; select bank3
 12197  1B94  1315               	bcf	21,6	;volatile
 12198                           
 12199                           ;MCU_B1.c: 1038: PMADRH = 0x30;
 12200  1B95  3030               	movlw	48
 12201  1B96  0092               	movwf	18	;volatile
 12202                           
 12203                           ;MCU_B1.c: 1039: PMADRL = 0x00;
 12204  1B97  0191               	clrf	17	;volatile
 12205                           
 12206                           ;MCU_B1.c: 1040: FREE = 1;
 12207  1B98  1615               	bsf	21,4	;volatile
 12208                           
 12209                           ;MCU_B1.c: 1041: WREN = 1;
 12210  1B99  1515               	bsf	21,2	;volatile
 12211                           
 12212                           ;MCU_B1.c: 1042: Flash_Memory_Unlock();
 12213  1B9A  319B  233F         	fcall	_Flash_Memory_Unlock
 12214                           
 12215                           ;MCU_B1.c: 1043: WREN = 0;
 12216  1B9C  0023               	movlb	3	; select bank3
 12217  1B9D  1115               	bcf	21,2	;volatile
 12218  1B9E  0008               	return
 12219  1B9F                     __end_of_Flash_Memory_Erasing:	
 12220                           
 12221                           	psect	text79
 12222  0532                     __ptext79:	
 12223 ;; *************** function _Flash_Memory_Initialization *****************
 12224 ;; Defined at:
 12225 ;;		line 933 in file "../src/MCU_B1.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;		None
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;  i               1   59[BANK0 ] unsigned char 
 12230 ;; Return value:  Size  Location     Type
 12231 ;;		None               void
 12232 ;; Registers used:
 12233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12234 ;; Tracked objects:
 12235 ;;		On entry : 0/0
 12236 ;;		On exit  : 0/0
 12237 ;;		Unchanged: 0/0
 12238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;Total ram usage:        2 bytes
 12244 ;; Hardware stack levels used:    1
 12245 ;; Hardware stack levels required when called:    6
 12246 ;; This function calls:
 12247 ;;		_Flash_Memory_Read
 12248 ;;		_Flash_Memory_Write
 12249 ;;		_getDimmerLights_ValueToPercent
 12250 ;;		_setMemory_Data
 12251 ;; This function is called by:
 12252 ;;		_main
 12253 ;; This function uses a non-reentrant model
 12254 ;;
 12255                           
 12256                           
 12257                           ;psect for function _Flash_Memory_Initialization
 12258  0532                     _Flash_Memory_Initialization:	
 12259                           
 12260                           ;MCU_B1.c: 934: char i = 0;
 12261                           
 12262                           ;incstack = 0
 12263                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12264  0532  0020               	movlb	0	; select bank0
 12265  0533  01DB               	clrf	Flash_Memory_Initialization@i
 12266                           
 12267                           ;MCU_B1.c: 935: if (Flash_Memory_Read(31) == 0xaa) {
 12268  0534  301F               	movlw	31
 12269  0535  319D  253E  3185   	fcall	_Flash_Memory_Read
 12270  0538  3AAA               	xorlw	170
 12271  0539  1D03               	skipz
 12272  053A  2DA4               	goto	l10635
 12273                           
 12274                           ;MCU_B1.c: 936: product->Data[12] = Flash_Memory_Read(0);
 12275  053B  3000               	movlw	0
 12276  053C  319D  253E  3185   	fcall	_Flash_Memory_Read
 12277  053F  0020               	movlb	0	; select bank0
 12278  0540  00DA               	movwf	??_Flash_Memory_Initialization
 12279  0541  086F               	movf	_product,w
 12280  0542  3E0C               	addlw	12
 12281  0543  0086               	movwf	6
 12282  0544  3002               	movlw	2	; select bank4/5
 12283  0545  0087               	movwf	7
 12284  0546  085A               	movf	??_Flash_Memory_Initialization,w
 12285  0547  0081               	movwf	1
 12286                           
 12287                           ;MCU_B1.c: 937: product->Data[13] = Flash_Memory_Read(1);
 12288  0548  3001               	movlw	1
 12289  0549  319D  253E  3185   	fcall	_Flash_Memory_Read
 12290  054C  0020               	movlb	0	; select bank0
 12291  054D  00DA               	movwf	??_Flash_Memory_Initialization
 12292  054E  086F               	movf	_product,w
 12293  054F  3E0D               	addlw	13
 12294  0550  0086               	movwf	6
 12295  0551  3002               	movlw	2	; select bank4/5
 12296  0552  0087               	movwf	7
 12297  0553  085A               	movf	??_Flash_Memory_Initialization,w
 12298  0554  0081               	movwf	1
 12299                           
 12300                           ;MCU_B1.c: 938: product->Data[14] = Flash_Memory_Read(2);
 12301  0555  3002               	movlw	2
 12302  0556  319D  253E  3185   	fcall	_Flash_Memory_Read
 12303  0559  0020               	movlb	0	; select bank0
 12304  055A  00DA               	movwf	??_Flash_Memory_Initialization
 12305  055B  086F               	movf	_product,w
 12306  055C  3E0E               	addlw	14
 12307  055D  0086               	movwf	6
 12308  055E  3002               	movlw	2	; select bank4/5
 12309  055F  0087               	movwf	7
 12310  0560  085A               	movf	??_Flash_Memory_Initialization,w
 12311  0561  0081               	movwf	1
 12312                           
 12313                           ;MCU_B1.c: 944: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12314  0562  3034               	movlw	52
 12315  0563  3188  20D6  3185   	fcall	_getDimmerLights_ValueToPercent
 12316  0566  0020               	movlb	0	; select bank0
 12317  0567  00DA               	movwf	??_Flash_Memory_Initialization
 12318  0568  085A               	movf	??_Flash_Memory_Initialization,w
 12319  0569  00DB               	movwf	Flash_Memory_Initialization@i
 12320                           
 12321                           ;MCU_B1.c: 945: product->Data[21] = i;
 12322  056A  085B               	movf	Flash_Memory_Initialization@i,w
 12323  056B  00DA               	movwf	??_Flash_Memory_Initialization
 12324  056C  086F               	movf	_product,w
 12325  056D  3E15               	addlw	21
 12326  056E  0086               	movwf	6
 12327  056F  3002               	movlw	2	; select bank4/5
 12328  0570  0087               	movwf	7
 12329  0571  085A               	movf	??_Flash_Memory_Initialization,w
 12330  0572  0081               	movwf	1
 12331                           
 12332                           ;MCU_B1.c: 946: product->Data[22] = i;
 12333  0573  085B               	movf	Flash_Memory_Initialization@i,w
 12334  0574  00DA               	movwf	??_Flash_Memory_Initialization
 12335  0575  086F               	movf	_product,w
 12336  0576  3E16               	addlw	22
 12337  0577  0086               	movwf	6
 12338  0578  3002               	movlw	2	; select bank4/5
 12339  0579  0087               	movwf	7
 12340  057A  085A               	movf	??_Flash_Memory_Initialization,w
 12341  057B  0081               	movwf	1
 12342                           
 12343                           ;MCU_B1.c: 947: product->Data[23] = i;
 12344  057C  085B               	movf	Flash_Memory_Initialization@i,w
 12345  057D  00DA               	movwf	??_Flash_Memory_Initialization
 12346  057E  086F               	movf	_product,w
 12347  057F  3E17               	addlw	23
 12348  0580  0086               	movwf	6
 12349  0581  3002               	movlw	2	; select bank4/5
 12350  0582  0087               	movwf	7
 12351  0583  085A               	movf	??_Flash_Memory_Initialization,w
 12352  0584  0081               	movwf	1
 12353                           
 12354                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12355  0585  086F               	movf	_product,w
 12356  0586  3E0C               	addlw	12
 12357  0587  0086               	movwf	6
 12358  0588  3002               	movlw	2	; select bank4/5
 12359  0589  0087               	movwf	7
 12360  058A  0801               	movf	1,w
 12361  058B  3AFF               	xorlw	255
 12362  058C  1D03               	skipz
 12363  058D  0008               	return
 12364  058E  086F               	movf	_product,w
 12365  058F  3E0D               	addlw	13
 12366  0590  0086               	movwf	6
 12367  0591  3002               	movlw	2	; select bank4/5
 12368  0592  0087               	movwf	7
 12369  0593  0801               	movf	1,w
 12370  0594  3AFF               	xorlw	255
 12371  0595  1D03               	skipz
 12372  0596  0008               	return
 12373  0597  086F               	movf	_product,w
 12374  0598  3E0E               	addlw	14
 12375  0599  0086               	movwf	6
 12376  059A  3002               	movlw	2	; select bank4/5
 12377  059B  0087               	movwf	7
 12378  059C  0801               	movf	1,w
 12379  059D  3AFF               	xorlw	255
 12380  059E  1D03               	skipz
 12381  059F  0008               	return
 12382                           
 12383                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12384  05A0  0022               	movlb	2	; select bank2
 12385  05A1  15A0               	bsf	_myMain^(0+256),3
 12386                           
 12387                           ;MCU_B1.c: 951: myMain.First = 1;
 12388  05A2  16A0               	bsf	_myMain^(0+256),5
 12389                           
 12390                           ;MCU_B1.c: 952: }
 12391                           ;MCU_B1.c: 953: } else {
 12392  05A3  0008               	return
 12393  05A4                     l10635:	
 12394                           
 12395                           ;MCU_B1.c: 954: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12396  05A4  3034               	movlw	52
 12397  05A5  3188  20D6  3185   	fcall	_getDimmerLights_ValueToPercent
 12398  05A8  0020               	movlb	0	; select bank0
 12399  05A9  00DA               	movwf	??_Flash_Memory_Initialization
 12400  05AA  085A               	movf	??_Flash_Memory_Initialization,w
 12401  05AB  00DB               	movwf	Flash_Memory_Initialization@i
 12402                           
 12403                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12404  05AC  30FF               	movlw	255
 12405  05AD  00DA               	movwf	??_Flash_Memory_Initialization
 12406  05AE  085A               	movf	??_Flash_Memory_Initialization,w
 12407  05AF  00F2               	movwf	setMemory_Data@data
 12408  05B0  3000               	movlw	0
 12409  05B1  319B  2366  3185   	fcall	_setMemory_Data
 12410                           
 12411                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12412  05B4  30FF               	movlw	255
 12413  05B5  0020               	movlb	0	; select bank0
 12414  05B6  00DA               	movwf	??_Flash_Memory_Initialization
 12415  05B7  085A               	movf	??_Flash_Memory_Initialization,w
 12416  05B8  00F2               	movwf	setMemory_Data@data
 12417  05B9  3001               	movlw	1
 12418  05BA  319B  2366  3185   	fcall	_setMemory_Data
 12419                           
 12420                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12421  05BD  30FF               	movlw	255
 12422  05BE  0020               	movlb	0	; select bank0
 12423  05BF  00DA               	movwf	??_Flash_Memory_Initialization
 12424  05C0  085A               	movf	??_Flash_Memory_Initialization,w
 12425  05C1  00F2               	movwf	setMemory_Data@data
 12426  05C2  3002               	movlw	2
 12427  05C3  319B  2366  3185   	fcall	_setMemory_Data
 12428                           
 12429                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12430  05C6  30FF               	movlw	255
 12431  05C7  0020               	movlb	0	; select bank0
 12432  05C8  00DA               	movwf	??_Flash_Memory_Initialization
 12433  05C9  085A               	movf	??_Flash_Memory_Initialization,w
 12434  05CA  00F2               	movwf	setMemory_Data@data
 12435  05CB  3003               	movlw	3
 12436  05CC  319B  2366  3185   	fcall	_setMemory_Data
 12437                           
 12438                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12439  05CF  30FF               	movlw	255
 12440  05D0  0020               	movlb	0	; select bank0
 12441  05D1  00DA               	movwf	??_Flash_Memory_Initialization
 12442  05D2  085A               	movf	??_Flash_Memory_Initialization,w
 12443  05D3  00F2               	movwf	setMemory_Data@data
 12444  05D4  3004               	movlw	4
 12445  05D5  319B  2366  3185   	fcall	_setMemory_Data
 12446                           
 12447                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12448  05D8  30FF               	movlw	255
 12449  05D9  0020               	movlb	0	; select bank0
 12450  05DA  00DA               	movwf	??_Flash_Memory_Initialization
 12451  05DB  085A               	movf	??_Flash_Memory_Initialization,w
 12452  05DC  00F2               	movwf	setMemory_Data@data
 12453  05DD  3005               	movlw	5
 12454  05DE  319B  2366  3185   	fcall	_setMemory_Data
 12455                           
 12456                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12457  05E1  30AA               	movlw	170
 12458  05E2  0020               	movlb	0	; select bank0
 12459  05E3  00DA               	movwf	??_Flash_Memory_Initialization
 12460  05E4  085A               	movf	??_Flash_Memory_Initialization,w
 12461  05E5  00F2               	movwf	setMemory_Data@data
 12462  05E6  301F               	movlw	31
 12463  05E7  319B  2366  3185   	fcall	_setMemory_Data
 12464                           
 12465                           ;MCU_B1.c: 962: product->Data[21] = i;
 12466  05EA  0020               	movlb	0	; select bank0
 12467  05EB  085B               	movf	Flash_Memory_Initialization@i,w
 12468  05EC  00DA               	movwf	??_Flash_Memory_Initialization
 12469  05ED  086F               	movf	_product,w
 12470  05EE  3E15               	addlw	21
 12471  05EF  0086               	movwf	6
 12472  05F0  3002               	movlw	2	; select bank4/5
 12473  05F1  0087               	movwf	7
 12474  05F2  085A               	movf	??_Flash_Memory_Initialization,w
 12475  05F3  0081               	movwf	1
 12476                           
 12477                           ;MCU_B1.c: 963: product->Data[22] = i;
 12478  05F4  085B               	movf	Flash_Memory_Initialization@i,w
 12479  05F5  00DA               	movwf	??_Flash_Memory_Initialization
 12480  05F6  086F               	movf	_product,w
 12481  05F7  3E16               	addlw	22
 12482  05F8  0086               	movwf	6
 12483  05F9  3002               	movlw	2	; select bank4/5
 12484  05FA  0087               	movwf	7
 12485  05FB  085A               	movf	??_Flash_Memory_Initialization,w
 12486  05FC  0081               	movwf	1
 12487                           
 12488                           ;MCU_B1.c: 964: product->Data[23] = i;
 12489  05FD  085B               	movf	Flash_Memory_Initialization@i,w
 12490  05FE  00DA               	movwf	??_Flash_Memory_Initialization
 12491  05FF  086F               	movf	_product,w
 12492  0600  3E17               	addlw	23
 12493  0601  0086               	movwf	6
 12494  0602  3002               	movlw	2	; select bank4/5
 12495  0603  0087               	movwf	7
 12496  0604  085A               	movf	??_Flash_Memory_Initialization,w
 12497  0605  0081               	movwf	1
 12498                           
 12499                           ;MCU_B1.c: 965: GIE = 0;
 12500  0606  138B               	bcf	11,7	;volatile
 12501                           
 12502                           ;MCU_B1.c: 966: Flash_Memory_Write();
 12503  0607  3191  217B         	fcall	_Flash_Memory_Write
 12504                           
 12505                           ;MCU_B1.c: 967: GIE = 1;
 12506  0609  178B               	bsf	11,7	;volatile
 12507                           
 12508                           ;MCU_B1.c: 968: myMain.FirstOpen = 1;
 12509  060A  0022               	movlb	2	; select bank2
 12510  060B  15A0               	bsf	_myMain^(0+256),3
 12511                           
 12512                           ;MCU_B1.c: 969: myMain.First = 1;
 12513  060C  16A0               	bsf	_myMain^(0+256),5
 12514  060D  0008               	return
 12515  060E                     __end_of_Flash_Memory_Initialization:	
 12516                           
 12517                           	psect	text80
 12518  1B66                     __ptext80:	
 12519 ;; *************** function _setMemory_Data *****************
 12520 ;; Defined at:
 12521 ;;		line 1084 in file "../src/MCU_B1.c"
 12522 ;; Parameters:    Size  Location     Type
 12523 ;;  address         1    wreg     unsigned char 
 12524 ;;  data            1    2[COMMON] unsigned char 
 12525 ;; Auto vars:     Size  Location     Type
 12526 ;;  address         1    4[COMMON] unsigned char 
 12527 ;; Return value:  Size  Location     Type
 12528 ;;		None               void
 12529 ;; Registers used:
 12530 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12531 ;; Tracked objects:
 12532 ;;		On entry : 0/0
 12533 ;;		On exit  : 0/0
 12534 ;;		Unchanged: 0/0
 12535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12536 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;Total ram usage:        3 bytes
 12541 ;; Hardware stack levels used:    1
 12542 ;; Hardware stack levels required when called:    3
 12543 ;; This function calls:
 12544 ;;		Nothing
 12545 ;; This function is called by:
 12546 ;;		_Flash_Memory_Initialization
 12547 ;;		_Flash_Memory_Modify
 12548 ;; This function uses a non-reentrant model
 12549 ;;
 12550                           
 12551                           
 12552                           ;psect for function _setMemory_Data
 12553  1B66                     _setMemory_Data:	
 12554                           
 12555                           ;incstack = 0
 12556                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12557                           ;setMemory_Data@address stored from wreg
 12558  1B66  00F4               	movwf	setMemory_Data@address
 12559                           
 12560                           ;MCU_B1.c: 1085: Memory.Data[address] = data;
 12561  1B67  0872               	movf	setMemory_Data@data,w
 12562  1B68  00F3               	movwf	??_setMemory_Data
 12563  1B69  0874               	movf	setMemory_Data@address,w
 12564  1B6A  3E20               	addlw	_Memory& (0+255)
 12565  1B6B  0086               	movwf	6
 12566  1B6C  3002               	movlw	2	; select bank4/5
 12567  1B6D  0087               	movwf	7
 12568  1B6E  0873               	movf	??_setMemory_Data,w
 12569  1B6F  0081               	movwf	1
 12570  1B70  0008               	return
 12571  1B71                     __end_of_setMemory_Data:	
 12572                           
 12573                           	psect	text81
 12574  117B                     __ptext81:	
 12575 ;; *************** function _Flash_Memory_Write *****************
 12576 ;; Defined at:
 12577 ;;		line 1017 in file "../src/MCU_B1.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;		None
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;  i               1    3[COMMON] unsigned char 
 12582 ;; Return value:  Size  Location     Type
 12583 ;;		None               void
 12584 ;; Registers used:
 12585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;Total ram usage:        2 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; Hardware stack levels required when called:    4
 12598 ;; This function calls:
 12599 ;;		_Flash_Memory_Unlock
 12600 ;; This function is called by:
 12601 ;;		_Flash_Memory_Initialization
 12602 ;;		_Flash_Memory_Modify
 12603 ;; This function uses a non-reentrant model
 12604 ;;
 12605                           
 12606                           
 12607                           ;psect for function _Flash_Memory_Write
 12608  117B                     _Flash_Memory_Write:	
 12609                           
 12610                           ;MCU_B1.c: 1018: char i = 0;
 12611                           
 12612                           ;incstack = 0
 12613                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12614  117B  01F3               	clrf	Flash_Memory_Write@i
 12615                           
 12616                           ;MCU_B1.c: 1019: CFGS = 0;
 12617  117C  0023               	movlb	3	; select bank3
 12618  117D  1315               	bcf	21,6	;volatile
 12619                           
 12620                           ;MCU_B1.c: 1020: PMADRH = 0x30;
 12621  117E  3030               	movlw	48
 12622  117F  0092               	movwf	18	;volatile
 12623                           
 12624                           ;MCU_B1.c: 1021: PMDATH = 0;
 12625  1180  0194               	clrf	20	;volatile
 12626                           
 12627                           ;MCU_B1.c: 1022: FREE = 0;
 12628  1181  1215               	bcf	21,4	;volatile
 12629                           
 12630                           ;MCU_B1.c: 1023: LWLO = 1;
 12631  1182  1695               	bsf	21,5	;volatile
 12632                           
 12633                           ;MCU_B1.c: 1024: WREN = 1;
 12634  1183  1515               	bsf	21,2	;volatile
 12635                           
 12636                           ;MCU_B1.c: 1025: for (i = 0; i < 32; i++) {
 12637  1184  01F3               	clrf	Flash_Memory_Write@i
 12638  1185  3020               	movlw	32
 12639  1186  0273               	subwf	Flash_Memory_Write@i,w
 12640  1187  1803               	btfsc	3,0
 12641  1188  299E               	goto	l1455
 12642  1189                     l7487:	
 12643                           
 12644                           ;MCU_B1.c: 1026: PMADRL = i;
 12645  1189  0873               	movf	Flash_Memory_Write@i,w
 12646  118A  0023               	movlb	3	; select bank3
 12647  118B  0091               	movwf	17	;volatile
 12648                           
 12649                           ;MCU_B1.c: 1027: PMDATL = Memory.Data[i];
 12650  118C  0873               	movf	Flash_Memory_Write@i,w
 12651  118D  3E20               	addlw	_Memory& (0+255)
 12652  118E  0086               	movwf	6
 12653  118F  3002               	movlw	2	; select bank4/5
 12654  1190  0087               	movwf	7
 12655  1191  0801               	movf	1,w
 12656  1192  0093               	movwf	19	;volatile
 12657                           
 12658                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12659  1193  319B  233F  3191   	fcall	_Flash_Memory_Unlock
 12660  1196  3001               	movlw	1
 12661  1197  00F2               	movwf	??_Flash_Memory_Write
 12662  1198  0872               	movf	??_Flash_Memory_Write,w
 12663  1199  07F3               	addwf	Flash_Memory_Write@i,f
 12664  119A  3020               	movlw	32
 12665  119B  0273               	subwf	Flash_Memory_Write@i,w
 12666  119C  1C03               	skipc
 12667  119D  2989               	goto	l7487
 12668  119E                     l1455:	
 12669                           
 12670                           ;MCU_B1.c: 1029: }
 12671                           ;MCU_B1.c: 1030: LWLO = 0;
 12672  119E  0023               	movlb	3	; select bank3
 12673  119F  1295               	bcf	21,5	;volatile
 12674                           
 12675                           ;MCU_B1.c: 1031: Flash_Memory_Unlock();
 12676  11A0  319B  233F         	fcall	_Flash_Memory_Unlock
 12677                           
 12678                           ;MCU_B1.c: 1032: WREN = 0;
 12679  11A2  0023               	movlb	3	; select bank3
 12680  11A3  1115               	bcf	21,2	;volatile
 12681  11A4  0008               	return
 12682  11A5                     __end_of_Flash_Memory_Write:	
 12683                           
 12684                           	psect	text82
 12685  1B3F                     __ptext82:	
 12686 ;; *************** function _Flash_Memory_Unlock *****************
 12687 ;; Defined at:
 12688 ;;		line 996 in file "../src/MCU_B1.c"
 12689 ;; Parameters:    Size  Location     Type
 12690 ;;		None
 12691 ;; Auto vars:     Size  Location     Type
 12692 ;;		None
 12693 ;; Return value:  Size  Location     Type
 12694 ;;		None               void
 12695 ;; Registers used:
 12696 ;;		wreg
 12697 ;; Tracked objects:
 12698 ;;		On entry : 0/0
 12699 ;;		On exit  : 0/0
 12700 ;;		Unchanged: 0/0
 12701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12706 ;;Total ram usage:        0 bytes
 12707 ;; Hardware stack levels used:    1
 12708 ;; Hardware stack levels required when called:    3
 12709 ;; This function calls:
 12710 ;;		Nothing
 12711 ;; This function is called by:
 12712 ;;		_Flash_Memory_Write
 12713 ;;		_Flash_Memory_Erasing
 12714 ;; This function uses a non-reentrant model
 12715 ;;
 12716                           
 12717                           
 12718                           ;psect for function _Flash_Memory_Unlock
 12719  1B3F                     _Flash_Memory_Unlock:	
 12720                           
 12721                           ;MCU_B1.c: 997: PMCON2 = 0x55;
 12722                           
 12723                           ;incstack = 0
 12724                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12725  1B3F  3055               	movlw	85
 12726  1B40  0023               	movlb	3	; select bank3
 12727  1B41  0096               	movwf	22	;volatile
 12728                           
 12729                           ;MCU_B1.c: 998: PMCON2 = 0xaa;
 12730  1B42  30AA               	movlw	170
 12731  1B43  0096               	movwf	22	;volatile
 12732                           
 12733                           ;MCU_B1.c: 999: WR = 1;
 12734  1B44  1495               	bsf	21,1	;volatile
 12735                           
 12736                           ;MCU_B1.c: 1000: __nop();
 12737  1B45  0000               	nop
 12738                           
 12739                           ;MCU_B1.c: 1001: __nop();
 12740  1B46  0000               	nop
 12741  1B47  0008               	return
 12742  1B48                     __end_of_Flash_Memory_Unlock:	
 12743                           
 12744                           	psect	text83
 12745  1D3E                     __ptext83:	
 12746 ;; *************** function _Flash_Memory_Read *****************
 12747 ;; Defined at:
 12748 ;;		line 1005 in file "../src/MCU_B1.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;  address         1    wreg     unsigned char 
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;  address         1    4[COMMON] unsigned char 
 12753 ;;  ret             1    5[COMMON] unsigned char 
 12754 ;;  i               1    3[COMMON] unsigned char 
 12755 ;; Return value:  Size  Location     Type
 12756 ;;                  1    wreg      unsigned char 
 12757 ;; Registers used:
 12758 ;;		wreg, status,2
 12759 ;; Tracked objects:
 12760 ;;		On entry : 0/0
 12761 ;;		On exit  : 0/0
 12762 ;;		Unchanged: 0/0
 12763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;Total ram usage:        4 bytes
 12769 ;; Hardware stack levels used:    1
 12770 ;; Hardware stack levels required when called:    3
 12771 ;; This function calls:
 12772 ;;		Nothing
 12773 ;; This function is called by:
 12774 ;;		_Flash_Memory_Initialization
 12775 ;;		_Flash_Memory_Modify
 12776 ;; This function uses a non-reentrant model
 12777 ;;
 12778                           
 12779                           
 12780                           ;psect for function _Flash_Memory_Read
 12781  1D3E                     _Flash_Memory_Read:	
 12782                           
 12783                           ;incstack = 0
 12784                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12785                           ;Flash_Memory_Read@address stored from wreg
 12786  1D3E  00F4               	movwf	Flash_Memory_Read@address
 12787                           
 12788                           ;MCU_B1.c: 1006: char i = 0, ret = 0;
 12789  1D3F  01F3               	clrf	Flash_Memory_Read@i
 12790  1D40  01F5               	clrf	Flash_Memory_Read@ret
 12791                           
 12792                           ;MCU_B1.c: 1007: PMADRH = 0x30;
 12793  1D41  3030               	movlw	48
 12794  1D42  0023               	movlb	3	; select bank3
 12795  1D43  0092               	movwf	18	;volatile
 12796                           
 12797                           ;MCU_B1.c: 1008: PMADRL = address;
 12798  1D44  0874               	movf	Flash_Memory_Read@address,w
 12799  1D45  0091               	movwf	17	;volatile
 12800                           
 12801                           ;MCU_B1.c: 1009: CFGS = 0;
 12802  1D46  1315               	bcf	21,6	;volatile
 12803                           
 12804                           ;MCU_B1.c: 1010: RD = 1;
 12805  1D47  1415               	bsf	21,0	;volatile
 12806                           
 12807                           ;MCU_B1.c: 1011: i = PMDATH;
 12808  1D48  0814               	movf	20,w	;volatile
 12809  1D49  00F2               	movwf	??_Flash_Memory_Read
 12810  1D4A  0872               	movf	??_Flash_Memory_Read,w
 12811  1D4B  00F3               	movwf	Flash_Memory_Read@i
 12812                           
 12813                           ;MCU_B1.c: 1012: ret = PMDATL;
 12814  1D4C  0813               	movf	19,w	;volatile
 12815  1D4D  00F2               	movwf	??_Flash_Memory_Read
 12816  1D4E  0872               	movf	??_Flash_Memory_Read,w
 12817  1D4F  00F5               	movwf	Flash_Memory_Read@ret
 12818                           
 12819                           ;MCU_B1.c: 1013: return ret;
 12820  1D50  0875               	movf	Flash_Memory_Read@ret,w
 12821  1D51  0008               	return
 12822  1D52                     __end_of_Flash_Memory_Read:	
 12823                           
 12824                           	psect	text84
 12825  0454                     __ptext84:	
 12826 ;; *************** function _Exception_Main *****************
 12827 ;; Defined at:
 12828 ;;		line 509 in file "../src/main_B1.c"
 12829 ;; Parameters:    Size  Location     Type
 12830 ;;		None
 12831 ;; Auto vars:     Size  Location     Type
 12832 ;;  i               2    4[BANK4 ] int 
 12833 ;;  i               2    2[BANK4 ] int 
 12834 ;;  lights          1    6[BANK4 ] unsigned char 
 12835 ;;  error           1    1[BANK4 ] unsigned char 
 12836 ;;  count           1    0[BANK4 ] unsigned char 
 12837 ;; Return value:  Size  Location     Type
 12838 ;;		None               void
 12839 ;; Registers used:
 12840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/0
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12847 ;;      Locals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
 12848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Totals:         0       1       0       0       0       7       0       0       0       0       0       0       
      +0       0
 12850 ;;Total ram usage:        8 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:    6
 12853 ;; This function calls:
 12854 ;;		_getDimmerLights_Line
 12855 ;;		_getDimmerLights_Status
 12856 ;;		_getMain_All_Error_Status
 12857 ;;		_getMain_All_LightsStatus
 12858 ;;		_setBuz
 12859 ;;		_setDimmerLights_SwOff
 12860 ;;		_setLED
 12861 ;; This function is called by:
 12862 ;;		_main
 12863 ;; This function uses a non-reentrant model
 12864 ;;
 12865                           
 12866                           
 12867                           ;psect for function _Exception_Main
 12868  0454                     _Exception_Main:	
 12869                           
 12870                           ;main_B1.c: 510: char error = getMain_All_Error_Status(0);
 12871                           
 12872                           ;incstack = 0
 12873                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12874  0454  3000               	movlw	0
 12875  0455  3191  21CF  3184   	fcall	_getMain_All_Error_Status
 12876  0458  0020               	movlb	0	; select bank0
 12877  0459  00E7               	movwf	??_Exception_Main
 12878  045A  0867               	movf	??_Exception_Main,w
 12879  045B  0024               	movlb	4	; select bank4
 12880  045C  00E6               	movwf	Exception_Main@error^(0+512)
 12881                           
 12882                           ;main_B1.c: 511: char lights = 0, count = 2;
 12883  045D  01EB               	clrf	Exception_Main@lights^(0+512)
 12884  045E  3002               	movlw	2
 12885  045F  0020               	movlb	0	; select bank0
 12886  0460  00E7               	movwf	??_Exception_Main
 12887  0461  0867               	movf	??_Exception_Main,w
 12888  0462  0024               	movlb	4	; select bank4
 12889  0463  00E5               	movwf	Exception_Main@count^(0+512)
 12890                           
 12891                           ;main_B1.c: 512: if (myMain.Error_Run == 1) {
 12892  0464  0022               	movlb	2	; select bank2
 12893  0465  1DAB               	btfss	(_myMain^(0+256)+11),3
 12894  0466  2C76               	goto	l10951
 12895                           
 12896                           ;main_B1.c: 513: if (error == 0) {
 12897  0467  0024               	movlb	4	; select bank4
 12898  0468  08E6               	movf	Exception_Main@error^(0+512),f
 12899  0469  1D03               	skipz
 12900  046A  0008               	return
 12901                           
 12902                           ;main_B1.c: 514: myMain.Error_Run = 0;
 12903  046B  0022               	movlb	2	; select bank2
 12904  046C  11AB               	bcf	(_myMain^(0+256)+11),3
 12905                           
 12906                           ;main_B1.c: 519: setLED(99, 10);
 12907  046D  300A               	movlw	10
 12908  046E  0020               	movlb	0	; select bank0
 12909  046F  00E7               	movwf	??_Exception_Main
 12910  0470  0867               	movf	??_Exception_Main,w
 12911  0471  00F4               	movwf	setLED@command
 12912  0472  3063               	movlw	99
 12913  0473  3197  27A1         	fcall	_setLED
 12914                           
 12915                           ;main_B1.c: 521: }
 12916                           ;main_B1.c: 522: } else {
 12917  0475  0008               	return
 12918  0476                     l10951:	
 12919                           
 12920                           ;main_B1.c: 523: if (error != 0) {
 12921  0476  0024               	movlb	4	; select bank4
 12922  0477  0866               	movf	Exception_Main@error^(0+512),w
 12923  0478  1903               	btfsc	3,2
 12924  0479  0008               	return
 12925                           
 12926                           ;main_B1.c: 524: myMain.Error_Run = 1;
 12927  047A  0022               	movlb	2	; select bank2
 12928  047B  15AB               	bsf	(_myMain^(0+256)+11),3
 12929                           
 12930                           ;main_B1.c: 527: setLED(99, 11);
 12931  047C  300B               	movlw	11
 12932  047D  0020               	movlb	0	; select bank0
 12933  047E  00E7               	movwf	??_Exception_Main
 12934  047F  0867               	movf	??_Exception_Main,w
 12935  0480  00F4               	movwf	setLED@command
 12936  0481  3063               	movlw	99
 12937  0482  3197  27A1  3184   	fcall	_setLED
 12938                           
 12939                           ;main_B1.c: 529: switch (error) {
 12940  0485  2D27               	goto	l10999
 12941  0486                     l10957:	
 12942                           ;main_B1.c: 530: case 2:
 12943                           
 12944                           
 12945                           ;main_B1.c: 531: if (getMain_All_LightsStatus() == 1) {
 12946  0486  319C  2417  3184   	fcall	_getMain_All_LightsStatus
 12947  0489  3A01               	xorlw	1
 12948  048A  1D03               	skipz
 12949  048B  2C95               	goto	l10961
 12950                           
 12951                           ;main_B1.c: 532: setBuz(10, 300);
 12952  048C  302C               	movlw	44
 12953  048D  0020               	movlb	0	; select bank0
 12954  048E  00A4               	movwf	setBuz@time
 12955  048F  3001               	movlw	1
 12956  0490  00A5               	movwf	setBuz@time+1
 12957  0491  300A               	movlw	10
 12958  0492  3195  25E6  3184   	fcall	_setBuz
 12959  0495                     l10961:	
 12960                           
 12961                           ;main_B1.c: 533: }
 12962                           ;main_B1.c: 535: for (int i = 0; i < count; i++) {
 12963  0495  0024               	movlb	4	; select bank4
 12964  0496  01E7               	clrf	Exception_Main@i^(0+512)
 12965  0497  01E8               	clrf	(Exception_Main@i+1)^(0+512)
 12966  0498                     l10971:	
 12967  0498  0868               	movf	(Exception_Main@i+1)^(0+512),w
 12968  0499  3A80               	xorlw	128
 12969  049A  0020               	movlb	0	; select bank0
 12970  049B  00E7               	movwf	??_Exception_Main
 12971  049C  3080               	movlw	128
 12972  049D  0267               	subwf	??_Exception_Main,w
 12973  049E  1D03               	skipz
 12974  049F  2CA3               	goto	u13545
 12975  04A0  0024               	movlb	4	; select bank4
 12976  04A1  0865               	movf	Exception_Main@count^(0+512),w
 12977  04A2  0267               	subwf	Exception_Main@i^(0+512),w
 12978  04A3                     u13545:	
 12979  04A3  1803               	btfsc	3,0
 12980  04A4  2CC5               	goto	u13540
 12981                           
 12982                           ;main_B1.c: 537: if (getDimmerLights_Status(i + 1) == 1) {
 12983  04A5  0024               	movlb	4	; select bank4
 12984  04A6  0867               	movf	Exception_Main@i^(0+512),w
 12985  04A7  3E01               	addlw	1
 12986  04A8  319B  23F9  3184   	fcall	_getDimmerLights_Status
 12987  04AB  3A01               	xorlw	1
 12988  04AC  1D03               	skipz
 12989  04AD  2CBF               	goto	l10969
 12990                           
 12991                           ;main_B1.c: 538: DimmerLights->SwFlag = 1;
 12992  04AE  0020               	movlb	0	; select bank0
 12993  04AF  086D               	movf	_DimmerLights,w
 12994  04B0  0086               	movwf	6
 12995  04B1  3001               	movlw	1	; select bank2/3
 12996  04B2  0087               	movwf	7
 12997  04B3  1401               	bsf	1,0
 12998                           
 12999                           ;main_B1.c: 539: DimmerLights->Status = 0;
 13000  04B4  0A6D               	incf	_DimmerLights,w
 13001  04B5  0086               	movwf	6
 13002  04B6  3001               	movlw	1	; select bank2/3
 13003  04B7  0087               	movwf	7
 13004  04B8  1001               	bcf	1,0
 13005                           
 13006                           ;main_B1.c: 540: setDimmerLights_SwOff(i + 1);
 13007  04B9  0024               	movlb	4	; select bank4
 13008  04BA  0867               	movf	Exception_Main@i^(0+512),w
 13009  04BB  3E01               	addlw	1
 13010  04BC  3194  240E  3184   	fcall	_setDimmerLights_SwOff
 13011  04BF                     l10969:	
 13012  04BF  3001               	movlw	1
 13013  04C0  0024               	movlb	4	; select bank4
 13014  04C1  07E7               	addwf	Exception_Main@i^(0+512),f
 13015  04C2  3000               	movlw	0
 13016  04C3  3DE8               	addwfc	(Exception_Main@i+1)^(0+512),f
 13017  04C4  2C98               	goto	l10971
 13018  04C5                     u13540:	
 13019  04C5  0024               	movlb	4	; select bank4
 13020  04C6  0008               	return
 13021  04C7                     l10973:	
 13022                           ;main_B1.c: 544: case 3:
 13023                           
 13024                           ;main_B1.c: 541: }
 13025                           ;main_B1.c: 542: }
 13026                           ;main_B1.c: 543: break;
 13027                           
 13028                           
 13029                           ;main_B1.c: 546: setBuz(5, 300);
 13030  04C7  302C               	movlw	44
 13031  04C8  0020               	movlb	0	; select bank0
 13032  04C9  00A4               	movwf	setBuz@time
 13033  04CA  3001               	movlw	1
 13034  04CB  00A5               	movwf	setBuz@time+1
 13035  04CC  3005               	movlw	5
 13036  04CD  3195  25E6  3184   	fcall	_setBuz
 13037                           
 13038                           ;main_B1.c: 547: lights = getDimmerLights_Line();
 13039  04D0  319C  2426  3184   	fcall	_getDimmerLights_Line
 13040  04D3  0020               	movlb	0	; select bank0
 13041  04D4  00E7               	movwf	??_Exception_Main
 13042  04D5  0867               	movf	??_Exception_Main,w
 13043  04D6  0024               	movlb	4	; select bank4
 13044  04D7  00EB               	movwf	Exception_Main@lights^(0+512)
 13045                           
 13046                           ;main_B1.c: 548: if (lights == 0) {
 13047  04D8  08EB               	movf	Exception_Main@lights^(0+512),f
 13048  04D9  1D03               	skipz
 13049  04DA  2D0C               	goto	l10991
 13050                           
 13051                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13052  04DB  01E9               	clrf	Exception_Main@i_6338^(0+512)
 13053  04DC  01EA               	clrf	(Exception_Main@i_6338+1)^(0+512)
 13054  04DD                     l10989:	
 13055  04DD  086A               	movf	(Exception_Main@i_6338+1)^(0+512),w
 13056  04DE  3A80               	xorlw	128
 13057  04DF  0020               	movlb	0	; select bank0
 13058  04E0  00E7               	movwf	??_Exception_Main
 13059  04E1  3080               	movlw	128
 13060  04E2  0267               	subwf	??_Exception_Main,w
 13061  04E3  1D03               	skipz
 13062  04E4  2CE8               	goto	u13575
 13063  04E5  0024               	movlb	4	; select bank4
 13064  04E6  0865               	movf	Exception_Main@count^(0+512),w
 13065  04E7  0269               	subwf	Exception_Main@i_6338^(0+512),w
 13066  04E8                     u13575:	
 13067  04E8  1803               	btfsc	3,0
 13068  04E9  2D0A               	goto	u13570
 13069                           
 13070                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13071  04EA  0024               	movlb	4	; select bank4
 13072  04EB  0869               	movf	Exception_Main@i_6338^(0+512),w
 13073  04EC  3E01               	addlw	1
 13074  04ED  319B  23F9  3184   	fcall	_getDimmerLights_Status
 13075  04F0  3A01               	xorlw	1
 13076  04F1  1D03               	skipz
 13077  04F2  2D04               	goto	l10987
 13078                           
 13079                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13080  04F3  0020               	movlb	0	; select bank0
 13081  04F4  086D               	movf	_DimmerLights,w
 13082  04F5  0086               	movwf	6
 13083  04F6  3001               	movlw	1	; select bank2/3
 13084  04F7  0087               	movwf	7
 13085  04F8  1401               	bsf	1,0
 13086                           
 13087                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13088  04F9  0A6D               	incf	_DimmerLights,w
 13089  04FA  0086               	movwf	6
 13090  04FB  3001               	movlw	1	; select bank2/3
 13091  04FC  0087               	movwf	7
 13092  04FD  1001               	bcf	1,0
 13093                           
 13094                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13095  04FE  0024               	movlb	4	; select bank4
 13096  04FF  0869               	movf	Exception_Main@i_6338^(0+512),w
 13097  0500  3E01               	addlw	1
 13098  0501  3194  240E  3184   	fcall	_setDimmerLights_SwOff
 13099  0504                     l10987:	
 13100  0504  3001               	movlw	1
 13101  0505  0024               	movlb	4	; select bank4
 13102  0506  07E9               	addwf	Exception_Main@i_6338^(0+512),f
 13103  0507  3000               	movlw	0
 13104  0508  3DEA               	addwfc	(Exception_Main@i_6338+1)^(0+512),f
 13105  0509  2CDD               	goto	l10989
 13106  050A                     u13570:	
 13107  050A  0024               	movlb	4	; select bank4
 13108  050B  0008               	return
 13109  050C                     l10991:	
 13110                           ;main_B1.c: 556: }
 13111                           ;main_B1.c: 557: }
 13112                           ;main_B1.c: 558: } else {
 13113                           
 13114                           
 13115                           ;main_B1.c: 560: if (getDimmerLights_Status(lights) == 1) {
 13116  050C  0024               	movlb	4	; select bank4
 13117  050D  086B               	movf	Exception_Main@lights^(0+512),w
 13118  050E  319B  23F9  3184   	fcall	_getDimmerLights_Status
 13119  0511  3A01               	xorlw	1
 13120  0512  1903               	btfsc	3,2
 13121  0513  2D16               	goto	l10993
 13122  0514  0024               	movlb	4	; select bank4
 13123  0515  0008               	return
 13124  0516                     l10993:	
 13125                           
 13126                           ;main_B1.c: 562: DimmerLights->SwFlag = 1;
 13127  0516  0020               	movlb	0	; select bank0
 13128  0517  086D               	movf	_DimmerLights,w
 13129  0518  0086               	movwf	6
 13130  0519  3001               	movlw	1	; select bank2/3
 13131  051A  0087               	movwf	7
 13132  051B  1401               	bsf	1,0
 13133                           
 13134                           ;main_B1.c: 563: DimmerLights->Status = 0;
 13135  051C  0A6D               	incf	_DimmerLights,w
 13136  051D  0086               	movwf	6
 13137  051E  3001               	movlw	1	; select bank2/3
 13138  051F  0087               	movwf	7
 13139  0520  1001               	bcf	1,0
 13140                           
 13141                           ;main_B1.c: 564: setDimmerLights_SwOff(lights);
 13142  0521  0024               	movlb	4	; select bank4
 13143  0522  086B               	movf	Exception_Main@lights^(0+512),w
 13144  0523  3194  240E         	fcall	_setDimmerLights_SwOff
 13145  0525  0024               	movlb	4	; select bank4
 13146  0526  0008               	return
 13147  0527                     l10999:	
 13148                           ;main_B1.c: 568: }
 13149                           
 13150                           ;main_B1.c: 565: }
 13151                           ;main_B1.c: 566: }
 13152                           ;main_B1.c: 567: break;
 13153                           
 13154  0527  0024               	movlb	4	; select bank4
 13155  0528  0866               	movf	Exception_Main@error^(0+512),w
 13156                           
 13157                           ; Switch size 1, requested type "space"
 13158                           ; Number of cases is 2, Range of values is 2 to 3
 13159                           ; switch strategies available:
 13160                           ; Name         Instructions Cycles
 13161                           ; simple_byte            7     4 (average)
 13162                           ; direct_byte           13     9 (fixed)
 13163                           ; jumptable            263     9 (fixed)
 13164                           ;	Chosen strategy is simple_byte
 13165  0529  3A02               	xorlw	2	; case 2
 13166  052A  1903               	skipnz
 13167  052B  2C86               	goto	l10957
 13168  052C  3A01               	xorlw	1	; case 3
 13169  052D  1903               	skipnz
 13170  052E  2CC7               	goto	l10973
 13171  052F  2D31               	goto	l2883
 13172  0530  0008               	return
 13173  0531                     l2883:	
 13174  0531  0008               	return
 13175  0532                     __end_of_Exception_Main:	
 13176                           
 13177                           	psect	text85
 13178  1C26                     __ptext85:	
 13179 ;; *************** function _getDimmerLights_Line *****************
 13180 ;; Defined at:
 13181 ;;		line 965 in file "../src/Dimmer_B1.c"
 13182 ;; Parameters:    Size  Location     Type
 13183 ;;		None
 13184 ;; Auto vars:     Size  Location     Type
 13185 ;;  line            1    3[COMMON] unsigned char 
 13186 ;; Return value:  Size  Location     Type
 13187 ;;                  1    wreg      unsigned char 
 13188 ;; Registers used:
 13189 ;;		wreg, status,2
 13190 ;; Tracked objects:
 13191 ;;		On entry : 0/0
 13192 ;;		On exit  : 0/0
 13193 ;;		Unchanged: 0/0
 13194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;Total ram usage:        2 bytes
 13200 ;; Hardware stack levels used:    1
 13201 ;; Hardware stack levels required when called:    3
 13202 ;; This function calls:
 13203 ;;		Nothing
 13204 ;; This function is called by:
 13205 ;;		_Exception_Main
 13206 ;; This function uses a non-reentrant model
 13207 ;;
 13208                           
 13209                           
 13210                           ;psect for function _getDimmerLights_Line
 13211  1C26                     _getDimmerLights_Line:	
 13212                           
 13213                           ;Dimmer_B1.c: 966: char line = 0;
 13214                           
 13215                           ;incstack = 0
 13216                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13217  1C26  01F3               	clrf	getDimmerLights_Line@line
 13218                           
 13219                           ;Dimmer_B1.c: 968: if (DimmerLights1.Line == 1) {
 13220  1C27  0023               	movlb	3	; select bank3
 13221  1C28  1CBF               	btfss	(_DimmerLights1^(0+384)+1),1
 13222  1C29  2C2D               	goto	l945
 13223                           
 13224                           ;Dimmer_B1.c: 969: line = 1;
 13225  1C2A  01F3               	clrf	getDimmerLights_Line@line
 13226  1C2B  0AF3               	incf	getDimmerLights_Line@line,f
 13227                           
 13228                           ;Dimmer_B1.c: 970: }
 13229  1C2C  2C33               	goto	l946
 13230  1C2D                     l945:	
 13231                           
 13232                           ;Dimmer_B1.c: 973: else if (DimmerLights2.Line == 1) {
 13233  1C2D  1CC8               	btfss	(_DimmerLights2^(0+384)+1),1
 13234  1C2E  2C33               	goto	l946
 13235                           
 13236                           ;Dimmer_B1.c: 974: line = 2;
 13237  1C2F  3002               	movlw	2
 13238  1C30  00F2               	movwf	??_getDimmerLights_Line
 13239  1C31  0872               	movf	??_getDimmerLights_Line,w
 13240  1C32  00F3               	movwf	getDimmerLights_Line@line
 13241  1C33                     l946:	
 13242                           
 13243                           ;Dimmer_B1.c: 975: }
 13244                           ;Dimmer_B1.c: 982: return line;
 13245  1C33  0873               	movf	getDimmerLights_Line@line,w
 13246  1C34  0008               	return
 13247  1C35                     __end_of_getDimmerLights_Line:	
 13248                           
 13249                           	psect	text86
 13250  1F3B                     __ptext86:	
 13251 ;; *************** function _DimmerLights_Main *****************
 13252 ;; Defined at:
 13253 ;;		line 737 in file "../src/Dimmer_B1.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;		None
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;		None
 13258 ;; Return value:  Size  Location     Type
 13259 ;;		None               void
 13260 ;; Registers used:
 13261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;Total ram usage:        0 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; Hardware stack levels required when called:    8
 13274 ;; This function calls:
 13275 ;;		_getLoad_OK
 13276 ;;		_getMain_All_Error_Status
 13277 ;;		_getMain_All_LightsStatus
 13278 ;;		_setDimmerLights_Main
 13279 ;; This function is called by:
 13280 ;;		_main
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           
 13285                           ;psect for function _DimmerLights_Main
 13286  1F3B                     _DimmerLights_Main:	
 13287                           
 13288                           ;Dimmer_B1.c: 740: if (Dimmer.LoadGO == 1) {
 13289                           
 13290                           ;incstack = 0
 13291                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13292  1F3B  0022               	movlb	2	; select bank2
 13293  1F3C  1CAE               	btfss	_Dimmer^(0+256),1	;volatile
 13294  1F3D  2F53               	goto	l10607
 13295                           
 13296                           ;Dimmer_B1.c: 741: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13297  1F3E  319B  2303  319F   	fcall	_getLoad_OK
 13298  1F41  3A01               	xorlw	1
 13299  1F42  1903               	skipnz
 13300  1F43  2F51               	goto	l887
 13301  1F44  3000               	movlw	0
 13302  1F45  3191  21CF  319F   	fcall	_getMain_All_Error_Status
 13303  1F48  3800               	iorlw	0
 13304  1F49  1D03               	skipz
 13305  1F4A  2F51               	goto	l887
 13306  1F4B  319C  2417  319F   	fcall	_getMain_All_LightsStatus
 13307  1F4E  3800               	iorlw	0
 13308  1F4F  1D03               	skipz
 13309  1F50  2F53               	goto	l10607
 13310  1F51                     l887:	
 13311                           
 13312                           ;Dimmer_B1.c: 742: Dimmer.LoadGO = 0;
 13313  1F51  0022               	movlb	2	; select bank2
 13314  1F52  10AE               	bcf	_Dimmer^(0+256),1	;volatile
 13315  1F53                     l10607:	
 13316                           
 13317                           ;Dimmer_B1.c: 743: }
 13318                           ;Dimmer_B1.c: 744: }
 13319                           ;Dimmer_B1.c: 748: setDimmerLights_Main(1);
 13320  1F53  3001               	movlw	1
 13321  1F54  3189  21A0  319F   	fcall	_setDimmerLights_Main
 13322                           
 13323                           ;Dimmer_B1.c: 752: setDimmerLights_Main(2);
 13324  1F57  3002               	movlw	2
 13325  1F58  3189  21A0         	fcall	_setDimmerLights_Main
 13326  1F5A  0008               	return
 13327  1F5B                     __end_of_DimmerLights_Main:	
 13328                           
 13329                           	psect	text87
 13330  09A0                     __ptext87:	
 13331 ;; *************** function _setDimmerLights_Main *****************
 13332 ;; Defined at:
 13333 ;;		line 762 in file "../src/Dimmer_B1.c"
 13334 ;; Parameters:    Size  Location     Type
 13335 ;;  lights          1    wreg     unsigned char 
 13336 ;; Auto vars:     Size  Location     Type
 13337 ;;  lights          1   71[BANK0 ] unsigned char 
 13338 ;; Return value:  Size  Location     Type
 13339 ;;		None               void
 13340 ;; Registers used:
 13341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13342 ;; Tracked objects:
 13343 ;;		On entry : 0/0
 13344 ;;		On exit  : 0/0
 13345 ;;		Unchanged: 0/0
 13346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13348 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13350 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13351 ;;Total ram usage:        1 bytes
 13352 ;; Hardware stack levels used:    1
 13353 ;; Hardware stack levels required when called:    7
 13354 ;; This function calls:
 13355 ;;		_DimmerLights_SelectPointer
 13356 ;;		_getDimmerLights_Allow_Condition
 13357 ;;		_getMain_All_LightsStatus
 13358 ;;		_setDimmerLights_Dimming
 13359 ;;		_setDimmerLights_OnOff
 13360 ;; This function is called by:
 13361 ;;		_DimmerLights_Main
 13362 ;; This function uses a non-reentrant model
 13363 ;;
 13364                           
 13365                           
 13366                           ;psect for function _setDimmerLights_Main
 13367  09A0                     _setDimmerLights_Main:	
 13368                           
 13369                           ;incstack = 0
 13370                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13371                           ;setDimmerLights_Main@lights stored from wreg
 13372  09A0  0020               	movlb	0	; select bank0
 13373  09A1  00E7               	movwf	setDimmerLights_Main@lights
 13374                           
 13375                           ;Dimmer_B1.c: 764: DimmerLights_SelectPointer(lights);
 13376  09A2  0867               	movf	setDimmerLights_Main@lights,w
 13377  09A3  319D  2567  3189   	fcall	_DimmerLights_SelectPointer
 13378                           
 13379                           ;Dimmer_B1.c: 765: if (DimmerLights->Trigger == 1) {
 13380  09A6  0020               	movlb	0	; select bank0
 13381  09A7  086D               	movf	_DimmerLights,w
 13382  09A8  0086               	movwf	6
 13383  09A9  3001               	movlw	1	; select bank2/3
 13384  09AA  0087               	movwf	7
 13385  09AB  1C81               	btfss	1,1
 13386  09AC  29CC               	goto	l10285
 13387                           
 13388                           ;Dimmer_B1.c: 766: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13389  09AD  0867               	movf	setDimmerLights_Main@lights,w
 13390  09AE  3192  229A  3189   	fcall	_getDimmerLights_Allow_Condition
 13391  09B1  3800               	iorlw	0
 13392  09B2  1D03               	skipz
 13393  09B3  0008               	return
 13394                           
 13395                           ;Dimmer_B1.c: 767: DimmerLights->Trigger = 0;
 13396  09B4  0020               	movlb	0	; select bank0
 13397  09B5  086D               	movf	_DimmerLights,w
 13398  09B6  0086               	movwf	6
 13399  09B7  3001               	movlw	1	; select bank2/3
 13400  09B8  0087               	movwf	7
 13401  09B9  1081               	bcf	1,1
 13402                           
 13403                           ;Dimmer_B1.c: 768: if (DimmerLights->Switch == 1) {
 13404  09BA  086D               	movf	_DimmerLights,w
 13405  09BB  0086               	movwf	6
 13406  09BC  3001               	movlw	1	; select bank2/3
 13407  09BD  0087               	movwf	7
 13408  09BE  1D01               	btfss	1,2
 13409  09BF  29C6               	goto	l10283
 13410                           
 13411                           ;Dimmer_B1.c: 769: setDimmerLights_OnOff(lights, 1);
 13412  09C0  01E3               	clrf	setDimmerLights_OnOff@command
 13413  09C1  0AE3               	incf	setDimmerLights_OnOff@command,f
 13414  09C2  0867               	movf	setDimmerLights_Main@lights,w
 13415  09C3  318D  25EB         	fcall	_setDimmerLights_OnOff
 13416                           
 13417                           ;Dimmer_B1.c: 770: } else {
 13418  09C5  0008               	return
 13419  09C6                     l10283:	
 13420                           
 13421                           ;Dimmer_B1.c: 771: setDimmerLights_OnOff(lights, 0);
 13422  09C6  0020               	movlb	0	; select bank0
 13423  09C7  01E3               	clrf	setDimmerLights_OnOff@command
 13424  09C8  0867               	movf	setDimmerLights_Main@lights,w
 13425  09C9  318D  25EB         	fcall	_setDimmerLights_OnOff
 13426                           
 13427                           ;Dimmer_B1.c: 772: }
 13428                           ;Dimmer_B1.c: 773: }
 13429                           ;Dimmer_B1.c: 774: } else {
 13430  09CB  0008               	return
 13431  09CC                     l10285:	
 13432                           
 13433                           ;Dimmer_B1.c: 775: if (getMain_All_LightsStatus() == 1) {
 13434  09CC  319C  2417  3189   	fcall	_getMain_All_LightsStatus
 13435  09CF  3A01               	xorlw	1
 13436  09D0  1D03               	skipz
 13437  09D1  29F8               	goto	l10297
 13438                           
 13439                           ;Dimmer_B1.c: 776: if (DimmerLights->DimmingTrigger == 1) {
 13440  09D2  0020               	movlb	0	; select bank0
 13441  09D3  086D               	movf	_DimmerLights,w
 13442  09D4  0086               	movwf	6
 13443  09D5  3001               	movlw	1	; select bank2/3
 13444  09D6  0087               	movwf	7
 13445  09D7  1E01               	btfss	1,4
 13446  09D8  0008               	return
 13447                           
 13448                           ;Dimmer_B1.c: 777: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13449  09D9  0867               	movf	setDimmerLights_Main@lights,w
 13450  09DA  3192  229A  3189   	fcall	_getDimmerLights_Allow_Condition
 13451  09DD  3800               	iorlw	0
 13452  09DE  1D03               	skipz
 13453  09DF  0008               	return
 13454                           
 13455                           ;Dimmer_B1.c: 778: DimmerLights->DimmingTrigger = 0;
 13456  09E0  0020               	movlb	0	; select bank0
 13457  09E1  086D               	movf	_DimmerLights,w
 13458  09E2  0086               	movwf	6
 13459  09E3  3001               	movlw	1	; select bank2/3
 13460  09E4  0087               	movwf	7
 13461  09E5  1201               	bcf	1,4
 13462                           
 13463                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingSwitch == 1) {
 13464  09E6  086D               	movf	_DimmerLights,w
 13465  09E7  0086               	movwf	6
 13466  09E8  3001               	movlw	1	; select bank2/3
 13467  09E9  0087               	movwf	7
 13468  09EA  1E81               	btfss	1,5
 13469  09EB  29F2               	goto	l10295
 13470                           
 13471                           ;Dimmer_B1.c: 780: setDimmerLights_Dimming(lights, 1);
 13472  09EC  01E3               	clrf	setDimmerLights_Dimming@status
 13473  09ED  0AE3               	incf	setDimmerLights_Dimming@status,f
 13474  09EE  0867               	movf	setDimmerLights_Main@lights,w
 13475  09EF  3194  24F1         	fcall	_setDimmerLights_Dimming
 13476                           
 13477                           ;Dimmer_B1.c: 781: } else {
 13478  09F1  0008               	return
 13479  09F2                     l10295:	
 13480                           
 13481                           ;Dimmer_B1.c: 782: setDimmerLights_Dimming(lights, 0);
 13482  09F2  0020               	movlb	0	; select bank0
 13483  09F3  01E3               	clrf	setDimmerLights_Dimming@status
 13484  09F4  0867               	movf	setDimmerLights_Main@lights,w
 13485  09F5  3194  24F1         	fcall	_setDimmerLights_Dimming
 13486                           
 13487                           ;Dimmer_B1.c: 783: }
 13488                           ;Dimmer_B1.c: 784: }
 13489                           ;Dimmer_B1.c: 785: }
 13490                           ;Dimmer_B1.c: 786: } else {
 13491  09F7  0008               	return
 13492  09F8                     l10297:	
 13493                           
 13494                           ;Dimmer_B1.c: 787: if (DimmerLights->DimmingTrigger == 1) {
 13495  09F8  0020               	movlb	0	; select bank0
 13496  09F9  086D               	movf	_DimmerLights,w
 13497  09FA  0086               	movwf	6
 13498  09FB  3001               	movlw	1	; select bank2/3
 13499  09FC  0087               	movwf	7
 13500  09FD  1E01               	btfss	1,4
 13501  09FE  0008               	return
 13502                           
 13503                           ;Dimmer_B1.c: 788: DimmerLights->DimmingTrigger = 0;
 13504  09FF  086D               	movf	_DimmerLights,w
 13505  0A00  0086               	movwf	6
 13506  0A01  3001               	movlw	1	; select bank2/3
 13507  0A02  0087               	movwf	7
 13508  0A03  1201               	bcf	1,4
 13509  0A04  0008               	return
 13510  0A05                     __end_of_setDimmerLights_Main:	
 13511                           
 13512                           	psect	text88
 13513  0DEB                     __ptext88:	
 13514 ;; *************** function _setDimmerLights_OnOff *****************
 13515 ;; Defined at:
 13516 ;;		line 796 in file "../src/Dimmer_B1.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;  lights          1    wreg     unsigned char 
 13519 ;;  command         1   67[BANK0 ] unsigned char 
 13520 ;; Auto vars:     Size  Location     Type
 13521 ;;  lights          1   70[BANK0 ] unsigned char 
 13522 ;; Return value:  Size  Location     Type
 13523 ;;		None               void
 13524 ;; Registers used:
 13525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13526 ;; Tracked objects:
 13527 ;;		On entry : 0/0
 13528 ;;		On exit  : 0/0
 13529 ;;		Unchanged: 0/0
 13530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13531 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;Total ram usage:        4 bytes
 13536 ;; Hardware stack levels used:    1
 13537 ;; Hardware stack levels required when called:    6
 13538 ;; This function calls:
 13539 ;;		_getCmd_Status
 13540 ;;		_getDimmerLights_PercentToValue
 13541 ;;		_getDimmerLights_ValueToPercent
 13542 ;;		_getMain_All_LightsStatus
 13543 ;;		_setCmd_Status
 13544 ;;		_setDimmerIntr_ControlStatus
 13545 ;;		_setDimmerIntr_DimmingValue
 13546 ;;		_setDimmerIntr_Dimming_RF
 13547 ;;		_setDimmerIntr_MaxmumValue
 13548 ;;		_setDimmerLights_Line
 13549 ;;		_setLED
 13550 ;;		_setProductData
 13551 ;;		_setRF_DimmerLights
 13552 ;;		_setTxData
 13553 ;; This function is called by:
 13554 ;;		_setDimmerLights_Main
 13555 ;; This function uses a non-reentrant model
 13556 ;;
 13557                           
 13558                           
 13559                           ;psect for function _setDimmerLights_OnOff
 13560  0DEB                     _setDimmerLights_OnOff:	
 13561                           
 13562                           ;incstack = 0
 13563                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13564                           ;setDimmerLights_OnOff@lights stored from wreg
 13565  0DEB  0020               	movlb	0	; select bank0
 13566  0DEC  00E6               	movwf	setDimmerLights_OnOff@lights
 13567                           
 13568                           ;Dimmer_B1.c: 798: if (command == 1) {
 13569  0DED  0863               	movf	setDimmerLights_OnOff@command,w
 13570  0DEE  3A01               	xorlw	1
 13571  0DEF  1D03               	skipz
 13572  0DF0  2E4C               	goto	l10097
 13573                           
 13574                           ;Dimmer_B1.c: 799: setDimmerIntr_ControlStatus(lights, 1);
 13575  0DF1  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13576  0DF2  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13577  0DF3  0866               	movf	setDimmerLights_OnOff@lights,w
 13578  0DF4  3191  2129  318D   	fcall	_setDimmerIntr_ControlStatus
 13579                           
 13580                           ;Dimmer_B1.c: 800: setLED(lights, 0);
 13581  0DF7  01F4               	clrf	setLED@command
 13582  0DF8  0020               	movlb	0	; select bank0
 13583  0DF9  0866               	movf	setDimmerLights_OnOff@lights,w
 13584  0DFA  3197  27A1  318D   	fcall	_setLED
 13585                           
 13586                           ;Dimmer_B1.c: 804: Dimmer.Load_Status = 1;
 13587  0DFD  0022               	movlb	2	; select bank2
 13588  0DFE  152E               	bsf	_Dimmer^(0+256),2	;volatile
 13589                           
 13590                           ;Dimmer_B1.c: 805: setDimmerLights_Line(lights);
 13591  0DFF  0020               	movlb	0	; select bank0
 13592  0E00  0866               	movf	setDimmerLights_OnOff@lights,w
 13593  0E01  319D  2506  318D   	fcall	_setDimmerLights_Line
 13594                           
 13595                           ;Dimmer_B1.c: 810: setDimmerIntr_DimmingValue(lights, ((char)(65*0.8)));
 13596  0E04  3034               	movlw	52
 13597  0E05  0020               	movlb	0	; select bank0
 13598  0E06  00E4               	movwf	??_setDimmerLights_OnOff
 13599  0E07  0864               	movf	??_setDimmerLights_OnOff,w
 13600  0E08  00F2               	movwf	setDimmerIntr_DimmingValue@value
 13601  0E09  0866               	movf	setDimmerLights_OnOff@lights,w
 13602  0E0A  319D  2591  318D   	fcall	_setDimmerIntr_DimmingValue
 13603                           
 13604                           ;Dimmer_B1.c: 811: if (DimmerLights->DimmingRun == 1) {
 13605  0E0D  0020               	movlb	0	; select bank0
 13606  0E0E  0A6D               	incf	_DimmerLights,w
 13607  0E0F  0086               	movwf	6
 13608  0E10  3001               	movlw	1	; select bank2/3
 13609  0E11  0087               	movwf	7
 13610  0E12  1F01               	btfss	1,6
 13611  0E13  2E35               	goto	l10093
 13612                           
 13613                           ;Dimmer_B1.c: 812: DimmerLights->DimmingRun = 0;
 13614  0E14  0A6D               	incf	_DimmerLights,w
 13615  0E15  0086               	movwf	6
 13616  0E16  3001               	movlw	1	; select bank2/3
 13617  0E17  0087               	movwf	7
 13618  0E18  1301               	bcf	1,6
 13619                           
 13620                           ;Dimmer_B1.c: 813: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13621  0E19  0866               	movf	setDimmerLights_OnOff@lights,w
 13622  0E1A  3E14               	addlw	20
 13623  0E1B  076F               	addwf	_product,w
 13624  0E1C  00E4               	movwf	??_setDimmerLights_OnOff
 13625  0E1D  0864               	movf	??_setDimmerLights_OnOff,w
 13626  0E1E  0086               	movwf	6
 13627  0E1F  3002               	movlw	2	; select bank4/5
 13628  0E20  0087               	movwf	7
 13629  0E21  0801               	movf	1,w
 13630  0E22  3189  213B  318D   	fcall	_getDimmerLights_PercentToValue
 13631  0E25  0020               	movlb	0	; select bank0
 13632  0E26  00E5               	movwf	??_setDimmerLights_OnOff+1
 13633  0E27  0865               	movf	??_setDimmerLights_OnOff+1,w
 13634  0E28  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13635  0E29  0866               	movf	setDimmerLights_OnOff@lights,w
 13636  0E2A  319D  25FB  318D   	fcall	_setDimmerIntr_MaxmumValue
 13637                           
 13638                           ;Dimmer_B1.c: 814: setDimmerIntr_Dimming_RF(lights, 1);
 13639  0E2D  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 13640  0E2E  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 13641  0E2F  0020               	movlb	0	; select bank0
 13642  0E30  0866               	movf	setDimmerLights_OnOff@lights,w
 13643  0E31  3191  2152  318D   	fcall	_setDimmerIntr_Dimming_RF
 13644                           
 13645                           ;Dimmer_B1.c: 815: } else {
 13646  0E34  2E6D               	goto	l10113
 13647  0E35                     l10093:	
 13648                           
 13649                           ;Dimmer_B1.c: 816: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.8)));
 13650  0E35  3034               	movlw	52
 13651  0E36  0020               	movlb	0	; select bank0
 13652  0E37  00E4               	movwf	??_setDimmerLights_OnOff
 13653  0E38  0864               	movf	??_setDimmerLights_OnOff,w
 13654  0E39  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13655  0E3A  0866               	movf	setDimmerLights_OnOff@lights,w
 13656  0E3B  319D  25FB  318D   	fcall	_setDimmerIntr_MaxmumValue
 13657                           
 13658                           ;Dimmer_B1.c: 817: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.8))));
 13659  0E3E  3034               	movlw	52
 13660  0E3F  3188  20D6  318D   	fcall	_getDimmerLights_ValueToPercent
 13661  0E42  0020               	movlb	0	; select bank0
 13662  0E43  00E4               	movwf	??_setDimmerLights_OnOff
 13663  0E44  0864               	movf	??_setDimmerLights_OnOff,w
 13664  0E45  00DA               	movwf	setProductData@value
 13665  0E46  0866               	movf	setDimmerLights_OnOff@lights,w
 13666  0E47  3E14               	addlw	20
 13667  0E48  319B  23EB  318D   	fcall	_setProductData
 13668                           
 13669                           ;Dimmer_B1.c: 818: }
 13670                           ;Dimmer_B1.c: 820: } else if (command == 0) {
 13671  0E4B  2E6D               	goto	l10113
 13672  0E4C                     l10097:	
 13673  0E4C  0020               	movlb	0	; select bank0
 13674  0E4D  08E3               	movf	setDimmerLights_OnOff@command,f
 13675  0E4E  1D03               	skipz
 13676  0E4F  2E6D               	goto	l10113
 13677                           
 13678                           ;Dimmer_B1.c: 821: setDimmerIntr_ControlStatus(lights, 0);
 13679  0E50  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13680  0E51  0866               	movf	setDimmerLights_OnOff@lights,w
 13681  0E52  3191  2129  318D   	fcall	_setDimmerIntr_ControlStatus
 13682                           
 13683                           ;Dimmer_B1.c: 822: setLED(lights, 1);
 13684  0E55  01F4               	clrf	setLED@command
 13685  0E56  0AF4               	incf	setLED@command,f
 13686  0E57  0020               	movlb	0	; select bank0
 13687  0E58  0866               	movf	setDimmerLights_OnOff@lights,w
 13688  0E59  3197  27A1  318D   	fcall	_setLED
 13689                           
 13690                           ;Dimmer_B1.c: 827: if (lights == 1) {
 13691  0E5C  0020               	movlb	0	; select bank0
 13692  0E5D  0866               	movf	setDimmerLights_OnOff@lights,w
 13693  0E5E  3A01               	xorlw	1
 13694  0E5F  1D03               	skipz
 13695  0E60  2E63               	goto	l10107
 13696                           
 13697                           ;Dimmer_B1.c: 828: RA7 = 0;
 13698  0E61  138C               	bcf	12,7	;volatile
 13699                           
 13700                           ;Dimmer_B1.c: 830: }
 13701  0E62  2E67               	goto	l912
 13702  0E63                     l10107:	
 13703                           
 13704                           ;Dimmer_B1.c: 833: else if (lights == 2) {
 13705  0E63  0866               	movf	setDimmerLights_OnOff@lights,w
 13706  0E64  3A02               	xorlw	2
 13707  0E65  1903               	btfsc	3,2
 13708                           
 13709                           ;Dimmer_B1.c: 834: RB4 = 0;
 13710  0E66  120D               	bcf	13,4	;volatile
 13711  0E67                     l912:	
 13712                           
 13713                           ;Dimmer_B1.c: 835: }
 13714                           ;Dimmer_B1.c: 840: Dimmer.Load_Status = 0;
 13715  0E67  0022               	movlb	2	; select bank2
 13716  0E68  112E               	bcf	_Dimmer^(0+256),2	;volatile
 13717                           
 13718                           ;Dimmer_B1.c: 841: setDimmerLights_Line(0);
 13719  0E69  3000               	movlw	0
 13720  0E6A  319D  2506  318D   	fcall	_setDimmerLights_Line
 13721  0E6D                     l10113:	
 13722                           
 13723                           ;Dimmer_B1.c: 843: }
 13724                           ;Dimmer_B1.c: 846: setRF_DimmerLights(lights, command);
 13725  0E6D  0020               	movlb	0	; select bank0
 13726  0E6E  0863               	movf	setDimmerLights_OnOff@command,w
 13727  0E6F  00E4               	movwf	??_setDimmerLights_OnOff
 13728  0E70  0864               	movf	??_setDimmerLights_OnOff,w
 13729  0E71  00DE               	movwf	setRF_DimmerLights@on
 13730  0E72  0866               	movf	setDimmerLights_OnOff@lights,w
 13731  0E73  3197  2742  318D   	fcall	_setRF_DimmerLights
 13732                           
 13733                           ;Dimmer_B1.c: 848: if (getCmd_Status(1) == 1) {
 13734  0E76  3001               	movlw	1
 13735  0E77  319C  2463  318D   	fcall	_getCmd_Status
 13736  0E7A  3A01               	xorlw	1
 13737  0E7B  1D03               	skipz
 13738  0E7C  2E97               	goto	l10127
 13739                           
 13740                           ;Dimmer_B1.c: 849: if (getMain_All_LightsStatus() == 0) {
 13741  0E7D  319C  2417  318D   	fcall	_getMain_All_LightsStatus
 13742  0E80  3800               	iorlw	0
 13743  0E81  1D03               	skipz
 13744  0E82  0008               	return
 13745                           
 13746                           ;Dimmer_B1.c: 850: setCmd_Status(1, 0);
 13747  0E83  01F2               	clrf	setCmd_Status@cmd
 13748  0E84  3001               	movlw	1
 13749  0E85  319D  257C  318D   	fcall	_setCmd_Status
 13750                           
 13751                           ;Dimmer_B1.c: 851: setProductData(11, 0);
 13752  0E88  0020               	movlb	0	; select bank0
 13753  0E89  01DA               	clrf	setProductData@value
 13754  0E8A  300B               	movlw	11
 13755  0E8B  319B  23EB  318D   	fcall	_setProductData
 13756                           
 13757                           ;Dimmer_B1.c: 852: setProductData(17, 0);
 13758  0E8E  0020               	movlb	0	; select bank0
 13759  0E8F  01DA               	clrf	setProductData@value
 13760  0E90  3011               	movlw	17
 13761  0E91  319B  23EB  318D   	fcall	_setProductData
 13762                           
 13763                           ;Dimmer_B1.c: 853: setTxData();
 13764  0E94  3186  26CC         	fcall	_setTxData
 13765                           
 13766                           ;Dimmer_B1.c: 854: }
 13767                           ;Dimmer_B1.c: 855: } else {
 13768  0E96  0008               	return
 13769  0E97                     l10127:	
 13770                           
 13771                           ;Dimmer_B1.c: 856: setTxData();
 13772  0E97  3186  26CC         	fcall	_setTxData
 13773  0E99  0008               	return
 13774  0E9A                     __end_of_setDimmerLights_OnOff:	
 13775                           
 13776                           	psect	text89
 13777  17A1                     __ptext89:	
 13778 ;; *************** function _setLED *****************
 13779 ;; Defined at:
 13780 ;;		line 76 in file "../src/LED_B1.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;  led             1    wreg     unsigned char 
 13783 ;;  command         1    4[COMMON] unsigned char 
 13784 ;; Auto vars:     Size  Location     Type
 13785 ;;  led             1    5[COMMON] unsigned char 
 13786 ;; Return value:  Size  Location     Type
 13787 ;;		None               void
 13788 ;; Registers used:
 13789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13790 ;; Tracked objects:
 13791 ;;		On entry : 0/0
 13792 ;;		On exit  : 0/0
 13793 ;;		Unchanged: 0/0
 13794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13795 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;Total ram usage:        2 bytes
 13800 ;; Hardware stack levels used:    1
 13801 ;; Hardware stack levels required when called:    4
 13802 ;; This function calls:
 13803 ;;		_LedPointSelect
 13804 ;; This function is called by:
 13805 ;;		_setDimmerLights_OnOff
 13806 ;;		_setLED_Initialization
 13807 ;;		_setSw_Initialization
 13808 ;;		_Exception_Main
 13809 ;; This function uses a non-reentrant model
 13810 ;;
 13811                           
 13812                           
 13813                           ;psect for function _setLED
 13814  17A1                     _setLED:	
 13815                           
 13816                           ;incstack = 0
 13817                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13818                           ;setLED@led stored from wreg
 13819  17A1  00F5               	movwf	setLED@led
 13820                           
 13821                           ;LED_B1.c: 77: LedPointSelect(led);
 13822  17A2  0875               	movf	setLED@led,w
 13823  17A3  319E  26E4  3197   	fcall	_LedPointSelect
 13824                           
 13825                           ;LED_B1.c: 78: if (command == 0) {
 13826  17A6  08F4               	movf	setLED@command,f
 13827  17A7  1D03               	skipz
 13828  17A8  2FBB               	goto	l9875
 13829                           
 13830                           ;LED_B1.c: 80: if (led == 1) {
 13831  17A9  0875               	movf	setLED@led,w
 13832  17AA  3A01               	xorlw	1
 13833  17AB  1D03               	skipz
 13834  17AC  2FAF               	goto	l9867
 13835                           
 13836                           ;LED_B1.c: 84: RA3 = 1;
 13837  17AD  0020               	movlb	0	; select bank0
 13838  17AE  158C               	bsf	12,3	;volatile
 13839  17AF                     l9867:	
 13840                           
 13841                           ;LED_B1.c: 86: }
 13842                           ;LED_B1.c: 89: if (led == 2) {
 13843  17AF  0875               	movf	setLED@led,w
 13844  17B0  3A02               	xorlw	2
 13845  17B1  1D03               	skipz
 13846  17B2  2FB5               	goto	l9871
 13847                           
 13848                           ;LED_B1.c: 93: RC7 = 1;
 13849  17B3  0020               	movlb	0	; select bank0
 13850  17B4  178E               	bsf	14,7	;volatile
 13851  17B5                     l9871:	
 13852                           
 13853                           ;LED_B1.c: 95: }
 13854                           ;LED_B1.c: 107: if (led == 99) {
 13855  17B5  0875               	movf	setLED@led,w
 13856  17B6  3A63               	xorlw	99
 13857  17B7  1D03               	skipz
 13858  17B8  2FBB               	goto	l9875
 13859                           
 13860                           ;LED_B1.c: 111: RB5 = 1;
 13861  17B9  0020               	movlb	0	; select bank0
 13862  17BA  168D               	bsf	13,5	;volatile
 13863  17BB                     l9875:	
 13864                           
 13865                           ;LED_B1.c: 113: }
 13866                           ;LED_B1.c: 115: }
 13867                           ;LED_B1.c: 116: if (command == 1) {
 13868  17BB  0874               	movf	setLED@command,w
 13869  17BC  3A01               	xorlw	1
 13870  17BD  1D03               	skipz
 13871  17BE  2FD1               	goto	l9889
 13872                           
 13873                           ;LED_B1.c: 118: if (led == 1) {
 13874  17BF  0875               	movf	setLED@led,w
 13875  17C0  3A01               	xorlw	1
 13876  17C1  1D03               	skipz
 13877  17C2  2FC5               	goto	l9881
 13878                           
 13879                           ;LED_B1.c: 122: RA3 = 0;
 13880  17C3  0020               	movlb	0	; select bank0
 13881  17C4  118C               	bcf	12,3	;volatile
 13882  17C5                     l9881:	
 13883                           
 13884                           ;LED_B1.c: 124: }
 13885                           ;LED_B1.c: 127: if (led == 2) {
 13886  17C5  0875               	movf	setLED@led,w
 13887  17C6  3A02               	xorlw	2
 13888  17C7  1D03               	skipz
 13889  17C8  2FCB               	goto	l9885
 13890                           
 13891                           ;LED_B1.c: 131: RC7 = 0;
 13892  17C9  0020               	movlb	0	; select bank0
 13893  17CA  138E               	bcf	14,7	;volatile
 13894  17CB                     l9885:	
 13895                           
 13896                           ;LED_B1.c: 133: }
 13897                           ;LED_B1.c: 145: if (led == 99) {
 13898  17CB  0875               	movf	setLED@led,w
 13899  17CC  3A63               	xorlw	99
 13900  17CD  1D03               	skipz
 13901  17CE  2FD1               	goto	l9889
 13902                           
 13903                           ;LED_B1.c: 149: RB5 = 0;
 13904  17CF  0020               	movlb	0	; select bank0
 13905  17D0  128D               	bcf	13,5	;volatile
 13906  17D1                     l9889:	
 13907                           
 13908                           ;LED_B1.c: 151: }
 13909                           ;LED_B1.c: 153: }
 13910                           ;LED_B1.c: 154: if (command == 10) {
 13911  17D1  0874               	movf	setLED@command,w
 13912  17D2  3A0A               	xorlw	10
 13913  17D3  1D03               	skipz
 13914  17D4  2FF5               	goto	l9905
 13915                           
 13916                           ;LED_B1.c: 155: LED->GO = 0;
 13917  17D5  0021               	movlb	1	; select bank1
 13918  17D6  0842               	movf	_LED^(0+128),w
 13919  17D7  0086               	movwf	6
 13920  17D8  3001               	movlw	1	; select bank2/3
 13921  17D9  0087               	movwf	7
 13922  17DA  1081               	bcf	1,1
 13923                           
 13924                           ;LED_B1.c: 156: LED->Time = 0;
 13925  17DB  0A42               	incf	_LED^(0+128),w
 13926  17DC  0086               	movwf	6
 13927  17DD  3001               	movlw	1	; select bank2/3
 13928  17DE  0087               	movwf	7
 13929  17DF  3000               	movlw	0
 13930  17E0  3FC0               	movwi [0]fsr1
 13931  17E1  3FC1               	movwi [1]fsr1
 13932                           
 13933                           ;LED_B1.c: 158: if (led == 1) {
 13934  17E2  0875               	movf	setLED@led,w
 13935  17E3  3A01               	xorlw	1
 13936  17E4  1D03               	skipz
 13937  17E5  2FE9               	goto	l9897
 13938                           
 13939                           ;LED_B1.c: 162: RA3 = 1;
 13940  17E6  0020               	movlb	0	; select bank0
 13941  17E7  158C               	bsf	12,3	;volatile
 13942                           
 13943                           ;LED_B1.c: 164: }
 13944  17E8  2FEF               	goto	l9901
 13945  17E9                     l9897:	
 13946                           
 13947                           ;LED_B1.c: 167: else if (led == 2) {
 13948  17E9  0875               	movf	setLED@led,w
 13949  17EA  3A02               	xorlw	2
 13950  17EB  1D03               	skipz
 13951  17EC  2FEF               	goto	l9901
 13952                           
 13953                           ;LED_B1.c: 171: RC7 = 1;
 13954  17ED  0020               	movlb	0	; select bank0
 13955  17EE  178E               	bsf	14,7	;volatile
 13956  17EF                     l9901:	
 13957                           
 13958                           ;LED_B1.c: 173: }
 13959                           ;LED_B1.c: 185: if (led == 99) {
 13960  17EF  0875               	movf	setLED@led,w
 13961  17F0  3A63               	xorlw	99
 13962  17F1  1D03               	skipz
 13963  17F2  2FF5               	goto	l9905
 13964                           
 13965                           ;LED_B1.c: 189: RB5 = 1;
 13966  17F3  0020               	movlb	0	; select bank0
 13967  17F4  168D               	bsf	13,5	;volatile
 13968  17F5                     l9905:	
 13969                           
 13970                           ;LED_B1.c: 191: }
 13971                           ;LED_B1.c: 193: }
 13972                           ;LED_B1.c: 194: if (command == 11) {
 13973  17F5  0874               	movf	setLED@command,w
 13974  17F6  3A0B               	xorlw	11
 13975  17F7  1D03               	skipz
 13976  17F8  0008               	return
 13977                           
 13978                           ;LED_B1.c: 195: LED->GO = 1;
 13979  17F9  0021               	movlb	1	; select bank1
 13980  17FA  0842               	movf	_LED^(0+128),w
 13981  17FB  0086               	movwf	6
 13982  17FC  3001               	movlw	1	; select bank2/3
 13983  17FD  0087               	movwf	7
 13984  17FE  1481               	bsf	1,1
 13985  17FF  0008               	return
 13986  1800                     __end_of_setLED:	
 13987                           
 13988                           	psect	text90
 13989  1EE4                     __ptext90:	
 13990 ;; *************** function _LedPointSelect *****************
 13991 ;; Defined at:
 13992 ;;		line 7 in file "../src/LED_B1.c"
 13993 ;; Parameters:    Size  Location     Type
 13994 ;;  led             1    wreg     unsigned char 
 13995 ;; Auto vars:     Size  Location     Type
 13996 ;;  led             1    3[COMMON] unsigned char 
 13997 ;; Return value:  Size  Location     Type
 13998 ;;		None               void
 13999 ;; Registers used:
 14000 ;;		wreg
 14001 ;; Tracked objects:
 14002 ;;		On entry : 0/0
 14003 ;;		On exit  : 0/0
 14004 ;;		Unchanged: 0/0
 14005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;Total ram usage:        2 bytes
 14011 ;; Hardware stack levels used:    1
 14012 ;; Hardware stack levels required when called:    3
 14013 ;; This function calls:
 14014 ;;		Nothing
 14015 ;; This function is called by:
 14016 ;;		_setLED_Initialization
 14017 ;;		_setLED
 14018 ;;		_setLED_Main
 14019 ;; This function uses a non-reentrant model
 14020 ;;
 14021                           
 14022                           
 14023                           ;psect for function _LedPointSelect
 14024  1EE4                     _LedPointSelect:	
 14025                           
 14026                           ;incstack = 0
 14027                           ; Regs used in _LedPointSelect: [wreg]
 14028                           ;LedPointSelect@led stored from wreg
 14029  1EE4  00F3               	movwf	LedPointSelect@led
 14030                           
 14031                           ;LED_B1.c: 9: if (led == 1) {
 14032  1EE5  0873               	movf	LedPointSelect@led,w
 14033  1EE6  3A01               	xorlw	1
 14034  1EE7  1D03               	skipz
 14035  1EE8  2EEE               	goto	l1134
 14036                           
 14037                           ;LED_B1.c: 10: LED = &VarLED1;
 14038  1EE9  3065               	movlw	_VarLED1& (0+255)
 14039  1EEA  00F2               	movwf	??_LedPointSelect
 14040  1EEB  0872               	movf	??_LedPointSelect,w
 14041  1EEC  0021               	movlb	1	; select bank1
 14042  1EED  00C2               	movwf	_LED^(0+128)
 14043  1EEE                     l1134:	
 14044                           
 14045                           ;LED_B1.c: 11: }
 14046                           ;LED_B1.c: 14: if (led == 2) {
 14047  1EEE  0873               	movf	LedPointSelect@led,w
 14048  1EEF  3A02               	xorlw	2
 14049  1EF0  1D03               	skipz
 14050  1EF1  2EF7               	goto	l1135
 14051                           
 14052                           ;LED_B1.c: 15: LED = &VarLED2;
 14053  1EF2  3069               	movlw	_VarLED2& (0+255)
 14054  1EF3  00F2               	movwf	??_LedPointSelect
 14055  1EF4  0872               	movf	??_LedPointSelect,w
 14056  1EF5  0021               	movlb	1	; select bank1
 14057  1EF6  00C2               	movwf	_LED^(0+128)
 14058  1EF7                     l1135:	
 14059                           
 14060                           ;LED_B1.c: 16: }
 14061                           ;LED_B1.c: 24: if (led == 99) {
 14062  1EF7  0873               	movf	LedPointSelect@led,w
 14063  1EF8  3A63               	xorlw	99
 14064  1EF9  1D03               	skipz
 14065  1EFA  0008               	return
 14066                           
 14067                           ;LED_B1.c: 25: LED = &VarErrLED;
 14068  1EFB  3061               	movlw	_VarErrLED& (0+255)
 14069  1EFC  00F2               	movwf	??_LedPointSelect
 14070  1EFD  0872               	movf	??_LedPointSelect,w
 14071  1EFE  0021               	movlb	1	; select bank1
 14072  1EFF  00C2               	movwf	_LED^(0+128)
 14073  1F00  0008               	return
 14074  1F01                     __end_of_LedPointSelect:	
 14075                           
 14076                           	psect	text91
 14077  1152                     __ptext91:	
 14078 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14079 ;; Defined at:
 14080 ;;		line 180 in file "../src/Dimmer_B1.c"
 14081 ;; Parameters:    Size  Location     Type
 14082 ;;  lights          1    wreg     unsigned char 
 14083 ;;  command         1    2[COMMON] unsigned char 
 14084 ;; Auto vars:     Size  Location     Type
 14085 ;;  lights          1    4[COMMON] unsigned char 
 14086 ;; Return value:  Size  Location     Type
 14087 ;;		None               void
 14088 ;; Registers used:
 14089 ;;		wreg, status,2, status,0
 14090 ;; Tracked objects:
 14091 ;;		On entry : 0/0
 14092 ;;		On exit  : 0/0
 14093 ;;		Unchanged: 0/0
 14094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14095 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14098 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14099 ;;Total ram usage:        3 bytes
 14100 ;; Hardware stack levels used:    1
 14101 ;; Hardware stack levels required when called:    3
 14102 ;; This function calls:
 14103 ;;		Nothing
 14104 ;; This function is called by:
 14105 ;;		_setDimmerLights_OnOff
 14106 ;;		_setRFSW_AdjControl
 14107 ;; This function uses a non-reentrant model
 14108 ;;
 14109                           
 14110                           
 14111                           ;psect for function _setDimmerIntr_Dimming_RF
 14112  1152                     _setDimmerIntr_Dimming_RF:	
 14113                           
 14114                           ;incstack = 0
 14115                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14116                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14117  1152  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 14118                           
 14119                           ;Dimmer_B1.c: 182: if (lights == 1) {
 14120  1153  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14121  1154  3A01               	xorlw	1
 14122  1155  1D03               	skipz
 14123  1156  2967               	goto	l9519
 14124                           
 14125                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14126  1157  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14127  1158  3A01               	xorlw	1
 14128  1159  3000               	movlw	0
 14129  115A  1903               	skipnz
 14130  115B  3001               	movlw	1
 14131  115C  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14132  115D  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14133  115E  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14134  115F  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14135  1160  0021               	movlb	1	; select bank1
 14136  1161  085D               	movf	_DimmerIntr1^(0+128),w
 14137  1162  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14138  1163  39BF               	andlw	-65
 14139  1164  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14140  1165  00DD               	movwf	_DimmerIntr1^(0+128)
 14141                           
 14142                           ;Dimmer_B1.c: 184: }
 14143  1166  0008               	return
 14144  1167                     l9519:	
 14145                           
 14146                           ;Dimmer_B1.c: 187: else if (lights == 2) {
 14147  1167  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14148  1168  3A02               	xorlw	2
 14149  1169  1D03               	skipz
 14150  116A  0008               	return
 14151                           
 14152                           ;Dimmer_B1.c: 188: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14153  116B  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14154  116C  3A01               	xorlw	1
 14155  116D  3000               	movlw	0
 14156  116E  1903               	skipnz
 14157  116F  3001               	movlw	1
 14158  1170  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14159  1171  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14160  1172  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14161  1173  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14162  1174  0021               	movlb	1	; select bank1
 14163  1175  0864               	movf	_DimmerIntr2^(0+128),w
 14164  1176  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14165  1177  39BF               	andlw	-65
 14166  1178  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14167  1179  00E4               	movwf	_DimmerIntr2^(0+128)
 14168  117A  0008               	return
 14169  117B                     __end_of_setDimmerIntr_Dimming_RF:	
 14170                           
 14171                           	psect	text92
 14172  1D91                     __ptext92:	
 14173 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14174 ;; Defined at:
 14175 ;;		line 48 in file "../src/Dimmer_B1.c"
 14176 ;; Parameters:    Size  Location     Type
 14177 ;;  lights          1    wreg     unsigned char 
 14178 ;;  value           1    2[COMMON] unsigned char 
 14179 ;; Auto vars:     Size  Location     Type
 14180 ;;  lights          1    4[COMMON] unsigned char 
 14181 ;; Return value:  Size  Location     Type
 14182 ;;		None               void
 14183 ;; Registers used:
 14184 ;;		wreg
 14185 ;; Tracked objects:
 14186 ;;		On entry : 0/0
 14187 ;;		On exit  : 0/0
 14188 ;;		Unchanged: 0/0
 14189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14190 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14193 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;Total ram usage:        3 bytes
 14195 ;; Hardware stack levels used:    1
 14196 ;; Hardware stack levels required when called:    3
 14197 ;; This function calls:
 14198 ;;		Nothing
 14199 ;; This function is called by:
 14200 ;;		_setDimmerLights_OnOff
 14201 ;; This function uses a non-reentrant model
 14202 ;;
 14203                           
 14204                           
 14205                           ;psect for function _setDimmerIntr_DimmingValue
 14206  1D91                     _setDimmerIntr_DimmingValue:	
 14207                           
 14208                           ;incstack = 0
 14209                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14210                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14211  1D91  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14212                           
 14213                           ;Dimmer_B1.c: 50: if (lights == 1) {
 14214  1D92  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14215  1D93  3A01               	xorlw	1
 14216  1D94  1D03               	skipz
 14217  1D95  2D9C               	goto	l7025
 14218                           
 14219                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 14220  1D96  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14221  1D97  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14222  1D98  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14223  1D99  0021               	movlb	1	; select bank1
 14224  1D9A  00E1               	movwf	(_DimmerIntr1^(0+128)+4)
 14225                           
 14226                           ;Dimmer_B1.c: 52: }
 14227  1D9B  0008               	return
 14228  1D9C                     l7025:	
 14229                           
 14230                           ;Dimmer_B1.c: 55: else if (lights == 2) {
 14231  1D9C  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14232  1D9D  3A02               	xorlw	2
 14233  1D9E  1D03               	skipz
 14234  1D9F  0008               	return
 14235                           
 14236                           ;Dimmer_B1.c: 56: DimmerIntr2.DimmingValue = value;
 14237  1DA0  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14238  1DA1  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14239  1DA2  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14240  1DA3  0021               	movlb	1	; select bank1
 14241  1DA4  00E8               	movwf	(_DimmerIntr2^(0+128)+4)
 14242  1DA5  0008               	return
 14243  1DA6                     __end_of_setDimmerIntr_DimmingValue:	
 14244                           
 14245                           	psect	text93
 14246  1129                     __ptext93:	
 14247 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14248 ;; Defined at:
 14249 ;;		line 30 in file "../src/Dimmer_B1.c"
 14250 ;; Parameters:    Size  Location     Type
 14251 ;;  lights          1    wreg     unsigned char 
 14252 ;;  command         1    2[COMMON] unsigned char 
 14253 ;; Auto vars:     Size  Location     Type
 14254 ;;  lights          1    4[COMMON] unsigned char 
 14255 ;; Return value:  Size  Location     Type
 14256 ;;		None               void
 14257 ;; Registers used:
 14258 ;;		wreg, status,2, status,0
 14259 ;; Tracked objects:
 14260 ;;		On entry : 0/0
 14261 ;;		On exit  : 0/0
 14262 ;;		Unchanged: 0/0
 14263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14264 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14266 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14267 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14268 ;;Total ram usage:        3 bytes
 14269 ;; Hardware stack levels used:    1
 14270 ;; Hardware stack levels required when called:    3
 14271 ;; This function calls:
 14272 ;;		Nothing
 14273 ;; This function is called by:
 14274 ;;		_setDimmerLights_OnOff
 14275 ;; This function uses a non-reentrant model
 14276 ;;
 14277                           
 14278                           
 14279                           ;psect for function _setDimmerIntr_ControlStatus
 14280  1129                     _setDimmerIntr_ControlStatus:	
 14281                           
 14282                           ;incstack = 0
 14283                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14284                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14285  1129  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14286                           
 14287                           ;Dimmer_B1.c: 32: if (lights == 1) {
 14288  112A  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14289  112B  3A01               	xorlw	1
 14290  112C  1D03               	skipz
 14291  112D  293E               	goto	l7017
 14292                           
 14293                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14294  112E  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14295  112F  3A01               	xorlw	1
 14296  1130  3000               	movlw	0
 14297  1131  1903               	skipnz
 14298  1132  3001               	movlw	1
 14299  1133  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14300  1134  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14301  1135  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14302  1136  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14303  1137  0021               	movlb	1	; select bank1
 14304  1138  085D               	movf	_DimmerIntr1^(0+128),w
 14305  1139  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14306  113A  39F7               	andlw	-9
 14307  113B  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14308  113C  00DD               	movwf	_DimmerIntr1^(0+128)
 14309                           
 14310                           ;Dimmer_B1.c: 34: }
 14311  113D  0008               	return
 14312  113E                     l7017:	
 14313                           
 14314                           ;Dimmer_B1.c: 37: else if (lights == 2) {
 14315  113E  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14316  113F  3A02               	xorlw	2
 14317  1140  1D03               	skipz
 14318  1141  0008               	return
 14319                           
 14320                           ;Dimmer_B1.c: 38: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14321  1142  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14322  1143  3A01               	xorlw	1
 14323  1144  3000               	movlw	0
 14324  1145  1903               	skipnz
 14325  1146  3001               	movlw	1
 14326  1147  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14327  1148  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14328  1149  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14329  114A  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14330  114B  0021               	movlb	1	; select bank1
 14331  114C  0864               	movf	_DimmerIntr2^(0+128),w
 14332  114D  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14333  114E  39F7               	andlw	-9
 14334  114F  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14335  1150  00E4               	movwf	_DimmerIntr2^(0+128)
 14336  1151  0008               	return
 14337  1152                     __end_of_setDimmerIntr_ControlStatus:	
 14338                           
 14339                           	psect	text94
 14340  1D7C                     __ptext94:	
 14341 ;; *************** function _setCmd_Status *****************
 14342 ;; Defined at:
 14343 ;;		line 597 in file "../src/main_B1.c"
 14344 ;; Parameters:    Size  Location     Type
 14345 ;;  number          1    wreg     unsigned char 
 14346 ;;  cmd             1    2[COMMON] unsigned char 
 14347 ;; Auto vars:     Size  Location     Type
 14348 ;;  number          1    4[COMMON] unsigned char 
 14349 ;; Return value:  Size  Location     Type
 14350 ;;		None               void
 14351 ;; Registers used:
 14352 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14353 ;; Tracked objects:
 14354 ;;		On entry : 0/0
 14355 ;;		On exit  : 0/0
 14356 ;;		Unchanged: 0/0
 14357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14358 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14361 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14362 ;;Total ram usage:        3 bytes
 14363 ;; Hardware stack levels used:    1
 14364 ;; Hardware stack levels required when called:    3
 14365 ;; This function calls:
 14366 ;;		Nothing
 14367 ;; This function is called by:
 14368 ;;		_setDimmerLights_OnOff
 14369 ;;		_setControl_Lights_Table
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           
 14374                           ;psect for function _setCmd_Status
 14375  1D7C                     _setCmd_Status:	
 14376                           
 14377                           ;incstack = 0
 14378                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14379                           ;setCmd_Status@number stored from wreg
 14380  1D7C  00F4               	movwf	setCmd_Status@number
 14381                           
 14382                           ;main_B1.c: 598: switch (number) {
 14383  1D7D  2D8B               	goto	l9683
 14384  1D7E                     l9679:	
 14385                           ;main_B1.c: 599: case 1:
 14386                           
 14387                           
 14388                           ;main_B1.c: 600: Cmd.all_off = cmd == 1 ? 1 : 0;
 14389  1D7E  0872               	movf	setCmd_Status@cmd,w
 14390  1D7F  3A01               	xorlw	1
 14391  1D80  3000               	movlw	0
 14392  1D81  1903               	skipnz
 14393  1D82  3001               	movlw	1
 14394  1D83  00F3               	movwf	??_setCmd_Status
 14395  1D84  0021               	movlb	1	; select bank1
 14396  1D85  0840               	movf	_Cmd^(0+128),w
 14397  1D86  0673               	xorwf	??_setCmd_Status,w
 14398  1D87  39FE               	andlw	-2
 14399  1D88  0673               	xorwf	??_setCmd_Status,w
 14400  1D89  00C0               	movwf	_Cmd^(0+128)
 14401                           
 14402                           ;main_B1.c: 602: }
 14403                           
 14404                           ;main_B1.c: 601: break;
 14405  1D8A  0008               	return
 14406  1D8B                     l9683:	
 14407  1D8B  0874               	movf	setCmd_Status@number,w
 14408                           
 14409                           ; Switch size 1, requested type "space"
 14410                           ; Number of cases is 1, Range of values is 1 to 1
 14411                           ; switch strategies available:
 14412                           ; Name         Instructions Cycles
 14413                           ; simple_byte            4     3 (average)
 14414                           ; direct_byte           11     9 (fixed)
 14415                           ; jumptable            263     9 (fixed)
 14416                           ;	Chosen strategy is simple_byte
 14417  1D8C  3A01               	xorlw	1	; case 1
 14418  1D8D  1903               	skipnz
 14419  1D8E  2D7E               	goto	l9679
 14420  1D8F  2D90               	goto	l2892
 14421  1D90                     l2892:	
 14422  1D90  0008               	return
 14423  1D91                     __end_of_setCmd_Status:	
 14424                           
 14425                           	psect	text95
 14426  1C17                     __ptext95:	
 14427 ;; *************** function _getMain_All_LightsStatus *****************
 14428 ;; Defined at:
 14429 ;;		line 374 in file "../src/main_B1.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;		None
 14432 ;; Auto vars:     Size  Location     Type
 14433 ;;  status          1    2[COMMON] unsigned char 
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  1    wreg      unsigned char 
 14436 ;; Registers used:
 14437 ;;		wreg, status,2, status,0
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;Total ram usage:        1 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:    3
 14450 ;; This function calls:
 14451 ;;		Nothing
 14452 ;; This function is called by:
 14453 ;;		_DimmerLights_Main
 14454 ;;		_setDimmerLights_Main
 14455 ;;		_setDimmerLights_OnOff
 14456 ;;		_Flash_Memory_Main
 14457 ;;		_Load_Main
 14458 ;;		_setControl_Lights_Table
 14459 ;;		_Exception_Main
 14460 ;; This function uses a non-reentrant model
 14461 ;;
 14462                           
 14463                           
 14464                           ;psect for function _getMain_All_LightsStatus
 14465  1C17                     _getMain_All_LightsStatus:	
 14466                           
 14467                           ;main_B1.c: 375: char status = 0;
 14468                           
 14469                           ;incstack = 0
 14470                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 14471  1C17  01F2               	clrf	getMain_All_LightsStatus@status
 14472                           
 14473                           ;main_B1.c: 394: status = DimmerLights1.Status == 1 ? 1 : 0;
 14474  1C18  3000               	movlw	0
 14475  1C19  0023               	movlb	3	; select bank3
 14476  1C1A  183F               	btfsc	(_DimmerLights1^(0+384)+1),0
 14477  1C1B  3001               	movlw	1
 14478  1C1C  00F2               	movwf	getMain_All_LightsStatus@status
 14479                           
 14480                           ;main_B1.c: 395: if (status == 0) {
 14481  1C1D  08F2               	movf	getMain_All_LightsStatus@status,f
 14482  1C1E  1D03               	skipz
 14483  1C1F  2C24               	goto	l9673
 14484                           
 14485                           ;main_B1.c: 396: status = DimmerLights2.Status == 1 ? 1 : 0;
 14486  1C20  3000               	movlw	0
 14487  1C21  1848               	btfsc	(_DimmerLights2^(0+384)+1),0
 14488  1C22  3001               	movlw	1
 14489  1C23  00F2               	movwf	getMain_All_LightsStatus@status
 14490  1C24                     l9673:	
 14491                           
 14492                           ;main_B1.c: 397: }
 14493                           ;main_B1.c: 421: return status;
 14494  1C24  0872               	movf	getMain_All_LightsStatus@status,w
 14495  1C25  0008               	return
 14496  1C26                     __end_of_getMain_All_LightsStatus:	
 14497                           
 14498                           	psect	text96
 14499  093B                     __ptext96:	
 14500 ;; *************** function _getDimmerLights_PercentToValue *****************
 14501 ;; Defined at:
 14502 ;;		line 1025 in file "../src/Dimmer_B1.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;  value           1    wreg     unsigned char 
 14505 ;; Auto vars:     Size  Location     Type
 14506 ;;  value           1   54[BANK0 ] unsigned char 
 14507 ;;  i               3   55[BANK0 ] float 
 14508 ;; Return value:  Size  Location     Type
 14509 ;;                  1    wreg      unsigned char 
 14510 ;; Registers used:
 14511 ;;		wreg, status,2, status,0, pclath, cstack
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14521 ;;Total ram usage:        6 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; Hardware stack levels required when called:    5
 14524 ;; This function calls:
 14525 ;;		___awtoft
 14526 ;;		___ftadd
 14527 ;;		___ftdiv
 14528 ;;		___ftmul
 14529 ;;		___ftneg
 14530 ;;		___fttol
 14531 ;; This function is called by:
 14532 ;;		_setDimmerLights_OnOff
 14533 ;;		_setRFSW_AdjControl
 14534 ;; This function uses a non-reentrant model
 14535 ;;
 14536                           
 14537                           
 14538                           ;psect for function _getDimmerLights_PercentToValue
 14539  093B                     _getDimmerLights_PercentToValue:	
 14540                           
 14541                           ;incstack = 0
 14542                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14543                           ;getDimmerLights_PercentToValue@value stored from wreg
 14544  093B  0020               	movlb	0	; select bank0
 14545  093C  00D6               	movwf	getDimmerLights_PercentToValue@value
 14546                           
 14547                           ;Dimmer_B1.c: 1033: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 14548  093D  3000               	movlw	0
 14549  093E  00D7               	movwf	getDimmerLights_PercentToValue@i
 14550  093F  3010               	movlw	16
 14551  0940  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14552  0941  3042               	movlw	66
 14553  0942  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14554                           
 14555                           ;Dimmer_B1.c: 1034: i /= 100;
 14556  0943  3000               	movlw	0
 14557  0944  00A6               	movwf	___ftdiv@f2
 14558  0945  30C8               	movlw	200
 14559  0946  00A7               	movwf	___ftdiv@f2+1
 14560  0947  3042               	movlw	66
 14561  0948  00A8               	movwf	___ftdiv@f2+2
 14562  0949  0857               	movf	getDimmerLights_PercentToValue@i,w
 14563  094A  00A9               	movwf	___ftdiv@f1
 14564  094B  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14565  094C  00AA               	movwf	___ftdiv@f1+1
 14566  094D  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14567  094E  00AB               	movwf	___ftdiv@f1+2
 14568  094F  318D  2542  3189   	fcall	___ftdiv
 14569  0952  0020               	movlb	0	; select bank0
 14570  0953  0826               	movf	?___ftdiv,w
 14571  0954  00D7               	movwf	getDimmerLights_PercentToValue@i
 14572  0955  0827               	movf	?___ftdiv+1,w
 14573  0956  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14574  0957  0828               	movf	?___ftdiv+2,w
 14575  0958  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14576                           
 14577                           ;Dimmer_B1.c: 1036: return (char) (((char)(65*0.8)) - ((100 - value) * i));
 14578  0959  0856               	movf	getDimmerLights_PercentToValue@value,w
 14579  095A  00D4               	movwf	??_getDimmerLights_PercentToValue
 14580  095B  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 14581  095C  09D4               	comf	??_getDimmerLights_PercentToValue,f
 14582  095D  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 14583  095E  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 14584  095F  1903               	skipnz
 14585  0960  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 14586  0961  0854               	movf	??_getDimmerLights_PercentToValue,w
 14587  0962  3E64               	addlw	100
 14588  0963  00A0               	movwf	___awtoft@c
 14589  0964  3000               	movlw	0
 14590  0965  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14591  0966  00A1               	movwf	___awtoft@c+1
 14592  0967  319F  27DE  3189   	fcall	___awtoft
 14593  096A  0020               	movlb	0	; select bank0
 14594  096B  0820               	movf	?___awtoft,w
 14595  096C  00A9               	movwf	___ftmul@f2
 14596  096D  0821               	movf	?___awtoft+1,w
 14597  096E  00AA               	movwf	___ftmul@f2+1
 14598  096F  0822               	movf	?___awtoft+2,w
 14599  0970  00AB               	movwf	___ftmul@f2+2
 14600  0971  0857               	movf	getDimmerLights_PercentToValue@i,w
 14601  0972  00A6               	movwf	___ftmul@f1
 14602  0973  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14603  0974  00A7               	movwf	___ftmul@f1+1
 14604  0975  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14605  0976  00A8               	movwf	___ftmul@f1+2
 14606  0977  318F  274C  3189   	fcall	___ftmul
 14607  097A  0020               	movlb	0	; select bank0
 14608  097B  0826               	movf	?___ftmul,w
 14609  097C  00B6               	movwf	___ftneg@f1
 14610  097D  0827               	movf	?___ftmul+1,w
 14611  097E  00B7               	movwf	___ftneg@f1+1
 14612  097F  0828               	movf	?___ftmul+2,w
 14613  0980  00B8               	movwf	___ftneg@f1+2
 14614  0981  319B  2336  3189   	fcall	___ftneg
 14615  0984  0020               	movlb	0	; select bank0
 14616  0985  0836               	movf	?___ftneg,w
 14617  0986  00BC               	movwf	___ftadd@f2
 14618  0987  0837               	movf	?___ftneg+1,w
 14619  0988  00BD               	movwf	___ftadd@f2+1
 14620  0989  0838               	movf	?___ftneg+2,w
 14621  098A  00BE               	movwf	___ftadd@f2+2
 14622  098B  3000               	movlw	0
 14623  098C  00B9               	movwf	___ftadd@f1
 14624  098D  3050               	movlw	80
 14625  098E  00BA               	movwf	___ftadd@f1+1
 14626  098F  3042               	movlw	66
 14627  0990  00BB               	movwf	___ftadd@f1+2
 14628  0991  3183  235E  3189   	fcall	___ftadd
 14629  0994  0020               	movlb	0	; select bank0
 14630  0995  0839               	movf	?___ftadd,w
 14631  0996  00C6               	movwf	___fttol@f1
 14632  0997  083A               	movf	?___ftadd+1,w
 14633  0998  00C7               	movwf	___fttol@f1+1
 14634  0999  083B               	movf	?___ftadd+2,w
 14635  099A  00C8               	movwf	___fttol@f1+2
 14636  099B  318C  24BB         	fcall	___fttol
 14637  099D  0020               	movlb	0	; select bank0
 14638  099E  0846               	movf	?___fttol,w
 14639  099F  0008               	return
 14640  09A0                     __end_of_getDimmerLights_PercentToValue:	
 14641                           
 14642                           	psect	text97
 14643  0F4C                     __ptext97:	
 14644 ;; *************** function ___ftmul *****************
 14645 ;; Defined at:
 14646 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14647 ;; Parameters:    Size  Location     Type
 14648 ;;  f1              3    6[BANK0 ] float 
 14649 ;;  f2              3    9[BANK0 ] float 
 14650 ;; Auto vars:     Size  Location     Type
 14651 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 14652 ;;  sign            1   21[BANK0 ] unsigned char 
 14653 ;;  cntr            1   20[BANK0 ] unsigned char 
 14654 ;;  exp             1   16[BANK0 ] unsigned char 
 14655 ;; Return value:  Size  Location     Type
 14656 ;;                  3    6[BANK0 ] float 
 14657 ;; Registers used:
 14658 ;;		wreg, status,2, status,0, pclath, cstack
 14659 ;; Tracked objects:
 14660 ;;		On entry : 0/0
 14661 ;;		On exit  : 0/0
 14662 ;;		Unchanged: 0/0
 14663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14664 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;Total ram usage:       16 bytes
 14669 ;; Hardware stack levels used:    1
 14670 ;; Hardware stack levels required when called:    4
 14671 ;; This function calls:
 14672 ;;		___ftpack
 14673 ;; This function is called by:
 14674 ;;		_getDimmerLights_PercentToValue
 14675 ;; This function uses a non-reentrant model
 14676 ;;
 14677                           
 14678                           
 14679                           ;psect for function ___ftmul
 14680  0F4C                     ___ftmul:	
 14681                           
 14682                           ;incstack = 0
 14683                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14684  0F4C  0020               	movlb	0	; select bank0
 14685  0F4D  0826               	movf	___ftmul@f1,w
 14686  0F4E  00AC               	movwf	??___ftmul
 14687  0F4F  0827               	movf	___ftmul@f1+1,w
 14688  0F50  00AD               	movwf	??___ftmul+1
 14689  0F51  0828               	movf	___ftmul@f1+2,w
 14690  0F52  00AE               	movwf	??___ftmul+2
 14691  0F53  1003               	clrc
 14692  0F54  0D2D               	rlf	??___ftmul+1,w
 14693  0F55  0D2E               	rlf	??___ftmul+2,w
 14694  0F56  00AF               	movwf	??___ftmul+3
 14695  0F57  082F               	movf	??___ftmul+3,w
 14696  0F58  00B0               	movwf	___ftmul@exp
 14697  0F59  08B0               	movf	___ftmul@exp,f
 14698  0F5A  1D03               	skipz
 14699  0F5B  2F63               	goto	l9325
 14700  0F5C  3000               	movlw	0
 14701  0F5D  00A6               	movwf	?___ftmul
 14702  0F5E  3000               	movlw	0
 14703  0F5F  00A7               	movwf	?___ftmul+1
 14704  0F60  3000               	movlw	0
 14705  0F61  00A8               	movwf	?___ftmul+2
 14706  0F62  0008               	return
 14707  0F63                     l9325:	
 14708  0F63  0829               	movf	___ftmul@f2,w
 14709  0F64  00AC               	movwf	??___ftmul
 14710  0F65  082A               	movf	___ftmul@f2+1,w
 14711  0F66  00AD               	movwf	??___ftmul+1
 14712  0F67  082B               	movf	___ftmul@f2+2,w
 14713  0F68  00AE               	movwf	??___ftmul+2
 14714  0F69  1003               	clrc
 14715  0F6A  0D2D               	rlf	??___ftmul+1,w
 14716  0F6B  0D2E               	rlf	??___ftmul+2,w
 14717  0F6C  00AF               	movwf	??___ftmul+3
 14718  0F6D  082F               	movf	??___ftmul+3,w
 14719  0F6E  00B5               	movwf	___ftmul@sign
 14720  0F6F  08B5               	movf	___ftmul@sign,f
 14721  0F70  1D03               	skipz
 14722  0F71  2F79               	goto	l9331
 14723  0F72  3000               	movlw	0
 14724  0F73  00A6               	movwf	?___ftmul
 14725  0F74  3000               	movlw	0
 14726  0F75  00A7               	movwf	?___ftmul+1
 14727  0F76  3000               	movlw	0
 14728  0F77  00A8               	movwf	?___ftmul+2
 14729  0F78  0008               	return
 14730  0F79                     l9331:	
 14731  0F79  0835               	movf	___ftmul@sign,w
 14732  0F7A  3E7B               	addlw	123
 14733  0F7B  00AC               	movwf	??___ftmul
 14734  0F7C  082C               	movf	??___ftmul,w
 14735  0F7D  07B0               	addwf	___ftmul@exp,f
 14736  0F7E  0826               	movf	___ftmul@f1,w
 14737  0F7F  00AC               	movwf	??___ftmul
 14738  0F80  0827               	movf	___ftmul@f1+1,w
 14739  0F81  00AD               	movwf	??___ftmul+1
 14740  0F82  0828               	movf	___ftmul@f1+2,w
 14741  0F83  00AE               	movwf	??___ftmul+2
 14742  0F84  3010               	movlw	16
 14743  0F85                     u10705:	
 14744  0F85  36AE               	lsrf	??___ftmul+2,f
 14745  0F86  0CAD               	rrf	??___ftmul+1,f
 14746  0F87  0CAC               	rrf	??___ftmul,f
 14747  0F88  0B89               	decfsz	9,f
 14748  0F89  2F85               	goto	u10705
 14749  0F8A  082C               	movf	??___ftmul,w
 14750  0F8B  00AF               	movwf	??___ftmul+3
 14751  0F8C  082F               	movf	??___ftmul+3,w
 14752  0F8D  00B5               	movwf	___ftmul@sign
 14753  0F8E  0829               	movf	___ftmul@f2,w
 14754  0F8F  00AC               	movwf	??___ftmul
 14755  0F90  082A               	movf	___ftmul@f2+1,w
 14756  0F91  00AD               	movwf	??___ftmul+1
 14757  0F92  082B               	movf	___ftmul@f2+2,w
 14758  0F93  00AE               	movwf	??___ftmul+2
 14759  0F94  3010               	movlw	16
 14760  0F95                     u10715:	
 14761  0F95  36AE               	lsrf	??___ftmul+2,f
 14762  0F96  0CAD               	rrf	??___ftmul+1,f
 14763  0F97  0CAC               	rrf	??___ftmul,f
 14764  0F98  0B89               	decfsz	9,f
 14765  0F99  2F95               	goto	u10715
 14766  0F9A  082C               	movf	??___ftmul,w
 14767  0F9B  00AF               	movwf	??___ftmul+3
 14768  0F9C  082F               	movf	??___ftmul+3,w
 14769  0F9D  06B5               	xorwf	___ftmul@sign,f
 14770  0F9E  3080               	movlw	128
 14771  0F9F  00AC               	movwf	??___ftmul
 14772  0FA0  082C               	movf	??___ftmul,w
 14773  0FA1  05B5               	andwf	___ftmul@sign,f
 14774  0FA2  17A7               	bsf	___ftmul@f1+1,7
 14775  0FA3  17AA               	bsf	___ftmul@f2+1,7
 14776  0FA4  30FF               	movlw	255
 14777  0FA5  05A9               	andwf	___ftmul@f2,f
 14778  0FA6  30FF               	movlw	255
 14779  0FA7  05AA               	andwf	___ftmul@f2+1,f
 14780  0FA8  3000               	movlw	0
 14781  0FA9  05AB               	andwf	___ftmul@f2+2,f
 14782  0FAA  3000               	movlw	0
 14783  0FAB  00B1               	movwf	___ftmul@f3_as_product
 14784  0FAC  3000               	movlw	0
 14785  0FAD  00B2               	movwf	___ftmul@f3_as_product+1
 14786  0FAE  3000               	movlw	0
 14787  0FAF  00B3               	movwf	___ftmul@f3_as_product+2
 14788  0FB0  3007               	movlw	7
 14789  0FB1  00AC               	movwf	??___ftmul
 14790  0FB2  082C               	movf	??___ftmul,w
 14791  0FB3  00B4               	movwf	___ftmul@cntr
 14792  0FB4                     l9343:	
 14793  0FB4  1C26               	btfss	___ftmul@f1,0
 14794  0FB5  2FBC               	goto	l9347
 14795  0FB6  0829               	movf	___ftmul@f2,w
 14796  0FB7  07B1               	addwf	___ftmul@f3_as_product,f
 14797  0FB8  082A               	movf	___ftmul@f2+1,w
 14798  0FB9  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14799  0FBA  082B               	movf	___ftmul@f2+2,w
 14800  0FBB  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14801  0FBC                     l9347:	
 14802  0FBC  3001               	movlw	1
 14803  0FBD                     u10735:	
 14804  0FBD  36A8               	lsrf	___ftmul@f1+2,f
 14805  0FBE  0CA7               	rrf	___ftmul@f1+1,f
 14806  0FBF  0CA6               	rrf	___ftmul@f1,f
 14807  0FC0  0B89               	decfsz	9,f
 14808  0FC1  2FBD               	goto	u10735
 14809  0FC2  3001               	movlw	1
 14810  0FC3                     u10745:	
 14811  0FC3  35A9               	lslf	___ftmul@f2,f
 14812  0FC4  0DAA               	rlf	___ftmul@f2+1,f
 14813  0FC5  0DAB               	rlf	___ftmul@f2+2,f
 14814  0FC6  0B89               	decfsz	9,f
 14815  0FC7  2FC3               	goto	u10745
 14816  0FC8  3001               	movlw	1
 14817  0FC9  02B4               	subwf	___ftmul@cntr,f
 14818  0FCA  1D03               	btfss	3,2
 14819  0FCB  2FB4               	goto	l9343
 14820  0FCC  3009               	movlw	9
 14821  0FCD  00AC               	movwf	??___ftmul
 14822  0FCE  082C               	movf	??___ftmul,w
 14823  0FCF  00B4               	movwf	___ftmul@cntr
 14824  0FD0                     l9355:	
 14825  0FD0  1C26               	btfss	___ftmul@f1,0
 14826  0FD1  2FD8               	goto	l9359
 14827  0FD2  0829               	movf	___ftmul@f2,w
 14828  0FD3  07B1               	addwf	___ftmul@f3_as_product,f
 14829  0FD4  082A               	movf	___ftmul@f2+1,w
 14830  0FD5  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14831  0FD6  082B               	movf	___ftmul@f2+2,w
 14832  0FD7  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14833  0FD8                     l9359:	
 14834  0FD8  3001               	movlw	1
 14835  0FD9                     u10775:	
 14836  0FD9  36A8               	lsrf	___ftmul@f1+2,f
 14837  0FDA  0CA7               	rrf	___ftmul@f1+1,f
 14838  0FDB  0CA6               	rrf	___ftmul@f1,f
 14839  0FDC  0B89               	decfsz	9,f
 14840  0FDD  2FD9               	goto	u10775
 14841  0FDE  3001               	movlw	1
 14842  0FDF                     u10785:	
 14843  0FDF  36B3               	lsrf	___ftmul@f3_as_product+2,f
 14844  0FE0  0CB2               	rrf	___ftmul@f3_as_product+1,f
 14845  0FE1  0CB1               	rrf	___ftmul@f3_as_product,f
 14846  0FE2  0B89               	decfsz	9,f
 14847  0FE3  2FDF               	goto	u10785
 14848  0FE4  3001               	movlw	1
 14849  0FE5  02B4               	subwf	___ftmul@cntr,f
 14850  0FE6  1D03               	btfss	3,2
 14851  0FE7  2FD0               	goto	l9355
 14852  0FE8  0831               	movf	___ftmul@f3_as_product,w
 14853  0FE9  00F2               	movwf	___ftpack@arg
 14854  0FEA  0832               	movf	___ftmul@f3_as_product+1,w
 14855  0FEB  00F3               	movwf	___ftpack@arg+1
 14856  0FEC  0833               	movf	___ftmul@f3_as_product+2,w
 14857  0FED  00F4               	movwf	___ftpack@arg+2
 14858  0FEE  0830               	movf	___ftmul@exp,w
 14859  0FEF  00AC               	movwf	??___ftmul
 14860  0FF0  082C               	movf	??___ftmul,w
 14861  0FF1  00F5               	movwf	___ftpack@exp
 14862  0FF2  0835               	movf	___ftmul@sign,w
 14863  0FF3  00AD               	movwf	??___ftmul+1
 14864  0FF4  082D               	movf	??___ftmul+1,w
 14865  0FF5  00F6               	movwf	___ftpack@sign
 14866  0FF6  3188  2015         	fcall	___ftpack
 14867  0FF8  0872               	movf	?___ftpack,w
 14868  0FF9  0020               	movlb	0	; select bank0
 14869  0FFA  00A6               	movwf	?___ftmul
 14870  0FFB  0873               	movf	?___ftpack+1,w
 14871  0FFC  00A7               	movwf	?___ftmul+1
 14872  0FFD  0874               	movf	?___ftpack+2,w
 14873  0FFE  00A8               	movwf	?___ftmul+2
 14874  0FFF  0008               	return
 14875  1000                     __end_of___ftmul:	
 14876                           
 14877                           	psect	text98
 14878  1C63                     __ptext98:	
 14879 ;; *************** function _getCmd_Status *****************
 14880 ;; Defined at:
 14881 ;;		line 605 in file "../src/main_B1.c"
 14882 ;; Parameters:    Size  Location     Type
 14883 ;;  number          1    wreg     unsigned char 
 14884 ;; Auto vars:     Size  Location     Type
 14885 ;;  number          1    2[COMMON] unsigned char 
 14886 ;;  cmd             1    3[COMMON] unsigned char 
 14887 ;; Return value:  Size  Location     Type
 14888 ;;                  1    wreg      unsigned char 
 14889 ;; Registers used:
 14890 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14891 ;; Tracked objects:
 14892 ;;		On entry : 0/0
 14893 ;;		On exit  : 0/0
 14894 ;;		Unchanged: 0/0
 14895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14897 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14899 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14900 ;;Total ram usage:        2 bytes
 14901 ;; Hardware stack levels used:    1
 14902 ;; Hardware stack levels required when called:    3
 14903 ;; This function calls:
 14904 ;;		Nothing
 14905 ;; This function is called by:
 14906 ;;		_setDimmerLights_OnOff
 14907 ;; This function uses a non-reentrant model
 14908 ;;
 14909                           
 14910                           
 14911                           ;psect for function _getCmd_Status
 14912  1C63                     _getCmd_Status:	
 14913                           
 14914                           ;incstack = 0
 14915                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14916                           ;getCmd_Status@number stored from wreg
 14917  1C63  00F2               	movwf	getCmd_Status@number
 14918                           
 14919                           ;main_B1.c: 606: char cmd = 0;
 14920  1C64  01F3               	clrf	getCmd_Status@cmd
 14921                           
 14922                           ;main_B1.c: 607: switch (number) {
 14923  1C65  2C6C               	goto	l7153
 14924  1C66                     l7149:	
 14925                           ;main_B1.c: 608: case 1:
 14926                           
 14927                           
 14928                           ;main_B1.c: 609: cmd = Cmd.all_off == 1 ? 1 : 0;
 14929  1C66  3000               	movlw	0
 14930  1C67  0021               	movlb	1	; select bank1
 14931  1C68  1840               	btfsc	_Cmd^(0+128),0
 14932  1C69  3001               	movlw	1
 14933  1C6A  00F3               	movwf	getCmd_Status@cmd
 14934                           
 14935                           ;main_B1.c: 611: }
 14936                           
 14937                           ;main_B1.c: 610: break;
 14938  1C6B  2C71               	goto	l7155
 14939  1C6C                     l7153:	
 14940  1C6C  0872               	movf	getCmd_Status@number,w
 14941                           
 14942                           ; Switch size 1, requested type "space"
 14943                           ; Number of cases is 1, Range of values is 1 to 1
 14944                           ; switch strategies available:
 14945                           ; Name         Instructions Cycles
 14946                           ; simple_byte            4     3 (average)
 14947                           ; direct_byte           11     9 (fixed)
 14948                           ; jumptable            263     9 (fixed)
 14949                           ;	Chosen strategy is simple_byte
 14950  1C6D  3A01               	xorlw	1	; case 1
 14951  1C6E  1903               	skipnz
 14952  1C6F  2C66               	goto	l7149
 14953  1C70  2C71               	goto	l7155
 14954  1C71                     l7155:	
 14955                           
 14956                           ;main_B1.c: 612: return cmd;
 14957  1C71  0873               	movf	getCmd_Status@cmd,w
 14958  1C72  0008               	return
 14959  1C73                     __end_of_getCmd_Status:	
 14960                           
 14961                           	psect	text99
 14962  14F1                     __ptext99:	
 14963 ;; *************** function _setDimmerLights_Dimming *****************
 14964 ;; Defined at:
 14965 ;;		line 863 in file "../src/Dimmer_B1.c"
 14966 ;; Parameters:    Size  Location     Type
 14967 ;;  lights          1    wreg     unsigned char 
 14968 ;;  status          1   67[BANK0 ] unsigned char 
 14969 ;; Auto vars:     Size  Location     Type
 14970 ;;  lights          1   69[BANK0 ] unsigned char 
 14971 ;; Return value:  Size  Location     Type
 14972 ;;		None               void
 14973 ;; Registers used:
 14974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14975 ;; Tracked objects:
 14976 ;;		On entry : 0/0
 14977 ;;		On exit  : 0/0
 14978 ;;		Unchanged: 0/0
 14979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14980 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14983 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;Total ram usage:        3 bytes
 14985 ;; Hardware stack levels used:    1
 14986 ;; Hardware stack levels required when called:    6
 14987 ;; This function calls:
 14988 ;;		_getDimmerIntr_DimmingValue
 14989 ;;		_getDimmerLights_ValueToPercent
 14990 ;;		_setBuz
 14991 ;;		_setDimmerIntr_Dimming_Sw
 14992 ;;		_setDimmerIntr_MaxmumValue
 14993 ;;		_setDimmerLights_Line
 14994 ;;		_setProductData
 14995 ;;		_setRF_DimmerLights
 14996 ;;		_setRF_TransceiveGO
 14997 ;;		_setTxData
 14998 ;; This function is called by:
 14999 ;;		_setDimmerLights_Main
 15000 ;; This function uses a non-reentrant model
 15001 ;;
 15002                           
 15003                           
 15004                           ;psect for function _setDimmerLights_Dimming
 15005  14F1                     _setDimmerLights_Dimming:	
 15006                           
 15007                           ;incstack = 0
 15008                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15009                           ;setDimmerLights_Dimming@lights stored from wreg
 15010  14F1  0020               	movlb	0	; select bank0
 15011  14F2  00E5               	movwf	setDimmerLights_Dimming@lights
 15012                           
 15013                           ;Dimmer_B1.c: 864: if (status == 1) {
 15014  14F3  0863               	movf	setDimmerLights_Dimming@status,w
 15015  14F4  3A01               	xorlw	1
 15016  14F5  1D03               	skipz
 15017  14F6  2D0A               	goto	l10133
 15018                           
 15019                           ;Dimmer_B1.c: 865: setDimmerIntr_Dimming_Sw(lights, 1);
 15020  14F7  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15021  14F8  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 15022  14F9  0865               	movf	setDimmerLights_Dimming@lights,w
 15023  14FA  3190  20B8  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15024                           
 15025                           ;Dimmer_B1.c: 868: setRF_TransceiveGO(0);
 15026  14FD  3000               	movlw	0
 15027  14FE  319C  2453  3194   	fcall	_setRF_TransceiveGO
 15028                           
 15029                           ;Dimmer_B1.c: 870: setBuz(1, 100);
 15030  1501  3064               	movlw	100
 15031  1502  0020               	movlb	0	; select bank0
 15032  1503  00A4               	movwf	setBuz@time
 15033  1504  3000               	movlw	0
 15034  1505  00A5               	movwf	setBuz@time+1
 15035  1506  3001               	movlw	1
 15036  1507  3195  25E6         	fcall	_setBuz
 15037                           
 15038                           ;Dimmer_B1.c: 871: } else if (status == 0) {
 15039  1509  0008               	return
 15040  150A                     l10133:	
 15041  150A  0020               	movlb	0	; select bank0
 15042  150B  08E3               	movf	setDimmerLights_Dimming@status,f
 15043  150C  1D03               	skipz
 15044  150D  0008               	return
 15045                           
 15046                           ;Dimmer_B1.c: 872: setDimmerIntr_Dimming_Sw(lights, 0);
 15047  150E  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15048  150F  0865               	movf	setDimmerLights_Dimming@lights,w
 15049  1510  3190  20B8  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15050                           
 15051                           ;Dimmer_B1.c: 875: Dimmer.Load_Status = 0;
 15052  1513  0022               	movlb	2	; select bank2
 15053  1514  112E               	bcf	_Dimmer^(0+256),2	;volatile
 15054                           
 15055                           ;Dimmer_B1.c: 876: setDimmerLights_Line(lights);
 15056  1515  0020               	movlb	0	; select bank0
 15057  1516  0865               	movf	setDimmerLights_Dimming@lights,w
 15058  1517  319D  2506  3194   	fcall	_setDimmerLights_Line
 15059                           
 15060                           ;Dimmer_B1.c: 879: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15061  151A  0020               	movlb	0	; select bank0
 15062  151B  0865               	movf	setDimmerLights_Dimming@lights,w
 15063  151C  319D  252A  3194   	fcall	_getDimmerIntr_DimmingValue
 15064  151F  0020               	movlb	0	; select bank0
 15065  1520  00E4               	movwf	??_setDimmerLights_Dimming
 15066  1521  0864               	movf	??_setDimmerLights_Dimming,w
 15067  1522  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15068  1523  0865               	movf	setDimmerLights_Dimming@lights,w
 15069  1524  319D  25FB  3194   	fcall	_setDimmerIntr_MaxmumValue
 15070                           
 15071                           ;Dimmer_B1.c: 880: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15072  1527  0020               	movlb	0	; select bank0
 15073  1528  0865               	movf	setDimmerLights_Dimming@lights,w
 15074  1529  319D  252A  3194   	fcall	_getDimmerIntr_DimmingValue
 15075  152C  3188  20D6  3194   	fcall	_getDimmerLights_ValueToPercent
 15076  152F  0020               	movlb	0	; select bank0
 15077  1530  00E4               	movwf	??_setDimmerLights_Dimming
 15078  1531  0864               	movf	??_setDimmerLights_Dimming,w
 15079  1532  00DA               	movwf	setProductData@value
 15080  1533  0865               	movf	setDimmerLights_Dimming@lights,w
 15081  1534  3E14               	addlw	20
 15082  1535  319B  23EB  3194   	fcall	_setProductData
 15083                           
 15084                           ;Dimmer_B1.c: 890: setRF_DimmerLights(lights, 1);
 15085  1538  0020               	movlb	0	; select bank0
 15086  1539  01DE               	clrf	setRF_DimmerLights@on
 15087  153A  0ADE               	incf	setRF_DimmerLights@on,f
 15088  153B  0865               	movf	setDimmerLights_Dimming@lights,w
 15089  153C  3197  2742  3194   	fcall	_setRF_DimmerLights
 15090                           
 15091                           ;Dimmer_B1.c: 891: setTxData();
 15092  153F  3186  26CC         	fcall	_setTxData
 15093  1541  0008               	return
 15094  1542                     __end_of_setDimmerLights_Dimming:	
 15095                           
 15096                           	psect	text100
 15097  06CC                     __ptext100:	
 15098 ;; *************** function _setTxData *****************
 15099 ;; Defined at:
 15100 ;;		line 183 in file "../src/RF_Control_B1.c"
 15101 ;; Parameters:    Size  Location     Type
 15102 ;;		None
 15103 ;; Auto vars:     Size  Location     Type
 15104 ;;  i               1    0        unsigned char 
 15105 ;; Return value:  Size  Location     Type
 15106 ;;		None               void
 15107 ;; Registers used:
 15108 ;;		wreg, fsr1l, fsr1h, status,2
 15109 ;; Tracked objects:
 15110 ;;		On entry : 0/0
 15111 ;;		On exit  : 0/0
 15112 ;;		Unchanged: 0/0
 15113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15116 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15117 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15118 ;;Total ram usage:        1 bytes
 15119 ;; Hardware stack levels used:    1
 15120 ;; Hardware stack levels required when called:    3
 15121 ;; This function calls:
 15122 ;;		Nothing
 15123 ;; This function is called by:
 15124 ;;		_setDimmerLights_OnOff
 15125 ;;		_setDimmerLights_Dimming
 15126 ;;		_getRxData
 15127 ;;		_setControl_Lights_Table
 15128 ;;		_setRFSW_Control
 15129 ;;		_setRFSW_AdjControl
 15130 ;; This function uses a non-reentrant model
 15131 ;;
 15132                           
 15133                           
 15134                           ;psect for function _setTxData
 15135  06CC                     _setTxData:	
 15136                           
 15137                           ;RF_Control_B1.c: 184: char i;
 15138                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15139                           
 15140                           ;incstack = 0
 15141                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15142  06CC  0021               	movlb	1	; select bank1
 15143  06CD  1C20               	btfss	_RF1^(0+128),0
 15144  06CE  0008               	return
 15145                           
 15146                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15147  06CF  1520               	bsf	_RF1^(0+128),2
 15148                           
 15149                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15150  06D0  01A2               	clrf	(_RF1^(0+128)+2)
 15151  06D1  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15152                           
 15153                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15154  06D2  3063               	movlw	99
 15155  06D3  00F2               	movwf	??_setTxData
 15156  06D4  0872               	movf	??_setTxData,w
 15157  06D5  0023               	movlb	3	; select bank3
 15158  06D6  00A0               	movwf	_RF_Data^(0+384)
 15159                           
 15160                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15161  06D7  3002               	movlw	2
 15162  06D8  00F2               	movwf	??_setTxData
 15163  06D9  0872               	movf	??_setTxData,w
 15164  06DA  00A1               	movwf	(_RF_Data^(0+384)+1)
 15165                           
 15166                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15167  06DB  0020               	movlb	0	; select bank0
 15168  06DC  086F               	movf	_product,w
 15169  06DD  0086               	movwf	6
 15170  06DE  3002               	movlw	2	; select bank4/5
 15171  06DF  0087               	movwf	7
 15172  06E0  3002               	movlw	2	; select bank4/5
 15173  06E1  3F42               	moviw [2]fsr1
 15174  06E2  0023               	movlb	3	; select bank3
 15175  06E3  00A2               	movwf	(_RF_Data^(0+384)+2)
 15176                           
 15177                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15178  06E4  0020               	movlb	0	; select bank0
 15179  06E5  086F               	movf	_product,w
 15180  06E6  0086               	movwf	6
 15181  06E7  3002               	movlw	2	; select bank4/5
 15182  06E8  0087               	movwf	7
 15183  06E9  3002               	movlw	2	; select bank4/5
 15184  06EA  3F43               	moviw [3]fsr1
 15185  06EB  0023               	movlb	3	; select bank3
 15186  06EC  00A3               	movwf	(_RF_Data^(0+384)+3)
 15187                           
 15188                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15189  06ED  0020               	movlb	0	; select bank0
 15190  06EE  086F               	movf	_product,w
 15191  06EF  0086               	movwf	6
 15192  06F0  3002               	movlw	2	; select bank4/5
 15193  06F1  0087               	movwf	7
 15194  06F2  3002               	movlw	2	; select bank4/5
 15195  06F3  3F44               	moviw [4]fsr1
 15196  06F4  0023               	movlb	3	; select bank3
 15197  06F5  00A4               	movwf	(_RF_Data^(0+384)+4)
 15198                           
 15199                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15200  06F6  0020               	movlb	0	; select bank0
 15201  06F7  086F               	movf	_product,w
 15202  06F8  0086               	movwf	6
 15203  06F9  3002               	movlw	2	; select bank4/5
 15204  06FA  0087               	movwf	7
 15205  06FB  3002               	movlw	2	; select bank4/5
 15206  06FC  3F45               	moviw [5]fsr1
 15207  06FD  0023               	movlb	3	; select bank3
 15208  06FE  00A5               	movwf	(_RF_Data^(0+384)+5)
 15209                           
 15210                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15211  06FF  0020               	movlb	0	; select bank0
 15212  0700  086F               	movf	_product,w
 15213  0701  0086               	movwf	6
 15214  0702  3002               	movlw	2	; select bank4/5
 15215  0703  0087               	movwf	7
 15216  0704  3002               	movlw	2	; select bank4/5
 15217  0705  3F46               	moviw [6]fsr1
 15218  0706  0023               	movlb	3	; select bank3
 15219  0707  00A6               	movwf	(_RF_Data^(0+384)+6)
 15220                           
 15221                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15222  0708  0020               	movlb	0	; select bank0
 15223  0709  086F               	movf	_product,w
 15224  070A  0086               	movwf	6
 15225  070B  3002               	movlw	2	; select bank4/5
 15226  070C  0087               	movwf	7
 15227  070D  3002               	movlw	2	; select bank4/5
 15228  070E  3F47               	moviw [7]fsr1
 15229  070F  0023               	movlb	3	; select bank3
 15230  0710  00A7               	movwf	(_RF_Data^(0+384)+7)
 15231                           
 15232                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15233  0711  0020               	movlb	0	; select bank0
 15234  0712  086F               	movf	_product,w
 15235  0713  0086               	movwf	6
 15236  0714  3002               	movlw	2	; select bank4/5
 15237  0715  0087               	movwf	7
 15238  0716  3002               	movlw	2	; select bank4/5
 15239  0717  3F48               	moviw [8]fsr1
 15240  0718  0023               	movlb	3	; select bank3
 15241  0719  00A8               	movwf	(_RF_Data^(0+384)+8)
 15242                           
 15243                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15244  071A  0020               	movlb	0	; select bank0
 15245  071B  086F               	movf	_product,w
 15246  071C  0086               	movwf	6
 15247  071D  3002               	movlw	2	; select bank4/5
 15248  071E  0087               	movwf	7
 15249  071F  3002               	movlw	2	; select bank4/5
 15250  0720  3F49               	moviw [9]fsr1
 15251  0721  0023               	movlb	3	; select bank3
 15252  0722  00A9               	movwf	(_RF_Data^(0+384)+9)
 15253                           
 15254                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15255  0723  0020               	movlb	0	; select bank0
 15256  0724  086F               	movf	_product,w
 15257  0725  0086               	movwf	6
 15258  0726  3002               	movlw	2	; select bank4/5
 15259  0727  0087               	movwf	7
 15260  0728  3002               	movlw	2	; select bank4/5
 15261  0729  3F4A               	moviw [10]fsr1
 15262  072A  0023               	movlb	3	; select bank3
 15263  072B  00AA               	movwf	(_RF_Data^(0+384)+10)
 15264                           
 15265                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15266  072C  0020               	movlb	0	; select bank0
 15267  072D  086F               	movf	_product,w
 15268  072E  0086               	movwf	6
 15269  072F  3002               	movlw	2	; select bank4/5
 15270  0730  0087               	movwf	7
 15271  0731  3002               	movlw	2	; select bank4/5
 15272  0732  3F4B               	moviw [11]fsr1
 15273  0733  0023               	movlb	3	; select bank3
 15274  0734  00AB               	movwf	(_RF_Data^(0+384)+11)
 15275                           
 15276                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15277  0735  0020               	movlb	0	; select bank0
 15278  0736  086F               	movf	_product,w
 15279  0737  0086               	movwf	6
 15280  0738  3002               	movlw	2	; select bank4/5
 15281  0739  0087               	movwf	7
 15282  073A  3002               	movlw	2	; select bank4/5
 15283  073B  3F4C               	moviw [12]fsr1
 15284  073C  0023               	movlb	3	; select bank3
 15285  073D  00AC               	movwf	(_RF_Data^(0+384)+12)
 15286                           
 15287                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15288  073E  0020               	movlb	0	; select bank0
 15289  073F  086F               	movf	_product,w
 15290  0740  0086               	movwf	6
 15291  0741  3002               	movlw	2	; select bank4/5
 15292  0742  0087               	movwf	7
 15293  0743  3002               	movlw	2	; select bank4/5
 15294  0744  3F4D               	moviw [13]fsr1
 15295  0745  0023               	movlb	3	; select bank3
 15296  0746  00AD               	movwf	(_RF_Data^(0+384)+13)
 15297                           
 15298                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15299  0747  0020               	movlb	0	; select bank0
 15300  0748  086F               	movf	_product,w
 15301  0749  0086               	movwf	6
 15302  074A  3002               	movlw	2	; select bank4/5
 15303  074B  0087               	movwf	7
 15304  074C  3002               	movlw	2	; select bank4/5
 15305  074D  3F4E               	moviw [14]fsr1
 15306  074E  0023               	movlb	3	; select bank3
 15307  074F  00AE               	movwf	(_RF_Data^(0+384)+14)
 15308                           
 15309                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15310  0750  0020               	movlb	0	; select bank0
 15311  0751  086F               	movf	_product,w
 15312  0752  0086               	movwf	6
 15313  0753  3002               	movlw	2	; select bank4/5
 15314  0754  0087               	movwf	7
 15315  0755  3002               	movlw	2	; select bank4/5
 15316  0756  3F4F               	moviw [15]fsr1
 15317  0757  0023               	movlb	3	; select bank3
 15318  0758  00AF               	movwf	(_RF_Data^(0+384)+15)
 15319                           
 15320                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15321  0759  0020               	movlb	0	; select bank0
 15322  075A  086F               	movf	_product,w
 15323  075B  0086               	movwf	6
 15324  075C  3002               	movlw	2	; select bank4/5
 15325  075D  0087               	movwf	7
 15326  075E  3002               	movlw	2	; select bank4/5
 15327  075F  3F50               	moviw [16]fsr1
 15328  0760  0023               	movlb	3	; select bank3
 15329  0761  00B0               	movwf	(_RF_Data^(0+384)+16)
 15330                           
 15331                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15332  0762  0020               	movlb	0	; select bank0
 15333  0763  086F               	movf	_product,w
 15334  0764  0086               	movwf	6
 15335  0765  3002               	movlw	2	; select bank4/5
 15336  0766  0087               	movwf	7
 15337  0767  3002               	movlw	2	; select bank4/5
 15338  0768  3F51               	moviw [17]fsr1
 15339  0769  0023               	movlb	3	; select bank3
 15340  076A  00B1               	movwf	(_RF_Data^(0+384)+17)
 15341                           
 15342                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15343  076B  0020               	movlb	0	; select bank0
 15344  076C  086F               	movf	_product,w
 15345  076D  0086               	movwf	6
 15346  076E  3002               	movlw	2	; select bank4/5
 15347  076F  0087               	movwf	7
 15348  0770  3002               	movlw	2	; select bank4/5
 15349  0771  3F52               	moviw [18]fsr1
 15350  0772  0023               	movlb	3	; select bank3
 15351  0773  00B2               	movwf	(_RF_Data^(0+384)+18)
 15352                           
 15353                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15354  0774  0020               	movlb	0	; select bank0
 15355  0775  086F               	movf	_product,w
 15356  0776  0086               	movwf	6
 15357  0777  3002               	movlw	2	; select bank4/5
 15358  0778  0087               	movwf	7
 15359  0779  3002               	movlw	2	; select bank4/5
 15360  077A  3F53               	moviw [19]fsr1
 15361  077B  0023               	movlb	3	; select bank3
 15362  077C  00B3               	movwf	(_RF_Data^(0+384)+19)
 15363                           
 15364                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15365  077D  30D2               	movlw	210
 15366  077E  00F2               	movwf	??_setTxData
 15367  077F  0872               	movf	??_setTxData,w
 15368  0780  00B4               	movwf	(_RF_Data^(0+384)+20)
 15369  0781  0008               	return
 15370  0782                     __end_of_setTxData:	
 15371                           
 15372                           	psect	text101
 15373  1C53                     __ptext101:	
 15374 ;; *************** function _setRF_TransceiveGO *****************
 15375 ;; Defined at:
 15376 ;;		line 466 in file "../src/RF_Control_B1.c"
 15377 ;; Parameters:    Size  Location     Type
 15378 ;;  command         1    wreg     unsigned char 
 15379 ;; Auto vars:     Size  Location     Type
 15380 ;;  command         1    3[COMMON] unsigned char 
 15381 ;; Return value:  Size  Location     Type
 15382 ;;		None               void
 15383 ;; Registers used:
 15384 ;;		wreg, status,2, status,0
 15385 ;; Tracked objects:
 15386 ;;		On entry : 0/0
 15387 ;;		On exit  : 0/0
 15388 ;;		Unchanged: 0/0
 15389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;Total ram usage:        2 bytes
 15395 ;; Hardware stack levels used:    1
 15396 ;; Hardware stack levels required when called:    3
 15397 ;; This function calls:
 15398 ;;		Nothing
 15399 ;; This function is called by:
 15400 ;;		_setDimmerLights_Dimming
 15401 ;; This function uses a non-reentrant model
 15402 ;;
 15403                           
 15404                           
 15405                           ;psect for function _setRF_TransceiveGO
 15406  1C53                     _setRF_TransceiveGO:	
 15407                           
 15408                           ;incstack = 0
 15409                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15410                           ;setRF_TransceiveGO@command stored from wreg
 15411  1C53  00F3               	movwf	setRF_TransceiveGO@command
 15412                           
 15413                           ;RF_Control_B1.c: 467: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15414  1C54  0873               	movf	setRF_TransceiveGO@command,w
 15415  1C55  3A01               	xorlw	1
 15416  1C56  3000               	movlw	0
 15417  1C57  1903               	skipnz
 15418  1C58  3001               	movlw	1
 15419  1C59  00F2               	movwf	??_setRF_TransceiveGO
 15420  1C5A  0DF2               	rlf	??_setRF_TransceiveGO,f
 15421  1C5B  0DF2               	rlf	??_setRF_TransceiveGO,f
 15422  1C5C  0021               	movlb	1	; select bank1
 15423  1C5D  0820               	movf	_RF1^(0+128),w
 15424  1C5E  0672               	xorwf	??_setRF_TransceiveGO,w
 15425  1C5F  39FB               	andlw	-5
 15426  1C60  0672               	xorwf	??_setRF_TransceiveGO,w
 15427  1C61  00A0               	movwf	_RF1^(0+128)
 15428  1C62  0008               	return
 15429  1C63                     __end_of_setRF_TransceiveGO:	
 15430                           
 15431                           	psect	text102
 15432  1742                     __ptext102:	
 15433 ;; *************** function _setRF_DimmerLights *****************
 15434 ;; Defined at:
 15435 ;;		line 450 in file "../src/RF_Control_B1.c"
 15436 ;; Parameters:    Size  Location     Type
 15437 ;;  lights          1    wreg     unsigned char 
 15438 ;;  on              1   62[BANK0 ] unsigned char 
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;  lights          1   66[BANK0 ] unsigned char 
 15441 ;;  status          1   65[BANK0 ] unsigned char 
 15442 ;; Return value:  Size  Location     Type
 15443 ;;		None               void
 15444 ;; Registers used:
 15445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15446 ;; Tracked objects:
 15447 ;;		On entry : 0/0
 15448 ;;		On exit  : 0/0
 15449 ;;		Unchanged: 0/0
 15450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15451 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15452 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;Total ram usage:        5 bytes
 15456 ;; Hardware stack levels used:    1
 15457 ;; Hardware stack levels required when called:    4
 15458 ;; This function calls:
 15459 ;;		_setProductData
 15460 ;; This function is called by:
 15461 ;;		_setDimmerLights_OnOff
 15462 ;;		_setDimmerLights_Dimming
 15463 ;;		_setRFSW_Control
 15464 ;; This function uses a non-reentrant model
 15465 ;;
 15466                           
 15467                           
 15468                           ;psect for function _setRF_DimmerLights
 15469  1742                     _setRF_DimmerLights:	
 15470                           
 15471                           ;incstack = 0
 15472                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15473                           ;setRF_DimmerLights@lights stored from wreg
 15474  1742  0020               	movlb	0	; select bank0
 15475  1743  00E2               	movwf	setRF_DimmerLights@lights
 15476                           
 15477                           ;RF_Control_B1.c: 451: char status = 1;
 15478  1744  01E1               	clrf	setRF_DimmerLights@status
 15479  1745  0AE1               	incf	setRF_DimmerLights@status,f
 15480                           
 15481                           ;RF_Control_B1.c: 452: status <<= (lights - 1);
 15482  1746  0862               	movf	setRF_DimmerLights@lights,w
 15483  1747  3EFF               	addlw	-1
 15484  1748  0A89               	incf	9,f
 15485  1749  2F4C               	goto	u11120
 15486  174A                     u11125:	
 15487  174A  1003               	clrc
 15488  174B  0DE1               	rlf	setRF_DimmerLights@status,f
 15489  174C                     u11120:	
 15490  174C  3EFF               	addlw	-1
 15491  174D  1D03               	skipz
 15492  174E  2F4A               	goto	u11125
 15493                           
 15494                           ;RF_Control_B1.c: 453: setProductData(11, lights);
 15495  174F  0862               	movf	setRF_DimmerLights@lights,w
 15496  1750  00DF               	movwf	??_setRF_DimmerLights
 15497  1751  085F               	movf	??_setRF_DimmerLights,w
 15498  1752  00DA               	movwf	setProductData@value
 15499  1753  300B               	movlw	11
 15500  1754  319B  23EB  3197   	fcall	_setProductData
 15501                           
 15502                           ;RF_Control_B1.c: 455: setProductData(17, product->Data[26 + lights]);
 15503  1757  0020               	movlb	0	; select bank0
 15504  1758  0862               	movf	setRF_DimmerLights@lights,w
 15505  1759  3E1A               	addlw	26
 15506  175A  076F               	addwf	_product,w
 15507  175B  00DF               	movwf	??_setRF_DimmerLights
 15508  175C  085F               	movf	??_setRF_DimmerLights,w
 15509  175D  0086               	movwf	6
 15510  175E  3002               	movlw	2	; select bank4/5
 15511  175F  0087               	movwf	7
 15512  1760  0801               	movf	1,w
 15513  1761  00E0               	movwf	??_setRF_DimmerLights+1
 15514  1762  0860               	movf	??_setRF_DimmerLights+1,w
 15515  1763  00DA               	movwf	setProductData@value
 15516  1764  3011               	movlw	17
 15517  1765  319B  23EB  3197   	fcall	_setProductData
 15518                           
 15519                           ;RF_Control_B1.c: 456: if (on == 1) {
 15520  1768  0020               	movlb	0	; select bank0
 15521  1769  085E               	movf	setRF_DimmerLights@on,w
 15522  176A  3A01               	xorlw	1
 15523  176B  1D03               	skipz
 15524  176C  2F8C               	goto	l9543
 15525                           
 15526                           ;RF_Control_B1.c: 457: setProductData(9, product->Data[20 + lights]);
 15527  176D  0862               	movf	setRF_DimmerLights@lights,w
 15528  176E  3E14               	addlw	20
 15529  176F  076F               	addwf	_product,w
 15530  1770  00DF               	movwf	??_setRF_DimmerLights
 15531  1771  085F               	movf	??_setRF_DimmerLights,w
 15532  1772  0086               	movwf	6
 15533  1773  3002               	movlw	2	; select bank4/5
 15534  1774  0087               	movwf	7
 15535  1775  0801               	movf	1,w
 15536  1776  00E0               	movwf	??_setRF_DimmerLights+1
 15537  1777  0860               	movf	??_setRF_DimmerLights+1,w
 15538  1778  00DA               	movwf	setProductData@value
 15539  1779  3009               	movlw	9
 15540  177A  319B  23EB  3197   	fcall	_setProductData
 15541                           
 15542                           ;RF_Control_B1.c: 458: setProductData(15, (product->Data[15] | status));
 15543  177D  0020               	movlb	0	; select bank0
 15544  177E  086F               	movf	_product,w
 15545  177F  3E0F               	addlw	15
 15546  1780  0086               	movwf	6
 15547  1781  3002               	movlw	2	; select bank4/5
 15548  1782  0087               	movwf	7
 15549  1783  0801               	movf	1,w
 15550  1784  0461               	iorwf	setRF_DimmerLights@status,w
 15551  1785  00DF               	movwf	??_setRF_DimmerLights
 15552  1786  085F               	movf	??_setRF_DimmerLights,w
 15553  1787  00DA               	movwf	setProductData@value
 15554  1788  300F               	movlw	15
 15555  1789  319B  23EB         	fcall	_setProductData
 15556                           
 15557                           ;RF_Control_B1.c: 459: } else {
 15558  178B  0008               	return
 15559  178C                     l9543:	
 15560                           
 15561                           ;RF_Control_B1.c: 460: setProductData(9, 0x00);
 15562  178C  0020               	movlb	0	; select bank0
 15563  178D  01DA               	clrf	setProductData@value
 15564  178E  3009               	movlw	9
 15565  178F  319B  23EB  3197   	fcall	_setProductData
 15566                           
 15567                           ;RF_Control_B1.c: 461: setProductData(15, (product->Data[15]&(~status)));
 15568  1792  0020               	movlb	0	; select bank0
 15569  1793  086F               	movf	_product,w
 15570  1794  3E0F               	addlw	15
 15571  1795  0086               	movwf	6
 15572  1796  3002               	movlw	2	; select bank4/5
 15573  1797  0087               	movwf	7
 15574  1798  0961               	comf	setRF_DimmerLights@status,w
 15575  1799  0501               	andwf	1,w
 15576  179A  00DF               	movwf	??_setRF_DimmerLights
 15577  179B  085F               	movf	??_setRF_DimmerLights,w
 15578  179C  00DA               	movwf	setProductData@value
 15579  179D  300F               	movlw	15
 15580  179E  319B  23EB         	fcall	_setProductData
 15581  17A0  0008               	return
 15582  17A1                     __end_of_setRF_DimmerLights:	
 15583                           
 15584                           	psect	text103
 15585  1D06                     __ptext103:	
 15586 ;; *************** function _setDimmerLights_Line *****************
 15587 ;; Defined at:
 15588 ;;		line 935 in file "../src/Dimmer_B1.c"
 15589 ;; Parameters:    Size  Location     Type
 15590 ;;  lights          1    wreg     unsigned char 
 15591 ;; Auto vars:     Size  Location     Type
 15592 ;;  lights          1    2[COMMON] unsigned char 
 15593 ;; Return value:  Size  Location     Type
 15594 ;;		None               void
 15595 ;; Registers used:
 15596 ;;		wreg
 15597 ;; Tracked objects:
 15598 ;;		On entry : 0/0
 15599 ;;		On exit  : 0/0
 15600 ;;		Unchanged: 0/0
 15601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15605 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15606 ;;Total ram usage:        1 bytes
 15607 ;; Hardware stack levels used:    1
 15608 ;; Hardware stack levels required when called:    3
 15609 ;; This function calls:
 15610 ;;		Nothing
 15611 ;; This function is called by:
 15612 ;;		_setDimmerLights_OnOff
 15613 ;;		_setDimmerLights_Dimming
 15614 ;; This function uses a non-reentrant model
 15615 ;;
 15616                           
 15617                           
 15618                           ;psect for function _setDimmerLights_Line
 15619  1D06                     _setDimmerLights_Line:	
 15620                           
 15621                           ;incstack = 0
 15622                           ; Regs used in _setDimmerLights_Line: [wreg]
 15623                           ;setDimmerLights_Line@lights stored from wreg
 15624  1D06  00F2               	movwf	setDimmerLights_Line@lights
 15625                           
 15626                           ;Dimmer_B1.c: 936: Dimmer.LoadGO = 1;
 15627  1D07  0022               	movlb	2	; select bank2
 15628  1D08  14AE               	bsf	_Dimmer^(0+256),1	;volatile
 15629                           
 15630                           ;Dimmer_B1.c: 938: DimmerLights1.Line = 0;
 15631  1D09  0023               	movlb	3	; select bank3
 15632  1D0A  10BF               	bcf	(_DimmerLights1^(0+384)+1),1
 15633                           
 15634                           ;Dimmer_B1.c: 941: DimmerLights2.Line = 0;
 15635  1D0B  10C8               	bcf	(_DimmerLights2^(0+384)+1),1
 15636                           
 15637                           ;Dimmer_B1.c: 947: if (lights == 1) {
 15638  1D0C  0872               	movf	setDimmerLights_Line@lights,w
 15639  1D0D  3A01               	xorlw	1
 15640  1D0E  1D03               	skipz
 15641  1D0F  2D12               	goto	l7135
 15642                           
 15643                           ;Dimmer_B1.c: 948: DimmerLights1.Line = 1;
 15644  1D10  14BF               	bsf	(_DimmerLights1^(0+384)+1),1
 15645                           
 15646                           ;Dimmer_B1.c: 949: }
 15647  1D11  0008               	return
 15648  1D12                     l7135:	
 15649                           
 15650                           ;Dimmer_B1.c: 952: else if (lights == 2) {
 15651  1D12  0872               	movf	setDimmerLights_Line@lights,w
 15652  1D13  3A02               	xorlw	2
 15653  1D14  1D03               	skipz
 15654  1D15  0008               	return
 15655                           
 15656                           ;Dimmer_B1.c: 953: DimmerLights2.Line = 1;
 15657  1D16  14C8               	bsf	(_DimmerLights2^(0+384)+1),1
 15658  1D17  0008               	return
 15659  1D18                     __end_of_setDimmerLights_Line:	
 15660                           
 15661                           	psect	text104
 15662  1DFB                     __ptext104:	
 15663 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15664 ;; Defined at:
 15665 ;;		line 86 in file "../src/Dimmer_B1.c"
 15666 ;; Parameters:    Size  Location     Type
 15667 ;;  lights          1    wreg     unsigned char 
 15668 ;;  value           1   58[BANK0 ] unsigned char 
 15669 ;; Auto vars:     Size  Location     Type
 15670 ;;  lights          1   60[BANK0 ] unsigned char 
 15671 ;; Return value:  Size  Location     Type
 15672 ;;		None               void
 15673 ;; Registers used:
 15674 ;;		wreg
 15675 ;; Tracked objects:
 15676 ;;		On entry : 0/0
 15677 ;;		On exit  : 0/0
 15678 ;;		Unchanged: 0/0
 15679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15680 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15683 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15684 ;;Total ram usage:        3 bytes
 15685 ;; Hardware stack levels used:    1
 15686 ;; Hardware stack levels required when called:    3
 15687 ;; This function calls:
 15688 ;;		Nothing
 15689 ;; This function is called by:
 15690 ;;		_setDimmerLights_OnOff
 15691 ;;		_setDimmerLights_Dimming
 15692 ;;		_setRFSW_AdjControl
 15693 ;; This function uses a non-reentrant model
 15694 ;;
 15695                           
 15696                           
 15697                           ;psect for function _setDimmerIntr_MaxmumValue
 15698  1DFB                     _setDimmerIntr_MaxmumValue:	
 15699                           
 15700                           ;incstack = 0
 15701                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15702                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15703  1DFB  0020               	movlb	0	; select bank0
 15704  1DFC  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 15705                           
 15706                           ;Dimmer_B1.c: 88: if (lights == 1) {
 15707  1DFD  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 15708  1DFE  3A01               	xorlw	1
 15709  1DFF  1D03               	skipz
 15710  1E00  2E07               	goto	l9511
 15711                           
 15712                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 15713  1E01  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 15714  1E02  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 15715  1E03  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 15716  1E04  0021               	movlb	1	; select bank1
 15717  1E05  00E2               	movwf	(_DimmerIntr1^(0+128)+5)
 15718                           
 15719                           ;Dimmer_B1.c: 90: }
 15720  1E06  0008               	return
 15721  1E07                     l9511:	
 15722                           
 15723                           ;Dimmer_B1.c: 93: else if (lights == 2) {
 15724  1E07  0020               	movlb	0	; select bank0
 15725  1E08  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 15726  1E09  3A02               	xorlw	2
 15727  1E0A  1D03               	skipz
 15728  1E0B  0008               	return
 15729                           
 15730                           ;Dimmer_B1.c: 94: DimmerIntr2.MaxmumValue = value;
 15731  1E0C  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 15732  1E0D  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 15733  1E0E  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 15734  1E0F  0021               	movlb	1	; select bank1
 15735  1E10  00E9               	movwf	(_DimmerIntr2^(0+128)+5)
 15736  1E11  0008               	return
 15737  1E12                     __end_of_setDimmerIntr_MaxmumValue:	
 15738                           
 15739                           	psect	text105
 15740  10B8                     __ptext105:	
 15741 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15742 ;; Defined at:
 15743 ;;		line 162 in file "../src/Dimmer_B1.c"
 15744 ;; Parameters:    Size  Location     Type
 15745 ;;  lights          1    wreg     unsigned char 
 15746 ;;  command         1    2[COMMON] unsigned char 
 15747 ;; Auto vars:     Size  Location     Type
 15748 ;;  lights          1    4[COMMON] unsigned char 
 15749 ;; Return value:  Size  Location     Type
 15750 ;;		None               void
 15751 ;; Registers used:
 15752 ;;		wreg, status,2, status,0
 15753 ;; Tracked objects:
 15754 ;;		On entry : 0/0
 15755 ;;		On exit  : 0/0
 15756 ;;		Unchanged: 0/0
 15757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15758 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;Total ram usage:        3 bytes
 15763 ;; Hardware stack levels used:    1
 15764 ;; Hardware stack levels required when called:    3
 15765 ;; This function calls:
 15766 ;;		Nothing
 15767 ;; This function is called by:
 15768 ;;		_setDimmerLights_Dimming
 15769 ;; This function uses a non-reentrant model
 15770 ;;
 15771                           
 15772                           
 15773                           ;psect for function _setDimmerIntr_Dimming_Sw
 15774  10B8                     _setDimmerIntr_Dimming_Sw:	
 15775                           
 15776                           ;incstack = 0
 15777                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15778                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15779  10B8  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 15780                           
 15781                           ;Dimmer_B1.c: 164: if (lights == 1) {
 15782  10B9  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15783  10BA  3A01               	xorlw	1
 15784  10BB  1D03               	skipz
 15785  10BC  28CB               	goto	l7045
 15786                           
 15787                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15788  10BD  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 15789  10BE  3A01               	xorlw	1
 15790  10BF  3000               	movlw	0
 15791  10C0  1903               	skipnz
 15792  10C1  3001               	movlw	1
 15793  10C2  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 15794  10C3  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15795  10C4  0021               	movlb	1	; select bank1
 15796  10C5  085D               	movf	_DimmerIntr1^(0+128),w
 15797  10C6  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15798  10C7  39EF               	andlw	-17
 15799  10C8  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15800  10C9  00DD               	movwf	_DimmerIntr1^(0+128)
 15801                           
 15802                           ;Dimmer_B1.c: 166: }
 15803  10CA  0008               	return
 15804  10CB                     l7045:	
 15805                           
 15806                           ;Dimmer_B1.c: 169: else if (lights == 2) {
 15807  10CB  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15808  10CC  3A02               	xorlw	2
 15809  10CD  1D03               	skipz
 15810  10CE  0008               	return
 15811                           
 15812                           ;Dimmer_B1.c: 170: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 15813  10CF  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 15814  10D0  3A01               	xorlw	1
 15815  10D1  3000               	movlw	0
 15816  10D2  1903               	skipnz
 15817  10D3  3001               	movlw	1
 15818  10D4  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 15819  10D5  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15820  10D6  0021               	movlb	1	; select bank1
 15821  10D7  0864               	movf	_DimmerIntr2^(0+128),w
 15822  10D8  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15823  10D9  39EF               	andlw	-17
 15824  10DA  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15825  10DB  00E4               	movwf	_DimmerIntr2^(0+128)
 15826  10DC  0008               	return
 15827  10DD                     __end_of_setDimmerIntr_Dimming_Sw:	
 15828                           
 15829                           	psect	text106
 15830  08D6                     __ptext106:	
 15831 ;; *************** function _getDimmerLights_ValueToPercent *****************
 15832 ;; Defined at:
 15833 ;;		line 1041 in file "../src/Dimmer_B1.c"
 15834 ;; Parameters:    Size  Location     Type
 15835 ;;  value           1    wreg     unsigned char 
 15836 ;; Auto vars:     Size  Location     Type
 15837 ;;  value           1   54[BANK0 ] unsigned char 
 15838 ;;  i               3   55[BANK0 ] float 
 15839 ;; Return value:  Size  Location     Type
 15840 ;;                  1    wreg      unsigned char 
 15841 ;; Registers used:
 15842 ;;		wreg, status,2, status,0, pclath, cstack
 15843 ;; Tracked objects:
 15844 ;;		On entry : 0/0
 15845 ;;		On exit  : 0/0
 15846 ;;		Unchanged: 0/0
 15847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15849 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15851 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15852 ;;Total ram usage:        6 bytes
 15853 ;; Hardware stack levels used:    1
 15854 ;; Hardware stack levels required when called:    5
 15855 ;; This function calls:
 15856 ;;		___awtoft
 15857 ;;		___ftadd
 15858 ;;		___ftdiv
 15859 ;;		___ftneg
 15860 ;;		___fttol
 15861 ;; This function is called by:
 15862 ;;		_setDimmerLights_OnOff
 15863 ;;		_setDimmerLights_Dimming
 15864 ;;		_Flash_Memory_Initialization
 15865 ;; This function uses a non-reentrant model
 15866 ;;
 15867                           
 15868                           
 15869                           ;psect for function _getDimmerLights_ValueToPercent
 15870  08D6                     _getDimmerLights_ValueToPercent:	
 15871                           
 15872                           ;incstack = 0
 15873                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 15874                           ;getDimmerLights_ValueToPercent@value stored from wreg
 15875  08D6  0020               	movlb	0	; select bank0
 15876  08D7  00D6               	movwf	getDimmerLights_ValueToPercent@value
 15877                           
 15878                           ;Dimmer_B1.c: 1049: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 15879  08D8  3000               	movlw	0
 15880  08D9  00D7               	movwf	getDimmerLights_ValueToPercent@i
 15881  08DA  3010               	movlw	16
 15882  08DB  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 15883  08DC  3042               	movlw	66
 15884  08DD  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 15885                           
 15886                           ;Dimmer_B1.c: 1050: i /= 100;
 15887  08DE  3000               	movlw	0
 15888  08DF  00A6               	movwf	___ftdiv@f2
 15889  08E0  30C8               	movlw	200
 15890  08E1  00A7               	movwf	___ftdiv@f2+1
 15891  08E2  3042               	movlw	66
 15892  08E3  00A8               	movwf	___ftdiv@f2+2
 15893  08E4  0857               	movf	getDimmerLights_ValueToPercent@i,w
 15894  08E5  00A9               	movwf	___ftdiv@f1
 15895  08E6  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 15896  08E7  00AA               	movwf	___ftdiv@f1+1
 15897  08E8  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 15898  08E9  00AB               	movwf	___ftdiv@f1+2
 15899  08EA  318D  2542  3188   	fcall	___ftdiv
 15900  08ED  0020               	movlb	0	; select bank0
 15901  08EE  0826               	movf	?___ftdiv,w
 15902  08EF  00D7               	movwf	getDimmerLights_ValueToPercent@i
 15903  08F0  0827               	movf	?___ftdiv+1,w
 15904  08F1  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 15905  08F2  0828               	movf	?___ftdiv+2,w
 15906  08F3  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 15907                           
 15908                           ;Dimmer_B1.c: 1052: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 15909  08F4  0856               	movf	getDimmerLights_ValueToPercent@value,w
 15910  08F5  00D4               	movwf	??_getDimmerLights_ValueToPercent
 15911  08F6  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 15912  08F7  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 15913  08F8  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 15914  08F9  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 15915  08FA  1903               	skipnz
 15916  08FB  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 15917  08FC  0854               	movf	??_getDimmerLights_ValueToPercent,w
 15918  08FD  3E34               	addlw	52
 15919  08FE  00A0               	movwf	___awtoft@c
 15920  08FF  3000               	movlw	0
 15921  0900  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 15922  0901  00A1               	movwf	___awtoft@c+1
 15923  0902  319F  27DE  3188   	fcall	___awtoft
 15924  0905  0020               	movlb	0	; select bank0
 15925  0906  0820               	movf	?___awtoft,w
 15926  0907  00A9               	movwf	___ftdiv@f1
 15927  0908  0821               	movf	?___awtoft+1,w
 15928  0909  00AA               	movwf	___ftdiv@f1+1
 15929  090A  0822               	movf	?___awtoft+2,w
 15930  090B  00AB               	movwf	___ftdiv@f1+2
 15931  090C  0857               	movf	getDimmerLights_ValueToPercent@i,w
 15932  090D  00A6               	movwf	___ftdiv@f2
 15933  090E  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 15934  090F  00A7               	movwf	___ftdiv@f2+1
 15935  0910  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 15936  0911  00A8               	movwf	___ftdiv@f2+2
 15937  0912  318D  2542  3188   	fcall	___ftdiv
 15938  0915  0020               	movlb	0	; select bank0
 15939  0916  0826               	movf	?___ftdiv,w
 15940  0917  00B6               	movwf	___ftneg@f1
 15941  0918  0827               	movf	?___ftdiv+1,w
 15942  0919  00B7               	movwf	___ftneg@f1+1
 15943  091A  0828               	movf	?___ftdiv+2,w
 15944  091B  00B8               	movwf	___ftneg@f1+2
 15945  091C  319B  2336  3188   	fcall	___ftneg
 15946  091F  0020               	movlb	0	; select bank0
 15947  0920  0836               	movf	?___ftneg,w
 15948  0921  00BC               	movwf	___ftadd@f2
 15949  0922  0837               	movf	?___ftneg+1,w
 15950  0923  00BD               	movwf	___ftadd@f2+1
 15951  0924  0838               	movf	?___ftneg+2,w
 15952  0925  00BE               	movwf	___ftadd@f2+2
 15953  0926  3000               	movlw	0
 15954  0927  00B9               	movwf	___ftadd@f1
 15955  0928  30C8               	movlw	200
 15956  0929  00BA               	movwf	___ftadd@f1+1
 15957  092A  3042               	movlw	66
 15958  092B  00BB               	movwf	___ftadd@f1+2
 15959  092C  3183  235E  3188   	fcall	___ftadd
 15960  092F  0020               	movlb	0	; select bank0
 15961  0930  0839               	movf	?___ftadd,w
 15962  0931  00C6               	movwf	___fttol@f1
 15963  0932  083A               	movf	?___ftadd+1,w
 15964  0933  00C7               	movwf	___fttol@f1+1
 15965  0934  083B               	movf	?___ftadd+2,w
 15966  0935  00C8               	movwf	___fttol@f1+2
 15967  0936  318C  24BB         	fcall	___fttol
 15968  0938  0020               	movlb	0	; select bank0
 15969  0939  0846               	movf	?___fttol,w
 15970  093A  0008               	return
 15971  093B                     __end_of_getDimmerLights_ValueToPercent:	
 15972                           
 15973                           	psect	text107
 15974  0CBB                     __ptext107:	
 15975 ;; *************** function ___fttol *****************
 15976 ;; Defined at:
 15977 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15978 ;; Parameters:    Size  Location     Type
 15979 ;;  f1              3   38[BANK0 ] float 
 15980 ;; Auto vars:     Size  Location     Type
 15981 ;;  lval            4   47[BANK0 ] unsigned long 
 15982 ;;  exp1            1   51[BANK0 ] unsigned char 
 15983 ;;  sign1           1   46[BANK0 ] unsigned char 
 15984 ;; Return value:  Size  Location     Type
 15985 ;;                  4   38[BANK0 ] long 
 15986 ;; Registers used:
 15987 ;;		wreg, status,2, status,0
 15988 ;; Tracked objects:
 15989 ;;		On entry : 0/0
 15990 ;;		On exit  : 0/0
 15991 ;;		Unchanged: 0/0
 15992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15993 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15994 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15995 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15996 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15997 ;;Total ram usage:       14 bytes
 15998 ;; Hardware stack levels used:    1
 15999 ;; Hardware stack levels required when called:    3
 16000 ;; This function calls:
 16001 ;;		Nothing
 16002 ;; This function is called by:
 16003 ;;		_getDimmerLights_PercentToValue
 16004 ;;		_getDimmerLights_ValueToPercent
 16005 ;; This function uses a non-reentrant model
 16006 ;;
 16007                           
 16008                           
 16009                           ;psect for function ___fttol
 16010  0CBB                     ___fttol:	
 16011                           
 16012                           ;incstack = 0
 16013                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16014  0CBB  0020               	movlb	0	; select bank0
 16015  0CBC  0846               	movf	___fttol@f1,w
 16016  0CBD  00CA               	movwf	??___fttol
 16017  0CBE  0847               	movf	___fttol@f1+1,w
 16018  0CBF  00CB               	movwf	??___fttol+1
 16019  0CC0  0848               	movf	___fttol@f1+2,w
 16020  0CC1  00CC               	movwf	??___fttol+2
 16021  0CC2  1003               	clrc
 16022  0CC3  0D4B               	rlf	??___fttol+1,w
 16023  0CC4  0D4C               	rlf	??___fttol+2,w
 16024  0CC5  00CD               	movwf	??___fttol+3
 16025  0CC6  084D               	movf	??___fttol+3,w
 16026  0CC7  00D3               	movwf	___fttol@exp1
 16027  0CC8  08D3               	movf	___fttol@exp1,f
 16028  0CC9  1D03               	skipz
 16029  0CCA  2CD4               	goto	l9383
 16030  0CCB  3000               	movlw	0
 16031  0CCC  00C9               	movwf	?___fttol+3
 16032  0CCD  3000               	movlw	0
 16033  0CCE  00C8               	movwf	?___fttol+2
 16034  0CCF  3000               	movlw	0
 16035  0CD0  00C7               	movwf	?___fttol+1
 16036  0CD1  3000               	movlw	0
 16037  0CD2  00C6               	movwf	?___fttol
 16038  0CD3  0008               	return
 16039  0CD4                     l9383:	
 16040  0CD4  0846               	movf	___fttol@f1,w
 16041  0CD5  00CA               	movwf	??___fttol
 16042  0CD6  0847               	movf	___fttol@f1+1,w
 16043  0CD7  00CB               	movwf	??___fttol+1
 16044  0CD8  0848               	movf	___fttol@f1+2,w
 16045  0CD9  00CC               	movwf	??___fttol+2
 16046  0CDA  3017               	movlw	23
 16047  0CDB                     u10825:	
 16048  0CDB  36CC               	lsrf	??___fttol+2,f
 16049  0CDC  0CCB               	rrf	??___fttol+1,f
 16050  0CDD  0CCA               	rrf	??___fttol,f
 16051  0CDE  0B89               	decfsz	9,f
 16052  0CDF  2CDB               	goto	u10825
 16053  0CE0  084A               	movf	??___fttol,w
 16054  0CE1  00CD               	movwf	??___fttol+3
 16055  0CE2  084D               	movf	??___fttol+3,w
 16056  0CE3  00CE               	movwf	___fttol@sign1
 16057  0CE4  17C7               	bsf	___fttol@f1+1,7
 16058  0CE5  30FF               	movlw	255
 16059  0CE6  05C6               	andwf	___fttol@f1,f
 16060  0CE7  30FF               	movlw	255
 16061  0CE8  05C7               	andwf	___fttol@f1+1,f
 16062  0CE9  3000               	movlw	0
 16063  0CEA  05C8               	andwf	___fttol@f1+2,f
 16064  0CEB  0846               	movf	___fttol@f1,w
 16065  0CEC  00CF               	movwf	___fttol@lval
 16066  0CED  0847               	movf	___fttol@f1+1,w
 16067  0CEE  00D0               	movwf	___fttol@lval+1
 16068  0CEF  0848               	movf	___fttol@f1+2,w
 16069  0CF0  00D1               	movwf	___fttol@lval+2
 16070  0CF1  01D2               	clrf	___fttol@lval+3
 16071  0CF2  308E               	movlw	142
 16072  0CF3  02D3               	subwf	___fttol@exp1,f
 16073  0CF4  1FD3               	btfss	___fttol@exp1,7
 16074  0CF5  2D12               	goto	l9403
 16075  0CF6  0853               	movf	___fttol@exp1,w
 16076  0CF7  3A80               	xorlw	128
 16077  0CF8  3E8F               	addlw	143
 16078  0CF9  1803               	skipnc
 16079  0CFA  2D04               	goto	l9401
 16080  0CFB  3000               	movlw	0
 16081  0CFC  00C9               	movwf	?___fttol+3
 16082  0CFD  3000               	movlw	0
 16083  0CFE  00C8               	movwf	?___fttol+2
 16084  0CFF  3000               	movlw	0
 16085  0D00  00C7               	movwf	?___fttol+1
 16086  0D01  3000               	movlw	0
 16087  0D02  00C6               	movwf	?___fttol
 16088  0D03  0008               	return
 16089  0D04                     l9401:	
 16090  0D04  3001               	movlw	1
 16091  0D05                     u10855:	
 16092  0D05  36D2               	lsrf	___fttol@lval+3,f
 16093  0D06  0CD1               	rrf	___fttol@lval+2,f
 16094  0D07  0CD0               	rrf	___fttol@lval+1,f
 16095  0D08  0CCF               	rrf	___fttol@lval,f
 16096  0D09  0B89               	decfsz	9,f
 16097  0D0A  2D05               	goto	u10855
 16098  0D0B  3001               	movlw	1
 16099  0D0C  00CA               	movwf	??___fttol
 16100  0D0D  084A               	movf	??___fttol,w
 16101  0D0E  07D3               	addwf	___fttol@exp1,f
 16102  0D0F  1903               	btfsc	3,2
 16103  0D10  2D2B               	goto	l9413
 16104  0D11  2D04               	goto	l9401
 16105  0D12                     l9403:	
 16106  0D12  3018               	movlw	24
 16107  0D13  0253               	subwf	___fttol@exp1,w
 16108  0D14  1C03               	skipc
 16109  0D15  2D28               	goto	l9411
 16110  0D16  3000               	movlw	0
 16111  0D17  00C9               	movwf	?___fttol+3
 16112  0D18  3000               	movlw	0
 16113  0D19  00C8               	movwf	?___fttol+2
 16114  0D1A  3000               	movlw	0
 16115  0D1B  00C7               	movwf	?___fttol+1
 16116  0D1C  3000               	movlw	0
 16117  0D1D  00C6               	movwf	?___fttol
 16118  0D1E  0008               	return
 16119  0D1F                     l9409:	
 16120  0D1F  3001               	movlw	1
 16121  0D20                     u10885:	
 16122  0D20  35CF               	lslf	___fttol@lval,f
 16123  0D21  0DD0               	rlf	___fttol@lval+1,f
 16124  0D22  0DD1               	rlf	___fttol@lval+2,f
 16125  0D23  0DD2               	rlf	___fttol@lval+3,f
 16126  0D24  0B89               	decfsz	9,f
 16127  0D25  2D20               	goto	u10885
 16128  0D26  3001               	movlw	1
 16129  0D27  02D3               	subwf	___fttol@exp1,f
 16130  0D28                     l9411:	
 16131  0D28  08D3               	movf	___fttol@exp1,f
 16132  0D29  1D03               	skipz
 16133  0D2A  2D1F               	goto	l9409
 16134  0D2B                     l9413:	
 16135  0D2B  084E               	movf	___fttol@sign1,w
 16136  0D2C  1903               	btfsc	3,2
 16137  0D2D  2D39               	goto	l9417
 16138  0D2E  09CF               	comf	___fttol@lval,f
 16139  0D2F  09D0               	comf	___fttol@lval+1,f
 16140  0D30  09D1               	comf	___fttol@lval+2,f
 16141  0D31  09D2               	comf	___fttol@lval+3,f
 16142  0D32  0ACF               	incf	___fttol@lval,f
 16143  0D33  1903               	skipnz
 16144  0D34  0AD0               	incf	___fttol@lval+1,f
 16145  0D35  1903               	skipnz
 16146  0D36  0AD1               	incf	___fttol@lval+2,f
 16147  0D37  1903               	skipnz
 16148  0D38  0AD2               	incf	___fttol@lval+3,f
 16149  0D39                     l9417:	
 16150  0D39  0852               	movf	___fttol@lval+3,w
 16151  0D3A  00C9               	movwf	?___fttol+3
 16152  0D3B  0851               	movf	___fttol@lval+2,w
 16153  0D3C  00C8               	movwf	?___fttol+2
 16154  0D3D  0850               	movf	___fttol@lval+1,w
 16155  0D3E  00C7               	movwf	?___fttol+1
 16156  0D3F  084F               	movf	___fttol@lval,w
 16157  0D40  00C6               	movwf	?___fttol
 16158  0D41  0008               	return
 16159  0D42                     __end_of___fttol:	
 16160                           
 16161                           	psect	text108
 16162  1B36                     __ptext108:	
 16163 ;; *************** function ___ftneg *****************
 16164 ;; Defined at:
 16165 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16166 ;; Parameters:    Size  Location     Type
 16167 ;;  f1              3   22[BANK0 ] float 
 16168 ;; Auto vars:     Size  Location     Type
 16169 ;;		None
 16170 ;; Return value:  Size  Location     Type
 16171 ;;                  3   22[BANK0 ] float 
 16172 ;; Registers used:
 16173 ;;		wreg
 16174 ;; Tracked objects:
 16175 ;;		On entry : 0/0
 16176 ;;		On exit  : 0/0
 16177 ;;		Unchanged: 0/0
 16178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16179 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;Total ram usage:        3 bytes
 16184 ;; Hardware stack levels used:    1
 16185 ;; Hardware stack levels required when called:    3
 16186 ;; This function calls:
 16187 ;;		Nothing
 16188 ;; This function is called by:
 16189 ;;		_getDimmerLights_PercentToValue
 16190 ;;		_getDimmerLights_ValueToPercent
 16191 ;; This function uses a non-reentrant model
 16192 ;;
 16193                           
 16194                           
 16195                           ;psect for function ___ftneg
 16196  1B36                     ___ftneg:	
 16197                           
 16198                           ;incstack = 0
 16199                           ; Regs used in ___ftneg: [wreg]
 16200  1B36  0020               	movlb	0	; select bank0
 16201  1B37  0838               	movf	___ftneg@f1+2,w
 16202  1B38  0437               	iorwf	___ftneg@f1+1,w
 16203  1B39  0436               	iorwf	___ftneg@f1,w
 16204  1B3A  1903               	skipnz
 16205  1B3B  0008               	return
 16206  1B3C  3080               	movlw	128
 16207  1B3D  06B8               	xorwf	___ftneg@f1+2,f
 16208  1B3E  0008               	return
 16209  1B3F                     __end_of___ftneg:	
 16210                           
 16211                           	psect	text109
 16212  0D42                     __ptext109:	
 16213 ;; *************** function ___ftdiv *****************
 16214 ;; Defined at:
 16215 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16216 ;; Parameters:    Size  Location     Type
 16217 ;;  f2              3    6[BANK0 ] float 
 16218 ;;  f1              3    9[BANK0 ] float 
 16219 ;; Auto vars:     Size  Location     Type
 16220 ;;  f3              3   17[BANK0 ] float 
 16221 ;;  sign            1   21[BANK0 ] unsigned char 
 16222 ;;  exp             1   20[BANK0 ] unsigned char 
 16223 ;;  cntr            1   16[BANK0 ] unsigned char 
 16224 ;; Return value:  Size  Location     Type
 16225 ;;                  3    6[BANK0 ] float 
 16226 ;; Registers used:
 16227 ;;		wreg, status,2, status,0, pclath, cstack
 16228 ;; Tracked objects:
 16229 ;;		On entry : 0/0
 16230 ;;		On exit  : 0/0
 16231 ;;		Unchanged: 0/0
 16232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16233 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16235 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16236 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16237 ;;Total ram usage:       16 bytes
 16238 ;; Hardware stack levels used:    1
 16239 ;; Hardware stack levels required when called:    4
 16240 ;; This function calls:
 16241 ;;		___ftpack
 16242 ;; This function is called by:
 16243 ;;		_getDimmerLights_PercentToValue
 16244 ;;		_getDimmerLights_ValueToPercent
 16245 ;; This function uses a non-reentrant model
 16246 ;;
 16247                           
 16248                           
 16249                           ;psect for function ___ftdiv
 16250  0D42                     ___ftdiv:	
 16251                           
 16252                           ;incstack = 0
 16253                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16254  0D42  0020               	movlb	0	; select bank0
 16255  0D43  0829               	movf	___ftdiv@f1,w
 16256  0D44  00AC               	movwf	??___ftdiv
 16257  0D45  082A               	movf	___ftdiv@f1+1,w
 16258  0D46  00AD               	movwf	??___ftdiv+1
 16259  0D47  082B               	movf	___ftdiv@f1+2,w
 16260  0D48  00AE               	movwf	??___ftdiv+2
 16261  0D49  1003               	clrc
 16262  0D4A  0D2D               	rlf	??___ftdiv+1,w
 16263  0D4B  0D2E               	rlf	??___ftdiv+2,w
 16264  0D4C  00AF               	movwf	??___ftdiv+3
 16265  0D4D  082F               	movf	??___ftdiv+3,w
 16266  0D4E  00B4               	movwf	___ftdiv@exp
 16267  0D4F  08B4               	movf	___ftdiv@exp,f
 16268  0D50  1D03               	skipz
 16269  0D51  2D59               	goto	l9283
 16270  0D52  3000               	movlw	0
 16271  0D53  00A6               	movwf	?___ftdiv
 16272  0D54  3000               	movlw	0
 16273  0D55  00A7               	movwf	?___ftdiv+1
 16274  0D56  3000               	movlw	0
 16275  0D57  00A8               	movwf	?___ftdiv+2
 16276  0D58  0008               	return
 16277  0D59                     l9283:	
 16278  0D59  0826               	movf	___ftdiv@f2,w
 16279  0D5A  00AC               	movwf	??___ftdiv
 16280  0D5B  0827               	movf	___ftdiv@f2+1,w
 16281  0D5C  00AD               	movwf	??___ftdiv+1
 16282  0D5D  0828               	movf	___ftdiv@f2+2,w
 16283  0D5E  00AE               	movwf	??___ftdiv+2
 16284  0D5F  1003               	clrc
 16285  0D60  0D2D               	rlf	??___ftdiv+1,w
 16286  0D61  0D2E               	rlf	??___ftdiv+2,w
 16287  0D62  00AF               	movwf	??___ftdiv+3
 16288  0D63  082F               	movf	??___ftdiv+3,w
 16289  0D64  00B5               	movwf	___ftdiv@sign
 16290  0D65  08B5               	movf	___ftdiv@sign,f
 16291  0D66  1D03               	skipz
 16292  0D67  2D6F               	goto	l9289
 16293  0D68  3000               	movlw	0
 16294  0D69  00A6               	movwf	?___ftdiv
 16295  0D6A  3000               	movlw	0
 16296  0D6B  00A7               	movwf	?___ftdiv+1
 16297  0D6C  3000               	movlw	0
 16298  0D6D  00A8               	movwf	?___ftdiv+2
 16299  0D6E  0008               	return
 16300  0D6F                     l9289:	
 16301  0D6F  3000               	movlw	0
 16302  0D70  00B1               	movwf	___ftdiv@f3
 16303  0D71  3000               	movlw	0
 16304  0D72  00B2               	movwf	___ftdiv@f3+1
 16305  0D73  3000               	movlw	0
 16306  0D74  00B3               	movwf	___ftdiv@f3+2
 16307  0D75  3089               	movlw	137
 16308  0D76  0735               	addwf	___ftdiv@sign,w
 16309  0D77  00AC               	movwf	??___ftdiv
 16310  0D78  082C               	movf	??___ftdiv,w
 16311  0D79  02B4               	subwf	___ftdiv@exp,f
 16312  0D7A  0829               	movf	___ftdiv@f1,w
 16313  0D7B  00AC               	movwf	??___ftdiv
 16314  0D7C  082A               	movf	___ftdiv@f1+1,w
 16315  0D7D  00AD               	movwf	??___ftdiv+1
 16316  0D7E  082B               	movf	___ftdiv@f1+2,w
 16317  0D7F  00AE               	movwf	??___ftdiv+2
 16318  0D80  3010               	movlw	16
 16319  0D81                     u10625:	
 16320  0D81  36AE               	lsrf	??___ftdiv+2,f
 16321  0D82  0CAD               	rrf	??___ftdiv+1,f
 16322  0D83  0CAC               	rrf	??___ftdiv,f
 16323  0D84  0B89               	decfsz	9,f
 16324  0D85  2D81               	goto	u10625
 16325  0D86  082C               	movf	??___ftdiv,w
 16326  0D87  00AF               	movwf	??___ftdiv+3
 16327  0D88  082F               	movf	??___ftdiv+3,w
 16328  0D89  00B5               	movwf	___ftdiv@sign
 16329  0D8A  0826               	movf	___ftdiv@f2,w
 16330  0D8B  00AC               	movwf	??___ftdiv
 16331  0D8C  0827               	movf	___ftdiv@f2+1,w
 16332  0D8D  00AD               	movwf	??___ftdiv+1
 16333  0D8E  0828               	movf	___ftdiv@f2+2,w
 16334  0D8F  00AE               	movwf	??___ftdiv+2
 16335  0D90  3010               	movlw	16
 16336  0D91                     u10635:	
 16337  0D91  36AE               	lsrf	??___ftdiv+2,f
 16338  0D92  0CAD               	rrf	??___ftdiv+1,f
 16339  0D93  0CAC               	rrf	??___ftdiv,f
 16340  0D94  0B89               	decfsz	9,f
 16341  0D95  2D91               	goto	u10635
 16342  0D96  082C               	movf	??___ftdiv,w
 16343  0D97  00AF               	movwf	??___ftdiv+3
 16344  0D98  082F               	movf	??___ftdiv+3,w
 16345  0D99  06B5               	xorwf	___ftdiv@sign,f
 16346  0D9A  3080               	movlw	128
 16347  0D9B  00AC               	movwf	??___ftdiv
 16348  0D9C  082C               	movf	??___ftdiv,w
 16349  0D9D  05B5               	andwf	___ftdiv@sign,f
 16350  0D9E  17AA               	bsf	___ftdiv@f1+1,7
 16351  0D9F  30FF               	movlw	255
 16352  0DA0  05A9               	andwf	___ftdiv@f1,f
 16353  0DA1  30FF               	movlw	255
 16354  0DA2  05AA               	andwf	___ftdiv@f1+1,f
 16355  0DA3  3000               	movlw	0
 16356  0DA4  05AB               	andwf	___ftdiv@f1+2,f
 16357  0DA5  17A7               	bsf	___ftdiv@f2+1,7
 16358  0DA6  30FF               	movlw	255
 16359  0DA7  05A6               	andwf	___ftdiv@f2,f
 16360  0DA8  30FF               	movlw	255
 16361  0DA9  05A7               	andwf	___ftdiv@f2+1,f
 16362  0DAA  3000               	movlw	0
 16363  0DAB  05A8               	andwf	___ftdiv@f2+2,f
 16364  0DAC  3018               	movlw	24
 16365  0DAD  00AC               	movwf	??___ftdiv
 16366  0DAE  082C               	movf	??___ftdiv,w
 16367  0DAF  00B0               	movwf	___ftdiv@cntr
 16368  0DB0                     l9303:	
 16369  0DB0  3001               	movlw	1
 16370  0DB1                     u10645:	
 16371  0DB1  35B1               	lslf	___ftdiv@f3,f
 16372  0DB2  0DB2               	rlf	___ftdiv@f3+1,f
 16373  0DB3  0DB3               	rlf	___ftdiv@f3+2,f
 16374  0DB4  0B89               	decfsz	9,f
 16375  0DB5  2DB1               	goto	u10645
 16376  0DB6  0828               	movf	___ftdiv@f2+2,w
 16377  0DB7  022B               	subwf	___ftdiv@f1+2,w
 16378  0DB8  1D03               	skipz
 16379  0DB9  2DC0               	goto	u10655
 16380  0DBA  0827               	movf	___ftdiv@f2+1,w
 16381  0DBB  022A               	subwf	___ftdiv@f1+1,w
 16382  0DBC  1D03               	skipz
 16383  0DBD  2DC0               	goto	u10655
 16384  0DBE  0826               	movf	___ftdiv@f2,w
 16385  0DBF  0229               	subwf	___ftdiv@f1,w
 16386  0DC0                     u10655:	
 16387  0DC0  1C03               	skipc
 16388  0DC1  2DC9               	goto	l9311
 16389  0DC2  0826               	movf	___ftdiv@f2,w
 16390  0DC3  02A9               	subwf	___ftdiv@f1,f
 16391  0DC4  0827               	movf	___ftdiv@f2+1,w
 16392  0DC5  3BAA               	subwfb	___ftdiv@f1+1,f
 16393  0DC6  0828               	movf	___ftdiv@f2+2,w
 16394  0DC7  3BAB               	subwfb	___ftdiv@f1+2,f
 16395  0DC8  1431               	bsf	___ftdiv@f3,0
 16396  0DC9                     l9311:	
 16397  0DC9  3001               	movlw	1
 16398  0DCA                     u10665:	
 16399  0DCA  35A9               	lslf	___ftdiv@f1,f
 16400  0DCB  0DAA               	rlf	___ftdiv@f1+1,f
 16401  0DCC  0DAB               	rlf	___ftdiv@f1+2,f
 16402  0DCD  0B89               	decfsz	9,f
 16403  0DCE  2DCA               	goto	u10665
 16404  0DCF  3001               	movlw	1
 16405  0DD0  02B0               	subwf	___ftdiv@cntr,f
 16406  0DD1  1D03               	btfss	3,2
 16407  0DD2  2DB0               	goto	l9303
 16408  0DD3  0831               	movf	___ftdiv@f3,w
 16409  0DD4  00F2               	movwf	___ftpack@arg
 16410  0DD5  0832               	movf	___ftdiv@f3+1,w
 16411  0DD6  00F3               	movwf	___ftpack@arg+1
 16412  0DD7  0833               	movf	___ftdiv@f3+2,w
 16413  0DD8  00F4               	movwf	___ftpack@arg+2
 16414  0DD9  0834               	movf	___ftdiv@exp,w
 16415  0DDA  00AC               	movwf	??___ftdiv
 16416  0DDB  082C               	movf	??___ftdiv,w
 16417  0DDC  00F5               	movwf	___ftpack@exp
 16418  0DDD  0835               	movf	___ftdiv@sign,w
 16419  0DDE  00AD               	movwf	??___ftdiv+1
 16420  0DDF  082D               	movf	??___ftdiv+1,w
 16421  0DE0  00F6               	movwf	___ftpack@sign
 16422  0DE1  3188  2015         	fcall	___ftpack
 16423  0DE3  0872               	movf	?___ftpack,w
 16424  0DE4  0020               	movlb	0	; select bank0
 16425  0DE5  00A6               	movwf	?___ftdiv
 16426  0DE6  0873               	movf	?___ftpack+1,w
 16427  0DE7  00A7               	movwf	?___ftdiv+1
 16428  0DE8  0874               	movf	?___ftpack+2,w
 16429  0DE9  00A8               	movwf	?___ftdiv+2
 16430  0DEA  0008               	return
 16431  0DEB                     __end_of___ftdiv:	
 16432                           
 16433                           	psect	text110
 16434  035E                     __ptext110:	
 16435 ;; *************** function ___ftadd *****************
 16436 ;; Defined at:
 16437 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16438 ;; Parameters:    Size  Location     Type
 16439 ;;  f1              3   25[BANK0 ] float 
 16440 ;;  f2              3   28[BANK0 ] float 
 16441 ;; Auto vars:     Size  Location     Type
 16442 ;;  exp1            1   37[BANK0 ] unsigned char 
 16443 ;;  exp2            1   36[BANK0 ] unsigned char 
 16444 ;;  sign            1   35[BANK0 ] unsigned char 
 16445 ;; Return value:  Size  Location     Type
 16446 ;;                  3   25[BANK0 ] float 
 16447 ;; Registers used:
 16448 ;;		wreg, status,2, status,0, pclath, cstack
 16449 ;; Tracked objects:
 16450 ;;		On entry : 0/0
 16451 ;;		On exit  : 0/0
 16452 ;;		Unchanged: 0/0
 16453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16454 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16458 ;;Total ram usage:       13 bytes
 16459 ;; Hardware stack levels used:    1
 16460 ;; Hardware stack levels required when called:    4
 16461 ;; This function calls:
 16462 ;;		___ftpack
 16463 ;; This function is called by:
 16464 ;;		_getDimmerLights_PercentToValue
 16465 ;;		_getDimmerLights_ValueToPercent
 16466 ;; This function uses a non-reentrant model
 16467 ;;
 16468                           
 16469                           
 16470                           ;psect for function ___ftadd
 16471  035E                     ___ftadd:	
 16472                           
 16473                           ;incstack = 0
 16474                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16475  035E  0020               	movlb	0	; select bank0
 16476  035F  0839               	movf	___ftadd@f1,w
 16477  0360  00BF               	movwf	??___ftadd
 16478  0361  083A               	movf	___ftadd@f1+1,w
 16479  0362  00C0               	movwf	??___ftadd+1
 16480  0363  083B               	movf	___ftadd@f1+2,w
 16481  0364  00C1               	movwf	??___ftadd+2
 16482  0365  1003               	clrc
 16483  0366  0D40               	rlf	??___ftadd+1,w
 16484  0367  0D41               	rlf	??___ftadd+2,w
 16485  0368  00C2               	movwf	??___ftadd+3
 16486  0369  0842               	movf	??___ftadd+3,w
 16487  036A  00C5               	movwf	___ftadd@exp1
 16488  036B  083C               	movf	___ftadd@f2,w
 16489  036C  00BF               	movwf	??___ftadd
 16490  036D  083D               	movf	___ftadd@f2+1,w
 16491  036E  00C0               	movwf	??___ftadd+1
 16492  036F  083E               	movf	___ftadd@f2+2,w
 16493  0370  00C1               	movwf	??___ftadd+2
 16494  0371  1003               	clrc
 16495  0372  0D40               	rlf	??___ftadd+1,w
 16496  0373  0D41               	rlf	??___ftadd+2,w
 16497  0374  00C2               	movwf	??___ftadd+3
 16498  0375  0842               	movf	??___ftadd+3,w
 16499  0376  00C4               	movwf	___ftadd@exp2
 16500  0377  0845               	movf	___ftadd@exp1,w
 16501  0378  1903               	btfsc	3,2
 16502  0379  2B86               	goto	l9213
 16503  037A  0844               	movf	___ftadd@exp2,w
 16504  037B  0245               	subwf	___ftadd@exp1,w
 16505  037C  1803               	skipnc
 16506  037D  2B8D               	goto	l9217
 16507  037E  0345               	decf	___ftadd@exp1,w
 16508  037F  3AFF               	xorlw	255
 16509  0380  0744               	addwf	___ftadd@exp2,w
 16510  0381  00BF               	movwf	??___ftadd
 16511  0382  3019               	movlw	25
 16512  0383  023F               	subwf	??___ftadd,w
 16513  0384  1C03               	skipc
 16514  0385  2B8D               	goto	l9217
 16515  0386                     l9213:	
 16516  0386  083C               	movf	___ftadd@f2,w
 16517  0387  00B9               	movwf	?___ftadd
 16518  0388  083D               	movf	___ftadd@f2+1,w
 16519  0389  00BA               	movwf	?___ftadd+1
 16520  038A  083E               	movf	___ftadd@f2+2,w
 16521  038B  00BB               	movwf	?___ftadd+2
 16522  038C  0008               	return
 16523  038D                     l9217:	
 16524  038D  0844               	movf	___ftadd@exp2,w
 16525  038E  1903               	btfsc	3,2
 16526  038F  0008               	return
 16527  0390  0845               	movf	___ftadd@exp1,w
 16528  0391  0244               	subwf	___ftadd@exp2,w
 16529  0392  1803               	skipnc
 16530  0393  2B9C               	goto	l9223
 16531  0394  0344               	decf	___ftadd@exp2,w
 16532  0395  3AFF               	xorlw	255
 16533  0396  0745               	addwf	___ftadd@exp1,w
 16534  0397  00BF               	movwf	??___ftadd
 16535  0398  3019               	movlw	25
 16536  0399  023F               	subwf	??___ftadd,w
 16537  039A  1803               	btfsc	3,0
 16538  039B  0008               	return
 16539  039C                     l9223:	
 16540  039C  3006               	movlw	6
 16541  039D  00BF               	movwf	??___ftadd
 16542  039E  083F               	movf	??___ftadd,w
 16543  039F  00C3               	movwf	___ftadd@sign
 16544  03A0  1BBB               	btfsc	___ftadd@f1+2,7
 16545  03A1  17C3               	bsf	___ftadd@sign,7
 16546  03A2  1BBE               	btfsc	___ftadd@f2+2,7
 16547  03A3  1743               	bsf	___ftadd@sign,6
 16548  03A4  17BA               	bsf	___ftadd@f1+1,7
 16549  03A5  30FF               	movlw	255
 16550  03A6  05B9               	andwf	___ftadd@f1,f
 16551  03A7  30FF               	movlw	255
 16552  03A8  05BA               	andwf	___ftadd@f1+1,f
 16553  03A9  3000               	movlw	0
 16554  03AA  05BB               	andwf	___ftadd@f1+2,f
 16555  03AB  17BD               	bsf	___ftadd@f2+1,7
 16556  03AC  30FF               	movlw	255
 16557  03AD  05BC               	andwf	___ftadd@f2,f
 16558  03AE  30FF               	movlw	255
 16559  03AF  05BD               	andwf	___ftadd@f2+1,f
 16560  03B0  3000               	movlw	0
 16561  03B1  05BE               	andwf	___ftadd@f2+2,f
 16562  03B2  0844               	movf	___ftadd@exp2,w
 16563  03B3  0245               	subwf	___ftadd@exp1,w
 16564  03B4  1803               	skipnc
 16565  03B5  2BD8               	goto	l9245
 16566  03B6                     l9235:	
 16567  03B6  3001               	movlw	1
 16568  03B7                     u10465:	
 16569  03B7  35BC               	lslf	___ftadd@f2,f
 16570  03B8  0DBD               	rlf	___ftadd@f2+1,f
 16571  03B9  0DBE               	rlf	___ftadd@f2+2,f
 16572  03BA  0B89               	decfsz	9,f
 16573  03BB  2BB7               	goto	u10465
 16574  03BC  3001               	movlw	1
 16575  03BD  02C4               	subwf	___ftadd@exp2,f
 16576  03BE  0844               	movf	___ftadd@exp2,w
 16577  03BF  0645               	xorwf	___ftadd@exp1,w
 16578  03C0  1903               	skipnz
 16579  03C1  2BD3               	goto	l9243
 16580  03C2  3001               	movlw	1
 16581  03C3  02C3               	subwf	___ftadd@sign,f
 16582  03C4  0843               	movf	___ftadd@sign,w
 16583  03C5  3907               	andlw	7
 16584  03C6  1903               	btfsc	3,2
 16585  03C7  2BD3               	goto	l9243
 16586  03C8  2BB6               	goto	l9235
 16587  03C9                     l9241:	
 16588  03C9  3001               	movlw	1
 16589  03CA                     u10495:	
 16590  03CA  36BB               	lsrf	___ftadd@f1+2,f
 16591  03CB  0CBA               	rrf	___ftadd@f1+1,f
 16592  03CC  0CB9               	rrf	___ftadd@f1,f
 16593  03CD  0B89               	decfsz	9,f
 16594  03CE  2BCA               	goto	u10495
 16595  03CF  3001               	movlw	1
 16596  03D0  00BF               	movwf	??___ftadd
 16597  03D1  083F               	movf	??___ftadd,w
 16598  03D2  07C5               	addwf	___ftadd@exp1,f
 16599  03D3                     l9243:	
 16600  03D3  0845               	movf	___ftadd@exp1,w
 16601  03D4  0644               	xorwf	___ftadd@exp2,w
 16602  03D5  1903               	btfsc	3,2
 16603  03D6  2BFD               	goto	l3176
 16604  03D7  2BC9               	goto	l9241
 16605  03D8                     l9245:	
 16606  03D8  0845               	movf	___ftadd@exp1,w
 16607  03D9  0244               	subwf	___ftadd@exp2,w
 16608  03DA  1803               	skipnc
 16609  03DB  2BFD               	goto	l3176
 16610  03DC                     l9247:	
 16611  03DC  3001               	movlw	1
 16612  03DD                     u10525:	
 16613  03DD  35B9               	lslf	___ftadd@f1,f
 16614  03DE  0DBA               	rlf	___ftadd@f1+1,f
 16615  03DF  0DBB               	rlf	___ftadd@f1+2,f
 16616  03E0  0B89               	decfsz	9,f
 16617  03E1  2BDD               	goto	u10525
 16618  03E2  3001               	movlw	1
 16619  03E3  02C5               	subwf	___ftadd@exp1,f
 16620  03E4  0844               	movf	___ftadd@exp2,w
 16621  03E5  0645               	xorwf	___ftadd@exp1,w
 16622  03E6  1903               	skipnz
 16623  03E7  2BF9               	goto	l9255
 16624  03E8  3001               	movlw	1
 16625  03E9  02C3               	subwf	___ftadd@sign,f
 16626  03EA  0843               	movf	___ftadd@sign,w
 16627  03EB  3907               	andlw	7
 16628  03EC  1903               	btfsc	3,2
 16629  03ED  2BF9               	goto	l9255
 16630  03EE  2BDC               	goto	l9247
 16631  03EF                     l9253:	
 16632  03EF  3001               	movlw	1
 16633  03F0                     u10555:	
 16634  03F0  36BE               	lsrf	___ftadd@f2+2,f
 16635  03F1  0CBD               	rrf	___ftadd@f2+1,f
 16636  03F2  0CBC               	rrf	___ftadd@f2,f
 16637  03F3  0B89               	decfsz	9,f
 16638  03F4  2BF0               	goto	u10555
 16639  03F5  3001               	movlw	1
 16640  03F6  00BF               	movwf	??___ftadd
 16641  03F7  083F               	movf	??___ftadd,w
 16642  03F8  07C4               	addwf	___ftadd@exp2,f
 16643  03F9                     l9255:	
 16644  03F9  0845               	movf	___ftadd@exp1,w
 16645  03FA  0644               	xorwf	___ftadd@exp2,w
 16646  03FB  1D03               	skipz
 16647  03FC  2BEF               	goto	l9253
 16648  03FD                     l3176:	
 16649  03FD  1FC3               	btfss	___ftadd@sign,7
 16650  03FE  2C0F               	goto	l9259
 16651  03FF  30FF               	movlw	255
 16652  0400  06B9               	xorwf	___ftadd@f1,f
 16653  0401  30FF               	movlw	255
 16654  0402  06BA               	xorwf	___ftadd@f1+1,f
 16655  0403  30FF               	movlw	255
 16656  0404  06BB               	xorwf	___ftadd@f1+2,f
 16657  0405  3001               	movlw	1
 16658  0406  07B9               	addwf	___ftadd@f1,f
 16659  0407  3000               	movlw	0
 16660  0408  1803               	skipnc
 16661  0409  3001               	movlw	1
 16662  040A  07BA               	addwf	___ftadd@f1+1,f
 16663  040B  3000               	movlw	0
 16664  040C  1803               	skipnc
 16665  040D  3001               	movlw	1
 16666  040E  07BB               	addwf	___ftadd@f1+2,f
 16667  040F                     l9259:	
 16668  040F  1F43               	btfss	___ftadd@sign,6
 16669  0410  2C21               	goto	l9263
 16670  0411  30FF               	movlw	255
 16671  0412  06BC               	xorwf	___ftadd@f2,f
 16672  0413  30FF               	movlw	255
 16673  0414  06BD               	xorwf	___ftadd@f2+1,f
 16674  0415  30FF               	movlw	255
 16675  0416  06BE               	xorwf	___ftadd@f2+2,f
 16676  0417  3001               	movlw	1
 16677  0418  07BC               	addwf	___ftadd@f2,f
 16678  0419  3000               	movlw	0
 16679  041A  1803               	skipnc
 16680  041B  3001               	movlw	1
 16681  041C  07BD               	addwf	___ftadd@f2+1,f
 16682  041D  3000               	movlw	0
 16683  041E  1803               	skipnc
 16684  041F  3001               	movlw	1
 16685  0420  07BE               	addwf	___ftadd@f2+2,f
 16686  0421                     l9263:	
 16687  0421  01C3               	clrf	___ftadd@sign
 16688  0422  0839               	movf	___ftadd@f1,w
 16689  0423  07BC               	addwf	___ftadd@f2,f
 16690  0424  083A               	movf	___ftadd@f1+1,w
 16691  0425  3DBD               	addwfc	___ftadd@f2+1,f
 16692  0426  083B               	movf	___ftadd@f1+2,w
 16693  0427  3DBE               	addwfc	___ftadd@f2+2,f
 16694  0428  1FBE               	btfss	___ftadd@f2+2,7
 16695  0429  2C3C               	goto	l9273
 16696  042A  30FF               	movlw	255
 16697  042B  06BC               	xorwf	___ftadd@f2,f
 16698  042C  30FF               	movlw	255
 16699  042D  06BD               	xorwf	___ftadd@f2+1,f
 16700  042E  30FF               	movlw	255
 16701  042F  06BE               	xorwf	___ftadd@f2+2,f
 16702  0430  3001               	movlw	1
 16703  0431  07BC               	addwf	___ftadd@f2,f
 16704  0432  3000               	movlw	0
 16705  0433  1803               	skipnc
 16706  0434  3001               	movlw	1
 16707  0435  07BD               	addwf	___ftadd@f2+1,f
 16708  0436  3000               	movlw	0
 16709  0437  1803               	skipnc
 16710  0438  3001               	movlw	1
 16711  0439  07BE               	addwf	___ftadd@f2+2,f
 16712  043A  01C3               	clrf	___ftadd@sign
 16713  043B  0AC3               	incf	___ftadd@sign,f
 16714  043C                     l9273:	
 16715  043C  083C               	movf	___ftadd@f2,w
 16716  043D  00F2               	movwf	___ftpack@arg
 16717  043E  083D               	movf	___ftadd@f2+1,w
 16718  043F  00F3               	movwf	___ftpack@arg+1
 16719  0440  083E               	movf	___ftadd@f2+2,w
 16720  0441  00F4               	movwf	___ftpack@arg+2
 16721  0442  0845               	movf	___ftadd@exp1,w
 16722  0443  00BF               	movwf	??___ftadd
 16723  0444  083F               	movf	??___ftadd,w
 16724  0445  00F5               	movwf	___ftpack@exp
 16725  0446  0843               	movf	___ftadd@sign,w
 16726  0447  00C0               	movwf	??___ftadd+1
 16727  0448  0840               	movf	??___ftadd+1,w
 16728  0449  00F6               	movwf	___ftpack@sign
 16729  044A  3188  2015         	fcall	___ftpack
 16730  044C  0872               	movf	?___ftpack,w
 16731  044D  0020               	movlb	0	; select bank0
 16732  044E  00B9               	movwf	?___ftadd
 16733  044F  0873               	movf	?___ftpack+1,w
 16734  0450  00BA               	movwf	?___ftadd+1
 16735  0451  0874               	movf	?___ftpack+2,w
 16736  0452  00BB               	movwf	?___ftadd+2
 16737  0453  0008               	return
 16738  0454                     __end_of___ftadd:	
 16739                           
 16740                           	psect	text111
 16741  1FDE                     __ptext111:	
 16742 ;; *************** function ___awtoft *****************
 16743 ;; Defined at:
 16744 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16745 ;; Parameters:    Size  Location     Type
 16746 ;;  c               2    0[BANK0 ] int 
 16747 ;; Auto vars:     Size  Location     Type
 16748 ;;  sign            1    5[BANK0 ] unsigned char 
 16749 ;; Return value:  Size  Location     Type
 16750 ;;                  3    0[BANK0 ] float 
 16751 ;; Registers used:
 16752 ;;		wreg, status,2, status,0, pclath, cstack
 16753 ;; Tracked objects:
 16754 ;;		On entry : 0/0
 16755 ;;		On exit  : 0/0
 16756 ;;		Unchanged: 0/0
 16757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16758 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;Total ram usage:        6 bytes
 16763 ;; Hardware stack levels used:    1
 16764 ;; Hardware stack levels required when called:    4
 16765 ;; This function calls:
 16766 ;;		___ftpack
 16767 ;; This function is called by:
 16768 ;;		_getDimmerLights_PercentToValue
 16769 ;;		_getDimmerLights_ValueToPercent
 16770 ;; This function uses a non-reentrant model
 16771 ;;
 16772                           
 16773                           
 16774                           ;psect for function ___awtoft
 16775  1FDE                     ___awtoft:	
 16776                           
 16777                           ;incstack = 0
 16778                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16779  1FDE  0020               	movlb	0	; select bank0
 16780  1FDF  01A5               	clrf	___awtoft@sign
 16781  1FE0  1FA1               	btfss	___awtoft@c+1,7
 16782  1FE1  2FE9               	goto	l9201
 16783  1FE2  09A0               	comf	___awtoft@c,f
 16784  1FE3  09A1               	comf	___awtoft@c+1,f
 16785  1FE4  0AA0               	incf	___awtoft@c,f
 16786  1FE5  1903               	skipnz
 16787  1FE6  0AA1               	incf	___awtoft@c+1,f
 16788  1FE7  01A5               	clrf	___awtoft@sign
 16789  1FE8  0AA5               	incf	___awtoft@sign,f
 16790  1FE9                     l9201:	
 16791  1FE9  0820               	movf	___awtoft@c,w
 16792  1FEA  00F2               	movwf	___ftpack@arg
 16793  1FEB  0821               	movf	___awtoft@c+1,w
 16794  1FEC  00F3               	movwf	___ftpack@arg+1
 16795  1FED  01F4               	clrf	___ftpack@arg+2
 16796  1FEE  308E               	movlw	142
 16797  1FEF  00A3               	movwf	??___awtoft
 16798  1FF0  0823               	movf	??___awtoft,w
 16799  1FF1  00F5               	movwf	___ftpack@exp
 16800  1FF2  0825               	movf	___awtoft@sign,w
 16801  1FF3  00A4               	movwf	??___awtoft+1
 16802  1FF4  0824               	movf	??___awtoft+1,w
 16803  1FF5  00F6               	movwf	___ftpack@sign
 16804  1FF6  3188  2015         	fcall	___ftpack
 16805  1FF8  0872               	movf	?___ftpack,w
 16806  1FF9  0020               	movlb	0	; select bank0
 16807  1FFA  00A0               	movwf	?___awtoft
 16808  1FFB  0873               	movf	?___ftpack+1,w
 16809  1FFC  00A1               	movwf	?___awtoft+1
 16810  1FFD  0874               	movf	?___ftpack+2,w
 16811  1FFE  00A2               	movwf	?___awtoft+2
 16812  1FFF  0008               	return
 16813  2000                     __end_of___awtoft:	
 16814                           
 16815                           	psect	text112
 16816  0815                     __ptext112:	
 16817 ;; *************** function ___ftpack *****************
 16818 ;; Defined at:
 16819 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16820 ;; Parameters:    Size  Location     Type
 16821 ;;  arg             3    2[COMMON] unsigned um
 16822 ;;  exp             1    5[COMMON] unsigned char 
 16823 ;;  sign            1    6[COMMON] unsigned char 
 16824 ;; Auto vars:     Size  Location     Type
 16825 ;;		None
 16826 ;; Return value:  Size  Location     Type
 16827 ;;                  3    2[COMMON] float 
 16828 ;; Registers used:
 16829 ;;		wreg, status,2, status,0
 16830 ;; Tracked objects:
 16831 ;;		On entry : 0/0
 16832 ;;		On exit  : 0/0
 16833 ;;		Unchanged: 0/0
 16834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16835 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16837 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16838 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;Total ram usage:        8 bytes
 16840 ;; Hardware stack levels used:    1
 16841 ;; Hardware stack levels required when called:    3
 16842 ;; This function calls:
 16843 ;;		Nothing
 16844 ;; This function is called by:
 16845 ;;		___awtoft
 16846 ;;		___ftadd
 16847 ;;		___ftdiv
 16848 ;;		___ftmul
 16849 ;; This function uses a non-reentrant model
 16850 ;;
 16851                           
 16852                           
 16853                           ;psect for function ___ftpack
 16854  0815                     ___ftpack:	
 16855                           
 16856                           ;incstack = 0
 16857                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16858  0815  0875               	movf	___ftpack@exp,w
 16859  0816  1903               	btfsc	3,2
 16860  0817  281D               	goto	l9043
 16861  0818  0874               	movf	___ftpack@arg+2,w
 16862  0819  0473               	iorwf	___ftpack@arg+1,w
 16863  081A  0472               	iorwf	___ftpack@arg,w
 16864  081B  1D03               	skipz
 16865  081C  282E               	goto	l9049
 16866  081D                     l9043:	
 16867  081D  3000               	movlw	0
 16868  081E  00F2               	movwf	?___ftpack
 16869  081F  3000               	movlw	0
 16870  0820  00F3               	movwf	?___ftpack+1
 16871  0821  3000               	movlw	0
 16872  0822  00F4               	movwf	?___ftpack+2
 16873  0823  0008               	return
 16874  0824                     l9047:	
 16875  0824  3001               	movlw	1
 16876  0825  00F7               	movwf	??___ftpack
 16877  0826  0877               	movf	??___ftpack,w
 16878  0827  07F5               	addwf	___ftpack@exp,f
 16879  0828  3001               	movlw	1
 16880  0829                     u10055:	
 16881  0829  36F4               	lsrf	___ftpack@arg+2,f
 16882  082A  0CF3               	rrf	___ftpack@arg+1,f
 16883  082B  0CF2               	rrf	___ftpack@arg,f
 16884  082C  0B89               	decfsz	9,f
 16885  082D  2829               	goto	u10055
 16886  082E                     l9049:	
 16887  082E  30FE               	movlw	254
 16888  082F  0574               	andwf	___ftpack@arg+2,w
 16889  0830  1903               	btfsc	3,2
 16890  0831  2847               	goto	l3147
 16891  0832  2824               	goto	l9047
 16892  0833                     l9051:	
 16893  0833  3001               	movlw	1
 16894  0834  00F7               	movwf	??___ftpack
 16895  0835  0877               	movf	??___ftpack,w
 16896  0836  07F5               	addwf	___ftpack@exp,f
 16897  0837  3001               	movlw	1
 16898  0838  07F2               	addwf	___ftpack@arg,f
 16899  0839  3000               	movlw	0
 16900  083A  1803               	skipnc
 16901  083B  3001               	movlw	1
 16902  083C  07F3               	addwf	___ftpack@arg+1,f
 16903  083D  3000               	movlw	0
 16904  083E  1803               	skipnc
 16905  083F  3001               	movlw	1
 16906  0840  07F4               	addwf	___ftpack@arg+2,f
 16907  0841  3001               	movlw	1
 16908  0842                     u10075:	
 16909  0842  36F4               	lsrf	___ftpack@arg+2,f
 16910  0843  0CF3               	rrf	___ftpack@arg+1,f
 16911  0844  0CF2               	rrf	___ftpack@arg,f
 16912  0845  0B89               	decfsz	9,f
 16913  0846  2842               	goto	u10075
 16914  0847                     l3147:	
 16915  0847  30FF               	movlw	255
 16916  0848  0574               	andwf	___ftpack@arg+2,w
 16917  0849  1903               	btfsc	3,2
 16918  084A  2854               	goto	l9059
 16919  084B  2833               	goto	l9051
 16920  084C                     l9057:	
 16921  084C  3001               	movlw	1
 16922  084D  02F5               	subwf	___ftpack@exp,f
 16923  084E  3001               	movlw	1
 16924  084F                     u10095:	
 16925  084F  35F2               	lslf	___ftpack@arg,f
 16926  0850  0DF3               	rlf	___ftpack@arg+1,f
 16927  0851  0DF4               	rlf	___ftpack@arg+2,f
 16928  0852  0B89               	decfsz	9,f
 16929  0853  284F               	goto	u10095
 16930  0854                     l9059:	
 16931  0854  1FF3               	btfss	___ftpack@arg+1,7
 16932  0855  284C               	goto	l9057
 16933  0856  1875               	btfsc	___ftpack@exp,0
 16934  0857  285E               	goto	l3153
 16935  0858  30FF               	movlw	255
 16936  0859  05F2               	andwf	___ftpack@arg,f
 16937  085A  307F               	movlw	127
 16938  085B  05F3               	andwf	___ftpack@arg+1,f
 16939  085C  30FF               	movlw	255
 16940  085D  05F4               	andwf	___ftpack@arg+2,f
 16941  085E                     l3153:	
 16942  085E  1003               	clrc
 16943  085F  0CF5               	rrf	___ftpack@exp,f
 16944  0860  0875               	movf	___ftpack@exp,w
 16945  0861  00F7               	movwf	??___ftpack
 16946  0862  01F8               	clrf	??___ftpack+1
 16947  0863  01F9               	clrf	??___ftpack+2
 16948  0864  3010               	movlw	16
 16949  0865                     u10125:	
 16950  0865  35F7               	lslf	??___ftpack,f
 16951  0866  0DF8               	rlf	??___ftpack+1,f
 16952  0867  0DF9               	rlf	??___ftpack+2,f
 16953  0868  0B89               	decfsz	9,f
 16954  0869  2865               	goto	u10125
 16955  086A  0877               	movf	??___ftpack,w
 16956  086B  04F2               	iorwf	___ftpack@arg,f
 16957  086C  0878               	movf	??___ftpack+1,w
 16958  086D  04F3               	iorwf	___ftpack@arg+1,f
 16959  086E  0879               	movf	??___ftpack+2,w
 16960  086F  04F4               	iorwf	___ftpack@arg+2,f
 16961  0870  0876               	movf	___ftpack@sign,w
 16962  0871  1903               	btfsc	3,2
 16963  0872  0008               	return
 16964  0873  17F4               	bsf	___ftpack@arg+2,7
 16965  0874  0008               	return
 16966  0875                     __end_of___ftpack:	
 16967                           
 16968                           	psect	text113
 16969  1D2A                     __ptext113:	
 16970 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16971 ;; Defined at:
 16972 ;;		line 66 in file "../src/Dimmer_B1.c"
 16973 ;; Parameters:    Size  Location     Type
 16974 ;;  lights          1    wreg     unsigned char 
 16975 ;; Auto vars:     Size  Location     Type
 16976 ;;  lights          1    4[COMMON] unsigned char 
 16977 ;;  value           1    3[COMMON] unsigned char 
 16978 ;; Return value:  Size  Location     Type
 16979 ;;                  1    wreg      unsigned char 
 16980 ;; Registers used:
 16981 ;;		wreg, status,2
 16982 ;; Tracked objects:
 16983 ;;		On entry : 0/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16991 ;;Total ram usage:        3 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    3
 16994 ;; This function calls:
 16995 ;;		Nothing
 16996 ;; This function is called by:
 16997 ;;		_setDimmerLights_Dimming
 16998 ;; This function uses a non-reentrant model
 16999 ;;
 17000                           
 17001                           
 17002                           ;psect for function _getDimmerIntr_DimmingValue
 17003  1D2A                     _getDimmerIntr_DimmingValue:	
 17004                           
 17005                           ;incstack = 0
 17006                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17007                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17008  1D2A  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 17009                           
 17010                           ;Dimmer_B1.c: 67: char value = 0;
 17011  1D2B  01F3               	clrf	getDimmerIntr_DimmingValue@value
 17012                           
 17013                           ;Dimmer_B1.c: 69: if (lights == 1) {
 17014  1D2C  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17015  1D2D  3A01               	xorlw	1
 17016  1D2E  1D03               	skipz
 17017  1D2F  2D33               	goto	l7035
 17018                           
 17019                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 17020  1D30  0021               	movlb	1	; select bank1
 17021  1D31  0861               	movf	(_DimmerIntr1^(0+128)+4),w
 17022  1D32  2D39               	goto	L9
 17023  1D33                     l7035:	
 17024                           ;Dimmer_B1.c: 71: }
 17025                           
 17026                           
 17027                           ;Dimmer_B1.c: 74: else if (lights == 2) {
 17028  1D33  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17029  1D34  3A02               	xorlw	2
 17030  1D35  1D03               	skipz
 17031  1D36  2D3C               	goto	l742
 17032                           
 17033                           ;Dimmer_B1.c: 75: value = DimmerIntr2.DimmingValue;
 17034  1D37  0021               	movlb	1	; select bank1
 17035  1D38  0868               	movf	(_DimmerIntr2^(0+128)+4),w
 17036  1D39                     L9:	
 17037  1D39  00F2               	movwf	??_getDimmerIntr_DimmingValue
 17038  1D3A  0872               	movf	??_getDimmerIntr_DimmingValue,w
 17039  1D3B  00F3               	movwf	getDimmerIntr_DimmingValue@value
 17040  1D3C                     l742:	
 17041                           
 17042                           ;Dimmer_B1.c: 76: }
 17043                           ;Dimmer_B1.c: 83: return value;
 17044  1D3C  0873               	movf	getDimmerIntr_DimmingValue@value,w
 17045  1D3D  0008               	return
 17046  1D3E                     __end_of_getDimmerIntr_DimmingValue:	
 17047                           
 17048                           	psect	text114
 17049  129A                     __ptext114:	
 17050 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17051 ;; Defined at:
 17052 ;;		line 896 in file "../src/Dimmer_B1.c"
 17053 ;; Parameters:    Size  Location     Type
 17054 ;;  lights          1    wreg     unsigned char 
 17055 ;; Auto vars:     Size  Location     Type
 17056 ;;  lights          1    7[COMMON] unsigned char 
 17057 ;;  allow           1    8[COMMON] unsigned char 
 17058 ;; Return value:  Size  Location     Type
 17059 ;;                  1    wreg      unsigned char 
 17060 ;; Registers used:
 17061 ;;		wreg, status,2, status,0, pclath, cstack
 17062 ;; Tracked objects:
 17063 ;;		On entry : 0/0
 17064 ;;		On exit  : 0/0
 17065 ;;		Unchanged: 0/0
 17066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17068 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17070 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17071 ;;Total ram usage:        6 bytes
 17072 ;; Hardware stack levels used:    1
 17073 ;; Hardware stack levels required when called:    4
 17074 ;; This function calls:
 17075 ;;		_getLoad_OK
 17076 ;; This function is called by:
 17077 ;;		_setDimmerLights_Main
 17078 ;; This function uses a non-reentrant model
 17079 ;;
 17080                           
 17081                           
 17082                           ;psect for function _getDimmerLights_Allow_Condition
 17083  129A                     _getDimmerLights_Allow_Condition:	
 17084                           
 17085                           ;incstack = 0
 17086                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 17087                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 17088  129A  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 17089                           
 17090                           ;Dimmer_B1.c: 897: char allow = 0;
 17091  129B  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 17092                           
 17093                           ;Dimmer_B1.c: 903: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17094  129C  01F4               	clrf	_getDimmerLights_Allow_Condition$2188
 17095  129D  0AF4               	incf	_getDimmerLights_Allow_Condition$2188,f
 17096  129E  319B  2303  3192   	fcall	_getLoad_OK
 17097  12A1  3800               	iorlw	0
 17098  12A2  1D03               	skipz
 17099  12A3  2AA8               	goto	l7335
 17100  12A4  0022               	movlb	2	; select bank2
 17101  12A5  18AE               	btfsc	_Dimmer^(0+256),1	;volatile
 17102  12A6  2AA8               	goto	l7335
 17103  12A7  01F4               	clrf	_getDimmerLights_Allow_Condition$2188
 17104  12A8                     l7335:	
 17105  12A8  0874               	movf	_getDimmerLights_Allow_Condition$2188,w
 17106  12A9  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17107  12AA  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17108  12AB  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17109                           
 17110                           ;Dimmer_B1.c: 907: if (allow == 0) {
 17111  12AC  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 17112  12AD  1D03               	skipz
 17113  12AE  2ACF               	goto	l7359
 17114                           
 17115                           ;Dimmer_B1.c: 908: if (lights == 1) {
 17116  12AF  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17117  12B0  3A01               	xorlw	1
 17118  12B1  1D03               	skipz
 17119  12B2  2ABE               	goto	l7349
 17120                           
 17121                           ;Dimmer_B1.c: 909: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17122  12B3  01F5               	clrf	_getDimmerLights_Allow_Condition$2189
 17123  12B4  0AF5               	incf	_getDimmerLights_Allow_Condition$2189,f
 17124  12B5  0023               	movlb	3	; select bank3
 17125  12B6  1A47               	btfsc	_DimmerLights2^(0+384),4
 17126  12B7  2ABC               	goto	l7347
 17127  12B8  0021               	movlb	1	; select bank1
 17128  12B9  1A64               	btfsc	_DimmerIntr2^(0+128),4
 17129  12BA  2ABC               	goto	l7347
 17130  12BB  01F5               	clrf	_getDimmerLights_Allow_Condition$2189
 17131  12BC                     l7347:	
 17132  12BC  0875               	movf	_getDimmerLights_Allow_Condition$2189,w
 17133  12BD  2ACC               	goto	L10
 17134  12BE                     l7349:	
 17135                           ;Dimmer_B1.c: 910: } else if (lights == 2) {
 17136                           
 17137  12BE  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17138  12BF  3A02               	xorlw	2
 17139  12C0  1D03               	skipz
 17140  12C1  2ACF               	goto	l7359
 17141                           
 17142                           ;Dimmer_B1.c: 911: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17143  12C2  01F6               	clrf	_getDimmerLights_Allow_Condition$2190
 17144  12C3  0AF6               	incf	_getDimmerLights_Allow_Condition$2190,f
 17145  12C4  0023               	movlb	3	; select bank3
 17146  12C5  1A3E               	btfsc	_DimmerLights1^(0+384),4
 17147  12C6  2ACB               	goto	l7357
 17148  12C7  0021               	movlb	1	; select bank1
 17149  12C8  1A5D               	btfsc	_DimmerIntr1^(0+128),4
 17150  12C9  2ACB               	goto	l7357
 17151  12CA  01F6               	clrf	_getDimmerLights_Allow_Condition$2190
 17152  12CB                     l7357:	
 17153  12CB  0876               	movf	_getDimmerLights_Allow_Condition$2190,w
 17154  12CC                     L10:	
 17155  12CC  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17156  12CD  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17157  12CE  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17158  12CF                     l7359:	
 17159                           
 17160                           ;Dimmer_B1.c: 912: }
 17161                           ;Dimmer_B1.c: 913: }
 17162                           ;Dimmer_B1.c: 930: return allow;
 17163  12CF  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 17164  12D0  0008               	return
 17165  12D1                     __end_of_getDimmerLights_Allow_Condition:	
 17166                           
 17167                           	psect	text115
 17168  1B03                     __ptext115:	
 17169 ;; *************** function _getLoad_OK *****************
 17170 ;; Defined at:
 17171 ;;		line 246 in file "../src/OverLoad_B1.c"
 17172 ;; Parameters:    Size  Location     Type
 17173 ;;		None
 17174 ;; Auto vars:     Size  Location     Type
 17175 ;;  ok              1    2[COMMON] unsigned char 
 17176 ;; Return value:  Size  Location     Type
 17177 ;;                  1    wreg      unsigned char 
 17178 ;; Registers used:
 17179 ;;		wreg, status,2
 17180 ;; Tracked objects:
 17181 ;;		On entry : 0/0
 17182 ;;		On exit  : 0/0
 17183 ;;		Unchanged: 0/0
 17184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;Total ram usage:        1 bytes
 17190 ;; Hardware stack levels used:    1
 17191 ;; Hardware stack levels required when called:    3
 17192 ;; This function calls:
 17193 ;;		Nothing
 17194 ;; This function is called by:
 17195 ;;		_DimmerLights_Main
 17196 ;;		_getDimmerLights_Allow_Condition
 17197 ;; This function uses a non-reentrant model
 17198 ;;
 17199                           
 17200                           
 17201                           ;psect for function _getLoad_OK
 17202  1B03                     _getLoad_OK:	
 17203                           
 17204                           ;OverLoad_B1.c: 247: char ok = Load.OK == 1 ? 1 : 0;
 17205                           
 17206                           ;incstack = 0
 17207                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17208  1B03  3000               	movlw	0
 17209  1B04  0022               	movlb	2	; select bank2
 17210  1B05  1BB3               	btfsc	_Load^(0+256),7
 17211  1B06  3001               	movlw	1
 17212  1B07  00F2               	movwf	getLoad_OK@ok
 17213                           
 17214                           ;OverLoad_B1.c: 248: return ok;
 17215  1B08  0872               	movf	getLoad_OK@ok,w
 17216  1B09  0008               	return
 17217  1B0A                     __end_of_getLoad_OK:	
 17218                           
 17219                           	psect	text116
 17220  11CF                     __ptext116:	
 17221 ;; *************** function _getMain_All_Error_Status *****************
 17222 ;; Defined at:
 17223 ;;		line 425 in file "../src/main_B1.c"
 17224 ;; Parameters:    Size  Location     Type
 17225 ;;  command         1    wreg     unsigned char 
 17226 ;; Auto vars:     Size  Location     Type
 17227 ;;  command         1    7[COMMON] unsigned char 
 17228 ;;  status          1    8[COMMON] unsigned char 
 17229 ;; Return value:  Size  Location     Type
 17230 ;;                  1    wreg      unsigned char 
 17231 ;; Registers used:
 17232 ;;		wreg, status,2, status,0
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17239 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17241 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17242 ;;Total ram usage:        7 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; Hardware stack levels required when called:    3
 17245 ;; This function calls:
 17246 ;;		Nothing
 17247 ;; This function is called by:
 17248 ;;		_DimmerLights_Main
 17249 ;;		_Load_Main
 17250 ;;		_setTemp_Main
 17251 ;;		_getRxData
 17252 ;;		_setSw_Main
 17253 ;;		_Exception_Main
 17254 ;; This function uses a non-reentrant model
 17255 ;;
 17256                           
 17257                           
 17258                           ;psect for function _getMain_All_Error_Status
 17259  11CF                     _getMain_All_Error_Status:	
 17260                           
 17261                           ;incstack = 0
 17262                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17263                           ;getMain_All_Error_Status@command stored from wreg
 17264  11CF  00F7               	movwf	getMain_All_Error_Status@command
 17265                           
 17266                           ;main_B1.c: 426: char status = 0;
 17267  11D0  01F8               	clrf	getMain_All_Error_Status@status
 17268                           
 17269                           ;main_B1.c: 437: if (status == 0 && command != 2) {
 17270  11D1  08F8               	movf	getMain_All_Error_Status@status,f
 17271  11D2  1D03               	skipz
 17272  11D3  29E6               	goto	l9847
 17273  11D4  0877               	movf	getMain_All_Error_Status@command,w
 17274  11D5  3A02               	xorlw	2
 17275  11D6  1903               	skipnz
 17276  11D7  29E6               	goto	l9847
 17277                           
 17278                           ;main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 17279  11D8  0021               	movlb	1	; select bank1
 17280  11D9  18CB               	btfsc	_Temp^(0+128),1
 17281  11DA  29DE               	goto	l9845
 17282  11DB  01F3               	clrf	_getMain_All_Error_Status$6326
 17283  11DC  01F4               	clrf	_getMain_All_Error_Status$6326+1
 17284  11DD  29E2               	goto	l2851
 17285  11DE                     l9845:	
 17286  11DE  3002               	movlw	2
 17287  11DF  00F3               	movwf	_getMain_All_Error_Status$6326
 17288  11E0  3000               	movlw	0
 17289  11E1  00F4               	movwf	_getMain_All_Error_Status$6326+1
 17290  11E2                     l2851:	
 17291  11E2  0873               	movf	_getMain_All_Error_Status$6326,w
 17292  11E3  00F2               	movwf	??_getMain_All_Error_Status
 17293  11E4  0872               	movf	??_getMain_All_Error_Status,w
 17294  11E5  00F8               	movwf	getMain_All_Error_Status@status
 17295  11E6                     l9847:	
 17296                           
 17297                           ;main_B1.c: 439: }
 17298                           ;main_B1.c: 444: if (status == 0 && command != 3) {
 17299  11E6  08F8               	movf	getMain_All_Error_Status@status,f
 17300  11E7  1D03               	skipz
 17301  11E8  29FB               	goto	l2852
 17302  11E9  0877               	movf	getMain_All_Error_Status@command,w
 17303  11EA  3A03               	xorlw	3
 17304  11EB  1903               	skipnz
 17305  11EC  29FB               	goto	l2852
 17306                           
 17307                           ;main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 17308  11ED  0022               	movlb	2	; select bank2
 17309  11EE  1AB3               	btfsc	_Load^(0+256),5
 17310  11EF  29F3               	goto	l9855
 17311  11F0  01F5               	clrf	_getMain_All_Error_Status$6327
 17312  11F1  01F6               	clrf	_getMain_All_Error_Status$6327+1
 17313  11F2  29F7               	goto	l2856
 17314  11F3                     l9855:	
 17315  11F3  3003               	movlw	3
 17316  11F4  00F5               	movwf	_getMain_All_Error_Status$6327
 17317  11F5  3000               	movlw	0
 17318  11F6  00F6               	movwf	_getMain_All_Error_Status$6327+1
 17319  11F7                     l2856:	
 17320  11F7  0875               	movf	_getMain_All_Error_Status$6327,w
 17321  11F8  00F2               	movwf	??_getMain_All_Error_Status
 17322  11F9  0872               	movf	??_getMain_All_Error_Status,w
 17323  11FA  00F8               	movwf	getMain_All_Error_Status@status
 17324  11FB                     l2852:	
 17325                           
 17326                           ;main_B1.c: 446: }
 17327                           ;main_B1.c: 462: return status;
 17328  11FB  0878               	movf	getMain_All_Error_Status@status,w
 17329  11FC  0008               	return
 17330  11FD                     __end_of_getMain_All_Error_Status:	
 17331                           
 17332                           	psect	text117
 17333  1B5B                     __ptext117:	
 17334 ;; *************** function _DimmerLights_Initialization *****************
 17335 ;; Defined at:
 17336 ;;		line 593 in file "../src/Dimmer_B1.c"
 17337 ;; Parameters:    Size  Location     Type
 17338 ;;		None
 17339 ;; Auto vars:     Size  Location     Type
 17340 ;;		None
 17341 ;; Return value:  Size  Location     Type
 17342 ;;		None               void
 17343 ;; Registers used:
 17344 ;;		wreg, status,2, status,0, pclath, cstack
 17345 ;; Tracked objects:
 17346 ;;		On entry : 0/0
 17347 ;;		On exit  : 0/0
 17348 ;;		Unchanged: 0/0
 17349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17354 ;;Total ram usage:        0 bytes
 17355 ;; Hardware stack levels used:    1
 17356 ;; Hardware stack levels required when called:    4
 17357 ;; This function calls:
 17358 ;;		_DimmerIntr_Initialization
 17359 ;;		_setDimmerLights_Initialization
 17360 ;; This function is called by:
 17361 ;;		_main
 17362 ;; This function uses a non-reentrant model
 17363 ;;
 17364                           
 17365                           
 17366                           ;psect for function _DimmerLights_Initialization
 17367  1B5B                     _DimmerLights_Initialization:	
 17368                           
 17369                           ;Dimmer_B1.c: 595: setDimmerLights_Initialization(1);
 17370                           
 17371                           ;incstack = 0
 17372                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17373  1B5B  3001               	movlw	1
 17374  1B5C  319A  22C8  319B   	fcall	_setDimmerLights_Initialization
 17375                           
 17376                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(2);
 17377  1B5F  3002               	movlw	2
 17378  1B60  319A  22C8  319B   	fcall	_setDimmerLights_Initialization
 17379                           
 17380                           ;Dimmer_B1.c: 605: DimmerIntr_Initialization();
 17381  1B63  319F  27BC         	fcall	_DimmerIntr_Initialization
 17382  1B65  0008               	return
 17383  1B66                     __end_of_DimmerLights_Initialization:	
 17384                           
 17385                           	psect	text118
 17386  1AC8                     __ptext118:	
 17387 ;; *************** function _setDimmerLights_Initialization *****************
 17388 ;; Defined at:
 17389 ;;		line 609 in file "../src/Dimmer_B1.c"
 17390 ;; Parameters:    Size  Location     Type
 17391 ;;  lights          1    wreg     unsigned char 
 17392 ;; Auto vars:     Size  Location     Type
 17393 ;;  lights          1    0[COMMON] unsigned char 
 17394 ;; Return value:  Size  Location     Type
 17395 ;;		None               void
 17396 ;; Registers used:
 17397 ;;		wreg
 17398 ;; Tracked objects:
 17399 ;;		On entry : 0/0
 17400 ;;		On exit  : 0/0
 17401 ;;		Unchanged: 0/0
 17402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17407 ;;Total ram usage:        0 bytes
 17408 ;; Hardware stack levels used:    1
 17409 ;; Hardware stack levels required when called:    3
 17410 ;; This function calls:
 17411 ;;		Nothing
 17412 ;; This function is called by:
 17413 ;;		_DimmerLights_Initialization
 17414 ;; This function uses a non-reentrant model
 17415 ;;
 17416                           
 17417                           
 17418                           ;psect for function _setDimmerLights_Initialization
 17419  1AC8                     _setDimmerLights_Initialization:	
 17420                           
 17421                           ;incstack = 0
 17422                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17423  1AC8  0008               	return
 17424  1AC9                     __end_of_setDimmerLights_Initialization:	
 17425                           
 17426                           	psect	text119
 17427  1FBC                     __ptext119:	
 17428 ;; *************** function _DimmerIntr_Initialization *****************
 17429 ;; Defined at:
 17430 ;;		line 7 in file "../src/Dimmer_B1.c"
 17431 ;; Parameters:    Size  Location     Type
 17432 ;;		None
 17433 ;; Auto vars:     Size  Location     Type
 17434 ;;		None
 17435 ;; Return value:  Size  Location     Type
 17436 ;;		None               void
 17437 ;; Registers used:
 17438 ;;		wreg
 17439 ;; Tracked objects:
 17440 ;;		On entry : 0/0
 17441 ;;		On exit  : 0/0
 17442 ;;		Unchanged: 0/0
 17443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17447 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;Total ram usage:        1 bytes
 17449 ;; Hardware stack levels used:    1
 17450 ;; Hardware stack levels required when called:    3
 17451 ;; This function calls:
 17452 ;;		Nothing
 17453 ;; This function is called by:
 17454 ;;		_DimmerLights_Initialization
 17455 ;; This function uses a non-reentrant model
 17456 ;;
 17457                           
 17458                           
 17459                           ;psect for function _DimmerIntr_Initialization
 17460  1FBC                     _DimmerIntr_Initialization:	
 17461                           
 17462                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 17463                           
 17464                           ;incstack = 0
 17465                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17466  1FBC  3007               	movlw	7
 17467  1FBD  00F2               	movwf	??_DimmerIntr_Initialization
 17468  1FBE  0872               	movf	??_DimmerIntr_Initialization,w
 17469  1FBF  0021               	movlb	1	; select bank1
 17470  1FC0  00E0               	movwf	(_DimmerIntr1^(0+128)+3)
 17471                           
 17472                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(65*0.8));
 17473  1FC1  3034               	movlw	52
 17474  1FC2  00F2               	movwf	??_DimmerIntr_Initialization
 17475  1FC3  0872               	movf	??_DimmerIntr_Initialization,w
 17476  1FC4  00E2               	movwf	(_DimmerIntr1^(0+128)+5)
 17477                           
 17478                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(20*0.8));
 17479  1FC5  3010               	movlw	16
 17480  1FC6  00F2               	movwf	??_DimmerIntr_Initialization
 17481  1FC7  0872               	movf	??_DimmerIntr_Initialization,w
 17482  1FC8  00E3               	movwf	(_DimmerIntr1^(0+128)+6)
 17483                           
 17484                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(65*0.8));
 17485  1FC9  3034               	movlw	52
 17486  1FCA  00F2               	movwf	??_DimmerIntr_Initialization
 17487  1FCB  0872               	movf	??_DimmerIntr_Initialization,w
 17488  1FCC  00E1               	movwf	(_DimmerIntr1^(0+128)+4)
 17489                           
 17490                           ;Dimmer_B1.c: 15: DimmerIntr2.TuneTimeValue = 7;
 17491  1FCD  3007               	movlw	7
 17492  1FCE  00F2               	movwf	??_DimmerIntr_Initialization
 17493  1FCF  0872               	movf	??_DimmerIntr_Initialization,w
 17494  1FD0  00E7               	movwf	(_DimmerIntr2^(0+128)+3)
 17495                           
 17496                           ;Dimmer_B1.c: 16: DimmerIntr2.MaxmumValue = ((char)(65*0.8));
 17497  1FD1  3034               	movlw	52
 17498  1FD2  00F2               	movwf	??_DimmerIntr_Initialization
 17499  1FD3  0872               	movf	??_DimmerIntr_Initialization,w
 17500  1FD4  00E9               	movwf	(_DimmerIntr2^(0+128)+5)
 17501                           
 17502                           ;Dimmer_B1.c: 17: DimmerIntr2.MinimumValue = ((char)(20*0.8));
 17503  1FD5  3010               	movlw	16
 17504  1FD6  00F2               	movwf	??_DimmerIntr_Initialization
 17505  1FD7  0872               	movf	??_DimmerIntr_Initialization,w
 17506  1FD8  00EA               	movwf	(_DimmerIntr2^(0+128)+6)
 17507                           
 17508                           ;Dimmer_B1.c: 18: DimmerIntr2.DimmingValue = ((char)(65*0.8));
 17509  1FD9  3034               	movlw	52
 17510  1FDA  00F2               	movwf	??_DimmerIntr_Initialization
 17511  1FDB  0872               	movf	??_DimmerIntr_Initialization,w
 17512  1FDC  00E8               	movwf	(_DimmerIntr2^(0+128)+4)
 17513  1FDD  0008               	return
 17514  1FDE                     __end_of_DimmerIntr_Initialization:	
 17515                           
 17516                           	psect	text120
 17517  1B2E                     __ptext120:	
 17518 ;; *************** function _DelayOff_Main *****************
 17519 ;; Defined at:
 17520 ;;		line 41 in file "../src/DelayOff_B1.c"
 17521 ;; Parameters:    Size  Location     Type
 17522 ;;		None
 17523 ;; Auto vars:     Size  Location     Type
 17524 ;;		None
 17525 ;; Return value:  Size  Location     Type
 17526 ;;		None               void
 17527 ;; Registers used:
 17528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17529 ;; Tracked objects:
 17530 ;;		On entry : 0/0
 17531 ;;		On exit  : 0/0
 17532 ;;		Unchanged: 0/0
 17533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;Total ram usage:        0 bytes
 17539 ;; Hardware stack levels used:    1
 17540 ;; Hardware stack levels required when called:    7
 17541 ;; This function calls:
 17542 ;;		_DlyOff_Main
 17543 ;; This function is called by:
 17544 ;;		_main
 17545 ;; This function uses a non-reentrant model
 17546 ;;
 17547                           
 17548                           
 17549                           ;psect for function _DelayOff_Main
 17550  1B2E                     _DelayOff_Main:	
 17551                           
 17552                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17553                           
 17554                           ;incstack = 0
 17555                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17556  1B2E  3001               	movlw	1
 17557  1B2F  318A  2205  319B   	fcall	_DlyOff_Main
 17558                           
 17559                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 17560  1B32  3002               	movlw	2
 17561  1B33  318A  2205         	fcall	_DlyOff_Main
 17562  1B35  0008               	return
 17563  1B36                     __end_of_DelayOff_Main:	
 17564                           
 17565                           	psect	text121
 17566  0A05                     __ptext121:	
 17567 ;; *************** function _DlyOff_Main *****************
 17568 ;; Defined at:
 17569 ;;		line 61 in file "../src/DelayOff_B1.c"
 17570 ;; Parameters:    Size  Location     Type
 17571 ;;  sw              1    wreg     unsigned char 
 17572 ;; Auto vars:     Size  Location     Type
 17573 ;;  sw              1   73[BANK0 ] unsigned char 
 17574 ;; Return value:  Size  Location     Type
 17575 ;;		None               void
 17576 ;; Registers used:
 17577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17578 ;; Tracked objects:
 17579 ;;		On entry : 0/0
 17580 ;;		On exit  : 0/0
 17581 ;;		Unchanged: 0/0
 17582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17585 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17586 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17587 ;;Total ram usage:        3 bytes
 17588 ;; Hardware stack levels used:    1
 17589 ;; Hardware stack levels required when called:    6
 17590 ;; This function calls:
 17591 ;;		_DelayOffPointSelect
 17592 ;;		_getDimmerLights_Status
 17593 ;;		_setDimmerLights_SwOff
 17594 ;;		_setDimmerLights_SwOn
 17595 ;; This function is called by:
 17596 ;;		_DelayOff_Main
 17597 ;; This function uses a non-reentrant model
 17598 ;;
 17599                           
 17600                           
 17601                           ;psect for function _DlyOff_Main
 17602  0A05                     _DlyOff_Main:	
 17603                           
 17604                           ;incstack = 0
 17605                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17606                           ;DlyOff_Main@sw stored from wreg
 17607  0A05  0020               	movlb	0	; select bank0
 17608  0A06  00E9               	movwf	DlyOff_Main@sw
 17609                           
 17610                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17611  0A07  0869               	movf	DlyOff_Main@sw,w
 17612  0A08  319D  2552  318A   	fcall	_DelayOffPointSelect
 17613                           
 17614                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17615  0A0B  0021               	movlb	1	; select bank1
 17616  0A0C  0841               	movf	_DelayOff^(0+128),w
 17617  0A0D  0086               	movwf	6
 17618  0A0E  3001               	movlw	1	; select bank2/3
 17619  0A0F  0087               	movwf	7
 17620  0A10  1C81               	btfss	1,1
 17621  0A11  0008               	return
 17622                           
 17623                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17624  0A12  0841               	movf	_DelayOff^(0+128),w
 17625  0A13  3E02               	addlw	2
 17626  0A14  0086               	movwf	6
 17627  0A15  3001               	movlw	1	; select bank2/3
 17628  0A16  0087               	movwf	7
 17629  0A17  3001               	movlw	1
 17630  0A18  0781               	addwf	1,f
 17631  0A19  3141               	addfsr 1,1
 17632  0A1A  1803               	skipnc
 17633  0A1B  0A81               	incf	1,f
 17634                           
 17635                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17636  0A1C  0841               	movf	_DelayOff^(0+128),w
 17637  0A1D  3E02               	addlw	2
 17638  0A1E  0086               	movwf	6
 17639  0A1F  3001               	movlw	1	; select bank2/3
 17640  0A20  0087               	movwf	7
 17641  0A21  3F40               	moviw [0]fsr1
 17642  0A22  0020               	movlb	0	; select bank0
 17643  0A23  00E7               	movwf	??_DlyOff_Main
 17644  0A24  3F41               	moviw [1]fsr1
 17645  0A25  00E8               	movwf	??_DlyOff_Main+1
 17646  0A26  300B               	movlw	11
 17647  0A27  0268               	subwf	??_DlyOff_Main+1,w
 17648  0A28  30B8               	movlw	184
 17649  0A29  1903               	skipnz
 17650  0A2A  0267               	subwf	??_DlyOff_Main,w
 17651  0A2B  1C03               	skipc
 17652  0A2C  0008               	return
 17653                           
 17654                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17655  0A2D  0021               	movlb	1	; select bank1
 17656  0A2E  0841               	movf	_DelayOff^(0+128),w
 17657  0A2F  3E02               	addlw	2
 17658  0A30  0086               	movwf	6
 17659  0A31  3001               	movlw	1	; select bank2/3
 17660  0A32  0087               	movwf	7
 17661  0A33  3000               	movlw	0
 17662  0A34  3FC0               	movwi [0]fsr1
 17663  0A35  3FC1               	movwi [1]fsr1
 17664                           
 17665                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17666  0A36  3001               	movlw	1
 17667  0A37  0020               	movlb	0	; select bank0
 17668  0A38  00E7               	movwf	??_DlyOff_Main
 17669  0A39  0021               	movlb	1	; select bank1
 17670  0A3A  0841               	movf	_DelayOff^(0+128),w
 17671  0A3B  3E04               	addlw	4
 17672  0A3C  0086               	movwf	6
 17673  0A3D  3001               	movlw	1	; select bank2/3
 17674  0A3E  0087               	movwf	7
 17675  0A3F  0020               	movlb	0	; select bank0
 17676  0A40  0867               	movf	??_DlyOff_Main,w
 17677  0A41  0781               	addwf	1,f
 17678                           
 17679                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17680  0A42  0021               	movlb	1	; select bank1
 17681  0A43  0841               	movf	_DelayOff^(0+128),w
 17682  0A44  3E04               	addlw	4
 17683  0A45  0086               	movwf	6
 17684  0A46  3001               	movlw	1	; select bank2/3
 17685  0A47  0087               	movwf	7
 17686  0A48  0A41               	incf	_DelayOff^(0+128),w
 17687  0A49  0084               	movwf	4
 17688  0A4A  3001               	movlw	1	; select bank2/3
 17689  0A4B  0085               	movwf	5
 17690  0A4C  0800               	movf	0,w
 17691  0A4D  0201               	subwf	1,w
 17692  0A4E  1C03               	skipc
 17693  0A4F  0008               	return
 17694                           
 17695                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17696  0A50  0841               	movf	_DelayOff^(0+128),w
 17697  0A51  3E04               	addlw	4
 17698  0A52  0086               	movwf	6
 17699  0A53  3001               	movlw	1	; select bank2/3
 17700  0A54  0087               	movwf	7
 17701  0A55  0181               	clrf	1
 17702                           
 17703                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17704  0A56  0841               	movf	_DelayOff^(0+128),w
 17705  0A57  0086               	movwf	6
 17706  0A58  3001               	movlw	1	; select bank2/3
 17707  0A59  0087               	movwf	7
 17708  0A5A  1081               	bcf	1,1
 17709                           
 17710                           ;DelayOff_B1.c: 74: if (getDimmerLights_Status(sw) == 1) {
 17711  0A5B  0020               	movlb	0	; select bank0
 17712  0A5C  0869               	movf	DlyOff_Main@sw,w
 17713  0A5D  319B  23F9  318A   	fcall	_getDimmerLights_Status
 17714  0A60  3A01               	xorlw	1
 17715  0A61  1D03               	skipz
 17716  0A62  0008               	return
 17717                           
 17718                           ;DelayOff_B1.c: 75: setDimmerLights_SwOn(sw);
 17719  0A63  0020               	movlb	0	; select bank0
 17720  0A64  0869               	movf	DlyOff_Main@sw,w
 17721  0A65  3196  268D  318A   	fcall	_setDimmerLights_SwOn
 17722                           
 17723                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 17724  0A68  0020               	movlb	0	; select bank0
 17725  0A69  0869               	movf	DlyOff_Main@sw,w
 17726  0A6A  3194  240E         	fcall	_setDimmerLights_SwOff
 17727  0A6C  0008               	return
 17728  0A6D                     __end_of_DlyOff_Main:	
 17729                           
 17730                           	psect	text122
 17731  168D                     __ptext122:	
 17732 ;; *************** function _setDimmerLights_SwOn *****************
 17733 ;; Defined at:
 17734 ;;		line 649 in file "../src/Dimmer_B1.c"
 17735 ;; Parameters:    Size  Location     Type
 17736 ;;  sw              1    wreg     unsigned char 
 17737 ;; Auto vars:     Size  Location     Type
 17738 ;;  sw              1    9[BANK0 ] unsigned char 
 17739 ;;  idle            1    8[BANK0 ] unsigned char 
 17740 ;; Return value:  Size  Location     Type
 17741 ;;		None               void
 17742 ;; Registers used:
 17743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17744 ;; Tracked objects:
 17745 ;;		On entry : 0/0
 17746 ;;		On exit  : 0/0
 17747 ;;		Unchanged: 0/0
 17748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17750 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17751 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17752 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17753 ;;Total ram usage:        5 bytes
 17754 ;; Hardware stack levels used:    1
 17755 ;; Hardware stack levels required when called:    5
 17756 ;; This function calls:
 17757 ;;		_DimmerLights_SelectPointer
 17758 ;;		_setBuz
 17759 ;; This function is called by:
 17760 ;;		_DlyOff_Main
 17761 ;;		_setControl_Lights_Table
 17762 ;;		_setRFSW_Control
 17763 ;;		_setRFSW_AdjControl
 17764 ;;		_setSw_Main
 17765 ;; This function uses a non-reentrant model
 17766 ;;
 17767                           
 17768                           
 17769                           ;psect for function _setDimmerLights_SwOn
 17770  168D                     _setDimmerLights_SwOn:	
 17771                           
 17772                           ;incstack = 0
 17773                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17774                           ;setDimmerLights_SwOn@sw stored from wreg
 17775  168D  0020               	movlb	0	; select bank0
 17776  168E  00A9               	movwf	setDimmerLights_SwOn@sw
 17777                           
 17778                           ;Dimmer_B1.c: 650: char idle = 0;
 17779  168F  01A8               	clrf	setDimmerLights_SwOn@idle
 17780                           
 17781                           ;Dimmer_B1.c: 652: if (idle == 0) {
 17782  1690  08A8               	movf	setDimmerLights_SwOn@idle,f
 17783  1691  1D03               	skipz
 17784  1692  2EB7               	goto	l9479
 17785                           
 17786                           ;Dimmer_B1.c: 653: if (sw == 1) {
 17787  1693  0829               	movf	setDimmerLights_SwOn@sw,w
 17788  1694  3A01               	xorlw	1
 17789  1695  1D03               	skipz
 17790  1696  2EA4               	goto	l9469
 17791                           
 17792                           ;Dimmer_B1.c: 654: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 17793  1697  01A6               	clrf	_setDimmerLights_SwOn$2159
 17794  1698  0AA6               	incf	_setDimmerLights_SwOn$2159,f
 17795  1699  0023               	movlb	3	; select bank3
 17796  169A  1A47               	btfsc	_DimmerLights2^(0+384),4
 17797  169B  2EA1               	goto	l9467
 17798  169C  0021               	movlb	1	; select bank1
 17799  169D  1A64               	btfsc	_DimmerIntr2^(0+128),4
 17800  169E  2EA1               	goto	l9467
 17801  169F  0020               	movlb	0	; select bank0
 17802  16A0  01A6               	clrf	_setDimmerLights_SwOn$2159
 17803  16A1                     l9467:	
 17804  16A1  0020               	movlb	0	; select bank0
 17805  16A2  0826               	movf	_setDimmerLights_SwOn$2159,w
 17806  16A3  2EB4               	goto	L11
 17807  16A4                     l9469:	
 17808                           ;Dimmer_B1.c: 655: } else if (sw == 2) {
 17809                           
 17810  16A4  0829               	movf	setDimmerLights_SwOn@sw,w
 17811  16A5  3A02               	xorlw	2
 17812  16A6  1D03               	skipz
 17813  16A7  2EB7               	goto	l9479
 17814                           
 17815                           ;Dimmer_B1.c: 656: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 17816  16A8  01A7               	clrf	_setDimmerLights_SwOn$2160
 17817  16A9  0AA7               	incf	_setDimmerLights_SwOn$2160,f
 17818  16AA  0023               	movlb	3	; select bank3
 17819  16AB  1A3E               	btfsc	_DimmerLights1^(0+384),4
 17820  16AC  2EB2               	goto	l9477
 17821  16AD  0021               	movlb	1	; select bank1
 17822  16AE  1A5D               	btfsc	_DimmerIntr1^(0+128),4
 17823  16AF  2EB2               	goto	l9477
 17824  16B0  0020               	movlb	0	; select bank0
 17825  16B1  01A7               	clrf	_setDimmerLights_SwOn$2160
 17826  16B2                     l9477:	
 17827  16B2  0020               	movlb	0	; select bank0
 17828  16B3  0827               	movf	_setDimmerLights_SwOn$2160,w
 17829  16B4                     L11:	
 17830  16B4  00F9               	movwf	??_setDimmerLights_SwOn
 17831  16B5  0879               	movf	??_setDimmerLights_SwOn,w
 17832  16B6  00A8               	movwf	setDimmerLights_SwOn@idle
 17833  16B7                     l9479:	
 17834                           
 17835                           ;Dimmer_B1.c: 657: }
 17836                           ;Dimmer_B1.c: 658: }
 17837                           ;Dimmer_B1.c: 675: DimmerLights_SelectPointer(sw);
 17838  16B7  0829               	movf	setDimmerLights_SwOn@sw,w
 17839  16B8  319D  2567  3196   	fcall	_DimmerLights_SelectPointer
 17840                           
 17841                           ;Dimmer_B1.c: 676: if (idle == 0) {
 17842  16BB  0020               	movlb	0	; select bank0
 17843  16BC  08A8               	movf	setDimmerLights_SwOn@idle,f
 17844  16BD  1D03               	skipz
 17845  16BE  0008               	return
 17846                           
 17847                           ;Dimmer_B1.c: 677: DimmerLights->SwFlag = 1;
 17848  16BF  086D               	movf	_DimmerLights,w
 17849  16C0  0086               	movwf	6
 17850  16C1  3001               	movlw	1	; select bank2/3
 17851  16C2  0087               	movwf	7
 17852  16C3  1401               	bsf	1,0
 17853                           
 17854                           ;Dimmer_B1.c: 678: if (DimmerLights->Status == 0) {
 17855  16C4  0A6D               	incf	_DimmerLights,w
 17856  16C5  0086               	movwf	6
 17857  16C6  3001               	movlw	1	; select bank2/3
 17858  16C7  0087               	movwf	7
 17859  16C8  1801               	btfsc	1,0
 17860  16C9  2EDA               	goto	l9487
 17861                           
 17862                           ;Dimmer_B1.c: 679: DimmerLights->Status = 1;
 17863  16CA  0A6D               	incf	_DimmerLights,w
 17864  16CB  0086               	movwf	6
 17865  16CC  3001               	movlw	1	; select bank2/3
 17866  16CD  0087               	movwf	7
 17867  16CE  1401               	bsf	1,0
 17868                           
 17869                           ;Dimmer_B1.c: 680: DimmerLights->Trigger = 1;
 17870  16CF  086D               	movf	_DimmerLights,w
 17871  16D0  0086               	movwf	6
 17872  16D1  3001               	movlw	1	; select bank2/3
 17873  16D2  0087               	movwf	7
 17874  16D3  1481               	bsf	1,1
 17875                           
 17876                           ;Dimmer_B1.c: 681: DimmerLights->Switch = 1;
 17877  16D4  086D               	movf	_DimmerLights,w
 17878  16D5  0086               	movwf	6
 17879  16D6  3001               	movlw	1	; select bank2/3
 17880  16D7  0087               	movwf	7
 17881  16D8  1501               	bsf	1,2
 17882                           
 17883                           ;Dimmer_B1.c: 682: } else {
 17884  16D9  2EDF               	goto	l9489
 17885  16DA                     l9487:	
 17886                           
 17887                           ;Dimmer_B1.c: 683: DimmerLights->Status = 0;
 17888  16DA  0A6D               	incf	_DimmerLights,w
 17889  16DB  0086               	movwf	6
 17890  16DC  3001               	movlw	1	; select bank2/3
 17891  16DD  0087               	movwf	7
 17892  16DE  1001               	bcf	1,0
 17893  16DF                     l9489:	
 17894                           
 17895                           ;Dimmer_B1.c: 684: }
 17896                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 17897  16DF  3064               	movlw	100
 17898  16E0  00A4               	movwf	setBuz@time
 17899  16E1  3000               	movlw	0
 17900  16E2  00A5               	movwf	setBuz@time+1
 17901  16E3  3001               	movlw	1
 17902  16E4  3195  25E6         	fcall	_setBuz
 17903  16E6  0008               	return
 17904  16E7                     __end_of_setDimmerLights_SwOn:	
 17905                           
 17906                           	psect	text123
 17907  15E6                     __ptext123:	
 17908 ;; *************** function _setBuz *****************
 17909 ;; Defined at:
 17910 ;;		line 22 in file "../src/Buzzer_B1.c"
 17911 ;; Parameters:    Size  Location     Type
 17912 ;;  count           1    wreg     unsigned char 
 17913 ;;  time            2    4[BANK0 ] int 
 17914 ;; Auto vars:     Size  Location     Type
 17915 ;;  count           1    8[COMMON] unsigned char 
 17916 ;; Return value:  Size  Location     Type
 17917 ;;		None               void
 17918 ;; Registers used:
 17919 ;;		wreg, status,2, status,0, pclath, cstack
 17920 ;; Tracked objects:
 17921 ;;		On entry : 0/0
 17922 ;;		On exit  : 0/0
 17923 ;;		Unchanged: 0/0
 17924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17927 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17928 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17929 ;;Total ram usage:        4 bytes
 17930 ;; Hardware stack levels used:    1
 17931 ;; Hardware stack levels required when called:    4
 17932 ;; This function calls:
 17933 ;;		___awdiv
 17934 ;; This function is called by:
 17935 ;;		_setDimmerLights_SwOn
 17936 ;;		_setDimmerLights_Dimming
 17937 ;;		_setTemp_Main
 17938 ;;		_setLog_Code
 17939 ;;		_setRFSW_Control
 17940 ;;		_setSw_Main
 17941 ;;		_my_MainTimer
 17942 ;;		_Exception_Main
 17943 ;; This function uses a non-reentrant model
 17944 ;;
 17945                           
 17946                           
 17947                           ;psect for function _setBuz
 17948  15E6                     _setBuz:	
 17949                           
 17950                           ;incstack = 0
 17951                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 17952                           ;setBuz@count stored from wreg
 17953  15E6  00F8               	movwf	setBuz@count
 17954                           
 17955                           ;Buzzer_B1.c: 23: time /= 20;
 17956  15E7  3014               	movlw	20
 17957  15E8  00F2               	movwf	___awdiv@divisor
 17958  15E9  3000               	movlw	0
 17959  15EA  00F3               	movwf	___awdiv@divisor+1
 17960  15EB  0020               	movlb	0	; select bank0
 17961  15EC  0825               	movf	setBuz@time+1,w
 17962  15ED  01F5               	clrf	___awdiv@dividend+1
 17963  15EE  07F5               	addwf	___awdiv@dividend+1,f
 17964  15EF  0824               	movf	setBuz@time,w
 17965  15F0  01F4               	clrf	___awdiv@dividend
 17966  15F1  07F4               	addwf	___awdiv@dividend,f
 17967  15F2  3196  2639  3195   	fcall	___awdiv
 17968  15F5  0873               	movf	?___awdiv+1,w
 17969  15F6  0020               	movlb	0	; select bank0
 17970  15F7  01A5               	clrf	setBuz@time+1
 17971  15F8  07A5               	addwf	setBuz@time+1,f
 17972  15F9  0872               	movf	?___awdiv,w
 17973  15FA  01A4               	clrf	setBuz@time
 17974  15FB  07A4               	addwf	setBuz@time,f
 17975                           
 17976                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17977  15FC  0021               	movlb	1	; select bank1
 17978  15FD  1C2E               	btfss	_Buz1^(0+128),0
 17979  15FE  0008               	return
 17980                           
 17981                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17982  15FF  18AE               	btfsc	_Buz1^(0+128),1
 17983  1600  2E15               	goto	l96
 17984                           
 17985                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17986  1601  14AE               	bsf	_Buz1^(0+128),1
 17987                           
 17988                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17989  1602  01AF               	clrf	(_Buz1^(0+128)+1)
 17990  1603  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17991                           
 17992                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17993  1604  0878               	movf	setBuz@count,w
 17994  1605  00F7               	movwf	??_setBuz
 17995  1606  0877               	movf	??_setBuz,w
 17996  1607  00B1               	movwf	(_Buz1^(0+128)+3)
 17997                           
 17998                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17999  1608  0020               	movlb	0	; select bank0
 18000  1609  0825               	movf	setBuz@time+1,w
 18001  160A  0021               	movlb	1	; select bank1
 18002  160B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18003  160C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18004  160D  0020               	movlb	0	; select bank0
 18005  160E  0824               	movf	setBuz@time,w
 18006  160F  0021               	movlb	1	; select bank1
 18007  1610  01B4               	clrf	(_Buz1^(0+128)+6)
 18008  1611  07B4               	addwf	(_Buz1^(0+128)+6),f
 18009                           
 18010                           ;Buzzer_B1.c: 30: RB3 = 1;
 18011  1612  0020               	movlb	0	; select bank0
 18012  1613  158D               	bsf	13,3	;volatile
 18013                           
 18014                           ;Buzzer_B1.c: 31: } else {
 18015  1614  0008               	return
 18016  1615                     l96:	
 18017                           
 18018                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18019  1615  19AE               	btfsc	_Buz1^(0+128),3
 18020  1616  2E27               	goto	l98
 18021                           
 18022                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18023  1617  15AE               	bsf	_Buz1^(0+128),3
 18024                           
 18025                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18026  1618  0878               	movf	setBuz@count,w
 18027  1619  00F7               	movwf	??_setBuz
 18028  161A  0877               	movf	??_setBuz,w
 18029  161B  00B2               	movwf	(_Buz1^(0+128)+4)
 18030                           
 18031                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18032  161C  0020               	movlb	0	; select bank0
 18033  161D  0825               	movf	setBuz@time+1,w
 18034  161E  0021               	movlb	1	; select bank1
 18035  161F  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18036  1620  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18037  1621  0020               	movlb	0	; select bank0
 18038  1622  0824               	movf	setBuz@time,w
 18039  1623  0021               	movlb	1	; select bank1
 18040  1624  01B6               	clrf	(_Buz1^(0+128)+8)
 18041  1625  07B6               	addwf	(_Buz1^(0+128)+8),f
 18042                           
 18043                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18044  1626  0008               	return
 18045  1627                     l98:	
 18046  1627  1A2E               	btfsc	_Buz1^(0+128),4
 18047  1628  0008               	return
 18048                           
 18049                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18050  1629  162E               	bsf	_Buz1^(0+128),4
 18051                           
 18052                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18053  162A  0878               	movf	setBuz@count,w
 18054  162B  00F7               	movwf	??_setBuz
 18055  162C  0877               	movf	??_setBuz,w
 18056  162D  00B3               	movwf	(_Buz1^(0+128)+5)
 18057                           
 18058                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18059  162E  0020               	movlb	0	; select bank0
 18060  162F  0825               	movf	setBuz@time+1,w
 18061  1630  0021               	movlb	1	; select bank1
 18062  1631  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18063  1632  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18064  1633  0020               	movlb	0	; select bank0
 18065  1634  0824               	movf	setBuz@time,w
 18066  1635  0021               	movlb	1	; select bank1
 18067  1636  01B8               	clrf	(_Buz1^(0+128)+10)
 18068  1637  07B8               	addwf	(_Buz1^(0+128)+10),f
 18069  1638  0008               	return
 18070  1639                     __end_of_setBuz:	
 18071                           
 18072                           	psect	text124
 18073  1639                     __ptext124:	
 18074 ;; *************** function ___awdiv *****************
 18075 ;; Defined at:
 18076 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18077 ;; Parameters:    Size  Location     Type
 18078 ;;  divisor         2    2[COMMON] int 
 18079 ;;  dividend        2    4[COMMON] int 
 18080 ;; Auto vars:     Size  Location     Type
 18081 ;;  quotient        2    2[BANK0 ] int 
 18082 ;;  sign            1    1[BANK0 ] unsigned char 
 18083 ;;  counter         1    0[BANK0 ] unsigned char 
 18084 ;; Return value:  Size  Location     Type
 18085 ;;                  2    2[COMMON] int 
 18086 ;; Registers used:
 18087 ;;		wreg, status,2, status,0
 18088 ;; Tracked objects:
 18089 ;;		On entry : 0/0
 18090 ;;		On exit  : 0/0
 18091 ;;		Unchanged: 0/0
 18092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18093 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18094 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18095 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18096 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18097 ;;Total ram usage:        9 bytes
 18098 ;; Hardware stack levels used:    1
 18099 ;; Hardware stack levels required when called:    3
 18100 ;; This function calls:
 18101 ;;		Nothing
 18102 ;; This function is called by:
 18103 ;;		_setBuz
 18104 ;; This function uses a non-reentrant model
 18105 ;;
 18106                           
 18107                           
 18108                           ;psect for function ___awdiv
 18109  1639                     ___awdiv:	
 18110                           
 18111                           ;incstack = 0
 18112                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18113  1639  0020               	movlb	0	; select bank0
 18114  163A  01A1               	clrf	___awdiv@sign
 18115  163B  1FF3               	btfss	___awdiv@divisor+1,7
 18116  163C  2E44               	goto	l9077
 18117  163D  09F2               	comf	___awdiv@divisor,f
 18118  163E  09F3               	comf	___awdiv@divisor+1,f
 18119  163F  0AF2               	incf	___awdiv@divisor,f
 18120  1640  1903               	skipnz
 18121  1641  0AF3               	incf	___awdiv@divisor+1,f
 18122  1642  01A1               	clrf	___awdiv@sign
 18123  1643  0AA1               	incf	___awdiv@sign,f
 18124  1644                     l9077:	
 18125  1644  1FF5               	btfss	___awdiv@dividend+1,7
 18126  1645  2E4F               	goto	l9083
 18127  1646  09F4               	comf	___awdiv@dividend,f
 18128  1647  09F5               	comf	___awdiv@dividend+1,f
 18129  1648  0AF4               	incf	___awdiv@dividend,f
 18130  1649  1903               	skipnz
 18131  164A  0AF5               	incf	___awdiv@dividend+1,f
 18132  164B  3001               	movlw	1
 18133  164C  00F6               	movwf	??___awdiv
 18134  164D  0876               	movf	??___awdiv,w
 18135  164E  06A1               	xorwf	___awdiv@sign,f
 18136  164F                     l9083:	
 18137  164F  01A2               	clrf	___awdiv@quotient
 18138  1650  01A3               	clrf	___awdiv@quotient+1
 18139  1651  0873               	movf	___awdiv@divisor+1,w
 18140  1652  0472               	iorwf	___awdiv@divisor,w
 18141  1653  1903               	skipnz
 18142  1654  2E7E               	goto	l9105
 18143  1655  01A0               	clrf	___awdiv@counter
 18144  1656  0AA0               	incf	___awdiv@counter,f
 18145  1657                     l9093:	
 18146  1657  1BF3               	btfsc	___awdiv@divisor+1,7
 18147  1658  2E63               	goto	l9095
 18148  1659  3001               	movlw	1
 18149  165A                     u10175:	
 18150  165A  35F2               	lslf	___awdiv@divisor,f
 18151  165B  0DF3               	rlf	___awdiv@divisor+1,f
 18152  165C  0B89               	decfsz	9,f
 18153  165D  2E5A               	goto	u10175
 18154  165E  3001               	movlw	1
 18155  165F  00F6               	movwf	??___awdiv
 18156  1660  0876               	movf	??___awdiv,w
 18157  1661  07A0               	addwf	___awdiv@counter,f
 18158  1662  2E57               	goto	l9093
 18159  1663                     l9095:	
 18160  1663  3001               	movlw	1
 18161  1664                     u10195:	
 18162  1664  35A2               	lslf	___awdiv@quotient,f
 18163  1665  0DA3               	rlf	___awdiv@quotient+1,f
 18164  1666  0B89               	decfsz	9,f
 18165  1667  2E64               	goto	u10195
 18166  1668  0873               	movf	___awdiv@divisor+1,w
 18167  1669  0275               	subwf	___awdiv@dividend+1,w
 18168  166A  1D03               	skipz
 18169  166B  2E6E               	goto	u10205
 18170  166C  0872               	movf	___awdiv@divisor,w
 18171  166D  0274               	subwf	___awdiv@dividend,w
 18172  166E                     u10205:	
 18173  166E  1C03               	skipc
 18174  166F  2E75               	goto	l9101
 18175  1670  0872               	movf	___awdiv@divisor,w
 18176  1671  02F4               	subwf	___awdiv@dividend,f
 18177  1672  0873               	movf	___awdiv@divisor+1,w
 18178  1673  3BF5               	subwfb	___awdiv@dividend+1,f
 18179  1674  1422               	bsf	___awdiv@quotient,0
 18180  1675                     l9101:	
 18181  1675  3001               	movlw	1
 18182  1676                     u10215:	
 18183  1676  36F3               	lsrf	___awdiv@divisor+1,f
 18184  1677  0CF2               	rrf	___awdiv@divisor,f
 18185  1678  0B89               	decfsz	9,f
 18186  1679  2E76               	goto	u10215
 18187  167A  3001               	movlw	1
 18188  167B  02A0               	subwf	___awdiv@counter,f
 18189  167C  1D03               	btfss	3,2
 18190  167D  2E63               	goto	l9095
 18191  167E                     l9105:	
 18192  167E  0821               	movf	___awdiv@sign,w
 18193  167F  1903               	btfsc	3,2
 18194  1680  2E86               	goto	l9109
 18195  1681  09A2               	comf	___awdiv@quotient,f
 18196  1682  09A3               	comf	___awdiv@quotient+1,f
 18197  1683  0AA2               	incf	___awdiv@quotient,f
 18198  1684  1903               	skipnz
 18199  1685  0AA3               	incf	___awdiv@quotient+1,f
 18200  1686                     l9109:	
 18201  1686  0823               	movf	___awdiv@quotient+1,w
 18202  1687  01F3               	clrf	?___awdiv+1
 18203  1688  07F3               	addwf	?___awdiv+1,f
 18204  1689  0822               	movf	___awdiv@quotient,w
 18205  168A  01F2               	clrf	?___awdiv
 18206  168B  07F2               	addwf	?___awdiv,f
 18207  168C  0008               	return
 18208  168D                     __end_of___awdiv:	
 18209                           
 18210                           	psect	text125
 18211  140E                     __ptext125:	
 18212 ;; *************** function _setDimmerLights_SwOff *****************
 18213 ;; Defined at:
 18214 ;;		line 690 in file "../src/Dimmer_B1.c"
 18215 ;; Parameters:    Size  Location     Type
 18216 ;;  sw              1    wreg     unsigned char 
 18217 ;; Auto vars:     Size  Location     Type
 18218 ;;  sw              1   70[BANK0 ] unsigned char 
 18219 ;; Return value:  Size  Location     Type
 18220 ;;		None               void
 18221 ;; Registers used:
 18222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18223 ;; Tracked objects:
 18224 ;;		On entry : 0/0
 18225 ;;		On exit  : 0/0
 18226 ;;		Unchanged: 0/0
 18227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18232 ;;Total ram usage:        1 bytes
 18233 ;; Hardware stack levels used:    1
 18234 ;; Hardware stack levels required when called:    5
 18235 ;; This function calls:
 18236 ;;		_DimmerLights_SelectPointer
 18237 ;;		_getDelayOff_GO
 18238 ;;		_setDelayOff_GO
 18239 ;; This function is called by:
 18240 ;;		_DlyOff_Main
 18241 ;;		_setControl_Lights_Table
 18242 ;;		_setRFSW_Control
 18243 ;;		_setRFSW_AdjControl
 18244 ;;		_setSw_Main
 18245 ;;		_Exception_Main
 18246 ;; This function uses a non-reentrant model
 18247 ;;
 18248                           
 18249                           
 18250                           ;psect for function _setDimmerLights_SwOff
 18251  140E                     _setDimmerLights_SwOff:	
 18252                           
 18253                           ;incstack = 0
 18254                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18255                           ;setDimmerLights_SwOff@sw stored from wreg
 18256  140E  0020               	movlb	0	; select bank0
 18257  140F  00E6               	movwf	setDimmerLights_SwOff@sw
 18258                           
 18259                           ;Dimmer_B1.c: 691: DimmerLights_SelectPointer(sw);
 18260  1410  0866               	movf	setDimmerLights_SwOff@sw,w
 18261  1411  319D  2567  3194   	fcall	_DimmerLights_SelectPointer
 18262                           
 18263                           ;Dimmer_B1.c: 693: if (DimmerLights->SwFlag == 1) {
 18264  1414  0020               	movlb	0	; select bank0
 18265  1415  086D               	movf	_DimmerLights,w
 18266  1416  0086               	movwf	6
 18267  1417  3001               	movlw	1	; select bank2/3
 18268  1418  0087               	movwf	7
 18269  1419  1C01               	btfss	1,0
 18270  141A  0008               	return
 18271                           
 18272                           ;Dimmer_B1.c: 694: DimmerLights->SwFlag = 0;
 18273  141B  086D               	movf	_DimmerLights,w
 18274  141C  0086               	movwf	6
 18275  141D  3001               	movlw	1	; select bank2/3
 18276  141E  0087               	movwf	7
 18277  141F  1001               	bcf	1,0
 18278                           
 18279                           ;Dimmer_B1.c: 695: if (DimmerLights->Status == 1) {
 18280  1420  0A6D               	incf	_DimmerLights,w
 18281  1421  0086               	movwf	6
 18282  1422  3001               	movlw	1	; select bank2/3
 18283  1423  0087               	movwf	7
 18284  1424  1C01               	btfss	1,0
 18285  1425  2C3C               	goto	l9501
 18286                           
 18287                           ;Dimmer_B1.c: 696: if (DimmerLights->DimmingSwFlag == 1) {
 18288  1426  086D               	movf	_DimmerLights,w
 18289  1427  0086               	movwf	6
 18290  1428  3001               	movlw	1	; select bank2/3
 18291  1429  0087               	movwf	7
 18292  142A  1D81               	btfss	1,3
 18293  142B  0008               	return
 18294                           
 18295                           ;Dimmer_B1.c: 697: DimmerLights->DimmingSwFlag = 0;
 18296  142C  086D               	movf	_DimmerLights,w
 18297  142D  0086               	movwf	6
 18298  142E  3001               	movlw	1	; select bank2/3
 18299  142F  0087               	movwf	7
 18300  1430  1181               	bcf	1,3
 18301                           
 18302                           ;Dimmer_B1.c: 699: DimmerLights->DimmingTrigger = 1;
 18303  1431  086D               	movf	_DimmerLights,w
 18304  1432  0086               	movwf	6
 18305  1433  3001               	movlw	1	; select bank2/3
 18306  1434  0087               	movwf	7
 18307  1435  1601               	bsf	1,4
 18308                           
 18309                           ;Dimmer_B1.c: 700: DimmerLights->DimmingSwitch = 0;
 18310  1436  086D               	movf	_DimmerLights,w
 18311  1437  0086               	movwf	6
 18312  1438  3001               	movlw	1	; select bank2/3
 18313  1439  0087               	movwf	7
 18314  143A  1281               	bcf	1,5
 18315                           
 18316                           ;Dimmer_B1.c: 701: }
 18317                           ;Dimmer_B1.c: 702: } else {
 18318  143B  0008               	return
 18319  143C                     l9501:	
 18320                           
 18321                           ;Dimmer_B1.c: 703: DimmerLights->Trigger = 1;
 18322  143C  086D               	movf	_DimmerLights,w
 18323  143D  0086               	movwf	6
 18324  143E  3001               	movlw	1	; select bank2/3
 18325  143F  0087               	movwf	7
 18326  1440  1481               	bsf	1,1
 18327                           
 18328                           ;Dimmer_B1.c: 704: DimmerLights->Switch = 0;
 18329  1441  086D               	movf	_DimmerLights,w
 18330  1442  0086               	movwf	6
 18331  1443  3001               	movlw	1	; select bank2/3
 18332  1444  0087               	movwf	7
 18333  1445  1101               	bcf	1,2
 18334                           
 18335                           ;Dimmer_B1.c: 707: if (getDelayOff_GO(sw) == 1) {
 18336  1446  0866               	movf	setDimmerLights_SwOff@sw,w
 18337  1447  319C  2408  3194   	fcall	_getDelayOff_GO
 18338  144A  3A01               	xorlw	1
 18339  144B  1D03               	skipz
 18340  144C  0008               	return
 18341                           
 18342                           ;Dimmer_B1.c: 708: setDelayOff_GO(sw, 0, 0);
 18343  144D  0020               	movlb	0	; select bank0
 18344  144E  01DE               	clrf	setDelayOff_GO@command
 18345  144F  01DF               	clrf	setDelayOff_GO@value
 18346  1450  0866               	movf	setDimmerLights_SwOff@sw,w
 18347  1451  318B  2340         	fcall	_setDelayOff_GO
 18348  1453  0008               	return
 18349  1454                     __end_of_setDimmerLights_SwOff:	
 18350                           
 18351                           	psect	text126
 18352  0B40                     __ptext126:	
 18353 ;; *************** function _setDelayOff_GO *****************
 18354 ;; Defined at:
 18355 ;;		line 85 in file "../src/DelayOff_B1.c"
 18356 ;; Parameters:    Size  Location     Type
 18357 ;;  sw              1    wreg     unsigned char 
 18358 ;;  command         1   62[BANK0 ] unsigned char 
 18359 ;;  value           1   63[BANK0 ] unsigned char 
 18360 ;; Auto vars:     Size  Location     Type
 18361 ;;  sw              1   69[BANK0 ] unsigned char 
 18362 ;;  k               1   68[BANK0 ] unsigned char 
 18363 ;;  j               1   67[BANK0 ] unsigned char 
 18364 ;;  i               1   66[BANK0 ] unsigned char 
 18365 ;; Return value:  Size  Location     Type
 18366 ;;		None               void
 18367 ;; Registers used:
 18368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18369 ;; Tracked objects:
 18370 ;;		On entry : 0/0
 18371 ;;		On exit  : 0/0
 18372 ;;		Unchanged: 0/0
 18373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18374 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18375 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18376 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18377 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;Total ram usage:        8 bytes
 18379 ;; Hardware stack levels used:    1
 18380 ;; Hardware stack levels required when called:    4
 18381 ;; This function calls:
 18382 ;;		_DelayOffPointSelect
 18383 ;;		___bmul
 18384 ;;		_setProductData
 18385 ;; This function is called by:
 18386 ;;		_setDimmerLights_SwOff
 18387 ;;		_setRFSW_Control
 18388 ;; This function uses a non-reentrant model
 18389 ;;
 18390                           
 18391                           
 18392                           ;psect for function _setDelayOff_GO
 18393  0B40                     _setDelayOff_GO:	
 18394                           
 18395                           ;incstack = 0
 18396                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18397                           ;setDelayOff_GO@sw stored from wreg
 18398  0B40  0020               	movlb	0	; select bank0
 18399  0B41  00E5               	movwf	setDelayOff_GO@sw
 18400                           
 18401                           ;DelayOff_B1.c: 88: DelayOffPointSelect(sw);
 18402  0B42  0865               	movf	setDelayOff_GO@sw,w
 18403  0B43  319D  2552  318B   	fcall	_DelayOffPointSelect
 18404                           
 18405                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 18406  0B46  0020               	movlb	0	; select bank0
 18407  0B47  085E               	movf	setDelayOff_GO@command,w
 18408  0B48  3A01               	xorlw	1
 18409  0B49  3000               	movlw	0
 18410  0B4A  1903               	skipnz
 18411  0B4B  3001               	movlw	1
 18412  0B4C  00E0               	movwf	??_setDelayOff_GO
 18413  0B4D  0021               	movlb	1	; select bank1
 18414  0B4E  0841               	movf	_DelayOff^(0+128),w
 18415  0B4F  0086               	movwf	6
 18416  0B50  3001               	movlw	1	; select bank2/3
 18417  0B51  0087               	movwf	7
 18418  0B52  0020               	movlb	0	; select bank0
 18419  0B53  0DE0               	rlf	??_setDelayOff_GO,f
 18420  0B54  0801               	movf	1,w
 18421  0B55  0660               	xorwf	??_setDelayOff_GO,w
 18422  0B56  39FD               	andlw	-3
 18423  0B57  0660               	xorwf	??_setDelayOff_GO,w
 18424  0B58  0081               	movwf	1
 18425                           
 18426                           ;DelayOff_B1.c: 91: if (command == 1) {
 18427  0B59  085E               	movf	setDelayOff_GO@command,w
 18428  0B5A  3A01               	xorlw	1
 18429  0B5B  1D03               	skipz
 18430  0B5C  2BA5               	goto	l9171
 18431                           
 18432                           ;DelayOff_B1.c: 92: char i = 5, j = 0, k = 0;
 18433  0B5D  3005               	movlw	5
 18434  0B5E  00E0               	movwf	??_setDelayOff_GO
 18435  0B5F  0860               	movf	??_setDelayOff_GO,w
 18436  0B60  00E2               	movwf	setDelayOff_GO@i
 18437  0B61  01E3               	clrf	setDelayOff_GO@j
 18438  0B62  01E4               	clrf	setDelayOff_GO@k
 18439                           
 18440                           ;DelayOff_B1.c: 93: if (value <= 0x30) {
 18441  0B63  3031               	movlw	49
 18442  0B64  025F               	subwf	setDelayOff_GO@value,w
 18443  0B65  1803               	skipnc
 18444  0B66  2B84               	goto	l9159
 18445                           
 18446                           ;DelayOff_B1.c: 94: j = value & 0x0f;
 18447  0B67  085F               	movf	setDelayOff_GO@value,w
 18448  0B68  390F               	andlw	15
 18449  0B69  00E0               	movwf	??_setDelayOff_GO
 18450  0B6A  0860               	movf	??_setDelayOff_GO,w
 18451  0B6B  00E3               	movwf	setDelayOff_GO@j
 18452                           
 18453                           ;DelayOff_B1.c: 95: k = (value >> 4) & 0x0f;
 18454  0B6C  085F               	movf	setDelayOff_GO@value,w
 18455  0B6D  00E0               	movwf	??_setDelayOff_GO
 18456  0B6E  3004               	movlw	4
 18457  0B6F                     u10305:	
 18458  0B6F  36E0               	lsrf	??_setDelayOff_GO,f
 18459  0B70  0B89               	decfsz	9,f
 18460  0B71  2B6F               	goto	u10305
 18461  0B72  0860               	movf	??_setDelayOff_GO,w
 18462  0B73  390F               	andlw	15
 18463  0B74  00E1               	movwf	??_setDelayOff_GO+1
 18464  0B75  0861               	movf	??_setDelayOff_GO+1,w
 18465  0B76  00E4               	movwf	setDelayOff_GO@k
 18466                           
 18467                           ;DelayOff_B1.c: 96: i = j + (k * 10);
 18468  0B77  300A               	movlw	10
 18469  0B78  00E0               	movwf	??_setDelayOff_GO
 18470  0B79  0860               	movf	??_setDelayOff_GO,w
 18471  0B7A  00F2               	movwf	___bmul@multiplicand
 18472  0B7B  0864               	movf	setDelayOff_GO@k,w
 18473  0B7C  319C  24D3  318B   	fcall	___bmul
 18474  0B7F  0020               	movlb	0	; select bank0
 18475  0B80  0763               	addwf	setDelayOff_GO@j,w
 18476  0B81  00E1               	movwf	??_setDelayOff_GO+1
 18477  0B82  0861               	movf	??_setDelayOff_GO+1,w
 18478  0B83  00E2               	movwf	setDelayOff_GO@i
 18479  0B84                     l9159:	
 18480                           
 18481                           ;DelayOff_B1.c: 97: }
 18482                           ;DelayOff_B1.c: 99: DelayOff->Value = i;
 18483  0B84  0862               	movf	setDelayOff_GO@i,w
 18484  0B85  00E0               	movwf	??_setDelayOff_GO
 18485  0B86  0021               	movlb	1	; select bank1
 18486  0B87  0A41               	incf	_DelayOff^(0+128),w
 18487  0B88  0086               	movwf	6
 18488  0B89  3001               	movlw	1	; select bank2/3
 18489  0B8A  0087               	movwf	7
 18490  0B8B  0020               	movlb	0	; select bank0
 18491  0B8C  0860               	movf	??_setDelayOff_GO,w
 18492  0B8D  0081               	movwf	1
 18493                           
 18494                           ;DelayOff_B1.c: 100: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 18495  0B8E  300F               	movlw	15
 18496  0B8F  055F               	andwf	setDelayOff_GO@value,w
 18497  0B90  00E0               	movwf	??_setDelayOff_GO
 18498  0B91  0860               	movf	??_setDelayOff_GO,w
 18499  0B92  3A05               	xorlw	5
 18500  0B93  1903               	skipnz
 18501  0B94  2B99               	goto	l9165
 18502  0B95  085F               	movf	setDelayOff_GO@value,w
 18503  0B96  390F               	andlw	15
 18504  0B97  1D03               	btfss	3,2
 18505  0B98  2B9F               	goto	l9169
 18506  0B99                     l9165:	
 18507  0B99  3026               	movlw	38
 18508  0B9A  025F               	subwf	setDelayOff_GO@value,w
 18509  0B9B  1803               	skipnc
 18510  0B9C  2B9F               	goto	l9169
 18511                           
 18512                           ;DelayOff_B1.c: 101: setProductData(26 + sw, value);
 18513  0B9D  085F               	movf	setDelayOff_GO@value,w
 18514  0B9E  2BA1               	goto	L13
 18515  0B9F                     l9169:	
 18516                           ;DelayOff_B1.c: 102: } else {
 18517                           
 18518                           
 18519                           ;DelayOff_B1.c: 103: setProductData(26 + sw, 0x05);
 18520  0B9F  3005               	movlw	5
 18521  0BA0  0020               	movlb	0	; select bank0
 18522  0BA1                     L13:	
 18523  0BA1  00E0               	movwf	??_setDelayOff_GO
 18524  0BA2  0860               	movf	??_setDelayOff_GO,w
 18525  0BA3  00DA               	movwf	setProductData@value
 18526  0BA4  2BA7               	goto	L12
 18527  0BA5                     l9171:	
 18528                           ;DelayOff_B1.c: 104: }
 18529                           ;DelayOff_B1.c: 105: } else {
 18530                           
 18531                           
 18532                           ;DelayOff_B1.c: 106: setProductData(sw + 26, 0);
 18533  0BA5  0020               	movlb	0	; select bank0
 18534  0BA6  01DA               	clrf	setProductData@value
 18535  0BA7                     L12:	
 18536  0BA7  0865               	movf	setDelayOff_GO@sw,w
 18537  0BA8  3E1A               	addlw	26
 18538  0BA9  319B  23EB         	fcall	_setProductData
 18539                           
 18540                           ;DelayOff_B1.c: 107: }
 18541                           ;DelayOff_B1.c: 108: DelayOff->SecondTime = 0;
 18542  0BAB  0021               	movlb	1	; select bank1
 18543  0BAC  0841               	movf	_DelayOff^(0+128),w
 18544  0BAD  3E02               	addlw	2
 18545  0BAE  0086               	movwf	6
 18546  0BAF  3001               	movlw	1	; select bank2/3
 18547  0BB0  0087               	movwf	7
 18548  0BB1  3000               	movlw	0
 18549  0BB2  3FC0               	movwi [0]fsr1
 18550  0BB3  3FC1               	movwi [1]fsr1
 18551                           
 18552                           ;DelayOff_B1.c: 109: DelayOff->MinuteTime = 0;
 18553  0BB4  0841               	movf	_DelayOff^(0+128),w
 18554  0BB5  3E04               	addlw	4
 18555  0BB6  0086               	movwf	6
 18556  0BB7  3001               	movlw	1	; select bank2/3
 18557  0BB8  0087               	movwf	7
 18558  0BB9  0181               	clrf	1
 18559  0BBA  0008               	return
 18560  0BBB                     __end_of_setDelayOff_GO:	
 18561                           
 18562                           	psect	text127
 18563  1BEB                     __ptext127:	
 18564 ;; *************** function _setProductData *****************
 18565 ;; Defined at:
 18566 ;;		line 592 in file "../src/main_B1.c"
 18567 ;; Parameters:    Size  Location     Type
 18568 ;;  address         1    wreg     unsigned char 
 18569 ;;  value           1   58[BANK0 ] unsigned char 
 18570 ;; Auto vars:     Size  Location     Type
 18571 ;;  address         1   61[BANK0 ] unsigned char 
 18572 ;; Return value:  Size  Location     Type
 18573 ;;		None               void
 18574 ;; Registers used:
 18575 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18576 ;; Tracked objects:
 18577 ;;		On entry : 0/0
 18578 ;;		On exit  : 0/0
 18579 ;;		Unchanged: 0/0
 18580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18581 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18583 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18584 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18585 ;;Total ram usage:        4 bytes
 18586 ;; Hardware stack levels used:    1
 18587 ;; Hardware stack levels required when called:    3
 18588 ;; This function calls:
 18589 ;;		Nothing
 18590 ;; This function is called by:
 18591 ;;		_setDelayOff_GO
 18592 ;;		_setDimmerLights_OnOff
 18593 ;;		_setDimmerLights_Dimming
 18594 ;;		_setTemp_Main
 18595 ;;		_setLog_Code
 18596 ;;		_setControl_Lights_Table
 18597 ;;		_setRFSW_AdjControl
 18598 ;;		_setRF_DimmerLights
 18599 ;; This function uses a non-reentrant model
 18600 ;;
 18601                           
 18602                           
 18603                           ;psect for function _setProductData
 18604  1BEB                     _setProductData:	
 18605                           
 18606                           ;incstack = 0
 18607                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18608                           ;setProductData@address stored from wreg
 18609  1BEB  0020               	movlb	0	; select bank0
 18610  1BEC  00DD               	movwf	setProductData@address
 18611                           
 18612                           ;main_B1.c: 593: product->Data[address] = value;
 18613  1BED  085A               	movf	setProductData@value,w
 18614  1BEE  00DB               	movwf	??_setProductData
 18615  1BEF  085D               	movf	setProductData@address,w
 18616  1BF0  076F               	addwf	_product,w
 18617  1BF1  00DC               	movwf	??_setProductData+1
 18618  1BF2  085C               	movf	??_setProductData+1,w
 18619  1BF3  0086               	movwf	6
 18620  1BF4  3002               	movlw	2	; select bank4/5
 18621  1BF5  0087               	movwf	7
 18622  1BF6  085B               	movf	??_setProductData,w
 18623  1BF7  0081               	movwf	1
 18624  1BF8  0008               	return
 18625  1BF9                     __end_of_setProductData:	
 18626                           
 18627                           	psect	text128
 18628  1CD3                     __ptext128:	
 18629 ;; *************** function ___bmul *****************
 18630 ;; Defined at:
 18631 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 18632 ;; Parameters:    Size  Location     Type
 18633 ;;  multiplier      1    wreg     unsigned char 
 18634 ;;  multiplicand    1    2[COMMON] unsigned char 
 18635 ;; Auto vars:     Size  Location     Type
 18636 ;;  multiplier      1    5[COMMON] unsigned char 
 18637 ;;  product         1    4[COMMON] unsigned char 
 18638 ;; Return value:  Size  Location     Type
 18639 ;;                  1    wreg      unsigned char 
 18640 ;; Registers used:
 18641 ;;		wreg, status,2, status,0
 18642 ;; Tracked objects:
 18643 ;;		On entry : 0/0
 18644 ;;		On exit  : 0/0
 18645 ;;		Unchanged: 0/0
 18646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18647 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18649 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18650 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18651 ;;Total ram usage:        4 bytes
 18652 ;; Hardware stack levels used:    1
 18653 ;; Hardware stack levels required when called:    3
 18654 ;; This function calls:
 18655 ;;		Nothing
 18656 ;; This function is called by:
 18657 ;;		_setDelayOff_GO
 18658 ;;		_DelayTimejudge
 18659 ;; This function uses a non-reentrant model
 18660 ;;
 18661                           
 18662                           
 18663                           ;psect for function ___bmul
 18664  1CD3                     ___bmul:	
 18665                           
 18666                           ;incstack = 0
 18667                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 18668                           ;___bmul@multiplier stored from wreg
 18669  1CD3  00F5               	movwf	___bmul@multiplier
 18670  1CD4  01F4               	clrf	___bmul@product
 18671  1CD5                     l9025:	
 18672  1CD5  1C75               	btfss	___bmul@multiplier,0
 18673  1CD6  2CDB               	goto	l9029
 18674  1CD7  0872               	movf	___bmul@multiplicand,w
 18675  1CD8  00F3               	movwf	??___bmul
 18676  1CD9  0873               	movf	??___bmul,w
 18677  1CDA  07F4               	addwf	___bmul@product,f
 18678  1CDB                     l9029:	
 18679  1CDB  1003               	clrc
 18680  1CDC  0DF2               	rlf	___bmul@multiplicand,f
 18681  1CDD  1003               	clrc
 18682  1CDE  0CF5               	rrf	___bmul@multiplier,f
 18683  1CDF  08F5               	movf	___bmul@multiplier,f
 18684  1CE0  1D03               	skipz
 18685  1CE1  2CD5               	goto	l9025
 18686  1CE2  0874               	movf	___bmul@product,w
 18687  1CE3  0008               	return
 18688  1CE4                     __end_of___bmul:	
 18689                           
 18690                           	psect	text129
 18691  1C08                     __ptext129:	
 18692 ;; *************** function _getDelayOff_GO *****************
 18693 ;; Defined at:
 18694 ;;		line 114 in file "../src/DelayOff_B1.c"
 18695 ;; Parameters:    Size  Location     Type
 18696 ;;  sw              1    wreg     unsigned char 
 18697 ;; Auto vars:     Size  Location     Type
 18698 ;;  sw              1    4[COMMON] unsigned char 
 18699 ;;  go              1    5[COMMON] unsigned char 
 18700 ;; Return value:  Size  Location     Type
 18701 ;;                  1    wreg      unsigned char 
 18702 ;; Registers used:
 18703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18704 ;; Tracked objects:
 18705 ;;		On entry : 0/0
 18706 ;;		On exit  : 0/0
 18707 ;;		Unchanged: 0/0
 18708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;Total ram usage:        2 bytes
 18714 ;; Hardware stack levels used:    1
 18715 ;; Hardware stack levels required when called:    4
 18716 ;; This function calls:
 18717 ;;		_DelayOffPointSelect
 18718 ;; This function is called by:
 18719 ;;		_setDimmerLights_SwOff
 18720 ;;		_setRFSW_Control
 18721 ;; This function uses a non-reentrant model
 18722 ;;
 18723                           
 18724                           
 18725                           ;psect for function _getDelayOff_GO
 18726  1C08                     _getDelayOff_GO:	
 18727                           
 18728                           ;incstack = 0
 18729                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18730                           ;getDelayOff_GO@sw stored from wreg
 18731  1C08  00F4               	movwf	getDelayOff_GO@sw
 18732                           
 18733                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 18734  1C09  0874               	movf	getDelayOff_GO@sw,w
 18735  1C0A  319D  2552         	fcall	_DelayOffPointSelect
 18736                           
 18737                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 18738  1C0C  0021               	movlb	1	; select bank1
 18739  1C0D  0841               	movf	_DelayOff^(0+128),w
 18740  1C0E  0086               	movwf	6
 18741  1C0F  3001               	movlw	1	; select bank2/3
 18742  1C10  0087               	movwf	7
 18743  1C11  3000               	movlw	0
 18744  1C12  1881               	btfsc	1,1
 18745  1C13  3001               	movlw	1
 18746  1C14  00F5               	movwf	getDelayOff_GO@go
 18747                           
 18748                           ;DelayOff_B1.c: 117: return go;
 18749  1C15  0875               	movf	getDelayOff_GO@go,w
 18750  1C16  0008               	return
 18751  1C17                     __end_of_getDelayOff_GO:	
 18752                           
 18753                           	psect	text130
 18754  1BF9                     __ptext130:	
 18755 ;; *************** function _getDimmerLights_Status *****************
 18756 ;; Defined at:
 18757 ;;		line 993 in file "../src/Dimmer_B1.c"
 18758 ;; Parameters:    Size  Location     Type
 18759 ;;  lights          1    wreg     unsigned char 
 18760 ;; Auto vars:     Size  Location     Type
 18761 ;;  lights          1    4[COMMON] unsigned char 
 18762 ;;  status          1    5[COMMON] unsigned char 
 18763 ;; Return value:  Size  Location     Type
 18764 ;;                  1    wreg      unsigned char 
 18765 ;; Registers used:
 18766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18767 ;; Tracked objects:
 18768 ;;		On entry : 0/0
 18769 ;;		On exit  : 0/0
 18770 ;;		Unchanged: 0/0
 18771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18775 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18776 ;;Total ram usage:        2 bytes
 18777 ;; Hardware stack levels used:    1
 18778 ;; Hardware stack levels required when called:    4
 18779 ;; This function calls:
 18780 ;;		_DimmerLights_SelectPointer
 18781 ;; This function is called by:
 18782 ;;		_DlyOff_Main
 18783 ;;		_setControl_Lights_Table
 18784 ;;		_setRFSW_Control
 18785 ;;		_setRFSW_AdjControl
 18786 ;;		_Exception_Main
 18787 ;; This function uses a non-reentrant model
 18788 ;;
 18789                           
 18790                           
 18791                           ;psect for function _getDimmerLights_Status
 18792  1BF9                     _getDimmerLights_Status:	
 18793                           
 18794                           ;incstack = 0
 18795                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18796                           ;getDimmerLights_Status@lights stored from wreg
 18797  1BF9  00F4               	movwf	getDimmerLights_Status@lights
 18798                           
 18799                           ;Dimmer_B1.c: 994: DimmerLights_SelectPointer(lights);
 18800  1BFA  0874               	movf	getDimmerLights_Status@lights,w
 18801  1BFB  319D  2567         	fcall	_DimmerLights_SelectPointer
 18802                           
 18803                           ;Dimmer_B1.c: 995: char status = DimmerLights->Status == 1 ? 1 : 0;
 18804  1BFD  0020               	movlb	0	; select bank0
 18805  1BFE  0A6D               	incf	_DimmerLights,w
 18806  1BFF  0086               	movwf	6
 18807  1C00  3001               	movlw	1	; select bank2/3
 18808  1C01  0087               	movwf	7
 18809  1C02  3000               	movlw	0
 18810  1C03  1801               	btfsc	1,0
 18811  1C04  3001               	movlw	1
 18812  1C05  00F5               	movwf	getDimmerLights_Status@status
 18813                           
 18814                           ;Dimmer_B1.c: 996: return status;
 18815  1C06  0875               	movf	getDimmerLights_Status@status,w
 18816  1C07  0008               	return
 18817  1C08                     __end_of_getDimmerLights_Status:	
 18818                           
 18819                           	psect	text131
 18820  1D67                     __ptext131:	
 18821 ;; *************** function _DimmerLights_SelectPointer *****************
 18822 ;; Defined at:
 18823 ;;		line 572 in file "../src/Dimmer_B1.c"
 18824 ;; Parameters:    Size  Location     Type
 18825 ;;  lights          1    wreg     unsigned char 
 18826 ;; Auto vars:     Size  Location     Type
 18827 ;;  lights          1    3[COMMON] unsigned char 
 18828 ;; Return value:  Size  Location     Type
 18829 ;;		None               void
 18830 ;; Registers used:
 18831 ;;		wreg
 18832 ;; Tracked objects:
 18833 ;;		On entry : 0/0
 18834 ;;		On exit  : 0/0
 18835 ;;		Unchanged: 0/0
 18836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18841 ;;Total ram usage:        2 bytes
 18842 ;; Hardware stack levels used:    1
 18843 ;; Hardware stack levels required when called:    3
 18844 ;; This function calls:
 18845 ;;		Nothing
 18846 ;; This function is called by:
 18847 ;;		_setDimmerLights_SwOn
 18848 ;;		_setDimmerLights_SwOff
 18849 ;;		_setDimmerLights_DimmingOn
 18850 ;;		_setDimmerLights_Main
 18851 ;;		_getDimmerLights_Status
 18852 ;;		_setDimmerLights_DimmingRun
 18853 ;;		_setDimmerLights_Status
 18854 ;; This function uses a non-reentrant model
 18855 ;;
 18856                           
 18857                           
 18858                           ;psect for function _DimmerLights_SelectPointer
 18859  1D67                     _DimmerLights_SelectPointer:	
 18860                           
 18861                           ;incstack = 0
 18862                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18863                           ;DimmerLights_SelectPointer@lights stored from wreg
 18864  1D67  00F3               	movwf	DimmerLights_SelectPointer@lights
 18865                           
 18866                           ;Dimmer_B1.c: 574: if (lights == 1) {
 18867  1D68  0873               	movf	DimmerLights_SelectPointer@lights,w
 18868  1D69  3A01               	xorlw	1
 18869  1D6A  1D03               	skipz
 18870  1D6B  2D72               	goto	l9189
 18871                           
 18872                           ;Dimmer_B1.c: 575: DimmerLights = &DimmerLights1;
 18873  1D6C  30BE               	movlw	_DimmerLights1& (0+255)
 18874  1D6D  00F2               	movwf	??_DimmerLights_SelectPointer
 18875  1D6E  0872               	movf	??_DimmerLights_SelectPointer,w
 18876  1D6F  0020               	movlb	0	; select bank0
 18877  1D70  00ED               	movwf	_DimmerLights
 18878                           
 18879                           ;Dimmer_B1.c: 576: }
 18880  1D71  0008               	return
 18881  1D72                     l9189:	
 18882                           
 18883                           ;Dimmer_B1.c: 579: else if (lights == 2) {
 18884  1D72  0873               	movf	DimmerLights_SelectPointer@lights,w
 18885  1D73  3A02               	xorlw	2
 18886  1D74  1D03               	skipz
 18887  1D75  0008               	return
 18888                           
 18889                           ;Dimmer_B1.c: 580: DimmerLights = &DimmerLights2;
 18890  1D76  30C7               	movlw	_DimmerLights2& (0+255)
 18891  1D77  00F2               	movwf	??_DimmerLights_SelectPointer
 18892  1D78  0872               	movf	??_DimmerLights_SelectPointer,w
 18893  1D79  0020               	movlb	0	; select bank0
 18894  1D7A  00ED               	movwf	_DimmerLights
 18895  1D7B  0008               	return
 18896  1D7C                     __end_of_DimmerLights_SelectPointer:	
 18897                           
 18898                           	psect	text132
 18899  1B26                     __ptext132:	
 18900 ;; *************** function _DelayOff_Initialization *****************
 18901 ;; Defined at:
 18902 ;;		line 26 in file "../src/DelayOff_B1.c"
 18903 ;; Parameters:    Size  Location     Type
 18904 ;;		None
 18905 ;; Auto vars:     Size  Location     Type
 18906 ;;		None
 18907 ;; Return value:  Size  Location     Type
 18908 ;;		None               void
 18909 ;; Registers used:
 18910 ;;		wreg, status,2, status,0, pclath, cstack
 18911 ;; Tracked objects:
 18912 ;;		On entry : 0/0
 18913 ;;		On exit  : 0/0
 18914 ;;		Unchanged: 0/0
 18915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18920 ;;Total ram usage:        0 bytes
 18921 ;; Hardware stack levels used:    1
 18922 ;; Hardware stack levels required when called:    5
 18923 ;; This function calls:
 18924 ;;		_DlyOff_Initialization
 18925 ;; This function is called by:
 18926 ;;		_main
 18927 ;; This function uses a non-reentrant model
 18928 ;;
 18929                           
 18930                           
 18931                           ;psect for function _DelayOff_Initialization
 18932  1B26                     _DelayOff_Initialization:	
 18933                           
 18934                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18935                           
 18936                           ;incstack = 0
 18937                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18938  1B26  3001               	movlw	1
 18939  1B27  319A  22ED  319B   	fcall	_DlyOff_Initialization
 18940                           
 18941                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18942  1B2A  3002               	movlw	2
 18943  1B2B  319A  22ED         	fcall	_DlyOff_Initialization
 18944  1B2D  0008               	return
 18945  1B2E                     __end_of_DelayOff_Initialization:	
 18946                           
 18947                           	psect	text133
 18948  1AED                     __ptext133:	
 18949 ;; *************** function _DlyOff_Initialization *****************
 18950 ;; Defined at:
 18951 ;;		line 56 in file "../src/DelayOff_B1.c"
 18952 ;; Parameters:    Size  Location     Type
 18953 ;;  sw              1    wreg     unsigned char 
 18954 ;; Auto vars:     Size  Location     Type
 18955 ;;  sw              1    4[COMMON] unsigned char 
 18956 ;; Return value:  Size  Location     Type
 18957 ;;		None               void
 18958 ;; Registers used:
 18959 ;;		wreg, status,2, status,0, pclath, cstack
 18960 ;; Tracked objects:
 18961 ;;		On entry : 0/0
 18962 ;;		On exit  : 0/0
 18963 ;;		Unchanged: 0/0
 18964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18969 ;;Total ram usage:        1 bytes
 18970 ;; Hardware stack levels used:    1
 18971 ;; Hardware stack levels required when called:    4
 18972 ;; This function calls:
 18973 ;;		_DelayOffPointSelect
 18974 ;; This function is called by:
 18975 ;;		_DelayOff_Initialization
 18976 ;; This function uses a non-reentrant model
 18977 ;;
 18978                           
 18979                           
 18980                           ;psect for function _DlyOff_Initialization
 18981  1AED                     _DlyOff_Initialization:	
 18982                           
 18983                           ;incstack = 0
 18984                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18985                           ;DlyOff_Initialization@sw stored from wreg
 18986  1AED  00F4               	movwf	DlyOff_Initialization@sw
 18987                           
 18988                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18989  1AEE  0874               	movf	DlyOff_Initialization@sw,w
 18990  1AEF  319D  2552         	fcall	_DelayOffPointSelect
 18991  1AF1  0008               	return
 18992  1AF2                     __end_of_DlyOff_Initialization:	
 18993                           
 18994                           	psect	text134
 18995  1D52                     __ptext134:	
 18996 ;; *************** function _DelayOffPointSelect *****************
 18997 ;; Defined at:
 18998 ;;		line 7 in file "../src/DelayOff_B1.c"
 18999 ;; Parameters:    Size  Location     Type
 19000 ;;  sw              1    wreg     unsigned char 
 19001 ;; Auto vars:     Size  Location     Type
 19002 ;;  sw              1    3[COMMON] unsigned char 
 19003 ;; Return value:  Size  Location     Type
 19004 ;;		None               void
 19005 ;; Registers used:
 19006 ;;		wreg
 19007 ;; Tracked objects:
 19008 ;;		On entry : 0/0
 19009 ;;		On exit  : 0/0
 19010 ;;		Unchanged: 0/0
 19011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19014 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19015 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19016 ;;Total ram usage:        2 bytes
 19017 ;; Hardware stack levels used:    1
 19018 ;; Hardware stack levels required when called:    3
 19019 ;; This function calls:
 19020 ;;		Nothing
 19021 ;; This function is called by:
 19022 ;;		_DlyOff_Initialization
 19023 ;;		_DlyOff_Main
 19024 ;;		_setDelayOff_GO
 19025 ;;		_getDelayOff_GO
 19026 ;; This function uses a non-reentrant model
 19027 ;;
 19028                           
 19029                           
 19030                           ;psect for function _DelayOffPointSelect
 19031  1D52                     _DelayOffPointSelect:	
 19032                           
 19033                           ;incstack = 0
 19034                           ; Regs used in _DelayOffPointSelect: [wreg]
 19035                           ;DelayOffPointSelect@sw stored from wreg
 19036  1D52  00F3               	movwf	DelayOffPointSelect@sw
 19037                           
 19038                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19039  1D53  0873               	movf	DelayOffPointSelect@sw,w
 19040  1D54  3A01               	xorlw	1
 19041  1D55  1D03               	skipz
 19042  1D56  2D5D               	goto	l9017
 19043                           
 19044                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19045  1D57  30E2               	movlw	_DlySw1& (0+255)
 19046  1D58  00F2               	movwf	??_DelayOffPointSelect
 19047  1D59  0872               	movf	??_DelayOffPointSelect,w
 19048  1D5A  0021               	movlb	1	; select bank1
 19049  1D5B  00C1               	movwf	_DelayOff^(0+128)
 19050                           
 19051                           ;DelayOff_B1.c: 11: }
 19052  1D5C  0008               	return
 19053  1D5D                     l9017:	
 19054                           
 19055                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19056  1D5D  0873               	movf	DelayOffPointSelect@sw,w
 19057  1D5E  3A02               	xorlw	2
 19058  1D5F  1D03               	skipz
 19059  1D60  0008               	return
 19060                           
 19061                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19062  1D61  30E7               	movlw	_DlySw2& (0+255)
 19063  1D62  00F2               	movwf	??_DelayOffPointSelect
 19064  1D63  0872               	movf	??_DelayOffPointSelect,w
 19065  1D64  0021               	movlb	1	; select bank1
 19066  1D65  00C1               	movwf	_DelayOff^(0+128)
 19067  1D66  0008               	return
 19068  1D67                     __end_of_DelayOffPointSelect:	
 19069                           
 19070                           	psect	text135
 19071  13C8                     __ptext135:	
 19072 ;; *************** function _Buzzer_Main *****************
 19073 ;; Defined at:
 19074 ;;		line 46 in file "../src/Buzzer_B1.c"
 19075 ;; Parameters:    Size  Location     Type
 19076 ;;		None
 19077 ;; Auto vars:     Size  Location     Type
 19078 ;;		None
 19079 ;; Return value:  Size  Location     Type
 19080 ;;		None               void
 19081 ;; Registers used:
 19082 ;;		wreg, status,2, status,0
 19083 ;; Tracked objects:
 19084 ;;		On entry : 0/0
 19085 ;;		On exit  : 0/0
 19086 ;;		Unchanged: 0/0
 19087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19090 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19091 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19092 ;;Total ram usage:        1 bytes
 19093 ;; Hardware stack levels used:    1
 19094 ;; Hardware stack levels required when called:    3
 19095 ;; This function calls:
 19096 ;;		Nothing
 19097 ;; This function is called by:
 19098 ;;		_main
 19099 ;; This function uses a non-reentrant model
 19100 ;;
 19101                           
 19102                           
 19103                           ;psect for function _Buzzer_Main
 19104  13C8                     _Buzzer_Main:	
 19105                           
 19106                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19107                           
 19108                           ;incstack = 0
 19109                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19110  13C8  0021               	movlb	1	; select bank1
 19111  13C9  1CAE               	btfss	_Buz1^(0+128),1
 19112  13CA  0008               	return
 19113                           
 19114                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19115  13CB  3001               	movlw	1
 19116  13CC  07AF               	addwf	(_Buz1^(0+128)+1),f
 19117  13CD  3000               	movlw	0
 19118  13CE  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 19119                           
 19120                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19121  13CF  0835               	movf	((_Buz1+1)^(0+128)+6),w
 19122  13D0  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 19123  13D1  1D03               	skipz
 19124  13D2  2BD5               	goto	u8675
 19125  13D3  0834               	movf	(_Buz1^(0+128)+6),w
 19126  13D4  022F               	subwf	(_Buz1^(0+128)+1),w
 19127  13D5                     u8675:	
 19128  13D5  1C03               	skipc
 19129  13D6  0008               	return
 19130                           
 19131                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19132  13D7  01AF               	clrf	(_Buz1^(0+128)+1)
 19133  13D8  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 19134                           
 19135                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19136  13D9  12AE               	bcf	_Buz1^(0+128),5
 19137  13DA  0020               	movlb	0	; select bank0
 19138  13DB  1D8D               	btfss	13,3	;volatile
 19139  13DC  2BDF               	goto	l8259
 19140  13DD  0021               	movlb	1	; select bank1
 19141  13DE  16AE               	bsf	_Buz1^(0+128),5
 19142  13DF                     l8259:	
 19143                           
 19144                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19145  13DF  0021               	movlb	1	; select bank1
 19146  13E0  1AAE               	btfsc	_Buz1^(0+128),5
 19147  13E1  2C07               	goto	l106
 19148                           
 19149                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19150  13E2  08B1               	movf	(_Buz1^(0+128)+3),f
 19151  13E3  1D03               	skipz
 19152  13E4  2C03               	goto	l107
 19153                           
 19154                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19155  13E5  1DAE               	btfss	_Buz1^(0+128),3
 19156  13E6  2BF3               	goto	l108
 19157                           
 19158                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19159  13E7  11AE               	bcf	_Buz1^(0+128),3
 19160                           
 19161                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19162  13E8  0832               	movf	(_Buz1^(0+128)+4),w
 19163  13E9  00F2               	movwf	??_Buzzer_Main
 19164  13EA  0872               	movf	??_Buzzer_Main,w
 19165  13EB  00B1               	movwf	(_Buz1^(0+128)+3)
 19166                           
 19167                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19168  13EC  0837               	movf	((_Buz1+1)^(0+128)+8),w
 19169  13ED  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19170  13EE  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19171  13EF  0836               	movf	(_Buz1^(0+128)+8),w
 19172  13F0  01B4               	clrf	(_Buz1^(0+128)+6)
 19173  13F1  07B4               	addwf	(_Buz1^(0+128)+6),f
 19174                           
 19175                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19176  13F2  0008               	return
 19177  13F3                     l108:	
 19178  13F3  1E2E               	btfss	_Buz1^(0+128),4
 19179  13F4  2C01               	goto	l110
 19180                           
 19181                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19182  13F5  122E               	bcf	_Buz1^(0+128),4
 19183                           
 19184                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19185  13F6  0833               	movf	(_Buz1^(0+128)+5),w
 19186  13F7  00F2               	movwf	??_Buzzer_Main
 19187  13F8  0872               	movf	??_Buzzer_Main,w
 19188  13F9  00B1               	movwf	(_Buz1^(0+128)+3)
 19189                           
 19190                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19191  13FA  0839               	movf	((_Buz1+1)^(0+128)+10),w
 19192  13FB  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19193  13FC  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19194  13FD  0838               	movf	(_Buz1^(0+128)+10),w
 19195  13FE  01B4               	clrf	(_Buz1^(0+128)+6)
 19196  13FF  07B4               	addwf	(_Buz1^(0+128)+6),f
 19197                           
 19198                           ;Buzzer_B1.c: 62: } else {
 19199  1400  0008               	return
 19200  1401                     l110:	
 19201                           
 19202                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19203  1401  10AE               	bcf	_Buz1^(0+128),1
 19204                           
 19205                           ;Buzzer_B1.c: 64: }
 19206                           ;Buzzer_B1.c: 65: } else {
 19207  1402  0008               	return
 19208  1403                     l107:	
 19209                           
 19210                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19211  1403  16AE               	bsf	_Buz1^(0+128),5
 19212                           
 19213                           ;Buzzer_B1.c: 68: RB3 = 1;
 19214  1404  0020               	movlb	0	; select bank0
 19215  1405  158D               	bsf	13,3	;volatile
 19216                           
 19217                           ;Buzzer_B1.c: 69: }
 19218                           ;Buzzer_B1.c: 70: } else {
 19219  1406  0008               	return
 19220  1407                     l106:	
 19221                           
 19222                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19223  1407  12AE               	bcf	_Buz1^(0+128),5
 19224                           
 19225                           ;Buzzer_B1.c: 73: RB3 = 0;
 19226  1408  0020               	movlb	0	; select bank0
 19227  1409  118D               	bcf	13,3	;volatile
 19228                           
 19229                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19230  140A  3001               	movlw	1
 19231  140B  0021               	movlb	1	; select bank1
 19232  140C  02B1               	subwf	(_Buz1^(0+128)+3),f
 19233  140D  0008               	return
 19234  140E                     __end_of_Buzzer_Main:	
 19235                           
 19236                           	psect	text136
 19237  1ACA                     __ptext136:	
 19238 ;; *************** function _Buzzer_Initialization *****************
 19239 ;; Defined at:
 19240 ;;		line 11 in file "../src/Buzzer_B1.c"
 19241 ;; Parameters:    Size  Location     Type
 19242 ;;		None
 19243 ;; Auto vars:     Size  Location     Type
 19244 ;;		None
 19245 ;; Return value:  Size  Location     Type
 19246 ;;		None               void
 19247 ;; Registers used:
 19248 ;;		None
 19249 ;; Tracked objects:
 19250 ;;		On entry : 0/0
 19251 ;;		On exit  : 0/0
 19252 ;;		Unchanged: 0/0
 19253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19258 ;;Total ram usage:        0 bytes
 19259 ;; Hardware stack levels used:    1
 19260 ;; Hardware stack levels required when called:    3
 19261 ;; This function calls:
 19262 ;;		Nothing
 19263 ;; This function is called by:
 19264 ;;		_main
 19265 ;; This function uses a non-reentrant model
 19266 ;;
 19267                           
 19268                           
 19269                           ;psect for function _Buzzer_Initialization
 19270  1ACA                     _Buzzer_Initialization:	
 19271                           
 19272                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19273                           
 19274                           ;incstack = 0
 19275                           ; Regs used in _Buzzer_Initialization: []
 19276  1ACA  0021               	movlb	1	; select bank1
 19277  1ACB  142E               	bsf	_Buz1^(0+128),0
 19278  1ACC  0008               	return
 19279  1ACD                     __end_of_Buzzer_Initialization:	
 19280                           
 19281                           	psect	intentry
 19282  0004                     __pintentry:	
 19283 ;; *************** function _ISR *****************
 19284 ;; Defined at:
 19285 ;;		line 112 in file "../src/MCU_B1.c"
 19286 ;; Parameters:    Size  Location     Type
 19287 ;;		None
 19288 ;; Auto vars:     Size  Location     Type
 19289 ;;		None
 19290 ;; Return value:  Size  Location     Type
 19291 ;;		None               void
 19292 ;; Registers used:
 19293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19294 ;; Tracked objects:
 19295 ;;		On entry : 0/0
 19296 ;;		On exit  : 0/0
 19297 ;;		Unchanged: 0/0
 19298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19303 ;;Total ram usage:        1 bytes
 19304 ;; Hardware stack levels used:    1
 19305 ;; Hardware stack levels required when called:    2
 19306 ;; This function calls:
 19307 ;;		_IOC_ISR
 19308 ;;		_TMR1_ISR
 19309 ;; This function is called by:
 19310 ;;		Interrupt level 1
 19311 ;; This function uses a non-reentrant model
 19312 ;;
 19313                           
 19314  0004                     _ISR:	
 19315                           
 19316                           ;incstack = 0
 19317                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19318  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19319  0005  3180               	pagesel	$
 19320  0006  0020               	movlb	0	; select bank0
 19321  0007  087F               	movf	127,w
 19322  0008  00F1               	movwf	??_ISR
 19323                           
 19324                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19325  0009  198B               	btfsc	11,3	;volatile
 19326  000A  1C0B               	btfss	11,0	;volatile
 19327  000B  2813               	goto	i1l1403
 19328  000C  0027               	movlb	7	; select bank7
 19329  000D  1D16               	btfss	22,2	;volatile
 19330  000E  2813               	goto	i1l1403
 19331                           
 19332                           ;MCU_B1.c: 116: IOC_ISR();
 19333  000F  319B  2387  3180   	fcall	_IOC_ISR
 19334                           
 19335                           ;MCU_B1.c: 117: }
 19336  0012  281B               	goto	i1l1406
 19337  0013                     i1l1403:	
 19338                           
 19339                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 19340  0013  0021               	movlb	1	; select bank1
 19341  0014  1C11               	btfss	17,0	;volatile
 19342  0015  281B               	goto	i1l1406
 19343  0016  0020               	movlb	0	; select bank0
 19344  0017  1C11               	btfss	17,0	;volatile
 19345  0018  281B               	goto	i1l1406
 19346                           
 19347                           ;MCU_B1.c: 126: TMR1_ISR();
 19348  0019  319F  279B         	fcall	_TMR1_ISR
 19349  001B                     i1l1406:	
 19350                           ;MCU_B1.c: 127: }
 19351                           ;MCU_B1.c: 143: return;
 19352                           
 19353  001B  0871               	movf	??_ISR,w
 19354  001C  0020               	movlb	0	; select bank0
 19355  001D  00FF               	movwf	127
 19356  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19357  001F  0009               	retfie
 19358  0020                     __end_of_ISR:	
 19359                           
 19360                           	psect	text138
 19361  1F9B                     __ptext138:	
 19362 ;; *************** function _TMR1_ISR *****************
 19363 ;; Defined at:
 19364 ;;		line 231 in file "../src/MCU_B1.c"
 19365 ;; Parameters:    Size  Location     Type
 19366 ;;		None
 19367 ;; Auto vars:     Size  Location     Type
 19368 ;;		None
 19369 ;; Return value:  Size  Location     Type
 19370 ;;		None               void
 19371 ;; Registers used:
 19372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19373 ;; Tracked objects:
 19374 ;;		On entry : 0/0
 19375 ;;		On exit  : 0/0
 19376 ;;		Unchanged: 0/0
 19377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19382 ;;Total ram usage:        0 bytes
 19383 ;; Hardware stack levels used:    1
 19384 ;; Hardware stack levels required when called:    1
 19385 ;; This function calls:
 19386 ;;		_DimmerLights_MOSFET_TMR_1
 19387 ;;		_DimmerLights_MOSFET_TMR_2
 19388 ;; This function is called by:
 19389 ;;		_ISR
 19390 ;; This function uses a non-reentrant model
 19391 ;;
 19392                           
 19393                           
 19394                           ;psect for function _TMR1_ISR
 19395  1F9B                     _TMR1_ISR:	
 19396                           
 19397                           ;MCU_B1.c: 233: TMR1H = (int)((65536-1480)/256);
 19398                           
 19399                           ;incstack = 0
 19400                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19401  1F9B  30FA               	movlw	250
 19402  1F9C  0020               	movlb	0	; select bank0
 19403  1F9D  0097               	movwf	23	;volatile
 19404                           
 19405                           ;MCU_B1.c: 234: TMR1L = (int)((65536-1480)%256);
 19406  1F9E  3038               	movlw	56
 19407  1F9F  0096               	movwf	22	;volatile
 19408                           
 19409                           ;MCU_B1.c: 235: TMR1IF = 0;
 19410  1FA0  1011               	bcf	17,0	;volatile
 19411                           
 19412                           ;MCU_B1.c: 240: DimmerLights_MOSFET_TMR_1();
 19413  1FA1  3195  2542  319F   	fcall	_DimmerLights_MOSFET_TMR_1
 19414                           
 19415                           ;MCU_B1.c: 245: DimmerLights_MOSFET_TMR_2();
 19416  1FA4  3195  2594  319F   	fcall	_DimmerLights_MOSFET_TMR_2
 19417                           
 19418                           ;MCU_B1.c: 254: Timer1.Count++;
 19419  1FA7  3001               	movlw	1
 19420  1FA8  0021               	movlb	1	; select bank1
 19421  1FA9  07BB               	addwf	(_Timer1^(0+128)+1),f
 19422  1FAA  3000               	movlw	0
 19423  1FAB  3DBC               	addwfc	((_Timer1+1)^(0+128)+1),f
 19424                           
 19425                           ;MCU_B1.c: 255: if (Timer1.Count == (int)(20*10)) {
 19426  1FAC  3001               	movlw	1
 19427  1FAD  3EBA               	addlw	_Timer1& (0+255)
 19428  1FAE  0086               	movwf	6
 19429  1FAF  0187               	clrf	7
 19430  1FB0  3F40               	moviw [0]fsr1
 19431  1FB1  3AC8               	xorlw	200
 19432  1FB2  1D03               	skipz
 19433  1FB3  2FB6               	goto	u878_25
 19434  1FB4  3F41               	moviw [1]fsr1
 19435  1FB5  3A00               	xorlw	0
 19436  1FB6                     u878_25:	
 19437  1FB6  1D03               	skipz
 19438  1FB7  0008               	return
 19439                           
 19440                           ;MCU_B1.c: 256: Timer1.Count = 0;
 19441  1FB8  01BB               	clrf	(_Timer1^(0+128)+1)
 19442  1FB9  01BC               	clrf	((_Timer1+1)^(0+128)+1)
 19443                           
 19444                           ;MCU_B1.c: 257: Timer1.Timeout = 1;
 19445  1FBA  143A               	bsf	_Timer1^(0+128),0
 19446  1FBB  0008               	return
 19447  1FBC                     __end_of_TMR1_ISR:	
 19448                           
 19449                           	psect	text139
 19450  1594                     __ptext139:	
 19451 ;; *************** function _DimmerLights_MOSFET_TMR_2 *****************
 19452 ;; Defined at:
 19453 ;;		line 1260 in file "../src/Dimmer_B1.c"
 19454 ;; Parameters:    Size  Location     Type
 19455 ;;		None
 19456 ;; Auto vars:     Size  Location     Type
 19457 ;;		None
 19458 ;; Return value:  Size  Location     Type
 19459 ;;		None               void
 19460 ;; Registers used:
 19461 ;;		wreg, status,2, status,0
 19462 ;; Tracked objects:
 19463 ;;		On entry : 0/0
 19464 ;;		On exit  : 0/0
 19465 ;;		Unchanged: 0/0
 19466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19469 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19470 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19471 ;;Total ram usage:        1 bytes
 19472 ;; Hardware stack levels used:    1
 19473 ;; This function calls:
 19474 ;;		Nothing
 19475 ;; This function is called by:
 19476 ;;		_TMR1_ISR
 19477 ;; This function uses a non-reentrant model
 19478 ;;
 19479                           
 19480                           
 19481                           ;psect for function _DimmerLights_MOSFET_TMR_2
 19482  1594                     _DimmerLights_MOSFET_TMR_2:	
 19483                           
 19484                           ;Dimmer_B1.c: 1261: if (DimmerIntr2.Start == 1) {
 19485                           
 19486                           ;incstack = 0
 19487                           ; Regs used in _DimmerLights_MOSFET_TMR_2: [wreg+status,2+status,0]
 19488  1594  0021               	movlb	1	; select bank1
 19489  1595  1D64               	btfss	_DimmerIntr2^(0+128),2
 19490  1596  2DA1               	goto	i1l7809
 19491                           
 19492                           ;Dimmer_B1.c: 1262: DimmerIntr2.Count++;
 19493  1597  3001               	movlw	1
 19494  1598  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19495  1599  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19496  159A  07E5               	addwf	(_DimmerIntr2^(0+128)+1),f
 19497                           
 19498                           ;Dimmer_B1.c: 1263: if (DimmerIntr2.Count >= ((char)(65*0.8)) + 1) {
 19499  159B  3035               	movlw	53
 19500  159C  0265               	subwf	(_DimmerIntr2^(0+128)+1),w
 19501  159D  1C03               	skipc
 19502  159E  2DA1               	goto	i1l7809
 19503                           
 19504                           ;Dimmer_B1.c: 1264: DimmerIntr2.Count = 0;
 19505  159F  01E5               	clrf	(_DimmerIntr2^(0+128)+1)
 19506                           
 19507                           ;Dimmer_B1.c: 1265: DimmerIntr2.Start = 0;
 19508  15A0  1164               	bcf	_DimmerIntr2^(0+128),2
 19509  15A1                     i1l7809:	
 19510                           
 19511                           ;Dimmer_B1.c: 1266: }
 19512                           ;Dimmer_B1.c: 1267: }
 19513                           ;Dimmer_B1.c: 1269: if (DimmerIntr2.GO == 1) {
 19514  15A1  1C64               	btfss	_DimmerIntr2^(0+128),0
 19515  15A2  2DAE               	goto	i1l1011
 19516                           
 19517                           ;Dimmer_B1.c: 1270: if (DimmerIntr2.Count >= DimmerIntr2.DimmingValue) {
 19518  15A3  0868               	movf	(_DimmerIntr2^(0+128)+4),w
 19519  15A4  0265               	subwf	(_DimmerIntr2^(0+128)+1),w
 19520  15A5  1C03               	skipc
 19521  15A6  0008               	return
 19522                           
 19523                           ;Dimmer_B1.c: 1271: DimmerIntr2.GO = 0;
 19524  15A7  1064               	bcf	_DimmerIntr2^(0+128),0
 19525                           
 19526                           ;Dimmer_B1.c: 1272: DimmerIntr2.Tune = 1;
 19527  15A8  14E4               	bsf	_DimmerIntr2^(0+128),1
 19528                           
 19529                           ;Dimmer_B1.c: 1274: if (DimmerIntr2.ControlStatus == 1) {
 19530  15A9  1DE4               	btfss	_DimmerIntr2^(0+128),3
 19531  15AA  0008               	return
 19532                           
 19533                           ;Dimmer_B1.c: 1275: RB4 = 0;
 19534  15AB  0020               	movlb	0	; select bank0
 19535  15AC  120D               	bcf	13,4	;volatile
 19536                           
 19537                           ;Dimmer_B1.c: 1277: }
 19538                           ;Dimmer_B1.c: 1278: }
 19539                           ;Dimmer_B1.c: 1279: } else {
 19540  15AD  0008               	return
 19541  15AE                     i1l1011:	
 19542                           
 19543                           ;Dimmer_B1.c: 1280: if (DimmerIntr2.Tune == 1) {
 19544  15AE  1CE4               	btfss	_DimmerIntr2^(0+128),1
 19545  15AF  0008               	return
 19546                           
 19547                           ;Dimmer_B1.c: 1281: DimmerIntr2.Tune = 0;
 19548  15B0  10E4               	bcf	_DimmerIntr2^(0+128),1
 19549                           
 19550                           ;Dimmer_B1.c: 1282: DimmerIntr2.TuneTime++;
 19551  15B1  3001               	movlw	1
 19552  15B2  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19553  15B3  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19554  15B4  07E6               	addwf	(_DimmerIntr2^(0+128)+2),f
 19555                           
 19556                           ;Dimmer_B1.c: 1283: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 19557  15B5  0867               	movf	(_DimmerIntr2^(0+128)+3),w
 19558  15B6  0266               	subwf	(_DimmerIntr2^(0+128)+2),w
 19559  15B7  1C03               	skipc
 19560  15B8  0008               	return
 19561                           
 19562                           ;Dimmer_B1.c: 1284: DimmerIntr2.TuneTime = 0;
 19563  15B9  01E6               	clrf	(_DimmerIntr2^(0+128)+2)
 19564                           
 19565                           ;Dimmer_B1.c: 1285: if (DimmerIntr2.Dimming_Sw == 1) {
 19566  15BA  1E64               	btfss	_DimmerIntr2^(0+128),4
 19567  15BB  2DD2               	goto	i1l1017
 19568                           
 19569                           ;Dimmer_B1.c: 1286: if (DimmerIntr2.Dimming_Status == 0) {
 19570  15BC  1AE4               	btfsc	_DimmerIntr2^(0+128),5
 19571  15BD  2DC9               	goto	i1l7833
 19572                           
 19573                           ;Dimmer_B1.c: 1287: if (DimmerIntr2.DimmingValue < ((char)(65*0.8))) {
 19574  15BE  3034               	movlw	52
 19575  15BF  0268               	subwf	(_DimmerIntr2^(0+128)+4),w
 19576  15C0  1803               	skipnc
 19577  15C1  2DC7               	goto	i1l1019
 19578                           
 19579                           ;Dimmer_B1.c: 1288: DimmerIntr2.DimmingValue++;
 19580  15C2  3001               	movlw	1
 19581  15C3  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19582  15C4  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19583  15C5  07E8               	addwf	(_DimmerIntr2^(0+128)+4),f
 19584                           
 19585                           ;Dimmer_B1.c: 1289: } else {
 19586  15C6  0008               	return
 19587  15C7                     i1l1019:	
 19588                           
 19589                           ;Dimmer_B1.c: 1290: DimmerIntr2.Dimming_Status = 1;
 19590  15C7  16E4               	bsf	_DimmerIntr2^(0+128),5
 19591                           
 19592                           ;Dimmer_B1.c: 1291: }
 19593                           ;Dimmer_B1.c: 1292: } else {
 19594  15C8  0008               	return
 19595  15C9                     i1l7833:	
 19596                           
 19597                           ;Dimmer_B1.c: 1293: if (DimmerIntr2.DimmingValue > ((char)(20*0.8))) {
 19598  15C9  3011               	movlw	17
 19599  15CA  0268               	subwf	(_DimmerIntr2^(0+128)+4),w
 19600  15CB  1C03               	skipc
 19601  15CC  2DD0               	goto	i1l1022
 19602                           
 19603                           ;Dimmer_B1.c: 1294: DimmerIntr2.DimmingValue--;
 19604  15CD  3001               	movlw	1
 19605  15CE  02E8               	subwf	(_DimmerIntr2^(0+128)+4),f
 19606                           
 19607                           ;Dimmer_B1.c: 1295: } else {
 19608  15CF  0008               	return
 19609  15D0                     i1l1022:	
 19610                           
 19611                           ;Dimmer_B1.c: 1296: DimmerIntr2.Dimming_Status = 0;
 19612  15D0  12E4               	bcf	_DimmerIntr2^(0+128),5
 19613                           
 19614                           ;Dimmer_B1.c: 1297: }
 19615                           ;Dimmer_B1.c: 1298: }
 19616                           ;Dimmer_B1.c: 1299: } else if (DimmerIntr2.Dimming_RF == 1) {
 19617  15D1  0008               	return
 19618  15D2                     i1l1017:	
 19619  15D2  1F64               	btfss	_DimmerIntr2^(0+128),6
 19620  15D3  0008               	return
 19621                           
 19622                           ;Dimmer_B1.c: 1300: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 19623  15D4  0869               	movf	(_DimmerIntr2^(0+128)+5),w
 19624  15D5  0268               	subwf	(_DimmerIntr2^(0+128)+4),w
 19625  15D6  1803               	skipnc
 19626  15D7  2DDD               	goto	i1l7841
 19627                           
 19628                           ;Dimmer_B1.c: 1301: DimmerIntr2.DimmingValue++;
 19629  15D8  3001               	movlw	1
 19630  15D9  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19631  15DA  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19632  15DB  07E8               	addwf	(_DimmerIntr2^(0+128)+4),f
 19633                           
 19634                           ;Dimmer_B1.c: 1302: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 19635  15DC  0008               	return
 19636  15DD                     i1l7841:	
 19637  15DD  0868               	movf	(_DimmerIntr2^(0+128)+4),w
 19638  15DE  0269               	subwf	(_DimmerIntr2^(0+128)+5),w
 19639  15DF  1803               	skipnc
 19640  15E0  2DE4               	goto	i1l1028
 19641                           
 19642                           ;Dimmer_B1.c: 1303: DimmerIntr2.DimmingValue--;
 19643  15E1  3001               	movlw	1
 19644  15E2  02E8               	subwf	(_DimmerIntr2^(0+128)+4),f
 19645                           
 19646                           ;Dimmer_B1.c: 1304: } else {
 19647  15E3  0008               	return
 19648  15E4                     i1l1028:	
 19649                           
 19650                           ;Dimmer_B1.c: 1305: DimmerIntr2.Dimming_RF = 0;
 19651  15E4  1364               	bcf	_DimmerIntr2^(0+128),6
 19652  15E5  0008               	return
 19653  15E6                     __end_of_DimmerLights_MOSFET_TMR_2:	
 19654                           
 19655                           	psect	text140
 19656  1542                     __ptext140:	
 19657 ;; *************** function _DimmerLights_MOSFET_TMR_1 *****************
 19658 ;; Defined at:
 19659 ;;		line 1191 in file "../src/Dimmer_B1.c"
 19660 ;; Parameters:    Size  Location     Type
 19661 ;;		None
 19662 ;; Auto vars:     Size  Location     Type
 19663 ;;		None
 19664 ;; Return value:  Size  Location     Type
 19665 ;;		None               void
 19666 ;; Registers used:
 19667 ;;		wreg, status,2, status,0
 19668 ;; Tracked objects:
 19669 ;;		On entry : 0/0
 19670 ;;		On exit  : 0/0
 19671 ;;		Unchanged: 0/0
 19672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19676 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19677 ;;Total ram usage:        1 bytes
 19678 ;; Hardware stack levels used:    1
 19679 ;; This function calls:
 19680 ;;		Nothing
 19681 ;; This function is called by:
 19682 ;;		_TMR1_ISR
 19683 ;; This function uses a non-reentrant model
 19684 ;;
 19685                           
 19686                           
 19687                           ;psect for function _DimmerLights_MOSFET_TMR_1
 19688  1542                     _DimmerLights_MOSFET_TMR_1:	
 19689                           
 19690                           ;Dimmer_B1.c: 1192: if (DimmerIntr1.Start == 1) {
 19691                           
 19692                           ;incstack = 0
 19693                           ; Regs used in _DimmerLights_MOSFET_TMR_1: [wreg+status,2+status,0]
 19694  1542  0021               	movlb	1	; select bank1
 19695  1543  1D5D               	btfss	_DimmerIntr1^(0+128),2
 19696  1544  2D4F               	goto	i1l7755
 19697                           
 19698                           ;Dimmer_B1.c: 1193: DimmerIntr1.Count++;
 19699  1545  3001               	movlw	1
 19700  1546  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19701  1547  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19702  1548  07DE               	addwf	(_DimmerIntr1^(0+128)+1),f
 19703                           
 19704                           ;Dimmer_B1.c: 1194: if (DimmerIntr1.Count >= ((char)(65*0.8)) + 1) {
 19705  1549  3035               	movlw	53
 19706  154A  025E               	subwf	(_DimmerIntr1^(0+128)+1),w
 19707  154B  1C03               	skipc
 19708  154C  2D4F               	goto	i1l7755
 19709                           
 19710                           ;Dimmer_B1.c: 1195: DimmerIntr1.Count = 0;
 19711  154D  01DE               	clrf	(_DimmerIntr1^(0+128)+1)
 19712                           
 19713                           ;Dimmer_B1.c: 1196: DimmerIntr1.Start = 0;
 19714  154E  115D               	bcf	_DimmerIntr1^(0+128),2
 19715  154F                     i1l7755:	
 19716                           
 19717                           ;Dimmer_B1.c: 1197: }
 19718                           ;Dimmer_B1.c: 1198: }
 19719                           ;Dimmer_B1.c: 1200: if (DimmerIntr1.GO == 1) {
 19720  154F  1C5D               	btfss	_DimmerIntr1^(0+128),0
 19721  1550  2D5C               	goto	i1l982
 19722                           
 19723                           ;Dimmer_B1.c: 1201: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19724  1551  0861               	movf	(_DimmerIntr1^(0+128)+4),w
 19725  1552  025E               	subwf	(_DimmerIntr1^(0+128)+1),w
 19726  1553  1C03               	skipc
 19727  1554  0008               	return
 19728                           
 19729                           ;Dimmer_B1.c: 1202: DimmerIntr1.GO = 0;
 19730  1555  105D               	bcf	_DimmerIntr1^(0+128),0
 19731                           
 19732                           ;Dimmer_B1.c: 1203: DimmerIntr1.Tune = 1;
 19733  1556  14DD               	bsf	_DimmerIntr1^(0+128),1
 19734                           
 19735                           ;Dimmer_B1.c: 1205: if (DimmerIntr1.ControlStatus == 1) {
 19736  1557  1DDD               	btfss	_DimmerIntr1^(0+128),3
 19737  1558  0008               	return
 19738                           
 19739                           ;Dimmer_B1.c: 1206: RA7 = 0;
 19740  1559  0020               	movlb	0	; select bank0
 19741  155A  138C               	bcf	12,7	;volatile
 19742                           
 19743                           ;Dimmer_B1.c: 1208: }
 19744                           ;Dimmer_B1.c: 1209: }
 19745                           ;Dimmer_B1.c: 1210: } else {
 19746  155B  0008               	return
 19747  155C                     i1l982:	
 19748                           
 19749                           ;Dimmer_B1.c: 1211: if (DimmerIntr1.Tune == 1) {
 19750  155C  1CDD               	btfss	_DimmerIntr1^(0+128),1
 19751  155D  0008               	return
 19752                           
 19753                           ;Dimmer_B1.c: 1212: DimmerIntr1.Tune = 0;
 19754  155E  10DD               	bcf	_DimmerIntr1^(0+128),1
 19755                           
 19756                           ;Dimmer_B1.c: 1213: DimmerIntr1.TuneTime++;
 19757  155F  3001               	movlw	1
 19758  1560  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19759  1561  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19760  1562  07DF               	addwf	(_DimmerIntr1^(0+128)+2),f
 19761                           
 19762                           ;Dimmer_B1.c: 1214: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19763  1563  0860               	movf	(_DimmerIntr1^(0+128)+3),w
 19764  1564  025F               	subwf	(_DimmerIntr1^(0+128)+2),w
 19765  1565  1C03               	skipc
 19766  1566  0008               	return
 19767                           
 19768                           ;Dimmer_B1.c: 1215: DimmerIntr1.TuneTime = 0;
 19769  1567  01DF               	clrf	(_DimmerIntr1^(0+128)+2)
 19770                           
 19771                           ;Dimmer_B1.c: 1216: if (DimmerIntr1.Dimming_Sw == 1) {
 19772  1568  1E5D               	btfss	_DimmerIntr1^(0+128),4
 19773  1569  2D80               	goto	i1l988
 19774                           
 19775                           ;Dimmer_B1.c: 1217: if (DimmerIntr1.Dimming_Status == 0) {
 19776  156A  1ADD               	btfsc	_DimmerIntr1^(0+128),5
 19777  156B  2D77               	goto	i1l7779
 19778                           
 19779                           ;Dimmer_B1.c: 1218: if (DimmerIntr1.DimmingValue < ((char)(65*0.8))) {
 19780  156C  3034               	movlw	52
 19781  156D  0261               	subwf	(_DimmerIntr1^(0+128)+4),w
 19782  156E  1803               	skipnc
 19783  156F  2D75               	goto	i1l990
 19784                           
 19785                           ;Dimmer_B1.c: 1219: DimmerIntr1.DimmingValue++;
 19786  1570  3001               	movlw	1
 19787  1571  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19788  1572  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19789  1573  07E1               	addwf	(_DimmerIntr1^(0+128)+4),f
 19790                           
 19791                           ;Dimmer_B1.c: 1220: } else {
 19792  1574  0008               	return
 19793  1575                     i1l990:	
 19794                           
 19795                           ;Dimmer_B1.c: 1221: DimmerIntr1.Dimming_Status = 1;
 19796  1575  16DD               	bsf	_DimmerIntr1^(0+128),5
 19797                           
 19798                           ;Dimmer_B1.c: 1222: }
 19799                           ;Dimmer_B1.c: 1223: } else {
 19800  1576  0008               	return
 19801  1577                     i1l7779:	
 19802                           
 19803                           ;Dimmer_B1.c: 1224: if (DimmerIntr1.DimmingValue > ((char)(20*0.8))) {
 19804  1577  3011               	movlw	17
 19805  1578  0261               	subwf	(_DimmerIntr1^(0+128)+4),w
 19806  1579  1C03               	skipc
 19807  157A  2D7E               	goto	i1l993
 19808                           
 19809                           ;Dimmer_B1.c: 1225: DimmerIntr1.DimmingValue--;
 19810  157B  3001               	movlw	1
 19811  157C  02E1               	subwf	(_DimmerIntr1^(0+128)+4),f
 19812                           
 19813                           ;Dimmer_B1.c: 1226: } else {
 19814  157D  0008               	return
 19815  157E                     i1l993:	
 19816                           
 19817                           ;Dimmer_B1.c: 1227: DimmerIntr1.Dimming_Status = 0;
 19818  157E  12DD               	bcf	_DimmerIntr1^(0+128),5
 19819                           
 19820                           ;Dimmer_B1.c: 1228: }
 19821                           ;Dimmer_B1.c: 1229: }
 19822                           ;Dimmer_B1.c: 1230: } else if (DimmerIntr1.Dimming_RF == 1) {
 19823  157F  0008               	return
 19824  1580                     i1l988:	
 19825  1580  1F5D               	btfss	_DimmerIntr1^(0+128),6
 19826  1581  0008               	return
 19827                           
 19828                           ;Dimmer_B1.c: 1231: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19829  1582  0862               	movf	(_DimmerIntr1^(0+128)+5),w
 19830  1583  0261               	subwf	(_DimmerIntr1^(0+128)+4),w
 19831  1584  1803               	skipnc
 19832  1585  2D8B               	goto	i1l7787
 19833                           
 19834                           ;Dimmer_B1.c: 1232: DimmerIntr1.DimmingValue++;
 19835  1586  3001               	movlw	1
 19836  1587  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19837  1588  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19838  1589  07E1               	addwf	(_DimmerIntr1^(0+128)+4),f
 19839                           
 19840                           ;Dimmer_B1.c: 1233: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19841  158A  0008               	return
 19842  158B                     i1l7787:	
 19843  158B  0861               	movf	(_DimmerIntr1^(0+128)+4),w
 19844  158C  0262               	subwf	(_DimmerIntr1^(0+128)+5),w
 19845  158D  1803               	skipnc
 19846  158E  2D92               	goto	i1l999
 19847                           
 19848                           ;Dimmer_B1.c: 1234: DimmerIntr1.DimmingValue--;
 19849  158F  3001               	movlw	1
 19850  1590  02E1               	subwf	(_DimmerIntr1^(0+128)+4),f
 19851                           
 19852                           ;Dimmer_B1.c: 1235: } else {
 19853  1591  0008               	return
 19854  1592                     i1l999:	
 19855                           
 19856                           ;Dimmer_B1.c: 1236: DimmerIntr1.Dimming_RF = 0;
 19857  1592  135D               	bcf	_DimmerIntr1^(0+128),6
 19858  1593  0008               	return
 19859  1594                     __end_of_DimmerLights_MOSFET_TMR_1:	
 19860                           
 19861                           	psect	text141
 19862  1B87                     __ptext141:	
 19863 ;; *************** function _IOC_ISR *****************
 19864 ;; Defined at:
 19865 ;;		line 397 in file "../src/MCU_B1.c"
 19866 ;; Parameters:    Size  Location     Type
 19867 ;;		None
 19868 ;; Auto vars:     Size  Location     Type
 19869 ;;		None
 19870 ;; Return value:  Size  Location     Type
 19871 ;;		None               void
 19872 ;; Registers used:
 19873 ;;		status,2, status,0, pclath, cstack
 19874 ;; Tracked objects:
 19875 ;;		On entry : 0/0
 19876 ;;		On exit  : 0/0
 19877 ;;		Unchanged: 0/0
 19878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19883 ;;Total ram usage:        0 bytes
 19884 ;; Hardware stack levels used:    1
 19885 ;; Hardware stack levels required when called:    1
 19886 ;; This function calls:
 19887 ;;		_DimmerLights_MOSFET_IOC_1
 19888 ;;		_DimmerLights_MOSFET_IOC_2
 19889 ;; This function is called by:
 19890 ;;		_ISR
 19891 ;; This function uses a non-reentrant model
 19892 ;;
 19893                           
 19894                           
 19895                           ;psect for function _IOC_ISR
 19896  1B87                     _IOC_ISR:	
 19897                           
 19898                           ;MCU_B1.c: 398: IOCBF2 = 0;
 19899                           
 19900                           ;incstack = 0
 19901                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 19902  1B87  0027               	movlb	7	; select bank7
 19903  1B88  1116               	bcf	22,2	;volatile
 19904                           
 19905                           ;MCU_B1.c: 399: IOCIF = 0;
 19906  1B89  100B               	bcf	11,0	;volatile
 19907                           
 19908                           ;MCU_B1.c: 401: if (myMain.PowerON == 1) {
 19909  1B8A  0022               	movlb	2	; select bank2
 19910  1B8B  1C20               	btfss	_myMain^(0+256),0
 19911  1B8C  0008               	return
 19912                           
 19913                           ;MCU_B1.c: 407: DimmerLights_MOSFET_IOC_1();
 19914  1B8D  319B  23CF  319B   	fcall	_DimmerLights_MOSFET_IOC_1
 19915                           
 19916                           ;MCU_B1.c: 412: DimmerLights_MOSFET_IOC_2();
 19917  1B90  319B  23DD         	fcall	_DimmerLights_MOSFET_IOC_2
 19918  1B92  0008               	return
 19919  1B93                     __end_of_IOC_ISR:	
 19920                           
 19921                           	psect	text142
 19922  1BDD                     __ptext142:	
 19923 ;; *************** function _DimmerLights_MOSFET_IOC_2 *****************
 19924 ;; Defined at:
 19925 ;;		line 1313 in file "../src/Dimmer_B1.c"
 19926 ;; Parameters:    Size  Location     Type
 19927 ;;		None
 19928 ;; Auto vars:     Size  Location     Type
 19929 ;;		None
 19930 ;; Return value:  Size  Location     Type
 19931 ;;		None               void
 19932 ;; Registers used:
 19933 ;;		None
 19934 ;; Tracked objects:
 19935 ;;		On entry : 0/0
 19936 ;;		On exit  : 0/0
 19937 ;;		Unchanged: 0/0
 19938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19943 ;;Total ram usage:        0 bytes
 19944 ;; Hardware stack levels used:    1
 19945 ;; This function calls:
 19946 ;;		Nothing
 19947 ;; This function is called by:
 19948 ;;		_IOC_ISR
 19949 ;; This function uses a non-reentrant model
 19950 ;;
 19951                           
 19952                           
 19953                           ;psect for function _DimmerLights_MOSFET_IOC_2
 19954  1BDD                     _DimmerLights_MOSFET_IOC_2:	
 19955                           
 19956                           ;Dimmer_B1.c: 1314: if (DimmerIntr2.Start == 0 && RB2 == 1) {
 19957                           
 19958                           ;incstack = 0
 19959                           ; Regs used in _DimmerLights_MOSFET_IOC_2: []
 19960  1BDD  0021               	movlb	1	; select bank1
 19961  1BDE  1964               	btfsc	_DimmerIntr2^(0+128),2
 19962  1BDF  0008               	return
 19963  1BE0  0020               	movlb	0	; select bank0
 19964  1BE1  1D0D               	btfss	13,2	;volatile
 19965  1BE2  0008               	return
 19966                           
 19967                           ;Dimmer_B1.c: 1315: DimmerIntr2.Start = 1;
 19968  1BE3  0021               	movlb	1	; select bank1
 19969  1BE4  1564               	bsf	_DimmerIntr2^(0+128),2
 19970                           
 19971                           ;Dimmer_B1.c: 1316: DimmerIntr2.GO = 1;
 19972  1BE5  1464               	bsf	_DimmerIntr2^(0+128),0
 19973                           
 19974                           ;Dimmer_B1.c: 1318: if (DimmerIntr2.ControlStatus == 1) {
 19975  1BE6  1DE4               	btfss	_DimmerIntr2^(0+128),3
 19976  1BE7  0008               	return
 19977                           
 19978                           ;Dimmer_B1.c: 1319: RB4 = 1;
 19979  1BE8  0020               	movlb	0	; select bank0
 19980  1BE9  160D               	bsf	13,4	;volatile
 19981  1BEA  0008               	return
 19982  1BEB                     __end_of_DimmerLights_MOSFET_IOC_2:	
 19983                           
 19984                           	psect	text143
 19985  1BCF                     __ptext143:	
 19986 ;; *************** function _DimmerLights_MOSFET_IOC_1 *****************
 19987 ;; Defined at:
 19988 ;;		line 1244 in file "../src/Dimmer_B1.c"
 19989 ;; Parameters:    Size  Location     Type
 19990 ;;		None
 19991 ;; Auto vars:     Size  Location     Type
 19992 ;;		None
 19993 ;; Return value:  Size  Location     Type
 19994 ;;		None               void
 19995 ;; Registers used:
 19996 ;;		None
 19997 ;; Tracked objects:
 19998 ;;		On entry : 0/0
 19999 ;;		On exit  : 0/0
 20000 ;;		Unchanged: 0/0
 20001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20006 ;;Total ram usage:        0 bytes
 20007 ;; Hardware stack levels used:    1
 20008 ;; This function calls:
 20009 ;;		Nothing
 20010 ;; This function is called by:
 20011 ;;		_IOC_ISR
 20012 ;; This function uses a non-reentrant model
 20013 ;;
 20014                           
 20015                           
 20016                           ;psect for function _DimmerLights_MOSFET_IOC_1
 20017  1BCF                     _DimmerLights_MOSFET_IOC_1:	
 20018                           
 20019                           ;Dimmer_B1.c: 1245: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 20020                           
 20021                           ;incstack = 0
 20022                           ; Regs used in _DimmerLights_MOSFET_IOC_1: []
 20023  1BCF  0021               	movlb	1	; select bank1
 20024  1BD0  195D               	btfsc	_DimmerIntr1^(0+128),2
 20025  1BD1  0008               	return
 20026  1BD2  0020               	movlb	0	; select bank0
 20027  1BD3  1D0D               	btfss	13,2	;volatile
 20028  1BD4  0008               	return
 20029                           
 20030                           ;Dimmer_B1.c: 1246: DimmerIntr1.Start = 1;
 20031  1BD5  0021               	movlb	1	; select bank1
 20032  1BD6  155D               	bsf	_DimmerIntr1^(0+128),2
 20033                           
 20034                           ;Dimmer_B1.c: 1247: DimmerIntr1.GO = 1;
 20035  1BD7  145D               	bsf	_DimmerIntr1^(0+128),0
 20036                           
 20037                           ;Dimmer_B1.c: 1249: if (DimmerIntr1.ControlStatus == 1) {
 20038  1BD8  1DDD               	btfss	_DimmerIntr1^(0+128),3
 20039  1BD9  0008               	return
 20040                           
 20041                           ;Dimmer_B1.c: 1250: RA7 = 1;
 20042  1BDA  0020               	movlb	0	; select bank0
 20043  1BDB  178C               	bsf	12,7	;volatile
 20044  1BDC  0008               	return
 20045  1BDD                     __end_of_DimmerLights_MOSFET_IOC_1:	
 20046  007E                     btemp	set	126	;btemp
 20047  007E                     pic14e$flags	set	126
 20048  007E                     wtemp	set	126
 20049  007E                     wtemp0	set	126
 20050  0080                     wtemp1	set	128
 20051  0082                     wtemp2	set	130
 20052  0084                     wtemp3	set	132
 20053  0086                     wtemp4	set	134
 20054  0088                     wtemp5	set	136
 20055  007F                     wtemp6	set	127
 20056  007E                     ttemp	set	126
 20057  007E                     ttemp0	set	126
 20058  0081                     ttemp1	set	129
 20059  0084                     ttemp2	set	132
 20060  0087                     ttemp3	set	135
 20061  007F                     ttemp4	set	127
 20062  007E                     ltemp	set	126
 20063  007E                     ltemp0	set	126
 20064  0082                     ltemp1	set	130
 20065  0086                     ltemp2	set	134
 20066  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         268
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     77      80
    BANK1            80      2      77
    BANK2            80      0      77
    BANK3            80      4      80
    BANK4            80      7      76
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    DimmerIntr	PTR struct Dimmer_Interrut size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr2(BANK1[7]), DimmerIntr1(BANK1[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _setLED->_LedPointSelect
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_MOSFET_TMR_1
    _TMR1_ISR->_DimmerLights_MOSFET_TMR_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setDimmerLights_SwOff
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setRF_DimmerLights
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_Exception_Main

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  154722
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1512
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              6 COMMON     2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             62 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7898
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7898
                                             71 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      93
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   54413
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   54413
                                              0 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   50137
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             62 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   45996
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   14109
                                             71 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   23461
                                             71 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     201
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     512
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     482
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     417
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     284
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     444
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    2053
                                              0 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      50
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1011
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0     985
                                              8 COMMON     1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   11976
                                             58 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7340
                                             71 BANK0      1     1      0
                                              0 BANK4      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   52790
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   52458
                                             71 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   33160
                                             67 BANK0      4     3      1
                      _getCmd_Status
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     278
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     152
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      71
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   14033
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3075
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   18761
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2749
                                             62 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     432
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   10958
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     525
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     219
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3315
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4080
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    2720
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2433
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    6030
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    6030
                                             71 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1812
                                              9 COMMON     1     1      0
                                              6 BANK0      4     4      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1512
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3905
                                             70 BANK0      1     1      0
         _DimmerLights_SelectPointer
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       8     6      2    3623
                                             62 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2295
                                             58 BANK0      4     3      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     290
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
          _DimmerLights_MOSFET_TMR_1
          _DimmerLights_MOSFET_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_2                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_1                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
          _DimmerLights_MOSFET_IOC_1
          _DimmerLights_MOSFET_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_2                           0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_1                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         ___bmul
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
             _getDelayOff_GO
               _DelayOffPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 ___bmul
                 _setProductData
                   _getDimmerIntr_DimmingValue (ARG)
                   _getDimmerLights_ValueToPercent (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 ___bmul
                 _setProductData
                   _getDimmerIntr_DimmingValue (ARG)
                   _getDimmerLights_ValueToPercent (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_MOSFET_IOC_1
     _DimmerLights_MOSFET_IOC_2
   _TMR1_ISR
     _DimmerLights_MOSFET_TMR_1
     _DimmerLights_MOSFET_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      7      4C      13       95.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     192      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     192      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Jan 03 10:54:28 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1D91  
                          ___bmul@product 0074                 getMain_Lights_Count@count 0072  
                                      l96 1615                                        l98 1627  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1095  
                                      _WR 0CA9                              ___awdiv@sign 0021  
                                      _Sw 006E                       ___wmul@multiplicand 0074  
                    _getDimmerLights_Line 1C26                    __end_of_setDelayOff_GO 0BBB  
                            ___ftadd@exp1 0045                              ___ftadd@exp2 0044  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 09A0  
                    _setDimmerLights_Line 1D06                              ___ftadd@sign 0043  
                                     l110 1401                                       l106 1407  
                                     l107 1403                                       l108 13F3  
                                     l323 1E1D                      _setDimmerLights_SwOn 168D  
                                     l324 1E1F                                       l255 0AAC  
                                     l367 10E1                                       l742 1D3C  
                                     l912 0E67                                       l945 1C2D  
                                     l946 1C33                                       l887 1F51  
                                     _GIE 005F                                       _CRC 00BF  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00C2                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00BD  
                                     _Cmd 00C0              getDimmerLights_Status@lights 0074  
                                     _Sw1 01D0                                       _Sw2 01D9  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 1E2A  
                   _Buzzer_Initialization 1ACA                           __end_of_ADC_Set 1B1F  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 1152  
             _setDimmerIntr_ControlStatus 1129                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 1B93                     _setDimmerLights_OnOff 0DEB  
        setDimmerLights_DimmingRun@lights 0076                                Load_Main@i 0024  
                            ___ftdiv@sign 0035                                      l1134 1EEE  
                                    l1135 1EF7                                      l2201 0CBA  
                                    l2132 062D                                      l2133 066E  
                                    l1168 1375                                      l2216 0C1C  
                                    l2128 06C6                                      l1441 122A  
                                    l1169 137C                                      l1602 01E9  
                                    l1612 01C5                                      l1604 008B  
                                    l1613 01C3                                      l1605 0087  
                                    l2173 0B3E                                      l1606 0082  
                                    l2158 1C3A                                      l1455 119E  
                                    l1464 1499                                      l2192 0C50  
                                    l2520 1DD7                                      l3153 085E  
                                    l2185 1260                                      l3147 0847  
                         __end_of_IOC_Set 1BC3                                      l2542 0354  
                                    l3176 03FD                                      l2544 0232  
                                    l1770 0F46                                      l1775 0F40  
                                    l2824 1341                                      l2851 11E2  
                                    l2852 11FB                                      l2856 11F7  
                                    l7017 113E                                      l7025 1D9C  
                                    l7035 1D33                                      l2883 0531  
                                    l2892 1D90                                      l7045 10CB  
                                    l7135 1D12                                      l7153 1C6C  
                                    l2986 1F09                                      l7155 1C71  
                   _setDimmerLights_SwOff 140E                                      l9101 1675  
                                    l7149 1C66                                      l7335 12A8  
                                    l9017 1D5D                                      l9025 1CD5  
                                    l9105 167E                                      l9201 1FE9  
                                    l7601 1F68                                      l7347 12BC  
                                    l9051 0833                                      l9043 081D  
                                    l7611 1F75                                      l7603 1F6A  
                                    l9029 1CDB                                      l9109 1686  
                                    l7357 12CB                                      l7349 12BE  
                                    l9213 0386                                      l7613 1F79  
                                    l7359 12CF                                      l9047 0824  
                                    l9223 039C                                      l9311 0DC9  
                                    l9303 0DB0                                      l8239 1F03  
                                    l9057 084C                                      l9049 082E  
                                    l9241 03C9                                      l9217 038D  
                                    l9401 0D04                                      l8259 13DF  
                                    l9171 0BA5                                      l9083 164F  
                                    l9059 0854                                      l9243 03D3  
                                    l9235 03B6                                      l9411 0D28  
                                    l9403 0D12                                      l9331 0F79  
                                    l9165 0B99                                      l9501 143C  
                                    l9093 1657                                      l9077 1644  
                                    l9253 03EF                                      l9245 03D8  
                                    l9413 0D2B                                      l9325 0F63  
                                    l9159 0B84                                      l9095 1663  
                                    l9263 0421                                      l9255 03F9  
                                    l9247 03DC                                      l9511 1E07  
                                    l9343 0FB4                                      l7487 1189  
                                    l9169 0B9F                                      l9273 043C  
                                    l9417 0D39                                      l9409 0D1F  
                                    l9259 040F                                      l9283 0D59  
                                    l9355 0FD0                                      l9347 0FBC  
                                    l7691 1E90                                      l9611 1E54  
                                    l7587 080B                                      l9189 1D72  
                                    l9605 1E4B                     _myMain_Initialization 1C44  
                                    l9383 0CD4                                      l9543 178C  
                                    l9359 0FD8                                      l9519 1167  
                                    l7679 1E7F                                      l9607 1E4E  
                                    l9631 1EDD                                      l9289 0D6F  
                                    l7689 1E8C                                      l9713 14E4  
                                    l9467 16A1                                      l7955 146E  
                                    l9643 10F2                                      l9651 107C  
                                    l9477 16B2                                      l9469 16A4  
                                    l9901 17EF                                      l7949 145A  
                                    l9645 10FD                                      l9653 107F  
                                    l9629 1ED8                                      l9725 0BD2  
                                    l9709 14D5                                      l9487 16DA  
                                    l9479 16B7                                      l9489 16DF  
                                    l9673 1C24                                      l9905 17F5  
                                    l9657 1085                                      l9753 10A8  
                                    l9737 0C08                                      l9729 0BD7  
                                    _CFGS 0CAE                                      l9683 1D8B  
                                    l9747 109F                                      l9845 11DE  
                                    l9781 13B2                                      l9749 10A2  
                                    l9941 0C80                                      l9855 11F3  
                                    l9847 11E6                                      l9679 1D7E  
                                    l9871 17B5                                      l9791 13C2  
                                    l9775 13A9                                      l9943 0C95  
                            __CFG_WDTE$ON 0000                                      l9881 17C5  
                                    l9785 13B9                                      l9777 13AC  
                                    l9945 0C99                                      l9937 0C5F  
                                    l9929 0C3B                                      l9953 0CA5  
                                    l9867 17AF                                      l9875 17BB  
                                    l9787 13BC                                      l9971 0A86  
                                    l9947 0C9D                                      l9939 0C65  
                                    l9885 17CB                                      l9965 0A7D  
                                    l9949 0CA1                                      l9991 0AB6  
                                    l9967 0A80                                      l9897 17E9  
                                    l9889 17D1                                      l9985 0A95  
                                    l9995 0ABC                                      l9997 0AC0  
                                    l9989 0AB3                                      l9999 0AC3  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u8635 1F0A  
                                    u8645 1F0F                                      u8675 13D5  
                                    _LWLO 0CAD                                      _RSSI 00C3  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1E42                _setDimmerLights_DimmingRun 1E2A  
                                    _Buz1 00AE                                      _Load 0133  
                                    _Temp 00CB                                      _main 16E7  
                            ___ftpack@arg 0072                       __end_of_DlyOff_Main 0A6D  
                         __end_of_RF_Main 1AD6                              ___ftpack@exp 0075  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B51  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0C3A  
                       ___bmul@multiplier 0075                              ___ftmul@cntr 0034  
                            ___ftmul@sign 0035              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2190 0076      _getDimmerLights_Allow_Condition$2188 0074  
    _getDimmerLights_Allow_Condition$2189 0075                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 0071                              ___fttol@exp1 0053  
                            ___fttol@lval 004F         setDimmerLights_DimmingRun@command 0074  
 __end_of_getDimmerLights_Allow_Condition 12D1  __size_of_getDimmerLights_Allow_Condition 0037  
       ??_getDimmerLights_Allow_Condition 0073          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 129A                    _getDimmerLights_Status 1BF9  
                      ??_getDimmer_LoadGO 0072                          __end_of_LED_Main 1BB7  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 007B  
                                   l10003 0AC9                                     l10021 0888  
                                   l10023 088B                                     l10113 0E6D  
                                   l10107 0E63                                     l10043 08A0  
                                   l10027 0891                                     l10203 0B04  
                                   l10133 150A                                     l10045 08B6  
                                   l10127 0E97                                     l10215 0B1A  
                                   l10241 128A                                     l10233 126C  
                                   l10235 1278                                     l10171 1CEF  
                                   l10093 0E35                                     l10245 1293  
                                   l10405 0F2C                                     l10341 1EB8  
                                   l10191 0AEB                                     l10503 1DE2  
                                   l10407 0F2D                                     l11063 1716  
                                   l10097 0E4C                                     l10441 0669  
                                   l10345 1EBE                                     l10283 09C6  
                                   l10363 0EB6                                     l10339 1EB5  
                                   l11059 170B                                     l10285 09CC  
                                   l10533 025F                                     l10517 021C  
                                   l10295 09F2                                     l10607 1F53  
                                   l10455 067D                                     l10543 0291  
                                   l10711 07C3                                     l10703 07A0  
                                   l10297 09F8                                     l10393 0F15  
                                   l10635 05A4                                     l10811 015A  
                                   l10483 06BF                                     l10395 0F17  
                                   l10731 07F7                                     l10715 07CC  
                                   l10821 0183                                     l10469 06A7  
                                   l10557 02CF                                     l10567 0301  
                   ?_setDimmerLights_Main 0070                                     l10817 0167  
                                   l10825 018F                                     l10745 0069  
                                   l10921 1322                                     l10835 01A5  
                                   l10763 008A                                     l10499 1DDC  
                                   l10951 0476                                     l10961 0495  
                                   l10873 01D8                                     l10785 00E0  
                                   l10971 0498                                     l10779 00AE  
                                   l10973 04C7                                     l10957 0486  
                                   l10893 12FB                                     l10991 050C  
                                   l10993 0516                                     l10969 04BF  
                                   l10987 0504                                     l10989 04DD  
                                   l10999 0527                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 005E                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01EC                           __end_of___awdiv 168D  
                         __end_of___ftadd 0454                           __end_of___ftdiv 0DEB  
                         __end_of___ftneg 1B3F                                     u10205 166E  
                                   u10125 0865                                     u10215 1676  
                                   u10055 0829                                     u11120 174C  
                                   u10305 0B6F                                     u10075 0842  
                                   u11125 174A                           __end_of___ftmul 1000  
                                   u10175 165A                                     u10095 084F  
                                   u11225 10E7                                     u10195 1664  
                         ___awdiv@divisor 0072                                     u10525 03DD  
                                   u12205 128B                                     _T1CON 0018  
                                   u10465 03B7                                     u10625 0D81  
                                   u10705 0F85                                     u13025 07B0  
                                   u10555 03F0                                     u10635 0D91  
                                   u10715 0F95                                     u10645 0DB1  
                         __end_of___fttol 0D42                                     u12165 126F  
                                   u10495 03CA                                     u10655 0DC0  
                                   u10735 0FBD                                     u10665 0DCA  
                                   u10825 0CDB                                     u10745 0FC3  
                                   u12185 1279                                     u13225 00AC  
                                   u12505 0EFD                                     u12195 1283  
                                   u13235 00DE                                     u10915 1DB5  
                                   u13075 07E4                                     u13325 0196  
                                   u13245 0113                                     u12525 0F1D  
                                   u10855 0D05                                     u10775 0FD9  
                                   u12615 0649                                     u10785 0FDF  
                                   u13425 12F2                                     u13435 1301  
                                   u13540 04C5                                     u10885 0D20  
                                   u12645 0696                                     u13545 04A3  
                                   u11945 1DF5                                     u13570 050A  
                                   u13475 1339                                     _IOCBF 0396  
                                   u13575 04E8                                     _IOCBN 0395  
                                   _IOCBP 0394                                     u12985 1221  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 129A                                     i1l990 1575  
                                   i1l982 155C                                     i1l993 157E  
                                   i1l988 1580                                     i1l999 1592  
                         ___awdiv@counter 0020             __size_of_CC2500_FrequencyCabr 000B  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0073                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1DFB                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 093B   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 08D6                          __end_of_TMR1_ISR 1FBC  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1BCF                                     _getAD 1EAD  
                           ___awtoft@sign 0025                             ___ftpack@sign 0076  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0072  
                        __end_of_WDT_Main 1CD3               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0077                            __pbitbssCOMMON 03D0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1C93  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010             __end_of_setLED_Initialization 1C83  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 1742               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0060               __size_of_setRF_TransceiveGO 0010  
                  ??_Flash_Memory_Erasing 0072               ??_setDimmerLights_DimmingOn 0074  
                      ??_CC2500_SIDLEMode 0076                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 000F                              __end_of_main 1742  
                     ?_setRF_DimmerLights 005E                          __end_of_Fosc_Set 1ADD  
          getMain_All_LightsStatus@status 0072                        ??_setMemory_Modify 0072  
            setDimmerLights_OnOff@command 0063                            _Exception_Main 0454  
                        ?_CC2500_WriteREG 0074                                 ??_ADC_Set 0072  
                    _setSw_Initialization 1B1F                                    ??_main 007A  
                           ___fttol@sign1 004E                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0072              ??_DimmerLights_SelectPointer 0072  
                 _setControl_Lights_Table 0C3A                            _setMemory_Data 1B66  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0074  
                              _Receive_OK 03D0        setDimmerIntr_ControlStatus@command 0072  
                 _setDimmerLights_Dimming 14F1                                 ??_IOC_ISR 0070  
                               ??_IOC_Set 0072                               _DimmerIntr1 00DD  
                             _DimmerIntr2 00E4                  _getMain_All_LightsStatus 1C17  
                __size_of_setRFSW_Control 0050                        _RF_Timeout_Counter 1DA6  
                 ??_Switch_Initialization 0077                    ?_setDimmerLights_OnOff 0063  
                    ??_setRF_DimmerLights 005F                                    ?_getAD 0072  
                       ??_getRF_KeyStatus 0072                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0A05                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 007A                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0074  
                   _getDimmer_Load_Status 1B11                                 ??_WDT_Set 0072  
                        __end_of___awtoft 2000                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0875                  _getMain_All_Error_Status 11CF  
                                  _IOCBF2 1CB2                                    i1l1011 15AE  
                                  i1l1022 15D0                                    i1l1017 15D2  
                                  i1l1019 15C7                                    i1l1028 15E4  
                                  i1l1403 0013                                    i1l1406 001B  
                                  i1l7841 15DD                                    i1l7833 15C9  
                                  i1l7809 15A1                                    i1l7755 154F  
                                  i1l7787 158B                                    i1l7779 1577  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0078  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 0198  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1E92                                    _WDTCON 0097  
                                  u878_25 1FB6                        DelayTime_1us@count 0072  
                    Exception_Main@i_6338 0269            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 005B             __end_of_CC2500_PowerOnInitial 1DD0  
                                  _Dimmer 012E                                    _DlySw1 01E2  
                                  _DlySw2 01E7             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1C73                __end_of_Mcu_Initialization 1D2A  
                     __end_of_Buzzer_Main 140E                                    _Memory 0220  
                                  _Timer1 00BA                                    ___bmul 1CD3  
                  __end_of_Exception_Main 0532                      Load_Main@Load_Status 0023  
                    Exception_Main@lights 026B                                    ___wmul 1F01  
                               ??___awdiv 0076                                 ??___ftadd 003F  
            __size_of_DelayOffPointSelect 0015                                 ??___ftdiv 002C  
                               ??___ftneg 007A                                 ??___ftmul 002C  
                               ??___fttol 004A              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0072                                 ??___lwdiv 0076  
                  ??_setDimmerLights_Main 007A                    ??_setDimmerLights_Line 0072  
                                  _r_data 00C9   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E92  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1E77  
                                  _s_data 00CA                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 17A1                                    _myMain 0120  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 1B71  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 15E6                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1AD0          ??_setDimmerLights_Initialization 0072  
         ?_setDimmerLights_Initialization 0070          __end_of_setDimmerIntr_Dimming_RF 117B  
        __end_of_setDimmerIntr_Dimming_Sw 10DD                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 1102                  Flash_Memory_Read@address 0074  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CC3  
             getMain_Lights_Count@status1 0073               getMain_Lights_Count@status2 0074  
                   __end_of_SwPointSelect 0815              __size_of_Flash_Memory_Modify 004D  
                 __size_of_LedPointSelect 001D           setDimmerIntr_Dimming_Sw@command 0072  
                     Flash_Memory_Write@i 0073              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1DD0               __size_of_CC2500_InitPATable 001D  
                     CC2500_TxData@loop_e 0077          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 0051           getDimmerIntr_DimmingValue@value 0073  
         setDimmerIntr_DimmingValue@value 0072                                 ?_LED_Main 0070  
                              ___ftadd@f1 0039                                ___ftadd@f2 003C  
                    _getRF_KeyStatus$4658 0074                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2160 0027                 _setDimmerLights_SwOn$2159 0026  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 0026  
                              ___ftdiv@f3 0031                                ___ftneg@f1 0036  
                              ___awtoft@c 0020                       ___bmul@multiplicand 0072  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 0026  
                              ___ftmul@f2 0029                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 0046                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1F7B  
                           __end_of_getAD 1EC8                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0073  
               setMemory_LoopSave@command 0073                        _LED_Initialization 1B9F  
                         _getSw_KeyStatus 1F5B                 ??_setControl_Lights_Table 007A  
                      getRF_KeyStatus@key 0073                           ?_setMemory_Data 0072  
        ??_getDimmerLights_PercentToValue 0054           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 0064             ??_Flash_Memory_Initialization 005A  
              ?_DimmerLights_MOSFET_IOC_1 0070                ?_DimmerLights_MOSFET_IOC_2 0070  
                    _getMain_Lights_Count 1C83                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 01ED         setDimmerIntr_ControlStatus@lights 0074  
              ?_DimmerLights_MOSFET_TMR_1 0070                ?_DimmerLights_MOSFET_TMR_2 0070  
                      __size_of_getBuz_GO 0010                 _setDimmerIntr_MaxmumValue 1DFB  
              __end_of_set_TimeoutCleared 1AF7           setDimmerIntr_MaxmumValue@lights 005C  
                      __size_of_getRxData 006B                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1BEB  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0075                       _Temp_Initialization 1AD6  
                      ??_CC2500_WriteByte 0072                                __pbssBANK0 006D  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 13C8  
                       ??_setRFSW_Control 0067               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 0800                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B26  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 006D                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0075                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 16E7  
                          _getDelayOff_GO 1C08                       _CC2500_WriteCommand 1E42  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 0060         __end_of_DimmerIntr_Initialization 1FDE  
           ??_DimmerLights_Initialization 0073                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0782                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1B03                        __size_of_setTxData 00B6  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B18  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 12D1  
      __end_of_DimmerLights_SelectPointer 1D7C                _DimmerLights_SelectPointer 1D67  
                              ??_WDT_Main 0072              __end_of_setRF_Initialization 1B5B  
       __end_of_DimmerLights_MOSFET_IOC_1 1BDD         __end_of_DimmerLights_MOSFET_IOC_2 1BEB  
                      _setRFSW_AdjControl 0BBB                    __end_of_setProductData 1BF9  
       __end_of_DimmerLights_MOSFET_TMR_1 1594         __end_of_DimmerLights_MOSFET_TMR_2 15E6  
           setDimmerLights_Dimming@lights 0065                                   _IOC_ISR 1B87  
                                 _IOC_Set 1BB7                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 0063     getDimmerLights_Allow_Condition@lights 0077  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11FD  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 1D3E  
                  __size_of_CC2500_RxData 0061                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1AD3                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1B48  
         __end_of_setControl_Lights_Table 0CBB                           setRF_Main@error 00EC  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 1542  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 1B7C                           __size_of_IO_Set 001B  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1CA3  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1C17                                   _VarLED1 0165  
                                 _VarLED2 0169            __end_of_getDimmerLights_Status 1C08  
                       __end_of_getRxData 0B40                   __end_of_getSw_KeyStatus 1F7B  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 0067                            ??_setTemp_Main 005E  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 1639                                   ___ftadd 035E  
                                 ___ftdiv 0D42                                   ___ftneg 1B36  
                         __size_of___wmul 001D                                   ___ftmul 0F4C  
                                 ___fttol 0CBB                       __end_of_Switch_Main 1B87  
                                 ___lwdiv 1264                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1CE4  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 006A  
                         __size_of_setBuz 0053                                   __ptext1 130A  
                                 __ptext2 1C44                                   __ptext3 12D1  
                                 __ptext4 0782                                   __ptext5 1EAD  
                                 __ptext6 1CC3                                   __ptext7 0002  
                                 __ptext8 07FD                                   __ptext9 0E9A  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0064  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 1230  
               __end_of_Flash_Memory_Read 1D52                   ??_setDimmerLights_SwOff 007A  
                              _setRF_Main 060E                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 1B2E                         _DimmerLights_Main 1F3B  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1AF2  
              __end_of_CC2500_ClearRXFIFO 1AE5                  ??_setTemp_Initialization 0072  
              __end_of_CC2500_ClearTXFIFO 1AE9                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006F  
                          _LedPointSelect 1EE4                       _DelayOffPointSelect 1D52  
                                 clrloop0 1AFE            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1073                      end_of_initialization 0051  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 11A5  
                           _DelayTime_1us 10DD                         __end_of_setTxData 0782  
              __end_of_Flash_Memory_Write 11A5        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 1AF7                __end_of_setRF_TransceiveGO 1C63  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 1AF8  
                              _setSw_Main 01ED                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 0029                         _CC2500_ReadStatus 1095  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1C73  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 0875                             _CC2500_TxData 0A6D  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1454  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1D7C                       _Flash_Memory_Unlock 1B3F  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1F5B                        _Mcu_Initialization 1D18  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1AE1  
                    __end_of_my_MainTimer 1343                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1F01  
                __size_of_CC2500_WriteREG 0022          getDimmerIntr_DimmingValue@lights 0074  
        setDimmerIntr_DimmingValue@lights 0074                 __end_of_CC2500_InitSetREG 11CF  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 005F                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 10B8                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 1129  
                        ??_Exception_Main 0067                            __end_of_IO_Set 1EAD  
                    _setRF_Initialization 1B51                        _setMemory_LoopSave 1CB3  
                             _Switch_Main 1B7C                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1CF5  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1DBB               ??_DimmerIntr_Initialization 0072  
                    ??_Mcu_Initialization 0073                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1CE4  
     __size_of_getDimmerIntr_DimmingValue 0014                      setRF_DimmerLights@on 005E  
                          __end_of___wmul 1F1E                         getSw_KeyStatus@sw 0076  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0021  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C               ??_DimmerLights_MOSFET_IOC_1 0070  
             ??_DimmerLights_MOSFET_IOC_2 0070             __size_of_setDimmerLights_Main 0065  
                          __end_of_setLED 1800             __size_of_setDimmerLights_Line 0012  
           __size_of_setDimmerLights_SwOn 005A                            __end_of_setBuz 1639  
             ??_DimmerLights_MOSFET_TMR_1 0070               ??_DimmerLights_MOSFET_TMR_2 0070  
                    _CC2500_FrequencyCabr 1B71                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0033                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 14A1  
                       __size_of_WDT_Main 0010                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0055  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 1B0A                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1F3B           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 0F4C                            ??_RF_RxDisable 0076  
  __end_of_getDimmerLights_PercentToValue 09A0   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 093B                       __size_of_getLoad_AD 007B  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 1AF2  
       __end_of_setDimmerIntr_MaxmumValue 1E12                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 0161  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0039  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 07FD                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00C4  
                   setProductData@address 005D                       Exception_Main@count 0265  
                     Exception_Main@error 0266                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 0015  
        __end_of_getMain_All_LightsStatus 1C26                                 _Tx_Length 00C7  
                             __pdataBANK4 0245                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 11FD  
                        _CC2500_SIDLEMode 1AE9                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1CA3                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00EB  
               setRF_TransceiveGO@command 0073                             __pcstackBANK3 01EC  
                           __pcstackBANK4 0265                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 1FBC                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0069  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 0068  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                 _DimmerLights_MOSFET_IOC_1 1BCF  
               _DimmerLights_MOSFET_IOC_2 1BDD                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 01BE  
                           _DimmerLights2 01C7                     CC2500_WriteREG@w_addr 0076  
               _DimmerLights_MOSFET_TMR_1 1542                 _DimmerLights_MOSFET_TMR_2 1594  
                   setDelayOff_GO@command 005E            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1E77  
                setRFSW_AdjControl@status 0069                           ??_CC2500_TxData 0076  
                               __pnvBANK0 006F                            getRxData@error 006C  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1ADD  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0267  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00BE  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1C63                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005F  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 1AC9  
                               _getBuz_GO 1C93                  ?_setDimmerLights_Dimming 0063  
     __end_of_Flash_Memory_Initialization 060E               _Flash_Memory_Initialization 0532  
                                ?___awdiv 0072                                 __ptext100 06CC  
                               __ptext101 1C53                                 __ptext110 035E  
                               __ptext102 1742                                 __ptext111 1FDE  
                               __ptext103 1D06                                 __ptext120 1B2E  
                               __ptext112 0815                                 __ptext104 1DFB  
                               __ptext121 0A05                                 __ptext113 1D2A  
                               __ptext105 10B8                                 __ptext130 1BF9  
                               __ptext122 168D                                 __ptext114 129A  
                               __ptext106 08D6                                 __ptext131 1D67  
                               __ptext123 15E6                                 __ptext115 1B03  
                               __ptext107 0CBB                                 __ptext140 1542  
                               __ptext132 1B26                                 __ptext124 1639  
                               __ptext116 11CF                                 __ptext108 1B36  
                               __ptext141 1B87                                 __ptext133 1AED  
                               __ptext125 140E                                 __ptext117 1B5B  
                               __ptext109 0D42                                  ?___ftadd 0039  
                               __ptext142 1BDD                                 __ptext134 1D52  
                               __ptext126 0B40                                 __ptext118 1AC8  
                               __ptext143 1BCF                                 __ptext135 13C8  
                               __ptext127 1BEB                                 __ptext119 1FBC  
                               __ptext136 1ACA                                 __ptext128 1CD3  
                               __ptext129 1C08                                 __ptext138 1F9B  
                               __ptext139 1594                                 _getRxData 0AD5  
                                ?___ftdiv 0026                                  ?___ftneg 0036  
                                ?___ftmul 0026                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0039                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 14F1                          ??_setProductData 005B  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1ACD                             ??_setLog_Code 005E  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1DE5  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1D3E              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1D2A                    CC2500_WriteByte@loop_a 0073  
          __size_of_setDimmerLights_OnOff 00AF                                 _r_address 00C8  
           __end_of_setDimmerLights_OnOff 0E9A            __size_of_setDimmerLights_SwOff 0046  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 1454  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1C53  
                          __size_of_getAD 001B                          ___lwdiv@quotient 0078  
                           _SwPointSelect 0800                       __end_of_setLED_Main 1384  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 1AD9                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 1BAB  
                         SwPointSelect@sw 0073                                 clear_ram0 1AFD  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 130A                                 _setTxData 06CC  
     __end_of_DimmerLights_Initialization 1B66               _DimmerLights_Initialization 1B5B  
                      _CC2500_ClearRXFIFO 1AE1                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1AE5                  setRF_DimmerLights@lights 0062  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1D06  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0061      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 007F       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 117B                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 1F9B  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 1BC3  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1C53                                  _RF_Count 0131  
                    __end_of_RF_RxDisable 1C44                              ??_getTemp_AD 0076  
             __end_of_CC2500_WriteCommand 1E5C                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 1CC3                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0075                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0072                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B2                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 007B                                  _DelayOff 00C1  
                            setSw_Main@sw 0069                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1B9F  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1264  
                   _DlyOff_Initialization 1AED         __size_of_getMain_All_LightsStatus 000F  
                    ??_CC2500_ClearRXFIFO 0076                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0076                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1152  
             setDimmerLights_OnOff@lights 0066                  _setDimmerIntr_Dimming_Sw 10B8  
                                _Fosc_Set 1AD9                          __size_of_WDT_Set 0009  
                   setRFSW_Control@status 0068                        __end_of_getLoad_AD 07FD  
                      __end_of_getLoad_OK 1B0A                     _Switch_Initialization 1066  
       __size_of_getMain_All_Error_Status 002E                      ??_Flash_Memory_Write 0072  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 0046  
                      __end_of_getTemp_AD 130A                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1E12  
                       getLoad_AD@channel 0020       __size_of_DimmerLights_SelectPointer 0015  
                    ??_setRF_TransceiveGO 0072              Flash_Memory_Initialization@i 005B  
                                _SwDetect 00C6                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0069             _getMain_All_Error_Status$6326 0073  
           _getMain_All_Error_Status$6327 0075                  __end_of_getDimmer_LoadGO 1B11  
                     _Load_Initialization 1ACD          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
                            _setTemp_Main 0E9A                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0028  
                                ___awtoft 1FDE                          ??_LedPointSelect 0072  
                                ___ftpack 0815             __size_of_getMain_Lights_Count 0010  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 00EB                      CC2500_WriteREG@value 0074  
                             _setLED_Main 1343                __end_of_setRF_DimmerLights 17A1  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1B18                          setDelayOff_GO@sw 0065  
                         ___lwdiv@divisor 0072                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0077                                  __ptext10 1AD6  
                                __ptext11 1AC9                                  __ptext20 1DD0  
                                __ptext12 1B7C                                  __ptext21 1AF2  
                                __ptext13 01ED                                  __ptext30 0BBB  
                                __ptext22 1DE5                                  __ptext14 1CF5  
                                __ptext31 1CA3                                  __ptext23 1AD3  
                                __ptext15 1102                                  __ptext40 1DBB  
                                __ptext32 1E2A                                  __ptext24 060E  
                                __ptext16 1F5B                                  __ptext41 1AE9  
                                __ptext33 1CE4                                  __ptext25 0AD5  
                                __ptext17 0800                                  __ptext50 1E42  
                                __ptext42 1384                                  __ptext34 1C93  
                                __ptext26 1230                                  __ptext18 1066  
                                __ptext51 1ADD                                  __ptext43 11A5  
                                __ptext35 1C35                                  __ptext27 1CB3  
                                __ptext19 1B1F                                  __ptext60 1BB7  
                                __ptext52 1DA6                                  __ptext44 1F1E  
                                __ptext36 0A6D                                  __ptext28 0C3A  
                                __ptext61 1AD9                                  __ptext53 1E12  
                                __ptext45 1073                                  __ptext37 0875  
                                __ptext29 14A1                                  __ptext70 1ACD  
                                __ptext62 1B18                                  __ptext54 1AD0  
                                __ptext46 1B71                                  __ptext38 1095  
                                __ptext71 1E5C                                  __ptext63 0055  
                                __ptext55 1B51                                  __ptext47 10DD  
                                __ptext39 1EC8                                  __ptext80 1B66  
                                __ptext72 1BAB                                  __ptext64 1C83  
                                __ptext56 1D18                                  __ptext48 1AE5  
                                __ptext81 117B                                  __ptext73 1343  
                                __ptext65 1B11                                  __ptext57 1B48  
                                __ptext49 1AE1                                  __ptext90 1EE4  
                                __ptext82 1B3F                                  __ptext74 1B9F  
                                __ptext66 1B0A                                  __ptext58 1BC3  
                                __ptext91 1152                                  __ptext83 1D3E  
                                __ptext75 1C73                                  __ptext67 1E77  
                                __ptext59 1E92                                  __ptext92 1D91  
                                __ptext84 0454                                  __ptext76 11FD  
                                __ptext68 1F01                                  __ptext93 1129  
                                __ptext85 1C26                                  __ptext77 1454  
                                __ptext69 1264                                  __ptext94 1D7C  
                                __ptext86 1F3B                                  __ptext78 1B93  
                                __ptext95 1C17                                  __ptext87 09A0  
                                __ptext79 0532                                  __ptext96 093B  
                                __ptext88 0DEB                                  __ptext97 0F4C  
                                __ptext89 17A1                                  __ptext98 1C63  
                                __ptext99 14F1                                  __product 0245  
                 ??_setLED_Initialization 0076                  ??_getDimmerLights_Status 0074  
            __end_of_getDimmerLights_Line 1C35              __end_of_setDimmerLights_Main 0A05  
            __end_of_setDimmerLights_Line 1D18              __end_of_setDimmerLights_SwOn 16E7  
                            ??_setSw_Main 0067                    ??_setRF_TimeoutCleared 0072  
            ??_setDimmerLights_DimmingRun 0075                             setLED@command 0074  
                           __size_of_main 005B                               _setRF_Learn 1CF5  
      __size_of_DimmerIntr_Initialization 0022                           ??_getCmd_Status 0072  
                __end_of_CC2500_SIDLEMode 1AED                setDimmerLights_Main@lights 0067  
             __end_of_DelayOffPointSelect 1D67                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1EC8                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1F1E                  __end_of_setMemory_Modify 1CB3  
    _getAll_DimmerIntr_Dimming_Sw_RF$2102 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2103 0074  
                      __end_of_setRF_Main 06CC                               ??_getBuz_GO 0074  
             __size_of_Mcu_Initialization 0012        __size_of_DimmerLights_MOSFET_IOC_1 000E  
      __size_of_DimmerLights_MOSFET_IOC_2 000E                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006B                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1DBB        __size_of_DimmerLights_MOSFET_TMR_1 0052  
      __size_of_DimmerLights_MOSFET_TMR_2 0052                                  main@argc 01EC  
                                main@argv 01EE                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$5635 0073                      _getSw_KeyStatus$5636 0074  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 1384  
                __size_of_getSw_KeyStatus 0020        __end_of_setDimmerIntr_DimmingValue 1DA6  
              _setDimmerIntr_DimmingValue 1D91               __end_of_Flash_Memory_Modify 14A1  
                             _setLog_Code 1230               __end_of_Flash_Memory_Unlock 1B48  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1073  
                      __end_of_setSw_Main 035E                     ??_Load_Initialization 0074  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0066  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0062                           setDelayOff_GO@j 0063  
                         setDelayOff_GO@k 0064                   ??_CC2500_PowerOnInitial 007A  
  __end_of_setDimmerLights_Initialization 1AC9   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1AC8                ?_setDimmerIntr_MaxmumValue 005A  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0072  
                  CC2500_InitPATable@temp 0078                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1AD0                               getLoad_AD@i 0023  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
                    _Flash_Memory_Erasing 1B93                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00C5                   __size_of_Exception_Main 00DE  
         __end_of_DelayOff_Initialization 1B2E                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B36                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0B40  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0081  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0067                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 1102                   __end_of_CC2500_ReadByte 1EE4  
            __end_of_setSw_Initialization 1B26                           _Timeout_Counter 1DE5  
         __size_of_getDimmerLights_Status 000F           getDimmerLights_ValueToPercent@i 0057  
                            _RF_RxDisable 1C35                __end_of_LED_Initialization 1BAB  
          __end_of_setTemp_Initialization 1ACA                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 1AD3                     __end_of_CC2500_RxData 08D6  
                   __end_of_CC2500_TxData 0AD5                     _setLoad_AH_AL_Restore 1E5C  
                 __end_of_CC2500_PowerRST 13C8  
