

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Oct 23 16:26:55 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	intentry,global,class=CODE,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	dabs	1,0x7E,2
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0008                     	;# 
   146  0009                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000D                     	;# 
   151  000E                     	;# 
   152  0010                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0090                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0095                     	;# 
   171  0096                     	;# 
   172  0097                     	;# 
   173  0099                     	;# 
   174  009A                     	;# 
   175  009B                     	;# 
   176  009B                     	;# 
   177  009C                     	;# 
   178  009D                     	;# 
   179  009E                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  0116                     	;# 
   184  0117                     	;# 
   185  011D                     	;# 
   186  018C                     	;# 
   187  018D                     	;# 
   188  018E                     	;# 
   189  0191                     	;# 
   190  0191                     	;# 
   191  0192                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0194                     	;# 
   195  0195                     	;# 
   196  0196                     	;# 
   197  0197                     	;# 
   198  0199                     	;# 
   199  019A                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019D                     	;# 
   207  019E                     	;# 
   208  019F                     	;# 
   209  020D                     	;# 
   210  0210                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0298                     	;# 
   231  0298                     	;# 
   232  0299                     	;# 
   233  029A                     	;# 
   234  0394                     	;# 
   235  0395                     	;# 
   236  0396                     	;# 
   237  0FE4                     	;# 
   238  0FE5                     	;# 
   239  0FE6                     	;# 
   240  0FE7                     	;# 
   241  0FE8                     	;# 
   242  0FE9                     	;# 
   243  0FEA                     	;# 
   244  0FEB                     	;# 
   245  0FED                     	;# 
   246  0FEE                     	;# 
   247  0FEF                     	;# 
   248  0000                     	;# 
   249  0001                     	;# 
   250  0002                     	;# 
   251  0003                     	;# 
   252  0004                     	;# 
   253  0005                     	;# 
   254  0006                     	;# 
   255  0007                     	;# 
   256  0008                     	;# 
   257  0009                     	;# 
   258  000A                     	;# 
   259  000B                     	;# 
   260  000C                     	;# 
   261  000D                     	;# 
   262  000E                     	;# 
   263  0010                     	;# 
   264  0011                     	;# 
   265  0012                     	;# 
   266  0015                     	;# 
   267  0016                     	;# 
   268  0016                     	;# 
   269  0017                     	;# 
   270  0018                     	;# 
   271  0019                     	;# 
   272  001A                     	;# 
   273  001B                     	;# 
   274  001C                     	;# 
   275  008C                     	;# 
   276  008D                     	;# 
   277  008E                     	;# 
   278  0090                     	;# 
   279  0091                     	;# 
   280  0092                     	;# 
   281  0095                     	;# 
   282  0096                     	;# 
   283  0097                     	;# 
   284  0099                     	;# 
   285  009A                     	;# 
   286  009B                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  0116                     	;# 
   295  0117                     	;# 
   296  011D                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  018E                     	;# 
   300  0191                     	;# 
   301  0191                     	;# 
   302  0192                     	;# 
   303  0193                     	;# 
   304  0193                     	;# 
   305  0194                     	;# 
   306  0195                     	;# 
   307  0196                     	;# 
   308  0197                     	;# 
   309  0199                     	;# 
   310  019A                     	;# 
   311  019B                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019C                     	;# 
   316  019C                     	;# 
   317  019D                     	;# 
   318  019E                     	;# 
   319  019F                     	;# 
   320  020D                     	;# 
   321  0210                     	;# 
   322  0211                     	;# 
   323  0211                     	;# 
   324  0212                     	;# 
   325  0212                     	;# 
   326  0213                     	;# 
   327  0213                     	;# 
   328  0214                     	;# 
   329  0214                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0215                     	;# 
   333  0216                     	;# 
   334  0216                     	;# 
   335  0217                     	;# 
   336  0217                     	;# 
   337  0291                     	;# 
   338  0291                     	;# 
   339  0292                     	;# 
   340  0293                     	;# 
   341  0298                     	;# 
   342  0298                     	;# 
   343  0299                     	;# 
   344  029A                     	;# 
   345  0394                     	;# 
   346  0395                     	;# 
   347  0396                     	;# 
   348  0FE4                     	;# 
   349  0FE5                     	;# 
   350  0FE6                     	;# 
   351  0FE7                     	;# 
   352  0FE8                     	;# 
   353  0FE9                     	;# 
   354  0FEA                     	;# 
   355  0FEB                     	;# 
   356  0FED                     	;# 
   357  0FEE                     	;# 
   358  0FEF                     	;# 
   359  0000                     	;# 
   360  0001                     	;# 
   361  0002                     	;# 
   362  0003                     	;# 
   363  0004                     	;# 
   364  0005                     	;# 
   365  0006                     	;# 
   366  0007                     	;# 
   367  0008                     	;# 
   368  0009                     	;# 
   369  000A                     	;# 
   370  000B                     	;# 
   371  000C                     	;# 
   372  000D                     	;# 
   373  000E                     	;# 
   374  0010                     	;# 
   375  0011                     	;# 
   376  0012                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0016                     	;# 
   380  0017                     	;# 
   381  0018                     	;# 
   382  0019                     	;# 
   383  001A                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  008C                     	;# 
   387  008D                     	;# 
   388  008E                     	;# 
   389  0090                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0095                     	;# 
   393  0096                     	;# 
   394  0097                     	;# 
   395  0099                     	;# 
   396  009A                     	;# 
   397  009B                     	;# 
   398  009B                     	;# 
   399  009C                     	;# 
   400  009D                     	;# 
   401  009E                     	;# 
   402  010C                     	;# 
   403  010D                     	;# 
   404  010E                     	;# 
   405  0116                     	;# 
   406  0117                     	;# 
   407  011D                     	;# 
   408  018C                     	;# 
   409  018D                     	;# 
   410  018E                     	;# 
   411  0191                     	;# 
   412  0191                     	;# 
   413  0192                     	;# 
   414  0193                     	;# 
   415  0193                     	;# 
   416  0194                     	;# 
   417  0195                     	;# 
   418  0196                     	;# 
   419  0197                     	;# 
   420  0199                     	;# 
   421  019A                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019C                     	;# 
   427  019C                     	;# 
   428  019D                     	;# 
   429  019E                     	;# 
   430  019F                     	;# 
   431  020D                     	;# 
   432  0210                     	;# 
   433  0211                     	;# 
   434  0211                     	;# 
   435  0212                     	;# 
   436  0212                     	;# 
   437  0213                     	;# 
   438  0213                     	;# 
   439  0214                     	;# 
   440  0214                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0216                     	;# 
   445  0216                     	;# 
   446  0217                     	;# 
   447  0217                     	;# 
   448  0291                     	;# 
   449  0291                     	;# 
   450  0292                     	;# 
   451  0293                     	;# 
   452  0298                     	;# 
   453  0298                     	;# 
   454  0299                     	;# 
   455  029A                     	;# 
   456  0394                     	;# 
   457  0395                     	;# 
   458  0396                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  0010                     	;# 
   486  0011                     	;# 
   487  0012                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  008C                     	;# 
   498  008D                     	;# 
   499  008E                     	;# 
   500  0090                     	;# 
   501  0091                     	;# 
   502  0092                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0099                     	;# 
   507  009A                     	;# 
   508  009B                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  010C                     	;# 
   514  010D                     	;# 
   515  010E                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  011D                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  018E                     	;# 
   522  0191                     	;# 
   523  0191                     	;# 
   524  0192                     	;# 
   525  0193                     	;# 
   526  0193                     	;# 
   527  0194                     	;# 
   528  0195                     	;# 
   529  0196                     	;# 
   530  0197                     	;# 
   531  0199                     	;# 
   532  019A                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019C                     	;# 
   538  019C                     	;# 
   539  019D                     	;# 
   540  019E                     	;# 
   541  019F                     	;# 
   542  020D                     	;# 
   543  0210                     	;# 
   544  0211                     	;# 
   545  0211                     	;# 
   546  0212                     	;# 
   547  0212                     	;# 
   548  0213                     	;# 
   549  0213                     	;# 
   550  0214                     	;# 
   551  0214                     	;# 
   552  0215                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0216                     	;# 
   556  0216                     	;# 
   557  0217                     	;# 
   558  0217                     	;# 
   559  0291                     	;# 
   560  0291                     	;# 
   561  0292                     	;# 
   562  0293                     	;# 
   563  0298                     	;# 
   564  0298                     	;# 
   565  0299                     	;# 
   566  029A                     	;# 
   567  0394                     	;# 
   568  0395                     	;# 
   569  0396                     	;# 
   570  0FE4                     	;# 
   571  0FE5                     	;# 
   572  0FE6                     	;# 
   573  0FE7                     	;# 
   574  0FE8                     	;# 
   575  0FE9                     	;# 
   576  0FEA                     	;# 
   577  0FEB                     	;# 
   578  0FED                     	;# 
   579  0FEE                     	;# 
   580  0FEF                     	;# 
   581  0000                     	;# 
   582  0001                     	;# 
   583  0002                     	;# 
   584  0003                     	;# 
   585  0004                     	;# 
   586  0005                     	;# 
   587  0006                     	;# 
   588  0007                     	;# 
   589  0008                     	;# 
   590  0009                     	;# 
   591  000A                     	;# 
   592  000B                     	;# 
   593  000C                     	;# 
   594  000D                     	;# 
   595  000E                     	;# 
   596  0010                     	;# 
   597  0011                     	;# 
   598  0012                     	;# 
   599  0015                     	;# 
   600  0016                     	;# 
   601  0016                     	;# 
   602  0017                     	;# 
   603  0018                     	;# 
   604  0019                     	;# 
   605  001A                     	;# 
   606  001B                     	;# 
   607  001C                     	;# 
   608  008C                     	;# 
   609  008D                     	;# 
   610  008E                     	;# 
   611  0090                     	;# 
   612  0091                     	;# 
   613  0092                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0097                     	;# 
   617  0099                     	;# 
   618  009A                     	;# 
   619  009B                     	;# 
   620  009B                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009E                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  0116                     	;# 
   628  0117                     	;# 
   629  011D                     	;# 
   630  018C                     	;# 
   631  018D                     	;# 
   632  018E                     	;# 
   633  0191                     	;# 
   634  0191                     	;# 
   635  0192                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0194                     	;# 
   639  0195                     	;# 
   640  0196                     	;# 
   641  0197                     	;# 
   642  0199                     	;# 
   643  019A                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020D                     	;# 
   654  0210                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0291                     	;# 
   671  0291                     	;# 
   672  0292                     	;# 
   673  0293                     	;# 
   674  0298                     	;# 
   675  0298                     	;# 
   676  0299                     	;# 
   677  029A                     	;# 
   678  0394                     	;# 
   679  0395                     	;# 
   680  0396                     	;# 
   681  0FE4                     	;# 
   682  0FE5                     	;# 
   683  0FE6                     	;# 
   684  0FE7                     	;# 
   685  0FE8                     	;# 
   686  0FE9                     	;# 
   687  0FEA                     	;# 
   688  0FEB                     	;# 
   689  0FED                     	;# 
   690  0FEE                     	;# 
   691  0FEF                     	;# 
   692  0000                     	;# 
   693  0001                     	;# 
   694  0002                     	;# 
   695  0003                     	;# 
   696  0004                     	;# 
   697  0005                     	;# 
   698  0006                     	;# 
   699  0007                     	;# 
   700  0008                     	;# 
   701  0009                     	;# 
   702  000A                     	;# 
   703  000B                     	;# 
   704  000C                     	;# 
   705  000D                     	;# 
   706  000E                     	;# 
   707  0010                     	;# 
   708  0011                     	;# 
   709  0012                     	;# 
   710  0015                     	;# 
   711  0016                     	;# 
   712  0016                     	;# 
   713  0017                     	;# 
   714  0018                     	;# 
   715  0019                     	;# 
   716  001A                     	;# 
   717  001B                     	;# 
   718  001C                     	;# 
   719  008C                     	;# 
   720  008D                     	;# 
   721  008E                     	;# 
   722  0090                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0095                     	;# 
   726  0096                     	;# 
   727  0097                     	;# 
   728  0099                     	;# 
   729  009A                     	;# 
   730  009B                     	;# 
   731  009B                     	;# 
   732  009C                     	;# 
   733  009D                     	;# 
   734  009E                     	;# 
   735  010C                     	;# 
   736  010D                     	;# 
   737  010E                     	;# 
   738  0116                     	;# 
   739  0117                     	;# 
   740  011D                     	;# 
   741  018C                     	;# 
   742  018D                     	;# 
   743  018E                     	;# 
   744  0191                     	;# 
   745  0191                     	;# 
   746  0192                     	;# 
   747  0193                     	;# 
   748  0193                     	;# 
   749  0194                     	;# 
   750  0195                     	;# 
   751  0196                     	;# 
   752  0197                     	;# 
   753  0199                     	;# 
   754  019A                     	;# 
   755  019B                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019C                     	;# 
   760  019C                     	;# 
   761  019D                     	;# 
   762  019E                     	;# 
   763  019F                     	;# 
   764  020D                     	;# 
   765  0210                     	;# 
   766  0211                     	;# 
   767  0211                     	;# 
   768  0212                     	;# 
   769  0212                     	;# 
   770  0213                     	;# 
   771  0213                     	;# 
   772  0214                     	;# 
   773  0214                     	;# 
   774  0215                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0216                     	;# 
   778  0216                     	;# 
   779  0217                     	;# 
   780  0217                     	;# 
   781  0291                     	;# 
   782  0291                     	;# 
   783  0292                     	;# 
   784  0293                     	;# 
   785  0298                     	;# 
   786  0298                     	;# 
   787  0299                     	;# 
   788  029A                     	;# 
   789  0394                     	;# 
   790  0395                     	;# 
   791  0396                     	;# 
   792  0FE4                     	;# 
   793  0FE5                     	;# 
   794  0FE6                     	;# 
   795  0FE7                     	;# 
   796  0FE8                     	;# 
   797  0FE9                     	;# 
   798  0FEA                     	;# 
   799  0FEB                     	;# 
   800  0FED                     	;# 
   801  0FEE                     	;# 
   802  0FEF                     	;# 
   803  0000                     	;# 
   804  0001                     	;# 
   805  0002                     	;# 
   806  0003                     	;# 
   807  0004                     	;# 
   808  0005                     	;# 
   809  0006                     	;# 
   810  0007                     	;# 
   811  0008                     	;# 
   812  0009                     	;# 
   813  000A                     	;# 
   814  000B                     	;# 
   815  000C                     	;# 
   816  000D                     	;# 
   817  000E                     	;# 
   818  0010                     	;# 
   819  0011                     	;# 
   820  0012                     	;# 
   821  0015                     	;# 
   822  0016                     	;# 
   823  0016                     	;# 
   824  0017                     	;# 
   825  0018                     	;# 
   826  0019                     	;# 
   827  001A                     	;# 
   828  001B                     	;# 
   829  001C                     	;# 
   830  008C                     	;# 
   831  008D                     	;# 
   832  008E                     	;# 
   833  0090                     	;# 
   834  0091                     	;# 
   835  0092                     	;# 
   836  0095                     	;# 
   837  0096                     	;# 
   838  0097                     	;# 
   839  0099                     	;# 
   840  009A                     	;# 
   841  009B                     	;# 
   842  009B                     	;# 
   843  009C                     	;# 
   844  009D                     	;# 
   845  009E                     	;# 
   846  010C                     	;# 
   847  010D                     	;# 
   848  010E                     	;# 
   849  0116                     	;# 
   850  0117                     	;# 
   851  011D                     	;# 
   852  018C                     	;# 
   853  018D                     	;# 
   854  018E                     	;# 
   855  0191                     	;# 
   856  0191                     	;# 
   857  0192                     	;# 
   858  0193                     	;# 
   859  0193                     	;# 
   860  0194                     	;# 
   861  0195                     	;# 
   862  0196                     	;# 
   863  0197                     	;# 
   864  0199                     	;# 
   865  019A                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019C                     	;# 
   871  019C                     	;# 
   872  019D                     	;# 
   873  019E                     	;# 
   874  019F                     	;# 
   875  020D                     	;# 
   876  0210                     	;# 
   877  0211                     	;# 
   878  0211                     	;# 
   879  0212                     	;# 
   880  0212                     	;# 
   881  0213                     	;# 
   882  0213                     	;# 
   883  0214                     	;# 
   884  0214                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0216                     	;# 
   889  0216                     	;# 
   890  0217                     	;# 
   891  0217                     	;# 
   892  0291                     	;# 
   893  0291                     	;# 
   894  0292                     	;# 
   895  0293                     	;# 
   896  0298                     	;# 
   897  0298                     	;# 
   898  0299                     	;# 
   899  029A                     	;# 
   900  0394                     	;# 
   901  0395                     	;# 
   902  0396                     	;# 
   903  0FE4                     	;# 
   904  0FE5                     	;# 
   905  0FE6                     	;# 
   906  0FE7                     	;# 
   907  0FE8                     	;# 
   908  0FE9                     	;# 
   909  0FEA                     	;# 
   910  0FEB                     	;# 
   911  0FED                     	;# 
   912  0FEE                     	;# 
   913  0FEF                     	;# 
   914  0000                     	;# 
   915  0001                     	;# 
   916  0002                     	;# 
   917  0003                     	;# 
   918  0004                     	;# 
   919  0005                     	;# 
   920  0006                     	;# 
   921  0007                     	;# 
   922  0008                     	;# 
   923  0009                     	;# 
   924  000A                     	;# 
   925  000B                     	;# 
   926  000C                     	;# 
   927  000D                     	;# 
   928  000E                     	;# 
   929  0010                     	;# 
   930  0011                     	;# 
   931  0012                     	;# 
   932  0015                     	;# 
   933  0016                     	;# 
   934  0016                     	;# 
   935  0017                     	;# 
   936  0018                     	;# 
   937  0019                     	;# 
   938  001A                     	;# 
   939  001B                     	;# 
   940  001C                     	;# 
   941  008C                     	;# 
   942  008D                     	;# 
   943  008E                     	;# 
   944  0090                     	;# 
   945  0091                     	;# 
   946  0092                     	;# 
   947  0095                     	;# 
   948  0096                     	;# 
   949  0097                     	;# 
   950  0099                     	;# 
   951  009A                     	;# 
   952  009B                     	;# 
   953  009B                     	;# 
   954  009C                     	;# 
   955  009D                     	;# 
   956  009E                     	;# 
   957  010C                     	;# 
   958  010D                     	;# 
   959  010E                     	;# 
   960  0116                     	;# 
   961  0117                     	;# 
   962  011D                     	;# 
   963  018C                     	;# 
   964  018D                     	;# 
   965  018E                     	;# 
   966  0191                     	;# 
   967  0191                     	;# 
   968  0192                     	;# 
   969  0193                     	;# 
   970  0193                     	;# 
   971  0194                     	;# 
   972  0195                     	;# 
   973  0196                     	;# 
   974  0197                     	;# 
   975  0199                     	;# 
   976  019A                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019B                     	;# 
   981  019C                     	;# 
   982  019C                     	;# 
   983  019D                     	;# 
   984  019E                     	;# 
   985  019F                     	;# 
   986  020D                     	;# 
   987  0210                     	;# 
   988  0211                     	;# 
   989  0211                     	;# 
   990  0212                     	;# 
   991  0212                     	;# 
   992  0213                     	;# 
   993  0213                     	;# 
   994  0214                     	;# 
   995  0214                     	;# 
   996  0215                     	;# 
   997  0215                     	;# 
   998  0215                     	;# 
   999  0216                     	;# 
  1000  0216                     	;# 
  1001  0217                     	;# 
  1002  0217                     	;# 
  1003  0291                     	;# 
  1004  0291                     	;# 
  1005  0292                     	;# 
  1006  0293                     	;# 
  1007  0298                     	;# 
  1008  0298                     	;# 
  1009  0299                     	;# 
  1010  029A                     	;# 
  1011  0394                     	;# 
  1012  0395                     	;# 
  1013  0396                     	;# 
  1014  0FE4                     	;# 
  1015  0FE5                     	;# 
  1016  0FE6                     	;# 
  1017  0FE7                     	;# 
  1018  0FE8                     	;# 
  1019  0FE9                     	;# 
  1020  0FEA                     	;# 
  1021  0FEB                     	;# 
  1022  0FED                     	;# 
  1023  0FEE                     	;# 
  1024  0FEF                     	;# 
  1025  0000                     	;# 
  1026  0001                     	;# 
  1027  0002                     	;# 
  1028  0003                     	;# 
  1029  0004                     	;# 
  1030  0005                     	;# 
  1031  0006                     	;# 
  1032  0007                     	;# 
  1033  0008                     	;# 
  1034  0009                     	;# 
  1035  000A                     	;# 
  1036  000B                     	;# 
  1037  000C                     	;# 
  1038  000D                     	;# 
  1039  000E                     	;# 
  1040  0010                     	;# 
  1041  0011                     	;# 
  1042  0012                     	;# 
  1043  0015                     	;# 
  1044  0016                     	;# 
  1045  0016                     	;# 
  1046  0017                     	;# 
  1047  0018                     	;# 
  1048  0019                     	;# 
  1049  001A                     	;# 
  1050  001B                     	;# 
  1051  001C                     	;# 
  1052  008C                     	;# 
  1053  008D                     	;# 
  1054  008E                     	;# 
  1055  0090                     	;# 
  1056  0091                     	;# 
  1057  0092                     	;# 
  1058  0095                     	;# 
  1059  0096                     	;# 
  1060  0097                     	;# 
  1061  0099                     	;# 
  1062  009A                     	;# 
  1063  009B                     	;# 
  1064  009B                     	;# 
  1065  009C                     	;# 
  1066  009D                     	;# 
  1067  009E                     	;# 
  1068  010C                     	;# 
  1069  010D                     	;# 
  1070  010E                     	;# 
  1071  0116                     	;# 
  1072  0117                     	;# 
  1073  011D                     	;# 
  1074  018C                     	;# 
  1075  018D                     	;# 
  1076  018E                     	;# 
  1077  0191                     	;# 
  1078  0191                     	;# 
  1079  0192                     	;# 
  1080  0193                     	;# 
  1081  0193                     	;# 
  1082  0194                     	;# 
  1083  0195                     	;# 
  1084  0196                     	;# 
  1085  0197                     	;# 
  1086  0199                     	;# 
  1087  019A                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019C                     	;# 
  1093  019C                     	;# 
  1094  019D                     	;# 
  1095  019E                     	;# 
  1096  019F                     	;# 
  1097  020D                     	;# 
  1098  0210                     	;# 
  1099  0211                     	;# 
  1100  0211                     	;# 
  1101  0212                     	;# 
  1102  0212                     	;# 
  1103  0213                     	;# 
  1104  0213                     	;# 
  1105  0214                     	;# 
  1106  0214                     	;# 
  1107  0215                     	;# 
  1108  0215                     	;# 
  1109  0215                     	;# 
  1110  0216                     	;# 
  1111  0216                     	;# 
  1112  0217                     	;# 
  1113  0217                     	;# 
  1114  0291                     	;# 
  1115  0291                     	;# 
  1116  0292                     	;# 
  1117  0293                     	;# 
  1118  0298                     	;# 
  1119  0298                     	;# 
  1120  0299                     	;# 
  1121  029A                     	;# 
  1122  0394                     	;# 
  1123  0395                     	;# 
  1124  0396                     	;# 
  1125  0FE4                     	;# 
  1126  0FE5                     	;# 
  1127  0FE6                     	;# 
  1128  0FE7                     	;# 
  1129  0FE8                     	;# 
  1130  0FE9                     	;# 
  1131  0FEA                     	;# 
  1132  0FEB                     	;# 
  1133  0FED                     	;# 
  1134  0FEE                     	;# 
  1135  0FEF                     	;# 
  1136  0000                     	;# 
  1137  0001                     	;# 
  1138  0002                     	;# 
  1139  0003                     	;# 
  1140  0004                     	;# 
  1141  0005                     	;# 
  1142  0006                     	;# 
  1143  0007                     	;# 
  1144  0008                     	;# 
  1145  0009                     	;# 
  1146  000A                     	;# 
  1147  000B                     	;# 
  1148  000C                     	;# 
  1149  000D                     	;# 
  1150  000E                     	;# 
  1151  0010                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0015                     	;# 
  1155  0016                     	;# 
  1156  0016                     	;# 
  1157  0017                     	;# 
  1158  0018                     	;# 
  1159  0019                     	;# 
  1160  001A                     	;# 
  1161  001B                     	;# 
  1162  001C                     	;# 
  1163  008C                     	;# 
  1164  008D                     	;# 
  1165  008E                     	;# 
  1166  0090                     	;# 
  1167  0091                     	;# 
  1168  0092                     	;# 
  1169  0095                     	;# 
  1170  0096                     	;# 
  1171  0097                     	;# 
  1172  0099                     	;# 
  1173  009A                     	;# 
  1174  009B                     	;# 
  1175  009B                     	;# 
  1176  009C                     	;# 
  1177  009D                     	;# 
  1178  009E                     	;# 
  1179  010C                     	;# 
  1180  010D                     	;# 
  1181  010E                     	;# 
  1182  0116                     	;# 
  1183  0117                     	;# 
  1184  011D                     	;# 
  1185  018C                     	;# 
  1186  018D                     	;# 
  1187  018E                     	;# 
  1188  0191                     	;# 
  1189  0191                     	;# 
  1190  0192                     	;# 
  1191  0193                     	;# 
  1192  0193                     	;# 
  1193  0194                     	;# 
  1194  0195                     	;# 
  1195  0196                     	;# 
  1196  0197                     	;# 
  1197  0199                     	;# 
  1198  019A                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019C                     	;# 
  1204  019C                     	;# 
  1205  019D                     	;# 
  1206  019E                     	;# 
  1207  019F                     	;# 
  1208  020D                     	;# 
  1209  0210                     	;# 
  1210  0211                     	;# 
  1211  0211                     	;# 
  1212  0212                     	;# 
  1213  0212                     	;# 
  1214  0213                     	;# 
  1215  0213                     	;# 
  1216  0214                     	;# 
  1217  0214                     	;# 
  1218  0215                     	;# 
  1219  0215                     	;# 
  1220  0215                     	;# 
  1221  0216                     	;# 
  1222  0216                     	;# 
  1223  0217                     	;# 
  1224  0217                     	;# 
  1225  0291                     	;# 
  1226  0291                     	;# 
  1227  0292                     	;# 
  1228  0293                     	;# 
  1229  0298                     	;# 
  1230  0298                     	;# 
  1231  0299                     	;# 
  1232  029A                     	;# 
  1233  0394                     	;# 
  1234  0395                     	;# 
  1235  0396                     	;# 
  1236  0FE4                     	;# 
  1237  0FE5                     	;# 
  1238  0FE6                     	;# 
  1239  0FE7                     	;# 
  1240  0FE8                     	;# 
  1241  0FE9                     	;# 
  1242  0FEA                     	;# 
  1243  0FEB                     	;# 
  1244  0FED                     	;# 
  1245  0FEE                     	;# 
  1246  0FEF                     	;# 
  1247  0000                     	;# 
  1248  0001                     	;# 
  1249  0002                     	;# 
  1250  0003                     	;# 
  1251  0004                     	;# 
  1252  0005                     	;# 
  1253  0006                     	;# 
  1254  0007                     	;# 
  1255  0008                     	;# 
  1256  0009                     	;# 
  1257  000A                     	;# 
  1258  000B                     	;# 
  1259  000C                     	;# 
  1260  000D                     	;# 
  1261  000E                     	;# 
  1262  0010                     	;# 
  1263  0011                     	;# 
  1264  0012                     	;# 
  1265  0015                     	;# 
  1266  0016                     	;# 
  1267  0016                     	;# 
  1268  0017                     	;# 
  1269  0018                     	;# 
  1270  0019                     	;# 
  1271  001A                     	;# 
  1272  001B                     	;# 
  1273  001C                     	;# 
  1274  008C                     	;# 
  1275  008D                     	;# 
  1276  008E                     	;# 
  1277  0090                     	;# 
  1278  0091                     	;# 
  1279  0092                     	;# 
  1280  0095                     	;# 
  1281  0096                     	;# 
  1282  0097                     	;# 
  1283  0099                     	;# 
  1284  009A                     	;# 
  1285  009B                     	;# 
  1286  009B                     	;# 
  1287  009C                     	;# 
  1288  009D                     	;# 
  1289  009E                     	;# 
  1290  010C                     	;# 
  1291  010D                     	;# 
  1292  010E                     	;# 
  1293  0116                     	;# 
  1294  0117                     	;# 
  1295  011D                     	;# 
  1296  018C                     	;# 
  1297  018D                     	;# 
  1298  018E                     	;# 
  1299  0191                     	;# 
  1300  0191                     	;# 
  1301  0192                     	;# 
  1302  0193                     	;# 
  1303  0193                     	;# 
  1304  0194                     	;# 
  1305  0195                     	;# 
  1306  0196                     	;# 
  1307  0197                     	;# 
  1308  0199                     	;# 
  1309  019A                     	;# 
  1310  019B                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019B                     	;# 
  1314  019C                     	;# 
  1315  019C                     	;# 
  1316  019D                     	;# 
  1317  019E                     	;# 
  1318  019F                     	;# 
  1319  020D                     	;# 
  1320  0210                     	;# 
  1321  0211                     	;# 
  1322  0211                     	;# 
  1323  0212                     	;# 
  1324  0212                     	;# 
  1325  0213                     	;# 
  1326  0213                     	;# 
  1327  0214                     	;# 
  1328  0214                     	;# 
  1329  0215                     	;# 
  1330  0215                     	;# 
  1331  0215                     	;# 
  1332  0216                     	;# 
  1333  0216                     	;# 
  1334  0217                     	;# 
  1335  0217                     	;# 
  1336  0291                     	;# 
  1337  0291                     	;# 
  1338  0292                     	;# 
  1339  0293                     	;# 
  1340  0298                     	;# 
  1341  0298                     	;# 
  1342  0299                     	;# 
  1343  029A                     	;# 
  1344  0394                     	;# 
  1345  0395                     	;# 
  1346  0396                     	;# 
  1347  0FE4                     	;# 
  1348  0FE5                     	;# 
  1349  0FE6                     	;# 
  1350  0FE7                     	;# 
  1351  0FE8                     	;# 
  1352  0FE9                     	;# 
  1353  0FEA                     	;# 
  1354  0FEB                     	;# 
  1355  0FED                     	;# 
  1356  0FEE                     	;# 
  1357  0FEF                     	;# 
  1358  0000                     	;# 
  1359  0001                     	;# 
  1360  0002                     	;# 
  1361  0003                     	;# 
  1362  0004                     	;# 
  1363  0005                     	;# 
  1364  0006                     	;# 
  1365  0007                     	;# 
  1366  0008                     	;# 
  1367  0009                     	;# 
  1368  000A                     	;# 
  1369  000B                     	;# 
  1370  000C                     	;# 
  1371  000D                     	;# 
  1372  000E                     	;# 
  1373  0010                     	;# 
  1374  0011                     	;# 
  1375  0012                     	;# 
  1376  0015                     	;# 
  1377  0016                     	;# 
  1378  0016                     	;# 
  1379  0017                     	;# 
  1380  0018                     	;# 
  1381  0019                     	;# 
  1382  001A                     	;# 
  1383  001B                     	;# 
  1384  001C                     	;# 
  1385  008C                     	;# 
  1386  008D                     	;# 
  1387  008E                     	;# 
  1388  0090                     	;# 
  1389  0091                     	;# 
  1390  0092                     	;# 
  1391  0095                     	;# 
  1392  0096                     	;# 
  1393  0097                     	;# 
  1394  0099                     	;# 
  1395  009A                     	;# 
  1396  009B                     	;# 
  1397  009B                     	;# 
  1398  009C                     	;# 
  1399  009D                     	;# 
  1400  009E                     	;# 
  1401  010C                     	;# 
  1402  010D                     	;# 
  1403  010E                     	;# 
  1404  0116                     	;# 
  1405  0117                     	;# 
  1406  011D                     	;# 
  1407  018C                     	;# 
  1408  018D                     	;# 
  1409  018E                     	;# 
  1410  0191                     	;# 
  1411  0191                     	;# 
  1412  0192                     	;# 
  1413  0193                     	;# 
  1414  0193                     	;# 
  1415  0194                     	;# 
  1416  0195                     	;# 
  1417  0196                     	;# 
  1418  0197                     	;# 
  1419  0199                     	;# 
  1420  019A                     	;# 
  1421  019B                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019B                     	;# 
  1425  019C                     	;# 
  1426  019C                     	;# 
  1427  019D                     	;# 
  1428  019E                     	;# 
  1429  019F                     	;# 
  1430  020D                     	;# 
  1431  0210                     	;# 
  1432  0211                     	;# 
  1433  0211                     	;# 
  1434  0212                     	;# 
  1435  0212                     	;# 
  1436  0213                     	;# 
  1437  0213                     	;# 
  1438  0214                     	;# 
  1439  0214                     	;# 
  1440  0215                     	;# 
  1441  0215                     	;# 
  1442  0215                     	;# 
  1443  0216                     	;# 
  1444  0216                     	;# 
  1445  0217                     	;# 
  1446  0217                     	;# 
  1447  0291                     	;# 
  1448  0291                     	;# 
  1449  0292                     	;# 
  1450  0293                     	;# 
  1451  0298                     	;# 
  1452  0298                     	;# 
  1453  0299                     	;# 
  1454  029A                     	;# 
  1455  0394                     	;# 
  1456  0395                     	;# 
  1457  0396                     	;# 
  1458  0FE4                     	;# 
  1459  0FE5                     	;# 
  1460  0FE6                     	;# 
  1461  0FE7                     	;# 
  1462  0FE8                     	;# 
  1463  0FE9                     	;# 
  1464  0FEA                     	;# 
  1465  0FEB                     	;# 
  1466  0FED                     	;# 
  1467  0FEE                     	;# 
  1468  0FEF                     	;# 
  1469  0000                     	;# 
  1470  0001                     	;# 
  1471  0002                     	;# 
  1472  0003                     	;# 
  1473  0004                     	;# 
  1474  0005                     	;# 
  1475  0006                     	;# 
  1476  0007                     	;# 
  1477  0008                     	;# 
  1478  0009                     	;# 
  1479  000A                     	;# 
  1480  000B                     	;# 
  1481  000C                     	;# 
  1482  000D                     	;# 
  1483  000E                     	;# 
  1484  0010                     	;# 
  1485  0011                     	;# 
  1486  0012                     	;# 
  1487  0015                     	;# 
  1488  0016                     	;# 
  1489  0016                     	;# 
  1490  0017                     	;# 
  1491  0018                     	;# 
  1492  0019                     	;# 
  1493  001A                     	;# 
  1494  001B                     	;# 
  1495  001C                     	;# 
  1496  008C                     	;# 
  1497  008D                     	;# 
  1498  008E                     	;# 
  1499  0090                     	;# 
  1500  0091                     	;# 
  1501  0092                     	;# 
  1502  0095                     	;# 
  1503  0096                     	;# 
  1504  0097                     	;# 
  1505  0099                     	;# 
  1506  009A                     	;# 
  1507  009B                     	;# 
  1508  009B                     	;# 
  1509  009C                     	;# 
  1510  009D                     	;# 
  1511  009E                     	;# 
  1512  010C                     	;# 
  1513  010D                     	;# 
  1514  010E                     	;# 
  1515  0116                     	;# 
  1516  0117                     	;# 
  1517  011D                     	;# 
  1518  018C                     	;# 
  1519  018D                     	;# 
  1520  018E                     	;# 
  1521  0191                     	;# 
  1522  0191                     	;# 
  1523  0192                     	;# 
  1524  0193                     	;# 
  1525  0193                     	;# 
  1526  0194                     	;# 
  1527  0195                     	;# 
  1528  0196                     	;# 
  1529  0197                     	;# 
  1530  0199                     	;# 
  1531  019A                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019C                     	;# 
  1537  019C                     	;# 
  1538  019D                     	;# 
  1539  019E                     	;# 
  1540  019F                     	;# 
  1541  020D                     	;# 
  1542  0210                     	;# 
  1543  0211                     	;# 
  1544  0211                     	;# 
  1545  0212                     	;# 
  1546  0212                     	;# 
  1547  0213                     	;# 
  1548  0213                     	;# 
  1549  0214                     	;# 
  1550  0214                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0216                     	;# 
  1555  0216                     	;# 
  1556  0217                     	;# 
  1557  0217                     	;# 
  1558  0291                     	;# 
  1559  0291                     	;# 
  1560  0292                     	;# 
  1561  0293                     	;# 
  1562  0298                     	;# 
  1563  0298                     	;# 
  1564  0299                     	;# 
  1565  029A                     	;# 
  1566  0394                     	;# 
  1567  0395                     	;# 
  1568  0396                     	;# 
  1569  0FE4                     	;# 
  1570  0FE5                     	;# 
  1571  0FE6                     	;# 
  1572  0FE7                     	;# 
  1573  0FE8                     	;# 
  1574  0FE9                     	;# 
  1575  0FEA                     	;# 
  1576  0FEB                     	;# 
  1577  0FED                     	;# 
  1578  0FEE                     	;# 
  1579  0FEF                     	;# 
  1580  0000                     	;# 
  1581  0001                     	;# 
  1582  0002                     	;# 
  1583  0003                     	;# 
  1584  0004                     	;# 
  1585  0005                     	;# 
  1586  0006                     	;# 
  1587  0007                     	;# 
  1588  0008                     	;# 
  1589  0009                     	;# 
  1590  000A                     	;# 
  1591  000B                     	;# 
  1592  000C                     	;# 
  1593  000D                     	;# 
  1594  000E                     	;# 
  1595  0010                     	;# 
  1596  0011                     	;# 
  1597  0012                     	;# 
  1598  0015                     	;# 
  1599  0016                     	;# 
  1600  0016                     	;# 
  1601  0017                     	;# 
  1602  0018                     	;# 
  1603  0019                     	;# 
  1604  001A                     	;# 
  1605  001B                     	;# 
  1606  001C                     	;# 
  1607  008C                     	;# 
  1608  008D                     	;# 
  1609  008E                     	;# 
  1610  0090                     	;# 
  1611  0091                     	;# 
  1612  0092                     	;# 
  1613  0095                     	;# 
  1614  0096                     	;# 
  1615  0097                     	;# 
  1616  0099                     	;# 
  1617  009A                     	;# 
  1618  009B                     	;# 
  1619  009B                     	;# 
  1620  009C                     	;# 
  1621  009D                     	;# 
  1622  009E                     	;# 
  1623  010C                     	;# 
  1624  010D                     	;# 
  1625  010E                     	;# 
  1626  0116                     	;# 
  1627  0117                     	;# 
  1628  011D                     	;# 
  1629  018C                     	;# 
  1630  018D                     	;# 
  1631  018E                     	;# 
  1632  0191                     	;# 
  1633  0191                     	;# 
  1634  0192                     	;# 
  1635  0193                     	;# 
  1636  0193                     	;# 
  1637  0194                     	;# 
  1638  0195                     	;# 
  1639  0196                     	;# 
  1640  0197                     	;# 
  1641  0199                     	;# 
  1642  019A                     	;# 
  1643  019B                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019C                     	;# 
  1648  019C                     	;# 
  1649  019D                     	;# 
  1650  019E                     	;# 
  1651  019F                     	;# 
  1652  020D                     	;# 
  1653  0210                     	;# 
  1654  0211                     	;# 
  1655  0211                     	;# 
  1656  0212                     	;# 
  1657  0212                     	;# 
  1658  0213                     	;# 
  1659  0213                     	;# 
  1660  0214                     	;# 
  1661  0214                     	;# 
  1662  0215                     	;# 
  1663  0215                     	;# 
  1664  0215                     	;# 
  1665  0216                     	;# 
  1666  0216                     	;# 
  1667  0217                     	;# 
  1668  0217                     	;# 
  1669  0291                     	;# 
  1670  0291                     	;# 
  1671  0292                     	;# 
  1672  0293                     	;# 
  1673  0298                     	;# 
  1674  0298                     	;# 
  1675  0299                     	;# 
  1676  029A                     	;# 
  1677  0394                     	;# 
  1678  0395                     	;# 
  1679  0396                     	;# 
  1680  0FE4                     	;# 
  1681  0FE5                     	;# 
  1682  0FE6                     	;# 
  1683  0FE7                     	;# 
  1684  0FE8                     	;# 
  1685  0FE9                     	;# 
  1686  0FEA                     	;# 
  1687  0FEB                     	;# 
  1688  0FED                     	;# 
  1689  0FEE                     	;# 
  1690  0FEF                     	;# 
  1691  0000                     	;# 
  1692  0001                     	;# 
  1693  0002                     	;# 
  1694  0003                     	;# 
  1695  0004                     	;# 
  1696  0005                     	;# 
  1697  0006                     	;# 
  1698  0007                     	;# 
  1699  0008                     	;# 
  1700  0009                     	;# 
  1701  000A                     	;# 
  1702  000B                     	;# 
  1703  000C                     	;# 
  1704  000D                     	;# 
  1705  000E                     	;# 
  1706  0010                     	;# 
  1707  0011                     	;# 
  1708  0012                     	;# 
  1709  0015                     	;# 
  1710  0016                     	;# 
  1711  0016                     	;# 
  1712  0017                     	;# 
  1713  0018                     	;# 
  1714  0019                     	;# 
  1715  001A                     	;# 
  1716  001B                     	;# 
  1717  001C                     	;# 
  1718  008C                     	;# 
  1719  008D                     	;# 
  1720  008E                     	;# 
  1721  0090                     	;# 
  1722  0091                     	;# 
  1723  0092                     	;# 
  1724  0095                     	;# 
  1725  0096                     	;# 
  1726  0097                     	;# 
  1727  0099                     	;# 
  1728  009A                     	;# 
  1729  009B                     	;# 
  1730  009B                     	;# 
  1731  009C                     	;# 
  1732  009D                     	;# 
  1733  009E                     	;# 
  1734  010C                     	;# 
  1735  010D                     	;# 
  1736  010E                     	;# 
  1737  0116                     	;# 
  1738  0117                     	;# 
  1739  011D                     	;# 
  1740  018C                     	;# 
  1741  018D                     	;# 
  1742  018E                     	;# 
  1743  0191                     	;# 
  1744  0191                     	;# 
  1745  0192                     	;# 
  1746  0193                     	;# 
  1747  0193                     	;# 
  1748  0194                     	;# 
  1749  0195                     	;# 
  1750  0196                     	;# 
  1751  0197                     	;# 
  1752  0199                     	;# 
  1753  019A                     	;# 
  1754  019B                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019C                     	;# 
  1759  019C                     	;# 
  1760  019D                     	;# 
  1761  019E                     	;# 
  1762  019F                     	;# 
  1763  020D                     	;# 
  1764  0210                     	;# 
  1765  0211                     	;# 
  1766  0211                     	;# 
  1767  0212                     	;# 
  1768  0212                     	;# 
  1769  0213                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0214                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0291                     	;# 
  1781  0291                     	;# 
  1782  0292                     	;# 
  1783  0293                     	;# 
  1784  0298                     	;# 
  1785  0298                     	;# 
  1786  0299                     	;# 
  1787  029A                     	;# 
  1788  0394                     	;# 
  1789  0395                     	;# 
  1790  0396                     	;# 
  1791  0FE4                     	;# 
  1792  0FE5                     	;# 
  1793  0FE6                     	;# 
  1794  0FE7                     	;# 
  1795  0FE8                     	;# 
  1796  0FE9                     	;# 
  1797  0FEA                     	;# 
  1798  0FEB                     	;# 
  1799  0FED                     	;# 
  1800  0FEE                     	;# 
  1801  0FEF                     	;# 
  1802  0000                     	;# 
  1803  0001                     	;# 
  1804  0002                     	;# 
  1805  0003                     	;# 
  1806  0004                     	;# 
  1807  0005                     	;# 
  1808  0006                     	;# 
  1809  0007                     	;# 
  1810  0008                     	;# 
  1811  0009                     	;# 
  1812  000A                     	;# 
  1813  000B                     	;# 
  1814  000C                     	;# 
  1815  000D                     	;# 
  1816  000E                     	;# 
  1817  0010                     	;# 
  1818  0011                     	;# 
  1819  0012                     	;# 
  1820  0015                     	;# 
  1821  0016                     	;# 
  1822  0016                     	;# 
  1823  0017                     	;# 
  1824  0018                     	;# 
  1825  0019                     	;# 
  1826  001A                     	;# 
  1827  001B                     	;# 
  1828  001C                     	;# 
  1829  008C                     	;# 
  1830  008D                     	;# 
  1831  008E                     	;# 
  1832  0090                     	;# 
  1833  0091                     	;# 
  1834  0092                     	;# 
  1835  0095                     	;# 
  1836  0096                     	;# 
  1837  0097                     	;# 
  1838  0099                     	;# 
  1839  009A                     	;# 
  1840  009B                     	;# 
  1841  009B                     	;# 
  1842  009C                     	;# 
  1843  009D                     	;# 
  1844  009E                     	;# 
  1845  010C                     	;# 
  1846  010D                     	;# 
  1847  010E                     	;# 
  1848  0116                     	;# 
  1849  0117                     	;# 
  1850  011D                     	;# 
  1851  018C                     	;# 
  1852  018D                     	;# 
  1853  018E                     	;# 
  1854  0191                     	;# 
  1855  0191                     	;# 
  1856  0192                     	;# 
  1857  0193                     	;# 
  1858  0193                     	;# 
  1859  0194                     	;# 
  1860  0195                     	;# 
  1861  0196                     	;# 
  1862  0197                     	;# 
  1863  0199                     	;# 
  1864  019A                     	;# 
  1865  019B                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019C                     	;# 
  1870  019C                     	;# 
  1871  019D                     	;# 
  1872  019E                     	;# 
  1873  019F                     	;# 
  1874  020D                     	;# 
  1875  0210                     	;# 
  1876  0211                     	;# 
  1877  0211                     	;# 
  1878  0212                     	;# 
  1879  0212                     	;# 
  1880  0213                     	;# 
  1881  0213                     	;# 
  1882  0214                     	;# 
  1883  0214                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0216                     	;# 
  1888  0216                     	;# 
  1889  0217                     	;# 
  1890  0217                     	;# 
  1891  0291                     	;# 
  1892  0291                     	;# 
  1893  0292                     	;# 
  1894  0293                     	;# 
  1895  0298                     	;# 
  1896  0298                     	;# 
  1897  0299                     	;# 
  1898  029A                     	;# 
  1899  0394                     	;# 
  1900  0395                     	;# 
  1901  0396                     	;# 
  1902  0FE4                     	;# 
  1903  0FE5                     	;# 
  1904  0FE6                     	;# 
  1905  0FE7                     	;# 
  1906  0FE8                     	;# 
  1907  0FE9                     	;# 
  1908  0FEA                     	;# 
  1909  0FEB                     	;# 
  1910  0FED                     	;# 
  1911  0FEE                     	;# 
  1912  0FEF                     	;# 
  1913  0000                     	;# 
  1914  0001                     	;# 
  1915  0002                     	;# 
  1916  0003                     	;# 
  1917  0004                     	;# 
  1918  0005                     	;# 
  1919  0006                     	;# 
  1920  0007                     	;# 
  1921  0008                     	;# 
  1922  0009                     	;# 
  1923  000A                     	;# 
  1924  000B                     	;# 
  1925  000C                     	;# 
  1926  000D                     	;# 
  1927  000E                     	;# 
  1928  0010                     	;# 
  1929  0011                     	;# 
  1930  0012                     	;# 
  1931  0015                     	;# 
  1932  0016                     	;# 
  1933  0016                     	;# 
  1934  0017                     	;# 
  1935  0018                     	;# 
  1936  0019                     	;# 
  1937  001A                     	;# 
  1938  001B                     	;# 
  1939  001C                     	;# 
  1940  008C                     	;# 
  1941  008D                     	;# 
  1942  008E                     	;# 
  1943  0090                     	;# 
  1944  0091                     	;# 
  1945  0092                     	;# 
  1946  0095                     	;# 
  1947  0096                     	;# 
  1948  0097                     	;# 
  1949  0099                     	;# 
  1950  009A                     	;# 
  1951  009B                     	;# 
  1952  009B                     	;# 
  1953  009C                     	;# 
  1954  009D                     	;# 
  1955  009E                     	;# 
  1956  010C                     	;# 
  1957  010D                     	;# 
  1958  010E                     	;# 
  1959  0116                     	;# 
  1960  0117                     	;# 
  1961  011D                     	;# 
  1962  018C                     	;# 
  1963  018D                     	;# 
  1964  018E                     	;# 
  1965  0191                     	;# 
  1966  0191                     	;# 
  1967  0192                     	;# 
  1968  0193                     	;# 
  1969  0193                     	;# 
  1970  0194                     	;# 
  1971  0195                     	;# 
  1972  0196                     	;# 
  1973  0197                     	;# 
  1974  0199                     	;# 
  1975  019A                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019B                     	;# 
  1980  019C                     	;# 
  1981  019C                     	;# 
  1982  019D                     	;# 
  1983  019E                     	;# 
  1984  019F                     	;# 
  1985  020D                     	;# 
  1986  0210                     	;# 
  1987  0211                     	;# 
  1988  0211                     	;# 
  1989  0212                     	;# 
  1990  0212                     	;# 
  1991  0213                     	;# 
  1992  0213                     	;# 
  1993  0214                     	;# 
  1994  0214                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0216                     	;# 
  1999  0216                     	;# 
  2000  0217                     	;# 
  2001  0217                     	;# 
  2002  0291                     	;# 
  2003  0291                     	;# 
  2004  0292                     	;# 
  2005  0293                     	;# 
  2006  0298                     	;# 
  2007  0298                     	;# 
  2008  0299                     	;# 
  2009  029A                     	;# 
  2010  0394                     	;# 
  2011  0395                     	;# 
  2012  0396                     	;# 
  2013  0FE4                     	;# 
  2014  0FE5                     	;# 
  2015  0FE6                     	;# 
  2016  0FE7                     	;# 
  2017  0FE8                     	;# 
  2018  0FE9                     	;# 
  2019  0FEA                     	;# 
  2020  0FEB                     	;# 
  2021  0FED                     	;# 
  2022  0FEE                     	;# 
  2023  0FEF                     	;# 
  2024                           
  2025                           	psect	idataBANK4
  2026  123C                     __pidataBANK4:	
  2027                           
  2028                           ;initializer for __product
  2029  123C  3463               	retlw	99
  2030  123D  3402               	retlw	2
  2031  123E  3400               	retlw	0
  2032  123F  3400               	retlw	0
  2033  1240  3400               	retlw	0
  2034  1241  3400               	retlw	0
  2035  1242  3400               	retlw	0
  2036  1243  3400               	retlw	0
  2037  1244  3400               	retlw	0
  2038  1245  3400               	retlw	0
  2039  1246  3400               	retlw	0
  2040  1247  3400               	retlw	0
  2041  1248  34FF               	retlw	255
  2042  1249  34FF               	retlw	255
  2043  124A  34FF               	retlw	255
  2044  124B  3400               	retlw	0
  2045  124C  3400               	retlw	0
  2046  124D  3400               	retlw	0
  2047  124E  3400               	retlw	0
  2048  124F  3400               	retlw	0
  2049  1250  3400               	retlw	0
  2050  1251  3400               	retlw	0
  2051  1252  3400               	retlw	0
  2052  1253  3400               	retlw	0
  2053  1254  3400               	retlw	0
  2054  1255  3400               	retlw	0
  2055  1256  3400               	retlw	0
  2056  1257  3400               	retlw	0
  2057  1258  3400               	retlw	0
  2058  1259  3400               	retlw	0
  2059  125A  3400               	retlw	0
  2060  125B  3400               	retlw	0
  2061                           
  2062                           	psect	stringtext
  2063  1000                     __pstringtext:	
  2064  1000                     _CC2500_registers_address:	
  2065  1000  3403               	retlw	3
  2066  1001  3416               	retlw	22
  2067  1002  3417               	retlw	23
  2068  1003  341E               	retlw	30
  2069  1004  341F               	retlw	31
  2070  1005  3420               	retlw	32
  2071  1006  342A               	retlw	42
  2072  1007  342B               	retlw	43
  2073  1008  340B               	retlw	11
  2074  1009  340C               	retlw	12
  2075  100A  340D               	retlw	13
  2076  100B  340E               	retlw	14
  2077  100C  340F               	retlw	15
  2078  100D  3410               	retlw	16
  2079  100E  3411               	retlw	17
  2080  100F  3412               	retlw	18
  2081  1010  3413               	retlw	19
  2082  1011  3414               	retlw	20
  2083  1012  340A               	retlw	10
  2084  1013  3415               	retlw	21
  2085  1014  3421               	retlw	33
  2086  1015  3422               	retlw	34
  2087  1016  3418               	retlw	24
  2088  1017  3419               	retlw	25
  2089  1018  341A               	retlw	26
  2090  1019  341B               	retlw	27
  2091  101A  341C               	retlw	28
  2092  101B  341D               	retlw	29
  2093  101C  3423               	retlw	35
  2094  101D  3424               	retlw	36
  2095  101E  3425               	retlw	37
  2096  101F  3426               	retlw	38
  2097  1020  3429               	retlw	41
  2098  1021  342C               	retlw	44
  2099  1022  342D               	retlw	45
  2100  1023  342E               	retlw	46
  2101  1024  3400               	retlw	0
  2102  1025  3401               	retlw	1
  2103  1026  3402               	retlw	2
  2104  1027  3407               	retlw	7
  2105  1028  3408               	retlw	8
  2106  1029  3409               	retlw	9
  2107  102A  3406               	retlw	6
  2108  102B  3404               	retlw	4
  2109  102C  3405               	retlw	5
  2110  102D  3427               	retlw	39
  2111  102E  3428               	retlw	40
  2112  102F                     __end_of_CC2500_registers_address:	
  2113  102F                     _CC2500_rfSettings:	
  2114  102F  3407               	retlw	7
  2115  1030  3407               	retlw	7
  2116  1031  3430               	retlw	48
  2117  1032  3487               	retlw	135
  2118  1033  346B               	retlw	107
  2119  1034  34F8               	retlw	248
  2120  1035  347F               	retlw	127
  2121  1036  343F               	retlw	63
  2122  1037  3409               	retlw	9
  2123  1038  3400               	retlw	0
  2124  1039  345C               	retlw	92
  2125  103A  34A7               	retlw	167
  2126  103B  3462               	retlw	98
  2127  103C  3486               	retlw	134
  2128  103D  3483               	retlw	131
  2129  103E  3403               	retlw	3
  2130  103F  3422               	retlw	34
  2131  1040  34F8               	retlw	248
  2132  1041  3400               	retlw	0
  2133  1042  3444               	retlw	68
  2134  1043  34B6               	retlw	182
  2135  1044  3410               	retlw	16
  2136  1045  3418               	retlw	24
  2137  1046  341D               	retlw	29
  2138  1047  341C               	retlw	28
  2139  1048  34C7               	retlw	199
  2140  1049  3400               	retlw	0
  2141  104A  34B2               	retlw	178
  2142  104B  34EA               	retlw	234
  2143  104C  340A               	retlw	10
  2144  104D  3400               	retlw	0
  2145  104E  3411               	retlw	17
  2146  104F  3459               	retlw	89
  2147  1050  3488               	retlw	136
  2148  1051  3431               	retlw	49
  2149  1052  340B               	retlw	11
  2150  1053  342F               	retlw	47
  2151  1054  342E               	retlw	46
  2152  1055  3406               	retlw	6
  2153  1056  3404               	retlw	4
  2154  1057  3405               	retlw	5
  2155  1058  3400               	retlw	0
  2156  1059  3430               	retlw	48
  2157  105A  34D3               	retlw	211
  2158  105B  3491               	retlw	145
  2159  105C  3441               	retlw	65
  2160  105D  3400               	retlw	0
  2161  105E                     __end_of_CC2500_rfSettings:	
  2162  105E                     _CC2500_patable_vaule:	
  2163  105E  34FE               	retlw	254
  2164  105F  34FE               	retlw	254
  2165  1060  34FE               	retlw	254
  2166  1061  34FE               	retlw	254
  2167  1062  34FE               	retlw	254
  2168  1063  34FE               	retlw	254
  2169  1064  34FE               	retlw	254
  2170  1065  34FE               	retlw	254
  2171  1066                     __end_of_CC2500_patable_vaule:	
  2172                           
  2173                           	psect	nvBANK0
  2174  006C                     __pnvBANK0:	
  2175  006C                     _product:	
  2176  006C                     	ds	1
  2177  000C                     _PORTA	set	12
  2178  000D                     _PORTB	set	13
  2179  000E                     _PORTC	set	14
  2180  0015                     _TMR0	set	21
  2181  005F                     _GIE	set	95
  2182  005B                     _IOCIE	set	91
  2183  0058                     _IOCIF	set	88
  2184  005E                     _PEIE	set	94
  2185  0060                     _RA0	set	96
  2186  0063                     _RA3	set	99
  2187  0064                     _RA4	set	100
  2188  0066                     _RA6	set	102
  2189  0067                     _RA7	set	103
  2190  0068                     _RB0	set	104
  2191  0069                     _RB1	set	105
  2192  006A                     _RB2	set	106
  2193  006B                     _RB3	set	107
  2194  006C                     _RB4	set	108
  2195  006D                     _RB5	set	109
  2196  0070                     _RC0	set	112
  2197  0071                     _RC1	set	113
  2198  0072                     _RC2	set	114
  2199  0074                     _RC4	set	116
  2200  0075                     _RC5	set	117
  2201  0076                     _RC6	set	118
  2202  0077                     _RC7	set	119
  2203  005D                     _TMR0IE	set	93
  2204  005A                     _TMR0IF	set	90
  2205  009D                     _ADCON0	set	157
  2206  009E                     _ADCON1	set	158
  2207  009C                     _ADRESH	set	156
  2208  009B                     _ADRESL	set	155
  2209  0095                     _OPTION_REG	set	149
  2210  0099                     _OSCCON	set	153
  2211  008C                     _TRISA	set	140
  2212  008D                     _TRISB	set	141
  2213  008E                     _TRISC	set	142
  2214  0097                     _WDTCON	set	151
  2215  04E9                     _GO_nDONE	set	1257
  2216  0117                     _FVRCON	set	279
  2217  010C                     _LATA	set	268
  2218  010D                     _LATB	set	269
  2219  010E                     _LATC	set	270
  2220  018C                     _ANSELA	set	396
  2221  018D                     _ANSELB	set	397
  2222  018E                     _ANSELC	set	398
  2223  0192                     _PMADRH	set	402
  2224  0191                     _PMADRL	set	401
  2225  0196                     _PMCON2	set	406
  2226  0194                     _PMDATH	set	404
  2227  0193                     _PMDATL	set	403
  2228  0CAE                     _CFGS	set	3246
  2229  0CAC                     _FREE	set	3244
  2230  0CAD                     _LWLO	set	3245
  2231  0CA8                     _RD	set	3240
  2232  0CA9                     _WR	set	3241
  2233  0CAA                     _WREN	set	3242
  2234  1069                     _WPUB1	set	4201
  2235  106A                     _WPUB2	set	4202
  2236  0396                     _IOCBF	set	918
  2237  0395                     _IOCBN	set	917
  2238  0394                     _IOCBP	set	916
  2239  1CB2                     _IOCBF2	set	7346
  2240                           
  2241                           ; #config settings
  2242  0000                     
  2243                           	psect	cinit
  2244  0015                     start_initialization:	
  2245  0015                     __initialization:	
  2246                           
  2247                           ; Clear objects allocated to BITCOMMON
  2248  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2249                           
  2250                           ; Clear objects allocated to COMMON
  2251  0016  01F0               	clrf	__pbssCOMMON& (0+127)
  2252  0017  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2253  0018  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2254  0019  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2255  001A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2256  001B  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2257                           
  2258                           ; Clear objects allocated to BANK0
  2259  001C  01ED               	clrf	__pbssBANK0& (0+127)
  2260                           
  2261                           ; Clear objects allocated to BANK1
  2262  001D  30A0               	movlw	low __pbssBANK1
  2263  001E  0084               	movwf	4
  2264  001F  3000               	movlw	high __pbssBANK1
  2265  0020  0085               	movwf	5
  2266  0021  3050               	movlw	80
  2267  0022  319E  261E  3180   	fcall	clear_ram0
  2268                           
  2269                           ; Clear objects allocated to BANK2
  2270  0025  3020               	movlw	low __pbssBANK2
  2271  0026  0084               	movwf	4
  2272  0027  3001               	movlw	high __pbssBANK2
  2273  0028  0085               	movwf	5
  2274  0029  304E               	movlw	78
  2275  002A  319E  261E  3180   	fcall	clear_ram0
  2276                           
  2277                           ; Clear objects allocated to BANK3
  2278  002D  30A0               	movlw	low __pbssBANK3
  2279  002E  0084               	movwf	4
  2280  002F  3001               	movlw	high __pbssBANK3
  2281  0030  0085               	movwf	5
  2282  0031  3040               	movlw	64
  2283  0032  319E  261E  3180   	fcall	clear_ram0
  2284                           
  2285                           ; Initialize objects allocated to BANK4
  2286  0035  303C               	movlw	low __pidataBANK4
  2287  0036  0084               	movwf	4
  2288  0037  3092               	movlw	(high __pidataBANK4)| (0+128)
  2289  0038  0085               	movwf	5
  2290  0039  3020               	movlw	low __pdataBANK4
  2291  003A  0086               	movwf	6
  2292  003B  3002               	movlw	high __pdataBANK4
  2293  003C  0087               	movwf	7
  2294  003D  3020               	movlw	32
  2295  003E  319E  2618         	fcall	init_ram
  2296  0040                     end_of_initialization:	
  2297                           ;End of C runtime variable initialization code
  2298                           
  2299  0040                     __end_of__initialization:	
  2300  0040  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2301  0041  0020               	movlb	0
  2302  0042  3195  2D6D         	ljmp	_main	;jump to C main() function
  2303                           
  2304                           	psect	bitbssCOMMON
  2305  03E0                     __pbitbssCOMMON:	
  2306  03E0                     _Receive_OK:	
  2307  03E0                     	ds	1
  2308  03E1                     _Transceive_OK:	
  2309  03E1                     	ds	1
  2310                           
  2311                           	psect	bssCOMMON
  2312  0070                     __pbssCOMMON:	
  2313  0070                     _LED:	
  2314  0070                     	ds	2
  2315  0072                     _DelayOff:	
  2316  0072                     	ds	1
  2317  0073                     _Dimmer:	
  2318  0073                     	ds	1
  2319  0074                     _DimmerLights:	
  2320  0074                     	ds	1
  2321  0075                     _DimmerLightsIntr:	
  2322  0075                     	ds	1
  2323                           
  2324                           	psect	bssBANK0
  2325  006D                     __pbssBANK0:	
  2326  006D                     _Sw:	
  2327  006D                     	ds	1
  2328                           
  2329                           	psect	bssBANK1
  2330  00A0                     __pbssBANK1:	
  2331  00A0                     _myMain:	
  2332  00A0                     	ds	18
  2333  00B2                     _Buz1:	
  2334  00B2                     	ds	12
  2335  00BE                     _RF1:	
  2336  00BE                     	ds	9
  2337  00C7                     _RF_Count:	
  2338  00C7                     	ds	2
  2339  00C9                     _WDT:	
  2340  00C9                     	ds	2
  2341  00CB                     _CRC:	
  2342  00CB                     	ds	1
  2343  00CC                     _DimmerLights11:	
  2344  00CC                     	ds	1
  2345  00CD                     _DimmerLights22:	
  2346  00CD                     	ds	1
  2347  00CE                     _DimmerLights33:	
  2348  00CE                     	ds	1
  2349  00CF                     _DimmerLightsIntrIOC:	
  2350  00CF                     	ds	1
  2351  00D0                     _RFSW:	
  2352  00D0                     	ds	1
  2353  00D1                     _RSSI:	
  2354  00D1                     	ds	1
  2355  00D2                     _Rx_Length:	
  2356  00D2                     	ds	1
  2357  00D3                     _SPI0Buffer:	
  2358  00D3                     	ds	1
  2359  00D4                     _Tx_Length:	
  2360  00D4                     	ds	1
  2361  00D5                     _r_address:	
  2362  00D5                     	ds	1
  2363  00D6                     _r_data:	
  2364  00D6                     	ds	1
  2365  00D7                     _s_data:	
  2366  00D7                     	ds	1
  2367  00D8                     _VarErrLED:	
  2368  00D8                     	ds	4
  2369  00DC                     _VarLED1:	
  2370  00DC                     	ds	4
  2371  00E0                     _VarLED2:	
  2372  00E0                     	ds	4
  2373  00E4                     _Dimmer1:	
  2374  00E4                     	ds	3
  2375  00E7                     _DlySw1:	
  2376  00E7                     	ds	2
  2377  00E9                     _DlySw2:	
  2378  00E9                     	ds	2
  2379  00EB                     _DlySw3:	
  2380  00EB                     	ds	2
  2381  00ED                     _RFSW1:	
  2382  00ED                     	ds	1
  2383  00EE                     _RFSW2:	
  2384  00EE                     	ds	1
  2385  00EF                     _RFSW3:	
  2386  00EF                     	ds	1
  2387                           
  2388                           	psect	bssBANK2
  2389  0120                     __pbssBANK2:	
  2390  0120                     _RF_Data:	
  2391  0120                     	ds	21
  2392  0135                     _Timer0:	
  2393  0135                     	ds	8
  2394  013D                     _DimmerLights1:	
  2395  013D                     	ds	15
  2396  014C                     _DimmerLights2:	
  2397  014C                     	ds	15
  2398  015B                     _DimmerLights3:	
  2399  015B                     	ds	15
  2400  016A                     _VarLED3:	
  2401  016A                     	ds	4
  2402                           
  2403                           	psect	bssBANK3
  2404  01A0                     __pbssBANK3:	
  2405  01A0                     _Memory:	
  2406  01A0                     	ds	37
  2407  01C5                     _Sw1:	
  2408  01C5                     	ds	9
  2409  01CE                     _Sw2:	
  2410  01CE                     	ds	9
  2411  01D7                     _Sw3:	
  2412  01D7                     	ds	9
  2413                           
  2414                           	psect	dataBANK4
  2415  0220                     __pdataBANK4:	
  2416  0220                     __product:	
  2417  0220                     	ds	32
  2418                           
  2419                           	psect	clrtext
  2420  1E1E                     clear_ram0:	
  2421                           ;	Called with FSR0 containing the base address, and
  2422                           ;	WREG with the size to clear
  2423                           
  2424  1E1E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2425  1E1F                     clrloop0:	
  2426  1E1F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2427  1E20  3101               	addfsr 0,1
  2428  1E21  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2429  1E22  2E1F               	goto	clrloop0	;have we reached the end yet?
  2430  1E23  3400               	retlw	0	;all done for this memory range, return
  2431                           
  2432                           	psect	inittext
  2433  1E18                     init_ram:	
  2434  1E18  00FE               	movwf	126
  2435  1E19                     initloop:	
  2436  1E19  0012               	moviw fsr0++
  2437  1E1A  001E               	movwi fsr1++
  2438  1E1B  0BFE               	decfsz	126,f
  2439  1E1C  2E19               	goto	initloop
  2440  1E1D  3400               	retlw	0
  2441                           
  2442                           	psect	cstackBANK3
  2443  01E0                     __pcstackBANK3:	
  2444  01E0                     ?_main:	
  2445  01E0                     main@argc:	
  2446                           ; 2 bytes @ 0x0
  2447                           
  2448                           
  2449                           ; 2 bytes @ 0x0
  2450  01E0                     	ds	2
  2451  01E2                     main@argv:	
  2452                           
  2453                           ; 2 bytes @ 0x2
  2454  01E2                     	ds	2
  2455                           
  2456                           	psect	cstackCOMMON
  2457  0076                     __pcstackCOMMON:	
  2458  0076                     ?_Timeout_Counter:	
  2459  0076                     ?_set_TimeoutCleared:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0076                     ?_CC2500_WriteByte:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0076                     ?_CC2500_WriteCommand:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0076                     ?_CC2500_ReadStatus:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0076                     ?_CC2500_ReadByte:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0076                     ?_CC2500_PowerRST:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0076                     ?_CC2500_InitSetREG:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0076                     ?_CC2500_InitPATable:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0076                     ?_CC2500_ClearTXFIFO:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0076                     ?_CC2500_ClearRXFIFO:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0076                     ?_CC2500_FrequencyCabr:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0076                     ?_CC2500_SIDLEMode:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0076                     ?_DlyOff_Initialization:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0076                     ?_DlyOff_Main:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0076                     ?_setTxData:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0076                     ?_setDimmerLights_Initialization:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0076                     ?_Dimmer_Initialization:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0076                     ?_setMemory_GO:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0076                     ?_setDimmerLights_Main:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0076                     ?_setLED_Initialization:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0076                     ?_setLED_Main:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0076                     ?_Fosc_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0076                     ?_IO_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0076                     ?_TMR0_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0076                     ?_ADC_Set:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0076                     ?_IOC_Set:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0076                     ?_WDT_Set:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0076                     ?_IOC_ISR:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0076                     ?_TMR0_ISR:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0076                     ?_Flash_Memory_Write:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0076                     ?_Flash_Memory_Modify:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0076                     ?_WDT_Clearing:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0076                     ?_myMain_Initialization:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0076                     ?_Switch_Initialization:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0076                     ?_RF_Initialization:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0076                     ?_my_MainTime:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0076                     ?_Switch_Main:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0076                     ?_RF_Main:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0076                     ?_setSw_Enable:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0076                     ?_setRF_Enable:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0076                     ?_setRF_Initialization:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0076                     ?_setRF_Main:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0076                     ?_getRxData:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0076                     ?_setLog_Code:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0076                     ?_setControl_Lights_Table:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0076                     ?_setRFSW_Control:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0076                     ?_setRFSW_AdjControl:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0076                     ?_setRF_DimmerValue:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0076                     ?_setSw_Initialization:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0076                     ?_setSw_Main:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0076                     ?_Sw_DimmerOnFunc:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0076                     ?_Sw_DimmerAdjFunc:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0076                     ?_Sw_DimmerOffFunc:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0076                     ?_Buzzer_Initialization:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0076                     ?_Buzzer_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0076                     ?_CC2500_TxData:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0076                     ?_CC2500_RxData:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0076                     ?_CC2500_PowerOnInitial:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0076                     ?_DelayOffPointSelect:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0076                     ?_DelayOff_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0076                     ?_DelayOff_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0076                     ?_DimmerIntrIOCPointSelect:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0076                     ??_DimmerIntrIOCPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0076                     ?_setDimmerLights_IntrIOC_GO:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0076                     ?_DimmerIntrPointSelect:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0076                     ??_DimmerIntrPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0076                     ?_setDimmerLights_IntrControl:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0076                     ?_DimmerLightsPointSelect:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0076                     ?_DimmerLights_Initialization:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0076                     ?_DimmerLights_Close:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0076                     ?_DimmerLights_Main:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0076                     ?_setDimmerLights_AdjRF:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0076                     ?_LedPointSelect:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0076                     ?_LED_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0076                     ?_LED_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0076                     ?_Mcu_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0076                     ?_ISR:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0076                     ?_setDimmerReClock:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0076                     ?_Flash_Memory_Initialization:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0076                     ?_Flash_Memory_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0076                     ?_Flash_Memory_Unlock:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0076                     ?_Flash_Memory_Erasing:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0076                     ?_WDT_Main:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0076                     ?_setRF_Learn:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0076                     ?_RfSWPointSelect:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0076                     ?_TouchPower:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0076                     ?_SwPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0076                     ?_DelayTimejudge:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0076                     ?_getDimmerLights_StatusFlag:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0076                     ?_getPercentValue:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0076                     ?_Flash_Memory_Read:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0076                     ?_setPercentValue:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735                           
  2736                           ; 1 bytes @ 0x0
  2737  0076                     	ds	1
  2738  0077                     DimmerIntrIOCPointSelect@lights:	
  2739  0077                     DimmerIntrPointSelect@lights:	
  2740                           ; 1 bytes @ 0x1
  2741                           
  2742                           
  2743                           ; 1 bytes @ 0x1
  2744  0077                     	ds	1
  2745  0078                     ??_setDimmerLights_IntrIOC_GO:	
  2746  0078                     ??_setDimmerLights_IntrControl:	
  2747                           ; 0 bytes @ 0x2
  2748                           
  2749  0078                     setDimmerLights_IntrIOC_GO@lights:	
  2750                           ; 0 bytes @ 0x2
  2751                           
  2752                           
  2753                           ; 1 bytes @ 0x2
  2754  0078                     	ds	1
  2755  0079                     ??_IOC_ISR:	
  2756  0079                     ??_setDimmerReClock:	
  2757                           ; 0 bytes @ 0x3
  2758                           
  2759                           
  2760                           ; 0 bytes @ 0x3
  2761  0079                     	ds	1
  2762  007A                     setDimmerLights_IntrControl@lights:	
  2763                           
  2764                           ; 1 bytes @ 0x4
  2765  007A                     	ds	1
  2766  007B                     ??_TMR0_ISR:	
  2767  007B                     ??_ISR:	
  2768                           ; 0 bytes @ 0x5
  2769                           
  2770                           
  2771                           ; 0 bytes @ 0x5
  2772  007B                     	ds	1
  2773                           
  2774                           	psect	cstackBANK0
  2775  0020                     __pcstackBANK0:	
  2776  0020                     ??_Timeout_Counter:	
  2777  0020                     ??_set_TimeoutCleared:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0020                     ??_CC2500_WriteByte:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0020                     ??_CC2500_ReadByte:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0020                     ?_DelayTime_1us:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0020                     ??_setTxData:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0020                     ??_Dimmer_Initialization:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0020                     ??_getDimmerLights_StatusFlag:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0020                     ??_setMemory_GO:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0020                     ??_Fosc_Set:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ??_IO_Set:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ??_TMR0_Set:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ??_ADC_Set:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ??_IOC_Set:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0020                     ??_WDT_Set:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0020                     ??_Flash_Memory_Read:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_Flash_Memory_Write:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ??_WDT_Clearing:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ??_myMain_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_setRF_Enable:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_setRF_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_Buzzer_Initialization:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_Buzzer_Main:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_DelayOffPointSelect:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_DimmerLightsPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_LedPointSelect:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_Flash_Memory_Unlock:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_Flash_Memory_Erasing:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_WDT_Main:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_setRF_Learn:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_RfSWPointSelect:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_TouchPower:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_SwPointSelect:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ?___bmul:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ?_getBuz_GO:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0020                     ?___wmul:	
  2880                           ; 2 bytes @ 0x0
  2881                           
  2882  0020                     ?___awdiv:	
  2883                           ; 2 bytes @ 0x0
  2884                           
  2885  0020                     ?___ftpack:	
  2886                           ; 2 bytes @ 0x0
  2887                           
  2888  0020                     LedPointSelect@led:	
  2889                           ; 3 bytes @ 0x0
  2890                           
  2891  0020                     setRF_Learn@command:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0020                     setRF_Enable@command:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0020                     ___bmul@multiplicand:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0020                     DelayTime_1us@count:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0020                     ___wmul@multiplier:	
  2904                           ; 2 bytes @ 0x0
  2905                           
  2906  0020                     ___awdiv@divisor:	
  2907                           ; 2 bytes @ 0x0
  2908                           
  2909  0020                     ___ftpack@arg:	
  2910                           ; 2 bytes @ 0x0
  2911                           
  2912                           
  2913                           ; 3 bytes @ 0x0
  2914  0020                     	ds	1
  2915  0021                     ?_setLED:	
  2916  0021                     ??_setLED_Main:	
  2917                           ; 0 bytes @ 0x1
  2918                           
  2919  0021                     ??_RF_Initialization:	
  2920                           ; 0 bytes @ 0x1
  2921                           
  2922  0021                     ??_Mcu_Initialization:	
  2923                           ; 0 bytes @ 0x1
  2924                           
  2925  0021                     ??___bmul:	
  2926                           ; 0 bytes @ 0x1
  2927                           
  2928  0021                     CC2500_WriteByte@loop_a:	
  2929                           ; 0 bytes @ 0x1
  2930                           
  2931  0021                     CC2500_ReadByte@loop_b:	
  2932                           ; 1 bytes @ 0x1
  2933                           
  2934  0021                     DelayOffPointSelect@sw:	
  2935                           ; 1 bytes @ 0x1
  2936                           
  2937  0021                     DimmerLightsPointSelect@lights:	
  2938                           ; 1 bytes @ 0x1
  2939                           
  2940  0021                     getDimmerLights_StatusFlag@Status:	
  2941                           ; 1 bytes @ 0x1
  2942                           
  2943  0021                     setLED@command:	
  2944                           ; 1 bytes @ 0x1
  2945                           
  2946  0021                     Flash_Memory_Read@i:	
  2947                           ; 1 bytes @ 0x1
  2948                           
  2949  0021                     Flash_Memory_Write@i:	
  2950                           ; 1 bytes @ 0x1
  2951                           
  2952  0021                     RfSWPointSelect@sw:	
  2953                           ; 1 bytes @ 0x1
  2954                           
  2955  0021                     SwPointSelect@sw:	
  2956                           ; 1 bytes @ 0x1
  2957                           
  2958                           
  2959                           ; 1 bytes @ 0x1
  2960  0021                     	ds	1
  2961  0022                     ??_CC2500_WriteCommand:	
  2962  0022                     ??_CC2500_ReadStatus:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0022                     ??_DelayTime_1us:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0022                     ?_CC2500_WriteREG:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0022                     ??_DlyOff_Initialization:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0022                     ?_setSw_Status:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0022                     ?_setRFSW_Status:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0022                     ?_setDimmerLights_Trigger:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0022                     ?_setDimmerLights_Switch:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0022                     ??_setDimmerLights_Initialization:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0022                     ??_setLED:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0022                     ??_setSw_Enable:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0022                     ??_getBuz_GO:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0022                     ?_setDimmerLights_AdjGo:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0022                     ?_setDimmerLights_TriggerAdj:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0022                     CC2500_WriteREG@value:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007  0022                     DlyOff_Initialization@sw:	
  3008                           ; 1 bytes @ 0x2
  3009                           
  3010  0022                     _getDimmerLights_StatusFlag$2454:	
  3011                           ; 1 bytes @ 0x2
  3012                           
  3013  0022                     setDimmerLights_Switch@command:	
  3014                           ; 1 bytes @ 0x2
  3015                           
  3016  0022                     setDimmerLights_AdjGo@command:	
  3017                           ; 1 bytes @ 0x2
  3018                           
  3019  0022                     setDimmerLights_Trigger@command:	
  3020                           ; 1 bytes @ 0x2
  3021                           
  3022  0022                     setDimmerLights_TriggerAdj@command:	
  3023                           ; 1 bytes @ 0x2
  3024                           
  3025  0022                     setLED@led:	
  3026                           ; 1 bytes @ 0x2
  3027                           
  3028  0022                     Flash_Memory_Read@address:	
  3029                           ; 1 bytes @ 0x2
  3030                           
  3031  0022                     setMemory_GO@command:	
  3032                           ; 1 bytes @ 0x2
  3033                           
  3034  0022                     setRFSW_Status@command:	
  3035                           ; 1 bytes @ 0x2
  3036                           
  3037  0022                     setSw_Enable@command:	
  3038                           ; 1 bytes @ 0x2
  3039                           
  3040  0022                     setSw_Status@command:	
  3041                           ; 1 bytes @ 0x2
  3042                           
  3043  0022                     ___bmul@product:	
  3044                           ; 1 bytes @ 0x2
  3045                           
  3046  0022                     DelayTime_1us@i:	
  3047                           ; 1 bytes @ 0x2
  3048                           
  3049  0022                     ___wmul@multiplicand:	
  3050                           ; 2 bytes @ 0x2
  3051                           
  3052  0022                     ___awdiv@dividend:	
  3053                           ; 2 bytes @ 0x2
  3054                           
  3055                           
  3056                           ; 2 bytes @ 0x2
  3057  0022                     	ds	1
  3058  0023                     ??_CC2500_WriteREG:	
  3059  0023                     ??_setSw_Status:	
  3060                           ; 0 bytes @ 0x3
  3061                           
  3062  0023                     ??_setRFSW_Status:	
  3063                           ; 0 bytes @ 0x3
  3064                           
  3065  0023                     ??_setDimmerLights_Trigger:	
  3066                           ; 0 bytes @ 0x3
  3067                           
  3068  0023                     ??_setDimmerLights_Switch:	
  3069                           ; 0 bytes @ 0x3
  3070                           
  3071  0023                     ?_setDimmerLights:	
  3072                           ; 0 bytes @ 0x3
  3073                           
  3074  0023                     ??_setLED_Initialization:	
  3075                           ; 0 bytes @ 0x3
  3076                           
  3077  0023                     ??_setSw_Initialization:	
  3078                           ; 0 bytes @ 0x3
  3079                           
  3080  0023                     ??_DelayOff_Initialization:	
  3081                           ; 0 bytes @ 0x3
  3082                           
  3083  0023                     ??_DimmerLights_Close:	
  3084                           ; 0 bytes @ 0x3
  3085                           
  3086  0023                     ??_setDimmerLights_AdjGo:	
  3087                           ; 0 bytes @ 0x3
  3088                           
  3089  0023                     ??_setDimmerLights_TriggerAdj:	
  3090                           ; 0 bytes @ 0x3
  3091                           
  3092  0023                     CC2500_WriteCommand@command:	
  3093                           ; 0 bytes @ 0x3
  3094                           
  3095  0023                     CC2500_ReadStatus@status_addr:	
  3096                           ; 1 bytes @ 0x3
  3097                           
  3098  0023                     setDimmerLights_Initialization@lights:	
  3099                           ; 1 bytes @ 0x3
  3100                           
  3101  0023                     setDimmerLights@status:	
  3102                           ; 1 bytes @ 0x3
  3103                           
  3104  0023                     setDimmerLights_Switch@lights:	
  3105                           ; 1 bytes @ 0x3
  3106                           
  3107  0023                     setDimmerLights_AdjGo@lights:	
  3108                           ; 1 bytes @ 0x3
  3109                           
  3110  0023                     setDimmerLights_Trigger@lights:	
  3111                           ; 1 bytes @ 0x3
  3112                           
  3113  0023                     setDimmerLights_TriggerAdj@lights:	
  3114                           ; 1 bytes @ 0x3
  3115                           
  3116  0023                     setLED_Initialization@led:	
  3117                           ; 1 bytes @ 0x3
  3118                           
  3119  0023                     setLED_Main@led:	
  3120                           ; 1 bytes @ 0x3
  3121                           
  3122  0023                     Flash_Memory_Read@ret:	
  3123                           ; 1 bytes @ 0x3
  3124                           
  3125  0023                     setRFSW_Status@sw:	
  3126                           ; 1 bytes @ 0x3
  3127                           
  3128  0023                     setSw_Initialization@sw:	
  3129                           ; 1 bytes @ 0x3
  3130                           
  3131  0023                     setSw_Status@sw:	
  3132                           ; 1 bytes @ 0x3
  3133                           
  3134  0023                     ___bmul@multiplier:	
  3135                           ; 1 bytes @ 0x3
  3136                           
  3137  0023                     ___ftpack@exp:	
  3138                           ; 1 bytes @ 0x3
  3139                           
  3140                           
  3141                           ; 1 bytes @ 0x3
  3142  0023                     	ds	1
  3143  0024                     ??_CC2500_ClearTXFIFO:	
  3144  0024                     ??_CC2500_ClearRXFIFO:	
  3145                           ; 0 bytes @ 0x4
  3146                           
  3147  0024                     ??_CC2500_SIDLEMode:	
  3148                           ; 0 bytes @ 0x4
  3149                           
  3150  0024                     ??_DelayTimejudge:	
  3151                           ; 0 bytes @ 0x4
  3152                           
  3153  0024                     ??_setDimmerLights:	
  3154                           ; 0 bytes @ 0x4
  3155                           
  3156  0024                     ??_Flash_Memory_Modify:	
  3157                           ; 0 bytes @ 0x4
  3158                           
  3159  0024                     ??_Switch_Initialization:	
  3160                           ; 0 bytes @ 0x4
  3161                           
  3162  0024                     ??_Sw_DimmerAdjFunc:	
  3163                           ; 0 bytes @ 0x4
  3164                           
  3165  0024                     ??_CC2500_TxData:	
  3166                           ; 0 bytes @ 0x4
  3167                           
  3168  0024                     ??_CC2500_RxData:	
  3169                           ; 0 bytes @ 0x4
  3170                           
  3171  0024                     ??_DimmerLights_Initialization:	
  3172                           ; 0 bytes @ 0x4
  3173                           
  3174  0024                     ??_LED_Initialization:	
  3175                           ; 0 bytes @ 0x4
  3176                           
  3177  0024                     ??_LED_Main:	
  3178                           ; 0 bytes @ 0x4
  3179                           
  3180  0024                     ??___wmul:	
  3181                           ; 0 bytes @ 0x4
  3182                           
  3183  0024                     ??___awdiv:	
  3184                           ; 0 bytes @ 0x4
  3185                           
  3186  0024                     CC2500_WriteREG@w_addr:	
  3187                           ; 0 bytes @ 0x4
  3188                           
  3189  0024                     ___ftpack@sign:	
  3190                           ; 1 bytes @ 0x4
  3191                           
  3192  0024                     getBuz_GO@i:	
  3193                           ; 1 bytes @ 0x4
  3194                           
  3195  0024                     DelayTime_1us@j:	
  3196                           ; 2 bytes @ 0x4
  3197                           
  3198  0024                     ___wmul@product:	
  3199                           ; 2 bytes @ 0x4
  3200                           
  3201                           
  3202                           ; 2 bytes @ 0x4
  3203  0024                     	ds	1
  3204  0025                     ??_CC2500_InitSetREG:	
  3205  0025                     ??_CC2500_InitPATable:	
  3206                           ; 0 bytes @ 0x5
  3207                           
  3208  0025                     ??___ftpack:	
  3209                           ; 0 bytes @ 0x5
  3210                           
  3211  0025                     CC2500_TxData@loop_e:	
  3212                           ; 0 bytes @ 0x5
  3213                           
  3214  0025                     CC2500_RxData@loop_f:	
  3215                           ; 1 bytes @ 0x5
  3216                           
  3217  0025                     setDimmerLights@lights:	
  3218                           ; 1 bytes @ 0x5
  3219                           
  3220  0025                     Flash_Memory_Modify@i:	
  3221                           ; 1 bytes @ 0x5
  3222                           
  3223  0025                     _Sw_DimmerAdjFunc$6131:	
  3224                           ; 1 bytes @ 0x5
  3225                           
  3226  0025                     ___awdiv@counter:	
  3227                           ; 1 bytes @ 0x5
  3228                           
  3229                           
  3230                           ; 1 bytes @ 0x5
  3231  0025                     	ds	1
  3232  0026                     ??_CC2500_PowerRST:	
  3233  0026                     ??_CC2500_FrequencyCabr:	
  3234                           ; 0 bytes @ 0x6
  3235                           
  3236  0026                     ??_Flash_Memory_Main:	
  3237                           ; 0 bytes @ 0x6
  3238                           
  3239  0026                     CC2500_InitSetREG@temp1:	
  3240                           ; 0 bytes @ 0x6
  3241                           
  3242  0026                     CC2500_InitPATable@temp:	
  3243                           ; 1 bytes @ 0x6
  3244                           
  3245  0026                     DelayTimejudge@i:	
  3246                           ; 1 bytes @ 0x6
  3247                           
  3248  0026                     _Sw_DimmerAdjFunc$6132:	
  3249                           ; 1 bytes @ 0x6
  3250                           
  3251  0026                     ___awdiv@sign:	
  3252                           ; 1 bytes @ 0x6
  3253                           
  3254                           
  3255                           ; 1 bytes @ 0x6
  3256  0026                     	ds	1
  3257  0027                     CC2500_InitSetREG@temp2:	
  3258  0027                     CC2500_InitPATable@loop_d:	
  3259                           ; 1 bytes @ 0x7
  3260                           
  3261  0027                     DelayTimejudge@j:	
  3262                           ; 1 bytes @ 0x7
  3263                           
  3264  0027                     _Sw_DimmerAdjFunc$6133:	
  3265                           ; 1 bytes @ 0x7
  3266                           
  3267  0027                     ___awdiv@quotient:	
  3268                           ; 1 bytes @ 0x7
  3269                           
  3270                           
  3271                           ; 2 bytes @ 0x7
  3272  0027                     	ds	1
  3273  0028                     ?___awtoft:	
  3274  0028                     CC2500_InitSetREG@loop_c:	
  3275                           ; 3 bytes @ 0x8
  3276                           
  3277  0028                     DelayTimejudge@k:	
  3278                           ; 1 bytes @ 0x8
  3279                           
  3280  0028                     Sw_DimmerAdjFunc@Idle:	
  3281                           ; 1 bytes @ 0x8
  3282                           
  3283  0028                     ___awtoft@c:	
  3284                           ; 1 bytes @ 0x8
  3285                           
  3286                           
  3287                           ; 2 bytes @ 0x8
  3288  0028                     	ds	1
  3289  0029                     ?_setBuz:	
  3290  0029                     ??_CC2500_PowerOnInitial:	
  3291                           ; 0 bytes @ 0x9
  3292                           
  3293  0029                     DelayTimejudge@value:	
  3294                           ; 0 bytes @ 0x9
  3295                           
  3296  0029                     Sw_DimmerAdjFunc@sw:	
  3297                           ; 1 bytes @ 0x9
  3298                           
  3299  0029                     setBuz@time:	
  3300                           ; 1 bytes @ 0x9
  3301                           
  3302                           
  3303                           ; 2 bytes @ 0x9
  3304  0029                     	ds	1
  3305  002A                     ?_setDelayOff_GO:	
  3306  002A                     setDelayOff_GO@command:	
  3307                           ; 0 bytes @ 0xA
  3308                           
  3309                           
  3310                           ; 1 bytes @ 0xA
  3311  002A                     	ds	1
  3312  002B                     ??_setBuz:	
  3313  002B                     ??___awtoft:	
  3314                           ; 0 bytes @ 0xB
  3315                           
  3316  002B                     setDelayOff_GO@value:	
  3317                           ; 0 bytes @ 0xB
  3318                           
  3319                           
  3320                           ; 1 bytes @ 0xB
  3321  002B                     	ds	1
  3322  002C                     ??_setDelayOff_GO:	
  3323  002C                     setBuz@count:	
  3324                           ; 0 bytes @ 0xC
  3325                           
  3326                           
  3327                           ; 1 bytes @ 0xC
  3328  002C                     	ds	1
  3329  002D                     ??_my_MainTime:	
  3330  002D                     ??_setLog_Code:	
  3331                           ; 0 bytes @ 0xD
  3332                           
  3333  002D                     ___awtoft@sign:	
  3334                           ; 0 bytes @ 0xD
  3335                           
  3336                           
  3337                           ; 1 bytes @ 0xD
  3338  002D                     	ds	1
  3339  002E                     ?___ftdiv:	
  3340  002E                     ?___ftmul:	
  3341                           ; 3 bytes @ 0xE
  3342                           
  3343  002E                     setDelayOff_GO@sw:	
  3344                           ; 3 bytes @ 0xE
  3345                           
  3346  002E                     ___ftdiv@f2:	
  3347                           ; 1 bytes @ 0xE
  3348                           
  3349  002E                     ___ftmul@f1:	
  3350                           ; 3 bytes @ 0xE
  3351                           
  3352                           
  3353                           ; 3 bytes @ 0xE
  3354  002E                     	ds	3
  3355  0031                     ___ftdiv@f1:	
  3356  0031                     ___ftmul@f2:	
  3357                           ; 3 bytes @ 0x11
  3358                           
  3359                           
  3360                           ; 3 bytes @ 0x11
  3361  0031                     	ds	3
  3362  0034                     ??___ftdiv:	
  3363  0034                     ??___ftmul:	
  3364                           ; 0 bytes @ 0x14
  3365                           
  3366                           
  3367                           ; 0 bytes @ 0x14
  3368  0034                     	ds	4
  3369  0038                     ___ftdiv@cntr:	
  3370  0038                     ___ftmul@exp:	
  3371                           ; 1 bytes @ 0x18
  3372                           
  3373                           
  3374                           ; 1 bytes @ 0x18
  3375  0038                     	ds	1
  3376  0039                     ___ftdiv@f3:	
  3377  0039                     ___ftmul@f3_as_product:	
  3378                           ; 3 bytes @ 0x19
  3379                           
  3380                           
  3381                           ; 3 bytes @ 0x19
  3382  0039                     	ds	3
  3383  003C                     ___ftdiv@exp:	
  3384  003C                     ___ftmul@cntr:	
  3385                           ; 1 bytes @ 0x1C
  3386                           
  3387                           
  3388                           ; 1 bytes @ 0x1C
  3389  003C                     	ds	1
  3390  003D                     ___ftdiv@sign:	
  3391  003D                     ___ftmul@sign:	
  3392                           ; 1 bytes @ 0x1D
  3393                           
  3394                           
  3395                           ; 1 bytes @ 0x1D
  3396  003D                     	ds	1
  3397  003E                     ?___ftadd:	
  3398  003E                     ___ftadd@f1:	
  3399                           ; 3 bytes @ 0x1E
  3400                           
  3401                           
  3402                           ; 3 bytes @ 0x1E
  3403  003E                     	ds	3
  3404  0041                     ___ftadd@f2:	
  3405                           
  3406                           ; 3 bytes @ 0x21
  3407  0041                     	ds	3
  3408  0044                     ??___ftadd:	
  3409                           
  3410                           ; 0 bytes @ 0x24
  3411  0044                     	ds	4
  3412  0048                     ___ftadd@sign:	
  3413                           
  3414                           ; 1 bytes @ 0x28
  3415  0048                     	ds	1
  3416  0049                     ___ftadd@exp2:	
  3417                           
  3418                           ; 1 bytes @ 0x29
  3419  0049                     	ds	1
  3420  004A                     ___ftadd@exp1:	
  3421                           
  3422                           ; 1 bytes @ 0x2A
  3423  004A                     	ds	1
  3424  004B                     ?___fttol:	
  3425  004B                     ___fttol@f1:	
  3426                           ; 4 bytes @ 0x2B
  3427                           
  3428                           
  3429                           ; 3 bytes @ 0x2B
  3430  004B                     	ds	4
  3431  004F                     ??___fttol:	
  3432                           
  3433                           ; 0 bytes @ 0x2F
  3434  004F                     	ds	4
  3435  0053                     ___fttol@sign1:	
  3436                           
  3437                           ; 1 bytes @ 0x33
  3438  0053                     	ds	1
  3439  0054                     ___fttol@lval:	
  3440                           
  3441                           ; 4 bytes @ 0x34
  3442  0054                     	ds	4
  3443  0058                     ___fttol@exp1:	
  3444                           
  3445                           ; 1 bytes @ 0x38
  3446  0058                     	ds	1
  3447  0059                     ??_getPercentValue:	
  3448  0059                     ??_setPercentValue:	
  3449                           ; 0 bytes @ 0x39
  3450                           
  3451  0059                     setPercentValue@value:	
  3452                           ; 0 bytes @ 0x39
  3453                           
  3454                           
  3455                           ; 1 bytes @ 0x39
  3456  0059                     	ds	1
  3457  005A                     setPercentValue@i:	
  3458                           
  3459                           ; 3 bytes @ 0x3A
  3460  005A                     	ds	1
  3461  005B                     getPercentValue@value:	
  3462                           
  3463                           ; 1 bytes @ 0x3B
  3464  005B                     	ds	1
  3465  005C                     getPercentValue@i:	
  3466                           
  3467                           ; 3 bytes @ 0x3C
  3468  005C                     	ds	1
  3469  005D                     ?_setRF_DimmerLights:	
  3470  005D                     ??_Flash_Memory_Initialization:	
  3471                           ; 0 bytes @ 0x3D
  3472                           
  3473  005D                     setRF_DimmerLights@on:	
  3474                           ; 0 bytes @ 0x3D
  3475                           
  3476                           
  3477                           ; 1 bytes @ 0x3D
  3478  005D                     	ds	1
  3479  005E                     ??_setRF_DimmerLights:	
  3480  005E                     Flash_Memory_Initialization@i:	
  3481                           ; 0 bytes @ 0x3E
  3482                           
  3483                           
  3484                           ; 1 bytes @ 0x3E
  3485  005E                     	ds	1
  3486  005F                     ??_setDimmerLights_AdjRF:	
  3487                           
  3488                           ; 0 bytes @ 0x3F
  3489  005F                     	ds	1
  3490  0060                     setDimmerLights_AdjRF@lights:	
  3491  0060                     setRF_DimmerLights@status:	
  3492                           ; 1 bytes @ 0x40
  3493                           
  3494                           
  3495                           ; 1 bytes @ 0x40
  3496  0060                     	ds	1
  3497  0061                     ??_setRF_DimmerValue:	
  3498  0061                     setRF_DimmerLights@lights:	
  3499                           ; 0 bytes @ 0x41
  3500                           
  3501                           
  3502                           ; 1 bytes @ 0x41
  3503  0061                     	ds	1
  3504  0062                     ??_DlyOff_Main:	
  3505  0062                     ?_setDimmerLights_Adj:	
  3506                           ; 0 bytes @ 0x42
  3507                           
  3508  0062                     ??_setRFSW_Control:	
  3509                           ; 0 bytes @ 0x42
  3510                           
  3511  0062                     ??_Sw_DimmerOnFunc:	
  3512                           ; 0 bytes @ 0x42
  3513                           
  3514  0062                     ??_Sw_DimmerOffFunc:	
  3515                           ; 0 bytes @ 0x42
  3516                           
  3517  0062                     setDimmerLights_Adj@status:	
  3518                           ; 0 bytes @ 0x42
  3519                           
  3520                           
  3521                           ; 1 bytes @ 0x42
  3522  0062                     	ds	1
  3523  0063                     ??_setDimmerLights_Adj:	
  3524  0063                     setRFSW_Control@sw:	
  3525                           ; 0 bytes @ 0x43
  3526                           
  3527  0063                     setRF_DimmerValue@lights:	
  3528                           ; 1 bytes @ 0x43
  3529                           
  3530  0063                     _Sw_DimmerOnFunc$6119:	
  3531                           ; 1 bytes @ 0x43
  3532                           
  3533                           
  3534                           ; 1 bytes @ 0x43
  3535  0063                     	ds	1
  3536  0064                     ??_setRFSW_AdjControl:	
  3537  0064                     DlyOff_Main@sw:	
  3538                           ; 0 bytes @ 0x44
  3539                           
  3540  0064                     setDimmerLights_Adj@lights:	
  3541                           ; 1 bytes @ 0x44
  3542                           
  3543  0064                     _Sw_DimmerOnFunc$6120:	
  3544                           ; 1 bytes @ 0x44
  3545                           
  3546  0064                     Sw_DimmerOffFunc@sw:	
  3547                           ; 1 bytes @ 0x44
  3548                           
  3549                           
  3550                           ; 1 bytes @ 0x44
  3551  0064                     	ds	1
  3552  0065                     ??_setDimmerLights_Main:	
  3553  0065                     ??_DelayOff_Main:	
  3554                           ; 0 bytes @ 0x45
  3555                           
  3556  0065                     _Sw_DimmerOnFunc$6121:	
  3557                           ; 0 bytes @ 0x45
  3558                           
  3559                           
  3560                           ; 1 bytes @ 0x45
  3561  0065                     	ds	1
  3562  0066                     _setDimmerLights_Main$2410:	
  3563  0066                     setRFSW_AdjControl@sw:	
  3564                           ; 1 bytes @ 0x46
  3565                           
  3566  0066                     Sw_DimmerOnFunc@Idle:	
  3567                           ; 1 bytes @ 0x46
  3568                           
  3569                           
  3570                           ; 1 bytes @ 0x46
  3571  0066                     	ds	1
  3572  0067                     ??_setRF_Main:	
  3573  0067                     ??_getRxData:	
  3574                           ; 0 bytes @ 0x47
  3575                           
  3576  0067                     ??_setControl_Lights_Table:	
  3577                           ; 0 bytes @ 0x47
  3578                           
  3579  0067                     _setDimmerLights_Main$2418:	
  3580                           ; 0 bytes @ 0x47
  3581                           
  3582  0067                     Sw_DimmerOnFunc@sw:	
  3583                           ; 1 bytes @ 0x47
  3584                           
  3585                           
  3586                           ; 1 bytes @ 0x47
  3587  0067                     	ds	1
  3588  0068                     ??_setSw_Main:	
  3589  0068                     _setDimmerLights_Main$2419:	
  3590                           ; 0 bytes @ 0x48
  3591                           
  3592                           
  3593                           ; 1 bytes @ 0x48
  3594  0068                     	ds	1
  3595  0069                     setDimmerLights_Main@clear:	
  3596                           
  3597                           ; 1 bytes @ 0x49
  3598  0069                     	ds	1
  3599  006A                     setDimmerLights_Main@lights:	
  3600  006A                     setSw_Main@sw:	
  3601                           ; 1 bytes @ 0x4A
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0x4A
  3605  006A                     	ds	1
  3606  006B                     ??_Switch_Main:	
  3607  006B                     ??_DimmerLights_Main:	
  3608                           ; 0 bytes @ 0x4B
  3609                           
  3610  006B                     _setRF_Main$5151:	
  3611                           ; 0 bytes @ 0x4B
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0x4B
  3615  006B                     	ds	1
  3616  006C                     ??_RF_Main:	
  3617  006C                     ??_main:	
  3618                           ; 0 bytes @ 0x4C
  3619                           
  3620                           
  3621                           	psect	maintext
  3622  156D                     __pmaintext:	
  3623                           ; 0 bytes @ 0x4C
  3624 ;;
  3625 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3626 ;;
  3627 ;; *************** function _main *****************
  3628 ;; Defined at:
  3629 ;;		line 7 in file "../src/Main_B1.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  argc            2    0[BANK3 ] int 
  3632 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;		None
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  2    0[BANK3 ] int 
  3637 ;; Registers used:
  3638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : 17F/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3644 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3647 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3648 ;;Total ram usage:        4 bytes
  3649 ;; Hardware stack levels required when called:   15
  3650 ;; This function calls:
  3651 ;;		_Buzzer_Initialization
  3652 ;;		_Buzzer_Main
  3653 ;;		_CC2500_PowerOnInitial
  3654 ;;		_DelayOff_Initialization
  3655 ;;		_DelayOff_Main
  3656 ;;		_DimmerLights_Initialization
  3657 ;;		_DimmerLights_Main
  3658 ;;		_Flash_Memory_Initialization
  3659 ;;		_Flash_Memory_Main
  3660 ;;		_LED_Initialization
  3661 ;;		_LED_Main
  3662 ;;		_Mcu_Initialization
  3663 ;;		_RF_Initialization
  3664 ;;		_RF_Main
  3665 ;;		_Switch_Initialization
  3666 ;;		_Switch_Main
  3667 ;;		_WDT_Main
  3668 ;;		_myMain_Initialization
  3669 ;;		_my_MainTime
  3670 ;; This function is called by:
  3671 ;;		Startup code after reset
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           
  3676                           ;psect for function _main
  3677  156D                     _main:	
  3678                           
  3679                           ;Main_B1.c: 8: myMain_Initialization();
  3680                           
  3681                           ;incstack = 0
  3682                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3683  156D  319F  2702  3195   	fcall	_myMain_Initialization
  3684                           
  3685                           ;Main_B1.c: 9: Mcu_Initialization();
  3686  1570  319F  27A4  3195   	fcall	_Mcu_Initialization
  3687                           
  3688                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3689  1573  3185  2544  3195   	fcall	_Flash_Memory_Initialization
  3690                           
  3691                           ;Main_B1.c: 11: LED_Initialization();
  3692  1576  319F  2731  3195   	fcall	_LED_Initialization
  3693                           
  3694                           ;Main_B1.c: 12: Buzzer_Initialization();
  3695  1579  319D  25F8  3195   	fcall	_Buzzer_Initialization
  3696                           
  3697                           ;Main_B1.c: 14: ;;
  3698                           ;Main_B1.c: 15: ;;
  3699                           ;Main_B1.c: 16: ;;
  3700                           ;Main_B1.c: 17: ;;
  3701                           ;Main_B1.c: 18: DelayOff_Initialization();
  3702  157C  319E  2679  3195   	fcall	_DelayOff_Initialization
  3703                           
  3704                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3705  157F  3192  225C  3195   	fcall	_DimmerLights_Initialization
  3706                           
  3707                           ;Main_B1.c: 21: ;;
  3708                           ;Main_B1.c: 22: ;;
  3709                           ;Main_B1.c: 23: ;;
  3710                           ;Main_B1.c: 24: Switch_Initialization();
  3711  1582  319F  2793  3195   	fcall	_Switch_Initialization
  3712                           
  3713                           ;Main_B1.c: 25: RF_Initialization();
  3714  1585  319D  25FB  3195   	fcall	_RF_Initialization
  3715                           
  3716                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3717  1588  3190  2087  3195   	fcall	_CC2500_PowerOnInitial
  3718  158B                     l1614:	
  3719                           ;Main_B1.c: 34: ;;
  3720                           ;Main_B1.c: 38: ;;
  3721                           ;Main_B1.c: 42: ;;
  3722                           ;Main_B1.c: 46: ;;
  3723                           
  3724                           ;Main_B1.c: 27: ;;
  3725                           ;Main_B1.c: 30: while (1) {
  3726                           
  3727                           
  3728                           ;Main_B1.c: 61: }
  3729                           ;Main_B1.c: 64: if (myMain.T0_Timerout) {
  3730  158B  0021               	movlb	1	; select bank1
  3731  158C  1CA0               	btfss	_myMain^(0+128),1
  3732  158D  2D8B               	goto	l1614
  3733                           
  3734                           ;Main_B1.c: 65: myMain.T0_Timerout = 0;
  3735  158E  10A0               	bcf	_myMain^(0+128),1
  3736                           
  3737                           ;Main_B1.c: 66: my_MainTime();
  3738  158F  3195  25AE  3195   	fcall	_my_MainTime
  3739                           
  3740                           ;Main_B1.c: 67: WDT_Main();
  3741  1592  319F  27C8  3195   	fcall	_WDT_Main
  3742                           
  3743                           ;Main_B1.c: 68: ;;
  3744                           ;Main_B1.c: 69: ;;
  3745                           ;Main_B1.c: 70: if (myMain.PowerON) {
  3746  1595  0021               	movlb	1	; select bank1
  3747  1596  1C20               	btfss	_myMain^(0+128),0
  3748  1597  2D8B               	goto	l1614
  3749                           
  3750                           ;Main_B1.c: 71: Flash_Memory_Main();
  3751  1598  3191  21FD  3195   	fcall	_Flash_Memory_Main
  3752                           
  3753                           ;Main_B1.c: 73: LED_Main();
  3754  159B  319F  2741  3195   	fcall	_LED_Main
  3755                           
  3756                           ;Main_B1.c: 74: Buzzer_Main();
  3757  159E  3196  26BE  3195   	fcall	_Buzzer_Main
  3758                           
  3759                           ;Main_B1.c: 76: ;;
  3760                           ;Main_B1.c: 77: ;;
  3761                           ;Main_B1.c: 78: ;;
  3762                           ;Main_B1.c: 79: ;;
  3763                           ;Main_B1.c: 81: ;;
  3764                           ;Main_B1.c: 82: DimmerLights_Main();
  3765  15A1  319E  26E4  3195   	fcall	_DimmerLights_Main
  3766                           
  3767                           ;Main_B1.c: 83: Switch_Main();
  3768  15A4  3188  2000  3195   	fcall	_Switch_Main
  3769                           
  3770                           ;Main_B1.c: 84: ;;
  3771                           ;Main_B1.c: 85: ;;
  3772                           ;Main_B1.c: 87: RF_Main();
  3773  15A7  319D  25FE  3195   	fcall	_RF_Main
  3774                           
  3775                           ;Main_B1.c: 88: DelayOff_Main();
  3776  15AA  319E  2685  3195   	fcall	_DelayOff_Main
  3777                           
  3778                           ;Main_B1.c: 89: ;;
  3779  15AD  2D8B               	goto	l1614
  3780  15AE                     __end_of_main:	
  3781                           ;Main_B1.c: 90: }
  3782                           ;Main_B1.c: 91: }
  3783                           ;Main_B1.c: 109: }
  3784                           ;Main_B1.c: 110: return (0);
  3785                           ;	Return value of _main is never used
  3786                           
  3787                           
  3788                           	psect	text1
  3789  15AE                     __ptext1:	
  3790 ;; *************** function _my_MainTime *****************
  3791 ;; Defined at:
  3792 ;;		line 127 in file "../src/Main_B1.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;		None
  3797 ;; Return value:  Size  Location     Type
  3798 ;;		None               void
  3799 ;; Registers used:
  3800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3810 ;;Total ram usage:        0 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    7
  3813 ;; This function calls:
  3814 ;;		_setBuz
  3815 ;;		_setRF_Enable
  3816 ;;		_setSw_Enable
  3817 ;; This function is called by:
  3818 ;;		_main
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           
  3823                           ;psect for function _my_MainTime
  3824  15AE                     _my_MainTime:	
  3825                           
  3826                           ;Main_B1.c: 129: if (myMain.PowerON == 0) {
  3827                           
  3828                           ;incstack = 0
  3829                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3830  15AE  0021               	movlb	1	; select bank1
  3831  15AF  1820               	btfsc	_myMain^(0+128),0
  3832  15B0  2DD7               	goto	l9731
  3833                           
  3834                           ;Main_B1.c: 130: myMain.PowerCount++;
  3835  15B1  3001               	movlw	1
  3836  15B2  07A1               	addwf	(_myMain^(0+128)+1),f
  3837  15B3  3000               	movlw	0
  3838  15B4  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3839                           
  3840                           ;Main_B1.c: 131: if (myMain.PowerCount == 150)
  3841  15B5  3001               	movlw	1
  3842  15B6  3EA0               	addlw	_myMain& (0+255)
  3843  15B7  0086               	movwf	6
  3844  15B8  0187               	clrf	7
  3845  15B9  3F40               	moviw [0]fsr1
  3846  15BA  3A96               	xorlw	150
  3847  15BB  1D03               	skipz
  3848  15BC  2DBF               	goto	u10575
  3849  15BD  3F41               	moviw [1]fsr1
  3850  15BE  3A00               	xorlw	0
  3851  15BF                     u10575:	
  3852  15BF  1D03               	skipz
  3853  15C0  0008               	return
  3854                           
  3855                           ;Main_B1.c: 132: {
  3856                           ;Main_B1.c: 133: myMain.PowerCount = 0;
  3857  15C1  01A1               	clrf	(_myMain^(0+128)+1)
  3858  15C2  01A2               	clrf	((_myMain+1)^(0+128)+1)
  3859                           
  3860                           ;Main_B1.c: 134: myMain.PowerON = 1;
  3861  15C3  1420               	bsf	_myMain^(0+128),0
  3862                           
  3863                           ;Main_B1.c: 137: ;;
  3864                           ;Main_B1.c: 141: ;;
  3865                           ;Main_B1.c: 147: setBuz(3, 50);
  3866  15C4  3032               	movlw	50
  3867  15C5  0020               	movlb	0	; select bank0
  3868  15C6  00A9               	movwf	setBuz@time
  3869  15C7  3000               	movlw	0
  3870  15C8  00AA               	movwf	setBuz@time+1
  3871  15C9  3003               	movlw	3
  3872  15CA  3197  27A7  3195   	fcall	_setBuz
  3873                           
  3874                           ;Main_B1.c: 148: myMain.SelfTest = 1;
  3875  15CD  0021               	movlb	1	; select bank1
  3876  15CE  1720               	bsf	_myMain^(0+128),6
  3877                           
  3878                           ;Main_B1.c: 150: setSw_Enable(1);
  3879  15CF  3001               	movlw	1
  3880  15D0  3193  2356  3195   	fcall	_setSw_Enable
  3881                           
  3882                           ;Main_B1.c: 153: setRF_Enable(1);
  3883  15D3  3001               	movlw	1
  3884  15D4  319E  26B8         	fcall	_setRF_Enable
  3885                           
  3886                           ;Main_B1.c: 157: }
  3887                           ;Main_B1.c: 158: } else {
  3888  15D6  0008               	return
  3889  15D7                     l9731:	
  3890                           
  3891                           ;Main_B1.c: 166: myMain.Count1++;
  3892  15D7  3001               	movlw	1
  3893  15D8  0021               	movlb	1	; select bank1
  3894  15D9  07A5               	addwf	(_myMain^(0+128)+5),f
  3895  15DA  3000               	movlw	0
  3896  15DB  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  3897                           
  3898                           ;Main_B1.c: 167: if (myMain.Count1 == 100)
  3899  15DC  3005               	movlw	5
  3900  15DD  3EA0               	addlw	_myMain& (0+255)
  3901  15DE  0086               	movwf	6
  3902  15DF  0187               	clrf	7
  3903  15E0  3F40               	moviw [0]fsr1
  3904  15E1  3A64               	xorlw	100
  3905  15E2  1D03               	skipz
  3906  15E3  2DE6               	goto	u10585
  3907  15E4  3F41               	moviw [1]fsr1
  3908  15E5  3A00               	xorlw	0
  3909  15E6                     u10585:	
  3910  15E6  1D03               	skipz
  3911  15E7  0008               	return
  3912                           
  3913                           ;Main_B1.c: 168: {
  3914                           ;Main_B1.c: 169: myMain.Count1 = 0;
  3915  15E8  01A5               	clrf	(_myMain^(0+128)+5)
  3916  15E9  01A6               	clrf	((_myMain+1)^(0+128)+5)
  3917                           
  3918                           ;Main_B1.c: 182: if (myMain.Flag) {
  3919  15EA  1DA0               	btfss	_myMain^(0+128),3
  3920  15EB  2DEE               	goto	l1629
  3921                           
  3922                           ;Main_B1.c: 183: myMain.Flag = 0;
  3923  15EC  11A0               	bcf	_myMain^(0+128),3
  3924                           
  3925                           ;Main_B1.c: 192: } else {
  3926  15ED  0008               	return
  3927  15EE                     l1629:	
  3928                           
  3929                           ;Main_B1.c: 193: myMain.Flag = 1;
  3930  15EE  15A0               	bsf	_myMain^(0+128),3
  3931  15EF  0008               	return
  3932  15F0                     __end_of_my_MainTime:	
  3933                           
  3934                           	psect	text2
  3935  1356                     __ptext2:	
  3936 ;; *************** function _setSw_Enable *****************
  3937 ;; Defined at:
  3938 ;;		line 91 in file "../src/Switch_B1.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  command         1    wreg     unsigned char 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  command         1    2[BANK0 ] unsigned char 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;		None               void
  3945 ;; Registers used:
  3946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;Total ram usage:        1 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    6
  3959 ;; This function calls:
  3960 ;;		_SwPointSelect
  3961 ;; This function is called by:
  3962 ;;		_my_MainTime
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _setSw_Enable
  3968  1356                     _setSw_Enable:	
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3972                           ;setSw_Enable@command stored from wreg
  3973  1356  0020               	movlb	0	; select bank0
  3974  1357  00A2               	movwf	setSw_Enable@command
  3975                           
  3976                           ;Switch_B1.c: 94: SwPointSelect(1);
  3977  1358  3001               	movlw	1
  3978  1359  3191  2186  3193   	fcall	_SwPointSelect
  3979                           
  3980                           ;Switch_B1.c: 95: Sw->Enable = command;
  3981  135C  0020               	movlb	0	; select bank0
  3982  135D  086D               	movf	_Sw,w
  3983  135E  0086               	movwf	6
  3984  135F  3001               	movlw	1	; select bank2/3
  3985  1360  0087               	movwf	7
  3986  1361  0822               	movf	setSw_Enable@command,w
  3987  1362  1001               	bcf	1,0
  3988  1363  1D03               	skipz
  3989  1364  1401               	bsf	1,0
  3990                           
  3991                           ;Switch_B1.c: 99: SwPointSelect(2);
  3992  1365  3002               	movlw	2
  3993  1366  3191  2186  3193   	fcall	_SwPointSelect
  3994                           
  3995                           ;Switch_B1.c: 100: Sw->Enable = command;
  3996  1369  0020               	movlb	0	; select bank0
  3997  136A  086D               	movf	_Sw,w
  3998  136B  0086               	movwf	6
  3999  136C  3001               	movlw	1	; select bank2/3
  4000  136D  0087               	movwf	7
  4001  136E  0822               	movf	setSw_Enable@command,w
  4002  136F  1001               	bcf	1,0
  4003  1370  1D03               	skipz
  4004  1371  1401               	bsf	1,0
  4005                           
  4006                           ;Switch_B1.c: 104: SwPointSelect(3);
  4007  1372  3003               	movlw	3
  4008  1373  3191  2186         	fcall	_SwPointSelect
  4009                           
  4010                           ;Switch_B1.c: 105: Sw->Enable = command;
  4011  1375  0020               	movlb	0	; select bank0
  4012  1376  086D               	movf	_Sw,w
  4013  1377  0086               	movwf	6
  4014  1378  3001               	movlw	1	; select bank2/3
  4015  1379  0087               	movwf	7
  4016  137A  0822               	movf	setSw_Enable@command,w
  4017  137B  1001               	bcf	1,0
  4018  137C  1D03               	skipz
  4019  137D  1401               	bsf	1,0
  4020  137E  0008               	return
  4021  137F                     __end_of_setSw_Enable:	
  4022                           
  4023                           	psect	text3
  4024  1EB8                     __ptext3:	
  4025 ;; *************** function _setRF_Enable *****************
  4026 ;; Defined at:
  4027 ;;		line 232 in file "../src/RF_Control_B1.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  command         1    wreg     unsigned char 
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;  command         1    0[BANK0 ] unsigned char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;		None               void
  4034 ;; Registers used:
  4035 ;;		wreg, status,2
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4045 ;;Total ram usage:        1 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    5
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_my_MainTime
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _setRF_Enable
  4057  1EB8                     _setRF_Enable:	
  4058                           
  4059                           ;incstack = 0
  4060                           ; Regs used in _setRF_Enable: [wreg+status,2]
  4061                           ;setRF_Enable@command stored from wreg
  4062  1EB8  0020               	movlb	0	; select bank0
  4063  1EB9  00A0               	movwf	setRF_Enable@command
  4064                           
  4065                           ;RF_Control_B1.c: 233: RF1.Enable = command;
  4066  1EBA  0820               	movf	setRF_Enable@command,w
  4067  1EBB  0021               	movlb	1	; select bank1
  4068  1EBC  103E               	bcf	_RF1^(0+128),0
  4069  1EBD  1D03               	skipz
  4070  1EBE  143E               	bsf	_RF1^(0+128),0
  4071                           
  4072                           ;RF_Control_B1.c: 234: RF1.Learn = 0;
  4073  1EBF  133E               	bcf	_RF1^(0+128),6
  4074                           
  4075                           ;RF_Control_B1.c: 235: RF1.TransceiveGO = 0;
  4076  1EC0  113E               	bcf	_RF1^(0+128),2
  4077                           
  4078                           ;RF_Control_B1.c: 236: RF1.RxStatus = 0;
  4079  1EC1  11BE               	bcf	_RF1^(0+128),3
  4080                           
  4081                           ;RF_Control_B1.c: 237: RF1.ReceiveGO = 0;
  4082  1EC2  10BE               	bcf	_RF1^(0+128),1
  4083                           
  4084                           ;RF_Control_B1.c: 238: RF1.DebounceTime = 0;
  4085  1EC3  01C4               	clrf	(_RF1^(0+128)+6)
  4086                           
  4087                           ;RF_Control_B1.c: 239: RF1.Debounce = 0;
  4088  1EC4  12BE               	bcf	_RF1^(0+128),5
  4089  1EC5  0008               	return
  4090  1EC6                     __end_of_setRF_Enable:	
  4091                           
  4092                           	psect	text4
  4093  1F02                     __ptext4:	
  4094 ;; *************** function _myMain_Initialization *****************
  4095 ;; Defined at:
  4096 ;;		line 115 in file "../src/Main_B1.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;		None
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;		None
  4101 ;; Return value:  Size  Location     Type
  4102 ;;		None               void
  4103 ;; Registers used:
  4104 ;;		wreg, fsr1l, fsr1h
  4105 ;; Tracked objects:
  4106 ;;		On entry : 0/0
  4107 ;;		On exit  : 0/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4113 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4114 ;;Total ram usage:        1 bytes
  4115 ;; Hardware stack levels used:    1
  4116 ;; Hardware stack levels required when called:    5
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		_main
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           
  4125                           ;psect for function _myMain_Initialization
  4126  1F02                     _myMain_Initialization:	
  4127                           
  4128                           ;Main_B1.c: 117: product = &_product;
  4129                           
  4130                           ;incstack = 0
  4131                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4132  1F02  3020               	movlw	__product& (0+255)
  4133  1F03  0020               	movlb	0	; select bank0
  4134  1F04  00A0               	movwf	??_myMain_Initialization
  4135  1F05  0820               	movf	??_myMain_Initialization,w
  4136  1F06  00EC               	movwf	_product
  4137                           
  4138                           ;Main_B1.c: 118: product->Data[20] = 211;
  4139  1F07  30D3               	movlw	211
  4140  1F08  00A0               	movwf	??_myMain_Initialization
  4141  1F09  086C               	movf	_product,w
  4142  1F0A  3E14               	addlw	20
  4143  1F0B  0086               	movwf	6
  4144  1F0C  3002               	movlw	2	; select bank4/5
  4145  1F0D  0087               	movwf	7
  4146  1F0E  0820               	movf	??_myMain_Initialization,w
  4147  1F0F  0081               	movwf	1
  4148  1F10  0008               	return
  4149  1F11                     __end_of_myMain_Initialization:	
  4150                           
  4151                           	psect	text5
  4152  1FC8                     __ptext5:	
  4153 ;; *************** function _WDT_Main *****************
  4154 ;; Defined at:
  4155 ;;		line 908 in file "../src/MCU_B1.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;		None               void
  4162 ;; Registers used:
  4163 ;;		wreg, status,2, status,0, pclath, cstack
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4173 ;;Total ram usage:        1 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    6
  4176 ;; This function calls:
  4177 ;;		_WDT_Clearing
  4178 ;; This function is called by:
  4179 ;;		_main
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           
  4184                           ;psect for function _WDT_Main
  4185  1FC8                     _WDT_Main:	
  4186                           
  4187                           ;MCU_B1.c: 909: if (WDT.Enable == 1) {
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4191  1FC8  0021               	movlb	1	; select bank1
  4192  1FC9  1C49               	btfss	_WDT^(0+128),0
  4193  1FCA  0008               	return
  4194                           
  4195                           ;MCU_B1.c: 910: if (WDT.Count-- > 0) {
  4196  1FCB  3001               	movlw	1
  4197  1FCC  02CA               	subwf	(_WDT^(0+128)+1),f
  4198  1FCD  084A               	movf	(_WDT^(0+128)+1),w
  4199  1FCE  3AFF               	xorlw	255
  4200  1FCF  1903               	skipnz
  4201  1FD0  0008               	return
  4202                           
  4203                           ;MCU_B1.c: 911: WDT.Count = 10;
  4204  1FD1  300A               	movlw	10
  4205  1FD2  0020               	movlb	0	; select bank0
  4206  1FD3  00A0               	movwf	??_WDT_Main
  4207  1FD4  0820               	movf	??_WDT_Main,w
  4208  1FD5  0021               	movlb	1	; select bank1
  4209  1FD6  00CA               	movwf	(_WDT^(0+128)+1)
  4210                           
  4211                           ;MCU_B1.c: 912: WDT_Clearing();
  4212  1FD7  3180  2002         	fcall	_WDT_Clearing
  4213  1FD9  0008               	return
  4214  1FDA                     __end_of_WDT_Main:	
  4215                           
  4216                           	psect	text6
  4217  0002                     __ptext6:	
  4218 ;; *************** function _WDT_Clearing *****************
  4219 ;; Defined at:
  4220 ;;		line 918 in file "../src/MCU_B1.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;		None               void
  4227 ;; Registers used:
  4228 ;;		None
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;Total ram usage:        0 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    5
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_WDT_Main
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           
  4249                           ;psect for function _WDT_Clearing
  4250  0002                     _WDT_Clearing:	
  4251                           
  4252                           ;incstack = 0
  4253                           ; Regs used in _WDT_Clearing: []
  4254  0002  0064               	clrwdt	;# 
  4255  0003  0008               	return
  4256  0004                     __end_of_WDT_Clearing:	
  4257                           
  4258                           	psect	text7
  4259  0800                     __ptext7:	
  4260 ;; *************** function _Switch_Main *****************
  4261 ;; Defined at:
  4262 ;;		line 67 in file "../src/Switch_B1.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;		None
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;		None
  4267 ;; Return value:  Size  Location     Type
  4268 ;;		None               void
  4269 ;; Registers used:
  4270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4280 ;;Total ram usage:        0 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; Hardware stack levels required when called:   11
  4283 ;; This function calls:
  4284 ;;		_setSw_Main
  4285 ;; This function is called by:
  4286 ;;		_main
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           
  4291                           ;psect for function _Switch_Main
  4292  0800                     _Switch_Main:	
  4293                           
  4294                           ;Switch_B1.c: 69: setSw_Main(1);
  4295                           
  4296                           ;incstack = 0
  4297                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4298  0800  3001               	movlw	1
  4299  0801  3182  220F  3188   	fcall	_setSw_Main
  4300                           
  4301                           ;Switch_B1.c: 73: setSw_Main(2);
  4302  0804  3002               	movlw	2
  4303  0805  3182  220F  3188   	fcall	_setSw_Main
  4304                           
  4305                           ;Switch_B1.c: 77: setSw_Main(3);
  4306  0808  3003               	movlw	3
  4307  0809  3182  220F         	fcall	_setSw_Main
  4308  080B  0008               	return
  4309  080C                     __end_of_Switch_Main:	
  4310                           
  4311                           	psect	text8
  4312  020F                     __ptext8:	
  4313 ;; *************** function _setSw_Main *****************
  4314 ;; Defined at:
  4315 ;;		line 117 in file "../src/Switch_B1.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  sw              1    wreg     unsigned char 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  sw              1   74[BANK0 ] unsigned char 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;		None               void
  4322 ;; Registers used:
  4323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;Total ram usage:        3 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:   10
  4336 ;; This function calls:
  4337 ;;		_SwPointSelect
  4338 ;;		_Sw_DimmerAdjFunc
  4339 ;;		_Sw_DimmerOffFunc
  4340 ;;		_Sw_DimmerOnFunc
  4341 ;;		_setBuz
  4342 ;;		_setRF_Learn
  4343 ;; This function is called by:
  4344 ;;		_Switch_Main
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _setSw_Main
  4350  020F                     _setSw_Main:	
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4354                           ;setSw_Main@sw stored from wreg
  4355  020F  0020               	movlb	0	; select bank0
  4356  0210  00EA               	movwf	setSw_Main@sw
  4357                           
  4358                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4359  0211  086A               	movf	setSw_Main@sw,w
  4360  0212  3191  2186  3182   	fcall	_SwPointSelect
  4361                           
  4362                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4363  0215  0020               	movlb	0	; select bank0
  4364  0216  086D               	movf	_Sw,w
  4365  0217  0086               	movwf	6
  4366  0218  3001               	movlw	1	; select bank2/3
  4367  0219  0087               	movwf	7
  4368  021A  1C01               	btfss	1,0
  4369  021B  0008               	return
  4370                           
  4371                           ;Switch_B1.c: 121: if (sw == 1) {
  4372  021C  086A               	movf	setSw_Main@sw,w
  4373  021D  3A01               	xorlw	1
  4374  021E  1D03               	skipz
  4375  021F  2A28               	goto	l9487
  4376                           
  4377                           ;Switch_B1.c: 122: Sw->Touch = (RA0 == 1) ? 1 : 0;
  4378  0220  086D               	movf	_Sw,w
  4379  0221  0086               	movwf	6
  4380  0222  3001               	movlw	1	; select bank2/3
  4381  0223  0087               	movwf	7
  4382  0224  1081               	bcf	1,1
  4383  0225  180C               	btfsc	12,0	;volatile
  4384  0226  1481               	bsf	1,1
  4385                           
  4386                           ;Switch_B1.c: 123: } else if (sw == 2) {
  4387  0227  2A41               	goto	l2691
  4388  0228                     l9487:	
  4389  0228  0020               	movlb	0	; select bank0
  4390  0229  086A               	movf	setSw_Main@sw,w
  4391  022A  3A02               	xorlw	2
  4392  022B  1D03               	skipz
  4393  022C  2A35               	goto	l9491
  4394                           
  4395                           ;Switch_B1.c: 124: Sw->Touch = (RA6 == 1) ? 1 : 0;
  4396  022D  086D               	movf	_Sw,w
  4397  022E  0086               	movwf	6
  4398  022F  3001               	movlw	1	; select bank2/3
  4399  0230  0087               	movwf	7
  4400  0231  1081               	bcf	1,1
  4401  0232  1B0C               	btfsc	12,6	;volatile
  4402  0233  1481               	bsf	1,1
  4403                           
  4404                           ;Switch_B1.c: 125: } else if (sw == 3) {
  4405  0234  2A41               	goto	l2691
  4406  0235                     l9491:	
  4407  0235  0020               	movlb	0	; select bank0
  4408  0236  086A               	movf	setSw_Main@sw,w
  4409  0237  3A03               	xorlw	3
  4410  0238  1D03               	skipz
  4411  0239  2A41               	goto	l2691
  4412                           
  4413                           ;Switch_B1.c: 126: Sw->Touch = (RA4 == 1) ? 1 : 0;
  4414  023A  086D               	movf	_Sw,w
  4415  023B  0086               	movwf	6
  4416  023C  3001               	movlw	1	; select bank2/3
  4417  023D  0087               	movwf	7
  4418  023E  1081               	bcf	1,1
  4419  023F  1A0C               	btfsc	12,4	;volatile
  4420  0240  1481               	bsf	1,1
  4421  0241                     l2691:	
  4422                           
  4423                           ;Switch_B1.c: 127: }
  4424                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  4425  0241  0020               	movlb	0	; select bank0
  4426  0242  086D               	movf	_Sw,w
  4427  0243  0086               	movwf	6
  4428  0244  3001               	movlw	1	; select bank2/3
  4429  0245  0087               	movwf	7
  4430  0246  1C81               	btfss	1,1
  4431  0247  2B0C               	goto	l9541
  4432                           
  4433                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  4434  0248  086D               	movf	_Sw,w
  4435  0249  0086               	movwf	6
  4436  024A  3001               	movlw	1	; select bank2/3
  4437  024B  0087               	movwf	7
  4438  024C  1901               	btfsc	1,2
  4439  024D  2A6F               	goto	l9507
  4440                           
  4441                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  4442  024E  3001               	movlw	1
  4443  024F  00E8               	movwf	??_setSw_Main
  4444  0250  086D               	movf	_Sw,w
  4445  0251  3E02               	addlw	2
  4446  0252  0086               	movwf	6
  4447  0253  3001               	movlw	1	; select bank2/3
  4448  0254  0087               	movwf	7
  4449  0255  0868               	movf	??_setSw_Main,w
  4450  0256  0781               	addwf	1,f
  4451                           
  4452                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  4453  0257  086D               	movf	_Sw,w
  4454  0258  3E02               	addlw	2
  4455  0259  0086               	movwf	6
  4456  025A  3001               	movlw	1	; select bank2/3
  4457  025B  0087               	movwf	7
  4458  025C  3005               	movlw	5
  4459  025D  0201               	subwf	1,w
  4460  025E  1C03               	skipc
  4461  025F  0008               	return
  4462                           
  4463                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  4464  0260  086D               	movf	_Sw,w
  4465  0261  3E02               	addlw	2
  4466  0262  0086               	movwf	6
  4467  0263  3001               	movlw	1	; select bank2/3
  4468  0264  0087               	movwf	7
  4469  0265  0181               	clrf	1
  4470                           
  4471                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  4472  0266  086D               	movf	_Sw,w
  4473  0267  0086               	movwf	6
  4474  0268  3001               	movlw	1	; select bank2/3
  4475  0269  0087               	movwf	7
  4476  026A  1501               	bsf	1,2
  4477                           
  4478                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  4479  026B  086A               	movf	setSw_Main@sw,w
  4480  026C  318C  2481         	fcall	_Sw_DimmerOnFunc
  4481                           
  4482                           ;Switch_B1.c: 173: }
  4483                           ;Switch_B1.c: 174: } else {
  4484  026E  0008               	return
  4485  026F                     l9507:	
  4486                           
  4487                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  4488  026F  0020               	movlb	0	; select bank0
  4489  0270  086D               	movf	_Sw,w
  4490  0271  0086               	movwf	6
  4491  0272  3001               	movlw	1	; select bank2/3
  4492  0273  0087               	movwf	7
  4493  0274  1981               	btfsc	1,3
  4494  0275  2A9C               	goto	l9517
  4495                           
  4496                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  4497  0276  086D               	movf	_Sw,w
  4498  0277  3E03               	addlw	3
  4499  0278  0086               	movwf	6
  4500  0279  3001               	movlw	1	; select bank2/3
  4501  027A  0087               	movwf	7
  4502  027B  3001               	movlw	1
  4503  027C  0781               	addwf	1,f
  4504  027D  3141               	addfsr 1,1
  4505  027E  1803               	skipnc
  4506  027F  0A81               	incf	1,f
  4507                           
  4508                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  4509  0280  086D               	movf	_Sw,w
  4510  0281  3E03               	addlw	3
  4511  0282  0086               	movwf	6
  4512  0283  3001               	movlw	1	; select bank2/3
  4513  0284  0087               	movwf	7
  4514  0285  3F40               	moviw [0]fsr1
  4515  0286  00E8               	movwf	??_setSw_Main
  4516  0287  3F41               	moviw [1]fsr1
  4517  0288  00E9               	movwf	??_setSw_Main+1
  4518  0289  3000               	movlw	0
  4519  028A  0269               	subwf	??_setSw_Main+1,w
  4520  028B  3096               	movlw	150
  4521  028C  1903               	skipnz
  4522  028D  0268               	subwf	??_setSw_Main,w
  4523  028E  1C03               	skipc
  4524  028F  0008               	return
  4525                           
  4526                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  4527  0290  086D               	movf	_Sw,w
  4528  0291  3E03               	addlw	3
  4529  0292  0086               	movwf	6
  4530  0293  3001               	movlw	1	; select bank2/3
  4531  0294  0087               	movwf	7
  4532  0295  3000               	movlw	0
  4533  0296  3FC0               	movwi [0]fsr1
  4534  0297  3FC1               	movwi [1]fsr1
  4535                           
  4536                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  4537  0298  086A               	movf	setSw_Main@sw,w
  4538  0299  3188  20C6         	fcall	_Sw_DimmerAdjFunc
  4539                           
  4540                           ;Switch_B1.c: 184: }
  4541                           ;Switch_B1.c: 185: } else {
  4542  029B  0008               	return
  4543  029C                     l9517:	
  4544                           
  4545                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  4546  029C  0020               	movlb	0	; select bank0
  4547  029D  086D               	movf	_Sw,w
  4548  029E  0086               	movwf	6
  4549  029F  3001               	movlw	1	; select bank2/3
  4550  02A0  0087               	movwf	7
  4551  02A1  1A01               	btfsc	1,4
  4552  02A2  2ADA               	goto	l9531
  4553                           
  4554                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  4555  02A3  086D               	movf	_Sw,w
  4556  02A4  3E05               	addlw	5
  4557  02A5  0086               	movwf	6
  4558  02A6  3001               	movlw	1	; select bank2/3
  4559  02A7  0087               	movwf	7
  4560  02A8  3001               	movlw	1
  4561  02A9  0781               	addwf	1,f
  4562  02AA  3141               	addfsr 1,1
  4563  02AB  1803               	skipnc
  4564  02AC  0A81               	incf	1,f
  4565                           
  4566                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  4567  02AD  086D               	movf	_Sw,w
  4568  02AE  3E05               	addlw	5
  4569  02AF  0086               	movwf	6
  4570  02B0  3001               	movlw	1	; select bank2/3
  4571  02B1  0087               	movwf	7
  4572  02B2  3F40               	moviw [0]fsr1
  4573  02B3  00E8               	movwf	??_setSw_Main
  4574  02B4  3F41               	moviw [1]fsr1
  4575  02B5  00E9               	movwf	??_setSw_Main+1
  4576  02B6  3000               	movlw	0
  4577  02B7  0269               	subwf	??_setSw_Main+1,w
  4578  02B8  3096               	movlw	150
  4579  02B9  1903               	skipnz
  4580  02BA  0268               	subwf	??_setSw_Main,w
  4581  02BB  1C03               	skipc
  4582  02BC  0008               	return
  4583                           
  4584                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  4585  02BD  086D               	movf	_Sw,w
  4586  02BE  3E05               	addlw	5
  4587  02BF  0086               	movwf	6
  4588  02C0  3001               	movlw	1	; select bank2/3
  4589  02C1  0087               	movwf	7
  4590  02C2  3000               	movlw	0
  4591  02C3  3FC0               	movwi [0]fsr1
  4592  02C4  3FC1               	movwi [1]fsr1
  4593                           
  4594                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  4595  02C5  086D               	movf	_Sw,w
  4596  02C6  0086               	movwf	6
  4597  02C7  3001               	movlw	1	; select bank2/3
  4598  02C8  0087               	movwf	7
  4599  02C9  1601               	bsf	1,4
  4600                           
  4601                           ;Switch_B1.c: 193: setRF_Learn(1);
  4602  02CA  3001               	movlw	1
  4603  02CB  319E  263B  3182   	fcall	_setRF_Learn
  4604                           
  4605                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  4606  02CE  0021               	movlb	1	; select bank1
  4607  02CF  1FA0               	btfss	_myMain^(0+128),7
  4608  02D0  0008               	return
  4609                           
  4610                           ;Switch_B1.c: 196: setBuz(2, 100);
  4611  02D1  3064               	movlw	100
  4612  02D2  0020               	movlb	0	; select bank0
  4613  02D3  00A9               	movwf	setBuz@time
  4614  02D4  3000               	movlw	0
  4615  02D5  00AA               	movwf	setBuz@time+1
  4616  02D6  3002               	movlw	2
  4617  02D7  3197  27A7         	fcall	_setBuz
  4618                           
  4619                           ;Switch_B1.c: 197: }
  4620                           ;Switch_B1.c: 199: }
  4621                           ;Switch_B1.c: 200: } else {
  4622  02D9  0008               	return
  4623  02DA                     l9531:	
  4624                           
  4625                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  4626  02DA  0020               	movlb	0	; select bank0
  4627  02DB  086D               	movf	_Sw,w
  4628  02DC  0086               	movwf	6
  4629  02DD  3001               	movlw	1	; select bank2/3
  4630  02DE  0087               	movwf	7
  4631  02DF  1A81               	btfsc	1,5
  4632  02E0  0008               	return
  4633                           
  4634                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  4635  02E1  086D               	movf	_Sw,w
  4636  02E2  3E07               	addlw	7
  4637  02E3  0086               	movwf	6
  4638  02E4  3001               	movlw	1	; select bank2/3
  4639  02E5  0087               	movwf	7
  4640  02E6  3001               	movlw	1
  4641  02E7  0781               	addwf	1,f
  4642  02E8  3141               	addfsr 1,1
  4643  02E9  1803               	skipnc
  4644  02EA  0A81               	incf	1,f
  4645                           
  4646                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  4647  02EB  086D               	movf	_Sw,w
  4648  02EC  3E07               	addlw	7
  4649  02ED  0086               	movwf	6
  4650  02EE  3001               	movlw	1	; select bank2/3
  4651  02EF  0087               	movwf	7
  4652  02F0  3F40               	moviw [0]fsr1
  4653  02F1  00E8               	movwf	??_setSw_Main
  4654  02F2  3F41               	moviw [1]fsr1
  4655  02F3  00E9               	movwf	??_setSw_Main+1
  4656  02F4  3001               	movlw	1
  4657  02F5  0269               	subwf	??_setSw_Main+1,w
  4658  02F6  302C               	movlw	44
  4659  02F7  1903               	skipnz
  4660  02F8  0268               	subwf	??_setSw_Main,w
  4661  02F9  1C03               	skipc
  4662  02FA  0008               	return
  4663                           
  4664                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4665  02FB  086D               	movf	_Sw,w
  4666  02FC  3E07               	addlw	7
  4667  02FD  0086               	movwf	6
  4668  02FE  3001               	movlw	1	; select bank2/3
  4669  02FF  0087               	movwf	7
  4670  0300  3000               	movlw	0
  4671  0301  3FC0               	movwi [0]fsr1
  4672  0302  3FC1               	movwi [1]fsr1
  4673                           
  4674                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  4675  0303  086D               	movf	_Sw,w
  4676  0304  0086               	movwf	6
  4677  0305  3001               	movlw	1	; select bank2/3
  4678  0306  0087               	movwf	7
  4679  0307  1681               	bsf	1,5
  4680                           
  4681                           ;Switch_B1.c: 208: setRF_Learn(0);
  4682  0308  3000               	movlw	0
  4683  0309  319E  263B         	fcall	_setRF_Learn
  4684                           
  4685                           ;Switch_B1.c: 211: }
  4686                           ;Switch_B1.c: 212: }
  4687                           ;Switch_B1.c: 213: }
  4688                           ;Switch_B1.c: 214: }
  4689                           ;Switch_B1.c: 215: }
  4690                           ;Switch_B1.c: 216: } else {
  4691  030B  0008               	return
  4692  030C                     l9541:	
  4693                           
  4694                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  4695  030C  0020               	movlb	0	; select bank0
  4696  030D  086D               	movf	_Sw,w
  4697  030E  0086               	movwf	6
  4698  030F  3001               	movlw	1	; select bank2/3
  4699  0310  0087               	movwf	7
  4700  0311  1D01               	btfss	1,2
  4701  0312  0008               	return
  4702                           
  4703                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  4704  0313  3001               	movlw	1
  4705  0314  00E8               	movwf	??_setSw_Main
  4706  0315  086D               	movf	_Sw,w
  4707  0316  3E02               	addlw	2
  4708  0317  0086               	movwf	6
  4709  0318  3001               	movlw	1	; select bank2/3
  4710  0319  0087               	movwf	7
  4711  031A  0868               	movf	??_setSw_Main,w
  4712  031B  0781               	addwf	1,f
  4713                           
  4714                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  4715  031C  086D               	movf	_Sw,w
  4716  031D  3E02               	addlw	2
  4717  031E  0086               	movwf	6
  4718  031F  3001               	movlw	1	; select bank2/3
  4719  0320  0087               	movwf	7
  4720  0321  3005               	movlw	5
  4721  0322  0201               	subwf	1,w
  4722  0323  1C03               	skipc
  4723  0324  0008               	return
  4724                           
  4725                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  4726  0325  086D               	movf	_Sw,w
  4727  0326  3E02               	addlw	2
  4728  0327  0086               	movwf	6
  4729  0328  3001               	movlw	1	; select bank2/3
  4730  0329  0087               	movwf	7
  4731  032A  0181               	clrf	1
  4732                           
  4733                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  4734  032B  086D               	movf	_Sw,w
  4735  032C  0086               	movwf	6
  4736  032D  3001               	movlw	1	; select bank2/3
  4737  032E  0087               	movwf	7
  4738  032F  1101               	bcf	1,2
  4739                           
  4740                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  4741  0330  086D               	movf	_Sw,w
  4742  0331  3E03               	addlw	3
  4743  0332  0086               	movwf	6
  4744  0333  3001               	movlw	1	; select bank2/3
  4745  0334  0087               	movwf	7
  4746  0335  3000               	movlw	0
  4747  0336  3FC0               	movwi [0]fsr1
  4748  0337  3FC1               	movwi [1]fsr1
  4749                           
  4750                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  4751  0338  086D               	movf	_Sw,w
  4752  0339  0086               	movwf	6
  4753  033A  3001               	movlw	1	; select bank2/3
  4754  033B  0087               	movwf	7
  4755  033C  1181               	bcf	1,3
  4756                           
  4757                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  4758  033D  086D               	movf	_Sw,w
  4759  033E  3E05               	addlw	5
  4760  033F  0086               	movwf	6
  4761  0340  3001               	movlw	1	; select bank2/3
  4762  0341  0087               	movwf	7
  4763  0342  3000               	movlw	0
  4764  0343  3FC0               	movwi [0]fsr1
  4765  0344  3FC1               	movwi [1]fsr1
  4766                           
  4767                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  4768  0345  086D               	movf	_Sw,w
  4769  0346  0086               	movwf	6
  4770  0347  3001               	movlw	1	; select bank2/3
  4771  0348  0087               	movwf	7
  4772  0349  1201               	bcf	1,4
  4773                           
  4774                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  4775  034A  086D               	movf	_Sw,w
  4776  034B  3E07               	addlw	7
  4777  034C  0086               	movwf	6
  4778  034D  3001               	movlw	1	; select bank2/3
  4779  034E  0087               	movwf	7
  4780  034F  3000               	movlw	0
  4781  0350  3FC0               	movwi [0]fsr1
  4782  0351  3FC1               	movwi [1]fsr1
  4783                           
  4784                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  4785  0352  086D               	movf	_Sw,w
  4786  0353  0086               	movwf	6
  4787  0354  3001               	movlw	1	; select bank2/3
  4788  0355  0087               	movwf	7
  4789  0356  1281               	bcf	1,5
  4790                           
  4791                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  4792  0357  086A               	movf	setSw_Main@sw,w
  4793  0358  318B  232B  3182   	fcall	_Sw_DimmerOffFunc
  4794                           
  4795                           ;Switch_B1.c: 232: setRF_Learn(0);
  4796  035B  3000               	movlw	0
  4797  035C  319E  263B         	fcall	_setRF_Learn
  4798  035E  0008               	return
  4799  035F                     __end_of_setSw_Main:	
  4800                           
  4801                           	psect	text9
  4802  1E3B                     __ptext9:	
  4803 ;; *************** function _setRF_Learn *****************
  4804 ;; Defined at:
  4805 ;;		line 23 in file "../src/RF_Control_B1.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  command         1    wreg     unsigned char 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  command         1    0[BANK0 ] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;		None               void
  4812 ;; Registers used:
  4813 ;;		wreg
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;Total ram usage:        1 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    5
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_setSw_Main
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function _setRF_Learn
  4835  1E3B                     _setRF_Learn:	
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in _setRF_Learn: [wreg]
  4839                           ;setRF_Learn@command stored from wreg
  4840  1E3B  0020               	movlb	0	; select bank0
  4841  1E3C  00A0               	movwf	setRF_Learn@command
  4842                           
  4843                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  4844  1E3D  0820               	movf	setRF_Learn@command,w
  4845  1E3E  0021               	movlb	1	; select bank1
  4846  1E3F  133E               	bcf	_RF1^(0+128),6
  4847  1E40  1D03               	skipz
  4848  1E41  173E               	bsf	_RF1^(0+128),6
  4849  1E42  0008               	return
  4850  1E43                     __end_of_setRF_Learn:	
  4851                           
  4852                           	psect	text10
  4853  0C81                     __ptext10:	
  4854 ;; *************** function _Sw_DimmerOnFunc *****************
  4855 ;; Defined at:
  4856 ;;		line 241 in file "../src/Switch_B1.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  sw              1    wreg     unsigned char 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;  sw              1   71[BANK0 ] unsigned char 
  4861 ;;  Idle            1   70[BANK0 ] unsigned char 
  4862 ;; Return value:  Size  Location     Type
  4863 ;;		None               void
  4864 ;; Registers used:
  4865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;Total ram usage:        6 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    9
  4878 ;; This function calls:
  4879 ;;		_setBuz
  4880 ;;		_setDimmerLights_Switch
  4881 ;;		_setDimmerLights_Trigger
  4882 ;;		_setRFSW_Status
  4883 ;;		_setRF_DimmerLights
  4884 ;;		_setTxData
  4885 ;; This function is called by:
  4886 ;;		_setSw_Main
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           
  4891                           ;psect for function _Sw_DimmerOnFunc
  4892  0C81                     _Sw_DimmerOnFunc:	
  4893                           
  4894                           ;incstack = 0
  4895                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4896                           ;Sw_DimmerOnFunc@sw stored from wreg
  4897  0C81  0020               	movlb	0	; select bank0
  4898  0C82  00E7               	movwf	Sw_DimmerOnFunc@sw
  4899                           
  4900                           ;Switch_B1.c: 242: char Idle = 1;
  4901  0C83  01E6               	clrf	Sw_DimmerOnFunc@Idle
  4902  0C84  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  4903                           
  4904                           ;Switch_B1.c: 246: if (sw == 1) {
  4905  0C85  0867               	movf	Sw_DimmerOnFunc@sw,w
  4906  0C86  3A01               	xorlw	1
  4907  0C87  1D03               	skipz
  4908  0C88  2C94               	goto	l8903
  4909                           
  4910                           ;Switch_B1.c: 247: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4911  0C89  01E3               	clrf	_Sw_DimmerOnFunc$6119
  4912  0C8A  0022               	movlb	2	; select bank2
  4913  0C8B  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  4914  0C8C  19E3               	btfsc	(_DimmerLights3^(0+256)+8),3
  4915  0C8D  2C91               	goto	l8901
  4916  0C8E  0020               	movlb	0	; select bank0
  4917  0C8F  01E3               	clrf	_Sw_DimmerOnFunc$6119
  4918  0C90  0AE3               	incf	_Sw_DimmerOnFunc$6119,f
  4919  0C91                     l8901:	
  4920  0C91  0020               	movlb	0	; select bank0
  4921  0C92  0863               	movf	_Sw_DimmerOnFunc$6119,w
  4922  0C93  2CB1               	goto	L2
  4923  0C94                     l8903:	
  4924                           ;Switch_B1.c: 248: } else if (sw == 2) {
  4925                           
  4926  0C94  0867               	movf	Sw_DimmerOnFunc@sw,w
  4927  0C95  3A02               	xorlw	2
  4928  0C96  1D03               	skipz
  4929  0C97  2CA3               	goto	l8915
  4930                           
  4931                           ;Switch_B1.c: 249: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4932  0C98  01E4               	clrf	_Sw_DimmerOnFunc$6120
  4933  0C99  0022               	movlb	2	; select bank2
  4934  0C9A  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  4935  0C9B  19E3               	btfsc	(_DimmerLights3^(0+256)+8),3
  4936  0C9C  2CA0               	goto	l8913
  4937  0C9D  0020               	movlb	0	; select bank0
  4938  0C9E  01E4               	clrf	_Sw_DimmerOnFunc$6120
  4939  0C9F  0AE4               	incf	_Sw_DimmerOnFunc$6120,f
  4940  0CA0                     l8913:	
  4941  0CA0  0020               	movlb	0	; select bank0
  4942  0CA1  0864               	movf	_Sw_DimmerOnFunc$6120,w
  4943  0CA2  2CB1               	goto	L2
  4944  0CA3                     l8915:	
  4945                           ;Switch_B1.c: 250: } else if (sw == 3) {
  4946                           
  4947  0CA3  0867               	movf	Sw_DimmerOnFunc@sw,w
  4948  0CA4  3A03               	xorlw	3
  4949  0CA5  1D03               	skipz
  4950  0CA6  2CB4               	goto	l2717
  4951                           
  4952                           ;Switch_B1.c: 251: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  4953  0CA7  01E5               	clrf	_Sw_DimmerOnFunc$6121
  4954  0CA8  0022               	movlb	2	; select bank2
  4955  0CA9  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  4956  0CAA  19D4               	btfsc	(_DimmerLights2^(0+256)+8),3
  4957  0CAB  2CAF               	goto	l8925
  4958  0CAC  0020               	movlb	0	; select bank0
  4959  0CAD  01E5               	clrf	_Sw_DimmerOnFunc$6121
  4960  0CAE  0AE5               	incf	_Sw_DimmerOnFunc$6121,f
  4961  0CAF                     l8925:	
  4962  0CAF  0020               	movlb	0	; select bank0
  4963  0CB0  0865               	movf	_Sw_DimmerOnFunc$6121,w
  4964  0CB1                     L2:	
  4965  0CB1  00E2               	movwf	??_Sw_DimmerOnFunc
  4966  0CB2  0862               	movf	??_Sw_DimmerOnFunc,w
  4967  0CB3  00E6               	movwf	Sw_DimmerOnFunc@Idle
  4968  0CB4                     l2717:	
  4969                           
  4970                           ;Switch_B1.c: 252: }
  4971                           ;Switch_B1.c: 263: if (Idle == 1) {
  4972  0CB4  0866               	movf	Sw_DimmerOnFunc@Idle,w
  4973  0CB5  3A01               	xorlw	1
  4974  0CB6  1D03               	skipz
  4975  0CB7  0008               	return
  4976                           
  4977                           ;Switch_B1.c: 264: Sw->Flag = 1;
  4978  0CB8  086D               	movf	_Sw,w
  4979  0CB9  0086               	movwf	6
  4980  0CBA  3001               	movlw	1	; select bank2/3
  4981  0CBB  0087               	movwf	7
  4982  0CBC  1781               	bsf	1,7
  4983                           
  4984                           ;Switch_B1.c: 265: setBuz(1, 100);
  4985  0CBD  3064               	movlw	100
  4986  0CBE  00A9               	movwf	setBuz@time
  4987  0CBF  3000               	movlw	0
  4988  0CC0  00AA               	movwf	setBuz@time+1
  4989  0CC1  3001               	movlw	1
  4990  0CC2  3197  27A7  318C   	fcall	_setBuz
  4991                           
  4992                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  4993  0CC5  0020               	movlb	0	; select bank0
  4994  0CC6  086D               	movf	_Sw,w
  4995  0CC7  0086               	movwf	6
  4996  0CC8  3001               	movlw	1	; select bank2/3
  4997  0CC9  0087               	movwf	7
  4998  0CCA  1B01               	btfsc	1,6
  4999  0CCB  2CF5               	goto	l8945
  5000                           
  5001                           ;Switch_B1.c: 267: Sw->Status = 1;
  5002  0CCC  086D               	movf	_Sw,w
  5003  0CCD  0086               	movwf	6
  5004  0CCE  3001               	movlw	1	; select bank2/3
  5005  0CCF  0087               	movwf	7
  5006  0CD0  1701               	bsf	1,6
  5007                           
  5008                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  5009  0CD1  01A2               	clrf	setRFSW_Status@command
  5010  0CD2  0AA2               	incf	setRFSW_Status@command,f
  5011  0CD3  0867               	movf	Sw_DimmerOnFunc@sw,w
  5012  0CD4  319E  26C6  318C   	fcall	_setRFSW_Status
  5013                           
  5014                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  5015  0CD7  0020               	movlb	0	; select bank0
  5016  0CD8  01A2               	clrf	setDimmerLights_Trigger@command
  5017  0CD9  0AA2               	incf	setDimmerLights_Trigger@command,f
  5018  0CDA  0867               	movf	Sw_DimmerOnFunc@sw,w
  5019  0CDB  319F  2721  318C   	fcall	_setDimmerLights_Trigger
  5020                           
  5021                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5022  0CDE  0020               	movlb	0	; select bank0
  5023  0CDF  01A2               	clrf	setDimmerLights_Switch@command
  5024  0CE0  0AA2               	incf	setDimmerLights_Switch@command,f
  5025  0CE1  0867               	movf	Sw_DimmerOnFunc@sw,w
  5026  0CE2  319F  2711  318C   	fcall	_setDimmerLights_Switch
  5027                           
  5028                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5029  0CE5  0020               	movlb	0	; select bank0
  5030  0CE6  086D               	movf	_Sw,w
  5031  0CE7  0086               	movwf	6
  5032  0CE8  3001               	movlw	1	; select bank2/3
  5033  0CE9  0087               	movwf	7
  5034  0CEA  3000               	movlw	0
  5035  0CEB  1B01               	btfsc	1,6
  5036  0CEC  3001               	movlw	1
  5037  0CED  00DD               	movwf	setRF_DimmerLights@on
  5038  0CEE  0867               	movf	Sw_DimmerOnFunc@sw,w
  5039  0CEF  318A  22BF  318C   	fcall	_setRF_DimmerLights
  5040                           
  5041                           ;Switch_B1.c: 274: setTxData();
  5042  0CF2  3186  260B         	fcall	_setTxData
  5043                           
  5044                           ;Switch_B1.c: 276: } else {
  5045  0CF4  0008               	return
  5046  0CF5                     l8945:	
  5047                           
  5048                           ;Switch_B1.c: 277: Sw->Status = 0;
  5049  0CF5  0020               	movlb	0	; select bank0
  5050  0CF6  086D               	movf	_Sw,w
  5051  0CF7  0086               	movwf	6
  5052  0CF8  3001               	movlw	1	; select bank2/3
  5053  0CF9  0087               	movwf	7
  5054  0CFA  1301               	bcf	1,6
  5055                           
  5056                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5057  0CFB  086D               	movf	_Sw,w
  5058  0CFC  0086               	movwf	6
  5059  0CFD  3001               	movlw	1	; select bank2/3
  5060  0CFE  0087               	movwf	7
  5061  0CFF  3000               	movlw	0
  5062  0D00  1B01               	btfsc	1,6
  5063  0D01  3001               	movlw	1
  5064  0D02  00A2               	movwf	setRFSW_Status@command
  5065  0D03  0867               	movf	Sw_DimmerOnFunc@sw,w
  5066  0D04  319E  26C6         	fcall	_setRFSW_Status
  5067  0D06  0008               	return
  5068  0D07                     __end_of_Sw_DimmerOnFunc:	
  5069                           
  5070                           	psect	text11
  5071  0B2B                     __ptext11:	
  5072 ;; *************** function _Sw_DimmerOffFunc *****************
  5073 ;; Defined at:
  5074 ;;		line 284 in file "../src/Switch_B1.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  sw              1    wreg     unsigned char 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  sw              1   68[BANK0 ] unsigned char 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;		None               void
  5081 ;; Registers used:
  5082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5092 ;;Total ram usage:        3 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    9
  5095 ;; This function calls:
  5096 ;;		_setDelayOff_GO
  5097 ;;		_setDimmerLights_AdjGo
  5098 ;;		_setDimmerLights_Switch
  5099 ;;		_setDimmerLights_Trigger
  5100 ;;		_setDimmerLights_TriggerAdj
  5101 ;;		_setRF_DimmerLights
  5102 ;;		_setTxData
  5103 ;; This function is called by:
  5104 ;;		_setSw_Main
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           
  5109                           ;psect for function _Sw_DimmerOffFunc
  5110  0B2B                     _Sw_DimmerOffFunc:	
  5111                           
  5112                           ;incstack = 0
  5113                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5114                           ;Sw_DimmerOffFunc@sw stored from wreg
  5115  0B2B  0020               	movlb	0	; select bank0
  5116  0B2C  00E4               	movwf	Sw_DimmerOffFunc@sw
  5117                           
  5118                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5119  0B2D  086D               	movf	_Sw,w
  5120  0B2E  0086               	movwf	6
  5121  0B2F  3001               	movlw	1	; select bank2/3
  5122  0B30  0087               	movwf	7
  5123  0B31  1F81               	btfss	1,7
  5124  0B32  0008               	return
  5125                           
  5126                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5127  0B33  086D               	movf	_Sw,w
  5128  0B34  0086               	movwf	6
  5129  0B35  3001               	movlw	1	; select bank2/3
  5130  0B36  0087               	movwf	7
  5131  0B37  1381               	bcf	1,7
  5132                           
  5133                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5134  0B38  086D               	movf	_Sw,w
  5135  0B39  0086               	movwf	6
  5136  0B3A  3001               	movlw	1	; select bank2/3
  5137  0B3B  0087               	movwf	7
  5138  0B3C  1F01               	btfss	1,6
  5139  0B3D  2B76               	goto	l9015
  5140                           
  5141                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5142  0B3E  0A6D               	incf	_Sw,w
  5143  0B3F  0086               	movwf	6
  5144  0B40  3001               	movlw	1	; select bank2/3
  5145  0B41  0087               	movwf	7
  5146  0B42  1C01               	btfss	1,0
  5147  0B43  0008               	return
  5148                           
  5149                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5150  0B44  0A6D               	incf	_Sw,w
  5151  0B45  0086               	movwf	6
  5152  0B46  3001               	movlw	1	; select bank2/3
  5153  0B47  0087               	movwf	7
  5154  0B48  1001               	bcf	1,0
  5155                           
  5156                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5157  0B49  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5158  0B4A  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5159  0B4B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5160  0B4C  319F  2761  318B   	fcall	_setDimmerLights_TriggerAdj
  5161                           
  5162                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5163  0B4F  0020               	movlb	0	; select bank0
  5164  0B50  01A2               	clrf	setDimmerLights_AdjGo@command
  5165  0B51  0864               	movf	Sw_DimmerOffFunc@sw,w
  5166  0B52  319F  2751  318B   	fcall	_setDimmerLights_AdjGo
  5167                           
  5168                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5169  0B55  0020               	movlb	0	; select bank0
  5170  0B56  0864               	movf	Sw_DimmerOffFunc@sw,w
  5171  0B57  3E1A               	addlw	26
  5172  0B58  076C               	addwf	_product,w
  5173  0B59  00E2               	movwf	??_Sw_DimmerOffFunc
  5174  0B5A  0862               	movf	??_Sw_DimmerOffFunc,w
  5175  0B5B  0086               	movwf	6
  5176  0B5C  3002               	movlw	2	; select bank4/5
  5177  0B5D  0087               	movwf	7
  5178  0B5E  0801               	movf	1,w
  5179  0B5F  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5180  0B60  086C               	movf	_product,w
  5181  0B61  3E11               	addlw	17
  5182  0B62  0086               	movwf	6
  5183  0B63  3002               	movlw	2	; select bank4/5
  5184  0B64  0087               	movwf	7
  5185  0B65  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5186  0B66  0081               	movwf	1
  5187                           
  5188                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5189  0B67  086D               	movf	_Sw,w
  5190  0B68  0086               	movwf	6
  5191  0B69  3001               	movlw	1	; select bank2/3
  5192  0B6A  0087               	movwf	7
  5193  0B6B  3000               	movlw	0
  5194  0B6C  1B01               	btfsc	1,6
  5195  0B6D  3001               	movlw	1
  5196  0B6E  00DD               	movwf	setRF_DimmerLights@on
  5197  0B6F  0864               	movf	Sw_DimmerOffFunc@sw,w
  5198  0B70  318A  22BF  318B   	fcall	_setRF_DimmerLights
  5199                           
  5200                           ;Switch_B1.c: 295: setTxData();
  5201  0B73  3186  260B         	fcall	_setTxData
  5202                           
  5203                           ;Switch_B1.c: 297: }
  5204                           ;Switch_B1.c: 298: } else {
  5205  0B75  0008               	return
  5206  0B76                     l9015:	
  5207                           
  5208                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5209  0B76  0020               	movlb	0	; select bank0
  5210  0B77  01A2               	clrf	setDimmerLights_Trigger@command
  5211  0B78  0AA2               	incf	setDimmerLights_Trigger@command,f
  5212  0B79  0864               	movf	Sw_DimmerOffFunc@sw,w
  5213  0B7A  319F  2721  318B   	fcall	_setDimmerLights_Trigger
  5214                           
  5215                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  5216  0B7D  0020               	movlb	0	; select bank0
  5217  0B7E  01A2               	clrf	setDimmerLights_Switch@command
  5218  0B7F  0864               	movf	Sw_DimmerOffFunc@sw,w
  5219  0B80  319F  2711  318B   	fcall	_setDimmerLights_Switch
  5220                           
  5221                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  5222  0B83  0020               	movlb	0	; select bank0
  5223  0B84  01AA               	clrf	setDelayOff_GO@command
  5224  0B85  01AB               	clrf	setDelayOff_GO@value
  5225  0B86  0864               	movf	Sw_DimmerOffFunc@sw,w
  5226  0B87  3188  2067  318B   	fcall	_setDelayOff_GO
  5227                           
  5228                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  5229  0B8A  0020               	movlb	0	; select bank0
  5230  0B8B  086D               	movf	_Sw,w
  5231  0B8C  0086               	movwf	6
  5232  0B8D  3001               	movlw	1	; select bank2/3
  5233  0B8E  0087               	movwf	7
  5234  0B8F  3000               	movlw	0
  5235  0B90  1B01               	btfsc	1,6
  5236  0B91  3001               	movlw	1
  5237  0B92  00DD               	movwf	setRF_DimmerLights@on
  5238  0B93  0864               	movf	Sw_DimmerOffFunc@sw,w
  5239  0B94  318A  22BF  318B   	fcall	_setRF_DimmerLights
  5240                           
  5241                           ;Switch_B1.c: 304: setTxData();
  5242  0B97  3186  260B         	fcall	_setTxData
  5243  0B99  0008               	return
  5244  0B9A                     __end_of_Sw_DimmerOffFunc:	
  5245                           
  5246                           	psect	text12
  5247  08C6                     __ptext12:	
  5248 ;; *************** function _Sw_DimmerAdjFunc *****************
  5249 ;; Defined at:
  5250 ;;		line 311 in file "../src/Switch_B1.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;  sw              1    wreg     unsigned char 
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;  sw              1    9[BANK0 ] unsigned char 
  5255 ;;  Idle            1    8[BANK0 ] unsigned char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;		None               void
  5258 ;; Registers used:
  5259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;Total ram usage:        6 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    7
  5272 ;; This function calls:
  5273 ;;		_setDimmerLights_AdjGo
  5274 ;;		_setDimmerLights_TriggerAdj
  5275 ;;		_setRFSW_Status
  5276 ;; This function is called by:
  5277 ;;		_setSw_Main
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           
  5282                           ;psect for function _Sw_DimmerAdjFunc
  5283  08C6                     _Sw_DimmerAdjFunc:	
  5284                           
  5285                           ;incstack = 0
  5286                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5287                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5288  08C6  0020               	movlb	0	; select bank0
  5289  08C7  00A9               	movwf	Sw_DimmerAdjFunc@sw
  5290                           
  5291                           ;Switch_B1.c: 312: char Idle = 1;
  5292  08C8  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  5293  08C9  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  5294                           
  5295                           ;Switch_B1.c: 315: if (sw == 1) {
  5296  08CA  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5297  08CB  3A01               	xorlw	1
  5298  08CC  1D03               	skipz
  5299  08CD  28D9               	goto	l8963
  5300                           
  5301                           ;Switch_B1.c: 316: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5302  08CE  01A5               	clrf	_Sw_DimmerAdjFunc$6131
  5303  08CF  0022               	movlb	2	; select bank2
  5304  08D0  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  5305  08D1  19E3               	btfsc	(_DimmerLights3^(0+256)+8),3
  5306  08D2  28D6               	goto	l8961
  5307  08D3  0020               	movlb	0	; select bank0
  5308  08D4  01A5               	clrf	_Sw_DimmerAdjFunc$6131
  5309  08D5  0AA5               	incf	_Sw_DimmerAdjFunc$6131,f
  5310  08D6                     l8961:	
  5311  08D6  0020               	movlb	0	; select bank0
  5312  08D7  0825               	movf	_Sw_DimmerAdjFunc$6131,w
  5313  08D8  28F6               	goto	L4
  5314  08D9                     l8963:	
  5315                           ;Switch_B1.c: 317: } else if (sw == 2) {
  5316                           
  5317  08D9  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5318  08DA  3A02               	xorlw	2
  5319  08DB  1D03               	skipz
  5320  08DC  28E8               	goto	l8975
  5321                           
  5322                           ;Switch_B1.c: 318: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5323  08DD  01A6               	clrf	_Sw_DimmerAdjFunc$6132
  5324  08DE  0022               	movlb	2	; select bank2
  5325  08DF  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  5326  08E0  19E3               	btfsc	(_DimmerLights3^(0+256)+8),3
  5327  08E1  28E5               	goto	l8973
  5328  08E2  0020               	movlb	0	; select bank0
  5329  08E3  01A6               	clrf	_Sw_DimmerAdjFunc$6132
  5330  08E4  0AA6               	incf	_Sw_DimmerAdjFunc$6132,f
  5331  08E5                     l8973:	
  5332  08E5  0020               	movlb	0	; select bank0
  5333  08E6  0826               	movf	_Sw_DimmerAdjFunc$6132,w
  5334  08E7  28F6               	goto	L4
  5335  08E8                     l8975:	
  5336                           ;Switch_B1.c: 319: } else if (sw == 3) {
  5337                           
  5338  08E8  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5339  08E9  3A03               	xorlw	3
  5340  08EA  1D03               	skipz
  5341  08EB  28F9               	goto	l2741
  5342                           
  5343                           ;Switch_B1.c: 320: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5344  08EC  01A7               	clrf	_Sw_DimmerAdjFunc$6133
  5345  08ED  0022               	movlb	2	; select bank2
  5346  08EE  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  5347  08EF  19D4               	btfsc	(_DimmerLights2^(0+256)+8),3
  5348  08F0  28F4               	goto	l8985
  5349  08F1  0020               	movlb	0	; select bank0
  5350  08F2  01A7               	clrf	_Sw_DimmerAdjFunc$6133
  5351  08F3  0AA7               	incf	_Sw_DimmerAdjFunc$6133,f
  5352  08F4                     l8985:	
  5353  08F4  0020               	movlb	0	; select bank0
  5354  08F5  0827               	movf	_Sw_DimmerAdjFunc$6133,w
  5355  08F6                     L4:	
  5356  08F6  00A4               	movwf	??_Sw_DimmerAdjFunc
  5357  08F7  0824               	movf	??_Sw_DimmerAdjFunc,w
  5358  08F8  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  5359  08F9                     l2741:	
  5360                           
  5361                           ;Switch_B1.c: 321: }
  5362                           ;Switch_B1.c: 332: if (Idle == 1) {
  5363  08F9  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  5364  08FA  3A01               	xorlw	1
  5365  08FB  1D03               	skipz
  5366  08FC  0008               	return
  5367                           
  5368                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  5369  08FD  086D               	movf	_Sw,w
  5370  08FE  0086               	movwf	6
  5371  08FF  3001               	movlw	1	; select bank2/3
  5372  0900  0087               	movwf	7
  5373  0901  1F81               	btfss	1,7
  5374  0902  0008               	return
  5375                           
  5376                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  5377  0903  086D               	movf	_Sw,w
  5378  0904  0086               	movwf	6
  5379  0905  3001               	movlw	1	; select bank2/3
  5380  0906  0087               	movwf	7
  5381  0907  1581               	bsf	1,3
  5382                           
  5383                           ;Switch_B1.c: 335: Sw->Adj = 1;
  5384  0908  0A6D               	incf	_Sw,w
  5385  0909  0086               	movwf	6
  5386  090A  3001               	movlw	1	; select bank2/3
  5387  090B  0087               	movwf	7
  5388  090C  1401               	bsf	1,0
  5389                           
  5390                           ;Switch_B1.c: 336: Sw->Status = 1;
  5391  090D  086D               	movf	_Sw,w
  5392  090E  0086               	movwf	6
  5393  090F  3001               	movlw	1	; select bank2/3
  5394  0910  0087               	movwf	7
  5395  0911  1701               	bsf	1,6
  5396                           
  5397                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  5398  0912  01A2               	clrf	setRFSW_Status@command
  5399  0913  0AA2               	incf	setRFSW_Status@command,f
  5400  0914  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5401  0915  319E  26C6  3188   	fcall	_setRFSW_Status
  5402                           
  5403                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  5404  0918  0020               	movlb	0	; select bank0
  5405  0919  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5406  091A  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5407  091B  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5408  091C  319F  2761  3188   	fcall	_setDimmerLights_TriggerAdj
  5409                           
  5410                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  5411  091F  0020               	movlb	0	; select bank0
  5412  0920  01A2               	clrf	setDimmerLights_AdjGo@command
  5413  0921  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5414  0922  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5415  0923  319F  2751         	fcall	_setDimmerLights_AdjGo
  5416  0925  0008               	return
  5417  0926                     __end_of_Sw_DimmerAdjFunc:	
  5418                           
  5419                           	psect	text13
  5420  1F61                     __ptext13:	
  5421 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5422 ;; Defined at:
  5423 ;;		line 722 in file "../src/Dimmer_B1.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;  lights          1    wreg     unsigned char 
  5426 ;;  command         1    2[BANK0 ] unsigned char 
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  lights          1    3[BANK0 ] unsigned char 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;		None               void
  5431 ;; Registers used:
  5432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5438 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;Total ram usage:        2 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    6
  5445 ;; This function calls:
  5446 ;;		_DimmerLightsPointSelect
  5447 ;; This function is called by:
  5448 ;;		_Sw_DimmerOffFunc
  5449 ;;		_Sw_DimmerAdjFunc
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _setDimmerLights_TriggerAdj
  5455  1F61                     _setDimmerLights_TriggerAdj:	
  5456                           
  5457                           ;incstack = 0
  5458                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5459                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5460  1F61  0020               	movlb	0	; select bank0
  5461  1F62  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5462                           
  5463                           ;Dimmer_B1.c: 724: DimmerLightsPointSelect(lights);
  5464  1F63  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5465  1F64  3191  2131         	fcall	_DimmerLightsPointSelect
  5466                           
  5467                           ;Dimmer_B1.c: 725: DimmerLights->TriggerAdj = command;
  5468  1F66  0874               	movf	_DimmerLights,w
  5469  1F67  3E08               	addlw	8
  5470  1F68  0086               	movwf	6
  5471  1F69  3001               	movlw	1	; select bank2/3
  5472  1F6A  0087               	movwf	7
  5473  1F6B  0020               	movlb	0	; select bank0
  5474  1F6C  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5475  1F6D  1201               	bcf	1,4
  5476  1F6E  1D03               	skipz
  5477  1F6F  1601               	bsf	1,4
  5478  1F70  0008               	return
  5479  1F71                     __end_of_setDimmerLights_TriggerAdj:	
  5480                           
  5481                           	psect	text14
  5482  1F51                     __ptext14:	
  5483 ;; *************** function _setDimmerLights_AdjGo *****************
  5484 ;; Defined at:
  5485 ;;		line 710 in file "../src/Dimmer_B1.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  lights          1    wreg     unsigned char 
  5488 ;;  command         1    2[BANK0 ] unsigned char 
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  lights          1    3[BANK0 ] unsigned char 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;		None               void
  5493 ;; Registers used:
  5494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5500 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;Total ram usage:        2 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    6
  5507 ;; This function calls:
  5508 ;;		_DimmerLightsPointSelect
  5509 ;; This function is called by:
  5510 ;;		_Sw_DimmerOffFunc
  5511 ;;		_Sw_DimmerAdjFunc
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           
  5516                           ;psect for function _setDimmerLights_AdjGo
  5517  1F51                     _setDimmerLights_AdjGo:	
  5518                           
  5519                           ;incstack = 0
  5520                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5521                           ;setDimmerLights_AdjGo@lights stored from wreg
  5522  1F51  0020               	movlb	0	; select bank0
  5523  1F52  00A3               	movwf	setDimmerLights_AdjGo@lights
  5524                           
  5525                           ;Dimmer_B1.c: 712: DimmerLightsPointSelect(lights);
  5526  1F53  0823               	movf	setDimmerLights_AdjGo@lights,w
  5527  1F54  3191  2131         	fcall	_DimmerLightsPointSelect
  5528                           
  5529                           ;Dimmer_B1.c: 713: DimmerLights->AdjGo = command;
  5530  1F56  0874               	movf	_DimmerLights,w
  5531  1F57  3E08               	addlw	8
  5532  1F58  0086               	movwf	6
  5533  1F59  3001               	movlw	1	; select bank2/3
  5534  1F5A  0087               	movwf	7
  5535  1F5B  0020               	movlb	0	; select bank0
  5536  1F5C  0822               	movf	setDimmerLights_AdjGo@command,w
  5537  1F5D  1181               	bcf	1,3
  5538  1F5E  1D03               	skipz
  5539  1F5F  1581               	bsf	1,3
  5540  1F60  0008               	return
  5541  1F61                     __end_of_setDimmerLights_AdjGo:	
  5542                           
  5543                           	psect	text15
  5544  1F93                     __ptext15:	
  5545 ;; *************** function _Switch_Initialization *****************
  5546 ;; Defined at:
  5547 ;;		line 41 in file "../src/Switch_B1.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;		None
  5552 ;; Return value:  Size  Location     Type
  5553 ;;		None               void
  5554 ;; Registers used:
  5555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;Total ram usage:        0 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    8
  5568 ;; This function calls:
  5569 ;;		_TouchPower
  5570 ;;		_setSw_Initialization
  5571 ;; This function is called by:
  5572 ;;		_main
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           
  5577                           ;psect for function _Switch_Initialization
  5578  1F93                     _Switch_Initialization:	
  5579                           
  5580                           ;Switch_B1.c: 42: TouchPower();
  5581                           
  5582                           ;incstack = 0
  5583                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5584  1F93  319E  26F3  319F   	fcall	_TouchPower
  5585                           
  5586                           ;Switch_B1.c: 44: WPUB1 = 0;
  5587  1F96  0024               	movlb	4	; select bank4
  5588  1F97  108D               	bcf	13,1	;volatile
  5589                           
  5590                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5591  1F98  3001               	movlw	1
  5592  1F99  319E  2633  319F   	fcall	_setSw_Initialization
  5593                           
  5594                           ;Switch_B1.c: 57: setSw_Initialization(2);
  5595  1F9C  3002               	movlw	2
  5596  1F9D  319E  2633  319F   	fcall	_setSw_Initialization
  5597                           
  5598                           ;Switch_B1.c: 61: setSw_Initialization(3);
  5599  1FA0  3003               	movlw	3
  5600  1FA1  319E  2633         	fcall	_setSw_Initialization
  5601  1FA3  0008               	return
  5602  1FA4                     __end_of_Switch_Initialization:	
  5603                           
  5604                           	psect	text16
  5605  1E33                     __ptext16:	
  5606 ;; *************** function _setSw_Initialization *****************
  5607 ;; Defined at:
  5608 ;;		line 83 in file "../src/Switch_B1.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  sw              1    wreg     unsigned char 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;  sw              1    3[BANK0 ] unsigned char 
  5613 ;; Return value:  Size  Location     Type
  5614 ;;		None               void
  5615 ;; Registers used:
  5616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5625 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;Total ram usage:        1 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    7
  5629 ;; This function calls:
  5630 ;;		_setLED
  5631 ;; This function is called by:
  5632 ;;		_Switch_Initialization
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           
  5637                           ;psect for function _setSw_Initialization
  5638  1E33                     _setSw_Initialization:	
  5639                           
  5640                           ;incstack = 0
  5641                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5642                           ;setSw_Initialization@sw stored from wreg
  5643  1E33  0020               	movlb	0	; select bank0
  5644  1E34  00A3               	movwf	setSw_Initialization@sw
  5645                           
  5646                           ;Switch_B1.c: 84: setLED(sw, 1);
  5647  1E35  01A1               	clrf	setLED@command
  5648  1E36  0AA1               	incf	setLED@command,f
  5649  1E37  0823               	movf	setSw_Initialization@sw,w
  5650  1E38  318B  239A         	fcall	_setLED
  5651  1E3A  0008               	return
  5652  1E3B                     __end_of_setSw_Initialization:	
  5653                           
  5654                           	psect	text17
  5655  1EF3                     __ptext17:	
  5656 ;; *************** function _TouchPower *****************
  5657 ;; Defined at:
  5658 ;;		line 10 in file "../src/Switch_B1.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;		None
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;		None
  5663 ;; Return value:  Size  Location     Type
  5664 ;;		None               void
  5665 ;; Registers used:
  5666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;Total ram usage:        0 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    6
  5679 ;; This function calls:
  5680 ;;		_Timeout_Counter
  5681 ;;		_set_TimeoutCleared
  5682 ;; This function is called by:
  5683 ;;		_Switch_Initialization
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           
  5688                           ;psect for function _TouchPower
  5689  1EF3                     _TouchPower:	
  5690                           
  5691                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5695  1EF3  2EF9               	goto	l9471
  5696  1EF4                     l2659:	
  5697                           
  5698                           ;Switch_B1.c: 12: RC5 = 1;
  5699  1EF4  0020               	movlb	0	; select bank0
  5700  1EF5  168E               	bsf	14,5	;volatile
  5701                           
  5702                           ;Switch_B1.c: 13: Timeout_Counter();
  5703  1EF6  3190  2072  319E   	fcall	_Timeout_Counter
  5704  1EF9                     l9471:	
  5705  1EF9  0020               	movlb	0	; select bank0
  5706  1EFA  1A8E               	btfsc	14,5	;volatile
  5707  1EFB  2EFF               	goto	l9475
  5708  1EFC  0021               	movlb	1	; select bank1
  5709  1EFD  1D2F               	btfss	(_myMain^(0+128)+15),2
  5710  1EFE  2EF4               	goto	l2659
  5711  1EFF                     l9475:	
  5712                           
  5713                           ;Switch_B1.c: 14: }
  5714                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5715  1EFF  319E  260D         	fcall	_set_TimeoutCleared
  5716  1F01  0008               	return
  5717  1F02                     __end_of_TouchPower:	
  5718                           
  5719                           	psect	text18
  5720  1DFE                     __ptext18:	
  5721 ;; *************** function _RF_Main *****************
  5722 ;; Defined at:
  5723 ;;		line 16 in file "../src/RF_Control_B1.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;		None
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;		None
  5728 ;; Return value:  Size  Location     Type
  5729 ;;		None               void
  5730 ;; Registers used:
  5731 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;Total ram usage:        0 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:   14
  5744 ;; This function calls:
  5745 ;;		_setRF_Main
  5746 ;; This function is called by:
  5747 ;;		_main
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           
  5752                           ;psect for function _RF_Main
  5753  1DFE                     _RF_Main:	
  5754                           
  5755                           ;RF_Control_B1.c: 18: setRF_Main();
  5756                           
  5757                           ;incstack = 0
  5758                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5759  1DFE  3184  2455         	fcall	_setRF_Main
  5760  1E00  0008               	return
  5761  1E01                     __end_of_RF_Main:	
  5762                           
  5763                           	psect	text19
  5764  0455                     __ptext19:	
  5765 ;; *************** function _setRF_Main *****************
  5766 ;; Defined at:
  5767 ;;		line 52 in file "../src/RF_Control_B1.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;		None
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  Receive_OK      1    0        unsigned char 
  5772 ;;  loop_f          1    0        unsigned char 
  5773 ;; Return value:  Size  Location     Type
  5774 ;;		None               void
  5775 ;; Registers used:
  5776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5784 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5786 ;;Total ram usage:        5 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:   13
  5789 ;; This function calls:
  5790 ;;		_CC2500_RxData
  5791 ;;		_CC2500_TxData
  5792 ;;		_CC2500_WriteCommand
  5793 ;;		___wmul
  5794 ;;		_getBuz_GO
  5795 ;;		_getRxData
  5796 ;; This function is called by:
  5797 ;;		_RF_Main
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function _setRF_Main
  5803  0455                     _setRF_Main:	
  5804                           
  5805                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  5806                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5807                           
  5808                           ;incstack = 0
  5809                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5810  0455  0021               	movlb	1	; select bank1
  5811  0456  1C3E               	btfss	_RF1^(0+128),0
  5812  0457  0008               	return
  5813                           
  5814                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  5815  0458  319F  2782  3184   	fcall	_getBuz_GO
  5816  045B  0020               	movlb	0	; select bank0
  5817  045C  0821               	movf	?_getBuz_GO+1,w
  5818  045D  0420               	iorwf	?_getBuz_GO,w
  5819  045E  1D03               	skipz
  5820  045F  0008               	return
  5821                           
  5822                           ;RF_Control_B1.c: 60: RF1.Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  5823  0460  01EB               	clrf	_setRF_Main$5151
  5824  0461  0AEB               	incf	_setRF_Main$5151,f
  5825  0462  1C0C               	btfss	12,0	;volatile
  5826  0463  1B0C               	btfsc	12,6	;volatile
  5827  0464  2C67               	goto	l9361
  5828  0465  1E0C               	btfss	12,4	;volatile
  5829  0466  01EB               	clrf	_setRF_Main$5151
  5830  0467                     l9361:	
  5831  0467  086B               	movf	_setRF_Main$5151,w
  5832  0468  0021               	movlb	1	; select bank1
  5833  0469  13BE               	bcf	_RF1^(0+128),7
  5834  046A  1D03               	skipz
  5835  046B  17BE               	bsf	_RF1^(0+128),7
  5836                           
  5837                           ;RF_Control_B1.c: 70: if (RF1.Key == 1 && RF1.Learn == 0) {
  5838  046C  1BBE               	btfsc	_RF1^(0+128),7
  5839  046D  1B3E               	btfsc	_RF1^(0+128),6
  5840  046E  2C73               	goto	l2208
  5841                           
  5842                           ;RF_Control_B1.c: 71: RF1.Count = 0;
  5843  046F  01C0               	clrf	(_RF1^(0+128)+2)
  5844                           
  5845                           ;RF_Control_B1.c: 72: RF1.Run = 1;
  5846  0470  14BF               	bsf	(_RF1^(0+128)+1),1
  5847                           
  5848                           ;RF_Control_B1.c: 73: RF1.RxStatus = 0;
  5849  0471  11BE               	bcf	_RF1^(0+128),3
  5850                           
  5851                           ;RF_Control_B1.c: 75: } else {
  5852  0472  0008               	return
  5853  0473                     l2208:	
  5854                           
  5855                           ;RF_Control_B1.c: 76: if (RF1.Run == 1 && RF1.Learn == 0) {
  5856  0473  18BF               	btfsc	(_RF1^(0+128)+1),1
  5857  0474  1B3E               	btfsc	_RF1^(0+128),6
  5858  0475  2C83               	goto	l9383
  5859                           
  5860                           ;RF_Control_B1.c: 77: RF1.Count++;
  5861  0476  3001               	movlw	1
  5862  0477  0020               	movlb	0	; select bank0
  5863  0478  00E7               	movwf	??_setRF_Main
  5864  0479  0867               	movf	??_setRF_Main,w
  5865  047A  0021               	movlb	1	; select bank1
  5866  047B  07C0               	addwf	(_RF1^(0+128)+2),f
  5867                           
  5868                           ;RF_Control_B1.c: 78: if (RF1.Count == RF1.RunTime) {
  5869  047C  0840               	movf	(_RF1^(0+128)+2),w
  5870  047D  0643               	xorwf	(_RF1^(0+128)+5),w
  5871  047E  1D03               	skipz
  5872  047F  2CDE               	goto	l9437
  5873                           
  5874                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  5875  0480  01C0               	clrf	(_RF1^(0+128)+2)
  5876                           
  5877                           ;RF_Control_B1.c: 80: RF1.Run = 0;
  5878  0481  10BF               	bcf	(_RF1^(0+128)+1),1
  5879                           
  5880                           ;RF_Control_B1.c: 81: }
  5881                           ;RF_Control_B1.c: 82: } else {
  5882  0482  2CDE               	goto	l9437
  5883  0483                     l9383:	
  5884                           
  5885                           ;RF_Control_B1.c: 83: RF1.Count = 0;
  5886  0483  01C0               	clrf	(_RF1^(0+128)+2)
  5887                           
  5888                           ;RF_Control_B1.c: 84: RF1.Run = 0;
  5889  0484  10BF               	bcf	(_RF1^(0+128)+1),1
  5890                           
  5891                           ;RF_Control_B1.c: 86: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5892  0485  193E               	btfsc	_RF1^(0+128),2
  5893  0486  1B3E               	btfsc	_RF1^(0+128),6
  5894  0487  2C8F               	goto	l2213
  5895                           
  5896                           ;RF_Control_B1.c: 87: RF1.TransceiveGO = 0;
  5897  0488  113E               	bcf	_RF1^(0+128),2
  5898                           
  5899                           ;RF_Control_B1.c: 88: RF1.RxStatus = 0;
  5900  0489  11BE               	bcf	_RF1^(0+128),3
  5901                           
  5902                           ;RF_Control_B1.c: 89: RF1.ReceiveGO = 0;
  5903  048A  10BE               	bcf	_RF1^(0+128),1
  5904                           
  5905                           ;RF_Control_B1.c: 94: CC2500_TxData();
  5906  048B  3189  2187  3184   	fcall	_CC2500_TxData
  5907                           
  5908                           ;RF_Control_B1.c: 96: } else {
  5909  048E  2CDE               	goto	l9437
  5910  048F                     l2213:	
  5911                           
  5912                           ;RF_Control_B1.c: 98: if (RF1.RxStatus == 1) {
  5913  048F  1DBE               	btfss	_RF1^(0+128),3
  5914  0490  2CCD               	goto	l2215
  5915                           
  5916                           ;RF_Control_B1.c: 99: CC2500_RxData();
  5917  0491  318C  240B  3184   	fcall	_CC2500_RxData
  5918                           
  5919                           ;RF_Control_B1.c: 100: if (RF1.ReceiveGO == 1) {
  5920  0494  0021               	movlb	1	; select bank1
  5921  0495  1CBE               	btfss	_RF1^(0+128),1
  5922  0496  2CDE               	goto	l9437
  5923                           
  5924                           ;RF_Control_B1.c: 101: RF1.ReceiveGO = 0;
  5925  0497  10BE               	bcf	_RF1^(0+128),1
  5926                           
  5927                           ;RF_Control_B1.c: 102: RF1.Correction = 0;
  5928  0498  12BF               	bcf	(_RF1^(0+128)+1),5
  5929                           
  5930                           ;RF_Control_B1.c: 103: RF1.CorrectionCounter = 0;
  5931  0499  01C5               	clrf	(_RF1^(0+128)+7)
  5932  049A  01C6               	clrf	((_RF1+1)^(0+128)+7)
  5933                           
  5934                           ;RF_Control_B1.c: 111: getRxData();
  5935  049B  3189  21EB  3184   	fcall	_getRxData
  5936                           
  5937                           ;RF_Control_B1.c: 114: RF1.Run = 1;
  5938  049E  0021               	movlb	1	; select bank1
  5939  049F  14BF               	bsf	(_RF1^(0+128)+1),1
  5940                           
  5941                           ;RF_Control_B1.c: 115: RB5 = RB5 == 1 ? 0 : 1;
  5942  04A0  3020               	movlw	32
  5943  04A1  0020               	movlb	0	; select bank0
  5944  04A2  068D               	xorwf	13,f
  5945                           
  5946                           ;RF_Control_B1.c: 116: if (RF1.Checked == 1) {
  5947  04A3  0021               	movlb	1	; select bank1
  5948  04A4  1DBF               	btfss	(_RF1^(0+128)+1),3
  5949  04A5  2CB2               	goto	l9417
  5950                           
  5951                           ;RF_Control_B1.c: 117: if (RF1.RunTime > 20) {
  5952  04A6  3015               	movlw	21
  5953  04A7  0243               	subwf	(_RF1^(0+128)+5),w
  5954  04A8  1C03               	skipc
  5955  04A9  2CB0               	goto	l9415
  5956                           
  5957                           ;RF_Control_B1.c: 118: RF1.RunTime = 20;
  5958  04AA  3014               	movlw	20
  5959  04AB  0020               	movlb	0	; select bank0
  5960  04AC  00E7               	movwf	??_setRF_Main
  5961  04AD  0867               	movf	??_setRF_Main,w
  5962  04AE  0021               	movlb	1	; select bank1
  5963  04AF  00C3               	movwf	(_RF1^(0+128)+5)
  5964  04B0                     l9415:	
  5965                           
  5966                           ;RF_Control_B1.c: 119: }
  5967                           ;RF_Control_B1.c: 120: RF1.CheckCount = 0;
  5968  04B0  01C1               	clrf	(_RF1^(0+128)+3)
  5969                           
  5970                           ;RF_Control_B1.c: 121: } else {
  5971  04B1  2CDE               	goto	l9437
  5972  04B2                     l9417:	
  5973                           
  5974                           ;RF_Control_B1.c: 123: RF1.CheckCount++;
  5975  04B2  3001               	movlw	1
  5976  04B3  0020               	movlb	0	; select bank0
  5977  04B4  00E7               	movwf	??_setRF_Main
  5978  04B5  0867               	movf	??_setRF_Main,w
  5979  04B6  0021               	movlb	1	; select bank1
  5980  04B7  07C1               	addwf	(_RF1^(0+128)+3),f
  5981                           
  5982                           ;RF_Control_B1.c: 124: if (RF1.CheckCount == 2) {
  5983  04B8  0841               	movf	(_RF1^(0+128)+3),w
  5984  04B9  3A02               	xorlw	2
  5985  04BA  1D03               	skipz
  5986  04BB  2CDE               	goto	l9437
  5987                           
  5988                           ;RF_Control_B1.c: 125: RF1.CheckCount = 0;
  5989  04BC  01C1               	clrf	(_RF1^(0+128)+3)
  5990                           
  5991                           ;RF_Control_B1.c: 126: RF1.CheckedCounter = 0;
  5992  04BD  01C2               	clrf	(_RF1^(0+128)+4)
  5993                           
  5994                           ;RF_Control_B1.c: 127: if (RF1.RxChecked == 0) {
  5995  04BE  1A3F               	btfsc	(_RF1^(0+128)+1),4
  5996  04BF  2CC2               	goto	l9427
  5997                           
  5998                           ;RF_Control_B1.c: 128: RF1.RxChecked = 1;
  5999  04C0  163F               	bsf	(_RF1^(0+128)+1),4
  6000                           
  6001                           ;RF_Control_B1.c: 129: } else {
  6002  04C1  2CDE               	goto	l9437
  6003  04C2                     l9427:	
  6004                           
  6005                           ;RF_Control_B1.c: 130: if (RF1.RunTime < 100) {
  6006  04C2  3064               	movlw	100
  6007  04C3  0243               	subwf	(_RF1^(0+128)+5),w
  6008  04C4  1803               	skipnc
  6009  04C5  2CDE               	goto	l9437
  6010                           
  6011                           ;RF_Control_B1.c: 131: RF1.RunTime += 10;
  6012  04C6  300A               	movlw	10
  6013  04C7  0020               	movlb	0	; select bank0
  6014  04C8  00E7               	movwf	??_setRF_Main
  6015  04C9  0867               	movf	??_setRF_Main,w
  6016  04CA  0021               	movlb	1	; select bank1
  6017  04CB  07C3               	addwf	(_RF1^(0+128)+5),f
  6018                           
  6019                           ;RF_Control_B1.c: 132: }
  6020                           ;RF_Control_B1.c: 133: }
  6021                           ;RF_Control_B1.c: 134: }
  6022                           ;RF_Control_B1.c: 135: }
  6023                           ;RF_Control_B1.c: 136: }
  6024                           ;RF_Control_B1.c: 137: } else {
  6025  04CC  2CDE               	goto	l9437
  6026  04CD                     l2215:	
  6027                           
  6028                           ;RF_Control_B1.c: 139: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6029  04CD  1DBE               	btfss	_RF1^(0+128),3
  6030  04CE  18BE               	btfsc	_RF1^(0+128),1
  6031  04CF  2CDE               	goto	l9437
  6032                           
  6033                           ;RF_Control_B1.c: 140: RF1.RxStatus = 1;
  6034  04D0  15BE               	bsf	_RF1^(0+128),3
  6035                           
  6036                           ;RF_Control_B1.c: 141: RF1.Correction = 1;
  6037  04D1  16BF               	bsf	(_RF1^(0+128)+1),5
  6038                           
  6039                           ;RF_Control_B1.c: 143: CC2500_WriteCommand(0x36);
  6040  04D2  3036               	movlw	54
  6041  04D3  3190  20FD  3184   	fcall	_CC2500_WriteCommand
  6042                           
  6043                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3A);
  6044  04D6  303A               	movlw	58
  6045  04D7  3190  20FD  3184   	fcall	_CC2500_WriteCommand
  6046                           
  6047                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x34);
  6048  04DA  3034               	movlw	52
  6049  04DB  3190  20FD  3184   	fcall	_CC2500_WriteCommand
  6050  04DE                     l9437:	
  6051                           
  6052                           ;RF_Control_B1.c: 148: }
  6053                           ;RF_Control_B1.c: 150: }
  6054                           ;RF_Control_B1.c: 151: }
  6055                           ;RF_Control_B1.c: 152: }
  6056                           ;RF_Control_B1.c: 153: if (RF1.RxChecked == 1) {
  6057  04DE  0021               	movlb	1	; select bank1
  6058  04DF  1E3F               	btfss	(_RF1^(0+128)+1),4
  6059  04E0  2D07               	goto	l9447
  6060                           
  6061                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  6062  04E1  3001               	movlw	1
  6063  04E2  0020               	movlb	0	; select bank0
  6064  04E3  00E7               	movwf	??_setRF_Main
  6065  04E4  0867               	movf	??_setRF_Main,w
  6066  04E5  0021               	movlb	1	; select bank1
  6067  04E6  07C2               	addwf	(_RF1^(0+128)+4),f
  6068                           
  6069                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == (10 * RF1.RunTime)) {
  6070  04E7  0843               	movf	(_RF1^(0+128)+5),w
  6071  04E8  0020               	movlb	0	; select bank0
  6072  04E9  00E7               	movwf	??_setRF_Main
  6073  04EA  01E8               	clrf	??_setRF_Main+1
  6074  04EB  0867               	movf	??_setRF_Main,w
  6075  04EC  00A0               	movwf	___wmul@multiplier
  6076  04ED  0868               	movf	??_setRF_Main+1,w
  6077  04EE  00A1               	movwf	___wmul@multiplier+1
  6078  04EF  300A               	movlw	10
  6079  04F0  00A2               	movwf	___wmul@multiplicand
  6080  04F1  3000               	movlw	0
  6081  04F2  00A3               	movwf	___wmul@multiplicand+1
  6082  04F3  3191  21C0  3184   	fcall	___wmul
  6083  04F6  0021               	movlb	1	; select bank1
  6084  04F7  0842               	movf	(_RF1^(0+128)+4),w
  6085  04F8  0020               	movlb	0	; select bank0
  6086  04F9  00E9               	movwf	??_setRF_Main+2
  6087  04FA  01EA               	clrf	??_setRF_Main+3
  6088  04FB  0821               	movf	?___wmul+1,w
  6089  04FC  066A               	xorwf	??_setRF_Main+3,w
  6090  04FD  1D03               	skipz
  6091  04FE  2D01               	goto	u10145
  6092  04FF  0820               	movf	?___wmul,w
  6093  0500  0669               	xorwf	??_setRF_Main+2,w
  6094  0501                     u10145:	
  6095  0501  1D03               	skipz
  6096  0502  2D31               	goto	l9457
  6097                           
  6098                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  6099  0503  0021               	movlb	1	; select bank1
  6100  0504  01C2               	clrf	(_RF1^(0+128)+4)
  6101                           
  6102                           ;RF_Control_B1.c: 157: RF1.RxChecked = 0;
  6103  0505  123F               	bcf	(_RF1^(0+128)+1),4
  6104                           
  6105                           ;RF_Control_B1.c: 158: }
  6106                           ;RF_Control_B1.c: 159: } else {
  6107  0506  2D31               	goto	l9457
  6108  0507                     l9447:	
  6109                           
  6110                           ;RF_Control_B1.c: 160: if (RF1.RunTime > 20) {
  6111  0507  3015               	movlw	21
  6112  0508  0243               	subwf	(_RF1^(0+128)+5),w
  6113  0509  1C03               	skipc
  6114  050A  2D31               	goto	l9457
  6115                           
  6116                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  6117  050B  3001               	movlw	1
  6118  050C  0020               	movlb	0	; select bank0
  6119  050D  00E7               	movwf	??_setRF_Main
  6120  050E  0867               	movf	??_setRF_Main,w
  6121  050F  0021               	movlb	1	; select bank1
  6122  0510  07C2               	addwf	(_RF1^(0+128)+4),f
  6123                           
  6124                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == (10 * RF1.RunTime)) {
  6125  0511  0843               	movf	(_RF1^(0+128)+5),w
  6126  0512  0020               	movlb	0	; select bank0
  6127  0513  00E7               	movwf	??_setRF_Main
  6128  0514  01E8               	clrf	??_setRF_Main+1
  6129  0515  0867               	movf	??_setRF_Main,w
  6130  0516  00A0               	movwf	___wmul@multiplier
  6131  0517  0868               	movf	??_setRF_Main+1,w
  6132  0518  00A1               	movwf	___wmul@multiplier+1
  6133  0519  300A               	movlw	10
  6134  051A  00A2               	movwf	___wmul@multiplicand
  6135  051B  3000               	movlw	0
  6136  051C  00A3               	movwf	___wmul@multiplicand+1
  6137  051D  3191  21C0  3184   	fcall	___wmul
  6138  0520  0021               	movlb	1	; select bank1
  6139  0521  0842               	movf	(_RF1^(0+128)+4),w
  6140  0522  0020               	movlb	0	; select bank0
  6141  0523  00E9               	movwf	??_setRF_Main+2
  6142  0524  01EA               	clrf	??_setRF_Main+3
  6143  0525  0821               	movf	?___wmul+1,w
  6144  0526  066A               	xorwf	??_setRF_Main+3,w
  6145  0527  1D03               	skipz
  6146  0528  2D2B               	goto	u10165
  6147  0529  0820               	movf	?___wmul,w
  6148  052A  0669               	xorwf	??_setRF_Main+2,w
  6149  052B                     u10165:	
  6150  052B  1D03               	skipz
  6151  052C  2D31               	goto	l9457
  6152                           
  6153                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  6154  052D  0021               	movlb	1	; select bank1
  6155  052E  01C2               	clrf	(_RF1^(0+128)+4)
  6156                           
  6157                           ;RF_Control_B1.c: 164: RF1.RunTime -= 10;
  6158  052F  300A               	movlw	10
  6159  0530  02C3               	subwf	(_RF1^(0+128)+5),f
  6160  0531                     l9457:	
  6161                           
  6162                           ;RF_Control_B1.c: 165: }
  6163                           ;RF_Control_B1.c: 166: }
  6164                           ;RF_Control_B1.c: 167: }
  6165                           ;RF_Control_B1.c: 168: if (RF1.Correction == 1) {
  6166  0531  0021               	movlb	1	; select bank1
  6167  0532  1EBF               	btfss	(_RF1^(0+128)+1),5
  6168  0533  0008               	return
  6169                           
  6170                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter++;
  6171  0534  3001               	movlw	1
  6172  0535  07C5               	addwf	(_RF1^(0+128)+7),f
  6173  0536  3000               	movlw	0
  6174  0537  3DC6               	addwfc	((_RF1+1)^(0+128)+7),f
  6175                           
  6176                           ;RF_Control_B1.c: 170: if (RF1.CorrectionCounter >= 60000) {
  6177  0538  30EA               	movlw	234
  6178  0539  0246               	subwf	((_RF1+1)^(0+128)+7),w
  6179  053A  3060               	movlw	96
  6180  053B  1903               	skipnz
  6181  053C  0245               	subwf	(_RF1^(0+128)+7),w
  6182  053D  1C03               	skipc
  6183  053E  0008               	return
  6184                           
  6185                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter = 0;
  6186  053F  01C5               	clrf	(_RF1^(0+128)+7)
  6187  0540  01C6               	clrf	((_RF1+1)^(0+128)+7)
  6188                           
  6189                           ;RF_Control_B1.c: 173: RF1.RxStatus = 0;
  6190  0541  11BE               	bcf	_RF1^(0+128),3
  6191                           
  6192                           ;RF_Control_B1.c: 174: RF1.ReceiveGO = 0;
  6193  0542  10BE               	bcf	_RF1^(0+128),1
  6194  0543  0008               	return
  6195  0544                     __end_of_setRF_Main:	
  6196                           
  6197                           	psect	text20
  6198  09EB                     __ptext20:	
  6199 ;; *************** function _getRxData *****************
  6200 ;; Defined at:
  6201 ;;		line 257 in file "../src/RF_Control_B1.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;		None
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;		None
  6206 ;; Return value:  Size  Location     Type
  6207 ;;		None               void
  6208 ;; Registers used:
  6209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6219 ;;Total ram usage:        0 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:   12
  6222 ;; This function calls:
  6223 ;;		_setControl_Lights_Table
  6224 ;;		_setLog_Code
  6225 ;; This function is called by:
  6226 ;;		_setRF_Main
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           
  6231                           ;psect for function _getRxData
  6232  09EB                     _getRxData:	
  6233                           
  6234                           ;RF_Control_B1.c: 258: if (RF1.Learn == 1) {
  6235                           
  6236                           ;incstack = 0
  6237                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6238  09EB  0021               	movlb	1	; select bank1
  6239  09EC  1F3E               	btfss	_RF1^(0+128),6
  6240  09ED  29FE               	goto	l8855
  6241                           
  6242                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6243  09EE  0022               	movlb	2	; select bank2
  6244  09EF  08A0               	movf	_RF_Data^(0+256),f
  6245  09F0  1D03               	skipz
  6246  09F1  29FB               	goto	l2250
  6247  09F2  0821               	movf	(_RF_Data^(0+256)+1),w
  6248  09F3  3A64               	xorlw	100
  6249  09F4  1D03               	skipz
  6250  09F5  29FB               	goto	l2250
  6251                           
  6252                           ;RF_Control_B1.c: 260: setLog_Code();
  6253  09F6  3194  245A         	fcall	_setLog_Code
  6254                           
  6255                           ;RF_Control_B1.c: 261: RF1.Checked = 1;
  6256  09F8  0021               	movlb	1	; select bank1
  6257  09F9  15BF               	bsf	(_RF1^(0+128)+1),3
  6258                           
  6259                           ;RF_Control_B1.c: 262: } else {
  6260  09FA  0008               	return
  6261  09FB                     l2250:	
  6262                           
  6263                           ;RF_Control_B1.c: 263: RF1.Checked = 0;
  6264  09FB  0021               	movlb	1	; select bank1
  6265  09FC  11BF               	bcf	(_RF1^(0+128)+1),3
  6266                           
  6267                           ;RF_Control_B1.c: 264: }
  6268                           ;RF_Control_B1.c: 265: } else {
  6269  09FD  0008               	return
  6270  09FE                     l8855:	
  6271                           
  6272                           ;RF_Control_B1.c: 266: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6273  09FE  0022               	movlb	2	; select bank2
  6274  09FF  08A0               	movf	_RF_Data^(0+256),f
  6275  0A00  1D03               	skipz
  6276  0A01  2A3C               	goto	l8877
  6277  0A02  0821               	movf	(_RF_Data^(0+256)+1),w
  6278  0A03  3A02               	xorlw	2
  6279  0A04  1D03               	skipz
  6280  0A05  2A3C               	goto	l8877
  6281                           
  6282                           ;RF_Control_B1.c: 268: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6283  0A06  082C               	movf	(_RF_Data^(0+256)+12),w
  6284  0A07  3AFF               	xorlw	255
  6285  0A08  1D03               	skipz
  6286  0A09  2A16               	goto	l8867
  6287  0A0A  082D               	movf	(_RF_Data^(0+256)+13),w
  6288  0A0B  3AFF               	xorlw	255
  6289  0A0C  1D03               	skipz
  6290  0A0D  2A16               	goto	l8867
  6291  0A0E  082E               	movf	(_RF_Data^(0+256)+14),w
  6292  0A0F  3AFF               	xorlw	255
  6293  0A10  1D03               	skipz
  6294  0A11  2A16               	goto	l8867
  6295                           
  6296                           ;RF_Control_B1.c: 269: __nop();
  6297  0A12  0000               	nop
  6298                           
  6299                           ;RF_Control_B1.c: 270: RF1.Checked = 0;
  6300  0A13  0021               	movlb	1	; select bank1
  6301  0A14  11BF               	bcf	(_RF1^(0+128)+1),3
  6302                           
  6303                           ;RF_Control_B1.c: 271: } else {
  6304  0A15  0008               	return
  6305  0A16                     l8867:	
  6306                           
  6307                           ;RF_Control_B1.c: 272: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6308  0A16  0020               	movlb	0	; select bank0
  6309  0A17  086C               	movf	_product,w
  6310  0A18  3E0C               	addlw	12
  6311  0A19  0086               	movwf	6
  6312  0A1A  3002               	movlw	2	; select bank4/5
  6313  0A1B  0087               	movwf	7
  6314  0A1C  0022               	movlb	2	; select bank2
  6315  0A1D  082C               	movf	(_RF_Data^(0+256)+12),w
  6316  0A1E  0601               	xorwf	1,w
  6317  0A1F  1D03               	skipz
  6318  0A20  0008               	return
  6319  0A21  0020               	movlb	0	; select bank0
  6320  0A22  086C               	movf	_product,w
  6321  0A23  3E0D               	addlw	13
  6322  0A24  0086               	movwf	6
  6323  0A25  3002               	movlw	2	; select bank4/5
  6324  0A26  0087               	movwf	7
  6325  0A27  0022               	movlb	2	; select bank2
  6326  0A28  082D               	movf	(_RF_Data^(0+256)+13),w
  6327  0A29  0601               	xorwf	1,w
  6328  0A2A  1D03               	skipz
  6329  0A2B  0008               	return
  6330  0A2C  0020               	movlb	0	; select bank0
  6331  0A2D  086C               	movf	_product,w
  6332  0A2E  3E0E               	addlw	14
  6333  0A2F  0086               	movwf	6
  6334  0A30  3002               	movlw	2	; select bank4/5
  6335  0A31  0087               	movwf	7
  6336  0A32  0022               	movlb	2	; select bank2
  6337  0A33  082E               	movf	(_RF_Data^(0+256)+14),w
  6338  0A34  0601               	xorwf	1,w
  6339  0A35  1D03               	skipz
  6340  0A36  0008               	return
  6341                           
  6342                           ;RF_Control_B1.c: 273: setControl_Lights_Table();
  6343  0A37  318F  2751         	fcall	_setControl_Lights_Table
  6344                           
  6345                           ;RF_Control_B1.c: 274: RF1.Checked = 1;
  6346  0A39  0021               	movlb	1	; select bank1
  6347  0A3A  15BF               	bsf	(_RF1^(0+128)+1),3
  6348                           
  6349                           ;RF_Control_B1.c: 275: }
  6350                           ;RF_Control_B1.c: 276: }
  6351                           ;RF_Control_B1.c: 277: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6352  0A3B  0008               	return
  6353  0A3C                     l8877:	
  6354  0A3C  0022               	movlb	2	; select bank2
  6355  0A3D  0820               	movf	_RF_Data^(0+256),w
  6356  0A3E  3AFF               	xorlw	255
  6357  0A3F  1D03               	skipz
  6358  0A40  2A47               	goto	l8883
  6359  0A41  0821               	movf	(_RF_Data^(0+256)+1),w
  6360  0A42  3A02               	xorlw	2
  6361  0A43  1D03               	skipz
  6362  0A44  2A47               	goto	l8883
  6363                           
  6364                           ;RF_Control_B1.c: 278: __nop();
  6365  0A45  0000               	nop
  6366                           
  6367                           ;RF_Control_B1.c: 279: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6368  0A46  0008               	return
  6369  0A47                     l8883:	
  6370  0A47  0022               	movlb	2	; select bank2
  6371  0A48  08A0               	movf	_RF_Data^(0+256),f
  6372  0A49  1D03               	skipz
  6373  0A4A  2A51               	goto	l2260
  6374  0A4B  0821               	movf	(_RF_Data^(0+256)+1),w
  6375  0A4C  3A65               	xorlw	101
  6376  0A4D  1D03               	skipz
  6377  0A4E  2A51               	goto	l2260
  6378                           
  6379                           ;RF_Control_B1.c: 280: __nop();
  6380  0A4F  0000               	nop
  6381                           
  6382                           ;RF_Control_B1.c: 281: } else {
  6383  0A50  0008               	return
  6384  0A51                     l2260:	
  6385                           
  6386                           ;RF_Control_B1.c: 282: RF1.Checked = 0;
  6387  0A51  0021               	movlb	1	; select bank1
  6388  0A52  11BF               	bcf	(_RF1^(0+128)+1),3
  6389  0A53  0008               	return
  6390  0A54                     __end_of_getRxData:	
  6391                           
  6392                           	psect	text21
  6393  145A                     __ptext21:	
  6394 ;; *************** function _setLog_Code *****************
  6395 ;; Defined at:
  6396 ;;		line 292 in file "../src/RF_Control_B1.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;		None
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;		None
  6401 ;; Return value:  Size  Location     Type
  6402 ;;		None               void
  6403 ;; Registers used:
  6404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 0/0
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;Total ram usage:        1 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:    7
  6417 ;; This function calls:
  6418 ;;		_setBuz
  6419 ;; This function is called by:
  6420 ;;		_getRxData
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           
  6425                           ;psect for function _setLog_Code
  6426  145A                     _setLog_Code:	
  6427                           
  6428                           ;RF_Control_B1.c: 293: product->Data[12]=RF_Data[12];
  6429                           
  6430                           ;incstack = 0
  6431                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6432  145A  0022               	movlb	2	; select bank2
  6433  145B  082C               	movf	(_RF_Data^(0+256)+12),w
  6434  145C  0020               	movlb	0	; select bank0
  6435  145D  00AD               	movwf	??_setLog_Code
  6436  145E  086C               	movf	_product,w
  6437  145F  3E0C               	addlw	12
  6438  1460  0086               	movwf	6
  6439  1461  3002               	movlw	2	; select bank4/5
  6440  1462  0087               	movwf	7
  6441  1463  082D               	movf	??_setLog_Code,w
  6442  1464  0081               	movwf	1
  6443                           
  6444                           ;RF_Control_B1.c: 294: product->Data[13]=RF_Data[13];
  6445  1465  0022               	movlb	2	; select bank2
  6446  1466  082D               	movf	(_RF_Data^(0+256)+13),w
  6447  1467  0020               	movlb	0	; select bank0
  6448  1468  00AD               	movwf	??_setLog_Code
  6449  1469  086C               	movf	_product,w
  6450  146A  3E0D               	addlw	13
  6451  146B  0086               	movwf	6
  6452  146C  3002               	movlw	2	; select bank4/5
  6453  146D  0087               	movwf	7
  6454  146E  082D               	movf	??_setLog_Code,w
  6455  146F  0081               	movwf	1
  6456                           
  6457                           ;RF_Control_B1.c: 295: product->Data[14]=RF_Data[14];
  6458  1470  0022               	movlb	2	; select bank2
  6459  1471  082E               	movf	(_RF_Data^(0+256)+14),w
  6460  1472  0020               	movlb	0	; select bank0
  6461  1473  00AD               	movwf	??_setLog_Code
  6462  1474  086C               	movf	_product,w
  6463  1475  3E0E               	addlw	14
  6464  1476  0086               	movwf	6
  6465  1477  3002               	movlw	2	; select bank4/5
  6466  1478  0087               	movwf	7
  6467  1479  082D               	movf	??_setLog_Code,w
  6468  147A  0081               	movwf	1
  6469                           
  6470                           ;RF_Control_B1.c: 296: setBuz(1, 100);
  6471  147B  3064               	movlw	100
  6472  147C  00A9               	movwf	setBuz@time
  6473  147D  3000               	movlw	0
  6474  147E  00AA               	movwf	setBuz@time+1
  6475  147F  3001               	movlw	1
  6476  1480  3197  27A7  3194   	fcall	_setBuz
  6477                           
  6478                           ;RF_Control_B1.c: 297: RF1.Learn = 0;
  6479  1483  0021               	movlb	1	; select bank1
  6480  1484  133E               	bcf	_RF1^(0+128),6
  6481                           
  6482                           ;RF_Control_B1.c: 298: if (myMain.First) {
  6483  1485  1FA0               	btfss	_myMain^(0+128),7
  6484  1486  2C89               	goto	l2265
  6485                           
  6486                           ;RF_Control_B1.c: 299: Memory.LoopSave=1;
  6487  1487  0023               	movlb	3	; select bank3
  6488  1488  1544               	bsf	(_Memory^(0+384)+36),2
  6489  1489                     l2265:	
  6490                           
  6491                           ;RF_Control_B1.c: 300: }
  6492                           ;RF_Control_B1.c: 301: Memory.Modify=1;
  6493  1489  0023               	movlb	3	; select bank3
  6494  148A  1444               	bsf	(_Memory^(0+384)+36),0
  6495  148B  0008               	return
  6496  148C                     __end_of_setLog_Code:	
  6497                           
  6498                           	psect	text22
  6499  0F51                     __ptext22:	
  6500 ;; *************** function _setControl_Lights_Table *****************
  6501 ;; Defined at:
  6502 ;;		line 305 in file "../src/RF_Control_B1.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;		None
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;		None
  6507 ;; Return value:  Size  Location     Type
  6508 ;;		None               void
  6509 ;; Registers used:
  6510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;Total ram usage:        0 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:   11
  6523 ;; This function calls:
  6524 ;;		_setBuz
  6525 ;;		_setDimmerLights
  6526 ;;		_setRFSW_AdjControl
  6527 ;;		_setRFSW_Control
  6528 ;;		_setRFSW_Status
  6529 ;;		_setSw_Status
  6530 ;;		_setTxData
  6531 ;; This function is called by:
  6532 ;;		_getRxData
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           
  6537                           ;psect for function _setControl_Lights_Table
  6538  0F51                     _setControl_Lights_Table:	
  6539                           
  6540                           ;RF_Control_B1.c: 306: if (RF_Data[15] == 0x00) {
  6541                           
  6542                           ;incstack = 0
  6543                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6544  0F51  0022               	movlb	2	; select bank2
  6545  0F52  08AF               	movf	(_RF_Data^(0+256)+15),f
  6546  0F53  1D03               	skipz
  6547  0F54  2FAF               	goto	l8577
  6548                           
  6549                           ;RF_Control_B1.c: 308: setDimmerLights(1, 0);
  6550  0F55  0020               	movlb	0	; select bank0
  6551  0F56  01A3               	clrf	setDimmerLights@status
  6552  0F57  3001               	movlw	1
  6553  0F58  3187  277E  318F   	fcall	_setDimmerLights
  6554                           
  6555                           ;RF_Control_B1.c: 309: setRFSW_Status(1, 0);
  6556  0F5B  0020               	movlb	0	; select bank0
  6557  0F5C  01A2               	clrf	setRFSW_Status@command
  6558  0F5D  3001               	movlw	1
  6559  0F5E  319E  26C6  318F   	fcall	_setRFSW_Status
  6560                           
  6561                           ;RF_Control_B1.c: 310: setSw_Status(1, 0);
  6562  0F61  0020               	movlb	0	; select bank0
  6563  0F62  01A2               	clrf	setSw_Status@command
  6564  0F63  3001               	movlw	1
  6565  0F64  319E  26D5  318F   	fcall	_setSw_Status
  6566                           
  6567                           ;RF_Control_B1.c: 313: setDimmerLights(2, 0);
  6568  0F67  0020               	movlb	0	; select bank0
  6569  0F68  01A3               	clrf	setDimmerLights@status
  6570  0F69  3002               	movlw	2
  6571  0F6A  3187  277E  318F   	fcall	_setDimmerLights
  6572                           
  6573                           ;RF_Control_B1.c: 314: setRFSW_Status(2, 0);
  6574  0F6D  0020               	movlb	0	; select bank0
  6575  0F6E  01A2               	clrf	setRFSW_Status@command
  6576  0F6F  3002               	movlw	2
  6577  0F70  319E  26C6  318F   	fcall	_setRFSW_Status
  6578                           
  6579                           ;RF_Control_B1.c: 315: setSw_Status(2, 0);
  6580  0F73  0020               	movlb	0	; select bank0
  6581  0F74  01A2               	clrf	setSw_Status@command
  6582  0F75  3002               	movlw	2
  6583  0F76  319E  26D5  318F   	fcall	_setSw_Status
  6584                           
  6585                           ;RF_Control_B1.c: 318: setDimmerLights(3, 0);
  6586  0F79  0020               	movlb	0	; select bank0
  6587  0F7A  01A3               	clrf	setDimmerLights@status
  6588  0F7B  3003               	movlw	3
  6589  0F7C  3187  277E  318F   	fcall	_setDimmerLights
  6590                           
  6591                           ;RF_Control_B1.c: 319: setRFSW_Status(3, 0);
  6592  0F7F  0020               	movlb	0	; select bank0
  6593  0F80  01A2               	clrf	setRFSW_Status@command
  6594  0F81  3003               	movlw	3
  6595  0F82  319E  26C6  318F   	fcall	_setRFSW_Status
  6596                           
  6597                           ;RF_Control_B1.c: 320: setSw_Status(3, 0);
  6598  0F85  0020               	movlb	0	; select bank0
  6599  0F86  01A2               	clrf	setSw_Status@command
  6600  0F87  3003               	movlw	3
  6601  0F88  319E  26D5  318F   	fcall	_setSw_Status
  6602                           
  6603                           ;RF_Control_B1.c: 323: product->Data[9]=0;
  6604  0F8B  0020               	movlb	0	; select bank0
  6605  0F8C  086C               	movf	_product,w
  6606  0F8D  3E09               	addlw	9
  6607  0F8E  0086               	movwf	6
  6608  0F8F  3002               	movlw	2	; select bank4/5
  6609  0F90  0087               	movwf	7
  6610  0F91  0181               	clrf	1
  6611                           
  6612                           ;RF_Control_B1.c: 324: product->Data[11]=0;
  6613  0F92  086C               	movf	_product,w
  6614  0F93  3E0B               	addlw	11
  6615  0F94  0086               	movwf	6
  6616  0F95  3002               	movlw	2	; select bank4/5
  6617  0F96  0087               	movwf	7
  6618  0F97  0181               	clrf	1
  6619                           
  6620                           ;RF_Control_B1.c: 325: product->Data[15]=0;
  6621  0F98  086C               	movf	_product,w
  6622  0F99  3E0F               	addlw	15
  6623  0F9A  0086               	movwf	6
  6624  0F9B  3002               	movlw	2	; select bank4/5
  6625  0F9C  0087               	movwf	7
  6626  0F9D  0181               	clrf	1
  6627                           
  6628                           ;RF_Control_B1.c: 326: product->Data[17]=0;
  6629  0F9E  086C               	movf	_product,w
  6630  0F9F  3E11               	addlw	17
  6631  0FA0  0086               	movwf	6
  6632  0FA1  3002               	movlw	2	; select bank4/5
  6633  0FA2  0087               	movwf	7
  6634  0FA3  0181               	clrf	1
  6635                           
  6636                           ;RF_Control_B1.c: 327: setBuz(1, 100);
  6637  0FA4  3064               	movlw	100
  6638  0FA5  00A9               	movwf	setBuz@time
  6639  0FA6  3000               	movlw	0
  6640  0FA7  00AA               	movwf	setBuz@time+1
  6641  0FA8  3001               	movlw	1
  6642  0FA9  3197  27A7  318F   	fcall	_setBuz
  6643                           
  6644                           ;RF_Control_B1.c: 328: setTxData();
  6645  0FAC  3186  260B         	fcall	_setTxData
  6646                           
  6647                           ;RF_Control_B1.c: 329: } else if (RF_Data[15] == 0x20) {
  6648  0FAE  0008               	return
  6649  0FAF                     l8577:	
  6650  0FAF  0022               	movlb	2	; select bank2
  6651  0FB0  082F               	movf	(_RF_Data^(0+256)+15),w
  6652  0FB1  3A20               	xorlw	32
  6653  0FB2  1D03               	skipz
  6654  0FB3  2FCA               	goto	l8583
  6655                           
  6656                           ;RF_Control_B1.c: 330: product->Data[9]=0;
  6657  0FB4  0020               	movlb	0	; select bank0
  6658  0FB5  086C               	movf	_product,w
  6659  0FB6  3E09               	addlw	9
  6660  0FB7  0086               	movwf	6
  6661  0FB8  3002               	movlw	2	; select bank4/5
  6662  0FB9  0087               	movwf	7
  6663  0FBA  0181               	clrf	1
  6664                           
  6665                           ;RF_Control_B1.c: 331: product->Data[11]=0;
  6666  0FBB  086C               	movf	_product,w
  6667  0FBC  3E0B               	addlw	11
  6668  0FBD  0086               	movwf	6
  6669  0FBE  3002               	movlw	2	; select bank4/5
  6670  0FBF  0087               	movwf	7
  6671  0FC0  0181               	clrf	1
  6672                           
  6673                           ;RF_Control_B1.c: 332: product->Data[17]=0;
  6674  0FC1  086C               	movf	_product,w
  6675  0FC2  3E11               	addlw	17
  6676  0FC3  0086               	movwf	6
  6677  0FC4  3002               	movlw	2	; select bank4/5
  6678  0FC5  0087               	movwf	7
  6679  0FC6  0181               	clrf	1
  6680                           
  6681                           ;RF_Control_B1.c: 333: setTxData();
  6682  0FC7  3186  260B         	fcall	_setTxData
  6683                           
  6684                           ;RF_Control_B1.c: 334: }
  6685  0FC9  0008               	return
  6686  0FCA                     l8583:	
  6687                           
  6688                           ;RF_Control_B1.c: 336: else if (RF_Data[15] == 0x01) {
  6689  0FCA  0022               	movlb	2	; select bank2
  6690  0FCB  082F               	movf	(_RF_Data^(0+256)+15),w
  6691  0FCC  3A01               	xorlw	1
  6692  0FCD  1D03               	skipz
  6693  0FCE  2FD3               	goto	l8587
  6694                           
  6695                           ;RF_Control_B1.c: 337: setRFSW_Control(1);
  6696  0FCF  3001               	movlw	1
  6697  0FD0  318E  2618         	fcall	_setRFSW_Control
  6698                           
  6699                           ;RF_Control_B1.c: 338: }
  6700  0FD2  0008               	return
  6701  0FD3                     l8587:	
  6702                           
  6703                           ;RF_Control_B1.c: 340: else if (RF_Data[15] == 0x11) {
  6704  0FD3  0022               	movlb	2	; select bank2
  6705  0FD4  082F               	movf	(_RF_Data^(0+256)+15),w
  6706  0FD5  3A11               	xorlw	17
  6707  0FD6  1D03               	skipz
  6708  0FD7  2FDC               	goto	l8591
  6709                           
  6710                           ;RF_Control_B1.c: 341: setRFSW_AdjControl(1);
  6711  0FD8  3001               	movlw	1
  6712  0FD9  3194  24F5         	fcall	_setRFSW_AdjControl
  6713                           
  6714                           ;RF_Control_B1.c: 342: }
  6715  0FDB  0008               	return
  6716  0FDC                     l8591:	
  6717                           
  6718                           ;RF_Control_B1.c: 347: else if (RF_Data[15] == 0x02) {
  6719  0FDC  0022               	movlb	2	; select bank2
  6720  0FDD  082F               	movf	(_RF_Data^(0+256)+15),w
  6721  0FDE  3A02               	xorlw	2
  6722  0FDF  1D03               	skipz
  6723  0FE0  2FE5               	goto	l8595
  6724                           
  6725                           ;RF_Control_B1.c: 348: setRFSW_Control(2);
  6726  0FE1  3002               	movlw	2
  6727  0FE2  318E  2618         	fcall	_setRFSW_Control
  6728                           
  6729                           ;RF_Control_B1.c: 349: }
  6730  0FE4  0008               	return
  6731  0FE5                     l8595:	
  6732                           
  6733                           ;RF_Control_B1.c: 351: else if (RF_Data[15] == 0x21) {
  6734  0FE5  0022               	movlb	2	; select bank2
  6735  0FE6  082F               	movf	(_RF_Data^(0+256)+15),w
  6736  0FE7  3A21               	xorlw	33
  6737  0FE8  1D03               	skipz
  6738  0FE9  2FEE               	goto	l8599
  6739                           
  6740                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  6741  0FEA  3002               	movlw	2
  6742  0FEB  3194  24F5         	fcall	_setRFSW_AdjControl
  6743                           
  6744                           ;RF_Control_B1.c: 353: }
  6745  0FED  0008               	return
  6746  0FEE                     l8599:	
  6747                           
  6748                           ;RF_Control_B1.c: 358: else if (RF_Data[15] == 0x03) {
  6749  0FEE  0022               	movlb	2	; select bank2
  6750  0FEF  082F               	movf	(_RF_Data^(0+256)+15),w
  6751  0FF0  3A03               	xorlw	3
  6752  0FF1  1D03               	skipz
  6753  0FF2  2FF7               	goto	l8603
  6754                           
  6755                           ;RF_Control_B1.c: 359: setRFSW_Control(3);
  6756  0FF3  3003               	movlw	3
  6757  0FF4  318E  2618         	fcall	_setRFSW_Control
  6758                           
  6759                           ;RF_Control_B1.c: 360: }
  6760  0FF6  0008               	return
  6761  0FF7                     l8603:	
  6762                           
  6763                           ;RF_Control_B1.c: 362: else if (RF_Data[15] == 0x31) {
  6764  0FF7  0022               	movlb	2	; select bank2
  6765  0FF8  082F               	movf	(_RF_Data^(0+256)+15),w
  6766  0FF9  3A31               	xorlw	49
  6767  0FFA  1D03               	skipz
  6768  0FFB  0008               	return
  6769                           
  6770                           ;RF_Control_B1.c: 363: setRFSW_AdjControl(3);
  6771  0FFC  3003               	movlw	3
  6772  0FFD  3194  24F5         	fcall	_setRFSW_AdjControl
  6773  0FFF  0008               	return
  6774  1000                     __end_of_setControl_Lights_Table:	
  6775                           
  6776                           	psect	text23
  6777  0E18                     __ptext23:	
  6778 ;; *************** function _setRFSW_Control *****************
  6779 ;; Defined at:
  6780 ;;		line 393 in file "../src/RF_Control_B1.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  sw              1    wreg     unsigned char 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  sw              1   67[BANK0 ] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;		None               void
  6787 ;; Registers used:
  6788 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;Total ram usage:        2 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    9
  6801 ;; This function calls:
  6802 ;;		_RfSWPointSelect
  6803 ;;		_setBuz
  6804 ;;		_setDelayOff_GO
  6805 ;;		_setDimmerLights_Switch
  6806 ;;		_setDimmerLights_Trigger
  6807 ;;		_setRF_DimmerLights
  6808 ;;		_setSw_Status
  6809 ;;		_setTxData
  6810 ;; This function is called by:
  6811 ;;		_setControl_Lights_Table
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           
  6816                           ;psect for function _setRFSW_Control
  6817  0E18                     _setRFSW_Control:	
  6818                           
  6819                           ;incstack = 0
  6820                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6821                           ;setRFSW_Control@sw stored from wreg
  6822  0E18  0020               	movlb	0	; select bank0
  6823  0E19  00E3               	movwf	setRFSW_Control@sw
  6824                           
  6825                           ;RF_Control_B1.c: 394: RfSWPointSelect(sw);
  6826  0E1A  0863               	movf	setRFSW_Control@sw,w
  6827  0E1B  3192  221C  318E   	fcall	_RfSWPointSelect
  6828                           
  6829                           ;RF_Control_B1.c: 395: if (RFSW->Status == 0) {
  6830  0E1E  0021               	movlb	1	; select bank1
  6831  0E1F  0850               	movf	_RFSW^(0+128),w
  6832  0E20  0086               	movwf	6
  6833  0E21  0187               	clrf	7
  6834  0E22  1801               	btfsc	1,0
  6835  0E23  2E5A               	goto	l8467
  6836                           
  6837                           ;RF_Control_B1.c: 396: if (RF_Data[16] == 0x80) {
  6838  0E24  0022               	movlb	2	; select bank2
  6839  0E25  0830               	movf	(_RF_Data^(0+256)+16),w
  6840  0E26  3A80               	xorlw	128
  6841  0E27  1D03               	skipz
  6842  0E28  2E36               	goto	l8457
  6843                           
  6844                           ;RF_Control_B1.c: 397: setDelayOff_GO(sw, 1, RF_Data[17]);
  6845  0E29  0020               	movlb	0	; select bank0
  6846  0E2A  01AA               	clrf	setDelayOff_GO@command
  6847  0E2B  0AAA               	incf	setDelayOff_GO@command,f
  6848  0E2C  0022               	movlb	2	; select bank2
  6849  0E2D  0831               	movf	(_RF_Data^(0+256)+17),w
  6850  0E2E  0020               	movlb	0	; select bank0
  6851  0E2F  00E2               	movwf	??_setRFSW_Control
  6852  0E30  0862               	movf	??_setRFSW_Control,w
  6853  0E31  00AB               	movwf	setDelayOff_GO@value
  6854  0E32  0863               	movf	setRFSW_Control@sw,w
  6855  0E33  3188  2067  318E   	fcall	_setDelayOff_GO
  6856  0E36                     l8457:	
  6857                           
  6858                           ;RF_Control_B1.c: 398: }
  6859                           ;RF_Control_B1.c: 399: RFSW->Status = 1;
  6860  0E36  0021               	movlb	1	; select bank1
  6861  0E37  0850               	movf	_RFSW^(0+128),w
  6862  0E38  0086               	movwf	6
  6863  0E39  0187               	clrf	7
  6864  0E3A  1401               	bsf	1,0
  6865                           
  6866                           ;RF_Control_B1.c: 400: setSw_Status(sw, 1);
  6867  0E3B  0020               	movlb	0	; select bank0
  6868  0E3C  01A2               	clrf	setSw_Status@command
  6869  0E3D  0AA2               	incf	setSw_Status@command,f
  6870  0E3E  0863               	movf	setRFSW_Control@sw,w
  6871  0E3F  319E  26D5  318E   	fcall	_setSw_Status
  6872                           
  6873                           ;RF_Control_B1.c: 402: setDimmerLights_Trigger(sw, 1);
  6874  0E42  0020               	movlb	0	; select bank0
  6875  0E43  01A2               	clrf	setDimmerLights_Trigger@command
  6876  0E44  0AA2               	incf	setDimmerLights_Trigger@command,f
  6877  0E45  0863               	movf	setRFSW_Control@sw,w
  6878  0E46  319F  2721  318E   	fcall	_setDimmerLights_Trigger
  6879                           
  6880                           ;RF_Control_B1.c: 403: setDimmerLights_Switch(sw, 1);
  6881  0E49  0020               	movlb	0	; select bank0
  6882  0E4A  01A2               	clrf	setDimmerLights_Switch@command
  6883  0E4B  0AA2               	incf	setDimmerLights_Switch@command,f
  6884  0E4C  0863               	movf	setRFSW_Control@sw,w
  6885  0E4D  319F  2711  318E   	fcall	_setDimmerLights_Switch
  6886                           
  6887                           ;RF_Control_B1.c: 405: setRF_DimmerLights(sw, RFSW->Status);
  6888  0E50  0021               	movlb	1	; select bank1
  6889  0E51  0850               	movf	_RFSW^(0+128),w
  6890  0E52  0086               	movwf	6
  6891  0E53  0187               	clrf	7
  6892  0E54  3000               	movlw	0
  6893  0E55  1801               	btfsc	1,0
  6894  0E56  3001               	movlw	1
  6895  0E57  0020               	movlb	0	; select bank0
  6896  0E58  00DD               	movwf	setRF_DimmerLights@on
  6897  0E59  2E98               	goto	L5
  6898  0E5A                     l8467:	
  6899                           ;RF_Control_B1.c: 406: } else {
  6900                           
  6901                           
  6902                           ;RF_Control_B1.c: 407: if (RF_Data[16] == 0x80) {
  6903  0E5A  0022               	movlb	2	; select bank2
  6904  0E5B  0830               	movf	(_RF_Data^(0+256)+16),w
  6905  0E5C  3A80               	xorlw	128
  6906  0E5D  1D03               	skipz
  6907  0E5E  2E70               	goto	l8471
  6908                           
  6909                           ;RF_Control_B1.c: 408: setDelayOff_GO(sw, 1, RF_Data[17]);
  6910  0E5F  0020               	movlb	0	; select bank0
  6911  0E60  01AA               	clrf	setDelayOff_GO@command
  6912  0E61  0AAA               	incf	setDelayOff_GO@command,f
  6913  0E62  0022               	movlb	2	; select bank2
  6914  0E63  0831               	movf	(_RF_Data^(0+256)+17),w
  6915  0E64  0020               	movlb	0	; select bank0
  6916  0E65  00E2               	movwf	??_setRFSW_Control
  6917  0E66  0862               	movf	??_setRFSW_Control,w
  6918  0E67  00AB               	movwf	setDelayOff_GO@value
  6919  0E68  0863               	movf	setRFSW_Control@sw,w
  6920  0E69  3188  2067  318E   	fcall	_setDelayOff_GO
  6921                           
  6922                           ;RF_Control_B1.c: 409: setRF_DimmerLights(sw, 1);
  6923  0E6C  0020               	movlb	0	; select bank0
  6924  0E6D  01DD               	clrf	setRF_DimmerLights@on
  6925  0E6E  0ADD               	incf	setRF_DimmerLights@on,f
  6926  0E6F  2E98               	goto	L5
  6927  0E70                     l8471:	
  6928                           ;RF_Control_B1.c: 410: } else {
  6929                           
  6930                           
  6931                           ;RF_Control_B1.c: 411: RFSW->Status = 0;
  6932  0E70  0021               	movlb	1	; select bank1
  6933  0E71  0850               	movf	_RFSW^(0+128),w
  6934  0E72  0086               	movwf	6
  6935  0E73  0187               	clrf	7
  6936  0E74  1001               	bcf	1,0
  6937                           
  6938                           ;RF_Control_B1.c: 412: setSw_Status(sw, 0);
  6939  0E75  0020               	movlb	0	; select bank0
  6940  0E76  01A2               	clrf	setSw_Status@command
  6941  0E77  0863               	movf	setRFSW_Control@sw,w
  6942  0E78  319E  26D5  318E   	fcall	_setSw_Status
  6943                           
  6944                           ;RF_Control_B1.c: 414: setDimmerLights_Trigger(sw, 1);
  6945  0E7B  0020               	movlb	0	; select bank0
  6946  0E7C  01A2               	clrf	setDimmerLights_Trigger@command
  6947  0E7D  0AA2               	incf	setDimmerLights_Trigger@command,f
  6948  0E7E  0863               	movf	setRFSW_Control@sw,w
  6949  0E7F  319F  2721  318E   	fcall	_setDimmerLights_Trigger
  6950                           
  6951                           ;RF_Control_B1.c: 415: setDimmerLights_Switch(sw, RFSW->Status);
  6952  0E82  0021               	movlb	1	; select bank1
  6953  0E83  0850               	movf	_RFSW^(0+128),w
  6954  0E84  0086               	movwf	6
  6955  0E85  0187               	clrf	7
  6956  0E86  3000               	movlw	0
  6957  0E87  1801               	btfsc	1,0
  6958  0E88  3001               	movlw	1
  6959  0E89  0020               	movlb	0	; select bank0
  6960  0E8A  00A2               	movwf	setDimmerLights_Switch@command
  6961  0E8B  0863               	movf	setRFSW_Control@sw,w
  6962  0E8C  319F  2711  318E   	fcall	_setDimmerLights_Switch
  6963                           
  6964                           ;RF_Control_B1.c: 417: setDelayOff_GO(sw, 0, 0);
  6965  0E8F  0020               	movlb	0	; select bank0
  6966  0E90  01AA               	clrf	setDelayOff_GO@command
  6967  0E91  01AB               	clrf	setDelayOff_GO@value
  6968  0E92  0863               	movf	setRFSW_Control@sw,w
  6969  0E93  3188  2067  318E   	fcall	_setDelayOff_GO
  6970                           
  6971                           ;RF_Control_B1.c: 418: setRF_DimmerLights(sw, 0);
  6972  0E96  0020               	movlb	0	; select bank0
  6973  0E97  01DD               	clrf	setRF_DimmerLights@on
  6974  0E98                     L5:	
  6975  0E98  0863               	movf	setRFSW_Control@sw,w
  6976  0E99  318A  22BF  318E   	fcall	_setRF_DimmerLights
  6977                           
  6978                           ;RF_Control_B1.c: 419: }
  6979                           ;RF_Control_B1.c: 420: }
  6980                           ;RF_Control_B1.c: 421: setBuz(1, 100);
  6981  0E9C  3064               	movlw	100
  6982  0E9D  0020               	movlb	0	; select bank0
  6983  0E9E  00A9               	movwf	setBuz@time
  6984  0E9F  3000               	movlw	0
  6985  0EA0  00AA               	movwf	setBuz@time+1
  6986  0EA1  3001               	movlw	1
  6987  0EA2  3197  27A7  318E   	fcall	_setBuz
  6988                           
  6989                           ;RF_Control_B1.c: 422: setTxData();
  6990  0EA5  3186  260B         	fcall	_setTxData
  6991  0EA7  0008               	return
  6992  0EA8                     __end_of_setRFSW_Control:	
  6993                           
  6994                           	psect	text24
  6995  0867                     __ptext24:	
  6996 ;; *************** function _setDelayOff_GO *****************
  6997 ;; Defined at:
  6998 ;;		line 86 in file "../src/DelayOff_B1.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  sw              1    wreg     unsigned char 
  7001 ;;  command         1   10[BANK0 ] unsigned char 
  7002 ;;  value           1   11[BANK0 ] unsigned char 
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;  sw              1   14[BANK0 ] unsigned char 
  7005 ;; Return value:  Size  Location     Type
  7006 ;;		None               void
  7007 ;; Registers used:
  7008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7014 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;Total ram usage:        5 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    7
  7021 ;; This function calls:
  7022 ;;		_DelayOffPointSelect
  7023 ;;		_DelayTimejudge
  7024 ;; This function is called by:
  7025 ;;		_setRFSW_Control
  7026 ;;		_Sw_DimmerOffFunc
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           
  7031                           ;psect for function _setDelayOff_GO
  7032  0867                     _setDelayOff_GO:	
  7033                           
  7034                           ;incstack = 0
  7035                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7036                           ;setDelayOff_GO@sw stored from wreg
  7037  0867  0020               	movlb	0	; select bank0
  7038  0868  00AE               	movwf	setDelayOff_GO@sw
  7039                           
  7040                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7041  0869  082E               	movf	setDelayOff_GO@sw,w
  7042  086A  3191  2169  3188   	fcall	_DelayOffPointSelect
  7043                           
  7044                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7045  086D  0872               	movf	_DelayOff,w
  7046  086E  0086               	movwf	6
  7047  086F  0187               	clrf	7
  7048  0870  1C01               	btfss	1,0
  7049  0871  0008               	return
  7050                           
  7051                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7052  0872  0020               	movlb	0	; select bank0
  7053  0873  082A               	movf	setDelayOff_GO@command,w
  7054  0874  3A01               	xorlw	1
  7055  0875  3000               	movlw	0
  7056  0876  1903               	skipnz
  7057  0877  3001               	movlw	1
  7058  0878  00AC               	movwf	??_setDelayOff_GO
  7059  0879  0872               	movf	_DelayOff,w
  7060  087A  0086               	movwf	6
  7061  087B  0187               	clrf	7
  7062  087C  0DAC               	rlf	??_setDelayOff_GO,f
  7063  087D  0801               	movf	1,w
  7064  087E  062C               	xorwf	??_setDelayOff_GO,w
  7065  087F  39FD               	andlw	-3
  7066  0880  062C               	xorwf	??_setDelayOff_GO,w
  7067  0881  0081               	movwf	1
  7068                           
  7069                           ;DelayOff_B1.c: 90: if (command == 1) {
  7070  0882  082A               	movf	setDelayOff_GO@command,w
  7071  0883  3A01               	xorlw	1
  7072  0884  1D03               	skipz
  7073  0885  28AF               	goto	l8277
  7074                           
  7075                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7076  0886  082B               	movf	setDelayOff_GO@value,w
  7077  0887  3193  23A9  3188   	fcall	_DelayTimejudge
  7078  088A  0020               	movlb	0	; select bank0
  7079  088B  00AC               	movwf	??_setDelayOff_GO
  7080  088C  0872               	movf	_DelayOff,w
  7081  088D  0086               	movwf	6
  7082  088E  0187               	clrf	7
  7083  088F  082C               	movf	??_setDelayOff_GO,w
  7084  0890  0081               	movwf	1
  7085                           
  7086                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7087  0891  300F               	movlw	15
  7088  0892  052B               	andwf	setDelayOff_GO@value,w
  7089  0893  00AC               	movwf	??_setDelayOff_GO
  7090  0894  082C               	movf	??_setDelayOff_GO,w
  7091  0895  3A05               	xorlw	5
  7092  0896  1903               	skipnz
  7093  0897  289C               	goto	l8271
  7094  0898  082B               	movf	setDelayOff_GO@value,w
  7095  0899  390F               	andlw	15
  7096  089A  1D03               	btfss	3,2
  7097  089B  28A2               	goto	l8275
  7098  089C                     l8271:	
  7099  089C  3026               	movlw	38
  7100  089D  022B               	subwf	setDelayOff_GO@value,w
  7101  089E  1803               	skipnc
  7102  089F  28A2               	goto	l8275
  7103                           
  7104                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7105  08A0  082B               	movf	setDelayOff_GO@value,w
  7106  08A1  28A3               	goto	L6
  7107  08A2                     l8275:	
  7108                           ;DelayOff_B1.c: 94: } else {
  7109                           
  7110                           
  7111                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7112  08A2  3005               	movlw	5
  7113  08A3                     L6:	
  7114  08A3  00AC               	movwf	??_setDelayOff_GO
  7115  08A4  082E               	movf	setDelayOff_GO@sw,w
  7116  08A5  3E1A               	addlw	26
  7117  08A6  076C               	addwf	_product,w
  7118  08A7  00AD               	movwf	??_setDelayOff_GO+1
  7119  08A8  082D               	movf	??_setDelayOff_GO+1,w
  7120  08A9  0086               	movwf	6
  7121  08AA  3002               	movlw	2	; select bank4/5
  7122  08AB  0087               	movwf	7
  7123  08AC  082C               	movf	??_setDelayOff_GO,w
  7124  08AD  0081               	movwf	1
  7125                           
  7126                           ;DelayOff_B1.c: 96: }
  7127                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7128  08AE  28BB               	goto	l8281
  7129  08AF                     l8277:	
  7130  08AF  08AA               	movf	setDelayOff_GO@command,f
  7131  08B0  1D03               	skipz
  7132  08B1  28BB               	goto	l8281
  7133                           
  7134                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7135  08B2  082E               	movf	setDelayOff_GO@sw,w
  7136  08B3  3E1A               	addlw	26
  7137  08B4  076C               	addwf	_product,w
  7138  08B5  00AC               	movwf	??_setDelayOff_GO
  7139  08B6  082C               	movf	??_setDelayOff_GO,w
  7140  08B7  0086               	movwf	6
  7141  08B8  3002               	movlw	2	; select bank4/5
  7142  08B9  0087               	movwf	7
  7143  08BA  0181               	clrf	1
  7144  08BB                     l8281:	
  7145                           
  7146                           ;DelayOff_B1.c: 99: }
  7147                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7148  08BB  0872               	movf	_DelayOff,w
  7149  08BC  0086               	movwf	6
  7150  08BD  0187               	clrf	7
  7151  08BE  3000               	movlw	0
  7152  08BF  3FC0               	movwi [0]fsr1
  7153  08C0  3FC1               	movwi [1]fsr1
  7154                           
  7155                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7156  08C1  0872               	movf	_DelayOff,w
  7157  08C2  0086               	movwf	6
  7158  08C3  0187               	clrf	7
  7159  08C4  0181               	clrf	1
  7160  08C5  0008               	return
  7161  08C6                     __end_of_setDelayOff_GO:	
  7162                           
  7163                           	psect	text25
  7164  13A9                     __ptext25:	
  7165 ;; *************** function _DelayTimejudge *****************
  7166 ;; Defined at:
  7167 ;;		line 106 in file "../src/DelayOff_B1.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  value           1    wreg     unsigned char 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  value           1    9[BANK0 ] unsigned char 
  7172 ;;  k               1    8[BANK0 ] unsigned char 
  7173 ;;  j               1    7[BANK0 ] unsigned char 
  7174 ;;  i               1    6[BANK0 ] unsigned char 
  7175 ;; Return value:  Size  Location     Type
  7176 ;;                  1    wreg      unsigned char 
  7177 ;; Registers used:
  7178 ;;		wreg, status,2, status,0, pclath, cstack
  7179 ;; Tracked objects:
  7180 ;;		On entry : 0/0
  7181 ;;		On exit  : 0/0
  7182 ;;		Unchanged: 0/0
  7183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;Total ram usage:        6 bytes
  7189 ;; Hardware stack levels used:    1
  7190 ;; Hardware stack levels required when called:    6
  7191 ;; This function calls:
  7192 ;;		___bmul
  7193 ;; This function is called by:
  7194 ;;		_setDelayOff_GO
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _DelayTimejudge
  7200  13A9                     _DelayTimejudge:	
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7204                           ;DelayTimejudge@value stored from wreg
  7205  13A9  0020               	movlb	0	; select bank0
  7206  13AA  00A9               	movwf	DelayTimejudge@value
  7207                           
  7208                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7209  13AB  3005               	movlw	5
  7210  13AC  00A4               	movwf	??_DelayTimejudge
  7211  13AD  0824               	movf	??_DelayTimejudge,w
  7212  13AE  00A6               	movwf	DelayTimejudge@i
  7213  13AF  01A7               	clrf	DelayTimejudge@j
  7214  13B0  01A8               	clrf	DelayTimejudge@k
  7215                           
  7216                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7217  13B1  3031               	movlw	49
  7218  13B2  0229               	subwf	DelayTimejudge@value,w
  7219  13B3  1803               	skipnc
  7220  13B4  2BD1               	goto	l8065
  7221                           
  7222                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7223  13B5  0829               	movf	DelayTimejudge@value,w
  7224  13B6  390F               	andlw	15
  7225  13B7  00A4               	movwf	??_DelayTimejudge
  7226  13B8  0824               	movf	??_DelayTimejudge,w
  7227  13B9  00A7               	movwf	DelayTimejudge@j
  7228                           
  7229                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7230  13BA  0829               	movf	DelayTimejudge@value,w
  7231  13BB  00A4               	movwf	??_DelayTimejudge
  7232  13BC  3004               	movlw	4
  7233  13BD                     u8055:	
  7234  13BD  36A4               	lsrf	??_DelayTimejudge,f
  7235  13BE  0B89               	decfsz	9,f
  7236  13BF  2BBD               	goto	u8055
  7237  13C0  0824               	movf	??_DelayTimejudge,w
  7238  13C1  390F               	andlw	15
  7239  13C2  00A5               	movwf	??_DelayTimejudge+1
  7240  13C3  0825               	movf	??_DelayTimejudge+1,w
  7241  13C4  00A8               	movwf	DelayTimejudge@k
  7242                           
  7243                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7244  13C5  300A               	movlw	10
  7245  13C6  00A4               	movwf	??_DelayTimejudge
  7246  13C7  0824               	movf	??_DelayTimejudge,w
  7247  13C8  00A0               	movwf	___bmul@multiplicand
  7248  13C9  0828               	movf	DelayTimejudge@k,w
  7249  13CA  319F  27B6         	fcall	___bmul
  7250  13CC  0020               	movlb	0	; select bank0
  7251  13CD  0727               	addwf	DelayTimejudge@j,w
  7252  13CE  00A5               	movwf	??_DelayTimejudge+1
  7253  13CF  0825               	movf	??_DelayTimejudge+1,w
  7254  13D0  00A6               	movwf	DelayTimejudge@i
  7255  13D1                     l8065:	
  7256                           
  7257                           ;DelayOff_B1.c: 112: }
  7258                           ;DelayOff_B1.c: 133: return i;
  7259  13D1  0826               	movf	DelayTimejudge@i,w
  7260  13D2  0008               	return
  7261  13D3                     __end_of_DelayTimejudge:	
  7262                           
  7263                           	psect	text26
  7264  1FB6                     __ptext26:	
  7265 ;; *************** function ___bmul *****************
  7266 ;; Defined at:
  7267 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;  multiplier      1    wreg     unsigned char 
  7270 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7271 ;; Auto vars:     Size  Location     Type
  7272 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7273 ;;  product         1    2[BANK0 ] unsigned char 
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      unsigned char 
  7276 ;; Registers used:
  7277 ;;		wreg, status,2, status,0
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7283 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;Total ram usage:        4 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    5
  7290 ;; This function calls:
  7291 ;;		Nothing
  7292 ;; This function is called by:
  7293 ;;		_DelayTimejudge
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           
  7298                           ;psect for function ___bmul
  7299  1FB6                     ___bmul:	
  7300                           
  7301                           ;incstack = 0
  7302                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7303                           ;___bmul@multiplier stored from wreg
  7304  1FB6  0020               	movlb	0	; select bank0
  7305  1FB7  00A3               	movwf	___bmul@multiplier
  7306  1FB8  01A2               	clrf	___bmul@product
  7307  1FB9                     l8027:	
  7308  1FB9  1C23               	btfss	___bmul@multiplier,0
  7309  1FBA  2FBF               	goto	l8031
  7310  1FBB  0820               	movf	___bmul@multiplicand,w
  7311  1FBC  00A1               	movwf	??___bmul
  7312  1FBD  0821               	movf	??___bmul,w
  7313  1FBE  07A2               	addwf	___bmul@product,f
  7314  1FBF                     l8031:	
  7315  1FBF  1003               	clrc
  7316  1FC0  0DA0               	rlf	___bmul@multiplicand,f
  7317  1FC1  1003               	clrc
  7318  1FC2  0CA3               	rrf	___bmul@multiplier,f
  7319  1FC3  08A3               	movf	___bmul@multiplier,f
  7320  1FC4  1D03               	skipz
  7321  1FC5  2FB9               	goto	l8027
  7322  1FC6  0822               	movf	___bmul@product,w
  7323  1FC7  0008               	return
  7324  1FC8                     __end_of___bmul:	
  7325                           
  7326                           	psect	text27
  7327  14F5                     __ptext27:	
  7328 ;; *************** function _setRFSW_AdjControl *****************
  7329 ;; Defined at:
  7330 ;;		line 426 in file "../src/RF_Control_B1.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;  sw              1    wreg     unsigned char 
  7333 ;; Auto vars:     Size  Location     Type
  7334 ;;  sw              1   70[BANK0 ] unsigned char 
  7335 ;; Return value:  Size  Location     Type
  7336 ;;		None               void
  7337 ;; Registers used:
  7338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7339 ;; Tracked objects:
  7340 ;;		On entry : 0/0
  7341 ;;		On exit  : 0/0
  7342 ;;		Unchanged: 0/0
  7343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;Total ram usage:        3 bytes
  7349 ;; Hardware stack levels used:    1
  7350 ;; Hardware stack levels required when called:   10
  7351 ;; This function calls:
  7352 ;;		_RfSWPointSelect
  7353 ;;		_setRF_DimmerValue
  7354 ;;		_setTxData
  7355 ;; This function is called by:
  7356 ;;		_setControl_Lights_Table
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function _setRFSW_AdjControl
  7362  14F5                     _setRFSW_AdjControl:	
  7363                           
  7364                           ;incstack = 0
  7365                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7366                           ;setRFSW_AdjControl@sw stored from wreg
  7367  14F5  0020               	movlb	0	; select bank0
  7368  14F6  00E6               	movwf	setRFSW_AdjControl@sw
  7369                           
  7370                           ;RF_Control_B1.c: 427: RfSWPointSelect(sw);
  7371  14F7  0866               	movf	setRFSW_AdjControl@sw,w
  7372  14F8  3192  221C  3194   	fcall	_RfSWPointSelect
  7373                           
  7374                           ;RF_Control_B1.c: 428: if (RFSW->Status == 1) {
  7375  14FB  0021               	movlb	1	; select bank1
  7376  14FC  0850               	movf	_RFSW^(0+128),w
  7377  14FD  0086               	movwf	6
  7378  14FE  0187               	clrf	7
  7379  14FF  1C01               	btfss	1,0
  7380  1500  2D09               	goto	l8495
  7381                           
  7382                           ;RF_Control_B1.c: 429: Memory.Modify=1;
  7383  1501  0023               	movlb	3	; select bank3
  7384  1502  1444               	bsf	(_Memory^(0+384)+36),0
  7385                           
  7386                           ;RF_Control_B1.c: 430: setRF_DimmerValue(sw);
  7387  1503  0020               	movlb	0	; select bank0
  7388  1504  0866               	movf	setRFSW_AdjControl@sw,w
  7389  1505  3194  24C0  3194   	fcall	_setRF_DimmerValue
  7390                           
  7391                           ;RF_Control_B1.c: 431: } else {
  7392  1508  2D1B               	goto	l2302
  7393  1509                     l8495:	
  7394                           
  7395                           ;RF_Control_B1.c: 432: product->Data[9]=product->Data[20 + sw];
  7396  1509  0020               	movlb	0	; select bank0
  7397  150A  0866               	movf	setRFSW_AdjControl@sw,w
  7398  150B  3E14               	addlw	20
  7399  150C  076C               	addwf	_product,w
  7400  150D  00E4               	movwf	??_setRFSW_AdjControl
  7401  150E  0864               	movf	??_setRFSW_AdjControl,w
  7402  150F  0086               	movwf	6
  7403  1510  3002               	movlw	2	; select bank4/5
  7404  1511  0087               	movwf	7
  7405  1512  0801               	movf	1,w
  7406  1513  00E5               	movwf	??_setRFSW_AdjControl+1
  7407  1514  086C               	movf	_product,w
  7408  1515  3E09               	addlw	9
  7409  1516  0086               	movwf	6
  7410  1517  3002               	movlw	2	; select bank4/5
  7411  1518  0087               	movwf	7
  7412  1519  0865               	movf	??_setRFSW_AdjControl+1,w
  7413  151A  0081               	movwf	1
  7414  151B                     l2302:	
  7415                           
  7416                           ;RF_Control_B1.c: 433: }
  7417                           ;RF_Control_B1.c: 434: product->Data[17]=product->Data[26 + sw];
  7418  151B  0020               	movlb	0	; select bank0
  7419  151C  0866               	movf	setRFSW_AdjControl@sw,w
  7420  151D  3E1A               	addlw	26
  7421  151E  076C               	addwf	_product,w
  7422  151F  00E4               	movwf	??_setRFSW_AdjControl
  7423  1520  0864               	movf	??_setRFSW_AdjControl,w
  7424  1521  0086               	movwf	6
  7425  1522  3002               	movlw	2	; select bank4/5
  7426  1523  0087               	movwf	7
  7427  1524  0801               	movf	1,w
  7428  1525  00E5               	movwf	??_setRFSW_AdjControl+1
  7429  1526  086C               	movf	_product,w
  7430  1527  3E11               	addlw	17
  7431  1528  0086               	movwf	6
  7432  1529  3002               	movlw	2	; select bank4/5
  7433  152A  0087               	movwf	7
  7434  152B  0865               	movf	??_setRFSW_AdjControl+1,w
  7435  152C  0081               	movwf	1
  7436                           
  7437                           ;RF_Control_B1.c: 435: setTxData();
  7438  152D  3186  260B         	fcall	_setTxData
  7439  152F  0008               	return
  7440  1530                     __end_of_setRFSW_AdjControl:	
  7441                           
  7442                           	psect	text28
  7443  14C0                     __ptext28:	
  7444 ;; *************** function _setRF_DimmerValue *****************
  7445 ;; Defined at:
  7446 ;;		line 446 in file "../src/RF_Control_B1.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  lights          1    wreg     unsigned char 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  lights          1   67[BANK0 ] unsigned char 
  7451 ;; Return value:  Size  Location     Type
  7452 ;;		None               void
  7453 ;; Registers used:
  7454 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7462 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7463 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7464 ;;Total ram usage:        3 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    9
  7467 ;; This function calls:
  7468 ;;		_setDimmerLights_AdjRF
  7469 ;; This function is called by:
  7470 ;;		_setRFSW_AdjControl
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           
  7475                           ;psect for function _setRF_DimmerValue
  7476  14C0                     _setRF_DimmerValue:	
  7477                           
  7478                           ;incstack = 0
  7479                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7480                           ;setRF_DimmerValue@lights stored from wreg
  7481  14C0  0020               	movlb	0	; select bank0
  7482  14C1  00E3               	movwf	setRF_DimmerValue@lights
  7483                           
  7484                           ;RF_Control_B1.c: 447: if (RF_Data[9] > 0x64) {
  7485  14C2  3065               	movlw	101
  7486  14C3  0022               	movlb	2	; select bank2
  7487  14C4  0229               	subwf	(_RF_Data^(0+256)+9),w
  7488  14C5  1C03               	skipc
  7489  14C6  2CCD               	goto	l8365
  7490                           
  7491                           ;RF_Control_B1.c: 448: RF_Data[9] = 0x64;
  7492  14C7  3064               	movlw	100
  7493  14C8  0020               	movlb	0	; select bank0
  7494  14C9  00E1               	movwf	??_setRF_DimmerValue
  7495  14CA  0861               	movf	??_setRF_DimmerValue,w
  7496  14CB  0022               	movlb	2	; select bank2
  7497  14CC  00A9               	movwf	(_RF_Data^(0+256)+9)
  7498  14CD                     l8365:	
  7499                           
  7500                           ;RF_Control_B1.c: 449: }
  7501                           ;RF_Control_B1.c: 450: product->Data[9]=RF_Data[9];
  7502  14CD  0829               	movf	(_RF_Data^(0+256)+9),w
  7503  14CE  0020               	movlb	0	; select bank0
  7504  14CF  00E1               	movwf	??_setRF_DimmerValue
  7505  14D0  086C               	movf	_product,w
  7506  14D1  3E09               	addlw	9
  7507  14D2  0086               	movwf	6
  7508  14D3  3002               	movlw	2	; select bank4/5
  7509  14D4  0087               	movwf	7
  7510  14D5  0861               	movf	??_setRF_DimmerValue,w
  7511  14D6  0081               	movwf	1
  7512                           
  7513                           ;RF_Control_B1.c: 451: product->Data[11]=lights;
  7514  14D7  0863               	movf	setRF_DimmerValue@lights,w
  7515  14D8  00E1               	movwf	??_setRF_DimmerValue
  7516  14D9  086C               	movf	_product,w
  7517  14DA  3E0B               	addlw	11
  7518  14DB  0086               	movwf	6
  7519  14DC  3002               	movlw	2	; select bank4/5
  7520  14DD  0087               	movwf	7
  7521  14DE  0861               	movf	??_setRF_DimmerValue,w
  7522  14DF  0081               	movwf	1
  7523                           
  7524                           ;RF_Control_B1.c: 452: product->Data[(20 + lights)]=product->Data[9];
  7525  14E0  086C               	movf	_product,w
  7526  14E1  3E09               	addlw	9
  7527  14E2  0086               	movwf	6
  7528  14E3  3002               	movlw	2	; select bank4/5
  7529  14E4  0087               	movwf	7
  7530  14E5  0801               	movf	1,w
  7531  14E6  00E1               	movwf	??_setRF_DimmerValue
  7532  14E7  0863               	movf	setRF_DimmerValue@lights,w
  7533  14E8  3E14               	addlw	20
  7534  14E9  076C               	addwf	_product,w
  7535  14EA  00E2               	movwf	??_setRF_DimmerValue+1
  7536  14EB  0862               	movf	??_setRF_DimmerValue+1,w
  7537  14EC  0086               	movwf	6
  7538  14ED  3002               	movlw	2	; select bank4/5
  7539  14EE  0087               	movwf	7
  7540  14EF  0861               	movf	??_setRF_DimmerValue,w
  7541  14F0  0081               	movwf	1
  7542                           
  7543                           ;RF_Control_B1.c: 453: setDimmerLights_AdjRF(lights);
  7544  14F1  0863               	movf	setRF_DimmerValue@lights,w
  7545  14F2  3192  22C2         	fcall	_setDimmerLights_AdjRF
  7546  14F4  0008               	return
  7547  14F5                     __end_of_setRF_DimmerValue:	
  7548                           
  7549                           	psect	text29
  7550  12C2                     __ptext29:	
  7551 ;; *************** function _setDimmerLights_AdjRF *****************
  7552 ;; Defined at:
  7553 ;;		line 690 in file "../src/Dimmer_B1.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;  lights          1    wreg     unsigned char 
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;  lights          1   64[BANK0 ] unsigned char 
  7558 ;; Return value:  Size  Location     Type
  7559 ;;		None               void
  7560 ;; Registers used:
  7561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7562 ;; Tracked objects:
  7563 ;;		On entry : 0/0
  7564 ;;		On exit  : 0/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;Total ram usage:        2 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; Hardware stack levels required when called:    8
  7574 ;; This function calls:
  7575 ;;		_DimmerLightsPointSelect
  7576 ;;		_getPercentValue
  7577 ;; This function is called by:
  7578 ;;		_setRF_DimmerValue
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _setDimmerLights_AdjRF
  7584  12C2                     _setDimmerLights_AdjRF:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7588                           ;setDimmerLights_AdjRF@lights stored from wreg
  7589  12C2  0020               	movlb	0	; select bank0
  7590  12C3  00E0               	movwf	setDimmerLights_AdjRF@lights
  7591                           
  7592                           ;Dimmer_B1.c: 692: DimmerLightsPointSelect(lights);
  7593  12C4  0860               	movf	setDimmerLights_AdjRF@lights,w
  7594  12C5  3191  2131  3192   	fcall	_DimmerLightsPointSelect
  7595                           
  7596                           ;Dimmer_B1.c: 693: DimmerLights->AdjRF = 1;
  7597  12C8  0874               	movf	_DimmerLights,w
  7598  12C9  0086               	movwf	6
  7599  12CA  3001               	movlw	1	; select bank2/3
  7600  12CB  0087               	movwf	7
  7601  12CC  1501               	bsf	1,2
  7602                           
  7603                           ;Dimmer_B1.c: 694: DimmerLights->Signal = 1;
  7604  12CD  0874               	movf	_DimmerLights,w
  7605  12CE  0086               	movwf	6
  7606  12CF  3001               	movlw	1	; select bank2/3
  7607  12D0  0087               	movwf	7
  7608  12D1  1481               	bsf	1,1
  7609                           
  7610                           ;Dimmer_B1.c: 695: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7611  12D2  0020               	movlb	0	; select bank0
  7612  12D3  086C               	movf	_product,w
  7613  12D4  3E09               	addlw	9
  7614  12D5  0086               	movwf	6
  7615  12D6  3002               	movlw	2	; select bank4/5
  7616  12D7  0087               	movwf	7
  7617  12D8  0801               	movf	1,w
  7618  12D9  3188  200C         	fcall	_getPercentValue
  7619  12DB  0020               	movlb	0	; select bank0
  7620  12DC  00DF               	movwf	??_setDimmerLights_AdjRF
  7621  12DD  0874               	movf	_DimmerLights,w
  7622  12DE  3E05               	addlw	5
  7623  12DF  0086               	movwf	6
  7624  12E0  3001               	movlw	1	; select bank2/3
  7625  12E1  0087               	movwf	7
  7626  12E2  085F               	movf	??_setDimmerLights_AdjRF,w
  7627  12E3  0081               	movwf	1
  7628  12E4  0008               	return
  7629  12E5                     __end_of_setDimmerLights_AdjRF:	
  7630                           
  7631                           	psect	text30
  7632  080C                     __ptext30:	
  7633 ;; *************** function _getPercentValue *****************
  7634 ;; Defined at:
  7635 ;;		line 763 in file "../src/Dimmer_B1.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  value           1    wreg     unsigned char 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  value           1   59[BANK0 ] unsigned char 
  7640 ;;  i               3   60[BANK0 ] float 
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      unsigned char 
  7643 ;; Registers used:
  7644 ;;		wreg, status,2, status,0, pclath, cstack
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7652 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7653 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;Total ram usage:        6 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    7
  7657 ;; This function calls:
  7658 ;;		___awtoft
  7659 ;;		___ftadd
  7660 ;;		___ftdiv
  7661 ;;		___ftmul
  7662 ;;		___fttol
  7663 ;; This function is called by:
  7664 ;;		_setDimmerLights_AdjRF
  7665 ;; This function uses a non-reentrant model
  7666 ;;
  7667                           
  7668                           
  7669                           ;psect for function _getPercentValue
  7670  080C                     _getPercentValue:	
  7671                           
  7672                           ;incstack = 0
  7673                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7674                           ;getPercentValue@value stored from wreg
  7675  080C  0020               	movlb	0	; select bank0
  7676  080D  00DB               	movwf	getPercentValue@value
  7677                           
  7678                           ;Dimmer_B1.c: 765: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
  7679  080E  3000               	movlw	0
  7680  080F  00DC               	movwf	getPercentValue@i
  7681  0810  3050               	movlw	80
  7682  0811  00DD               	movwf	getPercentValue@i+1
  7683  0812  3042               	movlw	66
  7684  0813  00DE               	movwf	getPercentValue@i+2
  7685                           
  7686                           ;Dimmer_B1.c: 766: i /= 100;
  7687  0814  3000               	movlw	0
  7688  0815  00AE               	movwf	___ftdiv@f2
  7689  0816  30C8               	movlw	200
  7690  0817  00AF               	movwf	___ftdiv@f2+1
  7691  0818  3042               	movlw	66
  7692  0819  00B0               	movwf	___ftdiv@f2+2
  7693  081A  085C               	movf	getPercentValue@i,w
  7694  081B  00B1               	movwf	___ftdiv@f1
  7695  081C  085D               	movf	getPercentValue@i+1,w
  7696  081D  00B2               	movwf	___ftdiv@f1+1
  7697  081E  085E               	movf	getPercentValue@i+2,w
  7698  081F  00B3               	movwf	___ftdiv@f1+2
  7699  0820  318E  26A8  3188   	fcall	___ftdiv
  7700  0823  0020               	movlb	0	; select bank0
  7701  0824  082E               	movf	?___ftdiv,w
  7702  0825  00DC               	movwf	getPercentValue@i
  7703  0826  082F               	movf	?___ftdiv+1,w
  7704  0827  00DD               	movwf	getPercentValue@i+1
  7705  0828  0830               	movf	?___ftdiv+2,w
  7706  0829  00DE               	movwf	getPercentValue@i+2
  7707                           
  7708                           ;Dimmer_B1.c: 767: return (char) (((100 - value) * i) + ((char)((100-90)*0.8)));
  7709  082A  085B               	movf	getPercentValue@value,w
  7710  082B  00D9               	movwf	??_getPercentValue
  7711  082C  01DA               	clrf	??_getPercentValue+1
  7712  082D  09D9               	comf	??_getPercentValue,f
  7713  082E  09DA               	comf	??_getPercentValue+1,f
  7714  082F  0AD9               	incf	??_getPercentValue,f
  7715  0830  1903               	skipnz
  7716  0831  0ADA               	incf	??_getPercentValue+1,f
  7717  0832  0859               	movf	??_getPercentValue,w
  7718  0833  3E64               	addlw	100
  7719  0834  00A8               	movwf	___awtoft@c
  7720  0835  3000               	movlw	0
  7721  0836  3D5A               	addwfc	??_getPercentValue+1,w
  7722  0837  00A9               	movwf	___awtoft@c+1
  7723  0838  3192  227D  3188   	fcall	___awtoft
  7724  083B  0020               	movlb	0	; select bank0
  7725  083C  0828               	movf	?___awtoft,w
  7726  083D  00B1               	movwf	___ftmul@f2
  7727  083E  0829               	movf	?___awtoft+1,w
  7728  083F  00B2               	movwf	___ftmul@f2+1
  7729  0840  082A               	movf	?___awtoft+2,w
  7730  0841  00B3               	movwf	___ftmul@f2+2
  7731  0842  085C               	movf	getPercentValue@i,w
  7732  0843  00AE               	movwf	___ftmul@f1
  7733  0844  085D               	movf	getPercentValue@i+1,w
  7734  0845  00AF               	movwf	___ftmul@f1+1
  7735  0846  085E               	movf	getPercentValue@i+2,w
  7736  0847  00B0               	movwf	___ftmul@f1+2
  7737  0848  3186  26CA  3188   	fcall	___ftmul
  7738  084B  0020               	movlb	0	; select bank0
  7739  084C  082E               	movf	?___ftmul,w
  7740  084D  00C1               	movwf	___ftadd@f2
  7741  084E  082F               	movf	?___ftmul+1,w
  7742  084F  00C2               	movwf	___ftadd@f2+1
  7743  0850  0830               	movf	?___ftmul+2,w
  7744  0851  00C3               	movwf	___ftadd@f2+2
  7745  0852  3000               	movlw	0
  7746  0853  00BE               	movwf	___ftadd@f1
  7747  0854  3000               	movlw	0
  7748  0855  00BF               	movwf	___ftadd@f1+1
  7749  0856  3041               	movlw	65
  7750  0857  00C0               	movwf	___ftadd@f1+2
  7751  0858  3183  235F  3188   	fcall	___ftadd
  7752  085B  0020               	movlb	0	; select bank0
  7753  085C  083E               	movf	?___ftadd,w
  7754  085D  00CB               	movwf	___fttol@f1
  7755  085E  083F               	movf	?___ftadd+1,w
  7756  085F  00CC               	movwf	___fttol@f1+1
  7757  0860  0840               	movf	?___ftadd+2,w
  7758  0861  00CD               	movwf	___fttol@f1+2
  7759  0862  318D  2507         	fcall	___fttol
  7760  0864  0020               	movlb	0	; select bank0
  7761  0865  084B               	movf	?___fttol,w
  7762  0866  0008               	return
  7763  0867                     __end_of_getPercentValue:	
  7764                           
  7765                           	psect	text31
  7766  06CA                     __ptext31:	
  7767 ;; *************** function ___ftmul *****************
  7768 ;; Defined at:
  7769 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  f1              3   14[BANK0 ] float 
  7772 ;;  f2              3   17[BANK0 ] float 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7775 ;;  sign            1   29[BANK0 ] unsigned char 
  7776 ;;  cntr            1   28[BANK0 ] unsigned char 
  7777 ;;  exp             1   24[BANK0 ] unsigned char 
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  3   14[BANK0 ] float 
  7780 ;; Registers used:
  7781 ;;		wreg, status,2, status,0, pclath, cstack
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7787 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;Total ram usage:       16 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; Hardware stack levels required when called:    6
  7794 ;; This function calls:
  7795 ;;		___ftpack
  7796 ;; This function is called by:
  7797 ;;		_getPercentValue
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function ___ftmul
  7803  06CA                     ___ftmul:	
  7804                           
  7805                           ;incstack = 0
  7806                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7807  06CA  0020               	movlb	0	; select bank0
  7808  06CB  082E               	movf	___ftmul@f1,w
  7809  06CC  00B4               	movwf	??___ftmul
  7810  06CD  082F               	movf	___ftmul@f1+1,w
  7811  06CE  00B5               	movwf	??___ftmul+1
  7812  06CF  0830               	movf	___ftmul@f1+2,w
  7813  06D0  00B6               	movwf	??___ftmul+2
  7814  06D1  1003               	clrc
  7815  06D2  0D35               	rlf	??___ftmul+1,w
  7816  06D3  0D36               	rlf	??___ftmul+2,w
  7817  06D4  00B7               	movwf	??___ftmul+3
  7818  06D5  0837               	movf	??___ftmul+3,w
  7819  06D6  00B8               	movwf	___ftmul@exp
  7820  06D7  08B8               	movf	___ftmul@exp,f
  7821  06D8  1D03               	skipz
  7822  06D9  2EE1               	goto	l5783
  7823  06DA  3000               	movlw	0
  7824  06DB  00AE               	movwf	?___ftmul
  7825  06DC  3000               	movlw	0
  7826  06DD  00AF               	movwf	?___ftmul+1
  7827  06DE  3000               	movlw	0
  7828  06DF  00B0               	movwf	?___ftmul+2
  7829  06E0  0008               	return
  7830  06E1                     l5783:	
  7831  06E1  0831               	movf	___ftmul@f2,w
  7832  06E2  00B4               	movwf	??___ftmul
  7833  06E3  0832               	movf	___ftmul@f2+1,w
  7834  06E4  00B5               	movwf	??___ftmul+1
  7835  06E5  0833               	movf	___ftmul@f2+2,w
  7836  06E6  00B6               	movwf	??___ftmul+2
  7837  06E7  1003               	clrc
  7838  06E8  0D35               	rlf	??___ftmul+1,w
  7839  06E9  0D36               	rlf	??___ftmul+2,w
  7840  06EA  00B7               	movwf	??___ftmul+3
  7841  06EB  0837               	movf	??___ftmul+3,w
  7842  06EC  00BD               	movwf	___ftmul@sign
  7843  06ED  08BD               	movf	___ftmul@sign,f
  7844  06EE  1D03               	skipz
  7845  06EF  2EF7               	goto	l5789
  7846  06F0  3000               	movlw	0
  7847  06F1  00AE               	movwf	?___ftmul
  7848  06F2  3000               	movlw	0
  7849  06F3  00AF               	movwf	?___ftmul+1
  7850  06F4  3000               	movlw	0
  7851  06F5  00B0               	movwf	?___ftmul+2
  7852  06F6  0008               	return
  7853  06F7                     l5789:	
  7854  06F7  083D               	movf	___ftmul@sign,w
  7855  06F8  3E7B               	addlw	123
  7856  06F9  00B4               	movwf	??___ftmul
  7857  06FA  0834               	movf	??___ftmul,w
  7858  06FB  07B8               	addwf	___ftmul@exp,f
  7859  06FC  082E               	movf	___ftmul@f1,w
  7860  06FD  00B4               	movwf	??___ftmul
  7861  06FE  082F               	movf	___ftmul@f1+1,w
  7862  06FF  00B5               	movwf	??___ftmul+1
  7863  0700  0830               	movf	___ftmul@f1+2,w
  7864  0701  00B6               	movwf	??___ftmul+2
  7865  0702  3010               	movlw	16
  7866  0703                     u4435:	
  7867  0703  36B6               	lsrf	??___ftmul+2,f
  7868  0704  0CB5               	rrf	??___ftmul+1,f
  7869  0705  0CB4               	rrf	??___ftmul,f
  7870  0706  0B89               	decfsz	9,f
  7871  0707  2F03               	goto	u4435
  7872  0708  0834               	movf	??___ftmul,w
  7873  0709  00B7               	movwf	??___ftmul+3
  7874  070A  0837               	movf	??___ftmul+3,w
  7875  070B  00BD               	movwf	___ftmul@sign
  7876  070C  0831               	movf	___ftmul@f2,w
  7877  070D  00B4               	movwf	??___ftmul
  7878  070E  0832               	movf	___ftmul@f2+1,w
  7879  070F  00B5               	movwf	??___ftmul+1
  7880  0710  0833               	movf	___ftmul@f2+2,w
  7881  0711  00B6               	movwf	??___ftmul+2
  7882  0712  3010               	movlw	16
  7883  0713                     u4445:	
  7884  0713  36B6               	lsrf	??___ftmul+2,f
  7885  0714  0CB5               	rrf	??___ftmul+1,f
  7886  0715  0CB4               	rrf	??___ftmul,f
  7887  0716  0B89               	decfsz	9,f
  7888  0717  2F13               	goto	u4445
  7889  0718  0834               	movf	??___ftmul,w
  7890  0719  00B7               	movwf	??___ftmul+3
  7891  071A  0837               	movf	??___ftmul+3,w
  7892  071B  06BD               	xorwf	___ftmul@sign,f
  7893  071C  3080               	movlw	128
  7894  071D  00B4               	movwf	??___ftmul
  7895  071E  0834               	movf	??___ftmul,w
  7896  071F  05BD               	andwf	___ftmul@sign,f
  7897  0720  17AF               	bsf	___ftmul@f1+1,7
  7898  0721  17B2               	bsf	___ftmul@f2+1,7
  7899  0722  30FF               	movlw	255
  7900  0723  05B1               	andwf	___ftmul@f2,f
  7901  0724  30FF               	movlw	255
  7902  0725  05B2               	andwf	___ftmul@f2+1,f
  7903  0726  3000               	movlw	0
  7904  0727  05B3               	andwf	___ftmul@f2+2,f
  7905  0728  3000               	movlw	0
  7906  0729  00B9               	movwf	___ftmul@f3_as_product
  7907  072A  3000               	movlw	0
  7908  072B  00BA               	movwf	___ftmul@f3_as_product+1
  7909  072C  3000               	movlw	0
  7910  072D  00BB               	movwf	___ftmul@f3_as_product+2
  7911  072E  3007               	movlw	7
  7912  072F  00B4               	movwf	??___ftmul
  7913  0730  0834               	movf	??___ftmul,w
  7914  0731  00BC               	movwf	___ftmul@cntr
  7915  0732                     l5801:	
  7916  0732  1C2E               	btfss	___ftmul@f1,0
  7917  0733  2F3A               	goto	l5805
  7918  0734  0831               	movf	___ftmul@f2,w
  7919  0735  07B9               	addwf	___ftmul@f3_as_product,f
  7920  0736  0832               	movf	___ftmul@f2+1,w
  7921  0737  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7922  0738  0833               	movf	___ftmul@f2+2,w
  7923  0739  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7924  073A                     l5805:	
  7925  073A  3001               	movlw	1
  7926  073B                     u4465:	
  7927  073B  36B0               	lsrf	___ftmul@f1+2,f
  7928  073C  0CAF               	rrf	___ftmul@f1+1,f
  7929  073D  0CAE               	rrf	___ftmul@f1,f
  7930  073E  0B89               	decfsz	9,f
  7931  073F  2F3B               	goto	u4465
  7932  0740  3001               	movlw	1
  7933  0741                     u4475:	
  7934  0741  35B1               	lslf	___ftmul@f2,f
  7935  0742  0DB2               	rlf	___ftmul@f2+1,f
  7936  0743  0DB3               	rlf	___ftmul@f2+2,f
  7937  0744  0B89               	decfsz	9,f
  7938  0745  2F41               	goto	u4475
  7939  0746  3001               	movlw	1
  7940  0747  02BC               	subwf	___ftmul@cntr,f
  7941  0748  1D03               	btfss	3,2
  7942  0749  2F32               	goto	l5801
  7943  074A  3009               	movlw	9
  7944  074B  00B4               	movwf	??___ftmul
  7945  074C  0834               	movf	??___ftmul,w
  7946  074D  00BC               	movwf	___ftmul@cntr
  7947  074E                     l5813:	
  7948  074E  1C2E               	btfss	___ftmul@f1,0
  7949  074F  2F56               	goto	l5817
  7950  0750  0831               	movf	___ftmul@f2,w
  7951  0751  07B9               	addwf	___ftmul@f3_as_product,f
  7952  0752  0832               	movf	___ftmul@f2+1,w
  7953  0753  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7954  0754  0833               	movf	___ftmul@f2+2,w
  7955  0755  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7956  0756                     l5817:	
  7957  0756  3001               	movlw	1
  7958  0757                     u4505:	
  7959  0757  36B0               	lsrf	___ftmul@f1+2,f
  7960  0758  0CAF               	rrf	___ftmul@f1+1,f
  7961  0759  0CAE               	rrf	___ftmul@f1,f
  7962  075A  0B89               	decfsz	9,f
  7963  075B  2F57               	goto	u4505
  7964  075C  3001               	movlw	1
  7965  075D                     u4515:	
  7966  075D  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7967  075E  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7968  075F  0CB9               	rrf	___ftmul@f3_as_product,f
  7969  0760  0B89               	decfsz	9,f
  7970  0761  2F5D               	goto	u4515
  7971  0762  3001               	movlw	1
  7972  0763  02BC               	subwf	___ftmul@cntr,f
  7973  0764  1D03               	btfss	3,2
  7974  0765  2F4E               	goto	l5813
  7975  0766  0839               	movf	___ftmul@f3_as_product,w
  7976  0767  00A0               	movwf	___ftpack@arg
  7977  0768  083A               	movf	___ftmul@f3_as_product+1,w
  7978  0769  00A1               	movwf	___ftpack@arg+1
  7979  076A  083B               	movf	___ftmul@f3_as_product+2,w
  7980  076B  00A2               	movwf	___ftpack@arg+2
  7981  076C  0838               	movf	___ftmul@exp,w
  7982  076D  00B4               	movwf	??___ftmul
  7983  076E  0834               	movf	??___ftmul,w
  7984  076F  00A3               	movwf	___ftpack@exp
  7985  0770  083D               	movf	___ftmul@sign,w
  7986  0771  00B5               	movwf	??___ftmul+1
  7987  0772  0835               	movf	??___ftmul+1,w
  7988  0773  00A4               	movwf	___ftpack@sign
  7989  0774  3189  2126         	fcall	___ftpack
  7990  0776  0020               	movlb	0	; select bank0
  7991  0777  0820               	movf	?___ftpack,w
  7992  0778  00AE               	movwf	?___ftmul
  7993  0779  0821               	movf	?___ftpack+1,w
  7994  077A  00AF               	movwf	?___ftmul+1
  7995  077B  0822               	movf	?___ftpack+2,w
  7996  077C  00B0               	movwf	?___ftmul+2
  7997  077D  0008               	return
  7998  077E                     __end_of___ftmul:	
  7999                           
  8000                           	psect	text32
  8001  035F                     __ptext32:	
  8002 ;; *************** function ___ftadd *****************
  8003 ;; Defined at:
  8004 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  f1              3   30[BANK0 ] float 
  8007 ;;  f2              3   33[BANK0 ] float 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  exp1            1   42[BANK0 ] unsigned char 
  8010 ;;  exp2            1   41[BANK0 ] unsigned char 
  8011 ;;  sign            1   40[BANK0 ] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  3   30[BANK0 ] float 
  8014 ;; Registers used:
  8015 ;;		wreg, status,2, status,0, pclath, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8021 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;Total ram usage:       13 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    6
  8028 ;; This function calls:
  8029 ;;		___ftpack
  8030 ;; This function is called by:
  8031 ;;		_getPercentValue
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function ___ftadd
  8037  035F                     ___ftadd:	
  8038                           
  8039                           ;incstack = 0
  8040                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8041  035F  0020               	movlb	0	; select bank0
  8042  0360  083E               	movf	___ftadd@f1,w
  8043  0361  00C4               	movwf	??___ftadd
  8044  0362  083F               	movf	___ftadd@f1+1,w
  8045  0363  00C5               	movwf	??___ftadd+1
  8046  0364  0840               	movf	___ftadd@f1+2,w
  8047  0365  00C6               	movwf	??___ftadd+2
  8048  0366  1003               	clrc
  8049  0367  0D45               	rlf	??___ftadd+1,w
  8050  0368  0D46               	rlf	??___ftadd+2,w
  8051  0369  00C7               	movwf	??___ftadd+3
  8052  036A  0847               	movf	??___ftadd+3,w
  8053  036B  00CA               	movwf	___ftadd@exp1
  8054  036C  0841               	movf	___ftadd@f2,w
  8055  036D  00C4               	movwf	??___ftadd
  8056  036E  0842               	movf	___ftadd@f2+1,w
  8057  036F  00C5               	movwf	??___ftadd+1
  8058  0370  0843               	movf	___ftadd@f2+2,w
  8059  0371  00C6               	movwf	??___ftadd+2
  8060  0372  1003               	clrc
  8061  0373  0D45               	rlf	??___ftadd+1,w
  8062  0374  0D46               	rlf	??___ftadd+2,w
  8063  0375  00C7               	movwf	??___ftadd+3
  8064  0376  0847               	movf	??___ftadd+3,w
  8065  0377  00C9               	movwf	___ftadd@exp2
  8066  0378  084A               	movf	___ftadd@exp1,w
  8067  0379  1903               	btfsc	3,2
  8068  037A  2B87               	goto	l5671
  8069  037B  0849               	movf	___ftadd@exp2,w
  8070  037C  024A               	subwf	___ftadd@exp1,w
  8071  037D  1803               	skipnc
  8072  037E  2B8E               	goto	l5675
  8073  037F  034A               	decf	___ftadd@exp1,w
  8074  0380  3AFF               	xorlw	255
  8075  0381  0749               	addwf	___ftadd@exp2,w
  8076  0382  00C4               	movwf	??___ftadd
  8077  0383  3019               	movlw	25
  8078  0384  0244               	subwf	??___ftadd,w
  8079  0385  1C03               	skipc
  8080  0386  2B8E               	goto	l5675
  8081  0387                     l5671:	
  8082  0387  0841               	movf	___ftadd@f2,w
  8083  0388  00BE               	movwf	?___ftadd
  8084  0389  0842               	movf	___ftadd@f2+1,w
  8085  038A  00BF               	movwf	?___ftadd+1
  8086  038B  0843               	movf	___ftadd@f2+2,w
  8087  038C  00C0               	movwf	?___ftadd+2
  8088  038D  0008               	return
  8089  038E                     l5675:	
  8090  038E  0849               	movf	___ftadd@exp2,w
  8091  038F  1903               	btfsc	3,2
  8092  0390  0008               	return
  8093  0391  084A               	movf	___ftadd@exp1,w
  8094  0392  0249               	subwf	___ftadd@exp2,w
  8095  0393  1803               	skipnc
  8096  0394  2B9D               	goto	l5681
  8097  0395  0349               	decf	___ftadd@exp2,w
  8098  0396  3AFF               	xorlw	255
  8099  0397  074A               	addwf	___ftadd@exp1,w
  8100  0398  00C4               	movwf	??___ftadd
  8101  0399  3019               	movlw	25
  8102  039A  0244               	subwf	??___ftadd,w
  8103  039B  1803               	btfsc	3,0
  8104  039C  0008               	return
  8105  039D                     l5681:	
  8106  039D  3006               	movlw	6
  8107  039E  00C4               	movwf	??___ftadd
  8108  039F  0844               	movf	??___ftadd,w
  8109  03A0  00C8               	movwf	___ftadd@sign
  8110  03A1  1BC0               	btfsc	___ftadd@f1+2,7
  8111  03A2  17C8               	bsf	___ftadd@sign,7
  8112  03A3  1BC3               	btfsc	___ftadd@f2+2,7
  8113  03A4  1748               	bsf	___ftadd@sign,6
  8114  03A5  17BF               	bsf	___ftadd@f1+1,7
  8115  03A6  30FF               	movlw	255
  8116  03A7  05BE               	andwf	___ftadd@f1,f
  8117  03A8  30FF               	movlw	255
  8118  03A9  05BF               	andwf	___ftadd@f1+1,f
  8119  03AA  3000               	movlw	0
  8120  03AB  05C0               	andwf	___ftadd@f1+2,f
  8121  03AC  17C2               	bsf	___ftadd@f2+1,7
  8122  03AD  30FF               	movlw	255
  8123  03AE  05C1               	andwf	___ftadd@f2,f
  8124  03AF  30FF               	movlw	255
  8125  03B0  05C2               	andwf	___ftadd@f2+1,f
  8126  03B1  3000               	movlw	0
  8127  03B2  05C3               	andwf	___ftadd@f2+2,f
  8128  03B3  0849               	movf	___ftadd@exp2,w
  8129  03B4  024A               	subwf	___ftadd@exp1,w
  8130  03B5  1803               	skipnc
  8131  03B6  2BD9               	goto	l5703
  8132  03B7                     l5693:	
  8133  03B7  3001               	movlw	1
  8134  03B8                     u4195:	
  8135  03B8  35C1               	lslf	___ftadd@f2,f
  8136  03B9  0DC2               	rlf	___ftadd@f2+1,f
  8137  03BA  0DC3               	rlf	___ftadd@f2+2,f
  8138  03BB  0B89               	decfsz	9,f
  8139  03BC  2BB8               	goto	u4195
  8140  03BD  3001               	movlw	1
  8141  03BE  02C9               	subwf	___ftadd@exp2,f
  8142  03BF  0849               	movf	___ftadd@exp2,w
  8143  03C0  064A               	xorwf	___ftadd@exp1,w
  8144  03C1  1903               	skipnz
  8145  03C2  2BD4               	goto	l5701
  8146  03C3  3001               	movlw	1
  8147  03C4  02C8               	subwf	___ftadd@sign,f
  8148  03C5  0848               	movf	___ftadd@sign,w
  8149  03C6  3907               	andlw	7
  8150  03C7  1903               	btfsc	3,2
  8151  03C8  2BD4               	goto	l5701
  8152  03C9  2BB7               	goto	l5693
  8153  03CA                     l5699:	
  8154  03CA  3001               	movlw	1
  8155  03CB                     u4225:	
  8156  03CB  36C0               	lsrf	___ftadd@f1+2,f
  8157  03CC  0CBF               	rrf	___ftadd@f1+1,f
  8158  03CD  0CBE               	rrf	___ftadd@f1,f
  8159  03CE  0B89               	decfsz	9,f
  8160  03CF  2BCB               	goto	u4225
  8161  03D0  3001               	movlw	1
  8162  03D1  00C4               	movwf	??___ftadd
  8163  03D2  0844               	movf	??___ftadd,w
  8164  03D3  07CA               	addwf	___ftadd@exp1,f
  8165  03D4                     l5701:	
  8166  03D4  084A               	movf	___ftadd@exp1,w
  8167  03D5  0649               	xorwf	___ftadd@exp2,w
  8168  03D6  1903               	btfsc	3,2
  8169  03D7  2BFE               	goto	l3050
  8170  03D8  2BCA               	goto	l5699
  8171  03D9                     l5703:	
  8172  03D9  084A               	movf	___ftadd@exp1,w
  8173  03DA  0249               	subwf	___ftadd@exp2,w
  8174  03DB  1803               	skipnc
  8175  03DC  2BFE               	goto	l3050
  8176  03DD                     l5705:	
  8177  03DD  3001               	movlw	1
  8178  03DE                     u4255:	
  8179  03DE  35BE               	lslf	___ftadd@f1,f
  8180  03DF  0DBF               	rlf	___ftadd@f1+1,f
  8181  03E0  0DC0               	rlf	___ftadd@f1+2,f
  8182  03E1  0B89               	decfsz	9,f
  8183  03E2  2BDE               	goto	u4255
  8184  03E3  3001               	movlw	1
  8185  03E4  02CA               	subwf	___ftadd@exp1,f
  8186  03E5  0849               	movf	___ftadd@exp2,w
  8187  03E6  064A               	xorwf	___ftadd@exp1,w
  8188  03E7  1903               	skipnz
  8189  03E8  2BFA               	goto	l5713
  8190  03E9  3001               	movlw	1
  8191  03EA  02C8               	subwf	___ftadd@sign,f
  8192  03EB  0848               	movf	___ftadd@sign,w
  8193  03EC  3907               	andlw	7
  8194  03ED  1903               	btfsc	3,2
  8195  03EE  2BFA               	goto	l5713
  8196  03EF  2BDD               	goto	l5705
  8197  03F0                     l5711:	
  8198  03F0  3001               	movlw	1
  8199  03F1                     u4285:	
  8200  03F1  36C3               	lsrf	___ftadd@f2+2,f
  8201  03F2  0CC2               	rrf	___ftadd@f2+1,f
  8202  03F3  0CC1               	rrf	___ftadd@f2,f
  8203  03F4  0B89               	decfsz	9,f
  8204  03F5  2BF1               	goto	u4285
  8205  03F6  3001               	movlw	1
  8206  03F7  00C4               	movwf	??___ftadd
  8207  03F8  0844               	movf	??___ftadd,w
  8208  03F9  07C9               	addwf	___ftadd@exp2,f
  8209  03FA                     l5713:	
  8210  03FA  084A               	movf	___ftadd@exp1,w
  8211  03FB  0649               	xorwf	___ftadd@exp2,w
  8212  03FC  1D03               	skipz
  8213  03FD  2BF0               	goto	l5711
  8214  03FE                     l3050:	
  8215  03FE  1FC8               	btfss	___ftadd@sign,7
  8216  03FF  2C10               	goto	l5717
  8217  0400  30FF               	movlw	255
  8218  0401  06BE               	xorwf	___ftadd@f1,f
  8219  0402  30FF               	movlw	255
  8220  0403  06BF               	xorwf	___ftadd@f1+1,f
  8221  0404  30FF               	movlw	255
  8222  0405  06C0               	xorwf	___ftadd@f1+2,f
  8223  0406  3001               	movlw	1
  8224  0407  07BE               	addwf	___ftadd@f1,f
  8225  0408  3000               	movlw	0
  8226  0409  1803               	skipnc
  8227  040A  3001               	movlw	1
  8228  040B  07BF               	addwf	___ftadd@f1+1,f
  8229  040C  3000               	movlw	0
  8230  040D  1803               	skipnc
  8231  040E  3001               	movlw	1
  8232  040F  07C0               	addwf	___ftadd@f1+2,f
  8233  0410                     l5717:	
  8234  0410  1F48               	btfss	___ftadd@sign,6
  8235  0411  2C22               	goto	l5721
  8236  0412  30FF               	movlw	255
  8237  0413  06C1               	xorwf	___ftadd@f2,f
  8238  0414  30FF               	movlw	255
  8239  0415  06C2               	xorwf	___ftadd@f2+1,f
  8240  0416  30FF               	movlw	255
  8241  0417  06C3               	xorwf	___ftadd@f2+2,f
  8242  0418  3001               	movlw	1
  8243  0419  07C1               	addwf	___ftadd@f2,f
  8244  041A  3000               	movlw	0
  8245  041B  1803               	skipnc
  8246  041C  3001               	movlw	1
  8247  041D  07C2               	addwf	___ftadd@f2+1,f
  8248  041E  3000               	movlw	0
  8249  041F  1803               	skipnc
  8250  0420  3001               	movlw	1
  8251  0421  07C3               	addwf	___ftadd@f2+2,f
  8252  0422                     l5721:	
  8253  0422  01C8               	clrf	___ftadd@sign
  8254  0423  083E               	movf	___ftadd@f1,w
  8255  0424  07C1               	addwf	___ftadd@f2,f
  8256  0425  083F               	movf	___ftadd@f1+1,w
  8257  0426  3DC2               	addwfc	___ftadd@f2+1,f
  8258  0427  0840               	movf	___ftadd@f1+2,w
  8259  0428  3DC3               	addwfc	___ftadd@f2+2,f
  8260  0429  1FC3               	btfss	___ftadd@f2+2,7
  8261  042A  2C3D               	goto	l5731
  8262  042B  30FF               	movlw	255
  8263  042C  06C1               	xorwf	___ftadd@f2,f
  8264  042D  30FF               	movlw	255
  8265  042E  06C2               	xorwf	___ftadd@f2+1,f
  8266  042F  30FF               	movlw	255
  8267  0430  06C3               	xorwf	___ftadd@f2+2,f
  8268  0431  3001               	movlw	1
  8269  0432  07C1               	addwf	___ftadd@f2,f
  8270  0433  3000               	movlw	0
  8271  0434  1803               	skipnc
  8272  0435  3001               	movlw	1
  8273  0436  07C2               	addwf	___ftadd@f2+1,f
  8274  0437  3000               	movlw	0
  8275  0438  1803               	skipnc
  8276  0439  3001               	movlw	1
  8277  043A  07C3               	addwf	___ftadd@f2+2,f
  8278  043B  01C8               	clrf	___ftadd@sign
  8279  043C  0AC8               	incf	___ftadd@sign,f
  8280  043D                     l5731:	
  8281  043D  0841               	movf	___ftadd@f2,w
  8282  043E  00A0               	movwf	___ftpack@arg
  8283  043F  0842               	movf	___ftadd@f2+1,w
  8284  0440  00A1               	movwf	___ftpack@arg+1
  8285  0441  0843               	movf	___ftadd@f2+2,w
  8286  0442  00A2               	movwf	___ftpack@arg+2
  8287  0443  084A               	movf	___ftadd@exp1,w
  8288  0444  00C4               	movwf	??___ftadd
  8289  0445  0844               	movf	??___ftadd,w
  8290  0446  00A3               	movwf	___ftpack@exp
  8291  0447  0848               	movf	___ftadd@sign,w
  8292  0448  00C5               	movwf	??___ftadd+1
  8293  0449  0845               	movf	??___ftadd+1,w
  8294  044A  00A4               	movwf	___ftpack@sign
  8295  044B  3189  2126         	fcall	___ftpack
  8296  044D  0020               	movlb	0	; select bank0
  8297  044E  0820               	movf	?___ftpack,w
  8298  044F  00BE               	movwf	?___ftadd
  8299  0450  0821               	movf	?___ftpack+1,w
  8300  0451  00BF               	movwf	?___ftadd+1
  8301  0452  0822               	movf	?___ftpack+2,w
  8302  0453  00C0               	movwf	?___ftadd+2
  8303  0454  0008               	return
  8304  0455                     __end_of___ftadd:	
  8305                           
  8306                           	psect	text33
  8307  1F82                     __ptext33:	
  8308 ;; *************** function _getBuz_GO *****************
  8309 ;; Defined at:
  8310 ;;		line 82 in file "../src/Buzzer_B1.c"
  8311 ;; Parameters:    Size  Location     Type
  8312 ;;		None
  8313 ;; Auto vars:     Size  Location     Type
  8314 ;;  i               2    4[BANK0 ] int 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  2    0[BANK0 ] int 
  8317 ;; Registers used:
  8318 ;;		wreg, status,2, status,0
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8324 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;Total ram usage:        6 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; Hardware stack levels required when called:    5
  8331 ;; This function calls:
  8332 ;;		Nothing
  8333 ;; This function is called by:
  8334 ;;		_setRF_Main
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           
  8339                           ;psect for function _getBuz_GO
  8340  1F82                     _getBuz_GO:	
  8341                           
  8342                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8343                           
  8344                           ;incstack = 0
  8345                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8346  1F82  0021               	movlb	1	; select bank1
  8347  1F83  0C32               	rrf	_Buz1^(0+128),w
  8348  1F84  3901               	andlw	1
  8349  1F85  0020               	movlb	0	; select bank0
  8350  1F86  00A2               	movwf	??_getBuz_GO
  8351  1F87  01A3               	clrf	??_getBuz_GO+1
  8352  1F88  0822               	movf	??_getBuz_GO,w
  8353  1F89  00A4               	movwf	getBuz_GO@i
  8354  1F8A  0823               	movf	??_getBuz_GO+1,w
  8355  1F8B  00A5               	movwf	getBuz_GO@i+1
  8356                           
  8357                           ;Buzzer_B1.c: 84: return i;
  8358  1F8C  0825               	movf	getBuz_GO@i+1,w
  8359  1F8D  01A1               	clrf	?_getBuz_GO+1
  8360  1F8E  07A1               	addwf	?_getBuz_GO+1,f
  8361  1F8F  0824               	movf	getBuz_GO@i,w
  8362  1F90  01A0               	clrf	?_getBuz_GO
  8363  1F91  07A0               	addwf	?_getBuz_GO,f
  8364  1F92  0008               	return
  8365  1F93                     __end_of_getBuz_GO:	
  8366                           
  8367                           	psect	text34
  8368  11C0                     __ptext34:	
  8369 ;; *************** function ___wmul *****************
  8370 ;; Defined at:
  8371 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8374 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  product         2    4[BANK0 ] unsigned int 
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  2    0[BANK0 ] unsigned int 
  8379 ;; Registers used:
  8380 ;;		wreg, status,2, status,0
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8386 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;Total ram usage:        6 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    5
  8393 ;; This function calls:
  8394 ;;		Nothing
  8395 ;; This function is called by:
  8396 ;;		_setRF_Main
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           
  8401                           ;psect for function ___wmul
  8402  11C0                     ___wmul:	
  8403                           
  8404                           ;incstack = 0
  8405                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8406  11C0  0020               	movlb	0	; select bank0
  8407  11C1  01A4               	clrf	___wmul@product
  8408  11C2  01A5               	clrf	___wmul@product+1
  8409  11C3                     l9019:	
  8410  11C3  1C20               	btfss	___wmul@multiplier,0
  8411  11C4  29C9               	goto	l2860
  8412  11C5  0822               	movf	___wmul@multiplicand,w
  8413  11C6  07A4               	addwf	___wmul@product,f
  8414  11C7  0823               	movf	___wmul@multiplicand+1,w
  8415  11C8  3DA5               	addwfc	___wmul@product+1,f
  8416  11C9                     l2860:	
  8417  11C9  3001               	movlw	1
  8418  11CA                     u9525:	
  8419  11CA  35A2               	lslf	___wmul@multiplicand,f
  8420  11CB  0DA3               	rlf	___wmul@multiplicand+1,f
  8421  11CC  0B89               	decfsz	9,f
  8422  11CD  29CA               	goto	u9525
  8423  11CE  3001               	movlw	1
  8424  11CF                     u9535:	
  8425  11CF  36A1               	lsrf	___wmul@multiplier+1,f
  8426  11D0  0CA0               	rrf	___wmul@multiplier,f
  8427  11D1  0B89               	decfsz	9,f
  8428  11D2  29CF               	goto	u9535
  8429  11D3  0821               	movf	___wmul@multiplier+1,w
  8430  11D4  0420               	iorwf	___wmul@multiplier,w
  8431  11D5  1D03               	skipz
  8432  11D6  29C3               	goto	l9019
  8433  11D7  0825               	movf	___wmul@product+1,w
  8434  11D8  01A1               	clrf	?___wmul+1
  8435  11D9  07A1               	addwf	?___wmul+1,f
  8436  11DA  0824               	movf	___wmul@product,w
  8437  11DB  01A0               	clrf	?___wmul
  8438  11DC  07A0               	addwf	?___wmul,f
  8439  11DD  0008               	return
  8440  11DE                     __end_of___wmul:	
  8441                           
  8442                           	psect	text35
  8443  0987                     __ptext35:	
  8444 ;; *************** function _CC2500_TxData *****************
  8445 ;; Defined at:
  8446 ;;		line 32 in file "../src/CC2500_B1.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;		None
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8451 ;; Return value:  Size  Location     Type
  8452 ;;		None               void
  8453 ;; Registers used:
  8454 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8455 ;; Tracked objects:
  8456 ;;		On entry : 0/0
  8457 ;;		On exit  : 0/0
  8458 ;;		Unchanged: 0/0
  8459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;Total ram usage:        2 bytes
  8465 ;; Hardware stack levels used:    1
  8466 ;; Hardware stack levels required when called:    7
  8467 ;; This function calls:
  8468 ;;		_CC2500_WriteByte
  8469 ;;		_CC2500_WriteCommand
  8470 ;;		_Timeout_Counter
  8471 ;;		_set_TimeoutCleared
  8472 ;; This function is called by:
  8473 ;;		_setRF_Main
  8474 ;; This function uses a non-reentrant model
  8475 ;;
  8476                           
  8477                           
  8478                           ;psect for function _CC2500_TxData
  8479  0987                     _CC2500_TxData:	
  8480                           
  8481                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8482                           ;CC2500_B1.c: 35: RC4 = 0;
  8483                           
  8484                           ;incstack = 0
  8485                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8486  0987  0020               	movlb	0	; select bank0
  8487  0988  120E               	bcf	14,4	;volatile
  8488                           
  8489                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8490  0989  307F               	movlw	127
  8491  098A  00A4               	movwf	??_CC2500_TxData
  8492  098B  0824               	movf	??_CC2500_TxData,w
  8493  098C  0021               	movlb	1	; select bank1
  8494  098D  00D3               	movwf	_SPI0Buffer^(0+128)
  8495                           
  8496                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8497  098E  2992               	goto	l8617
  8498  098F                     l8615:	
  8499                           
  8500                           ;CC2500_B1.c: 38: Timeout_Counter();
  8501  098F  3190  2072  3189   	fcall	_Timeout_Counter
  8502  0992                     l8617:	
  8503  0992  0020               	movlb	0	; select bank0
  8504  0993  1D0E               	btfss	14,2	;volatile
  8505  0994  2998               	goto	l8621
  8506  0995  0021               	movlb	1	; select bank1
  8507  0996  1D2F               	btfss	(_myMain^(0+128)+15),2
  8508  0997  298F               	goto	l8615
  8509  0998                     l8621:	
  8510                           
  8511                           ;CC2500_B1.c: 39: };
  8512                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8513  0998  319E  260D  3189   	fcall	_set_TimeoutCleared
  8514                           
  8515                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8516  099B  3190  20CA  3189   	fcall	_CC2500_WriteByte
  8517                           
  8518                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8519  099E  0021               	movlb	1	; select bank1
  8520  099F  0854               	movf	_Tx_Length^(0+128),w
  8521  09A0  0020               	movlb	0	; select bank0
  8522  09A1  00A4               	movwf	??_CC2500_TxData
  8523  09A2  0824               	movf	??_CC2500_TxData,w
  8524  09A3  0021               	movlb	1	; select bank1
  8525  09A4  00D3               	movwf	_SPI0Buffer^(0+128)
  8526                           
  8527                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8528  09A5  3190  20CA  3189   	fcall	_CC2500_WriteByte
  8529                           
  8530                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8531  09A8  0020               	movlb	0	; select bank0
  8532  09A9  01A5               	clrf	CC2500_TxData@loop_e
  8533  09AA                     l8635:	
  8534  09AA  0021               	movlb	1	; select bank1
  8535  09AB  0854               	movf	_Tx_Length^(0+128),w
  8536  09AC  0020               	movlb	0	; select bank0
  8537  09AD  0225               	subwf	CC2500_TxData@loop_e,w
  8538  09AE  1803               	btfsc	3,0
  8539  09AF  29C3               	goto	l283
  8540                           
  8541                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8542  09B0  0825               	movf	CC2500_TxData@loop_e,w
  8543  09B1  3E20               	addlw	_RF_Data& (0+255)
  8544  09B2  0086               	movwf	6
  8545  09B3  3001               	movlw	1	; select bank2/3
  8546  09B4  0087               	movwf	7
  8547  09B5  0801               	movf	1,w
  8548  09B6  00A4               	movwf	??_CC2500_TxData
  8549  09B7  0824               	movf	??_CC2500_TxData,w
  8550  09B8  0021               	movlb	1	; select bank1
  8551  09B9  00D3               	movwf	_SPI0Buffer^(0+128)
  8552                           
  8553                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8554  09BA  3190  20CA  3189   	fcall	_CC2500_WriteByte
  8555  09BD  3001               	movlw	1
  8556  09BE  0020               	movlb	0	; select bank0
  8557  09BF  00A4               	movwf	??_CC2500_TxData
  8558  09C0  0824               	movf	??_CC2500_TxData,w
  8559  09C1  07A5               	addwf	CC2500_TxData@loop_e,f
  8560  09C2  29AA               	goto	l8635
  8561  09C3                     l283:	
  8562                           
  8563                           ;CC2500_B1.c: 48: }
  8564                           ;CC2500_B1.c: 49: RC4 = 1;
  8565  09C3  160E               	bsf	14,4	;volatile
  8566                           
  8567                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8568  09C4  3035               	movlw	53
  8569  09C5  3190  20FD  3189   	fcall	_CC2500_WriteCommand
  8570                           
  8571                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8572  09C8  29CC               	goto	l8641
  8573  09C9                     l8639:	
  8574                           
  8575                           ;CC2500_B1.c: 52: Timeout_Counter();
  8576  09C9  3190  2072  3189   	fcall	_Timeout_Counter
  8577  09CC                     l8641:	
  8578  09CC  0020               	movlb	0	; select bank0
  8579  09CD  180D               	btfsc	13,0	;volatile
  8580  09CE  29D2               	goto	l8645
  8581  09CF  0021               	movlb	1	; select bank1
  8582  09D0  1D2F               	btfss	(_myMain^(0+128)+15),2
  8583  09D1  29C9               	goto	l8639
  8584  09D2                     l8645:	
  8585                           
  8586                           ;CC2500_B1.c: 53: };
  8587                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8588  09D2  319E  260D  3189   	fcall	_set_TimeoutCleared
  8589                           
  8590                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8591  09D5  29D9               	goto	l8649
  8592  09D6                     l8647:	
  8593                           
  8594                           ;CC2500_B1.c: 57: Timeout_Counter();
  8595  09D6  3190  2072  3189   	fcall	_Timeout_Counter
  8596  09D9                     l8649:	
  8597  09D9  0020               	movlb	0	; select bank0
  8598  09DA  1C0D               	btfss	13,0	;volatile
  8599  09DB  29DF               	goto	l8653
  8600  09DC  0021               	movlb	1	; select bank1
  8601  09DD  1D2F               	btfss	(_myMain^(0+128)+15),2
  8602  09DE  29D6               	goto	l8647
  8603  09DF                     l8653:	
  8604                           
  8605                           ;CC2500_B1.c: 58: };
  8606                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8607  09DF  319E  260D  3189   	fcall	_set_TimeoutCleared
  8608                           
  8609                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x36);
  8610  09E2  3036               	movlw	54
  8611  09E3  3190  20FD  3189   	fcall	_CC2500_WriteCommand
  8612                           
  8613                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3B);
  8614  09E6  303B               	movlw	59
  8615  09E7  3190  20FD         	fcall	_CC2500_WriteCommand
  8616                           
  8617                           ;CC2500_B1.c: 65: Transceive_OK = 1;
  8618  09E9  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8619  09EA  0008               	return
  8620  09EB                     __end_of_CC2500_TxData:	
  8621                           
  8622                           	psect	text36
  8623  0C0B                     __ptext36:	
  8624 ;; *************** function _CC2500_RxData *****************
  8625 ;; Defined at:
  8626 ;;		line 71 in file "../src/CC2500_B1.c"
  8627 ;; Parameters:    Size  Location     Type
  8628 ;;		None
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;		None               void
  8633 ;; Registers used:
  8634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;Total ram usage:        2 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    7
  8647 ;; This function calls:
  8648 ;;		_CC2500_ReadByte
  8649 ;;		_CC2500_ReadStatus
  8650 ;;		_CC2500_WriteByte
  8651 ;;		_Timeout_Counter
  8652 ;;		_set_TimeoutCleared
  8653 ;; This function is called by:
  8654 ;;		_setRF_Main
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function _CC2500_RxData
  8660  0C0B                     _CC2500_RxData:	
  8661                           
  8662                           ;CC2500_B1.c: 72: unsigned char loop_f;
  8663                           ;CC2500_B1.c: 76: if (RB0 == 1)
  8664                           
  8665                           ;incstack = 0
  8666                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8667  0C0B  0020               	movlb	0	; select bank0
  8668  0C0C  180D               	btfsc	13,0	;volatile
  8669  0C0D  2C12               	goto	l8667
  8670  0C0E  2C1B               	goto	l8673
  8671  0C0F                     l8665:	
  8672                           ;CC2500_B1.c: 77: {
  8673                           ;CC2500_B1.c: 78: while (RB0 == 1 && myMain.Timeout == 0) {
  8674                           
  8675                           
  8676                           ;CC2500_B1.c: 79: Timeout_Counter();
  8677  0C0F  3190  2072  318C   	fcall	_Timeout_Counter
  8678  0C12                     l8667:	
  8679  0C12  0020               	movlb	0	; select bank0
  8680  0C13  1C0D               	btfss	13,0	;volatile
  8681  0C14  2C18               	goto	l8671
  8682  0C15  0021               	movlb	1	; select bank1
  8683  0C16  1D2F               	btfss	(_myMain^(0+128)+15),2
  8684  0C17  2C0F               	goto	l8665
  8685  0C18                     l8671:	
  8686                           
  8687                           ;CC2500_B1.c: 80: };
  8688                           ;CC2500_B1.c: 81: set_TimeoutCleared();
  8689  0C18  319E  260D  318C   	fcall	_set_TimeoutCleared
  8690  0C1B                     l8673:	
  8691                           
  8692                           ;CC2500_B1.c: 82: }
  8693                           ;CC2500_B1.c: 84: CC2500_ReadStatus(0x3B);
  8694  0C1B  303B               	movlw	59
  8695  0C1C  3192  22E5  318C   	fcall	_CC2500_ReadStatus
  8696                           
  8697                           ;CC2500_B1.c: 86: if (s_data != 0) {
  8698  0C1F  0021               	movlb	1	; select bank1
  8699  0C20  0857               	movf	_s_data^(0+128),w
  8700  0C21  1903               	btfsc	3,2
  8701  0C22  0008               	return
  8702                           
  8703                           ;CC2500_B1.c: 87: RC4 = 0;
  8704  0C23  0020               	movlb	0	; select bank0
  8705  0C24  120E               	bcf	14,4	;volatile
  8706                           
  8707                           ;CC2500_B1.c: 88: SPI0Buffer = 0x3F + 0xC0;
  8708  0C25  30FF               	movlw	255
  8709  0C26  00A4               	movwf	??_CC2500_RxData
  8710  0C27  0824               	movf	??_CC2500_RxData,w
  8711  0C28  0021               	movlb	1	; select bank1
  8712  0C29  00D3               	movwf	_SPI0Buffer^(0+128)
  8713                           
  8714                           ;CC2500_B1.c: 89: while (RC2 == 1 && myMain.Timeout == 0) {
  8715  0C2A  2C31               	goto	l8683
  8716  0C2B                     l8685:	
  8717  0C2B  0021               	movlb	1	; select bank1
  8718  0C2C  192F               	btfsc	(_myMain^(0+128)+15),2
  8719  0C2D  2C34               	goto	l308
  8720                           
  8721                           ;CC2500_B1.c: 90: Timeout_Counter();
  8722  0C2E  3190  2072  318C   	fcall	_Timeout_Counter
  8723  0C31                     l8683:	
  8724  0C31  0020               	movlb	0	; select bank0
  8725  0C32  190E               	btfsc	14,2	;volatile
  8726  0C33  2C2B               	goto	l8685
  8727  0C34                     l308:	
  8728                           
  8729                           ;CC2500_B1.c: 91: };
  8730                           ;CC2500_B1.c: 92: if (myMain.Timeout == 0) {
  8731  0C34  0021               	movlb	1	; select bank1
  8732  0C35  192F               	btfsc	(_myMain^(0+128)+15),2
  8733  0C36  2C7B               	goto	l309
  8734                           
  8735                           ;CC2500_B1.c: 93: CC2500_WriteByte();
  8736  0C37  3190  20CA  318C   	fcall	_CC2500_WriteByte
  8737                           
  8738                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  8739  0C3A  3191  21A3  318C   	fcall	_CC2500_ReadByte
  8740                           
  8741                           ;CC2500_B1.c: 96: Rx_Length = SPI0Buffer;
  8742  0C3D  0021               	movlb	1	; select bank1
  8743  0C3E  0853               	movf	_SPI0Buffer^(0+128),w
  8744  0C3F  0020               	movlb	0	; select bank0
  8745  0C40  00A4               	movwf	??_CC2500_RxData
  8746  0C41  0824               	movf	??_CC2500_RxData,w
  8747  0C42  0021               	movlb	1	; select bank1
  8748  0C43  00D2               	movwf	_Rx_Length^(0+128)
  8749                           
  8750                           ;CC2500_B1.c: 97: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8751  0C44  0020               	movlb	0	; select bank0
  8752  0C45  01A5               	clrf	CC2500_RxData@loop_f
  8753  0C46                     l8699:	
  8754  0C46  0021               	movlb	1	; select bank1
  8755  0C47  0852               	movf	_Rx_Length^(0+128),w
  8756  0C48  0020               	movlb	0	; select bank0
  8757  0C49  0225               	subwf	CC2500_RxData@loop_f,w
  8758  0C4A  1803               	btfsc	3,0
  8759  0C4B  2C5F               	goto	l8701
  8760                           
  8761                           ;CC2500_B1.c: 98: CC2500_ReadByte();
  8762  0C4C  3191  21A3  318C   	fcall	_CC2500_ReadByte
  8763                           
  8764                           ;CC2500_B1.c: 99: RF_Data[loop_f] = SPI0Buffer;
  8765  0C4F  0021               	movlb	1	; select bank1
  8766  0C50  0853               	movf	_SPI0Buffer^(0+128),w
  8767  0C51  0020               	movlb	0	; select bank0
  8768  0C52  00A4               	movwf	??_CC2500_RxData
  8769  0C53  0825               	movf	CC2500_RxData@loop_f,w
  8770  0C54  3E20               	addlw	_RF_Data& (0+255)
  8771  0C55  0086               	movwf	6
  8772  0C56  3001               	movlw	1	; select bank2/3
  8773  0C57  0087               	movwf	7
  8774  0C58  0824               	movf	??_CC2500_RxData,w
  8775  0C59  0081               	movwf	1
  8776  0C5A  3001               	movlw	1
  8777  0C5B  00A4               	movwf	??_CC2500_RxData
  8778  0C5C  0824               	movf	??_CC2500_RxData,w
  8779  0C5D  07A5               	addwf	CC2500_RxData@loop_f,f
  8780  0C5E  2C46               	goto	l8699
  8781  0C5F                     l8701:	
  8782                           
  8783                           ;CC2500_B1.c: 100: }
  8784                           ;CC2500_B1.c: 101: CC2500_ReadByte();
  8785  0C5F  3191  21A3  318C   	fcall	_CC2500_ReadByte
  8786                           
  8787                           ;CC2500_B1.c: 102: RSSI = SPI0Buffer;
  8788  0C62  0021               	movlb	1	; select bank1
  8789  0C63  0853               	movf	_SPI0Buffer^(0+128),w
  8790  0C64  0020               	movlb	0	; select bank0
  8791  0C65  00A4               	movwf	??_CC2500_RxData
  8792  0C66  0824               	movf	??_CC2500_RxData,w
  8793  0C67  0021               	movlb	1	; select bank1
  8794  0C68  00D1               	movwf	_RSSI^(0+128)
  8795                           
  8796                           ;CC2500_B1.c: 103: CC2500_ReadByte();
  8797  0C69  3191  21A3  318C   	fcall	_CC2500_ReadByte
  8798                           
  8799                           ;CC2500_B1.c: 104: CRC = SPI0Buffer;
  8800  0C6C  0021               	movlb	1	; select bank1
  8801  0C6D  0853               	movf	_SPI0Buffer^(0+128),w
  8802  0C6E  0020               	movlb	0	; select bank0
  8803  0C6F  00A4               	movwf	??_CC2500_RxData
  8804  0C70  0824               	movf	??_CC2500_RxData,w
  8805  0C71  0021               	movlb	1	; select bank1
  8806  0C72  00CB               	movwf	_CRC^(0+128)
  8807                           
  8808                           ;CC2500_B1.c: 105: RC4 = 1;
  8809  0C73  0020               	movlb	0	; select bank0
  8810  0C74  160E               	bsf	14,4	;volatile
  8811                           
  8812                           ;CC2500_B1.c: 106: if (CRC & 0x80)
  8813  0C75  0021               	movlb	1	; select bank1
  8814  0C76  1BCB               	btfsc	_CRC^(0+128),7
  8815                           
  8816                           ;CC2500_B1.c: 107: Receive_OK = 1;
  8817  0C77  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8818                           
  8819                           ;CC2500_B1.c: 114: RF1.RxStatus = 0;
  8820  0C78  11BE               	bcf	_RF1^(0+128),3
  8821                           
  8822                           ;CC2500_B1.c: 115: RF1.ReceiveGO = 1;
  8823  0C79  14BE               	bsf	_RF1^(0+128),1
  8824                           
  8825                           ;CC2500_B1.c: 116: } else {
  8826  0C7A  2C7D               	goto	l8713
  8827  0C7B                     l309:	
  8828                           
  8829                           ;CC2500_B1.c: 117: RC4 = 1;
  8830  0C7B  0020               	movlb	0	; select bank0
  8831  0C7C  160E               	bsf	14,4	;volatile
  8832  0C7D                     l8713:	
  8833                           
  8834                           ;CC2500_B1.c: 118: }
  8835                           ;CC2500_B1.c: 119: set_TimeoutCleared();
  8836  0C7D  319E  260D         	fcall	_set_TimeoutCleared
  8837  0C7F  0021               	movlb	1	; select bank1
  8838  0C80  0008               	return
  8839  0C81                     __end_of_CC2500_RxData:	
  8840                           
  8841                           	psect	text37
  8842  12E5                     __ptext37:	
  8843 ;; *************** function _CC2500_ReadStatus *****************
  8844 ;; Defined at:
  8845 ;;		line 310 in file "../src/CC2500_B1.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;  status_addr     1    wreg     unsigned char 
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8850 ;; Return value:  Size  Location     Type
  8851 ;;		None               void
  8852 ;; Registers used:
  8853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;Total ram usage:        2 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    6
  8866 ;; This function calls:
  8867 ;;		_CC2500_ReadByte
  8868 ;;		_CC2500_WriteByte
  8869 ;;		_Timeout_Counter
  8870 ;;		_set_TimeoutCleared
  8871 ;; This function is called by:
  8872 ;;		_CC2500_RxData
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           
  8877                           ;psect for function _CC2500_ReadStatus
  8878  12E5                     _CC2500_ReadStatus:	
  8879                           
  8880                           ;incstack = 0
  8881                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8882                           ;CC2500_ReadStatus@status_addr stored from wreg
  8883  12E5  0020               	movlb	0	; select bank0
  8884  12E6  00A3               	movwf	CC2500_ReadStatus@status_addr
  8885                           
  8886                           ;CC2500_B1.c: 311: RC4 = 0;
  8887  12E7  120E               	bcf	14,4	;volatile
  8888                           
  8889                           ;CC2500_B1.c: 312: SPI0Buffer = status_addr + 0xC0;
  8890  12E8  0823               	movf	CC2500_ReadStatus@status_addr,w
  8891  12E9  3EC0               	addlw	192
  8892  12EA  00A2               	movwf	??_CC2500_ReadStatus
  8893  12EB  0822               	movf	??_CC2500_ReadStatus,w
  8894  12EC  0021               	movlb	1	; select bank1
  8895  12ED  00D3               	movwf	_SPI0Buffer^(0+128)
  8896                           
  8897                           ;CC2500_B1.c: 314: while (RC2 == 1 && myMain.Timeout == 0) {
  8898  12EE  2AF2               	goto	l8521
  8899  12EF                     l8519:	
  8900                           
  8901                           ;CC2500_B1.c: 315: Timeout_Counter();
  8902  12EF  3190  2072  3192   	fcall	_Timeout_Counter
  8903  12F2                     l8521:	
  8904  12F2  0020               	movlb	0	; select bank0
  8905  12F3  1D0E               	btfss	14,2	;volatile
  8906  12F4  2AF8               	goto	l8525
  8907  12F5  0021               	movlb	1	; select bank1
  8908  12F6  1D2F               	btfss	(_myMain^(0+128)+15),2
  8909  12F7  2AEF               	goto	l8519
  8910  12F8                     l8525:	
  8911                           
  8912                           ;CC2500_B1.c: 316: };
  8913                           ;CC2500_B1.c: 317: set_TimeoutCleared();
  8914  12F8  319E  260D  3192   	fcall	_set_TimeoutCleared
  8915                           
  8916                           ;CC2500_B1.c: 319: CC2500_WriteByte();
  8917  12FB  3190  20CA  3192   	fcall	_CC2500_WriteByte
  8918                           
  8919                           ;CC2500_B1.c: 320: CC2500_ReadByte();
  8920  12FE  3191  21A3         	fcall	_CC2500_ReadByte
  8921                           
  8922                           ;CC2500_B1.c: 321: RC4 = 1;
  8923  1300  0020               	movlb	0	; select bank0
  8924  1301  160E               	bsf	14,4	;volatile
  8925                           
  8926                           ;CC2500_B1.c: 323: s_data = SPI0Buffer;
  8927  1302  0021               	movlb	1	; select bank1
  8928  1303  0853               	movf	_SPI0Buffer^(0+128),w
  8929  1304  0020               	movlb	0	; select bank0
  8930  1305  00A2               	movwf	??_CC2500_ReadStatus
  8931  1306  0822               	movf	??_CC2500_ReadStatus,w
  8932  1307  0021               	movlb	1	; select bank1
  8933  1308  00D7               	movwf	_s_data^(0+128)
  8934  1309  0008               	return
  8935  130A                     __end_of_CC2500_ReadStatus:	
  8936                           
  8937                           	psect	text38
  8938  11A3                     __ptext38:	
  8939 ;; *************** function _CC2500_ReadByte *****************
  8940 ;; Defined at:
  8941 ;;		line 244 in file "../src/CC2500_B1.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;		None
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8946 ;; Return value:  Size  Location     Type
  8947 ;;		None               void
  8948 ;; Registers used:
  8949 ;;		wreg, status,2, status,0
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;Total ram usage:        2 bytes
  8960 ;; Hardware stack levels used:    1
  8961 ;; Hardware stack levels required when called:    5
  8962 ;; This function calls:
  8963 ;;		Nothing
  8964 ;; This function is called by:
  8965 ;;		_CC2500_RxData
  8966 ;;		_CC2500_ReadStatus
  8967 ;;		_CC2500_ReadREG
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           
  8972                           ;psect for function _CC2500_ReadByte
  8973  11A3                     _CC2500_ReadByte:	
  8974                           
  8975                           ;CC2500_B1.c: 245: unsigned char loop_b;
  8976                           ;CC2500_B1.c: 246: for (loop_b = 0; loop_b < 8; loop_b++) {
  8977                           
  8978                           ;incstack = 0
  8979                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8980  11A3  0020               	movlb	0	; select bank0
  8981  11A4  01A1               	clrf	CC2500_ReadByte@loop_b
  8982  11A5                     L7:	
  8983  11A5  3008               	movlw	8
  8984  11A6  0221               	subwf	CC2500_ReadByte@loop_b,w
  8985  11A7  1803               	btfsc	3,0
  8986  11A8  0008               	return
  8987                           
  8988                           ;CC2500_B1.c: 247: RC1 = 1;
  8989  11A9  148E               	bsf	14,1	;volatile
  8990                           
  8991                           ;CC2500_B1.c: 248: SPI0Buffer <<= 1;
  8992  11AA  1003               	clrc
  8993  11AB  0021               	movlb	1	; select bank1
  8994  11AC  0DD3               	rlf	_SPI0Buffer^(0+128),f
  8995                           
  8996                           ;CC2500_B1.c: 249: if (RC2 == 1)
  8997  11AD  0020               	movlb	0	; select bank0
  8998  11AE  1D0E               	btfss	14,2	;volatile
  8999  11AF  29B3               	goto	l8413
  9000                           
  9001                           ;CC2500_B1.c: 250: SPI0Buffer |= 0x01;
  9002  11B0  0021               	movlb	1	; select bank1
  9003  11B1  1453               	bsf	_SPI0Buffer^(0+128),0
  9004  11B2  29B9               	goto	l8415
  9005  11B3                     l8413:	
  9006                           
  9007                           ;CC2500_B1.c: 251: else
  9008                           ;CC2500_B1.c: 252: SPI0Buffer &= 0xFE;
  9009  11B3  30FE               	movlw	254
  9010  11B4  0020               	movlb	0	; select bank0
  9011  11B5  00A0               	movwf	??_CC2500_ReadByte
  9012  11B6  0820               	movf	??_CC2500_ReadByte,w
  9013  11B7  0021               	movlb	1	; select bank1
  9014  11B8  05D3               	andwf	_SPI0Buffer^(0+128),f
  9015  11B9                     l8415:	
  9016                           
  9017                           ;CC2500_B1.c: 253: RC1 = 0;
  9018  11B9  0020               	movlb	0	; select bank0
  9019  11BA  108E               	bcf	14,1	;volatile
  9020  11BB  3001               	movlw	1
  9021  11BC  00A0               	movwf	??_CC2500_ReadByte
  9022  11BD  0820               	movf	??_CC2500_ReadByte,w
  9023  11BE  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9024  11BF  29A5               	goto	L7
  9025  11C0                     __end_of_CC2500_ReadByte:	
  9026                           
  9027                           	psect	text39
  9028  1DFB                     __ptext39:	
  9029 ;; *************** function _RF_Initialization *****************
  9030 ;; Defined at:
  9031 ;;		line 9 in file "../src/RF_Control_B1.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;		None
  9034 ;; Auto vars:     Size  Location     Type
  9035 ;;		None
  9036 ;; Return value:  Size  Location     Type
  9037 ;;		None               void
  9038 ;; Registers used:
  9039 ;;		wreg, status,2, status,0, pclath, cstack
  9040 ;; Tracked objects:
  9041 ;;		On entry : 0/0
  9042 ;;		On exit  : 0/0
  9043 ;;		Unchanged: 0/0
  9044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;Total ram usage:        0 bytes
  9050 ;; Hardware stack levels used:    1
  9051 ;; Hardware stack levels required when called:    6
  9052 ;; This function calls:
  9053 ;;		_setRF_Initialization
  9054 ;; This function is called by:
  9055 ;;		_main
  9056 ;; This function uses a non-reentrant model
  9057 ;;
  9058                           
  9059                           
  9060                           ;psect for function _RF_Initialization
  9061  1DFB                     _RF_Initialization:	
  9062                           
  9063                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9064                           
  9065                           ;incstack = 0
  9066                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9067  1DFB  319E  26AB         	fcall	_setRF_Initialization
  9068  1DFD  0008               	return
  9069  1DFE                     __end_of_RF_Initialization:	
  9070                           
  9071                           	psect	text40
  9072  1EAB                     __ptext40:	
  9073 ;; *************** function _setRF_Initialization *****************
  9074 ;; Defined at:
  9075 ;;		line 43 in file "../src/RF_Control_B1.c"
  9076 ;; Parameters:    Size  Location     Type
  9077 ;;		None
  9078 ;; Auto vars:     Size  Location     Type
  9079 ;;		None
  9080 ;; Return value:  Size  Location     Type
  9081 ;;		None               void
  9082 ;; Registers used:
  9083 ;;		wreg
  9084 ;; Tracked objects:
  9085 ;;		On entry : 0/0
  9086 ;;		On exit  : 0/0
  9087 ;;		Unchanged: 0/0
  9088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9092 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;Total ram usage:        1 bytes
  9094 ;; Hardware stack levels used:    1
  9095 ;; Hardware stack levels required when called:    5
  9096 ;; This function calls:
  9097 ;;		Nothing
  9098 ;; This function is called by:
  9099 ;;		_RF_Initialization
  9100 ;; This function uses a non-reentrant model
  9101 ;;
  9102                           
  9103                           
  9104                           ;psect for function _setRF_Initialization
  9105  1EAB                     _setRF_Initialization:	
  9106                           
  9107                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9108                           
  9109                           ;incstack = 0
  9110                           ; Regs used in _setRF_Initialization: [wreg]
  9111  1EAB  3015               	movlw	21
  9112  1EAC  0020               	movlb	0	; select bank0
  9113  1EAD  00A0               	movwf	??_setRF_Initialization
  9114  1EAE  0820               	movf	??_setRF_Initialization,w
  9115  1EAF  0021               	movlb	1	; select bank1
  9116  1EB0  00D4               	movwf	_Tx_Length^(0+128)
  9117                           
  9118                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  9119  1EB1  3014               	movlw	20
  9120  1EB2  0020               	movlb	0	; select bank0
  9121  1EB3  00A0               	movwf	??_setRF_Initialization
  9122  1EB4  0820               	movf	??_setRF_Initialization,w
  9123  1EB5  0021               	movlb	1	; select bank1
  9124  1EB6  00C3               	movwf	(_RF1^(0+128)+5)
  9125  1EB7  0008               	return
  9126  1EB8                     __end_of_setRF_Initialization:	
  9127                           
  9128                           	psect	text41
  9129  1FA4                     __ptext41:	
  9130 ;; *************** function _Mcu_Initialization *****************
  9131 ;; Defined at:
  9132 ;;		line 30 in file "../src/MCU_B1.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;		None
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;		None
  9137 ;; Return value:  Size  Location     Type
  9138 ;;		None               void
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0, pclath, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;Total ram usage:        0 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    6
  9153 ;; This function calls:
  9154 ;;		_ADC_Set
  9155 ;;		_Fosc_Set
  9156 ;;		_IOC_Set
  9157 ;;		_IO_Set
  9158 ;;		_TMR0_Set
  9159 ;;		_WDT_Set
  9160 ;; This function is called by:
  9161 ;;		_main
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           
  9166                           ;psect for function _Mcu_Initialization
  9167  1FA4                     _Mcu_Initialization:	
  9168                           
  9169                           ;MCU_B1.c: 32: Fosc_Set();
  9170                           
  9171                           ;incstack = 0
  9172                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9173  1FA4  3187  27FC  319F   	fcall	_Fosc_Set
  9174                           
  9175                           ;MCU_B1.c: 34: IO_Set();
  9176  1FA7  3190  20B2  319F   	fcall	_IO_Set
  9177                           
  9178                           ;MCU_B1.c: 36: TMR0_Set();
  9179  1FAA  319E  262B  319F   	fcall	_TMR0_Set
  9180                           
  9181                           ;MCU_B1.c: 38: ;;
  9182                           ;MCU_B1.c: 40: ADC_Set();
  9183  1FAD  319E  2624  319F   	fcall	_ADC_Set
  9184                           
  9185                           ;MCU_B1.c: 44: ;;
  9186                           ;MCU_B1.c: 46: IOC_Set();
  9187  1FB0  319E  269E  319F   	fcall	_IOC_Set
  9188                           
  9189                           ;MCU_B1.c: 48: ;;
  9190                           ;MCU_B1.c: 50: ;;
  9191                           ;MCU_B1.c: 52: WDT_Set();
  9192  1FB3  319E  2656         	fcall	_WDT_Set
  9193  1FB5  0008               	return
  9194  1FB6                     __end_of_Mcu_Initialization:	
  9195                           
  9196                           	psect	text42
  9197  1E56                     __ptext42:	
  9198 ;; *************** function _WDT_Set *****************
  9199 ;; Defined at:
  9200 ;;		line 901 in file "../src/MCU_B1.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;		None
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;		None
  9205 ;; Return value:  Size  Location     Type
  9206 ;;		None               void
  9207 ;; Registers used:
  9208 ;;		wreg
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;Total ram usage:        1 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    5
  9221 ;; This function calls:
  9222 ;;		Nothing
  9223 ;; This function is called by:
  9224 ;;		_Mcu_Initialization
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           
  9229                           ;psect for function _WDT_Set
  9230  1E56                     _WDT_Set:	
  9231                           
  9232                           ;MCU_B1.c: 902: WDTCON = 0b00010111;;
  9233                           
  9234                           ;incstack = 0
  9235                           ; Regs used in _WDT_Set: [wreg]
  9236  1E56  3017               	movlw	23
  9237  1E57  0021               	movlb	1	; select bank1
  9238  1E58  0097               	movwf	23	;volatile
  9239                           
  9240                           ;MCU_B1.c: 903: WDT.Enable = 1;
  9241  1E59  1449               	bsf	_WDT^(0+128),0
  9242                           
  9243                           ;MCU_B1.c: 904: WDT.Count = 10;
  9244  1E5A  300A               	movlw	10
  9245  1E5B  0020               	movlb	0	; select bank0
  9246  1E5C  00A0               	movwf	??_WDT_Set
  9247  1E5D  0820               	movf	??_WDT_Set,w
  9248  1E5E  0021               	movlb	1	; select bank1
  9249  1E5F  00CA               	movwf	(_WDT^(0+128)+1)
  9250  1E60  0008               	return
  9251  1E61                     __end_of_WDT_Set:	
  9252                           
  9253                           	psect	text43
  9254  1E2B                     __ptext43:	
  9255 ;; *************** function _TMR0_Set *****************
  9256 ;; Defined at:
  9257 ;;		line 126 in file "../src/MCU_B1.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;		None
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;		None
  9262 ;; Return value:  Size  Location     Type
  9263 ;;		None               void
  9264 ;; Registers used:
  9265 ;;		wreg, status,2
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;Total ram usage:        0 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    5
  9278 ;; This function calls:
  9279 ;;		Nothing
  9280 ;; This function is called by:
  9281 ;;		_Mcu_Initialization
  9282 ;; This function uses a non-reentrant model
  9283 ;;
  9284                           
  9285                           
  9286                           ;psect for function _TMR0_Set
  9287  1E2B                     _TMR0_Set:	
  9288                           
  9289                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
  9290                           
  9291                           ;incstack = 0
  9292                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9293  1E2B  0021               	movlb	1	; select bank1
  9294  1E2C  0195               	clrf	21	;volatile
  9295                           
  9296                           ;MCU_B1.c: 129: TMR0 = (256-190);
  9297  1E2D  3042               	movlw	66
  9298  1E2E  0020               	movlb	0	; select bank0
  9299  1E2F  0095               	movwf	21	;volatile
  9300                           
  9301                           ;MCU_B1.c: 130: TMR0IE = 1;
  9302  1E30  168B               	bsf	11,5	;volatile
  9303                           
  9304                           ;MCU_B1.c: 131: GIE = 1;
  9305  1E31  178B               	bsf	11,7	;volatile
  9306  1E32  0008               	return
  9307  1E33                     __end_of_TMR0_Set:	
  9308                           
  9309                           	psect	text44
  9310  10B2                     __ptext44:	
  9311 ;; *************** function _IO_Set *****************
  9312 ;; Defined at:
  9313 ;;		line 60 in file "../src/MCU_B1.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;		None
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;		None
  9318 ;; Return value:  Size  Location     Type
  9319 ;;		None               void
  9320 ;; Registers used:
  9321 ;;		wreg, status,2
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;Total ram usage:        0 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    5
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_Mcu_Initialization
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           
  9342                           ;psect for function _IO_Set
  9343  10B2                     _IO_Set:	
  9344                           
  9345                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9346                           
  9347                           ;incstack = 0
  9348                           ; Regs used in _IO_Set: [wreg+status,2]
  9349  10B2  3077               	movlw	119
  9350  10B3  0021               	movlb	1	; select bank1
  9351  10B4  008C               	movwf	12	;volatile
  9352                           
  9353                           ;MCU_B1.c: 89: TRISB = 0b00000101;;
  9354  10B5  3005               	movlw	5
  9355  10B6  008D               	movwf	13	;volatile
  9356                           
  9357                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9358  10B7  300C               	movlw	12
  9359  10B8  008E               	movwf	14	;volatile
  9360                           
  9361                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9362  10B9  0022               	movlb	2	; select bank2
  9363  10BA  018C               	clrf	12	;volatile
  9364                           
  9365                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9366  10BB  018D               	clrf	13	;volatile
  9367                           
  9368                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9369  10BC  018E               	clrf	14	;volatile
  9370                           
  9371                           ;MCU_B1.c: 94: ANSELA = 0b00000010;;
  9372  10BD  3002               	movlw	2
  9373  10BE  0023               	movlb	3	; select bank3
  9374  10BF  008C               	movwf	12	;volatile
  9375                           
  9376                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9377  10C0  018D               	clrf	13	;volatile
  9378                           
  9379                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9380  10C1  018E               	clrf	14	;volatile
  9381                           
  9382                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9383  10C2  3077               	movlw	119
  9384  10C3  0020               	movlb	0	; select bank0
  9385  10C4  008C               	movwf	12	;volatile
  9386                           
  9387                           ;MCU_B1.c: 98: PORTB = 0b00000101;;
  9388  10C5  3005               	movlw	5
  9389  10C6  008D               	movwf	13	;volatile
  9390                           
  9391                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9392  10C7  300C               	movlw	12
  9393  10C8  008E               	movwf	14	;volatile
  9394  10C9  0008               	return
  9395  10CA                     __end_of_IO_Set:	
  9396                           
  9397                           	psect	text45
  9398  1E9E                     __ptext45:	
  9399 ;; *************** function _IOC_Set *****************
  9400 ;; Defined at:
  9401 ;;		line 263 in file "../src/MCU_B1.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;		None
  9406 ;; Return value:  Size  Location     Type
  9407 ;;		None               void
  9408 ;; Registers used:
  9409 ;;		wreg, status,2
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;Total ram usage:        0 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    5
  9422 ;; This function calls:
  9423 ;;		Nothing
  9424 ;; This function is called by:
  9425 ;;		_Mcu_Initialization
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _IOC_Set
  9431  1E9E                     _IOC_Set:	
  9432                           
  9433                           ;MCU_B1.c: 264: WPUB2 = 0;
  9434                           
  9435                           ;incstack = 0
  9436                           ; Regs used in _IOC_Set: [wreg+status,2]
  9437  1E9E  0024               	movlb	4	; select bank4
  9438  1E9F  110D               	bcf	13,2	;volatile
  9439                           
  9440                           ;MCU_B1.c: 267: IOCBP = 0b00000100;
  9441  1EA0  3004               	movlw	4
  9442  1EA1  0027               	movlb	7	; select bank7
  9443  1EA2  0094               	movwf	20	;volatile
  9444                           
  9445                           ;MCU_B1.c: 268: IOCBN = 0b00000100;
  9446  1EA3  3004               	movlw	4
  9447  1EA4  0095               	movwf	21	;volatile
  9448                           
  9449                           ;MCU_B1.c: 288: IOCBF = 0b00000000;
  9450  1EA5  0196               	clrf	22	;volatile
  9451                           
  9452                           ;MCU_B1.c: 290: IOCIE = 1;
  9453  1EA6  158B               	bsf	11,3	;volatile
  9454                           
  9455                           ;MCU_B1.c: 291: IOCIF = 0;
  9456  1EA7  100B               	bcf	11,0	;volatile
  9457                           
  9458                           ;MCU_B1.c: 292: PEIE = 1;
  9459  1EA8  170B               	bsf	11,6	;volatile
  9460                           
  9461                           ;MCU_B1.c: 293: GIE = 1;
  9462  1EA9  178B               	bsf	11,7	;volatile
  9463  1EAA  0008               	return
  9464  1EAB                     __end_of_IOC_Set:	
  9465                           
  9466                           	psect	text46
  9467  07FC                     __ptext46:	
  9468 ;; *************** function _Fosc_Set *****************
  9469 ;; Defined at:
  9470 ;;		line 56 in file "../src/MCU_B1.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;		None
  9475 ;; Return value:  Size  Location     Type
  9476 ;;		None               void
  9477 ;; Registers used:
  9478 ;;		wreg
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;Total ram usage:        0 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    5
  9491 ;; This function calls:
  9492 ;;		Nothing
  9493 ;; This function is called by:
  9494 ;;		_Mcu_Initialization
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           
  9499                           ;psect for function _Fosc_Set
  9500  07FC                     _Fosc_Set:	
  9501                           
  9502                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9503                           
  9504                           ;incstack = 0
  9505                           ; Regs used in _Fosc_Set: [wreg]
  9506  07FC  3078               	movlw	120
  9507  07FD  0021               	movlb	1	; select bank1
  9508  07FE  0099               	movwf	25	;volatile
  9509  07FF  0008               	return
  9510  0800                     __end_of_Fosc_Set:	
  9511                           
  9512                           	psect	text47
  9513  1E24                     __ptext47:	
  9514 ;; *************** function _ADC_Set *****************
  9515 ;; Defined at:
  9516 ;;		line 315 in file "../src/MCU_B1.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;		None
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;		None
  9521 ;; Return value:  Size  Location     Type
  9522 ;;		None               void
  9523 ;; Registers used:
  9524 ;;		wreg
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;Total ram usage:        0 bytes
  9535 ;; Hardware stack levels used:    1
  9536 ;; Hardware stack levels required when called:    5
  9537 ;; This function calls:
  9538 ;;		Nothing
  9539 ;; This function is called by:
  9540 ;;		_Mcu_Initialization
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           
  9545                           ;psect for function _ADC_Set
  9546  1E24                     _ADC_Set:	
  9547                           
  9548                           ;MCU_B1.c: 316: ADCON1 = 0xf2;
  9549                           
  9550                           ;incstack = 0
  9551                           ; Regs used in _ADC_Set: [wreg]
  9552  1E24  30F2               	movlw	242
  9553  1E25  0021               	movlb	1	; select bank1
  9554  1E26  009E               	movwf	30	;volatile
  9555                           
  9556                           ;MCU_B1.c: 317: FVRCON = 0xc0;
  9557  1E27  30C0               	movlw	192
  9558  1E28  0022               	movlb	2	; select bank2
  9559  1E29  0097               	movwf	23	;volatile
  9560  1E2A  0008               	return
  9561  1E2B                     __end_of_ADC_Set:	
  9562                           
  9563                           	psect	text48
  9564  1F41                     __ptext48:	
  9565 ;; *************** function _LED_Main *****************
  9566 ;; Defined at:
  9567 ;;		line 47 in file "../src/LED_B1.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;		None
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;		None
  9572 ;; Return value:  Size  Location     Type
  9573 ;;		None               void
  9574 ;; Registers used:
  9575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/0
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;Total ram usage:        0 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; Hardware stack levels required when called:    7
  9588 ;; This function calls:
  9589 ;;		_setLED_Main
  9590 ;; This function is called by:
  9591 ;;		_main
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           
  9596                           ;psect for function _LED_Main
  9597  1F41                     _LED_Main:	
  9598                           
  9599                           ;LED_B1.c: 49: setLED_Main(1);
  9600                           
  9601                           ;incstack = 0
  9602                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9603  1F41  3001               	movlw	1
  9604  1F42  3197  2708  319F   	fcall	_setLED_Main
  9605                           
  9606                           ;LED_B1.c: 52: setLED_Main(2);
  9607  1F45  3002               	movlw	2
  9608  1F46  3197  2708  319F   	fcall	_setLED_Main
  9609                           
  9610                           ;LED_B1.c: 55: setLED_Main(3);
  9611  1F49  3003               	movlw	3
  9612  1F4A  3197  2708  319F   	fcall	_setLED_Main
  9613                           
  9614                           ;LED_B1.c: 58: setLED_Main(99);
  9615  1F4D  3063               	movlw	99
  9616  1F4E  3197  2708         	fcall	_setLED_Main
  9617  1F50  0008               	return
  9618  1F51                     __end_of_LED_Main:	
  9619                           
  9620                           	psect	text49
  9621  1708                     __ptext49:	
  9622 ;; *************** function _setLED_Main *****************
  9623 ;; Defined at:
  9624 ;;		line 192 in file "../src/LED_B1.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;  led             1    wreg     unsigned char 
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;  led             1    3[BANK0 ] unsigned char 
  9629 ;; Return value:  Size  Location     Type
  9630 ;;		None               void
  9631 ;; Registers used:
  9632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;Total ram usage:        3 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; Hardware stack levels required when called:    6
  9645 ;; This function calls:
  9646 ;;		_LedPointSelect
  9647 ;; This function is called by:
  9648 ;;		_LED_Main
  9649 ;; This function uses a non-reentrant model
  9650 ;;
  9651                           
  9652                           
  9653                           ;psect for function _setLED_Main
  9654  1708                     _setLED_Main:	
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9658                           ;setLED_Main@led stored from wreg
  9659  1708  0020               	movlb	0	; select bank0
  9660  1709  00A3               	movwf	setLED_Main@led
  9661                           
  9662                           ;LED_B1.c: 193: LedPointSelect(led);
  9663  170A  0823               	movf	setLED_Main@led,w
  9664  170B  3193  2330  3197   	fcall	_LedPointSelect
  9665                           
  9666                           ;LED_B1.c: 194: if (LED->GO == 1) {
  9667  170E  0870               	movf	_LED,w
  9668  170F  0086               	movwf	6
  9669  1710  0871               	movf	_LED+1,w
  9670  1711  0087               	movwf	7
  9671  1712  1C81               	btfss	1,1
  9672  1713  0008               	return
  9673                           
  9674                           ;LED_B1.c: 195: LED->Time++;
  9675  1714  0870               	movf	_LED,w
  9676  1715  0086               	movwf	6
  9677  1716  0871               	movf	_LED+1,w
  9678  1717  0087               	movwf	7
  9679  1718  3141               	addfsr 1,1
  9680  1719  3001               	movlw	1
  9681  171A  0781               	addwf	1,f
  9682  171B  3141               	addfsr 1,1
  9683  171C  1803               	skipnc
  9684  171D  0A81               	incf	1,f
  9685                           
  9686                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  9687  171E  0870               	movf	_LED,w
  9688  171F  0086               	movwf	6
  9689  1720  0871               	movf	_LED+1,w
  9690  1721  0087               	movwf	7
  9691  1722  3141               	addfsr 1,1
  9692  1723  3F40               	moviw [0]fsr1
  9693  1724  0020               	movlb	0	; select bank0
  9694  1725  00A1               	movwf	??_setLED_Main
  9695  1726  3F41               	moviw [1]fsr1
  9696  1727  00A2               	movwf	??_setLED_Main+1
  9697  1728  3000               	movlw	0
  9698  1729  0222               	subwf	??_setLED_Main+1,w
  9699  172A  3032               	movlw	50
  9700  172B  1903               	skipnz
  9701  172C  0221               	subwf	??_setLED_Main,w
  9702  172D  1C03               	skipc
  9703  172E  0008               	return
  9704                           
  9705                           ;LED_B1.c: 197: LED->Time = 0;
  9706  172F  0870               	movf	_LED,w
  9707  1730  0086               	movwf	6
  9708  1731  0871               	movf	_LED+1,w
  9709  1732  0087               	movwf	7
  9710  1733  3141               	addfsr 1,1
  9711  1734  3000               	movlw	0
  9712  1735  3FC0               	movwi [0]fsr1
  9713  1736  3FC1               	movwi [1]fsr1
  9714                           
  9715                           ;LED_B1.c: 199: if (led == 1) {
  9716  1737  0823               	movf	setLED_Main@led,w
  9717  1738  3A01               	xorlw	1
  9718  1739  1D03               	skipz
  9719  173A  2F3E               	goto	l9239
  9720                           
  9721                           ;LED_B1.c: 200: RC7 = RC7 == 1 ? 0 : 1;
  9722  173B  3080               	movlw	128
  9723  173C  068E               	xorwf	14,f
  9724                           
  9725                           ;LED_B1.c: 201: }
  9726  173D  0008               	return
  9727  173E                     l9239:	
  9728                           
  9729                           ;LED_B1.c: 204: else if (led == 2) {
  9730  173E  0823               	movf	setLED_Main@led,w
  9731  173F  3A02               	xorlw	2
  9732  1740  1D03               	skipz
  9733  1741  2F45               	goto	l9243
  9734                           
  9735                           ;LED_B1.c: 205: RA3 = RA3 == 1 ? 0 : 1;
  9736  1742  3008               	movlw	8
  9737  1743  068C               	xorwf	12,f
  9738                           
  9739                           ;LED_B1.c: 206: }
  9740  1744  0008               	return
  9741  1745                     l9243:	
  9742                           
  9743                           ;LED_B1.c: 209: else if (led == 3) {
  9744  1745  0823               	movf	setLED_Main@led,w
  9745  1746  3A03               	xorlw	3
  9746  1747  1D03               	skipz
  9747  1748  2F4C               	goto	l9247
  9748                           
  9749                           ;LED_B1.c: 210: RC6 = RC6 == 1 ? 0 : 1;
  9750  1749  3040               	movlw	64
  9751  174A  068E               	xorwf	14,f
  9752                           
  9753                           ;LED_B1.c: 211: }
  9754  174B  0008               	return
  9755  174C                     l9247:	
  9756                           
  9757                           ;LED_B1.c: 214: else if (led == 99) {
  9758  174C  0823               	movf	setLED_Main@led,w
  9759  174D  3A63               	xorlw	99
  9760  174E  1D03               	skipz
  9761  174F  0008               	return
  9762                           
  9763                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
  9764  1750  3020               	movlw	32
  9765  1751  068D               	xorwf	13,f
  9766  1752  0008               	return
  9767  1753                     __end_of_setLED_Main:	
  9768                           
  9769                           	psect	text50
  9770  1F31                     __ptext50:	
  9771 ;; *************** function _LED_Initialization *****************
  9772 ;; Defined at:
  9773 ;;		line 31 in file "../src/LED_B1.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;		None
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;		None
  9778 ;; Return value:  Size  Location     Type
  9779 ;;		None               void
  9780 ;; Registers used:
  9781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;Total ram usage:        0 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:    8
  9794 ;; This function calls:
  9795 ;;		_setLED_Initialization
  9796 ;; This function is called by:
  9797 ;;		_main
  9798 ;; This function uses a non-reentrant model
  9799 ;;
  9800                           
  9801                           
  9802                           ;psect for function _LED_Initialization
  9803  1F31                     _LED_Initialization:	
  9804                           
  9805                           ;LED_B1.c: 33: setLED_Initialization(1);
  9806                           
  9807                           ;incstack = 0
  9808                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9809  1F31  3001               	movlw	1
  9810  1F32  319F  2771  319F   	fcall	_setLED_Initialization
  9811                           
  9812                           ;LED_B1.c: 36: setLED_Initialization(2);
  9813  1F35  3002               	movlw	2
  9814  1F36  319F  2771  319F   	fcall	_setLED_Initialization
  9815                           
  9816                           ;LED_B1.c: 39: setLED_Initialization(3);
  9817  1F39  3003               	movlw	3
  9818  1F3A  319F  2771  319F   	fcall	_setLED_Initialization
  9819                           
  9820                           ;LED_B1.c: 42: setLED_Initialization(99);
  9821  1F3D  3063               	movlw	99
  9822  1F3E  319F  2771         	fcall	_setLED_Initialization
  9823  1F40  0008               	return
  9824  1F41                     __end_of_LED_Initialization:	
  9825                           
  9826                           	psect	text51
  9827  1F71                     __ptext51:	
  9828 ;; *************** function _setLED_Initialization *****************
  9829 ;; Defined at:
  9830 ;;		line 63 in file "../src/LED_B1.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;  led             1    wreg     unsigned char 
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;  led             1    3[BANK0 ] unsigned char 
  9835 ;; Return value:  Size  Location     Type
  9836 ;;		None               void
  9837 ;; Registers used:
  9838 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9839 ;; Tracked objects:
  9840 ;;		On entry : 0/0
  9841 ;;		On exit  : 0/0
  9842 ;;		Unchanged: 0/0
  9843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9845 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;Total ram usage:        1 bytes
  9849 ;; Hardware stack levels used:    1
  9850 ;; Hardware stack levels required when called:    7
  9851 ;; This function calls:
  9852 ;;		_LedPointSelect
  9853 ;;		_setLED
  9854 ;; This function is called by:
  9855 ;;		_LED_Initialization
  9856 ;; This function uses a non-reentrant model
  9857 ;;
  9858                           
  9859                           
  9860                           ;psect for function _setLED_Initialization
  9861  1F71                     _setLED_Initialization:	
  9862                           
  9863                           ;incstack = 0
  9864                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9865                           ;setLED_Initialization@led stored from wreg
  9866  1F71  0020               	movlb	0	; select bank0
  9867  1F72  00A3               	movwf	setLED_Initialization@led
  9868                           
  9869                           ;LED_B1.c: 64: LedPointSelect(led);
  9870  1F73  0823               	movf	setLED_Initialization@led,w
  9871  1F74  3193  2330  319F   	fcall	_LedPointSelect
  9872                           
  9873                           ;LED_B1.c: 65: LED->Enable = 1;
  9874  1F77  0870               	movf	_LED,w
  9875  1F78  0086               	movwf	6
  9876  1F79  0871               	movf	_LED+1,w
  9877  1F7A  0087               	movwf	7
  9878  1F7B  1401               	bsf	1,0
  9879                           
  9880                           ;LED_B1.c: 66: setLED(led, 0);
  9881  1F7C  0020               	movlb	0	; select bank0
  9882  1F7D  01A1               	clrf	setLED@command
  9883  1F7E  0823               	movf	setLED_Initialization@led,w
  9884  1F7F  318B  239A         	fcall	_setLED
  9885  1F81  0008               	return
  9886  1F82                     __end_of_setLED_Initialization:	
  9887                           
  9888                           	psect	text52
  9889  11FD                     __ptext52:	
  9890 ;; *************** function _Flash_Memory_Main *****************
  9891 ;; Defined at:
  9892 ;;		line 796 in file "../src/MCU_B1.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;		None
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;		None
  9897 ;; Return value:  Size  Location     Type
  9898 ;;		None               void
  9899 ;; Registers used:
  9900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;Total ram usage:        0 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; Hardware stack levels required when called:    8
  9913 ;; This function calls:
  9914 ;;		_Flash_Memory_Modify
  9915 ;; This function is called by:
  9916 ;;		_main
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           
  9921                           ;psect for function _Flash_Memory_Main
  9922  11FD                     _Flash_Memory_Main:	
  9923                           
  9924                           ;MCU_B1.c: 797: if (Memory.GO == 1) {
  9925                           
  9926                           ;incstack = 0
  9927                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9928  11FD  0023               	movlb	3	; select bank3
  9929  11FE  1CC4               	btfss	(_Memory^(0+384)+36),1
  9930  11FF  0008               	return
  9931                           
  9932                           ;MCU_B1.c: 798: if (Memory.Modify == 1) {
  9933  1200  1C44               	btfss	(_Memory^(0+384)+36),0
  9934  1201  2A1A               	goto	l1430
  9935                           
  9936                           ;MCU_B1.c: 799: Memory.Time++;
  9937  1202  3001               	movlw	1
  9938  1203  07C2               	addwf	(_Memory^(0+384)+34),f
  9939  1204  3000               	movlw	0
  9940  1205  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9941                           
  9942                           ;MCU_B1.c: 800: if (Memory.Time == 25)
  9943  1206  3022               	movlw	34
  9944  1207  3EA0               	addlw	_Memory& (0+255)
  9945  1208  0086               	movwf	6
  9946  1209  3001               	movlw	1	; select bank3/4
  9947  120A  0087               	movwf	7
  9948  120B  3F40               	moviw [0]fsr1
  9949  120C  3A19               	xorlw	25
  9950  120D  1D03               	skipz
  9951  120E  2A11               	goto	u10535
  9952  120F  3F41               	moviw [1]fsr1
  9953  1210  3A00               	xorlw	0
  9954  1211                     u10535:	
  9955  1211  1D03               	skipz
  9956  1212  0008               	return
  9957                           
  9958                           ;MCU_B1.c: 801: {
  9959                           ;MCU_B1.c: 802: Memory.Time = 0;
  9960  1213  01C2               	clrf	(_Memory^(0+384)+34)
  9961  1214  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9962                           
  9963                           ;MCU_B1.c: 803: Memory.Modify = 0;
  9964  1215  1044               	bcf	(_Memory^(0+384)+36),0
  9965                           
  9966                           ;MCU_B1.c: 804: Memory.GO = 0;
  9967  1216  10C4               	bcf	(_Memory^(0+384)+36),1
  9968                           
  9969                           ;MCU_B1.c: 805: Flash_Memory_Modify();
  9970  1217  3196  2634         	fcall	_Flash_Memory_Modify
  9971                           
  9972                           ;MCU_B1.c: 806: }
  9973                           ;MCU_B1.c: 807: } else {
  9974  1219  0008               	return
  9975  121A                     l1430:	
  9976                           
  9977                           ;MCU_B1.c: 808: Memory.GO = 0;
  9978  121A  10C4               	bcf	(_Memory^(0+384)+36),1
  9979  121B  0008               	return
  9980  121C                     __end_of_Flash_Memory_Main:	
  9981                           
  9982                           	psect	text53
  9983  1634                     __ptext53:	
  9984 ;; *************** function _Flash_Memory_Modify *****************
  9985 ;; Defined at:
  9986 ;;		line 865 in file "../src/MCU_B1.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;  i               1    5[BANK0 ] unsigned char 
  9991 ;; Return value:  Size  Location     Type
  9992 ;;		None               void
  9993 ;; Registers used:
  9994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;Total ram usage:        2 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:    7
 10007 ;; This function calls:
 10008 ;;		_Flash_Memory_Erasing
 10009 ;;		_Flash_Memory_Read
 10010 ;;		_Flash_Memory_Write
 10011 ;; This function is called by:
 10012 ;;		_Flash_Memory_Main
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           
 10017                           ;psect for function _Flash_Memory_Modify
 10018  1634                     _Flash_Memory_Modify:	
 10019                           
 10020                           ;MCU_B1.c: 866: char i = 0;
 10021                           
 10022                           ;incstack = 0
 10023                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10024  1634  0020               	movlb	0	; select bank0
 10025  1635  01A5               	clrf	Flash_Memory_Modify@i
 10026                           
 10027                           ;MCU_B1.c: 867: for (i = 0; i < 32; i++) {
 10028  1636  01A5               	clrf	Flash_Memory_Modify@i
 10029  1637  3020               	movlw	32
 10030  1638  0225               	subwf	Flash_Memory_Modify@i,w
 10031  1639  1803               	btfsc	3,0
 10032  163A  2E50               	goto	l9309
 10033  163B                     l9303:	
 10034                           
 10035                           ;MCU_B1.c: 868: Memory.Data[i] = Flash_Memory_Read(i);
 10036  163B  0825               	movf	Flash_Memory_Modify@i,w
 10037  163C  3191  2117  3196   	fcall	_Flash_Memory_Read
 10038  163F  0020               	movlb	0	; select bank0
 10039  1640  00A4               	movwf	??_Flash_Memory_Modify
 10040  1641  0825               	movf	Flash_Memory_Modify@i,w
 10041  1642  3EA0               	addlw	_Memory& (0+255)
 10042  1643  0086               	movwf	6
 10043  1644  3001               	movlw	1	; select bank3/4
 10044  1645  0087               	movwf	7
 10045  1646  0824               	movf	??_Flash_Memory_Modify,w
 10046  1647  0081               	movwf	1
 10047  1648  3001               	movlw	1
 10048  1649  00A4               	movwf	??_Flash_Memory_Modify
 10049  164A  0824               	movf	??_Flash_Memory_Modify,w
 10050  164B  07A5               	addwf	Flash_Memory_Modify@i,f
 10051  164C  3020               	movlw	32
 10052  164D  0225               	subwf	Flash_Memory_Modify@i,w
 10053  164E  1C03               	skipc
 10054  164F  2E3B               	goto	l9303
 10055  1650                     l9309:	
 10056                           
 10057                           ;MCU_B1.c: 869: }
 10058                           ;MCU_B1.c: 870: Memory.Data[0]=product->Data[12];
 10059  1650  086C               	movf	_product,w
 10060  1651  0086               	movwf	6
 10061  1652  3002               	movlw	2	; select bank4/5
 10062  1653  0087               	movwf	7
 10063  1654  3002               	movlw	2	; select bank4/5
 10064  1655  3F4C               	moviw [12]fsr1
 10065  1656  0023               	movlb	3	; select bank3
 10066  1657  00A0               	movwf	_Memory^(0+384)
 10067                           
 10068                           ;MCU_B1.c: 871: Memory.Data[1]=product->Data[13];
 10069  1658  0020               	movlb	0	; select bank0
 10070  1659  086C               	movf	_product,w
 10071  165A  0086               	movwf	6
 10072  165B  3002               	movlw	2	; select bank4/5
 10073  165C  0087               	movwf	7
 10074  165D  3002               	movlw	2	; select bank4/5
 10075  165E  3F4D               	moviw [13]fsr1
 10076  165F  0023               	movlb	3	; select bank3
 10077  1660  00A1               	movwf	(_Memory^(0+384)+1)
 10078                           
 10079                           ;MCU_B1.c: 872: Memory.Data[2]=product->Data[14];
 10080  1661  0020               	movlb	0	; select bank0
 10081  1662  086C               	movf	_product,w
 10082  1663  0086               	movwf	6
 10083  1664  3002               	movlw	2	; select bank4/5
 10084  1665  0087               	movwf	7
 10085  1666  3002               	movlw	2	; select bank4/5
 10086  1667  3F4E               	moviw [14]fsr1
 10087  1668  0023               	movlb	3	; select bank3
 10088  1669  00A2               	movwf	(_Memory^(0+384)+2)
 10089                           
 10090                           ;MCU_B1.c: 878: if (Memory.LoopSave == 1) {
 10091  166A  1D44               	btfss	(_Memory^(0+384)+36),2
 10092  166B  2E70               	goto	l1452
 10093                           
 10094                           ;MCU_B1.c: 879: Memory.LoopSave = 0;
 10095  166C  1144               	bcf	(_Memory^(0+384)+36),2
 10096                           
 10097                           ;MCU_B1.c: 880: myMain.FirstOpen = 0;
 10098  166D  0021               	movlb	1	; select bank1
 10099  166E  12A0               	bcf	_myMain^(0+128),5
 10100                           
 10101                           ;MCU_B1.c: 881: myMain.First = 0;
 10102  166F  13A0               	bcf	_myMain^(0+128),7
 10103  1670                     l1452:	
 10104                           
 10105                           ;MCU_B1.c: 883: }
 10106                           ;MCU_B1.c: 884: GIE = 0;
 10107  1670  138B               	bcf	11,7	;volatile
 10108                           
 10109                           ;MCU_B1.c: 885: Flash_Memory_Erasing();
 10110  1671  3190  2066  3196   	fcall	_Flash_Memory_Erasing
 10111                           
 10112                           ;MCU_B1.c: 886: Flash_Memory_Write();
 10113  1674  3194  242B         	fcall	_Flash_Memory_Write
 10114                           
 10115                           ;MCU_B1.c: 887: GIE = 1;
 10116  1676  178B               	bsf	11,7	;volatile
 10117  1677  0008               	return
 10118  1678                     __end_of_Flash_Memory_Modify:	
 10119                           
 10120                           	psect	text54
 10121  1066                     __ptext54:	
 10122 ;; *************** function _Flash_Memory_Erasing *****************
 10123 ;; Defined at:
 10124 ;;		line 854 in file "../src/MCU_B1.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;		None
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;		None
 10129 ;; Return value:  Size  Location     Type
 10130 ;;		None               void
 10131 ;; Registers used:
 10132 ;;		wreg, status,2, status,0, pclath, cstack
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;Total ram usage:        0 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; Hardware stack levels required when called:    6
 10145 ;; This function calls:
 10146 ;;		_Flash_Memory_Unlock
 10147 ;; This function is called by:
 10148 ;;		_Flash_Memory_Modify
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           
 10153                           ;psect for function _Flash_Memory_Erasing
 10154  1066                     _Flash_Memory_Erasing:	
 10155                           
 10156                           ;MCU_B1.c: 855: CFGS = 0;
 10157                           
 10158                           ;incstack = 0
 10159                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10160  1066  0023               	movlb	3	; select bank3
 10161  1067  1315               	bcf	21,6	;volatile
 10162                           
 10163                           ;MCU_B1.c: 856: PMADRH = 0x30;
 10164  1068  3030               	movlw	48
 10165  1069  0092               	movwf	18	;volatile
 10166                           
 10167                           ;MCU_B1.c: 857: PMADRL = 0x00;
 10168  106A  0191               	clrf	17	;volatile
 10169                           
 10170                           ;MCU_B1.c: 858: FREE = 1;
 10171  106B  1615               	bsf	21,4	;volatile
 10172                           
 10173                           ;MCU_B1.c: 859: WREN = 1;
 10174  106C  1515               	bsf	21,2	;volatile
 10175                           
 10176                           ;MCU_B1.c: 860: Flash_Memory_Unlock();
 10177  106D  319E  2643         	fcall	_Flash_Memory_Unlock
 10178                           
 10179                           ;MCU_B1.c: 861: WREN = 0;
 10180  106F  0023               	movlb	3	; select bank3
 10181  1070  1115               	bcf	21,2	;volatile
 10182  1071  0008               	return
 10183  1072                     __end_of_Flash_Memory_Erasing:	
 10184                           
 10185                           	psect	text55
 10186  0544                     __ptext55:	
 10187 ;; *************** function _Flash_Memory_Initialization *****************
 10188 ;; Defined at:
 10189 ;;		line 755 in file "../src/MCU_B1.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;		None
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  i               1   62[BANK0 ] unsigned char 
 10194 ;; Return value:  Size  Location     Type
 10195 ;;		None               void
 10196 ;; Registers used:
 10197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;Total ram usage:        2 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    8
 10210 ;; This function calls:
 10211 ;;		_Flash_Memory_Read
 10212 ;;		_Flash_Memory_Write
 10213 ;;		_setPercentValue
 10214 ;; This function is called by:
 10215 ;;		_main
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           
 10220                           ;psect for function _Flash_Memory_Initialization
 10221  0544                     _Flash_Memory_Initialization:	
 10222                           
 10223                           ;MCU_B1.c: 756: char i = 0;
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10227  0544  0020               	movlb	0	; select bank0
 10228  0545  01DE               	clrf	Flash_Memory_Initialization@i
 10229                           
 10230                           ;MCU_B1.c: 757: if (Flash_Memory_Read(31) == 0xaa) {
 10231  0546  301F               	movlw	31
 10232  0547  3191  2117  3185   	fcall	_Flash_Memory_Read
 10233  054A  3AAA               	xorlw	170
 10234  054B  1D03               	skipz
 10235  054C  2DB6               	goto	l9649
 10236                           
 10237                           ;MCU_B1.c: 758: product->Data[12] = Flash_Memory_Read(0);
 10238  054D  3000               	movlw	0
 10239  054E  3191  2117  3185   	fcall	_Flash_Memory_Read
 10240  0551  0020               	movlb	0	; select bank0
 10241  0552  00DD               	movwf	??_Flash_Memory_Initialization
 10242  0553  086C               	movf	_product,w
 10243  0554  3E0C               	addlw	12
 10244  0555  0086               	movwf	6
 10245  0556  3002               	movlw	2	; select bank4/5
 10246  0557  0087               	movwf	7
 10247  0558  085D               	movf	??_Flash_Memory_Initialization,w
 10248  0559  0081               	movwf	1
 10249                           
 10250                           ;MCU_B1.c: 759: product->Data[13] = Flash_Memory_Read(1);
 10251  055A  3001               	movlw	1
 10252  055B  3191  2117  3185   	fcall	_Flash_Memory_Read
 10253  055E  0020               	movlb	0	; select bank0
 10254  055F  00DD               	movwf	??_Flash_Memory_Initialization
 10255  0560  086C               	movf	_product,w
 10256  0561  3E0D               	addlw	13
 10257  0562  0086               	movwf	6
 10258  0563  3002               	movlw	2	; select bank4/5
 10259  0564  0087               	movwf	7
 10260  0565  085D               	movf	??_Flash_Memory_Initialization,w
 10261  0566  0081               	movwf	1
 10262                           
 10263                           ;MCU_B1.c: 760: product->Data[14] = Flash_Memory_Read(2);
 10264  0567  3002               	movlw	2
 10265  0568  3191  2117  3185   	fcall	_Flash_Memory_Read
 10266  056B  0020               	movlb	0	; select bank0
 10267  056C  00DD               	movwf	??_Flash_Memory_Initialization
 10268  056D  086C               	movf	_product,w
 10269  056E  3E0E               	addlw	14
 10270  056F  0086               	movwf	6
 10271  0570  3002               	movlw	2	; select bank4/5
 10272  0571  0087               	movwf	7
 10273  0572  085D               	movf	??_Flash_Memory_Initialization,w
 10274  0573  0081               	movwf	1
 10275                           
 10276                           ;MCU_B1.c: 766: i = setPercentValue(((char)((100-90)*0.8)));
 10277  0574  3008               	movlw	8
 10278  0575  3196  2678  3185   	fcall	_setPercentValue
 10279  0578  0020               	movlb	0	; select bank0
 10280  0579  00DD               	movwf	??_Flash_Memory_Initialization
 10281  057A  085D               	movf	??_Flash_Memory_Initialization,w
 10282  057B  00DE               	movwf	Flash_Memory_Initialization@i
 10283                           
 10284                           ;MCU_B1.c: 767: product->Data[21] = i;
 10285  057C  085E               	movf	Flash_Memory_Initialization@i,w
 10286  057D  00DD               	movwf	??_Flash_Memory_Initialization
 10287  057E  086C               	movf	_product,w
 10288  057F  3E15               	addlw	21
 10289  0580  0086               	movwf	6
 10290  0581  3002               	movlw	2	; select bank4/5
 10291  0582  0087               	movwf	7
 10292  0583  085D               	movf	??_Flash_Memory_Initialization,w
 10293  0584  0081               	movwf	1
 10294                           
 10295                           ;MCU_B1.c: 768: product->Data[22] = i;
 10296  0585  085E               	movf	Flash_Memory_Initialization@i,w
 10297  0586  00DD               	movwf	??_Flash_Memory_Initialization
 10298  0587  086C               	movf	_product,w
 10299  0588  3E16               	addlw	22
 10300  0589  0086               	movwf	6
 10301  058A  3002               	movlw	2	; select bank4/5
 10302  058B  0087               	movwf	7
 10303  058C  085D               	movf	??_Flash_Memory_Initialization,w
 10304  058D  0081               	movwf	1
 10305                           
 10306                           ;MCU_B1.c: 769: product->Data[23] = i;
 10307  058E  085E               	movf	Flash_Memory_Initialization@i,w
 10308  058F  00DD               	movwf	??_Flash_Memory_Initialization
 10309  0590  086C               	movf	_product,w
 10310  0591  3E17               	addlw	23
 10311  0592  0086               	movwf	6
 10312  0593  3002               	movlw	2	; select bank4/5
 10313  0594  0087               	movwf	7
 10314  0595  085D               	movf	??_Flash_Memory_Initialization,w
 10315  0596  0081               	movwf	1
 10316                           
 10317                           ;MCU_B1.c: 771: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10318  0597  086C               	movf	_product,w
 10319  0598  3E0C               	addlw	12
 10320  0599  0086               	movwf	6
 10321  059A  3002               	movlw	2	; select bank4/5
 10322  059B  0087               	movwf	7
 10323  059C  0801               	movf	1,w
 10324  059D  3AFF               	xorlw	255
 10325  059E  1D03               	skipz
 10326  059F  0008               	return
 10327  05A0  086C               	movf	_product,w
 10328  05A1  3E0D               	addlw	13
 10329  05A2  0086               	movwf	6
 10330  05A3  3002               	movlw	2	; select bank4/5
 10331  05A4  0087               	movwf	7
 10332  05A5  0801               	movf	1,w
 10333  05A6  3AFF               	xorlw	255
 10334  05A7  1D03               	skipz
 10335  05A8  0008               	return
 10336  05A9  086C               	movf	_product,w
 10337  05AA  3E0E               	addlw	14
 10338  05AB  0086               	movwf	6
 10339  05AC  3002               	movlw	2	; select bank4/5
 10340  05AD  0087               	movwf	7
 10341  05AE  0801               	movf	1,w
 10342  05AF  3AFF               	xorlw	255
 10343  05B0  1D03               	skipz
 10344  05B1  0008               	return
 10345                           
 10346                           ;MCU_B1.c: 772: myMain.FirstOpen = 1;
 10347  05B2  0021               	movlb	1	; select bank1
 10348  05B3  16A0               	bsf	_myMain^(0+128),5
 10349                           
 10350                           ;MCU_B1.c: 773: myMain.First = 1;
 10351  05B4  17A0               	bsf	_myMain^(0+128),7
 10352                           
 10353                           ;MCU_B1.c: 774: }
 10354                           ;MCU_B1.c: 775: } else {
 10355  05B5  0008               	return
 10356  05B6                     l9649:	
 10357                           
 10358                           ;MCU_B1.c: 776: i = setPercentValue(((char)((100-90)*0.8)));
 10359  05B6  3008               	movlw	8
 10360  05B7  3196  2678  3185   	fcall	_setPercentValue
 10361  05BA  0020               	movlb	0	; select bank0
 10362  05BB  00DD               	movwf	??_Flash_Memory_Initialization
 10363  05BC  085D               	movf	??_Flash_Memory_Initialization,w
 10364  05BD  00DE               	movwf	Flash_Memory_Initialization@i
 10365                           
 10366                           ;MCU_B1.c: 777: Memory.Data[0]=0xff;
 10367  05BE  30FF               	movlw	255
 10368  05BF  00DD               	movwf	??_Flash_Memory_Initialization
 10369  05C0  085D               	movf	??_Flash_Memory_Initialization,w
 10370  05C1  0023               	movlb	3	; select bank3
 10371  05C2  00A0               	movwf	_Memory^(0+384)
 10372                           
 10373                           ;MCU_B1.c: 778: Memory.Data[1]=0xff;
 10374  05C3  30FF               	movlw	255
 10375  05C4  0020               	movlb	0	; select bank0
 10376  05C5  00DD               	movwf	??_Flash_Memory_Initialization
 10377  05C6  085D               	movf	??_Flash_Memory_Initialization,w
 10378  05C7  0023               	movlb	3	; select bank3
 10379  05C8  00A1               	movwf	(_Memory^(0+384)+1)
 10380                           
 10381                           ;MCU_B1.c: 779: Memory.Data[2]=0xff;
 10382  05C9  30FF               	movlw	255
 10383  05CA  0020               	movlb	0	; select bank0
 10384  05CB  00DD               	movwf	??_Flash_Memory_Initialization
 10385  05CC  085D               	movf	??_Flash_Memory_Initialization,w
 10386  05CD  0023               	movlb	3	; select bank3
 10387  05CE  00A2               	movwf	(_Memory^(0+384)+2)
 10388                           
 10389                           ;MCU_B1.c: 780: Memory.Data[3]=0xff;
 10390  05CF  30FF               	movlw	255
 10391  05D0  0020               	movlb	0	; select bank0
 10392  05D1  00DD               	movwf	??_Flash_Memory_Initialization
 10393  05D2  085D               	movf	??_Flash_Memory_Initialization,w
 10394  05D3  0023               	movlb	3	; select bank3
 10395  05D4  00A3               	movwf	(_Memory^(0+384)+3)
 10396                           
 10397                           ;MCU_B1.c: 781: Memory.Data[4]=0xff;
 10398  05D5  30FF               	movlw	255
 10399  05D6  0020               	movlb	0	; select bank0
 10400  05D7  00DD               	movwf	??_Flash_Memory_Initialization
 10401  05D8  085D               	movf	??_Flash_Memory_Initialization,w
 10402  05D9  0023               	movlb	3	; select bank3
 10403  05DA  00A4               	movwf	(_Memory^(0+384)+4)
 10404                           
 10405                           ;MCU_B1.c: 782: Memory.Data[5]=0xff;
 10406  05DB  30FF               	movlw	255
 10407  05DC  0020               	movlb	0	; select bank0
 10408  05DD  00DD               	movwf	??_Flash_Memory_Initialization
 10409  05DE  085D               	movf	??_Flash_Memory_Initialization,w
 10410  05DF  0023               	movlb	3	; select bank3
 10411  05E0  00A5               	movwf	(_Memory^(0+384)+5)
 10412                           
 10413                           ;MCU_B1.c: 783: Memory.Data[31]=0xaa;
 10414  05E1  30AA               	movlw	170
 10415  05E2  0020               	movlb	0	; select bank0
 10416  05E3  00DD               	movwf	??_Flash_Memory_Initialization
 10417  05E4  085D               	movf	??_Flash_Memory_Initialization,w
 10418  05E5  0023               	movlb	3	; select bank3
 10419  05E6  00BF               	movwf	(_Memory^(0+384)+31)
 10420                           
 10421                           ;MCU_B1.c: 784: product->Data[21] = i;
 10422  05E7  0020               	movlb	0	; select bank0
 10423  05E8  085E               	movf	Flash_Memory_Initialization@i,w
 10424  05E9  00DD               	movwf	??_Flash_Memory_Initialization
 10425  05EA  086C               	movf	_product,w
 10426  05EB  3E15               	addlw	21
 10427  05EC  0086               	movwf	6
 10428  05ED  3002               	movlw	2	; select bank4/5
 10429  05EE  0087               	movwf	7
 10430  05EF  085D               	movf	??_Flash_Memory_Initialization,w
 10431  05F0  0081               	movwf	1
 10432                           
 10433                           ;MCU_B1.c: 785: product->Data[22] = i;
 10434  05F1  085E               	movf	Flash_Memory_Initialization@i,w
 10435  05F2  00DD               	movwf	??_Flash_Memory_Initialization
 10436  05F3  086C               	movf	_product,w
 10437  05F4  3E16               	addlw	22
 10438  05F5  0086               	movwf	6
 10439  05F6  3002               	movlw	2	; select bank4/5
 10440  05F7  0087               	movwf	7
 10441  05F8  085D               	movf	??_Flash_Memory_Initialization,w
 10442  05F9  0081               	movwf	1
 10443                           
 10444                           ;MCU_B1.c: 786: product->Data[23] = i;
 10445  05FA  085E               	movf	Flash_Memory_Initialization@i,w
 10446  05FB  00DD               	movwf	??_Flash_Memory_Initialization
 10447  05FC  086C               	movf	_product,w
 10448  05FD  3E17               	addlw	23
 10449  05FE  0086               	movwf	6
 10450  05FF  3002               	movlw	2	; select bank4/5
 10451  0600  0087               	movwf	7
 10452  0601  085D               	movf	??_Flash_Memory_Initialization,w
 10453  0602  0081               	movwf	1
 10454                           
 10455                           ;MCU_B1.c: 787: GIE = 0;
 10456  0603  138B               	bcf	11,7	;volatile
 10457                           
 10458                           ;MCU_B1.c: 788: Flash_Memory_Write();
 10459  0604  3194  242B         	fcall	_Flash_Memory_Write
 10460                           
 10461                           ;MCU_B1.c: 789: GIE = 1;
 10462  0606  178B               	bsf	11,7	;volatile
 10463                           
 10464                           ;MCU_B1.c: 790: myMain.FirstOpen = 1;
 10465  0607  0021               	movlb	1	; select bank1
 10466  0608  16A0               	bsf	_myMain^(0+128),5
 10467                           
 10468                           ;MCU_B1.c: 791: myMain.First = 1;
 10469  0609  17A0               	bsf	_myMain^(0+128),7
 10470  060A  0008               	return
 10471  060B                     __end_of_Flash_Memory_Initialization:	
 10472                           
 10473                           	psect	text56
 10474  142B                     __ptext56:	
 10475 ;; *************** function _Flash_Memory_Write *****************
 10476 ;; Defined at:
 10477 ;;		line 835 in file "../src/MCU_B1.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;		None
 10480 ;; Auto vars:     Size  Location     Type
 10481 ;;  i               1    1[BANK0 ] unsigned char 
 10482 ;; Return value:  Size  Location     Type
 10483 ;;		None               void
 10484 ;; Registers used:
 10485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10486 ;; Tracked objects:
 10487 ;;		On entry : 0/0
 10488 ;;		On exit  : 0/0
 10489 ;;		Unchanged: 0/0
 10490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;Total ram usage:        2 bytes
 10496 ;; Hardware stack levels used:    1
 10497 ;; Hardware stack levels required when called:    6
 10498 ;; This function calls:
 10499 ;;		_Flash_Memory_Unlock
 10500 ;; This function is called by:
 10501 ;;		_Flash_Memory_Initialization
 10502 ;;		_Flash_Memory_Modify
 10503 ;; This function uses a non-reentrant model
 10504 ;;
 10505                           
 10506                           
 10507                           ;psect for function _Flash_Memory_Write
 10508  142B                     _Flash_Memory_Write:	
 10509                           
 10510                           ;MCU_B1.c: 836: char i = 0;
 10511                           
 10512                           ;incstack = 0
 10513                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10514  142B  0020               	movlb	0	; select bank0
 10515  142C  01A1               	clrf	Flash_Memory_Write@i
 10516                           
 10517                           ;MCU_B1.c: 837: CFGS = 0;
 10518  142D  0023               	movlb	3	; select bank3
 10519  142E  1315               	bcf	21,6	;volatile
 10520                           
 10521                           ;MCU_B1.c: 838: PMADRH = 0x30;
 10522  142F  3030               	movlw	48
 10523  1430  0092               	movwf	18	;volatile
 10524                           
 10525                           ;MCU_B1.c: 839: PMDATH = 0;
 10526  1431  0194               	clrf	20	;volatile
 10527                           
 10528                           ;MCU_B1.c: 840: FREE = 0;
 10529  1432  1215               	bcf	21,4	;volatile
 10530                           
 10531                           ;MCU_B1.c: 841: LWLO = 1;
 10532  1433  1695               	bsf	21,5	;volatile
 10533                           
 10534                           ;MCU_B1.c: 842: WREN = 1;
 10535  1434  1515               	bsf	21,2	;volatile
 10536                           
 10537                           ;MCU_B1.c: 843: for (i = 0; i < 32; i++) {
 10538  1435  0020               	movlb	0	; select bank0
 10539  1436  01A1               	clrf	Flash_Memory_Write@i
 10540  1437  3020               	movlw	32
 10541  1438  0221               	subwf	Flash_Memory_Write@i,w
 10542  1439  1803               	btfsc	3,0
 10543  143A  2C53               	goto	l1443
 10544  143B                     l8815:	
 10545                           
 10546                           ;MCU_B1.c: 844: PMADRL = i;
 10547  143B  0821               	movf	Flash_Memory_Write@i,w
 10548  143C  0023               	movlb	3	; select bank3
 10549  143D  0091               	movwf	17	;volatile
 10550                           
 10551                           ;MCU_B1.c: 845: PMDATL = Memory.Data[i];
 10552  143E  0020               	movlb	0	; select bank0
 10553  143F  0821               	movf	Flash_Memory_Write@i,w
 10554  1440  3EA0               	addlw	_Memory& (0+255)
 10555  1441  0086               	movwf	6
 10556  1442  3001               	movlw	1	; select bank3/4
 10557  1443  0087               	movwf	7
 10558  1444  0801               	movf	1,w
 10559  1445  0023               	movlb	3	; select bank3
 10560  1446  0093               	movwf	19	;volatile
 10561                           
 10562                           ;MCU_B1.c: 846: Flash_Memory_Unlock();
 10563  1447  319E  2643  3194   	fcall	_Flash_Memory_Unlock
 10564  144A  3001               	movlw	1
 10565  144B  0020               	movlb	0	; select bank0
 10566  144C  00A0               	movwf	??_Flash_Memory_Write
 10567  144D  0820               	movf	??_Flash_Memory_Write,w
 10568  144E  07A1               	addwf	Flash_Memory_Write@i,f
 10569  144F  3020               	movlw	32
 10570  1450  0221               	subwf	Flash_Memory_Write@i,w
 10571  1451  1C03               	skipc
 10572  1452  2C3B               	goto	l8815
 10573  1453                     l1443:	
 10574                           
 10575                           ;MCU_B1.c: 847: }
 10576                           ;MCU_B1.c: 848: LWLO = 0;
 10577  1453  0023               	movlb	3	; select bank3
 10578  1454  1295               	bcf	21,5	;volatile
 10579                           
 10580                           ;MCU_B1.c: 849: Flash_Memory_Unlock();
 10581  1455  319E  2643         	fcall	_Flash_Memory_Unlock
 10582                           
 10583                           ;MCU_B1.c: 850: WREN = 0;
 10584  1457  0023               	movlb	3	; select bank3
 10585  1458  1115               	bcf	21,2	;volatile
 10586  1459  0008               	return
 10587  145A                     __end_of_Flash_Memory_Write:	
 10588                           
 10589                           	psect	text57
 10590  1E43                     __ptext57:	
 10591 ;; *************** function _Flash_Memory_Unlock *****************
 10592 ;; Defined at:
 10593 ;;		line 814 in file "../src/MCU_B1.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;		None
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;		None
 10598 ;; Return value:  Size  Location     Type
 10599 ;;		None               void
 10600 ;; Registers used:
 10601 ;;		wreg
 10602 ;; Tracked objects:
 10603 ;;		On entry : 0/0
 10604 ;;		On exit  : 0/0
 10605 ;;		Unchanged: 0/0
 10606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;Total ram usage:        0 bytes
 10612 ;; Hardware stack levels used:    1
 10613 ;; Hardware stack levels required when called:    5
 10614 ;; This function calls:
 10615 ;;		Nothing
 10616 ;; This function is called by:
 10617 ;;		_Flash_Memory_Write
 10618 ;;		_Flash_Memory_Erasing
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           
 10623                           ;psect for function _Flash_Memory_Unlock
 10624  1E43                     _Flash_Memory_Unlock:	
 10625                           
 10626                           ;MCU_B1.c: 815: PMCON2 = 0x55;
 10627                           
 10628                           ;incstack = 0
 10629                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10630  1E43  3055               	movlw	85
 10631  1E44  0023               	movlb	3	; select bank3
 10632  1E45  0096               	movwf	22	;volatile
 10633                           
 10634                           ;MCU_B1.c: 816: PMCON2 = 0xaa;
 10635  1E46  30AA               	movlw	170
 10636  1E47  0096               	movwf	22	;volatile
 10637                           
 10638                           ;MCU_B1.c: 817: WR = 1;
 10639  1E48  1495               	bsf	21,1	;volatile
 10640                           
 10641                           ;MCU_B1.c: 818: __nop();
 10642  1E49  0000               	nop
 10643                           
 10644                           ;MCU_B1.c: 819: __nop();
 10645  1E4A  0000               	nop
 10646  1E4B  0008               	return
 10647  1E4C                     __end_of_Flash_Memory_Unlock:	
 10648                           
 10649                           	psect	text58
 10650  1117                     __ptext58:	
 10651 ;; *************** function _Flash_Memory_Read *****************
 10652 ;; Defined at:
 10653 ;;		line 823 in file "../src/MCU_B1.c"
 10654 ;; Parameters:    Size  Location     Type
 10655 ;;  address         1    wreg     unsigned char 
 10656 ;; Auto vars:     Size  Location     Type
 10657 ;;  address         1    2[BANK0 ] unsigned char 
 10658 ;;  ret             1    3[BANK0 ] unsigned char 
 10659 ;;  i               1    1[BANK0 ] unsigned char 
 10660 ;; Return value:  Size  Location     Type
 10661 ;;                  1    wreg      unsigned char 
 10662 ;; Registers used:
 10663 ;;		wreg, status,2
 10664 ;; Tracked objects:
 10665 ;;		On entry : 0/0
 10666 ;;		On exit  : 0/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;Total ram usage:        4 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; Hardware stack levels required when called:    5
 10676 ;; This function calls:
 10677 ;;		Nothing
 10678 ;; This function is called by:
 10679 ;;		_Flash_Memory_Initialization
 10680 ;;		_Flash_Memory_Modify
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           
 10685                           ;psect for function _Flash_Memory_Read
 10686  1117                     _Flash_Memory_Read:	
 10687                           
 10688                           ;incstack = 0
 10689                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10690                           ;Flash_Memory_Read@address stored from wreg
 10691  1117  0020               	movlb	0	; select bank0
 10692  1118  00A2               	movwf	Flash_Memory_Read@address
 10693                           
 10694                           ;MCU_B1.c: 824: char i = 0, ret = 0;
 10695  1119  01A1               	clrf	Flash_Memory_Read@i
 10696  111A  01A3               	clrf	Flash_Memory_Read@ret
 10697                           
 10698                           ;MCU_B1.c: 825: PMADRH = 0x30;
 10699  111B  3030               	movlw	48
 10700  111C  0023               	movlb	3	; select bank3
 10701  111D  0092               	movwf	18	;volatile
 10702                           
 10703                           ;MCU_B1.c: 826: PMADRL = address;
 10704  111E  0020               	movlb	0	; select bank0
 10705  111F  0822               	movf	Flash_Memory_Read@address,w
 10706  1120  0023               	movlb	3	; select bank3
 10707  1121  0091               	movwf	17	;volatile
 10708                           
 10709                           ;MCU_B1.c: 827: CFGS = 0;
 10710  1122  1315               	bcf	21,6	;volatile
 10711                           
 10712                           ;MCU_B1.c: 828: RD = 1;
 10713  1123  1415               	bsf	21,0	;volatile
 10714                           
 10715                           ;MCU_B1.c: 829: i = PMDATH;
 10716  1124  0814               	movf	20,w	;volatile
 10717  1125  0020               	movlb	0	; select bank0
 10718  1126  00A0               	movwf	??_Flash_Memory_Read
 10719  1127  0820               	movf	??_Flash_Memory_Read,w
 10720  1128  00A1               	movwf	Flash_Memory_Read@i
 10721                           
 10722                           ;MCU_B1.c: 830: ret = PMDATL;
 10723  1129  0023               	movlb	3	; select bank3
 10724  112A  0813               	movf	19,w	;volatile
 10725  112B  0020               	movlb	0	; select bank0
 10726  112C  00A0               	movwf	??_Flash_Memory_Read
 10727  112D  0820               	movf	??_Flash_Memory_Read,w
 10728  112E  00A3               	movwf	Flash_Memory_Read@ret
 10729                           
 10730                           ;MCU_B1.c: 831: return ret;
 10731  112F  0823               	movf	Flash_Memory_Read@ret,w
 10732  1130  0008               	return
 10733  1131                     __end_of_Flash_Memory_Read:	
 10734                           
 10735                           	psect	text59
 10736  1EE4                     __ptext59:	
 10737 ;; *************** function _DimmerLights_Main *****************
 10738 ;; Defined at:
 10739 ;;		line 418 in file "../src/Dimmer_B1.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;		None
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;		None
 10744 ;; Return value:  Size  Location     Type
 10745 ;;		None               void
 10746 ;; Registers used:
 10747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;Total ram usage:        0 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:   11
 10760 ;; This function calls:
 10761 ;;		_DimmerLights_Close
 10762 ;;		_setDimmerLights_Main
 10763 ;; This function is called by:
 10764 ;;		_main
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           
 10769                           ;psect for function _DimmerLights_Main
 10770  1EE4                     _DimmerLights_Main:	
 10771                           
 10772                           ;Dimmer_B1.c: 421: setDimmerLights_Main(1);
 10773                           
 10774                           ;incstack = 0
 10775                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10776  1EE4  3001               	movlw	1
 10777  1EE5  318D  258E  319E   	fcall	_setDimmerLights_Main
 10778                           
 10779                           ;Dimmer_B1.c: 425: setDimmerLights_Main(2);
 10780  1EE8  3002               	movlw	2
 10781  1EE9  318D  258E  319E   	fcall	_setDimmerLights_Main
 10782                           
 10783                           ;Dimmer_B1.c: 429: setDimmerLights_Main(3);
 10784  1EEC  3003               	movlw	3
 10785  1EED  318D  258E  319E   	fcall	_setDimmerLights_Main
 10786                           
 10787                           ;Dimmer_B1.c: 432: DimmerLights_Close();
 10788  1EF0  319F  27ED         	fcall	_DimmerLights_Close
 10789  1EF2  0008               	return
 10790  1EF3                     __end_of_DimmerLights_Main:	
 10791                           
 10792                           	psect	text60
 10793  0D8E                     __ptext60:	
 10794 ;; *************** function _setDimmerLights_Main *****************
 10795 ;; Defined at:
 10796 ;;		line 436 in file "../src/Dimmer_B1.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;  lights          1    wreg     unsigned char 
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;  lights          1   74[BANK0 ] unsigned char 
 10801 ;;  clear           1   73[BANK0 ] unsigned char 
 10802 ;; Return value:  Size  Location     Type
 10803 ;;		None               void
 10804 ;; Registers used:
 10805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10806 ;; Tracked objects:
 10807 ;;		On entry : 0/0
 10808 ;;		On exit  : 0/0
 10809 ;;		Unchanged: 0/0
 10810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;Total ram usage:        6 bytes
 10816 ;; Hardware stack levels used:    1
 10817 ;; Hardware stack levels required when called:   10
 10818 ;; This function calls:
 10819 ;;		_DimmerLightsPointSelect
 10820 ;;		_setBuz
 10821 ;;		_setDimmerLights
 10822 ;;		_setDimmerLights_Adj
 10823 ;; This function is called by:
 10824 ;;		_DimmerLights_Main
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _setDimmerLights_Main
 10830  0D8E                     _setDimmerLights_Main:	
 10831                           
 10832                           ;incstack = 0
 10833                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10834                           ;setDimmerLights_Main@lights stored from wreg
 10835  0D8E  0020               	movlb	0	; select bank0
 10836  0D8F  00EA               	movwf	setDimmerLights_Main@lights
 10837                           
 10838                           ;Dimmer_B1.c: 437: char clear = 1;
 10839  0D90  01E9               	clrf	setDimmerLights_Main@clear
 10840  0D91  0AE9               	incf	setDimmerLights_Main@clear,f
 10841                           
 10842                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 10843  0D92  086A               	movf	setDimmerLights_Main@lights,w
 10844  0D93  3191  2131  318D   	fcall	_DimmerLightsPointSelect
 10845                           
 10846                           ;Dimmer_B1.c: 441: if (lights == 1) {
 10847  0D96  0020               	movlb	0	; select bank0
 10848  0D97  086A               	movf	setDimmerLights_Main@lights,w
 10849  0D98  3A01               	xorlw	1
 10850  0D99  1D03               	skipz
 10851  0D9A  2DA6               	goto	l9173
 10852                           
 10853                           ;Dimmer_B1.c: 442: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10854  0D9B  01E6               	clrf	_setDimmerLights_Main$2410
 10855  0D9C  0022               	movlb	2	; select bank2
 10856  0D9D  1955               	btfsc	(_DimmerLights2^(0+256)+9),2
 10857  0D9E  1D64               	btfss	(_DimmerLights3^(0+256)+9),2
 10858  0D9F  2DA3               	goto	l9171
 10859  0DA0  0020               	movlb	0	; select bank0
 10860  0DA1  01E6               	clrf	_setDimmerLights_Main$2410
 10861  0DA2  0AE6               	incf	_setDimmerLights_Main$2410,f
 10862  0DA3                     l9171:	
 10863  0DA3  0020               	movlb	0	; select bank0
 10864  0DA4  0866               	movf	_setDimmerLights_Main$2410,w
 10865  0DA5  2DC3               	goto	L9
 10866  0DA6                     l9173:	
 10867                           ;Dimmer_B1.c: 443: } else if (lights == 2) {
 10868                           
 10869  0DA6  086A               	movf	setDimmerLights_Main@lights,w
 10870  0DA7  3A02               	xorlw	2
 10871  0DA8  1D03               	skipz
 10872  0DA9  2DB5               	goto	l9185
 10873                           
 10874                           ;Dimmer_B1.c: 444: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10875  0DAA  01E7               	clrf	_setDimmerLights_Main$2418
 10876  0DAB  0022               	movlb	2	; select bank2
 10877  0DAC  1946               	btfsc	(_DimmerLights1^(0+256)+9),2
 10878  0DAD  1D64               	btfss	(_DimmerLights3^(0+256)+9),2
 10879  0DAE  2DB2               	goto	l9183
 10880  0DAF  0020               	movlb	0	; select bank0
 10881  0DB0  01E7               	clrf	_setDimmerLights_Main$2418
 10882  0DB1  0AE7               	incf	_setDimmerLights_Main$2418,f
 10883  0DB2                     l9183:	
 10884  0DB2  0020               	movlb	0	; select bank0
 10885  0DB3  0867               	movf	_setDimmerLights_Main$2418,w
 10886  0DB4  2DC3               	goto	L9
 10887  0DB5                     l9185:	
 10888                           ;Dimmer_B1.c: 445: } else if (lights == 3) {
 10889                           
 10890  0DB5  086A               	movf	setDimmerLights_Main@lights,w
 10891  0DB6  3A03               	xorlw	3
 10892  0DB7  1D03               	skipz
 10893  0DB8  2DC6               	goto	l9197
 10894                           
 10895                           ;Dimmer_B1.c: 446: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 10896  0DB9  01E8               	clrf	_setDimmerLights_Main$2419
 10897  0DBA  0022               	movlb	2	; select bank2
 10898  0DBB  1946               	btfsc	(_DimmerLights1^(0+256)+9),2
 10899  0DBC  1D55               	btfss	(_DimmerLights2^(0+256)+9),2
 10900  0DBD  2DC1               	goto	l9195
 10901  0DBE  0020               	movlb	0	; select bank0
 10902  0DBF  01E8               	clrf	_setDimmerLights_Main$2419
 10903  0DC0  0AE8               	incf	_setDimmerLights_Main$2419,f
 10904  0DC1                     l9195:	
 10905  0DC1  0020               	movlb	0	; select bank0
 10906  0DC2  0868               	movf	_setDimmerLights_Main$2419,w
 10907  0DC3                     L9:	
 10908  0DC3  00E5               	movwf	??_setDimmerLights_Main
 10909  0DC4  0865               	movf	??_setDimmerLights_Main,w
 10910  0DC5  00E9               	movwf	setDimmerLights_Main@clear
 10911  0DC6                     l9197:	
 10912                           
 10913                           ;Dimmer_B1.c: 447: }
 10914                           ;Dimmer_B1.c: 458: if (DimmerLights->Trigger == 1) {
 10915  0DC6  0874               	movf	_DimmerLights,w
 10916  0DC7  3E08               	addlw	8
 10917  0DC8  0086               	movwf	6
 10918  0DC9  3001               	movlw	1	; select bank2/3
 10919  0DCA  0087               	movwf	7
 10920  0DCB  1D01               	btfss	1,2
 10921  0DCC  2DEA               	goto	l9207
 10922                           
 10923                           ;Dimmer_B1.c: 459: if (clear == 1) {
 10924  0DCD  0869               	movf	setDimmerLights_Main@clear,w
 10925  0DCE  3A01               	xorlw	1
 10926  0DCF  1D03               	skipz
 10927  0DD0  0008               	return
 10928                           
 10929                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 0;
 10930  0DD1  0874               	movf	_DimmerLights,w
 10931  0DD2  3E08               	addlw	8
 10932  0DD3  0086               	movwf	6
 10933  0DD4  3001               	movlw	1	; select bank2/3
 10934  0DD5  0087               	movwf	7
 10935  0DD6  1101               	bcf	1,2
 10936                           
 10937                           ;Dimmer_B1.c: 461: if (DimmerLights->Switch == 1) {
 10938  0DD7  0874               	movf	_DimmerLights,w
 10939  0DD8  3E08               	addlw	8
 10940  0DD9  0086               	movwf	6
 10941  0DDA  3001               	movlw	1	; select bank2/3
 10942  0DDB  0087               	movwf	7
 10943  0DDC  1C81               	btfss	1,1
 10944  0DDD  2DE4               	goto	l9205
 10945                           
 10946                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 1);
 10947  0DDE  01A3               	clrf	setDimmerLights@status
 10948  0DDF  0AA3               	incf	setDimmerLights@status,f
 10949  0DE0  086A               	movf	setDimmerLights_Main@lights,w
 10950  0DE1  3187  277E         	fcall	_setDimmerLights
 10951                           
 10952                           ;Dimmer_B1.c: 463: } else {
 10953  0DE3  0008               	return
 10954  0DE4                     l9205:	
 10955                           
 10956                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 0);
 10957  0DE4  0020               	movlb	0	; select bank0
 10958  0DE5  01A3               	clrf	setDimmerLights@status
 10959  0DE6  086A               	movf	setDimmerLights_Main@lights,w
 10960  0DE7  3187  277E         	fcall	_setDimmerLights
 10961                           
 10962                           ;Dimmer_B1.c: 465: }
 10963                           ;Dimmer_B1.c: 469: }
 10964                           ;Dimmer_B1.c: 470: } else {
 10965  0DE9  0008               	return
 10966  0DEA                     l9207:	
 10967                           
 10968                           ;Dimmer_B1.c: 471: if (DimmerLights->TriggerAdj == 1) {
 10969  0DEA  0874               	movf	_DimmerLights,w
 10970  0DEB  3E08               	addlw	8
 10971  0DEC  0086               	movwf	6
 10972  0DED  3001               	movlw	1	; select bank2/3
 10973  0DEE  0087               	movwf	7
 10974  0DEF  1E01               	btfss	1,4
 10975  0DF0  0008               	return
 10976                           
 10977                           ;Dimmer_B1.c: 472: if (clear == 1) {
 10978  0DF1  0020               	movlb	0	; select bank0
 10979  0DF2  0869               	movf	setDimmerLights_Main@clear,w
 10980  0DF3  3A01               	xorlw	1
 10981  0DF4  1D03               	skipz
 10982  0DF5  0008               	return
 10983                           
 10984                           ;Dimmer_B1.c: 473: DimmerLights->TriggerAdj = 0;
 10985  0DF6  0874               	movf	_DimmerLights,w
 10986  0DF7  3E08               	addlw	8
 10987  0DF8  0086               	movwf	6
 10988  0DF9  3001               	movlw	1	; select bank2/3
 10989  0DFA  0087               	movwf	7
 10990  0DFB  1201               	bcf	1,4
 10991                           
 10992                           ;Dimmer_B1.c: 474: if (DimmerLights->AdjGo == 1) {
 10993  0DFC  0874               	movf	_DimmerLights,w
 10994  0DFD  3E08               	addlw	8
 10995  0DFE  0086               	movwf	6
 10996  0DFF  3001               	movlw	1	; select bank2/3
 10997  0E00  0087               	movwf	7
 10998  0E01  1D81               	btfss	1,3
 10999  0E02  2E12               	goto	l9217
 11000                           
 11001                           ;Dimmer_B1.c: 475: setDimmerLights_Adj(lights, 1);
 11002  0E03  01E2               	clrf	setDimmerLights_Adj@status
 11003  0E04  0AE2               	incf	setDimmerLights_Adj@status,f
 11004  0E05  086A               	movf	setDimmerLights_Main@lights,w
 11005  0E06  3195  2530  318D   	fcall	_setDimmerLights_Adj
 11006                           
 11007                           ;Dimmer_B1.c: 476: setBuz(1, 100);
 11008  0E09  3064               	movlw	100
 11009  0E0A  0020               	movlb	0	; select bank0
 11010  0E0B  00A9               	movwf	setBuz@time
 11011  0E0C  3000               	movlw	0
 11012  0E0D  00AA               	movwf	setBuz@time+1
 11013  0E0E  3001               	movlw	1
 11014  0E0F  3197  27A7         	fcall	_setBuz
 11015                           
 11016                           ;Dimmer_B1.c: 477: } else {
 11017  0E11  0008               	return
 11018  0E12                     l9217:	
 11019                           
 11020                           ;Dimmer_B1.c: 478: setDimmerLights_Adj(lights, 0);
 11021  0E12  0020               	movlb	0	; select bank0
 11022  0E13  01E2               	clrf	setDimmerLights_Adj@status
 11023  0E14  086A               	movf	setDimmerLights_Main@lights,w
 11024  0E15  3195  2530         	fcall	_setDimmerLights_Adj
 11025  0E17  0008               	return
 11026  0E18                     __end_of_setDimmerLights_Main:	
 11027                           
 11028                           	psect	text61
 11029  1530                     __ptext61:	
 11030 ;; *************** function _setDimmerLights_Adj *****************
 11031 ;; Defined at:
 11032 ;;		line 657 in file "../src/Dimmer_B1.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;  lights          1    wreg     unsigned char 
 11035 ;;  status          1   66[BANK0 ] unsigned char 
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;  lights          1   68[BANK0 ] unsigned char 
 11038 ;; Return value:  Size  Location     Type
 11039 ;;		None               void
 11040 ;; Registers used:
 11041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        3 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    9
 11054 ;; This function calls:
 11055 ;;		_DimmerLightsPointSelect
 11056 ;;		_setRF_DimmerLights
 11057 ;;		_setTxData
 11058 ;; This function is called by:
 11059 ;;		_setDimmerLights_Main
 11060 ;; This function uses a non-reentrant model
 11061 ;;
 11062                           
 11063                           
 11064                           ;psect for function _setDimmerLights_Adj
 11065  1530                     _setDimmerLights_Adj:	
 11066                           
 11067                           ;incstack = 0
 11068                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11069                           ;setDimmerLights_Adj@lights stored from wreg
 11070  1530  0020               	movlb	0	; select bank0
 11071  1531  00E4               	movwf	setDimmerLights_Adj@lights
 11072                           
 11073                           ;Dimmer_B1.c: 658: DimmerLightsPointSelect(lights);
 11074  1532  0864               	movf	setDimmerLights_Adj@lights,w
 11075  1533  3191  2131  3195   	fcall	_DimmerLightsPointSelect
 11076                           
 11077                           ;Dimmer_B1.c: 659: if (status == 1) {
 11078  1536  0020               	movlb	0	; select bank0
 11079  1537  0862               	movf	setDimmerLights_Adj@status,w
 11080  1538  3A01               	xorlw	1
 11081  1539  1D03               	skipz
 11082  153A  2D46               	goto	l8769
 11083                           
 11084                           ;Dimmer_B1.c: 660: DimmerLights->AdjFlag = 1;
 11085  153B  0874               	movf	_DimmerLights,w
 11086  153C  0086               	movwf	6
 11087  153D  3001               	movlw	1	; select bank2/3
 11088  153E  0087               	movwf	7
 11089  153F  1581               	bsf	1,3
 11090                           
 11091                           ;Dimmer_B1.c: 661: DimmerLights->Signal = 1;
 11092  1540  0874               	movf	_DimmerLights,w
 11093  1541  0086               	movwf	6
 11094  1542  3001               	movlw	1	; select bank2/3
 11095  1543  0087               	movwf	7
 11096  1544  1481               	bsf	1,1
 11097                           
 11098                           ;Dimmer_B1.c: 662: } else {
 11099  1545  0008               	return
 11100  1546                     l8769:	
 11101                           
 11102                           ;Dimmer_B1.c: 663: if (DimmerLights->AdjFlag == 1) {
 11103  1546  0874               	movf	_DimmerLights,w
 11104  1547  0086               	movwf	6
 11105  1548  3001               	movlw	1	; select bank2/3
 11106  1549  0087               	movwf	7
 11107  154A  1D81               	btfss	1,3
 11108  154B  0008               	return
 11109                           
 11110                           ;Dimmer_B1.c: 665: DimmerLights->Signal = 0;
 11111  154C  0874               	movf	_DimmerLights,w
 11112  154D  0086               	movwf	6
 11113  154E  3001               	movlw	1	; select bank2/3
 11114  154F  0087               	movwf	7
 11115  1550  1081               	bcf	1,1
 11116                           
 11117                           ;Dimmer_B1.c: 666: DimmerLights->AdjFlag = 0;
 11118  1551  0874               	movf	_DimmerLights,w
 11119  1552  0086               	movwf	6
 11120  1553  3001               	movlw	1	; select bank2/3
 11121  1554  0087               	movwf	7
 11122  1555  1181               	bcf	1,3
 11123                           
 11124                           ;Dimmer_B1.c: 667: ;;
 11125                           ;Dimmer_B1.c: 668: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11126  1556  0874               	movf	_DimmerLights,w
 11127  1557  3E04               	addlw	4
 11128  1558  0086               	movwf	6
 11129  1559  3001               	movlw	1	; select bank2/3
 11130  155A  0087               	movwf	7
 11131  155B  0801               	movf	1,w
 11132  155C  00E3               	movwf	??_setDimmerLights_Adj
 11133  155D  0874               	movf	_DimmerLights,w
 11134  155E  3E05               	addlw	5
 11135  155F  0086               	movwf	6
 11136  1560  3001               	movlw	1	; select bank2/3
 11137  1561  0087               	movwf	7
 11138  1562  0863               	movf	??_setDimmerLights_Adj,w
 11139  1563  0081               	movwf	1
 11140                           
 11141                           ;Dimmer_B1.c: 676: setRF_DimmerLights(lights, 1);
 11142  1564  01DD               	clrf	setRF_DimmerLights@on
 11143  1565  0ADD               	incf	setRF_DimmerLights@on,f
 11144  1566  0864               	movf	setDimmerLights_Adj@lights,w
 11145  1567  318A  22BF  3195   	fcall	_setRF_DimmerLights
 11146                           
 11147                           ;Dimmer_B1.c: 677: setTxData();
 11148  156A  3186  260B         	fcall	_setTxData
 11149  156C  0008               	return
 11150  156D                     __end_of_setDimmerLights_Adj:	
 11151                           
 11152                           	psect	text62
 11153  077E                     __ptext62:	
 11154 ;; *************** function _setDimmerLights *****************
 11155 ;; Defined at:
 11156 ;;		line 604 in file "../src/Dimmer_B1.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;  lights          1    wreg     unsigned char 
 11159 ;;  status          1    3[BANK0 ] unsigned char 
 11160 ;; Auto vars:     Size  Location     Type
 11161 ;;  lights          1    5[BANK0 ] unsigned char 
 11162 ;; Return value:  Size  Location     Type
 11163 ;;		None               void
 11164 ;; Registers used:
 11165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11166 ;; Tracked objects:
 11167 ;;		On entry : 0/0
 11168 ;;		On exit  : 0/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11171 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;Total ram usage:        3 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; Hardware stack levels required when called:    7
 11178 ;; This function calls:
 11179 ;;		_DimmerLightsPointSelect
 11180 ;;		_setLED
 11181 ;;		_setMemory_GO
 11182 ;; This function is called by:
 11183 ;;		_setDimmerLights_Main
 11184 ;;		_setControl_Lights_Table
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           
 11189                           ;psect for function _setDimmerLights
 11190  077E                     _setDimmerLights:	
 11191                           
 11192                           ;incstack = 0
 11193                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11194                           ;setDimmerLights@lights stored from wreg
 11195  077E  0020               	movlb	0	; select bank0
 11196  077F  00A5               	movwf	setDimmerLights@lights
 11197                           
 11198                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(lights);
 11199  0780  0825               	movf	setDimmerLights@lights,w
 11200  0781  3191  2131  3187   	fcall	_DimmerLightsPointSelect
 11201                           
 11202                           ;Dimmer_B1.c: 606: Dimmer->Load = lights;
 11203  0784  0020               	movlb	0	; select bank0
 11204  0785  0825               	movf	setDimmerLights@lights,w
 11205  0786  00A4               	movwf	??_setDimmerLights
 11206  0787  0A73               	incf	_Dimmer,w
 11207  0788  0086               	movwf	6
 11208  0789  0187               	clrf	7
 11209  078A  0824               	movf	??_setDimmerLights,w
 11210  078B  0081               	movwf	1
 11211                           
 11212                           ;Dimmer_B1.c: 607: if (status == 1) {
 11213  078C  0823               	movf	setDimmerLights@status,w
 11214  078D  3A01               	xorlw	1
 11215  078E  1D03               	skipz
 11216  078F  2FD0               	goto	l8447
 11217                           
 11218                           ;Dimmer_B1.c: 608: DimmerLights->Status = 1;
 11219  0790  0874               	movf	_DimmerLights,w
 11220  0791  0086               	movwf	6
 11221  0792  3001               	movlw	1	; select bank2/3
 11222  0793  0087               	movwf	7
 11223  0794  1681               	bsf	1,5
 11224                           
 11225                           ;Dimmer_B1.c: 609: setLED(lights, 0);
 11226  0795  01A1               	clrf	setLED@command
 11227  0796  0825               	movf	setDimmerLights@lights,w
 11228  0797  318B  239A  3187   	fcall	_setLED
 11229                           
 11230                           ;Dimmer_B1.c: 611: ;;
 11231                           ;Dimmer_B1.c: 613: DimmerLights->Signal = 1;
 11232  079A  0874               	movf	_DimmerLights,w
 11233  079B  0086               	movwf	6
 11234  079C  3001               	movlw	1	; select bank2/3
 11235  079D  0087               	movwf	7
 11236  079E  1481               	bsf	1,1
 11237                           
 11238                           ;Dimmer_B1.c: 614: DimmerLights->DimmingTimeValue = 7;
 11239  079F  3007               	movlw	7
 11240  07A0  0020               	movlb	0	; select bank0
 11241  07A1  00A4               	movwf	??_setDimmerLights
 11242  07A2  0874               	movf	_DimmerLights,w
 11243  07A3  3E02               	addlw	2
 11244  07A4  0086               	movwf	6
 11245  07A5  3001               	movlw	1	; select bank2/3
 11246  07A6  0087               	movwf	7
 11247  07A7  0824               	movf	??_setDimmerLights,w
 11248  07A8  0081               	movwf	1
 11249                           
 11250                           ;Dimmer_B1.c: 616: if (DimmerLights->StatusFlag == 0) {
 11251  07A9  0874               	movf	_DimmerLights,w
 11252  07AA  0086               	movwf	6
 11253  07AB  3001               	movlw	1	; select bank2/3
 11254  07AC  0087               	movwf	7
 11255  07AD  1B01               	btfsc	1,6
 11256  07AE  0008               	return
 11257                           
 11258                           ;Dimmer_B1.c: 617: DimmerLights->StatusFlag = 1;
 11259  07AF  0874               	movf	_DimmerLights,w
 11260  07B0  0086               	movwf	6
 11261  07B1  3001               	movlw	1	; select bank2/3
 11262  07B2  0087               	movwf	7
 11263  07B3  1701               	bsf	1,6
 11264                           
 11265                           ;Dimmer_B1.c: 618: ;;
 11266                           ;Dimmer_B1.c: 619: setMemory_GO(0);
 11267  07B4  3000               	movlw	0
 11268  07B5  3190  209C         	fcall	_setMemory_GO
 11269                           
 11270                           ;Dimmer_B1.c: 622: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11271  07B7  0874               	movf	_DimmerLights,w
 11272  07B8  3E05               	addlw	5
 11273  07B9  0086               	movwf	6
 11274  07BA  3001               	movlw	1	; select bank2/3
 11275  07BB  0087               	movwf	7
 11276  07BC  0801               	movf	1,w
 11277  07BD  0020               	movlb	0	; select bank0
 11278  07BE  00A4               	movwf	??_setDimmerLights
 11279  07BF  0874               	movf	_DimmerLights,w
 11280  07C0  3E04               	addlw	4
 11281  07C1  0086               	movwf	6
 11282  07C2  3001               	movlw	1	; select bank2/3
 11283  07C3  0087               	movwf	7
 11284  07C4  0824               	movf	??_setDimmerLights,w
 11285  07C5  0081               	movwf	1
 11286                           
 11287                           ;Dimmer_B1.c: 626: DimmerLights->DimmingValue = ((char)((100-90)*0.8));
 11288  07C6  3008               	movlw	8
 11289  07C7  00A4               	movwf	??_setDimmerLights
 11290  07C8  0874               	movf	_DimmerLights,w
 11291  07C9  3E04               	addlw	4
 11292  07CA  0086               	movwf	6
 11293  07CB  3001               	movlw	1	; select bank2/3
 11294  07CC  0087               	movwf	7
 11295  07CD  0824               	movf	??_setDimmerLights,w
 11296  07CE  0081               	movwf	1
 11297                           
 11298                           ;Dimmer_B1.c: 628: }
 11299                           ;Dimmer_B1.c: 629: } else {
 11300  07CF  0008               	return
 11301  07D0                     l8447:	
 11302                           
 11303                           ;Dimmer_B1.c: 630: DimmerLights->Status = 0;
 11304  07D0  0874               	movf	_DimmerLights,w
 11305  07D1  0086               	movwf	6
 11306  07D2  3001               	movlw	1	; select bank2/3
 11307  07D3  0087               	movwf	7
 11308  07D4  1281               	bcf	1,5
 11309                           
 11310                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11311  07D5  0874               	movf	_DimmerLights,w
 11312  07D6  3E06               	addlw	6
 11313  07D7  0086               	movwf	6
 11314  07D8  3001               	movlw	1	; select bank2/3
 11315  07D9  0087               	movwf	7
 11316  07DA  0801               	movf	1,w
 11317  07DB  00A4               	movwf	??_setDimmerLights
 11318  07DC  0874               	movf	_DimmerLights,w
 11319  07DD  3E04               	addlw	4
 11320  07DE  0086               	movwf	6
 11321  07DF  3001               	movlw	1	; select bank2/3
 11322  07E0  0087               	movwf	7
 11323  07E1  0824               	movf	??_setDimmerLights,w
 11324  07E2  0081               	movwf	1
 11325                           
 11326                           ;Dimmer_B1.c: 639: DimmerLights->Signal = 1;
 11327  07E3  0874               	movf	_DimmerLights,w
 11328  07E4  0086               	movwf	6
 11329  07E5  3001               	movlw	1	; select bank2/3
 11330  07E6  0087               	movwf	7
 11331  07E7  1481               	bsf	1,1
 11332                           
 11333                           ;Dimmer_B1.c: 640: DimmerLights->AdjFlag = 0;
 11334  07E8  0874               	movf	_DimmerLights,w
 11335  07E9  0086               	movwf	6
 11336  07EA  3001               	movlw	1	; select bank2/3
 11337  07EB  0087               	movwf	7
 11338  07EC  1181               	bcf	1,3
 11339                           
 11340                           ;Dimmer_B1.c: 641: DimmerLights->AdjStatus = 0;
 11341  07ED  0874               	movf	_DimmerLights,w
 11342  07EE  0086               	movwf	6
 11343  07EF  3001               	movlw	1	; select bank2/3
 11344  07F0  0087               	movwf	7
 11345  07F1  1201               	bcf	1,4
 11346                           
 11347                           ;Dimmer_B1.c: 642: DimmerLights->DimmingTimeValue = 7;
 11348  07F2  3007               	movlw	7
 11349  07F3  00A4               	movwf	??_setDimmerLights
 11350  07F4  0874               	movf	_DimmerLights,w
 11351  07F5  3E02               	addlw	2
 11352  07F6  0086               	movwf	6
 11353  07F7  3001               	movlw	1	; select bank2/3
 11354  07F8  0087               	movwf	7
 11355  07F9  0824               	movf	??_setDimmerLights,w
 11356  07FA  0081               	movwf	1
 11357  07FB  0008               	return
 11358  07FC                     __end_of_setDimmerLights:	
 11359                           
 11360                           	psect	text63
 11361  0B9A                     __ptext63:	
 11362 ;; *************** function _setLED *****************
 11363 ;; Defined at:
 11364 ;;		line 70 in file "../src/LED_B1.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;  led             1    wreg     unsigned char 
 11367 ;;  command         1    1[BANK0 ] unsigned char 
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;  led             1    2[BANK0 ] unsigned char 
 11370 ;; Return value:  Size  Location     Type
 11371 ;;		None               void
 11372 ;; Registers used:
 11373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11374 ;; Tracked objects:
 11375 ;;		On entry : 0/0
 11376 ;;		On exit  : 0/0
 11377 ;;		Unchanged: 0/0
 11378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11379 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;Total ram usage:        2 bytes
 11384 ;; Hardware stack levels used:    1
 11385 ;; Hardware stack levels required when called:    6
 11386 ;; This function calls:
 11387 ;;		_LedPointSelect
 11388 ;; This function is called by:
 11389 ;;		_setDimmerLights
 11390 ;;		_setLED_Initialization
 11391 ;;		_setSw_Initialization
 11392 ;;		_setDimmerLights_ERROR
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           
 11397                           ;psect for function _setLED
 11398  0B9A                     _setLED:	
 11399                           
 11400                           ;incstack = 0
 11401                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11402                           ;setLED@led stored from wreg
 11403  0B9A  0020               	movlb	0	; select bank0
 11404  0B9B  00A2               	movwf	setLED@led
 11405                           
 11406                           ;LED_B1.c: 71: LedPointSelect(led);
 11407  0B9C  0822               	movf	setLED@led,w
 11408  0B9D  3193  2330  318B   	fcall	_LedPointSelect
 11409                           
 11410                           ;LED_B1.c: 72: if (command == 0) {
 11411  0BA0  0020               	movlb	0	; select bank0
 11412  0BA1  08A1               	movf	setLED@command,f
 11413  0BA2  1D03               	skipz
 11414  0BA3  2BBC               	goto	l8311
 11415                           
 11416                           ;LED_B1.c: 74: if (led == 1) {
 11417  0BA4  0822               	movf	setLED@led,w
 11418  0BA5  3A01               	xorlw	1
 11419  0BA6  1D03               	skipz
 11420  0BA7  2BAA               	goto	l8299
 11421                           
 11422                           ;LED_B1.c: 78: RC7 = 1;
 11423  0BA8  178E               	bsf	14,7	;volatile
 11424                           
 11425                           ;LED_B1.c: 80: }
 11426  0BA9  0008               	return
 11427  0BAA                     l8299:	
 11428                           
 11429                           ;LED_B1.c: 83: else if (led == 2) {
 11430  0BAA  0822               	movf	setLED@led,w
 11431  0BAB  3A02               	xorlw	2
 11432  0BAC  1D03               	skipz
 11433  0BAD  2BB0               	goto	l8303
 11434                           
 11435                           ;LED_B1.c: 87: RA3 = 1;
 11436  0BAE  158C               	bsf	12,3	;volatile
 11437                           
 11438                           ;LED_B1.c: 89: }
 11439  0BAF  0008               	return
 11440  0BB0                     l8303:	
 11441                           
 11442                           ;LED_B1.c: 92: else if (led == 3) {
 11443  0BB0  0822               	movf	setLED@led,w
 11444  0BB1  3A03               	xorlw	3
 11445  0BB2  1D03               	skipz
 11446  0BB3  2BB6               	goto	l8307
 11447                           
 11448                           ;LED_B1.c: 96: RC6 = 1;
 11449  0BB4  170E               	bsf	14,6	;volatile
 11450                           
 11451                           ;LED_B1.c: 98: }
 11452  0BB5  0008               	return
 11453  0BB6                     l8307:	
 11454                           
 11455                           ;LED_B1.c: 101: else if (led == 99) {
 11456  0BB6  0822               	movf	setLED@led,w
 11457  0BB7  3A63               	xorlw	99
 11458  0BB8  1D03               	skipz
 11459  0BB9  0008               	return
 11460                           
 11461                           ;LED_B1.c: 105: RB5 = 1;
 11462  0BBA  168D               	bsf	13,5	;volatile
 11463                           
 11464                           ;LED_B1.c: 107: }
 11465                           ;LED_B1.c: 109: } else if (command == 1) {
 11466  0BBB  0008               	return
 11467  0BBC                     l8311:	
 11468  0BBC  0821               	movf	setLED@command,w
 11469  0BBD  3A01               	xorlw	1
 11470  0BBE  1D03               	skipz
 11471  0BBF  2BD8               	goto	l8329
 11472                           
 11473                           ;LED_B1.c: 111: if (led == 1) {
 11474  0BC0  0822               	movf	setLED@led,w
 11475  0BC1  3A01               	xorlw	1
 11476  0BC2  1D03               	skipz
 11477  0BC3  2BC6               	goto	l8317
 11478                           
 11479                           ;LED_B1.c: 115: RC7 = 0;
 11480  0BC4  138E               	bcf	14,7	;volatile
 11481                           
 11482                           ;LED_B1.c: 117: }
 11483  0BC5  0008               	return
 11484  0BC6                     l8317:	
 11485                           
 11486                           ;LED_B1.c: 120: else if (led == 2) {
 11487  0BC6  0822               	movf	setLED@led,w
 11488  0BC7  3A02               	xorlw	2
 11489  0BC8  1D03               	skipz
 11490  0BC9  2BCC               	goto	l8321
 11491                           
 11492                           ;LED_B1.c: 124: RA3 = 0;
 11493  0BCA  118C               	bcf	12,3	;volatile
 11494                           
 11495                           ;LED_B1.c: 126: }
 11496  0BCB  0008               	return
 11497  0BCC                     l8321:	
 11498                           
 11499                           ;LED_B1.c: 129: else if (led == 3) {
 11500  0BCC  0822               	movf	setLED@led,w
 11501  0BCD  3A03               	xorlw	3
 11502  0BCE  1D03               	skipz
 11503  0BCF  2BD2               	goto	l8325
 11504                           
 11505                           ;LED_B1.c: 133: RC6 = 0;
 11506  0BD0  130E               	bcf	14,6	;volatile
 11507                           
 11508                           ;LED_B1.c: 135: }
 11509  0BD1  0008               	return
 11510  0BD2                     l8325:	
 11511                           
 11512                           ;LED_B1.c: 138: else if (led == 99) {
 11513  0BD2  0822               	movf	setLED@led,w
 11514  0BD3  3A63               	xorlw	99
 11515  0BD4  1D03               	skipz
 11516  0BD5  0008               	return
 11517                           
 11518                           ;LED_B1.c: 142: RB5 = 0;
 11519  0BD6  128D               	bcf	13,5	;volatile
 11520                           
 11521                           ;LED_B1.c: 144: }
 11522                           ;LED_B1.c: 146: } else if (command == 10) {
 11523  0BD7  0008               	return
 11524  0BD8                     l8329:	
 11525  0BD8  0821               	movf	setLED@command,w
 11526  0BD9  3A0A               	xorlw	10
 11527  0BDA  1D03               	skipz
 11528  0BDB  2C01               	goto	l8349
 11529                           
 11530                           ;LED_B1.c: 147: LED->GO = 0;
 11531  0BDC  0870               	movf	_LED,w
 11532  0BDD  0086               	movwf	6
 11533  0BDE  0871               	movf	_LED+1,w
 11534  0BDF  0087               	movwf	7
 11535  0BE0  1081               	bcf	1,1
 11536                           
 11537                           ;LED_B1.c: 148: LED->Time = 0;
 11538  0BE1  0870               	movf	_LED,w
 11539  0BE2  0086               	movwf	6
 11540  0BE3  0871               	movf	_LED+1,w
 11541  0BE4  0087               	movwf	7
 11542  0BE5  3141               	addfsr 1,1
 11543  0BE6  3000               	movlw	0
 11544  0BE7  3FC0               	movwi [0]fsr1
 11545  0BE8  3FC1               	movwi [1]fsr1
 11546                           
 11547                           ;LED_B1.c: 150: if (led == 1) {
 11548  0BE9  0822               	movf	setLED@led,w
 11549  0BEA  3A01               	xorlw	1
 11550  0BEB  1D03               	skipz
 11551  0BEC  2BEF               	goto	l8337
 11552                           
 11553                           ;LED_B1.c: 154: RC7 = 1;
 11554  0BED  178E               	bsf	14,7	;volatile
 11555                           
 11556                           ;LED_B1.c: 156: }
 11557  0BEE  0008               	return
 11558  0BEF                     l8337:	
 11559                           
 11560                           ;LED_B1.c: 159: else if (led == 2) {
 11561  0BEF  0822               	movf	setLED@led,w
 11562  0BF0  3A02               	xorlw	2
 11563  0BF1  1D03               	skipz
 11564  0BF2  2BF5               	goto	l8341
 11565                           
 11566                           ;LED_B1.c: 163: RA3 = 1;
 11567  0BF3  158C               	bsf	12,3	;volatile
 11568                           
 11569                           ;LED_B1.c: 165: }
 11570  0BF4  0008               	return
 11571  0BF5                     l8341:	
 11572                           
 11573                           ;LED_B1.c: 168: else if (led == 3) {
 11574  0BF5  0822               	movf	setLED@led,w
 11575  0BF6  3A03               	xorlw	3
 11576  0BF7  1D03               	skipz
 11577  0BF8  2BFB               	goto	l8345
 11578                           
 11579                           ;LED_B1.c: 172: RC6 = 1;
 11580  0BF9  170E               	bsf	14,6	;volatile
 11581                           
 11582                           ;LED_B1.c: 174: }
 11583  0BFA  0008               	return
 11584  0BFB                     l8345:	
 11585                           
 11586                           ;LED_B1.c: 177: else if (led == 99) {
 11587  0BFB  0822               	movf	setLED@led,w
 11588  0BFC  3A63               	xorlw	99
 11589  0BFD  1D03               	skipz
 11590  0BFE  0008               	return
 11591                           
 11592                           ;LED_B1.c: 181: RB5 = 1;
 11593  0BFF  168D               	bsf	13,5	;volatile
 11594                           
 11595                           ;LED_B1.c: 183: }
 11596                           ;LED_B1.c: 185: } else if (command == 11) {
 11597  0C00  0008               	return
 11598  0C01                     l8349:	
 11599  0C01  0821               	movf	setLED@command,w
 11600  0C02  3A0B               	xorlw	11
 11601  0C03  1D03               	skipz
 11602  0C04  0008               	return
 11603                           
 11604                           ;LED_B1.c: 186: LED->GO = 1;
 11605  0C05  0870               	movf	_LED,w
 11606  0C06  0086               	movwf	6
 11607  0C07  0871               	movf	_LED+1,w
 11608  0C08  0087               	movwf	7
 11609  0C09  1481               	bsf	1,1
 11610  0C0A  0008               	return
 11611  0C0B                     __end_of_setLED:	
 11612                           
 11613                           	psect	text64
 11614  1330                     __ptext64:	
 11615 ;; *************** function _LedPointSelect *****************
 11616 ;; Defined at:
 11617 ;;		line 7 in file "../src/LED_B1.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;  led             1    wreg     unsigned char 
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;  led             1    0[BANK0 ] unsigned char 
 11622 ;; Return value:  Size  Location     Type
 11623 ;;		None               void
 11624 ;; Registers used:
 11625 ;;		wreg, status,2, status,0
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;Total ram usage:        1 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    5
 11638 ;; This function calls:
 11639 ;;		Nothing
 11640 ;; This function is called by:
 11641 ;;		_setLED_Initialization
 11642 ;;		_setLED
 11643 ;;		_setLED_Main
 11644 ;; This function uses a non-reentrant model
 11645 ;;
 11646                           
 11647                           
 11648                           ;psect for function _LedPointSelect
 11649  1330                     _LedPointSelect:	
 11650                           
 11651                           ;incstack = 0
 11652                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 11653                           ;LedPointSelect@led stored from wreg
 11654  1330  0020               	movlb	0	; select bank0
 11655  1331  00A0               	movwf	LedPointSelect@led
 11656                           
 11657                           ;LED_B1.c: 9: if (led == 1) {
 11658  1332  0820               	movf	LedPointSelect@led,w
 11659  1333  3A01               	xorlw	1
 11660  1334  1D03               	skipz
 11661  1335  2B3B               	goto	l8089
 11662                           
 11663                           ;LED_B1.c: 10: LED = &VarLED1;
 11664  1336  30DC               	movlw	low _VarLED1
 11665  1337  00F0               	movwf	_LED
 11666  1338  3000               	movlw	high _VarLED1
 11667  1339  00F1               	movwf	_LED+1
 11668                           
 11669                           ;LED_B1.c: 11: }
 11670  133A  0008               	return
 11671  133B                     l8089:	
 11672                           
 11673                           ;LED_B1.c: 14: else if (led == 2) {
 11674  133B  0820               	movf	LedPointSelect@led,w
 11675  133C  3A02               	xorlw	2
 11676  133D  1D03               	skipz
 11677  133E  2B44               	goto	l8093
 11678                           
 11679                           ;LED_B1.c: 15: LED = &VarLED2;
 11680  133F  30E0               	movlw	low _VarLED2
 11681  1340  00F0               	movwf	_LED
 11682  1341  3000               	movlw	high _VarLED2
 11683  1342  00F1               	movwf	_LED+1
 11684                           
 11685                           ;LED_B1.c: 16: }
 11686  1343  0008               	return
 11687  1344                     l8093:	
 11688                           
 11689                           ;LED_B1.c: 19: else if (led == 3) {
 11690  1344  0820               	movf	LedPointSelect@led,w
 11691  1345  3A03               	xorlw	3
 11692  1346  1D03               	skipz
 11693  1347  2B4D               	goto	l8097
 11694                           
 11695                           ;LED_B1.c: 20: LED = &VarLED3;
 11696  1348  306A               	movlw	low _VarLED3
 11697  1349  00F0               	movwf	_LED
 11698  134A  3001               	movlw	high _VarLED3
 11699  134B  00F1               	movwf	_LED+1
 11700                           
 11701                           ;LED_B1.c: 21: }
 11702  134C  0008               	return
 11703  134D                     l8097:	
 11704                           
 11705                           ;LED_B1.c: 24: else if (led == 99) {
 11706  134D  0820               	movf	LedPointSelect@led,w
 11707  134E  3A63               	xorlw	99
 11708  134F  1D03               	skipz
 11709  1350  0008               	return
 11710                           
 11711                           ;LED_B1.c: 25: LED = &VarErrLED;
 11712  1351  30D8               	movlw	low _VarErrLED
 11713  1352  00F0               	movwf	_LED
 11714  1353  3000               	movlw	high _VarErrLED
 11715  1354  00F1               	movwf	_LED+1
 11716  1355  0008               	return
 11717  1356                     __end_of_LedPointSelect:	
 11718                           
 11719                           	psect	text65
 11720  1FED                     __ptext65:	
 11721 ;; *************** function _DimmerLights_Close *****************
 11722 ;; Defined at:
 11723 ;;		line 407 in file "../src/Dimmer_B1.c"
 11724 ;; Parameters:    Size  Location     Type
 11725 ;;		None
 11726 ;; Auto vars:     Size  Location     Type
 11727 ;;		None
 11728 ;; Return value:  Size  Location     Type
 11729 ;;		None               void
 11730 ;; Registers used:
 11731 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11732 ;; Tracked objects:
 11733 ;;		On entry : 0/0
 11734 ;;		On exit  : 0/0
 11735 ;;		Unchanged: 0/0
 11736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;Total ram usage:        0 bytes
 11742 ;; Hardware stack levels used:    1
 11743 ;; Hardware stack levels required when called:    6
 11744 ;; This function calls:
 11745 ;;		_getDimmerLights_StatusFlag
 11746 ;;		_setMemory_GO
 11747 ;; This function is called by:
 11748 ;;		_DimmerLights_Main
 11749 ;; This function uses a non-reentrant model
 11750 ;;
 11751                           
 11752                           
 11753                           ;psect for function _DimmerLights_Close
 11754  1FED                     _DimmerLights_Close:	
 11755                           
 11756                           ;Dimmer_B1.c: 408: if (Dimmer->Detect == 1) {
 11757                           
 11758                           ;incstack = 0
 11759                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11760  1FED  0873               	movf	_Dimmer,w
 11761  1FEE  0086               	movwf	6
 11762  1FEF  0187               	clrf	7
 11763  1FF0  1C01               	btfss	1,0
 11764  1FF1  0008               	return
 11765                           
 11766                           ;Dimmer_B1.c: 409: Dimmer->Detect = 0;
 11767  1FF2  0873               	movf	_Dimmer,w
 11768  1FF3  0086               	movwf	6
 11769  1FF4  0187               	clrf	7
 11770  1FF5  1001               	bcf	1,0
 11771                           
 11772                           ;Dimmer_B1.c: 410: if (getDimmerLights_StatusFlag() == 0) {
 11773  1FF6  319F  27DA  319F   	fcall	_getDimmerLights_StatusFlag
 11774  1FF9  3800               	iorlw	0
 11775  1FFA  1D03               	skipz
 11776  1FFB  0008               	return
 11777                           
 11778                           ;Dimmer_B1.c: 411: ;;
 11779                           ;Dimmer_B1.c: 412: setMemory_GO(1);
 11780  1FFC  3001               	movlw	1
 11781  1FFD  3190  209C         	fcall	_setMemory_GO
 11782  1FFF  0008               	return
 11783  2000                     __end_of_DimmerLights_Close:	
 11784                           
 11785                           	psect	text66
 11786  109C                     __ptext66:	
 11787 ;; *************** function _setMemory_GO *****************
 11788 ;; Defined at:
 11789 ;;		line 891 in file "../src/MCU_B1.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;  command         1    wreg     unsigned char 
 11792 ;; Auto vars:     Size  Location     Type
 11793 ;;  command         1    2[BANK0 ] unsigned char 
 11794 ;; Return value:  Size  Location     Type
 11795 ;;		None               void
 11796 ;; Registers used:
 11797 ;;		wreg, status,2, status,0
 11798 ;; Tracked objects:
 11799 ;;		On entry : 0/0
 11800 ;;		On exit  : 0/0
 11801 ;;		Unchanged: 0/0
 11802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;Total ram usage:        3 bytes
 11808 ;; Hardware stack levels used:    1
 11809 ;; Hardware stack levels required when called:    5
 11810 ;; This function calls:
 11811 ;;		Nothing
 11812 ;; This function is called by:
 11813 ;;		_DimmerLights_Close
 11814 ;;		_setDimmerLights
 11815 ;; This function uses a non-reentrant model
 11816 ;;
 11817                           
 11818                           
 11819                           ;psect for function _setMemory_GO
 11820  109C                     _setMemory_GO:	
 11821                           
 11822                           ;incstack = 0
 11823                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 11824                           ;setMemory_GO@command stored from wreg
 11825  109C  0020               	movlb	0	; select bank0
 11826  109D  00A2               	movwf	setMemory_GO@command
 11827                           
 11828                           ;MCU_B1.c: 892: Memory.GO = command;
 11829  109E  0822               	movf	setMemory_GO@command,w
 11830  109F  0023               	movlb	3	; select bank3
 11831  10A0  10C4               	bcf	(_Memory^(0+384)+36),1
 11832  10A1  1D03               	skipz
 11833  10A2  14C4               	bsf	(_Memory^(0+384)+36),1
 11834                           
 11835                           ;MCU_B1.c: 893: if (command == 0) {
 11836  10A3  0020               	movlb	0	; select bank0
 11837  10A4  08A2               	movf	setMemory_GO@command,f
 11838  10A5  1D03               	skipz
 11839  10A6  0008               	return
 11840                           
 11841                           ;MCU_B1.c: 894: Memory.Time = command;
 11842  10A7  0822               	movf	setMemory_GO@command,w
 11843  10A8  00A0               	movwf	??_setMemory_GO
 11844  10A9  01A1               	clrf	??_setMemory_GO+1
 11845  10AA  0820               	movf	??_setMemory_GO,w
 11846  10AB  0023               	movlb	3	; select bank3
 11847  10AC  00C2               	movwf	(_Memory^(0+384)+34)
 11848  10AD  0020               	movlb	0	; select bank0
 11849  10AE  0821               	movf	??_setMemory_GO+1,w
 11850  10AF  0023               	movlb	3	; select bank3
 11851  10B0  00C3               	movwf	((_Memory+1)^(0+384)+34)
 11852  10B1  0008               	return
 11853  10B2                     __end_of_setMemory_GO:	
 11854                           
 11855                           	psect	text67
 11856  1FDA                     __ptext67:	
 11857 ;; *************** function _getDimmerLights_StatusFlag *****************
 11858 ;; Defined at:
 11859 ;;		line 486 in file "../src/Dimmer_B1.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;		None
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;  Status          1    1[BANK0 ] unsigned char 
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  1    wreg      unsigned char 
 11866 ;; Registers used:
 11867 ;;		wreg, status,2
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;Total ram usage:        3 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    5
 11880 ;; This function calls:
 11881 ;;		Nothing
 11882 ;; This function is called by:
 11883 ;;		_DimmerLights_Close
 11884 ;;		_DimmerLights_Exceptions
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           
 11889                           ;psect for function _getDimmerLights_StatusFlag
 11890  1FDA                     _getDimmerLights_StatusFlag:	
 11891                           
 11892                           ;Dimmer_B1.c: 487: char Status = 0;
 11893                           
 11894                           ;incstack = 0
 11895                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11896  1FDA  0020               	movlb	0	; select bank0
 11897  1FDB  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11898                           
 11899                           ;Dimmer_B1.c: 490: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 11900  1FDC  01A2               	clrf	_getDimmerLights_StatusFlag$2454
 11901  1FDD  0AA2               	incf	_getDimmerLights_StatusFlag$2454,f
 11902  1FDE  0022               	movlb	2	; select bank2
 11903  1FDF  1F3D               	btfss	_DimmerLights1^(0+256),6
 11904  1FE0  1B4C               	btfsc	_DimmerLights2^(0+256),6
 11905  1FE1  2FE6               	goto	l8757
 11906  1FE2  1B5B               	btfsc	_DimmerLights3^(0+256),6
 11907  1FE3  2FE6               	goto	l8757
 11908  1FE4  0020               	movlb	0	; select bank0
 11909  1FE5  01A2               	clrf	_getDimmerLights_StatusFlag$2454
 11910  1FE6                     l8757:	
 11911  1FE6  0020               	movlb	0	; select bank0
 11912  1FE7  0822               	movf	_getDimmerLights_StatusFlag$2454,w
 11913  1FE8  00A0               	movwf	??_getDimmerLights_StatusFlag
 11914  1FE9  0820               	movf	??_getDimmerLights_StatusFlag,w
 11915  1FEA  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11916                           
 11917                           ;Dimmer_B1.c: 501: return Status;
 11918  1FEB  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11919  1FEC  0008               	return
 11920  1FED                     __end_of_getDimmerLights_StatusFlag:	
 11921                           
 11922                           	psect	text68
 11923  125C                     __ptext68:	
 11924 ;; *************** function _DimmerLights_Initialization *****************
 11925 ;; Defined at:
 11926 ;;		line 345 in file "../src/Dimmer_B1.c"
 11927 ;; Parameters:    Size  Location     Type
 11928 ;;		None
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;		None
 11931 ;; Return value:  Size  Location     Type
 11932 ;;		None               void
 11933 ;; Registers used:
 11934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11935 ;; Tracked objects:
 11936 ;;		On entry : 0/0
 11937 ;;		On exit  : 0/0
 11938 ;;		Unchanged: 0/0
 11939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;Total ram usage:        1 bytes
 11945 ;; Hardware stack levels used:    1
 11946 ;; Hardware stack levels required when called:    7
 11947 ;; This function calls:
 11948 ;;		_Dimmer_Initialization
 11949 ;;		_setDimmerLights_Initialization
 11950 ;; This function is called by:
 11951 ;;		_main
 11952 ;; This function uses a non-reentrant model
 11953 ;;
 11954                           
 11955                           
 11956                           ;psect for function _DimmerLights_Initialization
 11957  125C                     _DimmerLights_Initialization:	
 11958                           
 11959                           ;Dimmer_B1.c: 348: DimmerLights11 = &DimmerLights1;
 11960                           
 11961                           ;incstack = 0
 11962                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11963  125C  303D               	movlw	_DimmerLights1& (0+255)
 11964  125D  0020               	movlb	0	; select bank0
 11965  125E  00A4               	movwf	??_DimmerLights_Initialization
 11966  125F  0824               	movf	??_DimmerLights_Initialization,w
 11967  1260  0021               	movlb	1	; select bank1
 11968  1261  00CC               	movwf	_DimmerLights11^(0+128)
 11969                           
 11970                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(1);
 11971  1262  3001               	movlw	1
 11972  1263  3193  23FE  3192   	fcall	_setDimmerLights_Initialization
 11973                           
 11974                           ;Dimmer_B1.c: 353: DimmerLights22 = &DimmerLights2;
 11975  1266  304C               	movlw	_DimmerLights2& (0+255)
 11976  1267  0020               	movlb	0	; select bank0
 11977  1268  00A4               	movwf	??_DimmerLights_Initialization
 11978  1269  0824               	movf	??_DimmerLights_Initialization,w
 11979  126A  0021               	movlb	1	; select bank1
 11980  126B  00CD               	movwf	_DimmerLights22^(0+128)
 11981                           
 11982                           ;Dimmer_B1.c: 354: setDimmerLights_Initialization(2);
 11983  126C  3002               	movlw	2
 11984  126D  3193  23FE  3192   	fcall	_setDimmerLights_Initialization
 11985                           
 11986                           ;Dimmer_B1.c: 358: DimmerLights33 = &DimmerLights3;
 11987  1270  305B               	movlw	_DimmerLights3& (0+255)
 11988  1271  0020               	movlb	0	; select bank0
 11989  1272  00A4               	movwf	??_DimmerLights_Initialization
 11990  1273  0824               	movf	??_DimmerLights_Initialization,w
 11991  1274  0021               	movlb	1	; select bank1
 11992  1275  00CE               	movwf	_DimmerLights33^(0+128)
 11993                           
 11994                           ;Dimmer_B1.c: 359: setDimmerLights_Initialization(3);
 11995  1276  3003               	movlw	3
 11996  1277  3193  23FE  3192   	fcall	_setDimmerLights_Initialization
 11997                           
 11998                           ;Dimmer_B1.c: 363: Dimmer_Initialization();
 11999  127A  319E  2612         	fcall	_Dimmer_Initialization
 12000  127C  0008               	return
 12001  127D                     __end_of_DimmerLights_Initialization:	
 12002                           
 12003                           	psect	text69
 12004  13FE                     __ptext69:	
 12005 ;; *************** function _setDimmerLights_Initialization *****************
 12006 ;; Defined at:
 12007 ;;		line 368 in file "../src/Dimmer_B1.c"
 12008 ;; Parameters:    Size  Location     Type
 12009 ;;  lights          1    wreg     unsigned char 
 12010 ;; Auto vars:     Size  Location     Type
 12011 ;;  lights          1    3[BANK0 ] unsigned char 
 12012 ;; Return value:  Size  Location     Type
 12013 ;;		None               void
 12014 ;; Registers used:
 12015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12016 ;; Tracked objects:
 12017 ;;		On entry : 0/0
 12018 ;;		On exit  : 0/0
 12019 ;;		Unchanged: 0/0
 12020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;Total ram usage:        2 bytes
 12026 ;; Hardware stack levels used:    1
 12027 ;; Hardware stack levels required when called:    6
 12028 ;; This function calls:
 12029 ;;		_DimmerLightsPointSelect
 12030 ;; This function is called by:
 12031 ;;		_DimmerLights_Initialization
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           
 12036                           ;psect for function _setDimmerLights_Initialization
 12037  13FE                     _setDimmerLights_Initialization:	
 12038                           
 12039                           ;incstack = 0
 12040                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 12041                           ;setDimmerLights_Initialization@lights stored from wreg
 12042  13FE  0020               	movlb	0	; select bank0
 12043  13FF  00A3               	movwf	setDimmerLights_Initialization@lights
 12044                           
 12045                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 12046  1400  0823               	movf	setDimmerLights_Initialization@lights,w
 12047  1401  3191  2131         	fcall	_DimmerLightsPointSelect
 12048                           
 12049                           ;Dimmer_B1.c: 371: DimmerLights->Clear = 1;
 12050  1403  0874               	movf	_DimmerLights,w
 12051  1404  3E09               	addlw	9
 12052  1405  0086               	movwf	6
 12053  1406  3001               	movlw	1	; select bank2/3
 12054  1407  0087               	movwf	7
 12055  1408  1501               	bsf	1,2
 12056                           
 12057                           ;Dimmer_B1.c: 377: DimmerLights->MaxmumValue = ((char)((100-90)*0.8));
 12058  1409  3008               	movlw	8
 12059  140A  0020               	movlb	0	; select bank0
 12060  140B  00A2               	movwf	??_setDimmerLights_Initialization
 12061  140C  0874               	movf	_DimmerLights,w
 12062  140D  3E05               	addlw	5
 12063  140E  0086               	movwf	6
 12064  140F  3001               	movlw	1	; select bank2/3
 12065  1410  0087               	movwf	7
 12066  1411  0822               	movf	??_setDimmerLights_Initialization,w
 12067  1412  0081               	movwf	1
 12068                           
 12069                           ;Dimmer_B1.c: 378: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 12070  1413  303C               	movlw	60
 12071  1414  00A2               	movwf	??_setDimmerLights_Initialization
 12072  1415  0874               	movf	_DimmerLights,w
 12073  1416  3E06               	addlw	6
 12074  1417  0086               	movwf	6
 12075  1418  3001               	movlw	1	; select bank2/3
 12076  1419  0087               	movwf	7
 12077  141A  0822               	movf	??_setDimmerLights_Initialization,w
 12078  141B  0081               	movwf	1
 12079                           
 12080                           ;Dimmer_B1.c: 388: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12081  141C  0874               	movf	_DimmerLights,w
 12082  141D  3E06               	addlw	6
 12083  141E  0086               	movwf	6
 12084  141F  3001               	movlw	1	; select bank2/3
 12085  1420  0087               	movwf	7
 12086  1421  0801               	movf	1,w
 12087  1422  00A2               	movwf	??_setDimmerLights_Initialization
 12088  1423  0874               	movf	_DimmerLights,w
 12089  1424  3E04               	addlw	4
 12090  1425  0086               	movwf	6
 12091  1426  3001               	movlw	1	; select bank2/3
 12092  1427  0087               	movwf	7
 12093  1428  0822               	movf	??_setDimmerLights_Initialization,w
 12094  1429  0081               	movwf	1
 12095  142A  0008               	return
 12096  142B                     __end_of_setDimmerLights_Initialization:	
 12097                           
 12098                           	psect	text70
 12099  1E12                     __ptext70:	
 12100 ;; *************** function _Dimmer_Initialization *****************
 12101 ;; Defined at:
 12102 ;;		line 797 in file "../src/Dimmer_B1.c"
 12103 ;; Parameters:    Size  Location     Type
 12104 ;;		None
 12105 ;; Auto vars:     Size  Location     Type
 12106 ;;		None
 12107 ;; Return value:  Size  Location     Type
 12108 ;;		None               void
 12109 ;; Registers used:
 12110 ;;		wreg
 12111 ;; Tracked objects:
 12112 ;;		On entry : 0/0
 12113 ;;		On exit  : 0/0
 12114 ;;		Unchanged: 0/0
 12115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12120 ;;Total ram usage:        1 bytes
 12121 ;; Hardware stack levels used:    1
 12122 ;; Hardware stack levels required when called:    5
 12123 ;; This function calls:
 12124 ;;		Nothing
 12125 ;; This function is called by:
 12126 ;;		_DimmerLights_Initialization
 12127 ;; This function uses a non-reentrant model
 12128 ;;
 12129                           
 12130                           
 12131                           ;psect for function _Dimmer_Initialization
 12132  1E12                     _Dimmer_Initialization:	
 12133                           
 12134                           ;Dimmer_B1.c: 799: Dimmer = &Dimmer1;
 12135                           
 12136                           ;incstack = 0
 12137                           ; Regs used in _Dimmer_Initialization: [wreg]
 12138  1E12  30E4               	movlw	_Dimmer1& (0+255)
 12139  1E13  0020               	movlb	0	; select bank0
 12140  1E14  00A0               	movwf	??_Dimmer_Initialization
 12141  1E15  0820               	movf	??_Dimmer_Initialization,w
 12142  1E16  00F3               	movwf	_Dimmer
 12143  1E17  0008               	return
 12144  1E18                     __end_of_Dimmer_Initialization:	
 12145                           
 12146                           	psect	text71
 12147  1E85                     __ptext71:	
 12148 ;; *************** function _DelayOff_Main *****************
 12149 ;; Defined at:
 12150 ;;		line 41 in file "../src/DelayOff_B1.c"
 12151 ;; Parameters:    Size  Location     Type
 12152 ;;		None
 12153 ;; Auto vars:     Size  Location     Type
 12154 ;;		None
 12155 ;; Return value:  Size  Location     Type
 12156 ;;		None               void
 12157 ;; Registers used:
 12158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12159 ;; Tracked objects:
 12160 ;;		On entry : 0/0
 12161 ;;		On exit  : 0/0
 12162 ;;		Unchanged: 0/0
 12163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12168 ;;Total ram usage:        0 bytes
 12169 ;; Hardware stack levels used:    1
 12170 ;; Hardware stack levels required when called:   10
 12171 ;; This function calls:
 12172 ;;		_DlyOff_Main
 12173 ;; This function is called by:
 12174 ;;		_main
 12175 ;; This function uses a non-reentrant model
 12176 ;;
 12177                           
 12178                           
 12179                           ;psect for function _DelayOff_Main
 12180  1E85                     _DelayOff_Main:	
 12181                           
 12182                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12183                           
 12184                           ;incstack = 0
 12185                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12186  1E85  3001               	movlw	1
 12187  1E86  318A  2254  319E   	fcall	_DlyOff_Main
 12188                           
 12189                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12190  1E89  3002               	movlw	2
 12191  1E8A  318A  2254  319E   	fcall	_DlyOff_Main
 12192                           
 12193                           ;DelayOff_B1.c: 51: DlyOff_Main(3);
 12194  1E8D  3003               	movlw	3
 12195  1E8E  318A  2254         	fcall	_DlyOff_Main
 12196  1E90  0008               	return
 12197  1E91                     __end_of_DelayOff_Main:	
 12198                           
 12199                           	psect	text72
 12200  0A54                     __ptext72:	
 12201 ;; *************** function _DlyOff_Main *****************
 12202 ;; Defined at:
 12203 ;;		line 62 in file "../src/DelayOff_B1.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;  sw              1    wreg     unsigned char 
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;  sw              1   68[BANK0 ] unsigned char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;		None               void
 12210 ;; Registers used:
 12211 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;Total ram usage:        3 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    9
 12224 ;; This function calls:
 12225 ;;		_DelayOffPointSelect
 12226 ;;		_setBuz
 12227 ;;		_setDimmerLights_Switch
 12228 ;;		_setDimmerLights_Trigger
 12229 ;;		_setRFSW_Status
 12230 ;;		_setRF_DimmerLights
 12231 ;;		_setSw_Status
 12232 ;;		_setTxData
 12233 ;; This function is called by:
 12234 ;;		_DelayOff_Main
 12235 ;; This function uses a non-reentrant model
 12236 ;;
 12237                           
 12238                           
 12239                           ;psect for function _DlyOff_Main
 12240  0A54                     _DlyOff_Main:	
 12241                           
 12242                           ;incstack = 0
 12243                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12244                           ;DlyOff_Main@sw stored from wreg
 12245  0A54  0020               	movlb	0	; select bank0
 12246  0A55  00E4               	movwf	DlyOff_Main@sw
 12247                           
 12248                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12249  0A56  0864               	movf	DlyOff_Main@sw,w
 12250  0A57  3191  2169  318A   	fcall	_DelayOffPointSelect
 12251                           
 12252                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 12253  0A5A  0872               	movf	_DelayOff,w
 12254  0A5B  0086               	movwf	6
 12255  0A5C  0187               	clrf	7
 12256  0A5D  1C81               	btfss	1,1
 12257  0A5E  0008               	return
 12258                           
 12259                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12260  0A5F  0872               	movf	_DelayOff,w
 12261  0A60  0086               	movwf	6
 12262  0A61  0187               	clrf	7
 12263  0A62  3001               	movlw	1
 12264  0A63  0781               	addwf	1,f
 12265  0A64  3141               	addfsr 1,1
 12266  0A65  1803               	skipnc
 12267  0A66  0A81               	incf	1,f
 12268                           
 12269                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12270  0A67  0872               	movf	_DelayOff,w
 12271  0A68  0086               	movwf	6
 12272  0A69  0187               	clrf	7
 12273  0A6A  3F40               	moviw [0]fsr1
 12274  0A6B  0020               	movlb	0	; select bank0
 12275  0A6C  00E2               	movwf	??_DlyOff_Main
 12276  0A6D  3F41               	moviw [1]fsr1
 12277  0A6E  00E3               	movwf	??_DlyOff_Main+1
 12278  0A6F  3016               	movlw	22
 12279  0A70  0263               	subwf	??_DlyOff_Main+1,w
 12280  0A71  3012               	movlw	18
 12281  0A72  1903               	skipnz
 12282  0A73  0262               	subwf	??_DlyOff_Main,w
 12283  0A74  1C03               	skipc
 12284  0A75  0008               	return
 12285                           
 12286                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12287  0A76  0872               	movf	_DelayOff,w
 12288  0A77  0086               	movwf	6
 12289  0A78  0187               	clrf	7
 12290  0A79  3000               	movlw	0
 12291  0A7A  3FC0               	movwi [0]fsr1
 12292  0A7B  3FC1               	movwi [1]fsr1
 12293                           
 12294                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12295  0A7C  3001               	movlw	1
 12296  0A7D  00E2               	movwf	??_DlyOff_Main
 12297  0A7E  0872               	movf	_DelayOff,w
 12298  0A7F  0086               	movwf	6
 12299  0A80  0187               	clrf	7
 12300  0A81  0862               	movf	??_DlyOff_Main,w
 12301  0A82  0781               	addwf	1,f
 12302                           
 12303                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12304  0A83  0872               	movf	_DelayOff,w
 12305  0A84  0086               	movwf	6
 12306  0A85  0187               	clrf	7
 12307  0A86  0872               	movf	_DelayOff,w
 12308  0A87  0084               	movwf	4
 12309  0A88  0185               	clrf	5
 12310  0A89  0800               	movf	0,w
 12311  0A8A  0201               	subwf	1,w
 12312  0A8B  1C03               	skipc
 12313  0A8C  0008               	return
 12314                           
 12315                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12316  0A8D  0872               	movf	_DelayOff,w
 12317  0A8E  0086               	movwf	6
 12318  0A8F  0187               	clrf	7
 12319  0A90  0181               	clrf	1
 12320                           
 12321                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12322  0A91  0872               	movf	_DelayOff,w
 12323  0A92  0086               	movwf	6
 12324  0A93  0187               	clrf	7
 12325  0A94  1081               	bcf	1,1
 12326                           
 12327                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 12328  0A95  01A2               	clrf	setSw_Status@command
 12329  0A96  0864               	movf	DlyOff_Main@sw,w
 12330  0A97  319E  26D5  318A   	fcall	_setSw_Status
 12331                           
 12332                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 12333  0A9A  0020               	movlb	0	; select bank0
 12334  0A9B  01A2               	clrf	setRFSW_Status@command
 12335  0A9C  0864               	movf	DlyOff_Main@sw,w
 12336  0A9D  319E  26C6  318A   	fcall	_setRFSW_Status
 12337                           
 12338                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 12339  0AA0  0020               	movlb	0	; select bank0
 12340  0AA1  01DD               	clrf	setRF_DimmerLights@on
 12341  0AA2  0864               	movf	DlyOff_Main@sw,w
 12342  0AA3  318A  22BF  318A   	fcall	_setRF_DimmerLights
 12343                           
 12344                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 12345  0AA6  0020               	movlb	0	; select bank0
 12346  0AA7  01A2               	clrf	setDimmerLights_Trigger@command
 12347  0AA8  0AA2               	incf	setDimmerLights_Trigger@command,f
 12348  0AA9  0864               	movf	DlyOff_Main@sw,w
 12349  0AAA  319F  2721  318A   	fcall	_setDimmerLights_Trigger
 12350                           
 12351                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 12352  0AAD  0020               	movlb	0	; select bank0
 12353  0AAE  01A2               	clrf	setDimmerLights_Switch@command
 12354  0AAF  0864               	movf	DlyOff_Main@sw,w
 12355  0AB0  319F  2711  318A   	fcall	_setDimmerLights_Switch
 12356                           
 12357                           ;DelayOff_B1.c: 78: setTxData();
 12358  0AB3  3186  260B  318A   	fcall	_setTxData
 12359                           
 12360                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 12361  0AB6  3064               	movlw	100
 12362  0AB7  0020               	movlb	0	; select bank0
 12363  0AB8  00A9               	movwf	setBuz@time
 12364  0AB9  3000               	movlw	0
 12365  0ABA  00AA               	movwf	setBuz@time+1
 12366  0ABB  3001               	movlw	1
 12367  0ABC  3197  27A7         	fcall	_setBuz
 12368  0ABE  0008               	return
 12369  0ABF                     __end_of_DlyOff_Main:	
 12370                           
 12371                           	psect	text73
 12372  060B                     __ptext73:	
 12373 ;; *************** function _setTxData *****************
 12374 ;; Defined at:
 12375 ;;		line 191 in file "../src/RF_Control_B1.c"
 12376 ;; Parameters:    Size  Location     Type
 12377 ;;		None
 12378 ;; Auto vars:     Size  Location     Type
 12379 ;;  i               1    0        unsigned char 
 12380 ;; Return value:  Size  Location     Type
 12381 ;;		None               void
 12382 ;; Registers used:
 12383 ;;		wreg, fsr1l, fsr1h
 12384 ;; Tracked objects:
 12385 ;;		On entry : 0/0
 12386 ;;		On exit  : 0/0
 12387 ;;		Unchanged: 0/0
 12388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;Total ram usage:        1 bytes
 12394 ;; Hardware stack levels used:    1
 12395 ;; Hardware stack levels required when called:    5
 12396 ;; This function calls:
 12397 ;;		Nothing
 12398 ;; This function is called by:
 12399 ;;		_DlyOff_Main
 12400 ;;		_setDimmerLights_Adj
 12401 ;;		_setControl_Lights_Table
 12402 ;;		_setRFSW_Control
 12403 ;;		_setRFSW_AdjControl
 12404 ;;		_Sw_DimmerOnFunc
 12405 ;;		_Sw_DimmerOffFunc
 12406 ;; This function uses a non-reentrant model
 12407 ;;
 12408                           
 12409                           
 12410                           ;psect for function _setTxData
 12411  060B                     _setTxData:	
 12412                           
 12413                           ;RF_Control_B1.c: 192: char i;
 12414                           ;RF_Control_B1.c: 193: if (RF1.Enable == 1) {
 12415                           
 12416                           ;incstack = 0
 12417                           ; Regs used in _setTxData: [wregfsr1]
 12418  060B  0021               	movlb	1	; select bank1
 12419  060C  1C3E               	btfss	_RF1^(0+128),0
 12420  060D  0008               	return
 12421                           
 12422                           ;RF_Control_B1.c: 195: RF1.TransceiveGO = 1;
 12423  060E  153E               	bsf	_RF1^(0+128),2
 12424                           
 12425                           ;RF_Control_B1.c: 196: RF1.RunTime = 20;
 12426  060F  3014               	movlw	20
 12427  0610  0020               	movlb	0	; select bank0
 12428  0611  00A0               	movwf	??_setTxData
 12429  0612  0820               	movf	??_setTxData,w
 12430  0613  0021               	movlb	1	; select bank1
 12431  0614  00C3               	movwf	(_RF1^(0+128)+5)
 12432                           
 12433                           ;RF_Control_B1.c: 206: RF_Data[0] = 0x63;
 12434  0615  3063               	movlw	99
 12435  0616  0020               	movlb	0	; select bank0
 12436  0617  00A0               	movwf	??_setTxData
 12437  0618  0820               	movf	??_setTxData,w
 12438  0619  0022               	movlb	2	; select bank2
 12439  061A  00A0               	movwf	_RF_Data^(0+256)
 12440                           
 12441                           ;RF_Control_B1.c: 207: RF_Data[1] = 0x02;
 12442  061B  3002               	movlw	2
 12443  061C  0020               	movlb	0	; select bank0
 12444  061D  00A0               	movwf	??_setTxData
 12445  061E  0820               	movf	??_setTxData,w
 12446  061F  0022               	movlb	2	; select bank2
 12447  0620  00A1               	movwf	(_RF_Data^(0+256)+1)
 12448                           
 12449                           ;RF_Control_B1.c: 208: RF_Data[2] = product->Data[2];
 12450  0621  0020               	movlb	0	; select bank0
 12451  0622  086C               	movf	_product,w
 12452  0623  0086               	movwf	6
 12453  0624  3002               	movlw	2	; select bank4/5
 12454  0625  0087               	movwf	7
 12455  0626  3002               	movlw	2	; select bank4/5
 12456  0627  3F42               	moviw [2]fsr1
 12457  0628  0022               	movlb	2	; select bank2
 12458  0629  00A2               	movwf	(_RF_Data^(0+256)+2)
 12459                           
 12460                           ;RF_Control_B1.c: 209: RF_Data[3] = product->Data[3];
 12461  062A  0020               	movlb	0	; select bank0
 12462  062B  086C               	movf	_product,w
 12463  062C  0086               	movwf	6
 12464  062D  3002               	movlw	2	; select bank4/5
 12465  062E  0087               	movwf	7
 12466  062F  3002               	movlw	2	; select bank4/5
 12467  0630  3F43               	moviw [3]fsr1
 12468  0631  0022               	movlb	2	; select bank2
 12469  0632  00A3               	movwf	(_RF_Data^(0+256)+3)
 12470                           
 12471                           ;RF_Control_B1.c: 210: RF_Data[4] = product->Data[4];
 12472  0633  0020               	movlb	0	; select bank0
 12473  0634  086C               	movf	_product,w
 12474  0635  0086               	movwf	6
 12475  0636  3002               	movlw	2	; select bank4/5
 12476  0637  0087               	movwf	7
 12477  0638  3002               	movlw	2	; select bank4/5
 12478  0639  3F44               	moviw [4]fsr1
 12479  063A  0022               	movlb	2	; select bank2
 12480  063B  00A4               	movwf	(_RF_Data^(0+256)+4)
 12481                           
 12482                           ;RF_Control_B1.c: 211: RF_Data[5] = product->Data[5];
 12483  063C  0020               	movlb	0	; select bank0
 12484  063D  086C               	movf	_product,w
 12485  063E  0086               	movwf	6
 12486  063F  3002               	movlw	2	; select bank4/5
 12487  0640  0087               	movwf	7
 12488  0641  3002               	movlw	2	; select bank4/5
 12489  0642  3F45               	moviw [5]fsr1
 12490  0643  0022               	movlb	2	; select bank2
 12491  0644  00A5               	movwf	(_RF_Data^(0+256)+5)
 12492                           
 12493                           ;RF_Control_B1.c: 212: RF_Data[6] = product->Data[6];
 12494  0645  0020               	movlb	0	; select bank0
 12495  0646  086C               	movf	_product,w
 12496  0647  0086               	movwf	6
 12497  0648  3002               	movlw	2	; select bank4/5
 12498  0649  0087               	movwf	7
 12499  064A  3002               	movlw	2	; select bank4/5
 12500  064B  3F46               	moviw [6]fsr1
 12501  064C  0022               	movlb	2	; select bank2
 12502  064D  00A6               	movwf	(_RF_Data^(0+256)+6)
 12503                           
 12504                           ;RF_Control_B1.c: 213: RF_Data[7] = product->Data[7];
 12505  064E  0020               	movlb	0	; select bank0
 12506  064F  086C               	movf	_product,w
 12507  0650  0086               	movwf	6
 12508  0651  3002               	movlw	2	; select bank4/5
 12509  0652  0087               	movwf	7
 12510  0653  3002               	movlw	2	; select bank4/5
 12511  0654  3F47               	moviw [7]fsr1
 12512  0655  0022               	movlb	2	; select bank2
 12513  0656  00A7               	movwf	(_RF_Data^(0+256)+7)
 12514                           
 12515                           ;RF_Control_B1.c: 214: RF_Data[8] = product->Data[8];
 12516  0657  0020               	movlb	0	; select bank0
 12517  0658  086C               	movf	_product,w
 12518  0659  0086               	movwf	6
 12519  065A  3002               	movlw	2	; select bank4/5
 12520  065B  0087               	movwf	7
 12521  065C  3002               	movlw	2	; select bank4/5
 12522  065D  3F48               	moviw [8]fsr1
 12523  065E  0022               	movlb	2	; select bank2
 12524  065F  00A8               	movwf	(_RF_Data^(0+256)+8)
 12525                           
 12526                           ;RF_Control_B1.c: 215: RF_Data[9] = product->Data[9];
 12527  0660  0020               	movlb	0	; select bank0
 12528  0661  086C               	movf	_product,w
 12529  0662  0086               	movwf	6
 12530  0663  3002               	movlw	2	; select bank4/5
 12531  0664  0087               	movwf	7
 12532  0665  3002               	movlw	2	; select bank4/5
 12533  0666  3F49               	moviw [9]fsr1
 12534  0667  0022               	movlb	2	; select bank2
 12535  0668  00A9               	movwf	(_RF_Data^(0+256)+9)
 12536                           
 12537                           ;RF_Control_B1.c: 216: RF_Data[10] = product->Data[10];
 12538  0669  0020               	movlb	0	; select bank0
 12539  066A  086C               	movf	_product,w
 12540  066B  0086               	movwf	6
 12541  066C  3002               	movlw	2	; select bank4/5
 12542  066D  0087               	movwf	7
 12543  066E  3002               	movlw	2	; select bank4/5
 12544  066F  3F4A               	moviw [10]fsr1
 12545  0670  0022               	movlb	2	; select bank2
 12546  0671  00AA               	movwf	(_RF_Data^(0+256)+10)
 12547                           
 12548                           ;RF_Control_B1.c: 217: RF_Data[11] = product->Data[11];
 12549  0672  0020               	movlb	0	; select bank0
 12550  0673  086C               	movf	_product,w
 12551  0674  0086               	movwf	6
 12552  0675  3002               	movlw	2	; select bank4/5
 12553  0676  0087               	movwf	7
 12554  0677  3002               	movlw	2	; select bank4/5
 12555  0678  3F4B               	moviw [11]fsr1
 12556  0679  0022               	movlb	2	; select bank2
 12557  067A  00AB               	movwf	(_RF_Data^(0+256)+11)
 12558                           
 12559                           ;RF_Control_B1.c: 218: RF_Data[12] = product->Data[12];
 12560  067B  0020               	movlb	0	; select bank0
 12561  067C  086C               	movf	_product,w
 12562  067D  0086               	movwf	6
 12563  067E  3002               	movlw	2	; select bank4/5
 12564  067F  0087               	movwf	7
 12565  0680  3002               	movlw	2	; select bank4/5
 12566  0681  3F4C               	moviw [12]fsr1
 12567  0682  0022               	movlb	2	; select bank2
 12568  0683  00AC               	movwf	(_RF_Data^(0+256)+12)
 12569                           
 12570                           ;RF_Control_B1.c: 219: RF_Data[13] = product->Data[13];
 12571  0684  0020               	movlb	0	; select bank0
 12572  0685  086C               	movf	_product,w
 12573  0686  0086               	movwf	6
 12574  0687  3002               	movlw	2	; select bank4/5
 12575  0688  0087               	movwf	7
 12576  0689  3002               	movlw	2	; select bank4/5
 12577  068A  3F4D               	moviw [13]fsr1
 12578  068B  0022               	movlb	2	; select bank2
 12579  068C  00AD               	movwf	(_RF_Data^(0+256)+13)
 12580                           
 12581                           ;RF_Control_B1.c: 220: RF_Data[14] = product->Data[14];
 12582  068D  0020               	movlb	0	; select bank0
 12583  068E  086C               	movf	_product,w
 12584  068F  0086               	movwf	6
 12585  0690  3002               	movlw	2	; select bank4/5
 12586  0691  0087               	movwf	7
 12587  0692  3002               	movlw	2	; select bank4/5
 12588  0693  3F4E               	moviw [14]fsr1
 12589  0694  0022               	movlb	2	; select bank2
 12590  0695  00AE               	movwf	(_RF_Data^(0+256)+14)
 12591                           
 12592                           ;RF_Control_B1.c: 221: RF_Data[15] = product->Data[15];
 12593  0696  0020               	movlb	0	; select bank0
 12594  0697  086C               	movf	_product,w
 12595  0698  0086               	movwf	6
 12596  0699  3002               	movlw	2	; select bank4/5
 12597  069A  0087               	movwf	7
 12598  069B  3002               	movlw	2	; select bank4/5
 12599  069C  3F4F               	moviw [15]fsr1
 12600  069D  0022               	movlb	2	; select bank2
 12601  069E  00AF               	movwf	(_RF_Data^(0+256)+15)
 12602                           
 12603                           ;RF_Control_B1.c: 222: RF_Data[16] = product->Data[16];
 12604  069F  0020               	movlb	0	; select bank0
 12605  06A0  086C               	movf	_product,w
 12606  06A1  0086               	movwf	6
 12607  06A2  3002               	movlw	2	; select bank4/5
 12608  06A3  0087               	movwf	7
 12609  06A4  3002               	movlw	2	; select bank4/5
 12610  06A5  3F50               	moviw [16]fsr1
 12611  06A6  0022               	movlb	2	; select bank2
 12612  06A7  00B0               	movwf	(_RF_Data^(0+256)+16)
 12613                           
 12614                           ;RF_Control_B1.c: 223: RF_Data[17] = product->Data[17];
 12615  06A8  0020               	movlb	0	; select bank0
 12616  06A9  086C               	movf	_product,w
 12617  06AA  0086               	movwf	6
 12618  06AB  3002               	movlw	2	; select bank4/5
 12619  06AC  0087               	movwf	7
 12620  06AD  3002               	movlw	2	; select bank4/5
 12621  06AE  3F51               	moviw [17]fsr1
 12622  06AF  0022               	movlb	2	; select bank2
 12623  06B0  00B1               	movwf	(_RF_Data^(0+256)+17)
 12624                           
 12625                           ;RF_Control_B1.c: 224: RF_Data[18] = product->Data[18];
 12626  06B1  0020               	movlb	0	; select bank0
 12627  06B2  086C               	movf	_product,w
 12628  06B3  0086               	movwf	6
 12629  06B4  3002               	movlw	2	; select bank4/5
 12630  06B5  0087               	movwf	7
 12631  06B6  3002               	movlw	2	; select bank4/5
 12632  06B7  3F52               	moviw [18]fsr1
 12633  06B8  0022               	movlb	2	; select bank2
 12634  06B9  00B2               	movwf	(_RF_Data^(0+256)+18)
 12635                           
 12636                           ;RF_Control_B1.c: 225: RF_Data[19] = product->Data[19];
 12637  06BA  0020               	movlb	0	; select bank0
 12638  06BB  086C               	movf	_product,w
 12639  06BC  0086               	movwf	6
 12640  06BD  3002               	movlw	2	; select bank4/5
 12641  06BE  0087               	movwf	7
 12642  06BF  3002               	movlw	2	; select bank4/5
 12643  06C0  3F53               	moviw [19]fsr1
 12644  06C1  0022               	movlb	2	; select bank2
 12645  06C2  00B3               	movwf	(_RF_Data^(0+256)+19)
 12646                           
 12647                           ;RF_Control_B1.c: 226: RF_Data[20] = 211;
 12648  06C3  30D3               	movlw	211
 12649  06C4  0020               	movlb	0	; select bank0
 12650  06C5  00A0               	movwf	??_setTxData
 12651  06C6  0820               	movf	??_setTxData,w
 12652  06C7  0022               	movlb	2	; select bank2
 12653  06C8  00B4               	movwf	(_RF_Data^(0+256)+20)
 12654  06C9  0008               	return
 12655  06CA                     __end_of_setTxData:	
 12656                           
 12657                           	psect	text74
 12658  1ED5                     __ptext74:	
 12659 ;; *************** function _setSw_Status *****************
 12660 ;; Defined at:
 12661 ;;		line 111 in file "../src/Switch_B1.c"
 12662 ;; Parameters:    Size  Location     Type
 12663 ;;  sw              1    wreg     unsigned char 
 12664 ;;  command         1    2[BANK0 ] unsigned char 
 12665 ;; Auto vars:     Size  Location     Type
 12666 ;;  sw              1    3[BANK0 ] unsigned char 
 12667 ;; Return value:  Size  Location     Type
 12668 ;;		None               void
 12669 ;; Registers used:
 12670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12671 ;; Tracked objects:
 12672 ;;		On entry : 0/0
 12673 ;;		On exit  : 0/0
 12674 ;;		Unchanged: 0/0
 12675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12676 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;Total ram usage:        2 bytes
 12681 ;; Hardware stack levels used:    1
 12682 ;; Hardware stack levels required when called:    6
 12683 ;; This function calls:
 12684 ;;		_SwPointSelect
 12685 ;; This function is called by:
 12686 ;;		_DlyOff_Main
 12687 ;;		_setControl_Lights_Table
 12688 ;;		_setRFSW_Control
 12689 ;;		_setDimmerLights_ERROR
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           
 12694                           ;psect for function _setSw_Status
 12695  1ED5                     _setSw_Status:	
 12696                           
 12697                           ;incstack = 0
 12698                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12699                           ;setSw_Status@sw stored from wreg
 12700  1ED5  0020               	movlb	0	; select bank0
 12701  1ED6  00A3               	movwf	setSw_Status@sw
 12702                           
 12703                           ;Switch_B1.c: 112: SwPointSelect(sw);
 12704  1ED7  0823               	movf	setSw_Status@sw,w
 12705  1ED8  3191  2186         	fcall	_SwPointSelect
 12706                           
 12707                           ;Switch_B1.c: 113: Sw->Status = command;
 12708  1EDA  0020               	movlb	0	; select bank0
 12709  1EDB  086D               	movf	_Sw,w
 12710  1EDC  0086               	movwf	6
 12711  1EDD  3001               	movlw	1	; select bank2/3
 12712  1EDE  0087               	movwf	7
 12713  1EDF  0822               	movf	setSw_Status@command,w
 12714  1EE0  1301               	bcf	1,6
 12715  1EE1  1D03               	skipz
 12716  1EE2  1701               	bsf	1,6
 12717  1EE3  0008               	return
 12718  1EE4                     __end_of_setSw_Status:	
 12719                           
 12720                           	psect	text75
 12721  1186                     __ptext75:	
 12722 ;; *************** function _SwPointSelect *****************
 12723 ;; Defined at:
 12724 ;;		line 21 in file "../src/Switch_B1.c"
 12725 ;; Parameters:    Size  Location     Type
 12726 ;;  sw              1    wreg     unsigned char 
 12727 ;; Auto vars:     Size  Location     Type
 12728 ;;  sw              1    1[BANK0 ] unsigned char 
 12729 ;; Return value:  Size  Location     Type
 12730 ;;		None               void
 12731 ;; Registers used:
 12732 ;;		wreg
 12733 ;; Tracked objects:
 12734 ;;		On entry : 0/0
 12735 ;;		On exit  : 0/0
 12736 ;;		Unchanged: 0/0
 12737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;Total ram usage:        2 bytes
 12743 ;; Hardware stack levels used:    1
 12744 ;; Hardware stack levels required when called:    5
 12745 ;; This function calls:
 12746 ;;		Nothing
 12747 ;; This function is called by:
 12748 ;;		_setSw_Enable
 12749 ;;		_setSw_Status
 12750 ;;		_setSw_Main
 12751 ;;		_Sw_Detect
 12752 ;; This function uses a non-reentrant model
 12753 ;;
 12754                           
 12755                           
 12756                           ;psect for function _SwPointSelect
 12757  1186                     _SwPointSelect:	
 12758                           
 12759                           ;incstack = 0
 12760                           ; Regs used in _SwPointSelect: [wreg]
 12761                           ;SwPointSelect@sw stored from wreg
 12762  1186  0020               	movlb	0	; select bank0
 12763  1187  00A1               	movwf	SwPointSelect@sw
 12764                           
 12765                           ;Switch_B1.c: 24: if (sw == 1) {
 12766  1188  0821               	movf	SwPointSelect@sw,w
 12767  1189  3A01               	xorlw	1
 12768  118A  1D03               	skipz
 12769  118B  2991               	goto	l8105
 12770                           
 12771                           ;Switch_B1.c: 25: Sw = &Sw1;
 12772  118C  30C5               	movlw	_Sw1& (0+255)
 12773  118D  00A0               	movwf	??_SwPointSelect
 12774  118E  0820               	movf	??_SwPointSelect,w
 12775  118F  00ED               	movwf	_Sw
 12776                           
 12777                           ;Switch_B1.c: 26: }
 12778  1190  0008               	return
 12779  1191                     l8105:	
 12780                           
 12781                           ;Switch_B1.c: 29: else if (sw == 2) {
 12782  1191  0821               	movf	SwPointSelect@sw,w
 12783  1192  3A02               	xorlw	2
 12784  1193  1D03               	skipz
 12785  1194  299A               	goto	l8109
 12786                           
 12787                           ;Switch_B1.c: 30: Sw = &Sw2;
 12788  1195  30CE               	movlw	_Sw2& (0+255)
 12789  1196  00A0               	movwf	??_SwPointSelect
 12790  1197  0820               	movf	??_SwPointSelect,w
 12791  1198  00ED               	movwf	_Sw
 12792                           
 12793                           ;Switch_B1.c: 31: }
 12794  1199  0008               	return
 12795  119A                     l8109:	
 12796                           
 12797                           ;Switch_B1.c: 34: else if (sw == 3) {
 12798  119A  0821               	movf	SwPointSelect@sw,w
 12799  119B  3A03               	xorlw	3
 12800  119C  1D03               	skipz
 12801  119D  0008               	return
 12802                           
 12803                           ;Switch_B1.c: 35: Sw = &Sw3;
 12804  119E  30D7               	movlw	_Sw3& (0+255)
 12805  119F  00A0               	movwf	??_SwPointSelect
 12806  11A0  0820               	movf	??_SwPointSelect,w
 12807  11A1  00ED               	movwf	_Sw
 12808  11A2  0008               	return
 12809  11A3                     __end_of_SwPointSelect:	
 12810                           
 12811                           	psect	text76
 12812  0ABF                     __ptext76:	
 12813 ;; *************** function _setRF_DimmerLights *****************
 12814 ;; Defined at:
 12815 ;;		line 457 in file "../src/RF_Control_B1.c"
 12816 ;; Parameters:    Size  Location     Type
 12817 ;;  lights          1    wreg     unsigned char 
 12818 ;;  on              1   61[BANK0 ] unsigned char 
 12819 ;; Auto vars:     Size  Location     Type
 12820 ;;  lights          1   65[BANK0 ] unsigned char 
 12821 ;;  status          1   64[BANK0 ] unsigned char 
 12822 ;; Return value:  Size  Location     Type
 12823 ;;		None               void
 12824 ;; Registers used:
 12825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12826 ;; Tracked objects:
 12827 ;;		On entry : 0/0
 12828 ;;		On exit  : 0/0
 12829 ;;		Unchanged: 0/0
 12830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12831 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12833 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12834 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12835 ;;Total ram usage:        5 bytes
 12836 ;; Hardware stack levels used:    1
 12837 ;; Hardware stack levels required when called:    8
 12838 ;; This function calls:
 12839 ;;		_setPercentValue
 12840 ;; This function is called by:
 12841 ;;		_DlyOff_Main
 12842 ;;		_setDimmerLights_Adj
 12843 ;;		_setRFSW_Control
 12844 ;;		_Sw_DimmerOnFunc
 12845 ;;		_Sw_DimmerOffFunc
 12846 ;; This function uses a non-reentrant model
 12847 ;;
 12848                           
 12849                           
 12850                           ;psect for function _setRF_DimmerLights
 12851  0ABF                     _setRF_DimmerLights:	
 12852                           
 12853                           ;incstack = 0
 12854                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12855                           ;setRF_DimmerLights@lights stored from wreg
 12856  0ABF  0020               	movlb	0	; select bank0
 12857  0AC0  00E1               	movwf	setRF_DimmerLights@lights
 12858                           
 12859                           ;RF_Control_B1.c: 458: char status;
 12860                           ;RF_Control_B1.c: 459: status = 1;
 12861  0AC1  01E0               	clrf	setRF_DimmerLights@status
 12862  0AC2  0AE0               	incf	setRF_DimmerLights@status,f
 12863                           
 12864                           ;RF_Control_B1.c: 460: status <<= (lights - 1);
 12865  0AC3  0861               	movf	setRF_DimmerLights@lights,w
 12866  0AC4  3EFF               	addlw	-1
 12867  0AC5  0A89               	incf	9,f
 12868  0AC6  2AC9               	goto	u8270
 12869  0AC7                     u8275:	
 12870  0AC7  1003               	clrc
 12871  0AC8  0DE0               	rlf	setRF_DimmerLights@status,f
 12872  0AC9                     u8270:	
 12873  0AC9  3EFF               	addlw	-1
 12874  0ACA  1D03               	skipz
 12875  0ACB  2AC7               	goto	u8275
 12876                           
 12877                           ;RF_Control_B1.c: 461: product->Data[11]=lights;
 12878  0ACC  0861               	movf	setRF_DimmerLights@lights,w
 12879  0ACD  00DE               	movwf	??_setRF_DimmerLights
 12880  0ACE  086C               	movf	_product,w
 12881  0ACF  3E0B               	addlw	11
 12882  0AD0  0086               	movwf	6
 12883  0AD1  3002               	movlw	2	; select bank4/5
 12884  0AD2  0087               	movwf	7
 12885  0AD3  085E               	movf	??_setRF_DimmerLights,w
 12886  0AD4  0081               	movwf	1
 12887                           
 12888                           ;RF_Control_B1.c: 464: product->Data[(20 + lights)]=setPercentValue(((char)((100-90)*0.8
      +                          )));
 12889  0AD5  3008               	movlw	8
 12890  0AD6  3196  2678  318A   	fcall	_setPercentValue
 12891  0AD9  0020               	movlb	0	; select bank0
 12892  0ADA  00DE               	movwf	??_setRF_DimmerLights
 12893  0ADB  0861               	movf	setRF_DimmerLights@lights,w
 12894  0ADC  3E14               	addlw	20
 12895  0ADD  076C               	addwf	_product,w
 12896  0ADE  00DF               	movwf	??_setRF_DimmerLights+1
 12897  0ADF  085F               	movf	??_setRF_DimmerLights+1,w
 12898  0AE0  0086               	movwf	6
 12899  0AE1  3002               	movlw	2	; select bank4/5
 12900  0AE2  0087               	movwf	7
 12901  0AE3  085E               	movf	??_setRF_DimmerLights,w
 12902  0AE4  0081               	movwf	1
 12903                           
 12904                           ;RF_Control_B1.c: 467: product->Data[9]=product->Data[20 + lights];
 12905  0AE5  0861               	movf	setRF_DimmerLights@lights,w
 12906  0AE6  3E14               	addlw	20
 12907  0AE7  076C               	addwf	_product,w
 12908  0AE8  00DE               	movwf	??_setRF_DimmerLights
 12909  0AE9  085E               	movf	??_setRF_DimmerLights,w
 12910  0AEA  0086               	movwf	6
 12911  0AEB  3002               	movlw	2	; select bank4/5
 12912  0AEC  0087               	movwf	7
 12913  0AED  0801               	movf	1,w
 12914  0AEE  00DF               	movwf	??_setRF_DimmerLights+1
 12915  0AEF  086C               	movf	_product,w
 12916  0AF0  3E09               	addlw	9
 12917  0AF1  0086               	movwf	6
 12918  0AF2  3002               	movlw	2	; select bank4/5
 12919  0AF3  0087               	movwf	7
 12920  0AF4  085F               	movf	??_setRF_DimmerLights+1,w
 12921  0AF5  0081               	movwf	1
 12922                           
 12923                           ;RF_Control_B1.c: 468: product->Data[17]=product->Data[26 + lights];
 12924  0AF6  0861               	movf	setRF_DimmerLights@lights,w
 12925  0AF7  3E1A               	addlw	26
 12926  0AF8  076C               	addwf	_product,w
 12927  0AF9  00DE               	movwf	??_setRF_DimmerLights
 12928  0AFA  085E               	movf	??_setRF_DimmerLights,w
 12929  0AFB  0086               	movwf	6
 12930  0AFC  3002               	movlw	2	; select bank4/5
 12931  0AFD  0087               	movwf	7
 12932  0AFE  0801               	movf	1,w
 12933  0AFF  00DF               	movwf	??_setRF_DimmerLights+1
 12934  0B00  086C               	movf	_product,w
 12935  0B01  3E11               	addlw	17
 12936  0B02  0086               	movwf	6
 12937  0B03  3002               	movlw	2	; select bank4/5
 12938  0B04  0087               	movwf	7
 12939  0B05  085F               	movf	??_setRF_DimmerLights+1,w
 12940  0B06  0081               	movwf	1
 12941                           
 12942                           ;RF_Control_B1.c: 469: if (on == 1) {
 12943  0B07  085D               	movf	setRF_DimmerLights@on,w
 12944  0B08  3A01               	xorlw	1
 12945  0B09  1D03               	skipz
 12946  0B0A  2B1B               	goto	l8205
 12947                           
 12948                           ;RF_Control_B1.c: 470: product->Data[15]=(product->Data[15] | status);
 12949  0B0B  086C               	movf	_product,w
 12950  0B0C  3E0F               	addlw	15
 12951  0B0D  0086               	movwf	6
 12952  0B0E  3002               	movlw	2	; select bank4/5
 12953  0B0F  0087               	movwf	7
 12954  0B10  0801               	movf	1,w
 12955  0B11  0460               	iorwf	setRF_DimmerLights@status,w
 12956  0B12  00DE               	movwf	??_setRF_DimmerLights
 12957  0B13  086C               	movf	_product,w
 12958  0B14  3E0F               	addlw	15
 12959  0B15  0086               	movwf	6
 12960  0B16  3002               	movlw	2	; select bank4/5
 12961  0B17  0087               	movwf	7
 12962  0B18  085E               	movf	??_setRF_DimmerLights,w
 12963  0B19  0081               	movwf	1
 12964                           
 12965                           ;RF_Control_B1.c: 471: } else {
 12966  0B1A  0008               	return
 12967  0B1B                     l8205:	
 12968                           
 12969                           ;RF_Control_B1.c: 472: product->Data[15]=(product->Data[15]&(~status));
 12970  0B1B  086C               	movf	_product,w
 12971  0B1C  3E0F               	addlw	15
 12972  0B1D  0086               	movwf	6
 12973  0B1E  3002               	movlw	2	; select bank4/5
 12974  0B1F  0087               	movwf	7
 12975  0B20  0960               	comf	setRF_DimmerLights@status,w
 12976  0B21  0501               	andwf	1,w
 12977  0B22  00DE               	movwf	??_setRF_DimmerLights
 12978  0B23  086C               	movf	_product,w
 12979  0B24  3E0F               	addlw	15
 12980  0B25  0086               	movwf	6
 12981  0B26  3002               	movlw	2	; select bank4/5
 12982  0B27  0087               	movwf	7
 12983  0B28  085E               	movf	??_setRF_DimmerLights,w
 12984  0B29  0081               	movwf	1
 12985  0B2A  0008               	return
 12986  0B2B                     __end_of_setRF_DimmerLights:	
 12987                           
 12988                           	psect	text77
 12989  1678                     __ptext77:	
 12990 ;; *************** function _setPercentValue *****************
 12991 ;; Defined at:
 12992 ;;		line 779 in file "../src/Dimmer_B1.c"
 12993 ;; Parameters:    Size  Location     Type
 12994 ;;  value           1    wreg     unsigned char 
 12995 ;; Auto vars:     Size  Location     Type
 12996 ;;  value           1   57[BANK0 ] unsigned char 
 12997 ;;  i               3   58[BANK0 ] float 
 12998 ;; Return value:  Size  Location     Type
 12999 ;;                  1    wreg      unsigned char 
 13000 ;; Registers used:
 13001 ;;		wreg, status,2, status,0, pclath, cstack
 13002 ;; Tracked objects:
 13003 ;;		On entry : 0/0
 13004 ;;		On exit  : 0/0
 13005 ;;		Unchanged: 0/0
 13006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13010 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;Total ram usage:        4 bytes
 13012 ;; Hardware stack levels used:    1
 13013 ;; Hardware stack levels required when called:    7
 13014 ;; This function calls:
 13015 ;;		___awtoft
 13016 ;;		___ftdiv
 13017 ;;		___fttol
 13018 ;; This function is called by:
 13019 ;;		_Flash_Memory_Initialization
 13020 ;;		_setRF_DimmerLights
 13021 ;; This function uses a non-reentrant model
 13022 ;;
 13023                           
 13024                           
 13025                           ;psect for function _setPercentValue
 13026  1678                     _setPercentValue:	
 13027                           
 13028                           ;incstack = 0
 13029                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13030                           ;setPercentValue@value stored from wreg
 13031  1678  0020               	movlb	0	; select bank0
 13032  1679  00D9               	movwf	setPercentValue@value
 13033                           
 13034                           ;Dimmer_B1.c: 781: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
 13035  167A  3000               	movlw	0
 13036  167B  00DA               	movwf	setPercentValue@i
 13037  167C  3050               	movlw	80
 13038  167D  00DB               	movwf	setPercentValue@i+1
 13039  167E  3042               	movlw	66
 13040  167F  00DC               	movwf	setPercentValue@i+2
 13041                           
 13042                           ;Dimmer_B1.c: 782: i /= 100;
 13043  1680  3000               	movlw	0
 13044  1681  00AE               	movwf	___ftdiv@f2
 13045  1682  30C8               	movlw	200
 13046  1683  00AF               	movwf	___ftdiv@f2+1
 13047  1684  3042               	movlw	66
 13048  1685  00B0               	movwf	___ftdiv@f2+2
 13049  1686  085A               	movf	setPercentValue@i,w
 13050  1687  00B1               	movwf	___ftdiv@f1
 13051  1688  085B               	movf	setPercentValue@i+1,w
 13052  1689  00B2               	movwf	___ftdiv@f1+1
 13053  168A  085C               	movf	setPercentValue@i+2,w
 13054  168B  00B3               	movwf	___ftdiv@f1+2
 13055  168C  318E  26A8  3196   	fcall	___ftdiv
 13056  168F  0020               	movlb	0	; select bank0
 13057  1690  082E               	movf	?___ftdiv,w
 13058  1691  00DA               	movwf	setPercentValue@i
 13059  1692  082F               	movf	?___ftdiv+1,w
 13060  1693  00DB               	movwf	setPercentValue@i+1
 13061  1694  0830               	movf	?___ftdiv+2,w
 13062  1695  00DC               	movwf	setPercentValue@i+2
 13063                           
 13064                           ;Dimmer_B1.c: 783: return (100 - (char) ((value - ((char)((100-90)*0.8))) / i));
 13065  1696  0859               	movf	setPercentValue@value,w
 13066  1697  3EF8               	addlw	248
 13067  1698  00A8               	movwf	___awtoft@c
 13068  1699  30FF               	movlw	255
 13069  169A  1803               	skipnc
 13070  169B  3000               	movlw	0
 13071  169C  00A9               	movwf	___awtoft@c+1
 13072  169D  3192  227D  3196   	fcall	___awtoft
 13073  16A0  0020               	movlb	0	; select bank0
 13074  16A1  0828               	movf	?___awtoft,w
 13075  16A2  00B1               	movwf	___ftdiv@f1
 13076  16A3  0829               	movf	?___awtoft+1,w
 13077  16A4  00B2               	movwf	___ftdiv@f1+1
 13078  16A5  082A               	movf	?___awtoft+2,w
 13079  16A6  00B3               	movwf	___ftdiv@f1+2
 13080  16A7  085A               	movf	setPercentValue@i,w
 13081  16A8  00AE               	movwf	___ftdiv@f2
 13082  16A9  085B               	movf	setPercentValue@i+1,w
 13083  16AA  00AF               	movwf	___ftdiv@f2+1
 13084  16AB  085C               	movf	setPercentValue@i+2,w
 13085  16AC  00B0               	movwf	___ftdiv@f2+2
 13086  16AD  318E  26A8  3196   	fcall	___ftdiv
 13087  16B0  0020               	movlb	0	; select bank0
 13088  16B1  082E               	movf	?___ftdiv,w
 13089  16B2  00CB               	movwf	___fttol@f1
 13090  16B3  082F               	movf	?___ftdiv+1,w
 13091  16B4  00CC               	movwf	___fttol@f1+1
 13092  16B5  0830               	movf	?___ftdiv+2,w
 13093  16B6  00CD               	movwf	___fttol@f1+2
 13094  16B7  318D  2507         	fcall	___fttol
 13095  16B9  0020               	movlb	0	; select bank0
 13096  16BA  034B               	decf	?___fttol,w
 13097  16BB  3AFF               	xorlw	255
 13098  16BC  3E64               	addlw	100
 13099  16BD  0008               	return
 13100  16BE                     __end_of_setPercentValue:	
 13101                           
 13102                           	psect	text78
 13103  0D07                     __ptext78:	
 13104 ;; *************** function ___fttol *****************
 13105 ;; Defined at:
 13106 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13107 ;; Parameters:    Size  Location     Type
 13108 ;;  f1              3   43[BANK0 ] float 
 13109 ;; Auto vars:     Size  Location     Type
 13110 ;;  lval            4   52[BANK0 ] unsigned long 
 13111 ;;  exp1            1   56[BANK0 ] unsigned char 
 13112 ;;  sign1           1   51[BANK0 ] unsigned char 
 13113 ;; Return value:  Size  Location     Type
 13114 ;;                  4   43[BANK0 ] long 
 13115 ;; Registers used:
 13116 ;;		wreg, status,2, status,0
 13117 ;; Tracked objects:
 13118 ;;		On entry : 0/0
 13119 ;;		On exit  : 0/0
 13120 ;;		Unchanged: 0/0
 13121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13122 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13123 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13124 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13125 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13126 ;;Total ram usage:       14 bytes
 13127 ;; Hardware stack levels used:    1
 13128 ;; Hardware stack levels required when called:    5
 13129 ;; This function calls:
 13130 ;;		Nothing
 13131 ;; This function is called by:
 13132 ;;		_getPercentValue
 13133 ;;		_setPercentValue
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           
 13138                           ;psect for function ___fttol
 13139  0D07                     ___fttol:	
 13140                           
 13141                           ;incstack = 0
 13142                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13143  0D07  0020               	movlb	0	; select bank0
 13144  0D08  084B               	movf	___fttol@f1,w
 13145  0D09  00CF               	movwf	??___fttol
 13146  0D0A  084C               	movf	___fttol@f1+1,w
 13147  0D0B  00D0               	movwf	??___fttol+1
 13148  0D0C  084D               	movf	___fttol@f1+2,w
 13149  0D0D  00D1               	movwf	??___fttol+2
 13150  0D0E  1003               	clrc
 13151  0D0F  0D50               	rlf	??___fttol+1,w
 13152  0D10  0D51               	rlf	??___fttol+2,w
 13153  0D11  00D2               	movwf	??___fttol+3
 13154  0D12  0852               	movf	??___fttol+3,w
 13155  0D13  00D8               	movwf	___fttol@exp1
 13156  0D14  08D8               	movf	___fttol@exp1,f
 13157  0D15  1D03               	skipz
 13158  0D16  2D20               	goto	l5833
 13159  0D17  3000               	movlw	0
 13160  0D18  00CE               	movwf	?___fttol+3
 13161  0D19  3000               	movlw	0
 13162  0D1A  00CD               	movwf	?___fttol+2
 13163  0D1B  3000               	movlw	0
 13164  0D1C  00CC               	movwf	?___fttol+1
 13165  0D1D  3000               	movlw	0
 13166  0D1E  00CB               	movwf	?___fttol
 13167  0D1F  0008               	return
 13168  0D20                     l5833:	
 13169  0D20  084B               	movf	___fttol@f1,w
 13170  0D21  00CF               	movwf	??___fttol
 13171  0D22  084C               	movf	___fttol@f1+1,w
 13172  0D23  00D0               	movwf	??___fttol+1
 13173  0D24  084D               	movf	___fttol@f1+2,w
 13174  0D25  00D1               	movwf	??___fttol+2
 13175  0D26  3017               	movlw	23
 13176  0D27                     u4545:	
 13177  0D27  36D1               	lsrf	??___fttol+2,f
 13178  0D28  0CD0               	rrf	??___fttol+1,f
 13179  0D29  0CCF               	rrf	??___fttol,f
 13180  0D2A  0B89               	decfsz	9,f
 13181  0D2B  2D27               	goto	u4545
 13182  0D2C  084F               	movf	??___fttol,w
 13183  0D2D  00D2               	movwf	??___fttol+3
 13184  0D2E  0852               	movf	??___fttol+3,w
 13185  0D2F  00D3               	movwf	___fttol@sign1
 13186  0D30  17CC               	bsf	___fttol@f1+1,7
 13187  0D31  30FF               	movlw	255
 13188  0D32  05CB               	andwf	___fttol@f1,f
 13189  0D33  30FF               	movlw	255
 13190  0D34  05CC               	andwf	___fttol@f1+1,f
 13191  0D35  3000               	movlw	0
 13192  0D36  05CD               	andwf	___fttol@f1+2,f
 13193  0D37  084B               	movf	___fttol@f1,w
 13194  0D38  00D4               	movwf	___fttol@lval
 13195  0D39  084C               	movf	___fttol@f1+1,w
 13196  0D3A  00D5               	movwf	___fttol@lval+1
 13197  0D3B  084D               	movf	___fttol@f1+2,w
 13198  0D3C  00D6               	movwf	___fttol@lval+2
 13199  0D3D  01D7               	clrf	___fttol@lval+3
 13200  0D3E  308E               	movlw	142
 13201  0D3F  02D8               	subwf	___fttol@exp1,f
 13202  0D40  1FD8               	btfss	___fttol@exp1,7
 13203  0D41  2D5E               	goto	l5853
 13204  0D42  0858               	movf	___fttol@exp1,w
 13205  0D43  3A80               	xorlw	128
 13206  0D44  3E8F               	addlw	143
 13207  0D45  1803               	skipnc
 13208  0D46  2D50               	goto	l5851
 13209  0D47  3000               	movlw	0
 13210  0D48  00CE               	movwf	?___fttol+3
 13211  0D49  3000               	movlw	0
 13212  0D4A  00CD               	movwf	?___fttol+2
 13213  0D4B  3000               	movlw	0
 13214  0D4C  00CC               	movwf	?___fttol+1
 13215  0D4D  3000               	movlw	0
 13216  0D4E  00CB               	movwf	?___fttol
 13217  0D4F  0008               	return
 13218  0D50                     l5851:	
 13219  0D50  3001               	movlw	1
 13220  0D51                     u4575:	
 13221  0D51  36D7               	lsrf	___fttol@lval+3,f
 13222  0D52  0CD6               	rrf	___fttol@lval+2,f
 13223  0D53  0CD5               	rrf	___fttol@lval+1,f
 13224  0D54  0CD4               	rrf	___fttol@lval,f
 13225  0D55  0B89               	decfsz	9,f
 13226  0D56  2D51               	goto	u4575
 13227  0D57  3001               	movlw	1
 13228  0D58  00CF               	movwf	??___fttol
 13229  0D59  084F               	movf	??___fttol,w
 13230  0D5A  07D8               	addwf	___fttol@exp1,f
 13231  0D5B  1903               	btfsc	3,2
 13232  0D5C  2D77               	goto	l5863
 13233  0D5D  2D50               	goto	l5851
 13234  0D5E                     l5853:	
 13235  0D5E  3018               	movlw	24
 13236  0D5F  0258               	subwf	___fttol@exp1,w
 13237  0D60  1C03               	skipc
 13238  0D61  2D74               	goto	l5861
 13239  0D62  3000               	movlw	0
 13240  0D63  00CE               	movwf	?___fttol+3
 13241  0D64  3000               	movlw	0
 13242  0D65  00CD               	movwf	?___fttol+2
 13243  0D66  3000               	movlw	0
 13244  0D67  00CC               	movwf	?___fttol+1
 13245  0D68  3000               	movlw	0
 13246  0D69  00CB               	movwf	?___fttol
 13247  0D6A  0008               	return
 13248  0D6B                     l5859:	
 13249  0D6B  3001               	movlw	1
 13250  0D6C                     u4605:	
 13251  0D6C  35D4               	lslf	___fttol@lval,f
 13252  0D6D  0DD5               	rlf	___fttol@lval+1,f
 13253  0D6E  0DD6               	rlf	___fttol@lval+2,f
 13254  0D6F  0DD7               	rlf	___fttol@lval+3,f
 13255  0D70  0B89               	decfsz	9,f
 13256  0D71  2D6C               	goto	u4605
 13257  0D72  3001               	movlw	1
 13258  0D73  02D8               	subwf	___fttol@exp1,f
 13259  0D74                     l5861:	
 13260  0D74  08D8               	movf	___fttol@exp1,f
 13261  0D75  1D03               	skipz
 13262  0D76  2D6B               	goto	l5859
 13263  0D77                     l5863:	
 13264  0D77  0853               	movf	___fttol@sign1,w
 13265  0D78  1903               	btfsc	3,2
 13266  0D79  2D85               	goto	l5867
 13267  0D7A  09D4               	comf	___fttol@lval,f
 13268  0D7B  09D5               	comf	___fttol@lval+1,f
 13269  0D7C  09D6               	comf	___fttol@lval+2,f
 13270  0D7D  09D7               	comf	___fttol@lval+3,f
 13271  0D7E  0AD4               	incf	___fttol@lval,f
 13272  0D7F  1903               	skipnz
 13273  0D80  0AD5               	incf	___fttol@lval+1,f
 13274  0D81  1903               	skipnz
 13275  0D82  0AD6               	incf	___fttol@lval+2,f
 13276  0D83  1903               	skipnz
 13277  0D84  0AD7               	incf	___fttol@lval+3,f
 13278  0D85                     l5867:	
 13279  0D85  0857               	movf	___fttol@lval+3,w
 13280  0D86  00CE               	movwf	?___fttol+3
 13281  0D87  0856               	movf	___fttol@lval+2,w
 13282  0D88  00CD               	movwf	?___fttol+2
 13283  0D89  0855               	movf	___fttol@lval+1,w
 13284  0D8A  00CC               	movwf	?___fttol+1
 13285  0D8B  0854               	movf	___fttol@lval,w
 13286  0D8C  00CB               	movwf	?___fttol
 13287  0D8D  0008               	return
 13288  0D8E                     __end_of___fttol:	
 13289                           
 13290                           	psect	text79
 13291  0EA8                     __ptext79:	
 13292 ;; *************** function ___ftdiv *****************
 13293 ;; Defined at:
 13294 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13295 ;; Parameters:    Size  Location     Type
 13296 ;;  f2              3   14[BANK0 ] float 
 13297 ;;  f1              3   17[BANK0 ] float 
 13298 ;; Auto vars:     Size  Location     Type
 13299 ;;  f3              3   25[BANK0 ] float 
 13300 ;;  sign            1   29[BANK0 ] unsigned char 
 13301 ;;  exp             1   28[BANK0 ] unsigned char 
 13302 ;;  cntr            1   24[BANK0 ] unsigned char 
 13303 ;; Return value:  Size  Location     Type
 13304 ;;                  3   14[BANK0 ] float 
 13305 ;; Registers used:
 13306 ;;		wreg, status,2, status,0, pclath, cstack
 13307 ;; Tracked objects:
 13308 ;;		On entry : 0/0
 13309 ;;		On exit  : 0/0
 13310 ;;		Unchanged: 0/0
 13311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13312 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;Total ram usage:       16 bytes
 13317 ;; Hardware stack levels used:    1
 13318 ;; Hardware stack levels required when called:    6
 13319 ;; This function calls:
 13320 ;;		___ftpack
 13321 ;; This function is called by:
 13322 ;;		_getPercentValue
 13323 ;;		_setPercentValue
 13324 ;; This function uses a non-reentrant model
 13325 ;;
 13326                           
 13327                           
 13328                           ;psect for function ___ftdiv
 13329  0EA8                     ___ftdiv:	
 13330                           
 13331                           ;incstack = 0
 13332                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13333  0EA8  0020               	movlb	0	; select bank0
 13334  0EA9  0831               	movf	___ftdiv@f1,w
 13335  0EAA  00B4               	movwf	??___ftdiv
 13336  0EAB  0832               	movf	___ftdiv@f1+1,w
 13337  0EAC  00B5               	movwf	??___ftdiv+1
 13338  0EAD  0833               	movf	___ftdiv@f1+2,w
 13339  0EAE  00B6               	movwf	??___ftdiv+2
 13340  0EAF  1003               	clrc
 13341  0EB0  0D35               	rlf	??___ftdiv+1,w
 13342  0EB1  0D36               	rlf	??___ftdiv+2,w
 13343  0EB2  00B7               	movwf	??___ftdiv+3
 13344  0EB3  0837               	movf	??___ftdiv+3,w
 13345  0EB4  00BC               	movwf	___ftdiv@exp
 13346  0EB5  08BC               	movf	___ftdiv@exp,f
 13347  0EB6  1D03               	skipz
 13348  0EB7  2EBF               	goto	l5741
 13349  0EB8  3000               	movlw	0
 13350  0EB9  00AE               	movwf	?___ftdiv
 13351  0EBA  3000               	movlw	0
 13352  0EBB  00AF               	movwf	?___ftdiv+1
 13353  0EBC  3000               	movlw	0
 13354  0EBD  00B0               	movwf	?___ftdiv+2
 13355  0EBE  0008               	return
 13356  0EBF                     l5741:	
 13357  0EBF  082E               	movf	___ftdiv@f2,w
 13358  0EC0  00B4               	movwf	??___ftdiv
 13359  0EC1  082F               	movf	___ftdiv@f2+1,w
 13360  0EC2  00B5               	movwf	??___ftdiv+1
 13361  0EC3  0830               	movf	___ftdiv@f2+2,w
 13362  0EC4  00B6               	movwf	??___ftdiv+2
 13363  0EC5  1003               	clrc
 13364  0EC6  0D35               	rlf	??___ftdiv+1,w
 13365  0EC7  0D36               	rlf	??___ftdiv+2,w
 13366  0EC8  00B7               	movwf	??___ftdiv+3
 13367  0EC9  0837               	movf	??___ftdiv+3,w
 13368  0ECA  00BD               	movwf	___ftdiv@sign
 13369  0ECB  08BD               	movf	___ftdiv@sign,f
 13370  0ECC  1D03               	skipz
 13371  0ECD  2ED5               	goto	l5747
 13372  0ECE  3000               	movlw	0
 13373  0ECF  00AE               	movwf	?___ftdiv
 13374  0ED0  3000               	movlw	0
 13375  0ED1  00AF               	movwf	?___ftdiv+1
 13376  0ED2  3000               	movlw	0
 13377  0ED3  00B0               	movwf	?___ftdiv+2
 13378  0ED4  0008               	return
 13379  0ED5                     l5747:	
 13380  0ED5  3000               	movlw	0
 13381  0ED6  00B9               	movwf	___ftdiv@f3
 13382  0ED7  3000               	movlw	0
 13383  0ED8  00BA               	movwf	___ftdiv@f3+1
 13384  0ED9  3000               	movlw	0
 13385  0EDA  00BB               	movwf	___ftdiv@f3+2
 13386  0EDB  3089               	movlw	137
 13387  0EDC  073D               	addwf	___ftdiv@sign,w
 13388  0EDD  00B4               	movwf	??___ftdiv
 13389  0EDE  0834               	movf	??___ftdiv,w
 13390  0EDF  02BC               	subwf	___ftdiv@exp,f
 13391  0EE0  0831               	movf	___ftdiv@f1,w
 13392  0EE1  00B4               	movwf	??___ftdiv
 13393  0EE2  0832               	movf	___ftdiv@f1+1,w
 13394  0EE3  00B5               	movwf	??___ftdiv+1
 13395  0EE4  0833               	movf	___ftdiv@f1+2,w
 13396  0EE5  00B6               	movwf	??___ftdiv+2
 13397  0EE6  3010               	movlw	16
 13398  0EE7                     u4355:	
 13399  0EE7  36B6               	lsrf	??___ftdiv+2,f
 13400  0EE8  0CB5               	rrf	??___ftdiv+1,f
 13401  0EE9  0CB4               	rrf	??___ftdiv,f
 13402  0EEA  0B89               	decfsz	9,f
 13403  0EEB  2EE7               	goto	u4355
 13404  0EEC  0834               	movf	??___ftdiv,w
 13405  0EED  00B7               	movwf	??___ftdiv+3
 13406  0EEE  0837               	movf	??___ftdiv+3,w
 13407  0EEF  00BD               	movwf	___ftdiv@sign
 13408  0EF0  082E               	movf	___ftdiv@f2,w
 13409  0EF1  00B4               	movwf	??___ftdiv
 13410  0EF2  082F               	movf	___ftdiv@f2+1,w
 13411  0EF3  00B5               	movwf	??___ftdiv+1
 13412  0EF4  0830               	movf	___ftdiv@f2+2,w
 13413  0EF5  00B6               	movwf	??___ftdiv+2
 13414  0EF6  3010               	movlw	16
 13415  0EF7                     u4365:	
 13416  0EF7  36B6               	lsrf	??___ftdiv+2,f
 13417  0EF8  0CB5               	rrf	??___ftdiv+1,f
 13418  0EF9  0CB4               	rrf	??___ftdiv,f
 13419  0EFA  0B89               	decfsz	9,f
 13420  0EFB  2EF7               	goto	u4365
 13421  0EFC  0834               	movf	??___ftdiv,w
 13422  0EFD  00B7               	movwf	??___ftdiv+3
 13423  0EFE  0837               	movf	??___ftdiv+3,w
 13424  0EFF  06BD               	xorwf	___ftdiv@sign,f
 13425  0F00  3080               	movlw	128
 13426  0F01  00B4               	movwf	??___ftdiv
 13427  0F02  0834               	movf	??___ftdiv,w
 13428  0F03  05BD               	andwf	___ftdiv@sign,f
 13429  0F04  17B2               	bsf	___ftdiv@f1+1,7
 13430  0F05  30FF               	movlw	255
 13431  0F06  05B1               	andwf	___ftdiv@f1,f
 13432  0F07  30FF               	movlw	255
 13433  0F08  05B2               	andwf	___ftdiv@f1+1,f
 13434  0F09  3000               	movlw	0
 13435  0F0A  05B3               	andwf	___ftdiv@f1+2,f
 13436  0F0B  17AF               	bsf	___ftdiv@f2+1,7
 13437  0F0C  30FF               	movlw	255
 13438  0F0D  05AE               	andwf	___ftdiv@f2,f
 13439  0F0E  30FF               	movlw	255
 13440  0F0F  05AF               	andwf	___ftdiv@f2+1,f
 13441  0F10  3000               	movlw	0
 13442  0F11  05B0               	andwf	___ftdiv@f2+2,f
 13443  0F12  3018               	movlw	24
 13444  0F13  00B4               	movwf	??___ftdiv
 13445  0F14  0834               	movf	??___ftdiv,w
 13446  0F15  00B8               	movwf	___ftdiv@cntr
 13447  0F16                     l5761:	
 13448  0F16  3001               	movlw	1
 13449  0F17                     u4375:	
 13450  0F17  35B9               	lslf	___ftdiv@f3,f
 13451  0F18  0DBA               	rlf	___ftdiv@f3+1,f
 13452  0F19  0DBB               	rlf	___ftdiv@f3+2,f
 13453  0F1A  0B89               	decfsz	9,f
 13454  0F1B  2F17               	goto	u4375
 13455  0F1C  0830               	movf	___ftdiv@f2+2,w
 13456  0F1D  0233               	subwf	___ftdiv@f1+2,w
 13457  0F1E  1D03               	skipz
 13458  0F1F  2F26               	goto	u4385
 13459  0F20  082F               	movf	___ftdiv@f2+1,w
 13460  0F21  0232               	subwf	___ftdiv@f1+1,w
 13461  0F22  1D03               	skipz
 13462  0F23  2F26               	goto	u4385
 13463  0F24  082E               	movf	___ftdiv@f2,w
 13464  0F25  0231               	subwf	___ftdiv@f1,w
 13465  0F26                     u4385:	
 13466  0F26  1C03               	skipc
 13467  0F27  2F2F               	goto	l5769
 13468  0F28  082E               	movf	___ftdiv@f2,w
 13469  0F29  02B1               	subwf	___ftdiv@f1,f
 13470  0F2A  082F               	movf	___ftdiv@f2+1,w
 13471  0F2B  3BB2               	subwfb	___ftdiv@f1+1,f
 13472  0F2C  0830               	movf	___ftdiv@f2+2,w
 13473  0F2D  3BB3               	subwfb	___ftdiv@f1+2,f
 13474  0F2E  1439               	bsf	___ftdiv@f3,0
 13475  0F2F                     l5769:	
 13476  0F2F  3001               	movlw	1
 13477  0F30                     u4395:	
 13478  0F30  35B1               	lslf	___ftdiv@f1,f
 13479  0F31  0DB2               	rlf	___ftdiv@f1+1,f
 13480  0F32  0DB3               	rlf	___ftdiv@f1+2,f
 13481  0F33  0B89               	decfsz	9,f
 13482  0F34  2F30               	goto	u4395
 13483  0F35  3001               	movlw	1
 13484  0F36  02B8               	subwf	___ftdiv@cntr,f
 13485  0F37  1D03               	btfss	3,2
 13486  0F38  2F16               	goto	l5761
 13487  0F39  0839               	movf	___ftdiv@f3,w
 13488  0F3A  00A0               	movwf	___ftpack@arg
 13489  0F3B  083A               	movf	___ftdiv@f3+1,w
 13490  0F3C  00A1               	movwf	___ftpack@arg+1
 13491  0F3D  083B               	movf	___ftdiv@f3+2,w
 13492  0F3E  00A2               	movwf	___ftpack@arg+2
 13493  0F3F  083C               	movf	___ftdiv@exp,w
 13494  0F40  00B4               	movwf	??___ftdiv
 13495  0F41  0834               	movf	??___ftdiv,w
 13496  0F42  00A3               	movwf	___ftpack@exp
 13497  0F43  083D               	movf	___ftdiv@sign,w
 13498  0F44  00B5               	movwf	??___ftdiv+1
 13499  0F45  0835               	movf	??___ftdiv+1,w
 13500  0F46  00A4               	movwf	___ftpack@sign
 13501  0F47  3189  2126         	fcall	___ftpack
 13502  0F49  0020               	movlb	0	; select bank0
 13503  0F4A  0820               	movf	?___ftpack,w
 13504  0F4B  00AE               	movwf	?___ftdiv
 13505  0F4C  0821               	movf	?___ftpack+1,w
 13506  0F4D  00AF               	movwf	?___ftdiv+1
 13507  0F4E  0822               	movf	?___ftpack+2,w
 13508  0F4F  00B0               	movwf	?___ftdiv+2
 13509  0F50  0008               	return
 13510  0F51                     __end_of___ftdiv:	
 13511                           
 13512                           	psect	text80
 13513  127D                     __ptext80:	
 13514 ;; *************** function ___awtoft *****************
 13515 ;; Defined at:
 13516 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;  c               2    8[BANK0 ] int 
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;  sign            1   13[BANK0 ] unsigned char 
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  3    8[BANK0 ] float 
 13523 ;; Registers used:
 13524 ;;		wreg, status,2, status,0, pclath, cstack
 13525 ;; Tracked objects:
 13526 ;;		On entry : 0/0
 13527 ;;		On exit  : 0/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13530 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;Total ram usage:        6 bytes
 13535 ;; Hardware stack levels used:    1
 13536 ;; Hardware stack levels required when called:    6
 13537 ;; This function calls:
 13538 ;;		___ftpack
 13539 ;; This function is called by:
 13540 ;;		_getPercentValue
 13541 ;;		_setPercentValue
 13542 ;; This function uses a non-reentrant model
 13543 ;;
 13544                           
 13545                           
 13546                           ;psect for function ___awtoft
 13547  127D                     ___awtoft:	
 13548                           
 13549                           ;incstack = 0
 13550                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13551  127D  0020               	movlb	0	; select bank0
 13552  127E  01AD               	clrf	___awtoft@sign
 13553  127F  1FA9               	btfss	___awtoft@c+1,7
 13554  1280  2A88               	goto	l8005
 13555  1281  09A8               	comf	___awtoft@c,f
 13556  1282  09A9               	comf	___awtoft@c+1,f
 13557  1283  0AA8               	incf	___awtoft@c,f
 13558  1284  1903               	skipnz
 13559  1285  0AA9               	incf	___awtoft@c+1,f
 13560  1286  01AD               	clrf	___awtoft@sign
 13561  1287  0AAD               	incf	___awtoft@sign,f
 13562  1288                     l8005:	
 13563  1288  0828               	movf	___awtoft@c,w
 13564  1289  00A0               	movwf	___ftpack@arg
 13565  128A  0829               	movf	___awtoft@c+1,w
 13566  128B  00A1               	movwf	___ftpack@arg+1
 13567  128C  01A2               	clrf	___ftpack@arg+2
 13568  128D  308E               	movlw	142
 13569  128E  00AB               	movwf	??___awtoft
 13570  128F  082B               	movf	??___awtoft,w
 13571  1290  00A3               	movwf	___ftpack@exp
 13572  1291  082D               	movf	___awtoft@sign,w
 13573  1292  00AC               	movwf	??___awtoft+1
 13574  1293  082C               	movf	??___awtoft+1,w
 13575  1294  00A4               	movwf	___ftpack@sign
 13576  1295  3189  2126         	fcall	___ftpack
 13577  1297  0020               	movlb	0	; select bank0
 13578  1298  0820               	movf	?___ftpack,w
 13579  1299  00A8               	movwf	?___awtoft
 13580  129A  0821               	movf	?___ftpack+1,w
 13581  129B  00A9               	movwf	?___awtoft+1
 13582  129C  0822               	movf	?___ftpack+2,w
 13583  129D  00AA               	movwf	?___awtoft+2
 13584  129E  0008               	return
 13585  129F                     __end_of___awtoft:	
 13586                           
 13587                           	psect	text81
 13588  0926                     __ptext81:	
 13589 ;; *************** function ___ftpack *****************
 13590 ;; Defined at:
 13591 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13592 ;; Parameters:    Size  Location     Type
 13593 ;;  arg             3    0[BANK0 ] unsigned um
 13594 ;;  exp             1    3[BANK0 ] unsigned char 
 13595 ;;  sign            1    4[BANK0 ] unsigned char 
 13596 ;; Auto vars:     Size  Location     Type
 13597 ;;		None
 13598 ;; Return value:  Size  Location     Type
 13599 ;;                  3    0[BANK0 ] float 
 13600 ;; Registers used:
 13601 ;;		wreg, status,2, status,0
 13602 ;; Tracked objects:
 13603 ;;		On entry : 0/0
 13604 ;;		On exit  : 0/0
 13605 ;;		Unchanged: 0/0
 13606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13607 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;Total ram usage:        8 bytes
 13612 ;; Hardware stack levels used:    1
 13613 ;; Hardware stack levels required when called:    5
 13614 ;; This function calls:
 13615 ;;		Nothing
 13616 ;; This function is called by:
 13617 ;;		___awtoft
 13618 ;;		___ftadd
 13619 ;;		___ftdiv
 13620 ;;		___ftmul
 13621 ;; This function uses a non-reentrant model
 13622 ;;
 13623                           
 13624                           
 13625                           ;psect for function ___ftpack
 13626  0926                     ___ftpack:	
 13627                           
 13628                           ;incstack = 0
 13629                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13630  0926  0020               	movlb	0	; select bank0
 13631  0927  0823               	movf	___ftpack@exp,w
 13632  0928  1903               	btfsc	3,2
 13633  0929  292F               	goto	l5625
 13634  092A  0822               	movf	___ftpack@arg+2,w
 13635  092B  0421               	iorwf	___ftpack@arg+1,w
 13636  092C  0420               	iorwf	___ftpack@arg,w
 13637  092D  1D03               	skipz
 13638  092E  2940               	goto	l5631
 13639  092F                     l5625:	
 13640  092F  3000               	movlw	0
 13641  0930  00A0               	movwf	?___ftpack
 13642  0931  3000               	movlw	0
 13643  0932  00A1               	movwf	?___ftpack+1
 13644  0933  3000               	movlw	0
 13645  0934  00A2               	movwf	?___ftpack+2
 13646  0935  0008               	return
 13647  0936                     l5629:	
 13648  0936  3001               	movlw	1
 13649  0937  00A5               	movwf	??___ftpack
 13650  0938  0825               	movf	??___ftpack,w
 13651  0939  07A3               	addwf	___ftpack@exp,f
 13652  093A  3001               	movlw	1
 13653  093B                     u4005:	
 13654  093B  36A2               	lsrf	___ftpack@arg+2,f
 13655  093C  0CA1               	rrf	___ftpack@arg+1,f
 13656  093D  0CA0               	rrf	___ftpack@arg,f
 13657  093E  0B89               	decfsz	9,f
 13658  093F  293B               	goto	u4005
 13659  0940                     l5631:	
 13660  0940  30FE               	movlw	254
 13661  0941  0522               	andwf	___ftpack@arg+2,w
 13662  0942  1903               	btfsc	3,2
 13663  0943  2959               	goto	l3021
 13664  0944  2936               	goto	l5629
 13665  0945                     l5633:	
 13666  0945  3001               	movlw	1
 13667  0946  00A5               	movwf	??___ftpack
 13668  0947  0825               	movf	??___ftpack,w
 13669  0948  07A3               	addwf	___ftpack@exp,f
 13670  0949  3001               	movlw	1
 13671  094A  07A0               	addwf	___ftpack@arg,f
 13672  094B  3000               	movlw	0
 13673  094C  1803               	skipnc
 13674  094D  3001               	movlw	1
 13675  094E  07A1               	addwf	___ftpack@arg+1,f
 13676  094F  3000               	movlw	0
 13677  0950  1803               	skipnc
 13678  0951  3001               	movlw	1
 13679  0952  07A2               	addwf	___ftpack@arg+2,f
 13680  0953  3001               	movlw	1
 13681  0954                     u4025:	
 13682  0954  36A2               	lsrf	___ftpack@arg+2,f
 13683  0955  0CA1               	rrf	___ftpack@arg+1,f
 13684  0956  0CA0               	rrf	___ftpack@arg,f
 13685  0957  0B89               	decfsz	9,f
 13686  0958  2954               	goto	u4025
 13687  0959                     l3021:	
 13688  0959  30FF               	movlw	255
 13689  095A  0522               	andwf	___ftpack@arg+2,w
 13690  095B  1903               	btfsc	3,2
 13691  095C  2966               	goto	l5641
 13692  095D  2945               	goto	l5633
 13693  095E                     l5639:	
 13694  095E  3001               	movlw	1
 13695  095F  02A3               	subwf	___ftpack@exp,f
 13696  0960  3001               	movlw	1
 13697  0961                     u4045:	
 13698  0961  35A0               	lslf	___ftpack@arg,f
 13699  0962  0DA1               	rlf	___ftpack@arg+1,f
 13700  0963  0DA2               	rlf	___ftpack@arg+2,f
 13701  0964  0B89               	decfsz	9,f
 13702  0965  2961               	goto	u4045
 13703  0966                     l5641:	
 13704  0966  1FA1               	btfss	___ftpack@arg+1,7
 13705  0967  295E               	goto	l5639
 13706  0968  1823               	btfsc	___ftpack@exp,0
 13707  0969  2970               	goto	l3027
 13708  096A  30FF               	movlw	255
 13709  096B  05A0               	andwf	___ftpack@arg,f
 13710  096C  307F               	movlw	127
 13711  096D  05A1               	andwf	___ftpack@arg+1,f
 13712  096E  30FF               	movlw	255
 13713  096F  05A2               	andwf	___ftpack@arg+2,f
 13714  0970                     l3027:	
 13715  0970  1003               	clrc
 13716  0971  0CA3               	rrf	___ftpack@exp,f
 13717  0972  0823               	movf	___ftpack@exp,w
 13718  0973  00A5               	movwf	??___ftpack
 13719  0974  01A6               	clrf	??___ftpack+1
 13720  0975  01A7               	clrf	??___ftpack+2
 13721  0976  3010               	movlw	16
 13722  0977                     u4075:	
 13723  0977  35A5               	lslf	??___ftpack,f
 13724  0978  0DA6               	rlf	??___ftpack+1,f
 13725  0979  0DA7               	rlf	??___ftpack+2,f
 13726  097A  0B89               	decfsz	9,f
 13727  097B  2977               	goto	u4075
 13728  097C  0825               	movf	??___ftpack,w
 13729  097D  04A0               	iorwf	___ftpack@arg,f
 13730  097E  0826               	movf	??___ftpack+1,w
 13731  097F  04A1               	iorwf	___ftpack@arg+1,f
 13732  0980  0827               	movf	??___ftpack+2,w
 13733  0981  04A2               	iorwf	___ftpack@arg+2,f
 13734  0982  0824               	movf	___ftpack@sign,w
 13735  0983  1903               	btfsc	3,2
 13736  0984  0008               	return
 13737  0985  17A2               	bsf	___ftpack@arg+2,7
 13738  0986  0008               	return
 13739  0987                     __end_of___ftpack:	
 13740                           
 13741                           	psect	text82
 13742  1EC6                     __ptext82:	
 13743 ;; *************** function _setRFSW_Status *****************
 13744 ;; Defined at:
 13745 ;;		line 439 in file "../src/RF_Control_B1.c"
 13746 ;; Parameters:    Size  Location     Type
 13747 ;;  sw              1    wreg     unsigned char 
 13748 ;;  command         1    2[BANK0 ] unsigned char 
 13749 ;; Auto vars:     Size  Location     Type
 13750 ;;  sw              1    3[BANK0 ] unsigned char 
 13751 ;; Return value:  Size  Location     Type
 13752 ;;		None               void
 13753 ;; Registers used:
 13754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13755 ;; Tracked objects:
 13756 ;;		On entry : 0/0
 13757 ;;		On exit  : 0/0
 13758 ;;		Unchanged: 0/0
 13759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13760 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13763 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;Total ram usage:        2 bytes
 13765 ;; Hardware stack levels used:    1
 13766 ;; Hardware stack levels required when called:    6
 13767 ;; This function calls:
 13768 ;;		_RfSWPointSelect
 13769 ;; This function is called by:
 13770 ;;		_DlyOff_Main
 13771 ;;		_setControl_Lights_Table
 13772 ;;		_Sw_DimmerOnFunc
 13773 ;;		_Sw_DimmerAdjFunc
 13774 ;;		_setDimmerLights_ERROR
 13775 ;; This function uses a non-reentrant model
 13776 ;;
 13777                           
 13778                           
 13779                           ;psect for function _setRFSW_Status
 13780  1EC6                     _setRFSW_Status:	
 13781                           
 13782                           ;incstack = 0
 13783                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13784                           ;setRFSW_Status@sw stored from wreg
 13785  1EC6  0020               	movlb	0	; select bank0
 13786  1EC7  00A3               	movwf	setRFSW_Status@sw
 13787                           
 13788                           ;RF_Control_B1.c: 440: RfSWPointSelect(sw);
 13789  1EC8  0823               	movf	setRFSW_Status@sw,w
 13790  1EC9  3192  221C         	fcall	_RfSWPointSelect
 13791                           
 13792                           ;RF_Control_B1.c: 441: RFSW->Status = command;
 13793  1ECB  0021               	movlb	1	; select bank1
 13794  1ECC  0850               	movf	_RFSW^(0+128),w
 13795  1ECD  0086               	movwf	6
 13796  1ECE  0187               	clrf	7
 13797  1ECF  0020               	movlb	0	; select bank0
 13798  1ED0  0822               	movf	setRFSW_Status@command,w
 13799  1ED1  1001               	bcf	1,0
 13800  1ED2  1D03               	skipz
 13801  1ED3  1401               	bsf	1,0
 13802  1ED4  0008               	return
 13803  1ED5                     __end_of_setRFSW_Status:	
 13804                           
 13805                           	psect	text83
 13806  121C                     __ptext83:	
 13807 ;; *************** function _RfSWPointSelect *****************
 13808 ;; Defined at:
 13809 ;;		line 374 in file "../src/RF_Control_B1.c"
 13810 ;; Parameters:    Size  Location     Type
 13811 ;;  sw              1    wreg     unsigned char 
 13812 ;; Auto vars:     Size  Location     Type
 13813 ;;  sw              1    1[BANK0 ] unsigned char 
 13814 ;; Return value:  Size  Location     Type
 13815 ;;		None               void
 13816 ;; Registers used:
 13817 ;;		wreg
 13818 ;; Tracked objects:
 13819 ;;		On entry : 0/0
 13820 ;;		On exit  : 0/0
 13821 ;;		Unchanged: 0/0
 13822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;Total ram usage:        2 bytes
 13828 ;; Hardware stack levels used:    1
 13829 ;; Hardware stack levels required when called:    5
 13830 ;; This function calls:
 13831 ;;		Nothing
 13832 ;; This function is called by:
 13833 ;;		_setRFSW_Control
 13834 ;;		_setRFSW_AdjControl
 13835 ;;		_setRFSW_Status
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           
 13840                           ;psect for function _RfSWPointSelect
 13841  121C                     _RfSWPointSelect:	
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in _RfSWPointSelect: [wreg]
 13845                           ;RfSWPointSelect@sw stored from wreg
 13846  121C  0020               	movlb	0	; select bank0
 13847  121D  00A1               	movwf	RfSWPointSelect@sw
 13848                           
 13849                           ;RF_Control_B1.c: 376: if (sw == 1) {
 13850  121E  0821               	movf	RfSWPointSelect@sw,w
 13851  121F  3A01               	xorlw	1
 13852  1220  1D03               	skipz
 13853  1221  2A27               	goto	l2287
 13854                           
 13855                           ;RF_Control_B1.c: 377: RFSW = &RFSW1;
 13856  1222  30ED               	movlw	_RFSW1& (0+255)
 13857  1223  00A0               	movwf	??_RfSWPointSelect
 13858  1224  0820               	movf	??_RfSWPointSelect,w
 13859  1225  0021               	movlb	1	; select bank1
 13860  1226  00D0               	movwf	_RFSW^(0+128)
 13861  1227                     l2287:	
 13862                           
 13863                           ;RF_Control_B1.c: 378: }
 13864                           ;RF_Control_B1.c: 381: if (sw == 2) {
 13865  1227  0020               	movlb	0	; select bank0
 13866  1228  0821               	movf	RfSWPointSelect@sw,w
 13867  1229  3A02               	xorlw	2
 13868  122A  1D03               	skipz
 13869  122B  2A31               	goto	l2288
 13870                           
 13871                           ;RF_Control_B1.c: 382: RFSW = &RFSW2;
 13872  122C  30EE               	movlw	_RFSW2& (0+255)
 13873  122D  00A0               	movwf	??_RfSWPointSelect
 13874  122E  0820               	movf	??_RfSWPointSelect,w
 13875  122F  0021               	movlb	1	; select bank1
 13876  1230  00D0               	movwf	_RFSW^(0+128)
 13877  1231                     l2288:	
 13878                           
 13879                           ;RF_Control_B1.c: 383: }
 13880                           ;RF_Control_B1.c: 386: if (sw == 3) {
 13881  1231  0020               	movlb	0	; select bank0
 13882  1232  0821               	movf	RfSWPointSelect@sw,w
 13883  1233  3A03               	xorlw	3
 13884  1234  1D03               	skipz
 13885  1235  0008               	return
 13886                           
 13887                           ;RF_Control_B1.c: 387: RFSW = &RFSW3;
 13888  1236  30EF               	movlw	_RFSW3& (0+255)
 13889  1237  00A0               	movwf	??_RfSWPointSelect
 13890  1238  0820               	movf	??_RfSWPointSelect,w
 13891  1239  0021               	movlb	1	; select bank1
 13892  123A  00D0               	movwf	_RFSW^(0+128)
 13893  123B  0008               	return
 13894  123C                     __end_of_RfSWPointSelect:	
 13895                           
 13896                           	psect	text84
 13897  1F21                     __ptext84:	
 13898 ;; *************** function _setDimmerLights_Trigger *****************
 13899 ;; Defined at:
 13900 ;;		line 716 in file "../src/Dimmer_B1.c"
 13901 ;; Parameters:    Size  Location     Type
 13902 ;;  lights          1    wreg     unsigned char 
 13903 ;;  command         1    2[BANK0 ] unsigned char 
 13904 ;; Auto vars:     Size  Location     Type
 13905 ;;  lights          1    3[BANK0 ] unsigned char 
 13906 ;; Return value:  Size  Location     Type
 13907 ;;		None               void
 13908 ;; Registers used:
 13909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13910 ;; Tracked objects:
 13911 ;;		On entry : 0/0
 13912 ;;		On exit  : 0/0
 13913 ;;		Unchanged: 0/0
 13914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13915 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13916 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;Total ram usage:        2 bytes
 13920 ;; Hardware stack levels used:    1
 13921 ;; Hardware stack levels required when called:    6
 13922 ;; This function calls:
 13923 ;;		_DimmerLightsPointSelect
 13924 ;; This function is called by:
 13925 ;;		_DlyOff_Main
 13926 ;;		_setRFSW_Control
 13927 ;;		_Sw_DimmerOnFunc
 13928 ;;		_Sw_DimmerOffFunc
 13929 ;; This function uses a non-reentrant model
 13930 ;;
 13931                           
 13932                           
 13933                           ;psect for function _setDimmerLights_Trigger
 13934  1F21                     _setDimmerLights_Trigger:	
 13935                           
 13936                           ;incstack = 0
 13937                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13938                           ;setDimmerLights_Trigger@lights stored from wreg
 13939  1F21  0020               	movlb	0	; select bank0
 13940  1F22  00A3               	movwf	setDimmerLights_Trigger@lights
 13941                           
 13942                           ;Dimmer_B1.c: 718: DimmerLightsPointSelect(lights);
 13943  1F23  0823               	movf	setDimmerLights_Trigger@lights,w
 13944  1F24  3191  2131         	fcall	_DimmerLightsPointSelect
 13945                           
 13946                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = command;
 13947  1F26  0874               	movf	_DimmerLights,w
 13948  1F27  3E08               	addlw	8
 13949  1F28  0086               	movwf	6
 13950  1F29  3001               	movlw	1	; select bank2/3
 13951  1F2A  0087               	movwf	7
 13952  1F2B  0020               	movlb	0	; select bank0
 13953  1F2C  0822               	movf	setDimmerLights_Trigger@command,w
 13954  1F2D  1101               	bcf	1,2
 13955  1F2E  1D03               	skipz
 13956  1F2F  1501               	bsf	1,2
 13957  1F30  0008               	return
 13958  1F31                     __end_of_setDimmerLights_Trigger:	
 13959                           
 13960                           	psect	text85
 13961  1F11                     __ptext85:	
 13962 ;; *************** function _setDimmerLights_Switch *****************
 13963 ;; Defined at:
 13964 ;;		line 704 in file "../src/Dimmer_B1.c"
 13965 ;; Parameters:    Size  Location     Type
 13966 ;;  lights          1    wreg     unsigned char 
 13967 ;;  command         1    2[BANK0 ] unsigned char 
 13968 ;; Auto vars:     Size  Location     Type
 13969 ;;  lights          1    3[BANK0 ] unsigned char 
 13970 ;; Return value:  Size  Location     Type
 13971 ;;		None               void
 13972 ;; Registers used:
 13973 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13974 ;; Tracked objects:
 13975 ;;		On entry : 0/0
 13976 ;;		On exit  : 0/0
 13977 ;;		Unchanged: 0/0
 13978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13979 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13982 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;Total ram usage:        2 bytes
 13984 ;; Hardware stack levels used:    1
 13985 ;; Hardware stack levels required when called:    6
 13986 ;; This function calls:
 13987 ;;		_DimmerLightsPointSelect
 13988 ;; This function is called by:
 13989 ;;		_DlyOff_Main
 13990 ;;		_setRFSW_Control
 13991 ;;		_Sw_DimmerOnFunc
 13992 ;;		_Sw_DimmerOffFunc
 13993 ;; This function uses a non-reentrant model
 13994 ;;
 13995                           
 13996                           
 13997                           ;psect for function _setDimmerLights_Switch
 13998  1F11                     _setDimmerLights_Switch:	
 13999                           
 14000                           ;incstack = 0
 14001                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14002                           ;setDimmerLights_Switch@lights stored from wreg
 14003  1F11  0020               	movlb	0	; select bank0
 14004  1F12  00A3               	movwf	setDimmerLights_Switch@lights
 14005                           
 14006                           ;Dimmer_B1.c: 706: DimmerLightsPointSelect(lights);
 14007  1F13  0823               	movf	setDimmerLights_Switch@lights,w
 14008  1F14  3191  2131         	fcall	_DimmerLightsPointSelect
 14009                           
 14010                           ;Dimmer_B1.c: 707: DimmerLights->Switch = command;
 14011  1F16  0874               	movf	_DimmerLights,w
 14012  1F17  3E08               	addlw	8
 14013  1F18  0086               	movwf	6
 14014  1F19  3001               	movlw	1	; select bank2/3
 14015  1F1A  0087               	movwf	7
 14016  1F1B  0020               	movlb	0	; select bank0
 14017  1F1C  0822               	movf	setDimmerLights_Switch@command,w
 14018  1F1D  1081               	bcf	1,1
 14019  1F1E  1D03               	skipz
 14020  1F1F  1481               	bsf	1,1
 14021  1F20  0008               	return
 14022  1F21                     __end_of_setDimmerLights_Switch:	
 14023                           
 14024                           	psect	text86
 14025  1131                     __ptext86:	
 14026 ;; *************** function _DimmerLightsPointSelect *****************
 14027 ;; Defined at:
 14028 ;;		line 326 in file "../src/Dimmer_B1.c"
 14029 ;; Parameters:    Size  Location     Type
 14030 ;;  lights          1    wreg     unsigned char 
 14031 ;; Auto vars:     Size  Location     Type
 14032 ;;  lights          1    1[BANK0 ] unsigned char 
 14033 ;; Return value:  Size  Location     Type
 14034 ;;		None               void
 14035 ;; Registers used:
 14036 ;;		wreg
 14037 ;; Tracked objects:
 14038 ;;		On entry : 0/0
 14039 ;;		On exit  : 0/0
 14040 ;;		Unchanged: 0/0
 14041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14045 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;Total ram usage:        2 bytes
 14047 ;; Hardware stack levels used:    1
 14048 ;; Hardware stack levels required when called:    5
 14049 ;; This function calls:
 14050 ;;		Nothing
 14051 ;; This function is called by:
 14052 ;;		_setDimmerLights_Initialization
 14053 ;;		_setDimmerLights_Main
 14054 ;;		_setDimmerLights
 14055 ;;		_setDimmerLights_Adj
 14056 ;;		_setDimmerLights_AdjRF
 14057 ;;		_setDimmerLights_Switch
 14058 ;;		_setDimmerLights_AdjGo
 14059 ;;		_setDimmerLights_Trigger
 14060 ;;		_setDimmerLights_TriggerAdj
 14061 ;;		_setDimmerLights_ERROR
 14062 ;;		_setDimmerLights_TriggerERROR
 14063 ;;		_setDimmerLights_GO
 14064 ;;		_setDimmerLights_MaxmumValue
 14065 ;;		_setDimmerLights_Clear
 14066 ;; This function uses a non-reentrant model
 14067 ;;
 14068                           
 14069                           
 14070                           ;psect for function _DimmerLightsPointSelect
 14071  1131                     _DimmerLightsPointSelect:	
 14072                           
 14073                           ;incstack = 0
 14074                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 14075                           ;DimmerLightsPointSelect@lights stored from wreg
 14076  1131  0020               	movlb	0	; select bank0
 14077  1132  00A1               	movwf	DimmerLightsPointSelect@lights
 14078                           
 14079                           ;Dimmer_B1.c: 328: if (lights == 1) {
 14080  1133  0821               	movf	DimmerLightsPointSelect@lights,w
 14081  1134  3A01               	xorlw	1
 14082  1135  1D03               	skipz
 14083  1136  293B               	goto	l870
 14084                           
 14085                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 14086  1137  303D               	movlw	_DimmerLights1& (0+255)
 14087  1138  00A0               	movwf	??_DimmerLightsPointSelect
 14088  1139  0820               	movf	??_DimmerLightsPointSelect,w
 14089  113A  00F4               	movwf	_DimmerLights
 14090  113B                     l870:	
 14091                           
 14092                           ;Dimmer_B1.c: 330: }
 14093                           ;Dimmer_B1.c: 333: if (lights == 2) {
 14094  113B  0821               	movf	DimmerLightsPointSelect@lights,w
 14095  113C  3A02               	xorlw	2
 14096  113D  1D03               	skipz
 14097  113E  2943               	goto	l871
 14098                           
 14099                           ;Dimmer_B1.c: 334: DimmerLights = &DimmerLights2;
 14100  113F  304C               	movlw	_DimmerLights2& (0+255)
 14101  1140  00A0               	movwf	??_DimmerLightsPointSelect
 14102  1141  0820               	movf	??_DimmerLightsPointSelect,w
 14103  1142  00F4               	movwf	_DimmerLights
 14104  1143                     l871:	
 14105                           
 14106                           ;Dimmer_B1.c: 335: }
 14107                           ;Dimmer_B1.c: 338: if (lights == 3) {
 14108  1143  0821               	movf	DimmerLightsPointSelect@lights,w
 14109  1144  3A03               	xorlw	3
 14110  1145  1D03               	skipz
 14111  1146  0008               	return
 14112                           
 14113                           ;Dimmer_B1.c: 339: DimmerLights = &DimmerLights3;
 14114  1147  305B               	movlw	_DimmerLights3& (0+255)
 14115  1148  00A0               	movwf	??_DimmerLightsPointSelect
 14116  1149  0820               	movf	??_DimmerLightsPointSelect,w
 14117  114A  00F4               	movwf	_DimmerLights
 14118  114B  0008               	return
 14119  114C                     __end_of_DimmerLightsPointSelect:	
 14120                           
 14121                           	psect	text87
 14122  17A7                     __ptext87:	
 14123 ;; *************** function _setBuz *****************
 14124 ;; Defined at:
 14125 ;;		line 22 in file "../src/Buzzer_B1.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;  count           1    wreg     unsigned char 
 14128 ;;  time            2    9[BANK0 ] int 
 14129 ;; Auto vars:     Size  Location     Type
 14130 ;;  count           1   12[BANK0 ] unsigned char 
 14131 ;; Return value:  Size  Location     Type
 14132 ;;		None               void
 14133 ;; Registers used:
 14134 ;;		wreg, status,2, status,0, pclath, cstack
 14135 ;; Tracked objects:
 14136 ;;		On entry : 0/0
 14137 ;;		On exit  : 0/0
 14138 ;;		Unchanged: 0/0
 14139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14140 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14143 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;Total ram usage:        4 bytes
 14145 ;; Hardware stack levels used:    1
 14146 ;; Hardware stack levels required when called:    6
 14147 ;; This function calls:
 14148 ;;		___awdiv
 14149 ;; This function is called by:
 14150 ;;		_DlyOff_Main
 14151 ;;		_setDimmerLights_Main
 14152 ;;		_my_MainTime
 14153 ;;		_setLog_Code
 14154 ;;		_setControl_Lights_Table
 14155 ;;		_setRFSW_Control
 14156 ;;		_setSw_Main
 14157 ;;		_Sw_DimmerOnFunc
 14158 ;;		_DimmerLights_Exceptions
 14159 ;; This function uses a non-reentrant model
 14160 ;;
 14161                           
 14162                           
 14163                           ;psect for function _setBuz
 14164  17A7                     _setBuz:	
 14165                           
 14166                           ;incstack = 0
 14167                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14168                           ;setBuz@count stored from wreg
 14169  17A7  0020               	movlb	0	; select bank0
 14170  17A8  00AC               	movwf	setBuz@count
 14171                           
 14172                           ;Buzzer_B1.c: 23: time /= 10;
 14173  17A9  300A               	movlw	10
 14174  17AA  00A0               	movwf	___awdiv@divisor
 14175  17AB  3000               	movlw	0
 14176  17AC  00A1               	movwf	___awdiv@divisor+1
 14177  17AD  082A               	movf	setBuz@time+1,w
 14178  17AE  01A3               	clrf	___awdiv@dividend+1
 14179  17AF  07A3               	addwf	___awdiv@dividend+1,f
 14180  17B0  0829               	movf	setBuz@time,w
 14181  17B1  01A2               	clrf	___awdiv@dividend
 14182  17B2  07A2               	addwf	___awdiv@dividend,f
 14183  17B3  3197  2753  3197   	fcall	___awdiv
 14184  17B6  0020               	movlb	0	; select bank0
 14185  17B7  0821               	movf	?___awdiv+1,w
 14186  17B8  01AA               	clrf	setBuz@time+1
 14187  17B9  07AA               	addwf	setBuz@time+1,f
 14188  17BA  0820               	movf	?___awdiv,w
 14189  17BB  01A9               	clrf	setBuz@time
 14190  17BC  07A9               	addwf	setBuz@time,f
 14191                           
 14192                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14193  17BD  0021               	movlb	1	; select bank1
 14194  17BE  1C32               	btfss	_Buz1^(0+128),0
 14195  17BF  0008               	return
 14196                           
 14197                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14198  17C0  18B2               	btfsc	_Buz1^(0+128),1
 14199  17C1  2FD8               	goto	l110
 14200                           
 14201                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14202  17C2  14B2               	bsf	_Buz1^(0+128),1
 14203                           
 14204                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14205  17C3  01B3               	clrf	(_Buz1^(0+128)+1)
 14206  17C4  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 14207                           
 14208                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14209  17C5  0020               	movlb	0	; select bank0
 14210  17C6  082C               	movf	setBuz@count,w
 14211  17C7  00AB               	movwf	??_setBuz
 14212  17C8  082B               	movf	??_setBuz,w
 14213  17C9  0021               	movlb	1	; select bank1
 14214  17CA  00B5               	movwf	(_Buz1^(0+128)+3)
 14215                           
 14216                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14217  17CB  0020               	movlb	0	; select bank0
 14218  17CC  082A               	movf	setBuz@time+1,w
 14219  17CD  0021               	movlb	1	; select bank1
 14220  17CE  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 14221  17CF  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 14222  17D0  0020               	movlb	0	; select bank0
 14223  17D1  0829               	movf	setBuz@time,w
 14224  17D2  0021               	movlb	1	; select bank1
 14225  17D3  01B8               	clrf	(_Buz1^(0+128)+6)
 14226  17D4  07B8               	addwf	(_Buz1^(0+128)+6),f
 14227                           
 14228                           ;Buzzer_B1.c: 30: RB3 = 1;
 14229  17D5  0020               	movlb	0	; select bank0
 14230  17D6  158D               	bsf	13,3	;volatile
 14231                           
 14232                           ;Buzzer_B1.c: 31: } else {
 14233  17D7  0008               	return
 14234  17D8                     l110:	
 14235                           
 14236                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14237  17D8  19B2               	btfsc	_Buz1^(0+128),3
 14238  17D9  2FEC               	goto	l112
 14239                           
 14240                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14241  17DA  15B2               	bsf	_Buz1^(0+128),3
 14242                           
 14243                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14244  17DB  0020               	movlb	0	; select bank0
 14245  17DC  082C               	movf	setBuz@count,w
 14246  17DD  00AB               	movwf	??_setBuz
 14247  17DE  082B               	movf	??_setBuz,w
 14248  17DF  0021               	movlb	1	; select bank1
 14249  17E0  00B6               	movwf	(_Buz1^(0+128)+4)
 14250                           
 14251                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14252  17E1  0020               	movlb	0	; select bank0
 14253  17E2  082A               	movf	setBuz@time+1,w
 14254  17E3  0021               	movlb	1	; select bank1
 14255  17E4  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 14256  17E5  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 14257  17E6  0020               	movlb	0	; select bank0
 14258  17E7  0829               	movf	setBuz@time,w
 14259  17E8  0021               	movlb	1	; select bank1
 14260  17E9  01BA               	clrf	(_Buz1^(0+128)+8)
 14261  17EA  07BA               	addwf	(_Buz1^(0+128)+8),f
 14262                           
 14263                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14264  17EB  0008               	return
 14265  17EC                     l112:	
 14266  17EC  1A32               	btfsc	_Buz1^(0+128),4
 14267  17ED  0008               	return
 14268                           
 14269                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14270  17EE  1632               	bsf	_Buz1^(0+128),4
 14271                           
 14272                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14273  17EF  0020               	movlb	0	; select bank0
 14274  17F0  082C               	movf	setBuz@count,w
 14275  17F1  00AB               	movwf	??_setBuz
 14276  17F2  082B               	movf	??_setBuz,w
 14277  17F3  0021               	movlb	1	; select bank1
 14278  17F4  00B7               	movwf	(_Buz1^(0+128)+5)
 14279                           
 14280                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14281  17F5  0020               	movlb	0	; select bank0
 14282  17F6  082A               	movf	setBuz@time+1,w
 14283  17F7  0021               	movlb	1	; select bank1
 14284  17F8  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 14285  17F9  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 14286  17FA  0020               	movlb	0	; select bank0
 14287  17FB  0829               	movf	setBuz@time,w
 14288  17FC  0021               	movlb	1	; select bank1
 14289  17FD  01BC               	clrf	(_Buz1^(0+128)+10)
 14290  17FE  07BC               	addwf	(_Buz1^(0+128)+10),f
 14291  17FF  0008               	return
 14292  1800                     __end_of_setBuz:	
 14293                           
 14294                           	psect	text88
 14295  1753                     __ptext88:	
 14296 ;; *************** function ___awdiv *****************
 14297 ;; Defined at:
 14298 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14299 ;; Parameters:    Size  Location     Type
 14300 ;;  divisor         2    0[BANK0 ] int 
 14301 ;;  dividend        2    2[BANK0 ] int 
 14302 ;; Auto vars:     Size  Location     Type
 14303 ;;  quotient        2    7[BANK0 ] int 
 14304 ;;  sign            1    6[BANK0 ] unsigned char 
 14305 ;;  counter         1    5[BANK0 ] unsigned char 
 14306 ;; Return value:  Size  Location     Type
 14307 ;;                  2    0[BANK0 ] int 
 14308 ;; Registers used:
 14309 ;;		wreg, status,2, status,0
 14310 ;; Tracked objects:
 14311 ;;		On entry : 0/0
 14312 ;;		On exit  : 0/0
 14313 ;;		Unchanged: 0/0
 14314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14315 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;Total ram usage:        9 bytes
 14320 ;; Hardware stack levels used:    1
 14321 ;; Hardware stack levels required when called:    5
 14322 ;; This function calls:
 14323 ;;		Nothing
 14324 ;; This function is called by:
 14325 ;;		_setBuz
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           
 14330                           ;psect for function ___awdiv
 14331  1753                     ___awdiv:	
 14332                           
 14333                           ;incstack = 0
 14334                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14335  1753  0020               	movlb	0	; select bank0
 14336  1754  01A6               	clrf	___awdiv@sign
 14337  1755  1FA1               	btfss	___awdiv@divisor+1,7
 14338  1756  2F5E               	goto	l8121
 14339  1757  09A0               	comf	___awdiv@divisor,f
 14340  1758  09A1               	comf	___awdiv@divisor+1,f
 14341  1759  0AA0               	incf	___awdiv@divisor,f
 14342  175A  1903               	skipnz
 14343  175B  0AA1               	incf	___awdiv@divisor+1,f
 14344  175C  01A6               	clrf	___awdiv@sign
 14345  175D  0AA6               	incf	___awdiv@sign,f
 14346  175E                     l8121:	
 14347  175E  1FA3               	btfss	___awdiv@dividend+1,7
 14348  175F  2F69               	goto	l8127
 14349  1760  09A2               	comf	___awdiv@dividend,f
 14350  1761  09A3               	comf	___awdiv@dividend+1,f
 14351  1762  0AA2               	incf	___awdiv@dividend,f
 14352  1763  1903               	skipnz
 14353  1764  0AA3               	incf	___awdiv@dividend+1,f
 14354  1765  3001               	movlw	1
 14355  1766  00A4               	movwf	??___awdiv
 14356  1767  0824               	movf	??___awdiv,w
 14357  1768  06A6               	xorwf	___awdiv@sign,f
 14358  1769                     l8127:	
 14359  1769  01A7               	clrf	___awdiv@quotient
 14360  176A  01A8               	clrf	___awdiv@quotient+1
 14361  176B  0821               	movf	___awdiv@divisor+1,w
 14362  176C  0420               	iorwf	___awdiv@divisor,w
 14363  176D  1903               	skipnz
 14364  176E  2F98               	goto	l8149
 14365  176F  01A5               	clrf	___awdiv@counter
 14366  1770  0AA5               	incf	___awdiv@counter,f
 14367  1771                     l8137:	
 14368  1771  1BA1               	btfsc	___awdiv@divisor+1,7
 14369  1772  2F7D               	goto	l8139
 14370  1773  3001               	movlw	1
 14371  1774                     u8165:	
 14372  1774  35A0               	lslf	___awdiv@divisor,f
 14373  1775  0DA1               	rlf	___awdiv@divisor+1,f
 14374  1776  0B89               	decfsz	9,f
 14375  1777  2F74               	goto	u8165
 14376  1778  3001               	movlw	1
 14377  1779  00A4               	movwf	??___awdiv
 14378  177A  0824               	movf	??___awdiv,w
 14379  177B  07A5               	addwf	___awdiv@counter,f
 14380  177C  2F71               	goto	l8137
 14381  177D                     l8139:	
 14382  177D  3001               	movlw	1
 14383  177E                     u8185:	
 14384  177E  35A7               	lslf	___awdiv@quotient,f
 14385  177F  0DA8               	rlf	___awdiv@quotient+1,f
 14386  1780  0B89               	decfsz	9,f
 14387  1781  2F7E               	goto	u8185
 14388  1782  0821               	movf	___awdiv@divisor+1,w
 14389  1783  0223               	subwf	___awdiv@dividend+1,w
 14390  1784  1D03               	skipz
 14391  1785  2F88               	goto	u8195
 14392  1786  0820               	movf	___awdiv@divisor,w
 14393  1787  0222               	subwf	___awdiv@dividend,w
 14394  1788                     u8195:	
 14395  1788  1C03               	skipc
 14396  1789  2F8F               	goto	l8145
 14397  178A  0820               	movf	___awdiv@divisor,w
 14398  178B  02A2               	subwf	___awdiv@dividend,f
 14399  178C  0821               	movf	___awdiv@divisor+1,w
 14400  178D  3BA3               	subwfb	___awdiv@dividend+1,f
 14401  178E  1427               	bsf	___awdiv@quotient,0
 14402  178F                     l8145:	
 14403  178F  3001               	movlw	1
 14404  1790                     u8205:	
 14405  1790  36A1               	lsrf	___awdiv@divisor+1,f
 14406  1791  0CA0               	rrf	___awdiv@divisor,f
 14407  1792  0B89               	decfsz	9,f
 14408  1793  2F90               	goto	u8205
 14409  1794  3001               	movlw	1
 14410  1795  02A5               	subwf	___awdiv@counter,f
 14411  1796  1D03               	btfss	3,2
 14412  1797  2F7D               	goto	l8139
 14413  1798                     l8149:	
 14414  1798  0826               	movf	___awdiv@sign,w
 14415  1799  1903               	btfsc	3,2
 14416  179A  2FA0               	goto	l8153
 14417  179B  09A7               	comf	___awdiv@quotient,f
 14418  179C  09A8               	comf	___awdiv@quotient+1,f
 14419  179D  0AA7               	incf	___awdiv@quotient,f
 14420  179E  1903               	skipnz
 14421  179F  0AA8               	incf	___awdiv@quotient+1,f
 14422  17A0                     l8153:	
 14423  17A0  0828               	movf	___awdiv@quotient+1,w
 14424  17A1  01A1               	clrf	?___awdiv+1
 14425  17A2  07A1               	addwf	?___awdiv+1,f
 14426  17A3  0827               	movf	___awdiv@quotient,w
 14427  17A4  01A0               	clrf	?___awdiv
 14428  17A5  07A0               	addwf	?___awdiv,f
 14429  17A6  0008               	return
 14430  17A7                     __end_of___awdiv:	
 14431                           
 14432                           	psect	text89
 14433  1E79                     __ptext89:	
 14434 ;; *************** function _DelayOff_Initialization *****************
 14435 ;; Defined at:
 14436 ;;		line 26 in file "../src/DelayOff_B1.c"
 14437 ;; Parameters:    Size  Location     Type
 14438 ;;		None
 14439 ;; Auto vars:     Size  Location     Type
 14440 ;;		None
 14441 ;; Return value:  Size  Location     Type
 14442 ;;		None               void
 14443 ;; Registers used:
 14444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14445 ;; Tracked objects:
 14446 ;;		On entry : 0/0
 14447 ;;		On exit  : 0/0
 14448 ;;		Unchanged: 0/0
 14449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;Total ram usage:        0 bytes
 14455 ;; Hardware stack levels used:    1
 14456 ;; Hardware stack levels required when called:    7
 14457 ;; This function calls:
 14458 ;;		_DlyOff_Initialization
 14459 ;; This function is called by:
 14460 ;;		_main
 14461 ;; This function uses a non-reentrant model
 14462 ;;
 14463                           
 14464                           
 14465                           ;psect for function _DelayOff_Initialization
 14466  1E79                     _DelayOff_Initialization:	
 14467                           
 14468                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14469                           
 14470                           ;incstack = 0
 14471                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14472  1E79  3001               	movlw	1
 14473  1E7A  319E  264C  319E   	fcall	_DlyOff_Initialization
 14474                           
 14475                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14476  1E7D  3002               	movlw	2
 14477  1E7E  319E  264C  319E   	fcall	_DlyOff_Initialization
 14478                           
 14479                           ;DelayOff_B1.c: 36: DlyOff_Initialization(3);
 14480  1E81  3003               	movlw	3
 14481  1E82  319E  264C         	fcall	_DlyOff_Initialization
 14482  1E84  0008               	return
 14483  1E85                     __end_of_DelayOff_Initialization:	
 14484                           
 14485                           	psect	text90
 14486  1E4C                     __ptext90:	
 14487 ;; *************** function _DlyOff_Initialization *****************
 14488 ;; Defined at:
 14489 ;;		line 56 in file "../src/DelayOff_B1.c"
 14490 ;; Parameters:    Size  Location     Type
 14491 ;;  sw              1    wreg     unsigned char 
 14492 ;; Auto vars:     Size  Location     Type
 14493 ;;  sw              1    2[BANK0 ] unsigned char 
 14494 ;; Return value:  Size  Location     Type
 14495 ;;		None               void
 14496 ;; Registers used:
 14497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14498 ;; Tracked objects:
 14499 ;;		On entry : 0/0
 14500 ;;		On exit  : 0/0
 14501 ;;		Unchanged: 0/0
 14502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14506 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14507 ;;Total ram usage:        1 bytes
 14508 ;; Hardware stack levels used:    1
 14509 ;; Hardware stack levels required when called:    6
 14510 ;; This function calls:
 14511 ;;		_DelayOffPointSelect
 14512 ;; This function is called by:
 14513 ;;		_DelayOff_Initialization
 14514 ;; This function uses a non-reentrant model
 14515 ;;
 14516                           
 14517                           
 14518                           ;psect for function _DlyOff_Initialization
 14519  1E4C                     _DlyOff_Initialization:	
 14520                           
 14521                           ;incstack = 0
 14522                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14523                           ;DlyOff_Initialization@sw stored from wreg
 14524  1E4C  0020               	movlb	0	; select bank0
 14525  1E4D  00A2               	movwf	DlyOff_Initialization@sw
 14526                           
 14527                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14528  1E4E  0822               	movf	DlyOff_Initialization@sw,w
 14529  1E4F  3191  2169         	fcall	_DelayOffPointSelect
 14530                           
 14531                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14532  1E51  0872               	movf	_DelayOff,w
 14533  1E52  0086               	movwf	6
 14534  1E53  0187               	clrf	7
 14535  1E54  1401               	bsf	1,0
 14536  1E55  0008               	return
 14537  1E56                     __end_of_DlyOff_Initialization:	
 14538                           
 14539                           	psect	text91
 14540  1169                     __ptext91:	
 14541 ;; *************** function _DelayOffPointSelect *****************
 14542 ;; Defined at:
 14543 ;;		line 7 in file "../src/DelayOff_B1.c"
 14544 ;; Parameters:    Size  Location     Type
 14545 ;;  sw              1    wreg     unsigned char 
 14546 ;; Auto vars:     Size  Location     Type
 14547 ;;  sw              1    1[BANK0 ] unsigned char 
 14548 ;; Return value:  Size  Location     Type
 14549 ;;		None               void
 14550 ;; Registers used:
 14551 ;;		wreg
 14552 ;; Tracked objects:
 14553 ;;		On entry : 0/0
 14554 ;;		On exit  : 0/0
 14555 ;;		Unchanged: 0/0
 14556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;Total ram usage:        2 bytes
 14562 ;; Hardware stack levels used:    1
 14563 ;; Hardware stack levels required when called:    5
 14564 ;; This function calls:
 14565 ;;		Nothing
 14566 ;; This function is called by:
 14567 ;;		_DlyOff_Initialization
 14568 ;;		_DlyOff_Main
 14569 ;;		_setDelayOff_GO
 14570 ;; This function uses a non-reentrant model
 14571 ;;
 14572                           
 14573                           
 14574                           ;psect for function _DelayOffPointSelect
 14575  1169                     _DelayOffPointSelect:	
 14576                           
 14577                           ;incstack = 0
 14578                           ; Regs used in _DelayOffPointSelect: [wreg]
 14579                           ;DelayOffPointSelect@sw stored from wreg
 14580  1169  0020               	movlb	0	; select bank0
 14581  116A  00A1               	movwf	DelayOffPointSelect@sw
 14582                           
 14583                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14584  116B  0821               	movf	DelayOffPointSelect@sw,w
 14585  116C  3A01               	xorlw	1
 14586  116D  1D03               	skipz
 14587  116E  2974               	goto	l8045
 14588                           
 14589                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14590  116F  30E7               	movlw	_DlySw1& (0+255)
 14591  1170  00A0               	movwf	??_DelayOffPointSelect
 14592  1171  0820               	movf	??_DelayOffPointSelect,w
 14593  1172  00F2               	movwf	_DelayOff
 14594                           
 14595                           ;DelayOff_B1.c: 11: }
 14596  1173  0008               	return
 14597  1174                     l8045:	
 14598                           
 14599                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14600  1174  0821               	movf	DelayOffPointSelect@sw,w
 14601  1175  3A02               	xorlw	2
 14602  1176  1D03               	skipz
 14603  1177  297D               	goto	l8049
 14604                           
 14605                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14606  1178  30E9               	movlw	_DlySw2& (0+255)
 14607  1179  00A0               	movwf	??_DelayOffPointSelect
 14608  117A  0820               	movf	??_DelayOffPointSelect,w
 14609  117B  00F2               	movwf	_DelayOff
 14610                           
 14611                           ;DelayOff_B1.c: 16: }
 14612  117C  0008               	return
 14613  117D                     l8049:	
 14614                           
 14615                           ;DelayOff_B1.c: 19: else if (sw == 3) {
 14616  117D  0821               	movf	DelayOffPointSelect@sw,w
 14617  117E  3A03               	xorlw	3
 14618  117F  1D03               	skipz
 14619  1180  0008               	return
 14620                           
 14621                           ;DelayOff_B1.c: 20: DelayOff = &DlySw3;
 14622  1181  30EB               	movlw	_DlySw3& (0+255)
 14623  1182  00A0               	movwf	??_DelayOffPointSelect
 14624  1183  0820               	movf	??_DelayOffPointSelect,w
 14625  1184  00F2               	movwf	_DelayOff
 14626  1185  0008               	return
 14627  1186                     __end_of_DelayOffPointSelect:	
 14628                           
 14629                           	psect	text92
 14630  1087                     __ptext92:	
 14631 ;; *************** function _CC2500_PowerOnInitial *****************
 14632 ;; Defined at:
 14633 ;;		line 128 in file "../src/CC2500_B1.c"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;		None
 14636 ;; Auto vars:     Size  Location     Type
 14637 ;;		None
 14638 ;; Return value:  Size  Location     Type
 14639 ;;		None               void
 14640 ;; Registers used:
 14641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14642 ;; Tracked objects:
 14643 ;;		On entry : 0/0
 14644 ;;		On exit  : 0/0
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14651 ;;Total ram usage:        0 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; Hardware stack levels required when called:    8
 14654 ;; This function calls:
 14655 ;;		_CC2500_ClearRXFIFO
 14656 ;;		_CC2500_ClearTXFIFO
 14657 ;;		_CC2500_FrequencyCabr
 14658 ;;		_CC2500_InitPATable
 14659 ;;		_CC2500_InitSetREG
 14660 ;;		_CC2500_PowerRST
 14661 ;;		_CC2500_SIDLEMode
 14662 ;; This function is called by:
 14663 ;;		_main
 14664 ;; This function uses a non-reentrant model
 14665 ;;
 14666                           
 14667                           
 14668                           ;psect for function _CC2500_PowerOnInitial
 14669  1087                     _CC2500_PowerOnInitial:	
 14670                           
 14671                           ;CC2500_B1.c: 129: CC2500_PowerRST();
 14672                           
 14673                           ;incstack = 0
 14674                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14675  1087  3195  25F0  3190   	fcall	_CC2500_PowerRST
 14676                           
 14677                           ;CC2500_B1.c: 130: CC2500_InitSetREG();
 14678  108A  3193  237F  3190   	fcall	_CC2500_InitSetREG
 14679                           
 14680                           ;CC2500_B1.c: 131: CC2500_InitPATable();
 14681  108D  3191  21DE  3190   	fcall	_CC2500_InitPATable
 14682                           
 14683                           ;CC2500_B1.c: 132: CC2500_ClearTXFIFO();
 14684  1090  319E  2605  3190   	fcall	_CC2500_ClearTXFIFO
 14685                           
 14686                           ;CC2500_B1.c: 133: CC2500_ClearRXFIFO();
 14687  1093  319E  2601  3190   	fcall	_CC2500_ClearRXFIFO
 14688                           
 14689                           ;CC2500_B1.c: 134: CC2500_FrequencyCabr();
 14690  1096  319E  266D  3190   	fcall	_CC2500_FrequencyCabr
 14691                           
 14692                           ;CC2500_B1.c: 135: CC2500_SIDLEMode();
 14693  1099  319E  2609         	fcall	_CC2500_SIDLEMode
 14694  109B  0008               	return
 14695  109C                     __end_of_CC2500_PowerOnInitial:	
 14696                           
 14697                           	psect	text93
 14698  1E09                     __ptext93:	
 14699 ;; *************** function _CC2500_SIDLEMode *****************
 14700 ;; Defined at:
 14701 ;;		line 218 in file "../src/CC2500_B1.c"
 14702 ;; Parameters:    Size  Location     Type
 14703 ;;		None
 14704 ;; Auto vars:     Size  Location     Type
 14705 ;;		None
 14706 ;; Return value:  Size  Location     Type
 14707 ;;		None               void
 14708 ;; Registers used:
 14709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14710 ;; Tracked objects:
 14711 ;;		On entry : 0/0
 14712 ;;		On exit  : 0/0
 14713 ;;		Unchanged: 0/0
 14714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;Total ram usage:        0 bytes
 14720 ;; Hardware stack levels used:    1
 14721 ;; Hardware stack levels required when called:    7
 14722 ;; This function calls:
 14723 ;;		_CC2500_WriteCommand
 14724 ;; This function is called by:
 14725 ;;		_CC2500_PowerOnInitial
 14726 ;; This function uses a non-reentrant model
 14727 ;;
 14728                           
 14729                           
 14730                           ;psect for function _CC2500_SIDLEMode
 14731  1E09                     _CC2500_SIDLEMode:	
 14732                           
 14733                           ;CC2500_B1.c: 219: CC2500_WriteCommand(0x36);
 14734                           
 14735                           ;incstack = 0
 14736                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14737  1E09  3036               	movlw	54
 14738  1E0A  3190  20FD         	fcall	_CC2500_WriteCommand
 14739  1E0C  0008               	return
 14740  1E0D                     __end_of_CC2500_SIDLEMode:	
 14741                           
 14742                           	psect	text94
 14743  15F0                     __ptext94:	
 14744 ;; *************** function _CC2500_PowerRST *****************
 14745 ;; Defined at:
 14746 ;;		line 141 in file "../src/CC2500_B1.c"
 14747 ;; Parameters:    Size  Location     Type
 14748 ;;		None
 14749 ;; Auto vars:     Size  Location     Type
 14750 ;;		None
 14751 ;; Return value:  Size  Location     Type
 14752 ;;		None               void
 14753 ;; Registers used:
 14754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14755 ;; Tracked objects:
 14756 ;;		On entry : 0/0
 14757 ;;		On exit  : 0/0
 14758 ;;		Unchanged: 0/0
 14759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14763 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;Total ram usage:        1 bytes
 14765 ;; Hardware stack levels used:    1
 14766 ;; Hardware stack levels required when called:    6
 14767 ;; This function calls:
 14768 ;;		_CC2500_WriteByte
 14769 ;;		_DelayTime_1us
 14770 ;;		_Timeout_Counter
 14771 ;;		_set_TimeoutCleared
 14772 ;; This function is called by:
 14773 ;;		_CC2500_PowerOnInitial
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           
 14778                           ;psect for function _CC2500_PowerRST
 14779  15F0                     _CC2500_PowerRST:	
 14780                           
 14781                           ;CC2500_B1.c: 142: RC1 = 0;
 14782                           
 14783                           ;incstack = 0
 14784                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14785  15F0  0020               	movlb	0	; select bank0
 14786  15F1  108E               	bcf	14,1	;volatile
 14787                           
 14788                           ;CC2500_B1.c: 143: RC0 = 0;
 14789  15F2  100E               	bcf	14,0	;volatile
 14790                           
 14791                           ;CC2500_B1.c: 144: RC4 = 1;
 14792  15F3  160E               	bsf	14,4	;volatile
 14793                           
 14794                           ;CC2500_B1.c: 145: DelayTime_1us(10);
 14795  15F4  300A               	movlw	10
 14796  15F5  00A0               	movwf	DelayTime_1us@count
 14797  15F6  3000               	movlw	0
 14798  15F7  00A1               	movwf	DelayTime_1us@count+1
 14799  15F8  3193  230A  3195   	fcall	_DelayTime_1us
 14800                           
 14801                           ;CC2500_B1.c: 146: RC4 = 0;
 14802  15FB  0020               	movlb	0	; select bank0
 14803  15FC  120E               	bcf	14,4	;volatile
 14804                           
 14805                           ;CC2500_B1.c: 147: DelayTime_1us(10);
 14806  15FD  300A               	movlw	10
 14807  15FE  00A0               	movwf	DelayTime_1us@count
 14808  15FF  3000               	movlw	0
 14809  1600  00A1               	movwf	DelayTime_1us@count+1
 14810  1601  3193  230A  3195   	fcall	_DelayTime_1us
 14811                           
 14812                           ;CC2500_B1.c: 148: RC4 = 1;
 14813  1604  0020               	movlb	0	; select bank0
 14814  1605  160E               	bsf	14,4	;volatile
 14815                           
 14816                           ;CC2500_B1.c: 149: DelayTime_1us(40);
 14817  1606  3028               	movlw	40
 14818  1607  00A0               	movwf	DelayTime_1us@count
 14819  1608  3000               	movlw	0
 14820  1609  00A1               	movwf	DelayTime_1us@count+1
 14821  160A  3193  230A  3195   	fcall	_DelayTime_1us
 14822                           
 14823                           ;CC2500_B1.c: 150: RC4 = 0;
 14824  160D  0020               	movlb	0	; select bank0
 14825  160E  120E               	bcf	14,4	;volatile
 14826                           
 14827                           ;CC2500_B1.c: 151: SPI0Buffer = 0x30;
 14828  160F  3030               	movlw	48
 14829  1610  00A6               	movwf	??_CC2500_PowerRST
 14830  1611  0826               	movf	??_CC2500_PowerRST,w
 14831  1612  0021               	movlb	1	; select bank1
 14832  1613  00D3               	movwf	_SPI0Buffer^(0+128)
 14833                           
 14834                           ;CC2500_B1.c: 152: while (RC2 == 1 && myMain.Timeout == 0) {
 14835  1614  2E18               	goto	l9043
 14836  1615                     l9041:	
 14837                           
 14838                           ;CC2500_B1.c: 153: Timeout_Counter();
 14839  1615  3190  2072  3195   	fcall	_Timeout_Counter
 14840  1618                     l9043:	
 14841  1618  0020               	movlb	0	; select bank0
 14842  1619  1D0E               	btfss	14,2	;volatile
 14843  161A  2E1E               	goto	l9047
 14844  161B  0021               	movlb	1	; select bank1
 14845  161C  1D2F               	btfss	(_myMain^(0+128)+15),2
 14846  161D  2E15               	goto	l9041
 14847  161E                     l9047:	
 14848                           
 14849                           ;CC2500_B1.c: 154: };
 14850                           ;CC2500_B1.c: 155: set_TimeoutCleared();
 14851  161E  319E  260D  3195   	fcall	_set_TimeoutCleared
 14852                           
 14853                           ;CC2500_B1.c: 156: CC2500_WriteByte();
 14854  1621  3190  20CA  3195   	fcall	_CC2500_WriteByte
 14855                           
 14856                           ;CC2500_B1.c: 157: while (RC2 == 1 && myMain.Timeout == 0) {
 14857  1624  2E28               	goto	l9053
 14858  1625                     l9051:	
 14859                           
 14860                           ;CC2500_B1.c: 158: Timeout_Counter();
 14861  1625  3190  2072  3195   	fcall	_Timeout_Counter
 14862  1628                     l9053:	
 14863  1628  0020               	movlb	0	; select bank0
 14864  1629  1D0E               	btfss	14,2	;volatile
 14865  162A  2E2E               	goto	l9057
 14866  162B  0021               	movlb	1	; select bank1
 14867  162C  1D2F               	btfss	(_myMain^(0+128)+15),2
 14868  162D  2E25               	goto	l9051
 14869  162E                     l9057:	
 14870                           
 14871                           ;CC2500_B1.c: 159: };
 14872                           ;CC2500_B1.c: 160: set_TimeoutCleared();
 14873  162E  319E  260D         	fcall	_set_TimeoutCleared
 14874                           
 14875                           ;CC2500_B1.c: 161: RC0 = 0;
 14876  1630  0020               	movlb	0	; select bank0
 14877  1631  100E               	bcf	14,0	;volatile
 14878                           
 14879                           ;CC2500_B1.c: 162: RC4 = 1;
 14880  1632  160E               	bsf	14,4	;volatile
 14881  1633  0008               	return
 14882  1634                     __end_of_CC2500_PowerRST:	
 14883                           
 14884                           	psect	text95
 14885  137F                     __ptext95:	
 14886 ;; *************** function _CC2500_InitSetREG *****************
 14887 ;; Defined at:
 14888 ;;		line 168 in file "../src/CC2500_B1.c"
 14889 ;; Parameters:    Size  Location     Type
 14890 ;;		None
 14891 ;; Auto vars:     Size  Location     Type
 14892 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14893 ;;  temp2           1    7[BANK0 ] unsigned char 
 14894 ;;  temp1           1    6[BANK0 ] unsigned char 
 14895 ;; Return value:  Size  Location     Type
 14896 ;;		None               void
 14897 ;; Registers used:
 14898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14899 ;; Tracked objects:
 14900 ;;		On entry : 0/0
 14901 ;;		On exit  : 0/0
 14902 ;;		Unchanged: 0/0
 14903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14905 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14907 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;Total ram usage:        4 bytes
 14909 ;; Hardware stack levels used:    1
 14910 ;; Hardware stack levels required when called:    7
 14911 ;; This function calls:
 14912 ;;		_CC2500_WriteREG
 14913 ;; This function is called by:
 14914 ;;		_CC2500_PowerOnInitial
 14915 ;; This function uses a non-reentrant model
 14916 ;;
 14917                           
 14918                           
 14919                           ;psect for function _CC2500_InitSetREG
 14920  137F                     _CC2500_InitSetREG:	
 14921                           
 14922                           ;CC2500_B1.c: 169: unsigned char loop_c;
 14923                           ;CC2500_B1.c: 170: unsigned char temp1, temp2;
 14924                           ;CC2500_B1.c: 172: for (loop_c = 0; loop_c < 47; loop_c++) {
 14925                           
 14926                           ;incstack = 0
 14927                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14928  137F  0020               	movlb	0	; select bank0
 14929  1380  01A8               	clrf	CC2500_InitSetREG@loop_c
 14930  1381                     L10:	
 14931  1381  302F               	movlw	47
 14932  1382  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14933  1383  1803               	btfsc	3,0
 14934  1384  0008               	return
 14935                           
 14936                           ;CC2500_B1.c: 173: temp1 = CC2500_registers_address[loop_c];
 14937  1385  0828               	movf	CC2500_InitSetREG@loop_c,w
 14938  1386  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14939  1387  0084               	movwf	4
 14940  1388  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14941  1389  1803               	skipnc
 14942  138A  3E01               	addlw	1
 14943  138B  0085               	movwf	5
 14944  138C  0800               	movf	0,w	;code access
 14945  138D  00A5               	movwf	??_CC2500_InitSetREG
 14946  138E  0825               	movf	??_CC2500_InitSetREG,w
 14947  138F  00A6               	movwf	CC2500_InitSetREG@temp1
 14948                           
 14949                           ;CC2500_B1.c: 174: temp2 = CC2500_rfSettings[loop_c];
 14950  1390  0828               	movf	CC2500_InitSetREG@loop_c,w
 14951  1391  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14952  1392  0084               	movwf	4
 14953  1393  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14954  1394  1803               	skipnc
 14955  1395  3E01               	addlw	1
 14956  1396  0085               	movwf	5
 14957  1397  0800               	movf	0,w	;code access
 14958  1398  00A5               	movwf	??_CC2500_InitSetREG
 14959  1399  0825               	movf	??_CC2500_InitSetREG,w
 14960  139A  00A7               	movwf	CC2500_InitSetREG@temp2
 14961                           
 14962                           ;CC2500_B1.c: 176: CC2500_WriteREG(temp1, temp2);
 14963  139B  0827               	movf	CC2500_InitSetREG@temp2,w
 14964  139C  00A5               	movwf	??_CC2500_InitSetREG
 14965  139D  0825               	movf	??_CC2500_InitSetREG,w
 14966  139E  00A2               	movwf	CC2500_WriteREG@value
 14967  139F  0826               	movf	CC2500_InitSetREG@temp1,w
 14968  13A0  3192  229F  3193   	fcall	_CC2500_WriteREG
 14969  13A3  3001               	movlw	1
 14970  13A4  0020               	movlb	0	; select bank0
 14971  13A5  00A5               	movwf	??_CC2500_InitSetREG
 14972  13A6  0825               	movf	??_CC2500_InitSetREG,w
 14973  13A7  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14974  13A8  2B81               	goto	L10
 14975  13A9                     __end_of_CC2500_InitSetREG:	
 14976                           
 14977                           	psect	text96
 14978  11DE                     __ptext96:	
 14979 ;; *************** function _CC2500_InitPATable *****************
 14980 ;; Defined at:
 14981 ;;		line 183 in file "../src/CC2500_B1.c"
 14982 ;; Parameters:    Size  Location     Type
 14983 ;;		None
 14984 ;; Auto vars:     Size  Location     Type
 14985 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14986 ;;  temp            1    6[BANK0 ] unsigned char 
 14987 ;; Return value:  Size  Location     Type
 14988 ;;		None               void
 14989 ;; Registers used:
 14990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14991 ;; Tracked objects:
 14992 ;;		On entry : 0/0
 14993 ;;		On exit  : 0/0
 14994 ;;		Unchanged: 0/0
 14995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14997 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14999 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15000 ;;Total ram usage:        3 bytes
 15001 ;; Hardware stack levels used:    1
 15002 ;; Hardware stack levels required when called:    7
 15003 ;; This function calls:
 15004 ;;		_CC2500_WriteREG
 15005 ;; This function is called by:
 15006 ;;		_CC2500_PowerOnInitial
 15007 ;; This function uses a non-reentrant model
 15008 ;;
 15009                           
 15010                           
 15011                           ;psect for function _CC2500_InitPATable
 15012  11DE                     _CC2500_InitPATable:	
 15013                           
 15014                           ;CC2500_B1.c: 184: unsigned char loop_d;
 15015                           ;CC2500_B1.c: 185: unsigned char temp;
 15016                           ;CC2500_B1.c: 187: for (loop_d = 0; loop_d < 8; loop_d++) {
 15017                           
 15018                           ;incstack = 0
 15019                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15020  11DE  0020               	movlb	0	; select bank0
 15021  11DF  01A7               	clrf	CC2500_InitPATable@loop_d
 15022  11E0                     L11:	
 15023  11E0  3008               	movlw	8
 15024  11E1  0227               	subwf	CC2500_InitPATable@loop_d,w
 15025  11E2  1803               	btfsc	3,0
 15026  11E3  0008               	return
 15027                           
 15028                           ;CC2500_B1.c: 188: temp = CC2500_patable_vaule[loop_d];
 15029  11E4  0827               	movf	CC2500_InitPATable@loop_d,w
 15030  11E5  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15031  11E6  0084               	movwf	4
 15032  11E7  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15033  11E8  1803               	skipnc
 15034  11E9  3E01               	addlw	1
 15035  11EA  0085               	movwf	5
 15036  11EB  0800               	movf	0,w	;code access
 15037  11EC  00A5               	movwf	??_CC2500_InitPATable
 15038  11ED  0825               	movf	??_CC2500_InitPATable,w
 15039  11EE  00A6               	movwf	CC2500_InitPATable@temp
 15040                           
 15041                           ;CC2500_B1.c: 189: CC2500_WriteREG(0x3E, temp);
 15042  11EF  0826               	movf	CC2500_InitPATable@temp,w
 15043  11F0  00A5               	movwf	??_CC2500_InitPATable
 15044  11F1  0825               	movf	??_CC2500_InitPATable,w
 15045  11F2  00A2               	movwf	CC2500_WriteREG@value
 15046  11F3  303E               	movlw	62
 15047  11F4  3192  229F  3191   	fcall	_CC2500_WriteREG
 15048  11F7  3001               	movlw	1
 15049  11F8  0020               	movlb	0	; select bank0
 15050  11F9  00A5               	movwf	??_CC2500_InitPATable
 15051  11FA  0825               	movf	??_CC2500_InitPATable,w
 15052  11FB  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15053  11FC  29E0               	goto	L11
 15054  11FD                     __end_of_CC2500_InitPATable:	
 15055                           
 15056                           	psect	text97
 15057  129F                     __ptext97:	
 15058 ;; *************** function _CC2500_WriteREG *****************
 15059 ;; Defined at:
 15060 ;;		line 260 in file "../src/CC2500_B1.c"
 15061 ;; Parameters:    Size  Location     Type
 15062 ;;  w_addr          1    wreg     unsigned char 
 15063 ;;  value           1    2[BANK0 ] unsigned char 
 15064 ;; Auto vars:     Size  Location     Type
 15065 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15066 ;; Return value:  Size  Location     Type
 15067 ;;		None               void
 15068 ;; Registers used:
 15069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15070 ;; Tracked objects:
 15071 ;;		On entry : 0/0
 15072 ;;		On exit  : 0/0
 15073 ;;		Unchanged: 0/0
 15074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15075 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;Total ram usage:        3 bytes
 15080 ;; Hardware stack levels used:    1
 15081 ;; Hardware stack levels required when called:    6
 15082 ;; This function calls:
 15083 ;;		_CC2500_WriteByte
 15084 ;;		_Timeout_Counter
 15085 ;;		_set_TimeoutCleared
 15086 ;; This function is called by:
 15087 ;;		_CC2500_InitSetREG
 15088 ;;		_CC2500_InitPATable
 15089 ;; This function uses a non-reentrant model
 15090 ;;
 15091                           
 15092                           
 15093                           ;psect for function _CC2500_WriteREG
 15094  129F                     _CC2500_WriteREG:	
 15095                           
 15096                           ;incstack = 0
 15097                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15098                           ;CC2500_WriteREG@w_addr stored from wreg
 15099  129F  0020               	movlb	0	; select bank0
 15100  12A0  00A4               	movwf	CC2500_WriteREG@w_addr
 15101                           
 15102                           ;CC2500_B1.c: 261: RC4 = 0;
 15103  12A1  120E               	bcf	14,4	;volatile
 15104                           
 15105                           ;CC2500_B1.c: 262: SPI0Buffer = w_addr;
 15106  12A2  0824               	movf	CC2500_WriteREG@w_addr,w
 15107  12A3  00A3               	movwf	??_CC2500_WriteREG
 15108  12A4  0823               	movf	??_CC2500_WriteREG,w
 15109  12A5  0021               	movlb	1	; select bank1
 15110  12A6  00D3               	movwf	_SPI0Buffer^(0+128)
 15111                           
 15112                           ;CC2500_B1.c: 263: while (RC2 == 1 && myMain.Timeout == 0) {
 15113  12A7  2AAB               	goto	l8733
 15114  12A8                     l8731:	
 15115                           
 15116                           ;CC2500_B1.c: 264: Timeout_Counter();
 15117  12A8  3190  2072  3192   	fcall	_Timeout_Counter
 15118  12AB                     l8733:	
 15119  12AB  0020               	movlb	0	; select bank0
 15120  12AC  1D0E               	btfss	14,2	;volatile
 15121  12AD  2AB1               	goto	l8737
 15122  12AE  0021               	movlb	1	; select bank1
 15123  12AF  1D2F               	btfss	(_myMain^(0+128)+15),2
 15124  12B0  2AA8               	goto	l8731
 15125  12B1                     l8737:	
 15126                           
 15127                           ;CC2500_B1.c: 265: };
 15128                           ;CC2500_B1.c: 266: set_TimeoutCleared();
 15129  12B1  319E  260D  3192   	fcall	_set_TimeoutCleared
 15130                           
 15131                           ;CC2500_B1.c: 268: CC2500_WriteByte();
 15132  12B4  3190  20CA  3192   	fcall	_CC2500_WriteByte
 15133                           
 15134                           ;CC2500_B1.c: 269: SPI0Buffer = value;
 15135  12B7  0020               	movlb	0	; select bank0
 15136  12B8  0822               	movf	CC2500_WriteREG@value,w
 15137  12B9  00A3               	movwf	??_CC2500_WriteREG
 15138  12BA  0823               	movf	??_CC2500_WriteREG,w
 15139  12BB  0021               	movlb	1	; select bank1
 15140  12BC  00D3               	movwf	_SPI0Buffer^(0+128)
 15141                           
 15142                           ;CC2500_B1.c: 270: CC2500_WriteByte();
 15143  12BD  3190  20CA         	fcall	_CC2500_WriteByte
 15144                           
 15145                           ;CC2500_B1.c: 271: RC4 = 1;
 15146  12BF  0020               	movlb	0	; select bank0
 15147  12C0  160E               	bsf	14,4	;volatile
 15148  12C1  0008               	return
 15149  12C2                     __end_of_CC2500_WriteREG:	
 15150                           
 15151                           	psect	text98
 15152  1E6D                     __ptext98:	
 15153 ;; *************** function _CC2500_FrequencyCabr *****************
 15154 ;; Defined at:
 15155 ;;		line 210 in file "../src/CC2500_B1.c"
 15156 ;; Parameters:    Size  Location     Type
 15157 ;;		None
 15158 ;; Auto vars:     Size  Location     Type
 15159 ;;		None
 15160 ;; Return value:  Size  Location     Type
 15161 ;;		None               void
 15162 ;; Registers used:
 15163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15164 ;; Tracked objects:
 15165 ;;		On entry : 0/0
 15166 ;;		On exit  : 0/0
 15167 ;;		Unchanged: 0/0
 15168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;Total ram usage:        0 bytes
 15174 ;; Hardware stack levels used:    1
 15175 ;; Hardware stack levels required when called:    7
 15176 ;; This function calls:
 15177 ;;		_CC2500_WriteCommand
 15178 ;;		_DelayTime_1us
 15179 ;; This function is called by:
 15180 ;;		_CC2500_PowerOnInitial
 15181 ;; This function uses a non-reentrant model
 15182 ;;
 15183                           
 15184                           
 15185                           ;psect for function _CC2500_FrequencyCabr
 15186  1E6D                     _CC2500_FrequencyCabr:	
 15187                           
 15188                           ;CC2500_B1.c: 211: CC2500_WriteCommand(0x33);
 15189                           
 15190                           ;incstack = 0
 15191                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15192  1E6D  3033               	movlw	51
 15193  1E6E  3190  20FD  319E   	fcall	_CC2500_WriteCommand
 15194                           
 15195                           ;CC2500_B1.c: 212: DelayTime_1us(1000);
 15196  1E71  30E8               	movlw	232
 15197  1E72  0020               	movlb	0	; select bank0
 15198  1E73  00A0               	movwf	DelayTime_1us@count
 15199  1E74  3003               	movlw	3
 15200  1E75  00A1               	movwf	DelayTime_1us@count+1
 15201  1E76  3193  230A         	fcall	_DelayTime_1us
 15202  1E78  0008               	return
 15203  1E79                     __end_of_CC2500_FrequencyCabr:	
 15204                           
 15205                           	psect	text99
 15206  130A                     __ptext99:	
 15207 ;; *************** function _DelayTime_1us *****************
 15208 ;; Defined at:
 15209 ;;		line 329 in file "../src/CC2500_B1.c"
 15210 ;; Parameters:    Size  Location     Type
 15211 ;;  count           2    0[BANK0 ] int 
 15212 ;; Auto vars:     Size  Location     Type
 15213 ;;  j               2    4[BANK0 ] unsigned int 
 15214 ;;  i               2    2[BANK0 ] unsigned int 
 15215 ;; Return value:  Size  Location     Type
 15216 ;;		None               void
 15217 ;; Registers used:
 15218 ;;		wreg, status,2
 15219 ;; Tracked objects:
 15220 ;;		On entry : 0/0
 15221 ;;		On exit  : 0/0
 15222 ;;		Unchanged: 0/0
 15223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15224 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15228 ;;Total ram usage:        6 bytes
 15229 ;; Hardware stack levels used:    1
 15230 ;; Hardware stack levels required when called:    5
 15231 ;; This function calls:
 15232 ;;		Nothing
 15233 ;; This function is called by:
 15234 ;;		_CC2500_PowerRST
 15235 ;;		_CC2500_FrequencyCabr
 15236 ;; This function uses a non-reentrant model
 15237 ;;
 15238                           
 15239                           
 15240                           ;psect for function _DelayTime_1us
 15241  130A                     _DelayTime_1us:	
 15242                           
 15243                           ;CC2500_B1.c: 330: unsigned int i, j;
 15244                           ;CC2500_B1.c: 331: for (i = 1; i < count; i++)
 15245                           
 15246                           ;incstack = 0
 15247                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15248  130A  3001               	movlw	1
 15249  130B  0020               	movlb	0	; select bank0
 15250  130C  00A2               	movwf	DelayTime_1us@i
 15251  130D  3000               	movlw	0
 15252  130E  00A3               	movwf	DelayTime_1us@i+1
 15253  130F                     l402:	
 15254  130F  0821               	movf	DelayTime_1us@count+1,w
 15255  1310  0223               	subwf	DelayTime_1us@i+1,w
 15256  1311  1D03               	skipz
 15257  1312  2B15               	goto	u9015
 15258  1313  0820               	movf	DelayTime_1us@count,w
 15259  1314  0222               	subwf	DelayTime_1us@i,w
 15260  1315                     u9015:	
 15261  1315  1803               	btfsc	3,0
 15262  1316  0008               	return
 15263                           
 15264                           ;CC2500_B1.c: 332: for (j = 0; j <= 1; j++);
 15265  1317  01A4               	clrf	DelayTime_1us@j
 15266  1318  01A5               	clrf	DelayTime_1us@j+1
 15267  1319  3000               	movlw	0
 15268  131A  0225               	subwf	DelayTime_1us@j+1,w
 15269  131B  3002               	movlw	2
 15270  131C  1903               	skipnz
 15271  131D  0224               	subwf	DelayTime_1us@j,w
 15272  131E  1803               	btfsc	3,0
 15273  131F  2B2B               	goto	l8725
 15274  1320                     l8723:	
 15275  1320  3001               	movlw	1
 15276  1321  07A4               	addwf	DelayTime_1us@j,f
 15277  1322  3000               	movlw	0
 15278  1323  3DA5               	addwfc	DelayTime_1us@j+1,f
 15279  1324  3000               	movlw	0
 15280  1325  0225               	subwf	DelayTime_1us@j+1,w
 15281  1326  3002               	movlw	2
 15282  1327  1903               	skipnz
 15283  1328  0224               	subwf	DelayTime_1us@j,w
 15284  1329  1C03               	skipc
 15285  132A  2B20               	goto	l8723
 15286  132B                     l8725:	
 15287  132B  3001               	movlw	1
 15288  132C  07A2               	addwf	DelayTime_1us@i,f
 15289  132D  3000               	movlw	0
 15290  132E  3DA3               	addwfc	DelayTime_1us@i+1,f
 15291  132F  2B0F               	goto	l402
 15292  1330                     __end_of_DelayTime_1us:	
 15293                           
 15294                           	psect	text100
 15295  1E05                     __ptext100:	
 15296 ;; *************** function _CC2500_ClearTXFIFO *****************
 15297 ;; Defined at:
 15298 ;;		line 196 in file "../src/CC2500_B1.c"
 15299 ;; Parameters:    Size  Location     Type
 15300 ;;		None
 15301 ;; Auto vars:     Size  Location     Type
 15302 ;;		None
 15303 ;; Return value:  Size  Location     Type
 15304 ;;		None               void
 15305 ;; Registers used:
 15306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15307 ;; Tracked objects:
 15308 ;;		On entry : 0/0
 15309 ;;		On exit  : 0/0
 15310 ;;		Unchanged: 0/0
 15311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15316 ;;Total ram usage:        0 bytes
 15317 ;; Hardware stack levels used:    1
 15318 ;; Hardware stack levels required when called:    7
 15319 ;; This function calls:
 15320 ;;		_CC2500_WriteCommand
 15321 ;; This function is called by:
 15322 ;;		_CC2500_PowerOnInitial
 15323 ;; This function uses a non-reentrant model
 15324 ;;
 15325                           
 15326                           
 15327                           ;psect for function _CC2500_ClearTXFIFO
 15328  1E05                     _CC2500_ClearTXFIFO:	
 15329                           
 15330                           ;CC2500_B1.c: 197: CC2500_WriteCommand(0x3B);
 15331                           
 15332                           ;incstack = 0
 15333                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15334  1E05  303B               	movlw	59
 15335  1E06  3190  20FD         	fcall	_CC2500_WriteCommand
 15336  1E08  0008               	return
 15337  1E09                     __end_of_CC2500_ClearTXFIFO:	
 15338                           
 15339                           	psect	text101
 15340  1E01                     __ptext101:	
 15341 ;; *************** function _CC2500_ClearRXFIFO *****************
 15342 ;; Defined at:
 15343 ;;		line 203 in file "../src/CC2500_B1.c"
 15344 ;; Parameters:    Size  Location     Type
 15345 ;;		None
 15346 ;; Auto vars:     Size  Location     Type
 15347 ;;		None
 15348 ;; Return value:  Size  Location     Type
 15349 ;;		None               void
 15350 ;; Registers used:
 15351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15352 ;; Tracked objects:
 15353 ;;		On entry : 0/0
 15354 ;;		On exit  : 0/0
 15355 ;;		Unchanged: 0/0
 15356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15361 ;;Total ram usage:        0 bytes
 15362 ;; Hardware stack levels used:    1
 15363 ;; Hardware stack levels required when called:    7
 15364 ;; This function calls:
 15365 ;;		_CC2500_WriteCommand
 15366 ;; This function is called by:
 15367 ;;		_CC2500_PowerOnInitial
 15368 ;; This function uses a non-reentrant model
 15369 ;;
 15370                           
 15371                           
 15372                           ;psect for function _CC2500_ClearRXFIFO
 15373  1E01                     _CC2500_ClearRXFIFO:	
 15374                           
 15375                           ;CC2500_B1.c: 204: CC2500_WriteCommand(0x3A);
 15376                           
 15377                           ;incstack = 0
 15378                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15379  1E01  303A               	movlw	58
 15380  1E02  3190  20FD         	fcall	_CC2500_WriteCommand
 15381  1E04  0008               	return
 15382  1E05                     __end_of_CC2500_ClearRXFIFO:	
 15383                           
 15384                           	psect	text102
 15385  10FD                     __ptext102:	
 15386 ;; *************** function _CC2500_WriteCommand *****************
 15387 ;; Defined at:
 15388 ;;		line 294 in file "../src/CC2500_B1.c"
 15389 ;; Parameters:    Size  Location     Type
 15390 ;;  command         1    wreg     unsigned char 
 15391 ;; Auto vars:     Size  Location     Type
 15392 ;;  command         1    3[BANK0 ] unsigned char 
 15393 ;; Return value:  Size  Location     Type
 15394 ;;		None               void
 15395 ;; Registers used:
 15396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15397 ;; Tracked objects:
 15398 ;;		On entry : 0/0
 15399 ;;		On exit  : 0/0
 15400 ;;		Unchanged: 0/0
 15401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15406 ;;Total ram usage:        2 bytes
 15407 ;; Hardware stack levels used:    1
 15408 ;; Hardware stack levels required when called:    6
 15409 ;; This function calls:
 15410 ;;		_CC2500_WriteByte
 15411 ;;		_Timeout_Counter
 15412 ;;		_set_TimeoutCleared
 15413 ;; This function is called by:
 15414 ;;		_CC2500_TxData
 15415 ;;		_CC2500_ClearTXFIFO
 15416 ;;		_CC2500_ClearRXFIFO
 15417 ;;		_CC2500_FrequencyCabr
 15418 ;;		_CC2500_SIDLEMode
 15419 ;;		_setRF_Main
 15420 ;;		_RF_RxDisable
 15421 ;; This function uses a non-reentrant model
 15422 ;;
 15423                           
 15424                           
 15425                           ;psect for function _CC2500_WriteCommand
 15426  10FD                     _CC2500_WriteCommand:	
 15427                           
 15428                           ;incstack = 0
 15429                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15430                           ;CC2500_WriteCommand@command stored from wreg
 15431  10FD  0020               	movlb	0	; select bank0
 15432  10FE  00A3               	movwf	CC2500_WriteCommand@command
 15433                           
 15434                           ;CC2500_B1.c: 295: RC4 = 0;
 15435  10FF  120E               	bcf	14,4	;volatile
 15436                           
 15437                           ;CC2500_B1.c: 296: SPI0Buffer = command;
 15438  1100  0823               	movf	CC2500_WriteCommand@command,w
 15439  1101  00A2               	movwf	??_CC2500_WriteCommand
 15440  1102  0822               	movf	??_CC2500_WriteCommand,w
 15441  1103  0021               	movlb	1	; select bank1
 15442  1104  00D3               	movwf	_SPI0Buffer^(0+128)
 15443                           
 15444                           ;CC2500_B1.c: 298: while (RC2 == 1 && myMain.Timeout == 0) {
 15445  1105  2909               	goto	l8505
 15446  1106                     l8503:	
 15447                           
 15448                           ;CC2500_B1.c: 299: Timeout_Counter();
 15449  1106  3190  2072  3190   	fcall	_Timeout_Counter
 15450  1109                     l8505:	
 15451  1109  0020               	movlb	0	; select bank0
 15452  110A  1D0E               	btfss	14,2	;volatile
 15453  110B  290F               	goto	l8509
 15454  110C  0021               	movlb	1	; select bank1
 15455  110D  1D2F               	btfss	(_myMain^(0+128)+15),2
 15456  110E  2906               	goto	l8503
 15457  110F                     l8509:	
 15458                           
 15459                           ;CC2500_B1.c: 300: };
 15460                           ;CC2500_B1.c: 301: set_TimeoutCleared();
 15461  110F  319E  260D  3190   	fcall	_set_TimeoutCleared
 15462                           
 15463                           ;CC2500_B1.c: 303: CC2500_WriteByte();
 15464  1112  3190  20CA         	fcall	_CC2500_WriteByte
 15465                           
 15466                           ;CC2500_B1.c: 304: RC4 = 1;
 15467  1114  0020               	movlb	0	; select bank0
 15468  1115  160E               	bsf	14,4	;volatile
 15469  1116  0008               	return
 15470  1117                     __end_of_CC2500_WriteCommand:	
 15471                           
 15472                           	psect	text103
 15473  1E0D                     __ptext103:	
 15474 ;; *************** function _set_TimeoutCleared *****************
 15475 ;; Defined at:
 15476 ;;		line 217 in file "../src/Main_B1.c"
 15477 ;; Parameters:    Size  Location     Type
 15478 ;;		None
 15479 ;; Auto vars:     Size  Location     Type
 15480 ;;		None
 15481 ;; Return value:  Size  Location     Type
 15482 ;;		None               void
 15483 ;; Registers used:
 15484 ;;		status,2
 15485 ;; Tracked objects:
 15486 ;;		On entry : 0/0
 15487 ;;		On exit  : 0/0
 15488 ;;		Unchanged: 0/0
 15489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15494 ;;Total ram usage:        0 bytes
 15495 ;; Hardware stack levels used:    1
 15496 ;; Hardware stack levels required when called:    5
 15497 ;; This function calls:
 15498 ;;		Nothing
 15499 ;; This function is called by:
 15500 ;;		_CC2500_TxData
 15501 ;;		_CC2500_RxData
 15502 ;;		_CC2500_PowerRST
 15503 ;;		_CC2500_WriteREG
 15504 ;;		_CC2500_WriteCommand
 15505 ;;		_CC2500_ReadStatus
 15506 ;;		_TouchPower
 15507 ;;		_CC2500_ReadREG
 15508 ;;		_getAD
 15509 ;; This function uses a non-reentrant model
 15510 ;;
 15511                           
 15512                           
 15513                           ;psect for function _set_TimeoutCleared
 15514  1E0D                     _set_TimeoutCleared:	
 15515                           
 15516                           ;Main_B1.c: 218: myMain.Timeout = 0;
 15517                           
 15518                           ;incstack = 0
 15519                           ; Regs used in _set_TimeoutCleared: [status,2]
 15520  1E0D  0021               	movlb	1	; select bank1
 15521  1E0E  112F               	bcf	(_myMain^(0+128)+15),2
 15522                           
 15523                           ;Main_B1.c: 219: myMain.Timeout_Counter = 0;
 15524  1E0F  01B0               	clrf	(_myMain^(0+128)+16)
 15525  1E10  01B1               	clrf	((_myMain+1)^(0+128)+16)
 15526  1E11  0008               	return
 15527  1E12                     __end_of_set_TimeoutCleared:	
 15528                           
 15529                           	psect	text104
 15530  1072                     __ptext104:	
 15531 ;; *************** function _Timeout_Counter *****************
 15532 ;; Defined at:
 15533 ;;		line 208 in file "../src/Main_B1.c"
 15534 ;; Parameters:    Size  Location     Type
 15535 ;;		None
 15536 ;; Auto vars:     Size  Location     Type
 15537 ;;		None
 15538 ;; Return value:  Size  Location     Type
 15539 ;;		None               void
 15540 ;; Registers used:
 15541 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15542 ;; Tracked objects:
 15543 ;;		On entry : 0/0
 15544 ;;		On exit  : 0/0
 15545 ;;		Unchanged: 0/0
 15546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;Total ram usage:        0 bytes
 15552 ;; Hardware stack levels used:    1
 15553 ;; Hardware stack levels required when called:    5
 15554 ;; This function calls:
 15555 ;;		Nothing
 15556 ;; This function is called by:
 15557 ;;		_CC2500_TxData
 15558 ;;		_CC2500_RxData
 15559 ;;		_CC2500_PowerRST
 15560 ;;		_CC2500_WriteREG
 15561 ;;		_CC2500_WriteCommand
 15562 ;;		_CC2500_ReadStatus
 15563 ;;		_TouchPower
 15564 ;;		_CC2500_ReadREG
 15565 ;;		_getAD
 15566 ;; This function uses a non-reentrant model
 15567 ;;
 15568                           
 15569                           
 15570                           ;psect for function _Timeout_Counter
 15571  1072                     _Timeout_Counter:	
 15572                           
 15573                           ;Main_B1.c: 209: myMain.Timeout_Counter++;
 15574                           
 15575                           ;incstack = 0
 15576                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15577  1072  3001               	movlw	1
 15578  1073  0021               	movlb	1	; select bank1
 15579  1074  07B0               	addwf	(_myMain^(0+128)+16),f
 15580  1075  3000               	movlw	0
 15581  1076  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 15582                           
 15583                           ;Main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 15584  1077  3010               	movlw	16
 15585  1078  3EA0               	addlw	_myMain& (0+255)
 15586  1079  0086               	movwf	6
 15587  107A  0187               	clrf	7
 15588  107B  3F40               	moviw [0]fsr1
 15589  107C  3A10               	xorlw	16
 15590  107D  1D03               	skipz
 15591  107E  2881               	goto	u8575
 15592  107F  3F41               	moviw [1]fsr1
 15593  1080  3A27               	xorlw	39
 15594  1081                     u8575:	
 15595  1081  1D03               	skipz
 15596  1082  0008               	return
 15597                           
 15598                           ;Main_B1.c: 211: myMain.Timeout_Counter = 0;
 15599  1083  01B0               	clrf	(_myMain^(0+128)+16)
 15600  1084  01B1               	clrf	((_myMain+1)^(0+128)+16)
 15601                           
 15602                           ;Main_B1.c: 212: myMain.Timeout = 1;
 15603  1085  152F               	bsf	(_myMain^(0+128)+15),2
 15604  1086  0008               	return
 15605  1087                     __end_of_Timeout_Counter:	
 15606                           
 15607                           	psect	text105
 15608  10CA                     __ptext105:	
 15609 ;; *************** function _CC2500_WriteByte *****************
 15610 ;; Defined at:
 15611 ;;		line 228 in file "../src/CC2500_B1.c"
 15612 ;; Parameters:    Size  Location     Type
 15613 ;;		None
 15614 ;; Auto vars:     Size  Location     Type
 15615 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15616 ;; Return value:  Size  Location     Type
 15617 ;;		None               void
 15618 ;; Registers used:
 15619 ;;		wreg, status,2, status,0
 15620 ;; Tracked objects:
 15621 ;;		On entry : 0/0
 15622 ;;		On exit  : 0/0
 15623 ;;		Unchanged: 0/0
 15624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;Total ram usage:        2 bytes
 15630 ;; Hardware stack levels used:    1
 15631 ;; Hardware stack levels required when called:    5
 15632 ;; This function calls:
 15633 ;;		Nothing
 15634 ;; This function is called by:
 15635 ;;		_CC2500_TxData
 15636 ;;		_CC2500_RxData
 15637 ;;		_CC2500_PowerRST
 15638 ;;		_CC2500_WriteREG
 15639 ;;		_CC2500_WriteCommand
 15640 ;;		_CC2500_ReadStatus
 15641 ;;		_CC2500_ReadREG
 15642 ;; This function uses a non-reentrant model
 15643 ;;
 15644                           
 15645                           
 15646                           ;psect for function _CC2500_WriteByte
 15647  10CA                     _CC2500_WriteByte:	
 15648                           
 15649                           ;CC2500_B1.c: 229: unsigned char loop_a;
 15650                           ;CC2500_B1.c: 230: for (loop_a = 0; loop_a < 8; loop_a++) {
 15651                           
 15652                           ;incstack = 0
 15653                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15654  10CA  0020               	movlb	0	; select bank0
 15655  10CB  01A1               	clrf	CC2500_WriteByte@loop_a
 15656  10CC                     L12:	
 15657  10CC  3008               	movlw	8
 15658  10CD  0221               	subwf	CC2500_WriteByte@loop_a,w
 15659  10CE  1803               	btfsc	3,0
 15660  10CF  0008               	return
 15661                           
 15662                           ;CC2500_B1.c: 231: if (SPI0Buffer & 0x80)
 15663  10D0  0021               	movlb	1	; select bank1
 15664  10D1  1FD3               	btfss	_SPI0Buffer^(0+128),7
 15665  10D2  28D6               	goto	l358
 15666                           
 15667                           ;CC2500_B1.c: 232: RC0 = 1;
 15668  10D3  0020               	movlb	0	; select bank0
 15669  10D4  140E               	bsf	14,0	;volatile
 15670  10D5  28D8               	goto	l359
 15671  10D6                     l358:	
 15672                           
 15673                           ;CC2500_B1.c: 233: else
 15674                           ;CC2500_B1.c: 234: RC0 = 0;
 15675  10D6  0020               	movlb	0	; select bank0
 15676  10D7  100E               	bcf	14,0	;volatile
 15677  10D8                     l359:	
 15678                           
 15679                           ;CC2500_B1.c: 235: RC1 = 1;
 15680  10D8  148E               	bsf	14,1	;volatile
 15681                           
 15682                           ;CC2500_B1.c: 236: SPI0Buffer <<= 1;
 15683  10D9  1003               	clrc
 15684  10DA  0021               	movlb	1	; select bank1
 15685  10DB  0DD3               	rlf	_SPI0Buffer^(0+128),f
 15686                           
 15687                           ;CC2500_B1.c: 237: RC1 = 0;
 15688  10DC  0020               	movlb	0	; select bank0
 15689  10DD  108E               	bcf	14,1	;volatile
 15690  10DE  3001               	movlw	1
 15691  10DF  00A0               	movwf	??_CC2500_WriteByte
 15692  10E0  0820               	movf	??_CC2500_WriteByte,w
 15693  10E1  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15694  10E2  28CC               	goto	L12
 15695  10E3                     __end_of_CC2500_WriteByte:	
 15696                           
 15697                           	psect	text106
 15698  16BE                     __ptext106:	
 15699 ;; *************** function _Buzzer_Main *****************
 15700 ;; Defined at:
 15701 ;;		line 46 in file "../src/Buzzer_B1.c"
 15702 ;; Parameters:    Size  Location     Type
 15703 ;;		None
 15704 ;; Auto vars:     Size  Location     Type
 15705 ;;		None
 15706 ;; Return value:  Size  Location     Type
 15707 ;;		None               void
 15708 ;; Registers used:
 15709 ;;		wreg, status,2, status,0
 15710 ;; Tracked objects:
 15711 ;;		On entry : 0/0
 15712 ;;		On exit  : 0/0
 15713 ;;		Unchanged: 0/0
 15714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15718 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15719 ;;Total ram usage:        1 bytes
 15720 ;; Hardware stack levels used:    1
 15721 ;; Hardware stack levels required when called:    5
 15722 ;; This function calls:
 15723 ;;		Nothing
 15724 ;; This function is called by:
 15725 ;;		_main
 15726 ;; This function uses a non-reentrant model
 15727 ;;
 15728                           
 15729                           
 15730                           ;psect for function _Buzzer_Main
 15731  16BE                     _Buzzer_Main:	
 15732                           
 15733                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15734                           
 15735                           ;incstack = 0
 15736                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15737  16BE  0021               	movlb	1	; select bank1
 15738  16BF  1CB2               	btfss	_Buz1^(0+128),1
 15739  16C0  0008               	return
 15740                           
 15741                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15742  16C1  3001               	movlw	1
 15743  16C2  07B3               	addwf	(_Buz1^(0+128)+1),f
 15744  16C3  3000               	movlw	0
 15745  16C4  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 15746                           
 15747                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15748  16C5  0839               	movf	((_Buz1+1)^(0+128)+6),w
 15749  16C6  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 15750  16C7  1D03               	skipz
 15751  16C8  2ECB               	goto	u10415
 15752  16C9  0838               	movf	(_Buz1^(0+128)+6),w
 15753  16CA  0233               	subwf	(_Buz1^(0+128)+1),w
 15754  16CB                     u10415:	
 15755  16CB  1C03               	skipc
 15756  16CC  0008               	return
 15757                           
 15758                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15759  16CD  01B3               	clrf	(_Buz1^(0+128)+1)
 15760  16CE  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15761                           
 15762                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15763  16CF  12B2               	bcf	_Buz1^(0+128),5
 15764  16D0  0020               	movlb	0	; select bank0
 15765  16D1  1D8D               	btfss	13,3	;volatile
 15766  16D2  2ED5               	goto	l9577
 15767  16D3  0021               	movlb	1	; select bank1
 15768  16D4  16B2               	bsf	_Buz1^(0+128),5
 15769  16D5                     l9577:	
 15770                           
 15771                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15772  16D5  0021               	movlb	1	; select bank1
 15773  16D6  1AB2               	btfsc	_Buz1^(0+128),5
 15774  16D7  2F01               	goto	l120
 15775                           
 15776                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15777  16D8  08B5               	movf	(_Buz1^(0+128)+3),f
 15778  16D9  1D03               	skipz
 15779  16DA  2EFD               	goto	l121
 15780                           
 15781                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15782  16DB  1DB2               	btfss	_Buz1^(0+128),3
 15783  16DC  2EEB               	goto	l122
 15784                           
 15785                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15786  16DD  11B2               	bcf	_Buz1^(0+128),3
 15787                           
 15788                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15789  16DE  0836               	movf	(_Buz1^(0+128)+4),w
 15790  16DF  0020               	movlb	0	; select bank0
 15791  16E0  00A0               	movwf	??_Buzzer_Main
 15792  16E1  0820               	movf	??_Buzzer_Main,w
 15793  16E2  0021               	movlb	1	; select bank1
 15794  16E3  00B5               	movwf	(_Buz1^(0+128)+3)
 15795                           
 15796                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15797  16E4  083B               	movf	((_Buz1+1)^(0+128)+8),w
 15798  16E5  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15799  16E6  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15800  16E7  083A               	movf	(_Buz1^(0+128)+8),w
 15801  16E8  01B8               	clrf	(_Buz1^(0+128)+6)
 15802  16E9  07B8               	addwf	(_Buz1^(0+128)+6),f
 15803                           
 15804                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15805  16EA  0008               	return
 15806  16EB                     l122:	
 15807  16EB  1E32               	btfss	_Buz1^(0+128),4
 15808  16EC  2EFB               	goto	l124
 15809                           
 15810                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15811  16ED  1232               	bcf	_Buz1^(0+128),4
 15812                           
 15813                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15814  16EE  0837               	movf	(_Buz1^(0+128)+5),w
 15815  16EF  0020               	movlb	0	; select bank0
 15816  16F0  00A0               	movwf	??_Buzzer_Main
 15817  16F1  0820               	movf	??_Buzzer_Main,w
 15818  16F2  0021               	movlb	1	; select bank1
 15819  16F3  00B5               	movwf	(_Buz1^(0+128)+3)
 15820                           
 15821                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15822  16F4  083D               	movf	((_Buz1+1)^(0+128)+10),w
 15823  16F5  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15824  16F6  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15825  16F7  083C               	movf	(_Buz1^(0+128)+10),w
 15826  16F8  01B8               	clrf	(_Buz1^(0+128)+6)
 15827  16F9  07B8               	addwf	(_Buz1^(0+128)+6),f
 15828                           
 15829                           ;Buzzer_B1.c: 62: } else {
 15830  16FA  0008               	return
 15831  16FB                     l124:	
 15832                           
 15833                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15834  16FB  10B2               	bcf	_Buz1^(0+128),1
 15835                           
 15836                           ;Buzzer_B1.c: 64: }
 15837                           ;Buzzer_B1.c: 65: } else {
 15838  16FC  0008               	return
 15839  16FD                     l121:	
 15840                           
 15841                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15842  16FD  16B2               	bsf	_Buz1^(0+128),5
 15843                           
 15844                           ;Buzzer_B1.c: 68: RB3 = 1;
 15845  16FE  0020               	movlb	0	; select bank0
 15846  16FF  158D               	bsf	13,3	;volatile
 15847                           
 15848                           ;Buzzer_B1.c: 69: }
 15849                           ;Buzzer_B1.c: 70: } else {
 15850  1700  0008               	return
 15851  1701                     l120:	
 15852                           
 15853                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15854  1701  12B2               	bcf	_Buz1^(0+128),5
 15855                           
 15856                           ;Buzzer_B1.c: 73: RB3 = 0;
 15857  1702  0020               	movlb	0	; select bank0
 15858  1703  118D               	bcf	13,3	;volatile
 15859                           
 15860                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15861  1704  3001               	movlw	1
 15862  1705  0021               	movlb	1	; select bank1
 15863  1706  02B5               	subwf	(_Buz1^(0+128)+3),f
 15864  1707  0008               	return
 15865  1708                     __end_of_Buzzer_Main:	
 15866                           
 15867                           	psect	text107
 15868  1DF8                     __ptext107:	
 15869 ;; *************** function _Buzzer_Initialization *****************
 15870 ;; Defined at:
 15871 ;;		line 11 in file "../src/Buzzer_B1.c"
 15872 ;; Parameters:    Size  Location     Type
 15873 ;;		None
 15874 ;; Auto vars:     Size  Location     Type
 15875 ;;		None
 15876 ;; Return value:  Size  Location     Type
 15877 ;;		None               void
 15878 ;; Registers used:
 15879 ;;		None
 15880 ;; Tracked objects:
 15881 ;;		On entry : 0/0
 15882 ;;		On exit  : 0/0
 15883 ;;		Unchanged: 0/0
 15884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15889 ;;Total ram usage:        0 bytes
 15890 ;; Hardware stack levels used:    1
 15891 ;; Hardware stack levels required when called:    5
 15892 ;; This function calls:
 15893 ;;		Nothing
 15894 ;; This function is called by:
 15895 ;;		_main
 15896 ;; This function uses a non-reentrant model
 15897 ;;
 15898                           
 15899                           
 15900                           ;psect for function _Buzzer_Initialization
 15901  1DF8                     _Buzzer_Initialization:	
 15902                           
 15903                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15904                           
 15905                           ;incstack = 0
 15906                           ; Regs used in _Buzzer_Initialization: []
 15907  1DF8  0021               	movlb	1	; select bank1
 15908  1DF9  1432               	bsf	_Buz1^(0+128),0
 15909  1DFA  0008               	return
 15910  1DFB                     __end_of_Buzzer_Initialization:	
 15911                           
 15912                           	psect	intentry
 15913  0004                     __pintentry:	
 15914 ;; *************** function _ISR *****************
 15915 ;; Defined at:
 15916 ;;		line 107 in file "../src/MCU_B1.c"
 15917 ;; Parameters:    Size  Location     Type
 15918 ;;		None
 15919 ;; Auto vars:     Size  Location     Type
 15920 ;;		None
 15921 ;; Return value:  Size  Location     Type
 15922 ;;		None               void
 15923 ;; Registers used:
 15924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15925 ;; Tracked objects:
 15926 ;;		On entry : 0/0
 15927 ;;		On exit  : 0/0
 15928 ;;		Unchanged: 0/0
 15929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15934 ;;Total ram usage:        1 bytes
 15935 ;; Hardware stack levels used:    1
 15936 ;; Hardware stack levels required when called:    4
 15937 ;; This function calls:
 15938 ;;		_IOC_ISR
 15939 ;;		_TMR0_ISR
 15940 ;; This function is called by:
 15941 ;;		Interrupt level 1
 15942 ;; This function uses a non-reentrant model
 15943 ;;
 15944                           
 15945  0004                     _ISR:	
 15946                           
 15947                           ;incstack = 0
 15948                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15949  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15950  0005  3180               	pagesel	$
 15951  0006  0020               	movlb	0	; select bank0
 15952  0007  087F               	movf	127,w
 15953  0008  00FB               	movwf	??_ISR
 15954                           
 15955                           ;MCU_B1.c: 109: IOC_ISR();
 15956  0009  319E  2691  3180   	fcall	_IOC_ISR
 15957                           
 15958                           ;MCU_B1.c: 111: TMR0_ISR();
 15959  000C  3193  23D3         	fcall	_TMR0_ISR
 15960  000E  087B               	movf	??_ISR,w
 15961  000F  0020               	movlb	0	; select bank0
 15962  0010  00FF               	movwf	127
 15963  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 15964  0012  0009               	retfie
 15965  0013                     __end_of_ISR:	
 15966                           
 15967                           	psect	text109
 15968  13D3                     __ptext109:	
 15969 ;; *************** function _TMR0_ISR *****************
 15970 ;; Defined at:
 15971 ;;		line 135 in file "../src/MCU_B1.c"
 15972 ;; Parameters:    Size  Location     Type
 15973 ;;		None
 15974 ;; Auto vars:     Size  Location     Type
 15975 ;;		None
 15976 ;; Return value:  Size  Location     Type
 15977 ;;		None               void
 15978 ;; Registers used:
 15979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15980 ;; Tracked objects:
 15981 ;;		On entry : 0/0
 15982 ;;		On exit  : 0/0
 15983 ;;		Unchanged: 0/0
 15984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15989 ;;Total ram usage:        0 bytes
 15990 ;; Hardware stack levels used:    1
 15991 ;; Hardware stack levels required when called:    2
 15992 ;; This function calls:
 15993 ;;		_setDimmerLights_IntrControl
 15994 ;; This function is called by:
 15995 ;;		_ISR
 15996 ;; This function uses a non-reentrant model
 15997 ;;
 15998                           
 15999                           
 16000                           ;psect for function _TMR0_ISR
 16001  13D3                     _TMR0_ISR:	
 16002                           
 16003                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 16004                           
 16005                           ;incstack = 0
 16006                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16007  13D3  1E8B               	btfss	11,5	;volatile
 16008  13D4  0008               	return
 16009  13D5  1D0B               	btfss	11,2	;volatile
 16010  13D6  0008               	return
 16011                           
 16012                           ;MCU_B1.c: 138: TMR0 = (256-190);
 16013  13D7  3042               	movlw	66
 16014  13D8  0020               	movlb	0	; select bank0
 16015  13D9  0095               	movwf	21	;volatile
 16016                           
 16017                           ;MCU_B1.c: 139: TMR0IF = 0;
 16018  13DA  110B               	bcf	11,2	;volatile
 16019                           
 16020                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 16021  13DB  3001               	movlw	1
 16022  13DC  3180  2044  3193   	fcall	_setDimmerLights_IntrControl
 16023                           
 16024                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 16025  13DF  3002               	movlw	2
 16026  13E0  3180  2044  3193   	fcall	_setDimmerLights_IntrControl
 16027                           
 16028                           ;MCU_B1.c: 154: setDimmerLights_IntrControl(3);
 16029  13E3  3003               	movlw	3
 16030  13E4  3180  2044  3193   	fcall	_setDimmerLights_IntrControl
 16031                           
 16032                           ;MCU_B1.c: 160: Timer0.Count++;
 16033  13E7  3001               	movlw	1
 16034  13E8  0022               	movlb	2	; select bank2
 16035  13E9  07B6               	addwf	(_Timer0^(0+256)+1),f
 16036  13EA  3000               	movlw	0
 16037  13EB  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 16038                           
 16039                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 16040  13EC  3001               	movlw	1
 16041  13ED  3E35               	addlw	_Timer0& (0+255)
 16042  13EE  0086               	movwf	6
 16043  13EF  3001               	movlw	1	; select bank2/3
 16044  13F0  0087               	movwf	7
 16045  13F1  3F40               	moviw [0]fsr1
 16046  13F2  3A64               	xorlw	100
 16047  13F3  1D03               	skipz
 16048  13F4  2BF7               	goto	u759_25
 16049  13F5  3F41               	moviw [1]fsr1
 16050  13F6  3A00               	xorlw	0
 16051  13F7                     u759_25:	
 16052  13F7  1D03               	skipz
 16053  13F8  0008               	return
 16054                           
 16055                           ;MCU_B1.c: 162: Timer0.Count = 0;
 16056  13F9  01B6               	clrf	(_Timer0^(0+256)+1)
 16057  13FA  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 16058                           
 16059                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 16060  13FB  0021               	movlb	1	; select bank1
 16061  13FC  14A0               	bsf	_myMain^(0+128),1
 16062  13FD  0008               	return
 16063  13FE                     __end_of_TMR0_ISR:	
 16064                           
 16065                           	psect	text110
 16066  0044                     __ptext110:	
 16067 ;; *************** function _setDimmerLights_IntrControl *****************
 16068 ;; Defined at:
 16069 ;;		line 96 in file "../src/Dimmer_B1.c"
 16070 ;; Parameters:    Size  Location     Type
 16071 ;;  lights          1    wreg     unsigned char 
 16072 ;; Auto vars:     Size  Location     Type
 16073 ;;  lights          1    4[COMMON] unsigned char 
 16074 ;; Return value:  Size  Location     Type
 16075 ;;		None               void
 16076 ;; Registers used:
 16077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16078 ;; Tracked objects:
 16079 ;;		On entry : 0/0
 16080 ;;		On exit  : 0/0
 16081 ;;		Unchanged: 0/0
 16082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16085 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16086 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16087 ;;Total ram usage:        3 bytes
 16088 ;; Hardware stack levels used:    1
 16089 ;; Hardware stack levels required when called:    1
 16090 ;; This function calls:
 16091 ;;		_DimmerIntrPointSelect
 16092 ;; This function is called by:
 16093 ;;		_TMR0_ISR
 16094 ;; This function uses a non-reentrant model
 16095 ;;
 16096                           
 16097                           
 16098                           ;psect for function _setDimmerLights_IntrControl
 16099  0044                     _setDimmerLights_IntrControl:	
 16100                           
 16101                           ;incstack = 0
 16102                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16103                           ;setDimmerLights_IntrControl@lights stored from wreg
 16104  0044  00FA               	movwf	setDimmerLights_IntrControl@lights
 16105                           
 16106                           ;Dimmer_B1.c: 98: DimmerIntrPointSelect(lights);
 16107  0045  087A               	movf	setDimmerLights_IntrControl@lights,w
 16108  0046  3190  20E3  3180   	fcall	_DimmerIntrPointSelect
 16109                           
 16110                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->GO == 1) {
 16111  0049  0875               	movf	_DimmerLightsIntr,w
 16112  004A  0086               	movwf	6
 16113  004B  3001               	movlw	1	; select bank2/3
 16114  004C  0087               	movwf	7
 16115  004D  1C01               	btfss	1,0
 16116  004E  28A4               	goto	i1l7061
 16117                           
 16118                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count++;
 16119  004F  3001               	movlw	1
 16120  0050  00F8               	movwf	??_setDimmerLights_IntrControl
 16121  0051  0875               	movf	_DimmerLightsIntr,w
 16122  0052  3E03               	addlw	3
 16123  0053  0086               	movwf	6
 16124  0054  3001               	movlw	1	; select bank2/3
 16125  0055  0087               	movwf	7
 16126  0056  0878               	movf	??_setDimmerLights_IntrControl,w
 16127  0057  0781               	addwf	1,f
 16128                           
 16129                           ;Dimmer_B1.c: 101: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimm
      +                          er->Correction)) {
 16130  0058  0873               	movf	_Dimmer,w
 16131  0059  3E02               	addlw	2
 16132  005A  0086               	movwf	6
 16133  005B  0187               	clrf	7
 16134  005C  0875               	movf	_DimmerLightsIntr,w
 16135  005D  3E04               	addlw	4
 16136  005E  0084               	movwf	4
 16137  005F  3001               	movlw	1	; select bank2/3
 16138  0060  0085               	movwf	5
 16139  0061  0800               	movf	0,w
 16140  0062  0701               	addwf	1,w
 16141  0063  00F8               	movwf	??_setDimmerLights_IntrControl
 16142  0064  01F9               	clrf	??_setDimmerLights_IntrControl+1
 16143  0065  0DF9               	rlf	??_setDimmerLights_IntrControl+1,f
 16144  0066  0875               	movf	_DimmerLightsIntr,w
 16145  0067  3E03               	addlw	3
 16146  0068  0086               	movwf	6
 16147  0069  3001               	movlw	1	; select bank2/3
 16148  006A  0087               	movwf	7
 16149  006B  0879               	movf	??_setDimmerLights_IntrControl+1,w
 16150  006C  3A80               	xorlw	128
 16151  006D  3C80               	sublw	128
 16152  006E  1D03               	skipz
 16153  006F  2872               	goto	u644_25
 16154  0070  0878               	movf	??_setDimmerLights_IntrControl,w
 16155  0071  0201               	subwf	1,w
 16156  0072                     u644_25:	
 16157  0072  1C03               	skipc
 16158  0073  29B2               	goto	i1l7127
 16159                           
 16160                           ;Dimmer_B1.c: 102: DimmerLightsIntr->Count = 0;
 16161  0074  0875               	movf	_DimmerLightsIntr,w
 16162  0075  3E03               	addlw	3
 16163  0076  0086               	movwf	6
 16164  0077  3001               	movlw	1	; select bank2/3
 16165  0078  0087               	movwf	7
 16166  0079  0181               	clrf	1
 16167                           
 16168                           ;Dimmer_B1.c: 103: DimmerLightsIntr->GO = 0;
 16169  007A  0875               	movf	_DimmerLightsIntr,w
 16170  007B  0086               	movwf	6
 16171  007C  3001               	movlw	1	; select bank2/3
 16172  007D  0087               	movwf	7
 16173  007E  1001               	bcf	1,0
 16174                           
 16175                           ;Dimmer_B1.c: 105: if (DimmerLightsIntr->StatusFlag == 1) {
 16176  007F  0875               	movf	_DimmerLightsIntr,w
 16177  0080  0086               	movwf	6
 16178  0081  3001               	movlw	1	; select bank2/3
 16179  0082  0087               	movwf	7
 16180  0083  1F01               	btfss	1,6
 16181  0084  29B2               	goto	i1l7127
 16182                           
 16183                           ;Dimmer_B1.c: 106: DimmerLightsIntr->Flag = 1;
 16184  0085  0875               	movf	_DimmerLightsIntr,w
 16185  0086  3E08               	addlw	8
 16186  0087  0086               	movwf	6
 16187  0088  3001               	movlw	1	; select bank2/3
 16188  0089  0087               	movwf	7
 16189  008A  1401               	bsf	1,0
 16190                           
 16191                           ;Dimmer_B1.c: 107: DimmerLightsIntr->Triac = 1;
 16192  008B  0875               	movf	_DimmerLightsIntr,w
 16193  008C  3E08               	addlw	8
 16194  008D  0086               	movwf	6
 16195  008E  3001               	movlw	1	; select bank2/3
 16196  008F  0087               	movwf	7
 16197  0090  1681               	bsf	1,5
 16198                           
 16199                           ;Dimmer_B1.c: 109: if (lights == 1) {
 16200  0091  087A               	movf	setDimmerLights_IntrControl@lights,w
 16201  0092  3A01               	xorlw	1
 16202  0093  1D03               	skipz
 16203  0094  2897               	goto	i1l7053
 16204                           
 16205                           ;Dimmer_B1.c: 110: RB4 = 1;
 16206  0095  0020               	movlb	0	; select bank0
 16207  0096  160D               	bsf	13,4	;volatile
 16208  0097                     i1l7053:	
 16209                           ;Dimmer_B1.c: 111: ;;
 16210                           
 16211                           
 16212                           ;Dimmer_B1.c: 112: }
 16213                           ;Dimmer_B1.c: 115: if (lights == 2) {
 16214  0097  087A               	movf	setDimmerLights_IntrControl@lights,w
 16215  0098  3A02               	xorlw	2
 16216  0099  1D03               	skipz
 16217  009A  289D               	goto	i1l7057
 16218                           
 16219                           ;Dimmer_B1.c: 116: RA7 = 1;
 16220  009B  0020               	movlb	0	; select bank0
 16221  009C  178C               	bsf	12,7	;volatile
 16222  009D                     i1l7057:	
 16223                           
 16224                           ;Dimmer_B1.c: 117: }
 16225                           ;Dimmer_B1.c: 120: if (lights == 3) {
 16226  009D  087A               	movf	setDimmerLights_IntrControl@lights,w
 16227  009E  3A03               	xorlw	3
 16228  009F  1D03               	skipz
 16229  00A0  29B2               	goto	i1l7127
 16230                           
 16231                           ;Dimmer_B1.c: 121: RB1 = 1;
 16232  00A1  0020               	movlb	0	; select bank0
 16233  00A2  148D               	bsf	13,1	;volatile
 16234                           
 16235                           ;Dimmer_B1.c: 122: }
 16236                           ;Dimmer_B1.c: 124: }
 16237                           ;Dimmer_B1.c: 125: }
 16238                           ;Dimmer_B1.c: 126: } else {
 16239  00A3  29B2               	goto	i1l7127
 16240  00A4                     i1l7061:	
 16241                           
 16242                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Flag == 1) {
 16243  00A4  0875               	movf	_DimmerLightsIntr,w
 16244  00A5  3E08               	addlw	8
 16245  00A6  0086               	movwf	6
 16246  00A7  3001               	movlw	1	; select bank2/3
 16247  00A8  0087               	movwf	7
 16248  00A9  1C01               	btfss	1,0
 16249  00AA  29B2               	goto	i1l7127
 16250                           
 16251                           ;Dimmer_B1.c: 128: DimmerLightsIntr->Flag = 0;
 16252  00AB  0875               	movf	_DimmerLightsIntr,w
 16253  00AC  3E08               	addlw	8
 16254  00AD  0086               	movwf	6
 16255  00AE  3001               	movlw	1	; select bank2/3
 16256  00AF  0087               	movwf	7
 16257  00B0  1001               	bcf	1,0
 16258                           
 16259                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->Signal == 1) {
 16260  00B1  0875               	movf	_DimmerLightsIntr,w
 16261  00B2  0086               	movwf	6
 16262  00B3  3001               	movlw	1	; select bank2/3
 16263  00B4  0087               	movwf	7
 16264  00B5  1C81               	btfss	1,1
 16265  00B6  29B2               	goto	i1l7127
 16266                           
 16267                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime++;
 16268  00B7  3001               	movlw	1
 16269  00B8  00F8               	movwf	??_setDimmerLights_IntrControl
 16270  00B9  0A75               	incf	_DimmerLightsIntr,w
 16271  00BA  0086               	movwf	6
 16272  00BB  3001               	movlw	1	; select bank2/3
 16273  00BC  0087               	movwf	7
 16274  00BD  0878               	movf	??_setDimmerLights_IntrControl,w
 16275  00BE  0781               	addwf	1,f
 16276                           
 16277                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16278  00BF  0A75               	incf	_DimmerLightsIntr,w
 16279  00C0  0086               	movwf	6
 16280  00C1  3001               	movlw	1	; select bank2/3
 16281  00C2  0087               	movwf	7
 16282  00C3  0875               	movf	_DimmerLightsIntr,w
 16283  00C4  3E02               	addlw	2
 16284  00C5  0084               	movwf	4
 16285  00C6  3001               	movlw	1	; select bank2/3
 16286  00C7  0085               	movwf	5
 16287  00C8  0800               	movf	0,w
 16288  00C9  0201               	subwf	1,w
 16289  00CA  1C03               	skipc
 16290  00CB  29B2               	goto	i1l7127
 16291                           
 16292                           ;Dimmer_B1.c: 132: DimmerLightsIntr->DimmingTime = 0;
 16293  00CC  0A75               	incf	_DimmerLightsIntr,w
 16294  00CD  0086               	movwf	6
 16295  00CE  3001               	movlw	1	; select bank2/3
 16296  00CF  0087               	movwf	7
 16297  00D0  0181               	clrf	1
 16298                           
 16299                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->AdjFlag == 1) {
 16300  00D1  0875               	movf	_DimmerLightsIntr,w
 16301  00D2  0086               	movwf	6
 16302  00D3  3001               	movlw	1	; select bank2/3
 16303  00D4  0087               	movwf	7
 16304  00D5  1D81               	btfss	1,3
 16305  00D6  290D               	goto	i1l7087
 16306                           
 16307                           ;Dimmer_B1.c: 134: if (DimmerLightsIntr->AdjStatus == 0) {
 16308  00D7  0875               	movf	_DimmerLightsIntr,w
 16309  00D8  0086               	movwf	6
 16310  00D9  3001               	movlw	1	; select bank2/3
 16311  00DA  0087               	movwf	7
 16312  00DB  1A01               	btfsc	1,4
 16313  00DC  28F4               	goto	i1l7081
 16314                           
 16315                           ;Dimmer_B1.c: 135: if (DimmerLightsIntr->DimmingValue > ((char)((100-90)*0.8))) {
 16316  00DD  0875               	movf	_DimmerLightsIntr,w
 16317  00DE  3E04               	addlw	4
 16318  00DF  0086               	movwf	6
 16319  00E0  3001               	movlw	1	; select bank2/3
 16320  00E1  0087               	movwf	7
 16321  00E2  3009               	movlw	9
 16322  00E3  0201               	subwf	1,w
 16323  00E4  1C03               	skipc
 16324  00E5  28EE               	goto	i1l7079
 16325                           
 16326                           ;Dimmer_B1.c: 136: DimmerLightsIntr->DimmingValue--;
 16327  00E6  0875               	movf	_DimmerLightsIntr,w
 16328  00E7  3E04               	addlw	4
 16329  00E8  0086               	movwf	6
 16330  00E9  3001               	movlw	1	; select bank2/3
 16331  00EA  0087               	movwf	7
 16332  00EB  3001               	movlw	1
 16333  00EC  0281               	subwf	1,f
 16334                           
 16335                           ;Dimmer_B1.c: 137: } else {
 16336  00ED  29B2               	goto	i1l7127
 16337  00EE                     i1l7079:	
 16338                           
 16339                           ;Dimmer_B1.c: 138: DimmerLightsIntr->AdjStatus = 1;
 16340  00EE  0875               	movf	_DimmerLightsIntr,w
 16341  00EF  0086               	movwf	6
 16342  00F0  3001               	movlw	1	; select bank2/3
 16343  00F1  0087               	movwf	7
 16344  00F2  1601               	bsf	1,4
 16345                           
 16346                           ;Dimmer_B1.c: 139: }
 16347                           ;Dimmer_B1.c: 140: } else {
 16348  00F3  29B2               	goto	i1l7127
 16349  00F4                     i1l7081:	
 16350                           
 16351                           ;Dimmer_B1.c: 141: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 16352  00F4  0875               	movf	_DimmerLightsIntr,w
 16353  00F5  3E04               	addlw	4
 16354  00F6  0086               	movwf	6
 16355  00F7  3001               	movlw	1	; select bank2/3
 16356  00F8  0087               	movwf	7
 16357  00F9  303C               	movlw	60
 16358  00FA  0201               	subwf	1,w
 16359  00FB  1803               	skipnc
 16360  00FC  2907               	goto	i1l7085
 16361                           
 16362                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 16363  00FD  3001               	movlw	1
 16364  00FE  00F8               	movwf	??_setDimmerLights_IntrControl
 16365  00FF  0875               	movf	_DimmerLightsIntr,w
 16366  0100  3E04               	addlw	4
 16367  0101  0086               	movwf	6
 16368  0102  3001               	movlw	1	; select bank2/3
 16369  0103  0087               	movwf	7
 16370  0104  0878               	movf	??_setDimmerLights_IntrControl,w
 16371  0105  0781               	addwf	1,f
 16372                           
 16373                           ;Dimmer_B1.c: 143: } else {
 16374  0106  29B2               	goto	i1l7127
 16375  0107                     i1l7085:	
 16376                           
 16377                           ;Dimmer_B1.c: 144: DimmerLightsIntr->AdjStatus = 0;
 16378  0107  0875               	movf	_DimmerLightsIntr,w
 16379  0108  0086               	movwf	6
 16380  0109  3001               	movlw	1	; select bank2/3
 16381  010A  0087               	movwf	7
 16382  010B  1201               	bcf	1,4
 16383                           
 16384                           ;Dimmer_B1.c: 145: }
 16385                           ;Dimmer_B1.c: 146: }
 16386                           ;Dimmer_B1.c: 147: } else if (DimmerLightsIntr->AdjRF == 1) {
 16387  010C  29B2               	goto	i1l7127
 16388  010D                     i1l7087:	
 16389  010D  0875               	movf	_DimmerLightsIntr,w
 16390  010E  0086               	movwf	6
 16391  010F  3001               	movlw	1	; select bank2/3
 16392  0110  0087               	movwf	7
 16393  0111  1D01               	btfss	1,2
 16394  0112  2954               	goto	i1l7101
 16395                           
 16396                           ;Dimmer_B1.c: 148: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16397  0113  0875               	movf	_DimmerLightsIntr,w
 16398  0114  3E05               	addlw	5
 16399  0115  0086               	movwf	6
 16400  0116  3001               	movlw	1	; select bank2/3
 16401  0117  0087               	movwf	7
 16402  0118  0875               	movf	_DimmerLightsIntr,w
 16403  0119  3E04               	addlw	4
 16404  011A  0084               	movwf	4
 16405  011B  3001               	movlw	1	; select bank2/3
 16406  011C  0085               	movwf	5
 16407  011D  0800               	movf	0,w
 16408  011E  0201               	subwf	1,w
 16409  011F  1803               	skipnc
 16410  0120  2929               	goto	i1l7093
 16411                           
 16412                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue--;
 16413  0121  0875               	movf	_DimmerLightsIntr,w
 16414  0122  3E04               	addlw	4
 16415  0123  0086               	movwf	6
 16416  0124  3001               	movlw	1	; select bank2/3
 16417  0125  0087               	movwf	7
 16418  0126  3001               	movlw	1
 16419  0127  0281               	subwf	1,f
 16420                           
 16421                           ;Dimmer_B1.c: 150: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 16422  0128  2940               	goto	i1l7097
 16423  0129                     i1l7093:	
 16424  0129  0875               	movf	_DimmerLightsIntr,w
 16425  012A  3E04               	addlw	4
 16426  012B  0086               	movwf	6
 16427  012C  3001               	movlw	1	; select bank2/3
 16428  012D  0087               	movwf	7
 16429  012E  0875               	movf	_DimmerLightsIntr,w
 16430  012F  3E05               	addlw	5
 16431  0130  0084               	movwf	4
 16432  0131  3001               	movlw	1	; select bank2/3
 16433  0132  0085               	movwf	5
 16434  0133  0800               	movf	0,w
 16435  0134  0201               	subwf	1,w
 16436  0135  1803               	skipnc
 16437  0136  2940               	goto	i1l7097
 16438                           
 16439                           ;Dimmer_B1.c: 151: DimmerLightsIntr->DimmingValue++;
 16440  0137  3001               	movlw	1
 16441  0138  00F8               	movwf	??_setDimmerLights_IntrControl
 16442  0139  0875               	movf	_DimmerLightsIntr,w
 16443  013A  3E04               	addlw	4
 16444  013B  0086               	movwf	6
 16445  013C  3001               	movlw	1	; select bank2/3
 16446  013D  0087               	movwf	7
 16447  013E  0878               	movf	??_setDimmerLights_IntrControl,w
 16448  013F  0781               	addwf	1,f
 16449  0140                     i1l7097:	
 16450                           
 16451                           ;Dimmer_B1.c: 152: }
 16452                           ;Dimmer_B1.c: 153: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16453  0140  0875               	movf	_DimmerLightsIntr,w
 16454  0141  3E05               	addlw	5
 16455  0142  0086               	movwf	6
 16456  0143  3001               	movlw	1	; select bank2/3
 16457  0144  0087               	movwf	7
 16458  0145  0875               	movf	_DimmerLightsIntr,w
 16459  0146  3E04               	addlw	4
 16460  0147  0084               	movwf	4
 16461  0148  3001               	movlw	1	; select bank2/3
 16462  0149  0085               	movwf	5
 16463  014A  0800               	movf	0,w
 16464  014B  0601               	xorwf	1,w
 16465  014C  1D03               	skipz
 16466  014D  29B2               	goto	i1l7127
 16467                           
 16468                           ;Dimmer_B1.c: 154: DimmerLightsIntr->AdjRF = 0;
 16469  014E  0875               	movf	_DimmerLightsIntr,w
 16470  014F  0086               	movwf	6
 16471  0150  3001               	movlw	1	; select bank2/3
 16472  0151  0087               	movwf	7
 16473  0152  1101               	bcf	1,2
 16474  0153  296F               	goto	i1l7107
 16475  0154                     i1l7101:	
 16476                           ;Dimmer_B1.c: 156: }
 16477                           ;Dimmer_B1.c: 157: } else {
 16478                           
 16479                           ;Dimmer_B1.c: 155: DimmerLightsIntr->Signal = 0;
 16480                           
 16481                           
 16482                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->Status == 1) {
 16483  0154  0875               	movf	_DimmerLightsIntr,w
 16484  0155  0086               	movwf	6
 16485  0156  3001               	movlw	1	; select bank2/3
 16486  0157  0087               	movwf	7
 16487  0158  1E81               	btfss	1,5
 16488  0159  2975               	goto	i1l7109
 16489                           
 16490                           ;Dimmer_B1.c: 159: DimmerLightsIntr->DimmingValue--;
 16491  015A  0875               	movf	_DimmerLightsIntr,w
 16492  015B  3E04               	addlw	4
 16493  015C  0086               	movwf	6
 16494  015D  3001               	movlw	1	; select bank2/3
 16495  015E  0087               	movwf	7
 16496  015F  3001               	movlw	1
 16497  0160  0281               	subwf	1,f
 16498                           
 16499                           ;Dimmer_B1.c: 160: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 16500  0161  0875               	movf	_DimmerLightsIntr,w
 16501  0162  3E05               	addlw	5
 16502  0163  0086               	movwf	6
 16503  0164  3001               	movlw	1	; select bank2/3
 16504  0165  0087               	movwf	7
 16505  0166  0875               	movf	_DimmerLightsIntr,w
 16506  0167  3E04               	addlw	4
 16507  0168  0084               	movwf	4
 16508  0169  3001               	movlw	1	; select bank2/3
 16509  016A  0085               	movwf	5
 16510  016B  0800               	movf	0,w
 16511  016C  0201               	subwf	1,w
 16512  016D  1C03               	skipc
 16513  016E  29B2               	goto	i1l7127
 16514  016F                     i1l7107:	
 16515                           
 16516                           ;Dimmer_B1.c: 161: DimmerLightsIntr->Signal = 0;
 16517  016F  0875               	movf	_DimmerLightsIntr,w
 16518  0170  0086               	movwf	6
 16519  0171  3001               	movlw	1	; select bank2/3
 16520  0172  0087               	movwf	7
 16521  0173  1081               	bcf	1,1
 16522                           
 16523                           ;Dimmer_B1.c: 162: }
 16524                           ;Dimmer_B1.c: 163: } else {
 16525  0174  29B2               	goto	i1l7127
 16526  0175                     i1l7109:	
 16527                           
 16528                           ;Dimmer_B1.c: 164: DimmerLightsIntr->DimmingValue++;
 16529  0175  3001               	movlw	1
 16530  0176  00F8               	movwf	??_setDimmerLights_IntrControl
 16531  0177  0875               	movf	_DimmerLightsIntr,w
 16532  0178  3E04               	addlw	4
 16533  0179  0086               	movwf	6
 16534  017A  3001               	movlw	1	; select bank2/3
 16535  017B  0087               	movwf	7
 16536  017C  0878               	movf	??_setDimmerLights_IntrControl,w
 16537  017D  0781               	addwf	1,f
 16538                           
 16539                           ;Dimmer_B1.c: 165: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 16540  017E  0875               	movf	_DimmerLightsIntr,w
 16541  017F  3E04               	addlw	4
 16542  0180  0086               	movwf	6
 16543  0181  3001               	movlw	1	; select bank2/3
 16544  0182  0087               	movwf	7
 16545  0183  0875               	movf	_DimmerLightsIntr,w
 16546  0184  3E06               	addlw	6
 16547  0185  0084               	movwf	4
 16548  0186  3001               	movlw	1	; select bank2/3
 16549  0187  0085               	movwf	5
 16550  0188  0800               	movf	0,w
 16551  0189  0201               	subwf	1,w
 16552  018A  1C03               	skipc
 16553  018B  29B2               	goto	i1l7127
 16554                           
 16555                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Signal = 0;
 16556  018C  0875               	movf	_DimmerLightsIntr,w
 16557  018D  0086               	movwf	6
 16558  018E  3001               	movlw	1	; select bank2/3
 16559  018F  0087               	movwf	7
 16560  0190  1081               	bcf	1,1
 16561                           
 16562                           ;Dimmer_B1.c: 167: DimmerLightsIntr->StatusFlag = 0;
 16563  0191  0875               	movf	_DimmerLightsIntr,w
 16564  0192  0086               	movwf	6
 16565  0193  3001               	movlw	1	; select bank2/3
 16566  0194  0087               	movwf	7
 16567  0195  1301               	bcf	1,6
 16568                           
 16569                           ;Dimmer_B1.c: 168: DimmerLightsIntr->Clear = 1;
 16570  0196  0875               	movf	_DimmerLightsIntr,w
 16571  0197  3E09               	addlw	9
 16572  0198  0086               	movwf	6
 16573  0199  3001               	movlw	1	; select bank2/3
 16574  019A  0087               	movwf	7
 16575  019B  1501               	bsf	1,2
 16576                           
 16577                           ;Dimmer_B1.c: 169: Dimmer->Detect = 1;
 16578  019C  0873               	movf	_Dimmer,w
 16579  019D  0086               	movwf	6
 16580  019E  0187               	clrf	7
 16581  019F  1401               	bsf	1,0
 16582                           
 16583                           ;Dimmer_B1.c: 171: if (lights == 1) {
 16584  01A0  087A               	movf	setDimmerLights_IntrControl@lights,w
 16585  01A1  3A01               	xorlw	1
 16586  01A2  1D03               	skipz
 16587  01A3  29A6               	goto	i1l7119
 16588                           
 16589                           ;Dimmer_B1.c: 172: RC7 = 0;
 16590  01A4  0020               	movlb	0	; select bank0
 16591  01A5  138E               	bcf	14,7	;volatile
 16592  01A6                     i1l7119:	
 16593                           
 16594                           ;Dimmer_B1.c: 174: }
 16595                           ;Dimmer_B1.c: 177: if (lights == 2) {
 16596  01A6  087A               	movf	setDimmerLights_IntrControl@lights,w
 16597  01A7  3A02               	xorlw	2
 16598  01A8  1D03               	skipz
 16599  01A9  29AC               	goto	i1l7123
 16600                           
 16601                           ;Dimmer_B1.c: 178: RA3 = 0;
 16602  01AA  0020               	movlb	0	; select bank0
 16603  01AB  118C               	bcf	12,3	;volatile
 16604  01AC                     i1l7123:	
 16605                           
 16606                           ;Dimmer_B1.c: 179: }
 16607                           ;Dimmer_B1.c: 182: if (lights == 3) {
 16608  01AC  087A               	movf	setDimmerLights_IntrControl@lights,w
 16609  01AD  3A03               	xorlw	3
 16610  01AE  1D03               	skipz
 16611  01AF  29B2               	goto	i1l7127
 16612                           
 16613                           ;Dimmer_B1.c: 183: RC6 = 0;
 16614  01B0  0020               	movlb	0	; select bank0
 16615  01B1  130E               	bcf	14,6	;volatile
 16616  01B2                     i1l7127:	
 16617                           ;Dimmer_B1.c: 184: }
 16618                           ;Dimmer_B1.c: 186: ;;
 16619                           
 16620                           
 16621                           ;Dimmer_B1.c: 187: }
 16622                           ;Dimmer_B1.c: 188: }
 16623                           ;Dimmer_B1.c: 189: }
 16624                           ;Dimmer_B1.c: 190: }
 16625                           ;Dimmer_B1.c: 191: }
 16626                           ;Dimmer_B1.c: 192: }
 16627                           ;Dimmer_B1.c: 193: }
 16628                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->Triac == 1) {
 16629  01B2  0875               	movf	_DimmerLightsIntr,w
 16630  01B3  3E08               	addlw	8
 16631  01B4  0086               	movwf	6
 16632  01B5  3001               	movlw	1	; select bank2/3
 16633  01B6  0087               	movwf	7
 16634  01B7  1E81               	btfss	1,5
 16635  01B8  29E9               	goto	i1l7149
 16636                           
 16637                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime++;
 16638  01B9  3001               	movlw	1
 16639  01BA  00F8               	movwf	??_setDimmerLights_IntrControl
 16640  01BB  0875               	movf	_DimmerLightsIntr,w
 16641  01BC  3E07               	addlw	7
 16642  01BD  0086               	movwf	6
 16643  01BE  3001               	movlw	1	; select bank2/3
 16644  01BF  0087               	movwf	7
 16645  01C0  0878               	movf	??_setDimmerLights_IntrControl,w
 16646  01C1  0781               	addwf	1,f
 16647                           
 16648                           ;Dimmer_B1.c: 196: if (DimmerLightsIntr->TriacTime >= 5) {
 16649  01C2  0875               	movf	_DimmerLightsIntr,w
 16650  01C3  3E07               	addlw	7
 16651  01C4  0086               	movwf	6
 16652  01C5  3001               	movlw	1	; select bank2/3
 16653  01C6  0087               	movwf	7
 16654  01C7  3005               	movlw	5
 16655  01C8  0201               	subwf	1,w
 16656  01C9  1C03               	skipc
 16657  01CA  29E9               	goto	i1l7149
 16658                           
 16659                           ;Dimmer_B1.c: 197: DimmerLightsIntr->TriacTime = 0;
 16660  01CB  0875               	movf	_DimmerLightsIntr,w
 16661  01CC  3E07               	addlw	7
 16662  01CD  0086               	movwf	6
 16663  01CE  3001               	movlw	1	; select bank2/3
 16664  01CF  0087               	movwf	7
 16665  01D0  0181               	clrf	1
 16666                           
 16667                           ;Dimmer_B1.c: 198: DimmerLightsIntr->Triac = 0;
 16668  01D1  0875               	movf	_DimmerLightsIntr,w
 16669  01D2  3E08               	addlw	8
 16670  01D3  0086               	movwf	6
 16671  01D4  3001               	movlw	1	; select bank2/3
 16672  01D5  0087               	movwf	7
 16673  01D6  1281               	bcf	1,5
 16674                           
 16675                           ;Dimmer_B1.c: 201: if (lights == 1) {
 16676  01D7  087A               	movf	setDimmerLights_IntrControl@lights,w
 16677  01D8  3A01               	xorlw	1
 16678  01D9  1D03               	skipz
 16679  01DA  29DD               	goto	i1l7141
 16680                           
 16681                           ;Dimmer_B1.c: 202: RB4 = 0;
 16682  01DB  0020               	movlb	0	; select bank0
 16683  01DC  120D               	bcf	13,4	;volatile
 16684  01DD                     i1l7141:	
 16685                           ;Dimmer_B1.c: 203: ;;
 16686                           
 16687                           
 16688                           ;Dimmer_B1.c: 204: }
 16689                           ;Dimmer_B1.c: 207: if (lights == 2) {
 16690  01DD  087A               	movf	setDimmerLights_IntrControl@lights,w
 16691  01DE  3A02               	xorlw	2
 16692  01DF  1D03               	skipz
 16693  01E0  29E3               	goto	i1l7145
 16694                           
 16695                           ;Dimmer_B1.c: 208: RA7 = 0;
 16696  01E1  0020               	movlb	0	; select bank0
 16697  01E2  138C               	bcf	12,7	;volatile
 16698  01E3                     i1l7145:	
 16699                           
 16700                           ;Dimmer_B1.c: 209: }
 16701                           ;Dimmer_B1.c: 212: if (lights == 3) {
 16702  01E3  087A               	movf	setDimmerLights_IntrControl@lights,w
 16703  01E4  3A03               	xorlw	3
 16704  01E5  1D03               	skipz
 16705  01E6  29E9               	goto	i1l7149
 16706                           
 16707                           ;Dimmer_B1.c: 213: RB1 = 0;
 16708  01E7  0020               	movlb	0	; select bank0
 16709  01E8  108D               	bcf	13,1	;volatile
 16710  01E9                     i1l7149:	
 16711                           
 16712                           ;Dimmer_B1.c: 214: }
 16713                           ;Dimmer_B1.c: 216: }
 16714                           ;Dimmer_B1.c: 217: }
 16715                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacFlag == 1) {
 16716  01E9  0875               	movf	_DimmerLightsIntr,w
 16717  01EA  3E09               	addlw	9
 16718  01EB  0086               	movwf	6
 16719  01EC  3001               	movlw	1	; select bank2/3
 16720  01ED  0087               	movwf	7
 16721  01EE  1E81               	btfss	1,5
 16722  01EF  0008               	return
 16723                           
 16724                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount++;
 16725  01F0  3001               	movlw	1
 16726  01F1  00F8               	movwf	??_setDimmerLights_IntrControl
 16727  01F2  0875               	movf	_DimmerLightsIntr,w
 16728  01F3  3E0A               	addlw	10
 16729  01F4  0086               	movwf	6
 16730  01F5  3001               	movlw	1	; select bank2/3
 16731  01F6  0087               	movwf	7
 16732  01F7  0878               	movf	??_setDimmerLights_IntrControl,w
 16733  01F8  0781               	addwf	1,f
 16734                           
 16735                           ;Dimmer_B1.c: 220: if (DimmerLightsIntr->TriacCount == 70) {
 16736  01F9  0875               	movf	_DimmerLightsIntr,w
 16737  01FA  3E0A               	addlw	10
 16738  01FB  0086               	movwf	6
 16739  01FC  3001               	movlw	1	; select bank2/3
 16740  01FD  0087               	movwf	7
 16741  01FE  0801               	movf	1,w
 16742  01FF  3A46               	xorlw	70
 16743  0200  1D03               	skipz
 16744  0201  0008               	return
 16745                           
 16746                           ;Dimmer_B1.c: 221: DimmerLightsIntr->TriacCount = 0;
 16747  0202  0875               	movf	_DimmerLightsIntr,w
 16748  0203  3E0A               	addlw	10
 16749  0204  0086               	movwf	6
 16750  0205  3001               	movlw	1	; select bank2/3
 16751  0206  0087               	movwf	7
 16752  0207  0181               	clrf	1
 16753                           
 16754                           ;Dimmer_B1.c: 222: DimmerLightsIntr->TriacFlag = 0;
 16755  0208  0875               	movf	_DimmerLightsIntr,w
 16756  0209  3E09               	addlw	9
 16757  020A  0086               	movwf	6
 16758  020B  3001               	movlw	1	; select bank2/3
 16759  020C  0087               	movwf	7
 16760  020D  1281               	bcf	1,5
 16761  020E  0008               	return
 16762  020F                     __end_of_setDimmerLights_IntrControl:	
 16763                           
 16764                           	psect	text111
 16765  10E3                     __ptext111:	
 16766 ;; *************** function _DimmerIntrPointSelect *****************
 16767 ;; Defined at:
 16768 ;;		line 74 in file "../src/Dimmer_B1.c"
 16769 ;; Parameters:    Size  Location     Type
 16770 ;;  lights          1    wreg     unsigned char 
 16771 ;; Auto vars:     Size  Location     Type
 16772 ;;  lights          1    1[COMMON] unsigned char 
 16773 ;; Return value:  Size  Location     Type
 16774 ;;		None               void
 16775 ;; Registers used:
 16776 ;;		wreg
 16777 ;; Tracked objects:
 16778 ;;		On entry : 0/0
 16779 ;;		On exit  : 0/0
 16780 ;;		Unchanged: 0/0
 16781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16785 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16786 ;;Total ram usage:        2 bytes
 16787 ;; Hardware stack levels used:    1
 16788 ;; This function calls:
 16789 ;;		Nothing
 16790 ;; This function is called by:
 16791 ;;		_setDimmerLights_IntrControl
 16792 ;; This function uses a non-reentrant model
 16793 ;;
 16794                           
 16795                           
 16796                           ;psect for function _DimmerIntrPointSelect
 16797  10E3                     _DimmerIntrPointSelect:	
 16798                           
 16799                           ;incstack = 0
 16800                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16801                           ;DimmerIntrPointSelect@lights stored from wreg
 16802  10E3  00F7               	movwf	DimmerIntrPointSelect@lights
 16803                           
 16804                           ;Dimmer_B1.c: 76: if (lights == 1) {
 16805  10E4  0877               	movf	DimmerIntrPointSelect@lights,w
 16806  10E5  3A01               	xorlw	1
 16807  10E6  1D03               	skipz
 16808  10E7  28EC               	goto	i1l823
 16809                           
 16810                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 16811  10E8  303D               	movlw	_DimmerLights1& (0+255)
 16812  10E9  00F6               	movwf	??_DimmerIntrPointSelect
 16813  10EA  0876               	movf	??_DimmerIntrPointSelect,w
 16814  10EB  00F5               	movwf	_DimmerLightsIntr
 16815  10EC                     i1l823:	
 16816                           
 16817                           ;Dimmer_B1.c: 78: }
 16818                           ;Dimmer_B1.c: 81: if (lights == 2) {
 16819  10EC  0877               	movf	DimmerIntrPointSelect@lights,w
 16820  10ED  3A02               	xorlw	2
 16821  10EE  1D03               	skipz
 16822  10EF  28F4               	goto	i1l824
 16823                           
 16824                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 16825  10F0  304C               	movlw	_DimmerLights2& (0+255)
 16826  10F1  00F6               	movwf	??_DimmerIntrPointSelect
 16827  10F2  0876               	movf	??_DimmerIntrPointSelect,w
 16828  10F3  00F5               	movwf	_DimmerLightsIntr
 16829  10F4                     i1l824:	
 16830                           
 16831                           ;Dimmer_B1.c: 83: }
 16832                           ;Dimmer_B1.c: 87: if (lights == 3) {
 16833  10F4  0877               	movf	DimmerIntrPointSelect@lights,w
 16834  10F5  3A03               	xorlw	3
 16835  10F6  1D03               	skipz
 16836  10F7  0008               	return
 16837                           
 16838                           ;Dimmer_B1.c: 88: DimmerLightsIntr = &DimmerLights3;
 16839  10F8  305B               	movlw	_DimmerLights3& (0+255)
 16840  10F9  00F6               	movwf	??_DimmerIntrPointSelect
 16841  10FA  0876               	movf	??_DimmerIntrPointSelect,w
 16842  10FB  00F5               	movwf	_DimmerLightsIntr
 16843  10FC  0008               	return
 16844  10FD                     __end_of_DimmerIntrPointSelect:	
 16845                           
 16846                           	psect	text112
 16847  1E91                     __ptext112:	
 16848 ;; *************** function _IOC_ISR *****************
 16849 ;; Defined at:
 16850 ;;		line 297 in file "../src/MCU_B1.c"
 16851 ;; Parameters:    Size  Location     Type
 16852 ;;		None
 16853 ;; Auto vars:     Size  Location     Type
 16854 ;;		None
 16855 ;; Return value:  Size  Location     Type
 16856 ;;		None               void
 16857 ;; Registers used:
 16858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16859 ;; Tracked objects:
 16860 ;;		On entry : 0/0
 16861 ;;		On exit  : 0/0
 16862 ;;		Unchanged: 0/0
 16863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16868 ;;Total ram usage:        0 bytes
 16869 ;; Hardware stack levels used:    1
 16870 ;; Hardware stack levels required when called:    3
 16871 ;; This function calls:
 16872 ;;		_setDimmerReClock
 16873 ;; This function is called by:
 16874 ;;		_ISR
 16875 ;; This function uses a non-reentrant model
 16876 ;;
 16877                           
 16878                           
 16879                           ;psect for function _IOC_ISR
 16880  1E91                     _IOC_ISR:	
 16881                           
 16882                           ;MCU_B1.c: 298: if (IOCIE == 1 && IOCBF2 == 1) {
 16883                           
 16884                           ;incstack = 0
 16885                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16886  1E91  1D8B               	btfss	11,3	;volatile
 16887  1E92  0008               	return
 16888  1E93  0027               	movlb	7	; select bank7
 16889  1E94  1D16               	btfss	22,2	;volatile
 16890  1E95  0008               	return
 16891                           
 16892                           ;MCU_B1.c: 299: IOCBF2 = 0;
 16893  1E96  1116               	bcf	22,2	;volatile
 16894                           
 16895                           ;MCU_B1.c: 300: IOCIF = 0;
 16896  1E97  100B               	bcf	11,0	;volatile
 16897                           
 16898                           ;MCU_B1.c: 301: if (myMain.PowerON == 1) {
 16899  1E98  0021               	movlb	1	; select bank1
 16900  1E99  1C20               	btfss	_myMain^(0+128),0
 16901  1E9A  0008               	return
 16902                           
 16903                           ;MCU_B1.c: 303: setDimmerReClock();
 16904  1E9B  319E  2661         	fcall	_setDimmerReClock
 16905  1E9D  0008               	return
 16906  1E9E                     __end_of_IOC_ISR:	
 16907                           
 16908                           	psect	text113
 16909  1E61                     __ptext113:	
 16910 ;; *************** function _setDimmerReClock *****************
 16911 ;; Defined at:
 16912 ;;		line 169 in file "../src/MCU_B1.c"
 16913 ;; Parameters:    Size  Location     Type
 16914 ;;		None
 16915 ;; Auto vars:     Size  Location     Type
 16916 ;;		None
 16917 ;; Return value:  Size  Location     Type
 16918 ;;		None               void
 16919 ;; Registers used:
 16920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16921 ;; Tracked objects:
 16922 ;;		On entry : 0/0
 16923 ;;		On exit  : 0/0
 16924 ;;		Unchanged: 0/0
 16925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;Total ram usage:        0 bytes
 16931 ;; Hardware stack levels used:    1
 16932 ;; Hardware stack levels required when called:    2
 16933 ;; This function calls:
 16934 ;;		_setDimmerLights_IntrIOC_GO
 16935 ;; This function is called by:
 16936 ;;		_IOC_ISR
 16937 ;; This function uses a non-reentrant model
 16938 ;;
 16939                           
 16940                           
 16941                           ;psect for function _setDimmerReClock
 16942  1E61                     _setDimmerReClock:	
 16943                           
 16944                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 16945                           
 16946                           ;incstack = 0
 16947                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16948  1E61  3001               	movlw	1
 16949  1E62  3194  248C  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16950                           
 16951                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(2);
 16952  1E65  3002               	movlw	2
 16953  1E66  3194  248C  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16954                           
 16955                           ;MCU_B1.c: 182: setDimmerLights_IntrIOC_GO(3);
 16956  1E69  3003               	movlw	3
 16957  1E6A  3194  248C         	fcall	_setDimmerLights_IntrIOC_GO
 16958  1E6C  0008               	return
 16959  1E6D                     __end_of_setDimmerReClock:	
 16960                           
 16961                           	psect	text114
 16962  148C                     __ptext114:	
 16963 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16964 ;; Defined at:
 16965 ;;		line 28 in file "../src/Dimmer_B1.c"
 16966 ;; Parameters:    Size  Location     Type
 16967 ;;  lights          1    wreg     unsigned char 
 16968 ;; Auto vars:     Size  Location     Type
 16969 ;;  lights          1    2[COMMON] unsigned char 
 16970 ;; Return value:  Size  Location     Type
 16971 ;;		None               void
 16972 ;; Registers used:
 16973 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16974 ;; Tracked objects:
 16975 ;;		On entry : 0/0
 16976 ;;		On exit  : 0/0
 16977 ;;		Unchanged: 0/0
 16978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16983 ;;Total ram usage:        1 bytes
 16984 ;; Hardware stack levels used:    1
 16985 ;; Hardware stack levels required when called:    1
 16986 ;; This function calls:
 16987 ;;		_DimmerIntrIOCPointSelect
 16988 ;; This function is called by:
 16989 ;;		_setDimmerReClock
 16990 ;; This function uses a non-reentrant model
 16991 ;;
 16992                           
 16993                           
 16994                           ;psect for function _setDimmerLights_IntrIOC_GO
 16995  148C                     _setDimmerLights_IntrIOC_GO:	
 16996                           
 16997                           ;incstack = 0
 16998                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16999                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17000  148C  00F8               	movwf	setDimmerLights_IntrIOC_GO@lights
 17001                           
 17002                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 17003  148D  0878               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17004  148E  3191  214C  3194   	fcall	_DimmerIntrIOCPointSelect
 17005                           
 17006                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17007  1491  0021               	movlb	1	; select bank1
 17008  1492  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 17009  1493  0086               	movwf	6
 17010  1494  3001               	movlw	1	; select bank2/3
 17011  1495  0087               	movwf	7
 17012  1496  1801               	btfsc	1,0
 17013  1497  0008               	return
 17014  1498  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 17015  1499  3E09               	addlw	9
 17016  149A  0086               	movwf	6
 17017  149B  3001               	movlw	1	; select bank2/3
 17018  149C  0087               	movwf	7
 17019  149D  1A81               	btfsc	1,5
 17020  149E  0008               	return
 17021                           
 17022                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 17023  149F  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 17024  14A0  0086               	movwf	6
 17025  14A1  3001               	movlw	1	; select bank2/3
 17026  14A2  0087               	movwf	7
 17027  14A3  1401               	bsf	1,0
 17028                           
 17029                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 17030  14A4  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 17031  14A5  3E09               	addlw	9
 17032  14A6  0086               	movwf	6
 17033  14A7  3001               	movlw	1	; select bank2/3
 17034  14A8  0087               	movwf	7
 17035  14A9  1681               	bsf	1,5
 17036                           
 17037                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 17038  14AA  0020               	movlb	0	; select bank0
 17039  14AB  1D0D               	btfss	13,2	;volatile
 17040  14AC  2CB4               	goto	i1l6627
 17041                           
 17042                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 17043  14AD  0873               	movf	_Dimmer,w
 17044  14AE  3E02               	addlw	2
 17045  14AF  0086               	movwf	6
 17046  14B0  0187               	clrf	7
 17047  14B1  0181               	clrf	1
 17048  14B2  0A81               	incf	1,f
 17049                           
 17050                           ;Dimmer_B1.c: 37: } else {
 17051  14B3  2CB9               	goto	i1l6629
 17052  14B4                     i1l6627:	
 17053                           
 17054                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 17055  14B4  0873               	movf	_Dimmer,w
 17056  14B5  3E02               	addlw	2
 17057  14B6  0086               	movwf	6
 17058  14B7  0187               	clrf	7
 17059  14B8  0181               	clrf	1
 17060  14B9                     i1l6629:	
 17061                           
 17062                           ;Dimmer_B1.c: 39: }
 17063                           ;Dimmer_B1.c: 40: if (lights == 1) {
 17064  14B9  0878               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17065  14BA  3A01               	xorlw	1
 17066  14BB  1D03               	skipz
 17067  14BC  0008               	return
 17068                           
 17069                           ;Dimmer_B1.c: 41: RB5 = RB5 == 1 ? 0 : 1;
 17070  14BD  3020               	movlw	32
 17071  14BE  068D               	xorwf	13,f
 17072  14BF  0008               	return
 17073  14C0                     __end_of_setDimmerLights_IntrIOC_GO:	
 17074                           
 17075                           	psect	text115
 17076  114C                     __ptext115:	
 17077 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17078 ;; Defined at:
 17079 ;;		line 8 in file "../src/Dimmer_B1.c"
 17080 ;; Parameters:    Size  Location     Type
 17081 ;;  lights          1    wreg     unsigned char 
 17082 ;; Auto vars:     Size  Location     Type
 17083 ;;  lights          1    1[COMMON] unsigned char 
 17084 ;; Return value:  Size  Location     Type
 17085 ;;		None               void
 17086 ;; Registers used:
 17087 ;;		wreg
 17088 ;; Tracked objects:
 17089 ;;		On entry : 0/0
 17090 ;;		On exit  : 0/0
 17091 ;;		Unchanged: 0/0
 17092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17095 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17096 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17097 ;;Total ram usage:        2 bytes
 17098 ;; Hardware stack levels used:    1
 17099 ;; This function calls:
 17100 ;;		Nothing
 17101 ;; This function is called by:
 17102 ;;		_setDimmerLights_IntrIOC_GO
 17103 ;; This function uses a non-reentrant model
 17104 ;;
 17105                           
 17106                           
 17107                           ;psect for function _DimmerIntrIOCPointSelect
 17108  114C                     _DimmerIntrIOCPointSelect:	
 17109                           
 17110                           ;incstack = 0
 17111                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17112                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17113  114C  00F7               	movwf	DimmerIntrIOCPointSelect@lights
 17114                           
 17115                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17116  114D  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17117  114E  3A01               	xorlw	1
 17118  114F  1D03               	skipz
 17119  1150  2956               	goto	i1l810
 17120                           
 17121                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17122  1151  303D               	movlw	_DimmerLights1& (0+255)
 17123  1152  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17124  1153  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17125  1154  0021               	movlb	1	; select bank1
 17126  1155  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 17127  1156                     i1l810:	
 17128                           
 17129                           ;Dimmer_B1.c: 12: }
 17130                           ;Dimmer_B1.c: 15: if (lights == 2) {
 17131  1156  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17132  1157  3A02               	xorlw	2
 17133  1158  1D03               	skipz
 17134  1159  295F               	goto	i1l811
 17135                           
 17136                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 17137  115A  304C               	movlw	_DimmerLights2& (0+255)
 17138  115B  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17139  115C  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17140  115D  0021               	movlb	1	; select bank1
 17141  115E  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 17142  115F                     i1l811:	
 17143                           
 17144                           ;Dimmer_B1.c: 17: }
 17145                           ;Dimmer_B1.c: 21: if (lights == 3) {
 17146  115F  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17147  1160  3A03               	xorlw	3
 17148  1161  1D03               	skipz
 17149  1162  0008               	return
 17150                           
 17151                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 17152  1163  305B               	movlw	_DimmerLights3& (0+255)
 17153  1164  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17154  1165  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17155  1166  0021               	movlb	1	; select bank1
 17156  1167  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 17157  1168  0008               	return
 17158  1169                     __end_of_DimmerIntrIOCPointSelect:	
 17159  007E                     btemp	set	126	;btemp
 17160  007E                     pic14e$flags	set	126
 17161  007E                     wtemp	set	126
 17162  007E                     wtemp0	set	126
 17163  0080                     wtemp1	set	128
 17164  0082                     wtemp2	set	130
 17165  0084                     wtemp3	set	132
 17166  0086                     wtemp4	set	134
 17167  0088                     wtemp5	set	136
 17168  007F                     wtemp6	set	127
 17169  007E                     ttemp	set	126
 17170  007E                     ttemp0	set	126
 17171  0081                     ttemp1	set	129
 17172  0084                     ttemp2	set	132
 17173  0087                     ttemp3	set	135
 17174  007F                     ttemp4	set	127
 17175  007E                     ltemp	set	126
 17176  007E                     ltemp0	set	126
 17177  0082                     ltemp1	set	130
 17178  0086                     ltemp2	set	134
 17179  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         229
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80     76      78
    BANK1            80      0      80
    BANK2            80      0      78
    BANK3            80      4      68
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK3[9]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK2[4]), VarLED2(BANK1[4]), 
		 -> VarLED1(BANK1[4]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw3(BANK1[2]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _setSw_Enable->_SwPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  112256
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2130
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     186
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   30056
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   30056
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0   13168
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12581
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    2053
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1098
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1098
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   39104
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           7     7      0   39104
                                             71 BANK0      5     5      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                             ___wmul
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37776
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1913
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35863
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14899
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1741
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15284
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15067
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14974
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     552
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     279
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     279
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1253
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1253
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13413
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0   13246
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8910
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1897
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1067
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     167
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0     124
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0     124
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13928
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13928
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     883
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     987
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0     124
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0     124
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     396
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     286
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       ___wmul
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Oct 23 16:26:55 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0076  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 12C2                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006D  
     __end_of_getDimmerLights_StatusFlag 1FED               _getDimmerLights_StatusFlag 1FDA  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 08C6  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0D8E  
                           ___ftadd@sign 0048                                      l110 17D8  
                                    l120 1701                                      l112 17EC  
                                    l121 16FD                                      l122 16EB  
                                    l124 16FB                                      l402 130F  
                                    l308 0C34                                      l309 0C7B  
                                    l283 09C3                                      l358 10D6  
                                    l359 10D8                                      l870 113B  
                                    l871 1143                                      _GIE 005F  
                                    _CRC 00CB                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0021  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 0070  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC6 0076  
                                    _RC7 0077                                      _RF1 00BE  
                                    _ISR 0004                                      _WDT 00C9  
                                    _Sw1 01C5                                      _Sw2 01CE  
                                    _Sw3 01D7                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 10E3                    _Buzzer_Initialization 1DF8  
                        __end_of_ADC_Set 1E2B                          ?_DelayTimejudge 0076  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 077E                    _setDimmerLights_AdjRF 12C2  
                  _setDimmerLights_AdjGo 1F51                                     ?_ISR 0076  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1E9E  
                           ___ftdiv@sign 003D                                     l3021 0959  
                                   l2213 048F                                     l1430 121A  
                                   l2302 151B                                     l2215 04CD  
                                   l2208 0473                                     l3050 03FE  
                                   l2250 09FB                 ?_DimmerLightsPointSelect 0076  
                                   l3027 0970                                     l1443 1453  
                                   l1452 1670                                     l2260 0A51  
                                   l1614 158B                                     l2265 1489  
                        __end_of_IOC_Set 1EAB                                     l1629 15EE  
                                   l2287 1227                                     l2288 1231  
                                   l2741 08F9                                     l2717 0CB4  
                                   l2659 1EF4                                     l2691 0241  
                                   l2860 11C9                                     l8005 1288  
                                   l5701 03D4                                     l5631 0940  
                                   l5711 03F0                                     l5703 03D9  
                                   l8031 1FBF                                     l8121 175E  
                                   l5641 0966                                     l5633 0945  
                                   l5625 092F                                     l8105 1191  
                                   l5721 0422                                     l5713 03FA  
                                   l5705 03DD                                     l5801 0732  
                                   l5731 043D                                     l8027 1FB9  
                                   l8045 1174                                     l5629 0936  
                                   l5741 0EBF                                     l8205 0B1B  
                                   l8109 119A                                     l5717 0410  
                                   l5813 074E                                     l5805 073A  
                                   l8127 1769                                     l5639 095E  
                                   l8303 0BB0                                     l8311 0BBC  
                                   l5671 0387                                     l9015 0B76  
                                   l9041 1615                                     l8049 117D  
                                   l8153 17A0                                     l8145 178F  
                                   l8137 1771                                     l5761 0F16  
                                   l5833 0D20                                     l8321 0BCC  
                                   l5681 039D                                     l5817 0756  
                                   l8065 13D1                                     l9051 1625  
                                   l9043 1618                                     l8139 177D  
                                   l5747 0ED5                                     l5851 0D50  
                                   l8307 0BB6                                     l9019 11C3  
                                   l5675 038E                                     l9053 1628  
                                   l8149 1798                                     l5861 0D74  
                                   l5853 0D5E                                     l8093 1344  
                                   l8341 0BF5                                     l8325 0BD2  
                                   l8317 0BC6                                     l9205 0DE4  
                                   l8413 11B3                                     l5693 03B7  
                                   l8503 1106                                     l9047 161E  
                                   l5863 0D77                                     l9207 0DEA  
                                   l9303 163B                                     l8415 11B9  
                                   l5783 06E1                                     l8271 089C  
                                   l8505 1109                                     l9057 162E  
                                   l5769 0F2F                                     l8097 134D  
                                   l8089 133B                                     l8345 0BFB  
                                   l8337 0BEF                                     l8329 0BD8  
                                   l9217 0E12                                     l8521 12F2  
                                   l8281 08BB                                     l5867 0D85  
                                   l5859 0D6B                                     l9171 0DA3  
                                   l9243 1745                                     l5699 03CA  
                                   l8275 08A2                                     l8603 0FF7  
                                   l8509 110F                                     l8349 0C01  
                                   l9173 0DA6                                     l9309 1650  
                                   l8525 12F8                                     l8701 0C5F  
                                   l8621 0998                                     l5789 06F7  
                                   l8365 14CD                                     l8277 08AF  
                                   l8447 07D0                                     l9183 0DB2  
                                   l9247 174C                                     l9239 173E  
                                   l8519 12EF                                     l8615 098F  
                                   l8471 0E70                                     l9415 04B0  
                                   l9185 0DB5                                     l8713 0C7D  
                                   l8641 09CC                                     l8617 0992  
                                   l8457 0E36                                     l9417 04B2  
                                   l9361 0467                                     l8723 1320  
                                   l8731 12A8                                     l8299 0BAA  
                                   l9195 0DC1                                     l8635 09AA  
                                   l8467 0E5A                                     l9427 04C2  
                                   l9531 02DA                                     l9507 026F  
                                   l8725 132B                                     l8733 12AB  
                                   l9197 0DC6                                     l8653 09DF  
                                   l8645 09D2                                     l9437 04DE  
                                   l8901 0C91                                     l9517 029C  
                                   l9541 030C                    _myMain_Initialization 1F02  
                                   l8815 143B                                     l8671 0C18  
                                   l8647 09D6                                     l8639 09C9  
                                   l8495 1509                                     l8591 0FDC  
                                   l8583 0FCA                                     l9447 0507  
                                   l9383 0483                                     l9471 1EF9  
                                   l8903 0C94                                     l8737 12B1  
                                   l8665 0C0F                                     l8673 0C1B  
                                   l8649 09D9                                     l8577 0FAF  
                                   l9457 0531                                     l8913 0CA0  
                                   l8683 0C31                                     l8667 0C12  
                                   l8595 0FE5                                     l8587 0FD3  
                                   l9475 1EFF                                     l8915 0CA3  
                                   l9491 0235                                     l9731 15D7  
                                   l8757 1FE6                                     l8685 0C2B  
                                   l8925 0CAF                                     l8599 0FEE  
                                   l8855 09FE                                     l9487 0228  
                                   l9577 16D5                                     l8769 1546  
                                   l9649 05B6                                     l8961 08D6  
                                   l8945 0CF5                                     _CFGS 0CAE  
                                   l8699 0C46                                     l8883 0A47  
                                   l8867 0A16                                     l8963 08D9  
                                   l8877 0A3C                                     l8973 08E5  
                                   l8975 08E8                                     l8985 08F4  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4005 093B                                     u4025 0954  
                                   u4045 0961                                     u4225 03CB  
                                   u4075 0977                                     u4255 03DE  
                                   u4505 0757                                     u4355 0EE7  
                                   u4195 03B8                                     u4515 075D  
                                   u4435 0703                                     _PEIE 005E  
                                   u4365 0EF7                                     u4605 0D6C  
                                   u4285 03F1                                     u4445 0713  
                                   u4375 0F17                                     u4385 0F26  
                                   u4545 0D27                                     u4465 073B  
                                   u4395 0F30                                     u4475 0741  
                                   u4575 0D51                                     u8205 1790  
                                   u9015 1315                                     u8055 13BD  
                                   u8165 1774                                     u8270 0AC9  
                                   u8185 177E                                     u8195 1788  
                                   u8275 0AC7                                     u9525 11CA  
                                   u8575 1081                                     u9535 11CF  
                                   _LWLO 0CAD                                     _RFSW 00D0  
                                   _TMR0 0015                                     _RSSI 00D1  
                                   _WREN 0CAA                                     _Buz1 00B2  
                                   _main 156D                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0ABF                          __end_of_RF_Main 1E01  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1E61  
                                   ltemp 007E            __size_of_setRF_Initialization 000D  
                       _setDimmerReClock 1E61                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1530  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D                                    ??_ISR 007B  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 001A                         __end_of_LED_Main 1F51  
          __end_of_DimmerIntrPointSelect 10FD                    ?_setDimmerLights_Main 0076  
                        ?_setDelayOff_GO 002A                                    ?_main 01E0  
                        __end_of___awdiv 17A7                          __end_of___ftadd 0455  
                        __end_of___ftdiv 0F51                                    u10145 0501  
                        __end_of___ftmul 077E                                    u10165 052B  
                                  u10415 16CB                          ___awdiv@divisor 0020  
                                  u10535 1211                          __end_of___fttol 0D8E  
                                  u10575 15BF                                    u10585 15E6  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l810 1156                                    i1l811 115F  
                                  i1l823 10EC                                    i1l824 10F4  
                 _setDimmerLights_Switch 1F11                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00ED  
                                  _RFSW2 00EE                                    _RFSW3 00EF  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0076  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 1087                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 14C0               _setDimmerLights_IntrIOC_GO 148C  
                       __end_of_TMR0_ISR 13FE             __size_of_CC2500_WriteCommand 001A  
                       __end_of_TMR0_Set 1E33                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0077                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1FDA              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0076  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1F82  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0076  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                   _Sw_DimmerOnFunc$6120 0064                     _Sw_DimmerOnFunc$6121 0065  
                   _Sw_DimmerOnFunc$6119 0063                       _setRF_DimmerLights 0ABF  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0076  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 000C                             ?_my_MainTime 0076  
              setDimmerLights_Main@clear 0069                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 080C                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0076  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 15AE                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 0800                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 07FC  
                   _setSw_Initialization 1E33                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0076  
                _setControl_Lights_Table 0F51                   ?_Buzzer_Initialization 0076  
      __size_of_DimmerIntrIOCPointSelect 001D                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0076  
                              ??_IOC_ISR 0079                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 114C                   ?_setDimmerLights_AdjRF 0076  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                  ??_Switch_Initialization 0024  
                   ??_setRF_DimmerLights 005E                              _DlyOff_Main 0A54  
                 ?_myMain_Initialization 0076                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 129F                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0987                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1F21                                   i1l7101 0154  
                                 i1l7123 01AC                                   i1l7107 016F  
                                 i1l7141 01DD                                   i1l7109 0175  
                                 i1l7053 0097                                   i1l7061 00A4  
                                 i1l7119 01A6                                   i1l7127 01B2  
                                 i1l7145 01E3                                   i1l7081 00F4  
                                 i1l7057 009D                                   i1l7149 01E9  
                                 i1l7093 0129                                   i1l7085 0107  
                                 i1l7079 00EE                                   i1l7087 010D  
                                 i1l7097 0140                                   i1l6627 14B4  
                                 i1l6629 14B9                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u644_25 0072                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   u759_25 13F7  
                                 _IO_Set 10B2                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1E12  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 109C  
                                 _Dimmer 0073                                   _DlySw1 00E7  
                                 _DlySw2 00E9                                   _DlySw3 00EB  
             __end_of_Mcu_Initialization 1FB6                      __end_of_Buzzer_Main 1708  
                                 _Memory 01A0                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1F71               _setDimmerLights_TriggerAdj 1F61  
                                 ___bmul 1FB6            setDimmerLights_Switch@command 0022  
                                 ___wmul 11C0                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 001D  
                              ??___ftdiv 0034                    setDimmerLights@lights 0025  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0076              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D6  
                                 _s_data 00D7                                   _setLED 0B9A  
                                 _myMain 00A0                _setDimmerLights_Main$2410 0066  
              _setDimmerLights_Main$2418 0067                _setDimmerLights_Main$2419 0068  
                       _DimmerLightsIntr 0075                    ?_setSw_Initialization 0076  
                  setDimmerLights@status 0023                         ___awdiv@quotient 0027  
                                 _setBuz 17A7         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0076                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 020F  
            _setDimmerLights_IntrControl 0044                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0076  
                  __end_of_SwPointSelect 11A3                            ?_setRF_Enable 0076  
                        _RfSWPointSelect 121C             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 007A              __size_of_DimmerLights_Close 0013  
                __size_of_LedPointSelect 0026                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1EF3  
                      ?_Sw_DimmerAdjFunc 0076              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0867  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0040  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0076  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0076  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0076                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0076           DimmerIntrIOCPointSelect@lights 0077  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK4 123C  
                              ?_TMR0_ISR 0076                                ?_TMR0_Set 0076  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1F31  
              ??_setControl_Lights_Table 0067                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0076            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0023                                ?_WDT_Main 0076  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1E12  
               __end_of_setDimmerReClock 1E6D                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0076                        ?_CC2500_WriteByte 0076  
                         ??_setRF_Enable 0020                           _DimmerLights11 00CC  
                         _DimmerLights22 00CD                           _DimmerLights33 00CE  
                   __size_of_setLED_Main 004B                ??_setDimmerLights_Trigger 0023  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006D                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0076                              _Buzzer_Main 16BE  
                      ??_setRFSW_Control 0062                   ?_Dimmer_Initialization 0076  
                                ?_IO_Set 0076                               ??_LED_Main 0024  
                          ?_setMemory_GO 0076                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1E79                            ??_Switch_Main 006B  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0024                             _DimmerLights 0074  
                      LedPointSelect@led 0020                   __size_of_DelayOff_Main 000C  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 156D                      _CC2500_WriteCommand 10FD  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 001B  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 0042  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 007B                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0023  
                          ?_setSw_Enable 0076                       __size_of_setTxData 00BF  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0028  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1E24                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 1EB8  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 14F5  
                __end_of_RfSWPointSelect 123C                        Sw_DimmerOnFunc@sw 0067  
                                _IOC_ISR 1E91                                  _IOC_Set 1E9E  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0076  
                      _Flash_Memory_Main 11FD                        _Flash_Memory_Read 1117  
            ?_setDimmerLights_IntrIOC_GO 0076                   __size_of_CC2500_RxData 0076  
                 __size_of_CC2500_TxData 0064                      ?_setRFSW_AdjControl 0076  
                                _RF_Data 0120                                  _RF_Main 1DFE  
                     ?_Flash_Memory_Main 0076                       ?_Flash_Memory_Read 0076  
                                _WDT_Set 1E56          __end_of_setControl_Lights_Table 1000  
                             ??_Fosc_Set 0020                              ?_TouchPower 0076  
                        _Sw_DimmerOnFunc 0C81                          _setPercentValue 1678  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0076  
                                _Dimmer1 00E4             __end_of_CC2500_FrequencyCabr 1E79  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1F93  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00DC                                  _VarLED2 00E0  
                                _VarLED3 016A                        __end_of_getRxData 0A54  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1169  
        __end_of_setDimmerLights_Trigger 1F31                     ??_setRFSW_AdjControl 0064  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1F21  
                                ___awdiv 1753                                  ___ftadd 035F  
                         ??_setSw_Enable 0022                                  ___ftdiv 0EA8  
                        __size_of___wmul 001E                                  ___ftmul 06CA  
                                ___fttol 0D07                      __end_of_Switch_Main 080C  
                ??_Buzzer_Initialization 0020                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0071  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 15AE  
                                __ptext2 1356                                  __ptext3 1EB8  
                                __ptext4 1F02                                  __ptext5 1FC8  
                                __ptext6 0002                                  __ptext7 0800  
                                __ptext8 020F                                  __ptext9 1E3B  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0066  
                  _DimmerIntrPointSelect 10E3                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 121C                __end_of_Flash_Memory_Read 1131  
                             _setRF_Main 0455                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1E85                        _DimmerLights_Main 1EE4  
         __size_of_DlyOff_Initialization 000A                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1E56               __end_of_CC2500_ClearRXFIFO 1E05  
             __end_of_CC2500_ClearTXFIFO 1E09            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0076                       ?_DimmerLights_Main 0076  
                                _product 006C                           _LedPointSelect 1330  
                    _DelayOffPointSelect 1169                                  clrloop0 1E1F  
         __size_of_Switch_Initialization 0011            __end_of_Switch_Initialization 1FA4  
                   end_of_initialization 0040                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 137F                            _DelayTime_1us 130A  
                      __end_of_setTxData 06CA               __end_of_Flash_Memory_Write 145A  
                                init_ram 1E18                       ?_CC2500_InitSetREG 0076  
                    ??_DimmerLights_Main 006B                     Flash_Memory_Read@ret 0023  
                                initloop 1E19                               _setSw_Main 020F  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 12E5  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1F71  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0076  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0C0B                            _CC2500_TxData 0987  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1EC6  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0076                      _Flash_Memory_Modify 1634  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1E43  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0023                   setSw_Initialization@sw 0023  
              __end_of_DimmerLights_Main 1EF3                       _Mcu_Initialization 1FA4  
               __size_of_CC2500_PowerRST 0044                           ?_DelayOff_Main 0076  
                       ?_RfSWPointSelect 0076                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1356                  __end_of_Sw_DimmerOnFunc 0D07  
                __end_of_setPercentValue 16BE                 __size_of_CC2500_WriteREG 0023  
              __end_of_CC2500_InitSetREG 13A9                      ?_Mcu_Initialization 0076  
                   ?_Flash_Memory_Modify 0076              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1530  
                   ?_Flash_Memory_Unlock 0076                __end_of_CC2500_ReadStatus 130A  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 10CA  
                   _setRF_Initialization 1EAB                              _Switch_Main 0800  
                      __size_of_LED_Main 0010                           ?_CC2500_RxData 0076  
                         ?_CC2500_TxData 0076                  _DimmerLightsPointSelect 1131  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1087  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0076                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1FC8                __size_of_Sw_DimmerAdjFunc 0060  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 114C  
                         __end_of___wmul 11DE                        __size_of_TMR0_ISR 002B  
                 ?_DimmerIntrPointSelect 0076                        __size_of_TMR0_Set 0008  
                   __end_of_setMemory_GO 10B2            __size_of_setDimmerLights_Main 008A  
                         __end_of_setLED 0C0B                           __end_of_setBuz 1800  
        _getDimmerLights_StatusFlag$2454 0022                     _CC2500_FrequencyCabr 1E6D  
              __size_of_Sw_DimmerOffFunc 006F               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0076  
                        _setRFSW_Control 0E18                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0076                      start_initialization 0015  
                      _setRF_DimmerValue 14C0                          ?_LedPointSelect 0076  
             __end_of_DimmerLights_Close 2000                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0079  
                     ?_setRF_DimmerValue 0076               __end_of_CC2500_InitPATable 11FD  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setSw_Enable 137F                             ?_Buzzer_Main 0076  
                     _set_TimeoutCleared 1E0D                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 00D8  
                            ?_setSw_Main 0076                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0076                     __end_of_setSw_Status 1EE4  
                     Sw_DimmerAdjFunc@sw 0029                    ?_setRF_Initialization 0076  
                      __size_of_Fosc_Set 0004                  __size_of_setRFSW_Status 000F  
              __size_of_CC2500_WriteByte 0019                      ?_set_TimeoutCleared 0076  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D2  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 001D                                _Tx_Length 00D4  
                            __pdataBANK4 0220                                 ??_setLED 0022  
                               ?_ADC_Set 0076                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1E09               __size_of_DimmerLights_Main 000F  
              __end_of_setRF_DimmerValue 14F5                    ?_CC2500_FrequencyCabr 0076  
                          ??_setLED_Main 0021                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0076  
                        _setRF_Main$5151 006B                              __pbssCOMMON 0070  
                               ?_IOC_Set 0076                                ___latbits 0003  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0076  
                          __pcstackBANK0 0020                            __pcstackBANK3 01E0  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0076  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 007E                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0076  
                               ?_WDT_Set 0076                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 006B               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 013D                            _DimmerLights2 014C  
                          _DimmerLights3 015B                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006C  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 0010  
                 ?_CC2500_PowerOnInitial 0076                      __size_of_setRF_Main 00EF  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0076  
                              _getBuz_GO 1F82      __end_of_Flash_Memory_Initialization 060B  
            _Flash_Memory_Initialization 0544                                 ?___awdiv 0020  
                              __ptext100 1E05                                __ptext101 1E01  
                              __ptext110 0044                                __ptext102 10FD  
                              __ptext111 10E3                                __ptext103 1E0D  
                              __ptext112 1E91                                __ptext104 1072  
                              __ptext113 1E61                                __ptext105 10CA  
                              __ptext114 148C                                __ptext106 16BE  
                              __ptext115 114C                                __ptext107 1DF8  
                              __ptext109 13D3                                 ?___ftadd 003E  
                              _getRxData 09EB                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 0EA8            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1DFB  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1F02  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 0150             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 12E5            __end_of_setDimmerLights_AdjGo 1F61  
                 CC2500_WriteByte@loop_a 0021                                _r_address 00D5  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1F11                         __CFG_WDTE$SWDTEN 0000  
                           _setRF_Enable 1EB8                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1186                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1753                      _DimmerLightsIntrIOC 00CF  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                         ___wmul@product 0024                                 _LED_Main 1F41  
                        SwPointSelect@sw 0021                                clear_ram0 1E1E  
               CC2500_InitPATable@loop_d 0027                                _setTxData 060B  
    __end_of_DimmerLights_Initialization 127D              _DimmerLights_Initialization 125C  
                     _CC2500_ClearRXFIFO 1E01                       _CC2500_ClearTXFIFO 1E05  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1E43  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003B                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 142B                               ?_getRxData 0076  
                               _TMR0_ISR 13D3                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR0_Set 1E2B  
                       _Sw_DimmerAdjFunc 08C6                      ?_CC2500_ClearRXFIFO 0076  
                    ?_CC2500_ClearTXFIFO 0076                      __end_of_my_MainTime 15F0  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00C7  
            __end_of_CC2500_WriteCommand 1117                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1FC8                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0076  
                       _Sw_DimmerOffFunc 0B2B                    _Sw_DimmerAdjFunc$6131 0025  
                  _Sw_DimmerAdjFunc$6132 0026                    _Sw_DimmerAdjFunc$6133 0027  
                __size_of_setDelayOff_GO 005F                    __size_of_setSw_Enable 0029  
                               _DelayOff 0072                             setSw_Main@sw 006A  
       setDimmerLights_IntrIOC_GO@lights 0078                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0076                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1072                           ?_SwPointSelect 0076  
                         setLED_Main@led 0023                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 148C                    _DlyOff_Initialization 1E4C  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 07FC  
                       __size_of_WDT_Set 000B                    _Switch_Initialization 1F93  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 1EC6                             _setMemory_GO 109C  
                   __size_of_Buzzer_Main 004A                               ?_setTxData 0076  
                           ?_Switch_Main 0076               ??_DimmerIntrIOCPointSelect 0076  
                       _CC2500_WriteByte 10CA             Flash_Memory_Initialization@i 005E  
                      setRFSW_Control@sw 0063                                setLED@led 0022  
                ??_DimmerIntrPointSelect 0076                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0076  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1356  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                               ___awtoft 127D                         ??_LedPointSelect 0020  
                               ___ftpack 0926                             _setSw_Status 1ED5  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1708                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0B2B                 ?_DelayOff_Initialization 0076  
                       setDelayOff_GO@sw 002E                                 __ptext10 0C81  
                               __ptext11 0B2B                                 __ptext20 09EB  
                               __ptext12 08C6                                 __ptext21 145A  
                               __ptext13 1F61                                 __ptext30 080C  
                               __ptext22 0F51                                 __ptext14 1F51  
                               __ptext31 06CA                                 __ptext23 0E18  
                               __ptext15 1F93                                 __ptext40 1EAB  
                               __ptext32 035F                                 __ptext24 0867  
                               __ptext16 1E33                                 __ptext41 1FA4  
                               __ptext33 1F82                                 __ptext25 13A9  
                               __ptext17 1EF3                                 __ptext50 1F31  
                               __ptext42 1E56                                 __ptext34 11C0  
                               __ptext26 1FB6                                 __ptext18 1DFE  
                               __ptext51 1F71                                 __ptext43 1E2B  
                               __ptext35 0987                                 __ptext27 14F5  
                               __ptext19 0455                                 __ptext60 0D8E  
                               __ptext52 11FD                                 __ptext44 10B2  
                               __ptext36 0C0B                                 __ptext28 14C0  
                               __ptext61 1530                                 __ptext53 1634  
                               __ptext45 1E9E                                 __ptext37 12E5  
                               __ptext29 12C2                                 __ptext70 1E12  
                               __ptext62 077E                                 __ptext54 1066  
                               __ptext46 07FC                                 __ptext38 11A3  
                               __ptext71 1E85                                 __ptext63 0B9A  
                               __ptext55 0544                                 __ptext47 1E24  
                               __ptext39 1DFB                                 __ptext80 127D  
                               __ptext72 0A54                                 __ptext64 1330  
                               __ptext56 142B                                 __ptext48 1F41  
                               __ptext81 0926                                 __ptext73 060B  
                               __ptext65 1FED                                 __ptext57 1E43  
                               __ptext49 1708                                 __ptext90 1E4C  
                               __ptext82 1EC6                                 __ptext74 1ED5  
                               __ptext66 109C                                 __ptext58 1117  
                               __ptext91 1169                                 __ptext83 121C  
                               __ptext75 1186                                 __ptext67 1FDA  
                               __ptext59 1EE4                                 __ptext92 1087  
                               __ptext84 1F21                                 __ptext76 0ABF  
                               __ptext68 125C                                 __ptext93 1E09  
                               __ptext85 1F11                                 __ptext77 1678  
                               __ptext69 13FE                                 __ptext94 15F0  
                               __ptext86 1131                                 __ptext78 0D07  
                               __ptext95 137F                                 __ptext87 17A7  
                               __ptext79 0EA8                                 __ptext96 11DE  
                               __ptext88 1753                                 __ptext97 129F  
                               __ptext89 1E79                                 __ptext98 1E6D  
                               __ptext99 130A                                 __product 0220  
          ??_setDimmerLights_IntrControl 0078                  ??_setLED_Initialization 0023  
               __size_of_RfSWPointSelect 0020           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1ED5            __end_of_Dimmer_Initialization 1E18  
           __end_of_setDimmerLights_Main 0E18                             ??_setSw_Main 0068  
                          setLED@command 0021                            __size_of_main 0041  
                            _setRF_Learn 1E3B                 __end_of_CC2500_SIDLEMode 1E0D  
             setDimmerLights_Main@lights 006A              __end_of_DelayOffPointSelect 1186  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1FED  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000C  
                        _CC2500_ReadByte 11A3                              _my_MainTime 15AE  
                     _CC2500_InitPATable 11DE      __size_of_getDimmerLights_StatusFlag 0013  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0544  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0076         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 01E0                                 main@argv 01E2  
                    ?_CC2500_InitPATable 0076                          _CC2500_PowerRST 15F0  
            __end_of_Flash_Memory_Modify 1678                        ??_getPercentValue 0059  
                            _setLog_Code 145A              __end_of_Flash_Memory_Unlock 1E4C  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 129F  
                     __end_of_setSw_Main 035F                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0076                           _DelayTimejudge 13A9  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0078                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0076  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 142B  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 13FE              __end_of_setDimmerLights_Adj 156D  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1DFB     __size_of_setDimmerLights_IntrControl 01CB  
                   _Flash_Memory_Erasing 1066                       ?_RF_Initialization 0076  
                             _SPI0Buffer 00D3          __end_of_DelayOff_Initialization 1E85  
    __size_of_setDimmerLights_IntrIOC_GO 0034                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1E91  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 0867  
       __size_of_setControl_Lights_Table 00AF                   __end_of_DelayTimejudge 13D3  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 1330  
               __end_of_Sw_DimmerAdjFunc 0926                  __end_of_CC2500_ReadByte 11C0  
           __end_of_setSw_Initialization 1E3B                          _Timeout_Counter 1072  
                   getPercentValue@value 005B               __end_of_LED_Initialization 1F41  
       __size_of_setDimmerLights_Trigger 0010                 __size_of_Sw_DimmerOnFunc 0086  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1DFE                 __end_of_Sw_DimmerOffFunc 0B9A  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0C81                    __end_of_CC2500_TxData 09EB  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1634  
