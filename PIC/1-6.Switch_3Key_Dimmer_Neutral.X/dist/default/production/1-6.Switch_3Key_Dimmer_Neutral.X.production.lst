

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Oct 27 11:12:21 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	dabs	1,0x7E,2
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0090                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  0116                     	;# 
   183  0117                     	;# 
   184  011D                     	;# 
   185  018C                     	;# 
   186  018D                     	;# 
   187  018E                     	;# 
   188  0191                     	;# 
   189  0191                     	;# 
   190  0192                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0194                     	;# 
   194  0195                     	;# 
   195  0196                     	;# 
   196  0197                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020D                     	;# 
   209  0210                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0216                     	;# 
   222  0216                     	;# 
   223  0217                     	;# 
   224  0217                     	;# 
   225  0291                     	;# 
   226  0291                     	;# 
   227  0292                     	;# 
   228  0293                     	;# 
   229  0298                     	;# 
   230  0298                     	;# 
   231  0299                     	;# 
   232  029A                     	;# 
   233  0394                     	;# 
   234  0395                     	;# 
   235  0396                     	;# 
   236  0FE4                     	;# 
   237  0FE5                     	;# 
   238  0FE6                     	;# 
   239  0FE7                     	;# 
   240  0FE8                     	;# 
   241  0FE9                     	;# 
   242  0FEA                     	;# 
   243  0FEB                     	;# 
   244  0FED                     	;# 
   245  0FEE                     	;# 
   246  0FEF                     	;# 
   247  0000                     	;# 
   248  0001                     	;# 
   249  0002                     	;# 
   250  0003                     	;# 
   251  0004                     	;# 
   252  0005                     	;# 
   253  0006                     	;# 
   254  0007                     	;# 
   255  0008                     	;# 
   256  0009                     	;# 
   257  000A                     	;# 
   258  000B                     	;# 
   259  000C                     	;# 
   260  000D                     	;# 
   261  000E                     	;# 
   262  0010                     	;# 
   263  0011                     	;# 
   264  0012                     	;# 
   265  0015                     	;# 
   266  0016                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001C                     	;# 
   274  008C                     	;# 
   275  008D                     	;# 
   276  008E                     	;# 
   277  0090                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009B                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  0116                     	;# 
   294  0117                     	;# 
   295  011D                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298  018E                     	;# 
   299  0191                     	;# 
   300  0191                     	;# 
   301  0192                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0194                     	;# 
   305  0195                     	;# 
   306  0196                     	;# 
   307  0197                     	;# 
   308  0199                     	;# 
   309  019A                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019C                     	;# 
   315  019C                     	;# 
   316  019D                     	;# 
   317  019E                     	;# 
   318  019F                     	;# 
   319  020D                     	;# 
   320  0210                     	;# 
   321  0211                     	;# 
   322  0211                     	;# 
   323  0212                     	;# 
   324  0212                     	;# 
   325  0213                     	;# 
   326  0213                     	;# 
   327  0214                     	;# 
   328  0214                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0216                     	;# 
   333  0216                     	;# 
   334  0217                     	;# 
   335  0217                     	;# 
   336  0291                     	;# 
   337  0291                     	;# 
   338  0292                     	;# 
   339  0293                     	;# 
   340  0298                     	;# 
   341  0298                     	;# 
   342  0299                     	;# 
   343  029A                     	;# 
   344  0394                     	;# 
   345  0395                     	;# 
   346  0396                     	;# 
   347  0FE4                     	;# 
   348  0FE5                     	;# 
   349  0FE6                     	;# 
   350  0FE7                     	;# 
   351  0FE8                     	;# 
   352  0FE9                     	;# 
   353  0FEA                     	;# 
   354  0FEB                     	;# 
   355  0FED                     	;# 
   356  0FEE                     	;# 
   357  0FEF                     	;# 
   358  0000                     	;# 
   359  0001                     	;# 
   360  0002                     	;# 
   361  0003                     	;# 
   362  0004                     	;# 
   363  0005                     	;# 
   364  0006                     	;# 
   365  0007                     	;# 
   366  0008                     	;# 
   367  0009                     	;# 
   368  000A                     	;# 
   369  000B                     	;# 
   370  000C                     	;# 
   371  000D                     	;# 
   372  000E                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  008E                     	;# 
   388  0090                     	;# 
   389  0091                     	;# 
   390  0092                     	;# 
   391  0095                     	;# 
   392  0096                     	;# 
   393  0097                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009B                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  010C                     	;# 
   402  010D                     	;# 
   403  010E                     	;# 
   404  0116                     	;# 
   405  0117                     	;# 
   406  011D                     	;# 
   407  018C                     	;# 
   408  018D                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0194                     	;# 
   416  0195                     	;# 
   417  0196                     	;# 
   418  0197                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020D                     	;# 
   431  0210                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0298                     	;# 
   452  0298                     	;# 
   453  0299                     	;# 
   454  029A                     	;# 
   455  0394                     	;# 
   456  0395                     	;# 
   457  0396                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000D                     	;# 
   483  000E                     	;# 
   484  0010                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  0090                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0095                     	;# 
   503  0096                     	;# 
   504  0097                     	;# 
   505  0099                     	;# 
   506  009A                     	;# 
   507  009B                     	;# 
   508  009B                     	;# 
   509  009C                     	;# 
   510  009D                     	;# 
   511  009E                     	;# 
   512  010C                     	;# 
   513  010D                     	;# 
   514  010E                     	;# 
   515  0116                     	;# 
   516  0117                     	;# 
   517  011D                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520  018E                     	;# 
   521  0191                     	;# 
   522  0191                     	;# 
   523  0192                     	;# 
   524  0193                     	;# 
   525  0193                     	;# 
   526  0194                     	;# 
   527  0195                     	;# 
   528  0196                     	;# 
   529  0197                     	;# 
   530  0199                     	;# 
   531  019A                     	;# 
   532  019B                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019C                     	;# 
   537  019C                     	;# 
   538  019D                     	;# 
   539  019E                     	;# 
   540  019F                     	;# 
   541  020D                     	;# 
   542  0210                     	;# 
   543  0211                     	;# 
   544  0211                     	;# 
   545  0212                     	;# 
   546  0212                     	;# 
   547  0213                     	;# 
   548  0213                     	;# 
   549  0214                     	;# 
   550  0214                     	;# 
   551  0215                     	;# 
   552  0215                     	;# 
   553  0215                     	;# 
   554  0216                     	;# 
   555  0216                     	;# 
   556  0217                     	;# 
   557  0217                     	;# 
   558  0291                     	;# 
   559  0291                     	;# 
   560  0292                     	;# 
   561  0293                     	;# 
   562  0298                     	;# 
   563  0298                     	;# 
   564  0299                     	;# 
   565  029A                     	;# 
   566  0394                     	;# 
   567  0395                     	;# 
   568  0396                     	;# 
   569  0FE4                     	;# 
   570  0FE5                     	;# 
   571  0FE6                     	;# 
   572  0FE7                     	;# 
   573  0FE8                     	;# 
   574  0FE9                     	;# 
   575  0FEA                     	;# 
   576  0FEB                     	;# 
   577  0FED                     	;# 
   578  0FEE                     	;# 
   579  0FEF                     	;# 
   580  0000                     	;# 
   581  0001                     	;# 
   582  0002                     	;# 
   583  0003                     	;# 
   584  0004                     	;# 
   585  0005                     	;# 
   586  0006                     	;# 
   587  0007                     	;# 
   588  0008                     	;# 
   589  0009                     	;# 
   590  000A                     	;# 
   591  000B                     	;# 
   592  000C                     	;# 
   593  000D                     	;# 
   594  000E                     	;# 
   595  0010                     	;# 
   596  0011                     	;# 
   597  0012                     	;# 
   598  0015                     	;# 
   599  0016                     	;# 
   600  0016                     	;# 
   601  0017                     	;# 
   602  0018                     	;# 
   603  0019                     	;# 
   604  001A                     	;# 
   605  001B                     	;# 
   606  001C                     	;# 
   607  008C                     	;# 
   608  008D                     	;# 
   609  008E                     	;# 
   610  0090                     	;# 
   611  0091                     	;# 
   612  0092                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0097                     	;# 
   616  0099                     	;# 
   617  009A                     	;# 
   618  009B                     	;# 
   619  009B                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  011D                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  018E                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0197                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020D                     	;# 
   653  0210                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0298                     	;# 
   674  0298                     	;# 
   675  0299                     	;# 
   676  029A                     	;# 
   677  0394                     	;# 
   678  0395                     	;# 
   679  0396                     	;# 
   680  0FE4                     	;# 
   681  0FE5                     	;# 
   682  0FE6                     	;# 
   683  0FE7                     	;# 
   684  0FE8                     	;# 
   685  0FE9                     	;# 
   686  0FEA                     	;# 
   687  0FEB                     	;# 
   688  0FED                     	;# 
   689  0FEE                     	;# 
   690  0FEF                     	;# 
   691  0000                     	;# 
   692  0001                     	;# 
   693  0002                     	;# 
   694  0003                     	;# 
   695  0004                     	;# 
   696  0005                     	;# 
   697  0006                     	;# 
   698  0007                     	;# 
   699  0008                     	;# 
   700  0009                     	;# 
   701  000A                     	;# 
   702  000B                     	;# 
   703  000C                     	;# 
   704  000D                     	;# 
   705  000E                     	;# 
   706  0010                     	;# 
   707  0011                     	;# 
   708  0012                     	;# 
   709  0015                     	;# 
   710  0016                     	;# 
   711  0016                     	;# 
   712  0017                     	;# 
   713  0018                     	;# 
   714  0019                     	;# 
   715  001A                     	;# 
   716  001B                     	;# 
   717  001C                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  008E                     	;# 
   721  0090                     	;# 
   722  0091                     	;# 
   723  0092                     	;# 
   724  0095                     	;# 
   725  0096                     	;# 
   726  0097                     	;# 
   727  0099                     	;# 
   728  009A                     	;# 
   729  009B                     	;# 
   730  009B                     	;# 
   731  009C                     	;# 
   732  009D                     	;# 
   733  009E                     	;# 
   734  010C                     	;# 
   735  010D                     	;# 
   736  010E                     	;# 
   737  0116                     	;# 
   738  0117                     	;# 
   739  011D                     	;# 
   740  018C                     	;# 
   741  018D                     	;# 
   742  018E                     	;# 
   743  0191                     	;# 
   744  0191                     	;# 
   745  0192                     	;# 
   746  0193                     	;# 
   747  0193                     	;# 
   748  0194                     	;# 
   749  0195                     	;# 
   750  0196                     	;# 
   751  0197                     	;# 
   752  0199                     	;# 
   753  019A                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019C                     	;# 
   759  019C                     	;# 
   760  019D                     	;# 
   761  019E                     	;# 
   762  019F                     	;# 
   763  020D                     	;# 
   764  0210                     	;# 
   765  0211                     	;# 
   766  0211                     	;# 
   767  0212                     	;# 
   768  0212                     	;# 
   769  0213                     	;# 
   770  0213                     	;# 
   771  0214                     	;# 
   772  0214                     	;# 
   773  0215                     	;# 
   774  0215                     	;# 
   775  0215                     	;# 
   776  0216                     	;# 
   777  0216                     	;# 
   778  0217                     	;# 
   779  0217                     	;# 
   780  0291                     	;# 
   781  0291                     	;# 
   782  0292                     	;# 
   783  0293                     	;# 
   784  0298                     	;# 
   785  0298                     	;# 
   786  0299                     	;# 
   787  029A                     	;# 
   788  0394                     	;# 
   789  0395                     	;# 
   790  0396                     	;# 
   791  0FE4                     	;# 
   792  0FE5                     	;# 
   793  0FE6                     	;# 
   794  0FE7                     	;# 
   795  0FE8                     	;# 
   796  0FE9                     	;# 
   797  0FEA                     	;# 
   798  0FEB                     	;# 
   799  0FED                     	;# 
   800  0FEE                     	;# 
   801  0FEF                     	;# 
   802  0000                     	;# 
   803  0001                     	;# 
   804  0002                     	;# 
   805  0003                     	;# 
   806  0004                     	;# 
   807  0005                     	;# 
   808  0006                     	;# 
   809  0007                     	;# 
   810  0008                     	;# 
   811  0009                     	;# 
   812  000A                     	;# 
   813  000B                     	;# 
   814  000C                     	;# 
   815  000D                     	;# 
   816  000E                     	;# 
   817  0010                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  008C                     	;# 
   830  008D                     	;# 
   831  008E                     	;# 
   832  0090                     	;# 
   833  0091                     	;# 
   834  0092                     	;# 
   835  0095                     	;# 
   836  0096                     	;# 
   837  0097                     	;# 
   838  0099                     	;# 
   839  009A                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  010C                     	;# 
   846  010D                     	;# 
   847  010E                     	;# 
   848  0116                     	;# 
   849  0117                     	;# 
   850  011D                     	;# 
   851  018C                     	;# 
   852  018D                     	;# 
   853  018E                     	;# 
   854  0191                     	;# 
   855  0191                     	;# 
   856  0192                     	;# 
   857  0193                     	;# 
   858  0193                     	;# 
   859  0194                     	;# 
   860  0195                     	;# 
   861  0196                     	;# 
   862  0197                     	;# 
   863  0199                     	;# 
   864  019A                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019C                     	;# 
   870  019C                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  020D                     	;# 
   875  0210                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0216                     	;# 
   888  0216                     	;# 
   889  0217                     	;# 
   890  0217                     	;# 
   891  0291                     	;# 
   892  0291                     	;# 
   893  0292                     	;# 
   894  0293                     	;# 
   895  0298                     	;# 
   896  0298                     	;# 
   897  0299                     	;# 
   898  029A                     	;# 
   899  0394                     	;# 
   900  0395                     	;# 
   901  0396                     	;# 
   902  0FE4                     	;# 
   903  0FE5                     	;# 
   904  0FE6                     	;# 
   905  0FE7                     	;# 
   906  0FE8                     	;# 
   907  0FE9                     	;# 
   908  0FEA                     	;# 
   909  0FEB                     	;# 
   910  0FED                     	;# 
   911  0FEE                     	;# 
   912  0FEF                     	;# 
   913  0000                     	;# 
   914  0001                     	;# 
   915  0002                     	;# 
   916  0003                     	;# 
   917  0004                     	;# 
   918  0005                     	;# 
   919  0006                     	;# 
   920  0007                     	;# 
   921  0008                     	;# 
   922  0009                     	;# 
   923  000A                     	;# 
   924  000B                     	;# 
   925  000C                     	;# 
   926  000D                     	;# 
   927  000E                     	;# 
   928  0010                     	;# 
   929  0011                     	;# 
   930  0012                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0016                     	;# 
   934  0017                     	;# 
   935  0018                     	;# 
   936  0019                     	;# 
   937  001A                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  008C                     	;# 
   941  008D                     	;# 
   942  008E                     	;# 
   943  0090                     	;# 
   944  0091                     	;# 
   945  0092                     	;# 
   946  0095                     	;# 
   947  0096                     	;# 
   948  0097                     	;# 
   949  0099                     	;# 
   950  009A                     	;# 
   951  009B                     	;# 
   952  009B                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009E                     	;# 
   956  010C                     	;# 
   957  010D                     	;# 
   958  010E                     	;# 
   959  0116                     	;# 
   960  0117                     	;# 
   961  011D                     	;# 
   962  018C                     	;# 
   963  018D                     	;# 
   964  018E                     	;# 
   965  0191                     	;# 
   966  0191                     	;# 
   967  0192                     	;# 
   968  0193                     	;# 
   969  0193                     	;# 
   970  0194                     	;# 
   971  0195                     	;# 
   972  0196                     	;# 
   973  0197                     	;# 
   974  0199                     	;# 
   975  019A                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019C                     	;# 
   981  019C                     	;# 
   982  019D                     	;# 
   983  019E                     	;# 
   984  019F                     	;# 
   985  020D                     	;# 
   986  0210                     	;# 
   987  0211                     	;# 
   988  0211                     	;# 
   989  0212                     	;# 
   990  0212                     	;# 
   991  0213                     	;# 
   992  0213                     	;# 
   993  0214                     	;# 
   994  0214                     	;# 
   995  0215                     	;# 
   996  0215                     	;# 
   997  0215                     	;# 
   998  0216                     	;# 
   999  0216                     	;# 
  1000  0217                     	;# 
  1001  0217                     	;# 
  1002  0291                     	;# 
  1003  0291                     	;# 
  1004  0292                     	;# 
  1005  0293                     	;# 
  1006  0298                     	;# 
  1007  0298                     	;# 
  1008  0299                     	;# 
  1009  029A                     	;# 
  1010  0394                     	;# 
  1011  0395                     	;# 
  1012  0396                     	;# 
  1013  0FE4                     	;# 
  1014  0FE5                     	;# 
  1015  0FE6                     	;# 
  1016  0FE7                     	;# 
  1017  0FE8                     	;# 
  1018  0FE9                     	;# 
  1019  0FEA                     	;# 
  1020  0FEB                     	;# 
  1021  0FED                     	;# 
  1022  0FEE                     	;# 
  1023  0FEF                     	;# 
  1024  0000                     	;# 
  1025  0001                     	;# 
  1026  0002                     	;# 
  1027  0003                     	;# 
  1028  0004                     	;# 
  1029  0005                     	;# 
  1030  0006                     	;# 
  1031  0007                     	;# 
  1032  0008                     	;# 
  1033  0009                     	;# 
  1034  000A                     	;# 
  1035  000B                     	;# 
  1036  000C                     	;# 
  1037  000D                     	;# 
  1038  000E                     	;# 
  1039  0010                     	;# 
  1040  0011                     	;# 
  1041  0012                     	;# 
  1042  0015                     	;# 
  1043  0016                     	;# 
  1044  0016                     	;# 
  1045  0017                     	;# 
  1046  0018                     	;# 
  1047  0019                     	;# 
  1048  001A                     	;# 
  1049  001B                     	;# 
  1050  001C                     	;# 
  1051  008C                     	;# 
  1052  008D                     	;# 
  1053  008E                     	;# 
  1054  0090                     	;# 
  1055  0091                     	;# 
  1056  0092                     	;# 
  1057  0095                     	;# 
  1058  0096                     	;# 
  1059  0097                     	;# 
  1060  0099                     	;# 
  1061  009A                     	;# 
  1062  009B                     	;# 
  1063  009B                     	;# 
  1064  009C                     	;# 
  1065  009D                     	;# 
  1066  009E                     	;# 
  1067  010C                     	;# 
  1068  010D                     	;# 
  1069  010E                     	;# 
  1070  0116                     	;# 
  1071  0117                     	;# 
  1072  011D                     	;# 
  1073  018C                     	;# 
  1074  018D                     	;# 
  1075  018E                     	;# 
  1076  0191                     	;# 
  1077  0191                     	;# 
  1078  0192                     	;# 
  1079  0193                     	;# 
  1080  0193                     	;# 
  1081  0194                     	;# 
  1082  0195                     	;# 
  1083  0196                     	;# 
  1084  0197                     	;# 
  1085  0199                     	;# 
  1086  019A                     	;# 
  1087  019B                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019C                     	;# 
  1092  019C                     	;# 
  1093  019D                     	;# 
  1094  019E                     	;# 
  1095  019F                     	;# 
  1096  020D                     	;# 
  1097  0210                     	;# 
  1098  0211                     	;# 
  1099  0211                     	;# 
  1100  0212                     	;# 
  1101  0212                     	;# 
  1102  0213                     	;# 
  1103  0213                     	;# 
  1104  0214                     	;# 
  1105  0214                     	;# 
  1106  0215                     	;# 
  1107  0215                     	;# 
  1108  0215                     	;# 
  1109  0216                     	;# 
  1110  0216                     	;# 
  1111  0217                     	;# 
  1112  0217                     	;# 
  1113  0291                     	;# 
  1114  0291                     	;# 
  1115  0292                     	;# 
  1116  0293                     	;# 
  1117  0298                     	;# 
  1118  0298                     	;# 
  1119  0299                     	;# 
  1120  029A                     	;# 
  1121  0394                     	;# 
  1122  0395                     	;# 
  1123  0396                     	;# 
  1124  0FE4                     	;# 
  1125  0FE5                     	;# 
  1126  0FE6                     	;# 
  1127  0FE7                     	;# 
  1128  0FE8                     	;# 
  1129  0FE9                     	;# 
  1130  0FEA                     	;# 
  1131  0FEB                     	;# 
  1132  0FED                     	;# 
  1133  0FEE                     	;# 
  1134  0FEF                     	;# 
  1135  0000                     	;# 
  1136  0001                     	;# 
  1137  0002                     	;# 
  1138  0003                     	;# 
  1139  0004                     	;# 
  1140  0005                     	;# 
  1141  0006                     	;# 
  1142  0007                     	;# 
  1143  0008                     	;# 
  1144  0009                     	;# 
  1145  000A                     	;# 
  1146  000B                     	;# 
  1147  000C                     	;# 
  1148  000D                     	;# 
  1149  000E                     	;# 
  1150  0010                     	;# 
  1151  0011                     	;# 
  1152  0012                     	;# 
  1153  0015                     	;# 
  1154  0016                     	;# 
  1155  0016                     	;# 
  1156  0017                     	;# 
  1157  0018                     	;# 
  1158  0019                     	;# 
  1159  001A                     	;# 
  1160  001B                     	;# 
  1161  001C                     	;# 
  1162  008C                     	;# 
  1163  008D                     	;# 
  1164  008E                     	;# 
  1165  0090                     	;# 
  1166  0091                     	;# 
  1167  0092                     	;# 
  1168  0095                     	;# 
  1169  0096                     	;# 
  1170  0097                     	;# 
  1171  0099                     	;# 
  1172  009A                     	;# 
  1173  009B                     	;# 
  1174  009B                     	;# 
  1175  009C                     	;# 
  1176  009D                     	;# 
  1177  009E                     	;# 
  1178  010C                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  011D                     	;# 
  1184  018C                     	;# 
  1185  018D                     	;# 
  1186  018E                     	;# 
  1187  0191                     	;# 
  1188  0191                     	;# 
  1189  0192                     	;# 
  1190  0193                     	;# 
  1191  0193                     	;# 
  1192  0194                     	;# 
  1193  0195                     	;# 
  1194  0196                     	;# 
  1195  0197                     	;# 
  1196  0199                     	;# 
  1197  019A                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019D                     	;# 
  1205  019E                     	;# 
  1206  019F                     	;# 
  1207  020D                     	;# 
  1208  0210                     	;# 
  1209  0211                     	;# 
  1210  0211                     	;# 
  1211  0212                     	;# 
  1212  0212                     	;# 
  1213  0213                     	;# 
  1214  0213                     	;# 
  1215  0214                     	;# 
  1216  0214                     	;# 
  1217  0215                     	;# 
  1218  0215                     	;# 
  1219  0215                     	;# 
  1220  0216                     	;# 
  1221  0216                     	;# 
  1222  0217                     	;# 
  1223  0217                     	;# 
  1224  0291                     	;# 
  1225  0291                     	;# 
  1226  0292                     	;# 
  1227  0293                     	;# 
  1228  0298                     	;# 
  1229  0298                     	;# 
  1230  0299                     	;# 
  1231  029A                     	;# 
  1232  0394                     	;# 
  1233  0395                     	;# 
  1234  0396                     	;# 
  1235  0FE4                     	;# 
  1236  0FE5                     	;# 
  1237  0FE6                     	;# 
  1238  0FE7                     	;# 
  1239  0FE8                     	;# 
  1240  0FE9                     	;# 
  1241  0FEA                     	;# 
  1242  0FEB                     	;# 
  1243  0FED                     	;# 
  1244  0FEE                     	;# 
  1245  0FEF                     	;# 
  1246  0000                     	;# 
  1247  0001                     	;# 
  1248  0002                     	;# 
  1249  0003                     	;# 
  1250  0004                     	;# 
  1251  0005                     	;# 
  1252  0006                     	;# 
  1253  0007                     	;# 
  1254  0008                     	;# 
  1255  0009                     	;# 
  1256  000A                     	;# 
  1257  000B                     	;# 
  1258  000C                     	;# 
  1259  000D                     	;# 
  1260  000E                     	;# 
  1261  0010                     	;# 
  1262  0011                     	;# 
  1263  0012                     	;# 
  1264  0015                     	;# 
  1265  0016                     	;# 
  1266  0016                     	;# 
  1267  0017                     	;# 
  1268  0018                     	;# 
  1269  0019                     	;# 
  1270  001A                     	;# 
  1271  001B                     	;# 
  1272  001C                     	;# 
  1273  008C                     	;# 
  1274  008D                     	;# 
  1275  008E                     	;# 
  1276  0090                     	;# 
  1277  0091                     	;# 
  1278  0092                     	;# 
  1279  0095                     	;# 
  1280  0096                     	;# 
  1281  0097                     	;# 
  1282  0099                     	;# 
  1283  009A                     	;# 
  1284  009B                     	;# 
  1285  009B                     	;# 
  1286  009C                     	;# 
  1287  009D                     	;# 
  1288  009E                     	;# 
  1289  010C                     	;# 
  1290  010D                     	;# 
  1291  010E                     	;# 
  1292  0116                     	;# 
  1293  0117                     	;# 
  1294  011D                     	;# 
  1295  018C                     	;# 
  1296  018D                     	;# 
  1297  018E                     	;# 
  1298  0191                     	;# 
  1299  0191                     	;# 
  1300  0192                     	;# 
  1301  0193                     	;# 
  1302  0193                     	;# 
  1303  0194                     	;# 
  1304  0195                     	;# 
  1305  0196                     	;# 
  1306  0197                     	;# 
  1307  0199                     	;# 
  1308  019A                     	;# 
  1309  019B                     	;# 
  1310  019B                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019C                     	;# 
  1314  019C                     	;# 
  1315  019D                     	;# 
  1316  019E                     	;# 
  1317  019F                     	;# 
  1318  020D                     	;# 
  1319  0210                     	;# 
  1320  0211                     	;# 
  1321  0211                     	;# 
  1322  0212                     	;# 
  1323  0212                     	;# 
  1324  0213                     	;# 
  1325  0213                     	;# 
  1326  0214                     	;# 
  1327  0214                     	;# 
  1328  0215                     	;# 
  1329  0215                     	;# 
  1330  0215                     	;# 
  1331  0216                     	;# 
  1332  0216                     	;# 
  1333  0217                     	;# 
  1334  0217                     	;# 
  1335  0291                     	;# 
  1336  0291                     	;# 
  1337  0292                     	;# 
  1338  0293                     	;# 
  1339  0298                     	;# 
  1340  0298                     	;# 
  1341  0299                     	;# 
  1342  029A                     	;# 
  1343  0394                     	;# 
  1344  0395                     	;# 
  1345  0396                     	;# 
  1346  0FE4                     	;# 
  1347  0FE5                     	;# 
  1348  0FE6                     	;# 
  1349  0FE7                     	;# 
  1350  0FE8                     	;# 
  1351  0FE9                     	;# 
  1352  0FEA                     	;# 
  1353  0FEB                     	;# 
  1354  0FED                     	;# 
  1355  0FEE                     	;# 
  1356  0FEF                     	;# 
  1357  0000                     	;# 
  1358  0001                     	;# 
  1359  0002                     	;# 
  1360  0003                     	;# 
  1361  0004                     	;# 
  1362  0005                     	;# 
  1363  0006                     	;# 
  1364  0007                     	;# 
  1365  0008                     	;# 
  1366  0009                     	;# 
  1367  000A                     	;# 
  1368  000B                     	;# 
  1369  000C                     	;# 
  1370  000D                     	;# 
  1371  000E                     	;# 
  1372  0010                     	;# 
  1373  0011                     	;# 
  1374  0012                     	;# 
  1375  0015                     	;# 
  1376  0016                     	;# 
  1377  0016                     	;# 
  1378  0017                     	;# 
  1379  0018                     	;# 
  1380  0019                     	;# 
  1381  001A                     	;# 
  1382  001B                     	;# 
  1383  001C                     	;# 
  1384  008C                     	;# 
  1385  008D                     	;# 
  1386  008E                     	;# 
  1387  0090                     	;# 
  1388  0091                     	;# 
  1389  0092                     	;# 
  1390  0095                     	;# 
  1391  0096                     	;# 
  1392  0097                     	;# 
  1393  0099                     	;# 
  1394  009A                     	;# 
  1395  009B                     	;# 
  1396  009B                     	;# 
  1397  009C                     	;# 
  1398  009D                     	;# 
  1399  009E                     	;# 
  1400  010C                     	;# 
  1401  010D                     	;# 
  1402  010E                     	;# 
  1403  0116                     	;# 
  1404  0117                     	;# 
  1405  011D                     	;# 
  1406  018C                     	;# 
  1407  018D                     	;# 
  1408  018E                     	;# 
  1409  0191                     	;# 
  1410  0191                     	;# 
  1411  0192                     	;# 
  1412  0193                     	;# 
  1413  0193                     	;# 
  1414  0194                     	;# 
  1415  0195                     	;# 
  1416  0196                     	;# 
  1417  0197                     	;# 
  1418  0199                     	;# 
  1419  019A                     	;# 
  1420  019B                     	;# 
  1421  019B                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019C                     	;# 
  1425  019C                     	;# 
  1426  019D                     	;# 
  1427  019E                     	;# 
  1428  019F                     	;# 
  1429  020D                     	;# 
  1430  0210                     	;# 
  1431  0211                     	;# 
  1432  0211                     	;# 
  1433  0212                     	;# 
  1434  0212                     	;# 
  1435  0213                     	;# 
  1436  0213                     	;# 
  1437  0214                     	;# 
  1438  0214                     	;# 
  1439  0215                     	;# 
  1440  0215                     	;# 
  1441  0215                     	;# 
  1442  0216                     	;# 
  1443  0216                     	;# 
  1444  0217                     	;# 
  1445  0217                     	;# 
  1446  0291                     	;# 
  1447  0291                     	;# 
  1448  0292                     	;# 
  1449  0293                     	;# 
  1450  0298                     	;# 
  1451  0298                     	;# 
  1452  0299                     	;# 
  1453  029A                     	;# 
  1454  0394                     	;# 
  1455  0395                     	;# 
  1456  0396                     	;# 
  1457  0FE4                     	;# 
  1458  0FE5                     	;# 
  1459  0FE6                     	;# 
  1460  0FE7                     	;# 
  1461  0FE8                     	;# 
  1462  0FE9                     	;# 
  1463  0FEA                     	;# 
  1464  0FEB                     	;# 
  1465  0FED                     	;# 
  1466  0FEE                     	;# 
  1467  0FEF                     	;# 
  1468  0000                     	;# 
  1469  0001                     	;# 
  1470  0002                     	;# 
  1471  0003                     	;# 
  1472  0004                     	;# 
  1473  0005                     	;# 
  1474  0006                     	;# 
  1475  0007                     	;# 
  1476  0008                     	;# 
  1477  0009                     	;# 
  1478  000A                     	;# 
  1479  000B                     	;# 
  1480  000C                     	;# 
  1481  000D                     	;# 
  1482  000E                     	;# 
  1483  0010                     	;# 
  1484  0011                     	;# 
  1485  0012                     	;# 
  1486  0015                     	;# 
  1487  0016                     	;# 
  1488  0016                     	;# 
  1489  0017                     	;# 
  1490  0018                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001B                     	;# 
  1494  001C                     	;# 
  1495  008C                     	;# 
  1496  008D                     	;# 
  1497  008E                     	;# 
  1498  0090                     	;# 
  1499  0091                     	;# 
  1500  0092                     	;# 
  1501  0095                     	;# 
  1502  0096                     	;# 
  1503  0097                     	;# 
  1504  0099                     	;# 
  1505  009A                     	;# 
  1506  009B                     	;# 
  1507  009B                     	;# 
  1508  009C                     	;# 
  1509  009D                     	;# 
  1510  009E                     	;# 
  1511  010C                     	;# 
  1512  010D                     	;# 
  1513  010E                     	;# 
  1514  0116                     	;# 
  1515  0117                     	;# 
  1516  011D                     	;# 
  1517  018C                     	;# 
  1518  018D                     	;# 
  1519  018E                     	;# 
  1520  0191                     	;# 
  1521  0191                     	;# 
  1522  0192                     	;# 
  1523  0193                     	;# 
  1524  0193                     	;# 
  1525  0194                     	;# 
  1526  0195                     	;# 
  1527  0196                     	;# 
  1528  0197                     	;# 
  1529  0199                     	;# 
  1530  019A                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019D                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  020D                     	;# 
  1541  0210                     	;# 
  1542  0211                     	;# 
  1543  0211                     	;# 
  1544  0212                     	;# 
  1545  0212                     	;# 
  1546  0213                     	;# 
  1547  0213                     	;# 
  1548  0214                     	;# 
  1549  0214                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0291                     	;# 
  1558  0291                     	;# 
  1559  0292                     	;# 
  1560  0293                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  0394                     	;# 
  1566  0395                     	;# 
  1567  0396                     	;# 
  1568  0FE4                     	;# 
  1569  0FE5                     	;# 
  1570  0FE6                     	;# 
  1571  0FE7                     	;# 
  1572  0FE8                     	;# 
  1573  0FE9                     	;# 
  1574  0FEA                     	;# 
  1575  0FEB                     	;# 
  1576  0FED                     	;# 
  1577  0FEE                     	;# 
  1578  0FEF                     	;# 
  1579  0000                     	;# 
  1580  0001                     	;# 
  1581  0002                     	;# 
  1582  0003                     	;# 
  1583  0004                     	;# 
  1584  0005                     	;# 
  1585  0006                     	;# 
  1586  0007                     	;# 
  1587  0008                     	;# 
  1588  0009                     	;# 
  1589  000A                     	;# 
  1590  000B                     	;# 
  1591  000C                     	;# 
  1592  000D                     	;# 
  1593  000E                     	;# 
  1594  0010                     	;# 
  1595  0011                     	;# 
  1596  0012                     	;# 
  1597  0015                     	;# 
  1598  0016                     	;# 
  1599  0016                     	;# 
  1600  0017                     	;# 
  1601  0018                     	;# 
  1602  0019                     	;# 
  1603  001A                     	;# 
  1604  001B                     	;# 
  1605  001C                     	;# 
  1606  008C                     	;# 
  1607  008D                     	;# 
  1608  008E                     	;# 
  1609  0090                     	;# 
  1610  0091                     	;# 
  1611  0092                     	;# 
  1612  0095                     	;# 
  1613  0096                     	;# 
  1614  0097                     	;# 
  1615  0099                     	;# 
  1616  009A                     	;# 
  1617  009B                     	;# 
  1618  009B                     	;# 
  1619  009C                     	;# 
  1620  009D                     	;# 
  1621  009E                     	;# 
  1622  010C                     	;# 
  1623  010D                     	;# 
  1624  010E                     	;# 
  1625  0116                     	;# 
  1626  0117                     	;# 
  1627  011D                     	;# 
  1628  018C                     	;# 
  1629  018D                     	;# 
  1630  018E                     	;# 
  1631  0191                     	;# 
  1632  0191                     	;# 
  1633  0192                     	;# 
  1634  0193                     	;# 
  1635  0193                     	;# 
  1636  0194                     	;# 
  1637  0195                     	;# 
  1638  0196                     	;# 
  1639  0197                     	;# 
  1640  0199                     	;# 
  1641  019A                     	;# 
  1642  019B                     	;# 
  1643  019B                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019C                     	;# 
  1647  019C                     	;# 
  1648  019D                     	;# 
  1649  019E                     	;# 
  1650  019F                     	;# 
  1651  020D                     	;# 
  1652  0210                     	;# 
  1653  0211                     	;# 
  1654  0211                     	;# 
  1655  0212                     	;# 
  1656  0212                     	;# 
  1657  0213                     	;# 
  1658  0213                     	;# 
  1659  0214                     	;# 
  1660  0214                     	;# 
  1661  0215                     	;# 
  1662  0215                     	;# 
  1663  0215                     	;# 
  1664  0216                     	;# 
  1665  0216                     	;# 
  1666  0217                     	;# 
  1667  0217                     	;# 
  1668  0291                     	;# 
  1669  0291                     	;# 
  1670  0292                     	;# 
  1671  0293                     	;# 
  1672  0298                     	;# 
  1673  0298                     	;# 
  1674  0299                     	;# 
  1675  029A                     	;# 
  1676  0394                     	;# 
  1677  0395                     	;# 
  1678  0396                     	;# 
  1679  0FE4                     	;# 
  1680  0FE5                     	;# 
  1681  0FE6                     	;# 
  1682  0FE7                     	;# 
  1683  0FE8                     	;# 
  1684  0FE9                     	;# 
  1685  0FEA                     	;# 
  1686  0FEB                     	;# 
  1687  0FED                     	;# 
  1688  0FEE                     	;# 
  1689  0FEF                     	;# 
  1690  0000                     	;# 
  1691  0001                     	;# 
  1692  0002                     	;# 
  1693  0003                     	;# 
  1694  0004                     	;# 
  1695  0005                     	;# 
  1696  0006                     	;# 
  1697  0007                     	;# 
  1698  0008                     	;# 
  1699  0009                     	;# 
  1700  000A                     	;# 
  1701  000B                     	;# 
  1702  000C                     	;# 
  1703  000D                     	;# 
  1704  000E                     	;# 
  1705  0010                     	;# 
  1706  0011                     	;# 
  1707  0012                     	;# 
  1708  0015                     	;# 
  1709  0016                     	;# 
  1710  0016                     	;# 
  1711  0017                     	;# 
  1712  0018                     	;# 
  1713  0019                     	;# 
  1714  001A                     	;# 
  1715  001B                     	;# 
  1716  001C                     	;# 
  1717  008C                     	;# 
  1718  008D                     	;# 
  1719  008E                     	;# 
  1720  0090                     	;# 
  1721  0091                     	;# 
  1722  0092                     	;# 
  1723  0095                     	;# 
  1724  0096                     	;# 
  1725  0097                     	;# 
  1726  0099                     	;# 
  1727  009A                     	;# 
  1728  009B                     	;# 
  1729  009B                     	;# 
  1730  009C                     	;# 
  1731  009D                     	;# 
  1732  009E                     	;# 
  1733  010C                     	;# 
  1734  010D                     	;# 
  1735  010E                     	;# 
  1736  0116                     	;# 
  1737  0117                     	;# 
  1738  011D                     	;# 
  1739  018C                     	;# 
  1740  018D                     	;# 
  1741  018E                     	;# 
  1742  0191                     	;# 
  1743  0191                     	;# 
  1744  0192                     	;# 
  1745  0193                     	;# 
  1746  0193                     	;# 
  1747  0194                     	;# 
  1748  0195                     	;# 
  1749  0196                     	;# 
  1750  0197                     	;# 
  1751  0199                     	;# 
  1752  019A                     	;# 
  1753  019B                     	;# 
  1754  019B                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019C                     	;# 
  1758  019C                     	;# 
  1759  019D                     	;# 
  1760  019E                     	;# 
  1761  019F                     	;# 
  1762  020D                     	;# 
  1763  0210                     	;# 
  1764  0211                     	;# 
  1765  0211                     	;# 
  1766  0212                     	;# 
  1767  0212                     	;# 
  1768  0213                     	;# 
  1769  0213                     	;# 
  1770  0214                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0216                     	;# 
  1776  0216                     	;# 
  1777  0217                     	;# 
  1778  0217                     	;# 
  1779  0291                     	;# 
  1780  0291                     	;# 
  1781  0292                     	;# 
  1782  0293                     	;# 
  1783  0298                     	;# 
  1784  0298                     	;# 
  1785  0299                     	;# 
  1786  029A                     	;# 
  1787  0394                     	;# 
  1788  0395                     	;# 
  1789  0396                     	;# 
  1790  0FE4                     	;# 
  1791  0FE5                     	;# 
  1792  0FE6                     	;# 
  1793  0FE7                     	;# 
  1794  0FE8                     	;# 
  1795  0FE9                     	;# 
  1796  0FEA                     	;# 
  1797  0FEB                     	;# 
  1798  0FED                     	;# 
  1799  0FEE                     	;# 
  1800  0FEF                     	;# 
  1801  0000                     	;# 
  1802  0001                     	;# 
  1803  0002                     	;# 
  1804  0003                     	;# 
  1805  0004                     	;# 
  1806  0005                     	;# 
  1807  0006                     	;# 
  1808  0007                     	;# 
  1809  0008                     	;# 
  1810  0009                     	;# 
  1811  000A                     	;# 
  1812  000B                     	;# 
  1813  000C                     	;# 
  1814  000D                     	;# 
  1815  000E                     	;# 
  1816  0010                     	;# 
  1817  0011                     	;# 
  1818  0012                     	;# 
  1819  0015                     	;# 
  1820  0016                     	;# 
  1821  0016                     	;# 
  1822  0017                     	;# 
  1823  0018                     	;# 
  1824  0019                     	;# 
  1825  001A                     	;# 
  1826  001B                     	;# 
  1827  001C                     	;# 
  1828  008C                     	;# 
  1829  008D                     	;# 
  1830  008E                     	;# 
  1831  0090                     	;# 
  1832  0091                     	;# 
  1833  0092                     	;# 
  1834  0095                     	;# 
  1835  0096                     	;# 
  1836  0097                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009B                     	;# 
  1841  009C                     	;# 
  1842  009D                     	;# 
  1843  009E                     	;# 
  1844  010C                     	;# 
  1845  010D                     	;# 
  1846  010E                     	;# 
  1847  0116                     	;# 
  1848  0117                     	;# 
  1849  011D                     	;# 
  1850  018C                     	;# 
  1851  018D                     	;# 
  1852  018E                     	;# 
  1853  0191                     	;# 
  1854  0191                     	;# 
  1855  0192                     	;# 
  1856  0193                     	;# 
  1857  0193                     	;# 
  1858  0194                     	;# 
  1859  0195                     	;# 
  1860  0196                     	;# 
  1861  0197                     	;# 
  1862  0199                     	;# 
  1863  019A                     	;# 
  1864  019B                     	;# 
  1865  019B                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019C                     	;# 
  1869  019C                     	;# 
  1870  019D                     	;# 
  1871  019E                     	;# 
  1872  019F                     	;# 
  1873  020D                     	;# 
  1874  0210                     	;# 
  1875  0211                     	;# 
  1876  0211                     	;# 
  1877  0212                     	;# 
  1878  0212                     	;# 
  1879  0213                     	;# 
  1880  0213                     	;# 
  1881  0214                     	;# 
  1882  0214                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0216                     	;# 
  1887  0216                     	;# 
  1888  0217                     	;# 
  1889  0217                     	;# 
  1890  0291                     	;# 
  1891  0291                     	;# 
  1892  0292                     	;# 
  1893  0293                     	;# 
  1894  0298                     	;# 
  1895  0298                     	;# 
  1896  0299                     	;# 
  1897  029A                     	;# 
  1898  0394                     	;# 
  1899  0395                     	;# 
  1900  0396                     	;# 
  1901  0FE4                     	;# 
  1902  0FE5                     	;# 
  1903  0FE6                     	;# 
  1904  0FE7                     	;# 
  1905  0FE8                     	;# 
  1906  0FE9                     	;# 
  1907  0FEA                     	;# 
  1908  0FEB                     	;# 
  1909  0FED                     	;# 
  1910  0FEE                     	;# 
  1911  0FEF                     	;# 
  1912  0000                     	;# 
  1913  0001                     	;# 
  1914  0002                     	;# 
  1915  0003                     	;# 
  1916  0004                     	;# 
  1917  0005                     	;# 
  1918  0006                     	;# 
  1919  0007                     	;# 
  1920  0008                     	;# 
  1921  0009                     	;# 
  1922  000A                     	;# 
  1923  000B                     	;# 
  1924  000C                     	;# 
  1925  000D                     	;# 
  1926  000E                     	;# 
  1927  0010                     	;# 
  1928  0011                     	;# 
  1929  0012                     	;# 
  1930  0015                     	;# 
  1931  0016                     	;# 
  1932  0016                     	;# 
  1933  0017                     	;# 
  1934  0018                     	;# 
  1935  0019                     	;# 
  1936  001A                     	;# 
  1937  001B                     	;# 
  1938  001C                     	;# 
  1939  008C                     	;# 
  1940  008D                     	;# 
  1941  008E                     	;# 
  1942  0090                     	;# 
  1943  0091                     	;# 
  1944  0092                     	;# 
  1945  0095                     	;# 
  1946  0096                     	;# 
  1947  0097                     	;# 
  1948  0099                     	;# 
  1949  009A                     	;# 
  1950  009B                     	;# 
  1951  009B                     	;# 
  1952  009C                     	;# 
  1953  009D                     	;# 
  1954  009E                     	;# 
  1955  010C                     	;# 
  1956  010D                     	;# 
  1957  010E                     	;# 
  1958  0116                     	;# 
  1959  0117                     	;# 
  1960  011D                     	;# 
  1961  018C                     	;# 
  1962  018D                     	;# 
  1963  018E                     	;# 
  1964  0191                     	;# 
  1965  0191                     	;# 
  1966  0192                     	;# 
  1967  0193                     	;# 
  1968  0193                     	;# 
  1969  0194                     	;# 
  1970  0195                     	;# 
  1971  0196                     	;# 
  1972  0197                     	;# 
  1973  0199                     	;# 
  1974  019A                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019D                     	;# 
  1982  019E                     	;# 
  1983  019F                     	;# 
  1984  020D                     	;# 
  1985  0210                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0291                     	;# 
  2002  0291                     	;# 
  2003  0292                     	;# 
  2004  0293                     	;# 
  2005  0298                     	;# 
  2006  0298                     	;# 
  2007  0299                     	;# 
  2008  029A                     	;# 
  2009  0394                     	;# 
  2010  0395                     	;# 
  2011  0396                     	;# 
  2012  0FE4                     	;# 
  2013  0FE5                     	;# 
  2014  0FE6                     	;# 
  2015  0FE7                     	;# 
  2016  0FE8                     	;# 
  2017  0FE9                     	;# 
  2018  0FEA                     	;# 
  2019  0FEB                     	;# 
  2020  0FED                     	;# 
  2021  0FEE                     	;# 
  2022  0FEF                     	;# 
  2023                           
  2024                           	psect	idataBANK4
  2025  1248                     __pidataBANK4:	
  2026                           
  2027                           ;initializer for __product
  2028  1248  3463               	retlw	99
  2029  1249  3402               	retlw	2
  2030  124A  3400               	retlw	0
  2031  124B  3400               	retlw	0
  2032  124C  3400               	retlw	0
  2033  124D  3400               	retlw	0
  2034  124E  3400               	retlw	0
  2035  124F  3400               	retlw	0
  2036  1250  3400               	retlw	0
  2037  1251  3400               	retlw	0
  2038  1252  3400               	retlw	0
  2039  1253  3400               	retlw	0
  2040  1254  34FF               	retlw	255
  2041  1255  34FF               	retlw	255
  2042  1256  34FF               	retlw	255
  2043  1257  3400               	retlw	0
  2044  1258  3400               	retlw	0
  2045  1259  3400               	retlw	0
  2046  125A  3400               	retlw	0
  2047  125B  3400               	retlw	0
  2048  125C  3400               	retlw	0
  2049  125D  3400               	retlw	0
  2050  125E  3400               	retlw	0
  2051  125F  3400               	retlw	0
  2052  1260  3400               	retlw	0
  2053  1261  3400               	retlw	0
  2054  1262  3400               	retlw	0
  2055  1263  3400               	retlw	0
  2056  1264  3400               	retlw	0
  2057  1265  3400               	retlw	0
  2058  1266  3400               	retlw	0
  2059  1267  3400               	retlw	0
  2060                           
  2061                           	psect	stringtext
  2062  1000                     __pstringtext:	
  2063  1000                     _CC2500_registers_address:	
  2064  1000  3403               	retlw	3
  2065  1001  3416               	retlw	22
  2066  1002  3417               	retlw	23
  2067  1003  341E               	retlw	30
  2068  1004  341F               	retlw	31
  2069  1005  3420               	retlw	32
  2070  1006  342A               	retlw	42
  2071  1007  342B               	retlw	43
  2072  1008  340B               	retlw	11
  2073  1009  340C               	retlw	12
  2074  100A  340D               	retlw	13
  2075  100B  340E               	retlw	14
  2076  100C  340F               	retlw	15
  2077  100D  3410               	retlw	16
  2078  100E  3411               	retlw	17
  2079  100F  3412               	retlw	18
  2080  1010  3413               	retlw	19
  2081  1011  3414               	retlw	20
  2082  1012  340A               	retlw	10
  2083  1013  3415               	retlw	21
  2084  1014  3421               	retlw	33
  2085  1015  3422               	retlw	34
  2086  1016  3418               	retlw	24
  2087  1017  3419               	retlw	25
  2088  1018  341A               	retlw	26
  2089  1019  341B               	retlw	27
  2090  101A  341C               	retlw	28
  2091  101B  341D               	retlw	29
  2092  101C  3423               	retlw	35
  2093  101D  3424               	retlw	36
  2094  101E  3425               	retlw	37
  2095  101F  3426               	retlw	38
  2096  1020  3429               	retlw	41
  2097  1021  342C               	retlw	44
  2098  1022  342D               	retlw	45
  2099  1023  342E               	retlw	46
  2100  1024  3400               	retlw	0
  2101  1025  3401               	retlw	1
  2102  1026  3402               	retlw	2
  2103  1027  3407               	retlw	7
  2104  1028  3408               	retlw	8
  2105  1029  3409               	retlw	9
  2106  102A  3406               	retlw	6
  2107  102B  3404               	retlw	4
  2108  102C  3405               	retlw	5
  2109  102D  3427               	retlw	39
  2110  102E  3428               	retlw	40
  2111  102F                     __end_of_CC2500_registers_address:	
  2112  102F                     _CC2500_rfSettings:	
  2113  102F  3407               	retlw	7
  2114  1030  3407               	retlw	7
  2115  1031  3430               	retlw	48
  2116  1032  3487               	retlw	135
  2117  1033  346B               	retlw	107
  2118  1034  34F8               	retlw	248
  2119  1035  347F               	retlw	127
  2120  1036  343F               	retlw	63
  2121  1037  3409               	retlw	9
  2122  1038  3400               	retlw	0
  2123  1039  345C               	retlw	92
  2124  103A  34A7               	retlw	167
  2125  103B  3462               	retlw	98
  2126  103C  3486               	retlw	134
  2127  103D  3483               	retlw	131
  2128  103E  3403               	retlw	3
  2129  103F  3422               	retlw	34
  2130  1040  34F8               	retlw	248
  2131  1041  3400               	retlw	0
  2132  1042  3444               	retlw	68
  2133  1043  34B6               	retlw	182
  2134  1044  3410               	retlw	16
  2135  1045  3418               	retlw	24
  2136  1046  341D               	retlw	29
  2137  1047  341C               	retlw	28
  2138  1048  34C7               	retlw	199
  2139  1049  3400               	retlw	0
  2140  104A  34B2               	retlw	178
  2141  104B  34EA               	retlw	234
  2142  104C  340A               	retlw	10
  2143  104D  3400               	retlw	0
  2144  104E  3411               	retlw	17
  2145  104F  3459               	retlw	89
  2146  1050  3488               	retlw	136
  2147  1051  3431               	retlw	49
  2148  1052  340B               	retlw	11
  2149  1053  342F               	retlw	47
  2150  1054  342E               	retlw	46
  2151  1055  3406               	retlw	6
  2152  1056  3404               	retlw	4
  2153  1057  3405               	retlw	5
  2154  1058  3400               	retlw	0
  2155  1059  3430               	retlw	48
  2156  105A  34D3               	retlw	211
  2157  105B  3491               	retlw	145
  2158  105C  3441               	retlw	65
  2159  105D  3400               	retlw	0
  2160  105E                     __end_of_CC2500_rfSettings:	
  2161  105E                     _CC2500_patable_vaule:	
  2162  105E  34FE               	retlw	254
  2163  105F  34FE               	retlw	254
  2164  1060  34FE               	retlw	254
  2165  1061  34FE               	retlw	254
  2166  1062  34FE               	retlw	254
  2167  1063  34FE               	retlw	254
  2168  1064  34FE               	retlw	254
  2169  1065  34FE               	retlw	254
  2170  1066                     __end_of_CC2500_patable_vaule:	
  2171                           
  2172                           	psect	nvBANK0
  2173  006D                     __pnvBANK0:	
  2174  006D                     _product:	
  2175  006D                     	ds	1
  2176  000C                     _PORTA	set	12
  2177  000D                     _PORTB	set	13
  2178  000E                     _PORTC	set	14
  2179  0015                     _TMR0	set	21
  2180  005F                     _GIE	set	95
  2181  005B                     _IOCIE	set	91
  2182  0058                     _IOCIF	set	88
  2183  005E                     _PEIE	set	94
  2184  0060                     _RA0	set	96
  2185  0063                     _RA3	set	99
  2186  0064                     _RA4	set	100
  2187  0066                     _RA6	set	102
  2188  0067                     _RA7	set	103
  2189  0068                     _RB0	set	104
  2190  0069                     _RB1	set	105
  2191  006A                     _RB2	set	106
  2192  006B                     _RB3	set	107
  2193  006C                     _RB4	set	108
  2194  006D                     _RB5	set	109
  2195  0070                     _RC0	set	112
  2196  0071                     _RC1	set	113
  2197  0072                     _RC2	set	114
  2198  0074                     _RC4	set	116
  2199  0075                     _RC5	set	117
  2200  0076                     _RC6	set	118
  2201  0077                     _RC7	set	119
  2202  005D                     _TMR0IE	set	93
  2203  005A                     _TMR0IF	set	90
  2204  009D                     _ADCON0	set	157
  2205  009E                     _ADCON1	set	158
  2206  009C                     _ADRESH	set	156
  2207  009B                     _ADRESL	set	155
  2208  0095                     _OPTION_REG	set	149
  2209  0099                     _OSCCON	set	153
  2210  008C                     _TRISA	set	140
  2211  008D                     _TRISB	set	141
  2212  008E                     _TRISC	set	142
  2213  0097                     _WDTCON	set	151
  2214  04E9                     _GO_nDONE	set	1257
  2215  0117                     _FVRCON	set	279
  2216  010C                     _LATA	set	268
  2217  010D                     _LATB	set	269
  2218  010E                     _LATC	set	270
  2219  018C                     _ANSELA	set	396
  2220  018D                     _ANSELB	set	397
  2221  018E                     _ANSELC	set	398
  2222  0192                     _PMADRH	set	402
  2223  0191                     _PMADRL	set	401
  2224  0196                     _PMCON2	set	406
  2225  0194                     _PMDATH	set	404
  2226  0193                     _PMDATL	set	403
  2227  0CAE                     _CFGS	set	3246
  2228  0CAC                     _FREE	set	3244
  2229  0CAD                     _LWLO	set	3245
  2230  0CA8                     _RD	set	3240
  2231  0CA9                     _WR	set	3241
  2232  0CAA                     _WREN	set	3242
  2233  1069                     _WPUB1	set	4201
  2234  106A                     _WPUB2	set	4202
  2235  0396                     _IOCBF	set	918
  2236  0395                     _IOCBN	set	917
  2237  0394                     _IOCBP	set	916
  2238  1CB2                     _IOCBF2	set	7346
  2239                           
  2240                           ; #config settings
  2241  0000                     
  2242                           	psect	cinit
  2243  0015                     start_initialization:	
  2244  0015                     __initialization:	
  2245                           
  2246                           ; Clear objects allocated to BITCOMMON
  2247  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2248                           
  2249                           ; Clear objects allocated to COMMON
  2250  0016  01F0               	clrf	__pbssCOMMON& (0+127)
  2251  0017  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2252  0018  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2253  0019  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2254  001A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2255  001B  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2256                           
  2257                           ; Clear objects allocated to BANK0
  2258  001C  01EB               	clrf	__pbssBANK0& (0+127)
  2259  001D  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2260                           
  2261                           ; Clear objects allocated to BANK1
  2262  001E  30A0               	movlw	low __pbssBANK1
  2263  001F  0084               	movwf	4
  2264  0020  3000               	movlw	high __pbssBANK1
  2265  0021  0085               	movwf	5
  2266  0022  304E               	movlw	78
  2267  0023  3187  27FA  3180   	fcall	clear_ram0
  2268                           
  2269                           ; Clear objects allocated to BANK2
  2270  0026  3020               	movlw	low __pbssBANK2
  2271  0027  0084               	movwf	4
  2272  0028  3001               	movlw	high __pbssBANK2
  2273  0029  0085               	movwf	5
  2274  002A  304C               	movlw	76
  2275  002B  3187  27FA  3180   	fcall	clear_ram0
  2276                           
  2277                           ; Clear objects allocated to BANK3
  2278  002E  30A0               	movlw	low __pbssBANK3
  2279  002F  0084               	movwf	4
  2280  0030  3001               	movlw	high __pbssBANK3
  2281  0031  0085               	movwf	5
  2282  0032  3046               	movlw	70
  2283  0033  3187  27FA  3180   	fcall	clear_ram0
  2284                           
  2285                           ; Initialize objects allocated to BANK4
  2286  0036  3048               	movlw	low __pidataBANK4
  2287  0037  0084               	movwf	4
  2288  0038  3092               	movlw	(high __pidataBANK4)| (0+128)
  2289  0039  0085               	movwf	5
  2290  003A  3020               	movlw	low __pdataBANK4
  2291  003B  0086               	movwf	6
  2292  003C  3002               	movlw	high __pdataBANK4
  2293  003D  0087               	movwf	7
  2294  003E  3020               	movlw	32
  2295  003F  319E  265F         	fcall	init_ram
  2296  0041                     end_of_initialization:	
  2297                           ;End of C runtime variable initialization code
  2298                           
  2299  0041                     __end_of__initialization:	
  2300  0041  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2301  0042  0020               	movlb	0
  2302  0043  3195  2D6E         	ljmp	_main	;jump to C main() function
  2303                           
  2304                           	psect	bitbssCOMMON
  2305  03E0                     __pbitbssCOMMON:	
  2306  03E0                     _Receive_OK:	
  2307  03E0                     	ds	1
  2308  03E1                     _Transceive_OK:	
  2309  03E1                     	ds	1
  2310                           
  2311                           	psect	bssCOMMON
  2312  0070                     __pbssCOMMON:	
  2313  0070                     _LED:	
  2314  0070                     	ds	2
  2315  0072                     _DelayOff:	
  2316  0072                     	ds	1
  2317  0073                     _Dimmer:	
  2318  0073                     	ds	1
  2319  0074                     _DimmerLightsIntr:	
  2320  0074                     	ds	1
  2321  0075                     _SPI0Buffer:	
  2322  0075                     	ds	1
  2323                           
  2324                           	psect	bssBANK0
  2325  006B                     __pbssBANK0:	
  2326  006B                     _DimmerLights:	
  2327  006B                     	ds	1
  2328  006C                     _Sw:	
  2329  006C                     	ds	1
  2330                           
  2331                           	psect	bssBANK1
  2332  00A0                     __pbssBANK1:	
  2333  00A0                     _myMain:	
  2334  00A0                     	ds	18
  2335  00B2                     _Buz1:	
  2336  00B2                     	ds	12
  2337  00BE                     _RF1:	
  2338  00BE                     	ds	12
  2339  00CA                     _RF_Count:	
  2340  00CA                     	ds	2
  2341  00CC                     _WDT:	
  2342  00CC                     	ds	2
  2343  00CE                     _CRC:	
  2344  00CE                     	ds	1
  2345  00CF                     _DimmerLights11:	
  2346  00CF                     	ds	1
  2347  00D0                     _DimmerLights22:	
  2348  00D0                     	ds	1
  2349  00D1                     _DimmerLights33:	
  2350  00D1                     	ds	1
  2351  00D2                     _DimmerLightsIntrIOC:	
  2352  00D2                     	ds	1
  2353  00D3                     _RFSW:	
  2354  00D3                     	ds	1
  2355  00D4                     _RSSI:	
  2356  00D4                     	ds	1
  2357  00D5                     _Rx_Length:	
  2358  00D5                     	ds	1
  2359  00D6                     _Tx_Length:	
  2360  00D6                     	ds	1
  2361  00D7                     _r_address:	
  2362  00D7                     	ds	1
  2363  00D8                     _r_data:	
  2364  00D8                     	ds	1
  2365  00D9                     _s_data:	
  2366  00D9                     	ds	1
  2367  00DA                     _VarErrLED:	
  2368  00DA                     	ds	4
  2369  00DE                     _VarLED1:	
  2370  00DE                     	ds	4
  2371  00E2                     _Dimmer1:	
  2372  00E2                     	ds	3
  2373  00E5                     _DlySw1:	
  2374  00E5                     	ds	2
  2375  00E7                     _DlySw2:	
  2376  00E7                     	ds	2
  2377  00E9                     _DlySw3:	
  2378  00E9                     	ds	2
  2379  00EB                     _RFSW1:	
  2380  00EB                     	ds	1
  2381  00EC                     _RFSW2:	
  2382  00EC                     	ds	1
  2383  00ED                     _RFSW3:	
  2384  00ED                     	ds	1
  2385                           
  2386                           	psect	bssBANK2
  2387  0120                     __pbssBANK2:	
  2388  0120                     _RF_Data:	
  2389  0120                     	ds	21
  2390  0135                     _Timer0:	
  2391  0135                     	ds	8
  2392  013D                     _DimmerLights1:	
  2393  013D                     	ds	15
  2394  014C                     _DimmerLights2:	
  2395  014C                     	ds	15
  2396  015B                     _Sw1:	
  2397  015B                     	ds	9
  2398  0164                     _VarLED2:	
  2399  0164                     	ds	4
  2400  0168                     _VarLED3:	
  2401  0168                     	ds	4
  2402                           
  2403                           	psect	bssBANK3
  2404  01A0                     __pbssBANK3:	
  2405  01A0                     _Memory:	
  2406  01A0                     	ds	37
  2407  01C5                     _DimmerLights3:	
  2408  01C5                     	ds	15
  2409  01D4                     _Sw2:	
  2410  01D4                     	ds	9
  2411  01DD                     _Sw3:	
  2412  01DD                     	ds	9
  2413                           
  2414                           	psect	dataBANK4
  2415  0220                     __pdataBANK4:	
  2416  0220                     __product:	
  2417  0220                     	ds	32
  2418                           
  2419                           	psect	clrtext
  2420  07FA                     clear_ram0:	
  2421                           ;	Called with FSR0 containing the base address, and
  2422                           ;	WREG with the size to clear
  2423                           
  2424  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2425  07FB                     clrloop0:	
  2426  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2427  07FC  3101               	addfsr 0,1
  2428  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2429  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  2430  07FF  3400               	retlw	0	;all done for this memory range, return
  2431                           
  2432                           	psect	inittext
  2433  1E5F                     init_ram:	
  2434  1E5F  00FE               	movwf	126
  2435  1E60                     initloop:	
  2436  1E60  0012               	moviw fsr0++
  2437  1E61  001E               	movwi fsr1++
  2438  1E62  0BFE               	decfsz	126,f
  2439  1E63  2E60               	goto	initloop
  2440  1E64  3400               	retlw	0
  2441                           
  2442                           	psect	cstackBANK2
  2443  016C                     __pcstackBANK2:	
  2444  016C                     ?_main:	
  2445  016C                     main@argc:	
  2446                           ; 2 bytes @ 0x0
  2447                           
  2448                           
  2449                           ; 2 bytes @ 0x0
  2450  016C                     	ds	2
  2451  016E                     main@argv:	
  2452                           
  2453                           ; 2 bytes @ 0x2
  2454  016E                     	ds	2
  2455                           
  2456                           	psect	cstackCOMMON
  2457  0076                     __pcstackCOMMON:	
  2458  0076                     ?_Timeout_Counter:	
  2459  0076                     ?_set_TimeoutCleared:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0076                     ?_CC2500_WriteByte:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0076                     ?_CC2500_WriteCommand:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0076                     ?_CC2500_ReadStatus:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0076                     ?_CC2500_ReadByte:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0076                     ?_CC2500_PowerRST:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0076                     ?_CC2500_InitSetREG:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0076                     ?_CC2500_InitPATable:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0076                     ?_CC2500_ClearTXFIFO:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0076                     ?_CC2500_ClearRXFIFO:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0076                     ?_CC2500_FrequencyCabr:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0076                     ?_CC2500_SIDLEMode:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0076                     ?_DlyOff_Initialization:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0076                     ?_DlyOff_Main:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0076                     ?_setTxData:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0076                     ?_setDimmerLights_Initialization:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0076                     ?_Dimmer_Initialization:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0076                     ?_setMemory_GO:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0076                     ?_setDimmerLights_Main:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0076                     ?_setLED_Initialization:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0076                     ?_setLED_Main:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0076                     ?_Fosc_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0076                     ?_IO_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0076                     ?_TMR0_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0076                     ?_ADC_Set:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0076                     ?_IOC_Set:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0076                     ?_WDT_Set:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0076                     ?_IOC_ISR:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0076                     ?_TMR0_ISR:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0076                     ?_Flash_Memory_Write:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0076                     ?_Flash_Memory_Modify:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0076                     ?_WDT_Clearing:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0076                     ?_myMain_Initialization:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0076                     ?_Switch_Initialization:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0076                     ?_RF_Initialization:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0076                     ?_my_MainTime:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0076                     ?_Switch_Main:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0076                     ?_RF_Main:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0076                     ?_setSw_Enable:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0076                     ?_setRF_Enable:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0076                     ?_setRF_Initialization:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0076                     ?_setRF_Main:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0076                     ?_getRxData:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0076                     ?_setLog_Code:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0076                     ?_setControl_Lights_Table:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0076                     ?_setRFSW_Control:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0076                     ?_setRFSW_AdjControl:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0076                     ?_setRF_DimmerValue:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0076                     ?_setSw_Initialization:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0076                     ?_setSw_Main:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0076                     ?_Sw_DimmerOnFunc:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0076                     ?_Sw_DimmerAdjFunc:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0076                     ?_Sw_DimmerOffFunc:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0076                     ?_Buzzer_Initialization:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0076                     ?_Buzzer_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0076                     ?_CC2500_TxData:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0076                     ?_CC2500_RxData:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0076                     ?_CC2500_PowerOnInitial:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0076                     ?_DelayOffPointSelect:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0076                     ?_DelayOff_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0076                     ?_DelayOff_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0076                     ?_DimmerIntrIOCPointSelect:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0076                     ??_DimmerIntrIOCPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0076                     ?_setDimmerLights_IntrIOC_GO:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0076                     ?_DimmerIntrPointSelect:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0076                     ??_DimmerIntrPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0076                     ?_setDimmerLights_IntrControl:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0076                     ?_DimmerLightsPointSelect:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0076                     ?_DimmerLights_Initialization:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0076                     ?_DimmerLights_Close:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0076                     ?_DimmerLights_Main:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0076                     ?_setDimmerLights_AdjRF:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0076                     ?_LedPointSelect:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0076                     ?_LED_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0076                     ?_LED_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0076                     ?_Mcu_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0076                     ?_ISR:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0076                     ?_setDimmerReClock:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0076                     ?_Flash_Memory_Initialization:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0076                     ?_Flash_Memory_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0076                     ?_Flash_Memory_Unlock:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0076                     ?_Flash_Memory_Erasing:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0076                     ?_WDT_Main:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0076                     ?_setRF_Learn:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0076                     ?_RfSWPointSelect:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0076                     ?_TouchPower:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0076                     ?_SwPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0076                     ?_DelayTimejudge:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0076                     ?_getDimmerLights_StatusFlag:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0076                     ?_getPercentValue:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0076                     ?_Flash_Memory_Read:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0076                     ?_setPercentValue:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735                           
  2736                           ; 1 bytes @ 0x0
  2737  0076                     	ds	1
  2738  0077                     DimmerIntrIOCPointSelect@lights:	
  2739  0077                     DimmerIntrPointSelect@lights:	
  2740                           ; 1 bytes @ 0x1
  2741                           
  2742                           
  2743                           ; 1 bytes @ 0x1
  2744  0077                     	ds	1
  2745  0078                     ??_setDimmerLights_IntrIOC_GO:	
  2746  0078                     ??_setDimmerLights_IntrControl:	
  2747                           ; 0 bytes @ 0x2
  2748                           
  2749  0078                     setDimmerLights_IntrIOC_GO@lights:	
  2750                           ; 0 bytes @ 0x2
  2751                           
  2752                           
  2753                           ; 1 bytes @ 0x2
  2754  0078                     	ds	1
  2755  0079                     ??_IOC_ISR:	
  2756  0079                     ??_setDimmerReClock:	
  2757                           ; 0 bytes @ 0x3
  2758                           
  2759                           
  2760                           ; 0 bytes @ 0x3
  2761  0079                     	ds	1
  2762  007A                     setDimmerLights_IntrControl@lights:	
  2763                           
  2764                           ; 1 bytes @ 0x4
  2765  007A                     	ds	1
  2766  007B                     ??_TMR0_ISR:	
  2767  007B                     ??_ISR:	
  2768                           ; 0 bytes @ 0x5
  2769                           
  2770                           
  2771                           ; 0 bytes @ 0x5
  2772  007B                     	ds	1
  2773                           
  2774                           	psect	cstackBANK0
  2775  0020                     __pcstackBANK0:	
  2776  0020                     ??_Timeout_Counter:	
  2777  0020                     ??_set_TimeoutCleared:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0020                     ??_CC2500_WriteByte:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0020                     ??_CC2500_ReadByte:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0020                     ?_DelayTime_1us:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0020                     ??_setTxData:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0020                     ??_Dimmer_Initialization:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0020                     ??_getDimmerLights_StatusFlag:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0020                     ??_setMemory_GO:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0020                     ??_Fosc_Set:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ??_IO_Set:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ??_TMR0_Set:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ??_ADC_Set:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ??_IOC_Set:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0020                     ??_WDT_Set:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0020                     ??_Flash_Memory_Read:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_Flash_Memory_Write:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ??_WDT_Clearing:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ??_myMain_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_setRF_Enable:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_setRF_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_Buzzer_Initialization:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_Buzzer_Main:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_DelayOffPointSelect:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_DimmerLightsPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_LedPointSelect:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_Flash_Memory_Unlock:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_Flash_Memory_Erasing:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_WDT_Main:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_setRF_Learn:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_RfSWPointSelect:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_TouchPower:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_SwPointSelect:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ?___bmul:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ?_getBuz_GO:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0020                     ?___awdiv:	
  2880                           ; 2 bytes @ 0x0
  2881                           
  2882  0020                     ?___ftpack:	
  2883                           ; 2 bytes @ 0x0
  2884                           
  2885  0020                     LedPointSelect@led:	
  2886                           ; 3 bytes @ 0x0
  2887                           
  2888  0020                     setRF_Learn@command:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0020                     setRF_Enable@command:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0020                     ___bmul@multiplicand:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0020                     DelayTime_1us@count:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0020                     ___awdiv@divisor:	
  2901                           ; 2 bytes @ 0x0
  2902                           
  2903  0020                     ___ftpack@arg:	
  2904                           ; 2 bytes @ 0x0
  2905                           
  2906                           
  2907                           ; 3 bytes @ 0x0
  2908  0020                     	ds	1
  2909  0021                     ?_setLED:	
  2910  0021                     ??_setLED_Main:	
  2911                           ; 0 bytes @ 0x1
  2912                           
  2913  0021                     ??_RF_Initialization:	
  2914                           ; 0 bytes @ 0x1
  2915                           
  2916  0021                     ??_Mcu_Initialization:	
  2917                           ; 0 bytes @ 0x1
  2918                           
  2919  0021                     ??___bmul:	
  2920                           ; 0 bytes @ 0x1
  2921                           
  2922  0021                     CC2500_WriteByte@loop_a:	
  2923                           ; 0 bytes @ 0x1
  2924                           
  2925  0021                     CC2500_ReadByte@loop_b:	
  2926                           ; 1 bytes @ 0x1
  2927                           
  2928  0021                     DelayOffPointSelect@sw:	
  2929                           ; 1 bytes @ 0x1
  2930                           
  2931  0021                     DimmerLightsPointSelect@lights:	
  2932                           ; 1 bytes @ 0x1
  2933                           
  2934  0021                     getDimmerLights_StatusFlag@Status:	
  2935                           ; 1 bytes @ 0x1
  2936                           
  2937  0021                     setLED@command:	
  2938                           ; 1 bytes @ 0x1
  2939                           
  2940  0021                     Flash_Memory_Read@i:	
  2941                           ; 1 bytes @ 0x1
  2942                           
  2943  0021                     Flash_Memory_Write@i:	
  2944                           ; 1 bytes @ 0x1
  2945                           
  2946  0021                     RfSWPointSelect@sw:	
  2947                           ; 1 bytes @ 0x1
  2948                           
  2949  0021                     SwPointSelect@sw:	
  2950                           ; 1 bytes @ 0x1
  2951                           
  2952                           
  2953                           ; 1 bytes @ 0x1
  2954  0021                     	ds	1
  2955  0022                     ??_CC2500_WriteCommand:	
  2956  0022                     ??_CC2500_ReadStatus:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0022                     ??_DelayTime_1us:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0022                     ?_CC2500_WriteREG:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0022                     ??_DlyOff_Initialization:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0022                     ?_setSw_Status:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0022                     ?_setRFSW_Status:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0022                     ?_setDimmerLights_Trigger:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0022                     ?_setDimmerLights_Switch:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0022                     ??_setDimmerLights_Initialization:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0022                     ??_setLED:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0022                     ??_setSw_Enable:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0022                     ??_getBuz_GO:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0022                     ?_setDimmerLights_AdjGo:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0022                     ?_setDimmerLights_TriggerAdj:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0022                     CC2500_WriteREG@value:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0022                     DlyOff_Initialization@sw:	
  3002                           ; 1 bytes @ 0x2
  3003                           
  3004  0022                     _getDimmerLights_StatusFlag$2453:	
  3005                           ; 1 bytes @ 0x2
  3006                           
  3007  0022                     setDimmerLights_Switch@command:	
  3008                           ; 1 bytes @ 0x2
  3009                           
  3010  0022                     setDimmerLights_AdjGo@command:	
  3011                           ; 1 bytes @ 0x2
  3012                           
  3013  0022                     setDimmerLights_Trigger@command:	
  3014                           ; 1 bytes @ 0x2
  3015                           
  3016  0022                     setDimmerLights_TriggerAdj@command:	
  3017                           ; 1 bytes @ 0x2
  3018                           
  3019  0022                     setLED@led:	
  3020                           ; 1 bytes @ 0x2
  3021                           
  3022  0022                     Flash_Memory_Read@address:	
  3023                           ; 1 bytes @ 0x2
  3024                           
  3025  0022                     setMemory_GO@command:	
  3026                           ; 1 bytes @ 0x2
  3027                           
  3028  0022                     setRFSW_Status@command:	
  3029                           ; 1 bytes @ 0x2
  3030                           
  3031  0022                     setSw_Enable@command:	
  3032                           ; 1 bytes @ 0x2
  3033                           
  3034  0022                     setSw_Status@command:	
  3035                           ; 1 bytes @ 0x2
  3036                           
  3037  0022                     ___bmul@product:	
  3038                           ; 1 bytes @ 0x2
  3039                           
  3040  0022                     DelayTime_1us@i:	
  3041                           ; 1 bytes @ 0x2
  3042                           
  3043  0022                     ___awdiv@dividend:	
  3044                           ; 2 bytes @ 0x2
  3045                           
  3046                           
  3047                           ; 2 bytes @ 0x2
  3048  0022                     	ds	1
  3049  0023                     ??_CC2500_WriteREG:	
  3050  0023                     ??_setSw_Status:	
  3051                           ; 0 bytes @ 0x3
  3052                           
  3053  0023                     ??_setRFSW_Status:	
  3054                           ; 0 bytes @ 0x3
  3055                           
  3056  0023                     ??_setDimmerLights_Trigger:	
  3057                           ; 0 bytes @ 0x3
  3058                           
  3059  0023                     ??_setDimmerLights_Switch:	
  3060                           ; 0 bytes @ 0x3
  3061                           
  3062  0023                     ?_setDimmerLights:	
  3063                           ; 0 bytes @ 0x3
  3064                           
  3065  0023                     ??_setLED_Initialization:	
  3066                           ; 0 bytes @ 0x3
  3067                           
  3068  0023                     ??_setSw_Initialization:	
  3069                           ; 0 bytes @ 0x3
  3070                           
  3071  0023                     ??_DelayOff_Initialization:	
  3072                           ; 0 bytes @ 0x3
  3073                           
  3074  0023                     ??_DimmerLights_Close:	
  3075                           ; 0 bytes @ 0x3
  3076                           
  3077  0023                     ??_setDimmerLights_AdjGo:	
  3078                           ; 0 bytes @ 0x3
  3079                           
  3080  0023                     ??_setDimmerLights_TriggerAdj:	
  3081                           ; 0 bytes @ 0x3
  3082                           
  3083  0023                     CC2500_WriteCommand@command:	
  3084                           ; 0 bytes @ 0x3
  3085                           
  3086  0023                     CC2500_ReadStatus@status_addr:	
  3087                           ; 1 bytes @ 0x3
  3088                           
  3089  0023                     setDimmerLights_Initialization@lights:	
  3090                           ; 1 bytes @ 0x3
  3091                           
  3092  0023                     setDimmerLights@status:	
  3093                           ; 1 bytes @ 0x3
  3094                           
  3095  0023                     setDimmerLights_Switch@lights:	
  3096                           ; 1 bytes @ 0x3
  3097                           
  3098  0023                     setDimmerLights_AdjGo@lights:	
  3099                           ; 1 bytes @ 0x3
  3100                           
  3101  0023                     setDimmerLights_Trigger@lights:	
  3102                           ; 1 bytes @ 0x3
  3103                           
  3104  0023                     setDimmerLights_TriggerAdj@lights:	
  3105                           ; 1 bytes @ 0x3
  3106                           
  3107  0023                     setLED_Initialization@led:	
  3108                           ; 1 bytes @ 0x3
  3109                           
  3110  0023                     setLED_Main@led:	
  3111                           ; 1 bytes @ 0x3
  3112                           
  3113  0023                     Flash_Memory_Read@ret:	
  3114                           ; 1 bytes @ 0x3
  3115                           
  3116  0023                     setRFSW_Status@sw:	
  3117                           ; 1 bytes @ 0x3
  3118                           
  3119  0023                     setSw_Initialization@sw:	
  3120                           ; 1 bytes @ 0x3
  3121                           
  3122  0023                     setSw_Status@sw:	
  3123                           ; 1 bytes @ 0x3
  3124                           
  3125  0023                     ___bmul@multiplier:	
  3126                           ; 1 bytes @ 0x3
  3127                           
  3128  0023                     ___ftpack@exp:	
  3129                           ; 1 bytes @ 0x3
  3130                           
  3131                           
  3132                           ; 1 bytes @ 0x3
  3133  0023                     	ds	1
  3134  0024                     ??_CC2500_ClearTXFIFO:	
  3135  0024                     ??_CC2500_ClearRXFIFO:	
  3136                           ; 0 bytes @ 0x4
  3137                           
  3138  0024                     ??_CC2500_SIDLEMode:	
  3139                           ; 0 bytes @ 0x4
  3140                           
  3141  0024                     ??_DelayTimejudge:	
  3142                           ; 0 bytes @ 0x4
  3143                           
  3144  0024                     ??_setDimmerLights:	
  3145                           ; 0 bytes @ 0x4
  3146                           
  3147  0024                     ??_Flash_Memory_Modify:	
  3148                           ; 0 bytes @ 0x4
  3149                           
  3150  0024                     ??_Switch_Initialization:	
  3151                           ; 0 bytes @ 0x4
  3152                           
  3153  0024                     ??_Sw_DimmerAdjFunc:	
  3154                           ; 0 bytes @ 0x4
  3155                           
  3156  0024                     ??_CC2500_TxData:	
  3157                           ; 0 bytes @ 0x4
  3158                           
  3159  0024                     ??_CC2500_RxData:	
  3160                           ; 0 bytes @ 0x4
  3161                           
  3162  0024                     ??_DimmerLights_Initialization:	
  3163                           ; 0 bytes @ 0x4
  3164                           
  3165  0024                     ??_LED_Initialization:	
  3166                           ; 0 bytes @ 0x4
  3167                           
  3168  0024                     ??_LED_Main:	
  3169                           ; 0 bytes @ 0x4
  3170                           
  3171  0024                     ??___awdiv:	
  3172                           ; 0 bytes @ 0x4
  3173                           
  3174  0024                     CC2500_WriteREG@w_addr:	
  3175                           ; 0 bytes @ 0x4
  3176                           
  3177  0024                     ___ftpack@sign:	
  3178                           ; 1 bytes @ 0x4
  3179                           
  3180  0024                     getBuz_GO@i:	
  3181                           ; 1 bytes @ 0x4
  3182                           
  3183  0024                     DelayTime_1us@j:	
  3184                           ; 2 bytes @ 0x4
  3185                           
  3186                           
  3187                           ; 2 bytes @ 0x4
  3188  0024                     	ds	1
  3189  0025                     ??_CC2500_InitSetREG:	
  3190  0025                     ??_CC2500_InitPATable:	
  3191                           ; 0 bytes @ 0x5
  3192                           
  3193  0025                     ??___ftpack:	
  3194                           ; 0 bytes @ 0x5
  3195                           
  3196  0025                     CC2500_TxData@loop_e:	
  3197                           ; 0 bytes @ 0x5
  3198                           
  3199  0025                     CC2500_RxData@loop_f:	
  3200                           ; 1 bytes @ 0x5
  3201                           
  3202  0025                     setDimmerLights@lights:	
  3203                           ; 1 bytes @ 0x5
  3204                           
  3205  0025                     Flash_Memory_Modify@i:	
  3206                           ; 1 bytes @ 0x5
  3207                           
  3208  0025                     _Sw_DimmerAdjFunc$6132:	
  3209                           ; 1 bytes @ 0x5
  3210                           
  3211  0025                     ___awdiv@counter:	
  3212                           ; 1 bytes @ 0x5
  3213                           
  3214                           
  3215                           ; 1 bytes @ 0x5
  3216  0025                     	ds	1
  3217  0026                     ??_CC2500_PowerRST:	
  3218  0026                     ??_CC2500_FrequencyCabr:	
  3219                           ; 0 bytes @ 0x6
  3220                           
  3221  0026                     ??_Flash_Memory_Main:	
  3222                           ; 0 bytes @ 0x6
  3223                           
  3224  0026                     CC2500_InitSetREG@temp1:	
  3225                           ; 0 bytes @ 0x6
  3226                           
  3227  0026                     CC2500_InitPATable@temp:	
  3228                           ; 1 bytes @ 0x6
  3229                           
  3230  0026                     DelayTimejudge@i:	
  3231                           ; 1 bytes @ 0x6
  3232                           
  3233  0026                     _Sw_DimmerAdjFunc$6133:	
  3234                           ; 1 bytes @ 0x6
  3235                           
  3236  0026                     ___awdiv@sign:	
  3237                           ; 1 bytes @ 0x6
  3238                           
  3239                           
  3240                           ; 1 bytes @ 0x6
  3241  0026                     	ds	1
  3242  0027                     CC2500_InitSetREG@temp2:	
  3243  0027                     CC2500_InitPATable@loop_d:	
  3244                           ; 1 bytes @ 0x7
  3245                           
  3246  0027                     DelayTimejudge@j:	
  3247                           ; 1 bytes @ 0x7
  3248                           
  3249  0027                     _Sw_DimmerAdjFunc$6134:	
  3250                           ; 1 bytes @ 0x7
  3251                           
  3252  0027                     ___awdiv@quotient:	
  3253                           ; 1 bytes @ 0x7
  3254                           
  3255                           
  3256                           ; 2 bytes @ 0x7
  3257  0027                     	ds	1
  3258  0028                     ?___awtoft:	
  3259  0028                     CC2500_InitSetREG@loop_c:	
  3260                           ; 3 bytes @ 0x8
  3261                           
  3262  0028                     DelayTimejudge@k:	
  3263                           ; 1 bytes @ 0x8
  3264                           
  3265  0028                     Sw_DimmerAdjFunc@Idle:	
  3266                           ; 1 bytes @ 0x8
  3267                           
  3268  0028                     ___awtoft@c:	
  3269                           ; 1 bytes @ 0x8
  3270                           
  3271                           
  3272                           ; 2 bytes @ 0x8
  3273  0028                     	ds	1
  3274  0029                     ?_setBuz:	
  3275  0029                     ??_CC2500_PowerOnInitial:	
  3276                           ; 0 bytes @ 0x9
  3277                           
  3278  0029                     DelayTimejudge@value:	
  3279                           ; 0 bytes @ 0x9
  3280                           
  3281  0029                     Sw_DimmerAdjFunc@sw:	
  3282                           ; 1 bytes @ 0x9
  3283                           
  3284  0029                     setBuz@time:	
  3285                           ; 1 bytes @ 0x9
  3286                           
  3287                           
  3288                           ; 2 bytes @ 0x9
  3289  0029                     	ds	1
  3290  002A                     ?_setDelayOff_GO:	
  3291  002A                     setDelayOff_GO@command:	
  3292                           ; 0 bytes @ 0xA
  3293                           
  3294                           
  3295                           ; 1 bytes @ 0xA
  3296  002A                     	ds	1
  3297  002B                     ??_setBuz:	
  3298  002B                     ??___awtoft:	
  3299                           ; 0 bytes @ 0xB
  3300                           
  3301  002B                     setDelayOff_GO@value:	
  3302                           ; 0 bytes @ 0xB
  3303                           
  3304                           
  3305                           ; 1 bytes @ 0xB
  3306  002B                     	ds	1
  3307  002C                     ??_setDelayOff_GO:	
  3308  002C                     setBuz@count:	
  3309                           ; 0 bytes @ 0xC
  3310                           
  3311                           
  3312                           ; 1 bytes @ 0xC
  3313  002C                     	ds	1
  3314  002D                     ??_my_MainTime:	
  3315  002D                     ??_setLog_Code:	
  3316                           ; 0 bytes @ 0xD
  3317                           
  3318  002D                     ___awtoft@sign:	
  3319                           ; 0 bytes @ 0xD
  3320                           
  3321                           
  3322                           ; 1 bytes @ 0xD
  3323  002D                     	ds	1
  3324  002E                     ?___ftdiv:	
  3325  002E                     ?___ftmul:	
  3326                           ; 3 bytes @ 0xE
  3327                           
  3328  002E                     setDelayOff_GO@sw:	
  3329                           ; 3 bytes @ 0xE
  3330                           
  3331  002E                     ___ftdiv@f2:	
  3332                           ; 1 bytes @ 0xE
  3333                           
  3334  002E                     ___ftmul@f1:	
  3335                           ; 3 bytes @ 0xE
  3336                           
  3337                           
  3338                           ; 3 bytes @ 0xE
  3339  002E                     	ds	3
  3340  0031                     ___ftdiv@f1:	
  3341  0031                     ___ftmul@f2:	
  3342                           ; 3 bytes @ 0x11
  3343                           
  3344                           
  3345                           ; 3 bytes @ 0x11
  3346  0031                     	ds	3
  3347  0034                     ??___ftdiv:	
  3348  0034                     ??___ftmul:	
  3349                           ; 0 bytes @ 0x14
  3350                           
  3351                           
  3352                           ; 0 bytes @ 0x14
  3353  0034                     	ds	4
  3354  0038                     ___ftdiv@cntr:	
  3355  0038                     ___ftmul@exp:	
  3356                           ; 1 bytes @ 0x18
  3357                           
  3358                           
  3359                           ; 1 bytes @ 0x18
  3360  0038                     	ds	1
  3361  0039                     ___ftdiv@f3:	
  3362  0039                     ___ftmul@f3_as_product:	
  3363                           ; 3 bytes @ 0x19
  3364                           
  3365                           
  3366                           ; 3 bytes @ 0x19
  3367  0039                     	ds	3
  3368  003C                     ___ftdiv@exp:	
  3369  003C                     ___ftmul@cntr:	
  3370                           ; 1 bytes @ 0x1C
  3371                           
  3372                           
  3373                           ; 1 bytes @ 0x1C
  3374  003C                     	ds	1
  3375  003D                     ___ftdiv@sign:	
  3376  003D                     ___ftmul@sign:	
  3377                           ; 1 bytes @ 0x1D
  3378                           
  3379                           
  3380                           ; 1 bytes @ 0x1D
  3381  003D                     	ds	1
  3382  003E                     ?___ftadd:	
  3383  003E                     ___ftadd@f1:	
  3384                           ; 3 bytes @ 0x1E
  3385                           
  3386                           
  3387                           ; 3 bytes @ 0x1E
  3388  003E                     	ds	3
  3389  0041                     ___ftadd@f2:	
  3390                           
  3391                           ; 3 bytes @ 0x21
  3392  0041                     	ds	3
  3393  0044                     ??___ftadd:	
  3394                           
  3395                           ; 0 bytes @ 0x24
  3396  0044                     	ds	4
  3397  0048                     ___ftadd@sign:	
  3398                           
  3399                           ; 1 bytes @ 0x28
  3400  0048                     	ds	1
  3401  0049                     ___ftadd@exp2:	
  3402                           
  3403                           ; 1 bytes @ 0x29
  3404  0049                     	ds	1
  3405  004A                     ___ftadd@exp1:	
  3406                           
  3407                           ; 1 bytes @ 0x2A
  3408  004A                     	ds	1
  3409  004B                     ?___fttol:	
  3410  004B                     ___fttol@f1:	
  3411                           ; 4 bytes @ 0x2B
  3412                           
  3413                           
  3414                           ; 3 bytes @ 0x2B
  3415  004B                     	ds	4
  3416  004F                     ??___fttol:	
  3417                           
  3418                           ; 0 bytes @ 0x2F
  3419  004F                     	ds	4
  3420  0053                     ___fttol@sign1:	
  3421                           
  3422                           ; 1 bytes @ 0x33
  3423  0053                     	ds	1
  3424  0054                     ___fttol@lval:	
  3425                           
  3426                           ; 4 bytes @ 0x34
  3427  0054                     	ds	4
  3428  0058                     ___fttol@exp1:	
  3429                           
  3430                           ; 1 bytes @ 0x38
  3431  0058                     	ds	1
  3432  0059                     ??_getPercentValue:	
  3433  0059                     ??_setPercentValue:	
  3434                           ; 0 bytes @ 0x39
  3435                           
  3436  0059                     setPercentValue@value:	
  3437                           ; 0 bytes @ 0x39
  3438                           
  3439                           
  3440                           ; 1 bytes @ 0x39
  3441  0059                     	ds	1
  3442  005A                     setPercentValue@i:	
  3443                           
  3444                           ; 3 bytes @ 0x3A
  3445  005A                     	ds	1
  3446  005B                     getPercentValue@value:	
  3447                           
  3448                           ; 1 bytes @ 0x3B
  3449  005B                     	ds	1
  3450  005C                     getPercentValue@i:	
  3451                           
  3452                           ; 3 bytes @ 0x3C
  3453  005C                     	ds	1
  3454  005D                     ?_setRF_DimmerLights:	
  3455  005D                     ??_Flash_Memory_Initialization:	
  3456                           ; 0 bytes @ 0x3D
  3457                           
  3458  005D                     setRF_DimmerLights@on:	
  3459                           ; 0 bytes @ 0x3D
  3460                           
  3461                           
  3462                           ; 1 bytes @ 0x3D
  3463  005D                     	ds	1
  3464  005E                     ??_setRF_DimmerLights:	
  3465  005E                     Flash_Memory_Initialization@i:	
  3466                           ; 0 bytes @ 0x3E
  3467                           
  3468                           
  3469                           ; 1 bytes @ 0x3E
  3470  005E                     	ds	1
  3471  005F                     ??_setDimmerLights_AdjRF:	
  3472                           
  3473                           ; 0 bytes @ 0x3F
  3474  005F                     	ds	1
  3475  0060                     setDimmerLights_AdjRF@lights:	
  3476  0060                     setRF_DimmerLights@status:	
  3477                           ; 1 bytes @ 0x40
  3478                           
  3479                           
  3480                           ; 1 bytes @ 0x40
  3481  0060                     	ds	1
  3482  0061                     ??_setRF_DimmerValue:	
  3483  0061                     setRF_DimmerLights@lights:	
  3484                           ; 0 bytes @ 0x41
  3485                           
  3486                           
  3487                           ; 1 bytes @ 0x41
  3488  0061                     	ds	1
  3489  0062                     ??_DlyOff_Main:	
  3490  0062                     ?_setDimmerLights_Adj:	
  3491                           ; 0 bytes @ 0x42
  3492                           
  3493  0062                     ??_setRFSW_Control:	
  3494                           ; 0 bytes @ 0x42
  3495                           
  3496  0062                     ??_Sw_DimmerOnFunc:	
  3497                           ; 0 bytes @ 0x42
  3498                           
  3499  0062                     ??_Sw_DimmerOffFunc:	
  3500                           ; 0 bytes @ 0x42
  3501                           
  3502  0062                     setDimmerLights_Adj@status:	
  3503                           ; 0 bytes @ 0x42
  3504                           
  3505                           
  3506                           ; 1 bytes @ 0x42
  3507  0062                     	ds	1
  3508  0063                     ??_setDimmerLights_Adj:	
  3509  0063                     setRFSW_Control@sw:	
  3510                           ; 0 bytes @ 0x43
  3511                           
  3512  0063                     setRF_DimmerValue@lights:	
  3513                           ; 1 bytes @ 0x43
  3514                           
  3515  0063                     _Sw_DimmerOnFunc$6120:	
  3516                           ; 1 bytes @ 0x43
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0x43
  3520  0063                     	ds	1
  3521  0064                     ??_setRFSW_AdjControl:	
  3522  0064                     DlyOff_Main@sw:	
  3523                           ; 0 bytes @ 0x44
  3524                           
  3525  0064                     setDimmerLights_Adj@lights:	
  3526                           ; 1 bytes @ 0x44
  3527                           
  3528  0064                     _Sw_DimmerOnFunc$6121:	
  3529                           ; 1 bytes @ 0x44
  3530                           
  3531  0064                     Sw_DimmerOffFunc@sw:	
  3532                           ; 1 bytes @ 0x44
  3533                           
  3534                           
  3535                           ; 1 bytes @ 0x44
  3536  0064                     	ds	1
  3537  0065                     ??_setDimmerLights_Main:	
  3538  0065                     ??_DelayOff_Main:	
  3539                           ; 0 bytes @ 0x45
  3540                           
  3541  0065                     _Sw_DimmerOnFunc$6122:	
  3542                           ; 0 bytes @ 0x45
  3543                           
  3544                           
  3545                           ; 1 bytes @ 0x45
  3546  0065                     	ds	1
  3547  0066                     _setDimmerLights_Main$2409:	
  3548  0066                     setRFSW_AdjControl@sw:	
  3549                           ; 1 bytes @ 0x46
  3550                           
  3551  0066                     Sw_DimmerOnFunc@Idle:	
  3552                           ; 1 bytes @ 0x46
  3553                           
  3554                           
  3555                           ; 1 bytes @ 0x46
  3556  0066                     	ds	1
  3557  0067                     ??_setRF_Main:	
  3558  0067                     ??_getRxData:	
  3559                           ; 0 bytes @ 0x47
  3560                           
  3561  0067                     ??_setControl_Lights_Table:	
  3562                           ; 0 bytes @ 0x47
  3563                           
  3564  0067                     _setDimmerLights_Main$2417:	
  3565                           ; 0 bytes @ 0x47
  3566                           
  3567  0067                     Sw_DimmerOnFunc@sw:	
  3568                           ; 1 bytes @ 0x47
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0x47
  3572  0067                     	ds	1
  3573  0068                     ??_setSw_Main:	
  3574  0068                     _setDimmerLights_Main$2418:	
  3575                           ; 0 bytes @ 0x48
  3576                           
  3577  0068                     _setRF_Main$5152:	
  3578                           ; 1 bytes @ 0x48
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0x48
  3582  0068                     	ds	1
  3583  0069                     ??_RF_Main:	
  3584  0069                     setDimmerLights_Main@clear:	
  3585                           ; 0 bytes @ 0x49
  3586                           
  3587                           
  3588                           ; 1 bytes @ 0x49
  3589  0069                     	ds	1
  3590  006A                     setDimmerLights_Main@lights:	
  3591  006A                     setSw_Main@sw:	
  3592                           ; 1 bytes @ 0x4A
  3593                           
  3594                           
  3595                           ; 1 bytes @ 0x4A
  3596  006A                     	ds	1
  3597  006B                     ??_Switch_Main:	
  3598  006B                     ??_DimmerLights_Main:	
  3599                           ; 0 bytes @ 0x4B
  3600                           
  3601  006B                     ??_main:	
  3602                           ; 0 bytes @ 0x4B
  3603                           
  3604                           
  3605                           	psect	maintext
  3606  156E                     __pmaintext:	
  3607                           ; 0 bytes @ 0x4B
  3608 ;;
  3609 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3610 ;;
  3611 ;; *************** function _main *****************
  3612 ;; Defined at:
  3613 ;;		line 7 in file "../src/Main_B1.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  argc            2    0[BANK2 ] int 
  3616 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  2    0[BANK2 ] int 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 17F/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3628 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;Total ram usage:        4 bytes
  3633 ;; Hardware stack levels required when called:   15
  3634 ;; This function calls:
  3635 ;;		_Buzzer_Initialization
  3636 ;;		_Buzzer_Main
  3637 ;;		_CC2500_PowerOnInitial
  3638 ;;		_DelayOff_Initialization
  3639 ;;		_DelayOff_Main
  3640 ;;		_DimmerLights_Initialization
  3641 ;;		_DimmerLights_Main
  3642 ;;		_Flash_Memory_Initialization
  3643 ;;		_Flash_Memory_Main
  3644 ;;		_LED_Initialization
  3645 ;;		_LED_Main
  3646 ;;		_Mcu_Initialization
  3647 ;;		_RF_Initialization
  3648 ;;		_RF_Main
  3649 ;;		_Switch_Initialization
  3650 ;;		_Switch_Main
  3651 ;;		_WDT_Main
  3652 ;;		_myMain_Initialization
  3653 ;;		_my_MainTime
  3654 ;; This function is called by:
  3655 ;;		Startup code after reset
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           
  3660                           ;psect for function _main
  3661  156E                     _main:	
  3662                           
  3663                           ;Main_B1.c: 8: myMain_Initialization();
  3664                           
  3665                           ;incstack = 0
  3666                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3667  156E  319F  274C  3195   	fcall	_myMain_Initialization
  3668                           
  3669                           ;Main_B1.c: 9: Mcu_Initialization();
  3670  1571  319F  27EE  3195   	fcall	_Mcu_Initialization
  3671                           
  3672                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3673  1574  3185  2532  3195   	fcall	_Flash_Memory_Initialization
  3674                           
  3675                           ;Main_B1.c: 11: LED_Initialization();
  3676  1577  319F  277B  3195   	fcall	_LED_Initialization
  3677                           
  3678                           ;Main_B1.c: 12: Buzzer_Initialization();
  3679  157A  319E  263B  3195   	fcall	_Buzzer_Initialization
  3680                           
  3681                           ;Main_B1.c: 14: ;;
  3682                           ;Main_B1.c: 15: ;;
  3683                           ;Main_B1.c: 16: ;;
  3684                           ;Main_B1.c: 17: ;;
  3685                           ;Main_B1.c: 18: DelayOff_Initialization();
  3686  157D  319E  26C5  3195   	fcall	_DelayOff_Initialization
  3687                           
  3688                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3689  1580  3192  2289  3195   	fcall	_DimmerLights_Initialization
  3690                           
  3691                           ;Main_B1.c: 21: ;;
  3692                           ;Main_B1.c: 22: ;;
  3693                           ;Main_B1.c: 23: ;;
  3694                           ;Main_B1.c: 24: Switch_Initialization();
  3695  1583  319F  27DD  3195   	fcall	_Switch_Initialization
  3696                           
  3697                           ;Main_B1.c: 25: RF_Initialization();
  3698  1586  319E  263E  3195   	fcall	_RF_Initialization
  3699                           
  3700                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3701  1589  3190  20E7  3195   	fcall	_CC2500_PowerOnInitial
  3702  158C                     l1611:	
  3703                           ;Main_B1.c: 34: ;;
  3704                           ;Main_B1.c: 38: ;;
  3705                           ;Main_B1.c: 42: ;;
  3706                           ;Main_B1.c: 46: ;;
  3707                           
  3708                           ;Main_B1.c: 27: ;;
  3709                           ;Main_B1.c: 30: while (1) {
  3710                           
  3711                           
  3712                           ;Main_B1.c: 61: }
  3713                           ;Main_B1.c: 64: if (myMain.T0_Timerout) {
  3714  158C  0021               	movlb	1	; select bank1
  3715  158D  1CA0               	btfss	_myMain^(0+128),1
  3716  158E  2D8C               	goto	l1611
  3717                           
  3718                           ;Main_B1.c: 65: myMain.T0_Timerout = 0;
  3719  158F  10A0               	bcf	_myMain^(0+128),1
  3720                           
  3721                           ;Main_B1.c: 66: my_MainTime();
  3722  1590  3195  25AF  3195   	fcall	_my_MainTime
  3723                           
  3724                           ;Main_B1.c: 67: WDT_Main();
  3725  1593  3190  2085  3195   	fcall	_WDT_Main
  3726                           
  3727                           ;Main_B1.c: 68: ;;
  3728                           ;Main_B1.c: 69: ;;
  3729                           ;Main_B1.c: 70: if (myMain.PowerON) {
  3730  1596  0021               	movlb	1	; select bank1
  3731  1597  1C20               	btfss	_myMain^(0+128),0
  3732  1598  2D8C               	goto	l1611
  3733                           
  3734                           ;Main_B1.c: 71: Flash_Memory_Main();
  3735  1599  3192  2209  3195   	fcall	_Flash_Memory_Main
  3736                           
  3737                           ;Main_B1.c: 73: LED_Main();
  3738  159C  319F  278B  3195   	fcall	_LED_Main
  3739                           
  3740                           ;Main_B1.c: 74: Buzzer_Main();
  3741  159F  3196  26BE  3195   	fcall	_Buzzer_Main
  3742                           
  3743                           ;Main_B1.c: 76: ;;
  3744                           ;Main_B1.c: 77: ;;
  3745                           ;Main_B1.c: 78: ;;
  3746                           ;Main_B1.c: 79: ;;
  3747                           ;Main_B1.c: 81: ;;
  3748                           ;Main_B1.c: 82: DimmerLights_Main();
  3749  15A2  319F  272E  3195   	fcall	_DimmerLights_Main
  3750                           
  3751                           ;Main_B1.c: 83: Switch_Main();
  3752  15A5  319E  26E9  3195   	fcall	_Switch_Main
  3753                           
  3754                           ;Main_B1.c: 84: ;;
  3755                           ;Main_B1.c: 85: ;;
  3756                           ;Main_B1.c: 87: RF_Main();
  3757  15A8  319E  2641  3195   	fcall	_RF_Main
  3758                           
  3759                           ;Main_B1.c: 88: DelayOff_Main();
  3760  15AB  319E  26D1  3195   	fcall	_DelayOff_Main
  3761                           
  3762                           ;Main_B1.c: 89: ;;
  3763  15AE  2D8C               	goto	l1611
  3764  15AF                     __end_of_main:	
  3765                           ;Main_B1.c: 90: }
  3766                           ;Main_B1.c: 91: }
  3767                           ;Main_B1.c: 109: }
  3768                           ;Main_B1.c: 110: return (0);
  3769                           ;	Return value of _main is never used
  3770                           
  3771                           
  3772                           	psect	text1
  3773  15AF                     __ptext1:	
  3774 ;; *************** function _my_MainTime *****************
  3775 ;; Defined at:
  3776 ;;		line 127 in file "../src/Main_B1.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;		None               void
  3783 ;; Registers used:
  3784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3794 ;;Total ram usage:        0 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    7
  3797 ;; This function calls:
  3798 ;;		_setBuz
  3799 ;;		_setRF_Enable
  3800 ;;		_setSw_Enable
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           
  3807                           ;psect for function _my_MainTime
  3808  15AF                     _my_MainTime:	
  3809                           
  3810                           ;Main_B1.c: 129: if (myMain.PowerON == 0) {
  3811                           
  3812                           ;incstack = 0
  3813                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3814  15AF  0021               	movlb	1	; select bank1
  3815  15B0  1820               	btfsc	_myMain^(0+128),0
  3816  15B1  2DD8               	goto	l9665
  3817                           
  3818                           ;Main_B1.c: 130: myMain.PowerCount++;
  3819  15B2  3001               	movlw	1
  3820  15B3  07A1               	addwf	(_myMain^(0+128)+1),f
  3821  15B4  3000               	movlw	0
  3822  15B5  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3823                           
  3824                           ;Main_B1.c: 131: if (myMain.PowerCount == 150)
  3825  15B6  3001               	movlw	1
  3826  15B7  3EA0               	addlw	_myMain& (0+255)
  3827  15B8  0086               	movwf	6
  3828  15B9  0187               	clrf	7
  3829  15BA  3F40               	moviw [0]fsr1
  3830  15BB  3A96               	xorlw	150
  3831  15BC  1D03               	skipz
  3832  15BD  2DC0               	goto	u10405
  3833  15BE  3F41               	moviw [1]fsr1
  3834  15BF  3A00               	xorlw	0
  3835  15C0                     u10405:	
  3836  15C0  1D03               	skipz
  3837  15C1  0008               	return
  3838                           
  3839                           ;Main_B1.c: 132: {
  3840                           ;Main_B1.c: 133: myMain.PowerCount = 0;
  3841  15C2  01A1               	clrf	(_myMain^(0+128)+1)
  3842  15C3  01A2               	clrf	((_myMain+1)^(0+128)+1)
  3843                           
  3844                           ;Main_B1.c: 134: myMain.PowerON = 1;
  3845  15C4  1420               	bsf	_myMain^(0+128),0
  3846                           
  3847                           ;Main_B1.c: 137: ;;
  3848                           ;Main_B1.c: 141: ;;
  3849                           ;Main_B1.c: 147: setBuz(3, 50);
  3850  15C5  3032               	movlw	50
  3851  15C6  0020               	movlb	0	; select bank0
  3852  15C7  00A9               	movwf	setBuz@time
  3853  15C8  3000               	movlw	0
  3854  15C9  00AA               	movwf	setBuz@time+1
  3855  15CA  3003               	movlw	3
  3856  15CB  3197  27A7  3195   	fcall	_setBuz
  3857                           
  3858                           ;Main_B1.c: 148: myMain.SelfTest = 1;
  3859  15CE  0021               	movlb	1	; select bank1
  3860  15CF  1720               	bsf	_myMain^(0+128),6
  3861                           
  3862                           ;Main_B1.c: 150: setSw_Enable(1);
  3863  15D0  3001               	movlw	1
  3864  15D1  3193  235D  3195   	fcall	_setSw_Enable
  3865                           
  3866                           ;Main_B1.c: 153: setRF_Enable(1);
  3867  15D4  3001               	movlw	1
  3868  15D5  319F  2702         	fcall	_setRF_Enable
  3869                           
  3870                           ;Main_B1.c: 157: }
  3871                           ;Main_B1.c: 158: } else {
  3872  15D7  0008               	return
  3873  15D8                     l9665:	
  3874                           
  3875                           ;Main_B1.c: 166: myMain.Count1++;
  3876  15D8  3001               	movlw	1
  3877  15D9  0021               	movlb	1	; select bank1
  3878  15DA  07A5               	addwf	(_myMain^(0+128)+5),f
  3879  15DB  3000               	movlw	0
  3880  15DC  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  3881                           
  3882                           ;Main_B1.c: 167: if (myMain.Count1 == 100)
  3883  15DD  3005               	movlw	5
  3884  15DE  3EA0               	addlw	_myMain& (0+255)
  3885  15DF  0086               	movwf	6
  3886  15E0  0187               	clrf	7
  3887  15E1  3F40               	moviw [0]fsr1
  3888  15E2  3A64               	xorlw	100
  3889  15E3  1D03               	skipz
  3890  15E4  2DE7               	goto	u10415
  3891  15E5  3F41               	moviw [1]fsr1
  3892  15E6  3A00               	xorlw	0
  3893  15E7                     u10415:	
  3894  15E7  1D03               	skipz
  3895  15E8  0008               	return
  3896                           
  3897                           ;Main_B1.c: 168: {
  3898                           ;Main_B1.c: 169: myMain.Count1 = 0;
  3899  15E9  01A5               	clrf	(_myMain^(0+128)+5)
  3900  15EA  01A6               	clrf	((_myMain+1)^(0+128)+5)
  3901                           
  3902                           ;Main_B1.c: 182: if (myMain.Flag) {
  3903  15EB  1DA0               	btfss	_myMain^(0+128),3
  3904  15EC  2DEF               	goto	l1626
  3905                           
  3906                           ;Main_B1.c: 183: myMain.Flag = 0;
  3907  15ED  11A0               	bcf	_myMain^(0+128),3
  3908                           
  3909                           ;Main_B1.c: 192: } else {
  3910  15EE  0008               	return
  3911  15EF                     l1626:	
  3912                           
  3913                           ;Main_B1.c: 193: myMain.Flag = 1;
  3914  15EF  15A0               	bsf	_myMain^(0+128),3
  3915  15F0  0008               	return
  3916  15F1                     __end_of_my_MainTime:	
  3917                           
  3918                           	psect	text2
  3919  135D                     __ptext2:	
  3920 ;; *************** function _setSw_Enable *****************
  3921 ;; Defined at:
  3922 ;;		line 91 in file "../src/Switch_B1.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  command         1    wreg     unsigned char 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  command         1    2[BANK0 ] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;		None               void
  3929 ;; Registers used:
  3930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3939 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;Total ram usage:        1 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    6
  3943 ;; This function calls:
  3944 ;;		_SwPointSelect
  3945 ;; This function is called by:
  3946 ;;		_my_MainTime
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _setSw_Enable
  3952  135D                     _setSw_Enable:	
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3956                           ;setSw_Enable@command stored from wreg
  3957  135D  0020               	movlb	0	; select bank0
  3958  135E  00A2               	movwf	setSw_Enable@command
  3959                           
  3960                           ;Switch_B1.c: 94: SwPointSelect(1);
  3961  135F  3001               	movlw	1
  3962  1360  3191  21CD  3193   	fcall	_SwPointSelect
  3963                           
  3964                           ;Switch_B1.c: 95: Sw->Enable = command;
  3965  1363  0020               	movlb	0	; select bank0
  3966  1364  086C               	movf	_Sw,w
  3967  1365  0086               	movwf	6
  3968  1366  3001               	movlw	1	; select bank2/3
  3969  1367  0087               	movwf	7
  3970  1368  0822               	movf	setSw_Enable@command,w
  3971  1369  1001               	bcf	1,0
  3972  136A  1D03               	skipz
  3973  136B  1401               	bsf	1,0
  3974                           
  3975                           ;Switch_B1.c: 99: SwPointSelect(2);
  3976  136C  3002               	movlw	2
  3977  136D  3191  21CD  3193   	fcall	_SwPointSelect
  3978                           
  3979                           ;Switch_B1.c: 100: Sw->Enable = command;
  3980  1370  0020               	movlb	0	; select bank0
  3981  1371  086C               	movf	_Sw,w
  3982  1372  0086               	movwf	6
  3983  1373  3001               	movlw	1	; select bank2/3
  3984  1374  0087               	movwf	7
  3985  1375  0822               	movf	setSw_Enable@command,w
  3986  1376  1001               	bcf	1,0
  3987  1377  1D03               	skipz
  3988  1378  1401               	bsf	1,0
  3989                           
  3990                           ;Switch_B1.c: 104: SwPointSelect(3);
  3991  1379  3003               	movlw	3
  3992  137A  3191  21CD         	fcall	_SwPointSelect
  3993                           
  3994                           ;Switch_B1.c: 105: Sw->Enable = command;
  3995  137C  0020               	movlb	0	; select bank0
  3996  137D  086C               	movf	_Sw,w
  3997  137E  0086               	movwf	6
  3998  137F  3001               	movlw	1	; select bank2/3
  3999  1380  0087               	movwf	7
  4000  1381  0822               	movf	setSw_Enable@command,w
  4001  1382  1001               	bcf	1,0
  4002  1383  1D03               	skipz
  4003  1384  1401               	bsf	1,0
  4004  1385  0008               	return
  4005  1386                     __end_of_setSw_Enable:	
  4006                           
  4007                           	psect	text3
  4008  1F02                     __ptext3:	
  4009 ;; *************** function _setRF_Enable *****************
  4010 ;; Defined at:
  4011 ;;		line 225 in file "../src/RF_Control_B1.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;  command         1    wreg     unsigned char 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  command         1    0[BANK0 ] unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;		None               void
  4018 ;; Registers used:
  4019 ;;		wreg, status,2
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;Total ram usage:        1 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    5
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_my_MainTime
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           
  4040                           ;psect for function _setRF_Enable
  4041  1F02                     _setRF_Enable:	
  4042                           
  4043                           ;incstack = 0
  4044                           ; Regs used in _setRF_Enable: [wreg+status,2]
  4045                           ;setRF_Enable@command stored from wreg
  4046  1F02  0020               	movlb	0	; select bank0
  4047  1F03  00A0               	movwf	setRF_Enable@command
  4048                           
  4049                           ;RF_Control_B1.c: 226: RF1.Enable = command;
  4050  1F04  0820               	movf	setRF_Enable@command,w
  4051  1F05  0021               	movlb	1	; select bank1
  4052  1F06  103E               	bcf	_RF1^(0+128),0
  4053  1F07  1D03               	skipz
  4054  1F08  143E               	bsf	_RF1^(0+128),0
  4055                           
  4056                           ;RF_Control_B1.c: 227: RF1.Learn = 0;
  4057  1F09  133E               	bcf	_RF1^(0+128),6
  4058                           
  4059                           ;RF_Control_B1.c: 228: RF1.TransceiveGO = 0;
  4060  1F0A  113E               	bcf	_RF1^(0+128),2
  4061                           
  4062                           ;RF_Control_B1.c: 229: RF1.RxStatus = 0;
  4063  1F0B  11BE               	bcf	_RF1^(0+128),3
  4064                           
  4065                           ;RF_Control_B1.c: 230: RF1.ReceiveGO = 0;
  4066  1F0C  10BE               	bcf	_RF1^(0+128),1
  4067                           
  4068                           ;RF_Control_B1.c: 231: RF1.DebounceTime = 0;
  4069  1F0D  01C7               	clrf	(_RF1^(0+128)+9)
  4070                           
  4071                           ;RF_Control_B1.c: 232: RF1.Debounce = 0;
  4072  1F0E  12BE               	bcf	_RF1^(0+128),5
  4073  1F0F  0008               	return
  4074  1F10                     __end_of_setRF_Enable:	
  4075                           
  4076                           	psect	text4
  4077  1F4C                     __ptext4:	
  4078 ;; *************** function _myMain_Initialization *****************
  4079 ;; Defined at:
  4080 ;;		line 115 in file "../src/Main_B1.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;		None
  4085 ;; Return value:  Size  Location     Type
  4086 ;;		None               void
  4087 ;; Registers used:
  4088 ;;		wreg, fsr1l, fsr1h
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;Total ram usage:        1 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    5
  4101 ;; This function calls:
  4102 ;;		Nothing
  4103 ;; This function is called by:
  4104 ;;		_main
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function _myMain_Initialization
  4110  1F4C                     _myMain_Initialization:	
  4111                           
  4112                           ;Main_B1.c: 117: product = &_product;
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4116  1F4C  3020               	movlw	__product& (0+255)
  4117  1F4D  0020               	movlb	0	; select bank0
  4118  1F4E  00A0               	movwf	??_myMain_Initialization
  4119  1F4F  0820               	movf	??_myMain_Initialization,w
  4120  1F50  00ED               	movwf	_product
  4121                           
  4122                           ;Main_B1.c: 118: product->Data[20] = 211;
  4123  1F51  30D3               	movlw	211
  4124  1F52  00A0               	movwf	??_myMain_Initialization
  4125  1F53  086D               	movf	_product,w
  4126  1F54  3E14               	addlw	20
  4127  1F55  0086               	movwf	6
  4128  1F56  3002               	movlw	2	; select bank4/5
  4129  1F57  0087               	movwf	7
  4130  1F58  0820               	movf	??_myMain_Initialization,w
  4131  1F59  0081               	movwf	1
  4132  1F5A  0008               	return
  4133  1F5B                     __end_of_myMain_Initialization:	
  4134                           
  4135                           	psect	text5
  4136  1085                     __ptext5:	
  4137 ;; *************** function _WDT_Main *****************
  4138 ;; Defined at:
  4139 ;;		line 909 in file "../src/MCU_B1.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;		None               void
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0, pclath, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;Total ram usage:        1 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    6
  4160 ;; This function calls:
  4161 ;;		_WDT_Clearing
  4162 ;; This function is called by:
  4163 ;;		_main
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           
  4168                           ;psect for function _WDT_Main
  4169  1085                     _WDT_Main:	
  4170                           
  4171                           ;MCU_B1.c: 910: if (WDT.Enable == 1) {
  4172                           
  4173                           ;incstack = 0
  4174                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4175  1085  0021               	movlb	1	; select bank1
  4176  1086  1C4C               	btfss	_WDT^(0+128),0
  4177  1087  0008               	return
  4178                           
  4179                           ;MCU_B1.c: 911: if (WDT.Count-- > 0) {
  4180  1088  3001               	movlw	1
  4181  1089  02CD               	subwf	(_WDT^(0+128)+1),f
  4182  108A  084D               	movf	(_WDT^(0+128)+1),w
  4183  108B  3AFF               	xorlw	255
  4184  108C  1903               	skipnz
  4185  108D  0008               	return
  4186                           
  4187                           ;MCU_B1.c: 912: WDT.Count = 10;
  4188  108E  300A               	movlw	10
  4189  108F  0020               	movlb	0	; select bank0
  4190  1090  00A0               	movwf	??_WDT_Main
  4191  1091  0820               	movf	??_WDT_Main,w
  4192  1092  0021               	movlb	1	; select bank1
  4193  1093  00CD               	movwf	(_WDT^(0+128)+1)
  4194                           
  4195                           ;MCU_B1.c: 913: WDT_Clearing();
  4196  1094  3180  2002         	fcall	_WDT_Clearing
  4197  1096  0008               	return
  4198  1097                     __end_of_WDT_Main:	
  4199                           
  4200                           	psect	text6
  4201  0002                     __ptext6:	
  4202 ;; *************** function _WDT_Clearing *****************
  4203 ;; Defined at:
  4204 ;;		line 919 in file "../src/MCU_B1.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;		None               void
  4211 ;; Registers used:
  4212 ;;		None
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;Total ram usage:        0 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    5
  4225 ;; This function calls:
  4226 ;;		Nothing
  4227 ;; This function is called by:
  4228 ;;		_WDT_Main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _WDT_Clearing
  4234  0002                     _WDT_Clearing:	
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _WDT_Clearing: []
  4238  0002  0064               	clrwdt	;# 
  4239  0003  0008               	return
  4240  0004                     __end_of_WDT_Clearing:	
  4241                           
  4242                           	psect	text7
  4243  1EE9                     __ptext7:	
  4244 ;; *************** function _Switch_Main *****************
  4245 ;; Defined at:
  4246 ;;		line 67 in file "../src/Switch_B1.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;		None               void
  4253 ;; Registers used:
  4254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4264 ;;Total ram usage:        0 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:   11
  4267 ;; This function calls:
  4268 ;;		_setSw_Main
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           
  4275                           ;psect for function _Switch_Main
  4276  1EE9                     _Switch_Main:	
  4277                           
  4278                           ;Switch_B1.c: 69: setSw_Main(1);
  4279                           
  4280                           ;incstack = 0
  4281                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4282  1EE9  3001               	movlw	1
  4283  1EEA  3182  2210  319E   	fcall	_setSw_Main
  4284                           
  4285                           ;Switch_B1.c: 73: setSw_Main(2);
  4286  1EED  3002               	movlw	2
  4287  1EEE  3182  2210  319E   	fcall	_setSw_Main
  4288                           
  4289                           ;Switch_B1.c: 77: setSw_Main(3);
  4290  1EF1  3003               	movlw	3
  4291  1EF2  3182  2210         	fcall	_setSw_Main
  4292  1EF4  0008               	return
  4293  1EF5                     __end_of_Switch_Main:	
  4294                           
  4295                           	psect	text8
  4296  0210                     __ptext8:	
  4297 ;; *************** function _setSw_Main *****************
  4298 ;; Defined at:
  4299 ;;		line 117 in file "../src/Switch_B1.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;  sw              1    wreg     unsigned char 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  sw              1   74[BANK0 ] unsigned char 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;		None               void
  4306 ;; Registers used:
  4307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;Total ram usage:        3 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:   10
  4320 ;; This function calls:
  4321 ;;		_SwPointSelect
  4322 ;;		_Sw_DimmerAdjFunc
  4323 ;;		_Sw_DimmerOffFunc
  4324 ;;		_Sw_DimmerOnFunc
  4325 ;;		_setBuz
  4326 ;;		_setRF_Learn
  4327 ;; This function is called by:
  4328 ;;		_Switch_Main
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           
  4333                           ;psect for function _setSw_Main
  4334  0210                     _setSw_Main:	
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4338                           ;setSw_Main@sw stored from wreg
  4339  0210  0020               	movlb	0	; select bank0
  4340  0211  00EA               	movwf	setSw_Main@sw
  4341                           
  4342                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4343  0212  086A               	movf	setSw_Main@sw,w
  4344  0213  3191  21CD  3182   	fcall	_SwPointSelect
  4345                           
  4346                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4347  0216  0020               	movlb	0	; select bank0
  4348  0217  086C               	movf	_Sw,w
  4349  0218  0086               	movwf	6
  4350  0219  3001               	movlw	1	; select bank2/3
  4351  021A  0087               	movwf	7
  4352  021B  1C01               	btfss	1,0
  4353  021C  0008               	return
  4354                           
  4355                           ;Switch_B1.c: 121: if (sw == 1) {
  4356  021D  086A               	movf	setSw_Main@sw,w
  4357  021E  3A01               	xorlw	1
  4358  021F  1D03               	skipz
  4359  0220  2A29               	goto	l9421
  4360                           
  4361                           ;Switch_B1.c: 122: Sw->Touch = (RA0 == 1) ? 1 : 0;
  4362  0221  086C               	movf	_Sw,w
  4363  0222  0086               	movwf	6
  4364  0223  3001               	movlw	1	; select bank2/3
  4365  0224  0087               	movwf	7
  4366  0225  1081               	bcf	1,1
  4367  0226  180C               	btfsc	12,0	;volatile
  4368  0227  1481               	bsf	1,1
  4369                           
  4370                           ;Switch_B1.c: 123: } else if (sw == 2) {
  4371  0228  2A42               	goto	l2687
  4372  0229                     l9421:	
  4373  0229  0020               	movlb	0	; select bank0
  4374  022A  086A               	movf	setSw_Main@sw,w
  4375  022B  3A02               	xorlw	2
  4376  022C  1D03               	skipz
  4377  022D  2A36               	goto	l9425
  4378                           
  4379                           ;Switch_B1.c: 124: Sw->Touch = (RA6 == 1) ? 1 : 0;
  4380  022E  086C               	movf	_Sw,w
  4381  022F  0086               	movwf	6
  4382  0230  3001               	movlw	1	; select bank2/3
  4383  0231  0087               	movwf	7
  4384  0232  1081               	bcf	1,1
  4385  0233  1B0C               	btfsc	12,6	;volatile
  4386  0234  1481               	bsf	1,1
  4387                           
  4388                           ;Switch_B1.c: 125: } else if (sw == 3) {
  4389  0235  2A42               	goto	l2687
  4390  0236                     l9425:	
  4391  0236  0020               	movlb	0	; select bank0
  4392  0237  086A               	movf	setSw_Main@sw,w
  4393  0238  3A03               	xorlw	3
  4394  0239  1D03               	skipz
  4395  023A  2A42               	goto	l2687
  4396                           
  4397                           ;Switch_B1.c: 126: Sw->Touch = (RA4 == 1) ? 1 : 0;
  4398  023B  086C               	movf	_Sw,w
  4399  023C  0086               	movwf	6
  4400  023D  3001               	movlw	1	; select bank2/3
  4401  023E  0087               	movwf	7
  4402  023F  1081               	bcf	1,1
  4403  0240  1A0C               	btfsc	12,4	;volatile
  4404  0241  1481               	bsf	1,1
  4405  0242                     l2687:	
  4406                           
  4407                           ;Switch_B1.c: 127: }
  4408                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  4409  0242  0020               	movlb	0	; select bank0
  4410  0243  086C               	movf	_Sw,w
  4411  0244  0086               	movwf	6
  4412  0245  3001               	movlw	1	; select bank2/3
  4413  0246  0087               	movwf	7
  4414  0247  1C81               	btfss	1,1
  4415  0248  2B0D               	goto	l9475
  4416                           
  4417                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  4418  0249  086C               	movf	_Sw,w
  4419  024A  0086               	movwf	6
  4420  024B  3001               	movlw	1	; select bank2/3
  4421  024C  0087               	movwf	7
  4422  024D  1901               	btfsc	1,2
  4423  024E  2A70               	goto	l9441
  4424                           
  4425                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  4426  024F  3001               	movlw	1
  4427  0250  00E8               	movwf	??_setSw_Main
  4428  0251  086C               	movf	_Sw,w
  4429  0252  3E02               	addlw	2
  4430  0253  0086               	movwf	6
  4431  0254  3001               	movlw	1	; select bank2/3
  4432  0255  0087               	movwf	7
  4433  0256  0868               	movf	??_setSw_Main,w
  4434  0257  0781               	addwf	1,f
  4435                           
  4436                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  4437  0258  086C               	movf	_Sw,w
  4438  0259  3E02               	addlw	2
  4439  025A  0086               	movwf	6
  4440  025B  3001               	movlw	1	; select bank2/3
  4441  025C  0087               	movwf	7
  4442  025D  3005               	movlw	5
  4443  025E  0201               	subwf	1,w
  4444  025F  1C03               	skipc
  4445  0260  0008               	return
  4446                           
  4447                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  4448  0261  086C               	movf	_Sw,w
  4449  0262  3E02               	addlw	2
  4450  0263  0086               	movwf	6
  4451  0264  3001               	movlw	1	; select bank2/3
  4452  0265  0087               	movwf	7
  4453  0266  0181               	clrf	1
  4454                           
  4455                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  4456  0267  086C               	movf	_Sw,w
  4457  0268  0086               	movwf	6
  4458  0269  3001               	movlw	1	; select bank2/3
  4459  026A  0087               	movwf	7
  4460  026B  1501               	bsf	1,2
  4461                           
  4462                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  4463  026C  086A               	movf	setSw_Main@sw,w
  4464  026D  318D  2590         	fcall	_Sw_DimmerOnFunc
  4465                           
  4466                           ;Switch_B1.c: 173: }
  4467                           ;Switch_B1.c: 174: } else {
  4468  026F  0008               	return
  4469  0270                     l9441:	
  4470                           
  4471                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  4472  0270  0020               	movlb	0	; select bank0
  4473  0271  086C               	movf	_Sw,w
  4474  0272  0086               	movwf	6
  4475  0273  3001               	movlw	1	; select bank2/3
  4476  0274  0087               	movwf	7
  4477  0275  1981               	btfsc	1,3
  4478  0276  2A9D               	goto	l9451
  4479                           
  4480                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  4481  0277  086C               	movf	_Sw,w
  4482  0278  3E03               	addlw	3
  4483  0279  0086               	movwf	6
  4484  027A  3001               	movlw	1	; select bank2/3
  4485  027B  0087               	movwf	7
  4486  027C  3001               	movlw	1
  4487  027D  0781               	addwf	1,f
  4488  027E  3141               	addfsr 1,1
  4489  027F  1803               	skipnc
  4490  0280  0A81               	incf	1,f
  4491                           
  4492                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  4493  0281  086C               	movf	_Sw,w
  4494  0282  3E03               	addlw	3
  4495  0283  0086               	movwf	6
  4496  0284  3001               	movlw	1	; select bank2/3
  4497  0285  0087               	movwf	7
  4498  0286  3F40               	moviw [0]fsr1
  4499  0287  00E8               	movwf	??_setSw_Main
  4500  0288  3F41               	moviw [1]fsr1
  4501  0289  00E9               	movwf	??_setSw_Main+1
  4502  028A  3000               	movlw	0
  4503  028B  0269               	subwf	??_setSw_Main+1,w
  4504  028C  3096               	movlw	150
  4505  028D  1903               	skipnz
  4506  028E  0268               	subwf	??_setSw_Main,w
  4507  028F  1C03               	skipc
  4508  0290  0008               	return
  4509                           
  4510                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  4511  0291  086C               	movf	_Sw,w
  4512  0292  3E03               	addlw	3
  4513  0293  0086               	movwf	6
  4514  0294  3001               	movlw	1	; select bank2/3
  4515  0295  0087               	movwf	7
  4516  0296  3000               	movlw	0
  4517  0297  3FC0               	movwi [0]fsr1
  4518  0298  3FC1               	movwi [1]fsr1
  4519                           
  4520                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  4521  0299  086A               	movf	setSw_Main@sw,w
  4522  029A  3189  2131         	fcall	_Sw_DimmerAdjFunc
  4523                           
  4524                           ;Switch_B1.c: 184: }
  4525                           ;Switch_B1.c: 185: } else {
  4526  029C  0008               	return
  4527  029D                     l9451:	
  4528                           
  4529                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  4530  029D  0020               	movlb	0	; select bank0
  4531  029E  086C               	movf	_Sw,w
  4532  029F  0086               	movwf	6
  4533  02A0  3001               	movlw	1	; select bank2/3
  4534  02A1  0087               	movwf	7
  4535  02A2  1A01               	btfsc	1,4
  4536  02A3  2ADB               	goto	l9465
  4537                           
  4538                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  4539  02A4  086C               	movf	_Sw,w
  4540  02A5  3E05               	addlw	5
  4541  02A6  0086               	movwf	6
  4542  02A7  3001               	movlw	1	; select bank2/3
  4543  02A8  0087               	movwf	7
  4544  02A9  3001               	movlw	1
  4545  02AA  0781               	addwf	1,f
  4546  02AB  3141               	addfsr 1,1
  4547  02AC  1803               	skipnc
  4548  02AD  0A81               	incf	1,f
  4549                           
  4550                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  4551  02AE  086C               	movf	_Sw,w
  4552  02AF  3E05               	addlw	5
  4553  02B0  0086               	movwf	6
  4554  02B1  3001               	movlw	1	; select bank2/3
  4555  02B2  0087               	movwf	7
  4556  02B3  3F40               	moviw [0]fsr1
  4557  02B4  00E8               	movwf	??_setSw_Main
  4558  02B5  3F41               	moviw [1]fsr1
  4559  02B6  00E9               	movwf	??_setSw_Main+1
  4560  02B7  3000               	movlw	0
  4561  02B8  0269               	subwf	??_setSw_Main+1,w
  4562  02B9  3096               	movlw	150
  4563  02BA  1903               	skipnz
  4564  02BB  0268               	subwf	??_setSw_Main,w
  4565  02BC  1C03               	skipc
  4566  02BD  0008               	return
  4567                           
  4568                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  4569  02BE  086C               	movf	_Sw,w
  4570  02BF  3E05               	addlw	5
  4571  02C0  0086               	movwf	6
  4572  02C1  3001               	movlw	1	; select bank2/3
  4573  02C2  0087               	movwf	7
  4574  02C3  3000               	movlw	0
  4575  02C4  3FC0               	movwi [0]fsr1
  4576  02C5  3FC1               	movwi [1]fsr1
  4577                           
  4578                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  4579  02C6  086C               	movf	_Sw,w
  4580  02C7  0086               	movwf	6
  4581  02C8  3001               	movlw	1	; select bank2/3
  4582  02C9  0087               	movwf	7
  4583  02CA  1601               	bsf	1,4
  4584                           
  4585                           ;Switch_B1.c: 193: setRF_Learn(1);
  4586  02CB  3001               	movlw	1
  4587  02CC  319E  267C  3182   	fcall	_setRF_Learn
  4588                           
  4589                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  4590  02CF  0021               	movlb	1	; select bank1
  4591  02D0  1FA0               	btfss	_myMain^(0+128),7
  4592  02D1  0008               	return
  4593                           
  4594                           ;Switch_B1.c: 196: setBuz(2, 100);
  4595  02D2  3064               	movlw	100
  4596  02D3  0020               	movlb	0	; select bank0
  4597  02D4  00A9               	movwf	setBuz@time
  4598  02D5  3000               	movlw	0
  4599  02D6  00AA               	movwf	setBuz@time+1
  4600  02D7  3002               	movlw	2
  4601  02D8  3197  27A7         	fcall	_setBuz
  4602                           
  4603                           ;Switch_B1.c: 197: }
  4604                           ;Switch_B1.c: 199: }
  4605                           ;Switch_B1.c: 200: } else {
  4606  02DA  0008               	return
  4607  02DB                     l9465:	
  4608                           
  4609                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  4610  02DB  0020               	movlb	0	; select bank0
  4611  02DC  086C               	movf	_Sw,w
  4612  02DD  0086               	movwf	6
  4613  02DE  3001               	movlw	1	; select bank2/3
  4614  02DF  0087               	movwf	7
  4615  02E0  1A81               	btfsc	1,5
  4616  02E1  0008               	return
  4617                           
  4618                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  4619  02E2  086C               	movf	_Sw,w
  4620  02E3  3E07               	addlw	7
  4621  02E4  0086               	movwf	6
  4622  02E5  3001               	movlw	1	; select bank2/3
  4623  02E6  0087               	movwf	7
  4624  02E7  3001               	movlw	1
  4625  02E8  0781               	addwf	1,f
  4626  02E9  3141               	addfsr 1,1
  4627  02EA  1803               	skipnc
  4628  02EB  0A81               	incf	1,f
  4629                           
  4630                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  4631  02EC  086C               	movf	_Sw,w
  4632  02ED  3E07               	addlw	7
  4633  02EE  0086               	movwf	6
  4634  02EF  3001               	movlw	1	; select bank2/3
  4635  02F0  0087               	movwf	7
  4636  02F1  3F40               	moviw [0]fsr1
  4637  02F2  00E8               	movwf	??_setSw_Main
  4638  02F3  3F41               	moviw [1]fsr1
  4639  02F4  00E9               	movwf	??_setSw_Main+1
  4640  02F5  3001               	movlw	1
  4641  02F6  0269               	subwf	??_setSw_Main+1,w
  4642  02F7  302C               	movlw	44
  4643  02F8  1903               	skipnz
  4644  02F9  0268               	subwf	??_setSw_Main,w
  4645  02FA  1C03               	skipc
  4646  02FB  0008               	return
  4647                           
  4648                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4649  02FC  086C               	movf	_Sw,w
  4650  02FD  3E07               	addlw	7
  4651  02FE  0086               	movwf	6
  4652  02FF  3001               	movlw	1	; select bank2/3
  4653  0300  0087               	movwf	7
  4654  0301  3000               	movlw	0
  4655  0302  3FC0               	movwi [0]fsr1
  4656  0303  3FC1               	movwi [1]fsr1
  4657                           
  4658                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  4659  0304  086C               	movf	_Sw,w
  4660  0305  0086               	movwf	6
  4661  0306  3001               	movlw	1	; select bank2/3
  4662  0307  0087               	movwf	7
  4663  0308  1681               	bsf	1,5
  4664                           
  4665                           ;Switch_B1.c: 208: setRF_Learn(0);
  4666  0309  3000               	movlw	0
  4667  030A  319E  267C         	fcall	_setRF_Learn
  4668                           
  4669                           ;Switch_B1.c: 211: }
  4670                           ;Switch_B1.c: 212: }
  4671                           ;Switch_B1.c: 213: }
  4672                           ;Switch_B1.c: 214: }
  4673                           ;Switch_B1.c: 215: }
  4674                           ;Switch_B1.c: 216: } else {
  4675  030C  0008               	return
  4676  030D                     l9475:	
  4677                           
  4678                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  4679  030D  0020               	movlb	0	; select bank0
  4680  030E  086C               	movf	_Sw,w
  4681  030F  0086               	movwf	6
  4682  0310  3001               	movlw	1	; select bank2/3
  4683  0311  0087               	movwf	7
  4684  0312  1D01               	btfss	1,2
  4685  0313  0008               	return
  4686                           
  4687                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  4688  0314  3001               	movlw	1
  4689  0315  00E8               	movwf	??_setSw_Main
  4690  0316  086C               	movf	_Sw,w
  4691  0317  3E02               	addlw	2
  4692  0318  0086               	movwf	6
  4693  0319  3001               	movlw	1	; select bank2/3
  4694  031A  0087               	movwf	7
  4695  031B  0868               	movf	??_setSw_Main,w
  4696  031C  0781               	addwf	1,f
  4697                           
  4698                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  4699  031D  086C               	movf	_Sw,w
  4700  031E  3E02               	addlw	2
  4701  031F  0086               	movwf	6
  4702  0320  3001               	movlw	1	; select bank2/3
  4703  0321  0087               	movwf	7
  4704  0322  3005               	movlw	5
  4705  0323  0201               	subwf	1,w
  4706  0324  1C03               	skipc
  4707  0325  0008               	return
  4708                           
  4709                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  4710  0326  086C               	movf	_Sw,w
  4711  0327  3E02               	addlw	2
  4712  0328  0086               	movwf	6
  4713  0329  3001               	movlw	1	; select bank2/3
  4714  032A  0087               	movwf	7
  4715  032B  0181               	clrf	1
  4716                           
  4717                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  4718  032C  086C               	movf	_Sw,w
  4719  032D  0086               	movwf	6
  4720  032E  3001               	movlw	1	; select bank2/3
  4721  032F  0087               	movwf	7
  4722  0330  1101               	bcf	1,2
  4723                           
  4724                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  4725  0331  086C               	movf	_Sw,w
  4726  0332  3E03               	addlw	3
  4727  0333  0086               	movwf	6
  4728  0334  3001               	movlw	1	; select bank2/3
  4729  0335  0087               	movwf	7
  4730  0336  3000               	movlw	0
  4731  0337  3FC0               	movwi [0]fsr1
  4732  0338  3FC1               	movwi [1]fsr1
  4733                           
  4734                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  4735  0339  086C               	movf	_Sw,w
  4736  033A  0086               	movwf	6
  4737  033B  3001               	movlw	1	; select bank2/3
  4738  033C  0087               	movwf	7
  4739  033D  1181               	bcf	1,3
  4740                           
  4741                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  4742  033E  086C               	movf	_Sw,w
  4743  033F  3E05               	addlw	5
  4744  0340  0086               	movwf	6
  4745  0341  3001               	movlw	1	; select bank2/3
  4746  0342  0087               	movwf	7
  4747  0343  3000               	movlw	0
  4748  0344  3FC0               	movwi [0]fsr1
  4749  0345  3FC1               	movwi [1]fsr1
  4750                           
  4751                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  4752  0346  086C               	movf	_Sw,w
  4753  0347  0086               	movwf	6
  4754  0348  3001               	movlw	1	; select bank2/3
  4755  0349  0087               	movwf	7
  4756  034A  1201               	bcf	1,4
  4757                           
  4758                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  4759  034B  086C               	movf	_Sw,w
  4760  034C  3E07               	addlw	7
  4761  034D  0086               	movwf	6
  4762  034E  3001               	movlw	1	; select bank2/3
  4763  034F  0087               	movwf	7
  4764  0350  3000               	movlw	0
  4765  0351  3FC0               	movwi [0]fsr1
  4766  0352  3FC1               	movwi [1]fsr1
  4767                           
  4768                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  4769  0353  086C               	movf	_Sw,w
  4770  0354  0086               	movwf	6
  4771  0355  3001               	movlw	1	; select bank2/3
  4772  0356  0087               	movwf	7
  4773  0357  1281               	bcf	1,5
  4774                           
  4775                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  4776  0358  086A               	movf	setSw_Main@sw,w
  4777  0359  318B  233A  3182   	fcall	_Sw_DimmerOffFunc
  4778                           
  4779                           ;Switch_B1.c: 232: setRF_Learn(0);
  4780  035C  3000               	movlw	0
  4781  035D  319E  267C         	fcall	_setRF_Learn
  4782  035F  0008               	return
  4783  0360                     __end_of_setSw_Main:	
  4784                           
  4785                           	psect	text9
  4786  1E7C                     __ptext9:	
  4787 ;; *************** function _setRF_Learn *****************
  4788 ;; Defined at:
  4789 ;;		line 23 in file "../src/RF_Control_B1.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  command         1    wreg     unsigned char 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  command         1    0[BANK0 ] unsigned char 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;		None               void
  4796 ;; Registers used:
  4797 ;;		wreg
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4807 ;;Total ram usage:        1 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; Hardware stack levels required when called:    5
  4810 ;; This function calls:
  4811 ;;		Nothing
  4812 ;; This function is called by:
  4813 ;;		_setSw_Main
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           
  4818                           ;psect for function _setRF_Learn
  4819  1E7C                     _setRF_Learn:	
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in _setRF_Learn: [wreg]
  4823                           ;setRF_Learn@command stored from wreg
  4824  1E7C  0020               	movlb	0	; select bank0
  4825  1E7D  00A0               	movwf	setRF_Learn@command
  4826                           
  4827                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  4828  1E7E  0820               	movf	setRF_Learn@command,w
  4829  1E7F  0021               	movlb	1	; select bank1
  4830  1E80  133E               	bcf	_RF1^(0+128),6
  4831  1E81  1D03               	skipz
  4832  1E82  173E               	bsf	_RF1^(0+128),6
  4833  1E83  0008               	return
  4834  1E84                     __end_of_setRF_Learn:	
  4835                           
  4836                           	psect	text10
  4837  0D90                     __ptext10:	
  4838 ;; *************** function _Sw_DimmerOnFunc *****************
  4839 ;; Defined at:
  4840 ;;		line 241 in file "../src/Switch_B1.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  sw              1    wreg     unsigned char 
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;  sw              1   71[BANK0 ] unsigned char 
  4845 ;;  Idle            1   70[BANK0 ] unsigned char 
  4846 ;; Return value:  Size  Location     Type
  4847 ;;		None               void
  4848 ;; Registers used:
  4849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4856 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4858 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;Total ram usage:        6 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    9
  4862 ;; This function calls:
  4863 ;;		_setBuz
  4864 ;;		_setDimmerLights_Switch
  4865 ;;		_setDimmerLights_Trigger
  4866 ;;		_setRFSW_Status
  4867 ;;		_setRF_DimmerLights
  4868 ;;		_setTxData
  4869 ;; This function is called by:
  4870 ;;		_setSw_Main
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           
  4875                           ;psect for function _Sw_DimmerOnFunc
  4876  0D90                     _Sw_DimmerOnFunc:	
  4877                           
  4878                           ;incstack = 0
  4879                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4880                           ;Sw_DimmerOnFunc@sw stored from wreg
  4881  0D90  0020               	movlb	0	; select bank0
  4882  0D91  00E7               	movwf	Sw_DimmerOnFunc@sw
  4883                           
  4884                           ;Switch_B1.c: 242: char Idle = 1;
  4885  0D92  01E6               	clrf	Sw_DimmerOnFunc@Idle
  4886  0D93  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  4887                           
  4888                           ;Switch_B1.c: 246: if (sw == 1) {
  4889  0D94  0867               	movf	Sw_DimmerOnFunc@sw,w
  4890  0D95  3A01               	xorlw	1
  4891  0D96  1D03               	skipz
  4892  0D97  2DA5               	goto	l8857
  4893                           
  4894                           ;Switch_B1.c: 247: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4895  0D98  01E3               	clrf	_Sw_DimmerOnFunc$6120
  4896  0D99  0022               	movlb	2	; select bank2
  4897  0D9A  19D4               	btfsc	(_DimmerLights2^(0+256)+8),3
  4898  0D9B  2DA2               	goto	l8855
  4899  0D9C  0023               	movlb	3	; select bank3
  4900  0D9D  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  4901  0D9E  2DA2               	goto	l8855
  4902  0D9F  0020               	movlb	0	; select bank0
  4903  0DA0  01E3               	clrf	_Sw_DimmerOnFunc$6120
  4904  0DA1  0AE3               	incf	_Sw_DimmerOnFunc$6120,f
  4905  0DA2                     l8855:	
  4906  0DA2  0020               	movlb	0	; select bank0
  4907  0DA3  0863               	movf	_Sw_DimmerOnFunc$6120,w
  4908  0DA4  2DC4               	goto	L2
  4909  0DA5                     l8857:	
  4910                           ;Switch_B1.c: 248: } else if (sw == 2) {
  4911                           
  4912  0DA5  0867               	movf	Sw_DimmerOnFunc@sw,w
  4913  0DA6  3A02               	xorlw	2
  4914  0DA7  1D03               	skipz
  4915  0DA8  2DB6               	goto	l8869
  4916                           
  4917                           ;Switch_B1.c: 249: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4918  0DA9  01E4               	clrf	_Sw_DimmerOnFunc$6121
  4919  0DAA  0022               	movlb	2	; select bank2
  4920  0DAB  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  4921  0DAC  2DB3               	goto	l8867
  4922  0DAD  0023               	movlb	3	; select bank3
  4923  0DAE  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  4924  0DAF  2DB3               	goto	l8867
  4925  0DB0  0020               	movlb	0	; select bank0
  4926  0DB1  01E4               	clrf	_Sw_DimmerOnFunc$6121
  4927  0DB2  0AE4               	incf	_Sw_DimmerOnFunc$6121,f
  4928  0DB3                     l8867:	
  4929  0DB3  0020               	movlb	0	; select bank0
  4930  0DB4  0864               	movf	_Sw_DimmerOnFunc$6121,w
  4931  0DB5  2DC4               	goto	L2
  4932  0DB6                     l8869:	
  4933                           ;Switch_B1.c: 250: } else if (sw == 3) {
  4934                           
  4935  0DB6  0867               	movf	Sw_DimmerOnFunc@sw,w
  4936  0DB7  3A03               	xorlw	3
  4937  0DB8  1D03               	skipz
  4938  0DB9  2DC7               	goto	l2713
  4939                           
  4940                           ;Switch_B1.c: 251: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  4941  0DBA  01E5               	clrf	_Sw_DimmerOnFunc$6122
  4942  0DBB  0022               	movlb	2	; select bank2
  4943  0DBC  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  4944  0DBD  19D4               	btfsc	(_DimmerLights2^(0+256)+8),3
  4945  0DBE  2DC2               	goto	l8879
  4946  0DBF  0020               	movlb	0	; select bank0
  4947  0DC0  01E5               	clrf	_Sw_DimmerOnFunc$6122
  4948  0DC1  0AE5               	incf	_Sw_DimmerOnFunc$6122,f
  4949  0DC2                     l8879:	
  4950  0DC2  0020               	movlb	0	; select bank0
  4951  0DC3  0865               	movf	_Sw_DimmerOnFunc$6122,w
  4952  0DC4                     L2:	
  4953  0DC4  00E2               	movwf	??_Sw_DimmerOnFunc
  4954  0DC5  0862               	movf	??_Sw_DimmerOnFunc,w
  4955  0DC6  00E6               	movwf	Sw_DimmerOnFunc@Idle
  4956  0DC7                     l2713:	
  4957                           
  4958                           ;Switch_B1.c: 252: }
  4959                           ;Switch_B1.c: 263: if (Idle == 1) {
  4960  0DC7  0866               	movf	Sw_DimmerOnFunc@Idle,w
  4961  0DC8  3A01               	xorlw	1
  4962  0DC9  1D03               	skipz
  4963  0DCA  0008               	return
  4964                           
  4965                           ;Switch_B1.c: 264: Sw->Flag = 1;
  4966  0DCB  086C               	movf	_Sw,w
  4967  0DCC  0086               	movwf	6
  4968  0DCD  3001               	movlw	1	; select bank2/3
  4969  0DCE  0087               	movwf	7
  4970  0DCF  1781               	bsf	1,7
  4971                           
  4972                           ;Switch_B1.c: 265: setBuz(1, 100);
  4973  0DD0  3064               	movlw	100
  4974  0DD1  00A9               	movwf	setBuz@time
  4975  0DD2  3000               	movlw	0
  4976  0DD3  00AA               	movwf	setBuz@time+1
  4977  0DD4  3001               	movlw	1
  4978  0DD5  3197  27A7  318D   	fcall	_setBuz
  4979                           
  4980                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  4981  0DD8  0020               	movlb	0	; select bank0
  4982  0DD9  086C               	movf	_Sw,w
  4983  0DDA  0086               	movwf	6
  4984  0DDB  3001               	movlw	1	; select bank2/3
  4985  0DDC  0087               	movwf	7
  4986  0DDD  1B01               	btfsc	1,6
  4987  0DDE  2E08               	goto	l8899
  4988                           
  4989                           ;Switch_B1.c: 267: Sw->Status = 1;
  4990  0DDF  086C               	movf	_Sw,w
  4991  0DE0  0086               	movwf	6
  4992  0DE1  3001               	movlw	1	; select bank2/3
  4993  0DE2  0087               	movwf	7
  4994  0DE3  1701               	bsf	1,6
  4995                           
  4996                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  4997  0DE4  01A2               	clrf	setRFSW_Status@command
  4998  0DE5  0AA2               	incf	setRFSW_Status@command,f
  4999  0DE6  0867               	movf	Sw_DimmerOnFunc@sw,w
  5000  0DE7  319F  2710  318D   	fcall	_setRFSW_Status
  5001                           
  5002                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  5003  0DEA  0020               	movlb	0	; select bank0
  5004  0DEB  01A2               	clrf	setDimmerLights_Trigger@command
  5005  0DEC  0AA2               	incf	setDimmerLights_Trigger@command,f
  5006  0DED  0867               	movf	Sw_DimmerOnFunc@sw,w
  5007  0DEE  319F  276B  318D   	fcall	_setDimmerLights_Trigger
  5008                           
  5009                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5010  0DF1  0020               	movlb	0	; select bank0
  5011  0DF2  01A2               	clrf	setDimmerLights_Switch@command
  5012  0DF3  0AA2               	incf	setDimmerLights_Switch@command,f
  5013  0DF4  0867               	movf	Sw_DimmerOnFunc@sw,w
  5014  0DF5  319F  275B  318D   	fcall	_setDimmerLights_Switch
  5015                           
  5016                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5017  0DF8  0020               	movlb	0	; select bank0
  5018  0DF9  086C               	movf	_Sw,w
  5019  0DFA  0086               	movwf	6
  5020  0DFB  3001               	movlw	1	; select bank2/3
  5021  0DFC  0087               	movwf	7
  5022  0DFD  3000               	movlw	0
  5023  0DFE  1B01               	btfsc	1,6
  5024  0DFF  3001               	movlw	1
  5025  0E00  00DD               	movwf	setRF_DimmerLights@on
  5026  0E01  0867               	movf	Sw_DimmerOnFunc@sw,w
  5027  0E02  318A  22CE  318D   	fcall	_setRF_DimmerLights
  5028                           
  5029                           ;Switch_B1.c: 274: setTxData();
  5030  0E05  3185  25F9         	fcall	_setTxData
  5031                           
  5032                           ;Switch_B1.c: 276: } else {
  5033  0E07  0008               	return
  5034  0E08                     l8899:	
  5035                           
  5036                           ;Switch_B1.c: 277: Sw->Status = 0;
  5037  0E08  0020               	movlb	0	; select bank0
  5038  0E09  086C               	movf	_Sw,w
  5039  0E0A  0086               	movwf	6
  5040  0E0B  3001               	movlw	1	; select bank2/3
  5041  0E0C  0087               	movwf	7
  5042  0E0D  1301               	bcf	1,6
  5043                           
  5044                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5045  0E0E  086C               	movf	_Sw,w
  5046  0E0F  0086               	movwf	6
  5047  0E10  3001               	movlw	1	; select bank2/3
  5048  0E11  0087               	movwf	7
  5049  0E12  3000               	movlw	0
  5050  0E13  1B01               	btfsc	1,6
  5051  0E14  3001               	movlw	1
  5052  0E15  00A2               	movwf	setRFSW_Status@command
  5053  0E16  0867               	movf	Sw_DimmerOnFunc@sw,w
  5054  0E17  319F  2710         	fcall	_setRFSW_Status
  5055  0E19  0008               	return
  5056  0E1A                     __end_of_Sw_DimmerOnFunc:	
  5057                           
  5058                           	psect	text11
  5059  0B3A                     __ptext11:	
  5060 ;; *************** function _Sw_DimmerOffFunc *****************
  5061 ;; Defined at:
  5062 ;;		line 284 in file "../src/Switch_B1.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;  sw              1    wreg     unsigned char 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  sw              1   68[BANK0 ] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;		None               void
  5069 ;; Registers used:
  5070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5080 ;;Total ram usage:        3 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    9
  5083 ;; This function calls:
  5084 ;;		_setDelayOff_GO
  5085 ;;		_setDimmerLights_AdjGo
  5086 ;;		_setDimmerLights_Switch
  5087 ;;		_setDimmerLights_Trigger
  5088 ;;		_setDimmerLights_TriggerAdj
  5089 ;;		_setRF_DimmerLights
  5090 ;;		_setTxData
  5091 ;; This function is called by:
  5092 ;;		_setSw_Main
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           
  5097                           ;psect for function _Sw_DimmerOffFunc
  5098  0B3A                     _Sw_DimmerOffFunc:	
  5099                           
  5100                           ;incstack = 0
  5101                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5102                           ;Sw_DimmerOffFunc@sw stored from wreg
  5103  0B3A  0020               	movlb	0	; select bank0
  5104  0B3B  00E4               	movwf	Sw_DimmerOffFunc@sw
  5105                           
  5106                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5107  0B3C  086C               	movf	_Sw,w
  5108  0B3D  0086               	movwf	6
  5109  0B3E  3001               	movlw	1	; select bank2/3
  5110  0B3F  0087               	movwf	7
  5111  0B40  1F81               	btfss	1,7
  5112  0B41  0008               	return
  5113                           
  5114                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5115  0B42  086C               	movf	_Sw,w
  5116  0B43  0086               	movwf	6
  5117  0B44  3001               	movlw	1	; select bank2/3
  5118  0B45  0087               	movwf	7
  5119  0B46  1381               	bcf	1,7
  5120                           
  5121                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5122  0B47  086C               	movf	_Sw,w
  5123  0B48  0086               	movwf	6
  5124  0B49  3001               	movlw	1	; select bank2/3
  5125  0B4A  0087               	movwf	7
  5126  0B4B  1F01               	btfss	1,6
  5127  0B4C  2B85               	goto	l8969
  5128                           
  5129                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5130  0B4D  0A6C               	incf	_Sw,w
  5131  0B4E  0086               	movwf	6
  5132  0B4F  3001               	movlw	1	; select bank2/3
  5133  0B50  0087               	movwf	7
  5134  0B51  1C01               	btfss	1,0
  5135  0B52  0008               	return
  5136                           
  5137                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5138  0B53  0A6C               	incf	_Sw,w
  5139  0B54  0086               	movwf	6
  5140  0B55  3001               	movlw	1	; select bank2/3
  5141  0B56  0087               	movwf	7
  5142  0B57  1001               	bcf	1,0
  5143                           
  5144                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5145  0B58  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5146  0B59  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5147  0B5A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5148  0B5B  319F  27AB  318B   	fcall	_setDimmerLights_TriggerAdj
  5149                           
  5150                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5151  0B5E  0020               	movlb	0	; select bank0
  5152  0B5F  01A2               	clrf	setDimmerLights_AdjGo@command
  5153  0B60  0864               	movf	Sw_DimmerOffFunc@sw,w
  5154  0B61  319F  279B  318B   	fcall	_setDimmerLights_AdjGo
  5155                           
  5156                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5157  0B64  0020               	movlb	0	; select bank0
  5158  0B65  0864               	movf	Sw_DimmerOffFunc@sw,w
  5159  0B66  3E1A               	addlw	26
  5160  0B67  076D               	addwf	_product,w
  5161  0B68  00E2               	movwf	??_Sw_DimmerOffFunc
  5162  0B69  0862               	movf	??_Sw_DimmerOffFunc,w
  5163  0B6A  0086               	movwf	6
  5164  0B6B  3002               	movlw	2	; select bank4/5
  5165  0B6C  0087               	movwf	7
  5166  0B6D  0801               	movf	1,w
  5167  0B6E  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5168  0B6F  086D               	movf	_product,w
  5169  0B70  3E11               	addlw	17
  5170  0B71  0086               	movwf	6
  5171  0B72  3002               	movlw	2	; select bank4/5
  5172  0B73  0087               	movwf	7
  5173  0B74  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5174  0B75  0081               	movwf	1
  5175                           
  5176                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5177  0B76  086C               	movf	_Sw,w
  5178  0B77  0086               	movwf	6
  5179  0B78  3001               	movlw	1	; select bank2/3
  5180  0B79  0087               	movwf	7
  5181  0B7A  3000               	movlw	0
  5182  0B7B  1B01               	btfsc	1,6
  5183  0B7C  3001               	movlw	1
  5184  0B7D  00DD               	movwf	setRF_DimmerLights@on
  5185  0B7E  0864               	movf	Sw_DimmerOffFunc@sw,w
  5186  0B7F  318A  22CE  318B   	fcall	_setRF_DimmerLights
  5187                           
  5188                           ;Switch_B1.c: 295: setTxData();
  5189  0B82  3185  25F9         	fcall	_setTxData
  5190                           
  5191                           ;Switch_B1.c: 297: }
  5192                           ;Switch_B1.c: 298: } else {
  5193  0B84  0008               	return
  5194  0B85                     l8969:	
  5195                           
  5196                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5197  0B85  0020               	movlb	0	; select bank0
  5198  0B86  01A2               	clrf	setDimmerLights_Trigger@command
  5199  0B87  0AA2               	incf	setDimmerLights_Trigger@command,f
  5200  0B88  0864               	movf	Sw_DimmerOffFunc@sw,w
  5201  0B89  319F  276B  318B   	fcall	_setDimmerLights_Trigger
  5202                           
  5203                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  5204  0B8C  0020               	movlb	0	; select bank0
  5205  0B8D  01A2               	clrf	setDimmerLights_Switch@command
  5206  0B8E  0864               	movf	Sw_DimmerOffFunc@sw,w
  5207  0B8F  319F  275B  318B   	fcall	_setDimmerLights_Switch
  5208                           
  5209                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  5210  0B92  0020               	movlb	0	; select bank0
  5211  0B93  01AA               	clrf	setDelayOff_GO@command
  5212  0B94  01AB               	clrf	setDelayOff_GO@value
  5213  0B95  0864               	movf	Sw_DimmerOffFunc@sw,w
  5214  0B96  3188  2071  318B   	fcall	_setDelayOff_GO
  5215                           
  5216                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  5217  0B99  0020               	movlb	0	; select bank0
  5218  0B9A  086C               	movf	_Sw,w
  5219  0B9B  0086               	movwf	6
  5220  0B9C  3001               	movlw	1	; select bank2/3
  5221  0B9D  0087               	movwf	7
  5222  0B9E  3000               	movlw	0
  5223  0B9F  1B01               	btfsc	1,6
  5224  0BA0  3001               	movlw	1
  5225  0BA1  00DD               	movwf	setRF_DimmerLights@on
  5226  0BA2  0864               	movf	Sw_DimmerOffFunc@sw,w
  5227  0BA3  318A  22CE  318B   	fcall	_setRF_DimmerLights
  5228                           
  5229                           ;Switch_B1.c: 304: setTxData();
  5230  0BA6  3185  25F9         	fcall	_setTxData
  5231  0BA8  0008               	return
  5232  0BA9                     __end_of_Sw_DimmerOffFunc:	
  5233                           
  5234                           	psect	text12
  5235  0931                     __ptext12:	
  5236 ;; *************** function _Sw_DimmerAdjFunc *****************
  5237 ;; Defined at:
  5238 ;;		line 311 in file "../src/Switch_B1.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;  sw              1    wreg     unsigned char 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  sw              1    9[BANK0 ] unsigned char 
  5243 ;;  Idle            1    8[BANK0 ] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;		None               void
  5246 ;; Registers used:
  5247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5255 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5256 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;Total ram usage:        6 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    7
  5260 ;; This function calls:
  5261 ;;		_setDimmerLights_AdjGo
  5262 ;;		_setDimmerLights_TriggerAdj
  5263 ;;		_setRFSW_Status
  5264 ;; This function is called by:
  5265 ;;		_setSw_Main
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           
  5270                           ;psect for function _Sw_DimmerAdjFunc
  5271  0931                     _Sw_DimmerAdjFunc:	
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5275                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5276  0931  0020               	movlb	0	; select bank0
  5277  0932  00A9               	movwf	Sw_DimmerAdjFunc@sw
  5278                           
  5279                           ;Switch_B1.c: 312: char Idle = 1;
  5280  0933  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  5281  0934  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  5282                           
  5283                           ;Switch_B1.c: 315: if (sw == 1) {
  5284  0935  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5285  0936  3A01               	xorlw	1
  5286  0937  1D03               	skipz
  5287  0938  2946               	goto	l8917
  5288                           
  5289                           ;Switch_B1.c: 316: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5290  0939  01A5               	clrf	_Sw_DimmerAdjFunc$6132
  5291  093A  0022               	movlb	2	; select bank2
  5292  093B  19D4               	btfsc	(_DimmerLights2^(0+256)+8),3
  5293  093C  2943               	goto	l8915
  5294  093D  0023               	movlb	3	; select bank3
  5295  093E  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  5296  093F  2943               	goto	l8915
  5297  0940  0020               	movlb	0	; select bank0
  5298  0941  01A5               	clrf	_Sw_DimmerAdjFunc$6132
  5299  0942  0AA5               	incf	_Sw_DimmerAdjFunc$6132,f
  5300  0943                     l8915:	
  5301  0943  0020               	movlb	0	; select bank0
  5302  0944  0825               	movf	_Sw_DimmerAdjFunc$6132,w
  5303  0945  2965               	goto	L4
  5304  0946                     l8917:	
  5305                           ;Switch_B1.c: 317: } else if (sw == 2) {
  5306                           
  5307  0946  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5308  0947  3A02               	xorlw	2
  5309  0948  1D03               	skipz
  5310  0949  2957               	goto	l8929
  5311                           
  5312                           ;Switch_B1.c: 318: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5313  094A  01A6               	clrf	_Sw_DimmerAdjFunc$6133
  5314  094B  0022               	movlb	2	; select bank2
  5315  094C  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  5316  094D  2954               	goto	l8927
  5317  094E  0023               	movlb	3	; select bank3
  5318  094F  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  5319  0950  2954               	goto	l8927
  5320  0951  0020               	movlb	0	; select bank0
  5321  0952  01A6               	clrf	_Sw_DimmerAdjFunc$6133
  5322  0953  0AA6               	incf	_Sw_DimmerAdjFunc$6133,f
  5323  0954                     l8927:	
  5324  0954  0020               	movlb	0	; select bank0
  5325  0955  0826               	movf	_Sw_DimmerAdjFunc$6133,w
  5326  0956  2965               	goto	L4
  5327  0957                     l8929:	
  5328                           ;Switch_B1.c: 319: } else if (sw == 3) {
  5329                           
  5330  0957  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5331  0958  3A03               	xorlw	3
  5332  0959  1D03               	skipz
  5333  095A  2968               	goto	l2737
  5334                           
  5335                           ;Switch_B1.c: 320: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5336  095B  01A7               	clrf	_Sw_DimmerAdjFunc$6134
  5337  095C  0022               	movlb	2	; select bank2
  5338  095D  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  5339  095E  19D4               	btfsc	(_DimmerLights2^(0+256)+8),3
  5340  095F  2963               	goto	l8939
  5341  0960  0020               	movlb	0	; select bank0
  5342  0961  01A7               	clrf	_Sw_DimmerAdjFunc$6134
  5343  0962  0AA7               	incf	_Sw_DimmerAdjFunc$6134,f
  5344  0963                     l8939:	
  5345  0963  0020               	movlb	0	; select bank0
  5346  0964  0827               	movf	_Sw_DimmerAdjFunc$6134,w
  5347  0965                     L4:	
  5348  0965  00A4               	movwf	??_Sw_DimmerAdjFunc
  5349  0966  0824               	movf	??_Sw_DimmerAdjFunc,w
  5350  0967  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  5351  0968                     l2737:	
  5352                           
  5353                           ;Switch_B1.c: 321: }
  5354                           ;Switch_B1.c: 332: if (Idle == 1) {
  5355  0968  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  5356  0969  3A01               	xorlw	1
  5357  096A  1D03               	skipz
  5358  096B  0008               	return
  5359                           
  5360                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  5361  096C  086C               	movf	_Sw,w
  5362  096D  0086               	movwf	6
  5363  096E  3001               	movlw	1	; select bank2/3
  5364  096F  0087               	movwf	7
  5365  0970  1F81               	btfss	1,7
  5366  0971  0008               	return
  5367                           
  5368                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  5369  0972  086C               	movf	_Sw,w
  5370  0973  0086               	movwf	6
  5371  0974  3001               	movlw	1	; select bank2/3
  5372  0975  0087               	movwf	7
  5373  0976  1581               	bsf	1,3
  5374                           
  5375                           ;Switch_B1.c: 335: Sw->Adj = 1;
  5376  0977  0A6C               	incf	_Sw,w
  5377  0978  0086               	movwf	6
  5378  0979  3001               	movlw	1	; select bank2/3
  5379  097A  0087               	movwf	7
  5380  097B  1401               	bsf	1,0
  5381                           
  5382                           ;Switch_B1.c: 336: Sw->Status = 1;
  5383  097C  086C               	movf	_Sw,w
  5384  097D  0086               	movwf	6
  5385  097E  3001               	movlw	1	; select bank2/3
  5386  097F  0087               	movwf	7
  5387  0980  1701               	bsf	1,6
  5388                           
  5389                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  5390  0981  01A2               	clrf	setRFSW_Status@command
  5391  0982  0AA2               	incf	setRFSW_Status@command,f
  5392  0983  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5393  0984  319F  2710  3189   	fcall	_setRFSW_Status
  5394                           
  5395                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  5396  0987  0020               	movlb	0	; select bank0
  5397  0988  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5398  0989  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5399  098A  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5400  098B  319F  27AB  3189   	fcall	_setDimmerLights_TriggerAdj
  5401                           
  5402                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  5403  098E  0020               	movlb	0	; select bank0
  5404  098F  01A2               	clrf	setDimmerLights_AdjGo@command
  5405  0990  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5406  0991  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5407  0992  319F  279B         	fcall	_setDimmerLights_AdjGo
  5408  0994  0008               	return
  5409  0995                     __end_of_Sw_DimmerAdjFunc:	
  5410                           
  5411                           	psect	text13
  5412  1FAB                     __ptext13:	
  5413 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5414 ;; Defined at:
  5415 ;;		line 720 in file "../src/Dimmer_B1.c"
  5416 ;; Parameters:    Size  Location     Type
  5417 ;;  lights          1    wreg     unsigned char 
  5418 ;;  command         1    2[BANK0 ] unsigned char 
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;  lights          1    3[BANK0 ] unsigned char 
  5421 ;; Return value:  Size  Location     Type
  5422 ;;		None               void
  5423 ;; Registers used:
  5424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5430 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5433 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5434 ;;Total ram usage:        2 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    6
  5437 ;; This function calls:
  5438 ;;		_DimmerLightsPointSelect
  5439 ;; This function is called by:
  5440 ;;		_Sw_DimmerOffFunc
  5441 ;;		_Sw_DimmerAdjFunc
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           
  5446                           ;psect for function _setDimmerLights_TriggerAdj
  5447  1FAB                     _setDimmerLights_TriggerAdj:	
  5448                           
  5449                           ;incstack = 0
  5450                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5451                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5452  1FAB  0020               	movlb	0	; select bank0
  5453  1FAC  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5454                           
  5455                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  5456  1FAD  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5457  1FAE  3191  2178         	fcall	_DimmerLightsPointSelect
  5458                           
  5459                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  5460  1FB0  0020               	movlb	0	; select bank0
  5461  1FB1  086B               	movf	_DimmerLights,w
  5462  1FB2  3E08               	addlw	8
  5463  1FB3  0086               	movwf	6
  5464  1FB4  3001               	movlw	1	; select bank2/3
  5465  1FB5  0087               	movwf	7
  5466  1FB6  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5467  1FB7  1201               	bcf	1,4
  5468  1FB8  1D03               	skipz
  5469  1FB9  1601               	bsf	1,4
  5470  1FBA  0008               	return
  5471  1FBB                     __end_of_setDimmerLights_TriggerAdj:	
  5472                           
  5473                           	psect	text14
  5474  1F9B                     __ptext14:	
  5475 ;; *************** function _setDimmerLights_AdjGo *****************
  5476 ;; Defined at:
  5477 ;;		line 708 in file "../src/Dimmer_B1.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  lights          1    wreg     unsigned char 
  5480 ;;  command         1    2[BANK0 ] unsigned char 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  lights          1    3[BANK0 ] unsigned char 
  5483 ;; Return value:  Size  Location     Type
  5484 ;;		None               void
  5485 ;; Registers used:
  5486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5492 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;Total ram usage:        2 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    6
  5499 ;; This function calls:
  5500 ;;		_DimmerLightsPointSelect
  5501 ;; This function is called by:
  5502 ;;		_Sw_DimmerOffFunc
  5503 ;;		_Sw_DimmerAdjFunc
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _setDimmerLights_AdjGo
  5509  1F9B                     _setDimmerLights_AdjGo:	
  5510                           
  5511                           ;incstack = 0
  5512                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5513                           ;setDimmerLights_AdjGo@lights stored from wreg
  5514  1F9B  0020               	movlb	0	; select bank0
  5515  1F9C  00A3               	movwf	setDimmerLights_AdjGo@lights
  5516                           
  5517                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  5518  1F9D  0823               	movf	setDimmerLights_AdjGo@lights,w
  5519  1F9E  3191  2178         	fcall	_DimmerLightsPointSelect
  5520                           
  5521                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  5522  1FA0  0020               	movlb	0	; select bank0
  5523  1FA1  086B               	movf	_DimmerLights,w
  5524  1FA2  3E08               	addlw	8
  5525  1FA3  0086               	movwf	6
  5526  1FA4  3001               	movlw	1	; select bank2/3
  5527  1FA5  0087               	movwf	7
  5528  1FA6  0822               	movf	setDimmerLights_AdjGo@command,w
  5529  1FA7  1181               	bcf	1,3
  5530  1FA8  1D03               	skipz
  5531  1FA9  1581               	bsf	1,3
  5532  1FAA  0008               	return
  5533  1FAB                     __end_of_setDimmerLights_AdjGo:	
  5534                           
  5535                           	psect	text15
  5536  1FDD                     __ptext15:	
  5537 ;; *************** function _Switch_Initialization *****************
  5538 ;; Defined at:
  5539 ;;		line 41 in file "../src/Switch_B1.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;		None
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;		None
  5544 ;; Return value:  Size  Location     Type
  5545 ;;		None               void
  5546 ;; Registers used:
  5547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;Total ram usage:        0 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    8
  5560 ;; This function calls:
  5561 ;;		_TouchPower
  5562 ;;		_setSw_Initialization
  5563 ;; This function is called by:
  5564 ;;		_main
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           
  5569                           ;psect for function _Switch_Initialization
  5570  1FDD                     _Switch_Initialization:	
  5571                           
  5572                           ;Switch_B1.c: 42: TouchPower();
  5573                           
  5574                           ;incstack = 0
  5575                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5576  1FDD  319F  273D  319F   	fcall	_TouchPower
  5577                           
  5578                           ;Switch_B1.c: 44: WPUB1 = 0;
  5579  1FE0  0024               	movlb	4	; select bank4
  5580  1FE1  108D               	bcf	13,1	;volatile
  5581                           
  5582                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5583  1FE2  3001               	movlw	1
  5584  1FE3  319E  2674  319F   	fcall	_setSw_Initialization
  5585                           
  5586                           ;Switch_B1.c: 57: setSw_Initialization(2);
  5587  1FE6  3002               	movlw	2
  5588  1FE7  319E  2674  319F   	fcall	_setSw_Initialization
  5589                           
  5590                           ;Switch_B1.c: 61: setSw_Initialization(3);
  5591  1FEA  3003               	movlw	3
  5592  1FEB  319E  2674         	fcall	_setSw_Initialization
  5593  1FED  0008               	return
  5594  1FEE                     __end_of_Switch_Initialization:	
  5595                           
  5596                           	psect	text16
  5597  1E74                     __ptext16:	
  5598 ;; *************** function _setSw_Initialization *****************
  5599 ;; Defined at:
  5600 ;;		line 83 in file "../src/Switch_B1.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  sw              1    wreg     unsigned char 
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;  sw              1    3[BANK0 ] unsigned char 
  5605 ;; Return value:  Size  Location     Type
  5606 ;;		None               void
  5607 ;; Registers used:
  5608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;Total ram usage:        1 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; Hardware stack levels required when called:    7
  5621 ;; This function calls:
  5622 ;;		_setLED
  5623 ;; This function is called by:
  5624 ;;		_Switch_Initialization
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           
  5629                           ;psect for function _setSw_Initialization
  5630  1E74                     _setSw_Initialization:	
  5631                           
  5632                           ;incstack = 0
  5633                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5634                           ;setSw_Initialization@sw stored from wreg
  5635  1E74  0020               	movlb	0	; select bank0
  5636  1E75  00A3               	movwf	setSw_Initialization@sw
  5637                           
  5638                           ;Switch_B1.c: 84: setLED(sw, 1);
  5639  1E76  01A1               	clrf	setLED@command
  5640  1E77  0AA1               	incf	setLED@command,f
  5641  1E78  0823               	movf	setSw_Initialization@sw,w
  5642  1E79  318B  23A9         	fcall	_setLED
  5643  1E7B  0008               	return
  5644  1E7C                     __end_of_setSw_Initialization:	
  5645                           
  5646                           	psect	text17
  5647  1F3D                     __ptext17:	
  5648 ;; *************** function _TouchPower *****************
  5649 ;; Defined at:
  5650 ;;		line 10 in file "../src/Switch_B1.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;		None
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;		None
  5655 ;; Return value:  Size  Location     Type
  5656 ;;		None               void
  5657 ;; Registers used:
  5658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5668 ;;Total ram usage:        0 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    6
  5671 ;; This function calls:
  5672 ;;		_Timeout_Counter
  5673 ;;		_set_TimeoutCleared
  5674 ;; This function is called by:
  5675 ;;		_Switch_Initialization
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           
  5680                           ;psect for function _TouchPower
  5681  1F3D                     _TouchPower:	
  5682                           
  5683                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5684                           
  5685                           ;incstack = 0
  5686                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5687  1F3D  2F43               	goto	l9405
  5688  1F3E                     l2655:	
  5689                           
  5690                           ;Switch_B1.c: 12: RC5 = 1;
  5691  1F3E  0020               	movlb	0	; select bank0
  5692  1F3F  168E               	bsf	14,5	;volatile
  5693                           
  5694                           ;Switch_B1.c: 13: Timeout_Counter();
  5695  1F40  3190  20D2  319F   	fcall	_Timeout_Counter
  5696  1F43                     l9405:	
  5697  1F43  0020               	movlb	0	; select bank0
  5698  1F44  1A8E               	btfsc	14,5	;volatile
  5699  1F45  2F49               	goto	l9409
  5700  1F46  0021               	movlb	1	; select bank1
  5701  1F47  1D2F               	btfss	(_myMain^(0+128)+15),2
  5702  1F48  2F3E               	goto	l2655
  5703  1F49                     l9409:	
  5704                           
  5705                           ;Switch_B1.c: 14: }
  5706                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5707  1F49  319E  2654         	fcall	_set_TimeoutCleared
  5708  1F4B  0008               	return
  5709  1F4C                     __end_of_TouchPower:	
  5710                           
  5711                           	psect	text18
  5712  1E41                     __ptext18:	
  5713 ;; *************** function _RF_Main *****************
  5714 ;; Defined at:
  5715 ;;		line 16 in file "../src/RF_Control_B1.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;		None
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;		None               void
  5722 ;; Registers used:
  5723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;Total ram usage:        0 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:   14
  5736 ;; This function calls:
  5737 ;;		_setRF_Main
  5738 ;; This function is called by:
  5739 ;;		_main
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function _RF_Main
  5745  1E41                     _RF_Main:	
  5746                           
  5747                           ;RF_Control_B1.c: 18: setRF_Main();
  5748                           
  5749                           ;incstack = 0
  5750                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5751  1E41  3184  2456         	fcall	_setRF_Main
  5752  1E43  0008               	return
  5753  1E44                     __end_of_RF_Main:	
  5754                           
  5755                           	psect	text19
  5756  0456                     __ptext19:	
  5757 ;; *************** function _setRF_Main *****************
  5758 ;; Defined at:
  5759 ;;		line 52 in file "../src/RF_Control_B1.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;		None
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  Receive_OK      1    0        unsigned char 
  5764 ;;  loop_f          1    0        unsigned char 
  5765 ;; Return value:  Size  Location     Type
  5766 ;;		None               void
  5767 ;; Registers used:
  5768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;Total ram usage:        2 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:   13
  5781 ;; This function calls:
  5782 ;;		_CC2500_ReadStatus
  5783 ;;		_CC2500_RxData
  5784 ;;		_CC2500_TxData
  5785 ;;		_CC2500_WriteCommand
  5786 ;;		_getBuz_GO
  5787 ;;		_getRxData
  5788 ;; This function is called by:
  5789 ;;		_RF_Main
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           
  5794                           ;psect for function _setRF_Main
  5795  0456                     _setRF_Main:	
  5796                           
  5797                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  5798                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5799                           
  5800                           ;incstack = 0
  5801                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5802  0456  0021               	movlb	1	; select bank1
  5803  0457  1C3E               	btfss	_RF1^(0+128),0
  5804  0458  0008               	return
  5805                           
  5806                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  5807  0459  319F  27CC  3184   	fcall	_getBuz_GO
  5808  045C  0020               	movlb	0	; select bank0
  5809  045D  0821               	movf	?_getBuz_GO+1,w
  5810  045E  0420               	iorwf	?_getBuz_GO,w
  5811  045F  1D03               	skipz
  5812  0460  0008               	return
  5813                           
  5814                           ;RF_Control_B1.c: 60: RF1.Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  5815  0461  01E8               	clrf	_setRF_Main$5152
  5816  0462  0AE8               	incf	_setRF_Main$5152,f
  5817  0463  1C0C               	btfss	12,0	;volatile
  5818  0464  1B0C               	btfsc	12,6	;volatile
  5819  0465  2C68               	goto	l9303
  5820  0466  1E0C               	btfss	12,4	;volatile
  5821  0467  01E8               	clrf	_setRF_Main$5152
  5822  0468                     l9303:	
  5823  0468  0868               	movf	_setRF_Main$5152,w
  5824  0469  0021               	movlb	1	; select bank1
  5825  046A  13BE               	bcf	_RF1^(0+128),7
  5826  046B  1D03               	skipz
  5827  046C  17BE               	bsf	_RF1^(0+128),7
  5828                           
  5829                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  5830  046D  1BBE               	btfsc	_RF1^(0+128),7
  5831  046E  1B3E               	btfsc	_RF1^(0+128),6
  5832  046F  2C75               	goto	l2207
  5833                           
  5834                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  5835  0470  01C0               	clrf	(_RF1^(0+128)+2)
  5836  0471  01C1               	clrf	((_RF1+1)^(0+128)+2)
  5837                           
  5838                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  5839  0472  14BF               	bsf	(_RF1^(0+128)+1),1
  5840                           
  5841                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  5842  0473  11BE               	bcf	_RF1^(0+128),3
  5843                           
  5844                           ;RF_Control_B1.c: 76: } else {
  5845  0474  0008               	return
  5846  0475                     l2207:	
  5847                           
  5848                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  5849  0475  18BF               	btfsc	(_RF1^(0+128)+1),1
  5850  0476  1B3E               	btfsc	_RF1^(0+128),6
  5851  0477  2C8C               	goto	l9325
  5852                           
  5853                           ;RF_Control_B1.c: 78: RF1.Count++;
  5854  0478  3001               	movlw	1
  5855  0479  07C0               	addwf	(_RF1^(0+128)+2),f
  5856  047A  3000               	movlw	0
  5857  047B  3DC1               	addwfc	((_RF1+1)^(0+128)+2),f
  5858                           
  5859                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  5860  047C  3002               	movlw	2
  5861  047D  3EBE               	addlw	_RF1& (0+255)
  5862  047E  0086               	movwf	6
  5863  047F  0187               	clrf	7
  5864  0480  3F40               	moviw [0]fsr1
  5865  0481  0645               	xorwf	(_RF1^(0+128)+7),w
  5866  0482  1D03               	skipz
  5867  0483  2C86               	goto	u9855
  5868  0484  3F41               	moviw [1]fsr1
  5869  0485  0646               	xorwf	((_RF1+1)^(0+128)+7),w
  5870  0486                     u9855:	
  5871  0486  1D03               	skipz
  5872  0487  2CFF               	goto	l9379
  5873                           
  5874                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  5875  0488  01C0               	clrf	(_RF1^(0+128)+2)
  5876  0489  01C1               	clrf	((_RF1+1)^(0+128)+2)
  5877                           
  5878                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  5879  048A  10BF               	bcf	(_RF1^(0+128)+1),1
  5880                           
  5881                           ;RF_Control_B1.c: 82: }
  5882                           ;RF_Control_B1.c: 83: } else {
  5883  048B  2CFF               	goto	l9379
  5884  048C                     l9325:	
  5885                           
  5886                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  5887  048C  01C0               	clrf	(_RF1^(0+128)+2)
  5888  048D  01C1               	clrf	((_RF1+1)^(0+128)+2)
  5889                           
  5890                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  5891  048E  10BF               	bcf	(_RF1^(0+128)+1),1
  5892                           
  5893                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5894  048F  193E               	btfsc	_RF1^(0+128),2
  5895  0490  1B3E               	btfsc	_RF1^(0+128),6
  5896  0491  2CAD               	goto	l2212
  5897                           
  5898                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  5899  0492  113E               	bcf	_RF1^(0+128),2
  5900                           
  5901                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  5902  0493  11BE               	bcf	_RF1^(0+128),3
  5903                           
  5904                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  5905  0494  10BE               	bcf	_RF1^(0+128),1
  5906                           
  5907                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  5908  0495  303B               	movlw	59
  5909  0496  3192  22CC  3184   	fcall	_CC2500_ReadStatus
  5910                           
  5911                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  5912  0499  0021               	movlb	1	; select bank1
  5913  049A  0859               	movf	_s_data^(0+128),w
  5914  049B  1903               	btfsc	3,2
  5915  049C  2CA9               	goto	l2213
  5916                           
  5917                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  5918  049D  3036               	movlw	54
  5919  049E  3191  212B  3184   	fcall	_CC2500_WriteCommand
  5920                           
  5921                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  5922  04A1  303B               	movlw	59
  5923  04A2  3191  212B  3184   	fcall	_CC2500_WriteCommand
  5924                           
  5925                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  5926  04A5  303A               	movlw	58
  5927  04A6  3191  212B  3184   	fcall	_CC2500_WriteCommand
  5928  04A9                     l2213:	
  5929                           
  5930                           ;RF_Control_B1.c: 97: }
  5931                           ;RF_Control_B1.c: 98: CC2500_TxData();
  5932  04A9  3189  2195  3184   	fcall	_CC2500_TxData
  5933                           
  5934                           ;RF_Control_B1.c: 100: } else {
  5935  04AC  2CFF               	goto	l9379
  5936  04AD                     l2212:	
  5937                           
  5938                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  5939  04AD  1DBE               	btfss	_RF1^(0+128),3
  5940  04AE  2CEA               	goto	l2215
  5941                           
  5942                           ;RF_Control_B1.c: 103: CC2500_RxData();
  5943  04AF  318C  241A  3184   	fcall	_CC2500_RxData
  5944                           
  5945                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  5946  04B2  0021               	movlb	1	; select bank1
  5947  04B3  1CBE               	btfss	_RF1^(0+128),1
  5948  04B4  2CFF               	goto	l9379
  5949                           
  5950                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  5951  04B5  10BE               	bcf	_RF1^(0+128),1
  5952                           
  5953                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  5954  04B6  12BF               	bcf	(_RF1^(0+128)+1),5
  5955                           
  5956                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  5957  04B7  01C8               	clrf	(_RF1^(0+128)+10)
  5958  04B8  01C9               	clrf	((_RF1+1)^(0+128)+10)
  5959                           
  5960                           ;RF_Control_B1.c: 115: getRxData();
  5961  04B9  3189  21FA  3184   	fcall	_getRxData
  5962                           
  5963                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  5964  04BC  0021               	movlb	1	; select bank1
  5965  04BD  14BF               	bsf	(_RF1^(0+128)+1),1
  5966                           
  5967                           ;RF_Control_B1.c: 119: RB5 = RB5 == 1 ? 0 : 1;
  5968  04BE  3020               	movlw	32
  5969  04BF  0020               	movlb	0	; select bank0
  5970  04C0  068D               	xorwf	13,f
  5971                           
  5972                           ;RF_Control_B1.c: 120: if (RF1.Checked == 1) {
  5973  04C1  0021               	movlb	1	; select bank1
  5974  04C2  1DBF               	btfss	(_RF1^(0+128)+1),3
  5975  04C3  2CD1               	goto	l9363
  5976                           
  5977                           ;RF_Control_B1.c: 121: if (RF1.RunTime > 20) {
  5978  04C4  3000               	movlw	0
  5979  04C5  0246               	subwf	((_RF1+1)^(0+128)+7),w
  5980  04C6  3015               	movlw	21
  5981  04C7  1903               	skipnz
  5982  04C8  0245               	subwf	(_RF1^(0+128)+7),w
  5983  04C9  1C03               	skipc
  5984  04CA  2CCF               	goto	l9361
  5985                           
  5986                           ;RF_Control_B1.c: 122: RF1.RunTime = 20;
  5987  04CB  3014               	movlw	20
  5988  04CC  00C5               	movwf	(_RF1^(0+128)+7)
  5989  04CD  3000               	movlw	0
  5990  04CE  00C6               	movwf	(_RF1^(0+128)+8)
  5991  04CF                     l9361:	
  5992                           
  5993                           ;RF_Control_B1.c: 123: }
  5994                           ;RF_Control_B1.c: 124: RF1.CheckCount = 0;
  5995  04CF  01C2               	clrf	(_RF1^(0+128)+4)
  5996                           
  5997                           ;RF_Control_B1.c: 125: } else {
  5998  04D0  2CFF               	goto	l9379
  5999  04D1                     l9363:	
  6000                           
  6001                           ;RF_Control_B1.c: 126: RF1.CheckCount++;
  6002  04D1  3001               	movlw	1
  6003  04D2  0020               	movlb	0	; select bank0
  6004  04D3  00E7               	movwf	??_setRF_Main
  6005  04D4  0867               	movf	??_setRF_Main,w
  6006  04D5  0021               	movlb	1	; select bank1
  6007  04D6  07C2               	addwf	(_RF1^(0+128)+4),f
  6008                           
  6009                           ;RF_Control_B1.c: 127: if (RF1.CheckCount == 2) {
  6010  04D7  0842               	movf	(_RF1^(0+128)+4),w
  6011  04D8  3A02               	xorlw	2
  6012  04D9  1D03               	skipz
  6013  04DA  2CFF               	goto	l9379
  6014                           
  6015                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6016  04DB  01C2               	clrf	(_RF1^(0+128)+4)
  6017                           
  6018                           ;RF_Control_B1.c: 129: RF1.CheckedCounter = 0;
  6019  04DC  01C3               	clrf	(_RF1^(0+128)+5)
  6020  04DD  01C4               	clrf	((_RF1+1)^(0+128)+5)
  6021                           
  6022                           ;RF_Control_B1.c: 130: if (RF1.RunTime < 300) {
  6023  04DE  3001               	movlw	1
  6024  04DF  0246               	subwf	((_RF1+1)^(0+128)+7),w
  6025  04E0  302C               	movlw	44
  6026  04E1  1903               	skipnz
  6027  04E2  0245               	subwf	(_RF1^(0+128)+7),w
  6028  04E3  1803               	skipnc
  6029  04E4  2CFF               	goto	l9379
  6030                           
  6031                           ;RF_Control_B1.c: 131: RF1.RunTime += 10;
  6032  04E5  300A               	movlw	10
  6033  04E6  07C5               	addwf	(_RF1^(0+128)+7),f
  6034  04E7  3000               	movlw	0
  6035  04E8  3DC6               	addwfc	((_RF1+1)^(0+128)+7),f
  6036                           
  6037                           ;RF_Control_B1.c: 132: }
  6038                           ;RF_Control_B1.c: 133: }
  6039                           ;RF_Control_B1.c: 134: }
  6040                           ;RF_Control_B1.c: 135: }
  6041                           ;RF_Control_B1.c: 136: } else {
  6042  04E9  2CFF               	goto	l9379
  6043  04EA                     l2215:	
  6044                           
  6045                           ;RF_Control_B1.c: 138: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6046  04EA  1DBE               	btfss	_RF1^(0+128),3
  6047  04EB  18BE               	btfsc	_RF1^(0+128),1
  6048  04EC  2CFF               	goto	l9379
  6049                           
  6050                           ;RF_Control_B1.c: 139: RF1.RxStatus = 1;
  6051  04ED  15BE               	bsf	_RF1^(0+128),3
  6052                           
  6053                           ;RF_Control_B1.c: 140: RF1.Correction = 1;
  6054  04EE  16BF               	bsf	(_RF1^(0+128)+1),5
  6055                           
  6056                           ;RF_Control_B1.c: 142: CC2500_WriteCommand(0x36);
  6057  04EF  3036               	movlw	54
  6058  04F0  3191  212B  3184   	fcall	_CC2500_WriteCommand
  6059                           
  6060                           ;RF_Control_B1.c: 143: CC2500_WriteCommand(0x3B);
  6061  04F3  303B               	movlw	59
  6062  04F4  3191  212B  3184   	fcall	_CC2500_WriteCommand
  6063                           
  6064                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x3A);
  6065  04F7  303A               	movlw	58
  6066  04F8  3191  212B  3184   	fcall	_CC2500_WriteCommand
  6067                           
  6068                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x34);
  6069  04FB  3034               	movlw	52
  6070  04FC  3191  212B  3184   	fcall	_CC2500_WriteCommand
  6071  04FF                     l9379:	
  6072                           
  6073                           ;RF_Control_B1.c: 147: }
  6074                           ;RF_Control_B1.c: 149: }
  6075                           ;RF_Control_B1.c: 150: }
  6076                           ;RF_Control_B1.c: 151: }
  6077                           ;RF_Control_B1.c: 152: if (RF1.RxStatus == 1) {
  6078  04FF  0021               	movlb	1	; select bank1
  6079  0500  1DBE               	btfss	_RF1^(0+128),3
  6080  0501  2D20               	goto	l9391
  6081                           
  6082                           ;RF_Control_B1.c: 153: RF1.CheckedCounter++;
  6083  0502  3001               	movlw	1
  6084  0503  07C3               	addwf	(_RF1^(0+128)+5),f
  6085  0504  3000               	movlw	0
  6086  0505  3DC4               	addwfc	((_RF1+1)^(0+128)+5),f
  6087                           
  6088                           ;RF_Control_B1.c: 154: if (RF1.CheckedCounter == 100) {
  6089  0506  3005               	movlw	5
  6090  0507  3EBE               	addlw	_RF1& (0+255)
  6091  0508  0086               	movwf	6
  6092  0509  0187               	clrf	7
  6093  050A  3F40               	moviw [0]fsr1
  6094  050B  3A64               	xorlw	100
  6095  050C  1D03               	skipz
  6096  050D  2D10               	goto	u9985
  6097  050E  3F41               	moviw [1]fsr1
  6098  050F  3A00               	xorlw	0
  6099  0510                     u9985:	
  6100  0510  1D03               	skipz
  6101  0511  2D20               	goto	l9391
  6102                           
  6103                           ;RF_Control_B1.c: 155: RF1.CheckedCounter = 0;
  6104  0512  01C3               	clrf	(_RF1^(0+128)+5)
  6105  0513  01C4               	clrf	((_RF1+1)^(0+128)+5)
  6106                           
  6107                           ;RF_Control_B1.c: 156: RF1.CheckCount = 0;
  6108  0514  01C2               	clrf	(_RF1^(0+128)+4)
  6109                           
  6110                           ;RF_Control_B1.c: 157: if (RF1.RunTime > 20) {
  6111  0515  3000               	movlw	0
  6112  0516  0246               	subwf	((_RF1+1)^(0+128)+7),w
  6113  0517  3015               	movlw	21
  6114  0518  1903               	skipnz
  6115  0519  0245               	subwf	(_RF1^(0+128)+7),w
  6116  051A  1C03               	skipc
  6117  051B  2D20               	goto	l9391
  6118                           
  6119                           ;RF_Control_B1.c: 158: RF1.RunTime -= 10;
  6120  051C  300A               	movlw	10
  6121  051D  02C5               	subwf	(_RF1^(0+128)+7),f
  6122  051E  3000               	movlw	0
  6123  051F  3BC6               	subwfb	((_RF1+1)^(0+128)+7),f
  6124  0520                     l9391:	
  6125                           
  6126                           ;RF_Control_B1.c: 159: }
  6127                           ;RF_Control_B1.c: 160: }
  6128                           ;RF_Control_B1.c: 161: }
  6129                           ;RF_Control_B1.c: 162: if (RF1.Correction == 1) {
  6130  0520  1EBF               	btfss	(_RF1^(0+128)+1),5
  6131  0521  0008               	return
  6132                           
  6133                           ;RF_Control_B1.c: 163: RF1.CorrectionCounter++;
  6134  0522  3001               	movlw	1
  6135  0523  07C8               	addwf	(_RF1^(0+128)+10),f
  6136  0524  3000               	movlw	0
  6137  0525  3DC9               	addwfc	((_RF1+1)^(0+128)+10),f
  6138                           
  6139                           ;RF_Control_B1.c: 164: if (RF1.CorrectionCounter >= 30000) {
  6140  0526  3075               	movlw	117
  6141  0527  0249               	subwf	((_RF1+1)^(0+128)+10),w
  6142  0528  3030               	movlw	48
  6143  0529  1903               	skipnz
  6144  052A  0248               	subwf	(_RF1^(0+128)+10),w
  6145  052B  1C03               	skipc
  6146  052C  0008               	return
  6147                           
  6148                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter = 0;
  6149  052D  01C8               	clrf	(_RF1^(0+128)+10)
  6150  052E  01C9               	clrf	((_RF1+1)^(0+128)+10)
  6151                           
  6152                           ;RF_Control_B1.c: 166: RF1.RxStatus = 0;
  6153  052F  11BE               	bcf	_RF1^(0+128),3
  6154                           
  6155                           ;RF_Control_B1.c: 167: RF1.ReceiveGO = 0;
  6156  0530  10BE               	bcf	_RF1^(0+128),1
  6157  0531  0008               	return
  6158  0532                     __end_of_setRF_Main:	
  6159                           
  6160                           	psect	text20
  6161  09FA                     __ptext20:	
  6162 ;; *************** function _getRxData *****************
  6163 ;; Defined at:
  6164 ;;		line 250 in file "../src/RF_Control_B1.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;		None               void
  6171 ;; Registers used:
  6172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;Total ram usage:        0 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:   12
  6185 ;; This function calls:
  6186 ;;		_setControl_Lights_Table
  6187 ;;		_setLog_Code
  6188 ;; This function is called by:
  6189 ;;		_setRF_Main
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           
  6194                           ;psect for function _getRxData
  6195  09FA                     _getRxData:	
  6196                           
  6197                           ;RF_Control_B1.c: 251: if (RF1.Learn == 1) {
  6198                           
  6199                           ;incstack = 0
  6200                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6201  09FA  0021               	movlb	1	; select bank1
  6202  09FB  1F3E               	btfss	_RF1^(0+128),6
  6203  09FC  2A0D               	goto	l8809
  6204                           
  6205                           ;RF_Control_B1.c: 252: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6206  09FD  0022               	movlb	2	; select bank2
  6207  09FE  08A0               	movf	_RF_Data^(0+256),f
  6208  09FF  1D03               	skipz
  6209  0A00  2A0A               	goto	l2246
  6210  0A01  0821               	movf	(_RF_Data^(0+256)+1),w
  6211  0A02  3A64               	xorlw	100
  6212  0A03  1D03               	skipz
  6213  0A04  2A0A               	goto	l2246
  6214                           
  6215                           ;RF_Control_B1.c: 253: setLog_Code();
  6216  0A05  3194  248F         	fcall	_setLog_Code
  6217                           
  6218                           ;RF_Control_B1.c: 254: RF1.Checked = 1;
  6219  0A07  0021               	movlb	1	; select bank1
  6220  0A08  15BF               	bsf	(_RF1^(0+128)+1),3
  6221                           
  6222                           ;RF_Control_B1.c: 255: } else {
  6223  0A09  0008               	return
  6224  0A0A                     l2246:	
  6225                           
  6226                           ;RF_Control_B1.c: 256: RF1.Checked = 0;
  6227  0A0A  0021               	movlb	1	; select bank1
  6228  0A0B  11BF               	bcf	(_RF1^(0+128)+1),3
  6229                           
  6230                           ;RF_Control_B1.c: 257: }
  6231                           ;RF_Control_B1.c: 258: } else {
  6232  0A0C  0008               	return
  6233  0A0D                     l8809:	
  6234                           
  6235                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6236  0A0D  0022               	movlb	2	; select bank2
  6237  0A0E  08A0               	movf	_RF_Data^(0+256),f
  6238  0A0F  1D03               	skipz
  6239  0A10  2A4B               	goto	l8831
  6240  0A11  0821               	movf	(_RF_Data^(0+256)+1),w
  6241  0A12  3A02               	xorlw	2
  6242  0A13  1D03               	skipz
  6243  0A14  2A4B               	goto	l8831
  6244                           
  6245                           ;RF_Control_B1.c: 261: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6246  0A15  082C               	movf	(_RF_Data^(0+256)+12),w
  6247  0A16  3AFF               	xorlw	255
  6248  0A17  1D03               	skipz
  6249  0A18  2A25               	goto	l8821
  6250  0A19  082D               	movf	(_RF_Data^(0+256)+13),w
  6251  0A1A  3AFF               	xorlw	255
  6252  0A1B  1D03               	skipz
  6253  0A1C  2A25               	goto	l8821
  6254  0A1D  082E               	movf	(_RF_Data^(0+256)+14),w
  6255  0A1E  3AFF               	xorlw	255
  6256  0A1F  1D03               	skipz
  6257  0A20  2A25               	goto	l8821
  6258                           
  6259                           ;RF_Control_B1.c: 262: __nop();
  6260  0A21  0000               	nop
  6261                           
  6262                           ;RF_Control_B1.c: 263: RF1.Checked = 0;
  6263  0A22  0021               	movlb	1	; select bank1
  6264  0A23  11BF               	bcf	(_RF1^(0+128)+1),3
  6265                           
  6266                           ;RF_Control_B1.c: 264: } else {
  6267  0A24  0008               	return
  6268  0A25                     l8821:	
  6269                           
  6270                           ;RF_Control_B1.c: 265: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6271  0A25  0020               	movlb	0	; select bank0
  6272  0A26  086D               	movf	_product,w
  6273  0A27  3E0C               	addlw	12
  6274  0A28  0086               	movwf	6
  6275  0A29  3002               	movlw	2	; select bank4/5
  6276  0A2A  0087               	movwf	7
  6277  0A2B  0022               	movlb	2	; select bank2
  6278  0A2C  082C               	movf	(_RF_Data^(0+256)+12),w
  6279  0A2D  0601               	xorwf	1,w
  6280  0A2E  1D03               	skipz
  6281  0A2F  0008               	return
  6282  0A30  0020               	movlb	0	; select bank0
  6283  0A31  086D               	movf	_product,w
  6284  0A32  3E0D               	addlw	13
  6285  0A33  0086               	movwf	6
  6286  0A34  3002               	movlw	2	; select bank4/5
  6287  0A35  0087               	movwf	7
  6288  0A36  0022               	movlb	2	; select bank2
  6289  0A37  082D               	movf	(_RF_Data^(0+256)+13),w
  6290  0A38  0601               	xorwf	1,w
  6291  0A39  1D03               	skipz
  6292  0A3A  0008               	return
  6293  0A3B  0020               	movlb	0	; select bank0
  6294  0A3C  086D               	movf	_product,w
  6295  0A3D  3E0E               	addlw	14
  6296  0A3E  0086               	movwf	6
  6297  0A3F  3002               	movlw	2	; select bank4/5
  6298  0A40  0087               	movwf	7
  6299  0A41  0022               	movlb	2	; select bank2
  6300  0A42  082E               	movf	(_RF_Data^(0+256)+14),w
  6301  0A43  0601               	xorwf	1,w
  6302  0A44  1D03               	skipz
  6303  0A45  0008               	return
  6304                           
  6305                           ;RF_Control_B1.c: 266: setControl_Lights_Table();
  6306  0A46  318F  2751         	fcall	_setControl_Lights_Table
  6307                           
  6308                           ;RF_Control_B1.c: 267: RF1.Checked = 1;
  6309  0A48  0021               	movlb	1	; select bank1
  6310  0A49  15BF               	bsf	(_RF1^(0+128)+1),3
  6311                           
  6312                           ;RF_Control_B1.c: 268: }
  6313                           ;RF_Control_B1.c: 269: }
  6314                           ;RF_Control_B1.c: 270: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6315  0A4A  0008               	return
  6316  0A4B                     l8831:	
  6317  0A4B  0022               	movlb	2	; select bank2
  6318  0A4C  0820               	movf	_RF_Data^(0+256),w
  6319  0A4D  3AFF               	xorlw	255
  6320  0A4E  1D03               	skipz
  6321  0A4F  2A56               	goto	l8837
  6322  0A50  0821               	movf	(_RF_Data^(0+256)+1),w
  6323  0A51  3A02               	xorlw	2
  6324  0A52  1D03               	skipz
  6325  0A53  2A56               	goto	l8837
  6326                           
  6327                           ;RF_Control_B1.c: 271: __nop();
  6328  0A54  0000               	nop
  6329                           
  6330                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6331  0A55  0008               	return
  6332  0A56                     l8837:	
  6333  0A56  0022               	movlb	2	; select bank2
  6334  0A57  08A0               	movf	_RF_Data^(0+256),f
  6335  0A58  1D03               	skipz
  6336  0A59  2A60               	goto	l2256
  6337  0A5A  0821               	movf	(_RF_Data^(0+256)+1),w
  6338  0A5B  3A65               	xorlw	101
  6339  0A5C  1D03               	skipz
  6340  0A5D  2A60               	goto	l2256
  6341                           
  6342                           ;RF_Control_B1.c: 273: __nop();
  6343  0A5E  0000               	nop
  6344                           
  6345                           ;RF_Control_B1.c: 274: } else {
  6346  0A5F  0008               	return
  6347  0A60                     l2256:	
  6348                           
  6349                           ;RF_Control_B1.c: 275: RF1.Checked = 0;
  6350  0A60  0021               	movlb	1	; select bank1
  6351  0A61  11BF               	bcf	(_RF1^(0+128)+1),3
  6352  0A62  0008               	return
  6353  0A63                     __end_of_getRxData:	
  6354                           
  6355                           	psect	text21
  6356  148F                     __ptext21:	
  6357 ;; *************** function _setLog_Code *****************
  6358 ;; Defined at:
  6359 ;;		line 285 in file "../src/RF_Control_B1.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;		None
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;		None
  6364 ;; Return value:  Size  Location     Type
  6365 ;;		None               void
  6366 ;; Registers used:
  6367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;Total ram usage:        1 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    7
  6380 ;; This function calls:
  6381 ;;		_setBuz
  6382 ;; This function is called by:
  6383 ;;		_getRxData
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           
  6388                           ;psect for function _setLog_Code
  6389  148F                     _setLog_Code:	
  6390                           
  6391                           ;RF_Control_B1.c: 286: product->Data[12]=RF_Data[12];
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6395  148F  0022               	movlb	2	; select bank2
  6396  1490  082C               	movf	(_RF_Data^(0+256)+12),w
  6397  1491  0020               	movlb	0	; select bank0
  6398  1492  00AD               	movwf	??_setLog_Code
  6399  1493  086D               	movf	_product,w
  6400  1494  3E0C               	addlw	12
  6401  1495  0086               	movwf	6
  6402  1496  3002               	movlw	2	; select bank4/5
  6403  1497  0087               	movwf	7
  6404  1498  082D               	movf	??_setLog_Code,w
  6405  1499  0081               	movwf	1
  6406                           
  6407                           ;RF_Control_B1.c: 287: product->Data[13]=RF_Data[13];
  6408  149A  0022               	movlb	2	; select bank2
  6409  149B  082D               	movf	(_RF_Data^(0+256)+13),w
  6410  149C  0020               	movlb	0	; select bank0
  6411  149D  00AD               	movwf	??_setLog_Code
  6412  149E  086D               	movf	_product,w
  6413  149F  3E0D               	addlw	13
  6414  14A0  0086               	movwf	6
  6415  14A1  3002               	movlw	2	; select bank4/5
  6416  14A2  0087               	movwf	7
  6417  14A3  082D               	movf	??_setLog_Code,w
  6418  14A4  0081               	movwf	1
  6419                           
  6420                           ;RF_Control_B1.c: 288: product->Data[14]=RF_Data[14];
  6421  14A5  0022               	movlb	2	; select bank2
  6422  14A6  082E               	movf	(_RF_Data^(0+256)+14),w
  6423  14A7  0020               	movlb	0	; select bank0
  6424  14A8  00AD               	movwf	??_setLog_Code
  6425  14A9  086D               	movf	_product,w
  6426  14AA  3E0E               	addlw	14
  6427  14AB  0086               	movwf	6
  6428  14AC  3002               	movlw	2	; select bank4/5
  6429  14AD  0087               	movwf	7
  6430  14AE  082D               	movf	??_setLog_Code,w
  6431  14AF  0081               	movwf	1
  6432                           
  6433                           ;RF_Control_B1.c: 289: setBuz(1, 100);
  6434  14B0  3064               	movlw	100
  6435  14B1  00A9               	movwf	setBuz@time
  6436  14B2  3000               	movlw	0
  6437  14B3  00AA               	movwf	setBuz@time+1
  6438  14B4  3001               	movlw	1
  6439  14B5  3197  27A7  3194   	fcall	_setBuz
  6440                           
  6441                           ;RF_Control_B1.c: 290: RF1.Learn = 0;
  6442  14B8  0021               	movlb	1	; select bank1
  6443  14B9  133E               	bcf	_RF1^(0+128),6
  6444                           
  6445                           ;RF_Control_B1.c: 291: if (myMain.First) {
  6446  14BA  1FA0               	btfss	_myMain^(0+128),7
  6447  14BB  2CBE               	goto	l2261
  6448                           
  6449                           ;RF_Control_B1.c: 292: Memory.LoopSave=1;
  6450  14BC  0023               	movlb	3	; select bank3
  6451  14BD  1544               	bsf	(_Memory^(0+384)+36),2
  6452  14BE                     l2261:	
  6453                           
  6454                           ;RF_Control_B1.c: 293: }
  6455                           ;RF_Control_B1.c: 294: Memory.Modify=1;
  6456  14BE  0023               	movlb	3	; select bank3
  6457  14BF  1444               	bsf	(_Memory^(0+384)+36),0
  6458  14C0  0008               	return
  6459  14C1                     __end_of_setLog_Code:	
  6460                           
  6461                           	psect	text22
  6462  0F51                     __ptext22:	
  6463 ;; *************** function _setControl_Lights_Table *****************
  6464 ;; Defined at:
  6465 ;;		line 298 in file "../src/RF_Control_B1.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;		None
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;		None
  6470 ;; Return value:  Size  Location     Type
  6471 ;;		None               void
  6472 ;; Registers used:
  6473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;Total ram usage:        0 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:   11
  6486 ;; This function calls:
  6487 ;;		_setBuz
  6488 ;;		_setDimmerLights
  6489 ;;		_setRFSW_AdjControl
  6490 ;;		_setRFSW_Control
  6491 ;;		_setRFSW_Status
  6492 ;;		_setSw_Status
  6493 ;;		_setTxData
  6494 ;; This function is called by:
  6495 ;;		_getRxData
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _setControl_Lights_Table
  6501  0F51                     _setControl_Lights_Table:	
  6502                           
  6503                           ;RF_Control_B1.c: 299: if (RF_Data[15] == 0x00) {
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6507  0F51  0022               	movlb	2	; select bank2
  6508  0F52  08AF               	movf	(_RF_Data^(0+256)+15),f
  6509  0F53  1D03               	skipz
  6510  0F54  2FAF               	goto	l8529
  6511                           
  6512                           ;RF_Control_B1.c: 301: setDimmerLights(1, 0);
  6513  0F55  0020               	movlb	0	; select bank0
  6514  0F56  01A3               	clrf	setDimmerLights@status
  6515  0F57  3001               	movlw	1
  6516  0F58  318C  248B  318F   	fcall	_setDimmerLights
  6517                           
  6518                           ;RF_Control_B1.c: 302: setRFSW_Status(1, 0);
  6519  0F5B  0020               	movlb	0	; select bank0
  6520  0F5C  01A2               	clrf	setRFSW_Status@command
  6521  0F5D  3001               	movlw	1
  6522  0F5E  319F  2710  318F   	fcall	_setRFSW_Status
  6523                           
  6524                           ;RF_Control_B1.c: 303: setSw_Status(1, 0);
  6525  0F61  0020               	movlb	0	; select bank0
  6526  0F62  01A2               	clrf	setSw_Status@command
  6527  0F63  3001               	movlw	1
  6528  0F64  319F  271F  318F   	fcall	_setSw_Status
  6529                           
  6530                           ;RF_Control_B1.c: 306: setDimmerLights(2, 0);
  6531  0F67  0020               	movlb	0	; select bank0
  6532  0F68  01A3               	clrf	setDimmerLights@status
  6533  0F69  3002               	movlw	2
  6534  0F6A  318C  248B  318F   	fcall	_setDimmerLights
  6535                           
  6536                           ;RF_Control_B1.c: 307: setRFSW_Status(2, 0);
  6537  0F6D  0020               	movlb	0	; select bank0
  6538  0F6E  01A2               	clrf	setRFSW_Status@command
  6539  0F6F  3002               	movlw	2
  6540  0F70  319F  2710  318F   	fcall	_setRFSW_Status
  6541                           
  6542                           ;RF_Control_B1.c: 308: setSw_Status(2, 0);
  6543  0F73  0020               	movlb	0	; select bank0
  6544  0F74  01A2               	clrf	setSw_Status@command
  6545  0F75  3002               	movlw	2
  6546  0F76  319F  271F  318F   	fcall	_setSw_Status
  6547                           
  6548                           ;RF_Control_B1.c: 311: setDimmerLights(3, 0);
  6549  0F79  0020               	movlb	0	; select bank0
  6550  0F7A  01A3               	clrf	setDimmerLights@status
  6551  0F7B  3003               	movlw	3
  6552  0F7C  318C  248B  318F   	fcall	_setDimmerLights
  6553                           
  6554                           ;RF_Control_B1.c: 312: setRFSW_Status(3, 0);
  6555  0F7F  0020               	movlb	0	; select bank0
  6556  0F80  01A2               	clrf	setRFSW_Status@command
  6557  0F81  3003               	movlw	3
  6558  0F82  319F  2710  318F   	fcall	_setRFSW_Status
  6559                           
  6560                           ;RF_Control_B1.c: 313: setSw_Status(3, 0);
  6561  0F85  0020               	movlb	0	; select bank0
  6562  0F86  01A2               	clrf	setSw_Status@command
  6563  0F87  3003               	movlw	3
  6564  0F88  319F  271F  318F   	fcall	_setSw_Status
  6565                           
  6566                           ;RF_Control_B1.c: 316: product->Data[9]=0;
  6567  0F8B  0020               	movlb	0	; select bank0
  6568  0F8C  086D               	movf	_product,w
  6569  0F8D  3E09               	addlw	9
  6570  0F8E  0086               	movwf	6
  6571  0F8F  3002               	movlw	2	; select bank4/5
  6572  0F90  0087               	movwf	7
  6573  0F91  0181               	clrf	1
  6574                           
  6575                           ;RF_Control_B1.c: 317: product->Data[11]=0;
  6576  0F92  086D               	movf	_product,w
  6577  0F93  3E0B               	addlw	11
  6578  0F94  0086               	movwf	6
  6579  0F95  3002               	movlw	2	; select bank4/5
  6580  0F96  0087               	movwf	7
  6581  0F97  0181               	clrf	1
  6582                           
  6583                           ;RF_Control_B1.c: 318: product->Data[15]=0;
  6584  0F98  086D               	movf	_product,w
  6585  0F99  3E0F               	addlw	15
  6586  0F9A  0086               	movwf	6
  6587  0F9B  3002               	movlw	2	; select bank4/5
  6588  0F9C  0087               	movwf	7
  6589  0F9D  0181               	clrf	1
  6590                           
  6591                           ;RF_Control_B1.c: 319: product->Data[17]=0;
  6592  0F9E  086D               	movf	_product,w
  6593  0F9F  3E11               	addlw	17
  6594  0FA0  0086               	movwf	6
  6595  0FA1  3002               	movlw	2	; select bank4/5
  6596  0FA2  0087               	movwf	7
  6597  0FA3  0181               	clrf	1
  6598                           
  6599                           ;RF_Control_B1.c: 320: setBuz(1, 100);
  6600  0FA4  3064               	movlw	100
  6601  0FA5  00A9               	movwf	setBuz@time
  6602  0FA6  3000               	movlw	0
  6603  0FA7  00AA               	movwf	setBuz@time+1
  6604  0FA8  3001               	movlw	1
  6605  0FA9  3197  27A7  318F   	fcall	_setBuz
  6606                           
  6607                           ;RF_Control_B1.c: 321: setTxData();
  6608  0FAC  3185  25F9         	fcall	_setTxData
  6609                           
  6610                           ;RF_Control_B1.c: 322: } else if (RF_Data[15] == 0x20) {
  6611  0FAE  0008               	return
  6612  0FAF                     l8529:	
  6613  0FAF  0022               	movlb	2	; select bank2
  6614  0FB0  082F               	movf	(_RF_Data^(0+256)+15),w
  6615  0FB1  3A20               	xorlw	32
  6616  0FB2  1D03               	skipz
  6617  0FB3  2FCA               	goto	l8535
  6618                           
  6619                           ;RF_Control_B1.c: 323: product->Data[9]=0;
  6620  0FB4  0020               	movlb	0	; select bank0
  6621  0FB5  086D               	movf	_product,w
  6622  0FB6  3E09               	addlw	9
  6623  0FB7  0086               	movwf	6
  6624  0FB8  3002               	movlw	2	; select bank4/5
  6625  0FB9  0087               	movwf	7
  6626  0FBA  0181               	clrf	1
  6627                           
  6628                           ;RF_Control_B1.c: 324: product->Data[11]=0;
  6629  0FBB  086D               	movf	_product,w
  6630  0FBC  3E0B               	addlw	11
  6631  0FBD  0086               	movwf	6
  6632  0FBE  3002               	movlw	2	; select bank4/5
  6633  0FBF  0087               	movwf	7
  6634  0FC0  0181               	clrf	1
  6635                           
  6636                           ;RF_Control_B1.c: 325: product->Data[17]=0;
  6637  0FC1  086D               	movf	_product,w
  6638  0FC2  3E11               	addlw	17
  6639  0FC3  0086               	movwf	6
  6640  0FC4  3002               	movlw	2	; select bank4/5
  6641  0FC5  0087               	movwf	7
  6642  0FC6  0181               	clrf	1
  6643                           
  6644                           ;RF_Control_B1.c: 326: setTxData();
  6645  0FC7  3185  25F9         	fcall	_setTxData
  6646                           
  6647                           ;RF_Control_B1.c: 327: }
  6648  0FC9  0008               	return
  6649  0FCA                     l8535:	
  6650                           
  6651                           ;RF_Control_B1.c: 329: else if (RF_Data[15] == 0x01) {
  6652  0FCA  0022               	movlb	2	; select bank2
  6653  0FCB  082F               	movf	(_RF_Data^(0+256)+15),w
  6654  0FCC  3A01               	xorlw	1
  6655  0FCD  1D03               	skipz
  6656  0FCE  2FD3               	goto	l8539
  6657                           
  6658                           ;RF_Control_B1.c: 330: setRFSW_Control(1);
  6659  0FCF  3001               	movlw	1
  6660  0FD0  3187  276A         	fcall	_setRFSW_Control
  6661                           
  6662                           ;RF_Control_B1.c: 331: }
  6663  0FD2  0008               	return
  6664  0FD3                     l8539:	
  6665                           
  6666                           ;RF_Control_B1.c: 333: else if (RF_Data[15] == 0x11) {
  6667  0FD3  0022               	movlb	2	; select bank2
  6668  0FD4  082F               	movf	(_RF_Data^(0+256)+15),w
  6669  0FD5  3A11               	xorlw	17
  6670  0FD6  1D03               	skipz
  6671  0FD7  2FDC               	goto	l8543
  6672                           
  6673                           ;RF_Control_B1.c: 334: setRFSW_AdjControl(1);
  6674  0FD8  3001               	movlw	1
  6675  0FD9  3194  24F6         	fcall	_setRFSW_AdjControl
  6676                           
  6677                           ;RF_Control_B1.c: 335: }
  6678  0FDB  0008               	return
  6679  0FDC                     l8543:	
  6680                           
  6681                           ;RF_Control_B1.c: 340: else if (RF_Data[15] == 0x02) {
  6682  0FDC  0022               	movlb	2	; select bank2
  6683  0FDD  082F               	movf	(_RF_Data^(0+256)+15),w
  6684  0FDE  3A02               	xorlw	2
  6685  0FDF  1D03               	skipz
  6686  0FE0  2FE5               	goto	l8547
  6687                           
  6688                           ;RF_Control_B1.c: 341: setRFSW_Control(2);
  6689  0FE1  3002               	movlw	2
  6690  0FE2  3187  276A         	fcall	_setRFSW_Control
  6691                           
  6692                           ;RF_Control_B1.c: 342: }
  6693  0FE4  0008               	return
  6694  0FE5                     l8547:	
  6695                           
  6696                           ;RF_Control_B1.c: 344: else if (RF_Data[15] == 0x21) {
  6697  0FE5  0022               	movlb	2	; select bank2
  6698  0FE6  082F               	movf	(_RF_Data^(0+256)+15),w
  6699  0FE7  3A21               	xorlw	33
  6700  0FE8  1D03               	skipz
  6701  0FE9  2FEE               	goto	l8551
  6702                           
  6703                           ;RF_Control_B1.c: 345: setRFSW_AdjControl(2);
  6704  0FEA  3002               	movlw	2
  6705  0FEB  3194  24F6         	fcall	_setRFSW_AdjControl
  6706                           
  6707                           ;RF_Control_B1.c: 346: }
  6708  0FED  0008               	return
  6709  0FEE                     l8551:	
  6710                           
  6711                           ;RF_Control_B1.c: 351: else if (RF_Data[15] == 0x03) {
  6712  0FEE  0022               	movlb	2	; select bank2
  6713  0FEF  082F               	movf	(_RF_Data^(0+256)+15),w
  6714  0FF0  3A03               	xorlw	3
  6715  0FF1  1D03               	skipz
  6716  0FF2  2FF7               	goto	l8555
  6717                           
  6718                           ;RF_Control_B1.c: 352: setRFSW_Control(3);
  6719  0FF3  3003               	movlw	3
  6720  0FF4  3187  276A         	fcall	_setRFSW_Control
  6721                           
  6722                           ;RF_Control_B1.c: 353: }
  6723  0FF6  0008               	return
  6724  0FF7                     l8555:	
  6725                           
  6726                           ;RF_Control_B1.c: 355: else if (RF_Data[15] == 0x31) {
  6727  0FF7  0022               	movlb	2	; select bank2
  6728  0FF8  082F               	movf	(_RF_Data^(0+256)+15),w
  6729  0FF9  3A31               	xorlw	49
  6730  0FFA  1D03               	skipz
  6731  0FFB  0008               	return
  6732                           
  6733                           ;RF_Control_B1.c: 356: setRFSW_AdjControl(3);
  6734  0FFC  3003               	movlw	3
  6735  0FFD  3194  24F6         	fcall	_setRFSW_AdjControl
  6736  0FFF  0008               	return
  6737  1000                     __end_of_setControl_Lights_Table:	
  6738                           
  6739                           	psect	text23
  6740  076A                     __ptext23:	
  6741 ;; *************** function _setRFSW_Control *****************
  6742 ;; Defined at:
  6743 ;;		line 386 in file "../src/RF_Control_B1.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;  sw              1    wreg     unsigned char 
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;  sw              1   67[BANK0 ] unsigned char 
  6748 ;; Return value:  Size  Location     Type
  6749 ;;		None               void
  6750 ;; Registers used:
  6751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6752 ;; Tracked objects:
  6753 ;;		On entry : 0/0
  6754 ;;		On exit  : 0/0
  6755 ;;		Unchanged: 0/0
  6756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6758 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6760 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;Total ram usage:        2 bytes
  6762 ;; Hardware stack levels used:    1
  6763 ;; Hardware stack levels required when called:    9
  6764 ;; This function calls:
  6765 ;;		_RfSWPointSelect
  6766 ;;		_setBuz
  6767 ;;		_setDelayOff_GO
  6768 ;;		_setDimmerLights_Switch
  6769 ;;		_setDimmerLights_Trigger
  6770 ;;		_setRF_DimmerLights
  6771 ;;		_setSw_Status
  6772 ;;		_setTxData
  6773 ;; This function is called by:
  6774 ;;		_setControl_Lights_Table
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           
  6779                           ;psect for function _setRFSW_Control
  6780  076A                     _setRFSW_Control:	
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6784                           ;setRFSW_Control@sw stored from wreg
  6785  076A  0020               	movlb	0	; select bank0
  6786  076B  00E3               	movwf	setRFSW_Control@sw
  6787                           
  6788                           ;RF_Control_B1.c: 387: RfSWPointSelect(sw);
  6789  076C  0863               	movf	setRFSW_Control@sw,w
  6790  076D  3192  2228  3187   	fcall	_RfSWPointSelect
  6791                           
  6792                           ;RF_Control_B1.c: 388: if (RFSW->Status == 0) {
  6793  0770  0021               	movlb	1	; select bank1
  6794  0771  0853               	movf	_RFSW^(0+128),w
  6795  0772  0086               	movwf	6
  6796  0773  0187               	clrf	7
  6797  0774  1801               	btfsc	1,0
  6798  0775  2FAC               	goto	l8419
  6799                           
  6800                           ;RF_Control_B1.c: 389: if (RF_Data[16] == 0x80) {
  6801  0776  0022               	movlb	2	; select bank2
  6802  0777  0830               	movf	(_RF_Data^(0+256)+16),w
  6803  0778  3A80               	xorlw	128
  6804  0779  1D03               	skipz
  6805  077A  2F88               	goto	l8409
  6806                           
  6807                           ;RF_Control_B1.c: 390: setDelayOff_GO(sw, 1, RF_Data[17]);
  6808  077B  0020               	movlb	0	; select bank0
  6809  077C  01AA               	clrf	setDelayOff_GO@command
  6810  077D  0AAA               	incf	setDelayOff_GO@command,f
  6811  077E  0022               	movlb	2	; select bank2
  6812  077F  0831               	movf	(_RF_Data^(0+256)+17),w
  6813  0780  0020               	movlb	0	; select bank0
  6814  0781  00E2               	movwf	??_setRFSW_Control
  6815  0782  0862               	movf	??_setRFSW_Control,w
  6816  0783  00AB               	movwf	setDelayOff_GO@value
  6817  0784  0863               	movf	setRFSW_Control@sw,w
  6818  0785  3188  2071  3187   	fcall	_setDelayOff_GO
  6819  0788                     l8409:	
  6820                           
  6821                           ;RF_Control_B1.c: 391: }
  6822                           ;RF_Control_B1.c: 392: RFSW->Status = 1;
  6823  0788  0021               	movlb	1	; select bank1
  6824  0789  0853               	movf	_RFSW^(0+128),w
  6825  078A  0086               	movwf	6
  6826  078B  0187               	clrf	7
  6827  078C  1401               	bsf	1,0
  6828                           
  6829                           ;RF_Control_B1.c: 393: setSw_Status(sw, 1);
  6830  078D  0020               	movlb	0	; select bank0
  6831  078E  01A2               	clrf	setSw_Status@command
  6832  078F  0AA2               	incf	setSw_Status@command,f
  6833  0790  0863               	movf	setRFSW_Control@sw,w
  6834  0791  319F  271F  3187   	fcall	_setSw_Status
  6835                           
  6836                           ;RF_Control_B1.c: 395: setDimmerLights_Trigger(sw, 1);
  6837  0794  0020               	movlb	0	; select bank0
  6838  0795  01A2               	clrf	setDimmerLights_Trigger@command
  6839  0796  0AA2               	incf	setDimmerLights_Trigger@command,f
  6840  0797  0863               	movf	setRFSW_Control@sw,w
  6841  0798  319F  276B  3187   	fcall	_setDimmerLights_Trigger
  6842                           
  6843                           ;RF_Control_B1.c: 396: setDimmerLights_Switch(sw, 1);
  6844  079B  0020               	movlb	0	; select bank0
  6845  079C  01A2               	clrf	setDimmerLights_Switch@command
  6846  079D  0AA2               	incf	setDimmerLights_Switch@command,f
  6847  079E  0863               	movf	setRFSW_Control@sw,w
  6848  079F  319F  275B  3187   	fcall	_setDimmerLights_Switch
  6849                           
  6850                           ;RF_Control_B1.c: 398: setRF_DimmerLights(sw, RFSW->Status);
  6851  07A2  0021               	movlb	1	; select bank1
  6852  07A3  0853               	movf	_RFSW^(0+128),w
  6853  07A4  0086               	movwf	6
  6854  07A5  0187               	clrf	7
  6855  07A6  3000               	movlw	0
  6856  07A7  1801               	btfsc	1,0
  6857  07A8  3001               	movlw	1
  6858  07A9  0020               	movlb	0	; select bank0
  6859  07AA  00DD               	movwf	setRF_DimmerLights@on
  6860  07AB  2FEA               	goto	L5
  6861  07AC                     l8419:	
  6862                           ;RF_Control_B1.c: 399: } else {
  6863                           
  6864                           
  6865                           ;RF_Control_B1.c: 400: if (RF_Data[16] == 0x80) {
  6866  07AC  0022               	movlb	2	; select bank2
  6867  07AD  0830               	movf	(_RF_Data^(0+256)+16),w
  6868  07AE  3A80               	xorlw	128
  6869  07AF  1D03               	skipz
  6870  07B0  2FC2               	goto	l8423
  6871                           
  6872                           ;RF_Control_B1.c: 401: setDelayOff_GO(sw, 1, RF_Data[17]);
  6873  07B1  0020               	movlb	0	; select bank0
  6874  07B2  01AA               	clrf	setDelayOff_GO@command
  6875  07B3  0AAA               	incf	setDelayOff_GO@command,f
  6876  07B4  0022               	movlb	2	; select bank2
  6877  07B5  0831               	movf	(_RF_Data^(0+256)+17),w
  6878  07B6  0020               	movlb	0	; select bank0
  6879  07B7  00E2               	movwf	??_setRFSW_Control
  6880  07B8  0862               	movf	??_setRFSW_Control,w
  6881  07B9  00AB               	movwf	setDelayOff_GO@value
  6882  07BA  0863               	movf	setRFSW_Control@sw,w
  6883  07BB  3188  2071  3187   	fcall	_setDelayOff_GO
  6884                           
  6885                           ;RF_Control_B1.c: 402: setRF_DimmerLights(sw, 1);
  6886  07BE  0020               	movlb	0	; select bank0
  6887  07BF  01DD               	clrf	setRF_DimmerLights@on
  6888  07C0  0ADD               	incf	setRF_DimmerLights@on,f
  6889  07C1  2FEA               	goto	L5
  6890  07C2                     l8423:	
  6891                           ;RF_Control_B1.c: 403: } else {
  6892                           
  6893                           
  6894                           ;RF_Control_B1.c: 404: RFSW->Status = 0;
  6895  07C2  0021               	movlb	1	; select bank1
  6896  07C3  0853               	movf	_RFSW^(0+128),w
  6897  07C4  0086               	movwf	6
  6898  07C5  0187               	clrf	7
  6899  07C6  1001               	bcf	1,0
  6900                           
  6901                           ;RF_Control_B1.c: 405: setSw_Status(sw, 0);
  6902  07C7  0020               	movlb	0	; select bank0
  6903  07C8  01A2               	clrf	setSw_Status@command
  6904  07C9  0863               	movf	setRFSW_Control@sw,w
  6905  07CA  319F  271F  3187   	fcall	_setSw_Status
  6906                           
  6907                           ;RF_Control_B1.c: 407: setDimmerLights_Trigger(sw, 1);
  6908  07CD  0020               	movlb	0	; select bank0
  6909  07CE  01A2               	clrf	setDimmerLights_Trigger@command
  6910  07CF  0AA2               	incf	setDimmerLights_Trigger@command,f
  6911  07D0  0863               	movf	setRFSW_Control@sw,w
  6912  07D1  319F  276B  3187   	fcall	_setDimmerLights_Trigger
  6913                           
  6914                           ;RF_Control_B1.c: 408: setDimmerLights_Switch(sw, RFSW->Status);
  6915  07D4  0021               	movlb	1	; select bank1
  6916  07D5  0853               	movf	_RFSW^(0+128),w
  6917  07D6  0086               	movwf	6
  6918  07D7  0187               	clrf	7
  6919  07D8  3000               	movlw	0
  6920  07D9  1801               	btfsc	1,0
  6921  07DA  3001               	movlw	1
  6922  07DB  0020               	movlb	0	; select bank0
  6923  07DC  00A2               	movwf	setDimmerLights_Switch@command
  6924  07DD  0863               	movf	setRFSW_Control@sw,w
  6925  07DE  319F  275B  3187   	fcall	_setDimmerLights_Switch
  6926                           
  6927                           ;RF_Control_B1.c: 410: setDelayOff_GO(sw, 0, 0);
  6928  07E1  0020               	movlb	0	; select bank0
  6929  07E2  01AA               	clrf	setDelayOff_GO@command
  6930  07E3  01AB               	clrf	setDelayOff_GO@value
  6931  07E4  0863               	movf	setRFSW_Control@sw,w
  6932  07E5  3188  2071  3187   	fcall	_setDelayOff_GO
  6933                           
  6934                           ;RF_Control_B1.c: 411: setRF_DimmerLights(sw, 0);
  6935  07E8  0020               	movlb	0	; select bank0
  6936  07E9  01DD               	clrf	setRF_DimmerLights@on
  6937  07EA                     L5:	
  6938  07EA  0863               	movf	setRFSW_Control@sw,w
  6939  07EB  318A  22CE  3187   	fcall	_setRF_DimmerLights
  6940                           
  6941                           ;RF_Control_B1.c: 412: }
  6942                           ;RF_Control_B1.c: 413: }
  6943                           ;RF_Control_B1.c: 414: setBuz(1, 100);
  6944  07EE  3064               	movlw	100
  6945  07EF  0020               	movlb	0	; select bank0
  6946  07F0  00A9               	movwf	setBuz@time
  6947  07F1  3000               	movlw	0
  6948  07F2  00AA               	movwf	setBuz@time+1
  6949  07F3  3001               	movlw	1
  6950  07F4  3197  27A7  3187   	fcall	_setBuz
  6951                           
  6952                           ;RF_Control_B1.c: 415: setTxData();
  6953  07F7  3185  25F9         	fcall	_setTxData
  6954  07F9  0008               	return
  6955  07FA                     __end_of_setRFSW_Control:	
  6956                           
  6957                           	psect	text24
  6958  0871                     __ptext24:	
  6959 ;; *************** function _setDelayOff_GO *****************
  6960 ;; Defined at:
  6961 ;;		line 86 in file "../src/DelayOff_B1.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  sw              1    wreg     unsigned char 
  6964 ;;  command         1   10[BANK0 ] unsigned char 
  6965 ;;  value           1   11[BANK0 ] unsigned char 
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;  sw              1   14[BANK0 ] unsigned char 
  6968 ;; Return value:  Size  Location     Type
  6969 ;;		None               void
  6970 ;; Registers used:
  6971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;Total ram usage:        5 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    7
  6984 ;; This function calls:
  6985 ;;		_DelayOffPointSelect
  6986 ;;		_DelayTimejudge
  6987 ;; This function is called by:
  6988 ;;		_setRFSW_Control
  6989 ;;		_Sw_DimmerOffFunc
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function _setDelayOff_GO
  6995  0871                     _setDelayOff_GO:	
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6999                           ;setDelayOff_GO@sw stored from wreg
  7000  0871  0020               	movlb	0	; select bank0
  7001  0872  00AE               	movwf	setDelayOff_GO@sw
  7002                           
  7003                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7004  0873  082E               	movf	setDelayOff_GO@sw,w
  7005  0874  3191  21B0  3188   	fcall	_DelayOffPointSelect
  7006                           
  7007                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7008  0877  0872               	movf	_DelayOff,w
  7009  0878  0086               	movwf	6
  7010  0879  0187               	clrf	7
  7011  087A  1C01               	btfss	1,0
  7012  087B  0008               	return
  7013                           
  7014                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7015  087C  0020               	movlb	0	; select bank0
  7016  087D  082A               	movf	setDelayOff_GO@command,w
  7017  087E  3A01               	xorlw	1
  7018  087F  3000               	movlw	0
  7019  0880  1903               	skipnz
  7020  0881  3001               	movlw	1
  7021  0882  00AC               	movwf	??_setDelayOff_GO
  7022  0883  0872               	movf	_DelayOff,w
  7023  0884  0086               	movwf	6
  7024  0885  0187               	clrf	7
  7025  0886  0DAC               	rlf	??_setDelayOff_GO,f
  7026  0887  0801               	movf	1,w
  7027  0888  062C               	xorwf	??_setDelayOff_GO,w
  7028  0889  39FD               	andlw	-3
  7029  088A  062C               	xorwf	??_setDelayOff_GO,w
  7030  088B  0081               	movwf	1
  7031                           
  7032                           ;DelayOff_B1.c: 90: if (command == 1) {
  7033  088C  082A               	movf	setDelayOff_GO@command,w
  7034  088D  3A01               	xorlw	1
  7035  088E  1D03               	skipz
  7036  088F  28B9               	goto	l8229
  7037                           
  7038                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7039  0890  082B               	movf	setDelayOff_GO@value,w
  7040  0891  3193  23B0  3188   	fcall	_DelayTimejudge
  7041  0894  0020               	movlb	0	; select bank0
  7042  0895  00AC               	movwf	??_setDelayOff_GO
  7043  0896  0872               	movf	_DelayOff,w
  7044  0897  0086               	movwf	6
  7045  0898  0187               	clrf	7
  7046  0899  082C               	movf	??_setDelayOff_GO,w
  7047  089A  0081               	movwf	1
  7048                           
  7049                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7050  089B  300F               	movlw	15
  7051  089C  052B               	andwf	setDelayOff_GO@value,w
  7052  089D  00AC               	movwf	??_setDelayOff_GO
  7053  089E  082C               	movf	??_setDelayOff_GO,w
  7054  089F  3A05               	xorlw	5
  7055  08A0  1903               	skipnz
  7056  08A1  28A6               	goto	l8223
  7057  08A2  082B               	movf	setDelayOff_GO@value,w
  7058  08A3  390F               	andlw	15
  7059  08A4  1D03               	btfss	3,2
  7060  08A5  28AC               	goto	l8227
  7061  08A6                     l8223:	
  7062  08A6  3026               	movlw	38
  7063  08A7  022B               	subwf	setDelayOff_GO@value,w
  7064  08A8  1803               	skipnc
  7065  08A9  28AC               	goto	l8227
  7066                           
  7067                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7068  08AA  082B               	movf	setDelayOff_GO@value,w
  7069  08AB  28AD               	goto	L6
  7070  08AC                     l8227:	
  7071                           ;DelayOff_B1.c: 94: } else {
  7072                           
  7073                           
  7074                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7075  08AC  3005               	movlw	5
  7076  08AD                     L6:	
  7077  08AD  00AC               	movwf	??_setDelayOff_GO
  7078  08AE  082E               	movf	setDelayOff_GO@sw,w
  7079  08AF  3E1A               	addlw	26
  7080  08B0  076D               	addwf	_product,w
  7081  08B1  00AD               	movwf	??_setDelayOff_GO+1
  7082  08B2  082D               	movf	??_setDelayOff_GO+1,w
  7083  08B3  0086               	movwf	6
  7084  08B4  3002               	movlw	2	; select bank4/5
  7085  08B5  0087               	movwf	7
  7086  08B6  082C               	movf	??_setDelayOff_GO,w
  7087  08B7  0081               	movwf	1
  7088                           
  7089                           ;DelayOff_B1.c: 96: }
  7090                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7091  08B8  28C5               	goto	l8233
  7092  08B9                     l8229:	
  7093  08B9  08AA               	movf	setDelayOff_GO@command,f
  7094  08BA  1D03               	skipz
  7095  08BB  28C5               	goto	l8233
  7096                           
  7097                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7098  08BC  082E               	movf	setDelayOff_GO@sw,w
  7099  08BD  3E1A               	addlw	26
  7100  08BE  076D               	addwf	_product,w
  7101  08BF  00AC               	movwf	??_setDelayOff_GO
  7102  08C0  082C               	movf	??_setDelayOff_GO,w
  7103  08C1  0086               	movwf	6
  7104  08C2  3002               	movlw	2	; select bank4/5
  7105  08C3  0087               	movwf	7
  7106  08C4  0181               	clrf	1
  7107  08C5                     l8233:	
  7108                           
  7109                           ;DelayOff_B1.c: 99: }
  7110                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7111  08C5  0872               	movf	_DelayOff,w
  7112  08C6  0086               	movwf	6
  7113  08C7  0187               	clrf	7
  7114  08C8  3000               	movlw	0
  7115  08C9  3FC0               	movwi [0]fsr1
  7116  08CA  3FC1               	movwi [1]fsr1
  7117                           
  7118                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7119  08CB  0872               	movf	_DelayOff,w
  7120  08CC  0086               	movwf	6
  7121  08CD  0187               	clrf	7
  7122  08CE  0181               	clrf	1
  7123  08CF  0008               	return
  7124  08D0                     __end_of_setDelayOff_GO:	
  7125                           
  7126                           	psect	text25
  7127  13B0                     __ptext25:	
  7128 ;; *************** function _DelayTimejudge *****************
  7129 ;; Defined at:
  7130 ;;		line 106 in file "../src/DelayOff_B1.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;  value           1    wreg     unsigned char 
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;  value           1    9[BANK0 ] unsigned char 
  7135 ;;  k               1    8[BANK0 ] unsigned char 
  7136 ;;  j               1    7[BANK0 ] unsigned char 
  7137 ;;  i               1    6[BANK0 ] unsigned char 
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  1    wreg      unsigned char 
  7140 ;; Registers used:
  7141 ;;		wreg, status,2, status,0, pclath, cstack
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;Total ram usage:        6 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; Hardware stack levels required when called:    6
  7154 ;; This function calls:
  7155 ;;		___bmul
  7156 ;; This function is called by:
  7157 ;;		_setDelayOff_GO
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           
  7162                           ;psect for function _DelayTimejudge
  7163  13B0                     _DelayTimejudge:	
  7164                           
  7165                           ;incstack = 0
  7166                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7167                           ;DelayTimejudge@value stored from wreg
  7168  13B0  0020               	movlb	0	; select bank0
  7169  13B1  00A9               	movwf	DelayTimejudge@value
  7170                           
  7171                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7172  13B2  3005               	movlw	5
  7173  13B3  00A4               	movwf	??_DelayTimejudge
  7174  13B4  0824               	movf	??_DelayTimejudge,w
  7175  13B5  00A6               	movwf	DelayTimejudge@i
  7176  13B6  01A7               	clrf	DelayTimejudge@j
  7177  13B7  01A8               	clrf	DelayTimejudge@k
  7178                           
  7179                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7180  13B8  3031               	movlw	49
  7181  13B9  0229               	subwf	DelayTimejudge@value,w
  7182  13BA  1803               	skipnc
  7183  13BB  2BD8               	goto	l8017
  7184                           
  7185                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7186  13BC  0829               	movf	DelayTimejudge@value,w
  7187  13BD  390F               	andlw	15
  7188  13BE  00A4               	movwf	??_DelayTimejudge
  7189  13BF  0824               	movf	??_DelayTimejudge,w
  7190  13C0  00A7               	movwf	DelayTimejudge@j
  7191                           
  7192                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7193  13C1  0829               	movf	DelayTimejudge@value,w
  7194  13C2  00A4               	movwf	??_DelayTimejudge
  7195  13C3  3004               	movlw	4
  7196  13C4                     u7935:	
  7197  13C4  36A4               	lsrf	??_DelayTimejudge,f
  7198  13C5  0B89               	decfsz	9,f
  7199  13C6  2BC4               	goto	u7935
  7200  13C7  0824               	movf	??_DelayTimejudge,w
  7201  13C8  390F               	andlw	15
  7202  13C9  00A5               	movwf	??_DelayTimejudge+1
  7203  13CA  0825               	movf	??_DelayTimejudge+1,w
  7204  13CB  00A8               	movwf	DelayTimejudge@k
  7205                           
  7206                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7207  13CC  300A               	movlw	10
  7208  13CD  00A4               	movwf	??_DelayTimejudge
  7209  13CE  0824               	movf	??_DelayTimejudge,w
  7210  13CF  00A0               	movwf	___bmul@multiplicand
  7211  13D0  0828               	movf	DelayTimejudge@k,w
  7212  13D1  3190  2073         	fcall	___bmul
  7213  13D3  0020               	movlb	0	; select bank0
  7214  13D4  0727               	addwf	DelayTimejudge@j,w
  7215  13D5  00A5               	movwf	??_DelayTimejudge+1
  7216  13D6  0825               	movf	??_DelayTimejudge+1,w
  7217  13D7  00A6               	movwf	DelayTimejudge@i
  7218  13D8                     l8017:	
  7219                           
  7220                           ;DelayOff_B1.c: 112: }
  7221                           ;DelayOff_B1.c: 133: return i;
  7222  13D8  0826               	movf	DelayTimejudge@i,w
  7223  13D9  0008               	return
  7224  13DA                     __end_of_DelayTimejudge:	
  7225                           
  7226                           	psect	text26
  7227  1073                     __ptext26:	
  7228 ;; *************** function ___bmul *****************
  7229 ;; Defined at:
  7230 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;  multiplier      1    wreg     unsigned char 
  7233 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7236 ;;  product         1    2[BANK0 ] unsigned char 
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      unsigned char 
  7239 ;; Registers used:
  7240 ;;		wreg, status,2, status,0
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7246 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;Total ram usage:        4 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    5
  7253 ;; This function calls:
  7254 ;;		Nothing
  7255 ;; This function is called by:
  7256 ;;		_DelayTimejudge
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           
  7261                           ;psect for function ___bmul
  7262  1073                     ___bmul:	
  7263                           
  7264                           ;incstack = 0
  7265                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7266                           ;___bmul@multiplier stored from wreg
  7267  1073  0020               	movlb	0	; select bank0
  7268  1074  00A3               	movwf	___bmul@multiplier
  7269  1075  01A2               	clrf	___bmul@product
  7270  1076                     l7979:	
  7271  1076  1C23               	btfss	___bmul@multiplier,0
  7272  1077  287C               	goto	l7983
  7273  1078  0820               	movf	___bmul@multiplicand,w
  7274  1079  00A1               	movwf	??___bmul
  7275  107A  0821               	movf	??___bmul,w
  7276  107B  07A2               	addwf	___bmul@product,f
  7277  107C                     l7983:	
  7278  107C  1003               	clrc
  7279  107D  0DA0               	rlf	___bmul@multiplicand,f
  7280  107E  1003               	clrc
  7281  107F  0CA3               	rrf	___bmul@multiplier,f
  7282  1080  08A3               	movf	___bmul@multiplier,f
  7283  1081  1D03               	skipz
  7284  1082  2876               	goto	l7979
  7285  1083  0822               	movf	___bmul@product,w
  7286  1084  0008               	return
  7287  1085                     __end_of___bmul:	
  7288                           
  7289                           	psect	text27
  7290  14F6                     __ptext27:	
  7291 ;; *************** function _setRFSW_AdjControl *****************
  7292 ;; Defined at:
  7293 ;;		line 419 in file "../src/RF_Control_B1.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;  sw              1    wreg     unsigned char 
  7296 ;; Auto vars:     Size  Location     Type
  7297 ;;  sw              1   70[BANK0 ] unsigned char 
  7298 ;; Return value:  Size  Location     Type
  7299 ;;		None               void
  7300 ;; Registers used:
  7301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7302 ;; Tracked objects:
  7303 ;;		On entry : 0/0
  7304 ;;		On exit  : 0/0
  7305 ;;		Unchanged: 0/0
  7306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7309 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;Total ram usage:        3 bytes
  7312 ;; Hardware stack levels used:    1
  7313 ;; Hardware stack levels required when called:   10
  7314 ;; This function calls:
  7315 ;;		_RfSWPointSelect
  7316 ;;		_setRF_DimmerValue
  7317 ;;		_setTxData
  7318 ;; This function is called by:
  7319 ;;		_setControl_Lights_Table
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _setRFSW_AdjControl
  7325  14F6                     _setRFSW_AdjControl:	
  7326                           
  7327                           ;incstack = 0
  7328                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7329                           ;setRFSW_AdjControl@sw stored from wreg
  7330  14F6  0020               	movlb	0	; select bank0
  7331  14F7  00E6               	movwf	setRFSW_AdjControl@sw
  7332                           
  7333                           ;RF_Control_B1.c: 420: RfSWPointSelect(sw);
  7334  14F8  0866               	movf	setRFSW_AdjControl@sw,w
  7335  14F9  3192  2228  3194   	fcall	_RfSWPointSelect
  7336                           
  7337                           ;RF_Control_B1.c: 421: if (RFSW->Status == 1) {
  7338  14FC  0021               	movlb	1	; select bank1
  7339  14FD  0853               	movf	_RFSW^(0+128),w
  7340  14FE  0086               	movwf	6
  7341  14FF  0187               	clrf	7
  7342  1500  1C01               	btfss	1,0
  7343  1501  2D0A               	goto	l8447
  7344                           
  7345                           ;RF_Control_B1.c: 422: Memory.Modify=1;
  7346  1502  0023               	movlb	3	; select bank3
  7347  1503  1444               	bsf	(_Memory^(0+384)+36),0
  7348                           
  7349                           ;RF_Control_B1.c: 423: setRF_DimmerValue(sw);
  7350  1504  0020               	movlb	0	; select bank0
  7351  1505  0866               	movf	setRFSW_AdjControl@sw,w
  7352  1506  3194  24C1  3194   	fcall	_setRF_DimmerValue
  7353                           
  7354                           ;RF_Control_B1.c: 424: } else {
  7355  1509  2D1C               	goto	l2298
  7356  150A                     l8447:	
  7357                           
  7358                           ;RF_Control_B1.c: 425: product->Data[9]=product->Data[20 + sw];
  7359  150A  0020               	movlb	0	; select bank0
  7360  150B  0866               	movf	setRFSW_AdjControl@sw,w
  7361  150C  3E14               	addlw	20
  7362  150D  076D               	addwf	_product,w
  7363  150E  00E4               	movwf	??_setRFSW_AdjControl
  7364  150F  0864               	movf	??_setRFSW_AdjControl,w
  7365  1510  0086               	movwf	6
  7366  1511  3002               	movlw	2	; select bank4/5
  7367  1512  0087               	movwf	7
  7368  1513  0801               	movf	1,w
  7369  1514  00E5               	movwf	??_setRFSW_AdjControl+1
  7370  1515  086D               	movf	_product,w
  7371  1516  3E09               	addlw	9
  7372  1517  0086               	movwf	6
  7373  1518  3002               	movlw	2	; select bank4/5
  7374  1519  0087               	movwf	7
  7375  151A  0865               	movf	??_setRFSW_AdjControl+1,w
  7376  151B  0081               	movwf	1
  7377  151C                     l2298:	
  7378                           
  7379                           ;RF_Control_B1.c: 426: }
  7380                           ;RF_Control_B1.c: 427: product->Data[17]=product->Data[26 + sw];
  7381  151C  0020               	movlb	0	; select bank0
  7382  151D  0866               	movf	setRFSW_AdjControl@sw,w
  7383  151E  3E1A               	addlw	26
  7384  151F  076D               	addwf	_product,w
  7385  1520  00E4               	movwf	??_setRFSW_AdjControl
  7386  1521  0864               	movf	??_setRFSW_AdjControl,w
  7387  1522  0086               	movwf	6
  7388  1523  3002               	movlw	2	; select bank4/5
  7389  1524  0087               	movwf	7
  7390  1525  0801               	movf	1,w
  7391  1526  00E5               	movwf	??_setRFSW_AdjControl+1
  7392  1527  086D               	movf	_product,w
  7393  1528  3E11               	addlw	17
  7394  1529  0086               	movwf	6
  7395  152A  3002               	movlw	2	; select bank4/5
  7396  152B  0087               	movwf	7
  7397  152C  0865               	movf	??_setRFSW_AdjControl+1,w
  7398  152D  0081               	movwf	1
  7399                           
  7400                           ;RF_Control_B1.c: 428: setTxData();
  7401  152E  3185  25F9         	fcall	_setTxData
  7402  1530  0008               	return
  7403  1531                     __end_of_setRFSW_AdjControl:	
  7404                           
  7405                           	psect	text28
  7406  14C1                     __ptext28:	
  7407 ;; *************** function _setRF_DimmerValue *****************
  7408 ;; Defined at:
  7409 ;;		line 439 in file "../src/RF_Control_B1.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;  lights          1    wreg     unsigned char 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;  lights          1   67[BANK0 ] unsigned char 
  7414 ;; Return value:  Size  Location     Type
  7415 ;;		None               void
  7416 ;; Registers used:
  7417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;Total ram usage:        3 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    9
  7430 ;; This function calls:
  7431 ;;		_setDimmerLights_AdjRF
  7432 ;; This function is called by:
  7433 ;;		_setRFSW_AdjControl
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           
  7438                           ;psect for function _setRF_DimmerValue
  7439  14C1                     _setRF_DimmerValue:	
  7440                           
  7441                           ;incstack = 0
  7442                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7443                           ;setRF_DimmerValue@lights stored from wreg
  7444  14C1  0020               	movlb	0	; select bank0
  7445  14C2  00E3               	movwf	setRF_DimmerValue@lights
  7446                           
  7447                           ;RF_Control_B1.c: 440: if (RF_Data[9] > 0x64) {
  7448  14C3  3065               	movlw	101
  7449  14C4  0022               	movlb	2	; select bank2
  7450  14C5  0229               	subwf	(_RF_Data^(0+256)+9),w
  7451  14C6  1C03               	skipc
  7452  14C7  2CCE               	goto	l8317
  7453                           
  7454                           ;RF_Control_B1.c: 441: RF_Data[9] = 0x64;
  7455  14C8  3064               	movlw	100
  7456  14C9  0020               	movlb	0	; select bank0
  7457  14CA  00E1               	movwf	??_setRF_DimmerValue
  7458  14CB  0861               	movf	??_setRF_DimmerValue,w
  7459  14CC  0022               	movlb	2	; select bank2
  7460  14CD  00A9               	movwf	(_RF_Data^(0+256)+9)
  7461  14CE                     l8317:	
  7462                           
  7463                           ;RF_Control_B1.c: 442: }
  7464                           ;RF_Control_B1.c: 443: product->Data[9]=RF_Data[9];
  7465  14CE  0829               	movf	(_RF_Data^(0+256)+9),w
  7466  14CF  0020               	movlb	0	; select bank0
  7467  14D0  00E1               	movwf	??_setRF_DimmerValue
  7468  14D1  086D               	movf	_product,w
  7469  14D2  3E09               	addlw	9
  7470  14D3  0086               	movwf	6
  7471  14D4  3002               	movlw	2	; select bank4/5
  7472  14D5  0087               	movwf	7
  7473  14D6  0861               	movf	??_setRF_DimmerValue,w
  7474  14D7  0081               	movwf	1
  7475                           
  7476                           ;RF_Control_B1.c: 444: product->Data[11]=lights;
  7477  14D8  0863               	movf	setRF_DimmerValue@lights,w
  7478  14D9  00E1               	movwf	??_setRF_DimmerValue
  7479  14DA  086D               	movf	_product,w
  7480  14DB  3E0B               	addlw	11
  7481  14DC  0086               	movwf	6
  7482  14DD  3002               	movlw	2	; select bank4/5
  7483  14DE  0087               	movwf	7
  7484  14DF  0861               	movf	??_setRF_DimmerValue,w
  7485  14E0  0081               	movwf	1
  7486                           
  7487                           ;RF_Control_B1.c: 445: product->Data[(20 + lights)]=product->Data[9];
  7488  14E1  086D               	movf	_product,w
  7489  14E2  3E09               	addlw	9
  7490  14E3  0086               	movwf	6
  7491  14E4  3002               	movlw	2	; select bank4/5
  7492  14E5  0087               	movwf	7
  7493  14E6  0801               	movf	1,w
  7494  14E7  00E1               	movwf	??_setRF_DimmerValue
  7495  14E8  0863               	movf	setRF_DimmerValue@lights,w
  7496  14E9  3E14               	addlw	20
  7497  14EA  076D               	addwf	_product,w
  7498  14EB  00E2               	movwf	??_setRF_DimmerValue+1
  7499  14EC  0862               	movf	??_setRF_DimmerValue+1,w
  7500  14ED  0086               	movwf	6
  7501  14EE  3002               	movlw	2	; select bank4/5
  7502  14EF  0087               	movwf	7
  7503  14F0  0861               	movf	??_setRF_DimmerValue,w
  7504  14F1  0081               	movwf	1
  7505                           
  7506                           ;RF_Control_B1.c: 446: setDimmerLights_AdjRF(lights);
  7507  14F2  0863               	movf	setRF_DimmerValue@lights,w
  7508  14F3  3192  22EE         	fcall	_setDimmerLights_AdjRF
  7509  14F5  0008               	return
  7510  14F6                     __end_of_setRF_DimmerValue:	
  7511                           
  7512                           	psect	text29
  7513  12EE                     __ptext29:	
  7514 ;; *************** function _setDimmerLights_AdjRF *****************
  7515 ;; Defined at:
  7516 ;;		line 688 in file "../src/Dimmer_B1.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  lights          1    wreg     unsigned char 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  lights          1   64[BANK0 ] unsigned char 
  7521 ;; Return value:  Size  Location     Type
  7522 ;;		None               void
  7523 ;; Registers used:
  7524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;Total ram usage:        2 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    8
  7537 ;; This function calls:
  7538 ;;		_DimmerLightsPointSelect
  7539 ;;		_getPercentValue
  7540 ;; This function is called by:
  7541 ;;		_setRF_DimmerValue
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           
  7546                           ;psect for function _setDimmerLights_AdjRF
  7547  12EE                     _setDimmerLights_AdjRF:	
  7548                           
  7549                           ;incstack = 0
  7550                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7551                           ;setDimmerLights_AdjRF@lights stored from wreg
  7552  12EE  0020               	movlb	0	; select bank0
  7553  12EF  00E0               	movwf	setDimmerLights_AdjRF@lights
  7554                           
  7555                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  7556  12F0  0860               	movf	setDimmerLights_AdjRF@lights,w
  7557  12F1  3191  2178  3192   	fcall	_DimmerLightsPointSelect
  7558                           
  7559                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  7560  12F4  0020               	movlb	0	; select bank0
  7561  12F5  086B               	movf	_DimmerLights,w
  7562  12F6  0086               	movwf	6
  7563  12F7  3001               	movlw	1	; select bank2/3
  7564  12F8  0087               	movwf	7
  7565  12F9  1501               	bsf	1,2
  7566                           
  7567                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  7568  12FA  086B               	movf	_DimmerLights,w
  7569  12FB  0086               	movwf	6
  7570  12FC  3001               	movlw	1	; select bank2/3
  7571  12FD  0087               	movwf	7
  7572  12FE  1481               	bsf	1,1
  7573                           
  7574                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7575  12FF  086D               	movf	_product,w
  7576  1300  3E09               	addlw	9
  7577  1301  0086               	movwf	6
  7578  1302  3002               	movlw	2	; select bank4/5
  7579  1303  0087               	movwf	7
  7580  1304  0801               	movf	1,w
  7581  1305  3188  2016         	fcall	_getPercentValue
  7582  1307  0020               	movlb	0	; select bank0
  7583  1308  00DF               	movwf	??_setDimmerLights_AdjRF
  7584  1309  086B               	movf	_DimmerLights,w
  7585  130A  3E05               	addlw	5
  7586  130B  0086               	movwf	6
  7587  130C  3001               	movlw	1	; select bank2/3
  7588  130D  0087               	movwf	7
  7589  130E  085F               	movf	??_setDimmerLights_AdjRF,w
  7590  130F  0081               	movwf	1
  7591  1310  0008               	return
  7592  1311                     __end_of_setDimmerLights_AdjRF:	
  7593                           
  7594                           	psect	text30
  7595  0816                     __ptext30:	
  7596 ;; *************** function _getPercentValue *****************
  7597 ;; Defined at:
  7598 ;;		line 761 in file "../src/Dimmer_B1.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;  value           1    wreg     unsigned char 
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;  value           1   59[BANK0 ] unsigned char 
  7603 ;;  i               3   60[BANK0 ] float 
  7604 ;; Return value:  Size  Location     Type
  7605 ;;                  1    wreg      unsigned char 
  7606 ;; Registers used:
  7607 ;;		wreg, status,2, status,0, pclath, cstack
  7608 ;; Tracked objects:
  7609 ;;		On entry : 0/0
  7610 ;;		On exit  : 0/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;Total ram usage:        6 bytes
  7618 ;; Hardware stack levels used:    1
  7619 ;; Hardware stack levels required when called:    7
  7620 ;; This function calls:
  7621 ;;		___awtoft
  7622 ;;		___ftadd
  7623 ;;		___ftdiv
  7624 ;;		___ftmul
  7625 ;;		___fttol
  7626 ;; This function is called by:
  7627 ;;		_setDimmerLights_AdjRF
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631                           
  7632                           ;psect for function _getPercentValue
  7633  0816                     _getPercentValue:	
  7634                           
  7635                           ;incstack = 0
  7636                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7637                           ;getPercentValue@value stored from wreg
  7638  0816  0020               	movlb	0	; select bank0
  7639  0817  00DB               	movwf	getPercentValue@value
  7640                           
  7641                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
  7642  0818  3000               	movlw	0
  7643  0819  00DC               	movwf	getPercentValue@i
  7644  081A  3050               	movlw	80
  7645  081B  00DD               	movwf	getPercentValue@i+1
  7646  081C  3042               	movlw	66
  7647  081D  00DE               	movwf	getPercentValue@i+2
  7648                           
  7649                           ;Dimmer_B1.c: 764: i /= 100;
  7650  081E  3000               	movlw	0
  7651  081F  00AE               	movwf	___ftdiv@f2
  7652  0820  30C8               	movlw	200
  7653  0821  00AF               	movwf	___ftdiv@f2+1
  7654  0822  3042               	movlw	66
  7655  0823  00B0               	movwf	___ftdiv@f2+2
  7656  0824  085C               	movf	getPercentValue@i,w
  7657  0825  00B1               	movwf	___ftdiv@f1
  7658  0826  085D               	movf	getPercentValue@i+1,w
  7659  0827  00B2               	movwf	___ftdiv@f1+1
  7660  0828  085E               	movf	getPercentValue@i+2,w
  7661  0829  00B3               	movwf	___ftdiv@f1+2
  7662  082A  318E  26A8  3188   	fcall	___ftdiv
  7663  082D  0020               	movlb	0	; select bank0
  7664  082E  082E               	movf	?___ftdiv,w
  7665  082F  00DC               	movwf	getPercentValue@i
  7666  0830  082F               	movf	?___ftdiv+1,w
  7667  0831  00DD               	movwf	getPercentValue@i+1
  7668  0832  0830               	movf	?___ftdiv+2,w
  7669  0833  00DE               	movwf	getPercentValue@i+2
  7670                           
  7671                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-90)*0.8)));
  7672  0834  085B               	movf	getPercentValue@value,w
  7673  0835  00D9               	movwf	??_getPercentValue
  7674  0836  01DA               	clrf	??_getPercentValue+1
  7675  0837  09D9               	comf	??_getPercentValue,f
  7676  0838  09DA               	comf	??_getPercentValue+1,f
  7677  0839  0AD9               	incf	??_getPercentValue,f
  7678  083A  1903               	skipnz
  7679  083B  0ADA               	incf	??_getPercentValue+1,f
  7680  083C  0859               	movf	??_getPercentValue,w
  7681  083D  3E64               	addlw	100
  7682  083E  00A8               	movwf	___awtoft@c
  7683  083F  3000               	movlw	0
  7684  0840  3D5A               	addwfc	??_getPercentValue+1,w
  7685  0841  00A9               	movwf	___awtoft@c+1
  7686  0842  3192  22AA  3188   	fcall	___awtoft
  7687  0845  0020               	movlb	0	; select bank0
  7688  0846  0828               	movf	?___awtoft,w
  7689  0847  00B1               	movwf	___ftmul@f2
  7690  0848  0829               	movf	?___awtoft+1,w
  7691  0849  00B2               	movwf	___ftmul@f2+1
  7692  084A  082A               	movf	?___awtoft+2,w
  7693  084B  00B3               	movwf	___ftmul@f2+2
  7694  084C  085C               	movf	getPercentValue@i,w
  7695  084D  00AE               	movwf	___ftmul@f1
  7696  084E  085D               	movf	getPercentValue@i+1,w
  7697  084F  00AF               	movwf	___ftmul@f1+1
  7698  0850  085E               	movf	getPercentValue@i+2,w
  7699  0851  00B0               	movwf	___ftmul@f1+2
  7700  0852  3186  26B6  3188   	fcall	___ftmul
  7701  0855  0020               	movlb	0	; select bank0
  7702  0856  082E               	movf	?___ftmul,w
  7703  0857  00C1               	movwf	___ftadd@f2
  7704  0858  082F               	movf	?___ftmul+1,w
  7705  0859  00C2               	movwf	___ftadd@f2+1
  7706  085A  0830               	movf	?___ftmul+2,w
  7707  085B  00C3               	movwf	___ftadd@f2+2
  7708  085C  3000               	movlw	0
  7709  085D  00BE               	movwf	___ftadd@f1
  7710  085E  3000               	movlw	0
  7711  085F  00BF               	movwf	___ftadd@f1+1
  7712  0860  3041               	movlw	65
  7713  0861  00C0               	movwf	___ftadd@f1+2
  7714  0862  3183  2360  3188   	fcall	___ftadd
  7715  0865  0020               	movlb	0	; select bank0
  7716  0866  083E               	movf	?___ftadd,w
  7717  0867  00CB               	movwf	___fttol@f1
  7718  0868  083F               	movf	?___ftadd+1,w
  7719  0869  00CC               	movwf	___fttol@f1+1
  7720  086A  0840               	movf	?___ftadd+2,w
  7721  086B  00CD               	movwf	___fttol@f1+2
  7722  086C  318D  2509         	fcall	___fttol
  7723  086E  0020               	movlb	0	; select bank0
  7724  086F  084B               	movf	?___fttol,w
  7725  0870  0008               	return
  7726  0871                     __end_of_getPercentValue:	
  7727                           
  7728                           	psect	text31
  7729  06B6                     __ptext31:	
  7730 ;; *************** function ___ftmul *****************
  7731 ;; Defined at:
  7732 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  f1              3   14[BANK0 ] float 
  7735 ;;  f2              3   17[BANK0 ] float 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7738 ;;  sign            1   29[BANK0 ] unsigned char 
  7739 ;;  cntr            1   28[BANK0 ] unsigned char 
  7740 ;;  exp             1   24[BANK0 ] unsigned char 
  7741 ;; Return value:  Size  Location     Type
  7742 ;;                  3   14[BANK0 ] float 
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, pclath, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7750 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;Total ram usage:       16 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    6
  7757 ;; This function calls:
  7758 ;;		___ftpack
  7759 ;; This function is called by:
  7760 ;;		_getPercentValue
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function ___ftmul
  7766  06B6                     ___ftmul:	
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7770  06B6  0020               	movlb	0	; select bank0
  7771  06B7  082E               	movf	___ftmul@f1,w
  7772  06B8  00B4               	movwf	??___ftmul
  7773  06B9  082F               	movf	___ftmul@f1+1,w
  7774  06BA  00B5               	movwf	??___ftmul+1
  7775  06BB  0830               	movf	___ftmul@f1+2,w
  7776  06BC  00B6               	movwf	??___ftmul+2
  7777  06BD  1003               	clrc
  7778  06BE  0D35               	rlf	??___ftmul+1,w
  7779  06BF  0D36               	rlf	??___ftmul+2,w
  7780  06C0  00B7               	movwf	??___ftmul+3
  7781  06C1  0837               	movf	??___ftmul+3,w
  7782  06C2  00B8               	movwf	___ftmul@exp
  7783  06C3  08B8               	movf	___ftmul@exp,f
  7784  06C4  1D03               	skipz
  7785  06C5  2ECD               	goto	l5757
  7786  06C6  3000               	movlw	0
  7787  06C7  00AE               	movwf	?___ftmul
  7788  06C8  3000               	movlw	0
  7789  06C9  00AF               	movwf	?___ftmul+1
  7790  06CA  3000               	movlw	0
  7791  06CB  00B0               	movwf	?___ftmul+2
  7792  06CC  0008               	return
  7793  06CD                     l5757:	
  7794  06CD  0831               	movf	___ftmul@f2,w
  7795  06CE  00B4               	movwf	??___ftmul
  7796  06CF  0832               	movf	___ftmul@f2+1,w
  7797  06D0  00B5               	movwf	??___ftmul+1
  7798  06D1  0833               	movf	___ftmul@f2+2,w
  7799  06D2  00B6               	movwf	??___ftmul+2
  7800  06D3  1003               	clrc
  7801  06D4  0D35               	rlf	??___ftmul+1,w
  7802  06D5  0D36               	rlf	??___ftmul+2,w
  7803  06D6  00B7               	movwf	??___ftmul+3
  7804  06D7  0837               	movf	??___ftmul+3,w
  7805  06D8  00BD               	movwf	___ftmul@sign
  7806  06D9  08BD               	movf	___ftmul@sign,f
  7807  06DA  1D03               	skipz
  7808  06DB  2EE3               	goto	l5763
  7809  06DC  3000               	movlw	0
  7810  06DD  00AE               	movwf	?___ftmul
  7811  06DE  3000               	movlw	0
  7812  06DF  00AF               	movwf	?___ftmul+1
  7813  06E0  3000               	movlw	0
  7814  06E1  00B0               	movwf	?___ftmul+2
  7815  06E2  0008               	return
  7816  06E3                     l5763:	
  7817  06E3  083D               	movf	___ftmul@sign,w
  7818  06E4  3E7B               	addlw	123
  7819  06E5  00B4               	movwf	??___ftmul
  7820  06E6  0834               	movf	??___ftmul,w
  7821  06E7  07B8               	addwf	___ftmul@exp,f
  7822  06E8  082E               	movf	___ftmul@f1,w
  7823  06E9  00B4               	movwf	??___ftmul
  7824  06EA  082F               	movf	___ftmul@f1+1,w
  7825  06EB  00B5               	movwf	??___ftmul+1
  7826  06EC  0830               	movf	___ftmul@f1+2,w
  7827  06ED  00B6               	movwf	??___ftmul+2
  7828  06EE  3010               	movlw	16
  7829  06EF                     u4375:	
  7830  06EF  36B6               	lsrf	??___ftmul+2,f
  7831  06F0  0CB5               	rrf	??___ftmul+1,f
  7832  06F1  0CB4               	rrf	??___ftmul,f
  7833  06F2  0B89               	decfsz	9,f
  7834  06F3  2EEF               	goto	u4375
  7835  06F4  0834               	movf	??___ftmul,w
  7836  06F5  00B7               	movwf	??___ftmul+3
  7837  06F6  0837               	movf	??___ftmul+3,w
  7838  06F7  00BD               	movwf	___ftmul@sign
  7839  06F8  0831               	movf	___ftmul@f2,w
  7840  06F9  00B4               	movwf	??___ftmul
  7841  06FA  0832               	movf	___ftmul@f2+1,w
  7842  06FB  00B5               	movwf	??___ftmul+1
  7843  06FC  0833               	movf	___ftmul@f2+2,w
  7844  06FD  00B6               	movwf	??___ftmul+2
  7845  06FE  3010               	movlw	16
  7846  06FF                     u4385:	
  7847  06FF  36B6               	lsrf	??___ftmul+2,f
  7848  0700  0CB5               	rrf	??___ftmul+1,f
  7849  0701  0CB4               	rrf	??___ftmul,f
  7850  0702  0B89               	decfsz	9,f
  7851  0703  2EFF               	goto	u4385
  7852  0704  0834               	movf	??___ftmul,w
  7853  0705  00B7               	movwf	??___ftmul+3
  7854  0706  0837               	movf	??___ftmul+3,w
  7855  0707  06BD               	xorwf	___ftmul@sign,f
  7856  0708  3080               	movlw	128
  7857  0709  00B4               	movwf	??___ftmul
  7858  070A  0834               	movf	??___ftmul,w
  7859  070B  05BD               	andwf	___ftmul@sign,f
  7860  070C  17AF               	bsf	___ftmul@f1+1,7
  7861  070D  17B2               	bsf	___ftmul@f2+1,7
  7862  070E  30FF               	movlw	255
  7863  070F  05B1               	andwf	___ftmul@f2,f
  7864  0710  30FF               	movlw	255
  7865  0711  05B2               	andwf	___ftmul@f2+1,f
  7866  0712  3000               	movlw	0
  7867  0713  05B3               	andwf	___ftmul@f2+2,f
  7868  0714  3000               	movlw	0
  7869  0715  00B9               	movwf	___ftmul@f3_as_product
  7870  0716  3000               	movlw	0
  7871  0717  00BA               	movwf	___ftmul@f3_as_product+1
  7872  0718  3000               	movlw	0
  7873  0719  00BB               	movwf	___ftmul@f3_as_product+2
  7874  071A  3007               	movlw	7
  7875  071B  00B4               	movwf	??___ftmul
  7876  071C  0834               	movf	??___ftmul,w
  7877  071D  00BC               	movwf	___ftmul@cntr
  7878  071E                     l5775:	
  7879  071E  1C2E               	btfss	___ftmul@f1,0
  7880  071F  2F26               	goto	l5779
  7881  0720  0831               	movf	___ftmul@f2,w
  7882  0721  07B9               	addwf	___ftmul@f3_as_product,f
  7883  0722  0832               	movf	___ftmul@f2+1,w
  7884  0723  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7885  0724  0833               	movf	___ftmul@f2+2,w
  7886  0725  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7887  0726                     l5779:	
  7888  0726  3001               	movlw	1
  7889  0727                     u4405:	
  7890  0727  36B0               	lsrf	___ftmul@f1+2,f
  7891  0728  0CAF               	rrf	___ftmul@f1+1,f
  7892  0729  0CAE               	rrf	___ftmul@f1,f
  7893  072A  0B89               	decfsz	9,f
  7894  072B  2F27               	goto	u4405
  7895  072C  3001               	movlw	1
  7896  072D                     u4415:	
  7897  072D  35B1               	lslf	___ftmul@f2,f
  7898  072E  0DB2               	rlf	___ftmul@f2+1,f
  7899  072F  0DB3               	rlf	___ftmul@f2+2,f
  7900  0730  0B89               	decfsz	9,f
  7901  0731  2F2D               	goto	u4415
  7902  0732  3001               	movlw	1
  7903  0733  02BC               	subwf	___ftmul@cntr,f
  7904  0734  1D03               	btfss	3,2
  7905  0735  2F1E               	goto	l5775
  7906  0736  3009               	movlw	9
  7907  0737  00B4               	movwf	??___ftmul
  7908  0738  0834               	movf	??___ftmul,w
  7909  0739  00BC               	movwf	___ftmul@cntr
  7910  073A                     l5787:	
  7911  073A  1C2E               	btfss	___ftmul@f1,0
  7912  073B  2F42               	goto	l5791
  7913  073C  0831               	movf	___ftmul@f2,w
  7914  073D  07B9               	addwf	___ftmul@f3_as_product,f
  7915  073E  0832               	movf	___ftmul@f2+1,w
  7916  073F  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7917  0740  0833               	movf	___ftmul@f2+2,w
  7918  0741  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7919  0742                     l5791:	
  7920  0742  3001               	movlw	1
  7921  0743                     u4445:	
  7922  0743  36B0               	lsrf	___ftmul@f1+2,f
  7923  0744  0CAF               	rrf	___ftmul@f1+1,f
  7924  0745  0CAE               	rrf	___ftmul@f1,f
  7925  0746  0B89               	decfsz	9,f
  7926  0747  2F43               	goto	u4445
  7927  0748  3001               	movlw	1
  7928  0749                     u4455:	
  7929  0749  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7930  074A  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7931  074B  0CB9               	rrf	___ftmul@f3_as_product,f
  7932  074C  0B89               	decfsz	9,f
  7933  074D  2F49               	goto	u4455
  7934  074E  3001               	movlw	1
  7935  074F  02BC               	subwf	___ftmul@cntr,f
  7936  0750  1D03               	btfss	3,2
  7937  0751  2F3A               	goto	l5787
  7938  0752  0839               	movf	___ftmul@f3_as_product,w
  7939  0753  00A0               	movwf	___ftpack@arg
  7940  0754  083A               	movf	___ftmul@f3_as_product+1,w
  7941  0755  00A1               	movwf	___ftpack@arg+1
  7942  0756  083B               	movf	___ftmul@f3_as_product+2,w
  7943  0757  00A2               	movwf	___ftpack@arg+2
  7944  0758  0838               	movf	___ftmul@exp,w
  7945  0759  00B4               	movwf	??___ftmul
  7946  075A  0834               	movf	??___ftmul,w
  7947  075B  00A3               	movwf	___ftpack@exp
  7948  075C  083D               	movf	___ftmul@sign,w
  7949  075D  00B5               	movwf	??___ftmul+1
  7950  075E  0835               	movf	??___ftmul+1,w
  7951  075F  00A4               	movwf	___ftpack@sign
  7952  0760  3188  20D0         	fcall	___ftpack
  7953  0762  0020               	movlb	0	; select bank0
  7954  0763  0820               	movf	?___ftpack,w
  7955  0764  00AE               	movwf	?___ftmul
  7956  0765  0821               	movf	?___ftpack+1,w
  7957  0766  00AF               	movwf	?___ftmul+1
  7958  0767  0822               	movf	?___ftpack+2,w
  7959  0768  00B0               	movwf	?___ftmul+2
  7960  0769  0008               	return
  7961  076A                     __end_of___ftmul:	
  7962                           
  7963                           	psect	text32
  7964  0360                     __ptext32:	
  7965 ;; *************** function ___ftadd *****************
  7966 ;; Defined at:
  7967 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;  f1              3   30[BANK0 ] float 
  7970 ;;  f2              3   33[BANK0 ] float 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  exp1            1   42[BANK0 ] unsigned char 
  7973 ;;  exp2            1   41[BANK0 ] unsigned char 
  7974 ;;  sign            1   40[BANK0 ] unsigned char 
  7975 ;; Return value:  Size  Location     Type
  7976 ;;                  3   30[BANK0 ] float 
  7977 ;; Registers used:
  7978 ;;		wreg, status,2, status,0, pclath, cstack
  7979 ;; Tracked objects:
  7980 ;;		On entry : 0/0
  7981 ;;		On exit  : 0/0
  7982 ;;		Unchanged: 0/0
  7983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7984 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;Total ram usage:       13 bytes
  7989 ;; Hardware stack levels used:    1
  7990 ;; Hardware stack levels required when called:    6
  7991 ;; This function calls:
  7992 ;;		___ftpack
  7993 ;; This function is called by:
  7994 ;;		_getPercentValue
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           
  7999                           ;psect for function ___ftadd
  8000  0360                     ___ftadd:	
  8001                           
  8002                           ;incstack = 0
  8003                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8004  0360  0020               	movlb	0	; select bank0
  8005  0361  083E               	movf	___ftadd@f1,w
  8006  0362  00C4               	movwf	??___ftadd
  8007  0363  083F               	movf	___ftadd@f1+1,w
  8008  0364  00C5               	movwf	??___ftadd+1
  8009  0365  0840               	movf	___ftadd@f1+2,w
  8010  0366  00C6               	movwf	??___ftadd+2
  8011  0367  1003               	clrc
  8012  0368  0D45               	rlf	??___ftadd+1,w
  8013  0369  0D46               	rlf	??___ftadd+2,w
  8014  036A  00C7               	movwf	??___ftadd+3
  8015  036B  0847               	movf	??___ftadd+3,w
  8016  036C  00CA               	movwf	___ftadd@exp1
  8017  036D  0841               	movf	___ftadd@f2,w
  8018  036E  00C4               	movwf	??___ftadd
  8019  036F  0842               	movf	___ftadd@f2+1,w
  8020  0370  00C5               	movwf	??___ftadd+1
  8021  0371  0843               	movf	___ftadd@f2+2,w
  8022  0372  00C6               	movwf	??___ftadd+2
  8023  0373  1003               	clrc
  8024  0374  0D45               	rlf	??___ftadd+1,w
  8025  0375  0D46               	rlf	??___ftadd+2,w
  8026  0376  00C7               	movwf	??___ftadd+3
  8027  0377  0847               	movf	??___ftadd+3,w
  8028  0378  00C9               	movwf	___ftadd@exp2
  8029  0379  084A               	movf	___ftadd@exp1,w
  8030  037A  1903               	btfsc	3,2
  8031  037B  2B88               	goto	l5645
  8032  037C  0849               	movf	___ftadd@exp2,w
  8033  037D  024A               	subwf	___ftadd@exp1,w
  8034  037E  1803               	skipnc
  8035  037F  2B8F               	goto	l5649
  8036  0380  034A               	decf	___ftadd@exp1,w
  8037  0381  3AFF               	xorlw	255
  8038  0382  0749               	addwf	___ftadd@exp2,w
  8039  0383  00C4               	movwf	??___ftadd
  8040  0384  3019               	movlw	25
  8041  0385  0244               	subwf	??___ftadd,w
  8042  0386  1C03               	skipc
  8043  0387  2B8F               	goto	l5649
  8044  0388                     l5645:	
  8045  0388  0841               	movf	___ftadd@f2,w
  8046  0389  00BE               	movwf	?___ftadd
  8047  038A  0842               	movf	___ftadd@f2+1,w
  8048  038B  00BF               	movwf	?___ftadd+1
  8049  038C  0843               	movf	___ftadd@f2+2,w
  8050  038D  00C0               	movwf	?___ftadd+2
  8051  038E  0008               	return
  8052  038F                     l5649:	
  8053  038F  0849               	movf	___ftadd@exp2,w
  8054  0390  1903               	btfsc	3,2
  8055  0391  0008               	return
  8056  0392  084A               	movf	___ftadd@exp1,w
  8057  0393  0249               	subwf	___ftadd@exp2,w
  8058  0394  1803               	skipnc
  8059  0395  2B9E               	goto	l5655
  8060  0396  0349               	decf	___ftadd@exp2,w
  8061  0397  3AFF               	xorlw	255
  8062  0398  074A               	addwf	___ftadd@exp1,w
  8063  0399  00C4               	movwf	??___ftadd
  8064  039A  3019               	movlw	25
  8065  039B  0244               	subwf	??___ftadd,w
  8066  039C  1803               	btfsc	3,0
  8067  039D  0008               	return
  8068  039E                     l5655:	
  8069  039E  3006               	movlw	6
  8070  039F  00C4               	movwf	??___ftadd
  8071  03A0  0844               	movf	??___ftadd,w
  8072  03A1  00C8               	movwf	___ftadd@sign
  8073  03A2  1BC0               	btfsc	___ftadd@f1+2,7
  8074  03A3  17C8               	bsf	___ftadd@sign,7
  8075  03A4  1BC3               	btfsc	___ftadd@f2+2,7
  8076  03A5  1748               	bsf	___ftadd@sign,6
  8077  03A6  17BF               	bsf	___ftadd@f1+1,7
  8078  03A7  30FF               	movlw	255
  8079  03A8  05BE               	andwf	___ftadd@f1,f
  8080  03A9  30FF               	movlw	255
  8081  03AA  05BF               	andwf	___ftadd@f1+1,f
  8082  03AB  3000               	movlw	0
  8083  03AC  05C0               	andwf	___ftadd@f1+2,f
  8084  03AD  17C2               	bsf	___ftadd@f2+1,7
  8085  03AE  30FF               	movlw	255
  8086  03AF  05C1               	andwf	___ftadd@f2,f
  8087  03B0  30FF               	movlw	255
  8088  03B1  05C2               	andwf	___ftadd@f2+1,f
  8089  03B2  3000               	movlw	0
  8090  03B3  05C3               	andwf	___ftadd@f2+2,f
  8091  03B4  0849               	movf	___ftadd@exp2,w
  8092  03B5  024A               	subwf	___ftadd@exp1,w
  8093  03B6  1803               	skipnc
  8094  03B7  2BDA               	goto	l5677
  8095  03B8                     l5667:	
  8096  03B8  3001               	movlw	1
  8097  03B9                     u4135:	
  8098  03B9  35C1               	lslf	___ftadd@f2,f
  8099  03BA  0DC2               	rlf	___ftadd@f2+1,f
  8100  03BB  0DC3               	rlf	___ftadd@f2+2,f
  8101  03BC  0B89               	decfsz	9,f
  8102  03BD  2BB9               	goto	u4135
  8103  03BE  3001               	movlw	1
  8104  03BF  02C9               	subwf	___ftadd@exp2,f
  8105  03C0  0849               	movf	___ftadd@exp2,w
  8106  03C1  064A               	xorwf	___ftadd@exp1,w
  8107  03C2  1903               	skipnz
  8108  03C3  2BD5               	goto	l5675
  8109  03C4  3001               	movlw	1
  8110  03C5  02C8               	subwf	___ftadd@sign,f
  8111  03C6  0848               	movf	___ftadd@sign,w
  8112  03C7  3907               	andlw	7
  8113  03C8  1903               	btfsc	3,2
  8114  03C9  2BD5               	goto	l5675
  8115  03CA  2BB8               	goto	l5667
  8116  03CB                     l5673:	
  8117  03CB  3001               	movlw	1
  8118  03CC                     u4165:	
  8119  03CC  36C0               	lsrf	___ftadd@f1+2,f
  8120  03CD  0CBF               	rrf	___ftadd@f1+1,f
  8121  03CE  0CBE               	rrf	___ftadd@f1,f
  8122  03CF  0B89               	decfsz	9,f
  8123  03D0  2BCC               	goto	u4165
  8124  03D1  3001               	movlw	1
  8125  03D2  00C4               	movwf	??___ftadd
  8126  03D3  0844               	movf	??___ftadd,w
  8127  03D4  07CA               	addwf	___ftadd@exp1,f
  8128  03D5                     l5675:	
  8129  03D5  084A               	movf	___ftadd@exp1,w
  8130  03D6  0649               	xorwf	___ftadd@exp2,w
  8131  03D7  1903               	btfsc	3,2
  8132  03D8  2BFF               	goto	l3046
  8133  03D9  2BCB               	goto	l5673
  8134  03DA                     l5677:	
  8135  03DA  084A               	movf	___ftadd@exp1,w
  8136  03DB  0249               	subwf	___ftadd@exp2,w
  8137  03DC  1803               	skipnc
  8138  03DD  2BFF               	goto	l3046
  8139  03DE                     l5679:	
  8140  03DE  3001               	movlw	1
  8141  03DF                     u4195:	
  8142  03DF  35BE               	lslf	___ftadd@f1,f
  8143  03E0  0DBF               	rlf	___ftadd@f1+1,f
  8144  03E1  0DC0               	rlf	___ftadd@f1+2,f
  8145  03E2  0B89               	decfsz	9,f
  8146  03E3  2BDF               	goto	u4195
  8147  03E4  3001               	movlw	1
  8148  03E5  02CA               	subwf	___ftadd@exp1,f
  8149  03E6  0849               	movf	___ftadd@exp2,w
  8150  03E7  064A               	xorwf	___ftadd@exp1,w
  8151  03E8  1903               	skipnz
  8152  03E9  2BFB               	goto	l5687
  8153  03EA  3001               	movlw	1
  8154  03EB  02C8               	subwf	___ftadd@sign,f
  8155  03EC  0848               	movf	___ftadd@sign,w
  8156  03ED  3907               	andlw	7
  8157  03EE  1903               	btfsc	3,2
  8158  03EF  2BFB               	goto	l5687
  8159  03F0  2BDE               	goto	l5679
  8160  03F1                     l5685:	
  8161  03F1  3001               	movlw	1
  8162  03F2                     u4225:	
  8163  03F2  36C3               	lsrf	___ftadd@f2+2,f
  8164  03F3  0CC2               	rrf	___ftadd@f2+1,f
  8165  03F4  0CC1               	rrf	___ftadd@f2,f
  8166  03F5  0B89               	decfsz	9,f
  8167  03F6  2BF2               	goto	u4225
  8168  03F7  3001               	movlw	1
  8169  03F8  00C4               	movwf	??___ftadd
  8170  03F9  0844               	movf	??___ftadd,w
  8171  03FA  07C9               	addwf	___ftadd@exp2,f
  8172  03FB                     l5687:	
  8173  03FB  084A               	movf	___ftadd@exp1,w
  8174  03FC  0649               	xorwf	___ftadd@exp2,w
  8175  03FD  1D03               	skipz
  8176  03FE  2BF1               	goto	l5685
  8177  03FF                     l3046:	
  8178  03FF  1FC8               	btfss	___ftadd@sign,7
  8179  0400  2C11               	goto	l5691
  8180  0401  30FF               	movlw	255
  8181  0402  06BE               	xorwf	___ftadd@f1,f
  8182  0403  30FF               	movlw	255
  8183  0404  06BF               	xorwf	___ftadd@f1+1,f
  8184  0405  30FF               	movlw	255
  8185  0406  06C0               	xorwf	___ftadd@f1+2,f
  8186  0407  3001               	movlw	1
  8187  0408  07BE               	addwf	___ftadd@f1,f
  8188  0409  3000               	movlw	0
  8189  040A  1803               	skipnc
  8190  040B  3001               	movlw	1
  8191  040C  07BF               	addwf	___ftadd@f1+1,f
  8192  040D  3000               	movlw	0
  8193  040E  1803               	skipnc
  8194  040F  3001               	movlw	1
  8195  0410  07C0               	addwf	___ftadd@f1+2,f
  8196  0411                     l5691:	
  8197  0411  1F48               	btfss	___ftadd@sign,6
  8198  0412  2C23               	goto	l5695
  8199  0413  30FF               	movlw	255
  8200  0414  06C1               	xorwf	___ftadd@f2,f
  8201  0415  30FF               	movlw	255
  8202  0416  06C2               	xorwf	___ftadd@f2+1,f
  8203  0417  30FF               	movlw	255
  8204  0418  06C3               	xorwf	___ftadd@f2+2,f
  8205  0419  3001               	movlw	1
  8206  041A  07C1               	addwf	___ftadd@f2,f
  8207  041B  3000               	movlw	0
  8208  041C  1803               	skipnc
  8209  041D  3001               	movlw	1
  8210  041E  07C2               	addwf	___ftadd@f2+1,f
  8211  041F  3000               	movlw	0
  8212  0420  1803               	skipnc
  8213  0421  3001               	movlw	1
  8214  0422  07C3               	addwf	___ftadd@f2+2,f
  8215  0423                     l5695:	
  8216  0423  01C8               	clrf	___ftadd@sign
  8217  0424  083E               	movf	___ftadd@f1,w
  8218  0425  07C1               	addwf	___ftadd@f2,f
  8219  0426  083F               	movf	___ftadd@f1+1,w
  8220  0427  3DC2               	addwfc	___ftadd@f2+1,f
  8221  0428  0840               	movf	___ftadd@f1+2,w
  8222  0429  3DC3               	addwfc	___ftadd@f2+2,f
  8223  042A  1FC3               	btfss	___ftadd@f2+2,7
  8224  042B  2C3E               	goto	l5705
  8225  042C  30FF               	movlw	255
  8226  042D  06C1               	xorwf	___ftadd@f2,f
  8227  042E  30FF               	movlw	255
  8228  042F  06C2               	xorwf	___ftadd@f2+1,f
  8229  0430  30FF               	movlw	255
  8230  0431  06C3               	xorwf	___ftadd@f2+2,f
  8231  0432  3001               	movlw	1
  8232  0433  07C1               	addwf	___ftadd@f2,f
  8233  0434  3000               	movlw	0
  8234  0435  1803               	skipnc
  8235  0436  3001               	movlw	1
  8236  0437  07C2               	addwf	___ftadd@f2+1,f
  8237  0438  3000               	movlw	0
  8238  0439  1803               	skipnc
  8239  043A  3001               	movlw	1
  8240  043B  07C3               	addwf	___ftadd@f2+2,f
  8241  043C  01C8               	clrf	___ftadd@sign
  8242  043D  0AC8               	incf	___ftadd@sign,f
  8243  043E                     l5705:	
  8244  043E  0841               	movf	___ftadd@f2,w
  8245  043F  00A0               	movwf	___ftpack@arg
  8246  0440  0842               	movf	___ftadd@f2+1,w
  8247  0441  00A1               	movwf	___ftpack@arg+1
  8248  0442  0843               	movf	___ftadd@f2+2,w
  8249  0443  00A2               	movwf	___ftpack@arg+2
  8250  0444  084A               	movf	___ftadd@exp1,w
  8251  0445  00C4               	movwf	??___ftadd
  8252  0446  0844               	movf	??___ftadd,w
  8253  0447  00A3               	movwf	___ftpack@exp
  8254  0448  0848               	movf	___ftadd@sign,w
  8255  0449  00C5               	movwf	??___ftadd+1
  8256  044A  0845               	movf	??___ftadd+1,w
  8257  044B  00A4               	movwf	___ftpack@sign
  8258  044C  3188  20D0         	fcall	___ftpack
  8259  044E  0020               	movlb	0	; select bank0
  8260  044F  0820               	movf	?___ftpack,w
  8261  0450  00BE               	movwf	?___ftadd
  8262  0451  0821               	movf	?___ftpack+1,w
  8263  0452  00BF               	movwf	?___ftadd+1
  8264  0453  0822               	movf	?___ftpack+2,w
  8265  0454  00C0               	movwf	?___ftadd+2
  8266  0455  0008               	return
  8267  0456                     __end_of___ftadd:	
  8268                           
  8269                           	psect	text33
  8270  1FCC                     __ptext33:	
  8271 ;; *************** function _getBuz_GO *****************
  8272 ;; Defined at:
  8273 ;;		line 82 in file "../src/Buzzer_B1.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;		None
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;  i               2    4[BANK0 ] int 
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  2    0[BANK0 ] int 
  8280 ;; Registers used:
  8281 ;;		wreg, status,2, status,0
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8287 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;Total ram usage:        6 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:    5
  8294 ;; This function calls:
  8295 ;;		Nothing
  8296 ;; This function is called by:
  8297 ;;		_setRF_Main
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           
  8302                           ;psect for function _getBuz_GO
  8303  1FCC                     _getBuz_GO:	
  8304                           
  8305                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8306                           
  8307                           ;incstack = 0
  8308                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8309  1FCC  0021               	movlb	1	; select bank1
  8310  1FCD  0C32               	rrf	_Buz1^(0+128),w
  8311  1FCE  3901               	andlw	1
  8312  1FCF  0020               	movlb	0	; select bank0
  8313  1FD0  00A2               	movwf	??_getBuz_GO
  8314  1FD1  01A3               	clrf	??_getBuz_GO+1
  8315  1FD2  0822               	movf	??_getBuz_GO,w
  8316  1FD3  00A4               	movwf	getBuz_GO@i
  8317  1FD4  0823               	movf	??_getBuz_GO+1,w
  8318  1FD5  00A5               	movwf	getBuz_GO@i+1
  8319                           
  8320                           ;Buzzer_B1.c: 84: return i;
  8321  1FD6  0825               	movf	getBuz_GO@i+1,w
  8322  1FD7  01A1               	clrf	?_getBuz_GO+1
  8323  1FD8  07A1               	addwf	?_getBuz_GO+1,f
  8324  1FD9  0824               	movf	getBuz_GO@i,w
  8325  1FDA  01A0               	clrf	?_getBuz_GO
  8326  1FDB  07A0               	addwf	?_getBuz_GO,f
  8327  1FDC  0008               	return
  8328  1FDD                     __end_of_getBuz_GO:	
  8329                           
  8330                           	psect	text34
  8331  0995                     __ptext34:	
  8332 ;; *************** function _CC2500_TxData *****************
  8333 ;; Defined at:
  8334 ;;		line 32 in file "../src/CC2500_B1.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;		None
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8339 ;; Return value:  Size  Location     Type
  8340 ;;		None               void
  8341 ;; Registers used:
  8342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;Total ram usage:        2 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    7
  8355 ;; This function calls:
  8356 ;;		_CC2500_WriteByte
  8357 ;;		_CC2500_WriteCommand
  8358 ;;		_Timeout_Counter
  8359 ;;		_set_TimeoutCleared
  8360 ;; This function is called by:
  8361 ;;		_setRF_Main
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           
  8366                           ;psect for function _CC2500_TxData
  8367  0995                     _CC2500_TxData:	
  8368                           
  8369                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8370                           ;CC2500_B1.c: 35: RC4 = 0;
  8371                           
  8372                           ;incstack = 0
  8373                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8374  0995  0020               	movlb	0	; select bank0
  8375  0996  120E               	bcf	14,4	;volatile
  8376                           
  8377                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8378  0997  307F               	movlw	127
  8379  0998  00A4               	movwf	??_CC2500_TxData
  8380  0999  0824               	movf	??_CC2500_TxData,w
  8381  099A  00F5               	movwf	_SPI0Buffer
  8382                           
  8383                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8384  099B  299F               	goto	l8569
  8385  099C                     l8567:	
  8386                           
  8387                           ;CC2500_B1.c: 38: Timeout_Counter();
  8388  099C  3190  20D2  3189   	fcall	_Timeout_Counter
  8389  099F                     l8569:	
  8390  099F  0020               	movlb	0	; select bank0
  8391  09A0  1D0E               	btfss	14,2	;volatile
  8392  09A1  29A5               	goto	l8573
  8393  09A2  0021               	movlb	1	; select bank1
  8394  09A3  1D2F               	btfss	(_myMain^(0+128)+15),2
  8395  09A4  299C               	goto	l8567
  8396  09A5                     l8573:	
  8397                           
  8398                           ;CC2500_B1.c: 39: };
  8399                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8400  09A5  319E  2654  3189   	fcall	_set_TimeoutCleared
  8401                           
  8402                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8403  09A8  3190  20AA  3189   	fcall	_CC2500_WriteByte
  8404                           
  8405                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8406  09AB  0021               	movlb	1	; select bank1
  8407  09AC  0856               	movf	_Tx_Length^(0+128),w
  8408  09AD  0020               	movlb	0	; select bank0
  8409  09AE  00A4               	movwf	??_CC2500_TxData
  8410  09AF  0824               	movf	??_CC2500_TxData,w
  8411  09B0  00F5               	movwf	_SPI0Buffer
  8412                           
  8413                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8414  09B1  3190  20AA  3189   	fcall	_CC2500_WriteByte
  8415                           
  8416                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8417  09B4  0020               	movlb	0	; select bank0
  8418  09B5  01A5               	clrf	CC2500_TxData@loop_e
  8419  09B6                     l8587:	
  8420  09B6  0021               	movlb	1	; select bank1
  8421  09B7  0856               	movf	_Tx_Length^(0+128),w
  8422  09B8  0020               	movlb	0	; select bank0
  8423  09B9  0225               	subwf	CC2500_TxData@loop_e,w
  8424  09BA  1803               	btfsc	3,0
  8425  09BB  29CE               	goto	l283
  8426                           
  8427                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8428  09BC  0825               	movf	CC2500_TxData@loop_e,w
  8429  09BD  3E20               	addlw	_RF_Data& (0+255)
  8430  09BE  0086               	movwf	6
  8431  09BF  3001               	movlw	1	; select bank2/3
  8432  09C0  0087               	movwf	7
  8433  09C1  0801               	movf	1,w
  8434  09C2  00A4               	movwf	??_CC2500_TxData
  8435  09C3  0824               	movf	??_CC2500_TxData,w
  8436  09C4  00F5               	movwf	_SPI0Buffer
  8437                           
  8438                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8439  09C5  3190  20AA  3189   	fcall	_CC2500_WriteByte
  8440  09C8  3001               	movlw	1
  8441  09C9  0020               	movlb	0	; select bank0
  8442  09CA  00A4               	movwf	??_CC2500_TxData
  8443  09CB  0824               	movf	??_CC2500_TxData,w
  8444  09CC  07A5               	addwf	CC2500_TxData@loop_e,f
  8445  09CD  29B6               	goto	l8587
  8446  09CE                     l283:	
  8447                           
  8448                           ;CC2500_B1.c: 48: }
  8449                           ;CC2500_B1.c: 49: RC4 = 1;
  8450  09CE  160E               	bsf	14,4	;volatile
  8451                           
  8452                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8453  09CF  3035               	movlw	53
  8454  09D0  3191  212B  3189   	fcall	_CC2500_WriteCommand
  8455                           
  8456                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8457  09D3  29D7               	goto	l8593
  8458  09D4                     l8591:	
  8459                           
  8460                           ;CC2500_B1.c: 52: Timeout_Counter();
  8461  09D4  3190  20D2  3189   	fcall	_Timeout_Counter
  8462  09D7                     l8593:	
  8463  09D7  0020               	movlb	0	; select bank0
  8464  09D8  180D               	btfsc	13,0	;volatile
  8465  09D9  29DD               	goto	l8597
  8466  09DA  0021               	movlb	1	; select bank1
  8467  09DB  1D2F               	btfss	(_myMain^(0+128)+15),2
  8468  09DC  29D4               	goto	l8591
  8469  09DD                     l8597:	
  8470                           
  8471                           ;CC2500_B1.c: 53: };
  8472                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8473  09DD  319E  2654  3189   	fcall	_set_TimeoutCleared
  8474                           
  8475                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8476  09E0  29E4               	goto	l8601
  8477  09E1                     l8599:	
  8478                           
  8479                           ;CC2500_B1.c: 57: Timeout_Counter();
  8480  09E1  3190  20D2  3189   	fcall	_Timeout_Counter
  8481  09E4                     l8601:	
  8482  09E4  0020               	movlb	0	; select bank0
  8483  09E5  1C0D               	btfss	13,0	;volatile
  8484  09E6  29EA               	goto	l8605
  8485  09E7  0021               	movlb	1	; select bank1
  8486  09E8  1D2F               	btfss	(_myMain^(0+128)+15),2
  8487  09E9  29E1               	goto	l8599
  8488  09EA                     l8605:	
  8489                           
  8490                           ;CC2500_B1.c: 58: };
  8491                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8492  09EA  319E  2654  3189   	fcall	_set_TimeoutCleared
  8493                           
  8494                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8495  09ED  3036               	movlw	54
  8496  09EE  3191  212B  3189   	fcall	_CC2500_WriteCommand
  8497                           
  8498                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8499  09F1  303B               	movlw	59
  8500  09F2  3191  212B  3189   	fcall	_CC2500_WriteCommand
  8501                           
  8502                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8503  09F5  303A               	movlw	58
  8504  09F6  3191  212B         	fcall	_CC2500_WriteCommand
  8505                           
  8506                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8507  09F8  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8508  09F9  0008               	return
  8509  09FA                     __end_of_CC2500_TxData:	
  8510                           
  8511                           	psect	text35
  8512  0C1A                     __ptext35:	
  8513 ;; *************** function _CC2500_RxData *****************
  8514 ;; Defined at:
  8515 ;;		line 70 in file "../src/CC2500_B1.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;		None
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8520 ;; Return value:  Size  Location     Type
  8521 ;;		None               void
  8522 ;; Registers used:
  8523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8524 ;; Tracked objects:
  8525 ;;		On entry : 0/0
  8526 ;;		On exit  : 0/0
  8527 ;;		Unchanged: 0/0
  8528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;Total ram usage:        2 bytes
  8534 ;; Hardware stack levels used:    1
  8535 ;; Hardware stack levels required when called:    7
  8536 ;; This function calls:
  8537 ;;		_CC2500_ReadByte
  8538 ;;		_CC2500_ReadStatus
  8539 ;;		_CC2500_WriteByte
  8540 ;;		_Timeout_Counter
  8541 ;;		_set_TimeoutCleared
  8542 ;; This function is called by:
  8543 ;;		_setRF_Main
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           
  8548                           ;psect for function _CC2500_RxData
  8549  0C1A                     _CC2500_RxData:	
  8550                           
  8551                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8552                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8553                           
  8554                           ;incstack = 0
  8555                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8556  0C1A  0020               	movlb	0	; select bank0
  8557  0C1B  180D               	btfsc	13,0	;volatile
  8558  0C1C  2C21               	goto	l8621
  8559  0C1D  2C2A               	goto	l8627
  8560  0C1E                     l8619:	
  8561                           ;CC2500_B1.c: 76: {
  8562                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8563                           
  8564                           
  8565                           ;CC2500_B1.c: 78: Timeout_Counter();
  8566  0C1E  3190  20D2  318C   	fcall	_Timeout_Counter
  8567  0C21                     l8621:	
  8568  0C21  0020               	movlb	0	; select bank0
  8569  0C22  1C0D               	btfss	13,0	;volatile
  8570  0C23  2C27               	goto	l8625
  8571  0C24  0021               	movlb	1	; select bank1
  8572  0C25  1D2F               	btfss	(_myMain^(0+128)+15),2
  8573  0C26  2C1E               	goto	l8619
  8574  0C27                     l8625:	
  8575                           
  8576                           ;CC2500_B1.c: 79: };
  8577                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8578  0C27  319E  2654  318C   	fcall	_set_TimeoutCleared
  8579  0C2A                     l8627:	
  8580                           
  8581                           ;CC2500_B1.c: 81: }
  8582                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8583  0C2A  303B               	movlw	59
  8584  0C2B  3192  22CC  318C   	fcall	_CC2500_ReadStatus
  8585                           
  8586                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8587  0C2E  0021               	movlb	1	; select bank1
  8588  0C2F  0859               	movf	_s_data^(0+128),w
  8589  0C30  1903               	btfsc	3,2
  8590  0C31  0008               	return
  8591                           
  8592                           ;CC2500_B1.c: 86: RC4 = 0;
  8593  0C32  0020               	movlb	0	; select bank0
  8594  0C33  120E               	bcf	14,4	;volatile
  8595                           
  8596                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8597  0C34  30FF               	movlw	255
  8598  0C35  00A4               	movwf	??_CC2500_RxData
  8599  0C36  0824               	movf	??_CC2500_RxData,w
  8600  0C37  00F5               	movwf	_SPI0Buffer
  8601                           
  8602                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8603  0C38  2C3F               	goto	l8637
  8604  0C39                     l8639:	
  8605  0C39  0021               	movlb	1	; select bank1
  8606  0C3A  192F               	btfsc	(_myMain^(0+128)+15),2
  8607  0C3B  2C42               	goto	l308
  8608                           
  8609                           ;CC2500_B1.c: 89: Timeout_Counter();
  8610  0C3C  3190  20D2  318C   	fcall	_Timeout_Counter
  8611  0C3F                     l8637:	
  8612  0C3F  0020               	movlb	0	; select bank0
  8613  0C40  190E               	btfsc	14,2	;volatile
  8614  0C41  2C39               	goto	l8639
  8615  0C42                     l308:	
  8616                           
  8617                           ;CC2500_B1.c: 90: };
  8618                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  8619  0C42  0021               	movlb	1	; select bank1
  8620  0C43  192F               	btfsc	(_myMain^(0+128)+15),2
  8621  0C44  2C85               	goto	l309
  8622                           
  8623                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8624  0C45  3190  20AA  318C   	fcall	_CC2500_WriteByte
  8625                           
  8626                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8627  0C48  3190  20FC  318C   	fcall	_CC2500_ReadByte
  8628                           
  8629                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8630  0C4B  0875               	movf	_SPI0Buffer,w
  8631  0C4C  0020               	movlb	0	; select bank0
  8632  0C4D  00A4               	movwf	??_CC2500_RxData
  8633  0C4E  0824               	movf	??_CC2500_RxData,w
  8634  0C4F  0021               	movlb	1	; select bank1
  8635  0C50  00D5               	movwf	_Rx_Length^(0+128)
  8636                           
  8637                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8638  0C51  0020               	movlb	0	; select bank0
  8639  0C52  01A5               	clrf	CC2500_RxData@loop_f
  8640  0C53                     l8653:	
  8641  0C53  0021               	movlb	1	; select bank1
  8642  0C54  0855               	movf	_Rx_Length^(0+128),w
  8643  0C55  0020               	movlb	0	; select bank0
  8644  0C56  0225               	subwf	CC2500_RxData@loop_f,w
  8645  0C57  1803               	btfsc	3,0
  8646  0C58  2C6B               	goto	l8655
  8647                           
  8648                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8649  0C59  3190  20FC  318C   	fcall	_CC2500_ReadByte
  8650                           
  8651                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8652  0C5C  0875               	movf	_SPI0Buffer,w
  8653  0C5D  0020               	movlb	0	; select bank0
  8654  0C5E  00A4               	movwf	??_CC2500_RxData
  8655  0C5F  0825               	movf	CC2500_RxData@loop_f,w
  8656  0C60  3E20               	addlw	_RF_Data& (0+255)
  8657  0C61  0086               	movwf	6
  8658  0C62  3001               	movlw	1	; select bank2/3
  8659  0C63  0087               	movwf	7
  8660  0C64  0824               	movf	??_CC2500_RxData,w
  8661  0C65  0081               	movwf	1
  8662  0C66  3001               	movlw	1
  8663  0C67  00A4               	movwf	??_CC2500_RxData
  8664  0C68  0824               	movf	??_CC2500_RxData,w
  8665  0C69  07A5               	addwf	CC2500_RxData@loop_f,f
  8666  0C6A  2C53               	goto	l8653
  8667  0C6B                     l8655:	
  8668                           
  8669                           ;CC2500_B1.c: 99: }
  8670                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8671  0C6B  3190  20FC  318C   	fcall	_CC2500_ReadByte
  8672                           
  8673                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8674  0C6E  0875               	movf	_SPI0Buffer,w
  8675  0C6F  0020               	movlb	0	; select bank0
  8676  0C70  00A4               	movwf	??_CC2500_RxData
  8677  0C71  0824               	movf	??_CC2500_RxData,w
  8678  0C72  0021               	movlb	1	; select bank1
  8679  0C73  00D4               	movwf	_RSSI^(0+128)
  8680                           
  8681                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8682  0C74  3190  20FC  318C   	fcall	_CC2500_ReadByte
  8683                           
  8684                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8685  0C77  0875               	movf	_SPI0Buffer,w
  8686  0C78  0020               	movlb	0	; select bank0
  8687  0C79  00A4               	movwf	??_CC2500_RxData
  8688  0C7A  0824               	movf	??_CC2500_RxData,w
  8689  0C7B  0021               	movlb	1	; select bank1
  8690  0C7C  00CE               	movwf	_CRC^(0+128)
  8691                           
  8692                           ;CC2500_B1.c: 104: RC4 = 1;
  8693  0C7D  0020               	movlb	0	; select bank0
  8694  0C7E  160E               	bsf	14,4	;volatile
  8695                           
  8696                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8697  0C7F  0021               	movlb	1	; select bank1
  8698  0C80  1BCE               	btfsc	_CRC^(0+128),7
  8699                           
  8700                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8701  0C81  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8702                           
  8703                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8704  0C82  11BE               	bcf	_RF1^(0+128),3
  8705                           
  8706                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8707  0C83  14BE               	bsf	_RF1^(0+128),1
  8708                           
  8709                           ;CC2500_B1.c: 110: } else {
  8710  0C84  2C87               	goto	l8667
  8711  0C85                     l309:	
  8712                           
  8713                           ;CC2500_B1.c: 111: RC4 = 1;
  8714  0C85  0020               	movlb	0	; select bank0
  8715  0C86  160E               	bsf	14,4	;volatile
  8716  0C87                     l8667:	
  8717                           
  8718                           ;CC2500_B1.c: 112: }
  8719                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  8720  0C87  319E  2654         	fcall	_set_TimeoutCleared
  8721  0C89  0021               	movlb	1	; select bank1
  8722  0C8A  0008               	return
  8723  0C8B                     __end_of_CC2500_RxData:	
  8724                           
  8725                           	psect	text36
  8726  12CC                     __ptext36:	
  8727 ;; *************** function _CC2500_ReadStatus *****************
  8728 ;; Defined at:
  8729 ;;		line 304 in file "../src/CC2500_B1.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;  status_addr     1    wreg     unsigned char 
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8734 ;; Return value:  Size  Location     Type
  8735 ;;		None               void
  8736 ;; Registers used:
  8737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;Total ram usage:        2 bytes
  8748 ;; Hardware stack levels used:    1
  8749 ;; Hardware stack levels required when called:    6
  8750 ;; This function calls:
  8751 ;;		_CC2500_ReadByte
  8752 ;;		_CC2500_WriteByte
  8753 ;;		_Timeout_Counter
  8754 ;;		_set_TimeoutCleared
  8755 ;; This function is called by:
  8756 ;;		_CC2500_RxData
  8757 ;;		_setRF_Main
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           
  8762                           ;psect for function _CC2500_ReadStatus
  8763  12CC                     _CC2500_ReadStatus:	
  8764                           
  8765                           ;incstack = 0
  8766                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8767                           ;CC2500_ReadStatus@status_addr stored from wreg
  8768  12CC  0020               	movlb	0	; select bank0
  8769  12CD  00A3               	movwf	CC2500_ReadStatus@status_addr
  8770                           
  8771                           ;CC2500_B1.c: 305: RC4 = 0;
  8772  12CE  120E               	bcf	14,4	;volatile
  8773                           
  8774                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  8775  12CF  0823               	movf	CC2500_ReadStatus@status_addr,w
  8776  12D0  3EC0               	addlw	192
  8777  12D1  00A2               	movwf	??_CC2500_ReadStatus
  8778  12D2  0822               	movf	??_CC2500_ReadStatus,w
  8779  12D3  00F5               	movwf	_SPI0Buffer
  8780                           
  8781                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  8782  12D4  2AD8               	goto	l8473
  8783  12D5                     l8471:	
  8784                           
  8785                           ;CC2500_B1.c: 309: Timeout_Counter();
  8786  12D5  3190  20D2  3192   	fcall	_Timeout_Counter
  8787  12D8                     l8473:	
  8788  12D8  0020               	movlb	0	; select bank0
  8789  12D9  1D0E               	btfss	14,2	;volatile
  8790  12DA  2ADE               	goto	l8477
  8791  12DB  0021               	movlb	1	; select bank1
  8792  12DC  1D2F               	btfss	(_myMain^(0+128)+15),2
  8793  12DD  2AD5               	goto	l8471
  8794  12DE                     l8477:	
  8795                           
  8796                           ;CC2500_B1.c: 310: };
  8797                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  8798  12DE  319E  2654  3192   	fcall	_set_TimeoutCleared
  8799                           
  8800                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  8801  12E1  3190  20AA  3192   	fcall	_CC2500_WriteByte
  8802                           
  8803                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  8804  12E4  3190  20FC         	fcall	_CC2500_ReadByte
  8805                           
  8806                           ;CC2500_B1.c: 315: RC4 = 1;
  8807  12E6  0020               	movlb	0	; select bank0
  8808  12E7  160E               	bsf	14,4	;volatile
  8809                           
  8810                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  8811  12E8  0875               	movf	_SPI0Buffer,w
  8812  12E9  00A2               	movwf	??_CC2500_ReadStatus
  8813  12EA  0822               	movf	??_CC2500_ReadStatus,w
  8814  12EB  0021               	movlb	1	; select bank1
  8815  12EC  00D9               	movwf	_s_data^(0+128)
  8816  12ED  0008               	return
  8817  12EE                     __end_of_CC2500_ReadStatus:	
  8818                           
  8819                           	psect	text37
  8820  10FC                     __ptext37:	
  8821 ;; *************** function _CC2500_ReadByte *****************
  8822 ;; Defined at:
  8823 ;;		line 238 in file "../src/CC2500_B1.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;		None
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8828 ;; Return value:  Size  Location     Type
  8829 ;;		None               void
  8830 ;; Registers used:
  8831 ;;		wreg, status,2, status,0
  8832 ;; Tracked objects:
  8833 ;;		On entry : 0/0
  8834 ;;		On exit  : 0/0
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;Total ram usage:        2 bytes
  8842 ;; Hardware stack levels used:    1
  8843 ;; Hardware stack levels required when called:    5
  8844 ;; This function calls:
  8845 ;;		Nothing
  8846 ;; This function is called by:
  8847 ;;		_CC2500_RxData
  8848 ;;		_CC2500_ReadStatus
  8849 ;;		_CC2500_ReadREG
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           
  8854                           ;psect for function _CC2500_ReadByte
  8855  10FC                     _CC2500_ReadByte:	
  8856                           
  8857                           ;CC2500_B1.c: 239: unsigned char loop_b;
  8858                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  8859                           
  8860                           ;incstack = 0
  8861                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8862  10FC  0020               	movlb	0	; select bank0
  8863  10FD  01A1               	clrf	CC2500_ReadByte@loop_b
  8864  10FE                     L7:	
  8865  10FE  3008               	movlw	8
  8866  10FF  0221               	subwf	CC2500_ReadByte@loop_b,w
  8867  1100  1803               	btfsc	3,0
  8868  1101  0008               	return
  8869                           
  8870                           ;CC2500_B1.c: 241: RC1 = 1;
  8871  1102  148E               	bsf	14,1	;volatile
  8872                           
  8873                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  8874  1103  1003               	clrc
  8875  1104  0DF5               	rlf	_SPI0Buffer,f
  8876                           
  8877                           ;CC2500_B1.c: 243: if (RC2 == 1)
  8878  1105  1D0E               	btfss	14,2	;volatile
  8879  1106  2909               	goto	l8365
  8880                           
  8881                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  8882  1107  1475               	bsf	_SPI0Buffer,0
  8883  1108  290D               	goto	l8367
  8884  1109                     l8365:	
  8885                           
  8886                           ;CC2500_B1.c: 245: else
  8887                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  8888  1109  30FE               	movlw	254
  8889  110A  00A0               	movwf	??_CC2500_ReadByte
  8890  110B  0820               	movf	??_CC2500_ReadByte,w
  8891  110C  05F5               	andwf	_SPI0Buffer,f
  8892  110D                     l8367:	
  8893                           
  8894                           ;CC2500_B1.c: 247: RC1 = 0;
  8895  110D  108E               	bcf	14,1	;volatile
  8896  110E  3001               	movlw	1
  8897  110F  00A0               	movwf	??_CC2500_ReadByte
  8898  1110  0820               	movf	??_CC2500_ReadByte,w
  8899  1111  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8900  1112  28FE               	goto	L7
  8901  1113                     __end_of_CC2500_ReadByte:	
  8902                           
  8903                           	psect	text38
  8904  1E3E                     __ptext38:	
  8905 ;; *************** function _RF_Initialization *****************
  8906 ;; Defined at:
  8907 ;;		line 9 in file "../src/RF_Control_B1.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;		None
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;		None
  8912 ;; Return value:  Size  Location     Type
  8913 ;;		None               void
  8914 ;; Registers used:
  8915 ;;		wreg, status,2, status,0, pclath, cstack
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;Total ram usage:        0 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    6
  8928 ;; This function calls:
  8929 ;;		_setRF_Initialization
  8930 ;; This function is called by:
  8931 ;;		_main
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           
  8936                           ;psect for function _RF_Initialization
  8937  1E3E                     _RF_Initialization:	
  8938                           
  8939                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8940                           
  8941                           ;incstack = 0
  8942                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8943  1E3E  319E  26A2         	fcall	_setRF_Initialization
  8944  1E40  0008               	return
  8945  1E41                     __end_of_RF_Initialization:	
  8946                           
  8947                           	psect	text39
  8948  1EA2                     __ptext39:	
  8949 ;; *************** function _setRF_Initialization *****************
  8950 ;; Defined at:
  8951 ;;		line 43 in file "../src/RF_Control_B1.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;		None
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;		None
  8956 ;; Return value:  Size  Location     Type
  8957 ;;		None               void
  8958 ;; Registers used:
  8959 ;;		wreg
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;Total ram usage:        1 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    5
  8972 ;; This function calls:
  8973 ;;		Nothing
  8974 ;; This function is called by:
  8975 ;;		_RF_Initialization
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           
  8980                           ;psect for function _setRF_Initialization
  8981  1EA2                     _setRF_Initialization:	
  8982                           
  8983                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8984                           
  8985                           ;incstack = 0
  8986                           ; Regs used in _setRF_Initialization: [wreg]
  8987  1EA2  3015               	movlw	21
  8988  1EA3  0020               	movlb	0	; select bank0
  8989  1EA4  00A0               	movwf	??_setRF_Initialization
  8990  1EA5  0820               	movf	??_setRF_Initialization,w
  8991  1EA6  0021               	movlb	1	; select bank1
  8992  1EA7  00D6               	movwf	_Tx_Length^(0+128)
  8993                           
  8994                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  8995  1EA8  3014               	movlw	20
  8996  1EA9  00C5               	movwf	(_RF1^(0+128)+7)
  8997  1EAA  3000               	movlw	0
  8998  1EAB  00C6               	movwf	(_RF1^(0+128)+8)
  8999  1EAC  0008               	return
  9000  1EAD                     __end_of_setRF_Initialization:	
  9001                           
  9002                           	psect	text40
  9003  1FEE                     __ptext40:	
  9004 ;; *************** function _Mcu_Initialization *****************
  9005 ;; Defined at:
  9006 ;;		line 30 in file "../src/MCU_B1.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;		None
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;		None
  9011 ;; Return value:  Size  Location     Type
  9012 ;;		None               void
  9013 ;; Registers used:
  9014 ;;		wreg, status,2, status,0, pclath, cstack
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9024 ;;Total ram usage:        0 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    6
  9027 ;; This function calls:
  9028 ;;		_ADC_Set
  9029 ;;		_Fosc_Set
  9030 ;;		_IOC_Set
  9031 ;;		_IO_Set
  9032 ;;		_TMR0_Set
  9033 ;;		_WDT_Set
  9034 ;; This function is called by:
  9035 ;;		_main
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           
  9040                           ;psect for function _Mcu_Initialization
  9041  1FEE                     _Mcu_Initialization:	
  9042                           
  9043                           ;MCU_B1.c: 32: Fosc_Set();
  9044                           
  9045                           ;incstack = 0
  9046                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9047  1FEE  319E  2650  319F   	fcall	_Fosc_Set
  9048                           
  9049                           ;MCU_B1.c: 34: IO_Set();
  9050  1FF1  3191  2113  319F   	fcall	_IO_Set
  9051                           
  9052                           ;MCU_B1.c: 36: TMR0_Set();
  9053  1FF4  319E  266C  319F   	fcall	_TMR0_Set
  9054                           
  9055                           ;MCU_B1.c: 38: ;;
  9056                           ;MCU_B1.c: 40: ADC_Set();
  9057  1FF7  319E  2665  319F   	fcall	_ADC_Set
  9058                           
  9059                           ;MCU_B1.c: 44: ;;
  9060                           ;MCU_B1.c: 46: IOC_Set();
  9061  1FFA  3190  2066  319F   	fcall	_IOC_Set
  9062                           
  9063                           ;MCU_B1.c: 48: ;;
  9064                           ;MCU_B1.c: 50: ;;
  9065                           ;MCU_B1.c: 52: WDT_Set();
  9066  1FFD  319E  2697         	fcall	_WDT_Set
  9067  1FFF  0008               	return
  9068  2000                     __end_of_Mcu_Initialization:	
  9069                           
  9070                           	psect	text41
  9071  1E97                     __ptext41:	
  9072 ;; *************** function _WDT_Set *****************
  9073 ;; Defined at:
  9074 ;;		line 902 in file "../src/MCU_B1.c"
  9075 ;; Parameters:    Size  Location     Type
  9076 ;;		None
  9077 ;; Auto vars:     Size  Location     Type
  9078 ;;		None
  9079 ;; Return value:  Size  Location     Type
  9080 ;;		None               void
  9081 ;; Registers used:
  9082 ;;		wreg
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9092 ;;Total ram usage:        1 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; Hardware stack levels required when called:    5
  9095 ;; This function calls:
  9096 ;;		Nothing
  9097 ;; This function is called by:
  9098 ;;		_Mcu_Initialization
  9099 ;; This function uses a non-reentrant model
  9100 ;;
  9101                           
  9102                           
  9103                           ;psect for function _WDT_Set
  9104  1E97                     _WDT_Set:	
  9105                           
  9106                           ;MCU_B1.c: 903: WDTCON = 0b00010111;;
  9107                           
  9108                           ;incstack = 0
  9109                           ; Regs used in _WDT_Set: [wreg]
  9110  1E97  3017               	movlw	23
  9111  1E98  0021               	movlb	1	; select bank1
  9112  1E99  0097               	movwf	23	;volatile
  9113                           
  9114                           ;MCU_B1.c: 904: WDT.Enable = 1;
  9115  1E9A  144C               	bsf	_WDT^(0+128),0
  9116                           
  9117                           ;MCU_B1.c: 905: WDT.Count = 10;
  9118  1E9B  300A               	movlw	10
  9119  1E9C  0020               	movlb	0	; select bank0
  9120  1E9D  00A0               	movwf	??_WDT_Set
  9121  1E9E  0820               	movf	??_WDT_Set,w
  9122  1E9F  0021               	movlb	1	; select bank1
  9123  1EA0  00CD               	movwf	(_WDT^(0+128)+1)
  9124  1EA1  0008               	return
  9125  1EA2                     __end_of_WDT_Set:	
  9126                           
  9127                           	psect	text42
  9128  1E6C                     __ptext42:	
  9129 ;; *************** function _TMR0_Set *****************
  9130 ;; Defined at:
  9131 ;;		line 126 in file "../src/MCU_B1.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;		None
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;		None
  9136 ;; Return value:  Size  Location     Type
  9137 ;;		None               void
  9138 ;; Registers used:
  9139 ;;		wreg, status,2
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;Total ram usage:        0 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    5
  9152 ;; This function calls:
  9153 ;;		Nothing
  9154 ;; This function is called by:
  9155 ;;		_Mcu_Initialization
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           
  9160                           ;psect for function _TMR0_Set
  9161  1E6C                     _TMR0_Set:	
  9162                           
  9163                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
  9164                           
  9165                           ;incstack = 0
  9166                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9167  1E6C  0021               	movlb	1	; select bank1
  9168  1E6D  0195               	clrf	21	;volatile
  9169                           
  9170                           ;MCU_B1.c: 129: TMR0 = (256-190);
  9171  1E6E  3042               	movlw	66
  9172  1E6F  0020               	movlb	0	; select bank0
  9173  1E70  0095               	movwf	21	;volatile
  9174                           
  9175                           ;MCU_B1.c: 130: TMR0IE = 1;
  9176  1E71  168B               	bsf	11,5	;volatile
  9177                           
  9178                           ;MCU_B1.c: 131: GIE = 1;
  9179  1E72  178B               	bsf	11,7	;volatile
  9180  1E73  0008               	return
  9181  1E74                     __end_of_TMR0_Set:	
  9182                           
  9183                           	psect	text43
  9184  1113                     __ptext43:	
  9185 ;; *************** function _IO_Set *****************
  9186 ;; Defined at:
  9187 ;;		line 60 in file "../src/MCU_B1.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;		None
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;		None
  9192 ;; Return value:  Size  Location     Type
  9193 ;;		None               void
  9194 ;; Registers used:
  9195 ;;		wreg, status,2
  9196 ;; Tracked objects:
  9197 ;;		On entry : 0/0
  9198 ;;		On exit  : 0/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;Total ram usage:        0 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:    5
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		_Mcu_Initialization
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           
  9216                           ;psect for function _IO_Set
  9217  1113                     _IO_Set:	
  9218                           
  9219                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9220                           
  9221                           ;incstack = 0
  9222                           ; Regs used in _IO_Set: [wreg+status,2]
  9223  1113  3077               	movlw	119
  9224  1114  0021               	movlb	1	; select bank1
  9225  1115  008C               	movwf	12	;volatile
  9226                           
  9227                           ;MCU_B1.c: 89: TRISB = 0b00000101;;
  9228  1116  3005               	movlw	5
  9229  1117  008D               	movwf	13	;volatile
  9230                           
  9231                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9232  1118  300C               	movlw	12
  9233  1119  008E               	movwf	14	;volatile
  9234                           
  9235                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9236  111A  0022               	movlb	2	; select bank2
  9237  111B  018C               	clrf	12	;volatile
  9238                           
  9239                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9240  111C  018D               	clrf	13	;volatile
  9241                           
  9242                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9243  111D  018E               	clrf	14	;volatile
  9244                           
  9245                           ;MCU_B1.c: 94: ANSELA = 0b00000010;;
  9246  111E  3002               	movlw	2
  9247  111F  0023               	movlb	3	; select bank3
  9248  1120  008C               	movwf	12	;volatile
  9249                           
  9250                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9251  1121  018D               	clrf	13	;volatile
  9252                           
  9253                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9254  1122  018E               	clrf	14	;volatile
  9255                           
  9256                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9257  1123  3077               	movlw	119
  9258  1124  0020               	movlb	0	; select bank0
  9259  1125  008C               	movwf	12	;volatile
  9260                           
  9261                           ;MCU_B1.c: 98: PORTB = 0b00000101;;
  9262  1126  3005               	movlw	5
  9263  1127  008D               	movwf	13	;volatile
  9264                           
  9265                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9266  1128  300C               	movlw	12
  9267  1129  008E               	movwf	14	;volatile
  9268  112A  0008               	return
  9269  112B                     __end_of_IO_Set:	
  9270                           
  9271                           	psect	text44
  9272  1066                     __ptext44:	
  9273 ;; *************** function _IOC_Set *****************
  9274 ;; Defined at:
  9275 ;;		line 264 in file "../src/MCU_B1.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;		None
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;		None
  9280 ;; Return value:  Size  Location     Type
  9281 ;;		None               void
  9282 ;; Registers used:
  9283 ;;		wreg, status,2
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;Total ram usage:        0 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; Hardware stack levels required when called:    5
  9296 ;; This function calls:
  9297 ;;		Nothing
  9298 ;; This function is called by:
  9299 ;;		_Mcu_Initialization
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           
  9304                           ;psect for function _IOC_Set
  9305  1066                     _IOC_Set:	
  9306                           
  9307                           ;MCU_B1.c: 265: WPUB2 = 0;
  9308                           
  9309                           ;incstack = 0
  9310                           ; Regs used in _IOC_Set: [wreg+status,2]
  9311  1066  0024               	movlb	4	; select bank4
  9312  1067  110D               	bcf	13,2	;volatile
  9313                           
  9314                           ;MCU_B1.c: 268: IOCBP = 0b00000100;
  9315  1068  3004               	movlw	4
  9316  1069  0027               	movlb	7	; select bank7
  9317  106A  0094               	movwf	20	;volatile
  9318                           
  9319                           ;MCU_B1.c: 269: IOCBN = 0b00000100;
  9320  106B  3004               	movlw	4
  9321  106C  0095               	movwf	21	;volatile
  9322                           
  9323                           ;MCU_B1.c: 289: IOCBF = 0b00000000;
  9324  106D  0196               	clrf	22	;volatile
  9325                           
  9326                           ;MCU_B1.c: 291: IOCIE = 1;
  9327  106E  158B               	bsf	11,3	;volatile
  9328                           
  9329                           ;MCU_B1.c: 292: IOCIF = 0;
  9330  106F  100B               	bcf	11,0	;volatile
  9331                           
  9332                           ;MCU_B1.c: 293: PEIE = 1;
  9333  1070  170B               	bsf	11,6	;volatile
  9334                           
  9335                           ;MCU_B1.c: 294: GIE = 1;
  9336  1071  178B               	bsf	11,7	;volatile
  9337  1072  0008               	return
  9338  1073                     __end_of_IOC_Set:	
  9339                           
  9340                           	psect	text45
  9341  1E50                     __ptext45:	
  9342 ;; *************** function _Fosc_Set *****************
  9343 ;; Defined at:
  9344 ;;		line 56 in file "../src/MCU_B1.c"
  9345 ;; Parameters:    Size  Location     Type
  9346 ;;		None
  9347 ;; Auto vars:     Size  Location     Type
  9348 ;;		None
  9349 ;; Return value:  Size  Location     Type
  9350 ;;		None               void
  9351 ;; Registers used:
  9352 ;;		wreg
  9353 ;; Tracked objects:
  9354 ;;		On entry : 0/0
  9355 ;;		On exit  : 0/0
  9356 ;;		Unchanged: 0/0
  9357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;Total ram usage:        0 bytes
  9363 ;; Hardware stack levels used:    1
  9364 ;; Hardware stack levels required when called:    5
  9365 ;; This function calls:
  9366 ;;		Nothing
  9367 ;; This function is called by:
  9368 ;;		_Mcu_Initialization
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           
  9373                           ;psect for function _Fosc_Set
  9374  1E50                     _Fosc_Set:	
  9375                           
  9376                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9377                           
  9378                           ;incstack = 0
  9379                           ; Regs used in _Fosc_Set: [wreg]
  9380  1E50  3078               	movlw	120
  9381  1E51  0021               	movlb	1	; select bank1
  9382  1E52  0099               	movwf	25	;volatile
  9383  1E53  0008               	return
  9384  1E54                     __end_of_Fosc_Set:	
  9385                           
  9386                           	psect	text46
  9387  1E65                     __ptext46:	
  9388 ;; *************** function _ADC_Set *****************
  9389 ;; Defined at:
  9390 ;;		line 316 in file "../src/MCU_B1.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;		None
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;		None
  9395 ;; Return value:  Size  Location     Type
  9396 ;;		None               void
  9397 ;; Registers used:
  9398 ;;		wreg
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;Total ram usage:        0 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    5
  9411 ;; This function calls:
  9412 ;;		Nothing
  9413 ;; This function is called by:
  9414 ;;		_Mcu_Initialization
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           
  9419                           ;psect for function _ADC_Set
  9420  1E65                     _ADC_Set:	
  9421                           
  9422                           ;MCU_B1.c: 317: ADCON1 = 0xf2;
  9423                           
  9424                           ;incstack = 0
  9425                           ; Regs used in _ADC_Set: [wreg]
  9426  1E65  30F2               	movlw	242
  9427  1E66  0021               	movlb	1	; select bank1
  9428  1E67  009E               	movwf	30	;volatile
  9429                           
  9430                           ;MCU_B1.c: 318: FVRCON = 0xc0;
  9431  1E68  30C0               	movlw	192
  9432  1E69  0022               	movlb	2	; select bank2
  9433  1E6A  0097               	movwf	23	;volatile
  9434  1E6B  0008               	return
  9435  1E6C                     __end_of_ADC_Set:	
  9436                           
  9437                           	psect	text47
  9438  1F8B                     __ptext47:	
  9439 ;; *************** function _LED_Main *****************
  9440 ;; Defined at:
  9441 ;;		line 47 in file "../src/LED_B1.c"
  9442 ;; Parameters:    Size  Location     Type
  9443 ;;		None
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;		None
  9446 ;; Return value:  Size  Location     Type
  9447 ;;		None               void
  9448 ;; Registers used:
  9449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9450 ;; Tracked objects:
  9451 ;;		On entry : 0/0
  9452 ;;		On exit  : 0/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;Total ram usage:        0 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; Hardware stack levels required when called:    7
  9462 ;; This function calls:
  9463 ;;		_setLED_Main
  9464 ;; This function is called by:
  9465 ;;		_main
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           
  9470                           ;psect for function _LED_Main
  9471  1F8B                     _LED_Main:	
  9472                           
  9473                           ;LED_B1.c: 49: setLED_Main(1);
  9474                           
  9475                           ;incstack = 0
  9476                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9477  1F8B  3001               	movlw	1
  9478  1F8C  3197  2708  319F   	fcall	_setLED_Main
  9479                           
  9480                           ;LED_B1.c: 52: setLED_Main(2);
  9481  1F8F  3002               	movlw	2
  9482  1F90  3197  2708  319F   	fcall	_setLED_Main
  9483                           
  9484                           ;LED_B1.c: 55: setLED_Main(3);
  9485  1F93  3003               	movlw	3
  9486  1F94  3197  2708  319F   	fcall	_setLED_Main
  9487                           
  9488                           ;LED_B1.c: 58: setLED_Main(99);
  9489  1F97  3063               	movlw	99
  9490  1F98  3197  2708         	fcall	_setLED_Main
  9491  1F9A  0008               	return
  9492  1F9B                     __end_of_LED_Main:	
  9493                           
  9494                           	psect	text48
  9495  1708                     __ptext48:	
  9496 ;; *************** function _setLED_Main *****************
  9497 ;; Defined at:
  9498 ;;		line 192 in file "../src/LED_B1.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  led             1    wreg     unsigned char 
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;  led             1    3[BANK0 ] unsigned char 
  9503 ;; Return value:  Size  Location     Type
  9504 ;;		None               void
  9505 ;; Registers used:
  9506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;Total ram usage:        3 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    6
  9519 ;; This function calls:
  9520 ;;		_LedPointSelect
  9521 ;; This function is called by:
  9522 ;;		_LED_Main
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           
  9527                           ;psect for function _setLED_Main
  9528  1708                     _setLED_Main:	
  9529                           
  9530                           ;incstack = 0
  9531                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9532                           ;setLED_Main@led stored from wreg
  9533  1708  0020               	movlb	0	; select bank0
  9534  1709  00A3               	movwf	setLED_Main@led
  9535                           
  9536                           ;LED_B1.c: 193: LedPointSelect(led);
  9537  170A  0823               	movf	setLED_Main@led,w
  9538  170B  3193  2337  3197   	fcall	_LedPointSelect
  9539                           
  9540                           ;LED_B1.c: 194: if (LED->GO == 1) {
  9541  170E  0870               	movf	_LED,w
  9542  170F  0086               	movwf	6
  9543  1710  0871               	movf	_LED+1,w
  9544  1711  0087               	movwf	7
  9545  1712  1C81               	btfss	1,1
  9546  1713  0008               	return
  9547                           
  9548                           ;LED_B1.c: 195: LED->Time++;
  9549  1714  0870               	movf	_LED,w
  9550  1715  0086               	movwf	6
  9551  1716  0871               	movf	_LED+1,w
  9552  1717  0087               	movwf	7
  9553  1718  3141               	addfsr 1,1
  9554  1719  3001               	movlw	1
  9555  171A  0781               	addwf	1,f
  9556  171B  3141               	addfsr 1,1
  9557  171C  1803               	skipnc
  9558  171D  0A81               	incf	1,f
  9559                           
  9560                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  9561  171E  0870               	movf	_LED,w
  9562  171F  0086               	movwf	6
  9563  1720  0871               	movf	_LED+1,w
  9564  1721  0087               	movwf	7
  9565  1722  3141               	addfsr 1,1
  9566  1723  3F40               	moviw [0]fsr1
  9567  1724  0020               	movlb	0	; select bank0
  9568  1725  00A1               	movwf	??_setLED_Main
  9569  1726  3F41               	moviw [1]fsr1
  9570  1727  00A2               	movwf	??_setLED_Main+1
  9571  1728  3000               	movlw	0
  9572  1729  0222               	subwf	??_setLED_Main+1,w
  9573  172A  3032               	movlw	50
  9574  172B  1903               	skipnz
  9575  172C  0221               	subwf	??_setLED_Main,w
  9576  172D  1C03               	skipc
  9577  172E  0008               	return
  9578                           
  9579                           ;LED_B1.c: 197: LED->Time = 0;
  9580  172F  0870               	movf	_LED,w
  9581  1730  0086               	movwf	6
  9582  1731  0871               	movf	_LED+1,w
  9583  1732  0087               	movwf	7
  9584  1733  3141               	addfsr 1,1
  9585  1734  3000               	movlw	0
  9586  1735  3FC0               	movwi [0]fsr1
  9587  1736  3FC1               	movwi [1]fsr1
  9588                           
  9589                           ;LED_B1.c: 199: if (led == 1) {
  9590  1737  0823               	movf	setLED_Main@led,w
  9591  1738  3A01               	xorlw	1
  9592  1739  1D03               	skipz
  9593  173A  2F3E               	goto	l9181
  9594                           
  9595                           ;LED_B1.c: 200: RC7 = RC7 == 1 ? 0 : 1;
  9596  173B  3080               	movlw	128
  9597  173C  068E               	xorwf	14,f
  9598                           
  9599                           ;LED_B1.c: 201: }
  9600  173D  0008               	return
  9601  173E                     l9181:	
  9602                           
  9603                           ;LED_B1.c: 204: else if (led == 2) {
  9604  173E  0823               	movf	setLED_Main@led,w
  9605  173F  3A02               	xorlw	2
  9606  1740  1D03               	skipz
  9607  1741  2F45               	goto	l9185
  9608                           
  9609                           ;LED_B1.c: 205: RA3 = RA3 == 1 ? 0 : 1;
  9610  1742  3008               	movlw	8
  9611  1743  068C               	xorwf	12,f
  9612                           
  9613                           ;LED_B1.c: 206: }
  9614  1744  0008               	return
  9615  1745                     l9185:	
  9616                           
  9617                           ;LED_B1.c: 209: else if (led == 3) {
  9618  1745  0823               	movf	setLED_Main@led,w
  9619  1746  3A03               	xorlw	3
  9620  1747  1D03               	skipz
  9621  1748  2F4C               	goto	l9189
  9622                           
  9623                           ;LED_B1.c: 210: RC6 = RC6 == 1 ? 0 : 1;
  9624  1749  3040               	movlw	64
  9625  174A  068E               	xorwf	14,f
  9626                           
  9627                           ;LED_B1.c: 211: }
  9628  174B  0008               	return
  9629  174C                     l9189:	
  9630                           
  9631                           ;LED_B1.c: 214: else if (led == 99) {
  9632  174C  0823               	movf	setLED_Main@led,w
  9633  174D  3A63               	xorlw	99
  9634  174E  1D03               	skipz
  9635  174F  0008               	return
  9636                           
  9637                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
  9638  1750  3020               	movlw	32
  9639  1751  068D               	xorwf	13,f
  9640  1752  0008               	return
  9641  1753                     __end_of_setLED_Main:	
  9642                           
  9643                           	psect	text49
  9644  1F7B                     __ptext49:	
  9645 ;; *************** function _LED_Initialization *****************
  9646 ;; Defined at:
  9647 ;;		line 31 in file "../src/LED_B1.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;		None
  9652 ;; Return value:  Size  Location     Type
  9653 ;;		None               void
  9654 ;; Registers used:
  9655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;Total ram usage:        0 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    8
  9668 ;; This function calls:
  9669 ;;		_setLED_Initialization
  9670 ;; This function is called by:
  9671 ;;		_main
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           
  9676                           ;psect for function _LED_Initialization
  9677  1F7B                     _LED_Initialization:	
  9678                           
  9679                           ;LED_B1.c: 33: setLED_Initialization(1);
  9680                           
  9681                           ;incstack = 0
  9682                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9683  1F7B  3001               	movlw	1
  9684  1F7C  319F  27BB  319F   	fcall	_setLED_Initialization
  9685                           
  9686                           ;LED_B1.c: 36: setLED_Initialization(2);
  9687  1F7F  3002               	movlw	2
  9688  1F80  319F  27BB  319F   	fcall	_setLED_Initialization
  9689                           
  9690                           ;LED_B1.c: 39: setLED_Initialization(3);
  9691  1F83  3003               	movlw	3
  9692  1F84  319F  27BB  319F   	fcall	_setLED_Initialization
  9693                           
  9694                           ;LED_B1.c: 42: setLED_Initialization(99);
  9695  1F87  3063               	movlw	99
  9696  1F88  319F  27BB         	fcall	_setLED_Initialization
  9697  1F8A  0008               	return
  9698  1F8B                     __end_of_LED_Initialization:	
  9699                           
  9700                           	psect	text50
  9701  1FBB                     __ptext50:	
  9702 ;; *************** function _setLED_Initialization *****************
  9703 ;; Defined at:
  9704 ;;		line 63 in file "../src/LED_B1.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  led             1    wreg     unsigned char 
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;  led             1    3[BANK0 ] unsigned char 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;		None               void
  9711 ;; Registers used:
  9712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;Total ram usage:        1 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    7
  9725 ;; This function calls:
  9726 ;;		_LedPointSelect
  9727 ;;		_setLED
  9728 ;; This function is called by:
  9729 ;;		_LED_Initialization
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           
  9734                           ;psect for function _setLED_Initialization
  9735  1FBB                     _setLED_Initialization:	
  9736                           
  9737                           ;incstack = 0
  9738                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9739                           ;setLED_Initialization@led stored from wreg
  9740  1FBB  0020               	movlb	0	; select bank0
  9741  1FBC  00A3               	movwf	setLED_Initialization@led
  9742                           
  9743                           ;LED_B1.c: 64: LedPointSelect(led);
  9744  1FBD  0823               	movf	setLED_Initialization@led,w
  9745  1FBE  3193  2337  319F   	fcall	_LedPointSelect
  9746                           
  9747                           ;LED_B1.c: 65: LED->Enable = 1;
  9748  1FC1  0870               	movf	_LED,w
  9749  1FC2  0086               	movwf	6
  9750  1FC3  0871               	movf	_LED+1,w
  9751  1FC4  0087               	movwf	7
  9752  1FC5  1401               	bsf	1,0
  9753                           
  9754                           ;LED_B1.c: 66: setLED(led, 0);
  9755  1FC6  0020               	movlb	0	; select bank0
  9756  1FC7  01A1               	clrf	setLED@command
  9757  1FC8  0823               	movf	setLED_Initialization@led,w
  9758  1FC9  318B  23A9         	fcall	_setLED
  9759  1FCB  0008               	return
  9760  1FCC                     __end_of_setLED_Initialization:	
  9761                           
  9762                           	psect	text51
  9763  1209                     __ptext51:	
  9764 ;; *************** function _Flash_Memory_Main *****************
  9765 ;; Defined at:
  9766 ;;		line 797 in file "../src/MCU_B1.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;		None
  9771 ;; Return value:  Size  Location     Type
  9772 ;;		None               void
  9773 ;; Registers used:
  9774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;Total ram usage:        0 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    8
  9787 ;; This function calls:
  9788 ;;		_Flash_Memory_Modify
  9789 ;; This function is called by:
  9790 ;;		_main
  9791 ;; This function uses a non-reentrant model
  9792 ;;
  9793                           
  9794                           
  9795                           ;psect for function _Flash_Memory_Main
  9796  1209                     _Flash_Memory_Main:	
  9797                           
  9798                           ;MCU_B1.c: 798: if (Memory.GO == 1) {
  9799                           
  9800                           ;incstack = 0
  9801                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9802  1209  0023               	movlb	3	; select bank3
  9803  120A  1CC4               	btfss	(_Memory^(0+384)+36),1
  9804  120B  0008               	return
  9805                           
  9806                           ;MCU_B1.c: 799: if (Memory.Modify == 1) {
  9807  120C  1C44               	btfss	(_Memory^(0+384)+36),0
  9808  120D  2A26               	goto	l1427
  9809                           
  9810                           ;MCU_B1.c: 800: Memory.Time++;
  9811  120E  3001               	movlw	1
  9812  120F  07C2               	addwf	(_Memory^(0+384)+34),f
  9813  1210  3000               	movlw	0
  9814  1211  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9815                           
  9816                           ;MCU_B1.c: 801: if (Memory.Time == 25)
  9817  1212  3022               	movlw	34
  9818  1213  3EA0               	addlw	_Memory& (0+255)
  9819  1214  0086               	movwf	6
  9820  1215  3001               	movlw	1	; select bank3/4
  9821  1216  0087               	movwf	7
  9822  1217  3F40               	moviw [0]fsr1
  9823  1218  3A19               	xorlw	25
  9824  1219  1D03               	skipz
  9825  121A  2A1D               	goto	u10365
  9826  121B  3F41               	moviw [1]fsr1
  9827  121C  3A00               	xorlw	0
  9828  121D                     u10365:	
  9829  121D  1D03               	skipz
  9830  121E  0008               	return
  9831                           
  9832                           ;MCU_B1.c: 802: {
  9833                           ;MCU_B1.c: 803: Memory.Time = 0;
  9834  121F  01C2               	clrf	(_Memory^(0+384)+34)
  9835  1220  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9836                           
  9837                           ;MCU_B1.c: 804: Memory.Modify = 0;
  9838  1221  1044               	bcf	(_Memory^(0+384)+36),0
  9839                           
  9840                           ;MCU_B1.c: 805: Memory.GO = 0;
  9841  1222  10C4               	bcf	(_Memory^(0+384)+36),1
  9842                           
  9843                           ;MCU_B1.c: 806: Flash_Memory_Modify();
  9844  1223  3196  2634         	fcall	_Flash_Memory_Modify
  9845                           
  9846                           ;MCU_B1.c: 807: }
  9847                           ;MCU_B1.c: 808: } else {
  9848  1225  0008               	return
  9849  1226                     l1427:	
  9850                           
  9851                           ;MCU_B1.c: 809: Memory.GO = 0;
  9852  1226  10C4               	bcf	(_Memory^(0+384)+36),1
  9853  1227  0008               	return
  9854  1228                     __end_of_Flash_Memory_Main:	
  9855                           
  9856                           	psect	text52
  9857  1634                     __ptext52:	
  9858 ;; *************** function _Flash_Memory_Modify *****************
  9859 ;; Defined at:
  9860 ;;		line 866 in file "../src/MCU_B1.c"
  9861 ;; Parameters:    Size  Location     Type
  9862 ;;		None
  9863 ;; Auto vars:     Size  Location     Type
  9864 ;;  i               1    5[BANK0 ] unsigned char 
  9865 ;; Return value:  Size  Location     Type
  9866 ;;		None               void
  9867 ;; Registers used:
  9868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9869 ;; Tracked objects:
  9870 ;;		On entry : 0/0
  9871 ;;		On exit  : 0/0
  9872 ;;		Unchanged: 0/0
  9873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;Total ram usage:        2 bytes
  9879 ;; Hardware stack levels used:    1
  9880 ;; Hardware stack levels required when called:    7
  9881 ;; This function calls:
  9882 ;;		_Flash_Memory_Erasing
  9883 ;;		_Flash_Memory_Read
  9884 ;;		_Flash_Memory_Write
  9885 ;; This function is called by:
  9886 ;;		_Flash_Memory_Main
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           
  9891                           ;psect for function _Flash_Memory_Modify
  9892  1634                     _Flash_Memory_Modify:	
  9893                           
  9894                           ;MCU_B1.c: 867: char i = 0;
  9895                           
  9896                           ;incstack = 0
  9897                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9898  1634  0020               	movlb	0	; select bank0
  9899  1635  01A5               	clrf	Flash_Memory_Modify@i
  9900                           
  9901                           ;MCU_B1.c: 868: for (i = 0; i < 32; i++) {
  9902  1636  01A5               	clrf	Flash_Memory_Modify@i
  9903  1637  3020               	movlw	32
  9904  1638  0225               	subwf	Flash_Memory_Modify@i,w
  9905  1639  1803               	btfsc	3,0
  9906  163A  2E50               	goto	l9251
  9907  163B                     l9245:	
  9908                           
  9909                           ;MCU_B1.c: 869: Memory.Data[i] = Flash_Memory_Read(i);
  9910  163B  0825               	movf	Flash_Memory_Modify@i,w
  9911  163C  3191  215E  3196   	fcall	_Flash_Memory_Read
  9912  163F  0020               	movlb	0	; select bank0
  9913  1640  00A4               	movwf	??_Flash_Memory_Modify
  9914  1641  0825               	movf	Flash_Memory_Modify@i,w
  9915  1642  3EA0               	addlw	_Memory& (0+255)
  9916  1643  0086               	movwf	6
  9917  1644  3001               	movlw	1	; select bank3/4
  9918  1645  0087               	movwf	7
  9919  1646  0824               	movf	??_Flash_Memory_Modify,w
  9920  1647  0081               	movwf	1
  9921  1648  3001               	movlw	1
  9922  1649  00A4               	movwf	??_Flash_Memory_Modify
  9923  164A  0824               	movf	??_Flash_Memory_Modify,w
  9924  164B  07A5               	addwf	Flash_Memory_Modify@i,f
  9925  164C  3020               	movlw	32
  9926  164D  0225               	subwf	Flash_Memory_Modify@i,w
  9927  164E  1C03               	skipc
  9928  164F  2E3B               	goto	l9245
  9929  1650                     l9251:	
  9930                           
  9931                           ;MCU_B1.c: 870: }
  9932                           ;MCU_B1.c: 871: Memory.Data[0]=product->Data[12];
  9933  1650  086D               	movf	_product,w
  9934  1651  0086               	movwf	6
  9935  1652  3002               	movlw	2	; select bank4/5
  9936  1653  0087               	movwf	7
  9937  1654  3002               	movlw	2	; select bank4/5
  9938  1655  3F4C               	moviw [12]fsr1
  9939  1656  0023               	movlb	3	; select bank3
  9940  1657  00A0               	movwf	_Memory^(0+384)
  9941                           
  9942                           ;MCU_B1.c: 872: Memory.Data[1]=product->Data[13];
  9943  1658  0020               	movlb	0	; select bank0
  9944  1659  086D               	movf	_product,w
  9945  165A  0086               	movwf	6
  9946  165B  3002               	movlw	2	; select bank4/5
  9947  165C  0087               	movwf	7
  9948  165D  3002               	movlw	2	; select bank4/5
  9949  165E  3F4D               	moviw [13]fsr1
  9950  165F  0023               	movlb	3	; select bank3
  9951  1660  00A1               	movwf	(_Memory^(0+384)+1)
  9952                           
  9953                           ;MCU_B1.c: 873: Memory.Data[2]=product->Data[14];
  9954  1661  0020               	movlb	0	; select bank0
  9955  1662  086D               	movf	_product,w
  9956  1663  0086               	movwf	6
  9957  1664  3002               	movlw	2	; select bank4/5
  9958  1665  0087               	movwf	7
  9959  1666  3002               	movlw	2	; select bank4/5
  9960  1667  3F4E               	moviw [14]fsr1
  9961  1668  0023               	movlb	3	; select bank3
  9962  1669  00A2               	movwf	(_Memory^(0+384)+2)
  9963                           
  9964                           ;MCU_B1.c: 879: if (Memory.LoopSave == 1) {
  9965  166A  1D44               	btfss	(_Memory^(0+384)+36),2
  9966  166B  2E70               	goto	l1449
  9967                           
  9968                           ;MCU_B1.c: 880: Memory.LoopSave = 0;
  9969  166C  1144               	bcf	(_Memory^(0+384)+36),2
  9970                           
  9971                           ;MCU_B1.c: 881: myMain.FirstOpen = 0;
  9972  166D  0021               	movlb	1	; select bank1
  9973  166E  12A0               	bcf	_myMain^(0+128),5
  9974                           
  9975                           ;MCU_B1.c: 882: myMain.First = 0;
  9976  166F  13A0               	bcf	_myMain^(0+128),7
  9977  1670                     l1449:	
  9978                           
  9979                           ;MCU_B1.c: 884: }
  9980                           ;MCU_B1.c: 885: GIE = 0;
  9981  1670  138B               	bcf	11,7	;volatile
  9982                           
  9983                           ;MCU_B1.c: 886: Flash_Memory_Erasing();
  9984  1671  319E  26DD  3196   	fcall	_Flash_Memory_Erasing
  9985                           
  9986                           ;MCU_B1.c: 887: Flash_Memory_Write();
  9987  1674  3194  2460         	fcall	_Flash_Memory_Write
  9988                           
  9989                           ;MCU_B1.c: 888: GIE = 1;
  9990  1676  178B               	bsf	11,7	;volatile
  9991  1677  0008               	return
  9992  1678                     __end_of_Flash_Memory_Modify:	
  9993                           
  9994                           	psect	text53
  9995  1EDD                     __ptext53:	
  9996 ;; *************** function _Flash_Memory_Erasing *****************
  9997 ;; Defined at:
  9998 ;;		line 855 in file "../src/MCU_B1.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;		None
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;		None
 10003 ;; Return value:  Size  Location     Type
 10004 ;;		None               void
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0, pclath, cstack
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;Total ram usage:        0 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    6
 10019 ;; This function calls:
 10020 ;;		_Flash_Memory_Unlock
 10021 ;; This function is called by:
 10022 ;;		_Flash_Memory_Modify
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           
 10027                           ;psect for function _Flash_Memory_Erasing
 10028  1EDD                     _Flash_Memory_Erasing:	
 10029                           
 10030                           ;MCU_B1.c: 856: CFGS = 0;
 10031                           
 10032                           ;incstack = 0
 10033                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10034  1EDD  0023               	movlb	3	; select bank3
 10035  1EDE  1315               	bcf	21,6	;volatile
 10036                           
 10037                           ;MCU_B1.c: 857: PMADRH = 0x30;
 10038  1EDF  3030               	movlw	48
 10039  1EE0  0092               	movwf	18	;volatile
 10040                           
 10041                           ;MCU_B1.c: 858: PMADRL = 0x00;
 10042  1EE1  0191               	clrf	17	;volatile
 10043                           
 10044                           ;MCU_B1.c: 859: FREE = 1;
 10045  1EE2  1615               	bsf	21,4	;volatile
 10046                           
 10047                           ;MCU_B1.c: 860: WREN = 1;
 10048  1EE3  1515               	bsf	21,2	;volatile
 10049                           
 10050                           ;MCU_B1.c: 861: Flash_Memory_Unlock();
 10051  1EE4  319E  2684         	fcall	_Flash_Memory_Unlock
 10052                           
 10053                           ;MCU_B1.c: 862: WREN = 0;
 10054  1EE6  0023               	movlb	3	; select bank3
 10055  1EE7  1115               	bcf	21,2	;volatile
 10056  1EE8  0008               	return
 10057  1EE9                     __end_of_Flash_Memory_Erasing:	
 10058                           
 10059                           	psect	text54
 10060  0532                     __ptext54:	
 10061 ;; *************** function _Flash_Memory_Initialization *****************
 10062 ;; Defined at:
 10063 ;;		line 756 in file "../src/MCU_B1.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;		None
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;  i               1   62[BANK0 ] unsigned char 
 10068 ;; Return value:  Size  Location     Type
 10069 ;;		None               void
 10070 ;; Registers used:
 10071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;Total ram usage:        2 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; Hardware stack levels required when called:    8
 10084 ;; This function calls:
 10085 ;;		_Flash_Memory_Read
 10086 ;;		_Flash_Memory_Write
 10087 ;;		_setPercentValue
 10088 ;; This function is called by:
 10089 ;;		_main
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           
 10094                           ;psect for function _Flash_Memory_Initialization
 10095  0532                     _Flash_Memory_Initialization:	
 10096                           
 10097                           ;MCU_B1.c: 757: char i = 0;
 10098                           
 10099                           ;incstack = 0
 10100                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10101  0532  0020               	movlb	0	; select bank0
 10102  0533  01DE               	clrf	Flash_Memory_Initialization@i
 10103                           
 10104                           ;MCU_B1.c: 758: if (Flash_Memory_Read(31) == 0xaa) {
 10105  0534  301F               	movlw	31
 10106  0535  3191  215E  3185   	fcall	_Flash_Memory_Read
 10107  0538  3AAA               	xorlw	170
 10108  0539  1D03               	skipz
 10109  053A  2DA4               	goto	l9583
 10110                           
 10111                           ;MCU_B1.c: 759: product->Data[12] = Flash_Memory_Read(0);
 10112  053B  3000               	movlw	0
 10113  053C  3191  215E  3185   	fcall	_Flash_Memory_Read
 10114  053F  0020               	movlb	0	; select bank0
 10115  0540  00DD               	movwf	??_Flash_Memory_Initialization
 10116  0541  086D               	movf	_product,w
 10117  0542  3E0C               	addlw	12
 10118  0543  0086               	movwf	6
 10119  0544  3002               	movlw	2	; select bank4/5
 10120  0545  0087               	movwf	7
 10121  0546  085D               	movf	??_Flash_Memory_Initialization,w
 10122  0547  0081               	movwf	1
 10123                           
 10124                           ;MCU_B1.c: 760: product->Data[13] = Flash_Memory_Read(1);
 10125  0548  3001               	movlw	1
 10126  0549  3191  215E  3185   	fcall	_Flash_Memory_Read
 10127  054C  0020               	movlb	0	; select bank0
 10128  054D  00DD               	movwf	??_Flash_Memory_Initialization
 10129  054E  086D               	movf	_product,w
 10130  054F  3E0D               	addlw	13
 10131  0550  0086               	movwf	6
 10132  0551  3002               	movlw	2	; select bank4/5
 10133  0552  0087               	movwf	7
 10134  0553  085D               	movf	??_Flash_Memory_Initialization,w
 10135  0554  0081               	movwf	1
 10136                           
 10137                           ;MCU_B1.c: 761: product->Data[14] = Flash_Memory_Read(2);
 10138  0555  3002               	movlw	2
 10139  0556  3191  215E  3185   	fcall	_Flash_Memory_Read
 10140  0559  0020               	movlb	0	; select bank0
 10141  055A  00DD               	movwf	??_Flash_Memory_Initialization
 10142  055B  086D               	movf	_product,w
 10143  055C  3E0E               	addlw	14
 10144  055D  0086               	movwf	6
 10145  055E  3002               	movlw	2	; select bank4/5
 10146  055F  0087               	movwf	7
 10147  0560  085D               	movf	??_Flash_Memory_Initialization,w
 10148  0561  0081               	movwf	1
 10149                           
 10150                           ;MCU_B1.c: 767: i = setPercentValue(((char)((100-90)*0.8)));
 10151  0562  3008               	movlw	8
 10152  0563  3196  2678  3185   	fcall	_setPercentValue
 10153  0566  0020               	movlb	0	; select bank0
 10154  0567  00DD               	movwf	??_Flash_Memory_Initialization
 10155  0568  085D               	movf	??_Flash_Memory_Initialization,w
 10156  0569  00DE               	movwf	Flash_Memory_Initialization@i
 10157                           
 10158                           ;MCU_B1.c: 768: product->Data[21] = i;
 10159  056A  085E               	movf	Flash_Memory_Initialization@i,w
 10160  056B  00DD               	movwf	??_Flash_Memory_Initialization
 10161  056C  086D               	movf	_product,w
 10162  056D  3E15               	addlw	21
 10163  056E  0086               	movwf	6
 10164  056F  3002               	movlw	2	; select bank4/5
 10165  0570  0087               	movwf	7
 10166  0571  085D               	movf	??_Flash_Memory_Initialization,w
 10167  0572  0081               	movwf	1
 10168                           
 10169                           ;MCU_B1.c: 769: product->Data[22] = i;
 10170  0573  085E               	movf	Flash_Memory_Initialization@i,w
 10171  0574  00DD               	movwf	??_Flash_Memory_Initialization
 10172  0575  086D               	movf	_product,w
 10173  0576  3E16               	addlw	22
 10174  0577  0086               	movwf	6
 10175  0578  3002               	movlw	2	; select bank4/5
 10176  0579  0087               	movwf	7
 10177  057A  085D               	movf	??_Flash_Memory_Initialization,w
 10178  057B  0081               	movwf	1
 10179                           
 10180                           ;MCU_B1.c: 770: product->Data[23] = i;
 10181  057C  085E               	movf	Flash_Memory_Initialization@i,w
 10182  057D  00DD               	movwf	??_Flash_Memory_Initialization
 10183  057E  086D               	movf	_product,w
 10184  057F  3E17               	addlw	23
 10185  0580  0086               	movwf	6
 10186  0581  3002               	movlw	2	; select bank4/5
 10187  0582  0087               	movwf	7
 10188  0583  085D               	movf	??_Flash_Memory_Initialization,w
 10189  0584  0081               	movwf	1
 10190                           
 10191                           ;MCU_B1.c: 772: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10192  0585  086D               	movf	_product,w
 10193  0586  3E0C               	addlw	12
 10194  0587  0086               	movwf	6
 10195  0588  3002               	movlw	2	; select bank4/5
 10196  0589  0087               	movwf	7
 10197  058A  0801               	movf	1,w
 10198  058B  3AFF               	xorlw	255
 10199  058C  1D03               	skipz
 10200  058D  0008               	return
 10201  058E  086D               	movf	_product,w
 10202  058F  3E0D               	addlw	13
 10203  0590  0086               	movwf	6
 10204  0591  3002               	movlw	2	; select bank4/5
 10205  0592  0087               	movwf	7
 10206  0593  0801               	movf	1,w
 10207  0594  3AFF               	xorlw	255
 10208  0595  1D03               	skipz
 10209  0596  0008               	return
 10210  0597  086D               	movf	_product,w
 10211  0598  3E0E               	addlw	14
 10212  0599  0086               	movwf	6
 10213  059A  3002               	movlw	2	; select bank4/5
 10214  059B  0087               	movwf	7
 10215  059C  0801               	movf	1,w
 10216  059D  3AFF               	xorlw	255
 10217  059E  1D03               	skipz
 10218  059F  0008               	return
 10219                           
 10220                           ;MCU_B1.c: 773: myMain.FirstOpen = 1;
 10221  05A0  0021               	movlb	1	; select bank1
 10222  05A1  16A0               	bsf	_myMain^(0+128),5
 10223                           
 10224                           ;MCU_B1.c: 774: myMain.First = 1;
 10225  05A2  17A0               	bsf	_myMain^(0+128),7
 10226                           
 10227                           ;MCU_B1.c: 775: }
 10228                           ;MCU_B1.c: 776: } else {
 10229  05A3  0008               	return
 10230  05A4                     l9583:	
 10231                           
 10232                           ;MCU_B1.c: 777: i = setPercentValue(((char)((100-90)*0.8)));
 10233  05A4  3008               	movlw	8
 10234  05A5  3196  2678  3185   	fcall	_setPercentValue
 10235  05A8  0020               	movlb	0	; select bank0
 10236  05A9  00DD               	movwf	??_Flash_Memory_Initialization
 10237  05AA  085D               	movf	??_Flash_Memory_Initialization,w
 10238  05AB  00DE               	movwf	Flash_Memory_Initialization@i
 10239                           
 10240                           ;MCU_B1.c: 778: Memory.Data[0]=0xff;
 10241  05AC  30FF               	movlw	255
 10242  05AD  00DD               	movwf	??_Flash_Memory_Initialization
 10243  05AE  085D               	movf	??_Flash_Memory_Initialization,w
 10244  05AF  0023               	movlb	3	; select bank3
 10245  05B0  00A0               	movwf	_Memory^(0+384)
 10246                           
 10247                           ;MCU_B1.c: 779: Memory.Data[1]=0xff;
 10248  05B1  30FF               	movlw	255
 10249  05B2  0020               	movlb	0	; select bank0
 10250  05B3  00DD               	movwf	??_Flash_Memory_Initialization
 10251  05B4  085D               	movf	??_Flash_Memory_Initialization,w
 10252  05B5  0023               	movlb	3	; select bank3
 10253  05B6  00A1               	movwf	(_Memory^(0+384)+1)
 10254                           
 10255                           ;MCU_B1.c: 780: Memory.Data[2]=0xff;
 10256  05B7  30FF               	movlw	255
 10257  05B8  0020               	movlb	0	; select bank0
 10258  05B9  00DD               	movwf	??_Flash_Memory_Initialization
 10259  05BA  085D               	movf	??_Flash_Memory_Initialization,w
 10260  05BB  0023               	movlb	3	; select bank3
 10261  05BC  00A2               	movwf	(_Memory^(0+384)+2)
 10262                           
 10263                           ;MCU_B1.c: 781: Memory.Data[3]=0xff;
 10264  05BD  30FF               	movlw	255
 10265  05BE  0020               	movlb	0	; select bank0
 10266  05BF  00DD               	movwf	??_Flash_Memory_Initialization
 10267  05C0  085D               	movf	??_Flash_Memory_Initialization,w
 10268  05C1  0023               	movlb	3	; select bank3
 10269  05C2  00A3               	movwf	(_Memory^(0+384)+3)
 10270                           
 10271                           ;MCU_B1.c: 782: Memory.Data[4]=0xff;
 10272  05C3  30FF               	movlw	255
 10273  05C4  0020               	movlb	0	; select bank0
 10274  05C5  00DD               	movwf	??_Flash_Memory_Initialization
 10275  05C6  085D               	movf	??_Flash_Memory_Initialization,w
 10276  05C7  0023               	movlb	3	; select bank3
 10277  05C8  00A4               	movwf	(_Memory^(0+384)+4)
 10278                           
 10279                           ;MCU_B1.c: 783: Memory.Data[5]=0xff;
 10280  05C9  30FF               	movlw	255
 10281  05CA  0020               	movlb	0	; select bank0
 10282  05CB  00DD               	movwf	??_Flash_Memory_Initialization
 10283  05CC  085D               	movf	??_Flash_Memory_Initialization,w
 10284  05CD  0023               	movlb	3	; select bank3
 10285  05CE  00A5               	movwf	(_Memory^(0+384)+5)
 10286                           
 10287                           ;MCU_B1.c: 784: Memory.Data[31]=0xaa;
 10288  05CF  30AA               	movlw	170
 10289  05D0  0020               	movlb	0	; select bank0
 10290  05D1  00DD               	movwf	??_Flash_Memory_Initialization
 10291  05D2  085D               	movf	??_Flash_Memory_Initialization,w
 10292  05D3  0023               	movlb	3	; select bank3
 10293  05D4  00BF               	movwf	(_Memory^(0+384)+31)
 10294                           
 10295                           ;MCU_B1.c: 785: product->Data[21] = i;
 10296  05D5  0020               	movlb	0	; select bank0
 10297  05D6  085E               	movf	Flash_Memory_Initialization@i,w
 10298  05D7  00DD               	movwf	??_Flash_Memory_Initialization
 10299  05D8  086D               	movf	_product,w
 10300  05D9  3E15               	addlw	21
 10301  05DA  0086               	movwf	6
 10302  05DB  3002               	movlw	2	; select bank4/5
 10303  05DC  0087               	movwf	7
 10304  05DD  085D               	movf	??_Flash_Memory_Initialization,w
 10305  05DE  0081               	movwf	1
 10306                           
 10307                           ;MCU_B1.c: 786: product->Data[22] = i;
 10308  05DF  085E               	movf	Flash_Memory_Initialization@i,w
 10309  05E0  00DD               	movwf	??_Flash_Memory_Initialization
 10310  05E1  086D               	movf	_product,w
 10311  05E2  3E16               	addlw	22
 10312  05E3  0086               	movwf	6
 10313  05E4  3002               	movlw	2	; select bank4/5
 10314  05E5  0087               	movwf	7
 10315  05E6  085D               	movf	??_Flash_Memory_Initialization,w
 10316  05E7  0081               	movwf	1
 10317                           
 10318                           ;MCU_B1.c: 787: product->Data[23] = i;
 10319  05E8  085E               	movf	Flash_Memory_Initialization@i,w
 10320  05E9  00DD               	movwf	??_Flash_Memory_Initialization
 10321  05EA  086D               	movf	_product,w
 10322  05EB  3E17               	addlw	23
 10323  05EC  0086               	movwf	6
 10324  05ED  3002               	movlw	2	; select bank4/5
 10325  05EE  0087               	movwf	7
 10326  05EF  085D               	movf	??_Flash_Memory_Initialization,w
 10327  05F0  0081               	movwf	1
 10328                           
 10329                           ;MCU_B1.c: 788: GIE = 0;
 10330  05F1  138B               	bcf	11,7	;volatile
 10331                           
 10332                           ;MCU_B1.c: 789: Flash_Memory_Write();
 10333  05F2  3194  2460         	fcall	_Flash_Memory_Write
 10334                           
 10335                           ;MCU_B1.c: 790: GIE = 1;
 10336  05F4  178B               	bsf	11,7	;volatile
 10337                           
 10338                           ;MCU_B1.c: 791: myMain.FirstOpen = 1;
 10339  05F5  0021               	movlb	1	; select bank1
 10340  05F6  16A0               	bsf	_myMain^(0+128),5
 10341                           
 10342                           ;MCU_B1.c: 792: myMain.First = 1;
 10343  05F7  17A0               	bsf	_myMain^(0+128),7
 10344  05F8  0008               	return
 10345  05F9                     __end_of_Flash_Memory_Initialization:	
 10346                           
 10347                           	psect	text55
 10348  1460                     __ptext55:	
 10349 ;; *************** function _Flash_Memory_Write *****************
 10350 ;; Defined at:
 10351 ;;		line 836 in file "../src/MCU_B1.c"
 10352 ;; Parameters:    Size  Location     Type
 10353 ;;		None
 10354 ;; Auto vars:     Size  Location     Type
 10355 ;;  i               1    1[BANK0 ] unsigned char 
 10356 ;; Return value:  Size  Location     Type
 10357 ;;		None               void
 10358 ;; Registers used:
 10359 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10360 ;; Tracked objects:
 10361 ;;		On entry : 0/0
 10362 ;;		On exit  : 0/0
 10363 ;;		Unchanged: 0/0
 10364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;Total ram usage:        2 bytes
 10370 ;; Hardware stack levels used:    1
 10371 ;; Hardware stack levels required when called:    6
 10372 ;; This function calls:
 10373 ;;		_Flash_Memory_Unlock
 10374 ;; This function is called by:
 10375 ;;		_Flash_Memory_Initialization
 10376 ;;		_Flash_Memory_Modify
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           
 10381                           ;psect for function _Flash_Memory_Write
 10382  1460                     _Flash_Memory_Write:	
 10383                           
 10384                           ;MCU_B1.c: 837: char i = 0;
 10385                           
 10386                           ;incstack = 0
 10387                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10388  1460  0020               	movlb	0	; select bank0
 10389  1461  01A1               	clrf	Flash_Memory_Write@i
 10390                           
 10391                           ;MCU_B1.c: 838: CFGS = 0;
 10392  1462  0023               	movlb	3	; select bank3
 10393  1463  1315               	bcf	21,6	;volatile
 10394                           
 10395                           ;MCU_B1.c: 839: PMADRH = 0x30;
 10396  1464  3030               	movlw	48
 10397  1465  0092               	movwf	18	;volatile
 10398                           
 10399                           ;MCU_B1.c: 840: PMDATH = 0;
 10400  1466  0194               	clrf	20	;volatile
 10401                           
 10402                           ;MCU_B1.c: 841: FREE = 0;
 10403  1467  1215               	bcf	21,4	;volatile
 10404                           
 10405                           ;MCU_B1.c: 842: LWLO = 1;
 10406  1468  1695               	bsf	21,5	;volatile
 10407                           
 10408                           ;MCU_B1.c: 843: WREN = 1;
 10409  1469  1515               	bsf	21,2	;volatile
 10410                           
 10411                           ;MCU_B1.c: 844: for (i = 0; i < 32; i++) {
 10412  146A  0020               	movlb	0	; select bank0
 10413  146B  01A1               	clrf	Flash_Memory_Write@i
 10414  146C  3020               	movlw	32
 10415  146D  0221               	subwf	Flash_Memory_Write@i,w
 10416  146E  1803               	btfsc	3,0
 10417  146F  2C88               	goto	l1440
 10418  1470                     l8769:	
 10419                           
 10420                           ;MCU_B1.c: 845: PMADRL = i;
 10421  1470  0821               	movf	Flash_Memory_Write@i,w
 10422  1471  0023               	movlb	3	; select bank3
 10423  1472  0091               	movwf	17	;volatile
 10424                           
 10425                           ;MCU_B1.c: 846: PMDATL = Memory.Data[i];
 10426  1473  0020               	movlb	0	; select bank0
 10427  1474  0821               	movf	Flash_Memory_Write@i,w
 10428  1475  3EA0               	addlw	_Memory& (0+255)
 10429  1476  0086               	movwf	6
 10430  1477  3001               	movlw	1	; select bank3/4
 10431  1478  0087               	movwf	7
 10432  1479  0801               	movf	1,w
 10433  147A  0023               	movlb	3	; select bank3
 10434  147B  0093               	movwf	19	;volatile
 10435                           
 10436                           ;MCU_B1.c: 847: Flash_Memory_Unlock();
 10437  147C  319E  2684  3194   	fcall	_Flash_Memory_Unlock
 10438  147F  3001               	movlw	1
 10439  1480  0020               	movlb	0	; select bank0
 10440  1481  00A0               	movwf	??_Flash_Memory_Write
 10441  1482  0820               	movf	??_Flash_Memory_Write,w
 10442  1483  07A1               	addwf	Flash_Memory_Write@i,f
 10443  1484  3020               	movlw	32
 10444  1485  0221               	subwf	Flash_Memory_Write@i,w
 10445  1486  1C03               	skipc
 10446  1487  2C70               	goto	l8769
 10447  1488                     l1440:	
 10448                           
 10449                           ;MCU_B1.c: 848: }
 10450                           ;MCU_B1.c: 849: LWLO = 0;
 10451  1488  0023               	movlb	3	; select bank3
 10452  1489  1295               	bcf	21,5	;volatile
 10453                           
 10454                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 10455  148A  319E  2684         	fcall	_Flash_Memory_Unlock
 10456                           
 10457                           ;MCU_B1.c: 851: WREN = 0;
 10458  148C  0023               	movlb	3	; select bank3
 10459  148D  1115               	bcf	21,2	;volatile
 10460  148E  0008               	return
 10461  148F                     __end_of_Flash_Memory_Write:	
 10462                           
 10463                           	psect	text56
 10464  1E84                     __ptext56:	
 10465 ;; *************** function _Flash_Memory_Unlock *****************
 10466 ;; Defined at:
 10467 ;;		line 815 in file "../src/MCU_B1.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;		None               void
 10474 ;; Registers used:
 10475 ;;		wreg
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:        0 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    5
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_Flash_Memory_Write
 10492 ;;		_Flash_Memory_Erasing
 10493 ;; This function uses a non-reentrant model
 10494 ;;
 10495                           
 10496                           
 10497                           ;psect for function _Flash_Memory_Unlock
 10498  1E84                     _Flash_Memory_Unlock:	
 10499                           
 10500                           ;MCU_B1.c: 816: PMCON2 = 0x55;
 10501                           
 10502                           ;incstack = 0
 10503                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10504  1E84  3055               	movlw	85
 10505  1E85  0023               	movlb	3	; select bank3
 10506  1E86  0096               	movwf	22	;volatile
 10507                           
 10508                           ;MCU_B1.c: 817: PMCON2 = 0xaa;
 10509  1E87  30AA               	movlw	170
 10510  1E88  0096               	movwf	22	;volatile
 10511                           
 10512                           ;MCU_B1.c: 818: WR = 1;
 10513  1E89  1495               	bsf	21,1	;volatile
 10514                           
 10515                           ;MCU_B1.c: 819: __nop();
 10516  1E8A  0000               	nop
 10517                           
 10518                           ;MCU_B1.c: 820: __nop();
 10519  1E8B  0000               	nop
 10520  1E8C  0008               	return
 10521  1E8D                     __end_of_Flash_Memory_Unlock:	
 10522                           
 10523                           	psect	text57
 10524  115E                     __ptext57:	
 10525 ;; *************** function _Flash_Memory_Read *****************
 10526 ;; Defined at:
 10527 ;;		line 824 in file "../src/MCU_B1.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  address         1    wreg     unsigned char 
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;  address         1    2[BANK0 ] unsigned char 
 10532 ;;  ret             1    3[BANK0 ] unsigned char 
 10533 ;;  i               1    1[BANK0 ] unsigned char 
 10534 ;; Return value:  Size  Location     Type
 10535 ;;                  1    wreg      unsigned char 
 10536 ;; Registers used:
 10537 ;;		wreg, status,2
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;Total ram usage:        4 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    5
 10550 ;; This function calls:
 10551 ;;		Nothing
 10552 ;; This function is called by:
 10553 ;;		_Flash_Memory_Initialization
 10554 ;;		_Flash_Memory_Modify
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           
 10559                           ;psect for function _Flash_Memory_Read
 10560  115E                     _Flash_Memory_Read:	
 10561                           
 10562                           ;incstack = 0
 10563                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10564                           ;Flash_Memory_Read@address stored from wreg
 10565  115E  0020               	movlb	0	; select bank0
 10566  115F  00A2               	movwf	Flash_Memory_Read@address
 10567                           
 10568                           ;MCU_B1.c: 825: char i = 0, ret = 0;
 10569  1160  01A1               	clrf	Flash_Memory_Read@i
 10570  1161  01A3               	clrf	Flash_Memory_Read@ret
 10571                           
 10572                           ;MCU_B1.c: 826: PMADRH = 0x30;
 10573  1162  3030               	movlw	48
 10574  1163  0023               	movlb	3	; select bank3
 10575  1164  0092               	movwf	18	;volatile
 10576                           
 10577                           ;MCU_B1.c: 827: PMADRL = address;
 10578  1165  0020               	movlb	0	; select bank0
 10579  1166  0822               	movf	Flash_Memory_Read@address,w
 10580  1167  0023               	movlb	3	; select bank3
 10581  1168  0091               	movwf	17	;volatile
 10582                           
 10583                           ;MCU_B1.c: 828: CFGS = 0;
 10584  1169  1315               	bcf	21,6	;volatile
 10585                           
 10586                           ;MCU_B1.c: 829: RD = 1;
 10587  116A  1415               	bsf	21,0	;volatile
 10588                           
 10589                           ;MCU_B1.c: 830: i = PMDATH;
 10590  116B  0814               	movf	20,w	;volatile
 10591  116C  0020               	movlb	0	; select bank0
 10592  116D  00A0               	movwf	??_Flash_Memory_Read
 10593  116E  0820               	movf	??_Flash_Memory_Read,w
 10594  116F  00A1               	movwf	Flash_Memory_Read@i
 10595                           
 10596                           ;MCU_B1.c: 831: ret = PMDATL;
 10597  1170  0023               	movlb	3	; select bank3
 10598  1171  0813               	movf	19,w	;volatile
 10599  1172  0020               	movlb	0	; select bank0
 10600  1173  00A0               	movwf	??_Flash_Memory_Read
 10601  1174  0820               	movf	??_Flash_Memory_Read,w
 10602  1175  00A3               	movwf	Flash_Memory_Read@ret
 10603                           
 10604                           ;MCU_B1.c: 832: return ret;
 10605  1176  0823               	movf	Flash_Memory_Read@ret,w
 10606  1177  0008               	return
 10607  1178                     __end_of_Flash_Memory_Read:	
 10608                           
 10609                           	psect	text58
 10610  1F2E                     __ptext58:	
 10611 ;; *************** function _DimmerLights_Main *****************
 10612 ;; Defined at:
 10613 ;;		line 416 in file "../src/Dimmer_B1.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;		None
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;		None
 10618 ;; Return value:  Size  Location     Type
 10619 ;;		None               void
 10620 ;; Registers used:
 10621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10622 ;; Tracked objects:
 10623 ;;		On entry : 0/0
 10624 ;;		On exit  : 0/0
 10625 ;;		Unchanged: 0/0
 10626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;Total ram usage:        0 bytes
 10632 ;; Hardware stack levels used:    1
 10633 ;; Hardware stack levels required when called:   11
 10634 ;; This function calls:
 10635 ;;		_DimmerLights_Close
 10636 ;;		_setDimmerLights_Main
 10637 ;; This function is called by:
 10638 ;;		_main
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           
 10643                           ;psect for function _DimmerLights_Main
 10644  1F2E                     _DimmerLights_Main:	
 10645                           
 10646                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 10647                           
 10648                           ;incstack = 0
 10649                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10650  1F2E  3001               	movlw	1
 10651  1F2F  318E  261A  319F   	fcall	_setDimmerLights_Main
 10652                           
 10653                           ;Dimmer_B1.c: 423: setDimmerLights_Main(2);
 10654  1F32  3002               	movlw	2
 10655  1F33  318E  261A  319F   	fcall	_setDimmerLights_Main
 10656                           
 10657                           ;Dimmer_B1.c: 427: setDimmerLights_Main(3);
 10658  1F36  3003               	movlw	3
 10659  1F37  318E  261A  319F   	fcall	_setDimmerLights_Main
 10660                           
 10661                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 10662  1F3A  3190  2097         	fcall	_DimmerLights_Close
 10663  1F3C  0008               	return
 10664  1F3D                     __end_of_DimmerLights_Main:	
 10665                           
 10666                           	psect	text59
 10667  0E1A                     __ptext59:	
 10668 ;; *************** function _setDimmerLights_Main *****************
 10669 ;; Defined at:
 10670 ;;		line 434 in file "../src/Dimmer_B1.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;  lights          1    wreg     unsigned char 
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;  lights          1   74[BANK0 ] unsigned char 
 10675 ;;  clear           1   73[BANK0 ] unsigned char 
 10676 ;; Return value:  Size  Location     Type
 10677 ;;		None               void
 10678 ;; Registers used:
 10679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10680 ;; Tracked objects:
 10681 ;;		On entry : 0/0
 10682 ;;		On exit  : 0/0
 10683 ;;		Unchanged: 0/0
 10684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;Total ram usage:        6 bytes
 10690 ;; Hardware stack levels used:    1
 10691 ;; Hardware stack levels required when called:   10
 10692 ;; This function calls:
 10693 ;;		_DimmerLightsPointSelect
 10694 ;;		_setBuz
 10695 ;;		_setDimmerLights
 10696 ;;		_setDimmerLights_Adj
 10697 ;; This function is called by:
 10698 ;;		_DimmerLights_Main
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           
 10703                           ;psect for function _setDimmerLights_Main
 10704  0E1A                     _setDimmerLights_Main:	
 10705                           
 10706                           ;incstack = 0
 10707                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10708                           ;setDimmerLights_Main@lights stored from wreg
 10709  0E1A  0020               	movlb	0	; select bank0
 10710  0E1B  00EA               	movwf	setDimmerLights_Main@lights
 10711                           
 10712                           ;Dimmer_B1.c: 435: char clear = 1;
 10713  0E1C  01E9               	clrf	setDimmerLights_Main@clear
 10714  0E1D  0AE9               	incf	setDimmerLights_Main@clear,f
 10715                           
 10716                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 10717  0E1E  086A               	movf	setDimmerLights_Main@lights,w
 10718  0E1F  3191  2178  318E   	fcall	_DimmerLightsPointSelect
 10719                           
 10720                           ;Dimmer_B1.c: 439: if (lights == 1) {
 10721  0E22  0020               	movlb	0	; select bank0
 10722  0E23  086A               	movf	setDimmerLights_Main@lights,w
 10723  0E24  3A01               	xorlw	1
 10724  0E25  1D03               	skipz
 10725  0E26  2E34               	goto	l9115
 10726                           
 10727                           ;Dimmer_B1.c: 440: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10728  0E27  01E6               	clrf	_setDimmerLights_Main$2409
 10729  0E28  0022               	movlb	2	; select bank2
 10730  0E29  1D55               	btfss	(_DimmerLights2^(0+256)+9),2
 10731  0E2A  2E31               	goto	l9113
 10732  0E2B  0023               	movlb	3	; select bank3
 10733  0E2C  1D4E               	btfss	(_DimmerLights3^(0+384)+9),2
 10734  0E2D  2E31               	goto	l9113
 10735  0E2E  0020               	movlb	0	; select bank0
 10736  0E2F  01E6               	clrf	_setDimmerLights_Main$2409
 10737  0E30  0AE6               	incf	_setDimmerLights_Main$2409,f
 10738  0E31                     l9113:	
 10739  0E31  0020               	movlb	0	; select bank0
 10740  0E32  0866               	movf	_setDimmerLights_Main$2409,w
 10741  0E33  2E53               	goto	L9
 10742  0E34                     l9115:	
 10743                           ;Dimmer_B1.c: 441: } else if (lights == 2) {
 10744                           
 10745  0E34  086A               	movf	setDimmerLights_Main@lights,w
 10746  0E35  3A02               	xorlw	2
 10747  0E36  1D03               	skipz
 10748  0E37  2E45               	goto	l9127
 10749                           
 10750                           ;Dimmer_B1.c: 442: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10751  0E38  01E7               	clrf	_setDimmerLights_Main$2417
 10752  0E39  0022               	movlb	2	; select bank2
 10753  0E3A  1D46               	btfss	(_DimmerLights1^(0+256)+9),2
 10754  0E3B  2E42               	goto	l9125
 10755  0E3C  0023               	movlb	3	; select bank3
 10756  0E3D  1D4E               	btfss	(_DimmerLights3^(0+384)+9),2
 10757  0E3E  2E42               	goto	l9125
 10758  0E3F  0020               	movlb	0	; select bank0
 10759  0E40  01E7               	clrf	_setDimmerLights_Main$2417
 10760  0E41  0AE7               	incf	_setDimmerLights_Main$2417,f
 10761  0E42                     l9125:	
 10762  0E42  0020               	movlb	0	; select bank0
 10763  0E43  0867               	movf	_setDimmerLights_Main$2417,w
 10764  0E44  2E53               	goto	L9
 10765  0E45                     l9127:	
 10766                           ;Dimmer_B1.c: 443: } else if (lights == 3) {
 10767                           
 10768  0E45  086A               	movf	setDimmerLights_Main@lights,w
 10769  0E46  3A03               	xorlw	3
 10770  0E47  1D03               	skipz
 10771  0E48  2E56               	goto	l9139
 10772                           
 10773                           ;Dimmer_B1.c: 444: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 10774  0E49  01E8               	clrf	_setDimmerLights_Main$2418
 10775  0E4A  0022               	movlb	2	; select bank2
 10776  0E4B  1946               	btfsc	(_DimmerLights1^(0+256)+9),2
 10777  0E4C  1D55               	btfss	(_DimmerLights2^(0+256)+9),2
 10778  0E4D  2E51               	goto	l9137
 10779  0E4E  0020               	movlb	0	; select bank0
 10780  0E4F  01E8               	clrf	_setDimmerLights_Main$2418
 10781  0E50  0AE8               	incf	_setDimmerLights_Main$2418,f
 10782  0E51                     l9137:	
 10783  0E51  0020               	movlb	0	; select bank0
 10784  0E52  0868               	movf	_setDimmerLights_Main$2418,w
 10785  0E53                     L9:	
 10786  0E53  00E5               	movwf	??_setDimmerLights_Main
 10787  0E54  0865               	movf	??_setDimmerLights_Main,w
 10788  0E55  00E9               	movwf	setDimmerLights_Main@clear
 10789  0E56                     l9139:	
 10790                           
 10791                           ;Dimmer_B1.c: 445: }
 10792                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 10793  0E56  086B               	movf	_DimmerLights,w
 10794  0E57  3E08               	addlw	8
 10795  0E58  0086               	movwf	6
 10796  0E59  3001               	movlw	1	; select bank2/3
 10797  0E5A  0087               	movwf	7
 10798  0E5B  1D01               	btfss	1,2
 10799  0E5C  2E7A               	goto	l9149
 10800                           
 10801                           ;Dimmer_B1.c: 457: if (clear == 1) {
 10802  0E5D  0869               	movf	setDimmerLights_Main@clear,w
 10803  0E5E  3A01               	xorlw	1
 10804  0E5F  1D03               	skipz
 10805  0E60  0008               	return
 10806                           
 10807                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 10808  0E61  086B               	movf	_DimmerLights,w
 10809  0E62  3E08               	addlw	8
 10810  0E63  0086               	movwf	6
 10811  0E64  3001               	movlw	1	; select bank2/3
 10812  0E65  0087               	movwf	7
 10813  0E66  1101               	bcf	1,2
 10814                           
 10815                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 10816  0E67  086B               	movf	_DimmerLights,w
 10817  0E68  3E08               	addlw	8
 10818  0E69  0086               	movwf	6
 10819  0E6A  3001               	movlw	1	; select bank2/3
 10820  0E6B  0087               	movwf	7
 10821  0E6C  1C81               	btfss	1,1
 10822  0E6D  2E74               	goto	l9147
 10823                           
 10824                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 10825  0E6E  01A3               	clrf	setDimmerLights@status
 10826  0E6F  0AA3               	incf	setDimmerLights@status,f
 10827  0E70  086A               	movf	setDimmerLights_Main@lights,w
 10828  0E71  318C  248B         	fcall	_setDimmerLights
 10829                           
 10830                           ;Dimmer_B1.c: 461: } else {
 10831  0E73  0008               	return
 10832  0E74                     l9147:	
 10833                           
 10834                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 10835  0E74  0020               	movlb	0	; select bank0
 10836  0E75  01A3               	clrf	setDimmerLights@status
 10837  0E76  086A               	movf	setDimmerLights_Main@lights,w
 10838  0E77  318C  248B         	fcall	_setDimmerLights
 10839                           
 10840                           ;Dimmer_B1.c: 463: }
 10841                           ;Dimmer_B1.c: 467: }
 10842                           ;Dimmer_B1.c: 468: } else {
 10843  0E79  0008               	return
 10844  0E7A                     l9149:	
 10845                           
 10846                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 10847  0E7A  0020               	movlb	0	; select bank0
 10848  0E7B  086B               	movf	_DimmerLights,w
 10849  0E7C  3E08               	addlw	8
 10850  0E7D  0086               	movwf	6
 10851  0E7E  3001               	movlw	1	; select bank2/3
 10852  0E7F  0087               	movwf	7
 10853  0E80  1E01               	btfss	1,4
 10854  0E81  0008               	return
 10855                           
 10856                           ;Dimmer_B1.c: 470: if (clear == 1) {
 10857  0E82  0869               	movf	setDimmerLights_Main@clear,w
 10858  0E83  3A01               	xorlw	1
 10859  0E84  1D03               	skipz
 10860  0E85  0008               	return
 10861                           
 10862                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 10863  0E86  086B               	movf	_DimmerLights,w
 10864  0E87  3E08               	addlw	8
 10865  0E88  0086               	movwf	6
 10866  0E89  3001               	movlw	1	; select bank2/3
 10867  0E8A  0087               	movwf	7
 10868  0E8B  1201               	bcf	1,4
 10869                           
 10870                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 10871  0E8C  086B               	movf	_DimmerLights,w
 10872  0E8D  3E08               	addlw	8
 10873  0E8E  0086               	movwf	6
 10874  0E8F  3001               	movlw	1	; select bank2/3
 10875  0E90  0087               	movwf	7
 10876  0E91  1D81               	btfss	1,3
 10877  0E92  2EA2               	goto	l9159
 10878                           
 10879                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 10880  0E93  01E2               	clrf	setDimmerLights_Adj@status
 10881  0E94  0AE2               	incf	setDimmerLights_Adj@status,f
 10882  0E95  086A               	movf	setDimmerLights_Main@lights,w
 10883  0E96  3195  2531  318E   	fcall	_setDimmerLights_Adj
 10884                           
 10885                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 10886  0E99  3064               	movlw	100
 10887  0E9A  0020               	movlb	0	; select bank0
 10888  0E9B  00A9               	movwf	setBuz@time
 10889  0E9C  3000               	movlw	0
 10890  0E9D  00AA               	movwf	setBuz@time+1
 10891  0E9E  3001               	movlw	1
 10892  0E9F  3197  27A7         	fcall	_setBuz
 10893                           
 10894                           ;Dimmer_B1.c: 475: } else {
 10895  0EA1  0008               	return
 10896  0EA2                     l9159:	
 10897                           
 10898                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 10899  0EA2  0020               	movlb	0	; select bank0
 10900  0EA3  01E2               	clrf	setDimmerLights_Adj@status
 10901  0EA4  086A               	movf	setDimmerLights_Main@lights,w
 10902  0EA5  3195  2531         	fcall	_setDimmerLights_Adj
 10903  0EA7  0008               	return
 10904  0EA8                     __end_of_setDimmerLights_Main:	
 10905                           
 10906                           	psect	text60
 10907  1531                     __ptext60:	
 10908 ;; *************** function _setDimmerLights_Adj *****************
 10909 ;; Defined at:
 10910 ;;		line 655 in file "../src/Dimmer_B1.c"
 10911 ;; Parameters:    Size  Location     Type
 10912 ;;  lights          1    wreg     unsigned char 
 10913 ;;  status          1   66[BANK0 ] unsigned char 
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;  lights          1   68[BANK0 ] unsigned char 
 10916 ;; Return value:  Size  Location     Type
 10917 ;;		None               void
 10918 ;; Registers used:
 10919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10925 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;Total ram usage:        3 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; Hardware stack levels required when called:    9
 10932 ;; This function calls:
 10933 ;;		_DimmerLightsPointSelect
 10934 ;;		_setRF_DimmerLights
 10935 ;;		_setTxData
 10936 ;; This function is called by:
 10937 ;;		_setDimmerLights_Main
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941                           
 10942                           ;psect for function _setDimmerLights_Adj
 10943  1531                     _setDimmerLights_Adj:	
 10944                           
 10945                           ;incstack = 0
 10946                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10947                           ;setDimmerLights_Adj@lights stored from wreg
 10948  1531  0020               	movlb	0	; select bank0
 10949  1532  00E4               	movwf	setDimmerLights_Adj@lights
 10950                           
 10951                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 10952  1533  0864               	movf	setDimmerLights_Adj@lights,w
 10953  1534  3191  2178  3195   	fcall	_DimmerLightsPointSelect
 10954                           
 10955                           ;Dimmer_B1.c: 657: if (status == 1) {
 10956  1537  0020               	movlb	0	; select bank0
 10957  1538  0862               	movf	setDimmerLights_Adj@status,w
 10958  1539  3A01               	xorlw	1
 10959  153A  1D03               	skipz
 10960  153B  2D47               	goto	l8723
 10961                           
 10962                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 10963  153C  086B               	movf	_DimmerLights,w
 10964  153D  0086               	movwf	6
 10965  153E  3001               	movlw	1	; select bank2/3
 10966  153F  0087               	movwf	7
 10967  1540  1581               	bsf	1,3
 10968                           
 10969                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 10970  1541  086B               	movf	_DimmerLights,w
 10971  1542  0086               	movwf	6
 10972  1543  3001               	movlw	1	; select bank2/3
 10973  1544  0087               	movwf	7
 10974  1545  1481               	bsf	1,1
 10975                           
 10976                           ;Dimmer_B1.c: 660: } else {
 10977  1546  0008               	return
 10978  1547                     l8723:	
 10979                           
 10980                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 10981  1547  086B               	movf	_DimmerLights,w
 10982  1548  0086               	movwf	6
 10983  1549  3001               	movlw	1	; select bank2/3
 10984  154A  0087               	movwf	7
 10985  154B  1D81               	btfss	1,3
 10986  154C  0008               	return
 10987                           
 10988                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 10989  154D  086B               	movf	_DimmerLights,w
 10990  154E  0086               	movwf	6
 10991  154F  3001               	movlw	1	; select bank2/3
 10992  1550  0087               	movwf	7
 10993  1551  1081               	bcf	1,1
 10994                           
 10995                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 10996  1552  086B               	movf	_DimmerLights,w
 10997  1553  0086               	movwf	6
 10998  1554  3001               	movlw	1	; select bank2/3
 10999  1555  0087               	movwf	7
 11000  1556  1181               	bcf	1,3
 11001                           
 11002                           ;Dimmer_B1.c: 665: ;;
 11003                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11004  1557  086B               	movf	_DimmerLights,w
 11005  1558  3E04               	addlw	4
 11006  1559  0086               	movwf	6
 11007  155A  3001               	movlw	1	; select bank2/3
 11008  155B  0087               	movwf	7
 11009  155C  0801               	movf	1,w
 11010  155D  00E3               	movwf	??_setDimmerLights_Adj
 11011  155E  086B               	movf	_DimmerLights,w
 11012  155F  3E05               	addlw	5
 11013  1560  0086               	movwf	6
 11014  1561  3001               	movlw	1	; select bank2/3
 11015  1562  0087               	movwf	7
 11016  1563  0863               	movf	??_setDimmerLights_Adj,w
 11017  1564  0081               	movwf	1
 11018                           
 11019                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 11020  1565  01DD               	clrf	setRF_DimmerLights@on
 11021  1566  0ADD               	incf	setRF_DimmerLights@on,f
 11022  1567  0864               	movf	setDimmerLights_Adj@lights,w
 11023  1568  318A  22CE  3195   	fcall	_setRF_DimmerLights
 11024                           
 11025                           ;Dimmer_B1.c: 675: setTxData();
 11026  156B  3185  25F9         	fcall	_setTxData
 11027  156D  0008               	return
 11028  156E                     __end_of_setDimmerLights_Adj:	
 11029                           
 11030                           	psect	text61
 11031  0C8B                     __ptext61:	
 11032 ;; *************** function _setDimmerLights *****************
 11033 ;; Defined at:
 11034 ;;		line 602 in file "../src/Dimmer_B1.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;  lights          1    wreg     unsigned char 
 11037 ;;  status          1    3[BANK0 ] unsigned char 
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;  lights          1    5[BANK0 ] unsigned char 
 11040 ;; Return value:  Size  Location     Type
 11041 ;;		None               void
 11042 ;; Registers used:
 11043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : 0/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11049 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;Total ram usage:        3 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; Hardware stack levels required when called:    7
 11056 ;; This function calls:
 11057 ;;		_DimmerLightsPointSelect
 11058 ;;		_setLED
 11059 ;;		_setMemory_GO
 11060 ;; This function is called by:
 11061 ;;		_setDimmerLights_Main
 11062 ;;		_setControl_Lights_Table
 11063 ;; This function uses a non-reentrant model
 11064 ;;
 11065                           
 11066                           
 11067                           ;psect for function _setDimmerLights
 11068  0C8B                     _setDimmerLights:	
 11069                           
 11070                           ;incstack = 0
 11071                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11072                           ;setDimmerLights@lights stored from wreg
 11073  0C8B  0020               	movlb	0	; select bank0
 11074  0C8C  00A5               	movwf	setDimmerLights@lights
 11075                           
 11076                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 11077  0C8D  0825               	movf	setDimmerLights@lights,w
 11078  0C8E  3191  2178  318C   	fcall	_DimmerLightsPointSelect
 11079                           
 11080                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 11081  0C91  0020               	movlb	0	; select bank0
 11082  0C92  0825               	movf	setDimmerLights@lights,w
 11083  0C93  00A4               	movwf	??_setDimmerLights
 11084  0C94  0A73               	incf	_Dimmer,w
 11085  0C95  0086               	movwf	6
 11086  0C96  0187               	clrf	7
 11087  0C97  0824               	movf	??_setDimmerLights,w
 11088  0C98  0081               	movwf	1
 11089                           
 11090                           ;Dimmer_B1.c: 605: if (status == 1) {
 11091  0C99  0823               	movf	setDimmerLights@status,w
 11092  0C9A  3A01               	xorlw	1
 11093  0C9B  1D03               	skipz
 11094  0C9C  2CDD               	goto	l8399
 11095                           
 11096                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 11097  0C9D  086B               	movf	_DimmerLights,w
 11098  0C9E  0086               	movwf	6
 11099  0C9F  3001               	movlw	1	; select bank2/3
 11100  0CA0  0087               	movwf	7
 11101  0CA1  1681               	bsf	1,5
 11102                           
 11103                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 11104  0CA2  01A1               	clrf	setLED@command
 11105  0CA3  0825               	movf	setDimmerLights@lights,w
 11106  0CA4  318B  23A9  318C   	fcall	_setLED
 11107                           
 11108                           ;Dimmer_B1.c: 609: ;;
 11109                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 11110  0CA7  0020               	movlb	0	; select bank0
 11111  0CA8  086B               	movf	_DimmerLights,w
 11112  0CA9  0086               	movwf	6
 11113  0CAA  3001               	movlw	1	; select bank2/3
 11114  0CAB  0087               	movwf	7
 11115  0CAC  1481               	bsf	1,1
 11116                           
 11117                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 11118  0CAD  3007               	movlw	7
 11119  0CAE  00A4               	movwf	??_setDimmerLights
 11120  0CAF  086B               	movf	_DimmerLights,w
 11121  0CB0  3E02               	addlw	2
 11122  0CB1  0086               	movwf	6
 11123  0CB2  3001               	movlw	1	; select bank2/3
 11124  0CB3  0087               	movwf	7
 11125  0CB4  0824               	movf	??_setDimmerLights,w
 11126  0CB5  0081               	movwf	1
 11127                           
 11128                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 11129  0CB6  086B               	movf	_DimmerLights,w
 11130  0CB7  0086               	movwf	6
 11131  0CB8  3001               	movlw	1	; select bank2/3
 11132  0CB9  0087               	movwf	7
 11133  0CBA  1B01               	btfsc	1,6
 11134  0CBB  0008               	return
 11135                           
 11136                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 11137  0CBC  086B               	movf	_DimmerLights,w
 11138  0CBD  0086               	movwf	6
 11139  0CBE  3001               	movlw	1	; select bank2/3
 11140  0CBF  0087               	movwf	7
 11141  0CC0  1701               	bsf	1,6
 11142                           
 11143                           ;Dimmer_B1.c: 616: ;;
 11144                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 11145  0CC1  3000               	movlw	0
 11146  0CC2  3188  2000         	fcall	_setMemory_GO
 11147                           
 11148                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11149  0CC4  0020               	movlb	0	; select bank0
 11150  0CC5  086B               	movf	_DimmerLights,w
 11151  0CC6  3E05               	addlw	5
 11152  0CC7  0086               	movwf	6
 11153  0CC8  3001               	movlw	1	; select bank2/3
 11154  0CC9  0087               	movwf	7
 11155  0CCA  0801               	movf	1,w
 11156  0CCB  00A4               	movwf	??_setDimmerLights
 11157  0CCC  086B               	movf	_DimmerLights,w
 11158  0CCD  3E04               	addlw	4
 11159  0CCE  0086               	movwf	6
 11160  0CCF  3001               	movlw	1	; select bank2/3
 11161  0CD0  0087               	movwf	7
 11162  0CD1  0824               	movf	??_setDimmerLights,w
 11163  0CD2  0081               	movwf	1
 11164                           
 11165                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-90)*0.8));
 11166  0CD3  3008               	movlw	8
 11167  0CD4  00A4               	movwf	??_setDimmerLights
 11168  0CD5  086B               	movf	_DimmerLights,w
 11169  0CD6  3E04               	addlw	4
 11170  0CD7  0086               	movwf	6
 11171  0CD8  3001               	movlw	1	; select bank2/3
 11172  0CD9  0087               	movwf	7
 11173  0CDA  0824               	movf	??_setDimmerLights,w
 11174  0CDB  0081               	movwf	1
 11175                           
 11176                           ;Dimmer_B1.c: 626: }
 11177                           ;Dimmer_B1.c: 627: } else {
 11178  0CDC  0008               	return
 11179  0CDD                     l8399:	
 11180                           
 11181                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 11182  0CDD  086B               	movf	_DimmerLights,w
 11183  0CDE  0086               	movwf	6
 11184  0CDF  3001               	movlw	1	; select bank2/3
 11185  0CE0  0087               	movwf	7
 11186  0CE1  1281               	bcf	1,5
 11187                           
 11188                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11189  0CE2  086B               	movf	_DimmerLights,w
 11190  0CE3  3E06               	addlw	6
 11191  0CE4  0086               	movwf	6
 11192  0CE5  3001               	movlw	1	; select bank2/3
 11193  0CE6  0087               	movwf	7
 11194  0CE7  0801               	movf	1,w
 11195  0CE8  00A4               	movwf	??_setDimmerLights
 11196  0CE9  086B               	movf	_DimmerLights,w
 11197  0CEA  3E04               	addlw	4
 11198  0CEB  0086               	movwf	6
 11199  0CEC  3001               	movlw	1	; select bank2/3
 11200  0CED  0087               	movwf	7
 11201  0CEE  0824               	movf	??_setDimmerLights,w
 11202  0CEF  0081               	movwf	1
 11203                           
 11204                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 11205  0CF0  086B               	movf	_DimmerLights,w
 11206  0CF1  0086               	movwf	6
 11207  0CF2  3001               	movlw	1	; select bank2/3
 11208  0CF3  0087               	movwf	7
 11209  0CF4  1481               	bsf	1,1
 11210                           
 11211                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 11212  0CF5  086B               	movf	_DimmerLights,w
 11213  0CF6  0086               	movwf	6
 11214  0CF7  3001               	movlw	1	; select bank2/3
 11215  0CF8  0087               	movwf	7
 11216  0CF9  1181               	bcf	1,3
 11217                           
 11218                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 11219  0CFA  086B               	movf	_DimmerLights,w
 11220  0CFB  0086               	movwf	6
 11221  0CFC  3001               	movlw	1	; select bank2/3
 11222  0CFD  0087               	movwf	7
 11223  0CFE  1201               	bcf	1,4
 11224                           
 11225                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 11226  0CFF  3007               	movlw	7
 11227  0D00  00A4               	movwf	??_setDimmerLights
 11228  0D01  086B               	movf	_DimmerLights,w
 11229  0D02  3E02               	addlw	2
 11230  0D03  0086               	movwf	6
 11231  0D04  3001               	movlw	1	; select bank2/3
 11232  0D05  0087               	movwf	7
 11233  0D06  0824               	movf	??_setDimmerLights,w
 11234  0D07  0081               	movwf	1
 11235  0D08  0008               	return
 11236  0D09                     __end_of_setDimmerLights:	
 11237                           
 11238                           	psect	text62
 11239  0BA9                     __ptext62:	
 11240 ;; *************** function _setLED *****************
 11241 ;; Defined at:
 11242 ;;		line 70 in file "../src/LED_B1.c"
 11243 ;; Parameters:    Size  Location     Type
 11244 ;;  led             1    wreg     unsigned char 
 11245 ;;  command         1    1[BANK0 ] unsigned char 
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;  led             1    2[BANK0 ] unsigned char 
 11248 ;; Return value:  Size  Location     Type
 11249 ;;		None               void
 11250 ;; Registers used:
 11251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11252 ;; Tracked objects:
 11253 ;;		On entry : 0/0
 11254 ;;		On exit  : 0/0
 11255 ;;		Unchanged: 0/0
 11256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11257 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;Total ram usage:        2 bytes
 11262 ;; Hardware stack levels used:    1
 11263 ;; Hardware stack levels required when called:    6
 11264 ;; This function calls:
 11265 ;;		_LedPointSelect
 11266 ;; This function is called by:
 11267 ;;		_setDimmerLights
 11268 ;;		_setLED_Initialization
 11269 ;;		_setSw_Initialization
 11270 ;;		_setDimmerLights_ERROR
 11271 ;; This function uses a non-reentrant model
 11272 ;;
 11273                           
 11274                           
 11275                           ;psect for function _setLED
 11276  0BA9                     _setLED:	
 11277                           
 11278                           ;incstack = 0
 11279                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11280                           ;setLED@led stored from wreg
 11281  0BA9  0020               	movlb	0	; select bank0
 11282  0BAA  00A2               	movwf	setLED@led
 11283                           
 11284                           ;LED_B1.c: 71: LedPointSelect(led);
 11285  0BAB  0822               	movf	setLED@led,w
 11286  0BAC  3193  2337  318B   	fcall	_LedPointSelect
 11287                           
 11288                           ;LED_B1.c: 72: if (command == 0) {
 11289  0BAF  0020               	movlb	0	; select bank0
 11290  0BB0  08A1               	movf	setLED@command,f
 11291  0BB1  1D03               	skipz
 11292  0BB2  2BCB               	goto	l8263
 11293                           
 11294                           ;LED_B1.c: 74: if (led == 1) {
 11295  0BB3  0822               	movf	setLED@led,w
 11296  0BB4  3A01               	xorlw	1
 11297  0BB5  1D03               	skipz
 11298  0BB6  2BB9               	goto	l8251
 11299                           
 11300                           ;LED_B1.c: 78: RC7 = 1;
 11301  0BB7  178E               	bsf	14,7	;volatile
 11302                           
 11303                           ;LED_B1.c: 80: }
 11304  0BB8  0008               	return
 11305  0BB9                     l8251:	
 11306                           
 11307                           ;LED_B1.c: 83: else if (led == 2) {
 11308  0BB9  0822               	movf	setLED@led,w
 11309  0BBA  3A02               	xorlw	2
 11310  0BBB  1D03               	skipz
 11311  0BBC  2BBF               	goto	l8255
 11312                           
 11313                           ;LED_B1.c: 87: RA3 = 1;
 11314  0BBD  158C               	bsf	12,3	;volatile
 11315                           
 11316                           ;LED_B1.c: 89: }
 11317  0BBE  0008               	return
 11318  0BBF                     l8255:	
 11319                           
 11320                           ;LED_B1.c: 92: else if (led == 3) {
 11321  0BBF  0822               	movf	setLED@led,w
 11322  0BC0  3A03               	xorlw	3
 11323  0BC1  1D03               	skipz
 11324  0BC2  2BC5               	goto	l8259
 11325                           
 11326                           ;LED_B1.c: 96: RC6 = 1;
 11327  0BC3  170E               	bsf	14,6	;volatile
 11328                           
 11329                           ;LED_B1.c: 98: }
 11330  0BC4  0008               	return
 11331  0BC5                     l8259:	
 11332                           
 11333                           ;LED_B1.c: 101: else if (led == 99) {
 11334  0BC5  0822               	movf	setLED@led,w
 11335  0BC6  3A63               	xorlw	99
 11336  0BC7  1D03               	skipz
 11337  0BC8  0008               	return
 11338                           
 11339                           ;LED_B1.c: 105: RB5 = 1;
 11340  0BC9  168D               	bsf	13,5	;volatile
 11341                           
 11342                           ;LED_B1.c: 107: }
 11343                           ;LED_B1.c: 109: } else if (command == 1) {
 11344  0BCA  0008               	return
 11345  0BCB                     l8263:	
 11346  0BCB  0821               	movf	setLED@command,w
 11347  0BCC  3A01               	xorlw	1
 11348  0BCD  1D03               	skipz
 11349  0BCE  2BE7               	goto	l8281
 11350                           
 11351                           ;LED_B1.c: 111: if (led == 1) {
 11352  0BCF  0822               	movf	setLED@led,w
 11353  0BD0  3A01               	xorlw	1
 11354  0BD1  1D03               	skipz
 11355  0BD2  2BD5               	goto	l8269
 11356                           
 11357                           ;LED_B1.c: 115: RC7 = 0;
 11358  0BD3  138E               	bcf	14,7	;volatile
 11359                           
 11360                           ;LED_B1.c: 117: }
 11361  0BD4  0008               	return
 11362  0BD5                     l8269:	
 11363                           
 11364                           ;LED_B1.c: 120: else if (led == 2) {
 11365  0BD5  0822               	movf	setLED@led,w
 11366  0BD6  3A02               	xorlw	2
 11367  0BD7  1D03               	skipz
 11368  0BD8  2BDB               	goto	l8273
 11369                           
 11370                           ;LED_B1.c: 124: RA3 = 0;
 11371  0BD9  118C               	bcf	12,3	;volatile
 11372                           
 11373                           ;LED_B1.c: 126: }
 11374  0BDA  0008               	return
 11375  0BDB                     l8273:	
 11376                           
 11377                           ;LED_B1.c: 129: else if (led == 3) {
 11378  0BDB  0822               	movf	setLED@led,w
 11379  0BDC  3A03               	xorlw	3
 11380  0BDD  1D03               	skipz
 11381  0BDE  2BE1               	goto	l8277
 11382                           
 11383                           ;LED_B1.c: 133: RC6 = 0;
 11384  0BDF  130E               	bcf	14,6	;volatile
 11385                           
 11386                           ;LED_B1.c: 135: }
 11387  0BE0  0008               	return
 11388  0BE1                     l8277:	
 11389                           
 11390                           ;LED_B1.c: 138: else if (led == 99) {
 11391  0BE1  0822               	movf	setLED@led,w
 11392  0BE2  3A63               	xorlw	99
 11393  0BE3  1D03               	skipz
 11394  0BE4  0008               	return
 11395                           
 11396                           ;LED_B1.c: 142: RB5 = 0;
 11397  0BE5  128D               	bcf	13,5	;volatile
 11398                           
 11399                           ;LED_B1.c: 144: }
 11400                           ;LED_B1.c: 146: } else if (command == 10) {
 11401  0BE6  0008               	return
 11402  0BE7                     l8281:	
 11403  0BE7  0821               	movf	setLED@command,w
 11404  0BE8  3A0A               	xorlw	10
 11405  0BE9  1D03               	skipz
 11406  0BEA  2C10               	goto	l8301
 11407                           
 11408                           ;LED_B1.c: 147: LED->GO = 0;
 11409  0BEB  0870               	movf	_LED,w
 11410  0BEC  0086               	movwf	6
 11411  0BED  0871               	movf	_LED+1,w
 11412  0BEE  0087               	movwf	7
 11413  0BEF  1081               	bcf	1,1
 11414                           
 11415                           ;LED_B1.c: 148: LED->Time = 0;
 11416  0BF0  0870               	movf	_LED,w
 11417  0BF1  0086               	movwf	6
 11418  0BF2  0871               	movf	_LED+1,w
 11419  0BF3  0087               	movwf	7
 11420  0BF4  3141               	addfsr 1,1
 11421  0BF5  3000               	movlw	0
 11422  0BF6  3FC0               	movwi [0]fsr1
 11423  0BF7  3FC1               	movwi [1]fsr1
 11424                           
 11425                           ;LED_B1.c: 150: if (led == 1) {
 11426  0BF8  0822               	movf	setLED@led,w
 11427  0BF9  3A01               	xorlw	1
 11428  0BFA  1D03               	skipz
 11429  0BFB  2BFE               	goto	l8289
 11430                           
 11431                           ;LED_B1.c: 154: RC7 = 1;
 11432  0BFC  178E               	bsf	14,7	;volatile
 11433                           
 11434                           ;LED_B1.c: 156: }
 11435  0BFD  0008               	return
 11436  0BFE                     l8289:	
 11437                           
 11438                           ;LED_B1.c: 159: else if (led == 2) {
 11439  0BFE  0822               	movf	setLED@led,w
 11440  0BFF  3A02               	xorlw	2
 11441  0C00  1D03               	skipz
 11442  0C01  2C04               	goto	l8293
 11443                           
 11444                           ;LED_B1.c: 163: RA3 = 1;
 11445  0C02  158C               	bsf	12,3	;volatile
 11446                           
 11447                           ;LED_B1.c: 165: }
 11448  0C03  0008               	return
 11449  0C04                     l8293:	
 11450                           
 11451                           ;LED_B1.c: 168: else if (led == 3) {
 11452  0C04  0822               	movf	setLED@led,w
 11453  0C05  3A03               	xorlw	3
 11454  0C06  1D03               	skipz
 11455  0C07  2C0A               	goto	l8297
 11456                           
 11457                           ;LED_B1.c: 172: RC6 = 1;
 11458  0C08  170E               	bsf	14,6	;volatile
 11459                           
 11460                           ;LED_B1.c: 174: }
 11461  0C09  0008               	return
 11462  0C0A                     l8297:	
 11463                           
 11464                           ;LED_B1.c: 177: else if (led == 99) {
 11465  0C0A  0822               	movf	setLED@led,w
 11466  0C0B  3A63               	xorlw	99
 11467  0C0C  1D03               	skipz
 11468  0C0D  0008               	return
 11469                           
 11470                           ;LED_B1.c: 181: RB5 = 1;
 11471  0C0E  168D               	bsf	13,5	;volatile
 11472                           
 11473                           ;LED_B1.c: 183: }
 11474                           ;LED_B1.c: 185: } else if (command == 11) {
 11475  0C0F  0008               	return
 11476  0C10                     l8301:	
 11477  0C10  0821               	movf	setLED@command,w
 11478  0C11  3A0B               	xorlw	11
 11479  0C12  1D03               	skipz
 11480  0C13  0008               	return
 11481                           
 11482                           ;LED_B1.c: 186: LED->GO = 1;
 11483  0C14  0870               	movf	_LED,w
 11484  0C15  0086               	movwf	6
 11485  0C16  0871               	movf	_LED+1,w
 11486  0C17  0087               	movwf	7
 11487  0C18  1481               	bsf	1,1
 11488  0C19  0008               	return
 11489  0C1A                     __end_of_setLED:	
 11490                           
 11491                           	psect	text63
 11492  1337                     __ptext63:	
 11493 ;; *************** function _LedPointSelect *****************
 11494 ;; Defined at:
 11495 ;;		line 7 in file "../src/LED_B1.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;  led             1    wreg     unsigned char 
 11498 ;; Auto vars:     Size  Location     Type
 11499 ;;  led             1    0[BANK0 ] unsigned char 
 11500 ;; Return value:  Size  Location     Type
 11501 ;;		None               void
 11502 ;; Registers used:
 11503 ;;		wreg, status,2, status,0
 11504 ;; Tracked objects:
 11505 ;;		On entry : 0/0
 11506 ;;		On exit  : 0/0
 11507 ;;		Unchanged: 0/0
 11508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11513 ;;Total ram usage:        1 bytes
 11514 ;; Hardware stack levels used:    1
 11515 ;; Hardware stack levels required when called:    5
 11516 ;; This function calls:
 11517 ;;		Nothing
 11518 ;; This function is called by:
 11519 ;;		_setLED_Initialization
 11520 ;;		_setLED
 11521 ;;		_setLED_Main
 11522 ;; This function uses a non-reentrant model
 11523 ;;
 11524                           
 11525                           
 11526                           ;psect for function _LedPointSelect
 11527  1337                     _LedPointSelect:	
 11528                           
 11529                           ;incstack = 0
 11530                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 11531                           ;LedPointSelect@led stored from wreg
 11532  1337  0020               	movlb	0	; select bank0
 11533  1338  00A0               	movwf	LedPointSelect@led
 11534                           
 11535                           ;LED_B1.c: 9: if (led == 1) {
 11536  1339  0820               	movf	LedPointSelect@led,w
 11537  133A  3A01               	xorlw	1
 11538  133B  1D03               	skipz
 11539  133C  2B42               	goto	l8041
 11540                           
 11541                           ;LED_B1.c: 10: LED = &VarLED1;
 11542  133D  30DE               	movlw	low _VarLED1
 11543  133E  00F0               	movwf	_LED
 11544  133F  3000               	movlw	high _VarLED1
 11545  1340  00F1               	movwf	_LED+1
 11546                           
 11547                           ;LED_B1.c: 11: }
 11548  1341  0008               	return
 11549  1342                     l8041:	
 11550                           
 11551                           ;LED_B1.c: 14: else if (led == 2) {
 11552  1342  0820               	movf	LedPointSelect@led,w
 11553  1343  3A02               	xorlw	2
 11554  1344  1D03               	skipz
 11555  1345  2B4B               	goto	l8045
 11556                           
 11557                           ;LED_B1.c: 15: LED = &VarLED2;
 11558  1346  3064               	movlw	low _VarLED2
 11559  1347  00F0               	movwf	_LED
 11560  1348  3001               	movlw	high _VarLED2
 11561  1349  00F1               	movwf	_LED+1
 11562                           
 11563                           ;LED_B1.c: 16: }
 11564  134A  0008               	return
 11565  134B                     l8045:	
 11566                           
 11567                           ;LED_B1.c: 19: else if (led == 3) {
 11568  134B  0820               	movf	LedPointSelect@led,w
 11569  134C  3A03               	xorlw	3
 11570  134D  1D03               	skipz
 11571  134E  2B54               	goto	l8049
 11572                           
 11573                           ;LED_B1.c: 20: LED = &VarLED3;
 11574  134F  3068               	movlw	low _VarLED3
 11575  1350  00F0               	movwf	_LED
 11576  1351  3001               	movlw	high _VarLED3
 11577  1352  00F1               	movwf	_LED+1
 11578                           
 11579                           ;LED_B1.c: 21: }
 11580  1353  0008               	return
 11581  1354                     l8049:	
 11582                           
 11583                           ;LED_B1.c: 24: else if (led == 99) {
 11584  1354  0820               	movf	LedPointSelect@led,w
 11585  1355  3A63               	xorlw	99
 11586  1356  1D03               	skipz
 11587  1357  0008               	return
 11588                           
 11589                           ;LED_B1.c: 25: LED = &VarErrLED;
 11590  1358  30DA               	movlw	low _VarErrLED
 11591  1359  00F0               	movwf	_LED
 11592  135A  3000               	movlw	high _VarErrLED
 11593  135B  00F1               	movwf	_LED+1
 11594  135C  0008               	return
 11595  135D                     __end_of_LedPointSelect:	
 11596                           
 11597                           	psect	text64
 11598  1097                     __ptext64:	
 11599 ;; *************** function _DimmerLights_Close *****************
 11600 ;; Defined at:
 11601 ;;		line 405 in file "../src/Dimmer_B1.c"
 11602 ;; Parameters:    Size  Location     Type
 11603 ;;		None
 11604 ;; Auto vars:     Size  Location     Type
 11605 ;;		None
 11606 ;; Return value:  Size  Location     Type
 11607 ;;		None               void
 11608 ;; Registers used:
 11609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11610 ;; Tracked objects:
 11611 ;;		On entry : 0/0
 11612 ;;		On exit  : 0/0
 11613 ;;		Unchanged: 0/0
 11614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;Total ram usage:        0 bytes
 11620 ;; Hardware stack levels used:    1
 11621 ;; Hardware stack levels required when called:    6
 11622 ;; This function calls:
 11623 ;;		_getDimmerLights_StatusFlag
 11624 ;;		_setMemory_GO
 11625 ;; This function is called by:
 11626 ;;		_DimmerLights_Main
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           
 11631                           ;psect for function _DimmerLights_Close
 11632  1097                     _DimmerLights_Close:	
 11633                           
 11634                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 11635                           
 11636                           ;incstack = 0
 11637                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11638  1097  0873               	movf	_Dimmer,w
 11639  1098  0086               	movwf	6
 11640  1099  0187               	clrf	7
 11641  109A  1C01               	btfss	1,0
 11642  109B  0008               	return
 11643                           
 11644                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 11645  109C  0873               	movf	_Dimmer,w
 11646  109D  0086               	movwf	6
 11647  109E  0187               	clrf	7
 11648  109F  1001               	bcf	1,0
 11649                           
 11650                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 11651  10A0  3190  20BE  3190   	fcall	_getDimmerLights_StatusFlag
 11652  10A3  3800               	iorlw	0
 11653  10A4  1D03               	skipz
 11654  10A5  0008               	return
 11655                           
 11656                           ;Dimmer_B1.c: 409: ;;
 11657                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 11658  10A6  3001               	movlw	1
 11659  10A7  3188  2000         	fcall	_setMemory_GO
 11660  10A9  0008               	return
 11661  10AA                     __end_of_DimmerLights_Close:	
 11662                           
 11663                           	psect	text65
 11664  0800                     __ptext65:	
 11665 ;; *************** function _setMemory_GO *****************
 11666 ;; Defined at:
 11667 ;;		line 892 in file "../src/MCU_B1.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;  command         1    wreg     unsigned char 
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;  command         1    2[BANK0 ] unsigned char 
 11672 ;; Return value:  Size  Location     Type
 11673 ;;		None               void
 11674 ;; Registers used:
 11675 ;;		wreg, status,2, status,0
 11676 ;; Tracked objects:
 11677 ;;		On entry : 0/0
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;Total ram usage:        3 bytes
 11686 ;; Hardware stack levels used:    1
 11687 ;; Hardware stack levels required when called:    5
 11688 ;; This function calls:
 11689 ;;		Nothing
 11690 ;; This function is called by:
 11691 ;;		_DimmerLights_Close
 11692 ;;		_setDimmerLights
 11693 ;; This function uses a non-reentrant model
 11694 ;;
 11695                           
 11696                           
 11697                           ;psect for function _setMemory_GO
 11698  0800                     _setMemory_GO:	
 11699                           
 11700                           ;incstack = 0
 11701                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 11702                           ;setMemory_GO@command stored from wreg
 11703  0800  0020               	movlb	0	; select bank0
 11704  0801  00A2               	movwf	setMemory_GO@command
 11705                           
 11706                           ;MCU_B1.c: 893: Memory.GO = command;
 11707  0802  0822               	movf	setMemory_GO@command,w
 11708  0803  0023               	movlb	3	; select bank3
 11709  0804  10C4               	bcf	(_Memory^(0+384)+36),1
 11710  0805  1D03               	skipz
 11711  0806  14C4               	bsf	(_Memory^(0+384)+36),1
 11712                           
 11713                           ;MCU_B1.c: 894: if (command == 0) {
 11714  0807  0020               	movlb	0	; select bank0
 11715  0808  08A2               	movf	setMemory_GO@command,f
 11716  0809  1D03               	skipz
 11717  080A  0008               	return
 11718                           
 11719                           ;MCU_B1.c: 895: Memory.Time = command;
 11720  080B  0822               	movf	setMemory_GO@command,w
 11721  080C  00A0               	movwf	??_setMemory_GO
 11722  080D  01A1               	clrf	??_setMemory_GO+1
 11723  080E  0820               	movf	??_setMemory_GO,w
 11724  080F  0023               	movlb	3	; select bank3
 11725  0810  00C2               	movwf	(_Memory^(0+384)+34)
 11726  0811  0020               	movlb	0	; select bank0
 11727  0812  0821               	movf	??_setMemory_GO+1,w
 11728  0813  0023               	movlb	3	; select bank3
 11729  0814  00C3               	movwf	((_Memory+1)^(0+384)+34)
 11730  0815  0008               	return
 11731  0816                     __end_of_setMemory_GO:	
 11732                           
 11733                           	psect	text66
 11734  10BE                     __ptext66:	
 11735 ;; *************** function _getDimmerLights_StatusFlag *****************
 11736 ;; Defined at:
 11737 ;;		line 484 in file "../src/Dimmer_B1.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;		None
 11740 ;; Auto vars:     Size  Location     Type
 11741 ;;  Status          1    1[BANK0 ] unsigned char 
 11742 ;; Return value:  Size  Location     Type
 11743 ;;                  1    wreg      unsigned char 
 11744 ;; Registers used:
 11745 ;;		wreg, status,2
 11746 ;; Tracked objects:
 11747 ;;		On entry : 0/0
 11748 ;;		On exit  : 0/0
 11749 ;;		Unchanged: 0/0
 11750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;Total ram usage:        3 bytes
 11756 ;; Hardware stack levels used:    1
 11757 ;; Hardware stack levels required when called:    5
 11758 ;; This function calls:
 11759 ;;		Nothing
 11760 ;; This function is called by:
 11761 ;;		_DimmerLights_Close
 11762 ;;		_DimmerLights_Exceptions
 11763 ;; This function uses a non-reentrant model
 11764 ;;
 11765                           
 11766                           
 11767                           ;psect for function _getDimmerLights_StatusFlag
 11768  10BE                     _getDimmerLights_StatusFlag:	
 11769                           
 11770                           ;Dimmer_B1.c: 485: char Status = 0;
 11771                           
 11772                           ;incstack = 0
 11773                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11774  10BE  0020               	movlb	0	; select bank0
 11775  10BF  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11776                           
 11777                           ;Dimmer_B1.c: 488: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 11778  10C0  01A2               	clrf	_getDimmerLights_StatusFlag$2453
 11779  10C1  0AA2               	incf	_getDimmerLights_StatusFlag$2453,f
 11780  10C2  0022               	movlb	2	; select bank2
 11781  10C3  1F3D               	btfss	_DimmerLights1^(0+256),6
 11782  10C4  1B4C               	btfsc	_DimmerLights2^(0+256),6
 11783  10C5  28CB               	goto	l8711
 11784  10C6  0023               	movlb	3	; select bank3
 11785  10C7  1B45               	btfsc	_DimmerLights3^(0+384),6
 11786  10C8  28CB               	goto	l8711
 11787  10C9  0020               	movlb	0	; select bank0
 11788  10CA  01A2               	clrf	_getDimmerLights_StatusFlag$2453
 11789  10CB                     l8711:	
 11790  10CB  0020               	movlb	0	; select bank0
 11791  10CC  0822               	movf	_getDimmerLights_StatusFlag$2453,w
 11792  10CD  00A0               	movwf	??_getDimmerLights_StatusFlag
 11793  10CE  0820               	movf	??_getDimmerLights_StatusFlag,w
 11794  10CF  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11795                           
 11796                           ;Dimmer_B1.c: 499: return Status;
 11797  10D0  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11798  10D1  0008               	return
 11799  10D2                     __end_of_getDimmerLights_StatusFlag:	
 11800                           
 11801                           	psect	text67
 11802  1289                     __ptext67:	
 11803 ;; *************** function _DimmerLights_Initialization *****************
 11804 ;; Defined at:
 11805 ;;		line 343 in file "../src/Dimmer_B1.c"
 11806 ;; Parameters:    Size  Location     Type
 11807 ;;		None
 11808 ;; Auto vars:     Size  Location     Type
 11809 ;;		None
 11810 ;; Return value:  Size  Location     Type
 11811 ;;		None               void
 11812 ;; Registers used:
 11813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11814 ;; Tracked objects:
 11815 ;;		On entry : 0/0
 11816 ;;		On exit  : 0/0
 11817 ;;		Unchanged: 0/0
 11818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;Total ram usage:        1 bytes
 11824 ;; Hardware stack levels used:    1
 11825 ;; Hardware stack levels required when called:    7
 11826 ;; This function calls:
 11827 ;;		_Dimmer_Initialization
 11828 ;;		_setDimmerLights_Initialization
 11829 ;; This function is called by:
 11830 ;;		_main
 11831 ;; This function uses a non-reentrant model
 11832 ;;
 11833                           
 11834                           
 11835                           ;psect for function _DimmerLights_Initialization
 11836  1289                     _DimmerLights_Initialization:	
 11837                           
 11838                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 11839                           
 11840                           ;incstack = 0
 11841                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11842  1289  303D               	movlw	_DimmerLights1& (0+255)
 11843  128A  0020               	movlb	0	; select bank0
 11844  128B  00A4               	movwf	??_DimmerLights_Initialization
 11845  128C  0824               	movf	??_DimmerLights_Initialization,w
 11846  128D  0021               	movlb	1	; select bank1
 11847  128E  00CF               	movwf	_DimmerLights11^(0+128)
 11848                           
 11849                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 11850  128F  3001               	movlw	1
 11851  1290  3194  2405  3192   	fcall	_setDimmerLights_Initialization
 11852                           
 11853                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 11854  1293  304C               	movlw	_DimmerLights2& (0+255)
 11855  1294  0020               	movlb	0	; select bank0
 11856  1295  00A4               	movwf	??_DimmerLights_Initialization
 11857  1296  0824               	movf	??_DimmerLights_Initialization,w
 11858  1297  0021               	movlb	1	; select bank1
 11859  1298  00D0               	movwf	_DimmerLights22^(0+128)
 11860                           
 11861                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 11862  1299  3002               	movlw	2
 11863  129A  3194  2405  3192   	fcall	_setDimmerLights_Initialization
 11864                           
 11865                           ;Dimmer_B1.c: 356: DimmerLights33 = &DimmerLights3;
 11866  129D  30C5               	movlw	_DimmerLights3& (0+255)
 11867  129E  0020               	movlb	0	; select bank0
 11868  129F  00A4               	movwf	??_DimmerLights_Initialization
 11869  12A0  0824               	movf	??_DimmerLights_Initialization,w
 11870  12A1  0021               	movlb	1	; select bank1
 11871  12A2  00D1               	movwf	_DimmerLights33^(0+128)
 11872                           
 11873                           ;Dimmer_B1.c: 357: setDimmerLights_Initialization(3);
 11874  12A3  3003               	movlw	3
 11875  12A4  3194  2405  3192   	fcall	_setDimmerLights_Initialization
 11876                           
 11877                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 11878  12A7  319E  2659         	fcall	_Dimmer_Initialization
 11879  12A9  0008               	return
 11880  12AA                     __end_of_DimmerLights_Initialization:	
 11881                           
 11882                           	psect	text68
 11883  1405                     __ptext68:	
 11884 ;; *************** function _setDimmerLights_Initialization *****************
 11885 ;; Defined at:
 11886 ;;		line 366 in file "../src/Dimmer_B1.c"
 11887 ;; Parameters:    Size  Location     Type
 11888 ;;  lights          1    wreg     unsigned char 
 11889 ;; Auto vars:     Size  Location     Type
 11890 ;;  lights          1    3[BANK0 ] unsigned char 
 11891 ;; Return value:  Size  Location     Type
 11892 ;;		None               void
 11893 ;; Registers used:
 11894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11895 ;; Tracked objects:
 11896 ;;		On entry : 0/0
 11897 ;;		On exit  : 0/0
 11898 ;;		Unchanged: 0/0
 11899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11903 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;Total ram usage:        2 bytes
 11905 ;; Hardware stack levels used:    1
 11906 ;; Hardware stack levels required when called:    6
 11907 ;; This function calls:
 11908 ;;		_DimmerLightsPointSelect
 11909 ;; This function is called by:
 11910 ;;		_DimmerLights_Initialization
 11911 ;; This function uses a non-reentrant model
 11912 ;;
 11913                           
 11914                           
 11915                           ;psect for function _setDimmerLights_Initialization
 11916  1405                     _setDimmerLights_Initialization:	
 11917                           
 11918                           ;incstack = 0
 11919                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11920                           ;setDimmerLights_Initialization@lights stored from wreg
 11921  1405  0020               	movlb	0	; select bank0
 11922  1406  00A3               	movwf	setDimmerLights_Initialization@lights
 11923                           
 11924                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 11925  1407  0823               	movf	setDimmerLights_Initialization@lights,w
 11926  1408  3191  2178         	fcall	_DimmerLightsPointSelect
 11927                           
 11928                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 11929  140A  0020               	movlb	0	; select bank0
 11930  140B  086B               	movf	_DimmerLights,w
 11931  140C  3E09               	addlw	9
 11932  140D  0086               	movwf	6
 11933  140E  3001               	movlw	1	; select bank2/3
 11934  140F  0087               	movwf	7
 11935  1410  1501               	bsf	1,2
 11936                           
 11937                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-90)*0.8));
 11938  1411  3008               	movlw	8
 11939  1412  00A2               	movwf	??_setDimmerLights_Initialization
 11940  1413  086B               	movf	_DimmerLights,w
 11941  1414  3E05               	addlw	5
 11942  1415  0086               	movwf	6
 11943  1416  3001               	movlw	1	; select bank2/3
 11944  1417  0087               	movwf	7
 11945  1418  0822               	movf	??_setDimmerLights_Initialization,w
 11946  1419  0081               	movwf	1
 11947                           
 11948                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 11949  141A  303C               	movlw	60
 11950  141B  00A2               	movwf	??_setDimmerLights_Initialization
 11951  141C  086B               	movf	_DimmerLights,w
 11952  141D  3E06               	addlw	6
 11953  141E  0086               	movwf	6
 11954  141F  3001               	movlw	1	; select bank2/3
 11955  1420  0087               	movwf	7
 11956  1421  0822               	movf	??_setDimmerLights_Initialization,w
 11957  1422  0081               	movwf	1
 11958                           
 11959                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11960  1423  086B               	movf	_DimmerLights,w
 11961  1424  3E06               	addlw	6
 11962  1425  0086               	movwf	6
 11963  1426  3001               	movlw	1	; select bank2/3
 11964  1427  0087               	movwf	7
 11965  1428  0801               	movf	1,w
 11966  1429  00A2               	movwf	??_setDimmerLights_Initialization
 11967  142A  086B               	movf	_DimmerLights,w
 11968  142B  3E04               	addlw	4
 11969  142C  0086               	movwf	6
 11970  142D  3001               	movlw	1	; select bank2/3
 11971  142E  0087               	movwf	7
 11972  142F  0822               	movf	??_setDimmerLights_Initialization,w
 11973  1430  0081               	movwf	1
 11974  1431  0008               	return
 11975  1432                     __end_of_setDimmerLights_Initialization:	
 11976                           
 11977                           	psect	text69
 11978  1E59                     __ptext69:	
 11979 ;; *************** function _Dimmer_Initialization *****************
 11980 ;; Defined at:
 11981 ;;		line 795 in file "../src/Dimmer_B1.c"
 11982 ;; Parameters:    Size  Location     Type
 11983 ;;		None
 11984 ;; Auto vars:     Size  Location     Type
 11985 ;;		None
 11986 ;; Return value:  Size  Location     Type
 11987 ;;		None               void
 11988 ;; Registers used:
 11989 ;;		wreg
 11990 ;; Tracked objects:
 11991 ;;		On entry : 0/0
 11992 ;;		On exit  : 0/0
 11993 ;;		Unchanged: 0/0
 11994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;Total ram usage:        1 bytes
 12000 ;; Hardware stack levels used:    1
 12001 ;; Hardware stack levels required when called:    5
 12002 ;; This function calls:
 12003 ;;		Nothing
 12004 ;; This function is called by:
 12005 ;;		_DimmerLights_Initialization
 12006 ;; This function uses a non-reentrant model
 12007 ;;
 12008                           
 12009                           
 12010                           ;psect for function _Dimmer_Initialization
 12011  1E59                     _Dimmer_Initialization:	
 12012                           
 12013                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 12014                           
 12015                           ;incstack = 0
 12016                           ; Regs used in _Dimmer_Initialization: [wreg]
 12017  1E59  30E2               	movlw	_Dimmer1& (0+255)
 12018  1E5A  0020               	movlb	0	; select bank0
 12019  1E5B  00A0               	movwf	??_Dimmer_Initialization
 12020  1E5C  0820               	movf	??_Dimmer_Initialization,w
 12021  1E5D  00F3               	movwf	_Dimmer
 12022  1E5E  0008               	return
 12023  1E5F                     __end_of_Dimmer_Initialization:	
 12024                           
 12025                           	psect	text70
 12026  1ED1                     __ptext70:	
 12027 ;; *************** function _DelayOff_Main *****************
 12028 ;; Defined at:
 12029 ;;		line 41 in file "../src/DelayOff_B1.c"
 12030 ;; Parameters:    Size  Location     Type
 12031 ;;		None
 12032 ;; Auto vars:     Size  Location     Type
 12033 ;;		None
 12034 ;; Return value:  Size  Location     Type
 12035 ;;		None               void
 12036 ;; Registers used:
 12037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;Total ram usage:        0 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:   10
 12050 ;; This function calls:
 12051 ;;		_DlyOff_Main
 12052 ;; This function is called by:
 12053 ;;		_main
 12054 ;; This function uses a non-reentrant model
 12055 ;;
 12056                           
 12057                           
 12058                           ;psect for function _DelayOff_Main
 12059  1ED1                     _DelayOff_Main:	
 12060                           
 12061                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12062                           
 12063                           ;incstack = 0
 12064                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12065  1ED1  3001               	movlw	1
 12066  1ED2  318A  2263  319E   	fcall	_DlyOff_Main
 12067                           
 12068                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12069  1ED5  3002               	movlw	2
 12070  1ED6  318A  2263  319E   	fcall	_DlyOff_Main
 12071                           
 12072                           ;DelayOff_B1.c: 51: DlyOff_Main(3);
 12073  1ED9  3003               	movlw	3
 12074  1EDA  318A  2263         	fcall	_DlyOff_Main
 12075  1EDC  0008               	return
 12076  1EDD                     __end_of_DelayOff_Main:	
 12077                           
 12078                           	psect	text71
 12079  0A63                     __ptext71:	
 12080 ;; *************** function _DlyOff_Main *****************
 12081 ;; Defined at:
 12082 ;;		line 62 in file "../src/DelayOff_B1.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;  sw              1    wreg     unsigned char 
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;  sw              1   68[BANK0 ] unsigned char 
 12087 ;; Return value:  Size  Location     Type
 12088 ;;		None               void
 12089 ;; Registers used:
 12090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;Total ram usage:        3 bytes
 12101 ;; Hardware stack levels used:    1
 12102 ;; Hardware stack levels required when called:    9
 12103 ;; This function calls:
 12104 ;;		_DelayOffPointSelect
 12105 ;;		_setBuz
 12106 ;;		_setDimmerLights_Switch
 12107 ;;		_setDimmerLights_Trigger
 12108 ;;		_setRFSW_Status
 12109 ;;		_setRF_DimmerLights
 12110 ;;		_setSw_Status
 12111 ;;		_setTxData
 12112 ;; This function is called by:
 12113 ;;		_DelayOff_Main
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           
 12118                           ;psect for function _DlyOff_Main
 12119  0A63                     _DlyOff_Main:	
 12120                           
 12121                           ;incstack = 0
 12122                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12123                           ;DlyOff_Main@sw stored from wreg
 12124  0A63  0020               	movlb	0	; select bank0
 12125  0A64  00E4               	movwf	DlyOff_Main@sw
 12126                           
 12127                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12128  0A65  0864               	movf	DlyOff_Main@sw,w
 12129  0A66  3191  21B0  318A   	fcall	_DelayOffPointSelect
 12130                           
 12131                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 12132  0A69  0872               	movf	_DelayOff,w
 12133  0A6A  0086               	movwf	6
 12134  0A6B  0187               	clrf	7
 12135  0A6C  1C81               	btfss	1,1
 12136  0A6D  0008               	return
 12137                           
 12138                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12139  0A6E  0872               	movf	_DelayOff,w
 12140  0A6F  0086               	movwf	6
 12141  0A70  0187               	clrf	7
 12142  0A71  3001               	movlw	1
 12143  0A72  0781               	addwf	1,f
 12144  0A73  3141               	addfsr 1,1
 12145  0A74  1803               	skipnc
 12146  0A75  0A81               	incf	1,f
 12147                           
 12148                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12149  0A76  0872               	movf	_DelayOff,w
 12150  0A77  0086               	movwf	6
 12151  0A78  0187               	clrf	7
 12152  0A79  3F40               	moviw [0]fsr1
 12153  0A7A  0020               	movlb	0	; select bank0
 12154  0A7B  00E2               	movwf	??_DlyOff_Main
 12155  0A7C  3F41               	moviw [1]fsr1
 12156  0A7D  00E3               	movwf	??_DlyOff_Main+1
 12157  0A7E  3016               	movlw	22
 12158  0A7F  0263               	subwf	??_DlyOff_Main+1,w
 12159  0A80  3012               	movlw	18
 12160  0A81  1903               	skipnz
 12161  0A82  0262               	subwf	??_DlyOff_Main,w
 12162  0A83  1C03               	skipc
 12163  0A84  0008               	return
 12164                           
 12165                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12166  0A85  0872               	movf	_DelayOff,w
 12167  0A86  0086               	movwf	6
 12168  0A87  0187               	clrf	7
 12169  0A88  3000               	movlw	0
 12170  0A89  3FC0               	movwi [0]fsr1
 12171  0A8A  3FC1               	movwi [1]fsr1
 12172                           
 12173                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12174  0A8B  3001               	movlw	1
 12175  0A8C  00E2               	movwf	??_DlyOff_Main
 12176  0A8D  0872               	movf	_DelayOff,w
 12177  0A8E  0086               	movwf	6
 12178  0A8F  0187               	clrf	7
 12179  0A90  0862               	movf	??_DlyOff_Main,w
 12180  0A91  0781               	addwf	1,f
 12181                           
 12182                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12183  0A92  0872               	movf	_DelayOff,w
 12184  0A93  0086               	movwf	6
 12185  0A94  0187               	clrf	7
 12186  0A95  0872               	movf	_DelayOff,w
 12187  0A96  0084               	movwf	4
 12188  0A97  0185               	clrf	5
 12189  0A98  0800               	movf	0,w
 12190  0A99  0201               	subwf	1,w
 12191  0A9A  1C03               	skipc
 12192  0A9B  0008               	return
 12193                           
 12194                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12195  0A9C  0872               	movf	_DelayOff,w
 12196  0A9D  0086               	movwf	6
 12197  0A9E  0187               	clrf	7
 12198  0A9F  0181               	clrf	1
 12199                           
 12200                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12201  0AA0  0872               	movf	_DelayOff,w
 12202  0AA1  0086               	movwf	6
 12203  0AA2  0187               	clrf	7
 12204  0AA3  1081               	bcf	1,1
 12205                           
 12206                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 12207  0AA4  01A2               	clrf	setSw_Status@command
 12208  0AA5  0864               	movf	DlyOff_Main@sw,w
 12209  0AA6  319F  271F  318A   	fcall	_setSw_Status
 12210                           
 12211                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 12212  0AA9  0020               	movlb	0	; select bank0
 12213  0AAA  01A2               	clrf	setRFSW_Status@command
 12214  0AAB  0864               	movf	DlyOff_Main@sw,w
 12215  0AAC  319F  2710  318A   	fcall	_setRFSW_Status
 12216                           
 12217                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 12218  0AAF  0020               	movlb	0	; select bank0
 12219  0AB0  01DD               	clrf	setRF_DimmerLights@on
 12220  0AB1  0864               	movf	DlyOff_Main@sw,w
 12221  0AB2  318A  22CE  318A   	fcall	_setRF_DimmerLights
 12222                           
 12223                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 12224  0AB5  0020               	movlb	0	; select bank0
 12225  0AB6  01A2               	clrf	setDimmerLights_Trigger@command
 12226  0AB7  0AA2               	incf	setDimmerLights_Trigger@command,f
 12227  0AB8  0864               	movf	DlyOff_Main@sw,w
 12228  0AB9  319F  276B  318A   	fcall	_setDimmerLights_Trigger
 12229                           
 12230                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 12231  0ABC  0020               	movlb	0	; select bank0
 12232  0ABD  01A2               	clrf	setDimmerLights_Switch@command
 12233  0ABE  0864               	movf	DlyOff_Main@sw,w
 12234  0ABF  319F  275B  318A   	fcall	_setDimmerLights_Switch
 12235                           
 12236                           ;DelayOff_B1.c: 78: setTxData();
 12237  0AC2  3185  25F9  318A   	fcall	_setTxData
 12238                           
 12239                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 12240  0AC5  3064               	movlw	100
 12241  0AC6  0020               	movlb	0	; select bank0
 12242  0AC7  00A9               	movwf	setBuz@time
 12243  0AC8  3000               	movlw	0
 12244  0AC9  00AA               	movwf	setBuz@time+1
 12245  0ACA  3001               	movlw	1
 12246  0ACB  3197  27A7         	fcall	_setBuz
 12247  0ACD  0008               	return
 12248  0ACE                     __end_of_DlyOff_Main:	
 12249                           
 12250                           	psect	text72
 12251  05F9                     __ptext72:	
 12252 ;; *************** function _setTxData *****************
 12253 ;; Defined at:
 12254 ;;		line 184 in file "../src/RF_Control_B1.c"
 12255 ;; Parameters:    Size  Location     Type
 12256 ;;		None
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;  i               1    0        unsigned char 
 12259 ;; Return value:  Size  Location     Type
 12260 ;;		None               void
 12261 ;; Registers used:
 12262 ;;		wreg, fsr1l, fsr1h
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;Total ram usage:        1 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; Hardware stack levels required when called:    5
 12275 ;; This function calls:
 12276 ;;		Nothing
 12277 ;; This function is called by:
 12278 ;;		_DlyOff_Main
 12279 ;;		_setDimmerLights_Adj
 12280 ;;		_setControl_Lights_Table
 12281 ;;		_setRFSW_Control
 12282 ;;		_setRFSW_AdjControl
 12283 ;;		_Sw_DimmerOnFunc
 12284 ;;		_Sw_DimmerOffFunc
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288                           
 12289                           ;psect for function _setTxData
 12290  05F9                     _setTxData:	
 12291                           
 12292                           ;RF_Control_B1.c: 185: char i;
 12293                           ;RF_Control_B1.c: 186: if (RF1.Enable == 1) {
 12294                           
 12295                           ;incstack = 0
 12296                           ; Regs used in _setTxData: [wregfsr1]
 12297  05F9  0021               	movlb	1	; select bank1
 12298  05FA  1C3E               	btfss	_RF1^(0+128),0
 12299  05FB  0008               	return
 12300                           
 12301                           ;RF_Control_B1.c: 188: RF1.TransceiveGO = 1;
 12302  05FC  153E               	bsf	_RF1^(0+128),2
 12303                           
 12304                           ;RF_Control_B1.c: 189: RF1.RunTime = 20;
 12305  05FD  3014               	movlw	20
 12306  05FE  00C5               	movwf	(_RF1^(0+128)+7)
 12307  05FF  3000               	movlw	0
 12308  0600  00C6               	movwf	(_RF1^(0+128)+8)
 12309                           
 12310                           ;RF_Control_B1.c: 199: RF_Data[0] = 0x63;
 12311  0601  3063               	movlw	99
 12312  0602  0020               	movlb	0	; select bank0
 12313  0603  00A0               	movwf	??_setTxData
 12314  0604  0820               	movf	??_setTxData,w
 12315  0605  0022               	movlb	2	; select bank2
 12316  0606  00A0               	movwf	_RF_Data^(0+256)
 12317                           
 12318                           ;RF_Control_B1.c: 200: RF_Data[1] = 0x02;
 12319  0607  3002               	movlw	2
 12320  0608  0020               	movlb	0	; select bank0
 12321  0609  00A0               	movwf	??_setTxData
 12322  060A  0820               	movf	??_setTxData,w
 12323  060B  0022               	movlb	2	; select bank2
 12324  060C  00A1               	movwf	(_RF_Data^(0+256)+1)
 12325                           
 12326                           ;RF_Control_B1.c: 201: RF_Data[2] = product->Data[2];
 12327  060D  0020               	movlb	0	; select bank0
 12328  060E  086D               	movf	_product,w
 12329  060F  0086               	movwf	6
 12330  0610  3002               	movlw	2	; select bank4/5
 12331  0611  0087               	movwf	7
 12332  0612  3002               	movlw	2	; select bank4/5
 12333  0613  3F42               	moviw [2]fsr1
 12334  0614  0022               	movlb	2	; select bank2
 12335  0615  00A2               	movwf	(_RF_Data^(0+256)+2)
 12336                           
 12337                           ;RF_Control_B1.c: 202: RF_Data[3] = product->Data[3];
 12338  0616  0020               	movlb	0	; select bank0
 12339  0617  086D               	movf	_product,w
 12340  0618  0086               	movwf	6
 12341  0619  3002               	movlw	2	; select bank4/5
 12342  061A  0087               	movwf	7
 12343  061B  3002               	movlw	2	; select bank4/5
 12344  061C  3F43               	moviw [3]fsr1
 12345  061D  0022               	movlb	2	; select bank2
 12346  061E  00A3               	movwf	(_RF_Data^(0+256)+3)
 12347                           
 12348                           ;RF_Control_B1.c: 203: RF_Data[4] = product->Data[4];
 12349  061F  0020               	movlb	0	; select bank0
 12350  0620  086D               	movf	_product,w
 12351  0621  0086               	movwf	6
 12352  0622  3002               	movlw	2	; select bank4/5
 12353  0623  0087               	movwf	7
 12354  0624  3002               	movlw	2	; select bank4/5
 12355  0625  3F44               	moviw [4]fsr1
 12356  0626  0022               	movlb	2	; select bank2
 12357  0627  00A4               	movwf	(_RF_Data^(0+256)+4)
 12358                           
 12359                           ;RF_Control_B1.c: 204: RF_Data[5] = product->Data[5];
 12360  0628  0020               	movlb	0	; select bank0
 12361  0629  086D               	movf	_product,w
 12362  062A  0086               	movwf	6
 12363  062B  3002               	movlw	2	; select bank4/5
 12364  062C  0087               	movwf	7
 12365  062D  3002               	movlw	2	; select bank4/5
 12366  062E  3F45               	moviw [5]fsr1
 12367  062F  0022               	movlb	2	; select bank2
 12368  0630  00A5               	movwf	(_RF_Data^(0+256)+5)
 12369                           
 12370                           ;RF_Control_B1.c: 205: RF_Data[6] = product->Data[6];
 12371  0631  0020               	movlb	0	; select bank0
 12372  0632  086D               	movf	_product,w
 12373  0633  0086               	movwf	6
 12374  0634  3002               	movlw	2	; select bank4/5
 12375  0635  0087               	movwf	7
 12376  0636  3002               	movlw	2	; select bank4/5
 12377  0637  3F46               	moviw [6]fsr1
 12378  0638  0022               	movlb	2	; select bank2
 12379  0639  00A6               	movwf	(_RF_Data^(0+256)+6)
 12380                           
 12381                           ;RF_Control_B1.c: 206: RF_Data[7] = product->Data[7];
 12382  063A  0020               	movlb	0	; select bank0
 12383  063B  086D               	movf	_product,w
 12384  063C  0086               	movwf	6
 12385  063D  3002               	movlw	2	; select bank4/5
 12386  063E  0087               	movwf	7
 12387  063F  3002               	movlw	2	; select bank4/5
 12388  0640  3F47               	moviw [7]fsr1
 12389  0641  0022               	movlb	2	; select bank2
 12390  0642  00A7               	movwf	(_RF_Data^(0+256)+7)
 12391                           
 12392                           ;RF_Control_B1.c: 207: RF_Data[8] = product->Data[8];
 12393  0643  0020               	movlb	0	; select bank0
 12394  0644  086D               	movf	_product,w
 12395  0645  0086               	movwf	6
 12396  0646  3002               	movlw	2	; select bank4/5
 12397  0647  0087               	movwf	7
 12398  0648  3002               	movlw	2	; select bank4/5
 12399  0649  3F48               	moviw [8]fsr1
 12400  064A  0022               	movlb	2	; select bank2
 12401  064B  00A8               	movwf	(_RF_Data^(0+256)+8)
 12402                           
 12403                           ;RF_Control_B1.c: 208: RF_Data[9] = product->Data[9];
 12404  064C  0020               	movlb	0	; select bank0
 12405  064D  086D               	movf	_product,w
 12406  064E  0086               	movwf	6
 12407  064F  3002               	movlw	2	; select bank4/5
 12408  0650  0087               	movwf	7
 12409  0651  3002               	movlw	2	; select bank4/5
 12410  0652  3F49               	moviw [9]fsr1
 12411  0653  0022               	movlb	2	; select bank2
 12412  0654  00A9               	movwf	(_RF_Data^(0+256)+9)
 12413                           
 12414                           ;RF_Control_B1.c: 209: RF_Data[10] = product->Data[10];
 12415  0655  0020               	movlb	0	; select bank0
 12416  0656  086D               	movf	_product,w
 12417  0657  0086               	movwf	6
 12418  0658  3002               	movlw	2	; select bank4/5
 12419  0659  0087               	movwf	7
 12420  065A  3002               	movlw	2	; select bank4/5
 12421  065B  3F4A               	moviw [10]fsr1
 12422  065C  0022               	movlb	2	; select bank2
 12423  065D  00AA               	movwf	(_RF_Data^(0+256)+10)
 12424                           
 12425                           ;RF_Control_B1.c: 210: RF_Data[11] = product->Data[11];
 12426  065E  0020               	movlb	0	; select bank0
 12427  065F  086D               	movf	_product,w
 12428  0660  0086               	movwf	6
 12429  0661  3002               	movlw	2	; select bank4/5
 12430  0662  0087               	movwf	7
 12431  0663  3002               	movlw	2	; select bank4/5
 12432  0664  3F4B               	moviw [11]fsr1
 12433  0665  0022               	movlb	2	; select bank2
 12434  0666  00AB               	movwf	(_RF_Data^(0+256)+11)
 12435                           
 12436                           ;RF_Control_B1.c: 211: RF_Data[12] = product->Data[12];
 12437  0667  0020               	movlb	0	; select bank0
 12438  0668  086D               	movf	_product,w
 12439  0669  0086               	movwf	6
 12440  066A  3002               	movlw	2	; select bank4/5
 12441  066B  0087               	movwf	7
 12442  066C  3002               	movlw	2	; select bank4/5
 12443  066D  3F4C               	moviw [12]fsr1
 12444  066E  0022               	movlb	2	; select bank2
 12445  066F  00AC               	movwf	(_RF_Data^(0+256)+12)
 12446                           
 12447                           ;RF_Control_B1.c: 212: RF_Data[13] = product->Data[13];
 12448  0670  0020               	movlb	0	; select bank0
 12449  0671  086D               	movf	_product,w
 12450  0672  0086               	movwf	6
 12451  0673  3002               	movlw	2	; select bank4/5
 12452  0674  0087               	movwf	7
 12453  0675  3002               	movlw	2	; select bank4/5
 12454  0676  3F4D               	moviw [13]fsr1
 12455  0677  0022               	movlb	2	; select bank2
 12456  0678  00AD               	movwf	(_RF_Data^(0+256)+13)
 12457                           
 12458                           ;RF_Control_B1.c: 213: RF_Data[14] = product->Data[14];
 12459  0679  0020               	movlb	0	; select bank0
 12460  067A  086D               	movf	_product,w
 12461  067B  0086               	movwf	6
 12462  067C  3002               	movlw	2	; select bank4/5
 12463  067D  0087               	movwf	7
 12464  067E  3002               	movlw	2	; select bank4/5
 12465  067F  3F4E               	moviw [14]fsr1
 12466  0680  0022               	movlb	2	; select bank2
 12467  0681  00AE               	movwf	(_RF_Data^(0+256)+14)
 12468                           
 12469                           ;RF_Control_B1.c: 214: RF_Data[15] = product->Data[15];
 12470  0682  0020               	movlb	0	; select bank0
 12471  0683  086D               	movf	_product,w
 12472  0684  0086               	movwf	6
 12473  0685  3002               	movlw	2	; select bank4/5
 12474  0686  0087               	movwf	7
 12475  0687  3002               	movlw	2	; select bank4/5
 12476  0688  3F4F               	moviw [15]fsr1
 12477  0689  0022               	movlb	2	; select bank2
 12478  068A  00AF               	movwf	(_RF_Data^(0+256)+15)
 12479                           
 12480                           ;RF_Control_B1.c: 215: RF_Data[16] = product->Data[16];
 12481  068B  0020               	movlb	0	; select bank0
 12482  068C  086D               	movf	_product,w
 12483  068D  0086               	movwf	6
 12484  068E  3002               	movlw	2	; select bank4/5
 12485  068F  0087               	movwf	7
 12486  0690  3002               	movlw	2	; select bank4/5
 12487  0691  3F50               	moviw [16]fsr1
 12488  0692  0022               	movlb	2	; select bank2
 12489  0693  00B0               	movwf	(_RF_Data^(0+256)+16)
 12490                           
 12491                           ;RF_Control_B1.c: 216: RF_Data[17] = product->Data[17];
 12492  0694  0020               	movlb	0	; select bank0
 12493  0695  086D               	movf	_product,w
 12494  0696  0086               	movwf	6
 12495  0697  3002               	movlw	2	; select bank4/5
 12496  0698  0087               	movwf	7
 12497  0699  3002               	movlw	2	; select bank4/5
 12498  069A  3F51               	moviw [17]fsr1
 12499  069B  0022               	movlb	2	; select bank2
 12500  069C  00B1               	movwf	(_RF_Data^(0+256)+17)
 12501                           
 12502                           ;RF_Control_B1.c: 217: RF_Data[18] = product->Data[18];
 12503  069D  0020               	movlb	0	; select bank0
 12504  069E  086D               	movf	_product,w
 12505  069F  0086               	movwf	6
 12506  06A0  3002               	movlw	2	; select bank4/5
 12507  06A1  0087               	movwf	7
 12508  06A2  3002               	movlw	2	; select bank4/5
 12509  06A3  3F52               	moviw [18]fsr1
 12510  06A4  0022               	movlb	2	; select bank2
 12511  06A5  00B2               	movwf	(_RF_Data^(0+256)+18)
 12512                           
 12513                           ;RF_Control_B1.c: 218: RF_Data[19] = product->Data[19];
 12514  06A6  0020               	movlb	0	; select bank0
 12515  06A7  086D               	movf	_product,w
 12516  06A8  0086               	movwf	6
 12517  06A9  3002               	movlw	2	; select bank4/5
 12518  06AA  0087               	movwf	7
 12519  06AB  3002               	movlw	2	; select bank4/5
 12520  06AC  3F53               	moviw [19]fsr1
 12521  06AD  0022               	movlb	2	; select bank2
 12522  06AE  00B3               	movwf	(_RF_Data^(0+256)+19)
 12523                           
 12524                           ;RF_Control_B1.c: 219: RF_Data[20] = 211;
 12525  06AF  30D3               	movlw	211
 12526  06B0  0020               	movlb	0	; select bank0
 12527  06B1  00A0               	movwf	??_setTxData
 12528  06B2  0820               	movf	??_setTxData,w
 12529  06B3  0022               	movlb	2	; select bank2
 12530  06B4  00B4               	movwf	(_RF_Data^(0+256)+20)
 12531  06B5  0008               	return
 12532  06B6                     __end_of_setTxData:	
 12533                           
 12534                           	psect	text73
 12535  1F1F                     __ptext73:	
 12536 ;; *************** function _setSw_Status *****************
 12537 ;; Defined at:
 12538 ;;		line 111 in file "../src/Switch_B1.c"
 12539 ;; Parameters:    Size  Location     Type
 12540 ;;  sw              1    wreg     unsigned char 
 12541 ;;  command         1    2[BANK0 ] unsigned char 
 12542 ;; Auto vars:     Size  Location     Type
 12543 ;;  sw              1    3[BANK0 ] unsigned char 
 12544 ;; Return value:  Size  Location     Type
 12545 ;;		None               void
 12546 ;; Registers used:
 12547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12548 ;; Tracked objects:
 12549 ;;		On entry : 0/0
 12550 ;;		On exit  : 0/0
 12551 ;;		Unchanged: 0/0
 12552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12553 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;Total ram usage:        2 bytes
 12558 ;; Hardware stack levels used:    1
 12559 ;; Hardware stack levels required when called:    6
 12560 ;; This function calls:
 12561 ;;		_SwPointSelect
 12562 ;; This function is called by:
 12563 ;;		_DlyOff_Main
 12564 ;;		_setControl_Lights_Table
 12565 ;;		_setRFSW_Control
 12566 ;;		_setDimmerLights_ERROR
 12567 ;; This function uses a non-reentrant model
 12568 ;;
 12569                           
 12570                           
 12571                           ;psect for function _setSw_Status
 12572  1F1F                     _setSw_Status:	
 12573                           
 12574                           ;incstack = 0
 12575                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12576                           ;setSw_Status@sw stored from wreg
 12577  1F1F  0020               	movlb	0	; select bank0
 12578  1F20  00A3               	movwf	setSw_Status@sw
 12579                           
 12580                           ;Switch_B1.c: 112: SwPointSelect(sw);
 12581  1F21  0823               	movf	setSw_Status@sw,w
 12582  1F22  3191  21CD         	fcall	_SwPointSelect
 12583                           
 12584                           ;Switch_B1.c: 113: Sw->Status = command;
 12585  1F24  0020               	movlb	0	; select bank0
 12586  1F25  086C               	movf	_Sw,w
 12587  1F26  0086               	movwf	6
 12588  1F27  3001               	movlw	1	; select bank2/3
 12589  1F28  0087               	movwf	7
 12590  1F29  0822               	movf	setSw_Status@command,w
 12591  1F2A  1301               	bcf	1,6
 12592  1F2B  1D03               	skipz
 12593  1F2C  1701               	bsf	1,6
 12594  1F2D  0008               	return
 12595  1F2E                     __end_of_setSw_Status:	
 12596                           
 12597                           	psect	text74
 12598  11CD                     __ptext74:	
 12599 ;; *************** function _SwPointSelect *****************
 12600 ;; Defined at:
 12601 ;;		line 21 in file "../src/Switch_B1.c"
 12602 ;; Parameters:    Size  Location     Type
 12603 ;;  sw              1    wreg     unsigned char 
 12604 ;; Auto vars:     Size  Location     Type
 12605 ;;  sw              1    1[BANK0 ] unsigned char 
 12606 ;; Return value:  Size  Location     Type
 12607 ;;		None               void
 12608 ;; Registers used:
 12609 ;;		wreg
 12610 ;; Tracked objects:
 12611 ;;		On entry : 0/0
 12612 ;;		On exit  : 0/0
 12613 ;;		Unchanged: 0/0
 12614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12618 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12619 ;;Total ram usage:        2 bytes
 12620 ;; Hardware stack levels used:    1
 12621 ;; Hardware stack levels required when called:    5
 12622 ;; This function calls:
 12623 ;;		Nothing
 12624 ;; This function is called by:
 12625 ;;		_setSw_Enable
 12626 ;;		_setSw_Status
 12627 ;;		_setSw_Main
 12628 ;;		_Sw_Detect
 12629 ;; This function uses a non-reentrant model
 12630 ;;
 12631                           
 12632                           
 12633                           ;psect for function _SwPointSelect
 12634  11CD                     _SwPointSelect:	
 12635                           
 12636                           ;incstack = 0
 12637                           ; Regs used in _SwPointSelect: [wreg]
 12638                           ;SwPointSelect@sw stored from wreg
 12639  11CD  0020               	movlb	0	; select bank0
 12640  11CE  00A1               	movwf	SwPointSelect@sw
 12641                           
 12642                           ;Switch_B1.c: 24: if (sw == 1) {
 12643  11CF  0821               	movf	SwPointSelect@sw,w
 12644  11D0  3A01               	xorlw	1
 12645  11D1  1D03               	skipz
 12646  11D2  29D8               	goto	l8057
 12647                           
 12648                           ;Switch_B1.c: 25: Sw = &Sw1;
 12649  11D3  305B               	movlw	_Sw1& (0+255)
 12650  11D4  00A0               	movwf	??_SwPointSelect
 12651  11D5  0820               	movf	??_SwPointSelect,w
 12652  11D6  00EC               	movwf	_Sw
 12653                           
 12654                           ;Switch_B1.c: 26: }
 12655  11D7  0008               	return
 12656  11D8                     l8057:	
 12657                           
 12658                           ;Switch_B1.c: 29: else if (sw == 2) {
 12659  11D8  0821               	movf	SwPointSelect@sw,w
 12660  11D9  3A02               	xorlw	2
 12661  11DA  1D03               	skipz
 12662  11DB  29E1               	goto	l8061
 12663                           
 12664                           ;Switch_B1.c: 30: Sw = &Sw2;
 12665  11DC  30D4               	movlw	_Sw2& (0+255)
 12666  11DD  00A0               	movwf	??_SwPointSelect
 12667  11DE  0820               	movf	??_SwPointSelect,w
 12668  11DF  00EC               	movwf	_Sw
 12669                           
 12670                           ;Switch_B1.c: 31: }
 12671  11E0  0008               	return
 12672  11E1                     l8061:	
 12673                           
 12674                           ;Switch_B1.c: 34: else if (sw == 3) {
 12675  11E1  0821               	movf	SwPointSelect@sw,w
 12676  11E2  3A03               	xorlw	3
 12677  11E3  1D03               	skipz
 12678  11E4  0008               	return
 12679                           
 12680                           ;Switch_B1.c: 35: Sw = &Sw3;
 12681  11E5  30DD               	movlw	_Sw3& (0+255)
 12682  11E6  00A0               	movwf	??_SwPointSelect
 12683  11E7  0820               	movf	??_SwPointSelect,w
 12684  11E8  00EC               	movwf	_Sw
 12685  11E9  0008               	return
 12686  11EA                     __end_of_SwPointSelect:	
 12687                           
 12688                           	psect	text75
 12689  0ACE                     __ptext75:	
 12690 ;; *************** function _setRF_DimmerLights *****************
 12691 ;; Defined at:
 12692 ;;		line 450 in file "../src/RF_Control_B1.c"
 12693 ;; Parameters:    Size  Location     Type
 12694 ;;  lights          1    wreg     unsigned char 
 12695 ;;  on              1   61[BANK0 ] unsigned char 
 12696 ;; Auto vars:     Size  Location     Type
 12697 ;;  lights          1   65[BANK0 ] unsigned char 
 12698 ;;  status          1   64[BANK0 ] unsigned char 
 12699 ;; Return value:  Size  Location     Type
 12700 ;;		None               void
 12701 ;; Registers used:
 12702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12703 ;; Tracked objects:
 12704 ;;		On entry : 0/0
 12705 ;;		On exit  : 0/0
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12708 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12709 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;Total ram usage:        5 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; Hardware stack levels required when called:    8
 12715 ;; This function calls:
 12716 ;;		_setPercentValue
 12717 ;; This function is called by:
 12718 ;;		_DlyOff_Main
 12719 ;;		_setDimmerLights_Adj
 12720 ;;		_setRFSW_Control
 12721 ;;		_Sw_DimmerOnFunc
 12722 ;;		_Sw_DimmerOffFunc
 12723 ;; This function uses a non-reentrant model
 12724 ;;
 12725                           
 12726                           
 12727                           ;psect for function _setRF_DimmerLights
 12728  0ACE                     _setRF_DimmerLights:	
 12729                           
 12730                           ;incstack = 0
 12731                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12732                           ;setRF_DimmerLights@lights stored from wreg
 12733  0ACE  0020               	movlb	0	; select bank0
 12734  0ACF  00E1               	movwf	setRF_DimmerLights@lights
 12735                           
 12736                           ;RF_Control_B1.c: 451: char status;
 12737                           ;RF_Control_B1.c: 452: status = 1;
 12738  0AD0  01E0               	clrf	setRF_DimmerLights@status
 12739  0AD1  0AE0               	incf	setRF_DimmerLights@status,f
 12740                           
 12741                           ;RF_Control_B1.c: 453: status <<= (lights - 1);
 12742  0AD2  0861               	movf	setRF_DimmerLights@lights,w
 12743  0AD3  3EFF               	addlw	-1
 12744  0AD4  0A89               	incf	9,f
 12745  0AD5  2AD8               	goto	u8150
 12746  0AD6                     u8155:	
 12747  0AD6  1003               	clrc
 12748  0AD7  0DE0               	rlf	setRF_DimmerLights@status,f
 12749  0AD8                     u8150:	
 12750  0AD8  3EFF               	addlw	-1
 12751  0AD9  1D03               	skipz
 12752  0ADA  2AD6               	goto	u8155
 12753                           
 12754                           ;RF_Control_B1.c: 454: product->Data[11]=lights;
 12755  0ADB  0861               	movf	setRF_DimmerLights@lights,w
 12756  0ADC  00DE               	movwf	??_setRF_DimmerLights
 12757  0ADD  086D               	movf	_product,w
 12758  0ADE  3E0B               	addlw	11
 12759  0ADF  0086               	movwf	6
 12760  0AE0  3002               	movlw	2	; select bank4/5
 12761  0AE1  0087               	movwf	7
 12762  0AE2  085E               	movf	??_setRF_DimmerLights,w
 12763  0AE3  0081               	movwf	1
 12764                           
 12765                           ;RF_Control_B1.c: 457: product->Data[(20 + lights)]=setPercentValue(((char)((100-90)*0.8
      +                          )));
 12766  0AE4  3008               	movlw	8
 12767  0AE5  3196  2678  318A   	fcall	_setPercentValue
 12768  0AE8  0020               	movlb	0	; select bank0
 12769  0AE9  00DE               	movwf	??_setRF_DimmerLights
 12770  0AEA  0861               	movf	setRF_DimmerLights@lights,w
 12771  0AEB  3E14               	addlw	20
 12772  0AEC  076D               	addwf	_product,w
 12773  0AED  00DF               	movwf	??_setRF_DimmerLights+1
 12774  0AEE  085F               	movf	??_setRF_DimmerLights+1,w
 12775  0AEF  0086               	movwf	6
 12776  0AF0  3002               	movlw	2	; select bank4/5
 12777  0AF1  0087               	movwf	7
 12778  0AF2  085E               	movf	??_setRF_DimmerLights,w
 12779  0AF3  0081               	movwf	1
 12780                           
 12781                           ;RF_Control_B1.c: 460: product->Data[9]=product->Data[20 + lights];
 12782  0AF4  0861               	movf	setRF_DimmerLights@lights,w
 12783  0AF5  3E14               	addlw	20
 12784  0AF6  076D               	addwf	_product,w
 12785  0AF7  00DE               	movwf	??_setRF_DimmerLights
 12786  0AF8  085E               	movf	??_setRF_DimmerLights,w
 12787  0AF9  0086               	movwf	6
 12788  0AFA  3002               	movlw	2	; select bank4/5
 12789  0AFB  0087               	movwf	7
 12790  0AFC  0801               	movf	1,w
 12791  0AFD  00DF               	movwf	??_setRF_DimmerLights+1
 12792  0AFE  086D               	movf	_product,w
 12793  0AFF  3E09               	addlw	9
 12794  0B00  0086               	movwf	6
 12795  0B01  3002               	movlw	2	; select bank4/5
 12796  0B02  0087               	movwf	7
 12797  0B03  085F               	movf	??_setRF_DimmerLights+1,w
 12798  0B04  0081               	movwf	1
 12799                           
 12800                           ;RF_Control_B1.c: 461: product->Data[17]=product->Data[26 + lights];
 12801  0B05  0861               	movf	setRF_DimmerLights@lights,w
 12802  0B06  3E1A               	addlw	26
 12803  0B07  076D               	addwf	_product,w
 12804  0B08  00DE               	movwf	??_setRF_DimmerLights
 12805  0B09  085E               	movf	??_setRF_DimmerLights,w
 12806  0B0A  0086               	movwf	6
 12807  0B0B  3002               	movlw	2	; select bank4/5
 12808  0B0C  0087               	movwf	7
 12809  0B0D  0801               	movf	1,w
 12810  0B0E  00DF               	movwf	??_setRF_DimmerLights+1
 12811  0B0F  086D               	movf	_product,w
 12812  0B10  3E11               	addlw	17
 12813  0B11  0086               	movwf	6
 12814  0B12  3002               	movlw	2	; select bank4/5
 12815  0B13  0087               	movwf	7
 12816  0B14  085F               	movf	??_setRF_DimmerLights+1,w
 12817  0B15  0081               	movwf	1
 12818                           
 12819                           ;RF_Control_B1.c: 462: if (on == 1) {
 12820  0B16  085D               	movf	setRF_DimmerLights@on,w
 12821  0B17  3A01               	xorlw	1
 12822  0B18  1D03               	skipz
 12823  0B19  2B2A               	goto	l8157
 12824                           
 12825                           ;RF_Control_B1.c: 463: product->Data[15]=(product->Data[15] | status);
 12826  0B1A  086D               	movf	_product,w
 12827  0B1B  3E0F               	addlw	15
 12828  0B1C  0086               	movwf	6
 12829  0B1D  3002               	movlw	2	; select bank4/5
 12830  0B1E  0087               	movwf	7
 12831  0B1F  0801               	movf	1,w
 12832  0B20  0460               	iorwf	setRF_DimmerLights@status,w
 12833  0B21  00DE               	movwf	??_setRF_DimmerLights
 12834  0B22  086D               	movf	_product,w
 12835  0B23  3E0F               	addlw	15
 12836  0B24  0086               	movwf	6
 12837  0B25  3002               	movlw	2	; select bank4/5
 12838  0B26  0087               	movwf	7
 12839  0B27  085E               	movf	??_setRF_DimmerLights,w
 12840  0B28  0081               	movwf	1
 12841                           
 12842                           ;RF_Control_B1.c: 464: } else {
 12843  0B29  0008               	return
 12844  0B2A                     l8157:	
 12845                           
 12846                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15]&(~status));
 12847  0B2A  086D               	movf	_product,w
 12848  0B2B  3E0F               	addlw	15
 12849  0B2C  0086               	movwf	6
 12850  0B2D  3002               	movlw	2	; select bank4/5
 12851  0B2E  0087               	movwf	7
 12852  0B2F  0960               	comf	setRF_DimmerLights@status,w
 12853  0B30  0501               	andwf	1,w
 12854  0B31  00DE               	movwf	??_setRF_DimmerLights
 12855  0B32  086D               	movf	_product,w
 12856  0B33  3E0F               	addlw	15
 12857  0B34  0086               	movwf	6
 12858  0B35  3002               	movlw	2	; select bank4/5
 12859  0B36  0087               	movwf	7
 12860  0B37  085E               	movf	??_setRF_DimmerLights,w
 12861  0B38  0081               	movwf	1
 12862  0B39  0008               	return
 12863  0B3A                     __end_of_setRF_DimmerLights:	
 12864                           
 12865                           	psect	text76
 12866  1678                     __ptext76:	
 12867 ;; *************** function _setPercentValue *****************
 12868 ;; Defined at:
 12869 ;;		line 777 in file "../src/Dimmer_B1.c"
 12870 ;; Parameters:    Size  Location     Type
 12871 ;;  value           1    wreg     unsigned char 
 12872 ;; Auto vars:     Size  Location     Type
 12873 ;;  value           1   57[BANK0 ] unsigned char 
 12874 ;;  i               3   58[BANK0 ] float 
 12875 ;; Return value:  Size  Location     Type
 12876 ;;                  1    wreg      unsigned char 
 12877 ;; Registers used:
 12878 ;;		wreg, status,2, status,0, pclath, cstack
 12879 ;; Tracked objects:
 12880 ;;		On entry : 0/0
 12881 ;;		On exit  : 0/0
 12882 ;;		Unchanged: 0/0
 12883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12885 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12887 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;Total ram usage:        4 bytes
 12889 ;; Hardware stack levels used:    1
 12890 ;; Hardware stack levels required when called:    7
 12891 ;; This function calls:
 12892 ;;		___awtoft
 12893 ;;		___ftdiv
 12894 ;;		___fttol
 12895 ;; This function is called by:
 12896 ;;		_Flash_Memory_Initialization
 12897 ;;		_setRF_DimmerLights
 12898 ;; This function uses a non-reentrant model
 12899 ;;
 12900                           
 12901                           
 12902                           ;psect for function _setPercentValue
 12903  1678                     _setPercentValue:	
 12904                           
 12905                           ;incstack = 0
 12906                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12907                           ;setPercentValue@value stored from wreg
 12908  1678  0020               	movlb	0	; select bank0
 12909  1679  00D9               	movwf	setPercentValue@value
 12910                           
 12911                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
 12912  167A  3000               	movlw	0
 12913  167B  00DA               	movwf	setPercentValue@i
 12914  167C  3050               	movlw	80
 12915  167D  00DB               	movwf	setPercentValue@i+1
 12916  167E  3042               	movlw	66
 12917  167F  00DC               	movwf	setPercentValue@i+2
 12918                           
 12919                           ;Dimmer_B1.c: 780: i /= 100;
 12920  1680  3000               	movlw	0
 12921  1681  00AE               	movwf	___ftdiv@f2
 12922  1682  30C8               	movlw	200
 12923  1683  00AF               	movwf	___ftdiv@f2+1
 12924  1684  3042               	movlw	66
 12925  1685  00B0               	movwf	___ftdiv@f2+2
 12926  1686  085A               	movf	setPercentValue@i,w
 12927  1687  00B1               	movwf	___ftdiv@f1
 12928  1688  085B               	movf	setPercentValue@i+1,w
 12929  1689  00B2               	movwf	___ftdiv@f1+1
 12930  168A  085C               	movf	setPercentValue@i+2,w
 12931  168B  00B3               	movwf	___ftdiv@f1+2
 12932  168C  318E  26A8  3196   	fcall	___ftdiv
 12933  168F  0020               	movlb	0	; select bank0
 12934  1690  082E               	movf	?___ftdiv,w
 12935  1691  00DA               	movwf	setPercentValue@i
 12936  1692  082F               	movf	?___ftdiv+1,w
 12937  1693  00DB               	movwf	setPercentValue@i+1
 12938  1694  0830               	movf	?___ftdiv+2,w
 12939  1695  00DC               	movwf	setPercentValue@i+2
 12940                           
 12941                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-90)*0.8))) / i));
 12942  1696  0859               	movf	setPercentValue@value,w
 12943  1697  3EF8               	addlw	248
 12944  1698  00A8               	movwf	___awtoft@c
 12945  1699  30FF               	movlw	255
 12946  169A  1803               	skipnc
 12947  169B  3000               	movlw	0
 12948  169C  00A9               	movwf	___awtoft@c+1
 12949  169D  3192  22AA  3196   	fcall	___awtoft
 12950  16A0  0020               	movlb	0	; select bank0
 12951  16A1  0828               	movf	?___awtoft,w
 12952  16A2  00B1               	movwf	___ftdiv@f1
 12953  16A3  0829               	movf	?___awtoft+1,w
 12954  16A4  00B2               	movwf	___ftdiv@f1+1
 12955  16A5  082A               	movf	?___awtoft+2,w
 12956  16A6  00B3               	movwf	___ftdiv@f1+2
 12957  16A7  085A               	movf	setPercentValue@i,w
 12958  16A8  00AE               	movwf	___ftdiv@f2
 12959  16A9  085B               	movf	setPercentValue@i+1,w
 12960  16AA  00AF               	movwf	___ftdiv@f2+1
 12961  16AB  085C               	movf	setPercentValue@i+2,w
 12962  16AC  00B0               	movwf	___ftdiv@f2+2
 12963  16AD  318E  26A8  3196   	fcall	___ftdiv
 12964  16B0  0020               	movlb	0	; select bank0
 12965  16B1  082E               	movf	?___ftdiv,w
 12966  16B2  00CB               	movwf	___fttol@f1
 12967  16B3  082F               	movf	?___ftdiv+1,w
 12968  16B4  00CC               	movwf	___fttol@f1+1
 12969  16B5  0830               	movf	?___ftdiv+2,w
 12970  16B6  00CD               	movwf	___fttol@f1+2
 12971  16B7  318D  2509         	fcall	___fttol
 12972  16B9  0020               	movlb	0	; select bank0
 12973  16BA  034B               	decf	?___fttol,w
 12974  16BB  3AFF               	xorlw	255
 12975  16BC  3E64               	addlw	100
 12976  16BD  0008               	return
 12977  16BE                     __end_of_setPercentValue:	
 12978                           
 12979                           	psect	text77
 12980  0D09                     __ptext77:	
 12981 ;; *************** function ___fttol *****************
 12982 ;; Defined at:
 12983 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12984 ;; Parameters:    Size  Location     Type
 12985 ;;  f1              3   43[BANK0 ] float 
 12986 ;; Auto vars:     Size  Location     Type
 12987 ;;  lval            4   52[BANK0 ] unsigned long 
 12988 ;;  exp1            1   56[BANK0 ] unsigned char 
 12989 ;;  sign1           1   51[BANK0 ] unsigned char 
 12990 ;; Return value:  Size  Location     Type
 12991 ;;                  4   43[BANK0 ] long 
 12992 ;; Registers used:
 12993 ;;		wreg, status,2, status,0
 12994 ;; Tracked objects:
 12995 ;;		On entry : 0/0
 12996 ;;		On exit  : 0/0
 12997 ;;		Unchanged: 0/0
 12998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12999 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13000 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13001 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13002 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;Total ram usage:       14 bytes
 13004 ;; Hardware stack levels used:    1
 13005 ;; Hardware stack levels required when called:    5
 13006 ;; This function calls:
 13007 ;;		Nothing
 13008 ;; This function is called by:
 13009 ;;		_getPercentValue
 13010 ;;		_setPercentValue
 13011 ;; This function uses a non-reentrant model
 13012 ;;
 13013                           
 13014                           
 13015                           ;psect for function ___fttol
 13016  0D09                     ___fttol:	
 13017                           
 13018                           ;incstack = 0
 13019                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13020  0D09  0020               	movlb	0	; select bank0
 13021  0D0A  084B               	movf	___fttol@f1,w
 13022  0D0B  00CF               	movwf	??___fttol
 13023  0D0C  084C               	movf	___fttol@f1+1,w
 13024  0D0D  00D0               	movwf	??___fttol+1
 13025  0D0E  084D               	movf	___fttol@f1+2,w
 13026  0D0F  00D1               	movwf	??___fttol+2
 13027  0D10  1003               	clrc
 13028  0D11  0D50               	rlf	??___fttol+1,w
 13029  0D12  0D51               	rlf	??___fttol+2,w
 13030  0D13  00D2               	movwf	??___fttol+3
 13031  0D14  0852               	movf	??___fttol+3,w
 13032  0D15  00D8               	movwf	___fttol@exp1
 13033  0D16  08D8               	movf	___fttol@exp1,f
 13034  0D17  1D03               	skipz
 13035  0D18  2D22               	goto	l5807
 13036  0D19  3000               	movlw	0
 13037  0D1A  00CE               	movwf	?___fttol+3
 13038  0D1B  3000               	movlw	0
 13039  0D1C  00CD               	movwf	?___fttol+2
 13040  0D1D  3000               	movlw	0
 13041  0D1E  00CC               	movwf	?___fttol+1
 13042  0D1F  3000               	movlw	0
 13043  0D20  00CB               	movwf	?___fttol
 13044  0D21  0008               	return
 13045  0D22                     l5807:	
 13046  0D22  084B               	movf	___fttol@f1,w
 13047  0D23  00CF               	movwf	??___fttol
 13048  0D24  084C               	movf	___fttol@f1+1,w
 13049  0D25  00D0               	movwf	??___fttol+1
 13050  0D26  084D               	movf	___fttol@f1+2,w
 13051  0D27  00D1               	movwf	??___fttol+2
 13052  0D28  3017               	movlw	23
 13053  0D29                     u4485:	
 13054  0D29  36D1               	lsrf	??___fttol+2,f
 13055  0D2A  0CD0               	rrf	??___fttol+1,f
 13056  0D2B  0CCF               	rrf	??___fttol,f
 13057  0D2C  0B89               	decfsz	9,f
 13058  0D2D  2D29               	goto	u4485
 13059  0D2E  084F               	movf	??___fttol,w
 13060  0D2F  00D2               	movwf	??___fttol+3
 13061  0D30  0852               	movf	??___fttol+3,w
 13062  0D31  00D3               	movwf	___fttol@sign1
 13063  0D32  17CC               	bsf	___fttol@f1+1,7
 13064  0D33  30FF               	movlw	255
 13065  0D34  05CB               	andwf	___fttol@f1,f
 13066  0D35  30FF               	movlw	255
 13067  0D36  05CC               	andwf	___fttol@f1+1,f
 13068  0D37  3000               	movlw	0
 13069  0D38  05CD               	andwf	___fttol@f1+2,f
 13070  0D39  084B               	movf	___fttol@f1,w
 13071  0D3A  00D4               	movwf	___fttol@lval
 13072  0D3B  084C               	movf	___fttol@f1+1,w
 13073  0D3C  00D5               	movwf	___fttol@lval+1
 13074  0D3D  084D               	movf	___fttol@f1+2,w
 13075  0D3E  00D6               	movwf	___fttol@lval+2
 13076  0D3F  01D7               	clrf	___fttol@lval+3
 13077  0D40  308E               	movlw	142
 13078  0D41  02D8               	subwf	___fttol@exp1,f
 13079  0D42  1FD8               	btfss	___fttol@exp1,7
 13080  0D43  2D60               	goto	l5827
 13081  0D44  0858               	movf	___fttol@exp1,w
 13082  0D45  3A80               	xorlw	128
 13083  0D46  3E8F               	addlw	143
 13084  0D47  1803               	skipnc
 13085  0D48  2D52               	goto	l5825
 13086  0D49  3000               	movlw	0
 13087  0D4A  00CE               	movwf	?___fttol+3
 13088  0D4B  3000               	movlw	0
 13089  0D4C  00CD               	movwf	?___fttol+2
 13090  0D4D  3000               	movlw	0
 13091  0D4E  00CC               	movwf	?___fttol+1
 13092  0D4F  3000               	movlw	0
 13093  0D50  00CB               	movwf	?___fttol
 13094  0D51  0008               	return
 13095  0D52                     l5825:	
 13096  0D52  3001               	movlw	1
 13097  0D53                     u4515:	
 13098  0D53  36D7               	lsrf	___fttol@lval+3,f
 13099  0D54  0CD6               	rrf	___fttol@lval+2,f
 13100  0D55  0CD5               	rrf	___fttol@lval+1,f
 13101  0D56  0CD4               	rrf	___fttol@lval,f
 13102  0D57  0B89               	decfsz	9,f
 13103  0D58  2D53               	goto	u4515
 13104  0D59  3001               	movlw	1
 13105  0D5A  00CF               	movwf	??___fttol
 13106  0D5B  084F               	movf	??___fttol,w
 13107  0D5C  07D8               	addwf	___fttol@exp1,f
 13108  0D5D  1903               	btfsc	3,2
 13109  0D5E  2D79               	goto	l5837
 13110  0D5F  2D52               	goto	l5825
 13111  0D60                     l5827:	
 13112  0D60  3018               	movlw	24
 13113  0D61  0258               	subwf	___fttol@exp1,w
 13114  0D62  1C03               	skipc
 13115  0D63  2D76               	goto	l5835
 13116  0D64  3000               	movlw	0
 13117  0D65  00CE               	movwf	?___fttol+3
 13118  0D66  3000               	movlw	0
 13119  0D67  00CD               	movwf	?___fttol+2
 13120  0D68  3000               	movlw	0
 13121  0D69  00CC               	movwf	?___fttol+1
 13122  0D6A  3000               	movlw	0
 13123  0D6B  00CB               	movwf	?___fttol
 13124  0D6C  0008               	return
 13125  0D6D                     l5833:	
 13126  0D6D  3001               	movlw	1
 13127  0D6E                     u4545:	
 13128  0D6E  35D4               	lslf	___fttol@lval,f
 13129  0D6F  0DD5               	rlf	___fttol@lval+1,f
 13130  0D70  0DD6               	rlf	___fttol@lval+2,f
 13131  0D71  0DD7               	rlf	___fttol@lval+3,f
 13132  0D72  0B89               	decfsz	9,f
 13133  0D73  2D6E               	goto	u4545
 13134  0D74  3001               	movlw	1
 13135  0D75  02D8               	subwf	___fttol@exp1,f
 13136  0D76                     l5835:	
 13137  0D76  08D8               	movf	___fttol@exp1,f
 13138  0D77  1D03               	skipz
 13139  0D78  2D6D               	goto	l5833
 13140  0D79                     l5837:	
 13141  0D79  0853               	movf	___fttol@sign1,w
 13142  0D7A  1903               	btfsc	3,2
 13143  0D7B  2D87               	goto	l5841
 13144  0D7C  09D4               	comf	___fttol@lval,f
 13145  0D7D  09D5               	comf	___fttol@lval+1,f
 13146  0D7E  09D6               	comf	___fttol@lval+2,f
 13147  0D7F  09D7               	comf	___fttol@lval+3,f
 13148  0D80  0AD4               	incf	___fttol@lval,f
 13149  0D81  1903               	skipnz
 13150  0D82  0AD5               	incf	___fttol@lval+1,f
 13151  0D83  1903               	skipnz
 13152  0D84  0AD6               	incf	___fttol@lval+2,f
 13153  0D85  1903               	skipnz
 13154  0D86  0AD7               	incf	___fttol@lval+3,f
 13155  0D87                     l5841:	
 13156  0D87  0857               	movf	___fttol@lval+3,w
 13157  0D88  00CE               	movwf	?___fttol+3
 13158  0D89  0856               	movf	___fttol@lval+2,w
 13159  0D8A  00CD               	movwf	?___fttol+2
 13160  0D8B  0855               	movf	___fttol@lval+1,w
 13161  0D8C  00CC               	movwf	?___fttol+1
 13162  0D8D  0854               	movf	___fttol@lval,w
 13163  0D8E  00CB               	movwf	?___fttol
 13164  0D8F  0008               	return
 13165  0D90                     __end_of___fttol:	
 13166                           
 13167                           	psect	text78
 13168  0EA8                     __ptext78:	
 13169 ;; *************** function ___ftdiv *****************
 13170 ;; Defined at:
 13171 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13172 ;; Parameters:    Size  Location     Type
 13173 ;;  f2              3   14[BANK0 ] float 
 13174 ;;  f1              3   17[BANK0 ] float 
 13175 ;; Auto vars:     Size  Location     Type
 13176 ;;  f3              3   25[BANK0 ] float 
 13177 ;;  sign            1   29[BANK0 ] unsigned char 
 13178 ;;  exp             1   28[BANK0 ] unsigned char 
 13179 ;;  cntr            1   24[BANK0 ] unsigned char 
 13180 ;; Return value:  Size  Location     Type
 13181 ;;                  3   14[BANK0 ] float 
 13182 ;; Registers used:
 13183 ;;		wreg, status,2, status,0, pclath, cstack
 13184 ;; Tracked objects:
 13185 ;;		On entry : 0/0
 13186 ;;		On exit  : 0/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13189 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;Total ram usage:       16 bytes
 13194 ;; Hardware stack levels used:    1
 13195 ;; Hardware stack levels required when called:    6
 13196 ;; This function calls:
 13197 ;;		___ftpack
 13198 ;; This function is called by:
 13199 ;;		_getPercentValue
 13200 ;;		_setPercentValue
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           
 13205                           ;psect for function ___ftdiv
 13206  0EA8                     ___ftdiv:	
 13207                           
 13208                           ;incstack = 0
 13209                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13210  0EA8  0020               	movlb	0	; select bank0
 13211  0EA9  0831               	movf	___ftdiv@f1,w
 13212  0EAA  00B4               	movwf	??___ftdiv
 13213  0EAB  0832               	movf	___ftdiv@f1+1,w
 13214  0EAC  00B5               	movwf	??___ftdiv+1
 13215  0EAD  0833               	movf	___ftdiv@f1+2,w
 13216  0EAE  00B6               	movwf	??___ftdiv+2
 13217  0EAF  1003               	clrc
 13218  0EB0  0D35               	rlf	??___ftdiv+1,w
 13219  0EB1  0D36               	rlf	??___ftdiv+2,w
 13220  0EB2  00B7               	movwf	??___ftdiv+3
 13221  0EB3  0837               	movf	??___ftdiv+3,w
 13222  0EB4  00BC               	movwf	___ftdiv@exp
 13223  0EB5  08BC               	movf	___ftdiv@exp,f
 13224  0EB6  1D03               	skipz
 13225  0EB7  2EBF               	goto	l5715
 13226  0EB8  3000               	movlw	0
 13227  0EB9  00AE               	movwf	?___ftdiv
 13228  0EBA  3000               	movlw	0
 13229  0EBB  00AF               	movwf	?___ftdiv+1
 13230  0EBC  3000               	movlw	0
 13231  0EBD  00B0               	movwf	?___ftdiv+2
 13232  0EBE  0008               	return
 13233  0EBF                     l5715:	
 13234  0EBF  082E               	movf	___ftdiv@f2,w
 13235  0EC0  00B4               	movwf	??___ftdiv
 13236  0EC1  082F               	movf	___ftdiv@f2+1,w
 13237  0EC2  00B5               	movwf	??___ftdiv+1
 13238  0EC3  0830               	movf	___ftdiv@f2+2,w
 13239  0EC4  00B6               	movwf	??___ftdiv+2
 13240  0EC5  1003               	clrc
 13241  0EC6  0D35               	rlf	??___ftdiv+1,w
 13242  0EC7  0D36               	rlf	??___ftdiv+2,w
 13243  0EC8  00B7               	movwf	??___ftdiv+3
 13244  0EC9  0837               	movf	??___ftdiv+3,w
 13245  0ECA  00BD               	movwf	___ftdiv@sign
 13246  0ECB  08BD               	movf	___ftdiv@sign,f
 13247  0ECC  1D03               	skipz
 13248  0ECD  2ED5               	goto	l5721
 13249  0ECE  3000               	movlw	0
 13250  0ECF  00AE               	movwf	?___ftdiv
 13251  0ED0  3000               	movlw	0
 13252  0ED1  00AF               	movwf	?___ftdiv+1
 13253  0ED2  3000               	movlw	0
 13254  0ED3  00B0               	movwf	?___ftdiv+2
 13255  0ED4  0008               	return
 13256  0ED5                     l5721:	
 13257  0ED5  3000               	movlw	0
 13258  0ED6  00B9               	movwf	___ftdiv@f3
 13259  0ED7  3000               	movlw	0
 13260  0ED8  00BA               	movwf	___ftdiv@f3+1
 13261  0ED9  3000               	movlw	0
 13262  0EDA  00BB               	movwf	___ftdiv@f3+2
 13263  0EDB  3089               	movlw	137
 13264  0EDC  073D               	addwf	___ftdiv@sign,w
 13265  0EDD  00B4               	movwf	??___ftdiv
 13266  0EDE  0834               	movf	??___ftdiv,w
 13267  0EDF  02BC               	subwf	___ftdiv@exp,f
 13268  0EE0  0831               	movf	___ftdiv@f1,w
 13269  0EE1  00B4               	movwf	??___ftdiv
 13270  0EE2  0832               	movf	___ftdiv@f1+1,w
 13271  0EE3  00B5               	movwf	??___ftdiv+1
 13272  0EE4  0833               	movf	___ftdiv@f1+2,w
 13273  0EE5  00B6               	movwf	??___ftdiv+2
 13274  0EE6  3010               	movlw	16
 13275  0EE7                     u4295:	
 13276  0EE7  36B6               	lsrf	??___ftdiv+2,f
 13277  0EE8  0CB5               	rrf	??___ftdiv+1,f
 13278  0EE9  0CB4               	rrf	??___ftdiv,f
 13279  0EEA  0B89               	decfsz	9,f
 13280  0EEB  2EE7               	goto	u4295
 13281  0EEC  0834               	movf	??___ftdiv,w
 13282  0EED  00B7               	movwf	??___ftdiv+3
 13283  0EEE  0837               	movf	??___ftdiv+3,w
 13284  0EEF  00BD               	movwf	___ftdiv@sign
 13285  0EF0  082E               	movf	___ftdiv@f2,w
 13286  0EF1  00B4               	movwf	??___ftdiv
 13287  0EF2  082F               	movf	___ftdiv@f2+1,w
 13288  0EF3  00B5               	movwf	??___ftdiv+1
 13289  0EF4  0830               	movf	___ftdiv@f2+2,w
 13290  0EF5  00B6               	movwf	??___ftdiv+2
 13291  0EF6  3010               	movlw	16
 13292  0EF7                     u4305:	
 13293  0EF7  36B6               	lsrf	??___ftdiv+2,f
 13294  0EF8  0CB5               	rrf	??___ftdiv+1,f
 13295  0EF9  0CB4               	rrf	??___ftdiv,f
 13296  0EFA  0B89               	decfsz	9,f
 13297  0EFB  2EF7               	goto	u4305
 13298  0EFC  0834               	movf	??___ftdiv,w
 13299  0EFD  00B7               	movwf	??___ftdiv+3
 13300  0EFE  0837               	movf	??___ftdiv+3,w
 13301  0EFF  06BD               	xorwf	___ftdiv@sign,f
 13302  0F00  3080               	movlw	128
 13303  0F01  00B4               	movwf	??___ftdiv
 13304  0F02  0834               	movf	??___ftdiv,w
 13305  0F03  05BD               	andwf	___ftdiv@sign,f
 13306  0F04  17B2               	bsf	___ftdiv@f1+1,7
 13307  0F05  30FF               	movlw	255
 13308  0F06  05B1               	andwf	___ftdiv@f1,f
 13309  0F07  30FF               	movlw	255
 13310  0F08  05B2               	andwf	___ftdiv@f1+1,f
 13311  0F09  3000               	movlw	0
 13312  0F0A  05B3               	andwf	___ftdiv@f1+2,f
 13313  0F0B  17AF               	bsf	___ftdiv@f2+1,7
 13314  0F0C  30FF               	movlw	255
 13315  0F0D  05AE               	andwf	___ftdiv@f2,f
 13316  0F0E  30FF               	movlw	255
 13317  0F0F  05AF               	andwf	___ftdiv@f2+1,f
 13318  0F10  3000               	movlw	0
 13319  0F11  05B0               	andwf	___ftdiv@f2+2,f
 13320  0F12  3018               	movlw	24
 13321  0F13  00B4               	movwf	??___ftdiv
 13322  0F14  0834               	movf	??___ftdiv,w
 13323  0F15  00B8               	movwf	___ftdiv@cntr
 13324  0F16                     l5735:	
 13325  0F16  3001               	movlw	1
 13326  0F17                     u4315:	
 13327  0F17  35B9               	lslf	___ftdiv@f3,f
 13328  0F18  0DBA               	rlf	___ftdiv@f3+1,f
 13329  0F19  0DBB               	rlf	___ftdiv@f3+2,f
 13330  0F1A  0B89               	decfsz	9,f
 13331  0F1B  2F17               	goto	u4315
 13332  0F1C  0830               	movf	___ftdiv@f2+2,w
 13333  0F1D  0233               	subwf	___ftdiv@f1+2,w
 13334  0F1E  1D03               	skipz
 13335  0F1F  2F26               	goto	u4325
 13336  0F20  082F               	movf	___ftdiv@f2+1,w
 13337  0F21  0232               	subwf	___ftdiv@f1+1,w
 13338  0F22  1D03               	skipz
 13339  0F23  2F26               	goto	u4325
 13340  0F24  082E               	movf	___ftdiv@f2,w
 13341  0F25  0231               	subwf	___ftdiv@f1,w
 13342  0F26                     u4325:	
 13343  0F26  1C03               	skipc
 13344  0F27  2F2F               	goto	l5743
 13345  0F28  082E               	movf	___ftdiv@f2,w
 13346  0F29  02B1               	subwf	___ftdiv@f1,f
 13347  0F2A  082F               	movf	___ftdiv@f2+1,w
 13348  0F2B  3BB2               	subwfb	___ftdiv@f1+1,f
 13349  0F2C  0830               	movf	___ftdiv@f2+2,w
 13350  0F2D  3BB3               	subwfb	___ftdiv@f1+2,f
 13351  0F2E  1439               	bsf	___ftdiv@f3,0
 13352  0F2F                     l5743:	
 13353  0F2F  3001               	movlw	1
 13354  0F30                     u4335:	
 13355  0F30  35B1               	lslf	___ftdiv@f1,f
 13356  0F31  0DB2               	rlf	___ftdiv@f1+1,f
 13357  0F32  0DB3               	rlf	___ftdiv@f1+2,f
 13358  0F33  0B89               	decfsz	9,f
 13359  0F34  2F30               	goto	u4335
 13360  0F35  3001               	movlw	1
 13361  0F36  02B8               	subwf	___ftdiv@cntr,f
 13362  0F37  1D03               	btfss	3,2
 13363  0F38  2F16               	goto	l5735
 13364  0F39  0839               	movf	___ftdiv@f3,w
 13365  0F3A  00A0               	movwf	___ftpack@arg
 13366  0F3B  083A               	movf	___ftdiv@f3+1,w
 13367  0F3C  00A1               	movwf	___ftpack@arg+1
 13368  0F3D  083B               	movf	___ftdiv@f3+2,w
 13369  0F3E  00A2               	movwf	___ftpack@arg+2
 13370  0F3F  083C               	movf	___ftdiv@exp,w
 13371  0F40  00B4               	movwf	??___ftdiv
 13372  0F41  0834               	movf	??___ftdiv,w
 13373  0F42  00A3               	movwf	___ftpack@exp
 13374  0F43  083D               	movf	___ftdiv@sign,w
 13375  0F44  00B5               	movwf	??___ftdiv+1
 13376  0F45  0835               	movf	??___ftdiv+1,w
 13377  0F46  00A4               	movwf	___ftpack@sign
 13378  0F47  3188  20D0         	fcall	___ftpack
 13379  0F49  0020               	movlb	0	; select bank0
 13380  0F4A  0820               	movf	?___ftpack,w
 13381  0F4B  00AE               	movwf	?___ftdiv
 13382  0F4C  0821               	movf	?___ftpack+1,w
 13383  0F4D  00AF               	movwf	?___ftdiv+1
 13384  0F4E  0822               	movf	?___ftpack+2,w
 13385  0F4F  00B0               	movwf	?___ftdiv+2
 13386  0F50  0008               	return
 13387  0F51                     __end_of___ftdiv:	
 13388                           
 13389                           	psect	text79
 13390  12AA                     __ptext79:	
 13391 ;; *************** function ___awtoft *****************
 13392 ;; Defined at:
 13393 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13394 ;; Parameters:    Size  Location     Type
 13395 ;;  c               2    8[BANK0 ] int 
 13396 ;; Auto vars:     Size  Location     Type
 13397 ;;  sign            1   13[BANK0 ] unsigned char 
 13398 ;; Return value:  Size  Location     Type
 13399 ;;                  3    8[BANK0 ] float 
 13400 ;; Registers used:
 13401 ;;		wreg, status,2, status,0, pclath, cstack
 13402 ;; Tracked objects:
 13403 ;;		On entry : 0/0
 13404 ;;		On exit  : 0/0
 13405 ;;		Unchanged: 0/0
 13406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13407 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;Total ram usage:        6 bytes
 13412 ;; Hardware stack levels used:    1
 13413 ;; Hardware stack levels required when called:    6
 13414 ;; This function calls:
 13415 ;;		___ftpack
 13416 ;; This function is called by:
 13417 ;;		_getPercentValue
 13418 ;;		_setPercentValue
 13419 ;; This function uses a non-reentrant model
 13420 ;;
 13421                           
 13422                           
 13423                           ;psect for function ___awtoft
 13424  12AA                     ___awtoft:	
 13425                           
 13426                           ;incstack = 0
 13427                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13428  12AA  0020               	movlb	0	; select bank0
 13429  12AB  01AD               	clrf	___awtoft@sign
 13430  12AC  1FA9               	btfss	___awtoft@c+1,7
 13431  12AD  2AB5               	goto	l7957
 13432  12AE  09A8               	comf	___awtoft@c,f
 13433  12AF  09A9               	comf	___awtoft@c+1,f
 13434  12B0  0AA8               	incf	___awtoft@c,f
 13435  12B1  1903               	skipnz
 13436  12B2  0AA9               	incf	___awtoft@c+1,f
 13437  12B3  01AD               	clrf	___awtoft@sign
 13438  12B4  0AAD               	incf	___awtoft@sign,f
 13439  12B5                     l7957:	
 13440  12B5  0828               	movf	___awtoft@c,w
 13441  12B6  00A0               	movwf	___ftpack@arg
 13442  12B7  0829               	movf	___awtoft@c+1,w
 13443  12B8  00A1               	movwf	___ftpack@arg+1
 13444  12B9  01A2               	clrf	___ftpack@arg+2
 13445  12BA  308E               	movlw	142
 13446  12BB  00AB               	movwf	??___awtoft
 13447  12BC  082B               	movf	??___awtoft,w
 13448  12BD  00A3               	movwf	___ftpack@exp
 13449  12BE  082D               	movf	___awtoft@sign,w
 13450  12BF  00AC               	movwf	??___awtoft+1
 13451  12C0  082C               	movf	??___awtoft+1,w
 13452  12C1  00A4               	movwf	___ftpack@sign
 13453  12C2  3188  20D0         	fcall	___ftpack
 13454  12C4  0020               	movlb	0	; select bank0
 13455  12C5  0820               	movf	?___ftpack,w
 13456  12C6  00A8               	movwf	?___awtoft
 13457  12C7  0821               	movf	?___ftpack+1,w
 13458  12C8  00A9               	movwf	?___awtoft+1
 13459  12C9  0822               	movf	?___ftpack+2,w
 13460  12CA  00AA               	movwf	?___awtoft+2
 13461  12CB  0008               	return
 13462  12CC                     __end_of___awtoft:	
 13463                           
 13464                           	psect	text80
 13465  08D0                     __ptext80:	
 13466 ;; *************** function ___ftpack *****************
 13467 ;; Defined at:
 13468 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13469 ;; Parameters:    Size  Location     Type
 13470 ;;  arg             3    0[BANK0 ] unsigned um
 13471 ;;  exp             1    3[BANK0 ] unsigned char 
 13472 ;;  sign            1    4[BANK0 ] unsigned char 
 13473 ;; Auto vars:     Size  Location     Type
 13474 ;;		None
 13475 ;; Return value:  Size  Location     Type
 13476 ;;                  3    0[BANK0 ] float 
 13477 ;; Registers used:
 13478 ;;		wreg, status,2, status,0
 13479 ;; Tracked objects:
 13480 ;;		On entry : 0/0
 13481 ;;		On exit  : 0/0
 13482 ;;		Unchanged: 0/0
 13483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13484 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13486 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13487 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;Total ram usage:        8 bytes
 13489 ;; Hardware stack levels used:    1
 13490 ;; Hardware stack levels required when called:    5
 13491 ;; This function calls:
 13492 ;;		Nothing
 13493 ;; This function is called by:
 13494 ;;		___awtoft
 13495 ;;		___ftadd
 13496 ;;		___ftdiv
 13497 ;;		___ftmul
 13498 ;; This function uses a non-reentrant model
 13499 ;;
 13500                           
 13501                           
 13502                           ;psect for function ___ftpack
 13503  08D0                     ___ftpack:	
 13504                           
 13505                           ;incstack = 0
 13506                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13507  08D0  0020               	movlb	0	; select bank0
 13508  08D1  0823               	movf	___ftpack@exp,w
 13509  08D2  1903               	btfsc	3,2
 13510  08D3  28D9               	goto	l5599
 13511  08D4  0822               	movf	___ftpack@arg+2,w
 13512  08D5  0421               	iorwf	___ftpack@arg+1,w
 13513  08D6  0420               	iorwf	___ftpack@arg,w
 13514  08D7  1D03               	skipz
 13515  08D8  28EA               	goto	l5605
 13516  08D9                     l5599:	
 13517  08D9  3000               	movlw	0
 13518  08DA  00A0               	movwf	?___ftpack
 13519  08DB  3000               	movlw	0
 13520  08DC  00A1               	movwf	?___ftpack+1
 13521  08DD  3000               	movlw	0
 13522  08DE  00A2               	movwf	?___ftpack+2
 13523  08DF  0008               	return
 13524  08E0                     l5603:	
 13525  08E0  3001               	movlw	1
 13526  08E1  00A5               	movwf	??___ftpack
 13527  08E2  0825               	movf	??___ftpack,w
 13528  08E3  07A3               	addwf	___ftpack@exp,f
 13529  08E4  3001               	movlw	1
 13530  08E5                     u3945:	
 13531  08E5  36A2               	lsrf	___ftpack@arg+2,f
 13532  08E6  0CA1               	rrf	___ftpack@arg+1,f
 13533  08E7  0CA0               	rrf	___ftpack@arg,f
 13534  08E8  0B89               	decfsz	9,f
 13535  08E9  28E5               	goto	u3945
 13536  08EA                     l5605:	
 13537  08EA  30FE               	movlw	254
 13538  08EB  0522               	andwf	___ftpack@arg+2,w
 13539  08EC  1903               	btfsc	3,2
 13540  08ED  2903               	goto	l3017
 13541  08EE  28E0               	goto	l5603
 13542  08EF                     l5607:	
 13543  08EF  3001               	movlw	1
 13544  08F0  00A5               	movwf	??___ftpack
 13545  08F1  0825               	movf	??___ftpack,w
 13546  08F2  07A3               	addwf	___ftpack@exp,f
 13547  08F3  3001               	movlw	1
 13548  08F4  07A0               	addwf	___ftpack@arg,f
 13549  08F5  3000               	movlw	0
 13550  08F6  1803               	skipnc
 13551  08F7  3001               	movlw	1
 13552  08F8  07A1               	addwf	___ftpack@arg+1,f
 13553  08F9  3000               	movlw	0
 13554  08FA  1803               	skipnc
 13555  08FB  3001               	movlw	1
 13556  08FC  07A2               	addwf	___ftpack@arg+2,f
 13557  08FD  3001               	movlw	1
 13558  08FE                     u3965:	
 13559  08FE  36A2               	lsrf	___ftpack@arg+2,f
 13560  08FF  0CA1               	rrf	___ftpack@arg+1,f
 13561  0900  0CA0               	rrf	___ftpack@arg,f
 13562  0901  0B89               	decfsz	9,f
 13563  0902  28FE               	goto	u3965
 13564  0903                     l3017:	
 13565  0903  30FF               	movlw	255
 13566  0904  0522               	andwf	___ftpack@arg+2,w
 13567  0905  1903               	btfsc	3,2
 13568  0906  2910               	goto	l5615
 13569  0907  28EF               	goto	l5607
 13570  0908                     l5613:	
 13571  0908  3001               	movlw	1
 13572  0909  02A3               	subwf	___ftpack@exp,f
 13573  090A  3001               	movlw	1
 13574  090B                     u3985:	
 13575  090B  35A0               	lslf	___ftpack@arg,f
 13576  090C  0DA1               	rlf	___ftpack@arg+1,f
 13577  090D  0DA2               	rlf	___ftpack@arg+2,f
 13578  090E  0B89               	decfsz	9,f
 13579  090F  290B               	goto	u3985
 13580  0910                     l5615:	
 13581  0910  1FA1               	btfss	___ftpack@arg+1,7
 13582  0911  2908               	goto	l5613
 13583  0912  1823               	btfsc	___ftpack@exp,0
 13584  0913  291A               	goto	l3023
 13585  0914  30FF               	movlw	255
 13586  0915  05A0               	andwf	___ftpack@arg,f
 13587  0916  307F               	movlw	127
 13588  0917  05A1               	andwf	___ftpack@arg+1,f
 13589  0918  30FF               	movlw	255
 13590  0919  05A2               	andwf	___ftpack@arg+2,f
 13591  091A                     l3023:	
 13592  091A  1003               	clrc
 13593  091B  0CA3               	rrf	___ftpack@exp,f
 13594  091C  0823               	movf	___ftpack@exp,w
 13595  091D  00A5               	movwf	??___ftpack
 13596  091E  01A6               	clrf	??___ftpack+1
 13597  091F  01A7               	clrf	??___ftpack+2
 13598  0920  3010               	movlw	16
 13599  0921                     u4015:	
 13600  0921  35A5               	lslf	??___ftpack,f
 13601  0922  0DA6               	rlf	??___ftpack+1,f
 13602  0923  0DA7               	rlf	??___ftpack+2,f
 13603  0924  0B89               	decfsz	9,f
 13604  0925  2921               	goto	u4015
 13605  0926  0825               	movf	??___ftpack,w
 13606  0927  04A0               	iorwf	___ftpack@arg,f
 13607  0928  0826               	movf	??___ftpack+1,w
 13608  0929  04A1               	iorwf	___ftpack@arg+1,f
 13609  092A  0827               	movf	??___ftpack+2,w
 13610  092B  04A2               	iorwf	___ftpack@arg+2,f
 13611  092C  0824               	movf	___ftpack@sign,w
 13612  092D  1903               	btfsc	3,2
 13613  092E  0008               	return
 13614  092F  17A2               	bsf	___ftpack@arg+2,7
 13615  0930  0008               	return
 13616  0931                     __end_of___ftpack:	
 13617                           
 13618                           	psect	text81
 13619  1F10                     __ptext81:	
 13620 ;; *************** function _setRFSW_Status *****************
 13621 ;; Defined at:
 13622 ;;		line 432 in file "../src/RF_Control_B1.c"
 13623 ;; Parameters:    Size  Location     Type
 13624 ;;  sw              1    wreg     unsigned char 
 13625 ;;  command         1    2[BANK0 ] unsigned char 
 13626 ;; Auto vars:     Size  Location     Type
 13627 ;;  sw              1    3[BANK0 ] unsigned char 
 13628 ;; Return value:  Size  Location     Type
 13629 ;;		None               void
 13630 ;; Registers used:
 13631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13632 ;; Tracked objects:
 13633 ;;		On entry : 0/0
 13634 ;;		On exit  : 0/0
 13635 ;;		Unchanged: 0/0
 13636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13637 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;Total ram usage:        2 bytes
 13642 ;; Hardware stack levels used:    1
 13643 ;; Hardware stack levels required when called:    6
 13644 ;; This function calls:
 13645 ;;		_RfSWPointSelect
 13646 ;; This function is called by:
 13647 ;;		_DlyOff_Main
 13648 ;;		_setControl_Lights_Table
 13649 ;;		_Sw_DimmerOnFunc
 13650 ;;		_Sw_DimmerAdjFunc
 13651 ;;		_setDimmerLights_ERROR
 13652 ;; This function uses a non-reentrant model
 13653 ;;
 13654                           
 13655                           
 13656                           ;psect for function _setRFSW_Status
 13657  1F10                     _setRFSW_Status:	
 13658                           
 13659                           ;incstack = 0
 13660                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13661                           ;setRFSW_Status@sw stored from wreg
 13662  1F10  0020               	movlb	0	; select bank0
 13663  1F11  00A3               	movwf	setRFSW_Status@sw
 13664                           
 13665                           ;RF_Control_B1.c: 433: RfSWPointSelect(sw);
 13666  1F12  0823               	movf	setRFSW_Status@sw,w
 13667  1F13  3192  2228         	fcall	_RfSWPointSelect
 13668                           
 13669                           ;RF_Control_B1.c: 434: RFSW->Status = command;
 13670  1F15  0021               	movlb	1	; select bank1
 13671  1F16  0853               	movf	_RFSW^(0+128),w
 13672  1F17  0086               	movwf	6
 13673  1F18  0187               	clrf	7
 13674  1F19  0020               	movlb	0	; select bank0
 13675  1F1A  0822               	movf	setRFSW_Status@command,w
 13676  1F1B  1001               	bcf	1,0
 13677  1F1C  1D03               	skipz
 13678  1F1D  1401               	bsf	1,0
 13679  1F1E  0008               	return
 13680  1F1F                     __end_of_setRFSW_Status:	
 13681                           
 13682                           	psect	text82
 13683  1228                     __ptext82:	
 13684 ;; *************** function _RfSWPointSelect *****************
 13685 ;; Defined at:
 13686 ;;		line 367 in file "../src/RF_Control_B1.c"
 13687 ;; Parameters:    Size  Location     Type
 13688 ;;  sw              1    wreg     unsigned char 
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;  sw              1    1[BANK0 ] unsigned char 
 13691 ;; Return value:  Size  Location     Type
 13692 ;;		None               void
 13693 ;; Registers used:
 13694 ;;		wreg
 13695 ;; Tracked objects:
 13696 ;;		On entry : 0/0
 13697 ;;		On exit  : 0/0
 13698 ;;		Unchanged: 0/0
 13699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;Total ram usage:        2 bytes
 13705 ;; Hardware stack levels used:    1
 13706 ;; Hardware stack levels required when called:    5
 13707 ;; This function calls:
 13708 ;;		Nothing
 13709 ;; This function is called by:
 13710 ;;		_setRFSW_Control
 13711 ;;		_setRFSW_AdjControl
 13712 ;;		_setRFSW_Status
 13713 ;; This function uses a non-reentrant model
 13714 ;;
 13715                           
 13716                           
 13717                           ;psect for function _RfSWPointSelect
 13718  1228                     _RfSWPointSelect:	
 13719                           
 13720                           ;incstack = 0
 13721                           ; Regs used in _RfSWPointSelect: [wreg]
 13722                           ;RfSWPointSelect@sw stored from wreg
 13723  1228  0020               	movlb	0	; select bank0
 13724  1229  00A1               	movwf	RfSWPointSelect@sw
 13725                           
 13726                           ;RF_Control_B1.c: 369: if (sw == 1) {
 13727  122A  0821               	movf	RfSWPointSelect@sw,w
 13728  122B  3A01               	xorlw	1
 13729  122C  1D03               	skipz
 13730  122D  2A33               	goto	l2283
 13731                           
 13732                           ;RF_Control_B1.c: 370: RFSW = &RFSW1;
 13733  122E  30EB               	movlw	_RFSW1& (0+255)
 13734  122F  00A0               	movwf	??_RfSWPointSelect
 13735  1230  0820               	movf	??_RfSWPointSelect,w
 13736  1231  0021               	movlb	1	; select bank1
 13737  1232  00D3               	movwf	_RFSW^(0+128)
 13738  1233                     l2283:	
 13739                           
 13740                           ;RF_Control_B1.c: 371: }
 13741                           ;RF_Control_B1.c: 374: if (sw == 2) {
 13742  1233  0020               	movlb	0	; select bank0
 13743  1234  0821               	movf	RfSWPointSelect@sw,w
 13744  1235  3A02               	xorlw	2
 13745  1236  1D03               	skipz
 13746  1237  2A3D               	goto	l2284
 13747                           
 13748                           ;RF_Control_B1.c: 375: RFSW = &RFSW2;
 13749  1238  30EC               	movlw	_RFSW2& (0+255)
 13750  1239  00A0               	movwf	??_RfSWPointSelect
 13751  123A  0820               	movf	??_RfSWPointSelect,w
 13752  123B  0021               	movlb	1	; select bank1
 13753  123C  00D3               	movwf	_RFSW^(0+128)
 13754  123D                     l2284:	
 13755                           
 13756                           ;RF_Control_B1.c: 376: }
 13757                           ;RF_Control_B1.c: 379: if (sw == 3) {
 13758  123D  0020               	movlb	0	; select bank0
 13759  123E  0821               	movf	RfSWPointSelect@sw,w
 13760  123F  3A03               	xorlw	3
 13761  1240  1D03               	skipz
 13762  1241  0008               	return
 13763                           
 13764                           ;RF_Control_B1.c: 380: RFSW = &RFSW3;
 13765  1242  30ED               	movlw	_RFSW3& (0+255)
 13766  1243  00A0               	movwf	??_RfSWPointSelect
 13767  1244  0820               	movf	??_RfSWPointSelect,w
 13768  1245  0021               	movlb	1	; select bank1
 13769  1246  00D3               	movwf	_RFSW^(0+128)
 13770  1247  0008               	return
 13771  1248                     __end_of_RfSWPointSelect:	
 13772                           
 13773                           	psect	text83
 13774  1F6B                     __ptext83:	
 13775 ;; *************** function _setDimmerLights_Trigger *****************
 13776 ;; Defined at:
 13777 ;;		line 714 in file "../src/Dimmer_B1.c"
 13778 ;; Parameters:    Size  Location     Type
 13779 ;;  lights          1    wreg     unsigned char 
 13780 ;;  command         1    2[BANK0 ] unsigned char 
 13781 ;; Auto vars:     Size  Location     Type
 13782 ;;  lights          1    3[BANK0 ] unsigned char 
 13783 ;; Return value:  Size  Location     Type
 13784 ;;		None               void
 13785 ;; Registers used:
 13786 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13787 ;; Tracked objects:
 13788 ;;		On entry : 0/0
 13789 ;;		On exit  : 0/0
 13790 ;;		Unchanged: 0/0
 13791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13792 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;Total ram usage:        2 bytes
 13797 ;; Hardware stack levels used:    1
 13798 ;; Hardware stack levels required when called:    6
 13799 ;; This function calls:
 13800 ;;		_DimmerLightsPointSelect
 13801 ;; This function is called by:
 13802 ;;		_DlyOff_Main
 13803 ;;		_setRFSW_Control
 13804 ;;		_Sw_DimmerOnFunc
 13805 ;;		_Sw_DimmerOffFunc
 13806 ;; This function uses a non-reentrant model
 13807 ;;
 13808                           
 13809                           
 13810                           ;psect for function _setDimmerLights_Trigger
 13811  1F6B                     _setDimmerLights_Trigger:	
 13812                           
 13813                           ;incstack = 0
 13814                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13815                           ;setDimmerLights_Trigger@lights stored from wreg
 13816  1F6B  0020               	movlb	0	; select bank0
 13817  1F6C  00A3               	movwf	setDimmerLights_Trigger@lights
 13818                           
 13819                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 13820  1F6D  0823               	movf	setDimmerLights_Trigger@lights,w
 13821  1F6E  3191  2178         	fcall	_DimmerLightsPointSelect
 13822                           
 13823                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 13824  1F70  0020               	movlb	0	; select bank0
 13825  1F71  086B               	movf	_DimmerLights,w
 13826  1F72  3E08               	addlw	8
 13827  1F73  0086               	movwf	6
 13828  1F74  3001               	movlw	1	; select bank2/3
 13829  1F75  0087               	movwf	7
 13830  1F76  0822               	movf	setDimmerLights_Trigger@command,w
 13831  1F77  1101               	bcf	1,2
 13832  1F78  1D03               	skipz
 13833  1F79  1501               	bsf	1,2
 13834  1F7A  0008               	return
 13835  1F7B                     __end_of_setDimmerLights_Trigger:	
 13836                           
 13837                           	psect	text84
 13838  1F5B                     __ptext84:	
 13839 ;; *************** function _setDimmerLights_Switch *****************
 13840 ;; Defined at:
 13841 ;;		line 702 in file "../src/Dimmer_B1.c"
 13842 ;; Parameters:    Size  Location     Type
 13843 ;;  lights          1    wreg     unsigned char 
 13844 ;;  command         1    2[BANK0 ] unsigned char 
 13845 ;; Auto vars:     Size  Location     Type
 13846 ;;  lights          1    3[BANK0 ] unsigned char 
 13847 ;; Return value:  Size  Location     Type
 13848 ;;		None               void
 13849 ;; Registers used:
 13850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13851 ;; Tracked objects:
 13852 ;;		On entry : 0/0
 13853 ;;		On exit  : 0/0
 13854 ;;		Unchanged: 0/0
 13855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13856 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13860 ;;Total ram usage:        2 bytes
 13861 ;; Hardware stack levels used:    1
 13862 ;; Hardware stack levels required when called:    6
 13863 ;; This function calls:
 13864 ;;		_DimmerLightsPointSelect
 13865 ;; This function is called by:
 13866 ;;		_DlyOff_Main
 13867 ;;		_setRFSW_Control
 13868 ;;		_Sw_DimmerOnFunc
 13869 ;;		_Sw_DimmerOffFunc
 13870 ;; This function uses a non-reentrant model
 13871 ;;
 13872                           
 13873                           
 13874                           ;psect for function _setDimmerLights_Switch
 13875  1F5B                     _setDimmerLights_Switch:	
 13876                           
 13877                           ;incstack = 0
 13878                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13879                           ;setDimmerLights_Switch@lights stored from wreg
 13880  1F5B  0020               	movlb	0	; select bank0
 13881  1F5C  00A3               	movwf	setDimmerLights_Switch@lights
 13882                           
 13883                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 13884  1F5D  0823               	movf	setDimmerLights_Switch@lights,w
 13885  1F5E  3191  2178         	fcall	_DimmerLightsPointSelect
 13886                           
 13887                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 13888  1F60  0020               	movlb	0	; select bank0
 13889  1F61  086B               	movf	_DimmerLights,w
 13890  1F62  3E08               	addlw	8
 13891  1F63  0086               	movwf	6
 13892  1F64  3001               	movlw	1	; select bank2/3
 13893  1F65  0087               	movwf	7
 13894  1F66  0822               	movf	setDimmerLights_Switch@command,w
 13895  1F67  1081               	bcf	1,1
 13896  1F68  1D03               	skipz
 13897  1F69  1481               	bsf	1,1
 13898  1F6A  0008               	return
 13899  1F6B                     __end_of_setDimmerLights_Switch:	
 13900                           
 13901                           	psect	text85
 13902  1178                     __ptext85:	
 13903 ;; *************** function _DimmerLightsPointSelect *****************
 13904 ;; Defined at:
 13905 ;;		line 324 in file "../src/Dimmer_B1.c"
 13906 ;; Parameters:    Size  Location     Type
 13907 ;;  lights          1    wreg     unsigned char 
 13908 ;; Auto vars:     Size  Location     Type
 13909 ;;  lights          1    1[BANK0 ] unsigned char 
 13910 ;; Return value:  Size  Location     Type
 13911 ;;		None               void
 13912 ;; Registers used:
 13913 ;;		wreg
 13914 ;; Tracked objects:
 13915 ;;		On entry : 0/0
 13916 ;;		On exit  : 0/0
 13917 ;;		Unchanged: 0/0
 13918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13921 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13922 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13923 ;;Total ram usage:        2 bytes
 13924 ;; Hardware stack levels used:    1
 13925 ;; Hardware stack levels required when called:    5
 13926 ;; This function calls:
 13927 ;;		Nothing
 13928 ;; This function is called by:
 13929 ;;		_setDimmerLights_Initialization
 13930 ;;		_setDimmerLights_Main
 13931 ;;		_setDimmerLights
 13932 ;;		_setDimmerLights_Adj
 13933 ;;		_setDimmerLights_AdjRF
 13934 ;;		_setDimmerLights_Switch
 13935 ;;		_setDimmerLights_AdjGo
 13936 ;;		_setDimmerLights_Trigger
 13937 ;;		_setDimmerLights_TriggerAdj
 13938 ;;		_setDimmerLights_ERROR
 13939 ;;		_setDimmerLights_TriggerERROR
 13940 ;;		_setDimmerLights_GO
 13941 ;;		_setDimmerLights_MaxmumValue
 13942 ;;		_setDimmerLights_Clear
 13943 ;; This function uses a non-reentrant model
 13944 ;;
 13945                           
 13946                           
 13947                           ;psect for function _DimmerLightsPointSelect
 13948  1178                     _DimmerLightsPointSelect:	
 13949                           
 13950                           ;incstack = 0
 13951                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13952                           ;DimmerLightsPointSelect@lights stored from wreg
 13953  1178  0020               	movlb	0	; select bank0
 13954  1179  00A1               	movwf	DimmerLightsPointSelect@lights
 13955                           
 13956                           ;Dimmer_B1.c: 326: if (lights == 1) {
 13957  117A  0821               	movf	DimmerLightsPointSelect@lights,w
 13958  117B  3A01               	xorlw	1
 13959  117C  1D03               	skipz
 13960  117D  2982               	goto	l867
 13961                           
 13962                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 13963  117E  303D               	movlw	_DimmerLights1& (0+255)
 13964  117F  00A0               	movwf	??_DimmerLightsPointSelect
 13965  1180  0820               	movf	??_DimmerLightsPointSelect,w
 13966  1181  00EB               	movwf	_DimmerLights
 13967  1182                     l867:	
 13968                           
 13969                           ;Dimmer_B1.c: 328: }
 13970                           ;Dimmer_B1.c: 331: if (lights == 2) {
 13971  1182  0821               	movf	DimmerLightsPointSelect@lights,w
 13972  1183  3A02               	xorlw	2
 13973  1184  1D03               	skipz
 13974  1185  298A               	goto	l868
 13975                           
 13976                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 13977  1186  304C               	movlw	_DimmerLights2& (0+255)
 13978  1187  00A0               	movwf	??_DimmerLightsPointSelect
 13979  1188  0820               	movf	??_DimmerLightsPointSelect,w
 13980  1189  00EB               	movwf	_DimmerLights
 13981  118A                     l868:	
 13982                           
 13983                           ;Dimmer_B1.c: 333: }
 13984                           ;Dimmer_B1.c: 336: if (lights == 3) {
 13985  118A  0821               	movf	DimmerLightsPointSelect@lights,w
 13986  118B  3A03               	xorlw	3
 13987  118C  1D03               	skipz
 13988  118D  0008               	return
 13989                           
 13990                           ;Dimmer_B1.c: 337: DimmerLights = &DimmerLights3;
 13991  118E  30C5               	movlw	_DimmerLights3& (0+255)
 13992  118F  00A0               	movwf	??_DimmerLightsPointSelect
 13993  1190  0820               	movf	??_DimmerLightsPointSelect,w
 13994  1191  00EB               	movwf	_DimmerLights
 13995  1192  0008               	return
 13996  1193                     __end_of_DimmerLightsPointSelect:	
 13997                           
 13998                           	psect	text86
 13999  17A7                     __ptext86:	
 14000 ;; *************** function _setBuz *****************
 14001 ;; Defined at:
 14002 ;;		line 22 in file "../src/Buzzer_B1.c"
 14003 ;; Parameters:    Size  Location     Type
 14004 ;;  count           1    wreg     unsigned char 
 14005 ;;  time            2    9[BANK0 ] int 
 14006 ;; Auto vars:     Size  Location     Type
 14007 ;;  count           1   12[BANK0 ] unsigned char 
 14008 ;; Return value:  Size  Location     Type
 14009 ;;		None               void
 14010 ;; Registers used:
 14011 ;;		wreg, status,2, status,0, pclath, cstack
 14012 ;; Tracked objects:
 14013 ;;		On entry : 0/0
 14014 ;;		On exit  : 0/0
 14015 ;;		Unchanged: 0/0
 14016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14017 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14019 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14020 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14021 ;;Total ram usage:        4 bytes
 14022 ;; Hardware stack levels used:    1
 14023 ;; Hardware stack levels required when called:    6
 14024 ;; This function calls:
 14025 ;;		___awdiv
 14026 ;; This function is called by:
 14027 ;;		_DlyOff_Main
 14028 ;;		_setDimmerLights_Main
 14029 ;;		_my_MainTime
 14030 ;;		_setLog_Code
 14031 ;;		_setControl_Lights_Table
 14032 ;;		_setRFSW_Control
 14033 ;;		_setSw_Main
 14034 ;;		_Sw_DimmerOnFunc
 14035 ;;		_DimmerLights_Exceptions
 14036 ;; This function uses a non-reentrant model
 14037 ;;
 14038                           
 14039                           
 14040                           ;psect for function _setBuz
 14041  17A7                     _setBuz:	
 14042                           
 14043                           ;incstack = 0
 14044                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14045                           ;setBuz@count stored from wreg
 14046  17A7  0020               	movlb	0	; select bank0
 14047  17A8  00AC               	movwf	setBuz@count
 14048                           
 14049                           ;Buzzer_B1.c: 23: time /= 10;
 14050  17A9  300A               	movlw	10
 14051  17AA  00A0               	movwf	___awdiv@divisor
 14052  17AB  3000               	movlw	0
 14053  17AC  00A1               	movwf	___awdiv@divisor+1
 14054  17AD  082A               	movf	setBuz@time+1,w
 14055  17AE  01A3               	clrf	___awdiv@dividend+1
 14056  17AF  07A3               	addwf	___awdiv@dividend+1,f
 14057  17B0  0829               	movf	setBuz@time,w
 14058  17B1  01A2               	clrf	___awdiv@dividend
 14059  17B2  07A2               	addwf	___awdiv@dividend,f
 14060  17B3  3197  2753  3197   	fcall	___awdiv
 14061  17B6  0020               	movlb	0	; select bank0
 14062  17B7  0821               	movf	?___awdiv+1,w
 14063  17B8  01AA               	clrf	setBuz@time+1
 14064  17B9  07AA               	addwf	setBuz@time+1,f
 14065  17BA  0820               	movf	?___awdiv,w
 14066  17BB  01A9               	clrf	setBuz@time
 14067  17BC  07A9               	addwf	setBuz@time,f
 14068                           
 14069                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14070  17BD  0021               	movlb	1	; select bank1
 14071  17BE  1C32               	btfss	_Buz1^(0+128),0
 14072  17BF  0008               	return
 14073                           
 14074                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14075  17C0  18B2               	btfsc	_Buz1^(0+128),1
 14076  17C1  2FD8               	goto	l110
 14077                           
 14078                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14079  17C2  14B2               	bsf	_Buz1^(0+128),1
 14080                           
 14081                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14082  17C3  01B3               	clrf	(_Buz1^(0+128)+1)
 14083  17C4  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 14084                           
 14085                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14086  17C5  0020               	movlb	0	; select bank0
 14087  17C6  082C               	movf	setBuz@count,w
 14088  17C7  00AB               	movwf	??_setBuz
 14089  17C8  082B               	movf	??_setBuz,w
 14090  17C9  0021               	movlb	1	; select bank1
 14091  17CA  00B5               	movwf	(_Buz1^(0+128)+3)
 14092                           
 14093                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14094  17CB  0020               	movlb	0	; select bank0
 14095  17CC  082A               	movf	setBuz@time+1,w
 14096  17CD  0021               	movlb	1	; select bank1
 14097  17CE  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 14098  17CF  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 14099  17D0  0020               	movlb	0	; select bank0
 14100  17D1  0829               	movf	setBuz@time,w
 14101  17D2  0021               	movlb	1	; select bank1
 14102  17D3  01B8               	clrf	(_Buz1^(0+128)+6)
 14103  17D4  07B8               	addwf	(_Buz1^(0+128)+6),f
 14104                           
 14105                           ;Buzzer_B1.c: 30: RB3 = 1;
 14106  17D5  0020               	movlb	0	; select bank0
 14107  17D6  158D               	bsf	13,3	;volatile
 14108                           
 14109                           ;Buzzer_B1.c: 31: } else {
 14110  17D7  0008               	return
 14111  17D8                     l110:	
 14112                           
 14113                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14114  17D8  19B2               	btfsc	_Buz1^(0+128),3
 14115  17D9  2FEC               	goto	l112
 14116                           
 14117                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14118  17DA  15B2               	bsf	_Buz1^(0+128),3
 14119                           
 14120                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14121  17DB  0020               	movlb	0	; select bank0
 14122  17DC  082C               	movf	setBuz@count,w
 14123  17DD  00AB               	movwf	??_setBuz
 14124  17DE  082B               	movf	??_setBuz,w
 14125  17DF  0021               	movlb	1	; select bank1
 14126  17E0  00B6               	movwf	(_Buz1^(0+128)+4)
 14127                           
 14128                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14129  17E1  0020               	movlb	0	; select bank0
 14130  17E2  082A               	movf	setBuz@time+1,w
 14131  17E3  0021               	movlb	1	; select bank1
 14132  17E4  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 14133  17E5  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 14134  17E6  0020               	movlb	0	; select bank0
 14135  17E7  0829               	movf	setBuz@time,w
 14136  17E8  0021               	movlb	1	; select bank1
 14137  17E9  01BA               	clrf	(_Buz1^(0+128)+8)
 14138  17EA  07BA               	addwf	(_Buz1^(0+128)+8),f
 14139                           
 14140                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14141  17EB  0008               	return
 14142  17EC                     l112:	
 14143  17EC  1A32               	btfsc	_Buz1^(0+128),4
 14144  17ED  0008               	return
 14145                           
 14146                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14147  17EE  1632               	bsf	_Buz1^(0+128),4
 14148                           
 14149                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14150  17EF  0020               	movlb	0	; select bank0
 14151  17F0  082C               	movf	setBuz@count,w
 14152  17F1  00AB               	movwf	??_setBuz
 14153  17F2  082B               	movf	??_setBuz,w
 14154  17F3  0021               	movlb	1	; select bank1
 14155  17F4  00B7               	movwf	(_Buz1^(0+128)+5)
 14156                           
 14157                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14158  17F5  0020               	movlb	0	; select bank0
 14159  17F6  082A               	movf	setBuz@time+1,w
 14160  17F7  0021               	movlb	1	; select bank1
 14161  17F8  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 14162  17F9  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 14163  17FA  0020               	movlb	0	; select bank0
 14164  17FB  0829               	movf	setBuz@time,w
 14165  17FC  0021               	movlb	1	; select bank1
 14166  17FD  01BC               	clrf	(_Buz1^(0+128)+10)
 14167  17FE  07BC               	addwf	(_Buz1^(0+128)+10),f
 14168  17FF  0008               	return
 14169  1800                     __end_of_setBuz:	
 14170                           
 14171                           	psect	text87
 14172  1753                     __ptext87:	
 14173 ;; *************** function ___awdiv *****************
 14174 ;; Defined at:
 14175 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14176 ;; Parameters:    Size  Location     Type
 14177 ;;  divisor         2    0[BANK0 ] int 
 14178 ;;  dividend        2    2[BANK0 ] int 
 14179 ;; Auto vars:     Size  Location     Type
 14180 ;;  quotient        2    7[BANK0 ] int 
 14181 ;;  sign            1    6[BANK0 ] unsigned char 
 14182 ;;  counter         1    5[BANK0 ] unsigned char 
 14183 ;; Return value:  Size  Location     Type
 14184 ;;                  2    0[BANK0 ] int 
 14185 ;; Registers used:
 14186 ;;		wreg, status,2, status,0
 14187 ;; Tracked objects:
 14188 ;;		On entry : 0/0
 14189 ;;		On exit  : 0/0
 14190 ;;		Unchanged: 0/0
 14191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14192 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14193 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;Total ram usage:        9 bytes
 14197 ;; Hardware stack levels used:    1
 14198 ;; Hardware stack levels required when called:    5
 14199 ;; This function calls:
 14200 ;;		Nothing
 14201 ;; This function is called by:
 14202 ;;		_setBuz
 14203 ;; This function uses a non-reentrant model
 14204 ;;
 14205                           
 14206                           
 14207                           ;psect for function ___awdiv
 14208  1753                     ___awdiv:	
 14209                           
 14210                           ;incstack = 0
 14211                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14212  1753  0020               	movlb	0	; select bank0
 14213  1754  01A6               	clrf	___awdiv@sign
 14214  1755  1FA1               	btfss	___awdiv@divisor+1,7
 14215  1756  2F5E               	goto	l8073
 14216  1757  09A0               	comf	___awdiv@divisor,f
 14217  1758  09A1               	comf	___awdiv@divisor+1,f
 14218  1759  0AA0               	incf	___awdiv@divisor,f
 14219  175A  1903               	skipnz
 14220  175B  0AA1               	incf	___awdiv@divisor+1,f
 14221  175C  01A6               	clrf	___awdiv@sign
 14222  175D  0AA6               	incf	___awdiv@sign,f
 14223  175E                     l8073:	
 14224  175E  1FA3               	btfss	___awdiv@dividend+1,7
 14225  175F  2F69               	goto	l8079
 14226  1760  09A2               	comf	___awdiv@dividend,f
 14227  1761  09A3               	comf	___awdiv@dividend+1,f
 14228  1762  0AA2               	incf	___awdiv@dividend,f
 14229  1763  1903               	skipnz
 14230  1764  0AA3               	incf	___awdiv@dividend+1,f
 14231  1765  3001               	movlw	1
 14232  1766  00A4               	movwf	??___awdiv
 14233  1767  0824               	movf	??___awdiv,w
 14234  1768  06A6               	xorwf	___awdiv@sign,f
 14235  1769                     l8079:	
 14236  1769  01A7               	clrf	___awdiv@quotient
 14237  176A  01A8               	clrf	___awdiv@quotient+1
 14238  176B  0821               	movf	___awdiv@divisor+1,w
 14239  176C  0420               	iorwf	___awdiv@divisor,w
 14240  176D  1903               	skipnz
 14241  176E  2F98               	goto	l8101
 14242  176F  01A5               	clrf	___awdiv@counter
 14243  1770  0AA5               	incf	___awdiv@counter,f
 14244  1771                     l8089:	
 14245  1771  1BA1               	btfsc	___awdiv@divisor+1,7
 14246  1772  2F7D               	goto	l8091
 14247  1773  3001               	movlw	1
 14248  1774                     u8045:	
 14249  1774  35A0               	lslf	___awdiv@divisor,f
 14250  1775  0DA1               	rlf	___awdiv@divisor+1,f
 14251  1776  0B89               	decfsz	9,f
 14252  1777  2F74               	goto	u8045
 14253  1778  3001               	movlw	1
 14254  1779  00A4               	movwf	??___awdiv
 14255  177A  0824               	movf	??___awdiv,w
 14256  177B  07A5               	addwf	___awdiv@counter,f
 14257  177C  2F71               	goto	l8089
 14258  177D                     l8091:	
 14259  177D  3001               	movlw	1
 14260  177E                     u8065:	
 14261  177E  35A7               	lslf	___awdiv@quotient,f
 14262  177F  0DA8               	rlf	___awdiv@quotient+1,f
 14263  1780  0B89               	decfsz	9,f
 14264  1781  2F7E               	goto	u8065
 14265  1782  0821               	movf	___awdiv@divisor+1,w
 14266  1783  0223               	subwf	___awdiv@dividend+1,w
 14267  1784  1D03               	skipz
 14268  1785  2F88               	goto	u8075
 14269  1786  0820               	movf	___awdiv@divisor,w
 14270  1787  0222               	subwf	___awdiv@dividend,w
 14271  1788                     u8075:	
 14272  1788  1C03               	skipc
 14273  1789  2F8F               	goto	l8097
 14274  178A  0820               	movf	___awdiv@divisor,w
 14275  178B  02A2               	subwf	___awdiv@dividend,f
 14276  178C  0821               	movf	___awdiv@divisor+1,w
 14277  178D  3BA3               	subwfb	___awdiv@dividend+1,f
 14278  178E  1427               	bsf	___awdiv@quotient,0
 14279  178F                     l8097:	
 14280  178F  3001               	movlw	1
 14281  1790                     u8085:	
 14282  1790  36A1               	lsrf	___awdiv@divisor+1,f
 14283  1791  0CA0               	rrf	___awdiv@divisor,f
 14284  1792  0B89               	decfsz	9,f
 14285  1793  2F90               	goto	u8085
 14286  1794  3001               	movlw	1
 14287  1795  02A5               	subwf	___awdiv@counter,f
 14288  1796  1D03               	btfss	3,2
 14289  1797  2F7D               	goto	l8091
 14290  1798                     l8101:	
 14291  1798  0826               	movf	___awdiv@sign,w
 14292  1799  1903               	btfsc	3,2
 14293  179A  2FA0               	goto	l8105
 14294  179B  09A7               	comf	___awdiv@quotient,f
 14295  179C  09A8               	comf	___awdiv@quotient+1,f
 14296  179D  0AA7               	incf	___awdiv@quotient,f
 14297  179E  1903               	skipnz
 14298  179F  0AA8               	incf	___awdiv@quotient+1,f
 14299  17A0                     l8105:	
 14300  17A0  0828               	movf	___awdiv@quotient+1,w
 14301  17A1  01A1               	clrf	?___awdiv+1
 14302  17A2  07A1               	addwf	?___awdiv+1,f
 14303  17A3  0827               	movf	___awdiv@quotient,w
 14304  17A4  01A0               	clrf	?___awdiv
 14305  17A5  07A0               	addwf	?___awdiv,f
 14306  17A6  0008               	return
 14307  17A7                     __end_of___awdiv:	
 14308                           
 14309                           	psect	text88
 14310  1EC5                     __ptext88:	
 14311 ;; *************** function _DelayOff_Initialization *****************
 14312 ;; Defined at:
 14313 ;;		line 26 in file "../src/DelayOff_B1.c"
 14314 ;; Parameters:    Size  Location     Type
 14315 ;;		None
 14316 ;; Auto vars:     Size  Location     Type
 14317 ;;		None
 14318 ;; Return value:  Size  Location     Type
 14319 ;;		None               void
 14320 ;; Registers used:
 14321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14322 ;; Tracked objects:
 14323 ;;		On entry : 0/0
 14324 ;;		On exit  : 0/0
 14325 ;;		Unchanged: 0/0
 14326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14331 ;;Total ram usage:        0 bytes
 14332 ;; Hardware stack levels used:    1
 14333 ;; Hardware stack levels required when called:    7
 14334 ;; This function calls:
 14335 ;;		_DlyOff_Initialization
 14336 ;; This function is called by:
 14337 ;;		_main
 14338 ;; This function uses a non-reentrant model
 14339 ;;
 14340                           
 14341                           
 14342                           ;psect for function _DelayOff_Initialization
 14343  1EC5                     _DelayOff_Initialization:	
 14344                           
 14345                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14346                           
 14347                           ;incstack = 0
 14348                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14349  1EC5  3001               	movlw	1
 14350  1EC6  319E  268D  319E   	fcall	_DlyOff_Initialization
 14351                           
 14352                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14353  1EC9  3002               	movlw	2
 14354  1ECA  319E  268D  319E   	fcall	_DlyOff_Initialization
 14355                           
 14356                           ;DelayOff_B1.c: 36: DlyOff_Initialization(3);
 14357  1ECD  3003               	movlw	3
 14358  1ECE  319E  268D         	fcall	_DlyOff_Initialization
 14359  1ED0  0008               	return
 14360  1ED1                     __end_of_DelayOff_Initialization:	
 14361                           
 14362                           	psect	text89
 14363  1E8D                     __ptext89:	
 14364 ;; *************** function _DlyOff_Initialization *****************
 14365 ;; Defined at:
 14366 ;;		line 56 in file "../src/DelayOff_B1.c"
 14367 ;; Parameters:    Size  Location     Type
 14368 ;;  sw              1    wreg     unsigned char 
 14369 ;; Auto vars:     Size  Location     Type
 14370 ;;  sw              1    2[BANK0 ] unsigned char 
 14371 ;; Return value:  Size  Location     Type
 14372 ;;		None               void
 14373 ;; Registers used:
 14374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14375 ;; Tracked objects:
 14376 ;;		On entry : 0/0
 14377 ;;		On exit  : 0/0
 14378 ;;		Unchanged: 0/0
 14379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;Total ram usage:        1 bytes
 14385 ;; Hardware stack levels used:    1
 14386 ;; Hardware stack levels required when called:    6
 14387 ;; This function calls:
 14388 ;;		_DelayOffPointSelect
 14389 ;; This function is called by:
 14390 ;;		_DelayOff_Initialization
 14391 ;; This function uses a non-reentrant model
 14392 ;;
 14393                           
 14394                           
 14395                           ;psect for function _DlyOff_Initialization
 14396  1E8D                     _DlyOff_Initialization:	
 14397                           
 14398                           ;incstack = 0
 14399                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14400                           ;DlyOff_Initialization@sw stored from wreg
 14401  1E8D  0020               	movlb	0	; select bank0
 14402  1E8E  00A2               	movwf	DlyOff_Initialization@sw
 14403                           
 14404                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14405  1E8F  0822               	movf	DlyOff_Initialization@sw,w
 14406  1E90  3191  21B0         	fcall	_DelayOffPointSelect
 14407                           
 14408                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14409  1E92  0872               	movf	_DelayOff,w
 14410  1E93  0086               	movwf	6
 14411  1E94  0187               	clrf	7
 14412  1E95  1401               	bsf	1,0
 14413  1E96  0008               	return
 14414  1E97                     __end_of_DlyOff_Initialization:	
 14415                           
 14416                           	psect	text90
 14417  11B0                     __ptext90:	
 14418 ;; *************** function _DelayOffPointSelect *****************
 14419 ;; Defined at:
 14420 ;;		line 7 in file "../src/DelayOff_B1.c"
 14421 ;; Parameters:    Size  Location     Type
 14422 ;;  sw              1    wreg     unsigned char 
 14423 ;; Auto vars:     Size  Location     Type
 14424 ;;  sw              1    1[BANK0 ] unsigned char 
 14425 ;; Return value:  Size  Location     Type
 14426 ;;		None               void
 14427 ;; Registers used:
 14428 ;;		wreg
 14429 ;; Tracked objects:
 14430 ;;		On entry : 0/0
 14431 ;;		On exit  : 0/0
 14432 ;;		Unchanged: 0/0
 14433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;Total ram usage:        2 bytes
 14439 ;; Hardware stack levels used:    1
 14440 ;; Hardware stack levels required when called:    5
 14441 ;; This function calls:
 14442 ;;		Nothing
 14443 ;; This function is called by:
 14444 ;;		_DlyOff_Initialization
 14445 ;;		_DlyOff_Main
 14446 ;;		_setDelayOff_GO
 14447 ;; This function uses a non-reentrant model
 14448 ;;
 14449                           
 14450                           
 14451                           ;psect for function _DelayOffPointSelect
 14452  11B0                     _DelayOffPointSelect:	
 14453                           
 14454                           ;incstack = 0
 14455                           ; Regs used in _DelayOffPointSelect: [wreg]
 14456                           ;DelayOffPointSelect@sw stored from wreg
 14457  11B0  0020               	movlb	0	; select bank0
 14458  11B1  00A1               	movwf	DelayOffPointSelect@sw
 14459                           
 14460                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14461  11B2  0821               	movf	DelayOffPointSelect@sw,w
 14462  11B3  3A01               	xorlw	1
 14463  11B4  1D03               	skipz
 14464  11B5  29BB               	goto	l7997
 14465                           
 14466                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14467  11B6  30E5               	movlw	_DlySw1& (0+255)
 14468  11B7  00A0               	movwf	??_DelayOffPointSelect
 14469  11B8  0820               	movf	??_DelayOffPointSelect,w
 14470  11B9  00F2               	movwf	_DelayOff
 14471                           
 14472                           ;DelayOff_B1.c: 11: }
 14473  11BA  0008               	return
 14474  11BB                     l7997:	
 14475                           
 14476                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14477  11BB  0821               	movf	DelayOffPointSelect@sw,w
 14478  11BC  3A02               	xorlw	2
 14479  11BD  1D03               	skipz
 14480  11BE  29C4               	goto	l8001
 14481                           
 14482                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14483  11BF  30E7               	movlw	_DlySw2& (0+255)
 14484  11C0  00A0               	movwf	??_DelayOffPointSelect
 14485  11C1  0820               	movf	??_DelayOffPointSelect,w
 14486  11C2  00F2               	movwf	_DelayOff
 14487                           
 14488                           ;DelayOff_B1.c: 16: }
 14489  11C3  0008               	return
 14490  11C4                     l8001:	
 14491                           
 14492                           ;DelayOff_B1.c: 19: else if (sw == 3) {
 14493  11C4  0821               	movf	DelayOffPointSelect@sw,w
 14494  11C5  3A03               	xorlw	3
 14495  11C6  1D03               	skipz
 14496  11C7  0008               	return
 14497                           
 14498                           ;DelayOff_B1.c: 20: DelayOff = &DlySw3;
 14499  11C8  30E9               	movlw	_DlySw3& (0+255)
 14500  11C9  00A0               	movwf	??_DelayOffPointSelect
 14501  11CA  0820               	movf	??_DelayOffPointSelect,w
 14502  11CB  00F2               	movwf	_DelayOff
 14503  11CC  0008               	return
 14504  11CD                     __end_of_DelayOffPointSelect:	
 14505                           
 14506                           	psect	text91
 14507  10E7                     __ptext91:	
 14508 ;; *************** function _CC2500_PowerOnInitial *****************
 14509 ;; Defined at:
 14510 ;;		line 122 in file "../src/CC2500_B1.c"
 14511 ;; Parameters:    Size  Location     Type
 14512 ;;		None
 14513 ;; Auto vars:     Size  Location     Type
 14514 ;;		None
 14515 ;; Return value:  Size  Location     Type
 14516 ;;		None               void
 14517 ;; Registers used:
 14518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14519 ;; Tracked objects:
 14520 ;;		On entry : 0/0
 14521 ;;		On exit  : 0/0
 14522 ;;		Unchanged: 0/0
 14523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14528 ;;Total ram usage:        0 bytes
 14529 ;; Hardware stack levels used:    1
 14530 ;; Hardware stack levels required when called:    8
 14531 ;; This function calls:
 14532 ;;		_CC2500_ClearRXFIFO
 14533 ;;		_CC2500_ClearTXFIFO
 14534 ;;		_CC2500_FrequencyCabr
 14535 ;;		_CC2500_InitPATable
 14536 ;;		_CC2500_InitSetREG
 14537 ;;		_CC2500_PowerRST
 14538 ;;		_CC2500_SIDLEMode
 14539 ;; This function is called by:
 14540 ;;		_main
 14541 ;; This function uses a non-reentrant model
 14542 ;;
 14543                           
 14544                           
 14545                           ;psect for function _CC2500_PowerOnInitial
 14546  10E7                     _CC2500_PowerOnInitial:	
 14547                           
 14548                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 14549                           
 14550                           ;incstack = 0
 14551                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14552  10E7  3195  25F1  3190   	fcall	_CC2500_PowerRST
 14553                           
 14554                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 14555  10EA  3193  2386  3190   	fcall	_CC2500_InitSetREG
 14556                           
 14557                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 14558  10ED  3191  21EA  3190   	fcall	_CC2500_InitPATable
 14559                           
 14560                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 14561  10F0  319E  2648  3190   	fcall	_CC2500_ClearTXFIFO
 14562                           
 14563                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 14564  10F3  319E  2644  3190   	fcall	_CC2500_ClearRXFIFO
 14565                           
 14566                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 14567  10F6  319E  26B9  3190   	fcall	_CC2500_FrequencyCabr
 14568                           
 14569                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 14570  10F9  319E  264C         	fcall	_CC2500_SIDLEMode
 14571  10FB  0008               	return
 14572  10FC                     __end_of_CC2500_PowerOnInitial:	
 14573                           
 14574                           	psect	text92
 14575  1E4C                     __ptext92:	
 14576 ;; *************** function _CC2500_SIDLEMode *****************
 14577 ;; Defined at:
 14578 ;;		line 212 in file "../src/CC2500_B1.c"
 14579 ;; Parameters:    Size  Location     Type
 14580 ;;		None
 14581 ;; Auto vars:     Size  Location     Type
 14582 ;;		None
 14583 ;; Return value:  Size  Location     Type
 14584 ;;		None               void
 14585 ;; Registers used:
 14586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14587 ;; Tracked objects:
 14588 ;;		On entry : 0/0
 14589 ;;		On exit  : 0/0
 14590 ;;		Unchanged: 0/0
 14591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14596 ;;Total ram usage:        0 bytes
 14597 ;; Hardware stack levels used:    1
 14598 ;; Hardware stack levels required when called:    7
 14599 ;; This function calls:
 14600 ;;		_CC2500_WriteCommand
 14601 ;; This function is called by:
 14602 ;;		_CC2500_PowerOnInitial
 14603 ;; This function uses a non-reentrant model
 14604 ;;
 14605                           
 14606                           
 14607                           ;psect for function _CC2500_SIDLEMode
 14608  1E4C                     _CC2500_SIDLEMode:	
 14609                           
 14610                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 14611                           
 14612                           ;incstack = 0
 14613                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14614  1E4C  3036               	movlw	54
 14615  1E4D  3191  212B         	fcall	_CC2500_WriteCommand
 14616  1E4F  0008               	return
 14617  1E50                     __end_of_CC2500_SIDLEMode:	
 14618                           
 14619                           	psect	text93
 14620  15F1                     __ptext93:	
 14621 ;; *************** function _CC2500_PowerRST *****************
 14622 ;; Defined at:
 14623 ;;		line 135 in file "../src/CC2500_B1.c"
 14624 ;; Parameters:    Size  Location     Type
 14625 ;;		None
 14626 ;; Auto vars:     Size  Location     Type
 14627 ;;		None
 14628 ;; Return value:  Size  Location     Type
 14629 ;;		None               void
 14630 ;; Registers used:
 14631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14632 ;; Tracked objects:
 14633 ;;		On entry : 0/0
 14634 ;;		On exit  : 0/0
 14635 ;;		Unchanged: 0/0
 14636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;Total ram usage:        1 bytes
 14642 ;; Hardware stack levels used:    1
 14643 ;; Hardware stack levels required when called:    6
 14644 ;; This function calls:
 14645 ;;		_CC2500_WriteByte
 14646 ;;		_DelayTime_1us
 14647 ;;		_Timeout_Counter
 14648 ;;		_set_TimeoutCleared
 14649 ;; This function is called by:
 14650 ;;		_CC2500_PowerOnInitial
 14651 ;; This function uses a non-reentrant model
 14652 ;;
 14653                           
 14654                           
 14655                           ;psect for function _CC2500_PowerRST
 14656  15F1                     _CC2500_PowerRST:	
 14657                           
 14658                           ;CC2500_B1.c: 136: RC1 = 0;
 14659                           
 14660                           ;incstack = 0
 14661                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14662  15F1  0020               	movlb	0	; select bank0
 14663  15F2  108E               	bcf	14,1	;volatile
 14664                           
 14665                           ;CC2500_B1.c: 137: RC0 = 0;
 14666  15F3  100E               	bcf	14,0	;volatile
 14667                           
 14668                           ;CC2500_B1.c: 138: RC4 = 1;
 14669  15F4  160E               	bsf	14,4	;volatile
 14670                           
 14671                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 14672  15F5  300A               	movlw	10
 14673  15F6  00A0               	movwf	DelayTime_1us@count
 14674  15F7  3000               	movlw	0
 14675  15F8  00A1               	movwf	DelayTime_1us@count+1
 14676  15F9  3193  2311  3195   	fcall	_DelayTime_1us
 14677                           
 14678                           ;CC2500_B1.c: 140: RC4 = 0;
 14679  15FC  0020               	movlb	0	; select bank0
 14680  15FD  120E               	bcf	14,4	;volatile
 14681                           
 14682                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 14683  15FE  300A               	movlw	10
 14684  15FF  00A0               	movwf	DelayTime_1us@count
 14685  1600  3000               	movlw	0
 14686  1601  00A1               	movwf	DelayTime_1us@count+1
 14687  1602  3193  2311  3195   	fcall	_DelayTime_1us
 14688                           
 14689                           ;CC2500_B1.c: 142: RC4 = 1;
 14690  1605  0020               	movlb	0	; select bank0
 14691  1606  160E               	bsf	14,4	;volatile
 14692                           
 14693                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 14694  1607  3028               	movlw	40
 14695  1608  00A0               	movwf	DelayTime_1us@count
 14696  1609  3000               	movlw	0
 14697  160A  00A1               	movwf	DelayTime_1us@count+1
 14698  160B  3193  2311  3195   	fcall	_DelayTime_1us
 14699                           
 14700                           ;CC2500_B1.c: 144: RC4 = 0;
 14701  160E  0020               	movlb	0	; select bank0
 14702  160F  120E               	bcf	14,4	;volatile
 14703                           
 14704                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 14705  1610  3030               	movlw	48
 14706  1611  00A6               	movwf	??_CC2500_PowerRST
 14707  1612  0826               	movf	??_CC2500_PowerRST,w
 14708  1613  00F5               	movwf	_SPI0Buffer
 14709                           
 14710                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 14711  1614  2E18               	goto	l8985
 14712  1615                     l8983:	
 14713                           
 14714                           ;CC2500_B1.c: 147: Timeout_Counter();
 14715  1615  3190  20D2  3195   	fcall	_Timeout_Counter
 14716  1618                     l8985:	
 14717  1618  0020               	movlb	0	; select bank0
 14718  1619  1D0E               	btfss	14,2	;volatile
 14719  161A  2E1E               	goto	l8989
 14720  161B  0021               	movlb	1	; select bank1
 14721  161C  1D2F               	btfss	(_myMain^(0+128)+15),2
 14722  161D  2E15               	goto	l8983
 14723  161E                     l8989:	
 14724                           
 14725                           ;CC2500_B1.c: 148: };
 14726                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 14727  161E  319E  2654  3195   	fcall	_set_TimeoutCleared
 14728                           
 14729                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 14730  1621  3190  20AA  3195   	fcall	_CC2500_WriteByte
 14731                           
 14732                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 14733  1624  2E28               	goto	l8995
 14734  1625                     l8993:	
 14735                           
 14736                           ;CC2500_B1.c: 152: Timeout_Counter();
 14737  1625  3190  20D2  3195   	fcall	_Timeout_Counter
 14738  1628                     l8995:	
 14739  1628  0020               	movlb	0	; select bank0
 14740  1629  1D0E               	btfss	14,2	;volatile
 14741  162A  2E2E               	goto	l8999
 14742  162B  0021               	movlb	1	; select bank1
 14743  162C  1D2F               	btfss	(_myMain^(0+128)+15),2
 14744  162D  2E25               	goto	l8993
 14745  162E                     l8999:	
 14746                           
 14747                           ;CC2500_B1.c: 153: };
 14748                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 14749  162E  319E  2654         	fcall	_set_TimeoutCleared
 14750                           
 14751                           ;CC2500_B1.c: 155: RC0 = 0;
 14752  1630  0020               	movlb	0	; select bank0
 14753  1631  100E               	bcf	14,0	;volatile
 14754                           
 14755                           ;CC2500_B1.c: 156: RC4 = 1;
 14756  1632  160E               	bsf	14,4	;volatile
 14757  1633  0008               	return
 14758  1634                     __end_of_CC2500_PowerRST:	
 14759                           
 14760                           	psect	text94
 14761  1386                     __ptext94:	
 14762 ;; *************** function _CC2500_InitSetREG *****************
 14763 ;; Defined at:
 14764 ;;		line 162 in file "../src/CC2500_B1.c"
 14765 ;; Parameters:    Size  Location     Type
 14766 ;;		None
 14767 ;; Auto vars:     Size  Location     Type
 14768 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14769 ;;  temp2           1    7[BANK0 ] unsigned char 
 14770 ;;  temp1           1    6[BANK0 ] unsigned char 
 14771 ;; Return value:  Size  Location     Type
 14772 ;;		None               void
 14773 ;; Registers used:
 14774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14775 ;; Tracked objects:
 14776 ;;		On entry : 0/0
 14777 ;;		On exit  : 0/0
 14778 ;;		Unchanged: 0/0
 14779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14781 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;Total ram usage:        4 bytes
 14785 ;; Hardware stack levels used:    1
 14786 ;; Hardware stack levels required when called:    7
 14787 ;; This function calls:
 14788 ;;		_CC2500_WriteREG
 14789 ;; This function is called by:
 14790 ;;		_CC2500_PowerOnInitial
 14791 ;; This function uses a non-reentrant model
 14792 ;;
 14793                           
 14794                           
 14795                           ;psect for function _CC2500_InitSetREG
 14796  1386                     _CC2500_InitSetREG:	
 14797                           
 14798                           ;CC2500_B1.c: 163: unsigned char loop_c;
 14799                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 14800                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 14801                           
 14802                           ;incstack = 0
 14803                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14804  1386  0020               	movlb	0	; select bank0
 14805  1387  01A8               	clrf	CC2500_InitSetREG@loop_c
 14806  1388                     L10:	
 14807  1388  302F               	movlw	47
 14808  1389  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14809  138A  1803               	btfsc	3,0
 14810  138B  0008               	return
 14811                           
 14812                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 14813  138C  0828               	movf	CC2500_InitSetREG@loop_c,w
 14814  138D  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14815  138E  0084               	movwf	4
 14816  138F  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14817  1390  1803               	skipnc
 14818  1391  3E01               	addlw	1
 14819  1392  0085               	movwf	5
 14820  1393  0800               	movf	0,w	;code access
 14821  1394  00A5               	movwf	??_CC2500_InitSetREG
 14822  1395  0825               	movf	??_CC2500_InitSetREG,w
 14823  1396  00A6               	movwf	CC2500_InitSetREG@temp1
 14824                           
 14825                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 14826  1397  0828               	movf	CC2500_InitSetREG@loop_c,w
 14827  1398  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14828  1399  0084               	movwf	4
 14829  139A  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14830  139B  1803               	skipnc
 14831  139C  3E01               	addlw	1
 14832  139D  0085               	movwf	5
 14833  139E  0800               	movf	0,w	;code access
 14834  139F  00A5               	movwf	??_CC2500_InitSetREG
 14835  13A0  0825               	movf	??_CC2500_InitSetREG,w
 14836  13A1  00A7               	movwf	CC2500_InitSetREG@temp2
 14837                           
 14838                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 14839  13A2  0827               	movf	CC2500_InitSetREG@temp2,w
 14840  13A3  00A5               	movwf	??_CC2500_InitSetREG
 14841  13A4  0825               	movf	??_CC2500_InitSetREG,w
 14842  13A5  00A2               	movwf	CC2500_WriteREG@value
 14843  13A6  0826               	movf	CC2500_InitSetREG@temp1,w
 14844  13A7  3192  2268  3193   	fcall	_CC2500_WriteREG
 14845  13AA  3001               	movlw	1
 14846  13AB  0020               	movlb	0	; select bank0
 14847  13AC  00A5               	movwf	??_CC2500_InitSetREG
 14848  13AD  0825               	movf	??_CC2500_InitSetREG,w
 14849  13AE  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14850  13AF  2B88               	goto	L10
 14851  13B0                     __end_of_CC2500_InitSetREG:	
 14852                           
 14853                           	psect	text95
 14854  11EA                     __ptext95:	
 14855 ;; *************** function _CC2500_InitPATable *****************
 14856 ;; Defined at:
 14857 ;;		line 177 in file "../src/CC2500_B1.c"
 14858 ;; Parameters:    Size  Location     Type
 14859 ;;		None
 14860 ;; Auto vars:     Size  Location     Type
 14861 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14862 ;;  temp            1    6[BANK0 ] unsigned char 
 14863 ;; Return value:  Size  Location     Type
 14864 ;;		None               void
 14865 ;; Registers used:
 14866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14867 ;; Tracked objects:
 14868 ;;		On entry : 0/0
 14869 ;;		On exit  : 0/0
 14870 ;;		Unchanged: 0/0
 14871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14873 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14875 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14876 ;;Total ram usage:        3 bytes
 14877 ;; Hardware stack levels used:    1
 14878 ;; Hardware stack levels required when called:    7
 14879 ;; This function calls:
 14880 ;;		_CC2500_WriteREG
 14881 ;; This function is called by:
 14882 ;;		_CC2500_PowerOnInitial
 14883 ;; This function uses a non-reentrant model
 14884 ;;
 14885                           
 14886                           
 14887                           ;psect for function _CC2500_InitPATable
 14888  11EA                     _CC2500_InitPATable:	
 14889                           
 14890                           ;CC2500_B1.c: 178: unsigned char loop_d;
 14891                           ;CC2500_B1.c: 179: unsigned char temp;
 14892                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 14893                           
 14894                           ;incstack = 0
 14895                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14896  11EA  0020               	movlb	0	; select bank0
 14897  11EB  01A7               	clrf	CC2500_InitPATable@loop_d
 14898  11EC                     L11:	
 14899  11EC  3008               	movlw	8
 14900  11ED  0227               	subwf	CC2500_InitPATable@loop_d,w
 14901  11EE  1803               	btfsc	3,0
 14902  11EF  0008               	return
 14903                           
 14904                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 14905  11F0  0827               	movf	CC2500_InitPATable@loop_d,w
 14906  11F1  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14907  11F2  0084               	movwf	4
 14908  11F3  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14909  11F4  1803               	skipnc
 14910  11F5  3E01               	addlw	1
 14911  11F6  0085               	movwf	5
 14912  11F7  0800               	movf	0,w	;code access
 14913  11F8  00A5               	movwf	??_CC2500_InitPATable
 14914  11F9  0825               	movf	??_CC2500_InitPATable,w
 14915  11FA  00A6               	movwf	CC2500_InitPATable@temp
 14916                           
 14917                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 14918  11FB  0826               	movf	CC2500_InitPATable@temp,w
 14919  11FC  00A5               	movwf	??_CC2500_InitPATable
 14920  11FD  0825               	movf	??_CC2500_InitPATable,w
 14921  11FE  00A2               	movwf	CC2500_WriteREG@value
 14922  11FF  303E               	movlw	62
 14923  1200  3192  2268  3191   	fcall	_CC2500_WriteREG
 14924  1203  3001               	movlw	1
 14925  1204  0020               	movlb	0	; select bank0
 14926  1205  00A5               	movwf	??_CC2500_InitPATable
 14927  1206  0825               	movf	??_CC2500_InitPATable,w
 14928  1207  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14929  1208  29EC               	goto	L11
 14930  1209                     __end_of_CC2500_InitPATable:	
 14931                           
 14932                           	psect	text96
 14933  1268                     __ptext96:	
 14934 ;; *************** function _CC2500_WriteREG *****************
 14935 ;; Defined at:
 14936 ;;		line 254 in file "../src/CC2500_B1.c"
 14937 ;; Parameters:    Size  Location     Type
 14938 ;;  w_addr          1    wreg     unsigned char 
 14939 ;;  value           1    2[BANK0 ] unsigned char 
 14940 ;; Auto vars:     Size  Location     Type
 14941 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14942 ;; Return value:  Size  Location     Type
 14943 ;;		None               void
 14944 ;; Registers used:
 14945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14946 ;; Tracked objects:
 14947 ;;		On entry : 0/0
 14948 ;;		On exit  : 0/0
 14949 ;;		Unchanged: 0/0
 14950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14951 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;Total ram usage:        3 bytes
 14956 ;; Hardware stack levels used:    1
 14957 ;; Hardware stack levels required when called:    6
 14958 ;; This function calls:
 14959 ;;		_CC2500_WriteByte
 14960 ;;		_Timeout_Counter
 14961 ;;		_set_TimeoutCleared
 14962 ;; This function is called by:
 14963 ;;		_CC2500_InitSetREG
 14964 ;;		_CC2500_InitPATable
 14965 ;; This function uses a non-reentrant model
 14966 ;;
 14967                           
 14968                           
 14969                           ;psect for function _CC2500_WriteREG
 14970  1268                     _CC2500_WriteREG:	
 14971                           
 14972                           ;incstack = 0
 14973                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14974                           ;CC2500_WriteREG@w_addr stored from wreg
 14975  1268  0020               	movlb	0	; select bank0
 14976  1269  00A4               	movwf	CC2500_WriteREG@w_addr
 14977                           
 14978                           ;CC2500_B1.c: 255: RC4 = 0;
 14979  126A  120E               	bcf	14,4	;volatile
 14980                           
 14981                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 14982  126B  0824               	movf	CC2500_WriteREG@w_addr,w
 14983  126C  00A3               	movwf	??_CC2500_WriteREG
 14984  126D  0823               	movf	??_CC2500_WriteREG,w
 14985  126E  00F5               	movwf	_SPI0Buffer
 14986                           
 14987                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 14988  126F  2A73               	goto	l8687
 14989  1270                     l8685:	
 14990                           
 14991                           ;CC2500_B1.c: 258: Timeout_Counter();
 14992  1270  3190  20D2  3192   	fcall	_Timeout_Counter
 14993  1273                     l8687:	
 14994  1273  0020               	movlb	0	; select bank0
 14995  1274  1D0E               	btfss	14,2	;volatile
 14996  1275  2A79               	goto	l8691
 14997  1276  0021               	movlb	1	; select bank1
 14998  1277  1D2F               	btfss	(_myMain^(0+128)+15),2
 14999  1278  2A70               	goto	l8685
 15000  1279                     l8691:	
 15001                           
 15002                           ;CC2500_B1.c: 259: };
 15003                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 15004  1279  319E  2654  3192   	fcall	_set_TimeoutCleared
 15005                           
 15006                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 15007  127C  3190  20AA  3192   	fcall	_CC2500_WriteByte
 15008                           
 15009                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 15010  127F  0020               	movlb	0	; select bank0
 15011  1280  0822               	movf	CC2500_WriteREG@value,w
 15012  1281  00A3               	movwf	??_CC2500_WriteREG
 15013  1282  0823               	movf	??_CC2500_WriteREG,w
 15014  1283  00F5               	movwf	_SPI0Buffer
 15015                           
 15016                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 15017  1284  3190  20AA         	fcall	_CC2500_WriteByte
 15018                           
 15019                           ;CC2500_B1.c: 265: RC4 = 1;
 15020  1286  0020               	movlb	0	; select bank0
 15021  1287  160E               	bsf	14,4	;volatile
 15022  1288  0008               	return
 15023  1289                     __end_of_CC2500_WriteREG:	
 15024                           
 15025                           	psect	text97
 15026  1EB9                     __ptext97:	
 15027 ;; *************** function _CC2500_FrequencyCabr *****************
 15028 ;; Defined at:
 15029 ;;		line 204 in file "../src/CC2500_B1.c"
 15030 ;; Parameters:    Size  Location     Type
 15031 ;;		None
 15032 ;; Auto vars:     Size  Location     Type
 15033 ;;		None
 15034 ;; Return value:  Size  Location     Type
 15035 ;;		None               void
 15036 ;; Registers used:
 15037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15038 ;; Tracked objects:
 15039 ;;		On entry : 0/0
 15040 ;;		On exit  : 0/0
 15041 ;;		Unchanged: 0/0
 15042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;Total ram usage:        0 bytes
 15048 ;; Hardware stack levels used:    1
 15049 ;; Hardware stack levels required when called:    7
 15050 ;; This function calls:
 15051 ;;		_CC2500_WriteCommand
 15052 ;;		_DelayTime_1us
 15053 ;; This function is called by:
 15054 ;;		_CC2500_PowerOnInitial
 15055 ;; This function uses a non-reentrant model
 15056 ;;
 15057                           
 15058                           
 15059                           ;psect for function _CC2500_FrequencyCabr
 15060  1EB9                     _CC2500_FrequencyCabr:	
 15061                           
 15062                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 15063                           
 15064                           ;incstack = 0
 15065                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15066  1EB9  3033               	movlw	51
 15067  1EBA  3191  212B  319E   	fcall	_CC2500_WriteCommand
 15068                           
 15069                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 15070  1EBD  30E8               	movlw	232
 15071  1EBE  0020               	movlb	0	; select bank0
 15072  1EBF  00A0               	movwf	DelayTime_1us@count
 15073  1EC0  3003               	movlw	3
 15074  1EC1  00A1               	movwf	DelayTime_1us@count+1
 15075  1EC2  3193  2311         	fcall	_DelayTime_1us
 15076  1EC4  0008               	return
 15077  1EC5                     __end_of_CC2500_FrequencyCabr:	
 15078                           
 15079                           	psect	text98
 15080  1311                     __ptext98:	
 15081 ;; *************** function _DelayTime_1us *****************
 15082 ;; Defined at:
 15083 ;;		line 323 in file "../src/CC2500_B1.c"
 15084 ;; Parameters:    Size  Location     Type
 15085 ;;  count           2    0[BANK0 ] int 
 15086 ;; Auto vars:     Size  Location     Type
 15087 ;;  j               2    4[BANK0 ] unsigned int 
 15088 ;;  i               2    2[BANK0 ] unsigned int 
 15089 ;; Return value:  Size  Location     Type
 15090 ;;		None               void
 15091 ;; Registers used:
 15092 ;;		wreg, status,2
 15093 ;; Tracked objects:
 15094 ;;		On entry : 0/0
 15095 ;;		On exit  : 0/0
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15098 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15099 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15101 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;Total ram usage:        6 bytes
 15103 ;; Hardware stack levels used:    1
 15104 ;; Hardware stack levels required when called:    5
 15105 ;; This function calls:
 15106 ;;		Nothing
 15107 ;; This function is called by:
 15108 ;;		_CC2500_PowerRST
 15109 ;;		_CC2500_FrequencyCabr
 15110 ;; This function uses a non-reentrant model
 15111 ;;
 15112                           
 15113                           
 15114                           ;psect for function _DelayTime_1us
 15115  1311                     _DelayTime_1us:	
 15116                           
 15117                           ;CC2500_B1.c: 324: unsigned int i, j;
 15118                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 15119                           
 15120                           ;incstack = 0
 15121                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15122  1311  3001               	movlw	1
 15123  1312  0020               	movlb	0	; select bank0
 15124  1313  00A2               	movwf	DelayTime_1us@i
 15125  1314  3000               	movlw	0
 15126  1315  00A3               	movwf	DelayTime_1us@i+1
 15127  1316                     l402:	
 15128  1316  0821               	movf	DelayTime_1us@count+1,w
 15129  1317  0223               	subwf	DelayTime_1us@i+1,w
 15130  1318  1D03               	skipz
 15131  1319  2B1C               	goto	u8895
 15132  131A  0820               	movf	DelayTime_1us@count,w
 15133  131B  0222               	subwf	DelayTime_1us@i,w
 15134  131C                     u8895:	
 15135  131C  1803               	btfsc	3,0
 15136  131D  0008               	return
 15137                           
 15138                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 15139  131E  01A4               	clrf	DelayTime_1us@j
 15140  131F  01A5               	clrf	DelayTime_1us@j+1
 15141  1320  3000               	movlw	0
 15142  1321  0225               	subwf	DelayTime_1us@j+1,w
 15143  1322  3002               	movlw	2
 15144  1323  1903               	skipnz
 15145  1324  0224               	subwf	DelayTime_1us@j,w
 15146  1325  1803               	btfsc	3,0
 15147  1326  2B32               	goto	l8679
 15148  1327                     l8677:	
 15149  1327  3001               	movlw	1
 15150  1328  07A4               	addwf	DelayTime_1us@j,f
 15151  1329  3000               	movlw	0
 15152  132A  3DA5               	addwfc	DelayTime_1us@j+1,f
 15153  132B  3000               	movlw	0
 15154  132C  0225               	subwf	DelayTime_1us@j+1,w
 15155  132D  3002               	movlw	2
 15156  132E  1903               	skipnz
 15157  132F  0224               	subwf	DelayTime_1us@j,w
 15158  1330  1C03               	skipc
 15159  1331  2B27               	goto	l8677
 15160  1332                     l8679:	
 15161  1332  3001               	movlw	1
 15162  1333  07A2               	addwf	DelayTime_1us@i,f
 15163  1334  3000               	movlw	0
 15164  1335  3DA3               	addwfc	DelayTime_1us@i+1,f
 15165  1336  2B16               	goto	l402
 15166  1337                     __end_of_DelayTime_1us:	
 15167                           
 15168                           	psect	text99
 15169  1E48                     __ptext99:	
 15170 ;; *************** function _CC2500_ClearTXFIFO *****************
 15171 ;; Defined at:
 15172 ;;		line 190 in file "../src/CC2500_B1.c"
 15173 ;; Parameters:    Size  Location     Type
 15174 ;;		None
 15175 ;; Auto vars:     Size  Location     Type
 15176 ;;		None
 15177 ;; Return value:  Size  Location     Type
 15178 ;;		None               void
 15179 ;; Registers used:
 15180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15181 ;; Tracked objects:
 15182 ;;		On entry : 0/0
 15183 ;;		On exit  : 0/0
 15184 ;;		Unchanged: 0/0
 15185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;Total ram usage:        0 bytes
 15191 ;; Hardware stack levels used:    1
 15192 ;; Hardware stack levels required when called:    7
 15193 ;; This function calls:
 15194 ;;		_CC2500_WriteCommand
 15195 ;; This function is called by:
 15196 ;;		_CC2500_PowerOnInitial
 15197 ;; This function uses a non-reentrant model
 15198 ;;
 15199                           
 15200                           
 15201                           ;psect for function _CC2500_ClearTXFIFO
 15202  1E48                     _CC2500_ClearTXFIFO:	
 15203                           
 15204                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 15205                           
 15206                           ;incstack = 0
 15207                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15208  1E48  303B               	movlw	59
 15209  1E49  3191  212B         	fcall	_CC2500_WriteCommand
 15210  1E4B  0008               	return
 15211  1E4C                     __end_of_CC2500_ClearTXFIFO:	
 15212                           
 15213                           	psect	text100
 15214  1E44                     __ptext100:	
 15215 ;; *************** function _CC2500_ClearRXFIFO *****************
 15216 ;; Defined at:
 15217 ;;		line 197 in file "../src/CC2500_B1.c"
 15218 ;; Parameters:    Size  Location     Type
 15219 ;;		None
 15220 ;; Auto vars:     Size  Location     Type
 15221 ;;		None
 15222 ;; Return value:  Size  Location     Type
 15223 ;;		None               void
 15224 ;; Registers used:
 15225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15226 ;; Tracked objects:
 15227 ;;		On entry : 0/0
 15228 ;;		On exit  : 0/0
 15229 ;;		Unchanged: 0/0
 15230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15235 ;;Total ram usage:        0 bytes
 15236 ;; Hardware stack levels used:    1
 15237 ;; Hardware stack levels required when called:    7
 15238 ;; This function calls:
 15239 ;;		_CC2500_WriteCommand
 15240 ;; This function is called by:
 15241 ;;		_CC2500_PowerOnInitial
 15242 ;; This function uses a non-reentrant model
 15243 ;;
 15244                           
 15245                           
 15246                           ;psect for function _CC2500_ClearRXFIFO
 15247  1E44                     _CC2500_ClearRXFIFO:	
 15248                           
 15249                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 15250                           
 15251                           ;incstack = 0
 15252                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15253  1E44  303A               	movlw	58
 15254  1E45  3191  212B         	fcall	_CC2500_WriteCommand
 15255  1E47  0008               	return
 15256  1E48                     __end_of_CC2500_ClearRXFIFO:	
 15257                           
 15258                           	psect	text101
 15259  112B                     __ptext101:	
 15260 ;; *************** function _CC2500_WriteCommand *****************
 15261 ;; Defined at:
 15262 ;;		line 288 in file "../src/CC2500_B1.c"
 15263 ;; Parameters:    Size  Location     Type
 15264 ;;  command         1    wreg     unsigned char 
 15265 ;; Auto vars:     Size  Location     Type
 15266 ;;  command         1    3[BANK0 ] unsigned char 
 15267 ;; Return value:  Size  Location     Type
 15268 ;;		None               void
 15269 ;; Registers used:
 15270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15271 ;; Tracked objects:
 15272 ;;		On entry : 0/0
 15273 ;;		On exit  : 0/0
 15274 ;;		Unchanged: 0/0
 15275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15280 ;;Total ram usage:        2 bytes
 15281 ;; Hardware stack levels used:    1
 15282 ;; Hardware stack levels required when called:    6
 15283 ;; This function calls:
 15284 ;;		_CC2500_WriteByte
 15285 ;;		_Timeout_Counter
 15286 ;;		_set_TimeoutCleared
 15287 ;; This function is called by:
 15288 ;;		_CC2500_TxData
 15289 ;;		_CC2500_ClearTXFIFO
 15290 ;;		_CC2500_ClearRXFIFO
 15291 ;;		_CC2500_FrequencyCabr
 15292 ;;		_CC2500_SIDLEMode
 15293 ;;		_setRF_Main
 15294 ;;		_RF_RxDisable
 15295 ;; This function uses a non-reentrant model
 15296 ;;
 15297                           
 15298                           
 15299                           ;psect for function _CC2500_WriteCommand
 15300  112B                     _CC2500_WriteCommand:	
 15301                           
 15302                           ;incstack = 0
 15303                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15304                           ;CC2500_WriteCommand@command stored from wreg
 15305  112B  0020               	movlb	0	; select bank0
 15306  112C  00A3               	movwf	CC2500_WriteCommand@command
 15307                           
 15308                           ;CC2500_B1.c: 289: RC4 = 0;
 15309  112D  120E               	bcf	14,4	;volatile
 15310                           
 15311                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 15312  112E  0823               	movf	CC2500_WriteCommand@command,w
 15313  112F  00A2               	movwf	??_CC2500_WriteCommand
 15314  1130  0822               	movf	??_CC2500_WriteCommand,w
 15315  1131  00F5               	movwf	_SPI0Buffer
 15316                           
 15317                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 15318  1132  2936               	goto	l8457
 15319  1133                     l8455:	
 15320                           
 15321                           ;CC2500_B1.c: 293: Timeout_Counter();
 15322  1133  3190  20D2  3191   	fcall	_Timeout_Counter
 15323  1136                     l8457:	
 15324  1136  0020               	movlb	0	; select bank0
 15325  1137  1D0E               	btfss	14,2	;volatile
 15326  1138  293C               	goto	l8461
 15327  1139  0021               	movlb	1	; select bank1
 15328  113A  1D2F               	btfss	(_myMain^(0+128)+15),2
 15329  113B  2933               	goto	l8455
 15330  113C                     l8461:	
 15331                           
 15332                           ;CC2500_B1.c: 294: };
 15333                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 15334  113C  319E  2654  3191   	fcall	_set_TimeoutCleared
 15335                           
 15336                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 15337  113F  3190  20AA         	fcall	_CC2500_WriteByte
 15338                           
 15339                           ;CC2500_B1.c: 298: RC4 = 1;
 15340  1141  0020               	movlb	0	; select bank0
 15341  1142  160E               	bsf	14,4	;volatile
 15342  1143  0008               	return
 15343  1144                     __end_of_CC2500_WriteCommand:	
 15344                           
 15345                           	psect	text102
 15346  1E54                     __ptext102:	
 15347 ;; *************** function _set_TimeoutCleared *****************
 15348 ;; Defined at:
 15349 ;;		line 217 in file "../src/Main_B1.c"
 15350 ;; Parameters:    Size  Location     Type
 15351 ;;		None
 15352 ;; Auto vars:     Size  Location     Type
 15353 ;;		None
 15354 ;; Return value:  Size  Location     Type
 15355 ;;		None               void
 15356 ;; Registers used:
 15357 ;;		status,2
 15358 ;; Tracked objects:
 15359 ;;		On entry : 0/0
 15360 ;;		On exit  : 0/0
 15361 ;;		Unchanged: 0/0
 15362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15367 ;;Total ram usage:        0 bytes
 15368 ;; Hardware stack levels used:    1
 15369 ;; Hardware stack levels required when called:    5
 15370 ;; This function calls:
 15371 ;;		Nothing
 15372 ;; This function is called by:
 15373 ;;		_CC2500_TxData
 15374 ;;		_CC2500_RxData
 15375 ;;		_CC2500_PowerRST
 15376 ;;		_CC2500_WriteREG
 15377 ;;		_CC2500_WriteCommand
 15378 ;;		_CC2500_ReadStatus
 15379 ;;		_TouchPower
 15380 ;;		_CC2500_ReadREG
 15381 ;;		_getAD
 15382 ;; This function uses a non-reentrant model
 15383 ;;
 15384                           
 15385                           
 15386                           ;psect for function _set_TimeoutCleared
 15387  1E54                     _set_TimeoutCleared:	
 15388                           
 15389                           ;Main_B1.c: 218: myMain.Timeout = 0;
 15390                           
 15391                           ;incstack = 0
 15392                           ; Regs used in _set_TimeoutCleared: [status,2]
 15393  1E54  0021               	movlb	1	; select bank1
 15394  1E55  112F               	bcf	(_myMain^(0+128)+15),2
 15395                           
 15396                           ;Main_B1.c: 219: myMain.Timeout_Counter = 0;
 15397  1E56  01B0               	clrf	(_myMain^(0+128)+16)
 15398  1E57  01B1               	clrf	((_myMain+1)^(0+128)+16)
 15399  1E58  0008               	return
 15400  1E59                     __end_of_set_TimeoutCleared:	
 15401                           
 15402                           	psect	text103
 15403  10D2                     __ptext103:	
 15404 ;; *************** function _Timeout_Counter *****************
 15405 ;; Defined at:
 15406 ;;		line 208 in file "../src/Main_B1.c"
 15407 ;; Parameters:    Size  Location     Type
 15408 ;;		None
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;		None
 15411 ;; Return value:  Size  Location     Type
 15412 ;;		None               void
 15413 ;; Registers used:
 15414 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15415 ;; Tracked objects:
 15416 ;;		On entry : 0/0
 15417 ;;		On exit  : 0/0
 15418 ;;		Unchanged: 0/0
 15419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;Total ram usage:        0 bytes
 15425 ;; Hardware stack levels used:    1
 15426 ;; Hardware stack levels required when called:    5
 15427 ;; This function calls:
 15428 ;;		Nothing
 15429 ;; This function is called by:
 15430 ;;		_CC2500_TxData
 15431 ;;		_CC2500_RxData
 15432 ;;		_CC2500_PowerRST
 15433 ;;		_CC2500_WriteREG
 15434 ;;		_CC2500_WriteCommand
 15435 ;;		_CC2500_ReadStatus
 15436 ;;		_TouchPower
 15437 ;;		_CC2500_ReadREG
 15438 ;;		_getAD
 15439 ;; This function uses a non-reentrant model
 15440 ;;
 15441                           
 15442                           
 15443                           ;psect for function _Timeout_Counter
 15444  10D2                     _Timeout_Counter:	
 15445                           
 15446                           ;Main_B1.c: 209: myMain.Timeout_Counter++;
 15447                           
 15448                           ;incstack = 0
 15449                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15450  10D2  3001               	movlw	1
 15451  10D3  0021               	movlb	1	; select bank1
 15452  10D4  07B0               	addwf	(_myMain^(0+128)+16),f
 15453  10D5  3000               	movlw	0
 15454  10D6  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 15455                           
 15456                           ;Main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 15457  10D7  3010               	movlw	16
 15458  10D8  3EA0               	addlw	_myMain& (0+255)
 15459  10D9  0086               	movwf	6
 15460  10DA  0187               	clrf	7
 15461  10DB  3F40               	moviw [0]fsr1
 15462  10DC  3A10               	xorlw	16
 15463  10DD  1D03               	skipz
 15464  10DE  28E1               	goto	u8455
 15465  10DF  3F41               	moviw [1]fsr1
 15466  10E0  3A27               	xorlw	39
 15467  10E1                     u8455:	
 15468  10E1  1D03               	skipz
 15469  10E2  0008               	return
 15470                           
 15471                           ;Main_B1.c: 211: myMain.Timeout_Counter = 0;
 15472  10E3  01B0               	clrf	(_myMain^(0+128)+16)
 15473  10E4  01B1               	clrf	((_myMain+1)^(0+128)+16)
 15474                           
 15475                           ;Main_B1.c: 212: myMain.Timeout = 1;
 15476  10E5  152F               	bsf	(_myMain^(0+128)+15),2
 15477  10E6  0008               	return
 15478  10E7                     __end_of_Timeout_Counter:	
 15479                           
 15480                           	psect	text104
 15481  10AA                     __ptext104:	
 15482 ;; *************** function _CC2500_WriteByte *****************
 15483 ;; Defined at:
 15484 ;;		line 222 in file "../src/CC2500_B1.c"
 15485 ;; Parameters:    Size  Location     Type
 15486 ;;		None
 15487 ;; Auto vars:     Size  Location     Type
 15488 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15489 ;; Return value:  Size  Location     Type
 15490 ;;		None               void
 15491 ;; Registers used:
 15492 ;;		wreg, status,2, status,0
 15493 ;; Tracked objects:
 15494 ;;		On entry : 0/0
 15495 ;;		On exit  : 0/0
 15496 ;;		Unchanged: 0/0
 15497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;Total ram usage:        2 bytes
 15503 ;; Hardware stack levels used:    1
 15504 ;; Hardware stack levels required when called:    5
 15505 ;; This function calls:
 15506 ;;		Nothing
 15507 ;; This function is called by:
 15508 ;;		_CC2500_TxData
 15509 ;;		_CC2500_RxData
 15510 ;;		_CC2500_PowerRST
 15511 ;;		_CC2500_WriteREG
 15512 ;;		_CC2500_WriteCommand
 15513 ;;		_CC2500_ReadStatus
 15514 ;;		_CC2500_ReadREG
 15515 ;; This function uses a non-reentrant model
 15516 ;;
 15517                           
 15518                           
 15519                           ;psect for function _CC2500_WriteByte
 15520  10AA                     _CC2500_WriteByte:	
 15521                           
 15522                           ;CC2500_B1.c: 223: unsigned char loop_a;
 15523                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 15524                           
 15525                           ;incstack = 0
 15526                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15527  10AA  0020               	movlb	0	; select bank0
 15528  10AB  01A1               	clrf	CC2500_WriteByte@loop_a
 15529  10AC                     L12:	
 15530  10AC  3008               	movlw	8
 15531  10AD  0221               	subwf	CC2500_WriteByte@loop_a,w
 15532  10AE  1803               	btfsc	3,0
 15533  10AF  0008               	return
 15534                           
 15535                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 15536  10B0  1FF5               	btfss	_SPI0Buffer,7
 15537  10B1  28B4               	goto	l358
 15538                           
 15539                           ;CC2500_B1.c: 226: RC0 = 1;
 15540  10B2  140E               	bsf	14,0	;volatile
 15541  10B3  28B5               	goto	l359
 15542  10B4                     l358:	
 15543                           
 15544                           ;CC2500_B1.c: 227: else
 15545                           ;CC2500_B1.c: 228: RC0 = 0;
 15546  10B4  100E               	bcf	14,0	;volatile
 15547  10B5                     l359:	
 15548                           
 15549                           ;CC2500_B1.c: 229: RC1 = 1;
 15550  10B5  148E               	bsf	14,1	;volatile
 15551                           
 15552                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 15553  10B6  1003               	clrc
 15554  10B7  0DF5               	rlf	_SPI0Buffer,f
 15555                           
 15556                           ;CC2500_B1.c: 231: RC1 = 0;
 15557  10B8  108E               	bcf	14,1	;volatile
 15558  10B9  3001               	movlw	1
 15559  10BA  00A0               	movwf	??_CC2500_WriteByte
 15560  10BB  0820               	movf	??_CC2500_WriteByte,w
 15561  10BC  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15562  10BD  28AC               	goto	L12
 15563  10BE                     __end_of_CC2500_WriteByte:	
 15564                           
 15565                           	psect	text105
 15566  16BE                     __ptext105:	
 15567 ;; *************** function _Buzzer_Main *****************
 15568 ;; Defined at:
 15569 ;;		line 46 in file "../src/Buzzer_B1.c"
 15570 ;; Parameters:    Size  Location     Type
 15571 ;;		None
 15572 ;; Auto vars:     Size  Location     Type
 15573 ;;		None
 15574 ;; Return value:  Size  Location     Type
 15575 ;;		None               void
 15576 ;; Registers used:
 15577 ;;		wreg, status,2, status,0
 15578 ;; Tracked objects:
 15579 ;;		On entry : 0/0
 15580 ;;		On exit  : 0/0
 15581 ;;		Unchanged: 0/0
 15582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;Total ram usage:        1 bytes
 15588 ;; Hardware stack levels used:    1
 15589 ;; Hardware stack levels required when called:    5
 15590 ;; This function calls:
 15591 ;;		Nothing
 15592 ;; This function is called by:
 15593 ;;		_main
 15594 ;; This function uses a non-reentrant model
 15595 ;;
 15596                           
 15597                           
 15598                           ;psect for function _Buzzer_Main
 15599  16BE                     _Buzzer_Main:	
 15600                           
 15601                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15602                           
 15603                           ;incstack = 0
 15604                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15605  16BE  0021               	movlb	1	; select bank1
 15606  16BF  1CB2               	btfss	_Buz1^(0+128),1
 15607  16C0  0008               	return
 15608                           
 15609                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15610  16C1  3001               	movlw	1
 15611  16C2  07B3               	addwf	(_Buz1^(0+128)+1),f
 15612  16C3  3000               	movlw	0
 15613  16C4  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 15614                           
 15615                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15616  16C5  0839               	movf	((_Buz1+1)^(0+128)+6),w
 15617  16C6  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 15618  16C7  1D03               	skipz
 15619  16C8  2ECB               	goto	u10245
 15620  16C9  0838               	movf	(_Buz1^(0+128)+6),w
 15621  16CA  0233               	subwf	(_Buz1^(0+128)+1),w
 15622  16CB                     u10245:	
 15623  16CB  1C03               	skipc
 15624  16CC  0008               	return
 15625                           
 15626                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15627  16CD  01B3               	clrf	(_Buz1^(0+128)+1)
 15628  16CE  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15629                           
 15630                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15631  16CF  12B2               	bcf	_Buz1^(0+128),5
 15632  16D0  0020               	movlb	0	; select bank0
 15633  16D1  1D8D               	btfss	13,3	;volatile
 15634  16D2  2ED5               	goto	l9511
 15635  16D3  0021               	movlb	1	; select bank1
 15636  16D4  16B2               	bsf	_Buz1^(0+128),5
 15637  16D5                     l9511:	
 15638                           
 15639                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15640  16D5  0021               	movlb	1	; select bank1
 15641  16D6  1AB2               	btfsc	_Buz1^(0+128),5
 15642  16D7  2F01               	goto	l120
 15643                           
 15644                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15645  16D8  08B5               	movf	(_Buz1^(0+128)+3),f
 15646  16D9  1D03               	skipz
 15647  16DA  2EFD               	goto	l121
 15648                           
 15649                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15650  16DB  1DB2               	btfss	_Buz1^(0+128),3
 15651  16DC  2EEB               	goto	l122
 15652                           
 15653                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15654  16DD  11B2               	bcf	_Buz1^(0+128),3
 15655                           
 15656                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15657  16DE  0836               	movf	(_Buz1^(0+128)+4),w
 15658  16DF  0020               	movlb	0	; select bank0
 15659  16E0  00A0               	movwf	??_Buzzer_Main
 15660  16E1  0820               	movf	??_Buzzer_Main,w
 15661  16E2  0021               	movlb	1	; select bank1
 15662  16E3  00B5               	movwf	(_Buz1^(0+128)+3)
 15663                           
 15664                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15665  16E4  083B               	movf	((_Buz1+1)^(0+128)+8),w
 15666  16E5  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15667  16E6  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15668  16E7  083A               	movf	(_Buz1^(0+128)+8),w
 15669  16E8  01B8               	clrf	(_Buz1^(0+128)+6)
 15670  16E9  07B8               	addwf	(_Buz1^(0+128)+6),f
 15671                           
 15672                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15673  16EA  0008               	return
 15674  16EB                     l122:	
 15675  16EB  1E32               	btfss	_Buz1^(0+128),4
 15676  16EC  2EFB               	goto	l124
 15677                           
 15678                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15679  16ED  1232               	bcf	_Buz1^(0+128),4
 15680                           
 15681                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15682  16EE  0837               	movf	(_Buz1^(0+128)+5),w
 15683  16EF  0020               	movlb	0	; select bank0
 15684  16F0  00A0               	movwf	??_Buzzer_Main
 15685  16F1  0820               	movf	??_Buzzer_Main,w
 15686  16F2  0021               	movlb	1	; select bank1
 15687  16F3  00B5               	movwf	(_Buz1^(0+128)+3)
 15688                           
 15689                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15690  16F4  083D               	movf	((_Buz1+1)^(0+128)+10),w
 15691  16F5  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15692  16F6  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15693  16F7  083C               	movf	(_Buz1^(0+128)+10),w
 15694  16F8  01B8               	clrf	(_Buz1^(0+128)+6)
 15695  16F9  07B8               	addwf	(_Buz1^(0+128)+6),f
 15696                           
 15697                           ;Buzzer_B1.c: 62: } else {
 15698  16FA  0008               	return
 15699  16FB                     l124:	
 15700                           
 15701                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15702  16FB  10B2               	bcf	_Buz1^(0+128),1
 15703                           
 15704                           ;Buzzer_B1.c: 64: }
 15705                           ;Buzzer_B1.c: 65: } else {
 15706  16FC  0008               	return
 15707  16FD                     l121:	
 15708                           
 15709                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15710  16FD  16B2               	bsf	_Buz1^(0+128),5
 15711                           
 15712                           ;Buzzer_B1.c: 68: RB3 = 1;
 15713  16FE  0020               	movlb	0	; select bank0
 15714  16FF  158D               	bsf	13,3	;volatile
 15715                           
 15716                           ;Buzzer_B1.c: 69: }
 15717                           ;Buzzer_B1.c: 70: } else {
 15718  1700  0008               	return
 15719  1701                     l120:	
 15720                           
 15721                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15722  1701  12B2               	bcf	_Buz1^(0+128),5
 15723                           
 15724                           ;Buzzer_B1.c: 73: RB3 = 0;
 15725  1702  0020               	movlb	0	; select bank0
 15726  1703  118D               	bcf	13,3	;volatile
 15727                           
 15728                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15729  1704  3001               	movlw	1
 15730  1705  0021               	movlb	1	; select bank1
 15731  1706  02B5               	subwf	(_Buz1^(0+128)+3),f
 15732  1707  0008               	return
 15733  1708                     __end_of_Buzzer_Main:	
 15734                           
 15735                           	psect	text106
 15736  1E3B                     __ptext106:	
 15737 ;; *************** function _Buzzer_Initialization *****************
 15738 ;; Defined at:
 15739 ;;		line 11 in file "../src/Buzzer_B1.c"
 15740 ;; Parameters:    Size  Location     Type
 15741 ;;		None
 15742 ;; Auto vars:     Size  Location     Type
 15743 ;;		None
 15744 ;; Return value:  Size  Location     Type
 15745 ;;		None               void
 15746 ;; Registers used:
 15747 ;;		None
 15748 ;; Tracked objects:
 15749 ;;		On entry : 0/0
 15750 ;;		On exit  : 0/0
 15751 ;;		Unchanged: 0/0
 15752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15757 ;;Total ram usage:        0 bytes
 15758 ;; Hardware stack levels used:    1
 15759 ;; Hardware stack levels required when called:    5
 15760 ;; This function calls:
 15761 ;;		Nothing
 15762 ;; This function is called by:
 15763 ;;		_main
 15764 ;; This function uses a non-reentrant model
 15765 ;;
 15766                           
 15767                           
 15768                           ;psect for function _Buzzer_Initialization
 15769  1E3B                     _Buzzer_Initialization:	
 15770                           
 15771                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15772                           
 15773                           ;incstack = 0
 15774                           ; Regs used in _Buzzer_Initialization: []
 15775  1E3B  0021               	movlb	1	; select bank1
 15776  1E3C  1432               	bsf	_Buz1^(0+128),0
 15777  1E3D  0008               	return
 15778  1E3E                     __end_of_Buzzer_Initialization:	
 15779                           
 15780                           	psect	intentry
 15781  0004                     __pintentry:	
 15782 ;; *************** function _ISR *****************
 15783 ;; Defined at:
 15784 ;;		line 107 in file "../src/MCU_B1.c"
 15785 ;; Parameters:    Size  Location     Type
 15786 ;;		None
 15787 ;; Auto vars:     Size  Location     Type
 15788 ;;		None
 15789 ;; Return value:  Size  Location     Type
 15790 ;;		None               void
 15791 ;; Registers used:
 15792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15793 ;; Tracked objects:
 15794 ;;		On entry : 0/0
 15795 ;;		On exit  : 0/0
 15796 ;;		Unchanged: 0/0
 15797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15802 ;;Total ram usage:        1 bytes
 15803 ;; Hardware stack levels used:    1
 15804 ;; Hardware stack levels required when called:    4
 15805 ;; This function calls:
 15806 ;;		_IOC_ISR
 15807 ;;		_TMR0_ISR
 15808 ;; This function is called by:
 15809 ;;		Interrupt level 1
 15810 ;; This function uses a non-reentrant model
 15811 ;;
 15812                           
 15813  0004                     _ISR:	
 15814                           
 15815                           ;incstack = 0
 15816                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15817  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15818  0005  3180               	pagesel	$
 15819  0006  0020               	movlb	0	; select bank0
 15820  0007  087F               	movf	127,w
 15821  0008  00FB               	movwf	??_ISR
 15822                           
 15823                           ;MCU_B1.c: 109: IOC_ISR();
 15824  0009  319E  26F5  3180   	fcall	_IOC_ISR
 15825                           
 15826                           ;MCU_B1.c: 111: TMR0_ISR();
 15827  000C  3193  23DA         	fcall	_TMR0_ISR
 15828  000E  087B               	movf	??_ISR,w
 15829  000F  0020               	movlb	0	; select bank0
 15830  0010  00FF               	movwf	127
 15831  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 15832  0012  0009               	retfie
 15833  0013                     __end_of_ISR:	
 15834                           
 15835                           	psect	text108
 15836  13DA                     __ptext108:	
 15837 ;; *************** function _TMR0_ISR *****************
 15838 ;; Defined at:
 15839 ;;		line 135 in file "../src/MCU_B1.c"
 15840 ;; Parameters:    Size  Location     Type
 15841 ;;		None
 15842 ;; Auto vars:     Size  Location     Type
 15843 ;;		None
 15844 ;; Return value:  Size  Location     Type
 15845 ;;		None               void
 15846 ;; Registers used:
 15847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15848 ;; Tracked objects:
 15849 ;;		On entry : 0/0
 15850 ;;		On exit  : 0/0
 15851 ;;		Unchanged: 0/0
 15852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15857 ;;Total ram usage:        0 bytes
 15858 ;; Hardware stack levels used:    1
 15859 ;; Hardware stack levels required when called:    2
 15860 ;; This function calls:
 15861 ;;		_setDimmerLights_IntrControl
 15862 ;; This function is called by:
 15863 ;;		_ISR
 15864 ;; This function uses a non-reentrant model
 15865 ;;
 15866                           
 15867                           
 15868                           ;psect for function _TMR0_ISR
 15869  13DA                     _TMR0_ISR:	
 15870                           
 15871                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 15872                           
 15873                           ;incstack = 0
 15874                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15875  13DA  1E8B               	btfss	11,5	;volatile
 15876  13DB  0008               	return
 15877  13DC  1D0B               	btfss	11,2	;volatile
 15878  13DD  0008               	return
 15879                           
 15880                           ;MCU_B1.c: 138: TMR0 = (256-190);
 15881  13DE  3042               	movlw	66
 15882  13DF  0020               	movlb	0	; select bank0
 15883  13E0  0095               	movwf	21	;volatile
 15884                           
 15885                           ;MCU_B1.c: 139: TMR0IF = 0;
 15886  13E1  110B               	bcf	11,2	;volatile
 15887                           
 15888                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 15889  13E2  3001               	movlw	1
 15890  13E3  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15891                           
 15892                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 15893  13E6  3002               	movlw	2
 15894  13E7  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15895                           
 15896                           ;MCU_B1.c: 154: setDimmerLights_IntrControl(3);
 15897  13EA  3003               	movlw	3
 15898  13EB  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15899                           
 15900                           ;MCU_B1.c: 160: Timer0.Count++;
 15901  13EE  3001               	movlw	1
 15902  13EF  0022               	movlb	2	; select bank2
 15903  13F0  07B6               	addwf	(_Timer0^(0+256)+1),f
 15904  13F1  3000               	movlw	0
 15905  13F2  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 15906                           
 15907                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 15908  13F3  3001               	movlw	1
 15909  13F4  3E35               	addlw	_Timer0& (0+255)
 15910  13F5  0086               	movwf	6
 15911  13F6  3001               	movlw	1	; select bank2/3
 15912  13F7  0087               	movwf	7
 15913  13F8  3F40               	moviw [0]fsr1
 15914  13F9  3A64               	xorlw	100
 15915  13FA  1D03               	skipz
 15916  13FB  2BFE               	goto	u747_25
 15917  13FC  3F41               	moviw [1]fsr1
 15918  13FD  3A00               	xorlw	0
 15919  13FE                     u747_25:	
 15920  13FE  1D03               	skipz
 15921  13FF  0008               	return
 15922                           
 15923                           ;MCU_B1.c: 162: Timer0.Count = 0;
 15924  1400  01B6               	clrf	(_Timer0^(0+256)+1)
 15925  1401  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 15926                           
 15927                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 15928  1402  0021               	movlb	1	; select bank1
 15929  1403  14A0               	bsf	_myMain^(0+128),1
 15930  1404  0008               	return
 15931  1405                     __end_of_TMR0_ISR:	
 15932                           
 15933                           	psect	text109
 15934  0045                     __ptext109:	
 15935 ;; *************** function _setDimmerLights_IntrControl *****************
 15936 ;; Defined at:
 15937 ;;		line 94 in file "../src/Dimmer_B1.c"
 15938 ;; Parameters:    Size  Location     Type
 15939 ;;  lights          1    wreg     unsigned char 
 15940 ;; Auto vars:     Size  Location     Type
 15941 ;;  lights          1    4[COMMON] unsigned char 
 15942 ;; Return value:  Size  Location     Type
 15943 ;;		None               void
 15944 ;; Registers used:
 15945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15946 ;; Tracked objects:
 15947 ;;		On entry : 0/0
 15948 ;;		On exit  : 0/0
 15949 ;;		Unchanged: 0/0
 15950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15953 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15954 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15955 ;;Total ram usage:        3 bytes
 15956 ;; Hardware stack levels used:    1
 15957 ;; Hardware stack levels required when called:    1
 15958 ;; This function calls:
 15959 ;;		_DimmerIntrPointSelect
 15960 ;; This function is called by:
 15961 ;;		_TMR0_ISR
 15962 ;; This function uses a non-reentrant model
 15963 ;;
 15964                           
 15965                           
 15966                           ;psect for function _setDimmerLights_IntrControl
 15967  0045                     _setDimmerLights_IntrControl:	
 15968                           
 15969                           ;incstack = 0
 15970                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15971                           ;setDimmerLights_IntrControl@lights stored from wreg
 15972  0045  00FA               	movwf	setDimmerLights_IntrControl@lights
 15973                           
 15974                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 15975  0046  087A               	movf	setDimmerLights_IntrControl@lights,w
 15976  0047  3191  2144  3180   	fcall	_DimmerIntrPointSelect
 15977                           
 15978                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 15979  004A  0874               	movf	_DimmerLightsIntr,w
 15980  004B  0086               	movwf	6
 15981  004C  3001               	movlw	1	; select bank2/3
 15982  004D  0087               	movwf	7
 15983  004E  1C01               	btfss	1,0
 15984  004F  28A5               	goto	i1l7021
 15985                           
 15986                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 15987  0050  3001               	movlw	1
 15988  0051  00F8               	movwf	??_setDimmerLights_IntrControl
 15989  0052  0874               	movf	_DimmerLightsIntr,w
 15990  0053  3E03               	addlw	3
 15991  0054  0086               	movwf	6
 15992  0055  3001               	movlw	1	; select bank2/3
 15993  0056  0087               	movwf	7
 15994  0057  0878               	movf	??_setDimmerLights_IntrControl,w
 15995  0058  0781               	addwf	1,f
 15996                           
 15997                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 15998  0059  0873               	movf	_Dimmer,w
 15999  005A  3E02               	addlw	2
 16000  005B  0086               	movwf	6
 16001  005C  0187               	clrf	7
 16002  005D  0874               	movf	_DimmerLightsIntr,w
 16003  005E  3E04               	addlw	4
 16004  005F  0084               	movwf	4
 16005  0060  3001               	movlw	1	; select bank2/3
 16006  0061  0085               	movwf	5
 16007  0062  0800               	movf	0,w
 16008  0063  0701               	addwf	1,w
 16009  0064  00F8               	movwf	??_setDimmerLights_IntrControl
 16010  0065  01F9               	clrf	??_setDimmerLights_IntrControl+1
 16011  0066  0DF9               	rlf	??_setDimmerLights_IntrControl+1,f
 16012  0067  0874               	movf	_DimmerLightsIntr,w
 16013  0068  3E03               	addlw	3
 16014  0069  0086               	movwf	6
 16015  006A  3001               	movlw	1	; select bank2/3
 16016  006B  0087               	movwf	7
 16017  006C  0879               	movf	??_setDimmerLights_IntrControl+1,w
 16018  006D  3A80               	xorlw	128
 16019  006E  3C80               	sublw	128
 16020  006F  1D03               	skipz
 16021  0070  2873               	goto	u633_25
 16022  0071  0878               	movf	??_setDimmerLights_IntrControl,w
 16023  0072  0201               	subwf	1,w
 16024  0073                     u633_25:	
 16025  0073  1C03               	skipc
 16026  0074  29B3               	goto	i1l7087
 16027                           
 16028                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 16029  0075  0874               	movf	_DimmerLightsIntr,w
 16030  0076  3E03               	addlw	3
 16031  0077  0086               	movwf	6
 16032  0078  3001               	movlw	1	; select bank2/3
 16033  0079  0087               	movwf	7
 16034  007A  0181               	clrf	1
 16035                           
 16036                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 16037  007B  0874               	movf	_DimmerLightsIntr,w
 16038  007C  0086               	movwf	6
 16039  007D  3001               	movlw	1	; select bank2/3
 16040  007E  0087               	movwf	7
 16041  007F  1001               	bcf	1,0
 16042                           
 16043                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 16044  0080  0874               	movf	_DimmerLightsIntr,w
 16045  0081  0086               	movwf	6
 16046  0082  3001               	movlw	1	; select bank2/3
 16047  0083  0087               	movwf	7
 16048  0084  1F01               	btfss	1,6
 16049  0085  29B3               	goto	i1l7087
 16050                           
 16051                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 16052  0086  0874               	movf	_DimmerLightsIntr,w
 16053  0087  3E08               	addlw	8
 16054  0088  0086               	movwf	6
 16055  0089  3001               	movlw	1	; select bank2/3
 16056  008A  0087               	movwf	7
 16057  008B  1401               	bsf	1,0
 16058                           
 16059                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 16060  008C  0874               	movf	_DimmerLightsIntr,w
 16061  008D  3E08               	addlw	8
 16062  008E  0086               	movwf	6
 16063  008F  3001               	movlw	1	; select bank2/3
 16064  0090  0087               	movwf	7
 16065  0091  1681               	bsf	1,5
 16066                           
 16067                           ;Dimmer_B1.c: 107: if (lights == 1) {
 16068  0092  087A               	movf	setDimmerLights_IntrControl@lights,w
 16069  0093  3A01               	xorlw	1
 16070  0094  1D03               	skipz
 16071  0095  2898               	goto	i1l7013
 16072                           
 16073                           ;Dimmer_B1.c: 108: RB4 = 1;
 16074  0096  0020               	movlb	0	; select bank0
 16075  0097  160D               	bsf	13,4	;volatile
 16076  0098                     i1l7013:	
 16077                           ;Dimmer_B1.c: 109: ;;
 16078                           
 16079                           
 16080                           ;Dimmer_B1.c: 110: }
 16081                           ;Dimmer_B1.c: 113: if (lights == 2) {
 16082  0098  087A               	movf	setDimmerLights_IntrControl@lights,w
 16083  0099  3A02               	xorlw	2
 16084  009A  1D03               	skipz
 16085  009B  289E               	goto	i1l7017
 16086                           
 16087                           ;Dimmer_B1.c: 114: RA7 = 1;
 16088  009C  0020               	movlb	0	; select bank0
 16089  009D  178C               	bsf	12,7	;volatile
 16090  009E                     i1l7017:	
 16091                           
 16092                           ;Dimmer_B1.c: 115: }
 16093                           ;Dimmer_B1.c: 118: if (lights == 3) {
 16094  009E  087A               	movf	setDimmerLights_IntrControl@lights,w
 16095  009F  3A03               	xorlw	3
 16096  00A0  1D03               	skipz
 16097  00A1  29B3               	goto	i1l7087
 16098                           
 16099                           ;Dimmer_B1.c: 119: RB1 = 1;
 16100  00A2  0020               	movlb	0	; select bank0
 16101  00A3  148D               	bsf	13,1	;volatile
 16102                           
 16103                           ;Dimmer_B1.c: 120: }
 16104                           ;Dimmer_B1.c: 122: }
 16105                           ;Dimmer_B1.c: 123: }
 16106                           ;Dimmer_B1.c: 124: } else {
 16107  00A4  29B3               	goto	i1l7087
 16108  00A5                     i1l7021:	
 16109                           
 16110                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 16111  00A5  0874               	movf	_DimmerLightsIntr,w
 16112  00A6  3E08               	addlw	8
 16113  00A7  0086               	movwf	6
 16114  00A8  3001               	movlw	1	; select bank2/3
 16115  00A9  0087               	movwf	7
 16116  00AA  1C01               	btfss	1,0
 16117  00AB  29B3               	goto	i1l7087
 16118                           
 16119                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 16120  00AC  0874               	movf	_DimmerLightsIntr,w
 16121  00AD  3E08               	addlw	8
 16122  00AE  0086               	movwf	6
 16123  00AF  3001               	movlw	1	; select bank2/3
 16124  00B0  0087               	movwf	7
 16125  00B1  1001               	bcf	1,0
 16126                           
 16127                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 16128  00B2  0874               	movf	_DimmerLightsIntr,w
 16129  00B3  0086               	movwf	6
 16130  00B4  3001               	movlw	1	; select bank2/3
 16131  00B5  0087               	movwf	7
 16132  00B6  1C81               	btfss	1,1
 16133  00B7  29B3               	goto	i1l7087
 16134                           
 16135                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 16136  00B8  3001               	movlw	1
 16137  00B9  00F8               	movwf	??_setDimmerLights_IntrControl
 16138  00BA  0A74               	incf	_DimmerLightsIntr,w
 16139  00BB  0086               	movwf	6
 16140  00BC  3001               	movlw	1	; select bank2/3
 16141  00BD  0087               	movwf	7
 16142  00BE  0878               	movf	??_setDimmerLights_IntrControl,w
 16143  00BF  0781               	addwf	1,f
 16144                           
 16145                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16146  00C0  0A74               	incf	_DimmerLightsIntr,w
 16147  00C1  0086               	movwf	6
 16148  00C2  3001               	movlw	1	; select bank2/3
 16149  00C3  0087               	movwf	7
 16150  00C4  0874               	movf	_DimmerLightsIntr,w
 16151  00C5  3E02               	addlw	2
 16152  00C6  0084               	movwf	4
 16153  00C7  3001               	movlw	1	; select bank2/3
 16154  00C8  0085               	movwf	5
 16155  00C9  0800               	movf	0,w
 16156  00CA  0201               	subwf	1,w
 16157  00CB  1C03               	skipc
 16158  00CC  29B3               	goto	i1l7087
 16159                           
 16160                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 16161  00CD  0A74               	incf	_DimmerLightsIntr,w
 16162  00CE  0086               	movwf	6
 16163  00CF  3001               	movlw	1	; select bank2/3
 16164  00D0  0087               	movwf	7
 16165  00D1  0181               	clrf	1
 16166                           
 16167                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 16168  00D2  0874               	movf	_DimmerLightsIntr,w
 16169  00D3  0086               	movwf	6
 16170  00D4  3001               	movlw	1	; select bank2/3
 16171  00D5  0087               	movwf	7
 16172  00D6  1D81               	btfss	1,3
 16173  00D7  290E               	goto	i1l7047
 16174                           
 16175                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 16176  00D8  0874               	movf	_DimmerLightsIntr,w
 16177  00D9  0086               	movwf	6
 16178  00DA  3001               	movlw	1	; select bank2/3
 16179  00DB  0087               	movwf	7
 16180  00DC  1A01               	btfsc	1,4
 16181  00DD  28F5               	goto	i1l7041
 16182                           
 16183                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-90)*0.8))) {
 16184  00DE  0874               	movf	_DimmerLightsIntr,w
 16185  00DF  3E04               	addlw	4
 16186  00E0  0086               	movwf	6
 16187  00E1  3001               	movlw	1	; select bank2/3
 16188  00E2  0087               	movwf	7
 16189  00E3  3009               	movlw	9
 16190  00E4  0201               	subwf	1,w
 16191  00E5  1C03               	skipc
 16192  00E6  28EF               	goto	i1l7039
 16193                           
 16194                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 16195  00E7  0874               	movf	_DimmerLightsIntr,w
 16196  00E8  3E04               	addlw	4
 16197  00E9  0086               	movwf	6
 16198  00EA  3001               	movlw	1	; select bank2/3
 16199  00EB  0087               	movwf	7
 16200  00EC  3001               	movlw	1
 16201  00ED  0281               	subwf	1,f
 16202                           
 16203                           ;Dimmer_B1.c: 135: } else {
 16204  00EE  29B3               	goto	i1l7087
 16205  00EF                     i1l7039:	
 16206                           
 16207                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 16208  00EF  0874               	movf	_DimmerLightsIntr,w
 16209  00F0  0086               	movwf	6
 16210  00F1  3001               	movlw	1	; select bank2/3
 16211  00F2  0087               	movwf	7
 16212  00F3  1601               	bsf	1,4
 16213                           
 16214                           ;Dimmer_B1.c: 137: }
 16215                           ;Dimmer_B1.c: 138: } else {
 16216  00F4  29B3               	goto	i1l7087
 16217  00F5                     i1l7041:	
 16218                           
 16219                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 16220  00F5  0874               	movf	_DimmerLightsIntr,w
 16221  00F6  3E04               	addlw	4
 16222  00F7  0086               	movwf	6
 16223  00F8  3001               	movlw	1	; select bank2/3
 16224  00F9  0087               	movwf	7
 16225  00FA  303C               	movlw	60
 16226  00FB  0201               	subwf	1,w
 16227  00FC  1803               	skipnc
 16228  00FD  2908               	goto	i1l7045
 16229                           
 16230                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 16231  00FE  3001               	movlw	1
 16232  00FF  00F8               	movwf	??_setDimmerLights_IntrControl
 16233  0100  0874               	movf	_DimmerLightsIntr,w
 16234  0101  3E04               	addlw	4
 16235  0102  0086               	movwf	6
 16236  0103  3001               	movlw	1	; select bank2/3
 16237  0104  0087               	movwf	7
 16238  0105  0878               	movf	??_setDimmerLights_IntrControl,w
 16239  0106  0781               	addwf	1,f
 16240                           
 16241                           ;Dimmer_B1.c: 141: } else {
 16242  0107  29B3               	goto	i1l7087
 16243  0108                     i1l7045:	
 16244                           
 16245                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 16246  0108  0874               	movf	_DimmerLightsIntr,w
 16247  0109  0086               	movwf	6
 16248  010A  3001               	movlw	1	; select bank2/3
 16249  010B  0087               	movwf	7
 16250  010C  1201               	bcf	1,4
 16251                           
 16252                           ;Dimmer_B1.c: 143: }
 16253                           ;Dimmer_B1.c: 144: }
 16254                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 16255  010D  29B3               	goto	i1l7087
 16256  010E                     i1l7047:	
 16257  010E  0874               	movf	_DimmerLightsIntr,w
 16258  010F  0086               	movwf	6
 16259  0110  3001               	movlw	1	; select bank2/3
 16260  0111  0087               	movwf	7
 16261  0112  1D01               	btfss	1,2
 16262  0113  2955               	goto	i1l7061
 16263                           
 16264                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16265  0114  0874               	movf	_DimmerLightsIntr,w
 16266  0115  3E05               	addlw	5
 16267  0116  0086               	movwf	6
 16268  0117  3001               	movlw	1	; select bank2/3
 16269  0118  0087               	movwf	7
 16270  0119  0874               	movf	_DimmerLightsIntr,w
 16271  011A  3E04               	addlw	4
 16272  011B  0084               	movwf	4
 16273  011C  3001               	movlw	1	; select bank2/3
 16274  011D  0085               	movwf	5
 16275  011E  0800               	movf	0,w
 16276  011F  0201               	subwf	1,w
 16277  0120  1803               	skipnc
 16278  0121  292A               	goto	i1l7053
 16279                           
 16280                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 16281  0122  0874               	movf	_DimmerLightsIntr,w
 16282  0123  3E04               	addlw	4
 16283  0124  0086               	movwf	6
 16284  0125  3001               	movlw	1	; select bank2/3
 16285  0126  0087               	movwf	7
 16286  0127  3001               	movlw	1
 16287  0128  0281               	subwf	1,f
 16288                           
 16289                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 16290  0129  2941               	goto	i1l7057
 16291  012A                     i1l7053:	
 16292  012A  0874               	movf	_DimmerLightsIntr,w
 16293  012B  3E04               	addlw	4
 16294  012C  0086               	movwf	6
 16295  012D  3001               	movlw	1	; select bank2/3
 16296  012E  0087               	movwf	7
 16297  012F  0874               	movf	_DimmerLightsIntr,w
 16298  0130  3E05               	addlw	5
 16299  0131  0084               	movwf	4
 16300  0132  3001               	movlw	1	; select bank2/3
 16301  0133  0085               	movwf	5
 16302  0134  0800               	movf	0,w
 16303  0135  0201               	subwf	1,w
 16304  0136  1803               	skipnc
 16305  0137  2941               	goto	i1l7057
 16306                           
 16307                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 16308  0138  3001               	movlw	1
 16309  0139  00F8               	movwf	??_setDimmerLights_IntrControl
 16310  013A  0874               	movf	_DimmerLightsIntr,w
 16311  013B  3E04               	addlw	4
 16312  013C  0086               	movwf	6
 16313  013D  3001               	movlw	1	; select bank2/3
 16314  013E  0087               	movwf	7
 16315  013F  0878               	movf	??_setDimmerLights_IntrControl,w
 16316  0140  0781               	addwf	1,f
 16317  0141                     i1l7057:	
 16318                           
 16319                           ;Dimmer_B1.c: 150: }
 16320                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16321  0141  0874               	movf	_DimmerLightsIntr,w
 16322  0142  3E05               	addlw	5
 16323  0143  0086               	movwf	6
 16324  0144  3001               	movlw	1	; select bank2/3
 16325  0145  0087               	movwf	7
 16326  0146  0874               	movf	_DimmerLightsIntr,w
 16327  0147  3E04               	addlw	4
 16328  0148  0084               	movwf	4
 16329  0149  3001               	movlw	1	; select bank2/3
 16330  014A  0085               	movwf	5
 16331  014B  0800               	movf	0,w
 16332  014C  0601               	xorwf	1,w
 16333  014D  1D03               	skipz
 16334  014E  29B3               	goto	i1l7087
 16335                           
 16336                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 16337  014F  0874               	movf	_DimmerLightsIntr,w
 16338  0150  0086               	movwf	6
 16339  0151  3001               	movlw	1	; select bank2/3
 16340  0152  0087               	movwf	7
 16341  0153  1101               	bcf	1,2
 16342  0154  2970               	goto	i1l7067
 16343  0155                     i1l7061:	
 16344                           ;Dimmer_B1.c: 154: }
 16345                           ;Dimmer_B1.c: 155: } else {
 16346                           
 16347                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 16348                           
 16349                           
 16350                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 16351  0155  0874               	movf	_DimmerLightsIntr,w
 16352  0156  0086               	movwf	6
 16353  0157  3001               	movlw	1	; select bank2/3
 16354  0158  0087               	movwf	7
 16355  0159  1E81               	btfss	1,5
 16356  015A  2976               	goto	i1l7069
 16357                           
 16358                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 16359  015B  0874               	movf	_DimmerLightsIntr,w
 16360  015C  3E04               	addlw	4
 16361  015D  0086               	movwf	6
 16362  015E  3001               	movlw	1	; select bank2/3
 16363  015F  0087               	movwf	7
 16364  0160  3001               	movlw	1
 16365  0161  0281               	subwf	1,f
 16366                           
 16367                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 16368  0162  0874               	movf	_DimmerLightsIntr,w
 16369  0163  3E05               	addlw	5
 16370  0164  0086               	movwf	6
 16371  0165  3001               	movlw	1	; select bank2/3
 16372  0166  0087               	movwf	7
 16373  0167  0874               	movf	_DimmerLightsIntr,w
 16374  0168  3E04               	addlw	4
 16375  0169  0084               	movwf	4
 16376  016A  3001               	movlw	1	; select bank2/3
 16377  016B  0085               	movwf	5
 16378  016C  0800               	movf	0,w
 16379  016D  0201               	subwf	1,w
 16380  016E  1C03               	skipc
 16381  016F  29B3               	goto	i1l7087
 16382  0170                     i1l7067:	
 16383                           
 16384                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 16385  0170  0874               	movf	_DimmerLightsIntr,w
 16386  0171  0086               	movwf	6
 16387  0172  3001               	movlw	1	; select bank2/3
 16388  0173  0087               	movwf	7
 16389  0174  1081               	bcf	1,1
 16390                           
 16391                           ;Dimmer_B1.c: 160: }
 16392                           ;Dimmer_B1.c: 161: } else {
 16393  0175  29B3               	goto	i1l7087
 16394  0176                     i1l7069:	
 16395                           
 16396                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 16397  0176  3001               	movlw	1
 16398  0177  00F8               	movwf	??_setDimmerLights_IntrControl
 16399  0178  0874               	movf	_DimmerLightsIntr,w
 16400  0179  3E04               	addlw	4
 16401  017A  0086               	movwf	6
 16402  017B  3001               	movlw	1	; select bank2/3
 16403  017C  0087               	movwf	7
 16404  017D  0878               	movf	??_setDimmerLights_IntrControl,w
 16405  017E  0781               	addwf	1,f
 16406                           
 16407                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 16408  017F  0874               	movf	_DimmerLightsIntr,w
 16409  0180  3E04               	addlw	4
 16410  0181  0086               	movwf	6
 16411  0182  3001               	movlw	1	; select bank2/3
 16412  0183  0087               	movwf	7
 16413  0184  0874               	movf	_DimmerLightsIntr,w
 16414  0185  3E06               	addlw	6
 16415  0186  0084               	movwf	4
 16416  0187  3001               	movlw	1	; select bank2/3
 16417  0188  0085               	movwf	5
 16418  0189  0800               	movf	0,w
 16419  018A  0201               	subwf	1,w
 16420  018B  1C03               	skipc
 16421  018C  29B3               	goto	i1l7087
 16422                           
 16423                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 16424  018D  0874               	movf	_DimmerLightsIntr,w
 16425  018E  0086               	movwf	6
 16426  018F  3001               	movlw	1	; select bank2/3
 16427  0190  0087               	movwf	7
 16428  0191  1081               	bcf	1,1
 16429                           
 16430                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 16431  0192  0874               	movf	_DimmerLightsIntr,w
 16432  0193  0086               	movwf	6
 16433  0194  3001               	movlw	1	; select bank2/3
 16434  0195  0087               	movwf	7
 16435  0196  1301               	bcf	1,6
 16436                           
 16437                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 16438  0197  0874               	movf	_DimmerLightsIntr,w
 16439  0198  3E09               	addlw	9
 16440  0199  0086               	movwf	6
 16441  019A  3001               	movlw	1	; select bank2/3
 16442  019B  0087               	movwf	7
 16443  019C  1501               	bsf	1,2
 16444                           
 16445                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 16446  019D  0873               	movf	_Dimmer,w
 16447  019E  0086               	movwf	6
 16448  019F  0187               	clrf	7
 16449  01A0  1401               	bsf	1,0
 16450                           
 16451                           ;Dimmer_B1.c: 169: if (lights == 1) {
 16452  01A1  087A               	movf	setDimmerLights_IntrControl@lights,w
 16453  01A2  3A01               	xorlw	1
 16454  01A3  1D03               	skipz
 16455  01A4  29A7               	goto	i1l7079
 16456                           
 16457                           ;Dimmer_B1.c: 170: RC7 = 0;
 16458  01A5  0020               	movlb	0	; select bank0
 16459  01A6  138E               	bcf	14,7	;volatile
 16460  01A7                     i1l7079:	
 16461                           
 16462                           ;Dimmer_B1.c: 172: }
 16463                           ;Dimmer_B1.c: 175: if (lights == 2) {
 16464  01A7  087A               	movf	setDimmerLights_IntrControl@lights,w
 16465  01A8  3A02               	xorlw	2
 16466  01A9  1D03               	skipz
 16467  01AA  29AD               	goto	i1l7083
 16468                           
 16469                           ;Dimmer_B1.c: 176: RA3 = 0;
 16470  01AB  0020               	movlb	0	; select bank0
 16471  01AC  118C               	bcf	12,3	;volatile
 16472  01AD                     i1l7083:	
 16473                           
 16474                           ;Dimmer_B1.c: 177: }
 16475                           ;Dimmer_B1.c: 180: if (lights == 3) {
 16476  01AD  087A               	movf	setDimmerLights_IntrControl@lights,w
 16477  01AE  3A03               	xorlw	3
 16478  01AF  1D03               	skipz
 16479  01B0  29B3               	goto	i1l7087
 16480                           
 16481                           ;Dimmer_B1.c: 181: RC6 = 0;
 16482  01B1  0020               	movlb	0	; select bank0
 16483  01B2  130E               	bcf	14,6	;volatile
 16484  01B3                     i1l7087:	
 16485                           ;Dimmer_B1.c: 182: }
 16486                           ;Dimmer_B1.c: 184: ;;
 16487                           
 16488                           
 16489                           ;Dimmer_B1.c: 185: }
 16490                           ;Dimmer_B1.c: 186: }
 16491                           ;Dimmer_B1.c: 187: }
 16492                           ;Dimmer_B1.c: 188: }
 16493                           ;Dimmer_B1.c: 189: }
 16494                           ;Dimmer_B1.c: 190: }
 16495                           ;Dimmer_B1.c: 191: }
 16496                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 16497  01B3  0874               	movf	_DimmerLightsIntr,w
 16498  01B4  3E08               	addlw	8
 16499  01B5  0086               	movwf	6
 16500  01B6  3001               	movlw	1	; select bank2/3
 16501  01B7  0087               	movwf	7
 16502  01B8  1E81               	btfss	1,5
 16503  01B9  29EA               	goto	i1l7109
 16504                           
 16505                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 16506  01BA  3001               	movlw	1
 16507  01BB  00F8               	movwf	??_setDimmerLights_IntrControl
 16508  01BC  0874               	movf	_DimmerLightsIntr,w
 16509  01BD  3E07               	addlw	7
 16510  01BE  0086               	movwf	6
 16511  01BF  3001               	movlw	1	; select bank2/3
 16512  01C0  0087               	movwf	7
 16513  01C1  0878               	movf	??_setDimmerLights_IntrControl,w
 16514  01C2  0781               	addwf	1,f
 16515                           
 16516                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 16517  01C3  0874               	movf	_DimmerLightsIntr,w
 16518  01C4  3E07               	addlw	7
 16519  01C5  0086               	movwf	6
 16520  01C6  3001               	movlw	1	; select bank2/3
 16521  01C7  0087               	movwf	7
 16522  01C8  3005               	movlw	5
 16523  01C9  0201               	subwf	1,w
 16524  01CA  1C03               	skipc
 16525  01CB  29EA               	goto	i1l7109
 16526                           
 16527                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 16528  01CC  0874               	movf	_DimmerLightsIntr,w
 16529  01CD  3E07               	addlw	7
 16530  01CE  0086               	movwf	6
 16531  01CF  3001               	movlw	1	; select bank2/3
 16532  01D0  0087               	movwf	7
 16533  01D1  0181               	clrf	1
 16534                           
 16535                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 16536  01D2  0874               	movf	_DimmerLightsIntr,w
 16537  01D3  3E08               	addlw	8
 16538  01D4  0086               	movwf	6
 16539  01D5  3001               	movlw	1	; select bank2/3
 16540  01D6  0087               	movwf	7
 16541  01D7  1281               	bcf	1,5
 16542                           
 16543                           ;Dimmer_B1.c: 199: if (lights == 1) {
 16544  01D8  087A               	movf	setDimmerLights_IntrControl@lights,w
 16545  01D9  3A01               	xorlw	1
 16546  01DA  1D03               	skipz
 16547  01DB  29DE               	goto	i1l7101
 16548                           
 16549                           ;Dimmer_B1.c: 200: RB4 = 0;
 16550  01DC  0020               	movlb	0	; select bank0
 16551  01DD  120D               	bcf	13,4	;volatile
 16552  01DE                     i1l7101:	
 16553                           ;Dimmer_B1.c: 201: ;;
 16554                           
 16555                           
 16556                           ;Dimmer_B1.c: 202: }
 16557                           ;Dimmer_B1.c: 205: if (lights == 2) {
 16558  01DE  087A               	movf	setDimmerLights_IntrControl@lights,w
 16559  01DF  3A02               	xorlw	2
 16560  01E0  1D03               	skipz
 16561  01E1  29E4               	goto	i1l7105
 16562                           
 16563                           ;Dimmer_B1.c: 206: RA7 = 0;
 16564  01E2  0020               	movlb	0	; select bank0
 16565  01E3  138C               	bcf	12,7	;volatile
 16566  01E4                     i1l7105:	
 16567                           
 16568                           ;Dimmer_B1.c: 207: }
 16569                           ;Dimmer_B1.c: 210: if (lights == 3) {
 16570  01E4  087A               	movf	setDimmerLights_IntrControl@lights,w
 16571  01E5  3A03               	xorlw	3
 16572  01E6  1D03               	skipz
 16573  01E7  29EA               	goto	i1l7109
 16574                           
 16575                           ;Dimmer_B1.c: 211: RB1 = 0;
 16576  01E8  0020               	movlb	0	; select bank0
 16577  01E9  108D               	bcf	13,1	;volatile
 16578  01EA                     i1l7109:	
 16579                           
 16580                           ;Dimmer_B1.c: 212: }
 16581                           ;Dimmer_B1.c: 214: }
 16582                           ;Dimmer_B1.c: 215: }
 16583                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 16584  01EA  0874               	movf	_DimmerLightsIntr,w
 16585  01EB  3E09               	addlw	9
 16586  01EC  0086               	movwf	6
 16587  01ED  3001               	movlw	1	; select bank2/3
 16588  01EE  0087               	movwf	7
 16589  01EF  1E81               	btfss	1,5
 16590  01F0  0008               	return
 16591                           
 16592                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 16593  01F1  3001               	movlw	1
 16594  01F2  00F8               	movwf	??_setDimmerLights_IntrControl
 16595  01F3  0874               	movf	_DimmerLightsIntr,w
 16596  01F4  3E0A               	addlw	10
 16597  01F5  0086               	movwf	6
 16598  01F6  3001               	movlw	1	; select bank2/3
 16599  01F7  0087               	movwf	7
 16600  01F8  0878               	movf	??_setDimmerLights_IntrControl,w
 16601  01F9  0781               	addwf	1,f
 16602                           
 16603                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 16604  01FA  0874               	movf	_DimmerLightsIntr,w
 16605  01FB  3E0A               	addlw	10
 16606  01FC  0086               	movwf	6
 16607  01FD  3001               	movlw	1	; select bank2/3
 16608  01FE  0087               	movwf	7
 16609  01FF  0801               	movf	1,w
 16610  0200  3A46               	xorlw	70
 16611  0201  1D03               	skipz
 16612  0202  0008               	return
 16613                           
 16614                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 16615  0203  0874               	movf	_DimmerLightsIntr,w
 16616  0204  3E0A               	addlw	10
 16617  0205  0086               	movwf	6
 16618  0206  3001               	movlw	1	; select bank2/3
 16619  0207  0087               	movwf	7
 16620  0208  0181               	clrf	1
 16621                           
 16622                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 16623  0209  0874               	movf	_DimmerLightsIntr,w
 16624  020A  3E09               	addlw	9
 16625  020B  0086               	movwf	6
 16626  020C  3001               	movlw	1	; select bank2/3
 16627  020D  0087               	movwf	7
 16628  020E  1281               	bcf	1,5
 16629  020F  0008               	return
 16630  0210                     __end_of_setDimmerLights_IntrControl:	
 16631                           
 16632                           	psect	text110
 16633  1144                     __ptext110:	
 16634 ;; *************** function _DimmerIntrPointSelect *****************
 16635 ;; Defined at:
 16636 ;;		line 72 in file "../src/Dimmer_B1.c"
 16637 ;; Parameters:    Size  Location     Type
 16638 ;;  lights          1    wreg     unsigned char 
 16639 ;; Auto vars:     Size  Location     Type
 16640 ;;  lights          1    1[COMMON] unsigned char 
 16641 ;; Return value:  Size  Location     Type
 16642 ;;		None               void
 16643 ;; Registers used:
 16644 ;;		wreg
 16645 ;; Tracked objects:
 16646 ;;		On entry : 0/0
 16647 ;;		On exit  : 0/0
 16648 ;;		Unchanged: 0/0
 16649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16652 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;Total ram usage:        2 bytes
 16655 ;; Hardware stack levels used:    1
 16656 ;; This function calls:
 16657 ;;		Nothing
 16658 ;; This function is called by:
 16659 ;;		_setDimmerLights_IntrControl
 16660 ;; This function uses a non-reentrant model
 16661 ;;
 16662                           
 16663                           
 16664                           ;psect for function _DimmerIntrPointSelect
 16665  1144                     _DimmerIntrPointSelect:	
 16666                           
 16667                           ;incstack = 0
 16668                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16669                           ;DimmerIntrPointSelect@lights stored from wreg
 16670  1144  00F7               	movwf	DimmerIntrPointSelect@lights
 16671                           
 16672                           ;Dimmer_B1.c: 74: if (lights == 1) {
 16673  1145  0877               	movf	DimmerIntrPointSelect@lights,w
 16674  1146  3A01               	xorlw	1
 16675  1147  1D03               	skipz
 16676  1148  294D               	goto	i1l820
 16677                           
 16678                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 16679  1149  303D               	movlw	_DimmerLights1& (0+255)
 16680  114A  00F6               	movwf	??_DimmerIntrPointSelect
 16681  114B  0876               	movf	??_DimmerIntrPointSelect,w
 16682  114C  00F4               	movwf	_DimmerLightsIntr
 16683  114D                     i1l820:	
 16684                           
 16685                           ;Dimmer_B1.c: 76: }
 16686                           ;Dimmer_B1.c: 79: if (lights == 2) {
 16687  114D  0877               	movf	DimmerIntrPointSelect@lights,w
 16688  114E  3A02               	xorlw	2
 16689  114F  1D03               	skipz
 16690  1150  2955               	goto	i1l821
 16691                           
 16692                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 16693  1151  304C               	movlw	_DimmerLights2& (0+255)
 16694  1152  00F6               	movwf	??_DimmerIntrPointSelect
 16695  1153  0876               	movf	??_DimmerIntrPointSelect,w
 16696  1154  00F4               	movwf	_DimmerLightsIntr
 16697  1155                     i1l821:	
 16698                           
 16699                           ;Dimmer_B1.c: 81: }
 16700                           ;Dimmer_B1.c: 85: if (lights == 3) {
 16701  1155  0877               	movf	DimmerIntrPointSelect@lights,w
 16702  1156  3A03               	xorlw	3
 16703  1157  1D03               	skipz
 16704  1158  0008               	return
 16705                           
 16706                           ;Dimmer_B1.c: 86: DimmerLightsIntr = &DimmerLights3;
 16707  1159  30C5               	movlw	_DimmerLights3& (0+255)
 16708  115A  00F6               	movwf	??_DimmerIntrPointSelect
 16709  115B  0876               	movf	??_DimmerIntrPointSelect,w
 16710  115C  00F4               	movwf	_DimmerLightsIntr
 16711  115D  0008               	return
 16712  115E                     __end_of_DimmerIntrPointSelect:	
 16713                           
 16714                           	psect	text111
 16715  1EF5                     __ptext111:	
 16716 ;; *************** function _IOC_ISR *****************
 16717 ;; Defined at:
 16718 ;;		line 298 in file "../src/MCU_B1.c"
 16719 ;; Parameters:    Size  Location     Type
 16720 ;;		None
 16721 ;; Auto vars:     Size  Location     Type
 16722 ;;		None
 16723 ;; Return value:  Size  Location     Type
 16724 ;;		None               void
 16725 ;; Registers used:
 16726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16727 ;; Tracked objects:
 16728 ;;		On entry : 0/0
 16729 ;;		On exit  : 0/0
 16730 ;;		Unchanged: 0/0
 16731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16736 ;;Total ram usage:        0 bytes
 16737 ;; Hardware stack levels used:    1
 16738 ;; Hardware stack levels required when called:    3
 16739 ;; This function calls:
 16740 ;;		_setDimmerReClock
 16741 ;; This function is called by:
 16742 ;;		_ISR
 16743 ;; This function uses a non-reentrant model
 16744 ;;
 16745                           
 16746                           
 16747                           ;psect for function _IOC_ISR
 16748  1EF5                     _IOC_ISR:	
 16749                           
 16750                           ;MCU_B1.c: 299: if (IOCIE == 1 && IOCBF2 == 1) {
 16751                           
 16752                           ;incstack = 0
 16753                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16754  1EF5  1D8B               	btfss	11,3	;volatile
 16755  1EF6  0008               	return
 16756  1EF7  0027               	movlb	7	; select bank7
 16757  1EF8  1D16               	btfss	22,2	;volatile
 16758  1EF9  0008               	return
 16759                           
 16760                           ;MCU_B1.c: 300: IOCBF2 = 0;
 16761  1EFA  1116               	bcf	22,2	;volatile
 16762                           
 16763                           ;MCU_B1.c: 301: IOCIF = 0;
 16764  1EFB  100B               	bcf	11,0	;volatile
 16765                           
 16766                           ;MCU_B1.c: 302: if (myMain.PowerON == 1) {
 16767  1EFC  0021               	movlb	1	; select bank1
 16768  1EFD  1C20               	btfss	_myMain^(0+128),0
 16769  1EFE  0008               	return
 16770                           
 16771                           ;MCU_B1.c: 304: setDimmerReClock();
 16772  1EFF  319E  26AD         	fcall	_setDimmerReClock
 16773  1F01  0008               	return
 16774  1F02                     __end_of_IOC_ISR:	
 16775                           
 16776                           	psect	text112
 16777  1EAD                     __ptext112:	
 16778 ;; *************** function _setDimmerReClock *****************
 16779 ;; Defined at:
 16780 ;;		line 170 in file "../src/MCU_B1.c"
 16781 ;; Parameters:    Size  Location     Type
 16782 ;;		None
 16783 ;; Auto vars:     Size  Location     Type
 16784 ;;		None
 16785 ;; Return value:  Size  Location     Type
 16786 ;;		None               void
 16787 ;; Registers used:
 16788 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16789 ;; Tracked objects:
 16790 ;;		On entry : 0/0
 16791 ;;		On exit  : 0/0
 16792 ;;		Unchanged: 0/0
 16793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16798 ;;Total ram usage:        0 bytes
 16799 ;; Hardware stack levels used:    1
 16800 ;; Hardware stack levels required when called:    2
 16801 ;; This function calls:
 16802 ;;		_setDimmerLights_IntrIOC_GO
 16803 ;; This function is called by:
 16804 ;;		_IOC_ISR
 16805 ;; This function uses a non-reentrant model
 16806 ;;
 16807                           
 16808                           
 16809                           ;psect for function _setDimmerReClock
 16810  1EAD                     _setDimmerReClock:	
 16811                           
 16812                           ;MCU_B1.c: 175: setDimmerLights_IntrIOC_GO(1);
 16813                           
 16814                           ;incstack = 0
 16815                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16816  1EAD  3001               	movlw	1
 16817  1EAE  3194  2432  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16818                           
 16819                           ;MCU_B1.c: 179: setDimmerLights_IntrIOC_GO(2);
 16820  1EB1  3002               	movlw	2
 16821  1EB2  3194  2432  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16822                           
 16823                           ;MCU_B1.c: 183: setDimmerLights_IntrIOC_GO(3);
 16824  1EB5  3003               	movlw	3
 16825  1EB6  3194  2432         	fcall	_setDimmerLights_IntrIOC_GO
 16826  1EB8  0008               	return
 16827  1EB9                     __end_of_setDimmerReClock:	
 16828                           
 16829                           	psect	text113
 16830  1432                     __ptext113:	
 16831 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16832 ;; Defined at:
 16833 ;;		line 28 in file "../src/Dimmer_B1.c"
 16834 ;; Parameters:    Size  Location     Type
 16835 ;;  lights          1    wreg     unsigned char 
 16836 ;; Auto vars:     Size  Location     Type
 16837 ;;  lights          1    2[COMMON] unsigned char 
 16838 ;; Return value:  Size  Location     Type
 16839 ;;		None               void
 16840 ;; Registers used:
 16841 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16842 ;; Tracked objects:
 16843 ;;		On entry : 0/0
 16844 ;;		On exit  : 0/0
 16845 ;;		Unchanged: 0/0
 16846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16850 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16851 ;;Total ram usage:        1 bytes
 16852 ;; Hardware stack levels used:    1
 16853 ;; Hardware stack levels required when called:    1
 16854 ;; This function calls:
 16855 ;;		_DimmerIntrIOCPointSelect
 16856 ;; This function is called by:
 16857 ;;		_setDimmerReClock
 16858 ;; This function uses a non-reentrant model
 16859 ;;
 16860                           
 16861                           
 16862                           ;psect for function _setDimmerLights_IntrIOC_GO
 16863  1432                     _setDimmerLights_IntrIOC_GO:	
 16864                           
 16865                           ;incstack = 0
 16866                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16867                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16868  1432  00F8               	movwf	setDimmerLights_IntrIOC_GO@lights
 16869                           
 16870                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16871  1433  0878               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16872  1434  3191  2193  3194   	fcall	_DimmerIntrIOCPointSelect
 16873                           
 16874                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 16875  1437  0021               	movlb	1	; select bank1
 16876  1438  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 16877  1439  0086               	movwf	6
 16878  143A  3001               	movlw	1	; select bank2/3
 16879  143B  0087               	movwf	7
 16880  143C  1801               	btfsc	1,0
 16881  143D  0008               	return
 16882  143E  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 16883  143F  3E09               	addlw	9
 16884  1440  0086               	movwf	6
 16885  1441  3001               	movlw	1	; select bank2/3
 16886  1442  0087               	movwf	7
 16887  1443  1A81               	btfsc	1,5
 16888  1444  0008               	return
 16889                           
 16890                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 16891  1445  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 16892  1446  0086               	movwf	6
 16893  1447  3001               	movlw	1	; select bank2/3
 16894  1448  0087               	movwf	7
 16895  1449  1401               	bsf	1,0
 16896                           
 16897                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 16898  144A  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 16899  144B  3E09               	addlw	9
 16900  144C  0086               	movwf	6
 16901  144D  3001               	movlw	1	; select bank2/3
 16902  144E  0087               	movwf	7
 16903  144F  1681               	bsf	1,5
 16904                           
 16905                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 16906  1450  0020               	movlb	0	; select bank0
 16907  1451  1D0D               	btfss	13,2	;volatile
 16908  1452  2C5A               	goto	i1l6603
 16909                           
 16910                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 16911  1453  0873               	movf	_Dimmer,w
 16912  1454  3E02               	addlw	2
 16913  1455  0086               	movwf	6
 16914  1456  0187               	clrf	7
 16915  1457  0181               	clrf	1
 16916  1458  0A81               	incf	1,f
 16917                           
 16918                           ;Dimmer_B1.c: 37: } else {
 16919  1459  0008               	return
 16920  145A                     i1l6603:	
 16921                           
 16922                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 16923  145A  0873               	movf	_Dimmer,w
 16924  145B  3E02               	addlw	2
 16925  145C  0086               	movwf	6
 16926  145D  0187               	clrf	7
 16927  145E  0181               	clrf	1
 16928  145F  0008               	return
 16929  1460                     __end_of_setDimmerLights_IntrIOC_GO:	
 16930                           
 16931                           	psect	text114
 16932  1193                     __ptext114:	
 16933 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16934 ;; Defined at:
 16935 ;;		line 8 in file "../src/Dimmer_B1.c"
 16936 ;; Parameters:    Size  Location     Type
 16937 ;;  lights          1    wreg     unsigned char 
 16938 ;; Auto vars:     Size  Location     Type
 16939 ;;  lights          1    1[COMMON] unsigned char 
 16940 ;; Return value:  Size  Location     Type
 16941 ;;		None               void
 16942 ;; Registers used:
 16943 ;;		wreg
 16944 ;; Tracked objects:
 16945 ;;		On entry : 0/0
 16946 ;;		On exit  : 0/0
 16947 ;;		Unchanged: 0/0
 16948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16951 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16952 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16953 ;;Total ram usage:        2 bytes
 16954 ;; Hardware stack levels used:    1
 16955 ;; This function calls:
 16956 ;;		Nothing
 16957 ;; This function is called by:
 16958 ;;		_setDimmerLights_IntrIOC_GO
 16959 ;; This function uses a non-reentrant model
 16960 ;;
 16961                           
 16962                           
 16963                           ;psect for function _DimmerIntrIOCPointSelect
 16964  1193                     _DimmerIntrIOCPointSelect:	
 16965                           
 16966                           ;incstack = 0
 16967                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16968                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16969  1193  00F7               	movwf	DimmerIntrIOCPointSelect@lights
 16970                           
 16971                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16972  1194  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 16973  1195  3A01               	xorlw	1
 16974  1196  1D03               	skipz
 16975  1197  299D               	goto	i1l808
 16976                           
 16977                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16978  1198  303D               	movlw	_DimmerLights1& (0+255)
 16979  1199  00F6               	movwf	??_DimmerIntrIOCPointSelect
 16980  119A  0876               	movf	??_DimmerIntrIOCPointSelect,w
 16981  119B  0021               	movlb	1	; select bank1
 16982  119C  00D2               	movwf	_DimmerLightsIntrIOC^(0+128)
 16983  119D                     i1l808:	
 16984                           
 16985                           ;Dimmer_B1.c: 12: }
 16986                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16987  119D  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 16988  119E  3A02               	xorlw	2
 16989  119F  1D03               	skipz
 16990  11A0  29A6               	goto	i1l809
 16991                           
 16992                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16993  11A1  304C               	movlw	_DimmerLights2& (0+255)
 16994  11A2  00F6               	movwf	??_DimmerIntrIOCPointSelect
 16995  11A3  0876               	movf	??_DimmerIntrIOCPointSelect,w
 16996  11A4  0021               	movlb	1	; select bank1
 16997  11A5  00D2               	movwf	_DimmerLightsIntrIOC^(0+128)
 16998  11A6                     i1l809:	
 16999                           
 17000                           ;Dimmer_B1.c: 17: }
 17001                           ;Dimmer_B1.c: 21: if (lights == 3) {
 17002  11A6  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17003  11A7  3A03               	xorlw	3
 17004  11A8  1D03               	skipz
 17005  11A9  0008               	return
 17006                           
 17007                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 17008  11AA  30C5               	movlw	_DimmerLights3& (0+255)
 17009  11AB  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17010  11AC  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17011  11AD  0021               	movlb	1	; select bank1
 17012  11AE  00D2               	movwf	_DimmerLightsIntrIOC^(0+128)
 17013  11AF  0008               	return
 17014  11B0                     __end_of_DimmerIntrIOCPointSelect:	
 17015  007E                     btemp	set	126	;btemp
 17016  007E                     pic14e$flags	set	126
 17017  007E                     wtemp	set	126
 17018  007E                     wtemp0	set	126
 17019  0080                     wtemp1	set	128
 17020  0082                     wtemp2	set	130
 17021  0084                     wtemp3	set	132
 17022  0086                     wtemp4	set	134
 17023  0088                     wtemp5	set	136
 17024  007F                     wtemp6	set	127
 17025  007E                     ttemp	set	126
 17026  007E                     ttemp0	set	126
 17027  0081                     ttemp1	set	129
 17028  0084                     ttemp2	set	132
 17029  0087                     ttemp3	set	135
 17030  007F                     ttemp4	set	127
 17031  007E                     ltemp	set	126
 17032  007E                     ltemp0	set	126
 17033  0082                     ltemp1	set	130
 17034  0086                     ltemp2	set	134
 17035  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         232
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80     75      78
    BANK1            80      0      78
    BANK2            80      4      80
    BANK3            80      0      70
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK3[9]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK2[4]), VarLED2(BANK2[4]), 
		 -> VarLED1(BANK1[4]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw3(BANK1[2]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _setSw_Enable->_SwPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  111871
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2130
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     186
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   30056
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   30056
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0   13168
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12581
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    2053
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1098
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1098
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   38719
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   38719
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37776
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1913
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35863
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14899
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1741
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15284
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15067
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14974
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     279
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     279
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1253
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1253
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13413
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0   13246
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8910
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1897
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1067
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     167
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0     124
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0     124
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13928
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13928
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     883
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     987
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0     124
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0     124
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     374
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     286
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Oct 27 11:12:21 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0076  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1289                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 10D2               _getDimmerLights_StatusFlag 10BE  
                 __end_of_setDelayOff_GO 08D0                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 0E1A                             ___ftadd@sign 0048  
                                    l110 17D8                                      l120 1701  
                                    l112 17EC                                      l121 16FD  
                                    l122 16EB                                      l124 16FB  
                                    l402 1316                                      l308 0C42  
                                    l309 0C85                                      l283 09CE  
                                    l358 10B4                                      l359 10B5  
                                    l867 1182                                      l868 118A  
                                    _GIE 005F                                      _CRC 00CE  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0021                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0070                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC6 0076                                      _RC7 0077  
                                    _RF1 00BE                                      _ISR 0004  
                                    _WDT 00CC                                      _Sw1 015B  
                                    _Sw2 01D4                                      _Sw3 01DD  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 10BE  
                  _Buzzer_Initialization 1E3B                          __end_of_ADC_Set 1E6C  
                        ?_DelayTimejudge 0076                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0C8B  
                  _setDimmerLights_AdjRF 12EE                    _setDimmerLights_AdjGo 1F9B  
                                   ?_ISR 0076                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1F02                             ___ftdiv@sign 003D  
                                   l2212 04AD                                     l2213 04A9  
                                   l3023 091A                                     l2215 04EA  
                                   l2207 0475                                     l1440 1488  
                                   l3017 0903                 ?_DimmerLightsPointSelect 0076  
                                   l1427 1226                                     l1611 158C  
                                   l2261 14BE                                     l3046 03FF  
                                   l2246 0A0A                                     l2256 0A60  
                                   l1449 1670                                     l1626 15EF  
                                   l2283 1233                                     l2284 123D  
                        __end_of_IOC_Set 1073                                     l2713 0DC7  
                                   l2298 151C                                     l2655 1F3E  
                                   l2737 0968                                     l2687 0242  
                                   l8001 11C4                                     l5603 08E0  
                                   l8101 1798                                     l5613 0908  
                                   l5605 08EA                                     l5615 0910  
                                   l5607 08EF                                     l8105 17A0  
                                   l5721 0ED5                                     l8041 1342  
                                   l5705 043E                                     l8017 13D8  
                                   l5715 0EBF                                     l8061 11E1  
                                   l8045 134B                                     l8301 0C10  
                                   l5645 0388                                     l5743 0F2F  
                                   l5735 0F16                                     l5807 0D22  
                                   l5655 039E                                     l8223 08A6  
                                   l8073 175E                                     l5841 0D87  
                                   l5833 0D6D                                     l5825 0D52  
                                   l8057 11D8                                     l8049 1354  
                                   l9113 0E31                                     l5673 03CB  
                                   l5649 038F                                     l8233 08C5  
                                   l8091 177D                                     l5835 0D76  
                                   l5827 0D60                                     l8251 0BB9  
                                   l9115 0E34                                     l5691 0411  
                                   l5675 03D5                                     l5667 03B8  
                                   l5763 06E3                                     l8227 08AC  
                                   l5837 0D79                                     l8157 0B2A  
                                   l9125 0E42                                     l5685 03F1  
                                   l5677 03DA                                     l5757 06CD  
                                   l8317 14CE                                     l8229 08B9  
                                   l8079 1769                                     l5599 08D9  
                                   l8255 0BBF                                     l8263 0BCB  
                                   l9127 0E45                                     l5695 0423  
                                   l5687 03FB                                     l5679 03DE  
                                   l5791 0742                                     l5775 071E  
                                   l8423 07C2                                     l9303 0468  
                                   l8097 178F                                     l8089 1771  
                                   l8273 0BDB                                     l8281 0BE7  
                                   l9137 0E51                                     l8601 09E4  
                                   l8409 0788                                     l8259 0BC5  
                                   l9147 0E74                                     l9139 0E56  
                                   l9251 1650                                     l5787 073A  
                                   l5779 0726                                     l8419 07AC  
                                   l8461 113C                                     l8293 0C04  
                                   l8277 0BE1                                     l8269 0BD5  
                                   l9149 0E7A                                     l9245 163B  
                                   l9181 173E                                     l8365 1109  
                                   l8621 0C21                                     l8605 09EA  
                                   l9325 048C                                     l9405 1F43  
                                   l9421 0229                                     l9511 16D5  
                                   l8455 1133                                     l8711 10CB  
                                   l9159 0EA2                                     l8367 110D  
                                   l8471 12D5                                     l8447 150A  
                                   l8551 0FEE                                     l8543 0FDC  
                                   l8535 0FCA                                     l8457 1136  
                                   l8297 0C0A                                     l8289 0BFE  
                                   l9185 1745                                     l8473 12D8  
                                   l8625 0C27                                     l8529 0FAF  
                                   l9361 04CF                                     l9409 1F49  
                                   l9441 0270                                     l9425 0236  
                                   l8723 1547                                     l8619 0C1E  
                                   l8627 0C2A                                     l8555 0FF7  
                                   l8547 0FE5                                     l8539 0FD3  
                                   l9363 04D1                                     l9451 029D  
                                   l9189 174C                                     l8477 12DE  
                                   l8653 0C53                                     l8637 0C3F  
                                   l8573 09A5                                     l8821 0A25  
                  _myMain_Initialization 1F4C                                     l8399 0CDD  
                                   l8655 0C6B                                     l8639 0C39  
                                   l8591 09D4                                     l8567 099C  
                                   l8831 0A4B                                     l9391 0520  
                                   l8593 09D7                                     l8569 099F  
                                   l8809 0A0D                                     l9465 02DB  
                                   l8691 1279                                     l8667 0C87  
                                   l8587 09B6                                     l9379 04FF  
                                   l8915 0943                                     l9475 030D  
                                   l8677 1327                                     l8685 1270  
                                   l7957 12B5                                     l8597 09DD  
                                   l8837 0A56                                     l8917 0946  
                                   l8679 1332                                     l8687 1273  
                                   l9583 05A4                                     l8599 09E1  
                                   l7983 107C                                     l8927 0954  
                                   l8855 0DA2                                     l8769 1470  
                                   l8929 0957                                     l8857 0DA5  
                                   l9665 15D8                                     _CFGS 0CAE  
                                   l7979 1076                                     l8939 0963  
                                   l8867 0DB3                                     l7997 11BB  
                                   l8869 0DB6                                     l8983 1615  
                                   l8879 0DC2                             __CFG_WDTE$ON 0000  
                                   l8993 1625                                     l8985 1618  
                                   l8969 0B85                                     l8995 1628  
                                   l8899 0E08                                     l8989 161E  
                                   l8999 162E                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4015 0921  
                                   u4135 03B9                                     u4305 0EF7  
                                   u4225 03F2                                     u4315 0F17  
                                   u4325 0F26                                     u4165 03CC  
                                   u4405 0727                                     u4335 0F30  
                                   u4415 072D                                     u4515 0D53  
                                   u4195 03DF                                     _PEIE 005E  
                                   u4445 0743                                     u4295 0EE7  
                                   u4455 0749                                     u4375 06EF  
                                   u4545 0D6E                                     u4385 06FF  
                                   u4485 0D29                                     u3945 08E5  
                                   u8045 1774                                     u3965 08FE  
                                   u8150 0AD8                                     u8065 177E  
                                   u3985 090B                                     u8075 1788  
                                   u8155 0AD6                                     u8085 1790  
                                   u8455 10E1                                     u7935 13C4  
                                   _LWLO 0CAD                                     _RFSW 00D3  
                                   u8895 131C                                     u9855 0486  
                                   _TMR0 0015                                     u9985 0510  
                                   _RSSI 00D4                                     _WREN 0CAA  
                                   _Buz1 00B2                                     _main 156E  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0ACE  
                        __end_of_RF_Main 1E44                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1EA2                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1EAD  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1531                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 007B                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 001A  
                       __end_of_LED_Main 1F9B            __end_of_DimmerIntrPointSelect 115E  
                  ?_setDimmerLights_Main 0076                          ?_setDelayOff_GO 002A  
                                  ?_main 016C                          __end_of___awdiv 17A7  
                        __end_of___ftadd 0456                          __end_of___ftdiv 0F51  
                                  u10245 16CB                          __end_of___ftmul 076A  
                                  u10405 15C0                                    u10415 15E7  
                        ___awdiv@divisor 0020                                    u10365 121D  
                        __end_of___fttol 0D90             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l820 114D  
                                  i1l821 1155                                    i1l808 119D  
                                  i1l809 11A6                   _setDimmerLights_Switch 1F5B  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EB                                    _RFSW2 00EC  
                                  _RFSW3 00ED                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0076                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 10E7  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1460  
             _setDimmerLights_IntrIOC_GO 1432                         __end_of_TMR0_ISR 1405  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR0_Set 1E74  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0077  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1097  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0076                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1FCC                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0076                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                     _Sw_DimmerOnFunc$6120 0063  
                   _Sw_DimmerOnFunc$6121 0064                     _Sw_DimmerOnFunc$6122 0065  
                     _setRF_DimmerLights 0ACE              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0076               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 000C  
                           ?_my_MainTime 0076                setDimmerLights_Main@clear 0069  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0816  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0076                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 15AF  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1E54  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D09                     _setSw_Initialization 1E74  
                                 ??_main 006B                            ___fttol@sign1 0053  
                           ?_setLog_Code 0076                  _setControl_Lights_Table 0F51  
                 ?_Buzzer_Initialization 0076        __size_of_DimmerIntrIOCPointSelect 001D  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0076                                ??_IOC_ISR 0079  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1193  
                 ?_setDimmerLights_AdjRF 0076                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                ??_Switch_Initialization 0024                     ??_setRF_DimmerLights 005E  
                            _DlyOff_Main 0A63                   ?_myMain_Initialization 0076  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 12CC  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0931  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1F6B  
                                 i1l7101 01DE                                   i1l7013 0098  
                                 i1l7021 00A5                                   i1l7105 01E4  
                                 i1l7041 00F5                                   i1l7017 009E  
                                 i1l7109 01EA                                   i1l7053 012A  
                                 i1l7061 0155                                   i1l7045 0108  
                                 i1l7039 00EF                                   i1l7047 010E  
                                 i1l7057 0141                                   i1l6603 145A  
                                 i1l7083 01AD                                   i1l7067 0170  
                                 i1l7069 0176                                   i1l7079 01A7  
                                 i1l7087 01B3                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u633_25 0073  
                                 _OSCCON 0099                                   u747_25 13FE  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1113                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1E59  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 10FC  
                                 _Dimmer 0073                                   _DlySw1 00E5  
                                 _DlySw2 00E7                                   _DlySw3 00E9  
             __end_of_Mcu_Initialization 2000                      __end_of_Buzzer_Main 1708  
                                 _Memory 01A0                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1FBB               _setDimmerLights_TriggerAdj 1FAB  
                                 ___bmul 1073            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 001D                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0076  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D8                                   _s_data 00D9  
                                 _setLED 0BA9                                   _myMain 00A0  
              _setDimmerLights_Main$2417 0067                _setDimmerLights_Main$2409 0066  
              _setDimmerLights_Main$2418 0068                         _DimmerLightsIntr 0074  
                  ?_setSw_Initialization 0076                    setDimmerLights@status 0023  
                       ___awdiv@quotient 0027                                   _setBuz 17A7  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0076  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
    __end_of_setDimmerLights_IntrControl 0210              _setDimmerLights_IntrControl 0045  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0076                    __end_of_SwPointSelect 11EA  
                          ?_setRF_Enable 0076                          _RfSWPointSelect 1228  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 007A  
            __size_of_DimmerLights_Close 0013                  __size_of_LedPointSelect 0026  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1F3D                        ?_Sw_DimmerAdjFunc 0076  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0871         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0041              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0076                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0076                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0076  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0076  
         DimmerIntrIOCPointSelect@lights 0077                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1248                                ?_TMR0_ISR 0076  
                              ?_TMR0_Set 0076             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1F7B                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0076  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0023  
                              ?_WDT_Main 0076                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1E59                 __end_of_setDimmerReClock 1EB9  
                     __size_of_getRxData 0069                      ?_LED_Initialization 0076  
                      ?_CC2500_WriteByte 0076                           ??_setRF_Enable 0020  
                         _DimmerLights11 00CF                           _DimmerLights22 00D0  
                         _DimmerLights33 00D1                     __size_of_setLED_Main 004B  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 006B  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0076  
                            _Buzzer_Main 16BE                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0076                                  ?_IO_Set 0076  
                             ??_LED_Main 0024                            ?_setMemory_GO 0076  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1EC5  
                          ??_Switch_Main 006B                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0024  
                           _DimmerLights 006B                        LedPointSelect@led 0020  
                 __size_of_DelayOff_Main 000C                     __size_of_setRF_Learn 0008  
                            setBuz@count 002C                               __pmaintext 156E  
                    _CC2500_WriteCommand 112B                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 001B                         ??_setDelayOff_GO 002C  
                   __size_of_my_MainTime 0042            ??_DimmerLights_Initialization 0024  
                             ??_TMR0_ISR 007B                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0023  
                          ?_setSw_Enable 0076                       __size_of_setTxData 00BD  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0028  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1E65                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 1EAD  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 14F6  
                __end_of_RfSWPointSelect 1248                        Sw_DimmerOnFunc@sw 0067  
                                _IOC_ISR 1EF5                                  _IOC_Set 1066  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0076  
                      _Flash_Memory_Main 1209                        _Flash_Memory_Read 115E  
            ?_setDimmerLights_IntrIOC_GO 0076                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065                      ?_setRFSW_AdjControl 0076  
                                _RF_Data 0120                                  _RF_Main 1E41  
                     ?_Flash_Memory_Main 0076                       ?_Flash_Memory_Read 0076  
                                _WDT_Set 1E97          __end_of_setControl_Lights_Table 1000  
                             ??_Fosc_Set 0020                              ?_TouchPower 0076  
                        _Sw_DimmerOnFunc 0D90                          _setPercentValue 1678  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0076  
                                _Dimmer1 00E2             __end_of_CC2500_FrequencyCabr 1EC5  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1FDD  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00DE                                  _VarLED2 0164  
                                _VarLED3 0168                        __end_of_getRxData 0A63  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 11B0  
        __end_of_setDimmerLights_Trigger 1F7B                     ??_setRFSW_AdjControl 0064  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1F6B  
                                ___awdiv 1753                                  ___ftadd 0360  
                         ??_setSw_Enable 0022                                  ___ftdiv 0EA8  
                                ___ftmul 06B6                                  ___fttol 0D09  
                    __end_of_Switch_Main 1EF5                  ??_Buzzer_Initialization 0020  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0071                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 15AF                                  __ptext2 135D  
                                __ptext3 1F02                                  __ptext4 1F4C  
                                __ptext5 1085                                  __ptext6 0002  
                                __ptext7 1EE9                                  __ptext8 0210  
                                __ptext9 1E7C                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0066                    _DimmerIntrPointSelect 1144  
                           __size_of_ISR 000F                __end_of_Flash_Memory_Main 1228  
              __end_of_Flash_Memory_Read 1178                               _setRF_Main 0456  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1ED1  
                      _DimmerLights_Main 1F2E           __size_of_DlyOff_Initialization 000A  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1E97  
             __end_of_CC2500_ClearRXFIFO 1E48               __end_of_CC2500_ClearTXFIFO 1E4C  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0076  
                     ?_DimmerLights_Main 0076                                  _product 006D  
                         _LedPointSelect 1337                      _DelayOffPointSelect 11B0  
                                clrloop0 07FB           __size_of_Switch_Initialization 0011  
          __end_of_Switch_Initialization 1FEE                     end_of_initialization 0041  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1386  
                          _DelayTime_1us 1311                        __end_of_setTxData 06B6  
             __end_of_Flash_Memory_Write 148F                                  init_ram 1E5F  
                     ?_CC2500_InitSetREG 0076                      ??_DimmerLights_Main 006B  
                   Flash_Memory_Read@ret 0023                                  initloop 1E60  
                             _setSw_Main 0210                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 12CC                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1FBB                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0076                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0C1A  
                          _CC2500_TxData 0995                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1F10              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0076  
                    _Flash_Memory_Modify 1634                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1E84                      ??_CC2500_ReadStatus 0022  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0023  
                 setSw_Initialization@sw 0023                __end_of_DimmerLights_Main 1F3D  
                     _Mcu_Initialization 1FEE                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0076                         ?_RfSWPointSelect 0076  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 135D  
                __end_of_Sw_DimmerOnFunc 0E1A                  __end_of_setPercentValue 16BE  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 13B0  
                    ?_Mcu_Initialization 0076                     ?_Flash_Memory_Modify 0076  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1531                     ?_Flash_Memory_Unlock 0076  
              __end_of_CC2500_ReadStatus 12EE                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 112B                     _setRF_Initialization 1EA2  
                            _Switch_Main 1EE9                        __size_of_LED_Main 0010  
                         ?_CC2500_RxData 0076                           ?_CC2500_TxData 0076  
                _DimmerLightsPointSelect 1178                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 10E7                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0076  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1085  
              __size_of_Sw_DimmerAdjFunc 0064                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1193                        __size_of_TMR0_ISR 002B  
                 ?_DimmerIntrPointSelect 0076                        __size_of_TMR0_Set 0008  
                   __end_of_setMemory_GO 0816            __size_of_setDimmerLights_Main 008E  
                         __end_of_setLED 0C1A                           __end_of_setBuz 1800  
        _getDimmerLights_StatusFlag$2453 0022                     _CC2500_FrequencyCabr 1EB9  
              __size_of_Sw_DimmerOffFunc 006F               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0076  
                        _setRFSW_Control 076A                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0076                      start_initialization 0015  
                      _setRF_DimmerValue 14C1                          ?_LedPointSelect 0076  
             __end_of_DimmerLights_Close 10AA                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0079  
                     ?_setRF_DimmerValue 0076               __end_of_CC2500_InitPATable 1209  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setSw_Enable 1386                             ?_Buzzer_Main 0076  
                     _set_TimeoutCleared 1E54                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 00DA  
                            ?_setSw_Main 0076                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0076                     __end_of_setSw_Status 1F2E  
                     Sw_DimmerAdjFunc@sw 0029                    ?_setRF_Initialization 0076  
                      __size_of_Fosc_Set 0004                  __size_of_setRFSW_Status 000F  
              __size_of_CC2500_WriteByte 0014                      ?_set_TimeoutCleared 0076  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D5  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 001D  
                              _Tx_Length 00D6                              __pdataBANK4 0220  
                               ??_setLED 0022                                 ?_ADC_Set 0076  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1E4C  
             __size_of_DimmerLights_Main 000F                __end_of_setRF_DimmerValue 14F6  
                  ?_CC2500_FrequencyCabr 0076                            ??_setLED_Main 0021  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0076                          _setRF_Main$5152 0068  
                            __pbssCOMMON 0070                                 ?_IOC_Set 0076  
                              ___latbits 0003                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0076                            __pcstackBANK0 0020  
                          __pcstackBANK2 016C                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0076                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 007E  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0076                                 ?_WDT_Set 0076  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 006B  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 013D  
                          _DimmerLights2 014C                            _DimmerLights3 01C5  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006D                            ??_my_MainTime 002D  
            __size_of_LED_Initialization 0010                   ?_CC2500_PowerOnInitial 0076  
                    __size_of_setRF_Main 00DC                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0076                                _getBuz_GO 1FCC  
    __end_of_Flash_Memory_Initialization 05F9              _Flash_Memory_Initialization 0532  
                               ?___awdiv 0020                                __ptext100 1E44  
                              __ptext101 112B                                __ptext110 1144  
                              __ptext102 1E54                                __ptext111 1EF5  
                              __ptext103 10D2                                __ptext112 1EAD  
                              __ptext104 10AA                                __ptext113 1432  
                              __ptext105 16BE                                __ptext114 1193  
                              __ptext106 1E3B                                __ptext108 13DA  
                              __ptext109 0045                                 ?___ftadd 003E  
                              _getRxData 09FA                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 07FA            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1E3E  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1F4C  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 0150             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1311            __end_of_setDimmerLights_AdjGo 1FAB  
                 CC2500_WriteByte@loop_a 0021                                _r_address 00D7  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1F5B                             _setRF_Enable 1F02  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 11CD  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 1753  
                    _DimmerLightsIntrIOC 00D2                   ??_setRF_Initialization 0020  
                      _CC2500_rfSettings 102F                                 _LED_Main 1F8B  
                        SwPointSelect@sw 0021                                clear_ram0 07FA  
               CC2500_InitPATable@loop_d 0027                                _setTxData 05F9  
    __end_of_DimmerLights_Initialization 12AA              _DimmerLights_Initialization 1289  
                     _CC2500_ClearRXFIFO 1E44                       _CC2500_ClearTXFIFO 1E48  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1E84  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003B                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 1460                               ?_getRxData 0076  
                               _TMR0_ISR 13DA                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR0_Set 1E6C  
                       _Sw_DimmerAdjFunc 0931                      ?_CC2500_ClearRXFIFO 0076  
                    ?_CC2500_ClearTXFIFO 0076                      __end_of_my_MainTime 15F1  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00CA  
            __end_of_CC2500_WriteCommand 1144                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1085                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0076                         _Sw_DimmerOffFunc 0B3A  
                  _Sw_DimmerAdjFunc$6132 0025                    _Sw_DimmerAdjFunc$6133 0026  
                  _Sw_DimmerAdjFunc$6134 0027                  __size_of_setDelayOff_GO 005F  
                  __size_of_setSw_Enable 0029                                 _DelayOff 0072  
                           setSw_Main@sw 006A         setDimmerLights_IntrIOC_GO@lights 0078  
                       __size_of_IOC_ISR 000D             ?_setDimmerLights_IntrControl 0076  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1EE9  
                         ?_SwPointSelect 0076                           setLED_Main@led 0023  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 14C1  
                  _DlyOff_Initialization 1E8D                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1E50                         __size_of_WDT_Set 000B  
                  _Switch_Initialization 1FDD                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0024                           _setRFSW_Status 1F10  
                           _setMemory_GO 0800                     __size_of_Buzzer_Main 004A  
                             ?_setTxData 0076                             ?_Switch_Main 0076  
             ??_DimmerIntrIOCPointSelect 0076                         _CC2500_WriteByte 10AA  
           Flash_Memory_Initialization@i 005E                        setRFSW_Control@sw 0063  
                              setLED@led 0022                  ??_DimmerIntrPointSelect 0076  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0076                         __size_of___ftdiv 00A9  
                           _setSw_Enable 135D                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 12AA  
                       ??_LedPointSelect 0020                                 ___ftpack 08D0  
                           _setSw_Status 1F1F                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1708  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0B3A  
               ?_DelayOff_Initialization 0076                         setDelayOff_GO@sw 002E  
                               __ptext10 0D90                                 __ptext11 0B3A  
                               __ptext20 09FA                                 __ptext12 0931  
                               __ptext21 148F                                 __ptext13 1FAB  
                               __ptext30 0816                                 __ptext22 0F51  
                               __ptext14 1F9B                                 __ptext31 06B6  
                               __ptext23 076A                                 __ptext15 1FDD  
                               __ptext40 1FEE                                 __ptext32 0360  
                               __ptext24 0871                                 __ptext16 1E74  
                               __ptext41 1E97                                 __ptext33 1FCC  
                               __ptext25 13B0                                 __ptext17 1F3D  
                               __ptext50 1FBB                                 __ptext42 1E6C  
                               __ptext34 0995                                 __ptext26 1073  
                               __ptext18 1E41                                 __ptext51 1209  
                               __ptext43 1113                                 __ptext35 0C1A  
                               __ptext27 14F6                                 __ptext19 0456  
                               __ptext60 1531                                 __ptext52 1634  
                               __ptext44 1066                                 __ptext36 12CC  
                               __ptext28 14C1                                 __ptext61 0C8B  
                               __ptext53 1EDD                                 __ptext45 1E50  
                               __ptext37 10FC                                 __ptext29 12EE  
                               __ptext70 1ED1                                 __ptext62 0BA9  
                               __ptext54 0532                                 __ptext46 1E65  
                               __ptext38 1E3E                                 __ptext71 0A63  
                               __ptext63 1337                                 __ptext55 1460  
                               __ptext47 1F8B                                 __ptext39 1EA2  
                               __ptext80 08D0                                 __ptext72 05F9  
                               __ptext64 1097                                 __ptext56 1E84  
                               __ptext48 1708                                 __ptext81 1F10  
                               __ptext73 1F1F                                 __ptext65 0800  
                               __ptext57 115E                                 __ptext49 1F7B  
                               __ptext90 11B0                                 __ptext82 1228  
                               __ptext74 11CD                                 __ptext66 10BE  
                               __ptext58 1F2E                                 __ptext91 10E7  
                               __ptext83 1F6B                                 __ptext75 0ACE  
                               __ptext67 1289                                 __ptext59 0E1A  
                               __ptext92 1E4C                                 __ptext84 1F5B  
                               __ptext76 1678                                 __ptext68 1405  
                               __ptext93 15F1                                 __ptext85 1178  
                               __ptext77 0D09                                 __ptext69 1E59  
                               __ptext94 1386                                 __ptext86 17A7  
                               __ptext78 0EA8                                 __ptext95 11EA  
                               __ptext87 1753                                 __ptext79 12AA  
                               __ptext96 1268                                 __ptext88 1EC5  
                               __ptext97 1EB9                                 __ptext89 1E8D  
                               __ptext98 1311                                 __ptext99 1E48  
                               __product 0220            ??_setDimmerLights_IntrControl 0078  
                ??_setLED_Initialization 0023                 __size_of_RfSWPointSelect 0020  
         __size_of_Dimmer_Initialization 0006                   __end_of_setRFSW_Status 1F1F  
          __end_of_Dimmer_Initialization 1E5F             __end_of_setDimmerLights_Main 0EA8  
                           ??_setSw_Main 0068                            setLED@command 0021  
                          __size_of_main 0041                              _setRF_Learn 1E7C  
               __end_of_CC2500_SIDLEMode 1E50               setDimmerLights_Main@lights 006A  
            __end_of_DelayOffPointSelect 11CD               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1097                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000C                          _CC2500_ReadByte 10FC  
                            _my_MainTime 15AF                       _CC2500_InitPATable 11EA  
    __size_of_getDimmerLights_StatusFlag 0014            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0532                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0076  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 016C  
                               main@argv 016E                      ?_CC2500_InitPATable 0076  
                        _CC2500_PowerRST 15F1              __end_of_Flash_Memory_Modify 1678  
                      ??_getPercentValue 0059                              _setLog_Code 148F  
            __end_of_Flash_Memory_Unlock 1E8D                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1268                       __end_of_setSw_Main 0360  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0076  
                         _DelayTimejudge 13B0                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0078  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0076                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1432  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1405  
            __end_of_setDimmerLights_Adj 156E                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1E3E  
   __size_of_setDimmerLights_IntrControl 01CB                     _Flash_Memory_Erasing 1EDD  
                     ?_RF_Initialization 0076                               _SPI0Buffer 0075  
        __end_of_DelayOff_Initialization 1ED1      __size_of_setDimmerLights_IntrIOC_GO 002E  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1EDD                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 0871         __size_of_setControl_Lights_Table 00AF  
                 __end_of_DelayTimejudge 13DA     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 1337                 __end_of_Sw_DimmerAdjFunc 0995  
                __end_of_CC2500_ReadByte 1113             __end_of_setSw_Initialization 1E7C  
                        _Timeout_Counter 10D2                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1F8B         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 008A                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1E41  
               __end_of_Sw_DimmerOffFunc 0BA9          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0C8B  
                  __end_of_CC2500_TxData 09FA                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1634  
